With timestamps:

00:00 - hi everyone i'm six and i'm happy to be
00:02 - sharing this walkthrough with you
00:04 - i learned web dev myself through free
00:06 - code cap three years ago and back then i
00:08 - actually struggled a lot with getting my
00:10 - projects online at first through cloud9
00:12 - and then heroku and i only found netlify
00:14 - a year later and realize that deploying
00:16 - and scaling is a lot easier with the jab
00:17 - stack approach especially with modern
00:19 - front end frameworks like react and vue
00:21 - so this is the video series i wish i had
00:24 - when i started it out i hope you enjoy
00:27 - so i kind of break down the overall
00:28 - structure of these series into nine
00:30 - parts don't worry they're not all
00:32 - equally long but we're going to start
00:34 - with the main ones first the ones that
00:35 - you really need to know so we'll talk
00:37 - about nullify edge and how nullify is
00:38 - actually a cdn first hosting solution
00:41 - and that's why it's fast and secure and
00:44 - how we can upload and deploy without
00:46 - using any of the other functionality of
00:48 - nullify just deploying straight to the
00:50 - cdn next we'll look into netlify build
00:53 - and how netlify hooks up to your git
00:56 - repos and continuously deploys from them
00:58 - so you have version control for your
01:00 - sites but also it helps you generate
01:03 - your sites from static site generators
01:04 - for maximum performance we understand
01:07 - the build process especially how to
01:08 - debug it as well as to manage the build
01:11 - environment with environment variables
01:12 - as well as inject your tokens and
01:14 - secrets at build time
01:16 - then we'll talk about nullified dev
01:18 - which helps you develop locally so you
01:20 - don't even have to deploy this is
01:22 - entirely within your local machine and
01:24 - the and the idea is to make it a lot
01:26 - easier to test serverless functions
01:28 - together with your local dev environment
01:30 - with hot reloading as well as anything
01:32 - else that you might need to simulate
01:34 - your real production environment then
01:36 - we'll take a look at netlify forms and
01:38 - this covers the use case where you think
01:41 - you may need a server but actually you
01:43 - just want to have some basic form
01:45 - submission capability like a comment
01:47 - system people leaving a contact form or
01:51 - even file uploads and then you want to
01:52 - do some basic automation with that with
01:55 - zapier or serverless function or other
01:57 - sort of web hooks
01:58 - and we'll show you how to do that in
02:00 - simple html as well as single page apps
02:03 - and static site generators
02:05 - then we're going to take a look at
02:06 - netlify identity which helps you add
02:08 - authentication and authorization to your
02:10 - site and this can be very useful for
02:12 - apps and e-commerce solutions and in
02:14 - particular you can use a dropping widget
02:15 - so you don't have to code up the ui or
02:17 - you can use something lower level that
02:19 - actually gives you the core
02:20 - functionality and you can code your ui
02:22 - on top of it we'll also talk about
02:23 - authenticated functions and how netlify
02:25 - identity and serverless functions works
02:27 - work really well together as well as
02:29 - other things that you might want to do
02:30 - some of the people that you're working
02:32 - with might actually be non-technical
02:34 - users and you might want to edit content
02:36 - without going straight into source code
02:38 - and that's why netlify has a very
02:40 - wonderful open source project called nfi
02:41 - cms and we'll talk about how to set it
02:43 - up as well as what it does so you can
02:45 - evaluate for yourself if you want to use
02:47 - it or use any of the other hello cmss
02:49 - out there we're then going to talk about
02:51 - nullify add-ons which are all the other
02:53 - functionality of nullify that doesn't
02:54 - really fit in the other buckets above
02:57 - but are still very useful and you might
02:58 - want to use them on certain occasions
03:00 - and in particular i want to shout out
03:02 - nullify and analytics which are
03:04 - unblockable server-side analytics that
03:06 - would be very useful for your site as
03:07 - well as the add-on marketplace where
03:09 - nullify is starting to have add-on
03:10 - partners that include faunadb which
03:12 - helps you add a database to your
03:14 - jamstack site lastly we're going to talk
03:16 - about the netify api where you can make
03:17 - your own netify client for example if
03:19 - the cli and the ui of netlify aren't
03:22 - exactly fitting what you need nullifies
03:24 - platform is entirely documented and you
03:26 - can go make your own client on top of it
03:28 - and a lot of users have and finally
03:29 - we'll end with pointers for learning
03:32 - more about nullify and jam stack and
03:34 - where you can get help if you run into
03:35 - trouble
03:37 - so hopefully that's a good overview of
03:39 - what we're going to be doing today and
03:40 - let's start diving in
03:44 - there are a few ways to deploy to
03:46 - nullify now nullified drop is not the
03:48 - most important way but i find it useful
03:51 - to explain this first because it helps
03:53 - explain the history of nullify as well
03:55 - as the fundamental concept of jam stack
03:57 - so netlify started life as a company
03:59 - called bit balloon and bit balloon was a
04:02 - simple service where you could drag and
04:04 - drop like a folder on your desktop drag
04:06 - it onto bit balloon's web ui and have it
04:09 - be deployed immediately onto a cdn and
04:12 - to this day that is netflix drop and so
04:14 - that is the fundamental concept of
04:15 - nullify that everything that you deploy
04:18 - to nullify
04:19 - is static assets and nullify takes care
04:22 - of deploying it on a cdn to all the
04:24 - points of presence around the world so
04:26 - that your users get them as quickly as
04:28 - humanly possible now bit balloon
04:30 - eventually became netlify and then we
04:32 - dropped the bit balloon angle so if you
04:35 - go to the url bar and you type in
04:36 - bitballoon.com you just simply get
04:38 - redirected to
04:40 - app.netify.com here you can do a simple
04:42 - drag and drop of your
04:44 - built site not the source code the build
04:46 - site
04:47 - and you can scroll around to look at the
04:48 - features we're going to cover all of
04:50 - this in the rest of this video if you
04:52 - don't have a sample site nullify
04:53 - actually even gives one to you so just
04:55 - go to the downloaded demo site button
04:58 - that downloads a zip file and you can
05:00 - literally just drag and drop that zip
05:01 - file on to that drag field and you see
05:05 - how quickly it deploys there's no
05:06 - editing there it just deploys live to a
05:09 - live url and you can scroll around i
05:12 - mean i really don't think there is a
05:13 - faster solution to getting something
05:15 - online you literally drag and drop it
05:16 - and the whole thing just deploys for you
05:19 - on a cdn so
05:20 - that's the fastest solution now i'm also
05:22 - going to try to edit this site i'm going
05:24 - to unzip that zip file into a folder
05:27 - and then you can look around you can see
05:30 - all the assets like a typical site
05:32 - i'm going to choose my favorite editor i
05:34 - use vs code it doesn't really matter
05:36 - what you use
05:37 - but here in
05:38 - vs code i can just drop
05:40 - drag and drop the file from my file
05:43 - explorer to vs code and now i have that
05:46 - project open and now i can surf around
05:48 - and look and look at the index.html for
05:51 - example and this is a standard html
05:54 - site nothing no frameworks nothing and
05:56 - i'm just going to edit some of the text
05:58 - to see how it shows up and
06:01 - instantly
06:02 - deploys changes so now i'm saving it
06:05 - and and so i've edited that site and now
06:07 - i can actually choose to compress that
06:10 - site and zip it up again to a zip file
06:13 - and now i can go back to
06:15 - that deploy page and if i want to update
06:18 - that site i can just go down to the
06:21 - deploy section and drag and drop
06:23 - just like i did to initiate that site so
06:26 - i just drag and drop it and now it's
06:27 - uploading and now it's published and
06:29 - when i click on it and i hit to refresh
06:32 - that site it's uploaded with the new
06:34 - changes so that's netlify drop
06:37 - you can always access the previous
06:39 - deploy with a with a unique url
06:42 - so if you click down in here you can
06:44 - access the previous deploy
06:46 - you can even roll it back so you if you
06:48 - want you can just say publish deploy
06:51 - and now when i refresh this original url
06:54 - and i refresh it it goes back to the
06:57 - original version
06:58 - because
06:59 - every single deploy is immutable so you
07:01 - can always roll back something if you
07:03 - need to
07:04 - now we don't expect you to drag and drop
07:06 - every time
07:07 - so the next
07:08 - method i'm going to cover is using the
07:10 - netlife cli this is a pretty big topic
07:13 - that actually deserves a separate video
07:15 - but here we're only going to use the
07:16 - nullified cli to deploy
07:19 - so i'm going to go back to the folder
07:21 - that i had which which i'm editing the
07:23 - file in
07:24 - and i can pull up the terminal in vs
07:27 - code
07:28 - i already have the nullified cli
07:30 - installed but if you need to you can run
07:32 - npm install
07:34 - global notify dash cli
07:37 - and that will install for you
07:39 - i'm running a netify version of 2.12
07:42 - you can run nullify status to check if
07:44 - you're logged in
07:45 - i am
07:47 - and you can run log in now if i log in
07:49 - if you're not now i'm going to edit my
07:51 - html again to indicate that
07:54 - i'm using the i'm deploying from the
07:56 - notify cli so i'm just going to say
07:58 - netlify cli
08:01 - rules
08:04 - so we'll see that if we should see that
08:05 - if we deploy
08:08 - so down in here i'm going to write
08:10 - netify deploy for brevity because this
08:13 - is a lot to type you can actually use
08:15 - ntl and that would work
08:19 - and we'll see what we get
08:21 - so the first thing it tells me is that
08:23 - this folder isn't linked to a site i
08:26 - don't i have an existing site that i
08:28 - that i want to link to
08:30 - but we'll avoid that for now and just
08:31 - create a new site and we'll we'll do the
08:33 - linking
08:34 - later
08:36 - so we'll create and configure a new site
08:39 - they'll ask you to pick your teams uh
08:42 - more it's likely that you'll you'll just
08:44 - have one or two teams
08:45 - so just pick their appropriate team and
08:47 - then you can pick something like
08:49 - netlify demo
08:51 - site
08:54 - now it's asking you for the deploy path
08:57 - in most cases
08:58 - you can just go with whatever is
08:59 - suggested um but we'll talk you will
09:02 - tell you how to how to configure this
09:06 - later and so now it's uploaded
09:10 - all of these
09:11 - pieces of information and actually
09:13 - showed you what it's done as well as
09:15 - given you a url
09:17 - where you can actually go check it out
09:19 - so here because i've only i've only
09:22 - chosen nullified deploy by default it
09:24 - deploys to a draft url so you can see
09:28 - what it looks like in production
09:32 - before you actually push it to master
09:35 - if you're happy with this and you
09:36 - actually want to push it to master
09:38 - just run nutlify deploy dash dash prod
09:42 - and that's that does exactly the same
09:44 - thing as nullify deploy
09:46 - but it pushes it directly instead of a
09:48 - draft url it pushes it directly to
09:53 - so here we have a live url so if we
09:55 - click this
09:57 - and we should be able to see the cli
09:59 - rules
10:00 - on the main on the main url instead of
10:04 - the draft url again remember that each
10:06 - of these
10:07 - deployments is immutable so you can roll
10:10 - back to it at any time or give
10:13 - give this as a link
10:15 - to a friend or colleague for reviewing
10:17 - whatever content or
10:19 - code changes
10:20 - now notice that it keeps prompting me
10:22 - for a deploy path
10:24 - if you want to actually just hard code
10:26 - that there are a few different ways to
10:27 - do it
10:28 - but the way that i would recommend is to
10:30 - create a nullified.tamil file
10:32 - so i'm going to exit out of this process
10:35 - and i'm going to create a nullify.com
10:38 - so this is an example netlify.commo that
10:40 - i have just saved
10:42 - on my copy of my clipboard manager
10:45 - um we'll go we're going to comment this
10:47 - out for now
10:48 - and we're just going to focus on the
10:49 - publish directory so the publish
10:51 - directory is the
10:53 - directory that we want to zip up and
10:55 - send out to the cdn of netlify
10:58 - down in here uh we i usually use a dist
11:02 - folder but here i'm just deploying the
11:04 - root folder so we can just say dot you
11:06 - can run nullify deploy prod
11:08 - and
11:09 - i
11:12 - i'm no longer being
11:14 - and i'm no longer being asked about
11:16 - where my publish deploy path is
11:20 - um
11:22 - [Music]
11:24 - of course i can move
11:26 - all of
11:27 - the assets into a published folder so
11:29 - something like publish
11:34 - list
11:35 - and i can move
11:37 - all of the assets
11:38 - here so now it looks a lot cleaner and i
11:41 - can build from a source code directory
11:44 - so
11:45 - then i would have to change my publish
11:47 - directory accordingly to the disk folder
11:49 - so i only publish anything inside of
11:51 - this and anything outside of this does
11:53 - not get
11:54 - and i can run that accordingly now in
11:57 - netlify we actually really encourage
11:59 - using version control and we call it git
12:02 - centric workflow so what i'm going to do
12:04 - is i'm going to initiate git so get in
12:07 - it
12:09 - now you notice one new folder that was
12:11 - created that i haven't explained yet is
12:12 - the dot netlife folder it really is just
12:15 - a simple little json file that stores
12:19 - uh where you've linked what site you've
12:21 - linked the
12:22 - project too so for example if over here
12:26 - i run nullify status
12:28 - you can actually see not just my login
12:30 - information but which site this
12:32 - particular folder this particular
12:34 - project has been linked to
12:36 - so it says down here nullify site info
12:38 - and it gives me all that stuff and you
12:39 - can notice the site id is an exact match
12:42 - of
12:43 - state.json
12:45 - so
12:46 - obviously this dot nullify folder
12:49 - is pretty helpful for netflix cli to
12:52 - understand what site you've linked to
12:53 - but it may not be so helpful for an open
12:55 - source project for example where
12:57 - people downloading your repo
13:00 - might not have access to the same site
13:02 - so checking that in might confuse them
13:05 - however actually checking that in for a
13:07 - team project is probably pretty handy so
13:10 - that people don't have to
13:11 - set up their own sites
13:13 - it's really up to you but i personally
13:16 - generally get ignore
13:19 - know the nullify folder
13:21 - and it really depends on your use case
13:23 - whether you do that
13:25 - so i've i've gone and get ignored
13:27 - i'm going to edit the content over here
13:30 - so we also
13:32 - reflect that
13:35 - we're deploying from git this time
13:38 - and
13:40 - we'll see what happens with that
13:42 - so now i can say git add dot
13:45 - everything git commit and
13:49 - show files
13:51 - you can come up with a better message
13:53 - than i have
13:54 - um and now we have now we have to set up
13:56 - a remote
13:57 - netlife works with
14:00 - gitlab bitbucket and github
14:03 - obviously i am most familiar with github
14:05 - so i'm going to use that but feel free
14:07 - to use whatever git provider
14:09 - care about
14:12 - so
14:13 - let me find
14:14 - what am i calling it if i drop that
14:18 - site
14:21 - and
14:24 - here
14:27 - so i can copy that url and just say git
14:30 - remote add origin
14:33 - and now i have
14:35 - that linked up i can actually say git
14:37 - push
14:38 - plaster
14:47 - so that when i refresh over here i can
14:48 - see that
14:49 - i've
14:51 - pushed my site up to get so surprisingly
14:54 - we've gone through two of the methods
14:56 - and we're actually well set up to do
14:57 - continuous deploy to nullify
15:00 - and
15:01 - i'm going to show you what that looks
15:02 - like
15:03 - right now
15:05 - so
15:06 - if we go to
15:09 - the wi-fi home
15:10 - page these are all the sites that i have
15:13 - currently but you can also click new
15:15 - site from git
15:17 - you can choose to set up continuous
15:18 - deployment from one of these providers
15:20 - obviously i choose github
15:24 - and i can select that repo that i just
15:27 - created
15:31 - so you'll notice over here that it reads
15:33 - the nullify.tamil
15:36 - file
15:38 - that we've made
15:39 - and it's also created some other options
15:42 - that you might want to look into as well
15:44 - well we'll talk about the build command
15:45 - when we get to the build section
15:48 - so we're just going to hit deploy site
15:50 - and it really is that simple
15:53 - so this deploy should be done pretty
15:55 - quickly and once you click that site
15:57 - you should be able to see nullify from
15:59 - git
16:00 - directly as
16:02 - pushed from our local local development
16:06 - to github and from github pulled into
16:09 - netapp let's have a look at what
16:10 - continuous deployment workflow looks
16:12 - like so i'm going to go over to my
16:14 - deploys
16:16 - view
16:17 - and then i'm also going to go over to my
16:20 - project
16:21 - i'm going to say i'm going to make some
16:22 - edits as well so
16:25 - i'm going to say
16:26 - continue with
16:31 - deployment is the best
16:34 - because it is
16:36 - i'm going to get
16:38 - dot again
16:39 - commit
16:41 - change
16:44 - and get push origin master
16:48 - that's just an alias that i have set up
16:49 - locally
16:50 - so that's going to deploy
16:52 - straight to github
16:54 - and that's going to kick off a build in
16:56 - here
16:57 - and that's just an underlying secret
16:59 - about how nullify works is to automate
17:03 - this
17:04 - so now so now it uh there's no build
17:06 - time so it just basically deployed
17:08 - immediately
17:09 - and uh
17:10 - and so now when i hit back to the
17:13 - original site goofy austin 8 8
17:15 - 8
17:16 - i can see continuous deployment is the
17:18 - best over in github i can also refresh
17:22 - and see my change
17:23 - down in here
17:25 - and that's continuous deployment the the
17:26 - idea that
17:28 - your deploys update in lockstep with
17:32 - your git
17:34 - don't forget that you can always roll
17:36 - things back if you made a mistake or if
17:38 - you're not ready to release something
17:40 - so for example
17:42 - i can publish this this old deploy
17:45 - and if i head back to the site and
17:46 - refresh it goes back to the original git
17:48 - message
17:50 - and
17:51 - the
17:51 - next version is still here so that's how
17:53 - we launch some of our features if you
17:55 - want to turn off continuous deployment
17:57 - for some reason you can click stop auto
17:59 - publishing
18:01 - and that will stop
18:03 - and now when i
18:04 - make some more changes
18:06 - stopped
18:09 - publish
18:12 - stop
18:14 - again this is a git alias just for me to
18:17 - be a little bit quicker in my actions
18:21 - so now when i
18:22 - see this update coming in
18:24 - it actually has
18:26 - built and deployed it just isn't
18:28 - published yet you can see this little
18:30 - lock icon because i've stopped auto
18:31 - publishing so when i refresh my page i
18:34 - haven't changed anything
18:36 - in terms of the text because i haven't
18:38 - published the latest update if i want to
18:40 - kick it back on again
18:43 - it doesn't immediately promote the
18:45 - latest deploy
18:46 - to the published site
18:49 - because you may not want that to happen
18:51 - so you're going to have to go in here
18:53 - deploy
18:55 - and only then you'll see
18:57 - the new
18:59 - text that you've pushed to get
19:02 - so a lot of the secret around how this
19:05 - is done
19:06 - is basically setting up internal build
19:09 - hooks
19:11 - you can actually set up your own build
19:12 - hooks
19:14 - down in here in the settings
19:17 - and it just gives you a url you can use
19:20 - to trigger a build
19:22 - so
19:23 - let's have a look at how that works so i
19:25 - can give this a name for example
19:28 - demo
19:29 - hook
19:30 - and you can give it a branch to build
19:32 - here i only have master but you can
19:33 - imagine building other branches
19:36 - and you can save it and that gives you a
19:38 - build hook with which to use
19:41 - so now i'm going to
19:44 - oh
19:44 - and there is a very useful curl command
19:47 - so i can actually paste that into it
19:49 - so let's head over to the deploy section
19:51 - and i'm going to bring up my terminal
19:52 - copied from the build hook section
19:54 - so i'm going to
19:56 - see
19:57 - that i fired this off
19:59 - and now
20:00 - if i wait long enough or refresh i can
20:02 - see that a new hook has been triggered
20:05 - by the demo hook people use build hooks
20:07 - for all sorts of things for example you
20:09 - can go to if this than that and trigger
20:11 - builds on a tweet for example
20:14 - or you can set a scheduled
20:17 - job
20:18 - from zapier or any other cron service to
20:21 - build every minute every day every hour
20:23 - whatever
20:25 - suits your build process
20:27 - for example one of my co-workers phil
20:29 - hogsworth actually built a clock
20:31 - set your watch by nullify.com this isn't
20:33 - a dynamically updated javascript clock
20:36 - it literally builds every minute so now
20:38 - if i refresh you can actually see the
20:40 - time update accordingly
20:42 - for the last method of deploying it's
20:45 - more of a fun demo and not something
20:47 - you're likely to use more than once but
20:50 - it's handy to have around especially for
20:51 - open source projects
20:53 - if you have a nullified.tamil configured
20:55 - correctly then you can also set up a
20:58 - one-click deploy to netlify button
20:59 - that's pretty easy to get going so i'm
21:02 - going to go to my github directory that
21:05 - i've
21:06 - set up in the course of this video i'm
21:08 - going to copy that url i'll head to the
21:10 - deploy button docs on nullify.com
21:14 - and i'll just paste that in here and
21:16 - that will configure
21:17 - various things like the markdown snippet
21:19 - html uh and elm snippet if you use album
21:22 - but here i'm just going to copy a
21:24 - markdown snippet what that helps me do
21:26 - is paste it directly into my readme
21:31 - so you can say things like deploy to
21:33 - nullify down in here
21:36 - so i'm gonna commit this again
21:40 - new
21:42 - deploy to nullify
21:45 - and i'll push to master
21:52 - and now when i refresh
21:54 - i get this nice the point to nullify
21:56 - button so it's nice to display on your
21:58 - docs especially for open source
22:00 - boilerplates and projects because what
22:02 - that
22:03 - enables people to do
22:05 - people who are not you is to click that
22:07 - button and get that one
22:10 - click deploy experience so for example
22:12 - here it says
22:14 - connect to github i'll give this a
22:15 - different name
22:18 - to
22:19 - netlify
22:21 - and
22:22 - it's going to set up a site
22:25 - and set up that continuous deployment
22:27 - and fork your repo
22:29 - all in the process of one click
22:31 - so whoever is working on their
22:35 - new site can get the benefits of this
22:39 - latest site from you but then they also
22:41 - have a fork
22:42 - with which to start work on
22:44 - so that's what the deployment nullify
22:46 - button is it's just a streamlined
22:48 - process
22:50 - it's useful for open source
22:52 - boilerplate authors and
22:54 - app authors so now we're done talking
22:56 - about ways to deploy things on netlify
22:58 - notice that we haven't talked about
23:01 - build because that's a different stage
23:02 - of the deploy cycle
23:04 - where you may have to set the build
23:06 - command and we'll come to that in a bit
23:09 - but i wanted to spend some time talking
23:11 - about what you get by default because
23:13 - these are things where there's nothing
23:15 - to cover because you got it by default
23:17 - already but it's good to be aware of
23:19 - what you get for free
23:21 - so the first thing to notice is that you
23:23 - get https by default so that's a more
23:26 - encrypted protocol where you're not
23:28 - susceptible to man-in-the-middle attack
23:30 - and that's just the best practice for
23:32 - modern websites by default you also get
23:35 - deploy previews so i'm going to do a
23:37 - little demo of that with our demo site
23:41 - i'm going to create a new branch
23:45 - a new site new new feature for example
23:50 - and i'm going to
23:51 - edit that in here
23:55 - awesome new feature
23:58 - and i'm going to save that
24:10 - origin new feature
24:13 - and then i'm going to go create a pr
24:16 - on github so i've been working on a
24:18 - branch
24:19 - i have an awesome new feature
24:21 - i'll leave a comment
24:23 - please
24:24 - merge
24:27 - create a pull request
24:30 - and we'll let it perform some checks
24:32 - but you can see that automatically some
24:35 - things happen that
24:36 - you may not necessarily
24:39 - have on a normal site
24:40 - and so this is a deploy preview
24:42 - basically saying that even a pr which
24:46 - hasn't been merged
24:47 - i can actually check out
24:51 - over here where it says awesome new
24:53 - feature
24:54 - and it has and it gives me a label of
24:57 - deploy preview
24:59 - and that is a preview that i can share
25:02 - with
25:03 - my clients or my co-workers sometimes if
25:06 - you're using for example a static site
25:07 - generator you may want to check out if
25:09 - pages or redirects have changed so you
25:11 - can click on the details and it brings
25:13 - you into netlify where you can look at
25:16 - look at what pages have changed
25:18 - in particular and that should be exactly
25:20 - what you expect in terms of pages once
25:22 - you're happy with your preview you can
25:24 - merge it in
25:26 - and that should also
25:28 - kick off a new build on the master
25:30 - branch
25:31 - so that's a very nice workflow from
25:33 - previewing the new feature before you
25:35 - merge
25:36 - and then merging it in once you're happy
25:38 - and
25:39 - having your customers see it the third
25:41 - default to know about is that netlify is
25:43 - a cdn by default
25:45 - so
25:47 - all of your deploys are distributed to
25:48 - the nearest point to presence this isn't
25:51 - documented everywhere because the list
25:53 - keeps changing but as of as of the time
25:56 - of this recording the regular free tier
25:59 - gets a few locations frankfurt singapore
26:01 - san francisco new york sao paulo and
26:02 - sydney and the enterprise tier gets a
26:04 - few more locations
26:06 - deploys are also atomic which means that
26:08 - nullify waits until all the files are
26:10 - published before pushing everything to
26:12 - production
26:13 - um so that your customers never see
26:16 - like a half updated site uh no matter
26:19 - when they when they hit
26:20 - um and also it also has instant
26:22 - rollbacks which means that it
26:24 - invalidates the cache globally
26:26 - whenever you do a rollback for example
26:28 - by clicking an old deploy and clicking
26:30 - publish deploy so here i've rolled it
26:32 - wrote the version back
26:34 - and now it's instantly invalidated and i
26:37 - can just refresh and see that old deploy
26:40 - lastly you also get asset optimization
26:42 - now this is not on by default but it's
26:44 - so easy to turn on that i can't resist
26:47 - telling you about it
26:48 - so if you head over to
26:50 - the site that we've been published and
26:52 - you look into the sources you can see
26:54 - that we've actually not
26:56 - optimized the site for performance
26:59 - this is obviously a super small site so
27:01 - it doesn't matter but you may need you
27:03 - may want to have this on a larger site
27:05 - so for example we can minify the css
27:08 - or also if we had any javascript files
27:10 - we can also minify that and do a bunch
27:12 - of other
27:14 - hygienic things to clean up
27:15 - the way that we
27:17 - optimize our assets
27:19 - so if we want to turn that on head over
27:21 - to deploy settings
27:22 - and scroll down to
27:25 - post processing section
27:28 - and we can click on asset optimization
27:30 - and
27:31 - enable a set up asset optimization and
27:33 - click save
27:34 - and the last step to do this process is
27:36 - to head over here and re-trigger a
27:39 - deploy
27:41 - so
27:42 - that will
27:43 - introduce
27:44 - asset optimization into the
27:46 - post-processing step which is after
27:48 - you've uploaded all your files
27:50 - and now when i refresh my site
27:52 - you can see that the structure of the
27:54 - site looks
27:55 - i mean it looks the same on the html
27:57 - side part of things but the css is now
28:00 - minified so this is
28:03 - that much faster to deliver over the
28:04 - wire and it just took you a couple
28:06 - clicks so we covered some nice features
28:08 - that you get by default there may be
28:10 - others that i haven't covered i just
28:11 - wanted to highlight some of these
28:14 - and the last part of the deploy section
28:16 - is going to be about customizing
28:19 - the url the domains that
28:22 - your customers see
28:23 - so the first thing to try is to
28:26 - not stick to the auto-generated ones
28:28 - that have been assigned to you but just
28:30 - to customize what that looks like so
28:32 - over here i'm going to say something
28:35 - i can go over to deploy settings go to
28:37 - general and change the site name so over
28:40 - here i can say
28:44 - notify drop demo
28:46 - sitemap
28:49 - so now when i click over here it has a
28:52 - more ergonomic
28:53 - site name
28:54 - but it is still on the dotnetlife.com
28:57 - domain
28:58 - another feature i wanted to highlight is
29:00 - what happens when you want to customize
29:03 - the internal url architecture
29:06 - within your site
29:07 - so for example let's create an about us
29:10 - page and
29:13 - have that
29:14 - show up so i'm going to create
29:15 - about.html
29:20 - and i'm going to hollow out most of
29:22 - these features
29:25 - just call this
29:31 - about us
29:34 - and
29:35 - leave the rest pretty much
29:40 - okay so now i have a new about us page
29:46 - and i'm gonna
29:47 - change
29:48 - to master
29:50 - and complete this
29:54 - new about us page
29:57 - and push it to master
30:01 - i can say i can hit to about and see the
30:03 - about us page
30:05 - so that's all well and good
30:07 - until we tell people
30:09 - to go to the about us page and they
30:10 - might type in slash about us
30:14 - and get a 404 page it's not found
30:17 - so what do we do about that
30:21 - so one of the ways we can handle this is
30:23 - to add in a redirects file
30:26 - so
30:26 - there's some guides as to how to do that
30:29 - over here but we'll just show you inside
30:32 - of code so i'm just going to add a
30:34 - underscore redirects file and this
30:36 - basically just tells you
30:38 - where to redirect from and to so for
30:40 - example if people type in about us
30:42 - we direct people to about
30:44 - so again i'm going to commit this add
30:47 - redirects
30:50 - and i'm going to push to master
30:52 - so now when i head to this about us
30:56 - it's going to redirect to about
30:59 - let's do it again about us
31:02 - it redirects to about
31:05 - so that's very handy but sometimes
31:07 - people just type in any sorts of random
31:09 - stuff
31:10 - and they just don't really get a nice
31:12 - experience so it's nice to set up a
31:14 - custom 404 page
31:16 - so let's also do that
31:18 - i'm going to set up in 404 each
31:25 - and
31:29 - not found
31:34 - okay
31:35 - and i'm also going to set up a redirect
31:37 - that's a catch-all
31:39 - so how you do a catch-all redirect is
31:41 - you just literally
31:43 - hit a star
31:45 - and you direct people to the 404.
31:49 - so if you imagine in a single page app
31:51 - you might want to send people to
31:53 - index.html because
31:55 - then
31:57 - the single page app might redirect
31:58 - people to the right area
32:01 - but here we're going to send people to
32:02 - the fourth
32:07 - so now when i refresh
32:13 - it actually
32:15 - redirects to 404
32:17 - on literally any url
32:19 - except for about us
32:22 - which still works
32:24 - so
32:25 - the redirects only run when there's no
32:27 - corresponding html or other static asset
32:30 - to
32:31 - use for people using javascript and
32:33 - requesting json files do note that
32:36 - sometimes you may accidentally
32:38 - hit a redirect and get back html
32:42 - when you actually meant to request
32:44 - something in json so just be careful
32:46 - about that
32:47 - and
32:48 - be aware that you're parsing html as
32:50 - json
32:51 - and those will typically solve your
32:53 - errors
32:56 - now of course when you're getting your
32:59 - site up to production you're probably
33:01 - also going to want to use a custom
33:02 - domain so let's head over to settings
33:05 - head to the domain management section
33:07 - and here's where you can configure your
33:09 - custom domains
33:11 - nullify offers free custom domains that
33:13 - doesn't mean it buys the domain for you
33:16 - but if you already have a domain bought
33:18 - somewhere for example from google
33:20 - domains or hover
33:22 - you can actually set it up to link that
33:24 - site together this is something that
33:26 - other hosting providers charge for
33:30 - so for example i can just say
33:33 - whatever so it's not io that's that's my
33:35 - own site
33:36 - and i can click verify and if it it's
33:38 - already owned by me i can say yes add
33:40 - domain um let's see what happens
33:43 - so
33:44 - my site already currently uses this um
33:47 - if it's a site that hasn't been set up
33:48 - you can you know you can also set that
33:50 - if you if you have a domain that you
33:52 - want to buy you can actually buy it
33:54 - through nullify
33:56 - um and
33:59 - you can actually buy it through nullify
34:01 - and now if i will buy it for you and you
34:02 - can pay notify with that
34:05 - and to set it up for you here's what it
34:07 - looks like for my personal domain i have
34:10 - a
34:11 - nullify subdomain as well as a custom
34:14 - domain setup that's said to be the
34:16 - primary domain
34:17 - and everything just redirects to that
34:19 - primary domain
34:21 - i also have netlify managed dns and
34:24 - that's um
34:26 - what netify uses
34:29 - and that's an extra service that nullify
34:30 - provides
34:32 - to do to add extra features but anyway
34:34 - so here's how the dns panel looks
34:37 - if you have a custom domain setup
34:40 - you can also enable ipv6
34:43 - as well as customize your dns records
34:47 - and name servers note that you can
34:49 - manage all your domains on
34:51 - this team level uh
34:54 - on app.net.com
34:55 - teams slash your team slash dns
34:59 - so that's the end of the first part of
35:01 - this video
35:02 - let's have a quick recap of what's
35:04 - available to you with netlify when
35:07 - you're deploying
35:08 - there are four methods of deploying we
35:10 - started out with notify's historical
35:12 - method which is dropping dragging and
35:14 - dropping
35:15 - then we used the cli to do a manual
35:17 - deploy
35:19 - then we also linked it linked our repo
35:22 - up to github then we set up continuous
35:24 - deploy from github
35:26 - so that every time you push to github
35:29 - you'll get a new deploy and that is
35:31 - continuous deployment
35:32 - and finally we set up the deploy the
35:35 - nullify button on our readme so that
35:37 - open source project can clone our
35:40 - repo and deploy in one click
35:43 - we also took a little look at the
35:45 - defaults that are provided out of the
35:47 - box for netlify
35:49 - we get free https
35:51 - also called ssl we also get free deploy
35:54 - previews
35:56 - same deal you can also get branch
35:58 - deploys which i do not cover in this
36:00 - video but they're kind of the same thing
36:01 - just for different branches we also
36:03 - talked about nullify as a cdn how
36:05 - they're distributed among various points
36:07 - of presence how nullified applies are
36:09 - atomic meaning they all deploy every
36:11 - single file to production at once
36:14 - and as well as providing instant
36:15 - rollbacks
36:16 - from a network
36:18 - control angle
36:20 - we also talked a little bit about
36:21 - turning on asset optimization so this is
36:23 - not on by default but it's pretty much
36:25 - one click
36:26 - and unless you have some bugs that are
36:29 - not compatible with this you should
36:31 - always have it on then finally we talked
36:33 - about nutify and custom domains so most
36:35 - things are hosted on a custom nutify
36:38 - subdomain
36:39 - but sometimes and sometimes you want to
36:41 - do redirects around what the internal
36:44 - url structure of your pages are
36:46 - we covered that as well as how to do
36:48 - catch-alls for 404s
36:50 - we also covered how to link up custom
36:52 - domains as as well as a little bit about
36:54 - nullified dns and how if i can manage
36:57 - the dns for you if you choose to have it
36:59 - you can also set up branch deploys for
37:01 - managed dns if you're using netlife dns
37:05 - so that's the scope of deploying on
37:07 - netlify
37:09 - and in other videos we'll cover the
37:10 - other sections but if you have anything
37:12 - about any questions about deploying
37:14 - please let me know cheers
37:19 - in this video we're going to be covering
37:21 - part two of our series on nullify
37:25 - and specifically focusing on things that
37:27 - you should know about building and the
37:29 - continuous deployment aspect of network
37:33 - so let's drill into that a little bit
37:35 - more
37:37 - we're going to cover build tools and
37:38 - static site generators
37:40 - we'll cover what build settings are
37:43 - what the build bot is
37:45 - build stages different things that are
37:48 - done during the build what concurrent
37:50 - builds are and how you can cancel builds
37:52 - to keep under your concurrent limit
37:55 - some build gotchas that people commonly
37:57 - run into
37:58 - as well as what to think what to do when
38:00 - things go wrong
38:02 - we'll end with a discussion about
38:04 - environment variables and the things you
38:06 - can do to set them in nullify to change
38:10 - the deployment environment to exactly
38:12 - what you need
38:14 - first let's have a little discussion
38:16 - about netlify and build tools nullify is
38:18 - strongly supportive of build tools in
38:20 - fact one of the founding theses of
38:22 - netlify
38:23 - is that static site generators are the
38:25 - next big thing
38:27 - and that basically came from tracking
38:29 - the statistics on static site generators
38:32 - and seeing that people wanted to use
38:34 - them
38:34 - to deploy to
38:36 - our cdn
38:38 - but they were manually doing it and we
38:40 - wanted to build in a continuous
38:42 - deployment tool
38:43 - to help them build and deploy their
38:46 - sites in fact i strongly recommend
38:48 - watching this talk by
38:50 - netflix ceo matt billman because it
38:52 - really explains the benefits of the jam
38:54 - stack compared to what came before it
38:58 - but anyway we're here to learn about
39:00 - the build process
39:03 - so the first thing to understand about
39:04 - the build process is that you can always
39:06 - do local builds you may not need
39:08 - continuous deployment
39:10 - the problem with continuous deployment
39:12 - is that it's done remotely
39:15 - it's on someone else's server and it may
39:18 - introduce
39:19 - extra hurdles for you when you're
39:21 - actually trying to just develop a new
39:23 - feature
39:24 - so if you're doing local development
39:27 - don't use continuous deployment
39:29 - just local locally build
39:32 - and push stuff to
39:34 - nutify until you're happy that you can
39:36 - turn continuous deployment back on
39:39 - let's take our existing site that we've
39:41 - been working on
39:43 - from part one and let's add a build
39:45 - process to it so right now i have this
39:48 - folder which is a dist folder
39:50 - and it's got a bunch of index html files
39:53 - and let's say i want to add some
39:54 - javascript to it to write some
39:56 - interactive components
39:58 - what i'm going to do is i'm going to
40:01 - add the bar the parcel bundler so
40:04 - that would be yarn first i have to
40:08 - initiate initialize the package.json
40:12 - and then i have to add the parcel
40:13 - bundler
40:17 - and while that's going on i can also
40:19 - install
40:21 - react react dom because i'm going to use
40:23 - that as well so here we're not using a
40:25 - static site generator but we're using
40:27 - using a build process and
40:29 - a static site generator is just a
40:30 - massive build process so now we've got
40:32 - the dependencies installed we're going
40:34 - to rearrange this a little bit so
40:37 - i'm going to take this this folder and
40:39 - rename it to source
40:40 - and we're going to build from the source
40:42 - to the disk folder and remember that the
40:45 - the folded folder that we ultimately
40:47 - publish is the disk folder
40:50 - all right the next thing i'm going to
40:51 - try and do is i'm going to go to
40:55 - this source folder i'm going to add a
40:57 - new folder called
40:59 - index.js for example
41:01 - i'm going to paste in some pre-prepared
41:04 - react code
41:06 - and i'm going to go to index.html
41:09 - and add
41:10 - a script
41:13 - that id equals app
41:15 - and then i'm going to add a script tag
41:16 - at the bottom
41:18 - saying script
41:22 - source
41:28 - so now when i run
41:30 - yarn parcel
41:35 - index.html
41:39 - i get a nice local server
41:41 - where i can see the results of my code
41:43 - it says hello from react and i can
41:46 - actually click an interactive button
41:48 - so i know that i've added some
41:50 - javascript to my static site
41:53 - so this is wonderful news
41:55 - and we need to actually make this run in
41:57 - production so i'm going to cancel my
42:01 - running process i'm going to go over to
42:02 - package.json and make life a little bit
42:04 - easier for me with some npm scripts this
42:06 - is obviously optional but
42:10 - it's pretty common to set this up
42:12 - because it's easy to run
42:13 - so i'm going to put in my command again
42:15 - source
42:17 - index.html and i'm going to introduce a
42:20 - build command as well so
42:23 - this just has a build
42:25 - again you can use any process you don't
42:27 - even have to use a javascript
42:30 - build tool but this is just an
42:32 - illustrative
42:33 - idea to bring you through the top file
42:36 - so now when i run yarn build it's going
42:37 - to execute this command
42:39 - and run parcel build and that builds to
42:42 - the dist folder and remember that this
42:44 - folder is exactly what we're going to
42:46 - ship
42:47 - to
42:48 - nullify to verify that this folder has
42:50 - built successfully i can use serv dist
42:54 - serve as a cli that you can install
42:56 - and that serves
42:58 - your files locally
43:00 - and you can see that yours your code is
43:02 - running in production the difference
43:04 - between
43:05 - this old
43:07 - version and this one is that this is
43:10 - running react in development mode
43:13 - and over here we're running react in
43:15 - production mode
43:17 - so that's how you can tell that your
43:19 - builds are running locally
43:21 - so
43:22 - as long as you can develop and build
43:24 - locally you may not need
43:26 - continuous deployment because as long as
43:28 - you're debugging things and making sure
43:30 - that your your javascript code is even
43:32 - valid
43:33 - this is a perfectly fine way and you
43:35 - don't have to use nullify at all
43:37 - but
43:38 - what nellify
43:40 - does for you is starts to do that
43:43 - automation step
43:45 - so
43:46 - basically
43:47 - the idea is that you would not be
43:49 - checking in your dist
43:51 - folder you would just be saying you
43:53 - would just be adding that to git ignore
43:55 - actually
43:58 - and you only have the source folder in
44:01 - your
44:01 - code
44:03 - let's see what happens when we push our
44:05 - latest changes to get
44:12 - we can see that our build has failed
44:13 - because this time
44:15 - we don't have a disk directory anymore
44:17 - we remember we added that to git ignore
44:20 - because we're now building from a source
44:22 - directory
44:23 - that means that we need to run
44:25 - the build command in our deployment
44:27 - environment
44:28 - to set up continuous deployment
44:31 - so that brings us to build settings
44:34 - really there's only two places to set
44:36 - your build command the first is in your
44:39 - deploy settings
44:41 - so let's edit our settings over here and
44:43 - add the build command yarn run build
44:47 - and we're still going to deploy from
44:48 - dist and we'll save that
44:51 - you can use the base directory if you
44:53 - have a subfolder
44:54 - for example if you have a monorepo setup
44:58 - so now we have the build command set
44:59 - we're going to have to go back to
45:00 - deploys and rerun the deploy again you
45:03 - can see that our build is now successful
45:06 - and in particular you can see that we're
45:08 - now executing the user command yarn run
45:11 - build which is the one that we did
45:13 - and it's showing us running the build
45:17 - showing the output of the build
45:19 - and then saving a bunch of dependencies
45:22 - and then deploying site from dist
45:24 - so
45:25 - over here if you want to check out the
45:26 - deploy you can open this in a new tab
45:29 - and check out
45:31 - how this reacts code is now in
45:34 - production on the production nullify
45:37 - site and it's using the production build
45:39 - of react
45:40 - so that's all well and good
45:43 - but there's a second way to set build
45:45 - command and that's in nullified.tamil
45:48 - this is a higher priority
45:50 - command
45:51 - so it actually overrides what we had
45:54 - before
45:55 - so i'm going to comment it out and this
45:57 - is how it should look
45:58 - under the build settings you should add
46:00 - a command equals and then whatever
46:02 - string you want to run yarn build
46:05 - so this can take any form uh previously
46:08 - we set yarn run build but
46:10 - if you're using yarn you can also just
46:12 - type yarn build and that is basically
46:14 - the same command
46:16 - i just want to show you some visual
46:18 - difference
46:19 - i'm going to commit it to git
46:21 - add build
46:22 - command
46:24 - and i'm going to push it to master
46:26 - and that'll kick off the build again
46:29 - in netlify notice that this time there's
46:32 - a special message printed over here
46:34 - saying there's different build command
46:35 - detected going to use the one specified
46:37 - in the tomo file yarn build versus yarn
46:39 - run build so yarn run build is the first
46:41 - command that we set in the user
46:42 - interface and yarn build is the second
46:45 - command that we actually set in
46:47 - nullify.tomo so this is higher
46:48 - precedence because that's the single
46:50 - source of truth for all the
46:53 - nullify settings that you ever want to
46:54 - build so i personally encourage people
46:57 - to use nullified autumnal but you may
46:59 - find
47:00 - it easier to onboard
47:01 - beginners with
47:03 - the web ui
47:05 - either way
47:06 - when you read your logs you should be
47:08 - able to figure out what's going on by
47:10 - keeping an eye out for the commands that
47:12 - you want to run
47:13 - and looking for any error messages in
47:14 - case
47:16 - so overall that's a very gentle
47:18 - introduction to build settings it wasn't
47:20 - too hard but really what's an operation
47:23 - over here is the core of netlify which
47:25 - is the buildbot
47:26 - and that's something that we're going to
47:28 - dive into a little bit
47:30 - in this next section
47:33 - so one way to find out about the
47:34 - buildbot is to read some of these
47:36 - documentation on the site
47:39 - it goes into a little bit about the
47:40 - origin of the buildbot some default
47:43 - environment settings and versions that
47:45 - you may want to know about
47:46 - but basically the high level concept
47:48 - that you should know is that the
47:50 - buildbot is basically a docker container
47:52 - our cto used to work at docker and so
47:55 - we're very familiar with this technology
47:58 - and it gives us a lot of nice security
48:00 - and reproduction capabilities
48:03 - that is very helpful in creating a
48:06 - continuous deployment service like
48:08 - netlify so let's check out what the
48:10 - docker container
48:11 - environment looks like
48:13 - it really is just a massive
48:16 - bash file
48:18 - this is entirely open source so you can
48:20 - actually run it locally so you can debug
48:23 - your own docker builds
48:24 - there's different versions of the build
48:27 - images that are available so the legacy
48:30 - sites will have the trusty version you
48:33 - should not run into that if you're
48:34 - watching this video and the current
48:37 - sites
48:38 - have the xeno build image
48:40 - and that's
48:42 - the more current up-to-date version you
48:44 - can see the branches accordingly
48:46 - there is ongoing work on new a new
48:49 - version of the buildbot so by the time
48:51 - you watch this video there may be a new
48:53 - version available but hopefully i'll
48:55 - also have a new video out by then
48:57 - covering that
48:59 - but basically you should be aware of
49:01 - that you can actually pull down the
49:03 - production
49:05 - the exact same docker image that nullify
49:07 - runs to your local
49:09 - environment so that you can test your
49:11 - builds in case something is going wrong
49:13 - in this whole build logic
49:16 - and it's also open source so you're
49:18 - welcome to contribute but again i want
49:20 - to stick to the high level
49:22 - if you know that there's a build bot you
49:24 - know that you can reproduce it you know
49:26 - that it does a number of different
49:27 - things but at a high level you should be
49:30 - aware that
49:31 - there is a cache so nullified builds are
49:34 - not entirely stateless they actually we
49:36 - actually cache things for performance
49:38 - improvements everything is stored in a
49:41 - netlife directory and in fact you can
49:44 - you personally can use a build script to
49:46 - save things in cache
49:48 - diff them
49:50 - and decide whether to build things or
49:52 - not based on the cache
49:54 - you may write your own scripts or you
49:56 - can use
49:57 - open source tooling like this one from
49:59 - david wells called catch me outside
50:02 - which is pretty clever
50:04 - i do like the name a lot
50:06 - but basically it helps to think about
50:08 - how's you to think about
50:10 - checking where do you store things in
50:12 - cash
50:14 - how should you handle a cash update and
50:16 - then checking for diffs between updates
50:19 - and if there is a need to update the
50:21 - cash then you run the cash update again
50:25 - so a simple thing like that can actually
50:27 - cut down your build times by a lot by
50:29 - skipping the steps of building
50:32 - things that are unnecessary for you to
50:34 - build
50:36 - then it will install then a build bot
50:38 - goes to second stage it starts
50:39 - installing dependencies the dependencies
50:41 - here are not just your you know
50:44 - npm dependencies but also your known
50:47 - versions
50:48 - it will check the dot nvm versions for
50:51 - example
50:52 - it will check your ruby environments if
50:54 - you're using a
50:55 - ruby static site generator like jekyll
50:58 - php
50:59 - hugo
51:00 - so on and so forth even has python go
51:04 - a nice grab bag of everything that you
51:06 - could possibly want i even have had some
51:09 - success installing haskell you can just
51:12 - curl
51:13 - your various environments and store them
51:15 - in cache
51:16 - basically anything that you can do in a
51:18 - typical bash environment you can do in
51:21 - nullify
51:23 - then we get to the actual build process
51:26 - that's where we run your build command
51:28 - if you have one obviously we did the
51:30 - first part of the video entirely without
51:32 - a build process so you don't have to
51:34 - have one if you don't need it then we
51:36 - package and optimize this is an
51:38 - optimization step that
51:40 - may or may not apply for you but
51:42 - basically this is post processing and
51:44 - other optimizations that we do for
51:47 - delivering to our cdn then
51:50 - we're going to deploy the site from
51:54 - the disk folder again this is from the
51:56 - folder that you specified in your
51:58 - netlife.tomo or somewhere else
52:01 - we're going to save the dependencies for
52:03 - the next build
52:04 - and we're going to output a manifest you
52:07 - can't see over here but there's a
52:09 - manifest of
52:11 - what has been produced so that we can do
52:14 - diffs and so that we can produce images
52:16 - so that we can produce summary
52:18 - information like this
52:19 - showing you
52:20 - what
52:21 - files and what
52:24 - redirect rules have changed and have
52:26 - been processed by the buildbot
52:29 - so that's the long
52:30 - that's the high level overview of the
52:32 - build stages
52:34 - things happen in a sequence and i think
52:36 - if you know the where your issues are if
52:39 - you're debugging a build
52:41 - it will help you will help us a lot in
52:43 - helping you
52:44 - and
52:45 - all around
52:46 - demystifying nullify by a lot
52:49 - so the last thing that we should cover
52:51 - before getting into the gotcha section
52:53 - is concurrent builds and canceling
52:55 - builds
52:56 - so the idea here is that anything can
52:59 - trigger a build right i can be pushing a
53:02 - commit to get or it could be triggering
53:04 - deploy over here
53:06 - or i could be
53:07 - triggering a deployer from a build hook
53:10 - that we talked about in the previous
53:11 - video so over here i have a build hook
53:14 - that i can just be calling randomly and
53:16 - so there now i have two current deploys
53:18 - so what's happening right here is that i
53:20 - only have a maximum of one concurrent
53:22 - deploy so this is building and this is
53:23 - waiting sometimes i actually want to
53:26 - just skip this step because i just want
53:27 - to go straight to the most recent build
53:29 - because i know that's the one
53:30 - and so i can just click on click in here
53:32 - and cancel the deploy
53:34 - so once i cancel the deploy i'm no
53:36 - longer i'm using that
53:39 - current deploy and now i have the next
53:40 - one enqueued so i just have to wait a
53:43 - little bit but already it's starting to
53:44 - build so that's the that's the rough
53:47 - idea if you want to have
53:49 - for a one for a single person
53:52 - workflow
53:54 - one concurrent build is probably enough
53:56 - but
53:57 - you may want for a team you may want to
53:59 - look into multiple concurrent builds so
54:00 - that you don't hold each other up
54:03 - canceling the build is as simple as just
54:06 - killing the docker
54:08 - process and that's as that's all it is
54:12 - so as long as nothing so as long as
54:14 - everything is failing every single build
54:16 - is failing the most recent successful
54:19 - build actually still keeps alive so so
54:22 - your site doesn't go down until we have
54:24 - a new successful build
54:26 - all right so time to cover some gotchas
54:28 - that people typically run into in fact
54:31 - this is probably the most difficult part
54:33 - of learning netlify which is learning
54:35 - how to use a continuous deployment
54:37 - environment in fact we have a whole
54:39 - place in the docks dedicated to build
54:41 - gotchas so if you have any
54:44 - issues just make sure to have a read of
54:46 - all of these
54:47 - and see if that matches your situation
54:49 - so some of the common gotchas that i
54:52 - wanted to highlight is first of all the
54:54 - 15 minute rule basically if your build
54:56 - takes
54:57 - longer than 15 minutes nullify might cut
55:00 - it off on the free tier if you're a
55:02 - customer or you have some sort of
55:04 - special case you may get in touch with
55:06 - support to extend that up to 60 minutes
55:08 - or higher
55:10 - next you also have to think about
55:12 - permissions and api secrets sometimes
55:14 - your builds particularly if you're using
55:16 - a gatsby or
55:19 - next template
55:20 - that requires a
55:22 - api key otherwise it will fail to build
55:25 - then you may need to provide those api
55:27 - keys
55:28 - in order to build build stuff
55:31 - we'll have a section
55:32 - at the end about environment variables
55:35 - and where you can set them
55:36 - lastly i also want you to be careful
55:38 - about
55:39 - what folder you're deploying so make
55:41 - sure that when you have a disk folder
55:43 - you're you're actually building to the
55:45 - disk folder sometimes people just aren't
55:47 - aware of what folder they're deploying
55:49 - to and
55:50 - just thinking that through can help a
55:52 - lot
55:53 - and of course there's a community
55:55 - nullified topic where you can find out a
55:57 - lot more about faqs that people run into
56:00 - on building things
56:02 - so that really leads me into the
56:04 - troubleshooting part of the video
56:05 - basically what to do when things go
56:07 - wrong
56:08 - make sure to read your build logs i've
56:10 - already read
56:11 - the build logs with you for a number of
56:13 - different build situations
56:16 - make sure that you can build locally so
56:19 - if all else fails
56:21 - at least make sure you can do
56:23 - your build command locally like yarn
56:24 - build for example and make sure that
56:26 - runs without any hiccups
56:29 - so that this exact same thing can
56:32 - actually run
56:33 - in netlify
56:35 - and
56:36 - then also think about hidden
56:37 - dependencies so for example over here
56:40 - i'm using node 10.13
56:43 - and over in netlify i'm using 10.16. if
56:46 - there's any
56:47 - indee if there's any differences that
56:49 - i'm relying on
56:50 - that might actually
56:52 - cause some very subtle bugs so just to
56:54 - be aware of that you can set the node
56:57 - versions in an nvm script and it's all
56:59 - well documented in the docs
57:02 - next a yarn versus npm issue so for
57:05 - example one of the very common issues is
57:09 - relying on yarn in your build command
57:11 - but then not having yarn in your build
57:14 - environment and yarn is only installed
57:17 - if you have a yarn lock file so if i
57:19 - delete this
57:20 - this will just run
57:22 - this would just assume it's an npm setup
57:25 - and the yarn command will not be
57:27 - available so you'd need to add a yarn
57:29 - lock file for the yarn cli to be
57:32 - installed
57:34 - and that's a pretty common issue for
57:37 - beginners
57:38 - basically just always commit your log
57:40 - files
57:41 - if you're using hugo grunt bower or any
57:43 - other
57:44 - environment like ruby or python
57:47 - definitely head to the build settings
57:48 - page to check out options for
57:50 - configuring the versions of your
57:52 - environment so that
57:55 - you can run the version that you
57:57 - actually expect
57:59 - and if all else fails definitely check
58:01 - out community.netify.com
58:03 - where you can probably search your
58:04 - question to be answered or just follow
58:07 - your own question the last part of this
58:09 - video focuses on environment variables
58:11 - where you can set api secrets and all
58:14 - other good stuff
58:16 - so
58:17 - basically the only place to set
58:18 - environment variables as of right now is
58:21 - inside the user interface so let's head
58:24 - over to our site
58:25 - go to deploy settings scroll all the way
58:28 - down to environment and set environment
58:31 - variables
58:32 - my secret for example
58:37 - i'm
58:38 - always
58:40 - i'm going to save that
58:42 - and now i can access this environment
58:44 - variable inside my build process
58:46 - so i'm going to
58:47 - go in here and actually try to add that
58:50 - to my build
58:52 - one way i can do that is to just add it
58:54 - as a
58:55 - build command as a pre-built
58:58 - so over here i can just add pre-build
59:01 - and by the way this is a built-in
59:03 - feature of npm scripts nothing nullify
59:05 - specific here
59:07 - and let's commit this
59:10 - so now if we open up our nullify log
59:12 - again you can now see that inside our
59:14 - new build we're running the pre-built
59:16 - script and it echoes the
59:20 - secret that i've placed inside of my
59:23 - environment variables so this is handy
59:25 - for
59:26 - open source projects that may want to
59:29 - ping
59:30 - a private api for example to get some
59:32 - data to actually pass into the static
59:35 - site generator so you can build for
59:37 - example shopify site or air table data
59:40 - or anything else like that nullify
59:42 - environment variables are not just for
59:44 - passing in secrets to your app
59:47 - you can also use them to change the
59:49 - environment to vary the environment so
59:52 - you can check out this list
59:54 - where these are netlify specific
59:56 - environment variables nullify
59:58 - communicating to you so you can check
60:00 - for example in process.m.netfile and if
60:02 - that's true then you're inside of a
60:03 - network environment amplify also tells
60:06 - you what immutable url you're deploying
60:08 - to the main url that you're probably
60:10 - going to access what branch is coming
60:12 - from if you're deploying from a
60:13 - different branch the commit the build id
60:16 - the context basically a lot of metadata
60:19 - to figure out what the origin and meta
60:23 - and meta information about your build is
60:26 - so that's the first category of
60:27 - environment variables which are things
60:29 - that nullify puts in your environment to
60:32 - communicate to you what is going on in
60:34 - your environment and the next category
60:36 - are things that you can set inside of
60:38 - netlify's environment so that changes
60:40 - the versions for example you can set the
60:42 - npm version you can set the yarn version
60:44 - or your ruby version go version your
60:46 - java version python version
60:48 - um and all that stuff and so this is
60:51 - extremely variable and
60:53 - it's all there for you if you need it
60:55 - there also another category of
60:57 - environment variables that you should
60:58 - probably never touch but these are
61:00 - helpful in case you need them for some
61:02 - debugging or some magic internal
61:04 - advanced
61:05 - things i personally never use
61:09 - so if you want to learn more check out
61:10 - this scotch article that i wrote
61:12 - detailing how to use environment
61:15 - variables to pass secrets to the front
61:17 - end
61:18 - take note that exposing api tokens to
61:21 - your front end is sometimes a bad thing
61:23 - so
61:24 - react view gatsby they all like to make
61:27 - you prefix environment variables to make
61:29 - sure that you're aware not to leak
61:31 - everything over
61:33 - and then a simple guide is how to change
61:35 - environment variables to vary your
61:37 - environment like we already explained as
61:39 - well as some other poly user features
61:41 - that we talked briefly about
61:44 - yeah so that's
61:46 - an overall guide to netlify build
61:48 - in aggregate it's not too complex but
61:50 - when you combine building with deploying
61:52 - to nullify edge that can be extremely
61:55 - powerful
61:56 - and in the next video we'll cover local
61:58 - dev and whatnot if i can do for you
62:00 - there
62:00 - see ya
62:05 - we're in part three of our introduction
62:07 - to netlify
62:09 - and
62:10 - this is netlifydev
62:12 - nullified dev is the newest kid on the
62:15 - block
62:16 - and in fact most of it is still in beta
62:18 - but it's worth talking about because
62:20 - it's kind of the newest functionality
62:22 - and it helps a lot with your local dev
62:24 - capabilities
62:26 - so the best way to find out more
62:28 - information about it is to check out the
62:29 - site netlify.com products dev
62:33 - and this gives you a good overview about
62:36 - what it does
62:38 - it's a dev server that powers
62:40 - a lot of the local replication of what
62:43 - the netlife production platform is and
62:45 - we just replicate it on your local
62:47 - environment
62:48 - and the reason you want this is because
62:50 - remember
62:51 - you want to have faster iteration cycles
62:54 - and you don't want to wait for the build
62:55 - bot so you want to have full control and
62:58 - local replication of your builds before
63:01 - you actually
63:02 - deploy them so the way you get there is
63:05 - to npm install in the cli and then run
63:07 - the lfi dev and this has the detector
63:09 - mode that will pick up any of your
63:11 - static site generator projects so that
63:13 - starts a full local environment it
63:15 - detects and runs your site generator
63:17 - makes environment variables available
63:19 - from the production platform does edge
63:22 - logic so your redirects will work and
63:23 - then runs your cloud functions as if as
63:26 - a function as a local server and we
63:28 - proxy everything together and then you
63:30 - can also stream live as well
63:32 - so the best way to get started is also
63:34 - to head to the docs um there's a talk
63:37 - that you should definitely check out uh
63:38 - introducing nullified dev this talk
63:40 - happens to be the keynote at which
63:42 - netlifedev was launched so definitely
63:44 - check that out
63:45 - and the other thing you should know
63:47 - about the docs is that it's not the full
63:50 - story the the netflix dev api is still a
63:53 - little bit in flux
63:55 - and so we've actually managed that on
63:57 - the cli repo
63:58 - and that's you have to just go to the
64:01 - github nullify.li
64:03 - and you just look in the readme and look
64:05 - for the nullified dev docs and here you
64:07 - can get actually detailed information
64:09 - about usage but we're going to guide you
64:10 - through it so let's head out over to our
64:13 - demo site that we've been working on and
64:16 - this is running parcel and it's a it's a
64:19 - project that we can run so right now
64:21 - what i'm going to do is i'm going to
64:22 - treat this as a static site so i'm going
64:24 - to act as the buildbot and what does the
64:26 - buildbot do
64:28 - for
64:29 - building this site it doesn't run the
64:31 - dev server it actually runs the build
64:33 - command
64:34 - right so let's actually just run the
64:36 - build command ourselves i'm going to run
64:37 - yarn build and that actually runs parcel
64:40 - build and that generates to the disk
64:42 - folder you can see over here
64:44 - and so that's normally what we'd serve
64:46 - uh from netify's point of view
64:48 - and so now we can actually run nullified
64:50 - dev so
64:52 - we have that cli command lfi dev
64:54 - there's that little gem icon that i'm
64:56 - very proud of
64:57 - and you can see that there's no dev
64:58 - server detected it's spun up a server on
65:01 - localhost 399 as well as a nullified dev
65:05 - server
65:06 - on localhost 8888
65:08 - so they're two different servers and
65:10 - let's see what the difference is so now
65:11 - i'm on localhost 888.88 and you can see
65:14 - that i have an activereact app it looks
65:17 - good and that's what we've been working
65:18 - with but also i can go to localhost 399.
65:22 - and get the exact same thing so i also
65:25 - have a live react app and so what's the
65:28 - difference why do we have two different
65:29 - servers and that's what you really have
65:31 - to understand about nullify is that
65:32 - there's a project server and then
65:35 - there's a netlife dev server so the
65:36 - project server is um if it comes with a
65:39 - server then uh we'll use that one if not
65:42 - nullified dev will spin up a server for
65:43 - you and then serve from there so that's
65:45 - what we've been doing just now which is
65:47 - static host and it will join everything
65:49 - and then output a single unified
65:52 - location so localhost 888. so that about
65:54 - sums it up for the build process
65:56 - but we also want to preserve the
65:58 - developer experience of the
66:00 - live
66:01 - hot reloading dev server so let's take a
66:03 - look at what parcel does for hot
66:05 - reloading we run yarn start and it runs
66:07 - parcel source index html and then it
66:10 - outputs at localhost one two three four
66:12 - so that's the important port for them
66:14 - for for parcel it's gonna be one two
66:16 - three four for other projects that
66:17 - create react app will be others but we
66:20 - know that for nullified devs so we can
66:22 - go into nullified automo and add that
66:23 - config command so the port will be one
66:26 - two three four and we can tell notified
66:28 - of that
66:29 - and you can see documentation for this
66:31 - in the netified dev docs over there and
66:34 - that's exactly what we're doing and then
66:36 - we'll run the we'll add the command of
66:38 - yarn start that's exactly what we just
66:40 - did right we ran yarn start and then
66:43 - we navigated to localhost one two three
66:45 - four so we've configured nullified dev
66:47 - inside of nullify.tamil and the final
66:50 - piece is that we'll want to add a
66:52 - publish directory this is really where
66:54 - the
66:55 - redirects file will be located it's not
66:57 - strictly necessary but it's probably a
66:59 - good idea to leave it in there i'm just
67:01 - going to point it to source
67:03 - doesn't really matter so now i can run
67:04 - nullified dev and instead of running a
67:07 - static server for me it's going to
67:09 - actually start to run the parcel server
67:10 - for me on localhost one two three four
67:12 - i'm making an emphasis on this because
67:15 - previously we ran a static server and we
67:18 - just
67:19 - did yarn build before running our static
67:21 - server and then serving up our files
67:23 - locally now we're using nullified dev to
67:26 - run parcel start or yarn start
67:29 - which runs parcel and parcel runs a
67:31 - server at localhost one two three four
67:33 - so again you'll see
67:35 - that
67:36 - the site can be accessed on localhost
67:38 - one two three four
67:39 - and also
67:41 - the nullified dev server can be accessed
67:43 - at localhost 8888.
67:45 - so the question then becomes why bother
67:47 - to have two servers it's confusing it's
67:50 - seems like it's unnecessary we have
67:53 - localhost
67:54 - on 88.8 as well as one two three four
67:57 - and the reason is because of this
67:59 - diagram and this is all the extra
68:01 - functionality we get to add because
68:02 - we're proxying the project's original
68:05 - server to 8888
68:08 - and so when we're the user we actually
68:10 - view that url localhost 888 and we get
68:13 - all this functionality that we would get
68:15 - in production for example redirects so
68:18 - over here in my underscore redirects
68:20 - file i have a redirect from about us to
68:22 - about
68:23 - and so when i head to localhost 888 i
68:26 - can type in about slash about us
68:29 - and that redirects to slash about and
68:31 - that means that our redirects are
68:33 - working locally
68:34 - and that's important for people for
68:36 - example in the advertising industry who
68:38 - really care a lot about broken links i
68:40 - also want to show you how detectors work
68:41 - so notice i'm starting from an empty
68:43 - folder and i'm going to create a new
68:45 - create react app app that's always very
68:47 - awkward to say and now when i'm done
68:49 - installing notice how this is a normal
68:51 - create react type folder
68:53 - and
68:54 - normally you'd start by typing yarn
68:56 - start but
68:57 - and that kicks off the react script
68:59 - start script but here we're actually
69:02 - going to just run nullified dev and
69:04 - nullify dev is going to pick it up that
69:07 - the fact that we're running a create
69:09 - react app project and then it'll just
69:11 - run automatically and pick it up
69:14 - so that's the vision of create react app
69:17 - and detectors and nullify that nullified
69:20 - dev will just detect your
69:22 - project and it will just run the server
69:26 - automatically without any configuration
69:28 - now we're going to do a quick demo of
69:30 - how environment variables work in
69:31 - nullified dev and you can pull down your
69:33 - production environment variables to
69:35 - local dev
69:36 - obviously you shouldn't always do that
69:37 - but it can be very helpful for debugging
69:39 - and not duplicating some environment
69:41 - variables so first i'm going to run a
69:43 - yarn build
69:44 - and because i don't have this new
69:46 - project linked up to nutify i'm going to
69:48 - run nullify init and because i don't
69:50 - have it linked to github i'm just going
69:52 - to choose the create deploy site
69:54 - manually option and it's just going to
69:55 - create a site instance for me that i can
69:57 - deploy to
69:59 - so now i'm just going to create a
70:01 - netlife.tamil file and that's going to
70:04 - house all the settings which i normally
70:06 - would set up so first i'll add in a
70:08 - build key with a publish
70:10 - value of build
70:11 - and the other command i'm going to run
70:14 - is just nullify deploy dash dash prod
70:18 - and so now because i'm just going to
70:20 - publish that build folder that's all i
70:22 - need to know and how now i'm deployed my
70:24 - create react app app is deployed
70:27 - without continuous deployment
70:29 - but now i can run something like
70:31 - netlify open and head to the deploy
70:34 - section and head to the environment
70:37 - variables section and add in an
70:38 - environment variable here i'm using
70:40 - everybody's favorite environment
70:41 - variable my underscore secret but that's
70:44 - actually not going to work in a react
70:46 - app because
70:47 - create react app doesn't want you to
70:48 - expose every environment variable on the
70:50 - front end so they have it as filtered
70:52 - you must prefix all your environment
70:54 - variables with react app underscore
70:56 - and then whatever your environment
70:57 - variable is so those are the ones that
70:59 - will actually get exposed on the front
71:01 - end and that's a very good security
71:03 - feature but it just trips up people who
71:05 - don't know that it exists and they have
71:06 - to look in the docs
71:07 - so now we can actually reference that
71:09 - environment variable inside of our code
71:11 - so here i'm just going to access
71:13 - process.n
71:14 - dot react app my secret
71:18 - and that's going to be available
71:20 - in production so typically what you do
71:22 - here is you try to have a duplicate and
71:25 - dot env file locally and then run that
71:28 - but here when i run netflight dev i can
71:30 - just or i just run nd because of my
71:32 - shortcut
71:34 - i it just i can just run the dev server
71:36 - but then also if you look at the build
71:38 - logs it also injects this build setting
71:40 - of environment variables so nullified
71:41 - dev goes up into my nullify instance
71:44 - pulls down that secret and now locally i
71:47 - haven't deployed yet locally i have
71:49 - access to that production environment
71:51 - variable so that's the idea and that can
71:54 - be extended uh to do a lot of different
71:56 - things together for example integrations
71:58 - with add-on providers
72:01 - i'm going to do a video on that as well
72:03 - but just trivially you can
72:06 - replicate your production environment
72:07 - with environment variables and redirects
72:09 - you can also share them live with
72:10 - nullified dash
72:11 - live
72:12 - but that's very beta so i'm not going to
72:14 - show it to you today and the other
72:17 - thing that we're going to talk about is
72:18 - also
72:19 - not exposing your secrets so here i have
72:20 - a secret that i want to work with but i
72:23 - don't want to expose it to the front end
72:24 - but i still have to work with it in some
72:26 - form so for example like an api secret
72:29 - that i want to hide somewhere right like
72:31 - i don't want the user to know it because
72:33 - then they can also just use
72:35 - my functions
72:36 - so i'm going to show you the netlife
72:38 - functions create command you can type it
72:40 - out as part of the cli so
72:42 - obviously
72:44 - we're just going to use nutlify
72:46 - functions colon create
72:48 - but obviously you can also use a alias
72:50 - for that i use nfc and that just runs
72:53 - that command
72:55 - oh i don't have a functions folder so
72:56 - i'm just going to go ahead and go to
72:58 - nullify.tamo and add a functions folder
73:01 - you can call it the very creative name
73:03 - of functions but you can just really
73:04 - call it whatever you like and now i'm
73:05 - going to run the functions create again
73:07 - and notice it created that functions
73:08 - folder and now it gives me this drop
73:10 - down of things i can choose from so
73:12 - there's a whole bunch of pre-made
73:14 - templates for you to get started
73:16 - depending on your use case here we're
73:18 - really just going to go through and
73:20 - maybe pick something
73:22 - like this hello world function that i've
73:24 - picked out and that really scaffolds out
73:26 - that template into your functions folder
73:28 - that you've configured
73:30 - by default um
73:32 - identify dev gives you a folder and then
73:35 - a
73:36 - script under that folder
73:38 - which is named the same and it follows
73:41 - the
73:42 - aws lambda syntax
73:44 - and so now i can rename my secret to
73:47 - just my secret because i'm not going to
73:48 - expose it to the front end and i can
73:50 - take that my underscore secret and
73:52 - expose and grab it in process.emv inside
73:55 - of my netlify function so here i have it
73:57 - co-located with my source code but i'm
74:00 - just going to say process.emv dot my
74:02 - secret
74:04 - and i'm just going to echo it out in a
74:06 - json body response so now i'm going to
74:08 - run nullified dev and that again
74:12 - thinking about your mental model runs
74:13 - that create react app server but then
74:16 - also runs
74:18 - a
74:19 - netlife function server so it's under
74:21 - the url.nullify function hello dash
74:24 - world and now that response hello i'm
74:27 - always angry that's the exact response
74:28 - from the environment variables
74:30 - so we've now shown you how to access
74:32 - environment variables from the front end
74:35 - as well as
74:36 - the functions
74:38 - and that's very helpful so for example
74:39 - when i create a hook
74:42 - or fetch data when i load my app and
74:46 - when i when i load my app i can just go
74:48 - back to the front end and that's going
74:50 - to ping my function
74:53 - and let me just open up the dev tools
74:55 - over here so i'm going to open my app
74:57 - and it's going to ping my function and
74:59 - so it's not going to expose that
75:01 - environment variable on the front end
75:02 - it's going to just
75:04 - ping that nullify function and the
75:05 - function itself has access to that
75:07 - environment variable
75:09 - now obviously this is a very simple
75:11 - function
75:12 - and if you look at the code
75:14 - it's actually we've aired on this the
75:16 - side of
75:19 - very simple simplicity just to show you
75:21 - that
75:21 - you really don't need that much to get
75:23 - going
75:24 - we've even included some boilerplate
75:26 - like
75:26 - catching
75:27 - and returning a status code of 500 if
75:30 - there's an error and that's just a best
75:32 - practice for http status codes but here
75:34 - we're going to introduce a more
75:36 - complicated function and this time one
75:38 - that uses
75:40 - known modules dependency for itself so
75:42 - again we're going to run lfi functions
75:44 - create i'm going to pick the node fetch
75:47 - template and node fetch itself installs
75:50 - node modules with a package.json and
75:52 - then it uses that as a fetch inside of
75:54 - known to ping an api so this is a more
75:57 - realistic
75:59 - nullify function or serverless function
76:01 - which proxies an api for you so here i'm
76:04 - going to run i'm going to ping the node
76:05 - fetch in front of in my front end and
76:07 - then run lfi dev and now when i reload
76:10 - my front end it actually loads that
76:13 - external api and so now it's proxied so
76:16 - that i can bypass
76:18 - course issues for example or i can add a
76:21 - secret api key or i can add several
76:24 - functions i can read a database and
76:26 - really just whatever you want to do in
76:27 - known you can do in a node.js functions
76:30 - subject to
76:32 - the timeout limits so here for example i
76:34 - can add my process.emv dot my secret and
76:38 - if that was required by the api i could
76:40 - definitely send it in there without
76:42 - exposing it to my front end so that is
76:43 - probably the number one support question
76:46 - and now you know how to do that
76:48 - i can also swap it out so for example
76:50 - here i have a different api
76:52 - and i'm swapping it out for chuck norris
76:53 - jokes
76:54 - always a good time
76:56 - but hopefully you get the idea that i'm
76:57 - developing all this very very quickly
76:59 - inside of my local dev environment and
77:02 - it's exactly the same environment as it
77:04 - would be
77:05 - in a service scenario i can even test it
77:08 - for example if i open up a new terminal
77:10 - and type nullifier functions invoke
77:12 - that will give me a list of my existing
77:14 - functions and i can pick that
77:17 - one of the functions like hello world i
77:19 - can choose whether i want to emulate
77:20 - nullify identity we'll talk about this
77:22 - in another video i'm going to go with no
77:24 - for now
77:25 - and
77:26 - and that would that would basically pass
77:28 - a authentication header if i need to but
77:32 - here we get the mock response so
77:34 - without even running a front end i can
77:36 - test my my nullify function and so
77:38 - that's a very good example for more
77:40 - information definitely read the readme
77:42 - for example for passing a sample payload
77:44 - query string
77:46 - as well as a file that has that payload
77:49 - we do have special case event triggered
77:51 - functions
77:52 - we're not really going to cover that
77:53 - right now but event triggered functions
77:55 - are basically
77:56 - hard-coded names that are triggered on
77:59 - certain events like for example when
78:01 - someone signs in through nullify
78:02 - identity and that's useful to know
78:05 - now important thing to know is to
78:06 - understand what happens when i have
78:09 - my nullify functions continuously
78:11 - deployed so for example here in my
78:13 - getting norm on the folder file i have
78:15 - the known modules get ignored so
78:18 - that means that when i deploy my files
78:21 - in nullifies buildbot the node modules
78:23 - for the node fetch
78:25 - function will not be there
78:27 - and that will be a problem because it
78:28 - will try to require the node fetch
78:31 - module and it will fail so here i have
78:34 - an example of such a failure and it says
78:36 - for example error could not find known
78:38 - fetch module in the file
78:41 - and so a lot of people run into this and
78:43 - think it's a bug with nullified dev uh
78:46 - it's not really it's it's also a little
78:48 - bit our fault that we can make this
78:50 - experience a bit nicer but really
78:53 - the the solution is to make sure to
78:55 - install
78:56 - uh to run npm install or yarn
78:59 - on each individual function folder if
79:02 - you need it obviously if you don't need
79:03 - it you can just put everything in the
79:05 - top level node modules and that's the
79:07 - standard known resolution algorithm
79:10 - but one solution to you actually use is
79:12 - to add netlify lambda so this is a
79:15 - helper library it used to be the
79:17 - predecessor to nullify dev
79:20 - and that's why you see some old
79:21 - information about this
79:23 - but now netflix lambda is a helper
79:24 - library for nullified dev
79:27 - and we'll add we'll use the netify
79:28 - lambda install thing and we'll just add
79:31 - it as a post install npm script so now
79:34 - that will run and it'll go through every
79:36 - single function folder
79:37 - and it will uh it will just install uh
79:40 - the dependencies for every functions
79:41 - folder and you can read more in the docs
79:43 - but essentially this is what the success
79:45 - will look like
79:46 - we can see
79:48 - somewhere in the docs that will have a
79:50 - netlify lambda install command
79:53 - being run and it will say it's
79:55 - installing function dependencies and
79:57 - node fetch dependencies are installed so
79:59 - that's the kind of thing that we are
80:00 - looking for for a continuously deployed
80:03 - serverless nullify function
80:05 - solution
80:06 - with no dependencies all independently
80:08 - managed per folder
80:10 - and that's a that's a really good way to
80:12 - handle the dependencies because it will
80:13 - just guarantee that it's always
80:15 - installed and so here you can see the
80:17 - same app that we built in dev in
80:19 - production and it's working exactly the
80:21 - same
80:22 - now if you notice um all these functions
80:24 - that we've been written so far is in
80:26 - node.js format with the exports.handler
80:29 - syntax or module.export syntax and if
80:31 - you want to use webpack babel or
80:33 - typescript
80:35 - you can't really do that here
80:37 - without a build step right this is raw
80:40 - node.js it runs under node 8 or 10
80:43 - and you really need a build step and
80:44 - that's where you use nullify lambda
80:47 - so nullified lambda and netflight dev
80:49 - have similar but overlapping
80:51 - responsibilities and i wrote a lot of
80:52 - docs in the readme to explain how to use
80:55 - them
80:56 - but basically
80:57 - netflix lambda is a build tool now
81:00 - that runs your nullify functions from a
81:02 - source to a dist
81:04 - and that's the under basic understanding
81:06 - that you have to achieve here now now
81:08 - this
81:09 - these functions will be your source file
81:11 - and you're going to have to serve or
81:12 - publish the functions from a dist
81:15 - folder
81:16 - so so here we can actually move
81:19 - everything so for example i can create a
81:20 - new function folder called source
81:23 - functions and i can move
81:25 - this function this hello function to a
81:28 - typescript function
81:30 - i i can also just like rename everything
81:33 - so i'm going to i'm going to add some
81:34 - typescript types so for example i can
81:37 - follow the docs and add babel preset
81:39 - typescript
81:40 - uh yarn add
81:42 - d that will preset typescript and i can
81:44 - also add a bunch of other
81:46 - uh utilities like typescript types node
81:48 - and types aws lambda and that just helps
81:51 - to add typescript to my project here i'm
81:53 - only going to use it for that hello
81:55 - world function but you can see
81:57 - everything i'm about to do so i'm adding
81:58 - a babelrc file and so we're using
82:00 - typescript with babel
82:02 - and now in helloworld.ts i can import
82:05 - the types for
82:07 - importing hand the handler contacts
82:09 - callback any api gateway type from aws
82:11 - lambda so now i can type go through and
82:13 - type everything and i can also use the
82:15 - export keyword
82:17 - and that's a very very handy handy way
82:19 - of typing everything so now i can type
82:21 - for example api gateway events for
82:23 - events and contexts for context and now
82:26 - each of these things have the correct
82:28 - properties on them so for example if i
82:30 - type event dot it gives me all those
82:32 - values from the autocomplete because
82:35 - of the types that are just from
82:37 - definitely typed of aws lambda same
82:40 - thing for context
82:42 - um including an identity field which we
82:44 - can use for nullify identity
82:47 - and and so that's these are just very
82:49 - handy ways of writing better more
82:51 - correct code if you are okay with using
82:54 - a build step and using typescript
82:57 - and so now um we need to impose a build
83:01 - command i'm going to
83:02 - put it on the post build part of npm
83:04 - scripts it's going to run if i land the
83:07 - build source function so it's going to
83:08 - build from the source functions into the
83:11 - production
83:12 - publish the the folder that we're going
83:14 - to publish like functions hello world
83:17 - and that's going to be helloworld.js
83:19 - right and and that's going to be a
83:21 - minified output from the source
83:23 - typescript file
83:24 - um and so that's what netflix lambda
83:26 - does it helps you install dependencies
83:28 - and it helps you build
83:29 - um
83:30 - from a source file to a disk file and
83:33 - and so then everything can be
83:35 - uh it can be run locally uh netify dev
83:38 - has an understanding of what nullify
83:40 - lambda is so it will run that if i
83:42 - lambda build for you if it detects it in
83:44 - your package script so this is what we
83:46 - call function builder detectors
83:49 - and that's
83:51 - that's exactly how it how it's supposed
83:52 - to work
83:53 - so that you can run it
83:55 - locally and make sure that your
83:57 - scripts are up to date but then also
83:59 - deploy them
84:00 - with minimum configuration so that is
84:03 - nullified dev uh we're gonna go to the
84:06 - next part to identity forms analytics
84:08 - cms all that good stuff
84:11 - but thank you for
84:12 - taking the time to check out nullified
84:14 - dev and hopefully that helps your local
84:16 - dev work
84:20 - okay so now we're on to forms this is
84:23 - actually a pretty big section it's one
84:25 - of the most widely used add-ons of
84:27 - netlify and it's meant for what it says
84:31 - on the tin for form submissions
84:34 - it's not a database although it does
84:36 - store data
84:37 - so don't try to use it as a database
84:39 - because it will cost you
84:42 - and also it's just not meant for that um
84:45 - in terms of the data structure that it
84:46 - that it offers
84:48 - but it's very handy for
84:51 - contact forms
84:52 - uh like if you want to inquire about
84:54 - prices so if you want to book a workshop
84:56 - or something or
84:59 - you know leave a comment
85:01 - or upload a file for example for
85:04 - claiming receipts or something like that
85:07 - all of these are very good use cases for
85:09 - netlify forms
85:11 - so where to find out about the life
85:13 - forms
85:14 - we're gonna go over to the docs
85:17 - and head to the forum section
85:20 - and forms are literally
85:22 - adding an attribute onto a form tag as
85:24 - far as regular html goes
85:27 - i do think it's a little bit more
85:29 - complicated for react forms
85:32 - and we'll talk a little bit about
85:34 - how that works in react
85:36 - but in plain html we can actually do
85:39 - this pretty easily in our demo that
85:41 - we've been working on so i'm going to go
85:44 - over to the demo that we have
85:48 - and i'm going to go over here so right
85:50 - now i have all this bunch of stuff
85:52 - actually i'm just going to go over to
85:53 - the about so let's put the forms on the
85:55 - about page so you can see right now i
85:58 - don't have any forms i just have a bunch
86:00 - of header and html
86:02 - and then let's go over to the
86:06 - drop demo site
86:08 - let's see
86:10 - drop
86:11 - nullify drop demo sitemaster yep okay
86:16 - let's go over to the forms and see that
86:20 - uh here the documentation
86:22 - um here's some basic info and there's
86:24 - nothing here because there's no forms
86:26 - activated so what i'm going to do is i'm
86:28 - literally going to copy and paste this
86:31 - example
86:32 - down inside of the about us page and i'm
86:35 - going to say this is the contact us page
86:41 - because
86:42 - i just like to name things what they do
86:45 - so i'm going to call this contact.html
86:47 - and now because i have a build step from
86:49 - source to dist
86:51 - i have to say yarn build
86:54 - basically just following my own build
86:56 - command down in here i covered this in
86:58 - the previous video
87:01 - and i can now deploy i like deploying
87:05 - locally and not using the continuous
87:07 - deployment when i'm debugging something
87:09 - like a form
87:10 - so that i can do the builds locally
87:12 - and just be very very sure what i'm
87:14 - building because sometimes your static
87:17 - side generator might strip out some
87:18 - values here we just really want to make
87:20 - sure that we have a netlify tag
87:23 - so if i refresh i should be able to see
87:26 - something different i should see the
87:28 - form name contact
87:30 - because i specified the nullifier tag
87:32 - and i should see that it's got no
87:33 - submissions right now
87:35 - so let's have a look at what it looks
87:37 - like on
87:39 - the current deployed site
87:41 - i'm going to go over to the contact us
87:43 - page
87:44 - and here i'm going to say hello
87:47 - free code cam obviously you want to put
87:49 - validation on this before sending oh
87:53 - well
87:55 - there we go so by default it sends us to
87:58 - this thank you page which it's just a
88:00 - default nullify page
88:03 - and you can customize that later we'll
88:05 - just show you in a separate section
88:08 - but you can see over here if you head to
88:11 - the form section
88:12 - and you hit here that you see the form
88:15 - submission down in here as well
88:17 - let's go ahead and attach
88:20 - file submissions to this form
88:22 - um
88:23 - i'm going to just duplicate this and
88:26 - call this file
88:28 - you must have an input type of file
88:30 - that's the semantic html and then we can
88:32 - just call this whatever you want like
88:33 - fcc file
88:35 - and we'll save that
88:38 - again i'm going to yarn build
88:42 - and
88:44 - push
88:46 - using my alias for nullified deploy
88:52 - so i just changed the form but because
88:55 - it's the same name it's going to still
88:57 - reflect as the same form
89:00 - over here
89:01 - and it's still reflected that but it's
89:03 - got a new field here for fcc file so
89:05 - let's go over here and refresh
89:08 - it form two
89:11 - form
89:12 - at f3codecamp.com
89:16 - let's pick a file
89:18 - let's send a little image
89:23 - send that up there
89:25 - thank you submitted
89:27 - and when we refresh we should be able to
89:29 - see form two
89:31 - and a link for the file that was
89:33 - submitted so this is an image but
89:35 - obviously it could be
89:37 - something else as well
89:39 - now this thank you page is kind of ugly
89:41 - so let's actually change that to reflect
89:44 - something that reflects our the look and
89:46 - feel of our site
89:48 - and we'll head over to the project
89:51 - we'll copy over this contact html and
89:53 - we'll say thank you
89:55 - dot html
89:57 - blah blah blah
89:59 - thank you
90:03 - thank you
90:06 - and
90:07 - take that out
90:10 - all right um also going to want to
90:15 - link to that somewhere or build that
90:18 - somewhere
90:20 - so i will just refer to that in index
90:22 - html
90:24 - and then the other step not to forget is
90:26 - to add an action to the form so i'm
90:28 - going to add an action
90:30 - and i'm going to say
90:32 - just head to the thank you page after
90:34 - you're done submitting
90:37 - okay
90:38 - so i think that's ready
90:40 - i'm gonna yarn build
90:44 - again i'm doing manual deployments
90:45 - because i don't want to wait for
90:47 - continuous deployments i want full
90:49 - control over everything so do not
90:51 - continuous deploy
90:53 - all right so i'm going to refresh and
90:54 - i'm going to say try 3
90:57 - potato tomato whatever
91:00 - and i'm going to choose the jam reptiles
91:03 - image i'm going to send that in
91:06 - it's going to submit and it's going to
91:07 - redirect and say thank you right or you
91:09 - could redirect to the index page or
91:11 - whatever
91:12 - um so over here i received the
91:14 - submission again
91:16 - okay
91:17 - so that's all
91:18 - well and good and now we have a basic
91:20 - working flow
91:23 - the next thing you're going to want to
91:24 - do is probably to do something else on
91:26 - submissions so
91:28 - right now when you're submitting
91:31 - your forms
91:33 - you don't really know about them they're
91:34 - just there and you have to kind of check
91:36 - for them
91:37 - you can actually opt to get an email
91:40 - when people submit forms to you
91:42 - you can add notification
91:44 - you can add slack integrations and email
91:47 - or outgoing web hook to anything that is
91:49 - listening for a web hook
91:52 - um
91:53 - so that's that's an option as well i
91:56 - should probably put that in there as one
91:57 - of the options but then um what i wanted
92:00 - to make clear is that you can also
92:04 - create functions that do whatever you
92:05 - want um including form validation so
92:10 - everything here is client-side
92:12 - uh but what if you need to do
92:14 - server-side form validation do you need
92:15 - a server obviously the answer is no
92:17 - because we're netlify
92:19 - um and here's how to do it
92:22 - we're gonna declare a function
92:24 - folder down in here
92:27 - i'll just call the functions folder the
92:28 - very imaginative name
92:31 - of functions
92:33 - and we'll put that it will create that
92:36 - functions folder
92:39 - um i actually have a nullified dev
92:42 - uh
92:43 - alias for this or template for this
92:46 - so i'm gonna use nullify functions
92:47 - create and i'm gonna look for the
92:49 - submissions
92:50 - created template
92:52 - so i'm going to
92:54 - let notify dev scaffold that out for me
92:57 - so what this does
92:58 - submission created is it runs when
93:01 - a submission is is being done
93:03 - um and it parses that email and it sends
93:07 - stuff out
93:09 - we're going to dramatically simplify
93:10 - this so that we can actually just try
93:14 - doing something with our
93:17 - event triggered function which because
93:19 - this is what it's called this is a
93:20 - special special name
93:22 - in the docs
93:24 - where it just fires when people submit
93:26 - forms
93:28 - um so we're gonna parse the event body
93:31 - and payload
93:34 - we're gonna console log it out
93:38 - and that's gonna be json and stringify
93:41 - this thing
93:43 - um and then we're just going to return a
93:46 - body
93:47 - uh that reflects some measure of success
93:53 - i am going to just return
93:55 - something like a
93:58 - status code
94:00 - 200
94:02 - and
94:03 - and actually i'm just gonna say okay
94:06 - all right so very very simple function a
94:08 - few lines of code and we're just logging
94:10 - out what we receive and we'll see what
94:12 - happens
94:13 - there
94:15 - okay so now we can just nullify deploy
94:18 - again
94:20 - notice i don't have to build the front
94:21 - end because all i'm doing is working
94:23 - with the functions so now it's
94:25 - discovered the function and it's
94:26 - deploying the function as well
94:28 - if you want to see the function over
94:31 - here you can actually head to the
94:32 - function section
94:34 - and refresh
94:35 - and you can see that there's a
94:37 - submission created function and there's
94:38 - a log for this function
94:40 - so now we're gonna
94:42 - submit another form try number four
94:44 - same potato potato
94:47 - we're gonna submit it again but now it's
94:49 - gonna fire
94:50 - and and it might take a while but we
94:53 - will actually see the logs here so the
94:56 - idea is that everything that was
94:58 - submitted you can actually access
94:59 - including some nice metadata that you
95:01 - can use
95:02 - um
95:04 - and send it off to whatever other
95:06 - service that you're using so here we've
95:08 - got a subscription newsletter thing
95:11 - but this is literally as flexible as you
95:13 - want you can obviously
95:15 - set up your own slack integration on
95:16 - twilio or whatever you can think of
95:19 - just from the event of someone
95:21 - submitting a form for you
95:23 - and obviously you still have the form
95:25 - data over here
95:27 - so now that anyone can send in
95:29 - a form to your site
95:32 - the immediate question is how do we make
95:34 - sure that
95:36 - they're legit and not spam submissions
95:38 - and that is the question of spam
95:41 - filtering we're going to cover three
95:42 - methods
95:43 - and the first one is the best because it
95:46 - takes no configuration you already have
95:48 - it on by default
95:50 - and that's the akismet
95:51 - filtering and the kismet is what
95:54 - wordpress uses for managing anti-spam
95:57 - they measure it against other ongoing
95:59 - spam activity and help you actively
96:01 - block them it's hard to test them
96:03 - because it's kind of
96:05 - amorphous but
96:07 - we can actually try with some of these
96:09 - hard-coded names which are guaranteed to
96:11 - be spam and let's just try and submit
96:14 - them and see what happens
96:16 - so we'll submit them over here and when
96:18 - we refresh we don't see them show up in
96:20 - the verified submissions because they're
96:23 - over in the spam submissions
96:25 - and you can review them and either
96:27 - delete them or mark them as verified
96:30 - and once they're verified they'll show
96:32 - up
96:34 - the next method we want to address is
96:35 - the honeypot
96:37 - so the honeypot is a security method
96:39 - where
96:40 - basically tricking bots into filling out
96:43 - fields which humans would not see
96:46 - and you can hide those fields with css
96:49 - so we'll check we'll try this on this
96:51 - honeypot field over here and here's how
96:54 - you kind of do it in the docs but
96:56 - basically if you go over to your contact
96:59 - form
97:01 - and let's
97:02 - put in a harne pot filled i'm just going
97:04 - to copy and paste this field
97:07 - and
97:09 - paste it in there
97:11 - and so this the idea is that this will
97:13 - be hidden
97:14 - and we can add in a style tag for
97:16 - example
97:19 - dot hidden
97:22 - opacity
97:24 - zero
97:26 - and then the last thing to do is to tell
97:29 - nullify that this is a honeypot field
97:33 - so anything with the name bot field is a
97:35 - honeypot field so we'll just tell notify
97:37 - that
97:38 - and
97:42 - okay
97:43 - and so now
97:45 - we are in build again
97:47 - and netlify deploy
97:49 - so the idea is that you have extra spam
97:51 - prevention enabled by honeypot field
97:53 - that's a new indication that it's on
97:56 - and it's kind of hard to demo because it
97:58 - just works but i'm going to try anyway
98:00 - so let's actually just use the form
98:03 - and here you can see the opacity zero
98:05 - field obviously you can move it around
98:07 - with css or shrink it or whatever
98:09 - it doesn't really matter um but here
98:12 - let's just say human at human
98:15 - i'm human
98:16 - and human human.com and send that in and
98:19 - we should see human human.com show up
98:22 - over here
98:23 - it's fantastic
98:25 - and now let's actually say robot
98:28 - and
98:29 - not totally human.com
98:32 - and uh let's actually fill in that field
98:34 - we're not supposed to feel it so the
98:36 - idea is that as a human
98:39 - you never you never see this field so
98:40 - you never fill in but as a robot you're
98:42 - filling in fields indiscriminately so
98:45 - um i'm totally
98:48 - human
98:50 - all right so there's a field here
98:52 - and we're going to send that in and
98:54 - let's see the network
98:56 - tab
98:58 - and we're gonna send that in
99:01 - and
99:02 - and you can see in the post request that
99:04 - we send that in the bot field
99:06 - it's actually filled out so
99:09 - that means that when nullify receives it
99:11 - they know that that field is supposed to
99:13 - be
99:13 - screened out so
99:15 - it just doesn't even show up
99:17 - when you refresh
99:19 - and that's one way of
99:22 - spam prevention via honeypot field it
99:24 - doesn't even show up in the spam
99:25 - submissions just because we know for
99:26 - sure it's spam great so
99:29 - that's the second method and then the
99:31 - third method is recaptchas
99:34 - so adding a recaptcha is pretty much the
99:36 - same as adding a honeypot except that it
99:39 - has a different method of catching spam
99:43 - and
99:44 - this one imposes more work on humans but
99:46 - has a higher chance of success of
99:49 - filtering out spam
99:50 - so
99:51 - the way you do it is over here if you
99:53 - scroll down to the recaptcha section
99:56 - and you literally add a recaptcha field
99:59 - so let's just add it in over here
100:01 - to our code
100:05 - and we'll also tell the form
100:09 - that there is a recapture field
100:13 - so this is the most secure form
100:16 - there has ever been
100:17 - we're going to build and deploy again so
100:19 - when i refresh there's a recapture field
100:21 - obviously it could be styled better but
100:24 - you can kind of fill it in
100:26 - and
100:28 - let's intentionally fail
100:30 - the recaptcha
100:35 - it's just not letting me through
100:36 - [Laughter]
100:43 - so yeah i can't really fake being a
100:45 - robot
100:48 - oh no
100:53 - um so it's that good that even though
100:55 - i'm a human
100:56 - trying to simulate being a robot
100:59 - um i just have to be good enough at
101:01 - computer vision to let it through and
101:04 - now it's through
101:06 - and i can see my my own submission
101:09 - and uh yeah so it is a little bit more
101:12 - annoying but that's recapture for you
101:15 - and you're pretty much guaranteed that
101:17 - it's not a robot
101:19 - and that's also v2 so you should know
101:21 - the difference between recapture v2 and
101:23 - v3
101:24 - uh v2 is the one with the annoying
101:26 - pickings of stuff
101:28 - there is recatcher of your own settings
101:30 - so you can set up your own recapture
101:32 - secrets over here you're using nullifies
101:34 - and recapture v3 is
101:37 - the new one without a image selection
101:40 - it's
101:41 - invisible and supposed to be low
101:43 - friction and you'd have to set up set
101:45 - that up yourself with javascript um but
101:48 - if you're worried about user friction
101:50 - this is the way to go
101:52 - so we've talked about spam filtering
101:54 - and
101:55 - i just wanted to address one of the
101:56 - important nuances that a lot of
101:58 - developers face with modern javascript
102:00 - frameworks and that's with single page
102:01 - apps
102:02 - and let's just talk a little bit about
102:04 - how we're doing the form processing here
102:07 - so when you deploy
102:08 - you can actually see that here i'm doing
102:11 - manual deploys but it's the same
102:13 - principle
102:15 - i deploy from my cli or from github
102:17 - whatever
102:18 - and once it builds and and pushes all
102:20 - the html out
102:22 - there's this post-processing step that
102:24 - happens and that's where the forms
102:26 - are detected what netflix is basically
102:28 - doing is saying okay out of
102:30 - all of these generated files let's zoom
102:32 - out a little bit out of all these
102:34 - generated files in the disk folder which
102:36 - of these are html
102:38 - um and it looks like this one is html
102:40 - okay and let's look at all of these
102:43 - fields
102:44 - and look for a form field with the
102:46 - nullify tag
102:47 - right and then
102:49 - i'm just going to scan this in as as a
102:52 - form
102:53 - the problem with this is that sometimes
102:55 - the form doesn't exist
102:57 - as a single page app
102:59 - so sometimes you just have like div id
103:03 - equals app
103:05 - and that's all you ship for create react
103:07 - app
103:08 - so that's a common problem and there are
103:12 - a number of ways to do this so what
103:15 - happens in this scenario where there's
103:17 - no form in the html is that nullify
103:19 - would just tell you that
103:21 - it hasn't
103:22 - detected any forms and therefore it
103:24 - doesn't set up the form for you on the
103:25 - back end
103:26 - um so you need to tell netlify that
103:29 - there is a form
103:31 - and so
103:32 - what the trick is to that is that
103:34 - instead of this div id app you can
103:36 - basically take the app form field name
103:40 - and
103:42 - put it inside of the div id app
103:47 - and then paste it in there
103:50 - and so
103:51 - this way nullify will scan the html
103:54 - and find the find the form name set up
103:57 - the fields and then react will come in
103:59 - and
104:00 - replace everything inside of div id app
104:03 - and
104:04 - you know use its own javascript created
104:06 - elements that look exactly the same as
104:08 - this thing so because this is really
104:10 - important for people to understand we're
104:11 - actually going to go through the actions
104:13 - and actually do this
104:15 - and just to
104:16 - make really really clear
104:18 - how this is done so that
104:20 - when you run into your own single page
104:22 - app scenario i don't care what framework
104:24 - you're using the same principles apply
104:26 - it has to exist in the final html and
104:28 - then you can do whatever you want on the
104:30 - javascript side of things and we'll talk
104:32 - about some ajax form submissions as well
104:34 - so over here
104:36 - remember in our initial
104:39 - video we actually replaced index.html
104:43 - with some javascript
104:46 - index.js over here i'm going to take
104:48 - that out
104:50 - and move it over to the contact form
104:53 - so the contact form is now going to have
104:55 - the javascript
104:57 - and the javascript is going to look for
105:01 - an id of app and say hello
105:04 - from react
105:05 - so let's do that
105:09 - and i'm going to say id
105:12 - actually
105:13 - no let's let's put this put this here
105:15 - div id equals app
105:19 - and we'll do close div here
105:23 - okay
105:24 - so let's start this and let's see how
105:27 - that works
105:28 - so
105:29 - reacts so this will be in the html but
105:32 - reacts will come in and replace
105:34 - everything inside divide the app
105:37 - so let's head to the form
105:40 - and you can see that little flash of the
105:41 - form but as the javascript came in now
105:44 - it became a react app
105:46 - so the whole idea is that i have to
105:47 - replicate
105:48 - what's in here with the
105:50 - [Music]
105:52 - uh with the react stuff so once there's
105:54 - one version of this in here in the in
105:56 - the
105:57 - in the html and then the other one
105:59 - inside of the form
106:03 - all the classes have to be class names
106:07 - so
106:08 - there's the form now from react right
106:11 - and
106:13 - if you're a gatsby or other static site
106:15 - generator user
106:17 - you're going to be yelling at me saying
106:19 - you should probably just instead of
106:21 - duplicating between html and javascript
106:24 - right having the same form in both
106:27 - why not just statically generate from
106:28 - javascript i'll tell you what i agree
106:31 - with you
106:32 - so let's install gatsby and see how that
106:34 - works
106:35 - so yarn add gatsby
106:37 - and we're going to just make a very
106:39 - simple gatsby page so
106:42 - add pages
106:44 - and we'll say something like
106:47 - my
106:48 - gatsby dot js
106:52 - gatsby gatsbyform.js
106:54 - why not
106:56 - so we'll render this and we'll export
106:59 - this by default
107:01 - we'll see what happens when we add a new
107:04 - script
107:06 - like gatsby
107:08 - build
107:10 - or build gatsby
107:13 - you can name it whatever you like i'm
107:14 - just
107:18 - relying on convention
107:20 - so now with gatsby installed and i have
107:23 - the gatsby page set up it's going to
107:25 - ignore all this html stuff it's which is
107:27 - fine for me
107:29 - um but i have the gatsby page set up
107:32 - let's see what it built for me
107:37 - so i ran gatsby build and by default
107:39 - gatsby builds to the public folder not
107:41 - the dist folder
107:43 - and you can change that in a gatsby
107:44 - config it's up to you but i wanted to
107:47 - make sure to go through this exercise
107:49 - because it's important to know that yes
107:52 - you save the duplicate action
107:54 - um from
107:57 - just writing in javascript and then
107:58 - letting that generate your html so that
108:01 - nullify can scan the html and and set up
108:03 - your form for you
108:05 - but you do need to know some caveats so
108:08 - um that's why i'm here
108:09 - so
108:10 - in the public folder this is all the
108:12 - generated stuff that you're going to
108:13 - deploy right
108:14 - and inside of gatsby form it's generated
108:17 - in index.html
108:18 - and inside that index.html we see what
108:20 - we expect to see which is a full html
108:22 - thing with all the scripts and stuff and
108:24 - that's great and the form so now if i
108:26 - can read this but it's missing one
108:28 - important thing which is
108:30 - a very important attribute
108:33 - and
108:34 - if you see over here it says hello from
108:35 - react
108:36 - and then but it doesn't have the you
108:38 - know the react code because that will be
108:40 - hydrated later
108:42 - and then it's got this form it's got all
108:44 - the right fields except for one which is
108:47 - going to cause you no amount of
108:49 - annoyance until
108:50 - you figure it out so i'm here to save
108:52 - you that time which is it's got the
108:54 - recapture field it's got the honeypot
108:55 - feel it's got the action field
108:58 - but it doesn't have the nullify field
109:01 - so right over here
109:02 - um and that's because
109:04 - gatsby by default strips unrecognized
109:07 - fields and that's why netlify actually
109:10 - recognizes both the data dash version as
109:12 - well as the non-data dash version
109:15 - and for gatsby and for a lot of webpack
109:18 - and like create react app and other
109:20 - build tools
109:22 - they wanna they wanna strip away stuff
109:25 - that isn't gonna be used
109:27 - as far as they know
109:29 - in production so they strip away the
109:31 - nullify tag
109:32 - um so we need to make sure that that
109:34 - does show up so i'm going to make sure
109:36 - that i'm going to change this to data
109:38 - nullify
109:39 - and make it
109:40 - true so and i'll save this as my gatsby
109:44 - form in my react
109:46 - page
109:47 - and i'll rerun my build
109:49 - and now when you see the generated html
109:53 - just make sure to check that the form
109:56 - does show up with the right tag
109:58 - and uh
110:00 - and then all will be happy
110:02 - all right so we're going to switch from
110:04 - gatsby
110:05 - issues
110:06 - gatsby and other static site generator
110:08 - issues
110:09 - just remember that they might strip out
110:11 - some stuff and we're going to switch
110:13 - back to the regular single page app
110:17 - code because
110:18 - that will pretty much behave exactly the
110:20 - same in gatsby or in
110:23 - a single page app thing like create
110:24 - react app and now let's take a look at
110:27 - this form and the subsequent action of
110:30 - redirecting to a thank you page
110:32 - um this may not be what we want in terms
110:34 - of user experience like let's say we
110:36 - submit this form and
110:39 - it goes in notice that it redirects to a
110:41 - different page
110:42 - here locally it's redirecting to the
110:45 - home page instead of the thank you page
110:46 - because that's all we serve
110:49 - but
110:50 - that's still the point remains that
110:52 - maybe you want to stay on the same page
110:54 - so let's talk about that so if that's
110:56 - what you want then you're going to have
110:58 - to submit it through javascript instead
111:00 - of a
111:01 - default html form submission
111:04 - so we're in our react app
111:06 - and we're going to have to write some
111:07 - submit handlers to handle that
111:10 - submission
111:11 - so
111:12 - uh it will be something like cons handle
111:15 - submit
111:18 - it takes an event and we can call
111:21 - event.prevent
111:23 - default
111:25 - and the form will have a target
111:27 - and the form will be the target
111:29 - of the event
111:32 - and
111:32 - so the the whole idea is you prevent the
111:36 - default submission of the form via
111:37 - regular html and then we handle
111:40 - everything in javascript
111:41 - um
111:42 - and update the state accordingly so for
111:45 - example
111:46 - i can have a message that updates like
111:49 - that
111:57 - and i'll just make this nothing
111:59 - and i'll display a message
112:01 - something like
112:03 - message
112:05 - message
112:06 - if not i'm going to show hello from
112:08 - react
112:10 - and then i'll just paste in some fetch
112:14 - boilerplate so basically we have to
112:16 - replicate all the
112:18 - the functionality that we that we would
112:20 - typically get and as well as grab all
112:22 - the names of every input field and
112:25 - just submit those values for this
112:28 - example that i copied it's assuming
112:30 - controlled values meaning that there is
112:32 - some state
112:34 - that you can just spread into the body
112:36 - but here you can also do uncontrolled
112:38 - react components
112:40 - and i'll assume that you already know
112:42 - how to do those so i'm just going to
112:45 - fill in the rest of it by
112:48 - going form that name dot value
112:51 - um so email
112:55 - the value
112:57 - okay so then we'll have the we'll we'll
113:00 - send the submission to the endpoint
113:03 - and
113:04 - then
113:05 - on success we'll navigate
113:07 - uh if assuming we we have a router
113:09 - library we which we don't in this in
113:11 - this setup but assuming you have a
113:13 - router library we navigate
113:14 - by getting by going to the attribute of
113:17 - the form which is the action and so
113:20 - that's a that's a kind of cheap way to
113:21 - simulate that but here we're assuming
113:23 - that we want to stay on this same page
113:25 - after submission
113:27 - so we don't actually need
113:30 - this navigation and we don't need the
113:32 - action the
113:34 - action field as well so i'm going to
113:36 - remove that just to make clear that you
113:38 - don't need it so i go to down to the
113:40 - forum this is only for the regular html
113:43 - like after submission
113:45 - uh navigation
113:46 - so i'm going to delete that and now i'll
113:49 - say
113:50 - something like set message
113:52 - success
113:55 - and that should refresh accordingly
113:58 - before we forget we should also
114:01 - i should also mention that this encode
114:03 - command
114:04 - is a nice little wrapper around the form
114:06 - data api inside of the browser
114:10 - and you can also use this on the server
114:13 - if you want just look for the relevant
114:14 - npm package and that just encodes things
114:17 - properly so that people know so that
114:19 - notify knows it's a form
114:21 - and then don't forget to wire up the
114:25 - submit handler
114:28 - so that's all you need for uh
114:31 - wiring up the react app and so
114:34 - locally we don't have the form endpoint
114:37 - at the back so um we can't really test
114:40 - it that much apart from just sending it
114:41 - in
114:42 - and then seeing that there's an error
114:44 - because it's a 404 when you post that
114:47 - message but we can actually build
114:51 - build and deploy
114:54 - so when we go to the production site and
114:58 - try this out again
115:01 - hello ajax
115:03 - ajax at
115:05 - potato.com
115:06 - send it in we can actually control the
115:08 - state of the forum and stay on the same
115:11 - page
115:12 - and do everything within react but in
115:14 - the back end we can actually see the
115:17 - form submission come in
115:19 - it says hello ajax
115:24 - so the next section is going to be about
115:27 - password protection and role based
115:29 - access control
115:31 - and and this is this is a very very
115:33 - broad base
115:34 - cdn level protection
115:37 - for your content for your site
115:39 - and so let's look into what that looks
115:42 - like so if you head into settings
115:45 - and you look into access control
115:49 - you can see that this is uh
115:52 - available on paid plans
115:54 - but what i'm going to do is i'm going to
115:56 - transfer this over to a different team
115:59 - so that we can actually see what this
116:00 - paid plan
116:02 - looks like
116:03 - and now when i head to access control i
116:05 - can see
116:07 - this password
116:09 - and i can set a password
116:12 - so a simple password like password
116:16 - oops
116:21 - and that's a that's a nice password over
116:23 - there and what that looks like is simply
116:26 - a password control down in here
116:29 - and so
116:30 - uh especially for internal sites that
116:32 - you're building for your co-workers you
116:35 - can just
116:36 - supply something like this
116:39 - p-a-s-s-w-r-d
116:42 - and have password-based access control
116:44 - we actually do this a lot inside of
116:46 - nullify
116:47 - for
116:49 - private sites
116:50 - and for for more fine-tuned jwt based
116:54 - access control
116:56 - where you can have role-based access
116:58 - control you can set the jwt secret
117:02 - you can definitely check the docs for
117:05 - more of that information
117:06 - but basically this involves using a
117:09 - third-party authentication provider like
117:11 - uh off xero or octa and they can
117:14 - authenticate your
117:16 - jwc secrets
117:18 - and
117:19 - you can say only admins are allowed to
117:22 - view this page and you can set it in the
117:25 - redirects file
117:27 - so you can limit it just to admins and
117:29 - everyone else will get the 404
117:32 - so that's how you do it with row based
117:34 - access control
117:35 - definitely hit up our support if you
117:37 - need to enable this for your company
117:39 - for everyone else
117:41 - you can actually take advantage of the
117:43 - nullify identity service which you're
117:45 - going to move on to next
117:50 - okay so the difference between access
117:51 - control and identity is that access
117:53 - control is
117:54 - um restricting access from the cdn level
117:57 - and identity is for a typical login
118:00 - logout situation on the client side
118:03 - so let's go and enable identity and
118:06 - that's a pretty simple operation
118:09 - we're going to go over to the identity
118:10 - section and hit enable identity
118:13 - and we're enabled
118:15 - and that's pretty simple
118:18 - and let's
118:19 - now figure out how to
118:21 - uh let's just play around with identity
118:23 - a little bit so the best way to play
118:24 - around with it is to head over to the
118:27 - netflix identity widget docs and
118:30 - actually go to the live demo
118:33 - and let's just get a sense of what this
118:35 - does before actually using it so here's
118:37 - a static page
118:39 - and we've got a single simple button
118:41 - here we click it
118:43 - and that gives us this widget that's a
118:45 - modal
118:46 - and we can fill in some information
118:48 - or we can sign up
118:50 - and log in
118:52 - so let's just go through the sign up
118:53 - flow six
118:55 - one two three
118:56 - six at plus one two three
119:03 - so that's going to send a confirmation
119:05 - message to my email
119:08 - and i'm going to go to my email and so
119:10 - in my email i get this standard thing
119:12 - this can can be customized
119:15 - but we're not going to go over that
119:17 - and i'm just going to click customizer
119:20 - or
119:21 - confirm my email address
119:23 - and
119:24 - i'm logged in and that redirects me back
119:26 - to the original page remember i have
119:28 - this original page
119:30 - so i can shut that instance down and
119:32 - this is the one where i'm already
119:33 - automatically logged in and when i click
119:35 - outside you can see that in the in the
119:37 - root of the page outside of the model i
119:40 - can access that information now you can
119:42 - also see that information on the console
119:45 - i think we log it out
119:47 - um and this is what's available to you
119:49 - inside of javascript in particular
119:52 - together with the jwt token with with
119:54 - all your information and logins that
119:56 - you're going to use but also uh with
119:58 - things that you sign up with like
120:00 - your full name
120:03 - there's also
120:05 - the
120:07 - there's also that's a single button
120:09 - where it's got sign up and login on the
120:10 - same model but some in some designs you
120:13 - may wish to have multiple buttons with a
120:15 - sign up and log in on a different button
120:17 - and
120:18 - that's really just up to you how you
120:20 - want to configure it it's it's pretty
120:22 - configurable as well
120:25 - so here it goes to sign up and here it
120:26 - goes to login
120:28 - and that's uh that's a pretty handy
120:30 - model obviously this is entirely open
120:32 - source so if you need to style it
120:34 - you can actually customize the styles
120:36 - yourself
120:38 - but uh you know you can just fork it as
120:41 - well
120:41 - i'm also going to show you how we can
120:43 - authenticate with one of the social auth
120:45 - providers i'm going to authenticate with
120:46 - google
120:49 - and it's uh it's got my email
120:52 - please don't spam me but then also it's
120:54 - got some extra metadata from google for
120:56 - example my uh avatar
120:58 - so i could i could have uh rendered this
121:02 - and see my see my
121:04 - github avatar
121:06 - okay
121:06 - so that's the demo we're gonna learn how
121:09 - to apply it onto our working
121:12 - uh widget thing
121:14 - and for that you should look at the docs
121:17 - there is the script tag way and then
121:20 - there's the npm way um
121:23 - so we'll we'll check out the script tag
121:25 - way first
121:26 - i'm not super keen on showing everything
121:28 - else because
121:30 - if you're a javascripter you should be
121:32 - able to figure it out but
121:34 - maybe you might be getting stuck on
121:36 - something so that's why i'm here right
121:38 - um so i'm gonna do this on my index.html
121:42 - page
121:45 - all right and i'll drop the script tag
121:48 - up here
121:49 - and then add a div
121:52 - down in here as well
121:54 - let's just do up top
121:57 - okay
121:59 - so
122:00 - let's try this locally
122:11 - um so that is a simple button that says
122:14 - log in with nullify
122:16 - identity then it asks us for the
122:19 - development instance so i'm on localhost
122:21 - it doesn't know what uh
122:24 - nullify instance
122:25 - i have
122:26 - so over here remember when i enabled
122:28 - nullify identity i've uh it's on this
122:31 - particular site so i should just take
122:33 - this instance
122:34 - and drop it in here
122:37 - i think i need the https and then i'll
122:39 - set it
122:41 - so yeah that's uh
122:42 - and now it's telling me it's in local
122:44 - dev
122:45 - and i can do the same signup and login
122:47 - dance
122:48 - as well
122:49 - but i let's say i want to turn off that
122:52 - confirmation email workflow
122:54 - um
122:55 - and that's that's what we're going to
122:56 - cover
122:57 - in terms of the setting so um
123:00 - here i'm allowing sign up but i can oh i
123:03 - can equally
123:04 - say all right i don't want people to
123:06 - sign up i want i don't want any tom
123:08 - dickhary to sign up i just want invite
123:10 - only signups
123:11 - so um now when i refresh this project
123:15 - and i try to log in it only gives me a
123:17 - login option and there's no sign up
123:19 - option so in order for
123:21 - uh to sign people up i have to go into
123:24 - the uh to the invite page
123:27 - to the identity page
123:29 - and invite users and then type in their
123:31 - emails and then they can sign up
123:33 - so that's a that's a much more sort of
123:35 - locked down version of identity
123:38 - obviously i don't use that too often for
123:40 - demos but
123:41 - when you want to
123:42 - let's say invite only after
123:45 - people have paid you that's uh that's
123:47 - the way to do it
123:50 - so i'm going to toggle that back to open
123:52 - then the other the other thing i wanted
123:54 - to talk about also is confirm versus not
123:56 - confirmed so that's
123:58 - all the way down here here's where you
123:59 - can customize the templates for that are
124:02 - that get sent out for email templates
124:05 - but here in particular is where you want
124:07 - to turn off the auto confirm so
124:09 - allow users to sign up without verifying
124:11 - their email address
124:12 - so good
124:14 - and now when i
124:15 - again i refresh this locally
124:17 - and i try and log in
124:19 - i can now sign in
124:21 - 6 6
124:23 - two three four five
124:27 - at nullify.com
124:29 - whatever let me add a plus to this
124:32 - and then six
124:33 - sign up
124:35 - and it just logs me in directly there's
124:36 - no confirmation step
124:38 - so that's
124:39 - good for sort of less secure
124:42 - identity use cases where you just want
124:45 - to
124:46 - you know get people on board as quickly
124:47 - as possible
124:49 - and then the last thing that you want to
124:51 - know about in the settings is the social
124:55 - providers so external providers
124:57 - there are four that come by default with
124:59 - nutlify they're open issues for more you
125:01 - can contribute that if you want to help
125:04 - out in open source but these are things
125:07 - that we set up for you and you can
125:09 - obviously set up your own with via oauth
125:11 - and functions
125:13 - that's just going to add google
125:15 - by default you can use the nullifies
125:17 - version and that's totally fine or you
125:19 - can use your own
125:21 - app as credentials and that just
125:23 - involves adding a bunch of secrets and
125:24 - stuff
125:26 - and
125:27 - i'm gonna add in github as well
125:30 - these are the two i usually use and
125:31 - obviously feel free to add the other two
125:33 - if you need them
125:34 - but what that translates to is nullify
125:37 - identity is going to read those settings
125:40 - and and then offer those as login
125:43 - solutions
125:44 - so these don't directly redirect
125:47 - back to your localhost so what happens
125:49 - here is when i click this it goes to
125:51 - github and then github tells responds
125:53 - with
125:54 - confirmation and then nutlify redirects
125:57 - the user to the production site
126:01 - and so that might be a little bit tricky
126:02 - to test
126:04 - but just as long as you're aware that
126:05 - it's redirecting you to the production
126:07 - site
126:08 - you should be good to go from there
126:10 - it also
126:12 - takes this
126:13 - access token
126:14 - and if for example the widget was
126:16 - installed on this production site the
126:18 - the widget would also strip this access
126:20 - token from the url
126:21 - and log you in
126:22 - so just so you know
126:24 - you can take that access token and
126:27 - swap it out
126:29 - or take the production url and swap it
126:31 - out for your local host so localhost one
126:33 - two three four for example for here
126:36 - and that will log you in
126:39 - s6 and that and that's that's just the
126:41 - netflix identity widget taking over for
126:43 - local development
126:45 - to do anything interesting with the
126:47 - login information you probably want to
126:50 - use javascript to do that so let's look
126:53 - at how to add the nullified identity
126:55 - widget to our react app so far
126:58 - what i'm going to do is going to
127:03 - import the react script
127:06 - into index.html
127:08 - and then i'm going to get rid of this
127:11 - script just because now we're using the
127:13 - npm imports
127:15 - you can see the docs over here
127:17 - on how we're going to do that so we're
127:20 - not going to use the cdn based import
127:22 - anymore and we can get rid of this
127:24 - button
127:26 - um so now if we reload we should see our
127:28 - react app embedded inside of our page
127:31 - and that's great
127:33 - okay um and now let's uh
127:35 - try and import nutlify
127:38 - identity
127:39 - from nullify identity
127:44 - widget
127:46 - uh we need to do some setup and the docs
127:49 - should give you a clear idea of
127:52 - um what is required you can
127:56 - basically run
127:59 - nullifyidentity.init
128:00 - and that should basically be a good
128:03 - enough setup and then we're going to
128:07 - call the login function so basically i'm
128:09 - going to add a new button
128:11 - button
128:12 - something and then that will be a login
128:13 - button so let's write the click handler
128:16 - handle click equals to
128:20 - know of identity
128:21 - dot
128:23 - uh open
128:24 - and that's the open modal
128:27 - and then we'll register a callback
128:29 - once a login event happens we'll take
128:31 - the user
128:33 - and we'll say some which is say some
128:35 - sort of welcome like console.
128:41 - console.log
128:43 - welcome
128:43 - [Music]
128:45 - user
128:47 - okay
128:47 - um and now let's use that button
128:53 - on click equals
128:57 - uh login
129:00 - all right so
129:02 - that should give us a nice little login
129:04 - thing but then also log out
129:06 - a welcome page so let me log out again
129:10 - and i'm going to log in
129:13 - um and it says welcome over here twice
129:17 - because there's two login events that
129:19 - are firing
129:20 - but doesn't matter
129:22 - you can now see the full information
129:25 - inside of javascript and you can render
129:27 - it so for example
129:29 - you can say something like
129:32 - user and and
129:35 - user dot
129:37 - user
129:38 - metadata
129:40 - dot full
129:42 - name
129:51 - says user is not defined
129:53 - oh right
129:54 - um okay so in order to get access to
129:56 - this user outside of the scope of the
129:58 - hand the click handler you do need to
130:00 - say user equals to nullify identity
130:04 - dot current user
130:07 - and that should give you a nice little
130:10 - show up your name when you're logged in
130:12 - and it will show nothing when i log out
130:16 - i may need to trigger refresh
130:18 - there you go
130:19 - anyway so i trust that you're able to
130:22 - build a full react app from there
130:24 - with all the authentication pieces
130:27 - definitely check out the examples inside
130:30 - of nelf identity widget if you need
130:33 - react review examples
130:37 - and
130:38 - essentially that's
130:40 - what i wanted to show you i also wanted
130:42 - to talk a little bit about metadata so
130:46 - you see a little bit here that we're
130:48 - using the metadata but i haven't really
130:50 - explained it
130:51 - and i guess now it's a really good time
130:53 - to explain it so there's two different
130:56 - two types of metadata the ones app
130:57 - metadata and one is
131:00 - um
131:01 - user metadata and that just refers to
131:03 - who can edit that information so user
131:06 - metadata is
131:08 - very powerful i think it's underused and
131:10 - we should all use it more user metadata
131:13 - lets you store essentially preferences
131:16 - for the from the user and the user can
131:17 - edit it and the app metadata the user
131:19 - cannot edit it and it's
131:21 - only available to the app developer
131:24 - to to add things like
131:26 - um roles and provider source of
131:29 - information so like if i logged in
131:30 - through github then this provider would
131:32 - say github
131:34 - so that's that's just to show the type
131:36 - of user and some metadata about the user
131:38 - from the app point of view and then from
131:40 - the user point of view they can set
131:41 - their own information down in there
131:44 - so there's another way to to manually do
131:47 - that which is
131:49 - head over to the identity page and you
131:52 - can also set your own user metadata
131:56 - down here
131:58 - and
132:00 - i can just say like an admin role
132:02 - for example
132:04 - potato you can save that
132:07 - and when i reload
132:09 - i should be seeing
132:14 - oh it's a little login again
132:17 - i should be seeing that my app metadata
132:19 - has new roles for admin and potato and
132:21 - this you can gate your functionality
132:23 - based on this
132:25 - so the other the other thing
132:27 - is you can actually
132:30 - use javascript and throw in more fields
132:32 - on here
132:33 - and
132:34 - so that would involve
132:36 - that's not functionality that
132:39 - nullify identity widget offers you and
132:42 - that leads us to a discussion
132:44 - of
132:45 - go to js and friends
132:47 - so what coach what nullified identity
132:49 - widget is it's actually a high level
132:51 - widget right that comes with its own
132:53 - user interface
132:54 - and it's actually an extraction over a
132:57 - smaller underlying service called go
132:59 - true um and here is the
133:04 - go to uh where is the
133:06 - here is the go through link
133:09 - and this is the underlying platform on
133:11 - which the user
133:13 - identity service is being run
133:15 - so nullified identity is kind of the
133:18 - what the marketing term for the product
133:20 - is but go through is the underlying open
133:22 - source project
133:23 - where you can run your own
133:25 - authentication service
133:27 - so this is written in go
133:29 - not very accessible to javascript people
133:32 - so then we have a library on top of that
133:34 - called go to js
133:36 - and go2js is a very very small library
133:39 - that basically reflects
133:41 - the capabilities of the gothu
133:45 - functionality so
133:47 - it just kind of
133:50 - it just kind of reflects the
133:52 - the apis of of all this and so here is
133:56 - where you want to update for example the
133:57 - user attributes and add
134:00 - any metadata that you may want to you
134:02 - may want to use
134:04 - so go2js is very low level and you may
134:07 - want to
134:10 - write
134:11 - something in between so if you this this
134:14 - comes with no user interface
134:16 - um and has a lot of docs done here
134:20 - um
134:20 - and so
134:22 - choosing between something with the user
134:23 - interface and certain noise interface at
134:25 - a low level um there may be some in
134:28 - between that you may wish for so
134:30 - we also have
134:32 - this something i maintain react neglify
134:33 - identity
134:34 - uh which is the
134:36 - react bindings
134:38 - for go2js and
134:43 - that just provides
134:45 - go2js as a react hook
134:48 - as well as a context that you that you
134:50 - put over your uh
134:52 - your app so you just provide the context
134:55 - uh provide the instance and you can use
134:58 - it as a react hook
135:00 - so that's a very nice way to use
135:02 - um the
135:04 - go2js and then if you want to bring
135:08 - your identity widget
135:12 - with react
135:14 - you can you can then use react network
135:16 - identity widget i know there's so many
135:18 - libraries but these are meant to help
135:20 - rather than hurt i'm just trying to show
135:22 - you
135:23 - how to choose between them
135:25 - so this is
135:26 - the exact same it's a port of null of
135:29 - identity widget but because you don't
135:31 - have to ship your own framework
135:34 - it's a lot lighter so it's only it's
135:36 - only six kilobytes
135:38 - um and
135:39 - it's got all the functionality of
135:41 - reactant left identity
135:43 - you can provide you can use your
135:45 - identity as a hook
135:47 - um and it has a nice user interface that
135:49 - you don't have to code up and obviously
135:51 - you can you can bring your own styling
135:53 - if you want to um this is all
135:55 - optional
135:57 - for gatsby users there's also a plugin
135:59 - for gatsby that just basically helps you
136:02 - figure out the details behind wrapping
136:04 - the identity context provider for gatsby
136:06 - you don't really really need it but it's
136:09 - just a nice to have
136:11 - okay
136:12 - so those are the ecosystem of libraries
136:16 - all around authentication just trying to
136:18 - make your life a little easier
136:20 - but the two main libraries to be aware
136:21 - of are gochujs and nullified identity
136:24 - widget and then the react versions of
136:26 - that if you care to use them they may
136:29 - save you some time they'd certainly save
136:30 - me some time
136:32 - and spend some time talking about the
136:34 - integration between nullified identity
136:35 - and nullify functions
136:37 - and it's very integrated so that's the
136:40 - very very nice piece
136:42 - what
136:43 - we'll do here is we'll look at the
136:45 - functions that we have and we'll create
136:48 - a function
136:49 - that
136:51 - uh will be useful for our demo purposes
136:55 - so i'm using nullify dev and i'm and
136:57 - this is my alias for nullified functions
136:59 - create
137:00 - and we're going to go for the
137:03 - authenticated protected function
137:06 - template
137:08 - and this is just a nice way to so that i
137:10 - don't have to memorize how to do this i
137:12 - can just fire it up and it'll just give
137:14 - me a basic template that does that so
137:17 - you can see here that
137:19 - what is essentially doing is that
137:22 - nullify places the user
137:25 - if they're logged in on the context and
137:30 - and then checks if the context if the
137:32 - user exists if the user does exist then
137:35 - then a response is off true if the user
137:38 - does not exist then
137:40 - the
137:41 - response if a 401 and a console log
137:44 - that's a little bit snarky
137:46 - so the way to run this
137:48 - is to have
137:50 - in local development nullify dev uh
137:52 - again
137:54 - i have an alias and so that runs the
137:57 - functions together with the front end
138:00 - and so now let's test this by using
138:02 - nullify functions invoke
138:05 - so ntl functions
138:07 - invoke
138:10 - that will
138:11 - let us choose the protected function
138:15 - trigger
138:16 - and here we can finally understand what
138:19 - it means to have
138:20 - emulated nullified identity
138:22 - authentication headers so
138:24 - uh by default we're actually passing yes
138:27 - so i'm just going to hit yes
138:29 - and it says data off true
138:31 - which is
138:33 - that's what that's what is reflected
138:35 - over here
138:37 - so you can develop your
138:38 - functions as you go along and this will
138:40 - this will live reload
138:42 - and if you want to see what happens when
138:45 - there's no identity actually to skip all
138:47 - that uh function functionality you can
138:50 - actually just pass in the name of the
138:51 - function so
138:54 - function
138:56 - so no identity
139:04 - and it says data not allowed and also
139:06 - logs out no claims be gone so that's
139:09 - great
139:10 - for developing
139:11 - and once you're once you're happy with
139:13 - your
139:14 - function you can actually integrate that
139:15 - with your front end so here i still have
139:17 - my front end uh continuing uh still my
139:20 - front end going
139:21 - let's
139:22 - actually see how to wire it up with the
139:25 - protective function so over in index.js
139:28 - i have my
139:31 - click handler over here
139:33 - so let's
139:35 - make a little ping
139:37 - so
139:39 - like a new click handler
139:42 - and i'll click
139:45 - click to equals to
139:49 - and that will get the current user as
139:50 - well
139:51 - and
139:53 - here in the user object we have this
139:55 - very interesting thing called the token
139:59 - and we can use this access token to
140:03 - make requests
140:05 - so let's make a little request over here
140:07 - so
140:08 - fetch
140:10 - dots
140:11 - so it's dot netlife
140:14 - functions slash
140:16 - what did i call a protected
140:20 - function
140:21 - and then we have to supply some headers
140:25 - so headers
140:27 - uh authentication
140:34 - bearer
140:37 - user
140:39 - dot
140:41 - token.xs
140:43 - token
140:45 - dot then
140:47 - console log
140:50 - so actually i misspelled that i need to
140:51 - make i need to make this authorization
140:56 - and i need to dot jsonit
140:59 - x.json
141:01 - and then i can console.log it alright
141:03 - let's wire up the
141:04 - button click
141:06 - for this to happen
141:08 - and now instead of regular dev server i
141:10 - have to run the nullified dev dev server
141:13 - so notice that the serverless functions
141:15 - are being served on port
141:17 - 34567 and then the parcel server is
141:20 - being served on port 1 2 3 4 and both of
141:23 - them are being joined on localhost 8888
141:26 - so that's the one i actually want
141:28 - and if i if i go to one two three four
141:31 - that it's not going to
141:33 - have a working function for me because
141:35 - there's no proxy to redirect the
141:37 - functions so
141:38 - i'm on localhost 888 right now
141:41 - and i have that new button
141:44 - let's call it something better like
141:46 - um off
141:49 - function
141:52 - all right
141:53 - so now when i click it let's see the
141:56 - response that i get back
142:00 - all right so i click the all function
142:03 - it sends off to my back end which is
142:06 - running it which decodes the json web
142:09 - token that i
142:10 - uh attach from my bearer token
142:13 - and
142:14 - and then i can you i can do i can do
142:16 - stuff with that data
142:17 - inside of the server's function
142:19 - and then respond back with whatever i
142:22 - want
142:23 - here i'm responding with off true but
142:25 - you can respond with anything that you
142:26 - want
142:28 - let me log out
142:31 - and let's see the equivalent
142:33 - response for
142:34 - that all right i'm clearing all this as
142:37 - well
142:37 - so now i'm not i'm not logged in
142:40 - and i'm going to try and
142:42 - do off function ah
142:44 - says cannot read property token of none
142:47 - or no
142:48 - that's very true so let me just say
142:51 - something like
142:53 - user
142:54 - and and
142:56 - headers so if i'm not logged in
142:59 - let's see what will happen
143:01 - so it says unauthorized over here so we
143:03 - can have a catch for example
143:06 - and it would say
143:07 - you should log in
143:10 - you should log in
143:14 - in fact you can do something really cool
143:16 - and
143:17 - have a little gate on this
143:19 - piece of information over here so
143:22 - something like x dot data
143:25 - equals
143:26 - not
143:27 - allowed
143:30 - we can just prompt for a login if not we
143:32 - can just console log out
143:34 - the information
143:36 - so now we're not logged in and if i try
143:38 - to do this function which requires a
143:40 - login it's going to ping my back in and
143:42 - be denied and then come back and
143:44 - immediately ask for a login so that's a
143:47 - pretty cool integration of serverless
143:48 - functionality and
143:50 - authentication
143:52 - now that's not the only integration uh
143:55 - there's some other integrations as well
143:57 - if you check over for event triggered
144:00 - functions
144:01 - there's three that we're going to be
144:03 - talking about that are triggered well
144:05 - based on events
144:07 - and
144:08 - we can look for them in the functions
144:11 - docs and if you scroll down to event
144:13 - triggered functions you can see a whole
144:15 - list of them
144:16 - but i just wanted to highlight the
144:18 - identity based ones because those are
144:20 - extremely useful
144:21 - for doing anything when people sign up
144:24 - or log into your site
144:27 - so we're going to try and scaffold out
144:30 - an identity function just to see how
144:32 - that works together
144:34 - with your
144:36 - function and nullify dev and identity
144:38 - workflow
144:39 - so i'm using nullified functions create
144:42 - and we'll pick the identity signup
144:44 - template and create a template like this
144:47 - and it pretty much ships with a lot of
144:50 - decent
144:51 - boilerplate already
144:53 - and one thing you'll notice is that
144:55 - there it's called identity sign up and
144:56 - that's a hard-coded name
144:59 - these are all special names which are
145:01 - recognized by nullify functions and they
145:03 - get triggered
145:05 - when certain events happen so
145:07 - on this one identity sign up well it
145:10 - happens when sign up happens and
145:14 - you can you can decode or destructure
145:16 - from the body
145:18 - and look at the user object and then
145:22 - assign different
145:24 - parameters like metadata on the object
145:26 - so as you're developing your event
145:27 - triggered functions
145:29 - i highly recommend testing it locally
145:31 - first before pushing it to production
145:34 - because
145:35 - you might run into
145:37 - bugs that you didn't catch and it's
145:39 - better to catch bugs faster so that you
145:42 - have
145:43 - a faster development cycle
145:45 - so the best way to do that is in nullify
145:48 - dev
145:49 - so i'm going to start up netlify dev on
145:51 - one side and this will start up the
145:52 - functions server and on the other side
145:55 - we're also going to start up
145:57 - a
145:58 - function invocation so here
146:01 - we're going to parse
146:02 - sample data so we just need to parse in
146:04 - one thing that makes this different from
146:06 - normal nullify functions testing
146:08 - is that it has extra information on the
146:11 - user right like this user.email.
146:13 - whatever
146:15 - so
146:16 - notify dev understands that
146:18 - and has a special hard-coded uh behavior
146:22 - for
146:23 - these uh functions so here we're going
146:25 - to say we're going to try and invoke the
146:27 - netlife identity signup and instead of
146:29 - the usual prompt
146:30 - we're going to get
146:32 - just a sample payload passed into
146:35 - the function it's going to run through
146:36 - that code and it's going to return
146:39 - with for example here we we've passed in
146:42 - a user with trustycompany.com so it's
146:44 - going to pass in this is the return of
146:46 - metadata of rows of editor
146:49 - and
146:50 - with some extra functionality as well
146:52 - assigned dynamically inside of the
146:54 - servers function
146:55 - and you can also
146:58 - test this in production
147:00 - by dropping out of nullify dev
147:04 - and pushing it to production so and uh
147:07 - so here it would be a notified deploy
147:09 - prod
147:10 - um my shortcut for that is end deploy
147:13 - so i will just do that so now when you
147:16 - click on the site and you look at the
147:18 - deploy logs you should see that
147:20 - it's uploading three functions and the
147:22 - third function that is being deployed is
147:25 - the identity signup function
147:27 - that's great so let's have a look at
147:29 - what that looks like so we'll head over
147:31 - to the production site that we just
147:33 - deployed
147:35 - and
147:36 - we'll try to
147:38 - have some sort of person sign in so
147:41 - let's
147:42 - so let's try and sign up as someone from
147:45 - trust this company
147:47 - actually let's just sign up as a total
147:48 - stranger and let's see what happens with
147:50 - that
147:51 - um
147:52 - stranger
147:54 - stranger
147:55 - danger.com stranger we already turned
147:58 - off the confirmation email so i can just
148:00 - put in a non-existent email it's totally
148:02 - fine and i'm logged in as a stranger
148:05 - uh that's totally fine now
148:07 - and let's have a look at what the
148:08 - metadata comes back as
148:11 - so let's see the metadata over here so
148:14 - we logged it out
148:16 - and here we have strange danger.com
148:19 - and we have been assigned the roles of
148:21 - visitor and that's
148:22 - in alignment with what happened with our
148:25 - identity signup function which validated
148:27 - the user email and said oh this doesn't
148:28 - come from my company it comes from
148:31 - stranger danger.com so i'm going to give
148:34 - this a role of visitor so that's
148:35 - something that only the app can do
148:38 - and the user cannot do but the user can
148:40 - supply extra metadata around
148:42 - that to store some preferences or
148:44 - something and that's these are all
148:45 - things that they can adjust and you can
148:47 - access on the user metadata object
148:50 - um so
148:51 - that's good let's sign out and let's
148:53 - sign in as
148:55 - someone from the company so employee
149:00 - e8675309
149:03 - and so employee at trust this
149:07 - company.com so i'm just following here
149:10 - so this will pass the validation and we
149:11 - expect it to get an editor access
149:14 - so employee whatever
149:16 - so i signed up i can close this
149:19 - and now when you look at the
149:21 - sign in information
149:22 - i have i'm employee justice company.com
149:25 - and that's accordingly i've been given
149:27 - better permissions as a editor rather
149:29 - than a visitor
149:30 - and
149:32 - again i can do some dynamic
149:34 - data as well and check my information as
149:37 - a user
149:38 - so those are event trigger functions you
149:40 - can use
149:41 - identity sign up to assign roles just
149:44 - like we showed
149:45 - you can use that to
149:47 - to set up a new field in a database you
149:50 - can use identity validate to
149:54 - reject people from even signing up
149:55 - because of some other blacklist or some
149:58 - other rules that you may have
150:01 - and there's identity login
150:03 - for
150:04 - doing things when people log in one
150:06 - important caveat that i want to share
150:08 - with people is that identity signup only
150:10 - fires for email and password sign ups
150:12 - right now and doesn't i fire for
150:15 - external providers so you'd have to make
150:17 - a separate trigger for that
150:19 - using nullify functions
150:22 - but it's relatively straightforward to
150:23 - set up we have an open issue for this on
150:25 - gotru
150:27 - and you're welcome to contribute if you
150:28 - can
150:30 - but that says that's what stands right
150:32 - now as to
150:34 - the limitations of the event trigger
150:36 - functions on lfi
150:37 - okay so we already talked a little bit
150:39 - about metadata management
150:41 - and
150:43 - and uh how that works together with
150:45 - functions
150:46 - so before we finish this section once
150:48 - you may wish to also retrieve the form
150:51 - data
150:52 - after
150:53 - sending it in
150:54 - so there's a couple ways
150:57 - to do that
150:59 - one of the clearest examples is this
151:02 - demo done by phil hawksworth called jam
151:04 - stack comments so the this is a demo for
151:08 - jab stack
151:09 - comments with nullified forms and
151:11 - functions
151:12 - and you can leave comments here it would
151:14 - get posted to a review queue
151:17 - and these are all then pulled from the
151:19 - forms submission data
151:21 - back into the site and generated from
151:24 - there
151:25 - so if you're keen on that definitely
151:27 - have a look at the source code
151:28 - it's going to be somewhere inside this
151:30 - gulp file
151:31 - and you can just see that you put
151:34 - together some of these
151:35 - environment variables which are also
151:37 - documented inside of this project
151:40 - hit the right api endpoint
151:42 - and then you can do whatever you want
151:44 - with it
151:45 - so that's the that's the rough idea
151:47 - behind retrieving the form submission
151:49 - programmatically obviously you can
151:51 - download it via csv or other manual
151:53 - processes if you want
151:55 - and for further documentation you should
151:57 - definitely have a look at the open api
151:59 - of nutlify and that's down here and then
152:02 - you can scroll down to the form section
152:04 - where you can find every single endpoint
152:07 - and what they offer so these are these
152:10 - are very very good sources of finding
152:12 - out
152:13 - and building out your feature that you
152:15 - desire and we'll have a piece at the end
152:17 - of this series about the nullify api and
152:21 - how you can build your own
152:23 - notifications with this whole thing
152:27 - okay
152:27 - so on to the last piece of this video
152:31 - which is the
152:32 - paid features just to briefly mention
152:34 - that they exist
152:36 - and what you can do with them so the
152:38 - first is branded oauth so branded oauth
152:41 - is relevant to this part of the identity
152:43 - settings
152:44 - where you can see
152:46 - site visitors can see your own app and
152:48 - doesn't it doesn't have to mention
152:49 - netlify remember when we signed up with
152:52 - github and google to as external
152:54 - providers
152:55 - we use the netlife identity
152:58 - app but we can actually use our own app
153:01 - and do our own automation and settings
153:03 - with that there's also sso features this
153:07 - is alongside the role based access
153:09 - control on the business plan and you can
153:11 - also upgrade it individually on the
153:14 - identity plan for
153:16 - just nullified identity by itself the
153:18 - same goes for audit logs for
153:20 - checking
153:21 - for understanding who's signing who's
153:23 - signing in and out of your site so for
153:25 - example when i go over to the site that
153:27 - we've been working with i have all these
153:28 - people logging in and out i can just
153:30 - head to the identity audit log and see
153:32 - all the sign in and out actions over
153:34 - here to see if there's something fishy
153:36 - going on
153:37 - and lastly we're going to customize the
153:41 - custom sender as well so a custom
153:43 - outgoing email address so it doesn't
153:45 - come from nullify.com when people want
153:48 - the email confirmation
153:49 - so
153:50 - that's probably not everything but those
153:53 - are the main features i figured i should
153:54 - highlight that
153:56 - if you need to for a production
153:57 - application you can definitely pay for
153:58 - it but
154:00 - everything else that we presented is
154:01 - completely free so that's pretty nice
154:04 - and that's nullify identity
154:12 - the best way for me to explain nullify
154:14 - cms is to show it to you in action
154:18 - nullify cms is an open source project
154:20 - that is worked on by employees on
154:22 - netlify but is completely separate as
154:25 - far as technology is concerned
154:27 - from netlify except for one connection
154:30 - point which is the git gateway you can
154:33 - use nail of sms without nutlify and
154:35 - there's some documentation on that we're
154:37 - just going to show why you might pick it
154:39 - over some of the other headless cms
154:41 - options
154:42 - and the key is to understand that it's a
154:45 - git based cms so there's no extra server
154:49 - to pay for or maintain it's all within
154:52 - your get together with your source code
154:55 - there's an explanatory video here with
154:57 - more details
154:58 - but we're going to be going over much of
155:00 - that in our course today
155:02 - and so let's actually see this in action
155:05 - nullify uses nullified cms of course
155:08 - especially for
155:09 - the blog for example so here these are
155:12 - blog posts that are drafted and
155:14 - published and previewed and edited all
155:17 - in nullify cms
155:19 - and that's uh that's a very wonderful
155:21 - thing so let's take a look at how this
155:23 - works internally in the
155:26 - url there's a special endpoint that
155:28 - we've set up called slash admin endpoint
155:30 - and that gets us to the netlify cms
155:32 - admin panel
155:34 - and nullify cms with the gateway uses
155:37 - netflix identity to log in will explain
155:39 - all this
155:40 - integration but fortunately you already
155:42 - know what nullified identity is and this
155:44 - is a very familiar widget to you by now
155:47 - i'm going to sign in with my employee
155:49 - email and my password
155:51 - and that's and now we can see the admin
155:54 - back end of nullify so we have a few
155:57 - collections
155:59 - named here
156:00 - and uh some of some blog posts
156:03 - and also you're able to see them sort of
156:06 - spread out or or in layers we haven't
156:08 - really set it up we just put titles on
156:10 - just because that's all we need
156:12 - um you can also see
156:14 - workflow and media and we'll talk about
156:16 - those two in turn
156:18 - but let's go ahead and start a new blog
156:21 - and i'm just going to cancel and so you
156:23 - can see here two things there are
156:25 - there's a left-hand side with a bunch of
156:27 - form fields and on the right-hand side
156:29 - of preview and so this is very cool it's
156:32 - it's actually a full react app that
156:34 - looks
156:35 - exactly like a blog so let's have a
156:37 - sample post test post please
156:41 - ignore
156:42 - lorem ipsum
156:46 - i have my author picture pre-registered
156:49 - so it my author picture signs up shows
156:51 - up as well
156:52 - and note if i change the date it shows
156:54 - up
156:55 - on both sides
156:57 - you can select a pre-generated topic
157:01 - you can add
157:05 - uh
157:06 - terms
157:08 - i can type in some text
157:11 - but then i can also
157:12 - write in markdown which is very nice
157:15 - for code
157:23 - i can even configure custom fields like
157:26 - for example this tweet field
157:28 - which will show
157:29 - what the tweet
157:31 - looks like
157:33 - described
157:34 - in some metadata
157:38 - there's a special field in this editor
157:40 - interface where you can actually
157:43 - add images as well which is not usual
157:46 - for for markdown editors but you can do
157:48 - that right here
157:50 - and you can choose a new paid new image
157:52 - to upload for example
157:54 - i can upload a recent image of mine
157:57 - and i can select it to be included and
158:00 - that will show up in my preview
158:02 - which is very nice
158:04 - me
158:07 - and i can collapse this and keep editing
158:11 - my content down below
158:13 - so all this is very nice and
158:16 - uh this is especially if you're working
158:19 - with
158:20 - a non-technical audience but then also
158:23 - just for yourself if you write a lot and
158:25 - you just want a nicer editing experience
158:28 - you can notice the scroll sync as i go
158:30 - up and down which is very very cool
158:33 - and so yeah once i'm happy i can save
158:36 - and when netflipify cms that does a
158:38 - couple things that actually kicks off a
158:39 - pr
158:41 - that sends to the
158:43 - github repo of nullify.com and then it
158:47 - immediately
158:49 - has the status over here to check for a
158:50 - preview
158:52 - so right now this is in a draft mode
158:54 - because i just saved i haven't published
158:57 - and i can set the draft status to in
158:59 - review or ready as well and that will
159:01 - talk about the editor workflow but first
159:04 - let's talk about this check for preview
159:06 - tag so what this does in the back end
159:09 - let's have a look at the source code for
159:11 - the dub dub dub so you can see that
159:14 - nullified bot has already created a
159:16 - netify cms page
159:19 - it's it's adding that file that i did in
159:22 - markdown
159:23 - the image that i had already was
159:25 - uploaded
159:26 - and you can see the deploy preview down
159:28 - here
159:30 - working on the build so this is why
159:33 - there's a check for preview button
159:35 - because
159:36 - you can click this if you want and
159:38 - continually check for preview
159:40 - uh there's no preview yet so this is
159:42 - still showing check for preview
159:44 - but
159:45 - this is for
159:46 - basically there's basically eliminating
159:49 - any differences between the wysiwyg
159:52 - preview and the final article
159:54 - and we'll talk a little bit about how we
159:56 - can set up the correspondence between
159:59 - the
160:00 - in panel sort of live preview as well as
160:02 - the deploy preview which is almost
160:05 - basically the real thing like you know
160:07 - that
160:08 - based on continuous deployment once you
160:10 - merge this pr in it will look exactly
160:12 - like it does in the preview
160:14 - once that deploy is live
160:16 - you can actually see that status update
160:18 - in the pr
160:20 - and obviously collaborate with your
160:21 - co-workers inside a pr
160:24 - but also inside the cms you can actually
160:27 - hit check for preview again and it will
160:29 - turn into a view preview button
160:32 - and when you view the preview this will
160:34 - be a deploy preview with your posts
160:36 - exactly as it will be
160:38 - inside of
160:40 - your
160:41 - actual content
160:42 - and you can see the entire site index
160:45 - together with that
160:48 - which is very nice so let's talk a
160:50 - little bit about editor workflow
160:52 - i'm going to head back
160:54 - and check out the workflow section
160:56 - so the post that i've made
160:58 - is now in the draft section
161:03 - together with some of the content that i
161:04 - have i can delete i can publish i can
161:07 - drag it through if
161:10 - for example
161:11 - i have a reviewer that i'm working with
161:13 - or i'm just sort of working this in
161:15 - progress whereas this is just more of an
161:17 - icebox and once it's ready to publish i
161:19 - can just take this over to the ready
161:21 - section
161:23 - and
161:24 - either automatically publish it or
161:26 - manually hit the publish button whenever
161:28 - i'm ready to launch my new blog post
161:31 - over in the media section we can check
161:33 - on the the images that i have uploaded
161:35 - nothing much else here but now let's
161:38 - talk a little bit about how it's
161:39 - configured how come we can up upload
161:42 - both
161:43 - images as well as markdown
161:46 - and that's actually all in the
161:48 - configuration that's contained within
161:51 - the repo itself so here i'm in the back
161:53 - end of the blog page
161:56 - and
161:57 - nullify cms has a special config file
161:59 - called config.yaml
162:01 - and here you basically spec out all the
162:04 - details that notify cms needs to know
162:06 - about your site
162:08 - so we'll talk about collections later
162:10 - but this is that's basically the schema
162:12 - of all the content that you enter in
162:14 - um but basically you i you specify your
162:17 - backend your site url your publish mode
162:20 - which we opted into editorial workflow
162:23 - for a more fine-grained process as well
162:25 - as a specifying a media folder which is
162:27 - where we we want the github bot to store
162:31 - our uploaded images and the public
162:33 - folder which is where we're going to
162:35 - serve our images from
162:37 - so a lot of times
162:39 - this is a nested folder so we just want
162:41 - to tell another cms where to actually
162:44 - expect it
162:45 - so
162:47 - that's the difference between the media
162:48 - and the public folder
162:50 - let's talk a little bit about what this
162:52 - this word backend means it's a that's a
162:55 - verboten word in nullify but really
162:59 - we're just using one of many
163:00 - configurations for
163:02 - uh integration with git providers
163:05 - so obviously the the one that we lead
163:07 - with is git gateway
163:09 - which integrates with nullify identity
163:12 - we'll talk about this uh and and this is
163:15 - and this has to be measured in contrast
163:17 - with the others which is integrations of
163:19 - github gitlab and bitbucket
163:22 - so let's have a look at these back
163:25 - let's have a look at these backends the
163:27 - what's common among github gitlab and
163:29 - bitbucket is that
163:31 - all your cms users need to be directly
163:35 - need to have commit access through the
163:37 - authentication services of each of these
163:39 - services so gitlab
163:41 - you need to log in with your gitlab
163:43 - account bitbucket same thing and github
163:45 - the same thing
163:46 - and then they can commit
163:49 - obviously you may not want to give
163:50 - everyone commit rights to your code you
163:53 - may just want them to be able to
163:55 - send in
163:57 - content and let the bot take care of it
163:59 - and that's what git gateway does for you
164:02 - together with nullify identity and
164:04 - that's the type integration there
164:06 - fortunately you know everything about
164:07 - nullified identity already so what i'm
164:10 - going to show you is just the
164:11 - documentation for git gateway
164:13 - which is over here and it explains how
164:16 - you can set it up if you don't want to
164:18 - use netlify because this is an open
164:20 - source project
164:21 - and you can see all the source code
164:24 - over here in the git gateway repo
164:26 - so to be clear you don't need nullify
164:28 - identity to work to use nullify cms it's
164:31 - just
164:32 - a nice to have because you want your
164:35 - your publishers and your authors and
164:36 - your editors to be able to review
164:38 - content without being able to commit to
164:40 - code and in all these other options you
164:43 - have to give them commit rights because
164:45 - that's how it would work
164:47 - okay so that's it for our intro to
164:49 - nullify cms
164:51 - but we're gonna get our hands dirty a
164:53 - little bit and actually set
164:55 - a new thing up
164:57 - from a template so that's the best way
164:59 - to to start with it and i don't know if
165:01 - i've been clear enough at the beginning
165:03 - but
165:04 - melody cms does not depend on react it
165:06 - uses react for the editor
165:08 - but it's amazingly tech agnostic like it
165:10 - it works with hugo it was jekyll
165:12 - middlemen gatsby
165:15 - and that's pretty pretty freaking
165:17 - amazing given that it's also showing you
165:19 - a live preview
165:21 - but
165:22 - it is true that the largest number of
165:24 - users come from the gatsby and react
165:26 - ecosystem so we're going to have a look
165:29 - at how to set that up
165:31 - so one thing we're going to start from
165:33 - is a template and that's the template
165:35 - that's maintained by the the no 5cms
165:38 - team i do want to pay some special
165:40 - attention to the url of this template of
165:43 - this deploy to nullify button
165:45 - so if you watch my earlier videos you
165:47 - should be aware of what the deploy to
165:50 - nullify button does
165:51 - but basically helps you set up a fork
165:54 - here we are actually doing something
165:56 - new which is
165:58 - appending this at stack equal cms
166:01 - flag and that just basically helps to
166:03 - set up a
166:05 - git gateway plus nullify identity setup
166:08 - just from a single deploy to nullify
166:10 - button click
166:11 - which is the standard one that you see
166:14 - with
166:15 - any
166:16 - nullify open source site
166:18 - okay so
166:21 - let's deploy from a template so i'm
166:23 - going to click here
166:25 - and it's going to set up that
166:27 - one-click deploy that we all know and
166:28 - love
166:31 - so i signed in and now it's creating a
166:34 - repo name
166:35 - i'm just going to leave it unchanged
166:37 - actually i already have
166:39 - the same name here so i'm just going to
166:41 - add a two to it but notice that uh it's
166:43 - actually showing that it's going to set
166:45 - up get gateway and identity as well just
166:47 - because we added that little
166:49 - tag at the end of at stack equals cms if
166:52 - you didn't have this
166:53 - you could set it up yourself just by
166:55 - clicking a few buttons but this just
166:56 - makes it a one-click deploy
166:59 - type of situation so that's always very
167:01 - handy to have especially when getting
167:03 - started with something
167:06 - okay so we have a new site and just for
167:08 - good measure we can see that identity is
167:10 - already
167:11 - set up for me as well as in the settings
167:15 - i can see that git gateway is already
167:17 - set up as well
167:19 - and that will be in settings identity
167:22 - all the way down here
167:24 - with the gateway services and you can
167:26 - set this up yourself if you if you chose
167:28 - so choose
167:29 - let's actually take a quick look at what
167:31 - this
167:32 - one clean deploy gets us so let's
167:35 - head over here so we get a nice landing
167:37 - page and we've so with some content down
167:40 - here
167:41 - that hopefully we can customize
167:43 - so some stories from a blog
167:46 - and you can read more
167:48 - on the slash blog and obviously here we
167:51 - see that lazy loading fanciness from
167:53 - gatsby
167:55 - but otherwise it's a pretty
167:56 - straightforward blog
167:58 - that you can see
168:00 - there's also a products page
168:02 - that you can edit
168:04 - and a contact page with nullify forms
168:07 - and other form examples down below
168:12 - let's take a look at what that looks
168:13 - like from the source code perspective
168:17 - so when i clicked that deploy to nullify
168:20 - button
168:21 - i also cloned that source code
168:23 - and
168:24 - again
168:25 - in
168:26 - the nullify cms world you should always
168:28 - start with the config.yml file so let's
168:31 - have a look at the static folder
168:34 - admin route config.yamo it's pretty much
168:37 - always in something a route like that
168:39 - where
168:40 - the final route will be
168:42 - fubar.net
168:44 - admin right and then it will just look
168:47 - for a config.ymo
168:49 - up in there
168:50 - we got the backend
168:52 - config file
168:53 - and again just to just to note that all
168:55 - this is actually in the docs we're not
168:57 - really covering anything
169:00 - you know new here i'm just explaining it
169:03 - as i go along in words that i could
169:05 - understand
169:07 - so here we're setting the back end with
169:09 - the gateway there's other back-end
169:11 - options that we already talked about
169:13 - and
169:14 - then we have a media and public folder
169:17 - again already explained that this is
169:19 - where you want to store it inside of git
169:21 - and this is where it's going to live in
169:23 - the public url
169:26 - and now we come to these concepts of
169:28 - collections
169:29 - and so we want to talk about collections
169:31 - uh folder collections versus file
169:33 - collections folder is actually the
169:35 - easier one and folder you can think
169:37 - about as just templates for your blog
169:39 - right
169:40 - so
169:41 - when i edit
169:43 - my my blog i want to be able to specify
169:45 - a date
169:46 - have that be broken out to your month
169:48 - day and slug and the slug will be
169:52 - created for me
169:53 - the template key
169:55 - can be given to me as well and i can
169:57 - have
169:58 - some other
170:00 - fields like description featured posts
170:02 - and you can notice that i'm using all
170:04 - these widgets which are text boolean
170:06 - image markdown this date time and these
170:08 - are all default widgets that come with
170:11 - nullify cms so
170:13 - let's have a look at the widgets
170:15 - and these are all the common widgets you
170:17 - can see
170:18 - the options available to you and some
170:20 - notes on how they behave
170:22 - and let's have a look at them in action
170:24 - because i feel like we're still too
170:26 - abstract in terms of what we're doing
170:28 - over here
170:30 - so
170:30 - let's fire up the
170:33 - page and let's go to admin
170:36 - now i haven't set this up for invites so
170:40 - here it's only login
170:43 - so i need to let it be able to sign up
170:45 - obviously you want to be very careful
170:47 - with this because once people sign up
170:48 - they can also contribute content
170:51 - and you don't want just anyone to sign
170:52 - up so let's change our registration
170:54 - preferences to open
170:56 - and i'll just go ahead and add like a
170:58 - github
171:00 - external provider as well
171:02 - and as you know uh the nether identity
171:05 - widget will pick that up
171:06 - so now i can sign up
171:09 - and or i can just also continue with
171:10 - github
171:12 - and i'm just gonna make a new blog post
171:14 - and
171:15 - just walk through that process again but
171:17 - this time we're going to have the schema
171:19 - open in front of us and compare them
171:22 - from
171:23 - side by side so
171:25 - here we'll see that we have a title
171:29 - the template key is hidden and this is
171:30 - this determines the layout in gatsby's
171:33 - perspective
171:34 - um we'll look at the title and we'll try
171:37 - and say lauren
171:38 - if some
171:40 - will have a publish date with the date
171:41 - time widget there used to be a date
171:43 - widget but now that's deprecated so you
171:44 - always use the date time widget
171:46 - that doesn't seem to display in our
171:48 - template over here and we can go fix
171:50 - that if we want to
171:53 - the description
171:55 - i can just say
171:56 - fubar baz whatever
171:59 - featured posts yeah make a feature post
172:01 - why not
172:02 - i'll check an image i can reuse the
172:04 - selected image
172:06 - or i'll just make my own because why not
172:10 - okay chuck that in there
172:12 - upload ah
172:14 - choose selected
172:16 - and i'll type in some text
172:18 - i'll just
172:19 - grab some of this stuff
172:21 - click it in there maybe i'll make this a
172:23 - markdown thing
172:25 - okay cool that looks like some content
172:28 - and tech
172:30 - javascript whatever
172:32 - publish it notice that i don't have
172:34 - editorial workflow
172:36 - set up so i'm when i publish it
172:39 - immediately creates that pr it's
172:41 - currently rebuilding so give me a sec
172:44 - let's head to the deploys
172:55 - so you saw me cancel that deploy over
172:57 - there
172:58 - because i just am i'm just importing
173:02 - i'm just uploading the image i actually
173:05 - need to build the blog
173:07 - one thing that we can look at while this
173:09 - is building is also look at the pr
173:10 - that's happening in our project
173:14 - so over here
173:15 - there's no pr because we haven't set up
173:17 - editorial workflow but
173:19 - the
173:20 - code has actually committed it directly
173:22 - for me
173:24 - including
173:26 - that date time that i talked about as
173:28 - well as the description featured posts
173:30 - all those fields that we specified in
173:32 - our config okay so the new site is live
173:34 - and we'll go over and refresh and we
173:38 - should be able to see the new blog post
173:41 - and there's no date in the preview and
173:44 - that's as
173:45 - planned
173:46 - so the other type of collection so
173:48 - that's the folder collection that we
173:51 - talked about over here
173:52 - and that's basically
173:54 - uh sending out all these templates to go
173:56 - into each of these blog post folders
173:58 - that have been declared
174:00 - and that's that's a pretty clear
174:03 - uh intuitive
174:05 - way to use a cms the other way to use
174:08 - this nullified cms is is as a file
174:10 - collection and here we call our file
174:12 - collection pages
174:15 - and we've got a bunch of different pages
174:16 - we've got the landing page we've got the
174:18 - about page for the products page and the
174:21 - idea here is that these
174:23 - there will not be
174:25 - repeated copies of these these are just
174:26 - individual files
174:28 - and we're using the cms as a way to edit
174:31 - the content of these files
174:33 - dynamically and nullify cms will be
174:36 - smart enough to handle that
174:37 - so let's have a look at how that works
174:40 - on the inside
174:41 - again we're going to go into the content
174:43 - manager
174:45 - and so
174:46 - the blog as we maintained over here
174:51 - has the is the folder collection
174:54 - and the file collection is all these
174:56 - pages which which we named over here
174:59 - we head to the pages and we can edit any
175:01 - one of these things so i'll just edit
175:03 - the landing page
175:05 - the landing page has these widgets set
175:07 - up on the left and this preview on the
175:09 - right which as you already saw is pretty
175:12 - much the exact same
175:13 - as what is in production
175:15 - so we can just say notify cms is really
175:19 - great
175:21 - uh cms saying without a cms server
175:26 - and we can blah blah blah look at all of
175:29 - this awesomeness of widgets and editing
175:32 - and
175:33 - and wizzy weakness
175:34 - this is really really hard to do i
175:36 - honestly don't know how they do this
175:39 - but i'm glad that they do
175:43 - so let's save this
175:45 - again it's directly hitting to publish
175:47 - we can obviously set up the
175:49 - editorial workflow by configuring that
175:52 - inside of
175:54 - the field over here just add a editorial
175:57 - workflow field
175:59 - and now when i look at the commits again
176:01 - i should be able to see the latest
176:02 - commit that we're updating the pages of
176:05 - the title and subheading and that does
176:08 - again hooks right back into nullify and
176:11 - kicks off a new build
176:12 - okay so that's about it the last piece
176:14 - that we didn't cover is the filter field
176:18 - that's
176:18 - going to be very handy for
176:21 - basically filtering out
176:24 - by language so for example i want to
176:26 - edit in english or spanish
176:29 - and have different layouts and widgets
176:32 - for those things those are very very
176:34 - helpful as well
176:36 - and probably the most common question
176:38 - for most blogging situations is
176:41 - needing to schedule posts because
176:42 - there's no running server you need a way
176:44 - to make blog posts go live at a point in
176:46 - time so the natural solution is to set
176:50 - your blog post date at some point in in
176:52 - the future and then when
176:55 - and then you and then you set up your
176:57 - builds to run every day every minute
176:59 - every hour or whatever it is
177:01 - and once that time has passed for the
177:03 - blog post to be published
177:05 - then that build will pick it up
177:07 - so essentially all you need to do is set
177:09 - up a cron job
177:11 - and zapier is a really good way to do it
177:14 - so the zapier integration with nullify
177:16 - lets you just use this app and you can
177:19 - start a deploy of nullify sites on a
177:20 - daily schedule which is pretty cool
177:24 - there are other
177:25 - methods to do it this article from
177:27 - flaviocopes essentially tells you about
177:30 - the zapier integration
177:32 - with a little bit more documentation and
177:34 - screenshots which i highly recommend
177:37 - and those and for those who want to try
177:39 - out something more serverless
177:41 - without the zap without paying for
177:43 - zapier you can try to set up your own
177:46 - with serverless framework
177:48 - and literally setting a scheduling a
177:51 - publish is as simple as leaving a
177:53 - comment inside of github
177:55 - so that's a those are very interesting
177:58 - ways to schedule posts but essentially
178:00 - if you were
178:02 - paying attention during the netflix
178:03 - build section where we talked about
178:05 - build hooks then you can essentially
178:07 - fire off from any old device you can
178:09 - have a raspberry pi that
178:11 - sends a ping to your
178:13 - build server
178:14 - all of that good stuff
178:16 - the last section of what we're going to
178:18 - cover today is has to do with media so
178:21 - so far we've been uploading media
178:24 - directly to our git folder
178:26 - that obviously has scalability issues
178:28 - for large images and large numbers of
178:30 - images
178:31 - and so uh you may want to explore one of
178:34 - the media partners that we have so
178:37 - um
178:39 - the probably the best known as cloudnary
178:41 - cloudnary essentially
178:43 - lets you sign up for free and then
178:44 - they'll manage your images for you uh
178:47 - all you need to do is
178:49 - uh add a media library key to your uh
178:51 - config.yml and and and give them your
178:54 - cloudnary cloud name as well as your api
178:57 - key and that's about it nullify will
178:59 - upload there instead of your github
179:02 - similar principle for upload care upload
179:05 - care is another service that just
179:07 - focuses on asset storing and not just
179:10 - images but just
179:11 - everything in general
179:13 - in a similar place similar thing you
179:15 - just sign up for them and then give your
179:17 - public key
179:19 - and lastly we'll talk about netify large
179:21 - media which actually
179:24 - is a git lfs implementation so you don't
179:27 - store your images inside of git you
179:29 - actually store it uh somewhere else in a
179:31 - network large media server and then
179:33 - nullify will proxy and give you the
179:36 - right sizes of your
179:37 - images audio video for you without
179:40 - building a repository so we'll actually
179:42 - talk about that in the next section on
179:43 - nullified add-ons for everything else
179:45 - but apart from that you should be all
179:47 - set to go to
179:49 - do to set up your site with nullify cms
179:56 - okay now we're on to the netlify add-ons
179:59 - section
180:00 - this is going to be a relatively quick
180:02 - section because a lot of these are just
180:04 - show and tell demos
180:06 - and also it's a very growing field it's
180:08 - probably the absolute newest out of all
180:11 - of these uh different sections that
180:13 - we've covered so far
180:15 - and
180:16 - let's just get right into it so the
180:18 - first one is netify analytics this was
180:20 - just launched in june of 2019 and it's
180:24 - uh server-side analytics and you can
180:26 - check out the product page over here and
180:28 - get a gist of
180:30 - what it's talking about but the main
180:33 - idea is that because of service side
180:35 - it's unblockable
180:37 - because we're literally
180:38 - you have to serve the files for people
180:40 - to
180:41 - access your site and if they access your
180:43 - site and if we serve the file to them
180:44 - then they're definitely a visitor
180:47 - and that's important because a lot of us
180:49 - use ad blockers like privacy badger and
180:52 - u-block origin to block our ads so
180:55 - here's a way to
180:57 - get past that and get real numbers but
180:59 - then also avoid tracking personal
181:01 - information because nullified analytics
181:04 - simply doesn't accept personal
181:05 - information so you can't
181:07 - track it so the best way to get started
181:09 - is just to go to any site that you have
181:12 - and just head to the analytics section
181:14 - on the top
181:15 - and you can read through this and and
181:17 - click to enable analytics for nine
181:19 - dollars a month you can fill that out
181:21 - but i already have that filled in my
181:22 - other site so i'm going to go to there
181:25 - it is per site
181:27 - as for right now obviously work with the
181:29 - sales people if you need better pricing
181:31 - than that
181:32 - and you can also read the documentation
181:34 - for uh for more information about what
181:36 - each of these numbers mean
181:38 - that's going to be extremely important
181:40 - so here's my own personal site i can see
181:42 - total page views for the past 30 days
181:45 - unique visitors and total bandwidth
181:46 - views unique visitors
181:48 - is an important question and welcome to
181:50 - that so these are daily numbers and
181:52 - these are monthly numbers
181:54 - daily numbers are i had to spike on
181:55 - september 14 when a big blog post go on
181:57 - unique unique visitors how do we tell
182:00 - unique visitors if we don't track them
182:02 - and this is straight up just unique ips
182:05 - and there's some pros and cons to that
182:07 - with regards to double counting for
182:09 - example if you're on a mobile phone
182:10 - versus
182:12 - on your desktop and you're on different
182:13 - networks you'll have different ips and
182:15 - you be counted twice
182:16 - but then also you'll be under counting
182:18 - people who share ips so for example in a
182:20 - co-working space or a library or a
182:23 - airport or something so it is by ips as
182:26 - long as you're comfortable with that and
182:28 - you can see the spikes here and there
182:30 - you should be relatively
182:32 - comfortable with what the what the
182:33 - traffic numbers say about what's going
182:35 - on with your site
182:37 - additionally
182:38 - uh something else that you you can't see
182:40 - here is is that when you actually turn
182:41 - it on
182:42 - nullify is able to backfill in time for
182:45 - the past 30 days because and that's just
182:46 - because notify already has the server
182:48 - logs it just hasn't set up the scripting
182:50 - for your site
182:51 - to spit out the analytics for you so
182:53 - that has extra running costs and that's
182:55 - what you're paying for to backfill you
182:57 - don't you don't have to enable it and
183:00 - then track
183:01 - the limitation of course is that right
183:03 - now it only offers you 30 days
183:05 - but that is definitely something that
183:07 - the team is keen on working on for
183:10 - offering you more than 30 days and
183:12 - rolling windows of stuff
183:14 - so you might notice that unique visitors
183:17 - on a daily basis and the unique on a
183:19 - monthly basis
183:21 - kind of doesn't add up if you try to add
183:23 - every single day up and that's
183:24 - intentional because these are unique
183:26 - about over a month whereas these are
183:28 - unique within a day so that's all
183:30 - explained in the documentation and you
183:33 - can definitely look at the specific
183:35 - definitions of what
183:38 - each of these numbers mean and there you
183:40 - go that's uh that's what they offer they
183:42 - offer you they can tell you
183:44 - uh what the top pages are a lot of them
183:46 - will be sort of service workers type
183:48 - stuff but then also
183:50 - you can also look at things that are
183:52 - missing so for example if i forgot a
183:55 - mobile icon that's a very good sign that
183:57 - i should probably put it there because
183:58 - people are checking stuff out on mobile
184:01 - uh they're checking out for my rss that
184:03 - that's or they're trying to hack me i
184:05 - can also see
184:06 - what's going on over there um
184:09 - there a lot of some pages will get a lot
184:11 - of uh bot sniffing for the wp admin uh
184:14 - login page
184:16 - and that's just something that we
184:18 - you know being jam stack just guards
184:20 - against for you and that's very nice
184:23 - you may also feel you may also want to
184:25 - filter out some of these
184:27 - commonly requested things which are not
184:30 - uh which are not relevant to your site
184:32 - and that those are
184:33 - function that's functionality that is
184:35 - being worked on by the team
184:37 - as well as you may want to offer
184:39 - client-side navigation
184:41 - uh because this these are only server
184:43 - side these this is where people land but
184:45 - then subsequent navigations for people
184:47 - using front-end frameworks
184:49 - aren't being tracked and again that's
184:51 - another common feature request that
184:53 - hasn't been implemented yet
184:55 - still this is a new feature and it's
184:57 - it's done very very well so the team is
184:59 - very keen on working on it okay so now
185:01 - we're going to move on to the next
185:02 - add-on which is
185:04 - has a little bit more of a learning
185:06 - curve than clicking a button which is a
185:08 - large media
185:09 - and to explain large media i should have
185:11 - to explain what git lfs is
185:14 - git lfs is a way to store large files
185:17 - together with versioning in git
185:19 - so everything that we love about git
185:21 - except that with git
185:23 - one of the problems is when you store
185:24 - large files in it then everyone has to
185:26 - download it and it persists forever in
185:28 - history and that's not very good
185:30 - especially if you don't use it or access
185:32 - it very much like you just want to
185:34 - access it for content
185:36 - so
185:36 - that's why you use git lfs and that's a
185:39 - that's a spec that you can just
185:41 - clone install and use without nutlify
185:44 - what nullified does for you is provide a
185:46 - place to store it so that's where if a
185:49 - large media comes in
185:51 - you can see the product page over here
185:53 - and
185:55 - learn a little bit about how to deal
185:57 - with the problem
185:59 - nullify also notified large media also
186:01 - comes within the concepts of image
186:02 - transformations and we'll talk a little
186:04 - bit about what that means
186:06 - but let's uh actually check out how to
186:09 - how to implement it the best way to
186:11 - learn where to implement it is on the
186:14 - docs
186:15 - the large media page has
186:17 - some information about it here as well
186:19 - as some prerequisites and
186:21 - it really is dependent on your cli so
186:24 - we've already introduced the cli in
186:26 - various sections of previous videos but
186:29 - this one is is important it's a plug-in
186:31 - that you just install
186:33 - with the cli so now every time you add a
186:36 - large media file you just have to say
186:38 - get lfs track and then the path to that
186:40 - media file and you can use
186:43 - wall cards as well for entire folders
186:45 - and nullify will just upload that to
186:48 - theirs to nullify servers
186:50 - when you commit
186:52 - so your workflow is exactly like push
186:55 - and pull
186:56 - with and all that and let's have a look
186:58 - at what that looks like on our demo so
187:01 - demo over here has a bunch of images
187:03 - with high definition
187:05 - and you can see the github repo over
187:08 - here and we can see how this is all set
187:10 - up with git lfs in the master branch
187:12 - this is the one without get lfs so if
187:15 - you go into
187:16 - the static folders and look for the
187:18 - images and look at each of these images
187:21 - they're just going to be the large
187:23 - images that
187:24 - that we see over here and here's some
187:26 - apples
187:27 - and that's not very efficient obviously
187:30 - that's not very scalable this is fine
187:32 - for these small examples but it's going
187:34 - to be out of control pretty soon
187:36 - especially with images of a few
187:38 - megabytes or even gigabytes and you can
187:41 - think about videos and audio assets as
187:42 - well over here
187:44 - so
187:45 - what happens with this folder in git lfs
187:48 - is
187:49 - when i switch over and i head to images
187:52 - and i look at one of these
187:55 - i don't see i see that the file size is
187:57 - 286 kilobytes but i see that it's been
188:00 - replaced by just a pointer and now the
188:02 - pointer is just pointing to the git lfs
188:04 - server which in this case is nullify
188:06 - large media you can see the
188:07 - corresponding
188:09 - files tracked
188:12 - on the large media section of your site
188:13 - so head over to the large media section
188:16 - and then you can see the all the files
188:18 - that are being tracked as well as filter
188:20 - out for
188:22 - one of them if you have a lot of files
188:24 - and that's very very handy and then the
188:26 - other capability of nullify large media
188:29 - and this is a special case for images
188:32 - is that you can resize them so
188:35 - there's no point serving high resolution
188:37 - images every time or manually resizing
188:40 - them by yourself
188:42 - you could just use an api for that and
188:44 - so nullify provides that api and it's
188:47 - called image transformation let's have a
188:49 - look at what that looks like over here
188:50 - so i'm going to apply the parameters to
188:52 - this and it's reduced it to a width of
188:54 - 100 and a height of 100 but this is a
188:58 - rectangular image so it's just going to
188:59 - fit to that i can also use the smart
189:02 - crop parameter and that's actually going
189:04 - to be 100 by 100 and it uses the smart
189:07 - crop parameter we can also
189:09 - make this let's say 500 on the width
189:12 - and that just gives you exactly what you
189:14 - want so that's a very great way to just
189:17 - send over the wire exactly the subset of
189:21 - of the
189:22 - image that you need
189:24 - and you can change the parameters
189:26 - whether you need to preserve the aspect
189:28 - ratio or you need to just fit exact
189:31 - dimensions if you need to
189:34 - you can see more details about image
189:35 - transformation over on the documentation
189:38 - page
189:39 - especially on how to
189:42 - supply the query parameters to get the
189:45 - examples that you need
189:46 - but it's going to be pretty
189:47 - straightforward once you understand what
189:49 - it does
189:50 - so that's nullified large media a
189:52 - relatively straightforward
189:55 - large file hosting and image
189:56 - transformation product
189:58 - all right that is that for image
190:00 - transformation enlarged media
190:03 - and now we're on to even more exciting
190:06 - ground which is the add-on marketplace
190:08 - and this is a relatively new
190:11 - part of nullify as well
190:14 - which is working with third-party add-on
190:16 - providers
190:18 - and it's not something we really shout
190:20 - about because uh there's just not a lot
190:22 - of them and it's quite a new initiative
190:24 - but it's definitely a growing area of
190:27 - focus for netlify and if you're
190:29 - interested in
190:31 - working on an add-on for your company
190:33 - together with netlify definitely get in
190:35 - touch
190:37 - but we're just going to focus on two
190:39 - existing add-ons that you can use today
190:42 - the first is going to be fauna db
190:44 - a lot of people when they move up in
190:46 - terms of use cases from marketing pages
190:49 - to
190:49 - submitting forms to authentication and
190:52 - cms and then they at some point they
190:54 - become an app and need some sort of
190:57 - persistence from a database and you can
190:59 - use
191:00 - firebase and other databases like
191:03 - mongodb atlas
191:05 - through nullify functions and nullify
191:07 - dev and all that good stuff
191:09 - but it's easier to
191:12 - onboard with an add-on that manages a
191:14 - lot of the back-end syncing of
191:17 - environment variables and setting up of
191:19 - instances and all that um so it's all
191:21 - integrated in your netify dev workflow
191:24 - so here we'll talk a little bit about
191:26 - fortnite fauna db so the fauna db i
191:28 - think the best place to find out about
191:30 - it actually is not on netlify the best
191:32 - place to find out about it is on
191:34 - a podcast um one of my favorites is
191:36 - software engineering daily and evan
191:38 - weaver the ceo of fauna talked about why
191:40 - he started fauna and basically he was
191:43 - one of the
191:44 - early early early database engineers at
191:46 - twitter and they faced scalability
191:47 - problems because they were using nosql
191:50 - databases well they they had to migrate
191:52 - to nosql because they face scalability
191:55 - problems and
191:57 - so that's what fauna is a globally
191:59 - distributed asset compliant
192:01 - database and it has a lot of really nice
192:04 - features including their own query
192:05 - language
192:06 - which is very powerful for some use
192:08 - cases like field level authorization and
192:11 - graphql first support so
192:15 - the best way to start thinking about how
192:17 - to use fauna together with netlify
192:19 - functions is to look at some of the
192:21 - announcement posts
192:23 - the fauna atom was definitely in the
192:26 - prototyping phase for a few months and
192:29 - so in july there was this example from
192:32 - david wells
192:33 - talking a little bit about how to set it
192:35 - up from a create react app point review
192:37 - and setting up a full
192:39 - serverless
192:40 - databasey
192:42 - full stack
192:43 - fontadb enabled nullify function and
192:46 - that's the demo that you can view on the
192:48 - nullify repo
192:49 - because it's the one done
192:51 - by nullify people and you can definitely
192:53 - think about the structure that you might
192:54 - want for a backend for your credeps and
192:57 - more recently in september of 2019 we
193:01 - actually announced the full general
193:02 - availability of the add-on together with
193:05 - an authentication claims process
193:07 - so
193:08 - and so so now it's fully supported
193:11 - so now it's fully officially supported
193:13 - by nullify and fauna
193:15 - and the way that you add it you can
193:17 - definitely create it through the netlify
193:19 - cli and these are the commands add-ons
193:21 - create fauna and then you can claim that
193:23 - instance with add-ons off and the fonda
193:25 - team themselves have also worked on
193:28 - a demo for you that can show off what
193:31 - you can do with it and the idea of this
193:34 - demo is to show you how to integrate
193:35 - netlify identity nullify and fauna all
193:38 - in one full stack app and obviously it's
193:41 - a to do app because that's the
193:43 - hello world of everything and we can log
193:45 - in for example with our netlify identity
193:49 - process that we know and love
193:51 - and once we're logged in you can see
193:53 - that we are able to create lists to do
193:56 - mvc
193:58 - and i can access that list and add a
194:00 - list
194:03 - and do everything that you normally do
194:04 - with
194:05 - crud
194:08 - and you can still go back out this list
194:11 - would be guaranteed not to be accessible
194:13 - to other users
194:15 - because of how fauna does field level
194:17 - authentication so definitely check out
194:20 - how fauna works
194:22 - you can also look at their docs for for
194:24 - the fauna add-on specifically or just
194:26 - getting started with fauna in general
194:28 - and and it's a very powerful database
194:31 - for with great developer experience for
194:33 - serverless jab stack users
194:35 - the next add-on we're going to look into
194:38 - is the very good security or vgs add-on
194:41 - and vgs is a company it's not just
194:44 - something that you should have
194:46 - ggs is a company that solves a very real
194:48 - problem of a very different nature which
194:50 - is collecting your users data in a pci
194:54 - and hipaa compliant way
194:56 - so
194:57 - there's some more information on the
194:59 - docs but i'm just going to go through a
195:01 - rough intro of what you should know
195:04 - in case you might need this and so the
195:06 - idea is that
195:08 - when you're using something like netlify
195:10 - forms you might become
195:12 - you might be collecting some information
195:14 - so let's look at this demo on the vgs
195:17 - github page
195:19 - and it's also linked in the show notes
195:22 - and over here we can see that we're
195:24 - taking a form
195:26 - we've got some name information all this
195:28 - stuff and we don't want this to be
195:30 - submitted to us via nullify functions or
195:32 - nullify forms we just want to send it on
195:35 - to do for example a processing check
195:37 - like a background api check
195:39 - and maybe take payment through
195:42 - stripe
195:43 - or something so what vgs does is an
195:46 - intermediary that steps in and wipes
195:49 - and replaces all of these
195:51 - all these fields with
195:53 - unique ids those functions can then
195:55 - remotely check vgs for those date that
195:57 - those values none of it hits nutlify or
196:00 - nullifies logging so here we've
196:03 - processed a striped transaction even
196:05 - though we haven't saved the user's data
196:08 - from credit card or other information
196:11 - so that's the rough idea of why you
196:13 - might need it definitely go check out
196:15 - their
196:16 - introductory video
196:18 - just to
196:19 - explain a little bit more about what vgs
196:21 - does they are very good at what they do
196:24 - and they have more docs for you
196:27 - on the announcement blog post as well as
196:30 - on the vgs doc site itself
196:33 - so definitely go check that out
196:35 - okay and just to wrap up the video we
196:38 - are going to talk a little bit about the
196:39 - premium add-ons and these are things
196:41 - that you might want to look into if your
196:43 - company relies on netlify especially for
196:46 - enterprises and large teams
196:48 - and you might need some of these premium
196:51 - support and performance add-ons and so
196:54 - the best way to find out information for
196:55 - that is to go to the pricing page and
196:57 - just to get an idea of like the security
197:00 - features the performance features
197:03 - uh the different cdns uh the free tier
197:05 - has a cdn that everyone uses and then
197:08 - the enterprise tier has bet dedicated
197:09 - cvns with more points of presence and
197:11 - better performance as well as uptime
197:14 - slas
197:15 - and you can also specifically add
197:18 - support add-ons so there's dedicated
197:20 - response times and chat and support
197:22 - channels as well as high performance
197:26 - application delivery network features
197:27 - that you might need for your high
197:29 - performance needs
197:31 - so all of this is available on the
197:32 - pricing page and you can contact sales
197:34 - for more information about that i
197:36 - personally don't know too much but it's
197:38 - good enough to know that it exists if
197:40 - your app or site needs it and that's it
197:42 - we're gonna we've wrapped up our tour of
197:44 - nullify add-ons to be clear everything
197:46 - else that we've discussed so far are
197:48 - also add-ons it's just that there's more
197:50 - to do with each of them so i broke them
197:54 - out into different videos but edge build
197:56 - and dev are core parts of the
197:58 - platform and then each of these are
198:00 - add-ons
198:01 - most of them with free tiers that you
198:03 - can use and add functionality to your
198:06 - app but none of them are strictly
198:08 - required to use nullify and you can
198:10 - definitely bring other features as well
198:13 - a lot of them are good partners with
198:14 - nullify and sponsors of gemstack events
198:21 - one benefit of being jam stack is that
198:24 - you're basically the first consumer of
198:26 - your own set of apis
198:28 - and once you have one consumer you can
198:31 - pretty easily spread to more so
198:33 - if you have a web app you can spread to
198:35 - mobile app to desktop app to cli and so
198:38 - on and so on and so on and nullifies no
198:40 - exception nullify itself is jam stack
198:43 - and netlify.com is hosted on nullify.com
198:46 - so in this section we're going to be
198:47 - taking a look at how to make your own
198:49 - netlify client and the best way to learn
198:52 - that is to look at the documentation and
198:54 - also to look at other clients that have
198:57 - already been implemented and then you
198:59 - can implement a nullified client for
199:01 - whatever purposes that you need if
199:04 - something that we do is not working for
199:05 - you
199:06 - you can make your own so the first place
199:08 - to see
199:09 - this in action is app.netify.com this is
199:12 - always sort of the first class consumer
199:14 - of
199:15 - nullifies apis
199:17 - and one way to tell is to go to the page
199:21 - and hit the network tab and just check
199:23 - out all the api responses that have been
199:26 - called
199:27 - you can filter for xhr over here
199:34 - and you can see that we're hitting for
199:36 - example like a site's endpoint
199:38 - with some parameters
199:40 - and
199:41 - then that gets back the responses that
199:44 - are
199:45 - then displayed here as well as
199:46 - notifications
199:48 - then when you enter a site
199:50 - you get some notifications it deploys as
199:52 - well so you get deploys this is the
199:54 - options ping
199:57 - let's look at the get result and yeah
199:59 - you can see all the
200:01 - deploy preview stuff that's happening
200:04 - over here
200:05 - and so on and so forth there's a lot
200:07 - that's happening and they're all done
200:10 - through an api and
200:12 - therefore pretty transparent to
200:15 - anyone who wants to use them for other
200:16 - purposes you should note that
200:19 - there are authentication head tokens
200:21 - that you that you might want to afford
200:22 - and this would be located in your
200:23 - nullify identity jwts now that you know
200:26 - that the api exists
200:29 - probably the best way to learn more
200:31 - about it is to check out the
200:32 - documentation these are
200:34 - this is available on the official docs
200:36 - itself
200:37 - and you can check out links for go and
200:39 - javascript api clients
200:41 - and it's got some information about rate
200:43 - limiting pagination and in particular if
200:45 - you want to write your own deploy
200:47 - methods
200:48 - you should read some of these
200:50 - information to help you figure out how
200:52 - to deploy large zip files and folders of
200:56 - files
200:57 - form submissions
200:58 - that you programmatically retrieve form
201:00 - information so you can retrieve that
201:02 - within a function for example and then
201:05 - reference it in your page itself so it's
201:07 - not a write-only
201:08 - form and there are other ways to trigger
201:12 - web hooks and
201:14 - and retrieve files themselves without
201:16 - actually serving
201:18 - the
201:18 - actually serving that url
201:20 - the official api itself follows the open
201:23 - api spec and therefore has a
201:25 - programmatically generated documentation
201:28 - page as a standalone and you can
201:30 - actually
201:31 - access this information in a structured
201:34 - manner together with some sample
201:36 - response shapes so you can actually
201:39 - code faster for whatever use cases that
201:42 - you're thinking of
201:43 - another good client to look at is the
201:46 - cli for nutlify or netlifedev so this is
201:49 - the cli that you've been using it's
201:51 - completely open source which also means
201:54 - that you can also check out how to do
201:56 - certain things within the cli
201:58 - and use them in your own
202:01 - nutify client the netlife cli is built
202:04 - on top of the oakcliff
202:05 - framework from salesforce and heroku
202:08 - therefore there's a bunch of commands
202:10 - they're all located between
202:12 - here and each of these are the commands
202:14 - that you run
202:16 - including certain flags for example
202:18 - netify functions create
202:20 - that would invoke some flags over here
202:24 - but you can also look at for example the
202:26 - source code for nullify deploy
202:28 - and that's just a single file and you
202:31 - can see how the cli uses the
202:34 - this.nullify and distal authenticate
202:35 - instances to do things like getting
202:38 - sites
202:39 - and deploying
202:41 - and and deploying
202:43 - the sites and displaying the status of
202:45 - them so all this wiring up between the
202:47 - cli and the netlify api happens off
202:50 - screen and it may be a little hard to
202:51 - find so i'm just going to do you the
202:53 - favor of pointing you directly at the
202:55 - inletnify cli utils so this is a
202:57 - separate package because it's used in
202:59 - multiple places
203:01 - in the cli utils that basically links up
203:04 - the
203:05 - js client which is the javascript layer
203:07 - over the go client for netlify
203:10 - and it wraps it inside of a oakcliff
203:13 - base command
203:15 - and all of this is probably foreign to
203:17 - you right now but it will be helpful if
203:19 - you need to dive into the code but
203:21 - basically we export a base command here
203:24 - and we add on all the methods like the
203:27 - authentication method that you saw us
203:29 - use earlier
203:31 - we attached the nullify instance by
203:34 - initial by initializing and
203:37 - then
203:38 - attaching it onto that commands instance
203:41 - so this
203:42 - library is useful for reusing the same
203:44 - login credentials on the machine for
203:47 - multiple clients so if you're logged in
203:49 - on the cli and it sells desktop and
203:51 - so on and you're not asked to log in
203:54 - multiple times but if you want to go
203:56 - down to the lowest level of javascript
203:58 - dependency
203:59 - definitely check out the js
204:01 - client
204:02 - library and this is the lowest level
204:04 - library that
204:06 - lets you do everything imperatively but
204:08 - doesn't take care of access token
204:11 - usage for you
204:13 - some nice community clients that you can
204:15 - definitely check out as well
204:17 - there's the menu bar app from stefan
204:19 - judis this is the one i personally use
204:21 - so if you click over here you can
204:23 - actually see the reported incidents that
204:25 - have been happening recently you can
204:27 - check out the different sites that
204:29 - you're managing and
204:31 - be notified of the deploys you can
204:34 - toggle to different deploys or trigger a
204:35 - new deploy you can set different
204:38 - settings for the for the app and all in
204:40 - all a very nice utility to have to give
204:43 - you notifications of when apps are
204:45 - deploying and updating
204:47 - so that's a brief tour of the nullify
204:48 - api you're definitely welcome to use it
204:50 - and
204:51 - get in touch with us if you need some
204:53 - help on something that doesn't make
204:54 - sense
204:56 - and we are interested in working with
204:58 - people to build more stuff like all of
205:00 - this is open source for a reason and
205:02 - we're happy to work with people to
205:05 - do more things with netlify for example
205:08 - a lot of people install the netflix cli
205:10 - as part of their continuous deployment
205:11 - process like they have their own
205:12 - continuous deployment
205:14 - tool chain and pipeline and then they
205:16 - use network cli to just deploy the final
205:18 - build assets but they don't really need
205:20 - it if they understood the lower level
205:22 - tools or they could just build their own
205:24 - tools to do other things that they wish
205:26 - they could do so nullify api is the
205:29 - ultimate low-level flexible
205:32 - interface if the interfaces that we have
205:34 - is preventing you from building and
205:36 - doing the stuff that you want to do
205:41 - we made it we're here this is the final
205:44 - part of the netlify series where we just
205:47 - link you to more stuff that you can
205:49 - learn the first part i should probably
205:51 - tell you about is how to figure out if
205:52 - something with is wrong with netlify
205:54 - itself that is the netify status there
205:57 - is a notify status.com page that is
205:59 - updated whenever there is a confirmed or
206:03 - reported incident and you can check out
206:05 - the incident history if you think you've
206:07 - been affected in one of your sites as
206:09 - well subscribe to updates there's also a
206:11 - twitter account that you can follow to
206:13 - get more updates or just
206:16 - check if you're in twitter and you can
206:18 - get a link to what's going on over there
206:21 - if you're not checking the status of
206:23 - nullify you might probably trying to
206:25 - debug something that's in your build
206:28 - unfortunately a lot of
206:31 - build issues are user
206:33 - issues so there's not a lot that we can
206:35 - do but we can at least document some of
206:37 - the common gotchas
206:39 - so this is actually
206:41 - in our docs that we document them so
206:43 - this is actually in our docs and these
206:45 - are common issues that people face so we
206:47 - hope that some of this
206:48 - might help in terms of something that
206:50 - you're facing in particular my top tip
206:53 - is to make sure that you can run your
206:54 - build locally and it outputs what you
206:56 - expect before
206:58 - you deploy it and introduce continuous
207:01 - deployment to your build process for
207:04 - even more self-service help you can head
207:07 - to the nullify community site
207:09 - where there are people helping each
207:11 - other on nutlife issues as well as
207:14 - related static site generator issues
207:16 - and for the faqs you can
207:19 - check out the common issue tag that has
207:22 - been created by the support team
207:25 - and these are typical typical issues
207:27 - that they've run into supporting
207:29 - hundreds of thousands of developers over
207:31 - the past five years
207:33 - if you're on a paid tier
207:35 - you can have
207:37 - nullify support
207:39 - and depending on the tier you can have
207:41 - support via email or slack
207:45 - or
207:46 - carrier pigeon it really depends on your
207:49 - pricing plan with nullify
207:52 - and lastly
207:53 - if you need to check something with
207:56 - netlify you can also check them on
207:58 - twitter
207:59 - including hiring for including getting a
208:01 - job with nullify support
208:03 - now i don't know about you but i
208:04 - actually learned a lot from watching
208:06 - talks so these are some talks i picked
208:08 - out to recommend to people for learning
208:10 - what nullified does and is and jam stack
208:12 - is about
208:13 - uh matt billman gave this awesome talk
208:16 - at smashing san francisco in 2016
208:19 - basically giving the founding thesis of
208:21 - nullify and it's it's all about what
208:23 - jabsec does and why there is a
208:24 - resurgence in static site generators
208:26 - chris coyer talked recently about how
208:28 - the front end developers are now full
208:30 - stack developers because of everything
208:33 - that they've been enabled to do with the
208:35 - jam stack
208:37 - sarah drazner talked about how
208:39 - the jam stack is a new way of joining
208:42 - together
208:44 - api's javascript and markup just like
208:47 - the iphone it's not inventing anything
208:48 - new but it's putting putting them
208:50 - together in a useful new way
208:52 - and you can do it you can even do things
208:54 - like e-commerce with the jam stack and
208:57 - it's actually better because it's faster
208:59 - phil hawksworth gives a really good talk
209:02 - on the agency perspective because of his
209:04 - many years of experience in agency life
209:07 - and how it can lead to faster delivery
209:09 - times
209:10 - from a waterfall cycle to a more
209:12 - continuous approach
209:14 - the citrix team gave an incredible talk
209:17 - recently
209:18 - about migrating to jam stack and netlify
209:21 - with their docs team and how
209:24 - their business processes and cost
209:27 - savings were very very significant here
209:30 - for a large enterprise use case quincy
209:32 - larson and free code camp aren't an
209:34 - enterprise but they do have massive
209:36 - scale on on the order of millions of
209:38 - users um and the and quincy also talked
209:41 - about how
209:43 - he serves millions of users using the
209:44 - jam stack because his number one
209:46 - priority is cost and scale
209:48 - and that's a that's a perfect fit for
209:50 - something like a jam stack
209:52 - and lastly
209:54 - jamon ferguson of paypal moved paypal.me
209:58 - to jamstack and
210:00 - recently gave a talk about it and so
210:02 - this is an enterprise level talk
210:04 - does not use netlify but still talks
210:06 - about the benefits and
210:09 - some problems with moving to the jazz
210:10 - stack that he solved
210:13 - so these are all very good perspectives
210:15 - of real life use cases
210:18 - i also learned a lot from how venture
210:19 - capitalists think about think about
210:21 - things so
210:22 - the four places that i recommend people
210:24 - go to are the andreessen horowitz and
210:27 - kleiner perkins investment thesis and
210:29 - netlify as well as
210:31 - kleiner perkins investment thesis
210:34 - redpoint and crv are also interested in
210:37 - investing in the jamstack ecosystem so
210:39 - if you're interested in starting a jam
210:41 - stack startup you can check out their
210:44 - roadmaps and ecosystems and think about
210:47 - what parts of the ecosystem are lacking
210:49 - crv also has another jaztac ecosystem
210:52 - chart and i strongly recommend checking
210:54 - that out as well and thinking about
210:56 - where you fit and what you want to use
210:58 - and what you want to outsource so that's
211:00 - the broad landscape of jamstack there
211:02 - are a couple more
211:04 - resources that i want to point you to to
211:06 - learn more
211:07 - first is jams.conf.com this is the
211:09 - premier jamstack conference organized by
211:12 - netify but definitely not exclusive to
211:14 - netlify there's jamstack.org with even
211:17 - more resources about definitions
211:20 - marketing material best practices
211:22 - examples resources and stuff there's
211:24 - there's a jam stack slack that you can
211:26 - join at jamstack.slack.com
211:29 - there is a
211:30 - older
211:31 - broader community called the new dynamic
211:33 - and this is also a very active slack
211:35 - channel
211:36 - heavy bit one of the investors in
211:38 - jamstack also puts out a
211:40 - jam stack radio podcast with a bunch of
211:42 - interviews that are really great
211:45 - just in just covering the jam stack
211:48 - ecosystem as well as developer
211:49 - experience
211:50 - and finally
211:52 - nullify recently published a book with
211:53 - o'reilly
211:54 - on the modern web development with the
211:56 - jam stack and this is a free book you
211:58 - just have to give your email and
212:01 - it is a pretty good read on why the jam
212:04 - stack what is the jam stack and what and
212:06 - what you can do with it so that's the
212:08 - summary of everything that i know about
212:10 - nullify hopefully this whole video
212:12 - series has been helpful and it's
212:14 - definitely the first iteration so i'm
212:16 - keen on getting more feedback about it
212:18 - and thank you for your time

Cleaned transcript:

hi everyone i'm six and i'm happy to be sharing this walkthrough with you i learned web dev myself through free code cap three years ago and back then i actually struggled a lot with getting my projects online at first through cloud9 and then heroku and i only found netlify a year later and realize that deploying and scaling is a lot easier with the jab stack approach especially with modern front end frameworks like react and vue so this is the video series i wish i had when i started it out i hope you enjoy so i kind of break down the overall structure of these series into nine parts don't worry they're not all equally long but we're going to start with the main ones first the ones that you really need to know so we'll talk about nullify edge and how nullify is actually a cdn first hosting solution and that's why it's fast and secure and how we can upload and deploy without using any of the other functionality of nullify just deploying straight to the cdn next we'll look into netlify build and how netlify hooks up to your git repos and continuously deploys from them so you have version control for your sites but also it helps you generate your sites from static site generators for maximum performance we understand the build process especially how to debug it as well as to manage the build environment with environment variables as well as inject your tokens and secrets at build time then we'll talk about nullified dev which helps you develop locally so you don't even have to deploy this is entirely within your local machine and the and the idea is to make it a lot easier to test serverless functions together with your local dev environment with hot reloading as well as anything else that you might need to simulate your real production environment then we'll take a look at netlify forms and this covers the use case where you think you may need a server but actually you just want to have some basic form submission capability like a comment system people leaving a contact form or even file uploads and then you want to do some basic automation with that with zapier or serverless function or other sort of web hooks and we'll show you how to do that in simple html as well as single page apps and static site generators then we're going to take a look at netlify identity which helps you add authentication and authorization to your site and this can be very useful for apps and ecommerce solutions and in particular you can use a dropping widget so you don't have to code up the ui or you can use something lower level that actually gives you the core functionality and you can code your ui on top of it we'll also talk about authenticated functions and how netlify identity and serverless functions works work really well together as well as other things that you might want to do some of the people that you're working with might actually be nontechnical users and you might want to edit content without going straight into source code and that's why netlify has a very wonderful open source project called nfi cms and we'll talk about how to set it up as well as what it does so you can evaluate for yourself if you want to use it or use any of the other hello cmss out there we're then going to talk about nullify addons which are all the other functionality of nullify that doesn't really fit in the other buckets above but are still very useful and you might want to use them on certain occasions and in particular i want to shout out nullify and analytics which are unblockable serverside analytics that would be very useful for your site as well as the addon marketplace where nullify is starting to have addon partners that include faunadb which helps you add a database to your jamstack site lastly we're going to talk about the netify api where you can make your own netify client for example if the cli and the ui of netlify aren't exactly fitting what you need nullifies platform is entirely documented and you can go make your own client on top of it and a lot of users have and finally we'll end with pointers for learning more about nullify and jam stack and where you can get help if you run into trouble so hopefully that's a good overview of what we're going to be doing today and let's start diving in there are a few ways to deploy to nullify now nullified drop is not the most important way but i find it useful to explain this first because it helps explain the history of nullify as well as the fundamental concept of jam stack so netlify started life as a company called bit balloon and bit balloon was a simple service where you could drag and drop like a folder on your desktop drag it onto bit balloon's web ui and have it be deployed immediately onto a cdn and to this day that is netflix drop and so that is the fundamental concept of nullify that everything that you deploy to nullify is static assets and nullify takes care of deploying it on a cdn to all the points of presence around the world so that your users get them as quickly as humanly possible now bit balloon eventually became netlify and then we dropped the bit balloon angle so if you go to the url bar and you type in bitballoon.com you just simply get redirected to app.netify.com here you can do a simple drag and drop of your built site not the source code the build site and you can scroll around to look at the features we're going to cover all of this in the rest of this video if you don't have a sample site nullify actually even gives one to you so just go to the downloaded demo site button that downloads a zip file and you can literally just drag and drop that zip file on to that drag field and you see how quickly it deploys there's no editing there it just deploys live to a live url and you can scroll around i mean i really don't think there is a faster solution to getting something online you literally drag and drop it and the whole thing just deploys for you on a cdn so that's the fastest solution now i'm also going to try to edit this site i'm going to unzip that zip file into a folder and then you can look around you can see all the assets like a typical site i'm going to choose my favorite editor i use vs code it doesn't really matter what you use but here in vs code i can just drop drag and drop the file from my file explorer to vs code and now i have that project open and now i can surf around and look and look at the index.html for example and this is a standard html site nothing no frameworks nothing and i'm just going to edit some of the text to see how it shows up and instantly deploys changes so now i'm saving it and and so i've edited that site and now i can actually choose to compress that site and zip it up again to a zip file and now i can go back to that deploy page and if i want to update that site i can just go down to the deploy section and drag and drop just like i did to initiate that site so i just drag and drop it and now it's uploading and now it's published and when i click on it and i hit to refresh that site it's uploaded with the new changes so that's netlify drop you can always access the previous deploy with a with a unique url so if you click down in here you can access the previous deploy you can even roll it back so you if you want you can just say publish deploy and now when i refresh this original url and i refresh it it goes back to the original version because every single deploy is immutable so you can always roll back something if you need to now we don't expect you to drag and drop every time so the next method i'm going to cover is using the netlife cli this is a pretty big topic that actually deserves a separate video but here we're only going to use the nullified cli to deploy so i'm going to go back to the folder that i had which which i'm editing the file in and i can pull up the terminal in vs code i already have the nullified cli installed but if you need to you can run npm install global notify dash cli and that will install for you i'm running a netify version of 2.12 you can run nullify status to check if you're logged in i am and you can run log in now if i log in if you're not now i'm going to edit my html again to indicate that i'm using the i'm deploying from the notify cli so i'm just going to say netlify cli rules so we'll see that if we should see that if we deploy so down in here i'm going to write netify deploy for brevity because this is a lot to type you can actually use ntl and that would work and we'll see what we get so the first thing it tells me is that this folder isn't linked to a site i don't i have an existing site that i that i want to link to but we'll avoid that for now and just create a new site and we'll we'll do the linking later so we'll create and configure a new site they'll ask you to pick your teams uh more it's likely that you'll you'll just have one or two teams so just pick their appropriate team and then you can pick something like netlify demo site now it's asking you for the deploy path in most cases you can just go with whatever is suggested um but we'll talk you will tell you how to how to configure this later and so now it's uploaded all of these pieces of information and actually showed you what it's done as well as given you a url where you can actually go check it out so here because i've only i've only chosen nullified deploy by default it deploys to a draft url so you can see what it looks like in production before you actually push it to master if you're happy with this and you actually want to push it to master just run nutlify deploy dash dash prod and that's that does exactly the same thing as nullify deploy but it pushes it directly instead of a draft url it pushes it directly to so here we have a live url so if we click this and we should be able to see the cli rules on the main on the main url instead of the draft url again remember that each of these deployments is immutable so you can roll back to it at any time or give give this as a link to a friend or colleague for reviewing whatever content or code changes now notice that it keeps prompting me for a deploy path if you want to actually just hard code that there are a few different ways to do it but the way that i would recommend is to create a nullified.tamil file so i'm going to exit out of this process and i'm going to create a nullify.com so this is an example netlify.commo that i have just saved on my copy of my clipboard manager um we'll go we're going to comment this out for now and we're just going to focus on the publish directory so the publish directory is the directory that we want to zip up and send out to the cdn of netlify down in here uh we i usually use a dist folder but here i'm just deploying the root folder so we can just say dot you can run nullify deploy prod and i i'm no longer being and i'm no longer being asked about where my publish deploy path is um of course i can move all of the assets into a published folder so something like publish list and i can move all of the assets here so now it looks a lot cleaner and i can build from a source code directory so then i would have to change my publish directory accordingly to the disk folder so i only publish anything inside of this and anything outside of this does not get and i can run that accordingly now in netlify we actually really encourage using version control and we call it git centric workflow so what i'm going to do is i'm going to initiate git so get in it now you notice one new folder that was created that i haven't explained yet is the dot netlife folder it really is just a simple little json file that stores uh where you've linked what site you've linked the project too so for example if over here i run nullify status you can actually see not just my login information but which site this particular folder this particular project has been linked to so it says down here nullify site info and it gives me all that stuff and you can notice the site id is an exact match of state.json so obviously this dot nullify folder is pretty helpful for netflix cli to understand what site you've linked to but it may not be so helpful for an open source project for example where people downloading your repo might not have access to the same site so checking that in might confuse them however actually checking that in for a team project is probably pretty handy so that people don't have to set up their own sites it's really up to you but i personally generally get ignore know the nullify folder and it really depends on your use case whether you do that so i've i've gone and get ignored i'm going to edit the content over here so we also reflect that we're deploying from git this time and we'll see what happens with that so now i can say git add dot everything git commit and show files you can come up with a better message than i have um and now we have now we have to set up a remote netlife works with gitlab bitbucket and github obviously i am most familiar with github so i'm going to use that but feel free to use whatever git provider care about so let me find what am i calling it if i drop that site and here so i can copy that url and just say git remote add origin and now i have that linked up i can actually say git push plaster so that when i refresh over here i can see that i've pushed my site up to get so surprisingly we've gone through two of the methods and we're actually well set up to do continuous deploy to nullify and i'm going to show you what that looks like right now so if we go to the wifi home page these are all the sites that i have currently but you can also click new site from git you can choose to set up continuous deployment from one of these providers obviously i choose github and i can select that repo that i just created so you'll notice over here that it reads the nullify.tamil file that we've made and it's also created some other options that you might want to look into as well well we'll talk about the build command when we get to the build section so we're just going to hit deploy site and it really is that simple so this deploy should be done pretty quickly and once you click that site you should be able to see nullify from git directly as pushed from our local local development to github and from github pulled into netapp let's have a look at what continuous deployment workflow looks like so i'm going to go over to my deploys view and then i'm also going to go over to my project i'm going to say i'm going to make some edits as well so i'm going to say continue with deployment is the best because it is i'm going to get dot again commit change and get push origin master that's just an alias that i have set up locally so that's going to deploy straight to github and that's going to kick off a build in here and that's just an underlying secret about how nullify works is to automate this so now so now it uh there's no build time so it just basically deployed immediately and uh and so now when i hit back to the original site goofy austin 8 8 8 i can see continuous deployment is the best over in github i can also refresh and see my change down in here and that's continuous deployment the the idea that your deploys update in lockstep with your git don't forget that you can always roll things back if you made a mistake or if you're not ready to release something so for example i can publish this this old deploy and if i head back to the site and refresh it goes back to the original git message and the next version is still here so that's how we launch some of our features if you want to turn off continuous deployment for some reason you can click stop auto publishing and that will stop and now when i make some more changes stopped publish stop again this is a git alias just for me to be a little bit quicker in my actions so now when i see this update coming in it actually has built and deployed it just isn't published yet you can see this little lock icon because i've stopped auto publishing so when i refresh my page i haven't changed anything in terms of the text because i haven't published the latest update if i want to kick it back on again it doesn't immediately promote the latest deploy to the published site because you may not want that to happen so you're going to have to go in here deploy and only then you'll see the new text that you've pushed to get so a lot of the secret around how this is done is basically setting up internal build hooks you can actually set up your own build hooks down in here in the settings and it just gives you a url you can use to trigger a build so let's have a look at how that works so i can give this a name for example demo hook and you can give it a branch to build here i only have master but you can imagine building other branches and you can save it and that gives you a build hook with which to use so now i'm going to oh and there is a very useful curl command so i can actually paste that into it so let's head over to the deploy section and i'm going to bring up my terminal copied from the build hook section so i'm going to see that i fired this off and now if i wait long enough or refresh i can see that a new hook has been triggered by the demo hook people use build hooks for all sorts of things for example you can go to if this than that and trigger builds on a tweet for example or you can set a scheduled job from zapier or any other cron service to build every minute every day every hour whatever suits your build process for example one of my coworkers phil hogsworth actually built a clock set your watch by nullify.com this isn't a dynamically updated javascript clock it literally builds every minute so now if i refresh you can actually see the time update accordingly for the last method of deploying it's more of a fun demo and not something you're likely to use more than once but it's handy to have around especially for open source projects if you have a nullified.tamil configured correctly then you can also set up a oneclick deploy to netlify button that's pretty easy to get going so i'm going to go to my github directory that i've set up in the course of this video i'm going to copy that url i'll head to the deploy button docs on nullify.com and i'll just paste that in here and that will configure various things like the markdown snippet html uh and elm snippet if you use album but here i'm just going to copy a markdown snippet what that helps me do is paste it directly into my readme so you can say things like deploy to nullify down in here so i'm gonna commit this again new deploy to nullify and i'll push to master and now when i refresh i get this nice the point to nullify button so it's nice to display on your docs especially for open source boilerplates and projects because what that enables people to do people who are not you is to click that button and get that one click deploy experience so for example here it says connect to github i'll give this a different name to netlify and it's going to set up a site and set up that continuous deployment and fork your repo all in the process of one click so whoever is working on their new site can get the benefits of this latest site from you but then they also have a fork with which to start work on so that's what the deployment nullify button is it's just a streamlined process it's useful for open source boilerplate authors and app authors so now we're done talking about ways to deploy things on netlify notice that we haven't talked about build because that's a different stage of the deploy cycle where you may have to set the build command and we'll come to that in a bit but i wanted to spend some time talking about what you get by default because these are things where there's nothing to cover because you got it by default already but it's good to be aware of what you get for free so the first thing to notice is that you get https by default so that's a more encrypted protocol where you're not susceptible to maninthemiddle attack and that's just the best practice for modern websites by default you also get deploy previews so i'm going to do a little demo of that with our demo site i'm going to create a new branch a new site new new feature for example and i'm going to edit that in here awesome new feature and i'm going to save that origin new feature and then i'm going to go create a pr on github so i've been working on a branch i have an awesome new feature i'll leave a comment please merge create a pull request and we'll let it perform some checks but you can see that automatically some things happen that you may not necessarily have on a normal site and so this is a deploy preview basically saying that even a pr which hasn't been merged i can actually check out over here where it says awesome new feature and it has and it gives me a label of deploy preview and that is a preview that i can share with my clients or my coworkers sometimes if you're using for example a static site generator you may want to check out if pages or redirects have changed so you can click on the details and it brings you into netlify where you can look at look at what pages have changed in particular and that should be exactly what you expect in terms of pages once you're happy with your preview you can merge it in and that should also kick off a new build on the master branch so that's a very nice workflow from previewing the new feature before you merge and then merging it in once you're happy and having your customers see it the third default to know about is that netlify is a cdn by default so all of your deploys are distributed to the nearest point to presence this isn't documented everywhere because the list keeps changing but as of as of the time of this recording the regular free tier gets a few locations frankfurt singapore san francisco new york sao paulo and sydney and the enterprise tier gets a few more locations deploys are also atomic which means that nullify waits until all the files are published before pushing everything to production um so that your customers never see like a half updated site uh no matter when they when they hit um and also it also has instant rollbacks which means that it invalidates the cache globally whenever you do a rollback for example by clicking an old deploy and clicking publish deploy so here i've rolled it wrote the version back and now it's instantly invalidated and i can just refresh and see that old deploy lastly you also get asset optimization now this is not on by default but it's so easy to turn on that i can't resist telling you about it so if you head over to the site that we've been published and you look into the sources you can see that we've actually not optimized the site for performance this is obviously a super small site so it doesn't matter but you may need you may want to have this on a larger site so for example we can minify the css or also if we had any javascript files we can also minify that and do a bunch of other hygienic things to clean up the way that we optimize our assets so if we want to turn that on head over to deploy settings and scroll down to post processing section and we can click on asset optimization and enable a set up asset optimization and click save and the last step to do this process is to head over here and retrigger a deploy so that will introduce asset optimization into the postprocessing step which is after you've uploaded all your files and now when i refresh my site you can see that the structure of the site looks i mean it looks the same on the html side part of things but the css is now minified so this is that much faster to deliver over the wire and it just took you a couple clicks so we covered some nice features that you get by default there may be others that i haven't covered i just wanted to highlight some of these and the last part of the deploy section is going to be about customizing the url the domains that your customers see so the first thing to try is to not stick to the autogenerated ones that have been assigned to you but just to customize what that looks like so over here i'm going to say something i can go over to deploy settings go to general and change the site name so over here i can say notify drop demo sitemap so now when i click over here it has a more ergonomic site name but it is still on the dotnetlife.com domain another feature i wanted to highlight is what happens when you want to customize the internal url architecture within your site so for example let's create an about us page and have that show up so i'm going to create about.html and i'm going to hollow out most of these features just call this about us and leave the rest pretty much okay so now i have a new about us page and i'm gonna change to master and complete this new about us page and push it to master i can say i can hit to about and see the about us page so that's all well and good until we tell people to go to the about us page and they might type in slash about us and get a 404 page it's not found so what do we do about that so one of the ways we can handle this is to add in a redirects file so there's some guides as to how to do that over here but we'll just show you inside of code so i'm just going to add a underscore redirects file and this basically just tells you where to redirect from and to so for example if people type in about us we direct people to about so again i'm going to commit this add redirects and i'm going to push to master so now when i head to this about us it's going to redirect to about let's do it again about us it redirects to about so that's very handy but sometimes people just type in any sorts of random stuff and they just don't really get a nice experience so it's nice to set up a custom 404 page so let's also do that i'm going to set up in 404 each and not found okay and i'm also going to set up a redirect that's a catchall so how you do a catchall redirect is you just literally hit a star and you direct people to the 404. so if you imagine in a single page app you might want to send people to index.html because then the single page app might redirect people to the right area but here we're going to send people to the fourth so now when i refresh it actually redirects to 404 on literally any url except for about us which still works so the redirects only run when there's no corresponding html or other static asset to use for people using javascript and requesting json files do note that sometimes you may accidentally hit a redirect and get back html when you actually meant to request something in json so just be careful about that and be aware that you're parsing html as json and those will typically solve your errors now of course when you're getting your site up to production you're probably also going to want to use a custom domain so let's head over to settings head to the domain management section and here's where you can configure your custom domains nullify offers free custom domains that doesn't mean it buys the domain for you but if you already have a domain bought somewhere for example from google domains or hover you can actually set it up to link that site together this is something that other hosting providers charge for so for example i can just say whatever so it's not io that's that's my own site and i can click verify and if it it's already owned by me i can say yes add domain um let's see what happens so my site already currently uses this um if it's a site that hasn't been set up you can you know you can also set that if you if you have a domain that you want to buy you can actually buy it through nullify um and you can actually buy it through nullify and now if i will buy it for you and you can pay notify with that and to set it up for you here's what it looks like for my personal domain i have a nullify subdomain as well as a custom domain setup that's said to be the primary domain and everything just redirects to that primary domain i also have netlify managed dns and that's um what netify uses and that's an extra service that nullify provides to do to add extra features but anyway so here's how the dns panel looks if you have a custom domain setup you can also enable ipv6 as well as customize your dns records and name servers note that you can manage all your domains on this team level uh on app.net.com teams slash your team slash dns so that's the end of the first part of this video let's have a quick recap of what's available to you with netlify when you're deploying there are four methods of deploying we started out with notify's historical method which is dropping dragging and dropping then we used the cli to do a manual deploy then we also linked it linked our repo up to github then we set up continuous deploy from github so that every time you push to github you'll get a new deploy and that is continuous deployment and finally we set up the deploy the nullify button on our readme so that open source project can clone our repo and deploy in one click we also took a little look at the defaults that are provided out of the box for netlify we get free https also called ssl we also get free deploy previews same deal you can also get branch deploys which i do not cover in this video but they're kind of the same thing just for different branches we also talked about nullify as a cdn how they're distributed among various points of presence how nullified applies are atomic meaning they all deploy every single file to production at once and as well as providing instant rollbacks from a network control angle we also talked a little bit about turning on asset optimization so this is not on by default but it's pretty much one click and unless you have some bugs that are not compatible with this you should always have it on then finally we talked about nutify and custom domains so most things are hosted on a custom nutify subdomain but sometimes and sometimes you want to do redirects around what the internal url structure of your pages are we covered that as well as how to do catchalls for 404s we also covered how to link up custom domains as as well as a little bit about nullified dns and how if i can manage the dns for you if you choose to have it you can also set up branch deploys for managed dns if you're using netlife dns so that's the scope of deploying on netlify and in other videos we'll cover the other sections but if you have anything about any questions about deploying please let me know cheers in this video we're going to be covering part two of our series on nullify and specifically focusing on things that you should know about building and the continuous deployment aspect of network so let's drill into that a little bit more we're going to cover build tools and static site generators we'll cover what build settings are what the build bot is build stages different things that are done during the build what concurrent builds are and how you can cancel builds to keep under your concurrent limit some build gotchas that people commonly run into as well as what to think what to do when things go wrong we'll end with a discussion about environment variables and the things you can do to set them in nullify to change the deployment environment to exactly what you need first let's have a little discussion about netlify and build tools nullify is strongly supportive of build tools in fact one of the founding theses of netlify is that static site generators are the next big thing and that basically came from tracking the statistics on static site generators and seeing that people wanted to use them to deploy to our cdn but they were manually doing it and we wanted to build in a continuous deployment tool to help them build and deploy their sites in fact i strongly recommend watching this talk by netflix ceo matt billman because it really explains the benefits of the jam stack compared to what came before it but anyway we're here to learn about the build process so the first thing to understand about the build process is that you can always do local builds you may not need continuous deployment the problem with continuous deployment is that it's done remotely it's on someone else's server and it may introduce extra hurdles for you when you're actually trying to just develop a new feature so if you're doing local development don't use continuous deployment just local locally build and push stuff to nutify until you're happy that you can turn continuous deployment back on let's take our existing site that we've been working on from part one and let's add a build process to it so right now i have this folder which is a dist folder and it's got a bunch of index html files and let's say i want to add some javascript to it to write some interactive components what i'm going to do is i'm going to add the bar the parcel bundler so that would be yarn first i have to initiate initialize the package.json and then i have to add the parcel bundler and while that's going on i can also install react react dom because i'm going to use that as well so here we're not using a static site generator but we're using using a build process and a static site generator is just a massive build process so now we've got the dependencies installed we're going to rearrange this a little bit so i'm going to take this this folder and rename it to source and we're going to build from the source to the disk folder and remember that the the folded folder that we ultimately publish is the disk folder all right the next thing i'm going to try and do is i'm going to go to this source folder i'm going to add a new folder called index.js for example i'm going to paste in some preprepared react code and i'm going to go to index.html and add a script that id equals app and then i'm going to add a script tag at the bottom saying script source so now when i run yarn parcel index.html i get a nice local server where i can see the results of my code it says hello from react and i can actually click an interactive button so i know that i've added some javascript to my static site so this is wonderful news and we need to actually make this run in production so i'm going to cancel my running process i'm going to go over to package.json and make life a little bit easier for me with some npm scripts this is obviously optional but it's pretty common to set this up because it's easy to run so i'm going to put in my command again source index.html and i'm going to introduce a build command as well so this just has a build again you can use any process you don't even have to use a javascript build tool but this is just an illustrative idea to bring you through the top file so now when i run yarn build it's going to execute this command and run parcel build and that builds to the dist folder and remember that this folder is exactly what we're going to ship to nullify to verify that this folder has built successfully i can use serv dist serve as a cli that you can install and that serves your files locally and you can see that yours your code is running in production the difference between this old version and this one is that this is running react in development mode and over here we're running react in production mode so that's how you can tell that your builds are running locally so as long as you can develop and build locally you may not need continuous deployment because as long as you're debugging things and making sure that your your javascript code is even valid this is a perfectly fine way and you don't have to use nullify at all but what nellify does for you is starts to do that automation step so basically the idea is that you would not be checking in your dist folder you would just be saying you would just be adding that to git ignore actually and you only have the source folder in your code let's see what happens when we push our latest changes to get we can see that our build has failed because this time we don't have a disk directory anymore we remember we added that to git ignore because we're now building from a source directory that means that we need to run the build command in our deployment environment to set up continuous deployment so that brings us to build settings really there's only two places to set your build command the first is in your deploy settings so let's edit our settings over here and add the build command yarn run build and we're still going to deploy from dist and we'll save that you can use the base directory if you have a subfolder for example if you have a monorepo setup so now we have the build command set we're going to have to go back to deploys and rerun the deploy again you can see that our build is now successful and in particular you can see that we're now executing the user command yarn run build which is the one that we did and it's showing us running the build showing the output of the build and then saving a bunch of dependencies and then deploying site from dist so over here if you want to check out the deploy you can open this in a new tab and check out how this reacts code is now in production on the production nullify site and it's using the production build of react so that's all well and good but there's a second way to set build command and that's in nullified.tamil this is a higher priority command so it actually overrides what we had before so i'm going to comment it out and this is how it should look under the build settings you should add a command equals and then whatever string you want to run yarn build so this can take any form uh previously we set yarn run build but if you're using yarn you can also just type yarn build and that is basically the same command i just want to show you some visual difference i'm going to commit it to git add build command and i'm going to push it to master and that'll kick off the build again in netlify notice that this time there's a special message printed over here saying there's different build command detected going to use the one specified in the tomo file yarn build versus yarn run build so yarn run build is the first command that we set in the user interface and yarn build is the second command that we actually set in nullify.tomo so this is higher precedence because that's the single source of truth for all the nullify settings that you ever want to build so i personally encourage people to use nullified autumnal but you may find it easier to onboard beginners with the web ui either way when you read your logs you should be able to figure out what's going on by keeping an eye out for the commands that you want to run and looking for any error messages in case so overall that's a very gentle introduction to build settings it wasn't too hard but really what's an operation over here is the core of netlify which is the buildbot and that's something that we're going to dive into a little bit in this next section so one way to find out about the buildbot is to read some of these documentation on the site it goes into a little bit about the origin of the buildbot some default environment settings and versions that you may want to know about but basically the high level concept that you should know is that the buildbot is basically a docker container our cto used to work at docker and so we're very familiar with this technology and it gives us a lot of nice security and reproduction capabilities that is very helpful in creating a continuous deployment service like netlify so let's check out what the docker container environment looks like it really is just a massive bash file this is entirely open source so you can actually run it locally so you can debug your own docker builds there's different versions of the build images that are available so the legacy sites will have the trusty version you should not run into that if you're watching this video and the current sites have the xeno build image and that's the more current uptodate version you can see the branches accordingly there is ongoing work on new a new version of the buildbot so by the time you watch this video there may be a new version available but hopefully i'll also have a new video out by then covering that but basically you should be aware of that you can actually pull down the production the exact same docker image that nullify runs to your local environment so that you can test your builds in case something is going wrong in this whole build logic and it's also open source so you're welcome to contribute but again i want to stick to the high level if you know that there's a build bot you know that you can reproduce it you know that it does a number of different things but at a high level you should be aware that there is a cache so nullified builds are not entirely stateless they actually we actually cache things for performance improvements everything is stored in a netlife directory and in fact you can you personally can use a build script to save things in cache diff them and decide whether to build things or not based on the cache you may write your own scripts or you can use open source tooling like this one from david wells called catch me outside which is pretty clever i do like the name a lot but basically it helps to think about how's you to think about checking where do you store things in cash how should you handle a cash update and then checking for diffs between updates and if there is a need to update the cash then you run the cash update again so a simple thing like that can actually cut down your build times by a lot by skipping the steps of building things that are unnecessary for you to build then it will install then a build bot goes to second stage it starts installing dependencies the dependencies here are not just your you know npm dependencies but also your known versions it will check the dot nvm versions for example it will check your ruby environments if you're using a ruby static site generator like jekyll php hugo so on and so forth even has python go a nice grab bag of everything that you could possibly want i even have had some success installing haskell you can just curl your various environments and store them in cache basically anything that you can do in a typical bash environment you can do in nullify then we get to the actual build process that's where we run your build command if you have one obviously we did the first part of the video entirely without a build process so you don't have to have one if you don't need it then we package and optimize this is an optimization step that may or may not apply for you but basically this is post processing and other optimizations that we do for delivering to our cdn then we're going to deploy the site from the disk folder again this is from the folder that you specified in your netlife.tomo or somewhere else we're going to save the dependencies for the next build and we're going to output a manifest you can't see over here but there's a manifest of what has been produced so that we can do diffs and so that we can produce images so that we can produce summary information like this showing you what files and what redirect rules have changed and have been processed by the buildbot so that's the long that's the high level overview of the build stages things happen in a sequence and i think if you know the where your issues are if you're debugging a build it will help you will help us a lot in helping you and all around demystifying nullify by a lot so the last thing that we should cover before getting into the gotcha section is concurrent builds and canceling builds so the idea here is that anything can trigger a build right i can be pushing a commit to get or it could be triggering deploy over here or i could be triggering a deployer from a build hook that we talked about in the previous video so over here i have a build hook that i can just be calling randomly and so there now i have two current deploys so what's happening right here is that i only have a maximum of one concurrent deploy so this is building and this is waiting sometimes i actually want to just skip this step because i just want to go straight to the most recent build because i know that's the one and so i can just click on click in here and cancel the deploy so once i cancel the deploy i'm no longer i'm using that current deploy and now i have the next one enqueued so i just have to wait a little bit but already it's starting to build so that's the that's the rough idea if you want to have for a one for a single person workflow one concurrent build is probably enough but you may want for a team you may want to look into multiple concurrent builds so that you don't hold each other up canceling the build is as simple as just killing the docker process and that's as that's all it is so as long as nothing so as long as everything is failing every single build is failing the most recent successful build actually still keeps alive so so your site doesn't go down until we have a new successful build all right so time to cover some gotchas that people typically run into in fact this is probably the most difficult part of learning netlify which is learning how to use a continuous deployment environment in fact we have a whole place in the docks dedicated to build gotchas so if you have any issues just make sure to have a read of all of these and see if that matches your situation so some of the common gotchas that i wanted to highlight is first of all the 15 minute rule basically if your build takes longer than 15 minutes nullify might cut it off on the free tier if you're a customer or you have some sort of special case you may get in touch with support to extend that up to 60 minutes or higher next you also have to think about permissions and api secrets sometimes your builds particularly if you're using a gatsby or next template that requires a api key otherwise it will fail to build then you may need to provide those api keys in order to build build stuff we'll have a section at the end about environment variables and where you can set them lastly i also want you to be careful about what folder you're deploying so make sure that when you have a disk folder you're you're actually building to the disk folder sometimes people just aren't aware of what folder they're deploying to and just thinking that through can help a lot and of course there's a community nullified topic where you can find out a lot more about faqs that people run into on building things so that really leads me into the troubleshooting part of the video basically what to do when things go wrong make sure to read your build logs i've already read the build logs with you for a number of different build situations make sure that you can build locally so if all else fails at least make sure you can do your build command locally like yarn build for example and make sure that runs without any hiccups so that this exact same thing can actually run in netlify and then also think about hidden dependencies so for example over here i'm using node 10.13 and over in netlify i'm using 10.16. if there's any indee if there's any differences that i'm relying on that might actually cause some very subtle bugs so just to be aware of that you can set the node versions in an nvm script and it's all well documented in the docs next a yarn versus npm issue so for example one of the very common issues is relying on yarn in your build command but then not having yarn in your build environment and yarn is only installed if you have a yarn lock file so if i delete this this will just run this would just assume it's an npm setup and the yarn command will not be available so you'd need to add a yarn lock file for the yarn cli to be installed and that's a pretty common issue for beginners basically just always commit your log files if you're using hugo grunt bower or any other environment like ruby or python definitely head to the build settings page to check out options for configuring the versions of your environment so that you can run the version that you actually expect and if all else fails definitely check out community.netify.com where you can probably search your question to be answered or just follow your own question the last part of this video focuses on environment variables where you can set api secrets and all other good stuff so basically the only place to set environment variables as of right now is inside the user interface so let's head over to our site go to deploy settings scroll all the way down to environment and set environment variables my secret for example i'm always i'm going to save that and now i can access this environment variable inside my build process so i'm going to go in here and actually try to add that to my build one way i can do that is to just add it as a build command as a prebuilt so over here i can just add prebuild and by the way this is a builtin feature of npm scripts nothing nullify specific here and let's commit this so now if we open up our nullify log again you can now see that inside our new build we're running the prebuilt script and it echoes the secret that i've placed inside of my environment variables so this is handy for open source projects that may want to ping a private api for example to get some data to actually pass into the static site generator so you can build for example shopify site or air table data or anything else like that nullify environment variables are not just for passing in secrets to your app you can also use them to change the environment to vary the environment so you can check out this list where these are netlify specific environment variables nullify communicating to you so you can check for example in process.m.netfile and if that's true then you're inside of a network environment amplify also tells you what immutable url you're deploying to the main url that you're probably going to access what branch is coming from if you're deploying from a different branch the commit the build id the context basically a lot of metadata to figure out what the origin and meta and meta information about your build is so that's the first category of environment variables which are things that nullify puts in your environment to communicate to you what is going on in your environment and the next category are things that you can set inside of netlify's environment so that changes the versions for example you can set the npm version you can set the yarn version or your ruby version go version your java version python version um and all that stuff and so this is extremely variable and it's all there for you if you need it there also another category of environment variables that you should probably never touch but these are helpful in case you need them for some debugging or some magic internal advanced things i personally never use so if you want to learn more check out this scotch article that i wrote detailing how to use environment variables to pass secrets to the front end take note that exposing api tokens to your front end is sometimes a bad thing so react view gatsby they all like to make you prefix environment variables to make sure that you're aware not to leak everything over and then a simple guide is how to change environment variables to vary your environment like we already explained as well as some other poly user features that we talked briefly about yeah so that's an overall guide to netlify build in aggregate it's not too complex but when you combine building with deploying to nullify edge that can be extremely powerful and in the next video we'll cover local dev and whatnot if i can do for you there see ya we're in part three of our introduction to netlify and this is netlifydev nullified dev is the newest kid on the block and in fact most of it is still in beta but it's worth talking about because it's kind of the newest functionality and it helps a lot with your local dev capabilities so the best way to find out more information about it is to check out the site netlify.com products dev and this gives you a good overview about what it does it's a dev server that powers a lot of the local replication of what the netlife production platform is and we just replicate it on your local environment and the reason you want this is because remember you want to have faster iteration cycles and you don't want to wait for the build bot so you want to have full control and local replication of your builds before you actually deploy them so the way you get there is to npm install in the cli and then run the lfi dev and this has the detector mode that will pick up any of your static site generator projects so that starts a full local environment it detects and runs your site generator makes environment variables available from the production platform does edge logic so your redirects will work and then runs your cloud functions as if as a function as a local server and we proxy everything together and then you can also stream live as well so the best way to get started is also to head to the docs um there's a talk that you should definitely check out uh introducing nullified dev this talk happens to be the keynote at which netlifedev was launched so definitely check that out and the other thing you should know about the docs is that it's not the full story the the netflix dev api is still a little bit in flux and so we've actually managed that on the cli repo and that's you have to just go to the github nullify.li and you just look in the readme and look for the nullified dev docs and here you can get actually detailed information about usage but we're going to guide you through it so let's head out over to our demo site that we've been working on and this is running parcel and it's a it's a project that we can run so right now what i'm going to do is i'm going to treat this as a static site so i'm going to act as the buildbot and what does the buildbot do for building this site it doesn't run the dev server it actually runs the build command right so let's actually just run the build command ourselves i'm going to run yarn build and that actually runs parcel build and that generates to the disk folder you can see over here and so that's normally what we'd serve uh from netify's point of view and so now we can actually run nullified dev so we have that cli command lfi dev there's that little gem icon that i'm very proud of and you can see that there's no dev server detected it's spun up a server on localhost 399 as well as a nullified dev server on localhost 8888 so they're two different servers and let's see what the difference is so now i'm on localhost 888.88 and you can see that i have an activereact app it looks good and that's what we've been working with but also i can go to localhost 399. and get the exact same thing so i also have a live react app and so what's the difference why do we have two different servers and that's what you really have to understand about nullify is that there's a project server and then there's a netlife dev server so the project server is um if it comes with a server then uh we'll use that one if not nullified dev will spin up a server for you and then serve from there so that's what we've been doing just now which is static host and it will join everything and then output a single unified location so localhost 888. so that about sums it up for the build process but we also want to preserve the developer experience of the live hot reloading dev server so let's take a look at what parcel does for hot reloading we run yarn start and it runs parcel source index html and then it outputs at localhost one two three four so that's the important port for them for for parcel it's gonna be one two three four for other projects that create react app will be others but we know that for nullified devs so we can go into nullified automo and add that config command so the port will be one two three four and we can tell notified of that and you can see documentation for this in the netified dev docs over there and that's exactly what we're doing and then we'll run the we'll add the command of yarn start that's exactly what we just did right we ran yarn start and then we navigated to localhost one two three four so we've configured nullified dev inside of nullify.tamil and the final piece is that we'll want to add a publish directory this is really where the redirects file will be located it's not strictly necessary but it's probably a good idea to leave it in there i'm just going to point it to source doesn't really matter so now i can run nullified dev and instead of running a static server for me it's going to actually start to run the parcel server for me on localhost one two three four i'm making an emphasis on this because previously we ran a static server and we just did yarn build before running our static server and then serving up our files locally now we're using nullified dev to run parcel start or yarn start which runs parcel and parcel runs a server at localhost one two three four so again you'll see that the site can be accessed on localhost one two three four and also the nullified dev server can be accessed at localhost 8888. so the question then becomes why bother to have two servers it's confusing it's seems like it's unnecessary we have localhost on 88.8 as well as one two three four and the reason is because of this diagram and this is all the extra functionality we get to add because we're proxying the project's original server to 8888 and so when we're the user we actually view that url localhost 888 and we get all this functionality that we would get in production for example redirects so over here in my underscore redirects file i have a redirect from about us to about and so when i head to localhost 888 i can type in about slash about us and that redirects to slash about and that means that our redirects are working locally and that's important for people for example in the advertising industry who really care a lot about broken links i also want to show you how detectors work so notice i'm starting from an empty folder and i'm going to create a new create react app app that's always very awkward to say and now when i'm done installing notice how this is a normal create react type folder and normally you'd start by typing yarn start but and that kicks off the react script start script but here we're actually going to just run nullified dev and nullify dev is going to pick it up that the fact that we're running a create react app project and then it'll just run automatically and pick it up so that's the vision of create react app and detectors and nullify that nullified dev will just detect your project and it will just run the server automatically without any configuration now we're going to do a quick demo of how environment variables work in nullified dev and you can pull down your production environment variables to local dev obviously you shouldn't always do that but it can be very helpful for debugging and not duplicating some environment variables so first i'm going to run a yarn build and because i don't have this new project linked up to nutify i'm going to run nullify init and because i don't have it linked to github i'm just going to choose the create deploy site manually option and it's just going to create a site instance for me that i can deploy to so now i'm just going to create a netlife.tamil file and that's going to house all the settings which i normally would set up so first i'll add in a build key with a publish value of build and the other command i'm going to run is just nullify deploy dash dash prod and so now because i'm just going to publish that build folder that's all i need to know and how now i'm deployed my create react app app is deployed without continuous deployment but now i can run something like netlify open and head to the deploy section and head to the environment variables section and add in an environment variable here i'm using everybody's favorite environment variable my underscore secret but that's actually not going to work in a react app because create react app doesn't want you to expose every environment variable on the front end so they have it as filtered you must prefix all your environment variables with react app underscore and then whatever your environment variable is so those are the ones that will actually get exposed on the front end and that's a very good security feature but it just trips up people who don't know that it exists and they have to look in the docs so now we can actually reference that environment variable inside of our code so here i'm just going to access process.n dot react app my secret and that's going to be available in production so typically what you do here is you try to have a duplicate and dot env file locally and then run that but here when i run netflight dev i can just or i just run nd because of my shortcut i it just i can just run the dev server but then also if you look at the build logs it also injects this build setting of environment variables so nullified dev goes up into my nullify instance pulls down that secret and now locally i haven't deployed yet locally i have access to that production environment variable so that's the idea and that can be extended uh to do a lot of different things together for example integrations with addon providers i'm going to do a video on that as well but just trivially you can replicate your production environment with environment variables and redirects you can also share them live with nullified dash live but that's very beta so i'm not going to show it to you today and the other thing that we're going to talk about is also not exposing your secrets so here i have a secret that i want to work with but i don't want to expose it to the front end but i still have to work with it in some form so for example like an api secret that i want to hide somewhere right like i don't want the user to know it because then they can also just use my functions so i'm going to show you the netlife functions create command you can type it out as part of the cli so obviously we're just going to use nutlify functions colon create but obviously you can also use a alias for that i use nfc and that just runs that command oh i don't have a functions folder so i'm just going to go ahead and go to nullify.tamo and add a functions folder you can call it the very creative name of functions but you can just really call it whatever you like and now i'm going to run the functions create again and notice it created that functions folder and now it gives me this drop down of things i can choose from so there's a whole bunch of premade templates for you to get started depending on your use case here we're really just going to go through and maybe pick something like this hello world function that i've picked out and that really scaffolds out that template into your functions folder that you've configured by default um identify dev gives you a folder and then a script under that folder which is named the same and it follows the aws lambda syntax and so now i can rename my secret to just my secret because i'm not going to expose it to the front end and i can take that my underscore secret and expose and grab it in process.emv inside of my netlify function so here i have it colocated with my source code but i'm just going to say process.emv dot my secret and i'm just going to echo it out in a json body response so now i'm going to run nullified dev and that again thinking about your mental model runs that create react app server but then also runs a netlife function server so it's under the url.nullify function hello dash world and now that response hello i'm always angry that's the exact response from the environment variables so we've now shown you how to access environment variables from the front end as well as the functions and that's very helpful so for example when i create a hook or fetch data when i load my app and when i when i load my app i can just go back to the front end and that's going to ping my function and let me just open up the dev tools over here so i'm going to open my app and it's going to ping my function and so it's not going to expose that environment variable on the front end it's going to just ping that nullify function and the function itself has access to that environment variable now obviously this is a very simple function and if you look at the code it's actually we've aired on this the side of very simple simplicity just to show you that you really don't need that much to get going we've even included some boilerplate like catching and returning a status code of 500 if there's an error and that's just a best practice for http status codes but here we're going to introduce a more complicated function and this time one that uses known modules dependency for itself so again we're going to run lfi functions create i'm going to pick the node fetch template and node fetch itself installs node modules with a package.json and then it uses that as a fetch inside of known to ping an api so this is a more realistic nullify function or serverless function which proxies an api for you so here i'm going to run i'm going to ping the node fetch in front of in my front end and then run lfi dev and now when i reload my front end it actually loads that external api and so now it's proxied so that i can bypass course issues for example or i can add a secret api key or i can add several functions i can read a database and really just whatever you want to do in known you can do in a node.js functions subject to the timeout limits so here for example i can add my process.emv dot my secret and if that was required by the api i could definitely send it in there without exposing it to my front end so that is probably the number one support question and now you know how to do that i can also swap it out so for example here i have a different api and i'm swapping it out for chuck norris jokes always a good time but hopefully you get the idea that i'm developing all this very very quickly inside of my local dev environment and it's exactly the same environment as it would be in a service scenario i can even test it for example if i open up a new terminal and type nullifier functions invoke that will give me a list of my existing functions and i can pick that one of the functions like hello world i can choose whether i want to emulate nullify identity we'll talk about this in another video i'm going to go with no for now and and that would that would basically pass a authentication header if i need to but here we get the mock response so without even running a front end i can test my my nullify function and so that's a very good example for more information definitely read the readme for example for passing a sample payload query string as well as a file that has that payload we do have special case event triggered functions we're not really going to cover that right now but event triggered functions are basically hardcoded names that are triggered on certain events like for example when someone signs in through nullify identity and that's useful to know now important thing to know is to understand what happens when i have my nullify functions continuously deployed so for example here in my getting norm on the folder file i have the known modules get ignored so that means that when i deploy my files in nullifies buildbot the node modules for the node fetch function will not be there and that will be a problem because it will try to require the node fetch module and it will fail so here i have an example of such a failure and it says for example error could not find known fetch module in the file and so a lot of people run into this and think it's a bug with nullified dev uh it's not really it's it's also a little bit our fault that we can make this experience a bit nicer but really the the solution is to make sure to install uh to run npm install or yarn on each individual function folder if you need it obviously if you don't need it you can just put everything in the top level node modules and that's the standard known resolution algorithm but one solution to you actually use is to add netlify lambda so this is a helper library it used to be the predecessor to nullify dev and that's why you see some old information about this but now netflix lambda is a helper library for nullified dev and we'll add we'll use the netify lambda install thing and we'll just add it as a post install npm script so now that will run and it'll go through every single function folder and it will uh it will just install uh the dependencies for every functions folder and you can read more in the docs but essentially this is what the success will look like we can see somewhere in the docs that will have a netlify lambda install command being run and it will say it's installing function dependencies and node fetch dependencies are installed so that's the kind of thing that we are looking for for a continuously deployed serverless nullify function solution with no dependencies all independently managed per folder and that's a that's a really good way to handle the dependencies because it will just guarantee that it's always installed and so here you can see the same app that we built in dev in production and it's working exactly the same now if you notice um all these functions that we've been written so far is in node.js format with the exports.handler syntax or module.export syntax and if you want to use webpack babel or typescript you can't really do that here without a build step right this is raw node.js it runs under node 8 or 10 and you really need a build step and that's where you use nullify lambda so nullified lambda and netflight dev have similar but overlapping responsibilities and i wrote a lot of docs in the readme to explain how to use them but basically netflix lambda is a build tool now that runs your nullify functions from a source to a dist and that's the under basic understanding that you have to achieve here now now this these functions will be your source file and you're going to have to serve or publish the functions from a dist folder so so here we can actually move everything so for example i can create a new function folder called source functions and i can move this function this hello function to a typescript function i i can also just like rename everything so i'm going to i'm going to add some typescript types so for example i can follow the docs and add babel preset typescript uh yarn add d that will preset typescript and i can also add a bunch of other uh utilities like typescript types node and types aws lambda and that just helps to add typescript to my project here i'm only going to use it for that hello world function but you can see everything i'm about to do so i'm adding a babelrc file and so we're using typescript with babel and now in helloworld.ts i can import the types for importing hand the handler contacts callback any api gateway type from aws lambda so now i can type go through and type everything and i can also use the export keyword and that's a very very handy handy way of typing everything so now i can type for example api gateway events for events and contexts for context and now each of these things have the correct properties on them so for example if i type event dot it gives me all those values from the autocomplete because of the types that are just from definitely typed of aws lambda same thing for context um including an identity field which we can use for nullify identity and and so that's these are just very handy ways of writing better more correct code if you are okay with using a build step and using typescript and so now um we need to impose a build command i'm going to put it on the post build part of npm scripts it's going to run if i land the build source function so it's going to build from the source functions into the production publish the the folder that we're going to publish like functions hello world and that's going to be helloworld.js right and and that's going to be a minified output from the source typescript file um and so that's what netflix lambda does it helps you install dependencies and it helps you build um from a source file to a disk file and and so then everything can be uh it can be run locally uh netify dev has an understanding of what nullify lambda is so it will run that if i lambda build for you if it detects it in your package script so this is what we call function builder detectors and that's that's exactly how it how it's supposed to work so that you can run it locally and make sure that your scripts are up to date but then also deploy them with minimum configuration so that is nullified dev uh we're gonna go to the next part to identity forms analytics cms all that good stuff but thank you for taking the time to check out nullified dev and hopefully that helps your local dev work okay so now we're on to forms this is actually a pretty big section it's one of the most widely used addons of netlify and it's meant for what it says on the tin for form submissions it's not a database although it does store data so don't try to use it as a database because it will cost you and also it's just not meant for that um in terms of the data structure that it that it offers but it's very handy for contact forms uh like if you want to inquire about prices so if you want to book a workshop or something or you know leave a comment or upload a file for example for claiming receipts or something like that all of these are very good use cases for netlify forms so where to find out about the life forms we're gonna go over to the docs and head to the forum section and forms are literally adding an attribute onto a form tag as far as regular html goes i do think it's a little bit more complicated for react forms and we'll talk a little bit about how that works in react but in plain html we can actually do this pretty easily in our demo that we've been working on so i'm going to go over to the demo that we have and i'm going to go over here so right now i have all this bunch of stuff actually i'm just going to go over to the about so let's put the forms on the about page so you can see right now i don't have any forms i just have a bunch of header and html and then let's go over to the drop demo site let's see drop nullify drop demo sitemaster yep okay let's go over to the forms and see that uh here the documentation um here's some basic info and there's nothing here because there's no forms activated so what i'm going to do is i'm literally going to copy and paste this example down inside of the about us page and i'm going to say this is the contact us page because i just like to name things what they do so i'm going to call this contact.html and now because i have a build step from source to dist i have to say yarn build basically just following my own build command down in here i covered this in the previous video and i can now deploy i like deploying locally and not using the continuous deployment when i'm debugging something like a form so that i can do the builds locally and just be very very sure what i'm building because sometimes your static side generator might strip out some values here we just really want to make sure that we have a netlify tag so if i refresh i should be able to see something different i should see the form name contact because i specified the nullifier tag and i should see that it's got no submissions right now so let's have a look at what it looks like on the current deployed site i'm going to go over to the contact us page and here i'm going to say hello free code cam obviously you want to put validation on this before sending oh well there we go so by default it sends us to this thank you page which it's just a default nullify page and you can customize that later we'll just show you in a separate section but you can see over here if you head to the form section and you hit here that you see the form submission down in here as well let's go ahead and attach file submissions to this form um i'm going to just duplicate this and call this file you must have an input type of file that's the semantic html and then we can just call this whatever you want like fcc file and we'll save that again i'm going to yarn build and push using my alias for nullified deploy so i just changed the form but because it's the same name it's going to still reflect as the same form over here and it's still reflected that but it's got a new field here for fcc file so let's go over here and refresh it form two form at f3codecamp.com let's pick a file let's send a little image send that up there thank you submitted and when we refresh we should be able to see form two and a link for the file that was submitted so this is an image but obviously it could be something else as well now this thank you page is kind of ugly so let's actually change that to reflect something that reflects our the look and feel of our site and we'll head over to the project we'll copy over this contact html and we'll say thank you dot html blah blah blah thank you thank you and take that out all right um also going to want to link to that somewhere or build that somewhere so i will just refer to that in index html and then the other step not to forget is to add an action to the form so i'm going to add an action and i'm going to say just head to the thank you page after you're done submitting okay so i think that's ready i'm gonna yarn build again i'm doing manual deployments because i don't want to wait for continuous deployments i want full control over everything so do not continuous deploy all right so i'm going to refresh and i'm going to say try 3 potato tomato whatever and i'm going to choose the jam reptiles image i'm going to send that in it's going to submit and it's going to redirect and say thank you right or you could redirect to the index page or whatever um so over here i received the submission again okay so that's all well and good and now we have a basic working flow the next thing you're going to want to do is probably to do something else on submissions so right now when you're submitting your forms you don't really know about them they're just there and you have to kind of check for them you can actually opt to get an email when people submit forms to you you can add notification you can add slack integrations and email or outgoing web hook to anything that is listening for a web hook um so that's that's an option as well i should probably put that in there as one of the options but then um what i wanted to make clear is that you can also create functions that do whatever you want um including form validation so everything here is clientside uh but what if you need to do serverside form validation do you need a server obviously the answer is no because we're netlify um and here's how to do it we're gonna declare a function folder down in here i'll just call the functions folder the very imaginative name of functions and we'll put that it will create that functions folder um i actually have a nullified dev uh alias for this or template for this so i'm gonna use nullify functions create and i'm gonna look for the submissions created template so i'm going to let notify dev scaffold that out for me so what this does submission created is it runs when a submission is is being done um and it parses that email and it sends stuff out we're going to dramatically simplify this so that we can actually just try doing something with our event triggered function which because this is what it's called this is a special special name in the docs where it just fires when people submit forms um so we're gonna parse the event body and payload we're gonna console log it out and that's gonna be json and stringify this thing um and then we're just going to return a body uh that reflects some measure of success i am going to just return something like a status code 200 and and actually i'm just gonna say okay all right so very very simple function a few lines of code and we're just logging out what we receive and we'll see what happens there okay so now we can just nullify deploy again notice i don't have to build the front end because all i'm doing is working with the functions so now it's discovered the function and it's deploying the function as well if you want to see the function over here you can actually head to the function section and refresh and you can see that there's a submission created function and there's a log for this function so now we're gonna submit another form try number four same potato potato we're gonna submit it again but now it's gonna fire and and it might take a while but we will actually see the logs here so the idea is that everything that was submitted you can actually access including some nice metadata that you can use um and send it off to whatever other service that you're using so here we've got a subscription newsletter thing but this is literally as flexible as you want you can obviously set up your own slack integration on twilio or whatever you can think of just from the event of someone submitting a form for you and obviously you still have the form data over here so now that anyone can send in a form to your site the immediate question is how do we make sure that they're legit and not spam submissions and that is the question of spam filtering we're going to cover three methods and the first one is the best because it takes no configuration you already have it on by default and that's the akismet filtering and the kismet is what wordpress uses for managing antispam they measure it against other ongoing spam activity and help you actively block them it's hard to test them because it's kind of amorphous but we can actually try with some of these hardcoded names which are guaranteed to be spam and let's just try and submit them and see what happens so we'll submit them over here and when we refresh we don't see them show up in the verified submissions because they're over in the spam submissions and you can review them and either delete them or mark them as verified and once they're verified they'll show up the next method we want to address is the honeypot so the honeypot is a security method where basically tricking bots into filling out fields which humans would not see and you can hide those fields with css so we'll check we'll try this on this honeypot field over here and here's how you kind of do it in the docs but basically if you go over to your contact form and let's put in a harne pot filled i'm just going to copy and paste this field and paste it in there and so this the idea is that this will be hidden and we can add in a style tag for example dot hidden opacity zero and then the last thing to do is to tell nullify that this is a honeypot field so anything with the name bot field is a honeypot field so we'll just tell notify that and okay and so now we are in build again and netlify deploy so the idea is that you have extra spam prevention enabled by honeypot field that's a new indication that it's on and it's kind of hard to demo because it just works but i'm going to try anyway so let's actually just use the form and here you can see the opacity zero field obviously you can move it around with css or shrink it or whatever it doesn't really matter um but here let's just say human at human i'm human and human human.com and send that in and we should see human human.com show up over here it's fantastic and now let's actually say robot and not totally human.com and uh let's actually fill in that field we're not supposed to feel it so the idea is that as a human you never you never see this field so you never fill in but as a robot you're filling in fields indiscriminately so um i'm totally human all right so there's a field here and we're going to send that in and let's see the network tab and we're gonna send that in and and you can see in the post request that we send that in the bot field it's actually filled out so that means that when nullify receives it they know that that field is supposed to be screened out so it just doesn't even show up when you refresh and that's one way of spam prevention via honeypot field it doesn't even show up in the spam submissions just because we know for sure it's spam great so that's the second method and then the third method is recaptchas so adding a recaptcha is pretty much the same as adding a honeypot except that it has a different method of catching spam and this one imposes more work on humans but has a higher chance of success of filtering out spam so the way you do it is over here if you scroll down to the recaptcha section and you literally add a recaptcha field so let's just add it in over here to our code and we'll also tell the form that there is a recapture field so this is the most secure form there has ever been we're going to build and deploy again so when i refresh there's a recapture field obviously it could be styled better but you can kind of fill it in and let's intentionally fail the recaptcha it's just not letting me through [Laughter] so yeah i can't really fake being a robot oh no um so it's that good that even though i'm a human trying to simulate being a robot um i just have to be good enough at computer vision to let it through and now it's through and i can see my my own submission and uh yeah so it is a little bit more annoying but that's recapture for you and you're pretty much guaranteed that it's not a robot and that's also v2 so you should know the difference between recapture v2 and v3 uh v2 is the one with the annoying pickings of stuff there is recatcher of your own settings so you can set up your own recapture secrets over here you're using nullifies and recapture v3 is the new one without a image selection it's invisible and supposed to be low friction and you'd have to set up set that up yourself with javascript um but if you're worried about user friction this is the way to go so we've talked about spam filtering and i just wanted to address one of the important nuances that a lot of developers face with modern javascript frameworks and that's with single page apps and let's just talk a little bit about how we're doing the form processing here so when you deploy you can actually see that here i'm doing manual deploys but it's the same principle i deploy from my cli or from github whatever and once it builds and and pushes all the html out there's this postprocessing step that happens and that's where the forms are detected what netflix is basically doing is saying okay out of all of these generated files let's zoom out a little bit out of all these generated files in the disk folder which of these are html um and it looks like this one is html okay and let's look at all of these fields and look for a form field with the nullify tag right and then i'm just going to scan this in as as a form the problem with this is that sometimes the form doesn't exist as a single page app so sometimes you just have like div id equals app and that's all you ship for create react app so that's a common problem and there are a number of ways to do this so what happens in this scenario where there's no form in the html is that nullify would just tell you that it hasn't detected any forms and therefore it doesn't set up the form for you on the back end um so you need to tell netlify that there is a form and so what the trick is to that is that instead of this div id app you can basically take the app form field name and put it inside of the div id app and then paste it in there and so this way nullify will scan the html and find the find the form name set up the fields and then react will come in and replace everything inside of div id app and you know use its own javascript created elements that look exactly the same as this thing so because this is really important for people to understand we're actually going to go through the actions and actually do this and just to make really really clear how this is done so that when you run into your own single page app scenario i don't care what framework you're using the same principles apply it has to exist in the final html and then you can do whatever you want on the javascript side of things and we'll talk about some ajax form submissions as well so over here remember in our initial video we actually replaced index.html with some javascript index.js over here i'm going to take that out and move it over to the contact form so the contact form is now going to have the javascript and the javascript is going to look for an id of app and say hello from react so let's do that and i'm going to say id actually no let's let's put this put this here div id equals app and we'll do close div here okay so let's start this and let's see how that works so reacts so this will be in the html but reacts will come in and replace everything inside divide the app so let's head to the form and you can see that little flash of the form but as the javascript came in now it became a react app so the whole idea is that i have to replicate what's in here with the uh with the react stuff so once there's one version of this in here in the in the in the html and then the other one inside of the form all the classes have to be class names so there's the form now from react right and if you're a gatsby or other static site generator user you're going to be yelling at me saying you should probably just instead of duplicating between html and javascript right having the same form in both why not just statically generate from javascript i'll tell you what i agree with you so let's install gatsby and see how that works so yarn add gatsby and we're going to just make a very simple gatsby page so add pages and we'll say something like my gatsby dot js gatsby gatsbyform.js why not so we'll render this and we'll export this by default we'll see what happens when we add a new script like gatsby build or build gatsby you can name it whatever you like i'm just relying on convention so now with gatsby installed and i have the gatsby page set up it's going to ignore all this html stuff it's which is fine for me um but i have the gatsby page set up let's see what it built for me so i ran gatsby build and by default gatsby builds to the public folder not the dist folder and you can change that in a gatsby config it's up to you but i wanted to make sure to go through this exercise because it's important to know that yes you save the duplicate action um from just writing in javascript and then letting that generate your html so that nullify can scan the html and and set up your form for you but you do need to know some caveats so um that's why i'm here so in the public folder this is all the generated stuff that you're going to deploy right and inside of gatsby form it's generated in index.html and inside that index.html we see what we expect to see which is a full html thing with all the scripts and stuff and that's great and the form so now if i can read this but it's missing one important thing which is a very important attribute and if you see over here it says hello from react and then but it doesn't have the you know the react code because that will be hydrated later and then it's got this form it's got all the right fields except for one which is going to cause you no amount of annoyance until you figure it out so i'm here to save you that time which is it's got the recapture field it's got the honeypot feel it's got the action field but it doesn't have the nullify field so right over here um and that's because gatsby by default strips unrecognized fields and that's why netlify actually recognizes both the data dash version as well as the nondata dash version and for gatsby and for a lot of webpack and like create react app and other build tools they wanna they wanna strip away stuff that isn't gonna be used as far as they know in production so they strip away the nullify tag um so we need to make sure that that does show up so i'm going to make sure that i'm going to change this to data nullify and make it true so and i'll save this as my gatsby form in my react page and i'll rerun my build and now when you see the generated html just make sure to check that the form does show up with the right tag and uh and then all will be happy all right so we're going to switch from gatsby issues gatsby and other static site generator issues just remember that they might strip out some stuff and we're going to switch back to the regular single page app code because that will pretty much behave exactly the same in gatsby or in a single page app thing like create react app and now let's take a look at this form and the subsequent action of redirecting to a thank you page um this may not be what we want in terms of user experience like let's say we submit this form and it goes in notice that it redirects to a different page here locally it's redirecting to the home page instead of the thank you page because that's all we serve but that's still the point remains that maybe you want to stay on the same page so let's talk about that so if that's what you want then you're going to have to submit it through javascript instead of a default html form submission so we're in our react app and we're going to have to write some submit handlers to handle that submission so uh it will be something like cons handle submit it takes an event and we can call event.prevent default and the form will have a target and the form will be the target of the event and so the the whole idea is you prevent the default submission of the form via regular html and then we handle everything in javascript um and update the state accordingly so for example i can have a message that updates like that and i'll just make this nothing and i'll display a message something like message message if not i'm going to show hello from react and then i'll just paste in some fetch boilerplate so basically we have to replicate all the the functionality that we that we would typically get and as well as grab all the names of every input field and just submit those values for this example that i copied it's assuming controlled values meaning that there is some state that you can just spread into the body but here you can also do uncontrolled react components and i'll assume that you already know how to do those so i'm just going to fill in the rest of it by going form that name dot value um so email the value okay so then we'll have the we'll we'll send the submission to the endpoint and then on success we'll navigate uh if assuming we we have a router library we which we don't in this in this setup but assuming you have a router library we navigate by getting by going to the attribute of the form which is the action and so that's a that's a kind of cheap way to simulate that but here we're assuming that we want to stay on this same page after submission so we don't actually need this navigation and we don't need the action the action field as well so i'm going to remove that just to make clear that you don't need it so i go to down to the forum this is only for the regular html like after submission uh navigation so i'm going to delete that and now i'll say something like set message success and that should refresh accordingly before we forget we should also i should also mention that this encode command is a nice little wrapper around the form data api inside of the browser and you can also use this on the server if you want just look for the relevant npm package and that just encodes things properly so that people know so that notify knows it's a form and then don't forget to wire up the submit handler so that's all you need for uh wiring up the react app and so locally we don't have the form endpoint at the back so um we can't really test it that much apart from just sending it in and then seeing that there's an error because it's a 404 when you post that message but we can actually build build and deploy so when we go to the production site and try this out again hello ajax ajax at potato.com send it in we can actually control the state of the forum and stay on the same page and do everything within react but in the back end we can actually see the form submission come in it says hello ajax so the next section is going to be about password protection and role based access control and and this is this is a very very broad base cdn level protection for your content for your site and so let's look into what that looks like so if you head into settings and you look into access control you can see that this is uh available on paid plans but what i'm going to do is i'm going to transfer this over to a different team so that we can actually see what this paid plan looks like and now when i head to access control i can see this password and i can set a password so a simple password like password oops and that's a that's a nice password over there and what that looks like is simply a password control down in here and so uh especially for internal sites that you're building for your coworkers you can just supply something like this passwrd and have passwordbased access control we actually do this a lot inside of nullify for private sites and for for more finetuned jwt based access control where you can have rolebased access control you can set the jwt secret you can definitely check the docs for more of that information but basically this involves using a thirdparty authentication provider like uh off xero or octa and they can authenticate your jwc secrets and you can say only admins are allowed to view this page and you can set it in the redirects file so you can limit it just to admins and everyone else will get the 404 so that's how you do it with row based access control definitely hit up our support if you need to enable this for your company for everyone else you can actually take advantage of the nullify identity service which you're going to move on to next okay so the difference between access control and identity is that access control is um restricting access from the cdn level and identity is for a typical login logout situation on the client side so let's go and enable identity and that's a pretty simple operation we're going to go over to the identity section and hit enable identity and we're enabled and that's pretty simple and let's now figure out how to uh let's just play around with identity a little bit so the best way to play around with it is to head over to the netflix identity widget docs and actually go to the live demo and let's just get a sense of what this does before actually using it so here's a static page and we've got a single simple button here we click it and that gives us this widget that's a modal and we can fill in some information or we can sign up and log in so let's just go through the sign up flow six one two three six at plus one two three so that's going to send a confirmation message to my email and i'm going to go to my email and so in my email i get this standard thing this can can be customized but we're not going to go over that and i'm just going to click customizer or confirm my email address and i'm logged in and that redirects me back to the original page remember i have this original page so i can shut that instance down and this is the one where i'm already automatically logged in and when i click outside you can see that in the in the root of the page outside of the model i can access that information now you can also see that information on the console i think we log it out um and this is what's available to you inside of javascript in particular together with the jwt token with with all your information and logins that you're going to use but also uh with things that you sign up with like your full name there's also the there's also that's a single button where it's got sign up and login on the same model but some in some designs you may wish to have multiple buttons with a sign up and log in on a different button and that's really just up to you how you want to configure it it's it's pretty configurable as well so here it goes to sign up and here it goes to login and that's uh that's a pretty handy model obviously this is entirely open source so if you need to style it you can actually customize the styles yourself but uh you know you can just fork it as well i'm also going to show you how we can authenticate with one of the social auth providers i'm going to authenticate with google and it's uh it's got my email please don't spam me but then also it's got some extra metadata from google for example my uh avatar so i could i could have uh rendered this and see my see my github avatar okay so that's the demo we're gonna learn how to apply it onto our working uh widget thing and for that you should look at the docs there is the script tag way and then there's the npm way um so we'll we'll check out the script tag way first i'm not super keen on showing everything else because if you're a javascripter you should be able to figure it out but maybe you might be getting stuck on something so that's why i'm here right um so i'm gonna do this on my index.html page all right and i'll drop the script tag up here and then add a div down in here as well let's just do up top okay so let's try this locally um so that is a simple button that says log in with nullify identity then it asks us for the development instance so i'm on localhost it doesn't know what uh nullify instance i have so over here remember when i enabled nullify identity i've uh it's on this particular site so i should just take this instance and drop it in here i think i need the https and then i'll set it so yeah that's uh and now it's telling me it's in local dev and i can do the same signup and login dance as well but i let's say i want to turn off that confirmation email workflow um and that's that's what we're going to cover in terms of the setting so um here i'm allowing sign up but i can oh i can equally say all right i don't want people to sign up i want i don't want any tom dickhary to sign up i just want invite only signups so um now when i refresh this project and i try to log in it only gives me a login option and there's no sign up option so in order for uh to sign people up i have to go into the uh to the invite page to the identity page and invite users and then type in their emails and then they can sign up so that's a that's a much more sort of locked down version of identity obviously i don't use that too often for demos but when you want to let's say invite only after people have paid you that's uh that's the way to do it so i'm going to toggle that back to open then the other the other thing i wanted to talk about also is confirm versus not confirmed so that's all the way down here here's where you can customize the templates for that are that get sent out for email templates but here in particular is where you want to turn off the auto confirm so allow users to sign up without verifying their email address so good and now when i again i refresh this locally and i try and log in i can now sign in 6 6 two three four five at nullify.com whatever let me add a plus to this and then six sign up and it just logs me in directly there's no confirmation step so that's good for sort of less secure identity use cases where you just want to you know get people on board as quickly as possible and then the last thing that you want to know about in the settings is the social providers so external providers there are four that come by default with nutlify they're open issues for more you can contribute that if you want to help out in open source but these are things that we set up for you and you can obviously set up your own with via oauth and functions that's just going to add google by default you can use the nullifies version and that's totally fine or you can use your own app as credentials and that just involves adding a bunch of secrets and stuff and i'm gonna add in github as well these are the two i usually use and obviously feel free to add the other two if you need them but what that translates to is nullify identity is going to read those settings and and then offer those as login solutions so these don't directly redirect back to your localhost so what happens here is when i click this it goes to github and then github tells responds with confirmation and then nutlify redirects the user to the production site and so that might be a little bit tricky to test but just as long as you're aware that it's redirecting you to the production site you should be good to go from there it also takes this access token and if for example the widget was installed on this production site the the widget would also strip this access token from the url and log you in so just so you know you can take that access token and swap it out or take the production url and swap it out for your local host so localhost one two three four for example for here and that will log you in s6 and that and that's that's just the netflix identity widget taking over for local development to do anything interesting with the login information you probably want to use javascript to do that so let's look at how to add the nullified identity widget to our react app so far what i'm going to do is going to import the react script into index.html and then i'm going to get rid of this script just because now we're using the npm imports you can see the docs over here on how we're going to do that so we're not going to use the cdn based import anymore and we can get rid of this button um so now if we reload we should see our react app embedded inside of our page and that's great okay um and now let's uh try and import nutlify identity from nullify identity widget uh we need to do some setup and the docs should give you a clear idea of um what is required you can basically run nullifyidentity.init and that should basically be a good enough setup and then we're going to call the login function so basically i'm going to add a new button button something and then that will be a login button so let's write the click handler handle click equals to know of identity dot uh open and that's the open modal and then we'll register a callback once a login event happens we'll take the user and we'll say some which is say some sort of welcome like console. console.log welcome user okay um and now let's use that button on click equals uh login all right so that should give us a nice little login thing but then also log out a welcome page so let me log out again and i'm going to log in um and it says welcome over here twice because there's two login events that are firing but doesn't matter you can now see the full information inside of javascript and you can render it so for example you can say something like user and and user dot user metadata dot full name says user is not defined oh right um okay so in order to get access to this user outside of the scope of the hand the click handler you do need to say user equals to nullify identity dot current user and that should give you a nice little show up your name when you're logged in and it will show nothing when i log out i may need to trigger refresh there you go anyway so i trust that you're able to build a full react app from there with all the authentication pieces definitely check out the examples inside of nelf identity widget if you need react review examples and essentially that's what i wanted to show you i also wanted to talk a little bit about metadata so you see a little bit here that we're using the metadata but i haven't really explained it and i guess now it's a really good time to explain it so there's two different two types of metadata the ones app metadata and one is um user metadata and that just refers to who can edit that information so user metadata is very powerful i think it's underused and we should all use it more user metadata lets you store essentially preferences for the from the user and the user can edit it and the app metadata the user cannot edit it and it's only available to the app developer to to add things like um roles and provider source of information so like if i logged in through github then this provider would say github so that's that's just to show the type of user and some metadata about the user from the app point of view and then from the user point of view they can set their own information down in there so there's another way to to manually do that which is head over to the identity page and you can also set your own user metadata down here and i can just say like an admin role for example potato you can save that and when i reload i should be seeing oh it's a little login again i should be seeing that my app metadata has new roles for admin and potato and this you can gate your functionality based on this so the other the other thing is you can actually use javascript and throw in more fields on here and so that would involve that's not functionality that nullify identity widget offers you and that leads us to a discussion of go to js and friends so what coach what nullified identity widget is it's actually a high level widget right that comes with its own user interface and it's actually an extraction over a smaller underlying service called go true um and here is the go to uh where is the here is the go through link and this is the underlying platform on which the user identity service is being run so nullified identity is kind of the what the marketing term for the product is but go through is the underlying open source project where you can run your own authentication service so this is written in go not very accessible to javascript people so then we have a library on top of that called go to js and go2js is a very very small library that basically reflects the capabilities of the gothu functionality so it just kind of it just kind of reflects the the apis of of all this and so here is where you want to update for example the user attributes and add any metadata that you may want to you may want to use so go2js is very low level and you may want to write something in between so if you this this comes with no user interface um and has a lot of docs done here um and so choosing between something with the user interface and certain noise interface at a low level um there may be some in between that you may wish for so we also have this something i maintain react neglify identity uh which is the react bindings for go2js and that just provides go2js as a react hook as well as a context that you that you put over your uh your app so you just provide the context uh provide the instance and you can use it as a react hook so that's a very nice way to use um the go2js and then if you want to bring your identity widget with react you can you can then use react network identity widget i know there's so many libraries but these are meant to help rather than hurt i'm just trying to show you how to choose between them so this is the exact same it's a port of null of identity widget but because you don't have to ship your own framework it's a lot lighter so it's only it's only six kilobytes um and it's got all the functionality of reactant left identity you can provide you can use your identity as a hook um and it has a nice user interface that you don't have to code up and obviously you can you can bring your own styling if you want to um this is all optional for gatsby users there's also a plugin for gatsby that just basically helps you figure out the details behind wrapping the identity context provider for gatsby you don't really really need it but it's just a nice to have okay so those are the ecosystem of libraries all around authentication just trying to make your life a little easier but the two main libraries to be aware of are gochujs and nullified identity widget and then the react versions of that if you care to use them they may save you some time they'd certainly save me some time and spend some time talking about the integration between nullified identity and nullify functions and it's very integrated so that's the very very nice piece what we'll do here is we'll look at the functions that we have and we'll create a function that uh will be useful for our demo purposes so i'm using nullify dev and i'm and this is my alias for nullified functions create and we're going to go for the authenticated protected function template and this is just a nice way to so that i don't have to memorize how to do this i can just fire it up and it'll just give me a basic template that does that so you can see here that what is essentially doing is that nullify places the user if they're logged in on the context and and then checks if the context if the user exists if the user does exist then then a response is off true if the user does not exist then the response if a 401 and a console log that's a little bit snarky so the way to run this is to have in local development nullify dev uh again i have an alias and so that runs the functions together with the front end and so now let's test this by using nullify functions invoke so ntl functions invoke that will let us choose the protected function trigger and here we can finally understand what it means to have emulated nullified identity authentication headers so uh by default we're actually passing yes so i'm just going to hit yes and it says data off true which is that's what that's what is reflected over here so you can develop your functions as you go along and this will this will live reload and if you want to see what happens when there's no identity actually to skip all that uh function functionality you can actually just pass in the name of the function so function so no identity and it says data not allowed and also logs out no claims be gone so that's great for developing and once you're once you're happy with your function you can actually integrate that with your front end so here i still have my front end uh continuing uh still my front end going let's actually see how to wire it up with the protective function so over in index.js i have my click handler over here so let's make a little ping so like a new click handler and i'll click click to equals to and that will get the current user as well and here in the user object we have this very interesting thing called the token and we can use this access token to make requests so let's make a little request over here so fetch dots so it's dot netlife functions slash what did i call a protected function and then we have to supply some headers so headers uh authentication bearer user dot token.xs token dot then console log so actually i misspelled that i need to make i need to make this authorization and i need to dot jsonit x.json and then i can console.log it alright let's wire up the button click for this to happen and now instead of regular dev server i have to run the nullified dev dev server so notice that the serverless functions are being served on port 34567 and then the parcel server is being served on port 1 2 3 4 and both of them are being joined on localhost 8888 so that's the one i actually want and if i if i go to one two three four that it's not going to have a working function for me because there's no proxy to redirect the functions so i'm on localhost 888 right now and i have that new button let's call it something better like um off function all right so now when i click it let's see the response that i get back all right so i click the all function it sends off to my back end which is running it which decodes the json web token that i uh attach from my bearer token and and then i can you i can do i can do stuff with that data inside of the server's function and then respond back with whatever i want here i'm responding with off true but you can respond with anything that you want let me log out and let's see the equivalent response for that all right i'm clearing all this as well so now i'm not i'm not logged in and i'm going to try and do off function ah says cannot read property token of none or no that's very true so let me just say something like user and and headers so if i'm not logged in let's see what will happen so it says unauthorized over here so we can have a catch for example and it would say you should log in you should log in in fact you can do something really cool and have a little gate on this piece of information over here so something like x dot data equals not allowed we can just prompt for a login if not we can just console log out the information so now we're not logged in and if i try to do this function which requires a login it's going to ping my back in and be denied and then come back and immediately ask for a login so that's a pretty cool integration of serverless functionality and authentication now that's not the only integration uh there's some other integrations as well if you check over for event triggered functions there's three that we're going to be talking about that are triggered well based on events and we can look for them in the functions docs and if you scroll down to event triggered functions you can see a whole list of them but i just wanted to highlight the identity based ones because those are extremely useful for doing anything when people sign up or log into your site so we're going to try and scaffold out an identity function just to see how that works together with your function and nullify dev and identity workflow so i'm using nullified functions create and we'll pick the identity signup template and create a template like this and it pretty much ships with a lot of decent boilerplate already and one thing you'll notice is that there it's called identity sign up and that's a hardcoded name these are all special names which are recognized by nullify functions and they get triggered when certain events happen so on this one identity sign up well it happens when sign up happens and you can you can decode or destructure from the body and look at the user object and then assign different parameters like metadata on the object so as you're developing your event triggered functions i highly recommend testing it locally first before pushing it to production because you might run into bugs that you didn't catch and it's better to catch bugs faster so that you have a faster development cycle so the best way to do that is in nullify dev so i'm going to start up netlify dev on one side and this will start up the functions server and on the other side we're also going to start up a function invocation so here we're going to parse sample data so we just need to parse in one thing that makes this different from normal nullify functions testing is that it has extra information on the user right like this user.email. whatever so notify dev understands that and has a special hardcoded uh behavior for these uh functions so here we're going to say we're going to try and invoke the netlife identity signup and instead of the usual prompt we're going to get just a sample payload passed into the function it's going to run through that code and it's going to return with for example here we we've passed in a user with trustycompany.com so it's going to pass in this is the return of metadata of rows of editor and with some extra functionality as well assigned dynamically inside of the servers function and you can also test this in production by dropping out of nullify dev and pushing it to production so and uh so here it would be a notified deploy prod um my shortcut for that is end deploy so i will just do that so now when you click on the site and you look at the deploy logs you should see that it's uploading three functions and the third function that is being deployed is the identity signup function that's great so let's have a look at what that looks like so we'll head over to the production site that we just deployed and we'll try to have some sort of person sign in so let's so let's try and sign up as someone from trust this company actually let's just sign up as a total stranger and let's see what happens with that um stranger stranger danger.com stranger we already turned off the confirmation email so i can just put in a nonexistent email it's totally fine and i'm logged in as a stranger uh that's totally fine now and let's have a look at what the metadata comes back as so let's see the metadata over here so we logged it out and here we have strange danger.com and we have been assigned the roles of visitor and that's in alignment with what happened with our identity signup function which validated the user email and said oh this doesn't come from my company it comes from stranger danger.com so i'm going to give this a role of visitor so that's something that only the app can do and the user cannot do but the user can supply extra metadata around that to store some preferences or something and that's these are all things that they can adjust and you can access on the user metadata object um so that's good let's sign out and let's sign in as someone from the company so employee e8675309 and so employee at trust this company.com so i'm just following here so this will pass the validation and we expect it to get an editor access so employee whatever so i signed up i can close this and now when you look at the sign in information i have i'm employee justice company.com and that's accordingly i've been given better permissions as a editor rather than a visitor and again i can do some dynamic data as well and check my information as a user so those are event trigger functions you can use identity sign up to assign roles just like we showed you can use that to to set up a new field in a database you can use identity validate to reject people from even signing up because of some other blacklist or some other rules that you may have and there's identity login for doing things when people log in one important caveat that i want to share with people is that identity signup only fires for email and password sign ups right now and doesn't i fire for external providers so you'd have to make a separate trigger for that using nullify functions but it's relatively straightforward to set up we have an open issue for this on gotru and you're welcome to contribute if you can but that says that's what stands right now as to the limitations of the event trigger functions on lfi okay so we already talked a little bit about metadata management and and uh how that works together with functions so before we finish this section once you may wish to also retrieve the form data after sending it in so there's a couple ways to do that one of the clearest examples is this demo done by phil hawksworth called jam stack comments so the this is a demo for jab stack comments with nullified forms and functions and you can leave comments here it would get posted to a review queue and these are all then pulled from the forms submission data back into the site and generated from there so if you're keen on that definitely have a look at the source code it's going to be somewhere inside this gulp file and you can just see that you put together some of these environment variables which are also documented inside of this project hit the right api endpoint and then you can do whatever you want with it so that's the that's the rough idea behind retrieving the form submission programmatically obviously you can download it via csv or other manual processes if you want and for further documentation you should definitely have a look at the open api of nutlify and that's down here and then you can scroll down to the form section where you can find every single endpoint and what they offer so these are these are very very good sources of finding out and building out your feature that you desire and we'll have a piece at the end of this series about the nullify api and how you can build your own notifications with this whole thing okay so on to the last piece of this video which is the paid features just to briefly mention that they exist and what you can do with them so the first is branded oauth so branded oauth is relevant to this part of the identity settings where you can see site visitors can see your own app and doesn't it doesn't have to mention netlify remember when we signed up with github and google to as external providers we use the netlife identity app but we can actually use our own app and do our own automation and settings with that there's also sso features this is alongside the role based access control on the business plan and you can also upgrade it individually on the identity plan for just nullified identity by itself the same goes for audit logs for checking for understanding who's signing who's signing in and out of your site so for example when i go over to the site that we've been working with i have all these people logging in and out i can just head to the identity audit log and see all the sign in and out actions over here to see if there's something fishy going on and lastly we're going to customize the custom sender as well so a custom outgoing email address so it doesn't come from nullify.com when people want the email confirmation so that's probably not everything but those are the main features i figured i should highlight that if you need to for a production application you can definitely pay for it but everything else that we presented is completely free so that's pretty nice and that's nullify identity the best way for me to explain nullify cms is to show it to you in action nullify cms is an open source project that is worked on by employees on netlify but is completely separate as far as technology is concerned from netlify except for one connection point which is the git gateway you can use nail of sms without nutlify and there's some documentation on that we're just going to show why you might pick it over some of the other headless cms options and the key is to understand that it's a git based cms so there's no extra server to pay for or maintain it's all within your get together with your source code there's an explanatory video here with more details but we're going to be going over much of that in our course today and so let's actually see this in action nullify uses nullified cms of course especially for the blog for example so here these are blog posts that are drafted and published and previewed and edited all in nullify cms and that's uh that's a very wonderful thing so let's take a look at how this works internally in the url there's a special endpoint that we've set up called slash admin endpoint and that gets us to the netlify cms admin panel and nullify cms with the gateway uses netflix identity to log in will explain all this integration but fortunately you already know what nullified identity is and this is a very familiar widget to you by now i'm going to sign in with my employee email and my password and that's and now we can see the admin back end of nullify so we have a few collections named here and uh some of some blog posts and also you're able to see them sort of spread out or or in layers we haven't really set it up we just put titles on just because that's all we need um you can also see workflow and media and we'll talk about those two in turn but let's go ahead and start a new blog and i'm just going to cancel and so you can see here two things there are there's a lefthand side with a bunch of form fields and on the righthand side of preview and so this is very cool it's it's actually a full react app that looks exactly like a blog so let's have a sample post test post please ignore lorem ipsum i have my author picture preregistered so it my author picture signs up shows up as well and note if i change the date it shows up on both sides you can select a pregenerated topic you can add uh terms i can type in some text but then i can also write in markdown which is very nice for code i can even configure custom fields like for example this tweet field which will show what the tweet looks like described in some metadata there's a special field in this editor interface where you can actually add images as well which is not usual for for markdown editors but you can do that right here and you can choose a new paid new image to upload for example i can upload a recent image of mine and i can select it to be included and that will show up in my preview which is very nice me and i can collapse this and keep editing my content down below so all this is very nice and uh this is especially if you're working with a nontechnical audience but then also just for yourself if you write a lot and you just want a nicer editing experience you can notice the scroll sync as i go up and down which is very very cool and so yeah once i'm happy i can save and when netflipify cms that does a couple things that actually kicks off a pr that sends to the github repo of nullify.com and then it immediately has the status over here to check for a preview so right now this is in a draft mode because i just saved i haven't published and i can set the draft status to in review or ready as well and that will talk about the editor workflow but first let's talk about this check for preview tag so what this does in the back end let's have a look at the source code for the dub dub dub so you can see that nullified bot has already created a netify cms page it's it's adding that file that i did in markdown the image that i had already was uploaded and you can see the deploy preview down here working on the build so this is why there's a check for preview button because you can click this if you want and continually check for preview uh there's no preview yet so this is still showing check for preview but this is for basically there's basically eliminating any differences between the wysiwyg preview and the final article and we'll talk a little bit about how we can set up the correspondence between the in panel sort of live preview as well as the deploy preview which is almost basically the real thing like you know that based on continuous deployment once you merge this pr in it will look exactly like it does in the preview once that deploy is live you can actually see that status update in the pr and obviously collaborate with your coworkers inside a pr but also inside the cms you can actually hit check for preview again and it will turn into a view preview button and when you view the preview this will be a deploy preview with your posts exactly as it will be inside of your actual content and you can see the entire site index together with that which is very nice so let's talk a little bit about editor workflow i'm going to head back and check out the workflow section so the post that i've made is now in the draft section together with some of the content that i have i can delete i can publish i can drag it through if for example i have a reviewer that i'm working with or i'm just sort of working this in progress whereas this is just more of an icebox and once it's ready to publish i can just take this over to the ready section and either automatically publish it or manually hit the publish button whenever i'm ready to launch my new blog post over in the media section we can check on the the images that i have uploaded nothing much else here but now let's talk a little bit about how it's configured how come we can up upload both images as well as markdown and that's actually all in the configuration that's contained within the repo itself so here i'm in the back end of the blog page and nullify cms has a special config file called config.yaml and here you basically spec out all the details that notify cms needs to know about your site so we'll talk about collections later but this is that's basically the schema of all the content that you enter in um but basically you i you specify your backend your site url your publish mode which we opted into editorial workflow for a more finegrained process as well as a specifying a media folder which is where we we want the github bot to store our uploaded images and the public folder which is where we're going to serve our images from so a lot of times this is a nested folder so we just want to tell another cms where to actually expect it so that's the difference between the media and the public folder let's talk a little bit about what this this word backend means it's a that's a verboten word in nullify but really we're just using one of many configurations for uh integration with git providers so obviously the the one that we lead with is git gateway which integrates with nullify identity we'll talk about this uh and and this is and this has to be measured in contrast with the others which is integrations of github gitlab and bitbucket so let's have a look at these back let's have a look at these backends the what's common among github gitlab and bitbucket is that all your cms users need to be directly need to have commit access through the authentication services of each of these services so gitlab you need to log in with your gitlab account bitbucket same thing and github the same thing and then they can commit obviously you may not want to give everyone commit rights to your code you may just want them to be able to send in content and let the bot take care of it and that's what git gateway does for you together with nullify identity and that's the type integration there fortunately you know everything about nullified identity already so what i'm going to show you is just the documentation for git gateway which is over here and it explains how you can set it up if you don't want to use netlify because this is an open source project and you can see all the source code over here in the git gateway repo so to be clear you don't need nullify identity to work to use nullify cms it's just a nice to have because you want your your publishers and your authors and your editors to be able to review content without being able to commit to code and in all these other options you have to give them commit rights because that's how it would work okay so that's it for our intro to nullify cms but we're gonna get our hands dirty a little bit and actually set a new thing up from a template so that's the best way to to start with it and i don't know if i've been clear enough at the beginning but melody cms does not depend on react it uses react for the editor but it's amazingly tech agnostic like it it works with hugo it was jekyll middlemen gatsby and that's pretty pretty freaking amazing given that it's also showing you a live preview but it is true that the largest number of users come from the gatsby and react ecosystem so we're going to have a look at how to set that up so one thing we're going to start from is a template and that's the template that's maintained by the the no 5cms team i do want to pay some special attention to the url of this template of this deploy to nullify button so if you watch my earlier videos you should be aware of what the deploy to nullify button does but basically helps you set up a fork here we are actually doing something new which is appending this at stack equal cms flag and that just basically helps to set up a git gateway plus nullify identity setup just from a single deploy to nullify button click which is the standard one that you see with any nullify open source site okay so let's deploy from a template so i'm going to click here and it's going to set up that oneclick deploy that we all know and love so i signed in and now it's creating a repo name i'm just going to leave it unchanged actually i already have the same name here so i'm just going to add a two to it but notice that uh it's actually showing that it's going to set up get gateway and identity as well just because we added that little tag at the end of at stack equals cms if you didn't have this you could set it up yourself just by clicking a few buttons but this just makes it a oneclick deploy type of situation so that's always very handy to have especially when getting started with something okay so we have a new site and just for good measure we can see that identity is already set up for me as well as in the settings i can see that git gateway is already set up as well and that will be in settings identity all the way down here with the gateway services and you can set this up yourself if you if you chose so choose let's actually take a quick look at what this one clean deploy gets us so let's head over here so we get a nice landing page and we've so with some content down here that hopefully we can customize so some stories from a blog and you can read more on the slash blog and obviously here we see that lazy loading fanciness from gatsby but otherwise it's a pretty straightforward blog that you can see there's also a products page that you can edit and a contact page with nullify forms and other form examples down below let's take a look at what that looks like from the source code perspective so when i clicked that deploy to nullify button i also cloned that source code and again in the nullify cms world you should always start with the config.yml file so let's have a look at the static folder admin route config.yamo it's pretty much always in something a route like that where the final route will be fubar.net admin right and then it will just look for a config.ymo up in there we got the backend config file and again just to just to note that all this is actually in the docs we're not really covering anything you know new here i'm just explaining it as i go along in words that i could understand so here we're setting the back end with the gateway there's other backend options that we already talked about and then we have a media and public folder again already explained that this is where you want to store it inside of git and this is where it's going to live in the public url and now we come to these concepts of collections and so we want to talk about collections uh folder collections versus file collections folder is actually the easier one and folder you can think about as just templates for your blog right so when i edit my my blog i want to be able to specify a date have that be broken out to your month day and slug and the slug will be created for me the template key can be given to me as well and i can have some other fields like description featured posts and you can notice that i'm using all these widgets which are text boolean image markdown this date time and these are all default widgets that come with nullify cms so let's have a look at the widgets and these are all the common widgets you can see the options available to you and some notes on how they behave and let's have a look at them in action because i feel like we're still too abstract in terms of what we're doing over here so let's fire up the page and let's go to admin now i haven't set this up for invites so here it's only login so i need to let it be able to sign up obviously you want to be very careful with this because once people sign up they can also contribute content and you don't want just anyone to sign up so let's change our registration preferences to open and i'll just go ahead and add like a github external provider as well and as you know uh the nether identity widget will pick that up so now i can sign up and or i can just also continue with github and i'm just gonna make a new blog post and just walk through that process again but this time we're going to have the schema open in front of us and compare them from side by side so here we'll see that we have a title the template key is hidden and this is this determines the layout in gatsby's perspective um we'll look at the title and we'll try and say lauren if some will have a publish date with the date time widget there used to be a date widget but now that's deprecated so you always use the date time widget that doesn't seem to display in our template over here and we can go fix that if we want to the description i can just say fubar baz whatever featured posts yeah make a feature post why not i'll check an image i can reuse the selected image or i'll just make my own because why not okay chuck that in there upload ah choose selected and i'll type in some text i'll just grab some of this stuff click it in there maybe i'll make this a markdown thing okay cool that looks like some content and tech javascript whatever publish it notice that i don't have editorial workflow set up so i'm when i publish it immediately creates that pr it's currently rebuilding so give me a sec let's head to the deploys so you saw me cancel that deploy over there because i just am i'm just importing i'm just uploading the image i actually need to build the blog one thing that we can look at while this is building is also look at the pr that's happening in our project so over here there's no pr because we haven't set up editorial workflow but the code has actually committed it directly for me including that date time that i talked about as well as the description featured posts all those fields that we specified in our config okay so the new site is live and we'll go over and refresh and we should be able to see the new blog post and there's no date in the preview and that's as planned so the other type of collection so that's the folder collection that we talked about over here and that's basically uh sending out all these templates to go into each of these blog post folders that have been declared and that's that's a pretty clear uh intuitive way to use a cms the other way to use this nullified cms is is as a file collection and here we call our file collection pages and we've got a bunch of different pages we've got the landing page we've got the about page for the products page and the idea here is that these there will not be repeated copies of these these are just individual files and we're using the cms as a way to edit the content of these files dynamically and nullify cms will be smart enough to handle that so let's have a look at how that works on the inside again we're going to go into the content manager and so the blog as we maintained over here has the is the folder collection and the file collection is all these pages which which we named over here we head to the pages and we can edit any one of these things so i'll just edit the landing page the landing page has these widgets set up on the left and this preview on the right which as you already saw is pretty much the exact same as what is in production so we can just say notify cms is really great uh cms saying without a cms server and we can blah blah blah look at all of this awesomeness of widgets and editing and and wizzy weakness this is really really hard to do i honestly don't know how they do this but i'm glad that they do so let's save this again it's directly hitting to publish we can obviously set up the editorial workflow by configuring that inside of the field over here just add a editorial workflow field and now when i look at the commits again i should be able to see the latest commit that we're updating the pages of the title and subheading and that does again hooks right back into nullify and kicks off a new build okay so that's about it the last piece that we didn't cover is the filter field that's going to be very handy for basically filtering out by language so for example i want to edit in english or spanish and have different layouts and widgets for those things those are very very helpful as well and probably the most common question for most blogging situations is needing to schedule posts because there's no running server you need a way to make blog posts go live at a point in time so the natural solution is to set your blog post date at some point in in the future and then when and then you and then you set up your builds to run every day every minute every hour or whatever it is and once that time has passed for the blog post to be published then that build will pick it up so essentially all you need to do is set up a cron job and zapier is a really good way to do it so the zapier integration with nullify lets you just use this app and you can start a deploy of nullify sites on a daily schedule which is pretty cool there are other methods to do it this article from flaviocopes essentially tells you about the zapier integration with a little bit more documentation and screenshots which i highly recommend and those and for those who want to try out something more serverless without the zap without paying for zapier you can try to set up your own with serverless framework and literally setting a scheduling a publish is as simple as leaving a comment inside of github so that's a those are very interesting ways to schedule posts but essentially if you were paying attention during the netflix build section where we talked about build hooks then you can essentially fire off from any old device you can have a raspberry pi that sends a ping to your build server all of that good stuff the last section of what we're going to cover today is has to do with media so so far we've been uploading media directly to our git folder that obviously has scalability issues for large images and large numbers of images and so uh you may want to explore one of the media partners that we have so um the probably the best known as cloudnary cloudnary essentially lets you sign up for free and then they'll manage your images for you uh all you need to do is uh add a media library key to your uh config.yml and and and give them your cloudnary cloud name as well as your api key and that's about it nullify will upload there instead of your github similar principle for upload care upload care is another service that just focuses on asset storing and not just images but just everything in general in a similar place similar thing you just sign up for them and then give your public key and lastly we'll talk about netify large media which actually is a git lfs implementation so you don't store your images inside of git you actually store it uh somewhere else in a network large media server and then nullify will proxy and give you the right sizes of your images audio video for you without building a repository so we'll actually talk about that in the next section on nullified addons for everything else but apart from that you should be all set to go to do to set up your site with nullify cms okay now we're on to the netlify addons section this is going to be a relatively quick section because a lot of these are just show and tell demos and also it's a very growing field it's probably the absolute newest out of all of these uh different sections that we've covered so far and let's just get right into it so the first one is netify analytics this was just launched in june of 2019 and it's uh serverside analytics and you can check out the product page over here and get a gist of what it's talking about but the main idea is that because of service side it's unblockable because we're literally you have to serve the files for people to access your site and if they access your site and if we serve the file to them then they're definitely a visitor and that's important because a lot of us use ad blockers like privacy badger and ublock origin to block our ads so here's a way to get past that and get real numbers but then also avoid tracking personal information because nullified analytics simply doesn't accept personal information so you can't track it so the best way to get started is just to go to any site that you have and just head to the analytics section on the top and you can read through this and and click to enable analytics for nine dollars a month you can fill that out but i already have that filled in my other site so i'm going to go to there it is per site as for right now obviously work with the sales people if you need better pricing than that and you can also read the documentation for uh for more information about what each of these numbers mean that's going to be extremely important so here's my own personal site i can see total page views for the past 30 days unique visitors and total bandwidth views unique visitors is an important question and welcome to that so these are daily numbers and these are monthly numbers daily numbers are i had to spike on september 14 when a big blog post go on unique unique visitors how do we tell unique visitors if we don't track them and this is straight up just unique ips and there's some pros and cons to that with regards to double counting for example if you're on a mobile phone versus on your desktop and you're on different networks you'll have different ips and you be counted twice but then also you'll be under counting people who share ips so for example in a coworking space or a library or a airport or something so it is by ips as long as you're comfortable with that and you can see the spikes here and there you should be relatively comfortable with what the what the traffic numbers say about what's going on with your site additionally uh something else that you you can't see here is is that when you actually turn it on nullify is able to backfill in time for the past 30 days because and that's just because notify already has the server logs it just hasn't set up the scripting for your site to spit out the analytics for you so that has extra running costs and that's what you're paying for to backfill you don't you don't have to enable it and then track the limitation of course is that right now it only offers you 30 days but that is definitely something that the team is keen on working on for offering you more than 30 days and rolling windows of stuff so you might notice that unique visitors on a daily basis and the unique on a monthly basis kind of doesn't add up if you try to add every single day up and that's intentional because these are unique about over a month whereas these are unique within a day so that's all explained in the documentation and you can definitely look at the specific definitions of what each of these numbers mean and there you go that's uh that's what they offer they offer you they can tell you uh what the top pages are a lot of them will be sort of service workers type stuff but then also you can also look at things that are missing so for example if i forgot a mobile icon that's a very good sign that i should probably put it there because people are checking stuff out on mobile uh they're checking out for my rss that that's or they're trying to hack me i can also see what's going on over there um there a lot of some pages will get a lot of uh bot sniffing for the wp admin uh login page and that's just something that we you know being jam stack just guards against for you and that's very nice you may also feel you may also want to filter out some of these commonly requested things which are not uh which are not relevant to your site and that those are function that's functionality that is being worked on by the team as well as you may want to offer clientside navigation uh because this these are only server side these this is where people land but then subsequent navigations for people using frontend frameworks aren't being tracked and again that's another common feature request that hasn't been implemented yet still this is a new feature and it's it's done very very well so the team is very keen on working on it okay so now we're going to move on to the next addon which is has a little bit more of a learning curve than clicking a button which is a large media and to explain large media i should have to explain what git lfs is git lfs is a way to store large files together with versioning in git so everything that we love about git except that with git one of the problems is when you store large files in it then everyone has to download it and it persists forever in history and that's not very good especially if you don't use it or access it very much like you just want to access it for content so that's why you use git lfs and that's a that's a spec that you can just clone install and use without nutlify what nullified does for you is provide a place to store it so that's where if a large media comes in you can see the product page over here and learn a little bit about how to deal with the problem nullify also notified large media also comes within the concepts of image transformations and we'll talk a little bit about what that means but let's uh actually check out how to how to implement it the best way to learn where to implement it is on the docs the large media page has some information about it here as well as some prerequisites and it really is dependent on your cli so we've already introduced the cli in various sections of previous videos but this one is is important it's a plugin that you just install with the cli so now every time you add a large media file you just have to say get lfs track and then the path to that media file and you can use wall cards as well for entire folders and nullify will just upload that to theirs to nullify servers when you commit so your workflow is exactly like push and pull with and all that and let's have a look at what that looks like on our demo so demo over here has a bunch of images with high definition and you can see the github repo over here and we can see how this is all set up with git lfs in the master branch this is the one without get lfs so if you go into the static folders and look for the images and look at each of these images they're just going to be the large images that that we see over here and here's some apples and that's not very efficient obviously that's not very scalable this is fine for these small examples but it's going to be out of control pretty soon especially with images of a few megabytes or even gigabytes and you can think about videos and audio assets as well over here so what happens with this folder in git lfs is when i switch over and i head to images and i look at one of these i don't see i see that the file size is 286 kilobytes but i see that it's been replaced by just a pointer and now the pointer is just pointing to the git lfs server which in this case is nullify large media you can see the corresponding files tracked on the large media section of your site so head over to the large media section and then you can see the all the files that are being tracked as well as filter out for one of them if you have a lot of files and that's very very handy and then the other capability of nullify large media and this is a special case for images is that you can resize them so there's no point serving high resolution images every time or manually resizing them by yourself you could just use an api for that and so nullify provides that api and it's called image transformation let's have a look at what that looks like over here so i'm going to apply the parameters to this and it's reduced it to a width of 100 and a height of 100 but this is a rectangular image so it's just going to fit to that i can also use the smart crop parameter and that's actually going to be 100 by 100 and it uses the smart crop parameter we can also make this let's say 500 on the width and that just gives you exactly what you want so that's a very great way to just send over the wire exactly the subset of of the image that you need and you can change the parameters whether you need to preserve the aspect ratio or you need to just fit exact dimensions if you need to you can see more details about image transformation over on the documentation page especially on how to supply the query parameters to get the examples that you need but it's going to be pretty straightforward once you understand what it does so that's nullified large media a relatively straightforward large file hosting and image transformation product all right that is that for image transformation enlarged media and now we're on to even more exciting ground which is the addon marketplace and this is a relatively new part of nullify as well which is working with thirdparty addon providers and it's not something we really shout about because uh there's just not a lot of them and it's quite a new initiative but it's definitely a growing area of focus for netlify and if you're interested in working on an addon for your company together with netlify definitely get in touch but we're just going to focus on two existing addons that you can use today the first is going to be fauna db a lot of people when they move up in terms of use cases from marketing pages to submitting forms to authentication and cms and then they at some point they become an app and need some sort of persistence from a database and you can use firebase and other databases like mongodb atlas through nullify functions and nullify dev and all that good stuff but it's easier to onboard with an addon that manages a lot of the backend syncing of environment variables and setting up of instances and all that um so it's all integrated in your netify dev workflow so here we'll talk a little bit about fortnite fauna db so the fauna db i think the best place to find out about it actually is not on netlify the best place to find out about it is on a podcast um one of my favorites is software engineering daily and evan weaver the ceo of fauna talked about why he started fauna and basically he was one of the early early early database engineers at twitter and they faced scalability problems because they were using nosql databases well they they had to migrate to nosql because they face scalability problems and so that's what fauna is a globally distributed asset compliant database and it has a lot of really nice features including their own query language which is very powerful for some use cases like field level authorization and graphql first support so the best way to start thinking about how to use fauna together with netlify functions is to look at some of the announcement posts the fauna atom was definitely in the prototyping phase for a few months and so in july there was this example from david wells talking a little bit about how to set it up from a create react app point review and setting up a full serverless databasey full stack fontadb enabled nullify function and that's the demo that you can view on the nullify repo because it's the one done by nullify people and you can definitely think about the structure that you might want for a backend for your credeps and more recently in september of 2019 we actually announced the full general availability of the addon together with an authentication claims process so and so so now it's fully supported so now it's fully officially supported by nullify and fauna and the way that you add it you can definitely create it through the netlify cli and these are the commands addons create fauna and then you can claim that instance with addons off and the fonda team themselves have also worked on a demo for you that can show off what you can do with it and the idea of this demo is to show you how to integrate netlify identity nullify and fauna all in one full stack app and obviously it's a to do app because that's the hello world of everything and we can log in for example with our netlify identity process that we know and love and once we're logged in you can see that we are able to create lists to do mvc and i can access that list and add a list and do everything that you normally do with crud and you can still go back out this list would be guaranteed not to be accessible to other users because of how fauna does field level authentication so definitely check out how fauna works you can also look at their docs for for the fauna addon specifically or just getting started with fauna in general and and it's a very powerful database for with great developer experience for serverless jab stack users the next addon we're going to look into is the very good security or vgs addon and vgs is a company it's not just something that you should have ggs is a company that solves a very real problem of a very different nature which is collecting your users data in a pci and hipaa compliant way so there's some more information on the docs but i'm just going to go through a rough intro of what you should know in case you might need this and so the idea is that when you're using something like netlify forms you might become you might be collecting some information so let's look at this demo on the vgs github page and it's also linked in the show notes and over here we can see that we're taking a form we've got some name information all this stuff and we don't want this to be submitted to us via nullify functions or nullify forms we just want to send it on to do for example a processing check like a background api check and maybe take payment through stripe or something so what vgs does is an intermediary that steps in and wipes and replaces all of these all these fields with unique ids those functions can then remotely check vgs for those date that those values none of it hits nutlify or nullifies logging so here we've processed a striped transaction even though we haven't saved the user's data from credit card or other information so that's the rough idea of why you might need it definitely go check out their introductory video just to explain a little bit more about what vgs does they are very good at what they do and they have more docs for you on the announcement blog post as well as on the vgs doc site itself so definitely go check that out okay and just to wrap up the video we are going to talk a little bit about the premium addons and these are things that you might want to look into if your company relies on netlify especially for enterprises and large teams and you might need some of these premium support and performance addons and so the best way to find out information for that is to go to the pricing page and just to get an idea of like the security features the performance features uh the different cdns uh the free tier has a cdn that everyone uses and then the enterprise tier has bet dedicated cvns with more points of presence and better performance as well as uptime slas and you can also specifically add support addons so there's dedicated response times and chat and support channels as well as high performance application delivery network features that you might need for your high performance needs so all of this is available on the pricing page and you can contact sales for more information about that i personally don't know too much but it's good enough to know that it exists if your app or site needs it and that's it we're gonna we've wrapped up our tour of nullify addons to be clear everything else that we've discussed so far are also addons it's just that there's more to do with each of them so i broke them out into different videos but edge build and dev are core parts of the platform and then each of these are addons most of them with free tiers that you can use and add functionality to your app but none of them are strictly required to use nullify and you can definitely bring other features as well a lot of them are good partners with nullify and sponsors of gemstack events one benefit of being jam stack is that you're basically the first consumer of your own set of apis and once you have one consumer you can pretty easily spread to more so if you have a web app you can spread to mobile app to desktop app to cli and so on and so on and so on and nullifies no exception nullify itself is jam stack and netlify.com is hosted on nullify.com so in this section we're going to be taking a look at how to make your own netlify client and the best way to learn that is to look at the documentation and also to look at other clients that have already been implemented and then you can implement a nullified client for whatever purposes that you need if something that we do is not working for you you can make your own so the first place to see this in action is app.netify.com this is always sort of the first class consumer of nullifies apis and one way to tell is to go to the page and hit the network tab and just check out all the api responses that have been called you can filter for xhr over here and you can see that we're hitting for example like a site's endpoint with some parameters and then that gets back the responses that are then displayed here as well as notifications then when you enter a site you get some notifications it deploys as well so you get deploys this is the options ping let's look at the get result and yeah you can see all the deploy preview stuff that's happening over here and so on and so forth there's a lot that's happening and they're all done through an api and therefore pretty transparent to anyone who wants to use them for other purposes you should note that there are authentication head tokens that you that you might want to afford and this would be located in your nullify identity jwts now that you know that the api exists probably the best way to learn more about it is to check out the documentation these are this is available on the official docs itself and you can check out links for go and javascript api clients and it's got some information about rate limiting pagination and in particular if you want to write your own deploy methods you should read some of these information to help you figure out how to deploy large zip files and folders of files form submissions that you programmatically retrieve form information so you can retrieve that within a function for example and then reference it in your page itself so it's not a writeonly form and there are other ways to trigger web hooks and and retrieve files themselves without actually serving the actually serving that url the official api itself follows the open api spec and therefore has a programmatically generated documentation page as a standalone and you can actually access this information in a structured manner together with some sample response shapes so you can actually code faster for whatever use cases that you're thinking of another good client to look at is the cli for nutlify or netlifedev so this is the cli that you've been using it's completely open source which also means that you can also check out how to do certain things within the cli and use them in your own nutify client the netlife cli is built on top of the oakcliff framework from salesforce and heroku therefore there's a bunch of commands they're all located between here and each of these are the commands that you run including certain flags for example netify functions create that would invoke some flags over here but you can also look at for example the source code for nullify deploy and that's just a single file and you can see how the cli uses the this.nullify and distal authenticate instances to do things like getting sites and deploying and and deploying the sites and displaying the status of them so all this wiring up between the cli and the netlify api happens off screen and it may be a little hard to find so i'm just going to do you the favor of pointing you directly at the inletnify cli utils so this is a separate package because it's used in multiple places in the cli utils that basically links up the js client which is the javascript layer over the go client for netlify and it wraps it inside of a oakcliff base command and all of this is probably foreign to you right now but it will be helpful if you need to dive into the code but basically we export a base command here and we add on all the methods like the authentication method that you saw us use earlier we attached the nullify instance by initial by initializing and then attaching it onto that commands instance so this library is useful for reusing the same login credentials on the machine for multiple clients so if you're logged in on the cli and it sells desktop and so on and you're not asked to log in multiple times but if you want to go down to the lowest level of javascript dependency definitely check out the js client library and this is the lowest level library that lets you do everything imperatively but doesn't take care of access token usage for you some nice community clients that you can definitely check out as well there's the menu bar app from stefan judis this is the one i personally use so if you click over here you can actually see the reported incidents that have been happening recently you can check out the different sites that you're managing and be notified of the deploys you can toggle to different deploys or trigger a new deploy you can set different settings for the for the app and all in all a very nice utility to have to give you notifications of when apps are deploying and updating so that's a brief tour of the nullify api you're definitely welcome to use it and get in touch with us if you need some help on something that doesn't make sense and we are interested in working with people to build more stuff like all of this is open source for a reason and we're happy to work with people to do more things with netlify for example a lot of people install the netflix cli as part of their continuous deployment process like they have their own continuous deployment tool chain and pipeline and then they use network cli to just deploy the final build assets but they don't really need it if they understood the lower level tools or they could just build their own tools to do other things that they wish they could do so nullify api is the ultimate lowlevel flexible interface if the interfaces that we have is preventing you from building and doing the stuff that you want to do we made it we're here this is the final part of the netlify series where we just link you to more stuff that you can learn the first part i should probably tell you about is how to figure out if something with is wrong with netlify itself that is the netify status there is a notify status.com page that is updated whenever there is a confirmed or reported incident and you can check out the incident history if you think you've been affected in one of your sites as well subscribe to updates there's also a twitter account that you can follow to get more updates or just check if you're in twitter and you can get a link to what's going on over there if you're not checking the status of nullify you might probably trying to debug something that's in your build unfortunately a lot of build issues are user issues so there's not a lot that we can do but we can at least document some of the common gotchas so this is actually in our docs that we document them so this is actually in our docs and these are common issues that people face so we hope that some of this might help in terms of something that you're facing in particular my top tip is to make sure that you can run your build locally and it outputs what you expect before you deploy it and introduce continuous deployment to your build process for even more selfservice help you can head to the nullify community site where there are people helping each other on nutlife issues as well as related static site generator issues and for the faqs you can check out the common issue tag that has been created by the support team and these are typical typical issues that they've run into supporting hundreds of thousands of developers over the past five years if you're on a paid tier you can have nullify support and depending on the tier you can have support via email or slack or carrier pigeon it really depends on your pricing plan with nullify and lastly if you need to check something with netlify you can also check them on twitter including hiring for including getting a job with nullify support now i don't know about you but i actually learned a lot from watching talks so these are some talks i picked out to recommend to people for learning what nullified does and is and jam stack is about uh matt billman gave this awesome talk at smashing san francisco in 2016 basically giving the founding thesis of nullify and it's it's all about what jabsec does and why there is a resurgence in static site generators chris coyer talked recently about how the front end developers are now full stack developers because of everything that they've been enabled to do with the jam stack sarah drazner talked about how the jam stack is a new way of joining together api's javascript and markup just like the iphone it's not inventing anything new but it's putting putting them together in a useful new way and you can do it you can even do things like ecommerce with the jam stack and it's actually better because it's faster phil hawksworth gives a really good talk on the agency perspective because of his many years of experience in agency life and how it can lead to faster delivery times from a waterfall cycle to a more continuous approach the citrix team gave an incredible talk recently about migrating to jam stack and netlify with their docs team and how their business processes and cost savings were very very significant here for a large enterprise use case quincy larson and free code camp aren't an enterprise but they do have massive scale on on the order of millions of users um and the and quincy also talked about how he serves millions of users using the jam stack because his number one priority is cost and scale and that's a that's a perfect fit for something like a jam stack and lastly jamon ferguson of paypal moved paypal.me to jamstack and recently gave a talk about it and so this is an enterprise level talk does not use netlify but still talks about the benefits and some problems with moving to the jazz stack that he solved so these are all very good perspectives of real life use cases i also learned a lot from how venture capitalists think about think about things so the four places that i recommend people go to are the andreessen horowitz and kleiner perkins investment thesis and netlify as well as kleiner perkins investment thesis redpoint and crv are also interested in investing in the jamstack ecosystem so if you're interested in starting a jam stack startup you can check out their roadmaps and ecosystems and think about what parts of the ecosystem are lacking crv also has another jaztac ecosystem chart and i strongly recommend checking that out as well and thinking about where you fit and what you want to use and what you want to outsource so that's the broad landscape of jamstack there are a couple more resources that i want to point you to to learn more first is jams.conf.com this is the premier jamstack conference organized by netify but definitely not exclusive to netlify there's jamstack.org with even more resources about definitions marketing material best practices examples resources and stuff there's there's a jam stack slack that you can join at jamstack.slack.com there is a older broader community called the new dynamic and this is also a very active slack channel heavy bit one of the investors in jamstack also puts out a jam stack radio podcast with a bunch of interviews that are really great just in just covering the jam stack ecosystem as well as developer experience and finally nullify recently published a book with o'reilly on the modern web development with the jam stack and this is a free book you just have to give your email and it is a pretty good read on why the jam stack what is the jam stack and what and what you can do with it so that's the summary of everything that i know about nullify hopefully this whole video series has been helpful and it's definitely the first iteration so i'm keen on getting more feedback about it and thank you for your time
