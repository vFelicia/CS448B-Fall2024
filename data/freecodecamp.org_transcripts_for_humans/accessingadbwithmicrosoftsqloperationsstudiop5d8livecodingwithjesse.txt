With timestamps:

00:05 - hey everybody welcome to live coding
00:07 - with jesse i'm jesse today we're going
00:10 - to work with a tool that i've never
00:12 - worked with before
00:13 - and we're going to do some database
00:15 - stuff which is
00:16 - not really common for us on this stream
00:19 - usually we handle front end work
00:21 - but
00:24 - microsoft has come out with
00:26 - and i don't know when this came out but
00:27 - i just found out about it yesterday
00:30 - sql
00:31 - operation studio
00:34 - and when when we see it in a minute
00:37 - you'll see it looks a lot like visual
00:39 - studio
00:40 - code
00:41 - it's an electron app
00:43 - which is cool to look at another
00:44 - electron app since
00:46 - we started building one yesterday
00:49 - um but i finally got access to a
00:51 - database so if you've been watching for
00:53 - a while you know i've been talking about
00:54 - this for
00:56 - at least a few weeks now probably longer
01:00 - and
01:01 - so i had uh some
01:04 - some of the people over in it
01:07 - made a copy of the database that the
01:09 - main site for for this university runs
01:12 - on so uh franciscan.edu
01:15 - which runs on a really old
01:18 - uh content management system that
01:20 - we want to migrate away from
01:23 - but we want to try to get the data out
01:25 - of that database and put it in another
01:28 - database in a format that will be better
01:30 - for whatever cms we decide to use most
01:33 - likely wordpress but i'm still open to
01:36 - other options
01:39 - so
01:43 - i'll give you we're going to look at the
01:44 - database in just a minute
01:46 - but so far i think it's good but i'd
01:49 - like you all to you know check it out as
01:51 - well and then we're going to decide
01:53 - what the best way to transfer this this
01:55 - is and then maybe we'll you know we'll
01:57 - try to do some some tests to see
02:00 - you know what would work
02:03 - i also have a lot of updates that need
02:06 - to be done for
02:08 - our project one our catechetical
02:10 - institute site and i'll talk about that
02:12 - at the end of the stream when we do the
02:14 - question and i answered portion
02:16 - so i had a meeting yesterday afternoon
02:18 - about that which is why i didn't stream
02:22 - and
02:23 - i'll probably be making all of those
02:25 - into issues on the github repo
02:28 - but i'd like to kind of talk through
02:29 - them first uh in today's stream at the
02:32 - end
02:34 - all right so let's let me switch my view
02:37 - here
02:39 - all right
02:41 - so
02:43 - this is uh this is it this is the
02:46 - i keep forgetting the name of it
02:48 - it's microsoft's
02:51 - sql studio
02:53 - no sql operation studio
02:56 - yeah
02:57 - yeah that's it
02:59 - um yep
03:00 - all right so
03:03 - basically
03:05 - let's see
03:07 - is that big enough let me know if it's
03:08 - not big enough i can make it bigger
03:11 - so
03:13 - i don't know
03:14 - how many of you work with databases but
03:16 - this this query
03:19 - gets everything from
03:21 - from content right so we have a table
03:23 - called content we actually have quite a
03:26 - few tables here
03:27 - um
03:28 - content will be the most important
03:30 - that's where we'll get getting
03:32 - majority of all the data so you see
03:34 - right now every piece of content has an
03:36 - id but what i'm really worried about
03:38 - here is the content title
03:40 - and then the content html
03:44 - so
03:46 - this is good news that
03:48 - i think
03:50 - pretty much all the content on the site
03:55 - has this this title and content html we
03:58 - can grab that
03:59 - that's that's all we need really
04:02 - we don't really need to keep the ids the
04:05 - only other piece of data that's going to
04:07 - be useful is
04:12 - content there's a content type
04:18 - which i can't find now but somewhere in
04:20 - here it's a content type
04:23 - now it's just they're just numbers so
04:25 - content type one two three four
04:28 - so i need to figure out what those
04:30 - numbers correspond to but this should
04:32 - help us because the different content
04:34 - types will probably end up being
04:37 - different custom post types
04:39 - in our new cms
04:43 - so we need to make sure we bring them in
04:45 - uh
04:46 - as that so we're not just going to bring
04:48 - all this in and have it be one giant
04:50 - table like it is now
04:52 - but it depends it really depends on the
04:54 - format that we need for
04:56 - our new cms
04:58 - but this is good news so far
05:01 - let me pull this up and we can see more
05:03 - of it at a time
05:04 - and i'll bring that down
05:07 - so
05:09 - there's a couple things
05:11 - that i think we we really need to get
05:14 - out of the way
05:15 - just right off the bat number one
05:18 - we got to change this color theme right
05:20 - we can't have this this bright white
05:23 - stuff
05:25 - so
05:27 - let's check let's try uh
05:29 - what do we see
05:30 - this one looks good
05:32 - monica
05:34 - or we could do default dark
05:39 - that looks nice we'll go with default
05:41 - dark now
05:42 - i'm not sure if we can get a package for
05:44 - this
05:46 - and bring in a new
05:49 - theme
05:52 - oh actually it's it's letting us bring
05:54 - in the um seti
05:56 - icon thing very cool
06:00 - all right so now that we have
06:03 - the background color
06:05 - set
06:06 - now we can really get started
06:13 - so
06:16 - all right so i guess first off what i
06:18 - want to do is open it up to anybody out
06:20 - there that
06:22 - has experience with databases
06:25 - if you have any ideas to throw out let
06:28 - me know i'm going to throw out a few my
06:29 - ideas to what i think the best course of
06:32 - action will be
06:33 - and let's try to decide on one and maybe
06:36 - try something out
06:37 - in today's stream
06:39 - so i don't really have that much of a
06:42 - goal other than just testing some things
06:44 - out
06:45 - i've never done this before so i don't
06:46 - really know what to expect in terms of
06:48 - difficulty and time
06:52 - so if you have an idea go ahead and
06:54 - throw it in the live chat i'll check
06:55 - back in there in a minute or so
06:57 - uh otherwise let me share with you uh
07:00 - some of my thoughts
07:03 - so
07:07 - let's see i'm thinking
07:11 - what we potentially could do
07:13 - is just export a lot of this data how
07:15 - you know whatever format
07:17 - that we would like
07:20 - and then
07:22 - pull that data in
07:23 - basically to wherever uh so one of the
07:25 - difficulties here i guess i should
07:27 - mention this
07:28 - i can only log in to this
07:32 - uh database
07:34 - from this computer
07:36 - um on on this network so i believe
07:40 - that i i'm granted access
07:44 - uh based on my ip address i'll have to
07:47 - verify that with the people over in it
07:50 - but when i was trying to log on
07:51 - yesterday and then earlier today
07:54 - someone from it had to come over and it
07:56 - was a lot of troubleshooting to try to
07:58 - get
08:00 - give me access to this
08:02 - so
08:03 - i have to be on a certain network here
08:05 - on campus
08:07 - so that's going to limit us right so we
08:09 - couldn't just
08:11 - um you know pull data
08:14 - you know somewhere else right uh
08:16 - it has to be here on this computer so
08:19 - that may or may not be an issue
08:23 - but
08:24 - what um
08:26 - what i'm thinking and maybe there is
08:28 - already like a sequel way of doing this
08:31 - i assume there might be
08:33 - but
08:34 - in terms of what i'm familiar with
08:38 - we could potentially pull this data out
08:41 - and then get rid of all the
08:44 - um
08:45 - all the data that we don't need
08:48 - so that's going to include
08:50 - a lot of these
08:52 - a lot of these columns that we just
08:54 - won't need at all
08:56 - um but then also some of this data we
08:58 - don't need to transfer over so
09:02 - some of this stuff isn't even live on
09:03 - the site anymore
09:05 - it's obviously still here but it's
09:07 - marked
09:08 - i believe one of these columns
09:11 - will say whether or not something is is
09:13 - actually live
09:15 - so we need to get rid of all those as
09:17 - well
09:18 - and at that point once we get it
09:20 - narrowed down
09:21 - to what we want
09:24 - then then we could
09:25 - see about transferring that
09:28 - so here's my basic
09:30 - probably don't have to look anything up
09:32 - way of doing this let me know if it's
09:33 - ridiculous
09:39 - so
09:40 - we
09:44 - we could potentially and i think this
09:46 - sounds kind of silly but
09:49 - i i'm pretty sure it'll work we could
09:51 - potentially just export this
09:53 - in excel
09:54 - or as a csv
09:57 - or json right but if we did that we
10:00 - could just go in
10:01 - delete rows
10:03 - and we'd have all that data there in a
10:05 - format that wouldn't be too difficult to
10:08 - pull out and put pretty much anywhere we
10:10 - wanted
10:11 - okay so
10:12 - that's my option i guess the benefit of
10:14 - that would be
10:15 - we
10:16 - we could very easily get a good idea of
10:18 - just how much of this we actually need
10:24 - we could do some filtering
10:27 - which could be useful
10:29 - just to see
10:30 - now
10:31 - umberto in the live chat has some ideas
10:34 - as well so umberto
10:36 - says
10:38 - if we use um
10:40 - sql server management studio
10:43 - um
10:44 - we can generate the sql scripts for
10:47 - create table and search statements
10:49 - logins users etc
10:52 - it says let's see that might cause
10:54 - issues
10:55 - uh with the column with the html
10:59 - um
11:00 - let's see
11:07 - i'm wondering
11:11 - all right so i'm going to ask you all if
11:13 - somebody has um okay so the exporting to
11:16 - a csv or excel um
11:18 - umberto is saying it might
11:20 - um
11:21 - it might cause some issues all right
11:23 - good to know so let's
11:25 - go on to plan b right um
11:28 - nicholas asks what happened to electron
11:30 - i'm really excited for project six um
11:32 - nicholas we'll be going back to project
11:34 - six we're gonna kind of be jumping
11:36 - around a bit um so
11:39 - i'll
11:40 - project six will receive updates
11:42 - periodically and we'll keep checking in
11:44 - on it and we will do some streams that
11:46 - will be dedicated entirely to it
11:49 - uh but i don't really have
11:51 - a timeline for though that needs to be
11:53 - done so
11:55 - uh i guess
11:56 - you know you can always check in and
11:59 - you know when you get the notification
12:01 - if you're subscribed to the channel you
12:02 - get the notification of the title
12:05 - check if it's project six if you're
12:06 - really only interested in that then you
12:08 - know check that out otherwise
12:10 - um
12:12 - you know then you could skip the other
12:14 - stuff i guess
12:16 - uh let's see
12:17 - okay so here's my my other idea
12:23 - we could
12:25 - let's see how do we do this
12:27 - so for this database
12:29 - it's a copy
12:30 - but i only have read access
12:33 - i can't change anything within this
12:34 - database
12:36 - um but what we could do
12:39 - i suppose is create another database
12:43 - and we could even use
12:45 - uh this tool
12:47 - uh it's a
12:49 - sql
12:50 - operation studio we could even use this
12:53 - tool to start to create some you know
12:55 - some tables and things
12:59 - and
13:00 - pull some of this stuff over
13:02 - what i'm not sure about is you know
13:04 - could we
13:06 - pull things directly from here and then
13:08 - insert them in another table you know
13:11 - all within
13:13 - uh
13:15 - sql operation studio
13:17 - so as i mentioned earlier right
13:19 - just started using this
13:22 - uh this morning i downloaded it
13:24 - yesterday couldn't connect to the
13:26 - database and so i didn't really get a
13:28 - chance to use it till this morning
13:31 - so that's something that i'm not sure if
13:32 - that would work but if it did work that
13:34 - would be great
13:39 - i guess that's worth a shot because the
13:41 - next step would be
13:47 - i'd i don't even know the next step i
13:49 - guess would be
13:51 - let's just try to pull this data out put
13:54 - it somewhere else where we have read and
13:56 - write access maybe
13:58 - we can manipulate it
14:01 - i guess if we even just pulled it out
14:03 - somewhere uh that would be more
14:05 - accessible
14:06 - so i didn't have to be here on my
14:08 - machine
14:09 - that might be useful
14:13 - we could try to create some sort of
14:16 - api
14:17 - to get info if we wanted to because to
14:19 - be honest with you i'm not really that
14:20 - familiar with the sql queries
14:23 - but if we could make
14:25 - a really basic api to do things then we
14:28 - could
14:30 - use javascript to do a lot
14:32 - so anyway
14:34 - let's just
14:35 - let's just mess around a little bit and
14:37 - try some things
14:40 - so
14:42 - let's disconnect
14:46 - i'm going to create
14:51 - i know that there's a way
14:54 - to create a database
15:02 - actually you know what
15:04 - are we still
15:08 - that may not work i'm not exactly sure
15:10 - um if i'm still connected to this server
15:13 - i guess suppose i have to do everything
15:15 - on this server
15:20 - hmm
15:24 - okay
15:25 - well let's pull i i just want to go
15:28 - through this and see
15:29 - what we're dealing with in terms of
15:33 - how ridiculously long this would be
15:52 - okay so obviously this is super long
15:57 - wow
16:15 - there's definitely going to be some
16:17 - editing that needs to take place here
16:20 - as i'm looking at some of this html
16:24 - there's a lot of extra stuff in here
16:28 - that
16:30 - we're not going to use
16:33 - that's unfortunate
16:38 - but at least we can get
16:40 - some of the data
16:52 - okay
17:00 - hey john uh john hanson just came into
17:02 - live chat how's it going
17:05 - all right so let's
17:24 - you know what
17:25 - let's let's go back here and let's run a
17:27 - different query
17:30 - because i definitely don't want to
17:32 - bother bringing in anything that's not
17:34 - currently live on the site so let's
17:36 - check out our
17:38 - our headings here
17:47 - this is content status
17:56 - i'm not sure what these stand for on the
17:59 - database
18:12 - okay so we do have publish which i'm
18:14 - assuming
18:15 - xero is not published and one is
18:17 - published
18:18 - so
18:22 - we can rule out anything i guess that's
18:24 - not published
18:43 - oh okay cool
18:44 - um so
18:46 - pat my uncle pat is in the live chat and
18:48 - he said active is in active and inactive
18:51 - is for the status so awesome that makes
18:53 - a lot of sense thank you
18:55 - um okay cool so the
18:57 - i'm then assuming we don't need to
18:59 - bother with the inactive
19:02 - let's see
19:09 - yeah i'm not even sure why these are in
19:11 - here
19:12 - these sound like uh blog posts
19:15 - we don't even host the blogs here any uh
19:18 - in the system
19:20 - hmm
19:29 - and a lot of these wow
19:31 - let's check out the dates on some of
19:32 - these
19:33 - and we were talking events from 2015
19:37 - yeah
19:39 - we definitely don't need a lot of this
19:41 - stuff
19:45 - all right here's what i'm going to do
19:46 - too
19:47 - right now this will help us out not
19:48 - right now but later on
19:52 - this would be fun
19:53 - uh
19:56 - let me save this
19:59 - i'm gonna save this as an excel file
20:02 - it's gonna be insane and huge
20:06 - but i'm not gonna open it
20:08 - i'm gonna send it to my boss
20:13 - so
20:15 - because my boss is in charge of all this
20:18 - content and he's been here since before
20:21 - this site was even developed at all so
20:23 - he's overseeing everything that's gone
20:25 - into here so he'll be able to tell
20:28 - much more quickly than i can
20:30 - um
20:32 - what
20:32 - what content in here is
20:35 - should be kept and what should not be
20:37 - kept
20:39 - so
20:40 - i will
20:44 - i'll i'll you know i'm not going to send
20:45 - that to him right now because that's not
20:47 - really going to be fun on the stream
20:49 - uh but then
20:51 - that way he can take a look at some of
20:52 - it maybe even tell me
20:55 - you know hopefully there's some
20:56 - identifier in here
20:58 - that would help us out
21:00 - at the very least i suppose
21:03 - he may be able to say you know any
21:06 - you know any content types that are
21:08 - content type three before that were put
21:11 - in there before a certain date we can
21:12 - get rid of that would be helpful
21:22 - uh john hanson says who would
21:24 - and how would that html be uh imputed
21:28 - slash
21:29 - and we're from wordpress
21:32 - um
21:35 - we're going to
21:39 - probably wordpress
21:41 - um but yeah so this data will be put in
21:43 - to a different database and then
21:46 - yeah the content
21:49 - uh
21:50 - would then be
21:52 - could be editable uh through that cms
21:55 - but we're still gonna use the api to
21:57 - bring it in and
21:58 - pull them into our react
22:02 - site
22:05 - yeah so the excel trying to open this in
22:07 - excel has not crashed my computer yet
22:09 - but it is taking forever uh it it's
22:12 - letting me do other stuff while i'm
22:13 - waiting on that so
22:17 - i'll just wait on that
22:19 - uh
22:20 - over here on the side i won't bother
22:22 - with it anymore i'll look at it after
22:24 - the stream
22:27 - all right so umberto is saying we could
22:29 - try to create database database name
22:34 - let's see
22:44 - create
22:49 - create database
22:51 - and
22:54 - i don't know let's just call this
23:10 - no
23:11 - all right what's going on connection
23:22 - all right so it's asking me to put in
23:26 - a different address
23:28 - so i just want to go into here let's see
23:30 - what happens
23:32 - no
23:34 - is the password not in dude i didn't hit
23:36 - remember password
23:38 - um what was the password
23:49 - i think that was it let me remember this
23:51 - time so i don't have to remember it
23:53 - again
23:54 - no
24:19 - hmm
24:21 - all right
24:23 - let's cancel that
24:27 - so that's not it's not working right now
24:30 - so
24:34 - for some reason i
24:36 - still have this in here which i'm not
24:38 - going to mess with this now i'll be
24:40 - assuming that you know maybe i'm i'm not
24:42 - connected really but it's just still
24:44 - showing me this because i i did the
24:46 - query when i was still connected
24:49 - so
24:50 - i am getting
24:52 - the login that i used for this was
24:55 - not the login that i will get
24:58 - hopefully soon so if i can't remember
25:01 - this password i'm not worried about it
25:02 - because i should be getting a new one
25:04 - soon
25:05 - uh
25:12 - i mean i guess i could
25:16 - just open up the help page
25:29 - oops
25:31 - no results found for create database
25:36 - let me start a documentation
25:52 - um all right so we have uh umberto asks
25:55 - if we'll be sticking with microsoft sql
25:57 - server for your database no i will not
25:59 - be sticking with that from my database
26:02 - um so i guess we it doesn't really
26:04 - matter we shouldn't create it through
26:05 - here anyway
26:06 - um also says you might not have grant
26:09 - permission for create database yeah i
26:11 - don't think i can i can change or do
26:13 - anything
26:14 - uh i think i can just read data
26:22 - okay so embarrassing the other option i
26:24 - use in dev is local db but i'm on
26:26 - windows i don't know if that works for
26:28 - mac doubt it does okay
26:30 - let's um
26:41 - all right so let's let's think about
26:43 - this then um
26:46 - for sure if we're going to go with
26:47 - wordpress uh mysql
26:50 - will be the database that we go with
26:53 - if we go with a different system i have
26:55 - no idea what we'll be using
26:59 - so should we just
27:04 - try to do something then with my sequel
27:09 - that might be the best bet right now
27:14 - i guess that's kind of the only
27:20 - the only thing that we would kind of
27:21 - know about
27:22 - for sure that we want to use
27:35 - all right so let's see if we can just
27:36 - get a local
27:38 - mysql database going
27:54 - so
28:08 - hmm
28:11 - all right it looks like
28:13 - can you not do this on a mac
28:15 - has anybody installed uh my sequel on a
28:18 - mac
28:20 - because there are no instructions for it
28:21 - that i'm seeing on on the
28:24 - left the oracle website
28:35 - i guess we could just create a droplet
28:36 - on digitalocean
28:59 - all right let's see if we can just
29:00 - create
29:20 - hmm
29:28 - yes we could um
29:31 - we could just create really quickly um a
29:34 - wordpress
29:36 - installation
29:40 - i mean maybe
29:46 - maybe that would just kind of really
29:48 - easily uh show us
29:51 - what
29:52 - like what would happen
29:54 - if we imported things in a certain way
30:10 - let's see
30:47 - all right let's let's do that
30:50 - so
30:52 - let me show
30:55 - let me show you all this so this is
30:57 - assuming that we're going to go with
30:58 - wordpress
31:00 - this is the structure that we need
31:02 - so if
31:03 - we install wordpress first
31:06 - and we'll just do we're not going to go
31:08 - through the whole installation process
31:09 - like we've done before we'll just do the
31:11 - digitalocean one click
31:13 - uh install
31:15 - and we'll just spin up the droplet just
31:17 - to test we'll do a really basic droplet
31:20 - and then
31:21 - um we'll just get rid of it when we
31:23 - don't need it anymore uh but the only
31:26 - thing that we really need to
31:31 - worry about changing right now is this
31:34 - wp posts
31:49 - so actually
31:52 - a lot of these fields match up pretty
31:54 - well with what we already have
32:03 - okay
32:12 - all right i think that'll work
32:34 - all right
32:45 - uh i'll bring this over so we can see
32:48 - um
32:50 - so it's just digitalocean i'm just going
32:52 - to go with this
32:53 - wordpress one click install
32:55 - we can do a five dollar droplet if if
32:57 - you do the install um you know if you
33:00 - start out just with like a linux distro
33:03 - uh
33:04 - and do it install wordpress on your own
33:06 - you can actually get away with running
33:08 - it on the five dollar an hour droplet
33:10 - uh which is nice and it it actually
33:12 - works it it'll run everything
33:15 - uh i have wordpress sites i'm just using
33:18 - the headless uh wordpress installs on
33:21 - five dollar droplets that have been
33:22 - running for months and months and have
33:25 - been doing fine
33:26 - uh but for for now just for speed we'll
33:29 - we'll be all right with the 10.
33:32 - uh
33:33 - i don't think we really don't need
33:35 - anything
33:36 - special uh just for testing
33:41 - so
33:43 - yeah i don't
33:45 - let's monitor at least
33:48 - um
33:57 - and
34:00 - droplet
34:09 - okay through pdb tests all right
34:12 - that works
34:14 - right
34:16 - yeah that looks good all right let's
34:18 - create that
34:22 - oh cool so michael is is here and
34:25 - michael knows sql or sql actually let me
34:28 - know in the live chat what do you prefer
34:30 - to say or what do you think is the
34:32 - correct way to say it sql or sql
34:36 - um
34:38 - i
34:39 - i think sql is easier to say
34:42 - and so i go with that
34:44 - but i do hear a lot of people saying sql
34:50 - alright so this is almost done
34:53 - great
34:55 - so we should be able
34:58 - i think we should be able to go here
35:01 - oh
35:02 - this ip probably won't do anything
35:14 - i wonder if you can do
35:19 - okay so i have to ssh in
35:22 - enable my wordpress installation okay
35:25 - um not a problem
35:28 - let's copy that and
35:31 - we've got the terminal open already
35:34 - let me make this bigger so you all can
35:36 - see
35:39 - and uh i know i have completely
35:41 - forgotten about the pomodoro timer for
35:44 - this one
35:45 - but
35:46 - there's not a whole lot going on in the
35:47 - live chat so i'm just gonna
35:49 - not do that for now if i notice a lot of
35:51 - activity then maybe we'll go back to it
35:53 - but i've been able to keep up with with
35:55 - the chat
35:56 - as we're going so if i can keep doing
35:58 - that we should be all right
36:03 - okay got some some votes here for uh for
36:06 - sql all right cool
36:08 - uh
36:10 - also um
36:14 - kundan nanji uh sorry if i mispronounced
36:17 - that uh says what happened to setting up
36:19 - an electron project we're gonna go back
36:21 - with to the electron project
36:23 - uh so
36:25 - we're going to kind of bounce around
36:26 - between projects but we will go back to
36:28 - the electron project at some point uh
36:31 - the repo on github is there
36:33 - so feel free to check out what we have
36:35 - so far it's it's set up pretty nicely so
36:38 - it can certainly be uh forked at this
36:41 - point cloned you could you know work on
36:43 - it for your own projects or contribute
36:45 - uh if you'd like
36:47 - but we'll get back to it
37:00 - all right john hanson's asking about why
37:03 - uh the microsoft sequel over my sequel
37:05 - and isn't my sequel easy yeah we're um
37:10 - so what we're going to do is take that
37:12 - data out of that uh sql server database
37:16 - and we're going to put it in
37:18 - to the my sequel
37:20 - that's running with our wordpress
37:23 - install
37:25 - so we are moving away from that
37:28 - uh from that microsoft uh server
37:34 - okay
37:36 - i think
37:42 - this should get us in
37:46 - yep all right cool we are in
37:49 - and wordpress has been enabled wonderful
38:04 - all right so hopefully i can get into
38:07 - this wordpress install
38:10 - just with an ip address
38:13 - if not it wouldn't be a problem to make
38:15 - a sub domain you know quickly
38:24 - okay so it looks like i can use the ip
38:28 - so let's try that out
38:35 - okay cool
38:44 - username
38:54 - sorry i can't show you the password
38:58 - uh let's go
39:02 - um
39:04 - let me move this over
39:05 - and then do the password
39:07 - so i'll change what was there
39:10 - and
39:12 - copy
39:13 - phil
39:14 - wonderful
39:30 - i have to put in
39:32 - i think sometimes for my work email
39:35 - uh these
39:37 - these emails from
39:41 - wordpress get blocked
39:43 - um
39:46 - so i'm putting in my my personal email
39:48 - for that
39:54 - okay
39:58 - let's log in
40:01 - lennon says can you give me hints on
40:03 - this question uh yeah sure what is your
40:06 - question
40:13 - all right awesome so we have a wordpress
40:16 - install
40:18 - we may as well just update this now
40:20 - before we do anything
40:23 - i'd hate to actually do something and
40:24 - then update and have it mess up what
40:26 - we've done
40:28 - so if you've never used wordpress before
40:30 - this is what the admin panel looks like
40:32 - wordpress updates are super fast and
40:34 - easy you see that it's already done
40:37 - i couldn't even say
40:39 - what a wordpress update was in before it
40:42 - finished so you hit the update
40:45 - normally it's a good idea to back up a
40:46 - site first but since we have nothing in
40:48 - the site we didn't need to
40:50 - and now it tells us all about you know
40:52 - what happened
40:54 - uh when we update it we can also go down
40:56 - here check out our plugins this can be
40:58 - updated now
40:59 - uh we're not even using it
41:01 - right now but just to show you how easy
41:03 - it is to update that
41:05 - literally a few seconds so
41:09 - what we'll do now
41:10 - is
41:13 - we'll go to
41:17 - i guess we'll go in
41:24 - through here
41:26 - uh
41:27 - how we're gonna get in
41:29 - oh sorry
41:31 - uh
41:32 - so here's my idea wordpress already
41:35 - comes with its wordpress api
41:38 - should we
41:39 - or could we use the api to put the data
41:42 - into the database
41:44 - instead of directly manipulating the
41:46 - database
41:48 - let me know what you all think so if we
41:50 - were to directly manipulate the database
41:52 - i would need to
41:55 - i guess be able to open up some type of
41:57 - tool
41:58 - to where i could read that database uh
42:01 - because doing it all from the terminal
42:04 - i think would be somewhat more difficult
42:10 - but at least if we use the api it should
42:12 - put the data in
42:14 - uh properly
42:18 - so i guess
42:22 - i guess i could try it
42:24 - um
42:27 - yeah let's try it
42:39 - the problem with the wordpress api is
42:42 - you really have to make sure you get a
42:44 - new
42:45 - tutorial
42:48 - or even make sure you're on the right
42:50 - set of documentation because it's
42:52 - changed so much since it
42:54 - you know they first were working on it
42:57 - uh
42:58 - there we go this one looks pretty
43:01 - new
43:01 - so hopefully this will work let me bring
43:03 - this over on the other screen so you all
43:04 - can see what i'm doing
43:07 - um
43:09 - let's see
43:18 - uh nick asks why
43:20 - am i not using sql server management
43:23 - um
43:25 - probably because i'm not exactly sure
43:26 - what that is
43:27 - uh so if i should be using it
43:30 - um
43:31 - let me know uh
43:33 - you know send me a link or point me in
43:34 - the right direction i'll check it out
43:37 - uh i'm not i guess i didn't say this yet
43:39 - i'm
43:41 - really really inexperienced when it
43:42 - comes to database stuff
43:44 - so
43:46 - that's why i'm kind of relying on on
43:48 - help from you all so i know there's some
43:50 - of you that have a lot more experience
43:52 - with databases so um
43:55 - if you came here to learn a lot from me
43:58 - you will be disappointed
44:00 - but the other people that are watching
44:02 - the stream and and talking in the live
44:03 - chat
44:04 - will probably be able to teach
44:06 - me and everyone else
44:08 - a lot
44:09 - so i'm going to do my best to take their
44:12 - advice and read that out and then try to
44:15 - act on that
44:17 - and i'm going to keep an eye on the
44:19 - clock
44:19 - just to make sure all right so we
44:21 - haven't even been going for an hour yet
44:23 - so this is not too bad
44:25 - uh let's see
44:27 - i want to
44:30 - api reference
44:33 - let's go to our posts
44:40 - all right
44:54 - i don't want to list pose create a post
44:56 - here's what we want
44:58 - okay
45:02 - just gonna create a post do we need
45:09 - um i suppose we need all of these
45:12 - uh i guess they don't need to be
45:18 - no there's no way we need all of it
45:19 - because some of these can certainly be
45:21 - blank and they'll still be opposed so
45:24 - let's um
45:32 - all right so we need to send a post
45:34 - request to this endpoint
45:37 - with this data
45:41 - all right not too bad
45:48 - all right so here's what i'm thinking
45:51 - uh let me let me check in the live chat
45:54 - for a second here to see if someone else
45:56 - has a better idea before i share what
45:58 - i'm about to do uh
46:01 - oh lennon has a question about
46:02 - specifying how fonts should degrade um
46:05 - you should be able to just put font
46:06 - family and then whatever font you want
46:09 - to
46:09 - display first will be first and then put
46:12 - a comma and then put in the next font
46:14 - and a comma in the next font
46:16 - um so you it could be something like um
46:19 - the first font would be uh roboto uh you
46:22 - would
46:23 - you need to put that
46:25 - i don't you wouldn't need to put roboto
46:27 - in quotes uh it's just one word
46:30 - uh so it'd be font family colon space
46:33 - roboto
46:34 - assuming you've already brought in that
46:36 - font uh and then
46:38 - comma
46:39 - space sans serif comma space um
46:45 - i don't know whatever i see you probably
46:47 - sans serif would be your second one if
46:49 - you wanted something else to fall back
46:51 - on in between there you certainly could
46:52 - put that in there
46:55 - but that's generally how you do it and
46:56 - that's with css
46:58 - uh so if
47:00 - you know you put that on you know
47:02 - whatever
47:03 - you know selector that that you want for
47:05 - those fonts to degrade so anyway lennon
47:07 - let me know if you need more info or
47:09 - something like that i can certainly uh
47:10 - address it again later on in the stream
47:12 - or you know send me a message on twitter
47:15 - uh
47:16 - you know show me a little bit of what
47:17 - you have that you're working with and
47:19 - maybe i can help you you know more
47:21 - specifically
47:30 - uh let's see
47:40 - so take a look on uh
47:42 - julian says take a look on docker and
47:44 - docker compose save you ten dollars on
47:47 - droplet and run everything locally
47:50 - you know what docker is a good idea i
47:52 - probably
47:54 - maybe we
47:55 - at some point should end up doing things
47:57 - with docker i'm just going to keep going
47:58 - with what i'm doing right now just to to
48:00 - save time but i think that is actually a
48:03 - great idea uh to use docker for
48:05 - something like this
48:09 - uh if you don't know what docker is uh
48:10 - it's a way to to set up um
48:15 - i guess you'd maybe call it something
48:17 - like a virtual server that can run on
48:20 - your machine it can be copied and so
48:22 - basically you have this um
48:24 - identical
48:26 - environment
48:27 - anywhere you put that that docker
48:29 - container
48:30 - so on the server on your local machine
48:33 - on someone else's local machine no
48:35 - matter what whether you're running uh
48:37 - linux mac
48:39 - windows no matter what type of server uh
48:42 - you would have an identical environment
48:44 - within that container
48:46 - so it's really cool
48:50 - but
48:51 - i don't i really don't want to try to
48:53 - set it up here um
48:55 - during the stream at least not during
48:57 - this stream maybe in the future one
49:00 - okay uh john boyce says i'll be
49:02 - interested in seeing how to use an api
49:04 - to import data into a new database okay
49:06 - so that's basically my idea now
49:08 - um
49:14 - so we did we x we did export the data
49:18 - so let's do this so we exported that
49:20 - data
49:22 - where's it at oh over here
49:26 - and let's go over
49:29 - yeah so we've exported all our data
49:32 - into this gigantic json file so
49:35 - what i was thinking was
49:38 - let's do
49:41 - [Music]
49:47 - um
49:51 - so i lost my train of thought i was
49:53 - reading something in the live chat
49:55 - apologies
49:56 - um
49:58 - vazquin says hello from spain hey how's
50:00 - it going thanks for joining us uh john
50:03 - hanson says in order to have consistent
50:04 - html content do you have to keep the
50:07 - styles simplified would it not be best
50:10 - to build a template in wordpress that
50:11 - all users need to use
50:13 - to submit with
50:15 - um
50:18 - yeah it'll be
50:20 - well i mean we'll
50:21 - you'll see when we get to that part
50:23 - it'll be similar to the way we've done
50:24 - things with pulling data from the
50:26 - wordpress api and that will give users
50:29 - um
50:30 - fields certain fields to fill out with
50:32 - um
50:34 - like validation on those fields so they
50:36 - will only be able to put in
50:38 - certain things that we want them to put
50:40 - in and they'll probably it'll most
50:42 - likely be some sort of approval process
50:44 - as well
50:45 - so we'll have you know student workers
50:47 - doing this but
50:49 - uh unless they're experienced they won't
50:51 - just be able to you know directly
50:53 - publish anything so there'll be some
50:55 - checks on what
50:56 - you know what kind of goes through there
50:59 - all right
51:00 - so here's what i'm thinking
51:02 - we create
51:06 - a
51:07 - and i'll probably do this i suppose in
51:10 - node
51:11 - because that's what i where i would know
51:13 - how to do this with let me know if
51:14 - there's a better way to do this if we
51:16 - could do it like you know straight from
51:18 - the command line or like a bash script
51:20 - or something maybe that'll be faster
51:23 - but what we would what we would do
51:26 - is
51:27 - we would grab all the
51:29 - sorry i think i just went off camera so
51:32 - lean back
51:33 - uh we'll we would grab just like we were
51:35 - hitting an api endpoint right we would
51:38 - grab
51:39 - data from this json file
51:41 - pull it in
51:42 - we'd iterate over that and each time
51:45 - we'd iterate over that
51:47 - we would
51:48 - call
51:50 - this api endpoint
51:52 - and we would post it
51:54 - because i'm it i don't know if there's a
51:56 - way to bulk
51:58 - do post yeah so
51:59 - unless we find some way to do bulk
52:02 - edition of posts with the api we will
52:04 - have to do it one by one
52:05 - but it would iterate through that and
52:08 - then using this
52:10 - it would send a post request
52:12 - to our site
52:14 - so
52:16 - that's how the flow of data would go um
52:20 - from
52:21 - sql server to json
52:24 - um pull the json into node send it as a
52:28 - post request
52:29 - to the wordpress api and then the
52:33 - wordpress api
52:35 - would insert that into a my sql database
52:38 - underneath the wp post table
52:44 - the nice thing that i like about this is
52:46 - that potentially like we're going to
52:48 - have differences between
52:51 - the the fields that we have here and
52:52 - what we have in our other other database
52:55 - so
52:56 - um
52:57 - for instance
52:58 - you know when we have you know not all
53:00 - these match up properly i don't even
53:02 - know if these dates are in the right
53:03 - format right but what we could do is
53:05 - when we do that iteration
53:08 - every time we pull in data from the json
53:11 - file
53:12 - we could have you know some mutations of
53:15 - the data going on uh so we could have
53:17 - something that like
53:19 - and this is a prime example our column
53:21 - where it has content type
53:24 - which i
53:25 - can't find right now here we go content
53:26 - type i don't want the post type to be
53:29 - one in wordpress right it needs to be a
53:33 - string a name of that post type so we
53:35 - could have something in there that would
53:37 - check if content type is one
53:40 - then
53:41 - make the field post type i'm assuming
53:44 - there's a field called post type in here
53:46 - somewhere
53:47 - um
53:50 - i don't know what to find it
53:54 - um either have to find it or we may have
53:57 - to modify
53:59 - the api
54:06 - yeah we may have to modify the api not a
54:08 - problem we don't need to do that right
54:10 - now
54:11 - so what we either do is download a
54:13 - ready-made plugin that can handle that
54:15 - or we can just write a plugin ourselves
54:19 - probably depends on
54:22 - i don't know does anybody really want to
54:24 - go through writing a php plugin not
54:25 - today but in the future
54:27 - um a future stream
54:30 - let me know i'll think about it uh maybe
54:32 - we'll do that
54:35 - uh
54:36 - anyway it would change that data so
54:40 - anytime let's say the content type was
54:43 - one
54:44 - instead it would make the the post type
54:46 - for wordpress
54:48 - i don't know um
54:52 - let's say faculty members
54:54 - right because we would have a post type
54:56 - for faculty members so we could display
54:58 - their bios and stuff on on the page so
55:01 - right does that make sense
55:03 - um
55:07 - i don't know uh let me know if it
55:08 - doesn't make any sense at all it'll
55:10 - probably make sense once we do it
55:13 - um so let's
55:15 - let me think where should we run this
55:19 - suppose we could run this right on our
55:21 - local machine
55:24 - right is there any reason why we
55:26 - couldn't
55:29 - we have node on this machine
55:31 - we could most certainly make a node a
55:34 - javascript file run it
55:37 - in node and it could handle all that
55:41 - uh the only thing i'm worried about
55:43 - slightly is i mean let's say we add like
55:45 - 9000
55:47 - posts
55:49 - can the wordpress api handle that much
55:52 - all at once
55:54 - especially on a 10 droplet i don't know
55:57 - we could maybe set a timeout
56:00 - and um just let it go
56:03 - for a long time
56:05 - uh
56:08 - or i'm sorry uh you know what i mean
56:10 - like an interval right so it would only
56:13 - try to send a post i don't know every 10
56:16 - seconds or something right
56:19 - that should be enough time
56:22 - all right so let me catch up here on the
56:24 - live chat quickly
56:27 - and make sure i'm on the right track
56:28 - here
56:31 - okay so nick has clarified sql server
56:34 - management studio is an integrated
56:36 - environment for managing any sql
56:38 - infrastructure
56:39 - you can use it to access configure
56:41 - manage administer and develop all
56:43 - components of uh sql server
56:47 - okay that's cool
56:49 - i may uh look into that then at some
56:51 - point
56:53 - maybe after the stream today or sometime
56:54 - tomorrow if i can
56:58 - okay alberto says it sounds pretty easy
57:00 - to use the api since we already have the
57:02 - json file yeah as soon as i saw that i
57:04 - could export it to json in one click
57:07 - that was immediately what i thought
57:09 - about was just use the api um
57:15 - console snippets
57:17 - okay nick says but if you're focused on
57:21 - t sequel
57:23 - um
57:26 - microsoft um
57:28 - sql operation studio is better for some
57:31 - good code snippets customizable server
57:33 - and database dashboards
57:35 - okay
57:36 - um
57:38 - ein bishn says uh what are you
57:41 - using to call and store
57:44 - uh in the database
57:45 - um
57:47 - this
57:48 - so this is what i'm using i i assume
57:51 - this is what you're asking about correct
57:52 - me if i'm wrong
57:54 - this is microsoft's
57:57 - sql operations studio
58:01 - and i just found out about it yesterday
58:05 - but it's an electron uh app so it runs
58:08 - as a desktop app and
58:11 - i like it so far
58:12 - i don't really have much to compare it
58:14 - to the only other thing even remotely
58:16 - like this that i've used is
58:18 - like php my admin or whatever it's
58:21 - called
58:22 - uh and so far i like this a lot better
58:31 - okay so post types is on the left column
58:36 - oh okay cool thank you um
58:39 - daniel notice post types on the left
58:41 - column here
58:43 - interesting
58:45 - so example requests i don't get em list
58:47 - types retrieve a type
58:53 - oh you know what
58:54 - here's what i think we can do
58:56 - i'm not 100 sure that we could do this
58:58 - by default we still may need a plug-in
59:00 - but potentially we could
59:04 - as long as we create the post type
59:07 - yeah we should be able to do this so
59:09 - i don't know how many of you were
59:11 - watched the last time we created a
59:13 - custom wordpress plugin
59:15 - but
59:16 - we
59:17 - with that plugin
59:18 - we created custom post types and then we
59:21 - enabled them to use the wordpress api
59:23 - and that's how we got data from them i'm
59:26 - assuming that if we enable the api we
59:29 - enable all of it so we can also pass
59:31 - data in so what we would end up doing is
59:33 - let me zoom in instead of for those
59:36 - types that aren't posts which most of
59:38 - them won't actually be post because
59:39 - we're not even going to have a blog on
59:40 - the site there'll be something else so
59:43 - it would be wp v2
59:46 - and then here we would say
59:49 - right
59:50 - and that would be the name of the type
59:52 - so it wouldn't be post and then a type
59:54 - over here
59:56 - it would be an entirely different
59:58 - uh word right here
60:00 - so i'm i'm almost positive that that
60:03 - will work
60:04 - and
60:05 - great
60:08 - all right great and uh so uh daniel
60:10 - thank you so much for mentioning that
60:13 - because now
60:14 - once i saw it it all came back to me it
60:17 - has been
60:18 - a little while since we've worked with
60:20 - the wordpress api
60:23 - let's see
60:26 - uh um says it
60:28 - the alternative uh i'm paraphrasing some
60:31 - uh hope you don't mind alberto see the
60:33 - alternative to uh doing it through the
60:36 - api like i just described would be
60:38 - generating uh the table uh and inserting
60:41 - data scripts and then potentially
60:43 - modifying the file to match the mysql
60:45 - syntax so
60:47 - umberto
60:48 - yeah for me
60:50 - trying to think about doing that i have
60:52 - no idea i'd have to look up every step
60:53 - of the way but i am very familiar
60:56 - uh with the wordpress api so
61:00 - even if the wordpress api wouldn't be
61:01 - the ideal way to do it for our purposes
61:03 - right now and for my capabilities it's
61:05 - probably gonna end up being the shortest
61:07 - way to do it
61:10 - let's see
61:14 - uh mike wes if all the data was in that
61:15 - one table yeah pretty much yeah
61:19 - um so this table
61:24 - a lot of rows
61:26 - i don't want
61:28 - if this number down here is the correct
61:30 - numbers
61:32 - 9683 rows
61:36 - so this is it the the content table
61:39 - i mean as it seems has all the content
61:42 - for the site uh we can check out some of
61:44 - the other tables as well
61:47 - let's see
61:49 - oops
61:50 - where was it at there we go
61:52 - um so there are quite a lot of tables
61:55 - here so let's just check it out quickly
61:58 - uh that way you know some of you who
61:59 - maybe are um more familiar
62:02 - there we go i'll make this
62:06 - obscenely big for a minute just so you
62:08 - all can see
62:11 - um so a lot of these tables i imagine
62:13 - are are pretty much empty because we
62:15 - don't actually use any of those features
62:17 - on the on the site right so we have
62:21 - uh request template we don't have to
62:23 - worry about any of the template stuff
62:25 - because that's not being carried over
62:27 - [Music]
62:30 - any user stuff we don't have to worry
62:32 - about
62:33 - most a lot of the users aren't even
62:35 - working here anymore because they're
62:37 - student workers and they've graduated
62:40 - uh
62:41 - status same way like approval things
62:48 - assets
62:50 - i don't think we'll worry about assets
62:56 - events
63:00 - i might have to check out this content
63:02 - events because we have used some of
63:04 - their event things but the thing with
63:05 - the events is
63:07 - once the event happens it expires and we
63:09 - don't really need it anymore so we may
63:11 - not even bother pulling in events
63:13 - because we don't really need the old
63:15 - events why i take that back we might
63:17 - just export the um
63:19 - the json for the events but we won't
63:21 - while they're putting it in
63:23 - uh the wordpress installation because
63:26 - we won't need them it might be nice to
63:28 - have them
63:30 - all right cool so my um
63:33 - the uh the accountant here that's
63:35 - franciscan university of steubenville
63:37 - that just uh came into live chat
63:40 - i'm pretty sure that's
63:42 - um brian who works here with me he's a
63:46 - full stack developer so
63:47 - uh brian says the
63:49 - he knows a lot more about the content
63:51 - than i do so
63:53 - uh
63:54 - it seems that we don't need to worry
63:55 - about the events
63:59 - um
64:00 - rook asks how big the entire database uh
64:02 - is i don't really know
64:05 - but um the database uh guy from it
64:10 - who's really nice guy and came over and
64:12 - helped me this morning
64:13 - he said that 80
64:16 - of the size of the database
64:19 - is in the um
64:21 - the versions so like the archive which i
64:24 - think
64:25 - is
64:26 - it it saves a history of all the changes
64:30 - which we don't need any of that
64:32 - so
64:33 - we could
64:34 - we don't have to worry about 80 percent
64:37 - of the stuff in here for sure
64:39 - and then of the twenty percent that's
64:41 - left over
64:42 - most of it is in this content
64:45 - um
64:46 - table here
64:48 - so like i said the content table is
64:50 - really
64:52 - the vast majority of all we need to
64:54 - worry about
64:56 - let's see
64:58 - calendar i don't think we yet we use the
65:00 - calendar
65:03 - we only use member subscriptions
65:08 - yeah this kind of thing device
65:10 - configuration stuff we won't need
65:15 - i don't know that we use the categories
65:17 - extensively enough they'll change we
65:19 - don't need that
65:21 - this is the content
65:24 - uh table that we have open right now
65:29 - and so this is just some some stats and
65:32 - things we don't need any of that
65:34 - is it content history
65:36 - maybe it's content history that's that's
65:38 - quite large as well
65:42 - so coupon currency customers we don't do
65:44 - any e-commerce
65:50 - yeah i think we are
65:54 - we're not going to need these uh most of
65:57 - these
66:00 - sorry i'm scrolling through pretty
66:02 - quickly i'm not sure if y'all can even
66:04 - see
66:06 - i'll definitely run this by i'll have um
66:10 - uh brian take a look at it since he
66:13 - knows more about the site
66:15 - and probably my boss as well just to
66:18 - scan through and see if there's anything
66:20 - else that looks like it might be
66:23 - something we need
66:26 - but it does not look like it
66:29 - okay
66:30 - let's see
66:38 - uh immission says is your data stored in
66:40 - wordpress and that's why you need to use
66:42 - the wordpress api now i want to put it
66:44 - into wordpress
66:46 - so that's why we're using the wordpress
66:47 - api uh michael asks is it an archive uh
66:50 - or a backup
66:52 - um
66:53 - yeah it's it it's a copy of the current
66:57 - database that's in use
66:58 - with you know we just have read-only
67:00 - access to it
67:05 - daniel says not like eight gigabytes in
67:08 - a comments table so you're good yeah we
67:10 - don't have comments enabled anywhere so
67:12 - we don't have to worry about it
67:18 - okay
67:23 - all right so i think we're good
67:27 - michael s how often do you do the backup
67:29 - i have no idea because we don't
67:31 - we don't handle the backups um i t
67:35 - if there are backups it handles them so
67:38 - i i don't really know
67:39 - this backup was made
67:43 - uh very recently i think within the last
67:45 - few days
67:49 - okay let me check the time and then see
67:52 - what we can accomplish
67:56 - okay
67:57 - let's just take a look
67:58 - [Music]
68:01 - let's take a look what we need
68:06 - you know what
68:08 - we could maybe uh start to write some of
68:11 - the node
68:12 - uh code but we can't run it because i
68:15 - can't remember the password that i used
68:17 - to log in here
68:19 - uh so
68:22 - it's not it's not going to work unless i
68:25 - can can remember this password um
68:33 - it's possible that it just wouldn't let
68:34 - me log in because i was trying to create
68:37 - something
68:40 - so
68:41 - i guess we can make some of the uh
68:48 - yeah we can do some of the code we can
68:50 - test it out with the password as i think
68:52 - it is and then
68:55 - if it doesn't work it doesn't work we'll
68:57 - um i'll wait till i get my other account
68:58 - we'll go back to it
69:02 - see michael says are you hiring i have
69:05 - to work remotely though
69:07 - unfortunately we're not uh we don't hire
69:09 - remote workers
69:11 - uh if we did i'd probably be sitting at
69:14 - my house right now
69:16 - um
69:18 - but uh
69:22 - yeah if we ever
69:24 - i hope that we can start to hire remote
69:26 - at some point
69:27 - uh at least for developers
69:29 - and if we do start that i will
69:32 - definitely let all of you know uh in the
69:34 - stream
69:36 - uh julian says i recommend to look on
69:38 - the wpcli put the content of each post
69:42 - into a file then create posts from the
69:44 - content
69:48 - wp post create post context first
69:51 - category
69:59 - and do it in bulk
70:04 - okay that's actually that's not a bad
70:06 - idea uh my question then would be though
70:09 - uh
70:10 - assuming that we have to manipulate some
70:12 - of the data and change it
70:16 - would it be
70:17 - i'm just
70:19 - at some point we'll have to do that
70:21 - right so
70:23 - would it make it easier
70:25 - to do it like that
70:29 - um
70:32 - i'll have to look into it more
70:34 - i suppose
70:36 - i think right now it is worth it to um
70:39 - do
70:40 - do a little bit of stuff in node just
70:42 - right now
70:43 - uh just to get an idea of
70:45 - you know is is this even possible
70:55 - all right
70:58 - so let's go to
71:02 - one of our editors here
71:06 - since we're dealing with microsoft stuff
71:08 - let's let's bring up
71:10 - uh let's use visual studio code
71:14 - and i have our electron project up but
71:17 - for now i'm just going to
71:19 - open a new file
71:21 - and
71:24 - let's pull in
71:27 - let's
71:28 - yeah let's save this
71:31 - and
71:36 - in projects
71:38 - and let's call this
71:41 - let's do a new folder
71:46 - tv migration create
71:48 - and then within here we'll just call
71:50 - this
71:51 - um
71:55 - migrate.js okay great
71:58 - what message am i getting here whoa
72:02 - excellent for single drops
72:03 - and globally
72:07 - okay i'm not really worried about eslant
72:09 - right now
72:11 - um
72:14 - let's see
72:28 - uh nick s does the database have any
72:30 - kind of uh
72:32 - mapping tables i
72:35 - i don't really know to be entirely
72:37 - honest i'm not even sure what the
72:39 - mapping tables are
72:45 - envision says isn't it isn't it great
72:47 - that you can broadcast at work how
72:48 - boring would it be otherwise
72:51 - yeah it does make things a little bit
72:53 - more exciting when everybody can see me
72:55 - mess up
72:58 - all right so
73:00 - actually let me take
73:01 - i could probably pull some of our our
73:03 - node
73:05 - code that we've used
73:06 - earlier
73:12 - let me think
73:15 - if we used
73:23 - now i'm thinking we need to import
73:25 - and use uh
73:28 - i'd like to use node
73:30 - fetch
73:34 - to somebody being more complicated than
73:36 - i'd hoped
73:38 - um
73:41 - all right well i can at the very least
73:43 - plan out what we're gonna do
73:46 - and
73:49 - then we can go from there see if we can
73:50 - code anything out
73:52 - so we need to
74:08 - this
75:05 - um
75:10 - we should probably
75:14 - um
75:20 - try again
75:39 - okay
75:40 - um so
75:43 - this is my basic plan uh
75:45 - we'll get the data
75:47 - uh
75:48 - we'll probably can run a filter if we
75:50 - really wanted to
75:54 - which it may end up being useful to just
75:56 - to run the filter
75:59 - we could either filter here or
76:03 - we could go over here and when we
76:04 - actually do our query we could try to
76:07 - only select things that we want
76:09 - we'll get a much smaller file so i'm
76:11 - thinking of things that you know
76:13 - inactive content um you know content
76:16 - that's expired or just content that we
76:18 - have no intention to to bring over to
76:20 - the new site
76:22 - so however we do it
76:24 - here or here whatever we want to do we
76:26 - do need to filter out the stuff we don't
76:28 - need no sense in making those posts if
76:31 - we don't want them anymore and then
76:32 - we'll go through
76:35 - uh make the changes like we talked about
76:37 - so that the data is in the correct
76:39 - format
76:40 - that we need to send it so then we'll
76:42 - send that post request and the last part
76:44 - here i think it'd be a good idea
76:47 - obviously to check for errors right
76:49 - we'll get a message back
76:51 - saying whether or not we succeeded
76:54 - in our request
76:56 - to um to make a new post
76:59 - so
77:01 - if it fails you know possibly we would
77:03 - we could try again you know wait a
77:05 - certain amount of time try again
77:07 - uh and then
77:09 - you know if it fails twice
77:11 - at that point we can just log
77:14 - log the id that way we can we have a
77:17 - record then of
77:19 - you know what didn't go over
77:25 - i'm hoping that the list of stuff that
77:27 - didn't work will be small if it's a long
77:30 - list that's
77:31 - going to be a pain
77:44 - okay so umberto is saying uh so i think
77:46 - it's better to modify that in in the
77:49 - node uh code so here uh with javascript
77:53 - uh doing it in one place uh rather than
77:55 - find and replace in a text file
77:58 - that's cool i agree and i'm i'm much
78:00 - more comfortable editing it you know
78:02 - through
78:03 - uh through note i mean think about how
78:04 - many times we've done the same thing
78:07 - you know in our react components when
78:08 - we've made an api call and
78:11 - change things in the data before we
78:13 - rendered it right so this will be very
78:16 - familiar to us
78:24 - let's see next thing get the data from
78:28 - the json with
78:30 - bulk and uh open row set
78:35 - all right nick i'm interested in hearing
78:37 - more about that because i'm not exactly
78:39 - sure what what the benefit is from that
78:41 - or or anything but
78:43 - uh if you could explain it a little bit
78:45 - more to me since i'm my knowledge of
78:47 - this kind of thing is very limited
78:49 - i would i would appreciate it
78:56 - now daniel says unless you've got that
78:57 - client that says i need everything
79:00 - yeah luckily my boss is perfectly fine
79:03 - with getting rid of all the stuff that
79:05 - we don't need like i said i think it's
79:07 - worthwhile to save everything in
79:11 - at the very least save it in json format
79:13 - and then
79:15 - you know keep backups of that
79:17 - so that at some point if we ever really
79:19 - need to find a piece of content it
79:21 - wouldn't be that hard to
79:23 - just search for it
79:25 - um
79:26 - i don't want to keep these databases
79:28 - alive you know as is anywhere because
79:31 - that takes up you know the this website
79:33 - these databases are hosted physically on
79:35 - campus
79:37 - by the it department so
79:39 - it would save them time and money
79:42 - they'll be able to reuse those servers
79:43 - for other things if we could just
79:45 - completely get rid of it all
79:47 - so
79:48 - that's the plan so any backups that we
79:51 - want
79:54 - i guess at first
79:56 - we could do a test
80:03 - yeah let's do a test
80:12 - all right let me see what time first
80:16 - let's see
80:19 - i'm going to bring in node fetch because
80:22 - i like to use fetch
80:25 - i'm not really
80:27 - interested in
80:29 - doing it any other way
80:32 - let's see
80:55 - uh i guess i'll have to um init this
80:58 - project then with
81:00 - all right let's go in in the console
81:03 - this is kind of why i
81:05 - i'm wondering whether or not i should
81:08 - uh i should do this
81:14 - there we go
81:16 - um
81:21 - let's see the
81:23 - immigration
81:24 - there we go
81:30 - what if i could just type yarn will it
81:31 - in it
81:39 - all right there we go question name db
81:41 - yeah that's good that's good that's good
81:46 - issue
81:49 - whatever all this stuff i guess doesn't
81:51 - even really matter
81:55 - yep
81:59 - true right
82:00 - there we go
82:01 - okay so now let's do yarn add npm
82:06 - i mean node
82:15 - okay wonderful
82:20 - oops
82:28 - let's go with
82:51 - okay
82:58 - um
83:07 - let's pull in that um
83:09 - that file
83:10 - and put it in the right spot
83:13 - so right now we just have that in
83:15 - documents
83:16 - and i want it in
83:20 - a project
83:24 - so sorry this is really small
83:26 - probably hard to see
83:29 - but let's just pull this over
83:33 - here we called it results
83:36 - dot json yes
83:39 - so let's pull that over
83:41 - and
83:42 - i'm not even going to make folders this
83:43 - is so this is basic we don't even need
83:45 - folders for this i am going to make it
83:47 - lower case because it bothers me
83:49 - um there it is we have our results json
83:53 - great
83:54 - all right
83:56 - so
83:58 - let's go
84:02 - edge
84:28 - no
84:33 - you like look at an example
84:36 - it's been so long since i've actually
84:38 - wrote one of these from scratch
84:42 - all right
84:43 - let's check this out
84:58 - trying to get the last project where we
85:00 - did this i think we've used this in
85:03 - pretty much every project
85:11 - yeah
85:12 - um
85:13 - we've done this with the bulletin
85:16 - the react version of the bulletin
85:19 - so let's check that out
85:33 - and we're using node fetch there
85:49 - all right cool i'm going to copy and
85:50 - paste this over here
85:53 - we've got quite a lot going on here so
85:56 - um
85:58 - we need
86:02 - let's do
86:08 - all right i'll explain a little bit of
86:09 - this so
86:25 - do you even need this
86:32 - no we don't need all of this so let's
86:36 - get rid of this
86:48 - uh we can get rid of that i don't like
86:50 - the semicolons so let's get rid of this
86:57 - fetch
86:58 - okay this should be what we need
87:00 - um
87:02 - no it's
87:06 - should just be
87:11 - actually we don't even need
87:16 - most of this
87:23 - all right
87:32 - yeah
87:34 - i think we're doing
87:35 - we're doing very different things
87:38 - uh okay
87:50 - um
87:52 - now obviously we can't use async await
87:54 - unless i i put in
88:09 - let me check back here and make sure i'm
88:11 - not doing something
88:12 - ridiculous
88:22 - okay
88:24 - yeah let's put back in
88:26 - this and we'll take this out
88:34 - there we go
88:35 - um
88:38 - leave that on another line right now
88:42 - and then let's return
89:03 - let's go with
89:10 - actually you know what i think we did
89:11 - this exact thing in a previous project
89:16 - which project was it
89:21 - it's the resource center
89:25 - let's check it out
89:29 - it's really nice to have all these
89:31 - projects
89:32 - that we've done
89:33 - uh to just be able to go back to and say
89:35 - oh we've we've done that
89:45 - all right so it wasn't we weren't doing
89:48 - it in node but
89:51 - it should still work the same
90:19 - all right let's do this
90:24 - oops
90:28 - imports
90:37 - just call this data
90:40 - from
90:50 - there we go
90:51 - now i don't even need to worry about any
90:53 - of this stuff yet
90:55 - um
90:58 - let's get rid of it but then let's set
90:59 - it down here because we will be using
91:01 - fetch for our post request
91:05 - but for now
91:08 - we can just grab the data
91:13 - let's see
91:25 - tabs
91:39 - okay
91:50 - all right so let's just go
91:53 - just to make sure that we're actually
91:54 - getting the data let's console
91:59 - blog
92:02 - and
92:03 - let's go data
92:08 - where's my
92:09 - format
92:13 - okay
92:39 - all right
92:40 - i'm not sure if this will work
92:43 - but it's worth a shot let's go back to
92:45 - our terminal
92:47 - wherever that is
92:49 - okay
92:51 - um
92:52 - so we're in here let's go node
92:56 - whoa
92:57 - let me make this bigger sorry everybody
93:02 - all right
93:07 - syntax error
93:09 - import unexpected imports
93:12 - oh shoot
93:14 - maybe i can't use that syntax in here
93:18 - let's do
93:25 - [Music]
93:33 - ah it's automatically is it
93:36 - automatically putting in semicolons
93:39 - i thought i keep kept taking it out of
93:41 - there
93:44 - i need to change my settings
93:46 - um okay
93:48 - let's try this now
93:50 - nope
93:52 - can i find modular results oh shoot it's
93:55 - not a module
93:57 - okay we got to change this and make it a
94:00 - module
94:03 - so where's our
94:23 - all right i if i just double click it in
94:26 - here it should work
94:28 - language
94:30 - results
94:32 - it's gonna be a huge file
94:35 - wow
94:36 - wow
94:38 - oh did everyone just see that speed
94:41 - i'm really impressed i mean this is
94:43 - gigantic file
94:46 - wow
94:47 - good job visual studio code
94:52 - why do i
94:55 - why is this not highlighted properly
95:00 - it should be
95:04 - um
95:07 - interesting okay
95:09 - um
95:10 - so let's do
95:20 - data
95:39 - and
95:40 - let's change this because now it's going
95:42 - to be a javascript file
95:48 - and we're going to change
95:55 - i need to rename it
96:10 - why can i not rename this thing
96:14 - all right
96:15 - let's just rename it from here then
96:25 - great
96:27 - deleted from disk
96:32 - great
96:47 - there we go
96:51 - let's do
97:05 - i don't know if i'm not getting
97:06 - highlighting because the file's just too
97:08 - big and it's taking forever
97:11 - i don't know all right let me check back
97:12 - here for a second
97:23 - okay cool all right nick i see uh nick
97:25 - explained a lot more about what he's
97:27 - talking thanks nick
97:29 - i'm definitely gonna look into um
97:32 - more of what you're talking about
97:45 - okay
97:47 - thanks umberto i i understand so umberto
97:49 - was explaining a little bit more about
97:51 - he's talking about us i appreciate that
97:54 - i'm not even sure
97:57 - if this is correct syntax and will work
97:59 - but
98:01 - i'll give it a shot if it's not if it
98:03 - doesn't work out then i'll double check
98:06 - actually what am i thinking i can
98:08 - definitely double check right now
98:09 - because i have
98:11 - a data file that has the same thing
98:14 - on my other screen that we used for
98:17 - project
98:19 - what was it was it project
98:22 - i can't remember i think project three
98:23 - whatever the resource center react
98:25 - project was
98:28 - uh
98:31 - [Music]
98:32 - yep that's it that is the correct syntax
98:36 - see i should have just tried it and then
98:38 - i would have looked
98:39 - uh more intelligent i suppose
98:44 - all right so let's let's do this though
98:46 - uh let's go back into here
98:49 - oops
98:50 - nope that wasn't it we'll go into here
98:52 - and
98:54 - you know we really need
98:58 - what happened before i tried to
99:06 - all right let's just see if this if this
99:08 - actually will work
99:13 - this is not exactly how i was bringing
99:15 - in bringing it in
99:24 - no it shouldn't
99:27 - this is probably not gonna work but
99:29 - it'll only take a second to run it again
99:31 - yeah it doesn't work so since yes
99:35 - let's see
99:38 - cannot find results that you have
99:49 - now
99:51 - should i throw in
99:52 - a dot slash
99:55 - is it could it be that easy
100:00 - whoa
100:04 - yes all right cool
100:06 - export costs all
100:20 - right so now it's upset
100:23 - that i'm exporting it all right
100:43 - all right can you use can i use import
100:47 - in
100:48 - node i don't know let's just try it
101:22 - oops not required
101:39 - all right let's try that out
101:43 - let's switch the token
101:45 - import okay i guess i can't
101:47 - i can't use that with node
101:50 - um
101:52 - all right so cool so rook saying module
101:54 - exports and node not x okay cool
101:58 - um
102:11 - let's see
102:13 - i don't know i just suck
102:18 - so uh christian
102:20 - um said you might also have some fun
102:23 - coming up with uh the fact that all the
102:25 - numbers seem to have been parsed to
102:26 - strings
102:28 - didn't notice that before
102:30 - but you are correct
102:36 - all right module dot exports and node
102:38 - not export
102:41 - all right so
102:43 - let's switch it up then
102:46 - um
102:54 - so um rook is this what you're saying to
102:57 - do it more like this module exports and
102:59 - then
103:00 - what i have to do
103:03 - module import
103:08 - i should just look up the syntax i don't
103:10 - know what i'm
103:11 - that's really important oh okay so i got
103:14 - the uh
103:17 - all right let's see
103:27 - also import
103:28 - this is not letting me
103:40 - no that's not all right i'm gonna have
103:42 - to look this up
103:44 - uh moto exports in the results cs file
103:47 - and then dot require in the migrate okay
103:50 - so i do have to do require
103:53 - all right so let's just jump back here
104:02 - oops
104:07 - there we go
104:08 - all right require and then module
104:11 - exports
104:13 - all right let's see
104:15 - see what this is done
104:19 - oops exports
104:25 - okay thank you rook so much this is
104:27 - super helpful so rook is actually typing
104:30 - in the correct syntax that i need
104:37 - whoops i'm in the wrong file
104:39 - so i don't need all this
104:42 - i can just do module exports
104:45 - and then
104:46 - that should work awesome
104:50 - thanks again rook that was like
104:53 - super helpful
104:55 - whoa
104:56 - yeah check it out
104:58 - yes okay
105:02 - that part is working
105:05 - oh my goodness there's so much okay so
105:07 - i'm trying to scroll up so we can see
105:08 - the top okay so here's what we did if
105:10 - you remember our migrate
105:14 - people the wrong way or migraine.js file
105:16 - all it was doing was grabbing
105:18 - this the data from our json data which
105:22 - now is is in a javascript file so it's
105:24 - just
105:26 - an array of objects right
105:28 - and i just wanted to console log the
105:30 - first
105:31 - uh object in that array
105:34 - and it has done that right we could
105:36 - double check
105:38 - this in fact is that that object so we
105:41 - we have all of this
105:43 - right
105:45 - awesome
105:49 - awesome
105:51 - and
105:51 - we could potentially to take it a step
105:54 - further
105:55 - um
105:56 - just to test out some of the things that
105:58 - we want to do
106:01 - let's go with
106:04 - let's just see if this works so i want
106:06 - to grab this content id
106:12 - and let's try this
106:16 - i still want to do a console log but
106:18 - first i want to do
106:23 - data.filter
106:25 - and
106:26 - we want to do
106:32 - object
106:35 - and we're going to do
106:39 - object dots
106:41 - what was that field called
106:44 - content id
106:51 - content id equals
106:55 - let's go
106:56 - whoops i already copied that
106:59 - there we go
107:09 - no that's not it huh
107:29 - it's just not gonna work for me here
107:32 - [Music]
107:52 - i'm gonna have to do it like this
108:12 - man
108:13 - i've been reviewing other people's code
108:15 - for way too long instead of writing it
108:17 - from scratch i've been spoiled by you
108:19 - all i can't remember any syntax
108:22 - all right let's just say that the goal
108:24 - is i should get back the same result as
108:27 - i had before but what we're doing now is
108:30 - making sure that we can filter this
108:32 - stuff out
108:34 - so it's basic it should work assuming i
108:36 - got the syntax right which is
108:39 - i don't know we'll see
108:42 - this should
108:46 - okay
108:47 - um
108:49 - so we didn't pass this
108:54 - i'm doing wrong
109:02 - i need uh
109:04 - all right let's do it like this
109:21 - post
109:30 - post
109:36 - all right
109:38 - see if that works
109:49 - yeah that worked okay
109:51 - i always get confused with filter
109:56 - and and how to access what it returns
109:59 - but i know if i
110:00 - use filter and map together
110:03 - it always works
110:05 - um
110:07 - okay
110:08 - sorry rick i just saw that now so
110:11 - um i did not have to do it that way but
110:14 - it it
110:15 - it proved the point of
110:18 - at that point
110:20 - what we've done there is we're actually
110:22 - able to filter out
110:27 - and just get one of those now we
110:29 - obviously wouldn't want to filter by
110:30 - content id right
110:32 - but
110:36 - we would want to filter by some of those
110:38 - other fields that we had talked about
110:39 - before
110:40 - um
110:42 - such as
110:43 - uh like post type
110:46 - or whatever the equivalent is called i
110:48 - think it's called content type or
110:49 - something
110:51 - yeah we might
110:54 - oh sorry
110:56 - you might want to filter by date you
110:58 - know different things like that
111:00 - i'm going to have to give so i'm not
111:02 - going to code out the rest of this
111:03 - because
111:05 - it's about time for me to leave and go
111:06 - home
111:07 - um
111:08 - so i'm not going to code the rest but
111:09 - you can see basically how it's how it's
111:12 - going to work right so this part here
111:14 - should not be an issue
111:17 - we just follow the instructions on the
111:19 - api documentation
111:22 - and that should
111:23 - you know it should work
111:26 - this is
111:28 - basically we've already done everything
111:30 - that we want to do for the most part
111:31 - it's just a matter of making it a bit
111:33 - more complex doing more filtering uh and
111:37 - then you know mutating you know the data
111:40 - somewhat
111:42 - um
111:47 - yeah so we actually didn't need to get
111:49 - the data
111:51 - so that part
111:54 - for whatever crazy reason
111:57 - i was attempting to use fetch
112:00 - to get local data that was just going to
112:02 - be in a static file so
112:06 - thank you for bearing patiently with me
112:09 - i really need to change this i can't
112:11 - stand these semicolons but anyway thank
112:12 - you for being patiently with me as i
112:14 - shrugged through that very basic node
112:18 - file there
112:19 - um but it's it
112:21 - it basically works and i was really
112:23 - worried about that size of that that
112:25 - json file like what the heck is going to
112:27 - happen when i run this and you saw it it
112:29 - didn't take very long
112:32 - so i i'm
112:34 - i have a lot more confidence now
112:36 - it may not seem like it but
112:40 - we've come
112:41 - very very far uh in terms of having a
112:45 - clear idea now of how exactly we can
112:49 - transfer the data
112:50 - and you know at least into wordpress so
112:54 - it still remains to be seen
112:57 - whether or not we will go with wordpress
112:59 - but right now it's definitely the front
113:00 - runner for the cms and i can't
113:04 - really can't afford to wait too much
113:06 - longer to make a decision so wordpress
113:07 - might end up being just the default
113:09 - because i haven't found anything else
113:13 - that's
113:14 - that i like
113:16 - to use
113:20 - so i'd say it's a pretty good
113:22 - possibility that we're going to be doing
113:23 - we're going with wordpress at this point
113:26 - and now we know
113:28 - at least from the first part you know we
113:30 - can be pretty confident that this is
113:32 - going to work
113:34 - um
113:36 - yeah so anyway
113:38 - i definitely got a lot done there's a
113:39 - lot i can go tell my boss now that has
113:41 - been tested and that works and uh he he
113:44 - will be very happy with that
113:46 - as well as you know a lot of the other
113:47 - people here involved in the project will
113:49 - be very relieved because this was the
113:51 - big question it was always
113:55 - you know i can definitely get this done
113:58 - by february
113:59 - assuming that we can get the data
114:01 - transferred over
114:04 - that was always the big if that was the
114:06 - caveat so now it looks like that'll work
114:08 - out so i'm very confident we can get
114:10 - this
114:11 - project delivered on time
114:14 - okay cool brian says keystone.js is a js
114:17 - based cms i have looked at keystone
114:20 - before i need to look at it a little bit
114:21 - more in depth and maybe actually
114:24 - install it and play with it the last
114:26 - time i checked it was
114:31 - i'll have to double check it's been a
114:33 - while
114:35 - it's been a while since i've used it
114:38 - i'll have to check it out again i'm sure
114:39 - it's been updated since the last time i
114:41 - i really kind of dug into it so
114:44 - um i will definitely check that out very
114:47 - soon because we need to make a decision
114:49 - on this
114:50 - but anyway thank you so much for
114:52 - sticking around there's actually not
114:53 - that many people left in the stream
114:55 - um
114:56 - it seems that databases is not a popular
114:59 - topic
115:01 - for videos based on the amount of people
115:03 - that came in
115:05 - uh lower than normal but you know to all
115:08 - 16 of you who have stuck around to the
115:10 - end thank you very much
115:12 - i should be back tomorrow
115:14 - i
115:15 - i haven't really checked my schedule for
115:17 - tomorrow so
115:18 - hopefully i can stream at my normal time
115:21 - uh thank you so much again
115:24 - uh i'm
115:26 - i'm probably look tired right now but i
115:28 - am actually really happy this is a big
115:30 - relief that we figured so much of this
115:32 - out and i i don't think i couldn't have
115:34 - could have got this far this fast
115:35 - without your help
115:38 - so
115:39 - most likely i'll i'll be back tomorrow
115:41 - and um until then
115:43 - have a wonderful day

Cleaned transcript:

hey everybody welcome to live coding with jesse i'm jesse today we're going to work with a tool that i've never worked with before and we're going to do some database stuff which is not really common for us on this stream usually we handle front end work but microsoft has come out with and i don't know when this came out but i just found out about it yesterday sql operation studio and when when we see it in a minute you'll see it looks a lot like visual studio code it's an electron app which is cool to look at another electron app since we started building one yesterday um but i finally got access to a database so if you've been watching for a while you know i've been talking about this for at least a few weeks now probably longer and so i had uh some some of the people over in it made a copy of the database that the main site for for this university runs on so uh franciscan.edu which runs on a really old uh content management system that we want to migrate away from but we want to try to get the data out of that database and put it in another database in a format that will be better for whatever cms we decide to use most likely wordpress but i'm still open to other options so i'll give you we're going to look at the database in just a minute but so far i think it's good but i'd like you all to you know check it out as well and then we're going to decide what the best way to transfer this this is and then maybe we'll you know we'll try to do some some tests to see you know what would work i also have a lot of updates that need to be done for our project one our catechetical institute site and i'll talk about that at the end of the stream when we do the question and i answered portion so i had a meeting yesterday afternoon about that which is why i didn't stream and i'll probably be making all of those into issues on the github repo but i'd like to kind of talk through them first uh in today's stream at the end all right so let's let me switch my view here all right so this is uh this is it this is the i keep forgetting the name of it it's microsoft's sql studio no sql operation studio yeah yeah that's it um yep all right so basically let's see is that big enough let me know if it's not big enough i can make it bigger so i don't know how many of you work with databases but this this query gets everything from from content right so we have a table called content we actually have quite a few tables here um content will be the most important that's where we'll get getting majority of all the data so you see right now every piece of content has an id but what i'm really worried about here is the content title and then the content html so this is good news that i think pretty much all the content on the site has this this title and content html we can grab that that's that's all we need really we don't really need to keep the ids the only other piece of data that's going to be useful is content there's a content type which i can't find now but somewhere in here it's a content type now it's just they're just numbers so content type one two three four so i need to figure out what those numbers correspond to but this should help us because the different content types will probably end up being different custom post types in our new cms so we need to make sure we bring them in uh as that so we're not just going to bring all this in and have it be one giant table like it is now but it depends it really depends on the format that we need for our new cms but this is good news so far let me pull this up and we can see more of it at a time and i'll bring that down so there's a couple things that i think we we really need to get out of the way just right off the bat number one we got to change this color theme right we can't have this this bright white stuff so let's check let's try uh what do we see this one looks good monica or we could do default dark that looks nice we'll go with default dark now i'm not sure if we can get a package for this and bring in a new theme oh actually it's it's letting us bring in the um seti icon thing very cool all right so now that we have the background color set now we can really get started so all right so i guess first off what i want to do is open it up to anybody out there that has experience with databases if you have any ideas to throw out let me know i'm going to throw out a few my ideas to what i think the best course of action will be and let's try to decide on one and maybe try something out in today's stream so i don't really have that much of a goal other than just testing some things out i've never done this before so i don't really know what to expect in terms of difficulty and time so if you have an idea go ahead and throw it in the live chat i'll check back in there in a minute or so uh otherwise let me share with you uh some of my thoughts so let's see i'm thinking what we potentially could do is just export a lot of this data how you know whatever format that we would like and then pull that data in basically to wherever uh so one of the difficulties here i guess i should mention this i can only log in to this uh database from this computer um on on this network so i believe that i i'm granted access uh based on my ip address i'll have to verify that with the people over in it but when i was trying to log on yesterday and then earlier today someone from it had to come over and it was a lot of troubleshooting to try to get give me access to this so i have to be on a certain network here on campus so that's going to limit us right so we couldn't just um you know pull data you know somewhere else right uh it has to be here on this computer so that may or may not be an issue but what um what i'm thinking and maybe there is already like a sequel way of doing this i assume there might be but in terms of what i'm familiar with we could potentially pull this data out and then get rid of all the um all the data that we don't need so that's going to include a lot of these a lot of these columns that we just won't need at all um but then also some of this data we don't need to transfer over so some of this stuff isn't even live on the site anymore it's obviously still here but it's marked i believe one of these columns will say whether or not something is is actually live so we need to get rid of all those as well and at that point once we get it narrowed down to what we want then then we could see about transferring that so here's my basic probably don't have to look anything up way of doing this let me know if it's ridiculous so we we could potentially and i think this sounds kind of silly but i i'm pretty sure it'll work we could potentially just export this in excel or as a csv or json right but if we did that we could just go in delete rows and we'd have all that data there in a format that wouldn't be too difficult to pull out and put pretty much anywhere we wanted okay so that's my option i guess the benefit of that would be we we could very easily get a good idea of just how much of this we actually need we could do some filtering which could be useful just to see now umberto in the live chat has some ideas as well so umberto says if we use um sql server management studio um we can generate the sql scripts for create table and search statements logins users etc it says let's see that might cause issues uh with the column with the html um let's see i'm wondering all right so i'm going to ask you all if somebody has um okay so the exporting to a csv or excel um umberto is saying it might um it might cause some issues all right good to know so let's go on to plan b right um nicholas asks what happened to electron i'm really excited for project six um nicholas we'll be going back to project six we're gonna kind of be jumping around a bit um so i'll project six will receive updates periodically and we'll keep checking in on it and we will do some streams that will be dedicated entirely to it uh but i don't really have a timeline for though that needs to be done so uh i guess you know you can always check in and you know when you get the notification if you're subscribed to the channel you get the notification of the title check if it's project six if you're really only interested in that then you know check that out otherwise um you know then you could skip the other stuff i guess uh let's see okay so here's my my other idea we could let's see how do we do this so for this database it's a copy but i only have read access i can't change anything within this database um but what we could do i suppose is create another database and we could even use uh this tool uh it's a sql operation studio we could even use this tool to start to create some you know some tables and things and pull some of this stuff over what i'm not sure about is you know could we pull things directly from here and then insert them in another table you know all within uh sql operation studio so as i mentioned earlier right just started using this uh this morning i downloaded it yesterday couldn't connect to the database and so i didn't really get a chance to use it till this morning so that's something that i'm not sure if that would work but if it did work that would be great i guess that's worth a shot because the next step would be i'd i don't even know the next step i guess would be let's just try to pull this data out put it somewhere else where we have read and write access maybe we can manipulate it i guess if we even just pulled it out somewhere uh that would be more accessible so i didn't have to be here on my machine that might be useful we could try to create some sort of api to get info if we wanted to because to be honest with you i'm not really that familiar with the sql queries but if we could make a really basic api to do things then we could use javascript to do a lot so anyway let's just let's just mess around a little bit and try some things so let's disconnect i'm going to create i know that there's a way to create a database actually you know what are we still that may not work i'm not exactly sure um if i'm still connected to this server i guess suppose i have to do everything on this server hmm okay well let's pull i i just want to go through this and see what we're dealing with in terms of how ridiculously long this would be okay so obviously this is super long wow there's definitely going to be some editing that needs to take place here as i'm looking at some of this html there's a lot of extra stuff in here that we're not going to use that's unfortunate but at least we can get some of the data okay hey john uh john hanson just came into live chat how's it going all right so let's you know what let's let's go back here and let's run a different query because i definitely don't want to bother bringing in anything that's not currently live on the site so let's check out our our headings here this is content status i'm not sure what these stand for on the database okay so we do have publish which i'm assuming xero is not published and one is published so we can rule out anything i guess that's not published oh okay cool um so pat my uncle pat is in the live chat and he said active is in active and inactive is for the status so awesome that makes a lot of sense thank you um okay cool so the i'm then assuming we don't need to bother with the inactive let's see yeah i'm not even sure why these are in here these sound like uh blog posts we don't even host the blogs here any uh in the system hmm and a lot of these wow let's check out the dates on some of these and we were talking events from 2015 yeah we definitely don't need a lot of this stuff all right here's what i'm going to do too right now this will help us out not right now but later on this would be fun uh let me save this i'm gonna save this as an excel file it's gonna be insane and huge but i'm not gonna open it i'm gonna send it to my boss so because my boss is in charge of all this content and he's been here since before this site was even developed at all so he's overseeing everything that's gone into here so he'll be able to tell much more quickly than i can um what what content in here is should be kept and what should not be kept so i will i'll i'll you know i'm not going to send that to him right now because that's not really going to be fun on the stream uh but then that way he can take a look at some of it maybe even tell me you know hopefully there's some identifier in here that would help us out at the very least i suppose he may be able to say you know any you know any content types that are content type three before that were put in there before a certain date we can get rid of that would be helpful uh john hanson says who would and how would that html be uh imputed slash and we're from wordpress um we're going to probably wordpress um but yeah so this data will be put in to a different database and then yeah the content uh would then be could be editable uh through that cms but we're still gonna use the api to bring it in and pull them into our react site yeah so the excel trying to open this in excel has not crashed my computer yet but it is taking forever uh it it's letting me do other stuff while i'm waiting on that so i'll just wait on that uh over here on the side i won't bother with it anymore i'll look at it after the stream all right so umberto is saying we could try to create database database name let's see create create database and i don't know let's just call this no all right what's going on connection all right so it's asking me to put in a different address so i just want to go into here let's see what happens no is the password not in dude i didn't hit remember password um what was the password i think that was it let me remember this time so i don't have to remember it again no hmm all right let's cancel that so that's not it's not working right now so for some reason i still have this in here which i'm not going to mess with this now i'll be assuming that you know maybe i'm i'm not connected really but it's just still showing me this because i i did the query when i was still connected so i am getting the login that i used for this was not the login that i will get hopefully soon so if i can't remember this password i'm not worried about it because i should be getting a new one soon uh i mean i guess i could just open up the help page oops no results found for create database let me start a documentation um all right so we have uh umberto asks if we'll be sticking with microsoft sql server for your database no i will not be sticking with that from my database um so i guess we it doesn't really matter we shouldn't create it through here anyway um also says you might not have grant permission for create database yeah i don't think i can i can change or do anything uh i think i can just read data okay so embarrassing the other option i use in dev is local db but i'm on windows i don't know if that works for mac doubt it does okay let's um all right so let's let's think about this then um for sure if we're going to go with wordpress uh mysql will be the database that we go with if we go with a different system i have no idea what we'll be using so should we just try to do something then with my sequel that might be the best bet right now i guess that's kind of the only the only thing that we would kind of know about for sure that we want to use all right so let's see if we can just get a local mysql database going so hmm all right it looks like can you not do this on a mac has anybody installed uh my sequel on a mac because there are no instructions for it that i'm seeing on on the left the oracle website i guess we could just create a droplet on digitalocean all right let's see if we can just create hmm yes we could um we could just create really quickly um a wordpress installation i mean maybe maybe that would just kind of really easily uh show us what like what would happen if we imported things in a certain way let's see all right let's let's do that so let me show let me show you all this so this is assuming that we're going to go with wordpress this is the structure that we need so if we install wordpress first and we'll just do we're not going to go through the whole installation process like we've done before we'll just do the digitalocean one click uh install and we'll just spin up the droplet just to test we'll do a really basic droplet and then um we'll just get rid of it when we don't need it anymore uh but the only thing that we really need to worry about changing right now is this wp posts so actually a lot of these fields match up pretty well with what we already have okay all right i think that'll work all right uh i'll bring this over so we can see um so it's just digitalocean i'm just going to go with this wordpress one click install we can do a five dollar droplet if if you do the install um you know if you start out just with like a linux distro uh and do it install wordpress on your own you can actually get away with running it on the five dollar an hour droplet uh which is nice and it it actually works it it'll run everything uh i have wordpress sites i'm just using the headless uh wordpress installs on five dollar droplets that have been running for months and months and have been doing fine uh but for for now just for speed we'll we'll be all right with the 10. uh i don't think we really don't need anything special uh just for testing so yeah i don't let's monitor at least um and droplet okay through pdb tests all right that works right yeah that looks good all right let's create that oh cool so michael is is here and michael knows sql or sql actually let me know in the live chat what do you prefer to say or what do you think is the correct way to say it sql or sql um i i think sql is easier to say and so i go with that but i do hear a lot of people saying sql alright so this is almost done great so we should be able i think we should be able to go here oh this ip probably won't do anything i wonder if you can do okay so i have to ssh in enable my wordpress installation okay um not a problem let's copy that and we've got the terminal open already let me make this bigger so you all can see and uh i know i have completely forgotten about the pomodoro timer for this one but there's not a whole lot going on in the live chat so i'm just gonna not do that for now if i notice a lot of activity then maybe we'll go back to it but i've been able to keep up with with the chat as we're going so if i can keep doing that we should be all right okay got some some votes here for uh for sql all right cool uh also um kundan nanji uh sorry if i mispronounced that uh says what happened to setting up an electron project we're gonna go back with to the electron project uh so we're going to kind of bounce around between projects but we will go back to the electron project at some point uh the repo on github is there so feel free to check out what we have so far it's it's set up pretty nicely so it can certainly be uh forked at this point cloned you could you know work on it for your own projects or contribute uh if you'd like but we'll get back to it all right john hanson's asking about why uh the microsoft sequel over my sequel and isn't my sequel easy yeah we're um so what we're going to do is take that data out of that uh sql server database and we're going to put it in to the my sequel that's running with our wordpress install so we are moving away from that uh from that microsoft uh server okay i think this should get us in yep all right cool we are in and wordpress has been enabled wonderful all right so hopefully i can get into this wordpress install just with an ip address if not it wouldn't be a problem to make a sub domain you know quickly okay so it looks like i can use the ip so let's try that out okay cool username sorry i can't show you the password uh let's go um let me move this over and then do the password so i'll change what was there and copy phil wonderful i have to put in i think sometimes for my work email uh these these emails from wordpress get blocked um so i'm putting in my my personal email for that okay let's log in lennon says can you give me hints on this question uh yeah sure what is your question all right awesome so we have a wordpress install we may as well just update this now before we do anything i'd hate to actually do something and then update and have it mess up what we've done so if you've never used wordpress before this is what the admin panel looks like wordpress updates are super fast and easy you see that it's already done i couldn't even say what a wordpress update was in before it finished so you hit the update normally it's a good idea to back up a site first but since we have nothing in the site we didn't need to and now it tells us all about you know what happened uh when we update it we can also go down here check out our plugins this can be updated now uh we're not even using it right now but just to show you how easy it is to update that literally a few seconds so what we'll do now is we'll go to i guess we'll go in through here uh how we're gonna get in oh sorry uh so here's my idea wordpress already comes with its wordpress api should we or could we use the api to put the data into the database instead of directly manipulating the database let me know what you all think so if we were to directly manipulate the database i would need to i guess be able to open up some type of tool to where i could read that database uh because doing it all from the terminal i think would be somewhat more difficult but at least if we use the api it should put the data in uh properly so i guess i guess i could try it um yeah let's try it the problem with the wordpress api is you really have to make sure you get a new tutorial or even make sure you're on the right set of documentation because it's changed so much since it you know they first were working on it uh there we go this one looks pretty new so hopefully this will work let me bring this over on the other screen so you all can see what i'm doing um let's see uh nick asks why am i not using sql server management um probably because i'm not exactly sure what that is uh so if i should be using it um let me know uh you know send me a link or point me in the right direction i'll check it out uh i'm not i guess i didn't say this yet i'm really really inexperienced when it comes to database stuff so that's why i'm kind of relying on on help from you all so i know there's some of you that have a lot more experience with databases so um if you came here to learn a lot from me you will be disappointed but the other people that are watching the stream and and talking in the live chat will probably be able to teach me and everyone else a lot so i'm going to do my best to take their advice and read that out and then try to act on that and i'm going to keep an eye on the clock just to make sure all right so we haven't even been going for an hour yet so this is not too bad uh let's see i want to api reference let's go to our posts all right i don't want to list pose create a post here's what we want okay just gonna create a post do we need um i suppose we need all of these uh i guess they don't need to be no there's no way we need all of it because some of these can certainly be blank and they'll still be opposed so let's um all right so we need to send a post request to this endpoint with this data all right not too bad all right so here's what i'm thinking uh let me let me check in the live chat for a second here to see if someone else has a better idea before i share what i'm about to do uh oh lennon has a question about specifying how fonts should degrade um you should be able to just put font family and then whatever font you want to display first will be first and then put a comma and then put in the next font and a comma in the next font um so you it could be something like um the first font would be uh roboto uh you would you need to put that i don't you wouldn't need to put roboto in quotes uh it's just one word uh so it'd be font family colon space roboto assuming you've already brought in that font uh and then comma space sans serif comma space um i don't know whatever i see you probably sans serif would be your second one if you wanted something else to fall back on in between there you certainly could put that in there but that's generally how you do it and that's with css uh so if you know you put that on you know whatever you know selector that that you want for those fonts to degrade so anyway lennon let me know if you need more info or something like that i can certainly uh address it again later on in the stream or you know send me a message on twitter uh you know show me a little bit of what you have that you're working with and maybe i can help you you know more specifically uh let's see so take a look on uh julian says take a look on docker and docker compose save you ten dollars on droplet and run everything locally you know what docker is a good idea i probably maybe we at some point should end up doing things with docker i'm just going to keep going with what i'm doing right now just to to save time but i think that is actually a great idea uh to use docker for something like this uh if you don't know what docker is uh it's a way to to set up um i guess you'd maybe call it something like a virtual server that can run on your machine it can be copied and so basically you have this um identical environment anywhere you put that that docker container so on the server on your local machine on someone else's local machine no matter what whether you're running uh linux mac windows no matter what type of server uh you would have an identical environment within that container so it's really cool but i don't i really don't want to try to set it up here um during the stream at least not during this stream maybe in the future one okay uh john boyce says i'll be interested in seeing how to use an api to import data into a new database okay so that's basically my idea now um so we did we x we did export the data so let's do this so we exported that data where's it at oh over here and let's go over yeah so we've exported all our data into this gigantic json file so what i was thinking was let's do um so i lost my train of thought i was reading something in the live chat apologies um vazquin says hello from spain hey how's it going thanks for joining us uh john hanson says in order to have consistent html content do you have to keep the styles simplified would it not be best to build a template in wordpress that all users need to use to submit with um yeah it'll be well i mean we'll you'll see when we get to that part it'll be similar to the way we've done things with pulling data from the wordpress api and that will give users um fields certain fields to fill out with um like validation on those fields so they will only be able to put in certain things that we want them to put in and they'll probably it'll most likely be some sort of approval process as well so we'll have you know student workers doing this but uh unless they're experienced they won't just be able to you know directly publish anything so there'll be some checks on what you know what kind of goes through there all right so here's what i'm thinking we create a and i'll probably do this i suppose in node because that's what i where i would know how to do this with let me know if there's a better way to do this if we could do it like you know straight from the command line or like a bash script or something maybe that'll be faster but what we would what we would do is we would grab all the sorry i think i just went off camera so lean back uh we'll we would grab just like we were hitting an api endpoint right we would grab data from this json file pull it in we'd iterate over that and each time we'd iterate over that we would call this api endpoint and we would post it because i'm it i don't know if there's a way to bulk do post yeah so unless we find some way to do bulk edition of posts with the api we will have to do it one by one but it would iterate through that and then using this it would send a post request to our site so that's how the flow of data would go um from sql server to json um pull the json into node send it as a post request to the wordpress api and then the wordpress api would insert that into a my sql database underneath the wp post table the nice thing that i like about this is that potentially like we're going to have differences between the the fields that we have here and what we have in our other other database so um for instance you know when we have you know not all these match up properly i don't even know if these dates are in the right format right but what we could do is when we do that iteration every time we pull in data from the json file we could have you know some mutations of the data going on uh so we could have something that like and this is a prime example our column where it has content type which i can't find right now here we go content type i don't want the post type to be one in wordpress right it needs to be a string a name of that post type so we could have something in there that would check if content type is one then make the field post type i'm assuming there's a field called post type in here somewhere um i don't know what to find it um either have to find it or we may have to modify the api yeah we may have to modify the api not a problem we don't need to do that right now so what we either do is download a readymade plugin that can handle that or we can just write a plugin ourselves probably depends on i don't know does anybody really want to go through writing a php plugin not today but in the future um a future stream let me know i'll think about it uh maybe we'll do that uh anyway it would change that data so anytime let's say the content type was one instead it would make the the post type for wordpress i don't know um let's say faculty members right because we would have a post type for faculty members so we could display their bios and stuff on on the page so right does that make sense um i don't know uh let me know if it doesn't make any sense at all it'll probably make sense once we do it um so let's let me think where should we run this suppose we could run this right on our local machine right is there any reason why we couldn't we have node on this machine we could most certainly make a node a javascript file run it in node and it could handle all that uh the only thing i'm worried about slightly is i mean let's say we add like 9000 posts can the wordpress api handle that much all at once especially on a 10 droplet i don't know we could maybe set a timeout and um just let it go for a long time uh or i'm sorry uh you know what i mean like an interval right so it would only try to send a post i don't know every 10 seconds or something right that should be enough time all right so let me catch up here on the live chat quickly and make sure i'm on the right track here okay so nick has clarified sql server management studio is an integrated environment for managing any sql infrastructure you can use it to access configure manage administer and develop all components of uh sql server okay that's cool i may uh look into that then at some point maybe after the stream today or sometime tomorrow if i can okay alberto says it sounds pretty easy to use the api since we already have the json file yeah as soon as i saw that i could export it to json in one click that was immediately what i thought about was just use the api um console snippets okay nick says but if you're focused on t sequel um microsoft um sql operation studio is better for some good code snippets customizable server and database dashboards okay um ein bishn says uh what are you using to call and store uh in the database um this so this is what i'm using i i assume this is what you're asking about correct me if i'm wrong this is microsoft's sql operations studio and i just found out about it yesterday but it's an electron uh app so it runs as a desktop app and i like it so far i don't really have much to compare it to the only other thing even remotely like this that i've used is like php my admin or whatever it's called uh and so far i like this a lot better okay so post types is on the left column oh okay cool thank you um daniel notice post types on the left column here interesting so example requests i don't get em list types retrieve a type oh you know what here's what i think we can do i'm not 100 sure that we could do this by default we still may need a plugin but potentially we could as long as we create the post type yeah we should be able to do this so i don't know how many of you were watched the last time we created a custom wordpress plugin but we with that plugin we created custom post types and then we enabled them to use the wordpress api and that's how we got data from them i'm assuming that if we enable the api we enable all of it so we can also pass data in so what we would end up doing is let me zoom in instead of for those types that aren't posts which most of them won't actually be post because we're not even going to have a blog on the site there'll be something else so it would be wp v2 and then here we would say right and that would be the name of the type so it wouldn't be post and then a type over here it would be an entirely different uh word right here so i'm i'm almost positive that that will work and great all right great and uh so uh daniel thank you so much for mentioning that because now once i saw it it all came back to me it has been a little while since we've worked with the wordpress api let's see uh um says it the alternative uh i'm paraphrasing some uh hope you don't mind alberto see the alternative to uh doing it through the api like i just described would be generating uh the table uh and inserting data scripts and then potentially modifying the file to match the mysql syntax so umberto yeah for me trying to think about doing that i have no idea i'd have to look up every step of the way but i am very familiar uh with the wordpress api so even if the wordpress api wouldn't be the ideal way to do it for our purposes right now and for my capabilities it's probably gonna end up being the shortest way to do it let's see uh mike wes if all the data was in that one table yeah pretty much yeah um so this table a lot of rows i don't want if this number down here is the correct numbers 9683 rows so this is it the the content table i mean as it seems has all the content for the site uh we can check out some of the other tables as well let's see oops where was it at there we go um so there are quite a lot of tables here so let's just check it out quickly uh that way you know some of you who maybe are um more familiar there we go i'll make this obscenely big for a minute just so you all can see um so a lot of these tables i imagine are are pretty much empty because we don't actually use any of those features on the on the site right so we have uh request template we don't have to worry about any of the template stuff because that's not being carried over any user stuff we don't have to worry about most a lot of the users aren't even working here anymore because they're student workers and they've graduated uh status same way like approval things assets i don't think we'll worry about assets events i might have to check out this content events because we have used some of their event things but the thing with the events is once the event happens it expires and we don't really need it anymore so we may not even bother pulling in events because we don't really need the old events why i take that back we might just export the um the json for the events but we won't while they're putting it in uh the wordpress installation because we won't need them it might be nice to have them all right cool so my um the uh the accountant here that's franciscan university of steubenville that just uh came into live chat i'm pretty sure that's um brian who works here with me he's a full stack developer so uh brian says the he knows a lot more about the content than i do so uh it seems that we don't need to worry about the events um rook asks how big the entire database uh is i don't really know but um the database uh guy from it who's really nice guy and came over and helped me this morning he said that 80 of the size of the database is in the um the versions so like the archive which i think is it it saves a history of all the changes which we don't need any of that so we could we don't have to worry about 80 percent of the stuff in here for sure and then of the twenty percent that's left over most of it is in this content um table here so like i said the content table is really the vast majority of all we need to worry about let's see calendar i don't think we yet we use the calendar we only use member subscriptions yeah this kind of thing device configuration stuff we won't need i don't know that we use the categories extensively enough they'll change we don't need that this is the content uh table that we have open right now and so this is just some some stats and things we don't need any of that is it content history maybe it's content history that's that's quite large as well so coupon currency customers we don't do any ecommerce yeah i think we are we're not going to need these uh most of these sorry i'm scrolling through pretty quickly i'm not sure if y'all can even see i'll definitely run this by i'll have um uh brian take a look at it since he knows more about the site and probably my boss as well just to scan through and see if there's anything else that looks like it might be something we need but it does not look like it okay let's see uh immission says is your data stored in wordpress and that's why you need to use the wordpress api now i want to put it into wordpress so that's why we're using the wordpress api uh michael asks is it an archive uh or a backup um yeah it's it it's a copy of the current database that's in use with you know we just have readonly access to it daniel says not like eight gigabytes in a comments table so you're good yeah we don't have comments enabled anywhere so we don't have to worry about it okay all right so i think we're good michael s how often do you do the backup i have no idea because we don't we don't handle the backups um i t if there are backups it handles them so i i don't really know this backup was made uh very recently i think within the last few days okay let me check the time and then see what we can accomplish okay let's just take a look let's take a look what we need you know what we could maybe uh start to write some of the node uh code but we can't run it because i can't remember the password that i used to log in here uh so it's not it's not going to work unless i can can remember this password um it's possible that it just wouldn't let me log in because i was trying to create something so i guess we can make some of the uh yeah we can do some of the code we can test it out with the password as i think it is and then if it doesn't work it doesn't work we'll um i'll wait till i get my other account we'll go back to it see michael says are you hiring i have to work remotely though unfortunately we're not uh we don't hire remote workers uh if we did i'd probably be sitting at my house right now um but uh yeah if we ever i hope that we can start to hire remote at some point uh at least for developers and if we do start that i will definitely let all of you know uh in the stream uh julian says i recommend to look on the wpcli put the content of each post into a file then create posts from the content wp post create post context first category and do it in bulk okay that's actually that's not a bad idea uh my question then would be though uh assuming that we have to manipulate some of the data and change it would it be i'm just at some point we'll have to do that right so would it make it easier to do it like that um i'll have to look into it more i suppose i think right now it is worth it to um do do a little bit of stuff in node just right now uh just to get an idea of you know is is this even possible all right so let's go to one of our editors here since we're dealing with microsoft stuff let's let's bring up uh let's use visual studio code and i have our electron project up but for now i'm just going to open a new file and let's pull in let's yeah let's save this and in projects and let's call this let's do a new folder tv migration create and then within here we'll just call this um migrate.js okay great what message am i getting here whoa excellent for single drops and globally okay i'm not really worried about eslant right now um let's see uh nick s does the database have any kind of uh mapping tables i i don't really know to be entirely honest i'm not even sure what the mapping tables are envision says isn't it isn't it great that you can broadcast at work how boring would it be otherwise yeah it does make things a little bit more exciting when everybody can see me mess up all right so actually let me take i could probably pull some of our our node code that we've used earlier let me think if we used now i'm thinking we need to import and use uh i'd like to use node fetch to somebody being more complicated than i'd hoped um all right well i can at the very least plan out what we're gonna do and then we can go from there see if we can code anything out so we need to this um we should probably um try again okay um so this is my basic plan uh we'll get the data uh we'll probably can run a filter if we really wanted to which it may end up being useful to just to run the filter we could either filter here or we could go over here and when we actually do our query we could try to only select things that we want we'll get a much smaller file so i'm thinking of things that you know inactive content um you know content that's expired or just content that we have no intention to to bring over to the new site so however we do it here or here whatever we want to do we do need to filter out the stuff we don't need no sense in making those posts if we don't want them anymore and then we'll go through uh make the changes like we talked about so that the data is in the correct format that we need to send it so then we'll send that post request and the last part here i think it'd be a good idea obviously to check for errors right we'll get a message back saying whether or not we succeeded in our request to um to make a new post so if it fails you know possibly we would we could try again you know wait a certain amount of time try again uh and then you know if it fails twice at that point we can just log log the id that way we can we have a record then of you know what didn't go over i'm hoping that the list of stuff that didn't work will be small if it's a long list that's going to be a pain okay so umberto is saying uh so i think it's better to modify that in in the node uh code so here uh with javascript uh doing it in one place uh rather than find and replace in a text file that's cool i agree and i'm i'm much more comfortable editing it you know through uh through note i mean think about how many times we've done the same thing you know in our react components when we've made an api call and change things in the data before we rendered it right so this will be very familiar to us let's see next thing get the data from the json with bulk and uh open row set all right nick i'm interested in hearing more about that because i'm not exactly sure what what the benefit is from that or or anything but uh if you could explain it a little bit more to me since i'm my knowledge of this kind of thing is very limited i would i would appreciate it now daniel says unless you've got that client that says i need everything yeah luckily my boss is perfectly fine with getting rid of all the stuff that we don't need like i said i think it's worthwhile to save everything in at the very least save it in json format and then you know keep backups of that so that at some point if we ever really need to find a piece of content it wouldn't be that hard to just search for it um i don't want to keep these databases alive you know as is anywhere because that takes up you know the this website these databases are hosted physically on campus by the it department so it would save them time and money they'll be able to reuse those servers for other things if we could just completely get rid of it all so that's the plan so any backups that we want i guess at first we could do a test yeah let's do a test all right let me see what time first let's see i'm going to bring in node fetch because i like to use fetch i'm not really interested in doing it any other way let's see uh i guess i'll have to um init this project then with all right let's go in in the console this is kind of why i i'm wondering whether or not i should uh i should do this there we go um let's see the immigration there we go what if i could just type yarn will it in it all right there we go question name db yeah that's good that's good that's good issue whatever all this stuff i guess doesn't even really matter yep true right there we go okay so now let's do yarn add npm i mean node okay wonderful oops let's go with okay um let's pull in that um that file and put it in the right spot so right now we just have that in documents and i want it in a project so sorry this is really small probably hard to see but let's just pull this over here we called it results dot json yes so let's pull that over and i'm not even going to make folders this is so this is basic we don't even need folders for this i am going to make it lower case because it bothers me um there it is we have our results json great all right so let's go edge no you like look at an example it's been so long since i've actually wrote one of these from scratch all right let's check this out trying to get the last project where we did this i think we've used this in pretty much every project yeah um we've done this with the bulletin the react version of the bulletin so let's check that out and we're using node fetch there all right cool i'm going to copy and paste this over here we've got quite a lot going on here so um we need let's do all right i'll explain a little bit of this so do you even need this no we don't need all of this so let's get rid of this uh we can get rid of that i don't like the semicolons so let's get rid of this fetch okay this should be what we need um no it's should just be actually we don't even need most of this all right yeah i think we're doing we're doing very different things uh okay um now obviously we can't use async await unless i i put in let me check back here and make sure i'm not doing something ridiculous okay yeah let's put back in this and we'll take this out there we go um leave that on another line right now and then let's return let's go with actually you know what i think we did this exact thing in a previous project which project was it it's the resource center let's check it out it's really nice to have all these projects that we've done uh to just be able to go back to and say oh we've we've done that all right so it wasn't we weren't doing it in node but it should still work the same all right let's do this oops imports just call this data from there we go now i don't even need to worry about any of this stuff yet um let's get rid of it but then let's set it down here because we will be using fetch for our post request but for now we can just grab the data let's see tabs okay all right so let's just go just to make sure that we're actually getting the data let's console blog and let's go data where's my format okay all right i'm not sure if this will work but it's worth a shot let's go back to our terminal wherever that is okay um so we're in here let's go node whoa let me make this bigger sorry everybody all right syntax error import unexpected imports oh shoot maybe i can't use that syntax in here let's do ah it's automatically is it automatically putting in semicolons i thought i keep kept taking it out of there i need to change my settings um okay let's try this now nope can i find modular results oh shoot it's not a module okay we got to change this and make it a module so where's our all right i if i just double click it in here it should work language results it's gonna be a huge file wow wow oh did everyone just see that speed i'm really impressed i mean this is gigantic file wow good job visual studio code why do i why is this not highlighted properly it should be um interesting okay um so let's do data and let's change this because now it's going to be a javascript file and we're going to change i need to rename it why can i not rename this thing all right let's just rename it from here then great deleted from disk great there we go let's do i don't know if i'm not getting highlighting because the file's just too big and it's taking forever i don't know all right let me check back here for a second okay cool all right nick i see uh nick explained a lot more about what he's talking thanks nick i'm definitely gonna look into um more of what you're talking about okay thanks umberto i i understand so umberto was explaining a little bit more about he's talking about us i appreciate that i'm not even sure if this is correct syntax and will work but i'll give it a shot if it's not if it doesn't work out then i'll double check actually what am i thinking i can definitely double check right now because i have a data file that has the same thing on my other screen that we used for project what was it was it project i can't remember i think project three whatever the resource center react project was uh yep that's it that is the correct syntax see i should have just tried it and then i would have looked uh more intelligent i suppose all right so let's let's do this though uh let's go back into here oops nope that wasn't it we'll go into here and you know we really need what happened before i tried to all right let's just see if this if this actually will work this is not exactly how i was bringing in bringing it in no it shouldn't this is probably not gonna work but it'll only take a second to run it again yeah it doesn't work so since yes let's see cannot find results that you have now should i throw in a dot slash is it could it be that easy whoa yes all right cool export costs all right so now it's upset that i'm exporting it all right all right can you use can i use import in node i don't know let's just try it oops not required all right let's try that out let's switch the token import okay i guess i can't i can't use that with node um all right so cool so rook saying module exports and node not x okay cool um let's see i don't know i just suck so uh christian um said you might also have some fun coming up with uh the fact that all the numbers seem to have been parsed to strings didn't notice that before but you are correct all right module dot exports and node not export all right so let's switch it up then um so um rook is this what you're saying to do it more like this module exports and then what i have to do module import i should just look up the syntax i don't know what i'm that's really important oh okay so i got the uh all right let's see also import this is not letting me no that's not all right i'm gonna have to look this up uh moto exports in the results cs file and then dot require in the migrate okay so i do have to do require all right so let's just jump back here oops there we go all right require and then module exports all right let's see see what this is done oops exports okay thank you rook so much this is super helpful so rook is actually typing in the correct syntax that i need whoops i'm in the wrong file so i don't need all this i can just do module exports and then that should work awesome thanks again rook that was like super helpful whoa yeah check it out yes okay that part is working oh my goodness there's so much okay so i'm trying to scroll up so we can see the top okay so here's what we did if you remember our migrate people the wrong way or migraine.js file all it was doing was grabbing this the data from our json data which now is is in a javascript file so it's just an array of objects right and i just wanted to console log the first uh object in that array and it has done that right we could double check this in fact is that that object so we we have all of this right awesome awesome and we could potentially to take it a step further um just to test out some of the things that we want to do let's go with let's just see if this works so i want to grab this content id and let's try this i still want to do a console log but first i want to do data.filter and we want to do object and we're going to do object dots what was that field called content id content id equals let's go whoops i already copied that there we go no that's not it huh it's just not gonna work for me here i'm gonna have to do it like this man i've been reviewing other people's code for way too long instead of writing it from scratch i've been spoiled by you all i can't remember any syntax all right let's just say that the goal is i should get back the same result as i had before but what we're doing now is making sure that we can filter this stuff out so it's basic it should work assuming i got the syntax right which is i don't know we'll see this should okay um so we didn't pass this i'm doing wrong i need uh all right let's do it like this post post all right see if that works yeah that worked okay i always get confused with filter and and how to access what it returns but i know if i use filter and map together it always works um okay sorry rick i just saw that now so um i did not have to do it that way but it it it proved the point of at that point what we've done there is we're actually able to filter out and just get one of those now we obviously wouldn't want to filter by content id right but we would want to filter by some of those other fields that we had talked about before um such as uh like post type or whatever the equivalent is called i think it's called content type or something yeah we might oh sorry you might want to filter by date you know different things like that i'm going to have to give so i'm not going to code out the rest of this because it's about time for me to leave and go home um so i'm not going to code the rest but you can see basically how it's how it's going to work right so this part here should not be an issue we just follow the instructions on the api documentation and that should you know it should work this is basically we've already done everything that we want to do for the most part it's just a matter of making it a bit more complex doing more filtering uh and then you know mutating you know the data somewhat um yeah so we actually didn't need to get the data so that part for whatever crazy reason i was attempting to use fetch to get local data that was just going to be in a static file so thank you for bearing patiently with me i really need to change this i can't stand these semicolons but anyway thank you for being patiently with me as i shrugged through that very basic node file there um but it's it it basically works and i was really worried about that size of that that json file like what the heck is going to happen when i run this and you saw it it didn't take very long so i i'm i have a lot more confidence now it may not seem like it but we've come very very far uh in terms of having a clear idea now of how exactly we can transfer the data and you know at least into wordpress so it still remains to be seen whether or not we will go with wordpress but right now it's definitely the front runner for the cms and i can't really can't afford to wait too much longer to make a decision so wordpress might end up being just the default because i haven't found anything else that's that i like to use so i'd say it's a pretty good possibility that we're going to be doing we're going with wordpress at this point and now we know at least from the first part you know we can be pretty confident that this is going to work um yeah so anyway i definitely got a lot done there's a lot i can go tell my boss now that has been tested and that works and uh he he will be very happy with that as well as you know a lot of the other people here involved in the project will be very relieved because this was the big question it was always you know i can definitely get this done by february assuming that we can get the data transferred over that was always the big if that was the caveat so now it looks like that'll work out so i'm very confident we can get this project delivered on time okay cool brian says keystone.js is a js based cms i have looked at keystone before i need to look at it a little bit more in depth and maybe actually install it and play with it the last time i checked it was i'll have to double check it's been a while it's been a while since i've used it i'll have to check it out again i'm sure it's been updated since the last time i i really kind of dug into it so um i will definitely check that out very soon because we need to make a decision on this but anyway thank you so much for sticking around there's actually not that many people left in the stream um it seems that databases is not a popular topic for videos based on the amount of people that came in uh lower than normal but you know to all 16 of you who have stuck around to the end thank you very much i should be back tomorrow i i haven't really checked my schedule for tomorrow so hopefully i can stream at my normal time uh thank you so much again uh i'm i'm probably look tired right now but i am actually really happy this is a big relief that we figured so much of this out and i i don't think i couldn't have could have got this far this fast without your help so most likely i'll i'll be back tomorrow and um until then have a wonderful day
