With timestamps:

00:00 - hi everyone welcome to this tutorial on
00:02 - using mongodb with Entity framework core
00:04 - in C I'm Bo K and I'll be teaching this
00:08 - course I'll start by giving you a brief
00:11 - introduction to mongodb and an
00:13 - introduction to Microsoft's Entity
00:15 - framework core next I'll cover how to
00:18 - use the mongodb EF core provider after
00:22 - going through technical details with
00:24 - some basic examples we'll create a full
00:26 - project with mongodb and Entity
00:28 - framework core so you can see how
00:30 - everything works together the project
00:33 - will use mongodb Atlas sample data to
00:35 - create a restaurant reservation
00:39 - system mongodb is a popular nosql
00:43 - database designed to handle large
00:45 - volumes of data and provide high
00:47 - performance scalability and flexibility
00:50 - unlike traditional relational databases
00:53 - mongodb stores data in flexible Json
00:56 - like documents this document oriented
00:58 - approach allows for the storage of
01:01 - complex data structures in a more
01:02 - natural and intuitive way in mongodb
01:05 - data is stored in collections which are
01:07 - similar to tables in relational
01:09 - databases but without a fixed schema
01:12 - this means you can have documents with
01:14 - different structures in the same
01:15 - collection this flexibility is one of
01:18 - the key advantages of using mongod Tob
01:20 - especially when dealing with
01:21 - unstructured or semi-structured data
01:24 - let's take a look at an example of a
01:26 - mongodb document imagine we have a
01:29 - collection called users that stores
01:32 - information about users in an
01:34 - application here's what a typical
01:37 - document might look like in this
01:39 - document we have various Fields such as
01:41 - name email age and address the address
01:44 - field itself is an embedded document
01:47 - containing multiple subfields like
01:50 - Street city state and zip Additionally
01:52 - the Hobbies field is an array of strings
01:55 - while this looks like Json mongodb
01:57 - stores data in a binary format called
02:00 - bon or binary Json bson extends the Json
02:04 - model to provide additional data types
02:06 - such as integers floats dates and binary
02:08 - data this binary format is optimized for
02:11 - performance and flexibility allowing
02:13 - mongodb to efficiently store and
02:15 - retrieve data another important feature
02:18 - of mongodb is its ability to scale
02:21 - horizontally this means you can
02:23 - distribute your data across multiple
02:25 - servers making it easier to manage large
02:27 - data sets and Ensure High availability
02:29 - MDB also supports Rich queries indexing
02:33 - and aggregation making it a powerful
02:35 - tool for a wide range of applications
02:38 - for example you can perform a query to
02:40 - find all users who live in a specific
02:42 - city mongodb is widely used in various
02:45 - industries from e-commerce and content
02:48 - management to realtime analytics and
02:51 - Internet of Things applications its
02:54 - flexibility and scalability make it an
02:56 - excellent choice for modern applications
02:59 - that need to handle diverse and dynamic
03:02 - data now that we have a basic
03:05 - understanding of what mongodb is and why
03:07 - it's popular let's move on to another
03:09 - essential tool in our Tex stack
03:12 - Microsoft's Entity framework
03:17 - core Entity framework core often
03:20 - abbreviated as EF core is a modern
03:23 - object database mapper foret it allows
03:26 - developers to work with a database using
03:28 - net objects eliminating the need for
03:31 - most of the data access code that
03:33 - developers usually need to write EF core
03:35 - is a lightweight extensible and
03:37 - crossplatform version of the popular
03:39 - Entity framework data access technology
03:43 - it supports a variety of database
03:45 - engines including SQL Server SQL light
03:48 - and mongodb one of the main benefits of
03:51 - using EF core is that it enables
03:52 - developers to work with data in a more
03:55 - intuitive and objectoriented way instead
03:58 - of writing raw SQL query you can
04:00 - interact with your database using link
04:02 - the language integrated query and
04:05 - strongly typed classes let's take a look
04:07 - at a basic example imagine we have a
04:10 - product class here it is pretty simple
04:13 - with just three Fields using EF core you
04:16 - can create a context class that
04:18 - represents a session with the database
04:20 - and includes a DB set for each entity
04:22 - type you want to query or save this code
04:25 - defines a class named appdb context that
04:28 - inherits from entity framework cores DB
04:31 - context class this class is used to
04:33 - interact with the database inside this
04:36 - class there's a DB set product property
04:39 - called products which represents a
04:41 - collection of product entities and
04:43 - corresponds to a table named products in
04:46 - the database the onc configuring method
04:48 - is overwritten to configure the database
04:51 - connection specifying that SQL Server is
04:54 - the database provider but you can also
04:57 - use other databases besides s server the
05:00 - method uses an option Builder to set up
05:03 - the connection with a placeholder for
05:05 - the actual SQL server connection string
05:08 - this connection string obviously should
05:10 - be replaced with the real one containing
05:12 - the necessary details to connect to the
05:15 - database when you create an instance of
05:18 - appdb context in the application it uses
05:22 - this configuration to perform operations
05:24 - like quering or saving product entities
05:27 - in the products table with this setup
05:29 - you can perform crud uh create read
05:31 - update delete operations using EF core
05:34 - for example to add a new product to the
05:36 - database you can use this code this code
05:38 - demonstrates how to add a new product to
05:40 - the database using NTI framework core an
05:43 - instance of appdb context is created and
05:45 - within this context a new product object
05:48 - with the name laptop and price
05:50 - $999.99 is instantiated this new product
05:53 - is then added to the products collection
05:56 - managed by the appdb context finally the
05:59 - save changes method is called to save
06:01 - the changes to the database effectively
06:04 - inserting the new product into the
06:06 - products table to query products you can
06:09 - use Link this code also demonstrates how
06:12 - to query the database using Entity
06:14 - framework core an instance of app DB
06:17 - context is created and within this
06:19 - context a query is made to retrieve all
06:22 - products with the price greater than 500
06:25 - the results are stored in a list called
06:26 - products then a loop iterates through
06:29 - each product in the list printing the
06:31 - name and price of each product to the
06:34 - console EF core takes care of
06:36 - translating these link queries into the
06:39 - appropriate SQL commands for your
06:41 - database this makes data access simpler
06:44 - and more maintainable EF core also
06:47 - supports Advanced features like change
06:49 - tracking lazy loading and migrations
06:52 - which help you manage database schema
06:54 - changes over time in summary EF core is
06:58 - a powerful omm that simplifies data
07:01 - access and net applications by allowing
07:03 - you to work with your data using net
07:06 - objects and Link its support for
07:08 - multiple database engines and its
07:12 - extensibility make it a versatile choice
07:14 - for a wide range of applications next
07:17 - we'll see how the mongodb EF core
07:19 - provider Bridges the gap between mongodb
07:22 - and EF core allowing us to use the
07:24 - familiar EF core patterns with a mongodb
07:27 - database
07:31 - The mongodb Entity framework core
07:34 - provider is a tool that enables
07:36 - developers to use mongodb with Entity
07:39 - framework core combining the flexibility
07:43 - of mongodb with the familiar API and
07:45 - design patterns of EF core this provider
07:49 - allows you to work with mongodb using
07:51 - the same code first and Link query
07:54 - methodologies that you would use with
07:56 - relational databases streamlining
07:59 - development and reducing the learning
08:01 - curve for those already familiar with ef
08:04 - core the mongodb EF core provider
08:07 - Bridges the gap between mongodb and EF
08:10 - core by supporting basic crud operations
08:13 - link queries and embedded documents
08:15 - among other features here are some key
08:18 - capabilities code first workflows you
08:21 - can Define your data models in C and use
08:23 - EF core to generate the mongodb schema
08:26 - rather than starting with the database
08:28 - schema and generating code from it this
08:31 - is particularly useful for developers
08:33 - who prefer to manage their database
08:36 - structure through code crud operations
08:40 - the provider supports basic create read
08:43 - update and delete operations for example
08:46 - you can add a new record to the database
08:48 - using the same code we saw earlier link
08:51 - query support you can use Link to
08:54 - perform queries against mongodb allowing
08:57 - you to leverage your existing knowledge
08:59 - of C sharp and.net to interact with the
09:01 - database change tracking e of course
09:04 - change tracking capabilities are
09:06 - supported enabling automatic detection
09:08 - and saving of changes made to your data
09:12 - entities embedded documents the provider
09:15 - supports embedded documents allowing you
09:18 - to store related data within a single
09:21 - document which is a common pattern in
09:24 - mongodb class mapping and serialization
09:27 - your C classes are mapped to mongodb
09:30 - collections with support for various
09:32 - data types and serialization settings to
09:35 - ensure that data is stored
09:40 - correctly now we'll go over a quick
09:42 - example on how to use the mongodb EF
09:45 - core provider and later we'll create a
09:48 - full project in Visual Studio code so
09:51 - you can see everything in context in
09:53 - this section we'll explore how to define
09:55 - data models and perform crud operations
09:59 - using the mongodb Entity framework core
10:01 - provider with mongodb Atlas this
10:05 - integration allows you to Leverage The
10:07 - flexibility of mongodb with the familiar
10:10 - patterns of EF core to get started you
10:13 - need to add the necessary new get
10:15 - packages to your project these packages
10:18 - allow your application to interact with
10:20 - mongodb through EF core using the same
10:23 - context and entity definitions you would
10:24 - use with a relational database before
10:27 - you can perform crud operations you need
10:29 - to set up a mongodb atlas cluster and
10:32 - connect your application to it here are
10:35 - the steps note that we'll be going over
10:37 - these in detail when we create the
10:39 - project soon first sign up for a MB
10:41 - Atlas account you can sign up for a free
10:44 - one at their website next create a new
10:47 - cluster mongodb Atlas provides a free
10:49 - tier that is perfect for development and
10:52 - smallscale applications then you get a
10:54 - connection string you can obtain your
10:56 - connection string from the mongodb atlas
10:58 - dashboard it will look something like
11:00 - this so after getting set up on MB Atlas
11:03 - time for the code you need to define a
11:05 - class using a model for your entity for
11:08 - this example we'll create a customer
11:10 - class this customer class represents the
11:12 - structure of the documents stored in the
11:14 - mongod DB collection to begin using
11:17 - Entity framework core create a context
11:20 - class that derived from DB context the
11:23 - DB context derived class instance
11:25 - represents a database session and is
11:28 - used to query and save instances of your
11:31 - entities the DB context class exposes DB
11:34 - set properties that specify the entities
11:36 - you can interact with while using that
11:38 - context this example creates an instance
11:41 - of a DB context derived class and
11:44 - specifies the customer object as a DB
11:47 - set property with the mongodb EF
11:49 - provider you can use a code first
11:52 - workflow this means you define your
11:54 - classes first and EF core will handle
11:57 - the creation and management of the
11:59 - underlying mongodb schema this is
12:02 - particularly useful for mongodb which
12:04 - does not enforce a schema allowing for
12:07 - flexible and dynamic data
12:10 - structures once we've created a DB
12:12 - context class we need to construct a DB
12:15 - context options Builder object and call
12:17 - its use mongodb method this method takes
12:20 - two parameters a manga client instance
12:22 - and the name of the database that stores
12:25 - the collections you are working with the
12:28 - used mongu DB method returns a DB
12:31 - context options object pass the options
12:34 - property of this object to the
12:36 - Constructor for your DB context
12:41 - class now let's see how to code the crud
12:44 - operations we'll just focus on each
12:46 - operation individually to create a new
12:49 - document in mang you use the ad method
12:52 - on the dbet and call Save changes here's
12:55 - an example of creating a new customer
12:58 - this code creates a new customer
13:00 - instance and adds it to the customer's
13:03 - collection the save changes method saves
13:05 - the new customer to the mongodb
13:08 - database to read documents from The
13:11 - mongodb Collection you can use Link
13:13 - queries on the DB set this is an example
13:16 - of retrieving all customers this code
13:19 - retrieves all customers from the
13:20 - customer collection and prints their
13:23 - details to update an existing document
13:26 - you retrieve the document modify its
13:29 - properties and call Save changes here's
13:32 - an example of updating a customer's
13:35 - order this code finds the customer named
13:38 - boars and updates their order to
13:42 - smartphone to delete a document you
13:44 - retrieve the document remove it from the
13:47 - DB set and call Save changes here's an
13:50 - example of deleting a customer this code
13:54 - finds the customer named Bo KS and
13:57 - deletes them from the customer
13:59 - collection EF core's change tracking
14:02 - capabilities are fully supported
14:04 - enabling efficient updates to documents
14:07 - when you modify an entity and call Save
14:09 - changes EF core will generate the
14:12 - necessary mongodb commands to update
14:15 - only the changed Fields by using the
14:18 - mongodb EF provider you can seamlessly
14:20 - integrate mongodb's flexible document
14:24 - model with ef core's robust om
14:27 - capabilities providing a powerful tool
14:30 - set foret developers to build modern
14:36 - applications now let's put everything
14:38 - together and develop a full restaurant
14:41 - reservation system from scratch so let's
14:44 - see how to use mongodb with ef core in a
14:48 - real world project well this is kind of
14:50 - like a demo project we're going to make
14:52 - a restaurant reservation system and we
14:56 - are going to use some sample restaurant
14:58 - data data that mongodb provides so
15:02 - before we create our project let's get
15:06 - our database set up so this is free we
15:09 - just have to sign in or sign up now if
15:12 - you're signing up for the first time it
15:14 - may make you set up a project as far as
15:17 - part of the sign up process or we can
15:19 - just go to new
15:21 - project and I'm going to call
15:25 - it rest res for restaurant reservations
15:30 - and then we'll just go through this
15:32 - process here of signing
15:34 - up and then I just need to create a
15:37 - cluster and I'm going to create a free
15:42 - cluster and I'll just set all this the
15:44 - rest of this to default you can also
15:46 - change the region to get a region that's
15:49 - closer to where you live and I will do
15:52 - create
15:54 - deployment and we have to make sure our
15:57 - IP address is added and so it's going to
16:00 - add it's going to automatically add your
16:02 - local IP address but if you're switching
16:06 - systems you may have to make sure your
16:09 - IP address is is Whit listed so you can
16:12 - connect from that IP address and then we
16:14 - need a database
16:16 - user and then I'll just create the
16:18 - database
16:20 - user and then we can choose a connection
16:23 - method now we're going to be coming back
16:25 - to this but we're going to need this
16:27 - this mongu DB uh URI but I'm going to
16:32 - copy that later so I'll just click done
16:34 - for
16:35 - now and I'm going to click add data and
16:39 - then the load load sample data so this
16:43 - is great for any projects that you're
16:45 - working on and when you're learning you
16:47 - don't need to find your own data
16:49 - somewhere you can start with a sample
16:51 - data set and that makes learning how to
16:54 - do things with mongodb a lot easier so
16:57 - we're just going to start with a sample
16:59 - data and so when we create the project
17:01 - there's already going to be a lot of
17:02 - data to work with we're specifically
17:05 - going to be using their restaurant
17:08 - database but they have a lot of other
17:10 - data you can work with and this actually
17:13 - has a bunch of so this has eight sample
17:15 - data sets so you can see them all here
17:18 - here's all the different sample data
17:19 - sets you can work with we will be using
17:21 - the sample restaurant data set but it's
17:23 - going to load all of them into the
17:26 - database so our database is still being
17:28 - set up in the background right now so
17:31 - let's get our project set up now there's
17:33 - a few different ways we can create a
17:35 - project some people may be using visual
17:38 - studio some people may be using visual
17:40 - studio code now since I'm running on Mac
17:43 - OS a visual studio they're I guess not
17:47 - they're deprecating Visual Studio on Mac
17:49 - OS and it's going to be mainly focused
17:50 - on windows so I'll be using visual
17:52 - studio code now Visual Studio Works more
17:55 - out of the box for C projects and
17:57 - asp.net project projects but Visual
18:00 - Studio
18:01 - code also works you just have to install
18:04 - the right extensions so if we go to the
18:06 - extensions you're going to make sure to
18:08 - install the C dev kit and when you
18:12 - install the C dev kit it's also going to
18:14 - install some other things like the C
18:17 - support and some other things and once
18:20 - you get this installed it's going to
18:21 - take a while to install but it's helpful
18:24 - to go through this walkth through it
18:26 - should appear right here on your welcome
18:29 - screen and then it's going to have a few
18:32 - things you have to do like connect your
18:34 - account set up your
18:36 - environment um I guess open your folder
18:39 - that's to open if you already have a
18:41 - folder you're going to use but we're
18:43 - going to actually create a new net
18:45 - project so now that we have the C devkit
18:50 - installed we can create our new project
18:53 - so I can either click this button or I
18:55 - can go to the command pet pallet you can
18:58 - use the shortcut key or go to view
19:01 - command pallet and then we just have to
19:04 - search
19:06 - foret new project it's already showing
19:08 - at the top for me because I've recently
19:10 - used that so I'll select new project and
19:13 - then it's going to give us some
19:15 - different templates we can use so for
19:18 - this example we're going to use the net
19:21 - core web app model view
19:23 - controller
19:24 - template and then we can uh name the new
19:28 - project I'm going to name
19:31 - it rest res so restaurant
19:36 - reservation and then press escape and
19:39 - then I'm am going to choose the default
19:42 - directory I already opened this Visual
19:46 - Studio code in a directory so it's going
19:48 - to save in that
19:50 - directory and then I will create the
19:56 - project okay so now you can see it's
20:00 - creating all these project files here
20:03 - now this is one good thing about asp.net
20:06 - core it's a very flexible web framework
20:10 - and it allows to scaffold out different
20:12 - types of web applications that have
20:14 - slight differences in terms of their UI
20:16 - and structure like I said we're using
20:18 - the MVC project and this is going to
20:21 - make use of static files and controllers
20:24 - but you could also do other things like
20:26 - react but MVC with the chtml files which
20:30 - we'll see later are the most commonly
20:32 - used now if you're not on vs code you'll
20:36 - be using visual studio and there's some
20:39 - different ways that you need to create
20:40 - your project or you can use the command
20:43 - line interface so if you go to the
20:47 - article that I have linked to in the
20:49 - description you can see the commands if
20:52 - you want to use the net CLI to create
20:55 - the project and now that we have this
20:58 - project created we want to go ahead and
21:00 - add the required new git packages
21:03 - depending on whether you're on Visual
21:05 - Studio or Visual Studio code the way to
21:08 - use the package manager is a little
21:11 - different but let's see how to do on
21:13 - Visual Studio code so just go to view
21:17 - command pallet or you can use the
21:19 - shortcut and then we're going to go to
21:21 - newg get add newg get package you can
21:23 - type it in but I've already recently
21:25 - used this so it's at the top and then we
21:27 - can just search for for the package we
21:29 - need so we actually just have to add one
21:33 - new get package and then it has all the
21:35 - rest of them as dependencies that are
21:37 - already installed automatically so we'll
21:40 - do mongod db. entity and if I just
21:44 - search for that it should come up see
21:46 - the mongodb Entity framework core so I'm
21:49 - just going to select that package and I
21:51 - will install the latest package version
21:55 - and then that's all there is to it so
21:58 - what going to automatically install the
22:00 - Microsoft EF core package and the
22:03 - mongodb C driver as a dependency okay
22:08 - now we can create the models before we
22:11 - can start implementing the new packages
22:13 - we just added we need to create the
22:15 - models that represent the entities we
22:17 - want in our restaurant reservation
22:19 - system that will of course be stored in
22:21 - mongodb Atlas as documents so we're
22:24 - going to create models for the
22:26 - restaurant reservation and mongodb
22:29 - settings so let's start with the
22:32 - restaurant model this is going to
22:34 - represent the restaurants that are
22:36 - available to be reserved in our system
22:39 - so let's go
22:41 - into the models directory here and I'll
22:45 - just do new file and then I'm going to
22:47 - do
22:50 - restaurant. CS now if you're using
22:53 - visual studio there'll be a you can just
22:57 - go to new model and and then type in the
22:59 - name but for visual studio code we have
23:01 - to make a new file just like
23:03 - that so I'm just going to paste in some
23:06 - code here and you can see we are going
23:10 - to be using mongod db. IND framework
23:13 - core like the we just installed and
23:15 - these are just the fields that will be
23:17 - in our database for each uh object the
23:20 - ID name Cuisine and burrow now you can
23:24 - see the collection attribute right here
23:27 - before the class this tells the
23:29 - application what collection inside the
23:31 - database we are using this allows us to
23:34 - have different names or capitalization
23:36 - between our class and our collection
23:39 - should we want to now so we can kind of
23:42 - understand this fully let's actually go
23:44 - and look at the collection on our
23:46 - database so our data set was
23:49 - successfully loaded we did that earlier
23:51 - so let's browse the collection we we're
23:53 - actually going to look at the the data
23:55 - in here so we can see all the different
23:57 - sample databases but we're only going to
24:00 - be using the sample restaurants database
24:03 - specifically this restaurants collection
24:06 - so we can see all the different items
24:08 - and you can see each item in this
24:12 - collection is going to have an address a
24:14 - burrow Cuisine grades name restaurant ID
24:17 - we're simplifying this and we're only
24:20 - going to be using the burrow the cuisine
24:23 - and the name so if we go back here
24:26 - that's why we have um the cuisine burrow
24:31 - name and then the object ID because
24:34 - every object in mongodb has its own
24:37 - object ID if you're designing something
24:39 - from scrap and you don't already have
24:41 - some sample data you can basically put
24:43 - in anything you want here but I just
24:45 - took some fields from the database we
24:48 - already have so let me save that and we
24:51 - also need to make a reservation class to
24:53 - represent any reservations we we have in
24:57 - our system so I'm going to go to new
24:59 - file again you go to new class if you're
25:03 - on visual studio and this will be called
25:06 - reservation. Cs and I'm just going to
25:08 - paste in some code again here and so
25:11 - we're going to have the ID and then
25:13 - we're going to connect it to our
25:15 - restaurant by having a field for the
25:17 - restaurant ID that corresponds to our
25:20 - restaurant ID and we're going to bring
25:22 - in the restaurant name and the new thing
25:25 - we're going to have is a date and and
25:28 - the date is going to include the date
25:31 - and the time of the reservation that's
25:34 - why we are using a date time piece of
25:37 - data so we're going to just create one
25:40 - more called mongod DB settings.
25:46 - CS now this won't be a document in our
25:49 - database but we need a model class to
25:51 - store our mongodb related settings so
25:54 - they can be used across our application
25:58 - so I'm just going to paste and code
25:59 - again here and we can see we just have
26:02 - two we have the atlas URI this is what
26:05 - we saw when we were setting up mongod be
26:07 - uh Atlas earlier and we're going to have
26:09 - to bring in that information over here
26:11 - later and then we have our database name
26:15 - which in this case is restaurants now
26:17 - we'll be setting this data again later
26:19 - like I said so now we're about to set up
26:23 - EF core enry Entity framework core this
26:27 - is the ex in part we're going to start
26:29 - to implement EF core and take advantage
26:32 - of the new mongodb provider if you're
26:35 - used to working with ef core already
26:38 - some of this will be familiar with
26:40 - familiar to you so let's create a folder
26:43 - called Services now this this part can
26:46 - actually be anywhere but we're going to
26:48 - put it in the services folder and then
26:51 - I'm going to create a file
26:54 - called
26:56 - restaurant re
27:00 - reservation DB
27:03 - context so if you're used to EF core
27:06 - this will look familiar this class
27:09 - extends the DB context and we create uh
27:14 - dbet properties that store the models
27:19 - that will be present in the database and
27:22 - basically whenever you're using EF core
27:24 - you're going to have to do this part we
27:27 - also are going to over override the on
27:30 - model creating method you may notice
27:33 - that unlike when using SQL Server we
27:36 - don't call the two table we could call
27:40 - the two collection instead but this
27:42 - isn't required here as we specify the
27:44 - collection using attributes on the
27:47 - classes which I already showed you when
27:50 - we created the class and just go over
27:53 - this a little more uh in detail we first
27:56 - have Imports and we're going to import
27:58 - the models that we created that that are
28:00 - going to be used in here then we have
28:03 - the Nam space that is going to define
28:05 - the name space for the class grouping it
28:07 - with other related classes and avoiding
28:10 - naming conflicts then we have the class
28:14 - definition and this impairs from DB
28:17 - context making it a context class for EF
28:20 - core it will manage entity sets and
28:24 - coordinate database operations then we
28:27 - have the DBC set properties you always
28:30 - need these in EF core and this first one
28:34 - just represents the restaurant table in
28:36 - the database EF core will use this to
28:39 - perform crud operations on the
28:41 - restaurants entities and same for the
28:45 - reservations then we have this
28:48 - Constructor here this accepts DB context
28:51 - options and passes it to the base DB
28:54 - context Constructor this allows EF core
28:56 - to configure the
28:58 - context specifying the database provider
29:01 - and the connection string that's
29:03 - basically the other the other model we
29:06 - created and then finally uh we are going
29:10 - to overwrite the on model creating
29:12 - method this method is used to customize
29:15 - the model building process in this case
29:18 - is calling the base method and then
29:20 - registering the restaurant and
29:22 - reservation entities with the model
29:24 - builder this step is important for
29:26 - setting up the model configuration
29:28 - such as
29:29 - relationships constraints and mappings
29:33 - so we can see right here we're not
29:34 - calling the two table method that's what
29:37 - we would have to do if we were using SQL
29:39 - Server we could call the two collection
29:42 - instead but this isn't required here is
29:44 - we specify the collection using
29:45 - attributes on the classes this is where
29:48 - we specifi The Collection right here so
29:50 - there's a few different places that you
29:51 - can specify the collection let's just
29:54 - save all these and get these close so
29:57 - earlier we created the mang Tob settings
29:59 - model now we need to add the values that
30:02 - the property is M to mapped to in our
30:05 - app settings so if I go over here to app
30:07 - settings. Json we can add these new
30:10 - properties here and this obviously has
30:13 - to be updated so we need to get the
30:15 - correct URI so let's go back over
30:19 - here go to
30:21 - database
30:23 - connect and then I can just copy this
30:27 - URI right from
30:28 - here and now I just paste this
30:31 - in and then we'll just have to update
30:34 - our
30:40 - password and then we're going to add it
30:42 - to the settings. development. Json as
30:46 - well and I'll make sure to change this
30:48 - or delete this before it goes live so I
30:51 - don't have to blur out this URI in the
30:53 - video so now that we've configured our
30:56 - models and DB context
30:58 - it's time to add them to our program.cs
31:01 - file so go to
31:04 - program.cs and we can see the file here
31:07 - so after this line the builder.
31:09 - services. add controllers with
31:11 - view so we start with a
31:15 - configuration where we have this line
31:19 - that's going to retrieve the mongodb
31:21 - setting section from the applications
31:24 - config configuration file
31:29 - and then here is going to map the
31:32 - retrieved section to an instance of the
31:35 - mang settings class the mango settings
31:38 - class should contain properties that
31:39 - match the configuration file the atlas
31:41 - URI and the database name and as we know
31:45 - the MB settings class contains the
31:47 - properties that match the configuration
31:48 - file the ls Ur and the database name
31:52 - this line registers the M be settings
31:54 - configuration instance with the
31:55 - dependency injection container allows
31:58 - other services to access these through
32:01 - dependency injection then we have this
32:04 - line which registers the restaurant
32:07 - reservation DB request with the di
32:11 - container it makes the DB context
32:13 - available for dependency injection
32:14 - throughout the application and then we
32:17 - have the following
32:19 - section which configures the DB context
32:22 - to use the mongodb provider the mongodb
32:25 - method is past the atlas URI and the
32:28 - database name from the mang settings
32:30 - instance and uh if it's null an M an
32:35 - empty string will be used
32:38 - instead and now since I'm using all
32:40 - these things you can see the red
32:41 - squiggly lines we're going to have to
32:44 - add some using statements to import the
32:47 - appropriate things our models that we
32:49 - created the services and then of course
32:52 - ENT Entity framework core okay so I can
32:55 - save that I saved all the other files
32:58 - and now we're going to create the
33:01 - services it's time to create the
33:03 - services we we can use to talk to the
33:05 - database via the restaurant booking DB
33:08 - context we created so for each service
33:11 - we'll create an interface and a class
33:13 - that in implements it the first
33:16 - interface and service we'll Implement is
33:18 - for carrying out the crud operations on
33:20 - the restaurant's collection this is
33:22 - known as the repository pattern you may
33:25 - see people interact with the DB context
33:27 - Direct
33:28 - but most people use this pattern which
33:30 - is why we're going to do it in this
33:32 - tutorial so uh we have the we already
33:35 - created the services directory and now
33:38 - I'm going to create a new file this is
33:41 - going to be the I
33:46 - restant service. CS this is going to be
33:50 - an interface that's why I search with
33:51 - the letter I so I'll just paste in this
33:54 - code we have the import and then we have
33:56 - the namespace to group it with other
33:59 - related classes and interfaces and then
34:02 - we actually uh Define the interface so
34:07 - this an interface in C defines a
34:09 - contract that other classes must
34:11 - Implement so we're going to later create
34:14 - another class that has to implement the
34:15 - get all restaurants get restaurants by
34:18 - ID add restaurant edit restaurant and
34:20 - delete restaurant and so we're going to
34:23 - use this right now by creating a new
34:25 - file this is going to be the restaurant
34:32 - service so I got pasted in this code so
34:35 - we have Imports the the name space and
34:38 - then we are going to implement the
34:40 - interface that we just
34:44 - created and here we have this local
34:46 - restaurant reservation DB
34:49 - context object and a Constructor that
34:52 - gets an instance of the DB context via
34:55 - dependency injection
34:57 - then we have the add restaurant method
35:00 - which adds a new restaurant to the DB
35:02 - context and saves the changes and also
35:04 - it's going to uh print the state of the
35:08 - changes tractor to the console now in
35:10 - production you probably wouldn't use
35:12 - that you would use a different method
35:14 - but it's fine for this and then we have
35:16 - the delete restaurants obviously going
35:19 - to delete a restaurant so you can see
35:22 - it's looking for the restaurant that has
35:24 - the ID that's put in the first one that
35:27 - finds and then if it and then if it's
35:31 - not n it finds a restaurant then it's
35:32 - going to move it or remove it and it's
35:35 - going to save the changes here or
35:37 - there's going to be a an exception and
35:41 - then edit restaurant is pretty much
35:43 - similar um we're going to pass in the
35:47 - the new restaurant that's supposed to be
35:48 - updating we're going to find the
35:51 - restaurant that's be updated and then
35:53 - we're going to put the new name Cuisine
35:56 - and burrow to the rest restaurant that
35:58 - we have to update we going to update it
36:00 - and then we are going
36:02 - to detect changes and then we're going
36:05 - to write those changes and then save
36:08 - changes now we're going to get all
36:10 - restaurants and by the way we've been
36:12 - using the ID the ID field in our
36:14 - document is a special M be object ID
36:16 - type it's autogenerated when a new
36:18 - document is created uh what's useful
36:20 - about the ID property is that it can
36:22 - actually be used to Order documents
36:23 - because of how it's generated under the
36:25 - hood so we can order by descending so
36:28 - it's going to start the bottom go up or
36:30 - you can order by the the top the reason
36:33 - why I put order by descending is because
36:37 - one thing we're not going to implement
36:38 - in this is pagination so that's
36:41 - something that you can Implement later
36:43 - on your own if you want but when we
36:44 - actually see the application you'll see
36:47 - that it's going to list just the so we
36:49 - have take 20 there's a bunch of
36:52 - restaurants in the database we're only
36:54 - going to show 20 of them and we're going
36:57 - to order by descending so we're going to
36:59 - order uh basically display the last
37:02 - 20 documents added and the reason why
37:05 - we're going to do that is so you can
37:07 - easily see any new documents that we
37:09 - added so we could also just do instead
37:11 - of order by descending we could do order
37:13 - by and it'll take the the first 20 or if
37:16 - you don't have take 20 it'll show all of
37:18 - them but that takes a long time to load
37:20 - now if you haven't seen it before this
37:22 - asno
37:24 - tracking that method is part of EF core
37:27 - and and prevents EF tracking changes you
37:29 - make to an object this is useful for
37:31 - reads when you know no changes are going
37:33 - to ur occur okay so now we just have get
37:37 - restaurant by ID that's pretty
37:39 - self-explanatory we're going to get the
37:42 - first restaurant that has ID that was
37:43 - passed in okay I'm going to save this
37:46 - and then I better save this file so now
37:49 - that we're done with that we're going to
37:50 - create the reservation service so I am
37:54 - going to first make the interface so a
37:56 - new file IR
37:59 - reservation
38:00 - service. Cs and this is going to be
38:04 - pretty similar so this is the interface
38:06 - that we have to implement so let's do
38:10 - reservation
38:16 - service and this is basically the same
38:19 - as before but now we're doing it with
38:23 - the reservation so we can add a
38:25 - reservation and this time we just need
38:29 - to get the name from the restaurant that
38:31 - we're adding the reservation for and we
38:35 - already have the ID that we're going to
38:36 - pull in and when you we're going to
38:40 - delete the reservation remove the
38:42 - reservation to delete um edit the
38:45 - reservation it's all basically the same
38:48 - but now we're just editing the date
38:49 - that's really the only item that you can
38:51 - edit for the
38:53 - reservation and for the reservations
38:56 - we're also just just going to display
38:59 - the the 20 reservations but we're going
39:01 - to orderer by the beginning instead of
39:03 - the end of the list of reservations and
39:05 - then we can get the reservation by ID so
39:08 - let me save those we'll make sure to add
39:10 - them to the dependency injection so
39:14 - let's go back to the program.cs file
39:16 - actually let's close a lot of these
39:18 - files here's
39:20 - program.cs and add two more lines where
39:24 - we're going to add the services the
39:26 - restaurant service and the reservation
39:28 - service with the interfaces now we can
39:31 - create the view models before we
39:34 - implement the front end we need to add
39:36 - the view models that will act as a
39:38 - messenger between our front and back
39:40 - ends where required even though our
39:44 - application is quite simple implementing
39:46 - The View model is still good practice as
39:48 - it helps decouple the pieces of the app
39:51 - so first we're going to create the
39:53 - restaurant list view model this will be
39:56 - used as the model in our razor page
39:58 - later on for listing the restaurants in
40:01 - our database so first I'm going to
40:04 - create a new folder called view models
40:08 - and then in here we'll create a new file
40:10 - called restaurant list viw model. CS
40:16 - okay we'll paste in some code here and
40:19 - this is pretty simple cuz all this is
40:21 - doing is listing the
40:24 - restaurants and these are all going to
40:26 - be pretty simple
40:28 - so we're going to create a new view
40:30 - model uh restaurant ad view model and
40:33 - again I'll just paste in the code again
40:36 - now it's just a single restaurant
40:37 - instead of all the restaurants and then
40:40 - we have to do the same for the
40:41 - reservations so
40:44 - reservation list view model again this
40:48 - will be listing all the
40:50 - reservations and then we have the
40:53 - reservation ad view model which is just
40:57 - showing a single
40:59 - reservation okay make sure all these are
41:02 - saved now we have to add to the view
41:05 - Imports later on we'll be adding
41:08 - references to our models and view models
41:10 - and the views in order for the
41:12 - application to know what they are we
41:15 - need to add references to them in the
41:18 - view the undor view imports. CS HTML
41:22 - file inside the views folder so let me
41:24 - just show you where that F that folder
41:26 - is let's go to the Views folder and we
41:29 - have
41:31 - theore view imports.
41:33 - cshtml so there are already some
41:36 - references in there you can see but
41:37 - we're just going to really only have to
41:39 - make sure we add one line so we have the
41:43 - models we just need to know that we have
41:45 - the view models so I'll save that time
41:48 - to create the controllers now that we
41:51 - have the backend implementation and the
41:53 - view models we will refer to we can
41:55 - start working toward the the front end
41:58 - we'll be creating two controllers one
42:00 - for restaurant and one for reservation
42:03 - so we'll start with the restaurant
42:04 - controller so let's go to the controller
42:07 - folder here and we're going to create a
42:10 - new file this is just going to be called
42:12 - restaurant and if you're using visual
42:15 - studio you can use the MVC controller
42:18 - empty controller
42:21 - template so we start by importing
42:24 - everything such as the models the
42:25 - services The View models
42:27 - and then we have the name space and now
42:30 - we have this class definition since it's
42:34 - inheriting from controller this makes it
42:37 - an MVC controller then we're going to uh
42:41 - declare a private readon field for the
42:43 - restaurant service and now we have the
42:46 - Constructor that takes an IR restaurant
42:48 - service and assigns it to the private
42:51 - fieldcore restaurant
42:54 - service this index action this is an
42:58 - action method that retrieves all
42:59 - restaurants and returns them to The View
43:02 - using a restaurant list view model and
43:05 - then we have the add actions so this is
43:08 - a get action method that Returns the add
43:10 - restaurant View and this is a post
43:14 - action this next section is a post
43:17 - action that adds a new restaurant if the
43:20 - model state is valid otherwise it
43:22 - returns The View with the current model
43:25 - so you can see it's is just getting all
43:27 - the information to add the restaurant
43:32 - now we have the edit action here this
43:36 - first one is just a get action method
43:38 - just like before that Returns the edit
43:40 - restaurant view for a specific
43:42 - restaurant by its ID or it will return a
43:45 - 404 not found and then we have the the
43:49 - post action which is how you make the
43:51 - update it's going to update will update
43:55 - a restaurant if the model stays valid or
43:57 - if there's an exception it will add
43:59 - airor to the model State and return The
44:01 - View with the new method and similar
44:05 - with the delete we have the get request
44:08 - that is just going
44:11 - to return a delete restaurant view for a
44:14 - specific restaurant ID or we can do the
44:17 - get post request and so for this post
44:21 - request here it's going to delete it
44:24 - will see if the ID is is we'll see if
44:29 - the ID exists and then if so we're going
44:32 - to try to delete the restaurant and then
44:35 - we would redirect to the index page or
44:38 - we would catch the error and then if we
44:40 - haven't already redirected somewhere
44:42 - we're going to view the selected
44:45 - restaurant now the reservation one is
44:47 - pretty similar we won't go into it with
44:49 - as much detail but we do need to make a
44:52 - reservation. CS
44:55 - file and like I said it's similar to the
44:57 - restaurant controller but it has a
45:00 - reference to both the restaurant and the
45:03 - reservation Service as we need to
45:07 - associate the the reservation with the
45:10 - restaurant this is because at the moment
45:12 - the EF core provider doesn't support
45:14 - relationships between entities so we
45:17 - have to relate entities in a different
45:18 - way it's going to be very similar to the
45:21 - restaurant controller so I'm not going
45:22 - to go into detail we just have the
45:25 - reservation service and the rest service
45:27 - because we have to get the restaurant uh
45:30 - information in addition to the
45:32 - reservation information so everything
45:36 - else is very similar including all the
45:38 - airor messages we're to the Views
45:41 - section now that we have the backend and
45:44 - the controllers prepped with the
45:46 - endpoints for our restaurant reservation
45:48 - system it's time to implement the views
45:51 - so model view controller we have the
45:53 - model controller now it's the views this
45:55 - will be using razor Pages you'll also
45:58 - see a reference to classes from
46:00 - bootstrap as this is the CSS framework
46:03 - that comes with MVC applications out of
46:05 - the box we'll be providing views for the
46:08 - crud operations for both listings and
46:12 - bookings so first we're going to create
46:15 - a listings view now I'm going to open up
46:19 - here I'm going to go to the Views folder
46:23 - and I'm going to create a subfolder
46:24 - called restaurant and in here we're
46:28 - going to provide a view that will map to
46:30 - the root of SL restaurant which will be
46:33 - which will be by
46:35 - convention which will by convention look
46:37 - at the index method we implemented
46:40 - asp.net core MVC uses a convention
46:43 - pattern where you name the CSH HTML file
46:46 - the name of the inpoint or method it
46:48 - uses and it lives inside a folder named
46:50 - after its controller so that's why we
46:52 - created the restaurant controller here
46:55 - and inside the restaurant fold we're
46:57 - going to create a new file called
47:01 - index.
47:03 - cshtml now if you're using a template in
47:06 - Visual Studio you can use the razor view
47:10 - empty template but here I'm just going
47:12 - to add some code to the index file so
47:17 - we're going to specify which list view
47:19 - we're going to use and then right here
47:22 - this is a placeholder for the air
47:25 - handling if there is an issue deleting a
47:27 - restaurant we added a string to Temp
47:29 - data so we want to add that into the
47:32 - view if there's data to display and next
47:37 - we are going to handle if there are no
47:39 - restaurants in the database by
47:41 - displaying a message to the user and
47:44 - then the easiest way to display the list
47:46 - of restaurants and the relevant
47:49 - information is to use a table so we're
47:51 - just creating a table that has these
47:53 - headings named Cuisine BR actions and
47:56 - you can see we're getting this in so for
47:58 - each restaurant in the restaurants that
48:01 - we get we're going to list the name the
48:04 - cuisine the burough and then we have
48:06 - these different buttons edit button the
48:07 - delete button and the reservation button
48:11 - and then finally we have a button to add
48:14 - a new restaurant now it makes sense to
48:16 - have a list of restaurants as their
48:18 - homepage so before we move on let's
48:21 - update the default route from home to/
48:24 - restaurant so I'm I'm going to go to the
48:27 - program.cs file and then if I go down
48:31 - here it right now we're using the home
48:34 - controller but I'm going to change this
48:36 - to
48:39 - restaurant if we ran this now the
48:42 - buttons would lead to 404s because we
48:44 - haven't implemented we haven't
48:45 - implemented them yet so let's do that
48:48 - we're going to implement the the buttons
48:50 - the edit the delete and the add buttons
48:54 - so to add a restaurant do a new file and
48:57 - add.
48:58 - cshtml and I'm actually going to make
49:01 - that a little smaller here and this is
49:04 - going to be pretty self-explanatory the
49:07 - title and then the aor message and then
49:10 - we are just going to create a form with
49:14 - different sections so we have an input
49:16 - field for the name for the cuisine for
49:19 - the
49:20 - burrow and then a submit button and then
49:24 - we just have a button to get back to the
49:27 - list so so that will go back to the list
49:30 - of
49:32 - restaurants now I need a view for
49:37 - editing this is almost identical to add
49:40 - but it uses the restaurant as a model as
49:43 - it will use the restaurant it's pasted
49:46 - to prepopulate the form for editing so
49:50 - we have the actual the model name here
49:53 - so you can see it's very similar to the
49:55 - add one so so now we just want to make a
49:59 - delete so new file delete.
50:07 - cshtml now instead of a form like the
50:10 - other one this is just going to be uh
50:13 - listing the
50:14 - information you can see the model name
50:17 - the cuisine the
50:20 - burrow and then it will do a form to
50:24 - delete a restaurant and I'll say are you
50:27 - sure you want to delete this restaurant
50:29 - and then if you do you click delete and
50:31 - will'll perform the delete action so
50:34 - let's save that and now we're going to
50:36 - add views for the reservations so let me
50:40 - go to new folder and do
50:42 - reservation and we're going to start
50:44 - with index and this is very similar to
50:48 - before with the table so I'm not going
50:51 - to explain it all but we will now do an
50:53 - add.
50:55 - cshtml and this is is also similar the
50:58 - only thing that's kind of to note is in
50:59 - the form we're using a datetime local
51:04 - type which will allow a drop down for
51:07 - both the date and the time and we're
51:10 - going to set the value to the current
51:14 - time and the current date and time and
51:17 - then the person can change it to when
51:19 - they want to make the reservation and
51:21 - when we special specify the format with
51:25 - just hours and minutes
51:27 - that means it's not going to have
51:29 - someone put in the seconds or
51:31 - milliseconds we're just going to have
51:32 - someone put the hours in minutes okay so
51:36 - now we'll do the edit
51:44 - one and then the only thing to note in
51:48 - edit is that um so we're the title is
51:51 - saying we're editing the reservation for
51:53 - this restaurant name for this time and
51:56 - you can see whenever we use the
51:58 - information for the date and time so the
52:00 - date and time are both stored in the
52:03 - date field and we always we going to put
52:05 - two local time and here we you calling
52:08 - the two local time method if we don't do
52:11 - that the time will not display as
52:14 - expected so so finally we will add
52:18 - delete and everything is pretty straight
52:20 - forward for this we are going to put all
52:23 - the information again using two local
52:25 - time for the time time and then we have
52:29 - the the delete form at the bottom here
52:32 - okay now we're basically done I'm just
52:35 - going to add one more thing which is
52:37 - optional to make it easier to navigate
52:40 - I'm just going to add links in the Navar
52:42 - to both our reservation page and our
52:46 - restaurant page so what I'm going to go
52:49 - I'm going to go to the Views folder and
52:51 - then shared and then I'm going to open
52:53 - up the layout file that
52:57 - HTML and then I'll scroll down here and
53:00 - I'm just going to update this is what
53:02 - right now there's just going to be a
53:04 - home and a privacy button I'm going to
53:07 - paste it and so there's going to be a
53:08 - restaurants and reservations button and
53:11 - it's going to use the restaurant
53:12 - controller reservation controller so now
53:15 - we can actually just run this so I'll go
53:18 - to terminal new terminal and then I can
53:22 - go into my
53:24 - directory and do net
53:30 - run now I just take this URL
53:34 - here okay and here's our page now it
53:38 - says no results I would expect there to
53:40 - already be results of the restaurants
53:43 - since we're connected to the database so
53:45 - that means we're doing something wrong
53:47 - here let's see what it
53:50 - is okay here's the problem in our app
53:52 - settings we have the database called
53:55 - restaurants but but if we go to the
53:58 - actual database on Atlas we can see it's
54:01 - called sample restaurants so this is
54:05 - supposed to be sample
54:08 - restaurants and then we also have to
54:11 - change this
54:14 - one okay let me just run this
54:22 - again okay now we can see all the
54:24 - restaurants now some the restaurants in
54:27 - the database don't have names that's why
54:29 - you see the blank thing and then we can
54:32 - see the Cuisines are all other in some
54:35 - ways would be cooler if we show we start
54:38 - the restaurants from the top instead of
54:40 - the bottom which is actually pretty easy
54:43 - to change we're going to go back to this
54:45 - I just want to show you this really
54:47 - quick which is in the restaurant
54:51 - service
54:53 - and oh that's reservation restaurant
54:56 - service if we do order
54:59 - bu like
55:01 - that and then I just restart
55:05 - this and then you can see we have all
55:08 - these different Cuisines all these
55:10 - different Burrows and all the names of
55:12 - the
55:15 - restaurants but we're going to go back
55:17 - to how it is how it was because of
55:21 - wanting to be able to see our new
55:22 - restaurants that we
55:24 - add so we can edit delete and Reserve
55:27 - like let's delete these ones that have
55:29 - no names if they don't have names why do
55:32 - we even have them in here so delete this
55:37 - one okay so let's add a new restaurant
55:39 - let's see if that works if we scroll
55:40 - down to the bottom add new restaurant
55:43 - and we'll say B
55:45 - pizza and then Cuisine pizza and
55:52 - then all the so for this database it's
55:56 - all
55:56 - New York so basically I guess that's not
56:00 - even a buau but you can put anything oh
56:01 - they're all New York buus I I didn't I
56:04 - don't think I mentioned that before but
56:06 - now we have our own restaurant including
56:08 - we can see all these other restaurants
56:10 - and also I can do a reservation so right
56:15 - now it's going to set the current time
56:17 - where I'm at but I can set the
56:19 - reservation for the 29th and we'll do 6
56:23 - o'l and then I can reserve a table
56:27 - okay now it's showing the these are all
56:30 - our booked restaurants so we have a
56:32 - restaurant booked um at BO pizza for
56:36 - this time and we can book another
56:39 - restaurant so let's here Indian Oven
56:42 - we'll just do it
56:48 - for here okay so now we have two booked
56:51 - restaurants if we want to switch that we
56:53 - can so like maybe I want to change
56:56 - change the date so let's change this to
56:58 - the 30th update reservation so we've
57:01 - updated the reservation and if we go to
57:04 - restaurants we can also edit a
57:06 - restaurant maybe I want to edit the name
57:09 - so maybe instead of Indian Oven we'll
57:11 - change this to Indian stove and Cuisine
57:15 - I'm guessing it's Indian and then we can
57:18 - update the restaurant and then we can
57:20 - continue to delete Reserve see all the
57:22 - res restaurants the reservations so it
57:26 - works and if you want to make the
57:27 - application even better on your own you
57:30 - can make it so when you change a
57:31 - restaurant name it also changes the name
57:34 - of that restaurant and all the
57:35 - reservations however as it is now when
57:38 - you create the reservation it saves the
57:40 - what the name was when you create the
57:43 - reservation but we can go into the
57:45 - database and we can see how it is
57:47 - updated in the database so let me go to
57:49 - sample restaurants I'll go to the
57:52 - restaurants here and then I will search
57:54 - for name
57:57 - Indian
57:59 - stove and if I do the search we should
58:02 - see right here so the name has been
58:06 - updated in the database on mongodb ataly
58:10 - our application is complete now let's
58:12 - look at some Advanced features of
58:15 - mongodb Atlas since we already have
58:18 - access to the client when creating
58:21 - the DB context this allows us to perform
58:24 - Advanced mongodb operations
58:26 - such as Atlas search and Vector search
58:29 - these features enhance your application
58:31 - capabilities by enabling powerful search
58:34 - functionalities while still leveraging
58:36 - The Familiar EF core framework Atlas
58:39 - search is a full teex search engine
58:41 - provided by mongodb Atlas it allows you
58:44 - to run sophisticated search queries on
58:46 - your mongodb data with Atlas search you
58:49 - can Implement features like autocomplete
58:52 - faceted search and relevance-based
58:54 - sorting to use Atlas search with ef core
58:57 - provider uh follow these steps so you
59:00 - set up indexes in Mong Atlas go to your
59:02 - mongod Atlas cluster navigate to the
59:05 - search Tab and create a new index on
59:07 - your collection then Define the fields
59:09 - you want to make
59:15 - searchable next Define searchable fields
59:18 - in your models and you in your sear
59:20 - models ensure that the fields you want
59:22 - to search are properly defined this is
59:25 - an example of the the definition of a
59:27 - product model performing search queries
59:30 - use the m.net dri's capabilities to
59:33 - perform text searches since EF core
59:36 - itself does not directly support the
59:37 - mongodb specific search syntax you'll
59:40 - need to use the driver in conjunction
59:43 - with ef core this is an example this
59:46 - example shows how to perform a text
59:48 - search on the products collection the
59:50 - text filter helps search across all
59:52 - indexed Fields defined in your Atlas
59:55 - search index Vector search in mongodb is
59:58 - used for searching documents based on
60:00 - Vector similarities which is
60:03 - particularly useful for applications
60:06 - involving machine learning
60:08 - recommendations and natural language
60:11 - processing Vector search allows you to
60:13 - query documents using vectors
60:16 - representing text images or other
60:18 - high-dimensional data while the mongodb
60:21 - EF core provider simplifies crud
60:24 - operations some advanc features like
60:27 - Atlas search and Vector search require
60:29 - direct use of the mongod be.net driver
60:32 - however you can still integrate these
60:34 - operations within your EF core based
60:36 - application by using the driver for
60:38 - search functionalities and EF core for
60:41 - other data management tasks by combining
60:44 - EF core and mongodb's advanced features
60:47 - you can build powerful and flexible
60:50 - applications that Leverage The Best of
60:52 - Both Worlds structured data access
60:55 - patterns of EF core
60:56 - and the powerful search capabilities of
60:58 - mongodb
61:02 - Atlas in this course we've explored how
61:05 - to integrate MB with Entity framework
61:08 - core we covered the basic concepts and
61:11 - how to put everything together into a
61:13 - full project by combining the strengths
61:16 - of both mongodb and Entity framework
61:19 - core you can build robust scalable and
61:22 - flexible applications making the most of
61:25 - mongodb these powerful features while
61:27 - leveraging the familiar EF core
61:30 - framework I hope this course has
61:32 - equipped you with the knowledge and
61:34 - tools to effectively use mang with ef
61:37 - core in your projects

Cleaned transcript:

hi everyone welcome to this tutorial on using mongodb with Entity framework core in C I'm Bo K and I'll be teaching this course I'll start by giving you a brief introduction to mongodb and an introduction to Microsoft's Entity framework core next I'll cover how to use the mongodb EF core provider after going through technical details with some basic examples we'll create a full project with mongodb and Entity framework core so you can see how everything works together the project will use mongodb Atlas sample data to create a restaurant reservation system mongodb is a popular nosql database designed to handle large volumes of data and provide high performance scalability and flexibility unlike traditional relational databases mongodb stores data in flexible Json like documents this document oriented approach allows for the storage of complex data structures in a more natural and intuitive way in mongodb data is stored in collections which are similar to tables in relational databases but without a fixed schema this means you can have documents with different structures in the same collection this flexibility is one of the key advantages of using mongod Tob especially when dealing with unstructured or semistructured data let's take a look at an example of a mongodb document imagine we have a collection called users that stores information about users in an application here's what a typical document might look like in this document we have various Fields such as name email age and address the address field itself is an embedded document containing multiple subfields like Street city state and zip Additionally the Hobbies field is an array of strings while this looks like Json mongodb stores data in a binary format called bon or binary Json bson extends the Json model to provide additional data types such as integers floats dates and binary data this binary format is optimized for performance and flexibility allowing mongodb to efficiently store and retrieve data another important feature of mongodb is its ability to scale horizontally this means you can distribute your data across multiple servers making it easier to manage large data sets and Ensure High availability MDB also supports Rich queries indexing and aggregation making it a powerful tool for a wide range of applications for example you can perform a query to find all users who live in a specific city mongodb is widely used in various industries from ecommerce and content management to realtime analytics and Internet of Things applications its flexibility and scalability make it an excellent choice for modern applications that need to handle diverse and dynamic data now that we have a basic understanding of what mongodb is and why it's popular let's move on to another essential tool in our Tex stack Microsoft's Entity framework core Entity framework core often abbreviated as EF core is a modern object database mapper foret it allows developers to work with a database using net objects eliminating the need for most of the data access code that developers usually need to write EF core is a lightweight extensible and crossplatform version of the popular Entity framework data access technology it supports a variety of database engines including SQL Server SQL light and mongodb one of the main benefits of using EF core is that it enables developers to work with data in a more intuitive and objectoriented way instead of writing raw SQL query you can interact with your database using link the language integrated query and strongly typed classes let's take a look at a basic example imagine we have a product class here it is pretty simple with just three Fields using EF core you can create a context class that represents a session with the database and includes a DB set for each entity type you want to query or save this code defines a class named appdb context that inherits from entity framework cores DB context class this class is used to interact with the database inside this class there's a DB set product property called products which represents a collection of product entities and corresponds to a table named products in the database the onc configuring method is overwritten to configure the database connection specifying that SQL Server is the database provider but you can also use other databases besides s server the method uses an option Builder to set up the connection with a placeholder for the actual SQL server connection string this connection string obviously should be replaced with the real one containing the necessary details to connect to the database when you create an instance of appdb context in the application it uses this configuration to perform operations like quering or saving product entities in the products table with this setup you can perform crud uh create read update delete operations using EF core for example to add a new product to the database you can use this code this code demonstrates how to add a new product to the database using NTI framework core an instance of appdb context is created and within this context a new product object with the name laptop and price $999.99 is instantiated this new product is then added to the products collection managed by the appdb context finally the save changes method is called to save the changes to the database effectively inserting the new product into the products table to query products you can use Link this code also demonstrates how to query the database using Entity framework core an instance of app DB context is created and within this context a query is made to retrieve all products with the price greater than 500 the results are stored in a list called products then a loop iterates through each product in the list printing the name and price of each product to the console EF core takes care of translating these link queries into the appropriate SQL commands for your database this makes data access simpler and more maintainable EF core also supports Advanced features like change tracking lazy loading and migrations which help you manage database schema changes over time in summary EF core is a powerful omm that simplifies data access and net applications by allowing you to work with your data using net objects and Link its support for multiple database engines and its extensibility make it a versatile choice for a wide range of applications next we'll see how the mongodb EF core provider Bridges the gap between mongodb and EF core allowing us to use the familiar EF core patterns with a mongodb database The mongodb Entity framework core provider is a tool that enables developers to use mongodb with Entity framework core combining the flexibility of mongodb with the familiar API and design patterns of EF core this provider allows you to work with mongodb using the same code first and Link query methodologies that you would use with relational databases streamlining development and reducing the learning curve for those already familiar with ef core the mongodb EF core provider Bridges the gap between mongodb and EF core by supporting basic crud operations link queries and embedded documents among other features here are some key capabilities code first workflows you can Define your data models in C and use EF core to generate the mongodb schema rather than starting with the database schema and generating code from it this is particularly useful for developers who prefer to manage their database structure through code crud operations the provider supports basic create read update and delete operations for example you can add a new record to the database using the same code we saw earlier link query support you can use Link to perform queries against mongodb allowing you to leverage your existing knowledge of C sharp and.net to interact with the database change tracking e of course change tracking capabilities are supported enabling automatic detection and saving of changes made to your data entities embedded documents the provider supports embedded documents allowing you to store related data within a single document which is a common pattern in mongodb class mapping and serialization your C classes are mapped to mongodb collections with support for various data types and serialization settings to ensure that data is stored correctly now we'll go over a quick example on how to use the mongodb EF core provider and later we'll create a full project in Visual Studio code so you can see everything in context in this section we'll explore how to define data models and perform crud operations using the mongodb Entity framework core provider with mongodb Atlas this integration allows you to Leverage The flexibility of mongodb with the familiar patterns of EF core to get started you need to add the necessary new get packages to your project these packages allow your application to interact with mongodb through EF core using the same context and entity definitions you would use with a relational database before you can perform crud operations you need to set up a mongodb atlas cluster and connect your application to it here are the steps note that we'll be going over these in detail when we create the project soon first sign up for a MB Atlas account you can sign up for a free one at their website next create a new cluster mongodb Atlas provides a free tier that is perfect for development and smallscale applications then you get a connection string you can obtain your connection string from the mongodb atlas dashboard it will look something like this so after getting set up on MB Atlas time for the code you need to define a class using a model for your entity for this example we'll create a customer class this customer class represents the structure of the documents stored in the mongod DB collection to begin using Entity framework core create a context class that derived from DB context the DB context derived class instance represents a database session and is used to query and save instances of your entities the DB context class exposes DB set properties that specify the entities you can interact with while using that context this example creates an instance of a DB context derived class and specifies the customer object as a DB set property with the mongodb EF provider you can use a code first workflow this means you define your classes first and EF core will handle the creation and management of the underlying mongodb schema this is particularly useful for mongodb which does not enforce a schema allowing for flexible and dynamic data structures once we've created a DB context class we need to construct a DB context options Builder object and call its use mongodb method this method takes two parameters a manga client instance and the name of the database that stores the collections you are working with the used mongu DB method returns a DB context options object pass the options property of this object to the Constructor for your DB context class now let's see how to code the crud operations we'll just focus on each operation individually to create a new document in mang you use the ad method on the dbet and call Save changes here's an example of creating a new customer this code creates a new customer instance and adds it to the customer's collection the save changes method saves the new customer to the mongodb database to read documents from The mongodb Collection you can use Link queries on the DB set this is an example of retrieving all customers this code retrieves all customers from the customer collection and prints their details to update an existing document you retrieve the document modify its properties and call Save changes here's an example of updating a customer's order this code finds the customer named boars and updates their order to smartphone to delete a document you retrieve the document remove it from the DB set and call Save changes here's an example of deleting a customer this code finds the customer named Bo KS and deletes them from the customer collection EF core's change tracking capabilities are fully supported enabling efficient updates to documents when you modify an entity and call Save changes EF core will generate the necessary mongodb commands to update only the changed Fields by using the mongodb EF provider you can seamlessly integrate mongodb's flexible document model with ef core's robust om capabilities providing a powerful tool set foret developers to build modern applications now let's put everything together and develop a full restaurant reservation system from scratch so let's see how to use mongodb with ef core in a real world project well this is kind of like a demo project we're going to make a restaurant reservation system and we are going to use some sample restaurant data data that mongodb provides so before we create our project let's get our database set up so this is free we just have to sign in or sign up now if you're signing up for the first time it may make you set up a project as far as part of the sign up process or we can just go to new project and I'm going to call it rest res for restaurant reservations and then we'll just go through this process here of signing up and then I just need to create a cluster and I'm going to create a free cluster and I'll just set all this the rest of this to default you can also change the region to get a region that's closer to where you live and I will do create deployment and we have to make sure our IP address is added and so it's going to add it's going to automatically add your local IP address but if you're switching systems you may have to make sure your IP address is is Whit listed so you can connect from that IP address and then we need a database user and then I'll just create the database user and then we can choose a connection method now we're going to be coming back to this but we're going to need this this mongu DB uh URI but I'm going to copy that later so I'll just click done for now and I'm going to click add data and then the load load sample data so this is great for any projects that you're working on and when you're learning you don't need to find your own data somewhere you can start with a sample data set and that makes learning how to do things with mongodb a lot easier so we're just going to start with a sample data and so when we create the project there's already going to be a lot of data to work with we're specifically going to be using their restaurant database but they have a lot of other data you can work with and this actually has a bunch of so this has eight sample data sets so you can see them all here here's all the different sample data sets you can work with we will be using the sample restaurant data set but it's going to load all of them into the database so our database is still being set up in the background right now so let's get our project set up now there's a few different ways we can create a project some people may be using visual studio some people may be using visual studio code now since I'm running on Mac OS a visual studio they're I guess not they're deprecating Visual Studio on Mac OS and it's going to be mainly focused on windows so I'll be using visual studio code now Visual Studio Works more out of the box for C projects and asp.net project projects but Visual Studio code also works you just have to install the right extensions so if we go to the extensions you're going to make sure to install the C dev kit and when you install the C dev kit it's also going to install some other things like the C support and some other things and once you get this installed it's going to take a while to install but it's helpful to go through this walkth through it should appear right here on your welcome screen and then it's going to have a few things you have to do like connect your account set up your environment um I guess open your folder that's to open if you already have a folder you're going to use but we're going to actually create a new net project so now that we have the C devkit installed we can create our new project so I can either click this button or I can go to the command pet pallet you can use the shortcut key or go to view command pallet and then we just have to search foret new project it's already showing at the top for me because I've recently used that so I'll select new project and then it's going to give us some different templates we can use so for this example we're going to use the net core web app model view controller template and then we can uh name the new project I'm going to name it rest res so restaurant reservation and then press escape and then I'm am going to choose the default directory I already opened this Visual Studio code in a directory so it's going to save in that directory and then I will create the project okay so now you can see it's creating all these project files here now this is one good thing about asp.net core it's a very flexible web framework and it allows to scaffold out different types of web applications that have slight differences in terms of their UI and structure like I said we're using the MVC project and this is going to make use of static files and controllers but you could also do other things like react but MVC with the chtml files which we'll see later are the most commonly used now if you're not on vs code you'll be using visual studio and there's some different ways that you need to create your project or you can use the command line interface so if you go to the article that I have linked to in the description you can see the commands if you want to use the net CLI to create the project and now that we have this project created we want to go ahead and add the required new git packages depending on whether you're on Visual Studio or Visual Studio code the way to use the package manager is a little different but let's see how to do on Visual Studio code so just go to view command pallet or you can use the shortcut and then we're going to go to newg get add newg get package you can type it in but I've already recently used this so it's at the top and then we can just search for for the package we need so we actually just have to add one new get package and then it has all the rest of them as dependencies that are already installed automatically so we'll do mongod db. entity and if I just search for that it should come up see the mongodb Entity framework core so I'm just going to select that package and I will install the latest package version and then that's all there is to it so what going to automatically install the Microsoft EF core package and the mongodb C driver as a dependency okay now we can create the models before we can start implementing the new packages we just added we need to create the models that represent the entities we want in our restaurant reservation system that will of course be stored in mongodb Atlas as documents so we're going to create models for the restaurant reservation and mongodb settings so let's start with the restaurant model this is going to represent the restaurants that are available to be reserved in our system so let's go into the models directory here and I'll just do new file and then I'm going to do restaurant. CS now if you're using visual studio there'll be a you can just go to new model and and then type in the name but for visual studio code we have to make a new file just like that so I'm just going to paste in some code here and you can see we are going to be using mongod db. IND framework core like the we just installed and these are just the fields that will be in our database for each uh object the ID name Cuisine and burrow now you can see the collection attribute right here before the class this tells the application what collection inside the database we are using this allows us to have different names or capitalization between our class and our collection should we want to now so we can kind of understand this fully let's actually go and look at the collection on our database so our data set was successfully loaded we did that earlier so let's browse the collection we we're actually going to look at the the data in here so we can see all the different sample databases but we're only going to be using the sample restaurants database specifically this restaurants collection so we can see all the different items and you can see each item in this collection is going to have an address a burrow Cuisine grades name restaurant ID we're simplifying this and we're only going to be using the burrow the cuisine and the name so if we go back here that's why we have um the cuisine burrow name and then the object ID because every object in mongodb has its own object ID if you're designing something from scrap and you don't already have some sample data you can basically put in anything you want here but I just took some fields from the database we already have so let me save that and we also need to make a reservation class to represent any reservations we we have in our system so I'm going to go to new file again you go to new class if you're on visual studio and this will be called reservation. Cs and I'm just going to paste in some code again here and so we're going to have the ID and then we're going to connect it to our restaurant by having a field for the restaurant ID that corresponds to our restaurant ID and we're going to bring in the restaurant name and the new thing we're going to have is a date and and the date is going to include the date and the time of the reservation that's why we are using a date time piece of data so we're going to just create one more called mongod DB settings. CS now this won't be a document in our database but we need a model class to store our mongodb related settings so they can be used across our application so I'm just going to paste and code again here and we can see we just have two we have the atlas URI this is what we saw when we were setting up mongod be uh Atlas earlier and we're going to have to bring in that information over here later and then we have our database name which in this case is restaurants now we'll be setting this data again later like I said so now we're about to set up EF core enry Entity framework core this is the ex in part we're going to start to implement EF core and take advantage of the new mongodb provider if you're used to working with ef core already some of this will be familiar with familiar to you so let's create a folder called Services now this this part can actually be anywhere but we're going to put it in the services folder and then I'm going to create a file called restaurant re reservation DB context so if you're used to EF core this will look familiar this class extends the DB context and we create uh dbet properties that store the models that will be present in the database and basically whenever you're using EF core you're going to have to do this part we also are going to over override the on model creating method you may notice that unlike when using SQL Server we don't call the two table we could call the two collection instead but this isn't required here as we specify the collection using attributes on the classes which I already showed you when we created the class and just go over this a little more uh in detail we first have Imports and we're going to import the models that we created that that are going to be used in here then we have the Nam space that is going to define the name space for the class grouping it with other related classes and avoiding naming conflicts then we have the class definition and this impairs from DB context making it a context class for EF core it will manage entity sets and coordinate database operations then we have the DBC set properties you always need these in EF core and this first one just represents the restaurant table in the database EF core will use this to perform crud operations on the restaurants entities and same for the reservations then we have this Constructor here this accepts DB context options and passes it to the base DB context Constructor this allows EF core to configure the context specifying the database provider and the connection string that's basically the other the other model we created and then finally uh we are going to overwrite the on model creating method this method is used to customize the model building process in this case is calling the base method and then registering the restaurant and reservation entities with the model builder this step is important for setting up the model configuration such as relationships constraints and mappings so we can see right here we're not calling the two table method that's what we would have to do if we were using SQL Server we could call the two collection instead but this isn't required here is we specify the collection using attributes on the classes this is where we specifi The Collection right here so there's a few different places that you can specify the collection let's just save all these and get these close so earlier we created the mang Tob settings model now we need to add the values that the property is M to mapped to in our app settings so if I go over here to app settings. Json we can add these new properties here and this obviously has to be updated so we need to get the correct URI so let's go back over here go to database connect and then I can just copy this URI right from here and now I just paste this in and then we'll just have to update our password and then we're going to add it to the settings. development. Json as well and I'll make sure to change this or delete this before it goes live so I don't have to blur out this URI in the video so now that we've configured our models and DB context it's time to add them to our program.cs file so go to program.cs and we can see the file here so after this line the builder. services. add controllers with view so we start with a configuration where we have this line that's going to retrieve the mongodb setting section from the applications config configuration file and then here is going to map the retrieved section to an instance of the mang settings class the mango settings class should contain properties that match the configuration file the atlas URI and the database name and as we know the MB settings class contains the properties that match the configuration file the ls Ur and the database name this line registers the M be settings configuration instance with the dependency injection container allows other services to access these through dependency injection then we have this line which registers the restaurant reservation DB request with the di container it makes the DB context available for dependency injection throughout the application and then we have the following section which configures the DB context to use the mongodb provider the mongodb method is past the atlas URI and the database name from the mang settings instance and uh if it's null an M an empty string will be used instead and now since I'm using all these things you can see the red squiggly lines we're going to have to add some using statements to import the appropriate things our models that we created the services and then of course ENT Entity framework core okay so I can save that I saved all the other files and now we're going to create the services it's time to create the services we we can use to talk to the database via the restaurant booking DB context we created so for each service we'll create an interface and a class that in implements it the first interface and service we'll Implement is for carrying out the crud operations on the restaurant's collection this is known as the repository pattern you may see people interact with the DB context Direct but most people use this pattern which is why we're going to do it in this tutorial so uh we have the we already created the services directory and now I'm going to create a new file this is going to be the I restant service. CS this is going to be an interface that's why I search with the letter I so I'll just paste in this code we have the import and then we have the namespace to group it with other related classes and interfaces and then we actually uh Define the interface so this an interface in C defines a contract that other classes must Implement so we're going to later create another class that has to implement the get all restaurants get restaurants by ID add restaurant edit restaurant and delete restaurant and so we're going to use this right now by creating a new file this is going to be the restaurant service so I got pasted in this code so we have Imports the the name space and then we are going to implement the interface that we just created and here we have this local restaurant reservation DB context object and a Constructor that gets an instance of the DB context via dependency injection then we have the add restaurant method which adds a new restaurant to the DB context and saves the changes and also it's going to uh print the state of the changes tractor to the console now in production you probably wouldn't use that you would use a different method but it's fine for this and then we have the delete restaurants obviously going to delete a restaurant so you can see it's looking for the restaurant that has the ID that's put in the first one that finds and then if it and then if it's not n it finds a restaurant then it's going to move it or remove it and it's going to save the changes here or there's going to be a an exception and then edit restaurant is pretty much similar um we're going to pass in the the new restaurant that's supposed to be updating we're going to find the restaurant that's be updated and then we're going to put the new name Cuisine and burrow to the rest restaurant that we have to update we going to update it and then we are going to detect changes and then we're going to write those changes and then save changes now we're going to get all restaurants and by the way we've been using the ID the ID field in our document is a special M be object ID type it's autogenerated when a new document is created uh what's useful about the ID property is that it can actually be used to Order documents because of how it's generated under the hood so we can order by descending so it's going to start the bottom go up or you can order by the the top the reason why I put order by descending is because one thing we're not going to implement in this is pagination so that's something that you can Implement later on your own if you want but when we actually see the application you'll see that it's going to list just the so we have take 20 there's a bunch of restaurants in the database we're only going to show 20 of them and we're going to order by descending so we're going to order uh basically display the last 20 documents added and the reason why we're going to do that is so you can easily see any new documents that we added so we could also just do instead of order by descending we could do order by and it'll take the the first 20 or if you don't have take 20 it'll show all of them but that takes a long time to load now if you haven't seen it before this asno tracking that method is part of EF core and and prevents EF tracking changes you make to an object this is useful for reads when you know no changes are going to ur occur okay so now we just have get restaurant by ID that's pretty selfexplanatory we're going to get the first restaurant that has ID that was passed in okay I'm going to save this and then I better save this file so now that we're done with that we're going to create the reservation service so I am going to first make the interface so a new file IR reservation service. Cs and this is going to be pretty similar so this is the interface that we have to implement so let's do reservation service and this is basically the same as before but now we're doing it with the reservation so we can add a reservation and this time we just need to get the name from the restaurant that we're adding the reservation for and we already have the ID that we're going to pull in and when you we're going to delete the reservation remove the reservation to delete um edit the reservation it's all basically the same but now we're just editing the date that's really the only item that you can edit for the reservation and for the reservations we're also just just going to display the the 20 reservations but we're going to orderer by the beginning instead of the end of the list of reservations and then we can get the reservation by ID so let me save those we'll make sure to add them to the dependency injection so let's go back to the program.cs file actually let's close a lot of these files here's program.cs and add two more lines where we're going to add the services the restaurant service and the reservation service with the interfaces now we can create the view models before we implement the front end we need to add the view models that will act as a messenger between our front and back ends where required even though our application is quite simple implementing The View model is still good practice as it helps decouple the pieces of the app so first we're going to create the restaurant list view model this will be used as the model in our razor page later on for listing the restaurants in our database so first I'm going to create a new folder called view models and then in here we'll create a new file called restaurant list viw model. CS okay we'll paste in some code here and this is pretty simple cuz all this is doing is listing the restaurants and these are all going to be pretty simple so we're going to create a new view model uh restaurant ad view model and again I'll just paste in the code again now it's just a single restaurant instead of all the restaurants and then we have to do the same for the reservations so reservation list view model again this will be listing all the reservations and then we have the reservation ad view model which is just showing a single reservation okay make sure all these are saved now we have to add to the view Imports later on we'll be adding references to our models and view models and the views in order for the application to know what they are we need to add references to them in the view the undor view imports. CS HTML file inside the views folder so let me just show you where that F that folder is let's go to the Views folder and we have theore view imports. cshtml so there are already some references in there you can see but we're just going to really only have to make sure we add one line so we have the models we just need to know that we have the view models so I'll save that time to create the controllers now that we have the backend implementation and the view models we will refer to we can start working toward the the front end we'll be creating two controllers one for restaurant and one for reservation so we'll start with the restaurant controller so let's go to the controller folder here and we're going to create a new file this is just going to be called restaurant and if you're using visual studio you can use the MVC controller empty controller template so we start by importing everything such as the models the services The View models and then we have the name space and now we have this class definition since it's inheriting from controller this makes it an MVC controller then we're going to uh declare a private readon field for the restaurant service and now we have the Constructor that takes an IR restaurant service and assigns it to the private fieldcore restaurant service this index action this is an action method that retrieves all restaurants and returns them to The View using a restaurant list view model and then we have the add actions so this is a get action method that Returns the add restaurant View and this is a post action this next section is a post action that adds a new restaurant if the model state is valid otherwise it returns The View with the current model so you can see it's is just getting all the information to add the restaurant now we have the edit action here this first one is just a get action method just like before that Returns the edit restaurant view for a specific restaurant by its ID or it will return a 404 not found and then we have the the post action which is how you make the update it's going to update will update a restaurant if the model stays valid or if there's an exception it will add airor to the model State and return The View with the new method and similar with the delete we have the get request that is just going to return a delete restaurant view for a specific restaurant ID or we can do the get post request and so for this post request here it's going to delete it will see if the ID is is we'll see if the ID exists and then if so we're going to try to delete the restaurant and then we would redirect to the index page or we would catch the error and then if we haven't already redirected somewhere we're going to view the selected restaurant now the reservation one is pretty similar we won't go into it with as much detail but we do need to make a reservation. CS file and like I said it's similar to the restaurant controller but it has a reference to both the restaurant and the reservation Service as we need to associate the the reservation with the restaurant this is because at the moment the EF core provider doesn't support relationships between entities so we have to relate entities in a different way it's going to be very similar to the restaurant controller so I'm not going to go into detail we just have the reservation service and the rest service because we have to get the restaurant uh information in addition to the reservation information so everything else is very similar including all the airor messages we're to the Views section now that we have the backend and the controllers prepped with the endpoints for our restaurant reservation system it's time to implement the views so model view controller we have the model controller now it's the views this will be using razor Pages you'll also see a reference to classes from bootstrap as this is the CSS framework that comes with MVC applications out of the box we'll be providing views for the crud operations for both listings and bookings so first we're going to create a listings view now I'm going to open up here I'm going to go to the Views folder and I'm going to create a subfolder called restaurant and in here we're going to provide a view that will map to the root of SL restaurant which will be which will be by convention which will by convention look at the index method we implemented asp.net core MVC uses a convention pattern where you name the CSH HTML file the name of the inpoint or method it uses and it lives inside a folder named after its controller so that's why we created the restaurant controller here and inside the restaurant fold we're going to create a new file called index. cshtml now if you're using a template in Visual Studio you can use the razor view empty template but here I'm just going to add some code to the index file so we're going to specify which list view we're going to use and then right here this is a placeholder for the air handling if there is an issue deleting a restaurant we added a string to Temp data so we want to add that into the view if there's data to display and next we are going to handle if there are no restaurants in the database by displaying a message to the user and then the easiest way to display the list of restaurants and the relevant information is to use a table so we're just creating a table that has these headings named Cuisine BR actions and you can see we're getting this in so for each restaurant in the restaurants that we get we're going to list the name the cuisine the burough and then we have these different buttons edit button the delete button and the reservation button and then finally we have a button to add a new restaurant now it makes sense to have a list of restaurants as their homepage so before we move on let's update the default route from home to/ restaurant so I'm I'm going to go to the program.cs file and then if I go down here it right now we're using the home controller but I'm going to change this to restaurant if we ran this now the buttons would lead to 404s because we haven't implemented we haven't implemented them yet so let's do that we're going to implement the the buttons the edit the delete and the add buttons so to add a restaurant do a new file and add. cshtml and I'm actually going to make that a little smaller here and this is going to be pretty selfexplanatory the title and then the aor message and then we are just going to create a form with different sections so we have an input field for the name for the cuisine for the burrow and then a submit button and then we just have a button to get back to the list so so that will go back to the list of restaurants now I need a view for editing this is almost identical to add but it uses the restaurant as a model as it will use the restaurant it's pasted to prepopulate the form for editing so we have the actual the model name here so you can see it's very similar to the add one so so now we just want to make a delete so new file delete. cshtml now instead of a form like the other one this is just going to be uh listing the information you can see the model name the cuisine the burrow and then it will do a form to delete a restaurant and I'll say are you sure you want to delete this restaurant and then if you do you click delete and will'll perform the delete action so let's save that and now we're going to add views for the reservations so let me go to new folder and do reservation and we're going to start with index and this is very similar to before with the table so I'm not going to explain it all but we will now do an add. cshtml and this is is also similar the only thing that's kind of to note is in the form we're using a datetime local type which will allow a drop down for both the date and the time and we're going to set the value to the current time and the current date and time and then the person can change it to when they want to make the reservation and when we special specify the format with just hours and minutes that means it's not going to have someone put in the seconds or milliseconds we're just going to have someone put the hours in minutes okay so now we'll do the edit one and then the only thing to note in edit is that um so we're the title is saying we're editing the reservation for this restaurant name for this time and you can see whenever we use the information for the date and time so the date and time are both stored in the date field and we always we going to put two local time and here we you calling the two local time method if we don't do that the time will not display as expected so so finally we will add delete and everything is pretty straight forward for this we are going to put all the information again using two local time for the time time and then we have the the delete form at the bottom here okay now we're basically done I'm just going to add one more thing which is optional to make it easier to navigate I'm just going to add links in the Navar to both our reservation page and our restaurant page so what I'm going to go I'm going to go to the Views folder and then shared and then I'm going to open up the layout file that HTML and then I'll scroll down here and I'm just going to update this is what right now there's just going to be a home and a privacy button I'm going to paste it and so there's going to be a restaurants and reservations button and it's going to use the restaurant controller reservation controller so now we can actually just run this so I'll go to terminal new terminal and then I can go into my directory and do net run now I just take this URL here okay and here's our page now it says no results I would expect there to already be results of the restaurants since we're connected to the database so that means we're doing something wrong here let's see what it is okay here's the problem in our app settings we have the database called restaurants but but if we go to the actual database on Atlas we can see it's called sample restaurants so this is supposed to be sample restaurants and then we also have to change this one okay let me just run this again okay now we can see all the restaurants now some the restaurants in the database don't have names that's why you see the blank thing and then we can see the Cuisines are all other in some ways would be cooler if we show we start the restaurants from the top instead of the bottom which is actually pretty easy to change we're going to go back to this I just want to show you this really quick which is in the restaurant service and oh that's reservation restaurant service if we do order bu like that and then I just restart this and then you can see we have all these different Cuisines all these different Burrows and all the names of the restaurants but we're going to go back to how it is how it was because of wanting to be able to see our new restaurants that we add so we can edit delete and Reserve like let's delete these ones that have no names if they don't have names why do we even have them in here so delete this one okay so let's add a new restaurant let's see if that works if we scroll down to the bottom add new restaurant and we'll say B pizza and then Cuisine pizza and then all the so for this database it's all New York so basically I guess that's not even a buau but you can put anything oh they're all New York buus I I didn't I don't think I mentioned that before but now we have our own restaurant including we can see all these other restaurants and also I can do a reservation so right now it's going to set the current time where I'm at but I can set the reservation for the 29th and we'll do 6 o'l and then I can reserve a table okay now it's showing the these are all our booked restaurants so we have a restaurant booked um at BO pizza for this time and we can book another restaurant so let's here Indian Oven we'll just do it for here okay so now we have two booked restaurants if we want to switch that we can so like maybe I want to change change the date so let's change this to the 30th update reservation so we've updated the reservation and if we go to restaurants we can also edit a restaurant maybe I want to edit the name so maybe instead of Indian Oven we'll change this to Indian stove and Cuisine I'm guessing it's Indian and then we can update the restaurant and then we can continue to delete Reserve see all the res restaurants the reservations so it works and if you want to make the application even better on your own you can make it so when you change a restaurant name it also changes the name of that restaurant and all the reservations however as it is now when you create the reservation it saves the what the name was when you create the reservation but we can go into the database and we can see how it is updated in the database so let me go to sample restaurants I'll go to the restaurants here and then I will search for name Indian stove and if I do the search we should see right here so the name has been updated in the database on mongodb ataly our application is complete now let's look at some Advanced features of mongodb Atlas since we already have access to the client when creating the DB context this allows us to perform Advanced mongodb operations such as Atlas search and Vector search these features enhance your application capabilities by enabling powerful search functionalities while still leveraging The Familiar EF core framework Atlas search is a full teex search engine provided by mongodb Atlas it allows you to run sophisticated search queries on your mongodb data with Atlas search you can Implement features like autocomplete faceted search and relevancebased sorting to use Atlas search with ef core provider uh follow these steps so you set up indexes in Mong Atlas go to your mongod Atlas cluster navigate to the search Tab and create a new index on your collection then Define the fields you want to make searchable next Define searchable fields in your models and you in your sear models ensure that the fields you want to search are properly defined this is an example of the the definition of a product model performing search queries use the m.net dri's capabilities to perform text searches since EF core itself does not directly support the mongodb specific search syntax you'll need to use the driver in conjunction with ef core this is an example this example shows how to perform a text search on the products collection the text filter helps search across all indexed Fields defined in your Atlas search index Vector search in mongodb is used for searching documents based on Vector similarities which is particularly useful for applications involving machine learning recommendations and natural language processing Vector search allows you to query documents using vectors representing text images or other highdimensional data while the mongodb EF core provider simplifies crud operations some advanc features like Atlas search and Vector search require direct use of the mongod be.net driver however you can still integrate these operations within your EF core based application by using the driver for search functionalities and EF core for other data management tasks by combining EF core and mongodb's advanced features you can build powerful and flexible applications that Leverage The Best of Both Worlds structured data access patterns of EF core and the powerful search capabilities of mongodb Atlas in this course we've explored how to integrate MB with Entity framework core we covered the basic concepts and how to put everything together into a full project by combining the strengths of both mongodb and Entity framework core you can build robust scalable and flexible applications making the most of mongodb these powerful features while leveraging the familiar EF core framework I hope this course has equipped you with the knowledge and tools to effectively use mang with ef core in your projects
