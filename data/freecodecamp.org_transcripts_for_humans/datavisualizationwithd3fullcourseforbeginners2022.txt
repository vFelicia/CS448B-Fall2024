With timestamps:

00:00 - curran is an expert when it comes to
00:02 - data visualizations this is an edited
00:04 - collection of live streams where current
00:07 - teaches data visualization using d3
00:11 - so hi everyone i'm curran welcome to
00:14 - this stream get it right in black and
00:16 - white i am super super excited about
00:18 - this
00:21 - this new series
00:22 - which i'm calling get it right in black
00:24 - and white
00:25 - is going to be a long running live
00:28 - stream series and course on data
00:32 - visualization with svg and d3
00:35 - and maybe other technologies we will
00:38 - weave in
00:39 - in time
00:40 - but that's the theme
00:43 - a little bit about what this course is
00:46 - i'm very excited to
00:48 - begin again
00:50 - from the beginning
00:52 - i have
00:53 - learned a lot from teaching this course
00:55 - in 2018 and 2020
00:59 - this is the 2018 version of the course
01:02 - which was quite popular
01:04 - and its
01:05 - visualization was d3
01:09 - this is the 2020 version of the course
01:12 - called dataviz 2020. it was recently
01:15 - published by free codecamp as a giant
01:17 - compilation
01:19 - but having taught this entire course
01:22 - twice now actually three times the first
01:24 - time it wasn't public
01:25 - i've learned quite a lot
01:27 - and
01:28 - one of the main pieces of feedback that
01:31 - i've got from dataviz2020
01:33 - is that you know that's cool and all but
01:36 - how can i do all that stuff without
01:38 - react
01:39 - so one of the key differences from the
01:42 - last year's version of this is that it's
01:44 - going to be oriented around pure d3
01:47 - meaning
01:48 - figuring out all these visualization
01:51 - problems purely with d3
01:53 - but coding it in such a way that if you
01:56 - wanted to you could integrate with
01:57 - different frameworks
02:01 - another
02:02 - key difference is that this is going to
02:04 - be live it's going to be like a tv show
02:07 - about data visualization
02:09 - so you can tune in live to the event
02:12 - i'm gonna have you know youtube chat
02:15 - open and i'll be responsive to that
02:17 - during the event
02:20 - and i'm also inviting a small group of
02:23 - friends and special guests
02:25 - to participate um
02:28 - with me live on the stream with their
02:31 - audio so we can have direct discussions
02:35 - during
02:36 - this event
02:38 - the reason why i'm doing this is because
02:41 - in previous courses
02:43 - i was sitting there all alone making
02:45 - these videos and
02:47 - if i forgot to say something or cover
02:49 - something
02:50 - it would come up only you know a week
02:53 - later that's why i want to have this
02:55 - live
02:56 - element to it
02:59 - this is a great opportunity to explain
03:01 - everything step by step so i'm there's
03:04 - lots of time here i think this series my
03:07 - intention at the moment is to have this
03:08 - series go for about a year
03:11 - so this will be a recurring event every
03:13 - single saturday for a year at this time
03:16 - i mean i might change the time but
03:18 - there's lots of time so there's no need
03:21 - to rush through anything there's no need
03:23 - to skip anything so i want to build up
03:27 - the viewers understanding step by step
03:31 - every step of the way
03:32 - so that's the
03:34 - overall
03:35 - summary of this course
03:38 - so
03:39 - introductions there are a couple here a
03:42 - couple folks here present
03:44 - in audio only
03:47 - via google meet
03:48 - um
03:49 - this is my sort of little uh you know
03:52 - community of collaborators slash
03:54 - learners
03:55 - um
03:57 - you know the idea is that these folks
03:58 - can step in we can have discussions on
04:00 - the fly
04:02 - i can be interrupted and be asked
04:04 - questions to go into more detail about
04:07 - whatever thing is happening
04:09 - so
04:10 - why don't you all just introduce
04:11 - yourselves i think i'll i'll call on you
04:14 - one by one
04:15 - um
04:16 - ideally you want to go first
04:20 - uh sure thank you karum um hello
04:22 - everyone i am adil and i'm very excited
04:25 - to be here i'm based in the uk and i
04:27 - work in the
04:29 - informatics department of a
04:31 - hospital
04:32 - and
04:34 - my work is a bit sequel heavy but i
04:36 - became enamored with d3 a while back and
04:39 - i'm really excited to be learning it uh
04:43 - deeply and yeah i'm really really happy
04:46 - to be here
04:48 - nice welcome a deal
04:51 - um
04:52 - sri ram sharma is also here you want to
04:54 - go sriram
04:56 - sure hi um
04:58 - my name is sriram
05:00 - i used to be a journalist
05:04 - now i'm learning to become a front-end
05:06 - web developer
05:08 - i have been following d3 through current
05:11 - tutorials and uh
05:13 - been a big fan of his database 2020 uh
05:17 - database
05:18 - 2020 and even the 2018 uh series
05:22 - so i'm really looking forward to this
05:24 - uh
05:25 - series as well and just kind of
05:27 - uh learning more from
05:30 - current on d3 as much as possible
05:33 - nice
05:35 - yep welcome shiram and also nita is here
05:38 - you want to go
05:40 - hello everyone my name is nita
05:43 - i'm also
05:45 - very much interested into data
05:47 - visualization
05:48 - and i see this
05:50 - live stream has an opportunity to learn
05:53 - directly from kara
05:55 - and his time is really valuable
05:58 - but
05:59 - he managed to do this trimming so i'm
06:02 - planning on getting benefited from it as
06:04 - much as i can
06:06 - and i hope you also you all also get
06:09 - benefited from it it's really good
06:12 - series is doing
06:14 - all right
06:15 - welcome neeta
06:16 - all right here we go this is episode one
06:19 - of get it right in black and white
06:21 - svg
06:23 - fundamentals
06:25 - what we'll cover
06:26 - today is what is html css and svg
06:31 - adding an svg element to an html page
06:37 - creating circles rectangles and lines
06:40 - adding text
06:42 - in svg
06:44 - and customizing the font
06:46 - with css
06:49 - all right so html hypertext markup
06:53 - language this is the standard
06:56 - that defines the language of
06:58 - web pages that you see on the web every
07:01 - single web page is an html
07:03 - page
07:04 - there's some source code
07:06 - that somebody wrote or that gets
07:08 - generated on the fly that has markup
07:11 - with those brackets and everything and
07:14 - your browser loads that in and it parses
07:17 - that html page
07:18 - and then displays it
07:21 - in your browser
07:22 - so when you go to a url in your browser
07:25 - that makes an http request
07:28 - to some server http means hypertext
07:32 - transfer protocol that's the you know
07:35 - the protocol the networking protocol
07:37 - that web browsers use
07:40 - so the browser makes an http request to
07:43 - some server that server
07:46 - comes back with an http response that
07:49 - has a bunch of text which is html source
07:53 - code and then when that source code gets
07:55 - loaded into your browser
07:57 - your browser parses it meaning it
07:59 - interprets it and then it does a whole
08:02 - bunch of stuff to
08:04 - make the web page appear
08:08 - within the html standard there are
08:12 - apis application programming
08:15 - interfaces that are sort of partitioned
08:18 - off
08:18 - one of them is svg
08:20 - scalable vector graphics
08:24 - another is css cascading style sheets
08:28 - and another is
08:30 - javascript which is often abbreviated
08:33 - js
08:35 - i'll go into detail
08:37 - on each of these a little bit
08:41 - these wikipedia pages are great i would
08:43 - recommend to read them if these are new
08:45 - concepts for you
08:47 - html hypertext markup language
08:50 - it was invented in 1993 28 years ago
08:53 - that's very old
08:55 - by tim berners-lee
08:59 - and it went through many many revisions
09:02 - and each revision introduced a lot of
09:04 - new features right now we're at html5
09:09 - and this standard is maintained by this
09:11 - group called
09:12 - w3c world wide web consortium
09:16 - so it's an open standard and all these
09:18 - various browsers implement it
09:20 - and this is what a very basic
09:23 - html page
09:25 - looks like
09:28 - and i'll go into more detail later
09:30 - on the specifics
09:34 - css stands for
09:36 - cascading style sheets
09:39 - it is a style sheet language so it's it
09:41 - is its own
09:43 - different language that gets embedded
09:46 - within html
09:48 - and um
09:50 - it it looks um
09:53 - see if i can find an example
09:55 - it looks something like this where
09:57 - inside of a style
09:59 - tag
10:01 - these things are called tags by the way
10:03 - there's an opening tag and a closing tag
10:06 - you can select elements on the page like
10:09 - an h1 element which is a heading one
10:11 - element and you can
10:13 - set a bunch of properties on it like the
10:15 - color and
10:16 - there's many many many properties that
10:18 - you can use this is very useful for
10:21 - styling
10:22 - things on the page and when i say
10:24 - styling i mean changing the color the
10:26 - font the size
10:28 - all sorts of different
10:30 - presentation kind of
10:33 - attributes
10:35 - svg stands for scalable vector graphics
10:40 - so scalable vector graphics
10:43 - it's a way of
10:44 - representing computer graphics that is
10:46 - based on the geometries and the shapes
10:50 - so for example
10:53 - if you have the letter s
10:54 - and you zoom it in with
10:57 - svg
10:58 - because it's vector graphics you don't
11:00 - lose any crispness because the graphics
11:03 - are defined in terms of the
11:05 - geometries themselves
11:07 - points
11:08 - and you know lines that connect the
11:10 - points
11:11 - as opposed to
11:14 - raster
11:15 - images like
11:18 - pngs bitmaps jpegs
11:21 - these are images defined in terms of
11:23 - pixels
11:27 - and a pixel is one of these little
11:29 - squares
11:30 - on your screen
11:33 - um so if you zoom it
11:35 - the pixels
11:37 - will get uh
11:38 - blown up or blurry
11:41 - often when you scale a raster it ends up
11:43 - getting blurry
11:45 - because the rendering engine tries to
11:47 - compensate
11:49 - so that's what happens with
11:52 - raster images when you scale them
11:54 - they get pixelated or blurry
11:57 - that's because they're defined in terms
11:58 - of pixels not the geometries
12:02 - and this is um
12:04 - one of the many reasons why svg is
12:07 - really good for data visualization
12:09 - because
12:10 - if you define a visualization with svg
12:14 - shapes
12:16 - you can for example output that to a pdf
12:19 - and print it out and it's very crisp
12:22 - when you print it
12:25 - in a web browser you can use the browser
12:27 - zoom and scale it and it doesn't lose
12:29 - any clarity
12:31 - that's one huge advantage of svg
12:33 - and also it's generally
12:36 - easy to work with programmatically
12:39 - because it's got this um
12:42 - dom
12:43 - structure
12:44 - which i'll get into but you can you can
12:47 - define um
12:49 - tags essentially in html for these
12:52 - different svg shapes
12:56 - so that's what html is
12:59 - in a nutshell
13:01 - any questions so far
13:04 - sure i was um wondering um
13:07 - svg
13:08 - um
13:09 - elements are they
13:11 - designed to
13:14 - create things that html can't do
13:16 - normally is that why svg exists
13:22 - so the question is um
13:26 - can h can svg elements do things that
13:28 - you can't do in
13:30 - html without svg
13:35 - yes that's right
13:37 - yes that's right um
13:40 - i believe in the early days of html svg
13:43 - was not a part of html and you were
13:46 - limited to
13:47 - things like divs
13:49 - to make shapes
13:52 - and that was it's very limiting to just
13:54 - use divs and css
13:56 - to make graphics on the screen
13:59 - so there are many many many things that
14:01 - you can do in svg
14:03 - that you can't do in html without svg
14:08 - there's a it's
14:11 - it's a massive library essentially of
14:14 - graphics capabilities
14:17 - paths lines areas
14:20 - different ways of blending the colors
14:22 - together
14:24 - all sorts of text utilities um
14:30 - yeah a great many things and and it's
14:33 - svg has a history as an image format
14:37 - as well
14:38 - so um tools like adobe illustrator
14:42 - can be used to create svg
14:45 - image files
14:47 - which
14:48 - if you open up an svg image file you see
14:50 - the text it looks a lot like html it's
14:52 - actually
14:54 - i guess a subset of xml
14:57 - so yeah it does introduce a lot of
14:59 - capabilities to html that that html does
15:02 - not have
15:03 - without svg
15:08 - thank you thanks karen
15:12 - and and we'll get into those the
15:14 - specifics and see what they are
15:17 - so in wikipedia it says svg is an
15:20 - extensible markup language
15:23 - yeah
15:25 - so i'm confused is it's a language
15:28 - itself or it's just a tag in html
15:32 - oh well actually if you read this text
15:34 - carefully it says
15:36 - scalable vector graphics is
15:39 - an
15:41 - xml based
15:44 - vector image format
15:47 - so
15:49 - it's confusing how wikipedia does this
15:51 - but the way to parse it it says
15:54 - it's
15:55 - it's extensible markup language
15:58 - based meaning it's based on xml
16:02 - and xml
16:05 - is is a good thing to know about for
16:07 - context because
16:10 - it defines
16:12 - the structure of
16:14 - svg
16:15 - and html
16:17 - in a sense html
16:21 - it used to be at least a strict subset
16:23 - of xml i think now there's some more
16:25 - language features of html than xml but
16:28 - xml i think came first
16:30 - so the comments
16:32 - that you see in html are derived or
16:34 - inherited from xml
16:38 - the notion of tags with openings and
16:40 - closing is from xml
16:44 - and so
16:45 - what it says in the wikipedia article is
16:47 - that
16:49 - svg is based on xml
16:53 - so you don't have any good example
16:55 - documents there but
16:58 - just the fact that
16:59 - svg is defined in terms of tags that can
17:04 - be nested
17:07 - that's that's all that it means that
17:08 - it's based on xml
17:12 - so htm html is derived from xml yes
17:16 - correct but yeah great question great
17:19 - question
17:21 - i think i'll move on
17:25 - i think sriram has questions oh did you
17:27 - three of them
17:28 - which chat no i just had an observation
17:30 - uh one is that like fonts which we use
17:33 - typically on the browser uh they are
17:35 - vector based
17:36 - um that was kind of like a thing i
17:38 - realized because you can scale up the
17:40 - fonts without losing any quality so
17:42 - that's like a realization that that's a
17:44 - vector-based format
17:46 - whatever type we import into our files
17:49 - when creating an html file
17:52 - another observation was that
17:55 - in the document formats that use the xml
17:57 - for syntax
17:59 - this includes like rss atom yes
18:04 - so
18:04 - people might have used maybe rss speed
18:07 - readers most likely soap protocols is
18:09 - used more by developers i think were
18:12 - making
18:13 - uh web uh api things like that so that's
18:16 - unlikely but essentially it's just
18:18 - following that same format even html is
18:21 - i think similar to the
18:23 - xml format in a sense yes
18:28 - yep it's very very similar
18:33 - and another thing was that xml was
18:35 - considered to be the way that
18:40 - everything was
18:42 - supposed to be written but then json
18:44 - came in and json has become now the
18:45 - defacto way for applications to talk to
18:47 - each other that's right what has
18:49 - happened is there's been a reversal of
18:51 - fortune because xml is actually two
18:53 - verbose and there's a lot of craft
18:57 - in
18:58 - an xml document which is kind of removed
19:00 - in something like json json is more
19:03 - readable which is why it's become more
19:04 - popular
19:08 - yeah that's true yeah there and i'll get
19:10 - into this when we start getting into
19:11 - like fetching data but there is a a long
19:15 - history
19:17 - to to the idea of
19:20 - um fetching data
19:22 - it used to be that the only like
19:24 - the only way to fetch data into the
19:26 - browser was to use xml files and so that
19:29 - xml
19:31 - text would contain data and nowadays
19:33 - people have migrated to use json instead
19:36 - javascript object notation
19:39 - but yeah long story short nowadays
19:41 - people use json and xml is sort of a
19:43 - thing in the of the past
19:46 - uh
19:48 - except for those little you know legacy
19:50 - systems that still use it like soap is
19:53 - using xml i bet there's still a ton of
19:55 - software that that uses xml as data
19:57 - interchange but for new projects yeah
20:00 - the preference is to use json
20:03 - all right awesome thanks for the
20:04 - questions everyone
20:07 - now let's actually use these things to
20:10 - create some basic shapes with
20:14 - svg
20:16 - now i'd like to get into
20:18 - this segment on
20:20 - creating
20:22 - stuff
20:23 - by writing code
20:24 - and to do this i'm going to use vishub
20:27 - which is this thing that i built over
20:29 - the past couple years
20:31 - essentially to help me
20:32 - teach my courses
20:35 - and i'm trying to evolve it into a
20:37 - business
20:38 - and there it's quite an active community
20:40 - there's you know
20:42 - 5 000 or so
20:44 - unique users
20:45 - over the course of its history and
20:47 - there's a ton of content in here and
20:49 - people are using it
20:51 - every day
20:52 - so this is what i'm going to use
20:54 - for this entire series
20:58 - and you too
20:59 - can use vishub so if you're following
21:01 - along
21:03 - with the live stream
21:05 - or watching this as a video i encourage
21:07 - you to follow the steps that i'm about
21:09 - to do
21:10 - so in vishub
21:12 - to start really using it you have to
21:14 - sign in via github
21:16 - so i'm going to sign into github
21:22 - so now i'm signed in
21:24 - and i can see
21:25 - my
21:27 - profile or create viz
21:31 - so if you click on create vis
21:34 - there are a lot of these
21:36 - templates here
21:40 - the most popular template is just a
21:42 - starter html page
21:44 - which is where we're going to start from
21:47 - today
21:49 - so
21:51 - what i'm going to do next is fork this
21:54 - meaning to make a copy of it that i can
21:57 - modify and you can do the same once
21:59 - you're logged in if you click on this
22:01 - little fork icon
22:03 - you get this little uh pop-up that says
22:06 - you know choose a name
22:08 - for this vis
22:09 - and i'm gonna say
22:11 - svg
22:14 - fundamentals
22:17 - that's my name
22:21 - so now i've got a copy of this
22:23 - and i can click open editor right here
22:27 - to see
22:28 - this
22:29 - little browser-based
22:31 - ide
22:32 - essentially
22:34 - ide by the way stands for integrated
22:36 - development environment
22:37 - it's not an advanced ide here
22:40 - by any stretch but it lets you edit code
22:43 - right here in the browser so if you
22:45 - click a file
22:46 - it pops open and you can see
22:48 - some details
22:52 - i'm gonna just remove
22:54 - stuff
22:55 - that we don't need
22:57 - um
22:58 - because i really want to
23:01 - sort of start from the beginning
23:03 - here
23:05 - and vishub has all these options to you
23:07 - know reclaim screen real estate a lot of
23:10 - the stuff i built specifically for
23:12 - teaching
23:13 - so
23:17 - here we have
23:18 - a very very bare bones html page
23:22 - now i'm going to get into the details of
23:25 - what is a bare-bones html page
23:28 - first of all
23:30 - we've got the doctype
23:33 - this
23:34 - is a thing that tells the browser okay
23:37 - this document uses html version five
23:42 - and uh
23:43 - yeah it's not strictly required like i
23:45 - think it would work without it but
23:48 - it's good practice from what i hear to
23:51 - include it
23:52 - so once you've told the browser that
23:54 - we're using html5
23:56 - then you can open up
23:58 - into this block of
24:00 - html
24:01 - and so i just want to point out that the
24:03 - structure of html is
24:05 - in general you've got an opening
24:08 - tag
24:09 - and a closing
24:11 - tag
24:13 - and a tag is defined by these um greater
24:16 - than less than
24:18 - things here
24:19 - and a closing tag
24:21 - has this slash after the
24:24 - uh this less than symbol right here
24:27 - and once you've got this opening and
24:29 - closing tag pair you can put a bunch of
24:33 - stuff
24:34 - inside it essentially developing a tree
24:39 - data structure and that's what xml is
24:42 - it's really a tree
24:44 - data structure meaning there's nodes and
24:48 - and each node has children so when you
24:50 - define a pair of opening and closing
24:52 - tags that's a
24:54 - that's defining
24:57 - a node a dom node dom means dom
25:02 - document object model
25:05 - so when this html page gets loaded and
25:07 - parsed and it runs in the browser the
25:10 - browser
25:11 - in parsing this and running it creates
25:14 - this thing called the dom the document
25:16 - object model
25:17 - and so this is the document the source
25:20 - code and the document object model
25:23 - is this data structure that gets created
25:26 - from this stuff and so this is the root
25:30 - node of
25:32 - the dom which is a tree data structure
25:35 - and then this root node has two children
25:37 - the head
25:39 - and the body
25:42 - so you can see very clearly here there's
25:44 - the head
25:46 - and the body
25:47 - the head
25:49 - of an html page
25:51 - it defines
25:53 - stuff that
25:56 - sort of uh is not directly visible
25:59 - on the page but may have some
26:02 - side effects
26:03 - uh for example
26:04 - the title tag
26:07 - is a tag that goes into the head and
26:09 - it's
26:10 - i believe it's actually required
26:13 - to to have a valid html document
26:18 - so if you were to
26:19 - have a text file on your machine called
26:22 - index.html
26:24 - and double click it
26:26 - and open it in the browser
26:28 - that the tab
26:31 - would say svg fundamentals
26:36 - and
26:39 - to that point
26:42 - i want to stress the fact that
26:44 - you can do all this stuff without using
26:47 - vishub
26:49 - so let me just
26:51 - show you what i mean
26:54 - i won't spend too much time on this but
26:56 - i want to stress that
26:58 - this is all using standard technologies
27:00 - and there's nothing really viz hub
27:02 - specific about any of this
27:05 - so if i make a new directory called test
27:08 - i'm using linux here
27:12 - and i create a file called index.html
27:15 - and i save this file
27:20 - and then i open up this
27:21 - folder you can see okay there is a file
27:23 - called index.html
27:25 - and if i double click that it opens
27:28 - in the browser
27:30 - and check it out it says svg
27:32 - fundamentals in the tab
27:35 - so that's the role of the title tag
27:38 - see all these different pages they have
27:40 - different text in the tab
27:42 - all of those are derived from the title
27:44 - tag
27:45 - inside of those
27:47 - html pages
27:49 - and then
27:50 - if you right click in the browser
27:53 - you can say view page source
27:55 - you can do this on any web page
27:57 - and it shows you the source code of that
28:00 - page which was just loaded in from this
28:02 - text file on my machine
28:05 - so this little diversion is just to say
28:07 - that
28:08 - you don't have to use vishub per se
28:11 - this is one of the complaints that i've
28:12 - gotten my previous courses like he
28:14 - doesn't tell us how to not use vishub
28:17 - vishub is a tool that makes it easier to
28:19 - get started writing code right away
28:21 - without having to set up a local
28:23 - development environment
28:25 - but for this svg stuff you don't need
28:27 - any development environment you can just
28:29 - double click the file
28:31 - and it should all work
28:34 - in vishub
28:35 - the title
28:37 - tag
28:38 - it feeds into the title of the viz
28:41 - which you see here
28:43 - on the page
28:47 - also invis hub there's a file called
28:49 - readme.md
28:53 - and i'm just going to delete all that
28:55 - stuff this is just where you can add the
28:57 - description
28:59 - of this page
29:00 - i'll type something here like
29:02 - a demonstration
29:04 - of svg
29:06 - shapes
29:07 - so the idea is you can use this
29:08 - readme.md
29:10 - to add a text description to your viz
29:14 - and then
29:16 - um
29:17 - you can close out the editor and then
29:19 - share a link
29:21 - like this just how viz works you can
29:22 - share links to these things with other
29:24 - people and then
29:26 - this page will load up without the
29:28 - editor open
29:30 - all right
29:31 - so now that we've got
29:33 - this basic page here
29:36 - how do we create
29:38 - svg shapes
29:41 - well
29:43 - it turns out you can put svg elements
29:45 - into the body
29:47 - the body
29:49 - is the part of the html document that
29:52 - contains things that end up visible
29:54 - on the actual page
29:57 - so just to give a little preview if we
29:59 - say hello world
30:02 - right here
30:04 - then hello world pops up in really tiny
30:06 - text
30:08 - on the running page
30:10 - and for this sort of thing i like to use
30:12 - the mini mode of vishub which will show
30:15 - the running page right there
30:17 - and i can edit the text
30:20 - over here
30:23 - so to create something with svg
30:27 - we can create an svg element right here
30:30 - in the body
30:32 - so we can have an opening svg tag and
30:35 - then a closing
30:38 - svg tag
30:39 - and this opens up
30:42 - a world of possibilities
30:44 - because within
30:45 - this
30:47 - pair of opening and closing svg tags
30:50 - we can put
30:53 - tags that are not valid outside of svg
30:57 - for example circle
30:59 - we can put a circle right here and again
31:01 - it's all tagged so you have to have
31:02 - opening and closing
31:05 - so we've got circle
31:07 - um not circle i like to phrase a lot of
31:10 - people phrase the closing tag as not
31:13 - so you could say body not body svg not
31:18 - svg
31:19 - circle and then not circle
31:22 - but
31:23 - the circle doesn't actually show
31:26 - because there's no um
31:29 - there's no attributes of it defined and
31:32 - in html
31:34 - attributes are specified like this
31:37 - cx equals
31:41 - 50
31:44 - cx is the attribute that defines the
31:47 - center x coordinate of the circle in
31:50 - pixels
31:52 - so if we set cx to be 50 and cy to be 50
31:56 - we still don't have anything showing up
31:58 - because there's no radius
32:01 - defined the radius of the circle you can
32:04 - define with r
32:05 - so if i say r is 50
32:08 - now we get a circle
32:11 - current
32:12 - yeah can i ask questions
32:14 - um just to recap
32:16 - the
32:17 - an element whether it's a html element
32:20 - or a svg element
32:23 - that
32:23 - is a group of tags is that is that right
32:27 - it's it is the the difference between
32:29 - element and a tag is it is that quite um
32:33 - important to know
32:35 - yeah that's actually a really great
32:37 - point it's it's real oh thank you so
32:39 - much this is what this is so good
32:43 - the distinction between element and tag
32:48 - is
32:49 - is very confusing
32:52 - i feel like a lot of people even folks
32:54 - who have that have been doing this stuff
32:55 - for a long time
32:57 - don't really grok
32:58 - what the difference is so my
33:00 - understanding
33:02 - of what the difference is between an
33:03 - element and a tag
33:05 - is that a tag
33:07 - strictly refers to the text in the
33:10 - source code
33:11 - of the html
33:13 - so this you know when i select this text
33:15 - on my screen
33:17 - that's an svg tag
33:19 - and that's a closing svg tag
33:21 - and then
33:23 - when the page
33:25 - runs
33:26 - in the browser
33:28 - that tag which is part of the source
33:30 - code it's part of the text of the source
33:33 - code
33:35 - all of these tags get parsed by the
33:37 - browser
33:39 - into this tree data structure called the
33:41 - document object model
33:43 - and then in that document object model
33:46 - the instantiation of that object
33:50 - is called the element
33:53 - so
33:54 - this set of tags
33:56 - in the source code
33:58 - when parsed
34:00 - leads to the creation of an svg element
34:03 - and a circle element inside of that svg
34:06 - element
34:07 - and
34:08 - you can see
34:10 - these elements using the chrome dev
34:12 - tools
34:13 - which is a really essential thing
34:16 - so if i right click here
34:18 - on that circle
34:19 - in chrome
34:21 - and click on inspect
34:24 - it opens up
34:25 - what's called the chrome dev tools
34:28 - and you can arrange these or if you like
34:31 - i prefer them at the bottom i'll make it
34:34 - bigger with
34:35 - control plus
34:38 - so you can see here that
34:40 - this
34:41 - is the svg element that's actually
34:44 - instantiated on the page and see when
34:48 - you hover over the svg element
34:51 - that little box appears
34:54 - and that box by the way is the default
34:56 - dimensions of svg
34:58 - when you don't specify width and height
35:02 - you'll also notice that that box
35:05 - is not flush with the edge
35:07 - of
35:08 - of the page so all of these things we
35:10 - will be addressing
35:12 - but yeah to your point
35:15 - the element
35:17 - is what's instantiated in the browser
35:19 - after the page runs the tag
35:21 - is just the text in the source code
35:26 - yeah i think that makes sense say so
35:29 - tags are used to describe what
35:32 - gets created at runtime exactly yes
35:36 - yes that's exactly right
35:39 - thank you thanks correct
35:40 - yep
35:43 - um and and by the way i want to
35:46 - highlight that these chrome dev tools
35:48 - are are so amazing because you can
35:50 - actually edit
35:52 - the dom
35:53 - so if i change cx to say 100 in the
35:57 - chrome devtools the circle moved over
36:00 - and if i change the radius to 500
36:03 - here it gets bigger it well it fills the
36:06 - entire
36:07 - space of the
36:08 - svg
36:10 - because svg this svg element has the
36:12 - default width and height so we can set
36:14 - the width
36:16 - to be
36:18 - um 960 and the height
36:21 - to be 500
36:23 - these are the default dimensions
36:24 - inherited from blocks.org
36:28 - which vishub also uses
36:32 - so what we're doing here is
36:36 - i would call it
36:38 - manual
36:39 - dom manipulation so manually
36:42 - manipulating the document object model
36:45 - using the chrome dev tools
36:47 - and
36:48 - when you hear the term dom manipulation
36:52 - that's usually when a javascript
36:55 - program
36:57 - reaches into the dom and changes it
36:59 - around at runtime and that's what d3
37:01 - does that's what react does that's what
37:03 - vue does felt all these things
37:05 - uh jquery the original
37:08 - they all do dom manipulation and so
37:10 - that's another key distinguishing factor
37:13 - between tags and elements i mean a tag
37:15 - is just
37:16 - it's
37:18 - static
37:19 - it just gets loaded once from the source
37:20 - code but an element the instantiation of
37:23 - the tag is dynamic meaning it can change
37:27 - at run time so
37:29 - it's i'm changing it manually
37:31 - by
37:32 - you know changing this text in the
37:34 - chrome dev tools but you can also make
37:36 - these
37:37 - same
37:38 - kind of dynamic changes
37:40 - using javascript
37:43 - and we'll do that
37:44 - in future episodes
37:47 - but now if this program reruns again if
37:50 - i trigger a rerun by editing it all of
37:53 - those changes are lost
37:56 - so um
37:57 - at this point i noticed
38:00 - some folks
38:01 - poking their head into this file i saw
38:04 - anita and sriram
38:05 - in there
38:07 - in terms of their presence cursors
38:10 - and
38:12 - i want to take this opportunity to open
38:15 - up
38:17 - this
38:19 - viz to be edited
38:21 - in real time
38:22 - by you all
38:24 - so i'm going to go to the collaborators
38:27 - and add both of you
38:32 - and all that ideal too just in case
38:35 - so this is a feature of viz hub where
38:37 - you can give people permission to edit
38:39 - the document in real time
38:41 - and i see some edits are already being
38:43 - made
38:46 - um whoever's editing you want to
38:47 - describe what's going on
38:51 - yeah i'm editing it it's just so much
38:54 - fun right
38:58 - wow this is amazing so
39:00 - okay a copy of the circle was made
39:04 - and the fill was set to be red
39:08 - this is perfect
39:10 - fill
39:11 - is an attribute of
39:15 - svg elements
39:17 - that defines the color of the inside of
39:20 - the shape
39:23 - and notice that the formatting is a
39:26 - little different um there's single
39:28 - quotes in use here
39:30 - uh and there's spaces around the equal
39:32 - sign
39:33 - uh but i've used single double quotes i
39:36 - just want to say it it doesn't really
39:38 - matter in terms of how the program runs
39:41 - but stylistically
39:44 - you can unify
39:46 - all of this stuff with a utility called
39:48 - prettier
39:50 - prettier is an amazing
39:52 - utility that automatically formats code
39:55 - and it's built into vishub oh i see you
39:58 - just use prettier nice
40:00 - if you click this little colorful p
40:02 - it auto formats
40:04 - the code
40:05 - invis hub to be consistently formatted
40:10 - wow this is really cool
40:12 - really cool
40:15 - so
40:17 - cx is 150 on the red circle meaning it's
40:20 - moved over to the right
40:23 - i want to clarify that that
40:25 - the coordinate space of svg
40:29 - it has um the origin in the upper left
40:33 - so the upper left is actually the
40:35 - coordinate 0 0.
40:38 - and then as x increases the shape moves
40:41 - over
40:43 - with my screen the shape moves
40:47 - to the right
40:49 - and as y increases the shape moves down
40:54 - and the y direction is inverted relative
40:57 - to what you see in like math textbooks
40:59 - with graphs and stuff
41:03 - or in data visualizations
41:05 - y typically goes up so that's that's
41:08 - going to be it's a source of confusion
41:10 - um often times when developing
41:12 - visualizations why it's flipped
41:14 - so just to be aware that's the
41:16 - coordinate space
41:17 - of
41:18 - svg so i see some edits are being made
41:22 - where there's a rectangle at x equals
41:24 - 400
41:26 - but
41:27 - that's not going to show up because the
41:29 - svg currently still has its default
41:32 - width and height
41:33 - so i'm going to just change that by
41:35 - saying width
41:38 - is
41:40 - 960
41:42 - and height
41:43 - is 500.
41:46 - now the svg should
41:48 - fill up
41:50 - the page
41:51 - and it does
41:54 - this is quite the little party going on
41:56 - here we've got a green circle we got a
41:58 - red circle we got a rectangle
42:01 - this is great so let me just use
42:02 - prettier
42:04 - on this
42:06 - so we can see clearly this rectangle
42:12 - rectangles are another you know
42:13 - fundamental svg shape
42:17 - it's you can create a rectangle with the
42:20 - rect element
42:22 - x and y
42:23 - are the coordinates of the upper left
42:26 - corner of that rectangle
42:29 - rectangles can have width and height
42:34 - these are all in pixels
42:37 - and yeah fill
42:39 - set to none
42:41 - means that the shape is transparent that
42:44 - there's no fill inside of it
42:48 - and stroke
42:50 - stroke is an attribute of svg elements
42:55 - that you could apply you can apply to
42:56 - circles rectangles a lot of different
42:59 - shapes and that's the outline and so
43:01 - stroke equals blue means that this thing
43:03 - here has
43:04 - a blue outline now
43:07 - and stroke width
43:10 - is what you can use to control the
43:11 - thickness of that outline
43:14 - so if i set the stroke width to be like
43:16 - 20
43:17 - we can see that that rectangle is
43:19 - actually the outer rectangle
43:23 - and and check that out that outer
43:25 - rectangle is actually above the circles
43:30 - that's another thing about svg is that
43:33 - um
43:34 - in
43:34 - in svg you can't control the z index by
43:39 - setting the z index css property which
43:42 - you can with other html elements the z
43:44 - index means which which thing comes on
43:46 - top of which other things
43:48 - the z ordering
43:51 - uh is purely dependent on
43:53 - the ordering of the stuff in the
43:55 - document itself
43:57 - so that's why this rectangle is
44:00 - on top of
44:01 - those circles
44:03 - but check this out if i move the black
44:05 - circle
44:06 - to be to be after that rectangle see how
44:09 - it appears on top now
44:12 - so that's why um that's what i mean when
44:14 - i say the z ordering
44:16 - is determined by the ordering in the svg
44:18 - document and that becomes super super
44:20 - important when you're in the weeds of
44:22 - making a visualization it's like a
44:24 - fundamental thing
44:26 - that you really need to understand
44:29 - so how about this let's collectively
44:34 - clean this up a little bit um these
44:36 - rectangles
44:38 - let's have like one rectangle one circle
44:43 - or no we it's multiple circles or it's
44:46 - nice
44:47 - in a way
44:49 - i also wanted to introduce
44:51 - the svg element of a line
44:55 - so you can have a line
44:58 - element
45:00 - begin line end line
45:03 - and that line has
45:06 - x one
45:09 - so if i put x one at zero
45:12 - y one at
45:14 - zero
45:16 - x
45:17 - at
45:19 - maybe 100
45:23 - and
45:24 - y2
45:25 - at 100
45:28 - should create a line
45:31 - um it does not
45:34 - and i believe that's because we have not
45:36 - set the stroke
45:38 - on the line i think lines might be
45:40 - invisible until you set a stroke on them
45:43 - there we go
45:44 - now you can see that little line
45:48 - i'm currently i noticed something
45:51 - earlier uh when the height of the svg
45:54 - was uh i think maybe halfway down and
45:57 - the nice big yellow rectangle was only
46:00 - only half of it was showing
46:02 - and i was wondering whether that meant
46:05 - you could create
46:07 - uh shapes and elements
46:09 - outside of that
46:11 - uh out of outside of the width and
46:14 - height does that mean
46:16 - uh
46:17 - when
46:19 - one sets a width and a height on the svg
46:22 - element in the sv svg tag sorry
46:26 - that only shows a partial view of what's
46:29 - what's
46:30 - being created or is like a sort of a
46:33 - window if that makes sense yeah that's
46:35 - correct see if we if we were to change
46:38 - the width for example to be
46:41 - 400
46:42 - or let's say 500
46:45 - it clips
46:47 - everything
46:49 - that falls outside of that
46:52 - so if you inspect the the svg element
46:54 - you can see that it's bounded
46:57 - at this square which is 500 and 500.
47:01 - the outer svg element clips
47:04 - the things that are inside of it
47:06 - because the the browser gives the svg
47:09 - only the screen real estate of its width
47:12 - and height
47:13 - and the things inside of it
47:16 - may well be outside of those that width
47:18 - and height i mean if we set x to 600
47:21 - that rectangle is going to be totally
47:23 - off to the side and it's going to get
47:24 - clipped out and you won't be able to see
47:26 - it
47:28 - so yeah i mean you can you can totally
47:30 - put stuff in an svg that's outside the
47:33 - bounds of the width and height
47:35 - and you just won't be able to see it
47:38 - yeah and there's a similar construct
47:41 - called an svg clip path that i think
47:43 - we'll get into a lot later on but that
47:46 - with an svg clip path you can you can
47:48 - use these shapes
47:50 - to clip
47:51 - other shapes
47:53 - inside of it like say if you had a
47:55 - texture you could clip the texture by a
47:56 - circle
47:58 - things like that
48:00 - i'll get into all that
48:01 - quite a bit later on
48:05 - oh i see there's a path
48:09 - who made that path i think it was sriram
48:10 - do you want to talk about that
48:15 - sorry kurt um i was just actually
48:17 - playing around with an svg that i
48:19 - downloaded from icon monster
48:22 - nice
48:24 - so i thought i'll just try and paste
48:25 - some elements out of it to see what
48:27 - exactly it's doing
48:31 - it's very cool like it's actually an
48:33 - element from um
48:35 - this thing that just creates an x button
48:38 - um
48:39 - like a menu x button
48:41 - nice so like we have these burger icons
48:44 - right like which are pretty much now
48:46 - the edm for
48:48 - menu
48:49 - yeah so i was just going through that
48:52 - it was a nice
48:54 - and did it work did it show up there
48:57 - yeah actually it did i saw a small like
48:59 - line
49:02 - cutting across the black circle
49:07 - so that line
49:08 - i believe was the one that i had added
49:12 - see if i set the stroke width on that
49:13 - line you can see it
49:16 - should get bigger there
49:19 - i don't know if that path is visible
49:22 - so let me let me do this i'll inspect
49:25 - the element
49:26 - and the path
49:28 - somehow the path is not showing up there
49:32 - in the svg
49:34 - is it valid oh it's got a self-closing
49:36 - tag
49:37 - i i don't believe that's uh that's not
49:39 - valid um
49:40 - html it may be valid jsx but in html you
49:45 - have you have to explicitly close
49:48 - the tag like this not path now it should
49:50 - show up
49:52 - yeah that's what i was wondering like
49:54 - [Music]
49:55 - it doesn't have a rosy tank
49:59 - there it is
50:01 - yeah yeah you in in in straight html a
50:04 - closing tag is strictly required except
50:07 - for certain elements like maybe an image
50:09 - element
50:11 - don't know but but yeah there's that
50:14 - path it is there
50:15 - it's a nice little rounded uh
50:19 - a rounded
50:20 - line
50:24 - there is there um is there a difference
50:27 - between line and path or is is one based
50:31 - on the other um because that that um
50:35 - i suppose you one could use
50:36 - either
50:37 - either thing to create a straight line
50:41 - like like the
50:42 - line shown in path
50:44 - yes there's a huge difference line is
50:46 - just
50:47 - it's just a straight line from point a
50:49 - to point b
50:50 - point a being
50:51 - um
50:53 - x1 y1 point b being x2 y2 but path
50:58 - is a much much more generic thing that
51:00 - you can use to construct
51:02 - all sorts of shapes
51:04 - really
51:05 - um
51:06 - it's got this domain specific language
51:09 - as part of it
51:12 - so let me let me edit this path because
51:14 - this string
51:15 - this string looks very cryptic
51:18 - and uh when you when you have icons and
51:20 - and stuff that are defined in svg you do
51:22 - have these cryptic strings that you can
51:24 - copy paste over but these cryptic
51:26 - strings actually use a language
51:29 - they use their own language
51:32 - so i'm going to actually edit this
51:34 - particular string
51:38 - i'm going to make
51:39 - some edits right in here to clarify how
51:41 - this little domain specific language
51:44 - works
51:45 - let me preserve that one just so we have
51:47 - it as a reference
51:49 - i'll make a new i'll make a new path
51:52 - so d equals
51:54 - this domain specific string that's
51:57 - specifically for svg paths
52:00 - m
52:00 - is the move to
52:02 - command
52:05 - so m
52:07 - if we want to move
52:08 - to
52:10 - let's say
52:12 - 400 400
52:14 - move to the x coordinate 400 and the
52:16 - y-coordinate 400 it's like that
52:20 - and then there's another command that
52:22 - you can issue which is the l
52:24 - command which is line two
52:28 - and and this is how it works like this
52:30 - is one command in this little domain
52:32 - specific language it means move to this
52:34 - these coordinates it's like putting a
52:36 - pen down it's like move your pen to this
52:38 - place and then l means line two
52:42 - means draw a line from that place to the
52:44 - other place so if i say l
52:47 - 500 comma 500
52:49 - it should draw a little line
52:53 - and i believe i have to say
52:56 - i need to i need to specify a stroke so
53:00 - this i'll say the stroke is black
53:04 - and see there
53:06 - there it is there's that little line
53:08 - there
53:09 - which is which is our path
53:11 - and
53:12 - you may be thinking well that's the kind
53:15 - of stuff you can do with an svg line
53:20 - but check this out
53:21 - um
53:22 - you can you can add another line to
53:25 - command attached to that one so let's
53:28 - say if we go l
53:31 - 500 600
53:35 - what does that do oh it's actually off
53:37 - the screen let me just
53:38 - bring everything down so move to 200 200
53:41 - line to
53:42 - 300 300 and then another line to
53:45 - let's say 300 400
53:50 - you can see that it has created this
53:54 - filled in
53:55 - shape there
53:58 - and it's filled in
54:01 - because
54:02 - fill is automatically set to black so if
54:05 - i say fill
54:06 - equals
54:08 - none
54:12 - now it's just this
54:13 - this path here
54:16 - and and let me increase the stroke width
54:18 - too so you can see it
54:26 - so here's an example of a path that's
54:28 - actually comprised of two line segments
54:30 - this is the first line segment
54:32 - and this is the second line segment
54:35 - and so this one here is actually that
54:39 - path element
54:40 - and the path element is what is used
54:44 - to construct line charts for example
54:47 - that are data driven instead of having a
54:49 - bunch of separate lines that are
54:50 - separate elements you can just have one
54:52 - path element that is comprised of many
54:55 - lines
54:56 - and same thing for area charts
54:59 - if you just use the fill
55:02 - it becomes this filled in area so you
55:05 - can use
55:06 - you can use paths for areas and area
55:08 - charts paths are also also used for
55:12 - geometries in maps
55:15 - like you know the shape of a country or
55:17 - what have you
55:20 - so i think that's
55:23 - all i really want to cover today
55:26 - but i feel like that's a lot oh and by
55:27 - the way this is how you can make
55:28 - comments
55:30 - in html
55:33 - begin it with this
55:35 - exclamation mark in two dashes and then
55:37 - end it with
55:38 - two dashes and a
55:41 - in a um
55:44 - a less than a greater than symbol or
55:46 - less than symbol
55:48 - yeah those are html comments
55:51 - so i see there's some activity in the
55:53 - youtube chat let me address
55:55 - those
55:56 - there's a question can you make layers
55:59 - like circle on top of another circle i
56:02 - see when i was talking someone made that
56:04 - edit
56:06 - and in fact yes
56:08 - you can see that there's there's the
56:09 - circle
56:10 - below and the circle above
56:13 - and yeah the layering is just purely
56:16 - based on the ordering of the document
56:18 - so if i were to take this smaller circle
56:21 - and put it before
56:24 - then it would be essentially invisible
56:26 - because it's actually behind the red
56:27 - circle which we can see if we if we move
56:30 - it around a little bit
56:32 - but yeah that's how you would create
56:34 - layers
56:35 - is by
56:37 - just making sure one comes after the
56:38 - other in the document and the one on top
56:41 - is smaller so you can see that what's
56:42 - behind it
56:44 - yeah great question
56:46 - adele you had a question
56:49 - uh yeah i'm just just curious uh about
56:52 - the
56:52 - path elements uh specifically the d
56:56 - attributes and um
56:58 - i would just uh is there a difference
57:00 - between
57:01 - the letters if they're uppercase or
57:03 - lowercase and um
57:06 - uh
57:07 - is is that is that something that um
57:10 - you
57:11 - you you've
57:12 - had to do before to uh because
57:15 - i'm not sure exactly what the difference
57:17 - is um
57:18 - and uh it'd be
57:20 - i'll just wondering a few
57:22 - sure
57:26 - yeah um let's find out if i make it a
57:28 - lowercase m
57:30 - it seems to still work and the lowercase
57:32 - l
57:33 - oh uh
57:34 - looks like that did something different
57:36 - actually
57:38 - so um it appears it is case sensitive
57:42 - uh to learn more about this
57:45 - i would suggest the md
57:48 - n article about
57:50 - svg paths because it's an entire
57:54 - language
57:56 - it says the d attribute
57:58 - is a value of string it is animatable
58:00 - yes
58:02 - um
58:04 - and somewhere in here yeah here it is
58:09 - these are all the path commands
58:13 - so there are a ton of these
58:15 - path commands
58:20 - uh but
58:22 - more often than not you don't need to
58:23 - construct these commands yourself
58:25 - because there's some utility that
58:27 - generates it
58:28 - often you encounter these like if you
58:30 - want to put icons
58:32 - into your svg you can you can copy paste
58:35 - these paths from an icon svg file
58:39 - with data visualization there's a
58:40 - package called d3 shape that will use
58:43 - later
58:44 - that actually generates these
58:46 - strings for you
58:48 - so usually you can treat this d
58:50 - attribute as a black box
58:52 - that you don't really need to know about
58:54 - like you don't really need to understand
58:56 - it
58:57 - um
58:58 - but i wanted to go into a little detail
59:00 - now because
59:02 - it's good to just know
59:04 - um
59:05 - the structure of it
59:07 - and i see in this example there are
59:09 - spaces
59:10 - like i think it could have
59:13 - spaces in it
59:15 - and it would be fine
59:17 - it works just the same
59:19 - and i feel like i've seen space
59:21 - delimited coordinates yeah that works
59:23 - too you don't even need the commas
59:26 - so there there is some flexibility there
59:29 - in terms of the structure but it looks
59:31 - like it is case sensitive maybe
59:32 - uppercase l and lowercase l
59:35 - um honestly i don't know they might be
59:36 - different
59:37 - commands or something
59:42 - yeah i think it's uh it says
59:46 - versus relative coordinates
59:49 - it could be
59:51 - just yeah in the note just below your
59:53 - where you're highlighting ah
59:55 - yes
59:56 - oh look at that uppercase
60:01 - is absolute and lowercase is relative
60:04 - based on the differences oh that's quite
60:06 - interesting
60:09 - so let's let me just see if i really
60:12 - understand that
60:14 - in our path
60:16 - we've got a move to command
60:19 - and let's let's see this second line to
60:22 - command
60:24 - it uses the absolute coordinates 300 400
60:26 - but in if we were to rephrase that in
60:28 - terms of relative coordinates with the
60:30 - lowercase l
60:31 - the change in x would be zero and the
60:34 - change in y would be 100
60:36 - and we get the same result yes
60:39 - that's what it is nice
60:43 - nice i'm actually learning that
60:45 - just now
60:46 - so
60:47 - thanks for that
60:49 - oh there's a question in the youtube
60:51 - channel
60:54 - did you say there was a get it right in
60:55 - black and white channel in the u in the
60:57 - d3 slack
60:59 - yeah you know
61:00 - um
61:02 - i was going back and forth
61:05 - mentally about how i wanted to deal with
61:07 - the
61:08 - um asynchronous communication for this
61:13 - and what i've decided is
61:17 - for now at least
61:19 - i want to try to use the vishub forum
61:22 - for these
61:23 - communications not the d3 slack
61:26 - mainly because the d3 slack is very
61:29 - um
61:31 - transient
61:33 - um
61:34 - but if you feel strongly
61:36 - let me know i mean i i i may end up
61:38 - creating a d3 slack channel for for this
61:40 - series i'm not sure
61:43 - but i used i used slack in the past
61:46 - for for the date of his 2020 series and
61:49 - there was so much really great activity
61:51 - in the d3 slack
61:52 - that is currently gone forever lost
61:56 - to the sands of time
61:58 - uh because slack doesn't preserve its
61:59 - history with the d3 slack which is on
62:01 - their free plan of slack
62:04 - so that's why um i want to
62:07 - use this vishub forum
62:09 - thing instead
62:12 - so
62:13 - um
62:14 - in the youtube stream there's a link to
62:16 - the blog post about it and in the blog
62:19 - post there's a link to the forum index
62:24 - and the forum index looks like this
62:27 - this is a page that i plan to maintain
62:31 - that will have an index of all the
62:33 - resources for all of the episodes and
62:36 - right now there's just episode one which
62:38 - doesn't really have anything in here yet
62:40 - but
62:41 - this is one i want to leave you with
62:45 - as we close out today i want to leave
62:46 - you all who are watching
62:50 - with an exercise
62:53 - this is another differentiator
62:55 - between this series and last series i
62:57 - want to give exercises at the end of
63:00 - each and every episode
63:01 - so that you all can engage with this
63:03 - stuff and try your hand at it and share
63:05 - your work and hopefully we'll build up a
63:07 - community of people who are following
63:09 - this series
63:11 - and participating
63:13 - and so here's what i want you to do make
63:15 - something creative with basic svg shapes
63:21 - and do that by
63:23 - you know fork fork
63:26 - the hello html example or
63:29 - you can
63:30 - fork
63:31 - the example that we made today
63:36 - and i'm just going to
63:39 - remove
63:41 - collaborators right now so we can like
63:43 - freeze it
63:44 - the way that it is
63:46 - as a record of today
63:51 - and so you can fork
63:53 - this viz
63:54 - to do your
63:56 - exercise
63:57 - and by the way
63:58 - in this vis hub forum software which is
64:01 - an instance of discourse
64:04 - what you can do
64:06 - is
64:07 - put a vishub link on its own line and it
64:10 - will unfurl to include a thumbnail so
64:12 - when you share your work that's what you
64:14 - can do
64:17 - let me just sign in so i can edit
64:23 - so you can fork
64:27 - this example and what i'm going to do is
64:29 - drop that viz hub link
64:31 - and on its own line
64:33 - and you see what happens here
64:35 - it unfurls
64:38 - so yeah that's what i'll leave you with
64:40 - today uh if you followed along enjoyed
64:43 - this please go ahead uh fork this thing
64:46 - modify it
64:47 - and share your work here
64:49 - um and feel free to ask questions also
64:52 - in this
64:54 - in this forum thread
64:56 - i'm hoping that this forum
64:59 - works out well
65:00 - as a platform for discussions and stuff
65:03 - um
65:04 - if there if it doesn't i might introduce
65:07 - a slack channel
65:08 - or a slack channel might be good to have
65:10 - anyway i'm not sure
65:11 - we'll see uh stay tuned
65:14 - for that
65:16 - so welcome everyone to episode two of
65:19 - get it right in black and white
65:23 - i'm just so pumped to do this so we've
65:25 - got adil here we've got anita here some
65:28 - others may join
65:30 - but in the meantime
65:32 - we can start
65:34 - episode 2 is going to be about pseudo
65:37 - visualizations what that means is we're
65:40 - going to use basic svg shapes to
65:43 - approximate
65:44 - visualizations and this will make sure
65:47 - that you know we really grok the
65:49 - fundamental shapes that go into making
65:51 - visualizations
65:54 - what we'll cover today
65:56 - and this is aspirational i may not get
65:58 - to all of these but
66:00 - i am going to review the exercise
66:02 - submissions from last week
66:05 - we got some really good ones
66:08 - removing the default margins and scroll
66:10 - bars that appear on an html page
66:13 - i would like to revisit the topic of
66:16 - text versus elements because there was
66:18 - some confusion around that
66:21 - and then we'll go ahead and develop a
66:23 - pseudo scatter plot a pseudo bar chart a
66:26 - pseudo line chart and a pseudo area
66:29 - chart
66:31 - and i would like to discuss
66:34 - svg interoperability with figma
66:38 - and other tools
66:41 - and if we get to it we'll add svg text
66:43 - and customize the font
66:47 - before we get into all of that i just
66:48 - want to
66:51 - reflect on what we've gotten into so far
66:54 - it's been html which is
66:57 - comprised of svg css and javascript
67:01 - and we have delved into svg
67:04 - a little bit more so within that svg
67:07 - concept we're looking at circles
67:10 - lines and paths
67:12 - and i think i'll be evolving this
67:14 - diagram
67:15 - as we go to add in all the various
67:18 - concepts that we learn about
67:21 - let's review the submissions
67:24 - from last week the exercise was make
67:27 - something creative with basic svg shapes
67:30 - and this is
67:32 - what happens
67:34 - here's one submission
67:36 - i'll click through it and see what it is
67:38 - this is just gorgeous
67:40 - beautiful beautiful stuff
67:43 - you know it's very artistic and this is
67:45 - what got me thinking of
67:46 - of highlighting some of the
67:48 - integrations with design tools
67:52 - and i want to point out if you put the
67:53 - link on its own line it will unfurl like
67:57 - this get a little preview in here
68:00 - so here's another submission
68:02 - the vision
68:04 - beautiful beautiful stuff
68:06 - and it's all just svg right there in the
68:09 - page
68:11 - oh here anita did one with um
68:15 - transitions
68:18 - actually now that i'm here um anita
68:20 - would you mind just describing
68:23 - the transitions that are happening here
68:27 - should i talk about it yeah yeah can you
68:28 - just talk about it for a few minutes and
68:30 - i'll highlight the the code as you as
68:32 - you talk about it
68:34 - okay
68:35 - so
68:37 - we made a basic uh
68:39 - rectangle using svg
68:43 - so rectangle is graphics here
68:46 - and
68:48 - the properties of these rectangles are
68:51 - width height
68:53 - fill
68:55 - x and y position
68:56 - and we can change all of that using css
69:00 - language which is here on the top
69:03 - style and
69:04 - in the style
69:06 - so
69:07 - using
69:08 - red
69:10 - i'm accessing this
69:13 - left element index vg directly
69:18 - and what is
69:20 - what is our aim is to do the transition
69:22 - on it
69:23 - when i'm hovering on a triangle
69:27 - so what i want to change the feel of it
69:30 - fill and stroke with so when i hover on
69:33 - it
69:37 - the transition is happening at three
69:40 - thousand millisecond
69:41 - means three seconds here
69:45 - and
69:45 - in the beginning
69:48 - the fill of the rectangle is red and
69:50 - stroke is black
69:54 - and on however
69:56 - rect and hover
69:58 - is changing
70:00 - fill to grain and stroke weight to 100
70:03 - pixel
70:05 - so the first one it just
70:11 - it
70:12 - shows the css properties for rectangle
70:15 - and the next rect semicolon hover
70:20 - is another state
70:22 - on the
70:24 - first state so it changes
70:27 - and that's where the transition come
70:28 - transition is actually between two
70:30 - states
70:31 - first is when the field is read and the
70:33 - second state is going to feel is the
70:34 - green forward angle and that's where
70:36 - transition property comes
70:38 - and we can define that using css
70:40 - language
70:42 - nice
70:43 - thank you that's awesome
70:46 - oh thank you so much for
70:48 - for describing that that's that's really
70:50 - great to see
70:51 - thank you
70:54 - so yeah just to recap a little bit
70:57 - i think this is the first time we're
70:59 - actually using css so when you when you
71:02 - introduce these style tags it opens up
71:05 - into a block of css
71:07 - and then these are the css selectors so
71:11 - this selects the body element this
71:13 - selects all rectangles
71:15 - and this one colon hover
71:18 - it says okay apply these styles when the
71:21 - thing is hovered over
71:23 - and so that is cool by itself and then
71:26 - you know when you add this transition
71:29 - you know this is one way to to animate
71:31 - things
71:32 - with svg and css
71:36 - so yeah great one by nita
71:39 - this one
71:40 - is really incredible
71:43 - i was just blown away by this i mean
71:46 - look at this this is just so beautiful
71:49 - so beautiful
71:51 - and i want to highlight that
71:53 - when this
71:54 - submission originally came in
71:58 - it looked like this
72:01 - and i immediately noticed that there's
72:04 - the default margin that appears with
72:06 - html
72:07 - see on the upper left corner there's a
72:10 - default margin of some i don't know some
72:12 - on pixels and then there are scroll bars
72:15 - here
72:17 - and so
72:18 - these are both undesirable things
72:21 - and so
72:22 - in the forum i just said oh add the css
72:26 - and i want to just discuss this css a
72:28 - little bit because it's very useful for
72:29 - pretty much anything that you do where
72:32 - there's a full screen svg
72:36 - this css
72:38 - applies to
72:39 - the body
72:40 - element that has a default margin
72:43 - in html
72:45 - and so
72:46 - to get rid of that default margin we can
72:48 - set the margin
72:50 - css property to zero
72:52 - that will get rid of the margin
72:54 - but then
72:56 - there do appear these scroll bars
72:59 - which are kind of a bummer and i don't
73:01 - really understand why they appear but
73:03 - anyway to get rid of those
73:05 - scroll bars you can add overflow hidden
73:08 - to the body as well and this gives you a
73:10 - really nice
73:12 - blank canvas
73:13 - where the svg does
73:15 - fill up the screen
73:18 - all right really good stuff
73:20 - yeah here's here's my comment you know
73:22 - that's how you can remove the scroll
73:24 - bars
73:26 - a couple more
73:27 - here's one with
73:30 - some circles it almost looks like a
73:31 - record
73:33 - very cool
73:35 - um oh yeah and you can set the height
73:39 - of things in viz hub
73:41 - so i noticed with this one
73:43 - it's actually larger than the page
73:46 - there's this scroll bar so you could get
73:48 - rid of the scroll bar
73:50 - or
73:51 - another thing that you could do
73:53 - is
73:54 - change the height there's an option here
73:56 - to set the height i just wanted to make
73:58 - sure everybody's aware of this
74:01 - so yeah you can use that to change the
74:03 - aspect ratio
74:05 - of the viz
74:09 - and this one also blew my mind
74:13 - look at that
74:19 - took my avatar with and uh
74:23 - you know exported the paths
74:26 - to svg pretty wild
74:29 - and this one also uses
74:32 - the hover css selector so when you hover
74:35 - it changes the transform which is a css
74:39 - property that you can use
74:40 - to to scale and rotate and translate
74:44 - things
74:46 - so i thought this was very nice work
74:48 - very nice work
74:50 - here's a flag
74:52 - of
74:53 - seychelles
74:56 - very beautiful
74:59 - this one uses the polygon construct
75:02 - within html it also uses an h1
75:06 - element which is this text here h1 in
75:09 - html means heading one
75:11 - so the text is kind of big and bold
75:15 - and here's what seams work
75:17 - very nice
75:20 - kind of like abstract art
75:24 - and you can see that it's
75:27 - a bunch of path elements
75:30 - where the only difference is where it
75:32 - moves to initially
75:34 - and since these are lowercase
75:36 - commands these are relative so all you
75:38 - need to do is change that one thing and
75:40 - it moves the whole thing down
75:42 - and check this out there's a class
75:45 - on
75:46 - the path element
75:50 - and a class can be selected with css
75:54 - meaning you can use css to select all
75:57 - elements that have a specific class
75:59 - using the dot
76:02 - prefix on the css
76:04 - selector so this one here
76:07 - this little block of css
76:10 - selects this inner path this one here
76:12 - and sets the fill to black just on that
76:14 - one
76:17 - whereas on all the other ones the fill
76:18 - is none
76:20 - so that's a nice
76:22 - you know first sighting of css
76:25 - classes
76:27 - can i ask questions yeah
76:30 - so what is difference between id and
76:33 - class
76:35 - oh id and class
76:37 - yeah
76:38 - this could be a basic question
76:41 - let me just uh fork this so i can modify
76:44 - it and show you to give a sense
76:47 - so the question is about um
76:50 - id versus class
76:53 - class
76:54 - is something that many things can have
76:56 - so there could be many classes that have
76:58 - the same sorry
77:00 - there could be many path elements that
77:02 - have the same class in which case this
77:04 - selector would apply to all of them
77:06 - there's also a construct called id
77:10 - and
77:11 - if you use id
77:13 - see how now it's broken it didn't it
77:15 - didn't select
77:16 - if you use id then the prefix on the css
77:19 - selector is a hash
77:21 - symbol
77:23 - so now
77:24 - that should work
77:27 - oops i i misspelled id as i n
77:30 - so id is inner path and it works
77:34 - the main difference
77:36 - between id
77:38 - and class
77:39 - is that the intention
77:42 - behind id
77:45 - is that there's only one thing that has
77:47 - a given id
77:50 - that's why it's called the id means the
77:51 - identifier for that one particular thing
77:55 - so
77:56 - id
77:57 - is for
77:59 - just one element
78:01 - meaning
78:03 - no two elements should have the same id
78:05 - ideally but class
78:07 - is is it defines a class of
78:11 - elements meaning a grouping of multiple
78:14 - elements so there could be many elements
78:16 - that share the same class
78:18 - so that's the main difference between id
78:21 - and class
78:24 - so going through the
78:26 - submissions
78:27 - and questions here neeta asked a
78:29 - question
78:31 - about svg it says svg is an xml-based
78:35 - markup language for describing
78:36 - two-dimensional vector graphics
78:40 - as such it is text base
78:42 - and so on
78:43 - and so the question is
78:46 - is svg
78:48 - a graphics language similar to html and
78:50 - xml
78:53 - yes
78:56 - yes it is svg in fact
78:58 - stands on its own
79:00 - as an image format
79:04 - and so in a sense it's not strictly
79:07 - within html
79:08 - svg exists
79:10 - as a standard for defining images
79:12 - outside of xml outside of html
79:16 - but it is based on xml so xml is the
79:20 - language used with the tags and
79:22 - everything that's the language used
79:24 - inside of svg images
79:26 - so i hope that i hope that answers the
79:28 - question is that clear enough
79:31 - yes yes intense nice
79:36 - and is everything inside svg tags
79:41 - text data
79:43 - um
79:45 - well
79:46 - this comes to the point of the
79:49 - distinction between the document
79:52 - and the dom
79:54 - this came up last time too i think it
79:56 - was ideal that asks what is the
79:57 - difference between a tag and an element
80:00 - and
80:02 - i gave an answer that i don't think was
80:04 - 100 accurate
80:05 - uh anita did some researching and
80:08 - reading about this
80:09 - um
80:11 - and i wanted to just clarify this point
80:15 - that in a document meaning
80:18 - in the text
80:20 - that defines
80:22 - an html document the source code you
80:25 - know in the dot html file
80:28 - there are elements there
80:31 - in the sense that
80:32 - the syntax in there defines
80:35 - the element
80:36 - and that
80:38 - element in the document is comprised of
80:40 - the start tag the ending tag and
80:43 - everything
80:44 - in between
80:47 - tags on the other hand are constructs
80:50 - that only exist in the document the tags
80:53 - for like every element
80:55 - in its definition in the in the document
80:57 - has two tags an opening tag and a
80:59 - closing tag and those tags are purely
81:03 - syntax
81:04 - for defining
81:06 - the elements
81:07 - but when the document gets loaded and
81:10 - parsed into the browser
81:12 - it becomes the dom the document object
81:14 - model
81:16 - and in the dom
81:18 - it's a tree data structure where there
81:19 - are elements
81:22 - so
81:23 - if you if you google html element and
81:26 - read about it people discuss it
81:29 - in
81:30 - in different ways
81:32 - and they use the same term
81:34 - element
81:35 - to define
81:36 - things that are in the source code
81:38 - meaning you know the start tag the end
81:40 - tag all the attributes and everything in
81:42 - between
81:43 - that's often referred to as an element
81:46 - when you're discussing
81:48 - the source code the document
81:50 - but there is a distinction between an
81:52 - element in the source code and an
81:54 - element in the living breathing dom
81:58 - and so
81:59 - the living breathing dom is a dynamic
82:01 - thing where the elements can change over
82:02 - time but the element in the document is
82:05 - a one-time
82:06 - thing like it's it's fixed when you load
82:09 - the page so i just wanted to
82:11 - discuss about this a little bit
82:14 - i hope it clears up any confusion around
82:17 - this any any remaining questions about
82:19 - this
82:23 - we'll be talking about dom in the future
82:25 - because we did not talk about it yet
82:29 - oh yeah i mean we'll be using the dom
82:32 - quite a bit
82:34 - quite a bit and i think we did
82:36 - talk about it a little bit
82:39 - yeah so if we look at anything in vishub
82:43 - i just want to clarify this with some
82:45 - some grounding
82:47 - um
82:50 - here's the begin tag
82:52 - here's the end tag
82:54 - and taken together
82:56 - it defines
82:58 - the element in the source code
83:01 - similarly here's this svg
83:05 - all this stuff that i've selected
83:06 - defines this svg element and there are
83:09 - elements nested within this
83:11 - but this is the source code you know
83:13 - this is the document but when it runs in
83:15 - the browser
83:16 - you can right click it and say inspect
83:19 - and that gives you this
83:21 - chrome dev tools
83:22 - which is a is a window into the dom
83:28 - not
83:29 - the document
83:31 - not the source code
83:33 - and so
83:34 - um
83:35 - in this sense we have touched the dom
83:38 - by using the chrome dev tools
83:41 - and like i said last time you can
83:44 - manipulate these things these attributes
83:47 - in here
83:48 - and it will update and see look at that
83:50 - it actually it it actually transitions
83:53 - so if i set the width to be 400
83:56 - it transitions because there's a css
83:59 - transition applied to it
84:01 - but what i'm doing here is manipulating
84:03 - the dom
84:04 - by using the chrome dev tools
84:06 - and in the future we're going to use
84:08 - javascript to manipulate the dom
84:12 - yeah but we're not quite there yet
84:16 - so going through the submissions i want
84:18 - to uh highlight this one by ideal this
84:21 - is so good
84:23 - yeah check this out it's this really
84:25 - beautiful animation with
84:28 - the sun setting and the colors changing
84:33 - so this is just gorgeous gorgeous work
84:37 - and
84:38 - ideal is live with us now
84:40 - and i was hoping we could um dive into
84:43 - this a little bit because there are a
84:45 - couple of new constructs used
84:47 - in here like gradients
84:49 - and animate
84:52 - tags
84:55 - so ideal
84:56 - would you like to sort of narrate what's
84:59 - going on here and also describe you know
85:01 - how you came to create this
85:04 - sure uh this was uh a really fun
85:06 - exercise um
85:08 - uh
85:09 - it i thought
85:12 - of the uh yeah there was a the idea of
85:14 - the sun rising and setting and uh
85:18 - automatically um
85:20 - thinking well i think how would that
85:21 - affect the surroundings as well
85:24 - so we have a um
85:28 - to begin with i created the sky element
85:31 - as a rectangle
85:34 - and
85:35 - gave it a
85:38 - fill
85:39 - um and
85:41 - which would be determined by
85:44 - the
85:45 - something called yeah the sky gradient
85:49 - and
85:51 - so this is a linear gradient
85:56 - that sits in a special tag called defs
86:01 - where it gets
86:03 - defined
86:04 - and
86:06 - sorry this was a radial gradient not a
86:08 - not a linear one and uh
86:11 - the uh it takes an id so we can refer to
86:15 - the definition
86:16 - and
86:17 - it's uh there is also it takes a
86:21 - cx and cy
86:23 - property which is uh familiar i think
86:26 - when when we use the circle
86:29 - tag
86:30 - and what the these do is uh similarly
86:33 - they define the
86:36 - the
86:37 - circle for that gradient
86:41 - and that
86:42 - the perimeter of that circle
86:47 - can be
86:48 - have a gradient um or a color attached
86:53 - to it
86:54 - um
86:55 - and um so yeah this was this was really
86:58 - uh
86:59 - this was the first time i'd really come
87:01 - across the
87:04 - animate and gradient
87:06 - apis of svg
87:09 - um so i just want to make sure i
87:10 - understand and just to explain
87:12 - everything uh if you change cx to zero
87:16 - see how the the gradient is sort of
87:18 - emanating from
87:20 - this side
87:21 - and 50
87:23 - puts it in the middle and likewise with
87:24 - cy if you put it to zero
87:27 - it's emanating from the top
87:30 - very very nice and you know i didn't
87:31 - actually know that
87:33 - um
87:34 - percentages
87:35 - are the unit here that so i'm learning
87:37 - things as we go
87:39 - so yeah i just wanted to tweak those um
87:42 - but yeah continue please
87:46 - yes the uh yeah it takes uh percentage
87:49 - units uh which was uh interesting and uh
87:53 - i may be wrong but i wonder whether it
87:55 - uh
87:56 - it uh it just corresponds to
88:00 - the position across the screen in terms
88:02 - of how far in terms of as a percentage
88:06 - it goes across this screen um
88:09 - uh so i think this would be
88:11 - 50 50
88:12 - for each of cx and cy
88:16 - would be
88:17 - right in the middle of the
88:19 - screen
88:20 - um
88:21 - of the svg
88:23 - and
88:24 - there is a it takes a radius um
88:28 - uh which also
88:30 - i i think
88:31 - uh tries to yeah uh describe the
88:35 - again in a percentage
88:37 - um
88:38 - uh but also tries to uh describe the
88:41 - width
88:43 - of the
88:45 - overall
88:47 - where the position of the perimeter
88:48 - would end up
88:50 - and so that was this was quite new um
88:54 - and
88:56 - uh so i think yeah in so i think we
88:59 - after experimenting just like that uh
89:01 - with the various numbers uh i settled on
89:05 - 75 um and then uh but yeah i was
89:08 - experimenting exactly in that way just
89:10 - to get an idea of what what that radius
89:13 - really meant
89:14 - um
89:17 - and uh
89:18 - yeah there's a
89:19 - inside of that radial gradient there are
89:22 - a
89:22 - there is a stop tag
89:25 - um
89:26 - a couple of stop tags um
89:30 - one that uh hasn't uh each of the these
89:33 - have have an offset property
89:36 - of z um and one is zero
89:39 - and the other is a hundred
89:41 - and um
89:43 - i think this really describes the offset
89:46 - property describes where that gradient
89:49 - stop is
89:50 - located and
89:53 - so i think for a radial gradient um
89:56 - it will be
89:58 - the distance from the center
90:00 - to the
90:02 - uh edges of the circle um
90:06 - so um
90:07 - yes again i was experimenting exactly
90:10 - like that just to see
90:12 - what the how the numbers would translate
90:14 - into
90:15 - into different uh
90:18 - yeah colors across the screen
90:20 - um
90:22 - so that was uh yeah just um
90:25 - and then there was uh
90:27 - a little uh yeah so there was a radial
90:30 - gradient used for
90:32 - the sky backdrop and then two linear
90:37 - gradients used for the two
90:40 - landscapes in the foreground
90:42 - and um
90:44 - actually before we go on what is this q
90:46 - is this what makes it curvy
90:50 - uh yes so i think uh this is a
90:53 - cubic
90:54 - curve if if i i looked up the
90:57 - mdn documentation um
90:59 - [Music]
91:00 - from uh uh last week and i think this is
91:04 - um
91:05 - it might be sorry not cubic but
91:07 - quadratic
91:08 - um
91:10 - some quadratic
91:11 - bezier curve
91:13 - and so um that will allow
91:17 - uh
91:18 - from the current position which is
91:19 - defined by um
91:21 - the first two sorry the last the second
91:24 - two which is um
91:26 - um
91:28 - the okay see if i just get this right so
91:31 - it takes a current position
91:34 - uh which is
91:36 - uh defined
91:38 - by what comes after m
91:40 - um where we as you described last week
91:42 - that's where when we put the ink to
91:45 - paper we put the pen to paper
91:48 - and then the
91:50 - what comes after q are four numbers
91:53 - the first two of those numbers are
91:56 - control points and the second two are
92:00 - where you would
92:02 - uh where the final point ends up
92:04 - [Music]
92:05 - so that's
92:06 - 960 is right on the other end of the
92:10 - screen
92:10 - and yeah again experimenting this is
92:14 - this is how i
92:15 - became a little bit more comfortable uh
92:18 - with understanding what it does
92:20 - and the two
92:22 - um the control points uh straight up to
92:25 - cue
92:26 - i think these help this uh help um
92:30 - these are points located somewhere which
92:32 - help
92:32 - describe the
92:34 - um the curve and the way that
92:37 - it gets pulled towards those control
92:39 - points
92:41 - um
92:43 - yeah again a lot lots of experimentation
92:45 - was involved just to
92:47 - just to see how um this
92:50 - this could this could work um
92:53 - very nice
92:54 - yeah
92:55 - it was it was fun um yeah similarly
93:00 - um
93:02 - we had uh yeah
93:04 - that was yeah again yeah i think that
93:06 - about sums it up there's linear
93:07 - gradients that use a similar format to
93:09 - the radial gradient
93:11 - and stops within those and i'm curious
93:13 - about this animate tag how did you
93:16 - figure this out
93:18 - yeah so this was uh
93:20 - so the problem i was trying to solve
93:22 - here was
93:24 - how could we animate the
93:27 - gradients so to speak how could as as
93:30 - the
93:31 - sun is rising and setting how can the
93:33 - colors change
93:35 - so um in this case uh this is the um
93:40 - this this particular uh landscaping i
93:43 - think in the foreground
93:45 - this would go from um alice blue to
93:48 - steel blue back to alice blue
93:52 - and it would do it across a number of
93:54 - seconds
93:56 - and
93:57 - so
93:58 - yeah
93:59 - the animate tag was very interesting
94:02 - you can
94:03 - try and descr by using something called
94:05 - the attribute name
94:07 - um which is uh the stop color
94:10 - and you can change the values of the
94:13 - stop color from and this blue to still
94:15 - blue and alice blue
94:18 - so that's a list of values that you
94:19 - would like it to go through
94:22 - nice
94:24 - um again so much experimentation
94:27 - yes really to help understand what was
94:30 - really uh
94:31 - what was going on
94:34 - this is really great adil thank you so
94:36 - much
94:38 - it was fun thank you
94:41 - you know this might be a good um
94:44 - transition with the discussion on
94:46 - control points
94:47 - to using um
94:49 - figma
94:51 - figma is this really amazing design tool
94:54 - that i've actually been learning myself
94:56 - for the first time recently and i've
94:59 - used it to create
95:00 - all of the various
95:02 - uh
95:03 - you know
95:04 - pieces of graphics
95:06 - for this series so far
95:08 - uh you may be interested to know that
95:10 - the mask
95:12 - that is applied to my video
95:14 - is actually
95:16 - drawn driven by this graphic right here
95:19 - so that's being masked
95:21 - onto my video
95:24 - and that's actually how it's working
95:28 - but anyway
95:30 - figma
95:32 - and a lot of different design tools like
95:34 - figma including sketch
95:37 - or adobe xd
95:40 - or uh even like straight vector graphics
95:43 - tools like adobe illustrator or inkscape
95:47 - which is open source or i believe
95:50 -  has limited svg capabilities
95:54 - but it it lets you design
95:57 - svg graphics
95:59 - and there's this whole interface around
96:02 - it
96:04 - and because the idea of control points
96:06 - came up
96:08 - i want to just create a little sample
96:11 - to illustrate
96:12 - control points
96:15 - so i've got this sort of template here
96:18 - i'm going to delete this stuff
96:19 - and there's this thing called the pen
96:21 - tool
96:24 - you can use it to define
96:26 - svg
96:28 - paths
96:29 - and so there's a path i can set the
96:31 - stroke and interactively control all
96:34 - this stuff so instead of having to
96:37 - tweak it little by little you know in
96:39 - the html
96:41 - you could use a tool like this to very
96:43 - rapidly
96:44 - iterate
96:45 - on stuff like this
96:47 - and because the control point concept is
96:49 - so abstract i wanted to illustrate it
96:53 - in a concrete way
96:55 - and i believe
96:56 - if you drag
96:58 - in here you can define a control point
97:03 - and so this dragging
97:05 - defines the control points along this
97:08 - bezier
97:10 - curve i think it's a bezier curve i may
97:11 - be mistaken
97:14 - but that that is the effect
97:17 - of the control points
97:20 - so if i grab that and change it around
97:22 - see that is
97:24 - that
97:25 - right there
97:26 - is the control point
97:28 - it sort of pulls the line
97:30 - in a certain direction
97:36 - yeah so that's the essence of
97:38 - control points
97:41 - one thing i wanted to do today was
97:43 - pseudo visualizations and what i mean by
97:45 - that is
97:47 - approximating visualizations
97:49 - and i want to take a moment to just
97:52 - discuss that
97:54 - sketching
97:55 - and doing mock-ups
97:57 - in a design tool
97:59 - are actually very important pieces of
98:03 - data visualization work
98:05 - i mean when i get involved in a client
98:08 - project for example
98:10 - we have a meeting
98:11 - and then the first thing i do you know
98:13 - if they send me the data i'm lucky if
98:15 - they don't i have to imagine
98:17 - the data
98:18 - but often based on a discussion i often
98:21 - sketch out something and this is a
98:23 - popular technique from nadi bremer and
98:26 - shirley wu they have data sketches that
98:28 - whole thing highly recommend it
98:31 - uh but to give a sense you know what i
98:33 - do
98:34 - is sketch
98:36 - on a notebook
98:38 - so i've got all these ideas
98:41 - that i've sketched out this is for like
98:44 - what i wanted to talk about today and
98:45 - the next episode
98:47 - and so
98:50 - sketching is the first step and then
98:52 - once you have a sketch
98:54 - that you like and sketches by the way
98:56 - you can communicate sketches to clients
98:58 - it's a very effective tool because then
99:00 - they realize that it's sketchy it's not
99:01 - final in any way but then once you get a
99:03 - sketch you like
99:06 - the next step often is to
99:08 - mock it up in a design tool
99:11 - i mean sometimes you do go straight to
99:13 - implementing with
99:15 - d3 or whatever but
99:17 - mocking up something in a design tool is
99:19 - a big part of the process and i think it
99:21 - would be good for us to do now to cement
99:24 - our understanding of the basic svg
99:26 - shapes
99:27 - that go into
99:28 - visualizations
99:32 - so here i am in
99:34 - figma which is
99:36 - the tool that i've come to
99:38 - really like for this sort of stuff
99:42 - and i think
99:43 - you know you can sign up for a free
99:45 - figma account and use it
99:47 - for free i think they charge you when
99:48 - you want to add
99:50 - real time collaborators
99:53 - so i'm going to start by making what
99:55 - they call a frame
99:56 - in figma
99:58 - this
99:58 - is going to be the sort of container
100:01 - for our svg
100:03 - and i'm going to set the width
100:07 - to be
100:08 - 960 and the height to be 500
100:12 - because that's what the default width
100:14 - and height are in vishub and in
100:16 - blocks.org
100:19 - and let's start by creating a pseudo bar
100:22 - chart um
100:25 - p s e u d o pseudo something means a
100:28 - fake version of the thing
100:30 - uh if anybody hasn't heard of that term
100:32 - pseudo
100:35 - so um
100:38 - yeah i wanted to make a pseudo uh
100:40 - scatter plot a pseudo bar chart pseudo
100:42 - line chart so why don't we start with
100:43 - the pseudo
100:45 - scatter plot
100:46 - a scatter plot
100:48 - visualization
100:51 - is
100:54 - comprised of
100:55 - circles
100:58 - and so if you drop in a circle there i
101:00 - can set the fill here to be black
101:03 - because we're going to get it right in
101:05 - black and white
101:07 - and then
101:08 - i'm just going to make a bunch of copies
101:11 - of that circle
101:12 - and position them
101:15 - around
101:17 - the screen like this
101:21 - so this is a
101:23 - pseudo scatter plot
101:24 - really
101:26 - um
101:29 - so i'll just you know spread them out a
101:30 - little more make it sort of
101:32 - aesthetically pleasing
101:35 - and
101:36 - at this point i want to highlight the
101:38 - interoperability of svg
101:41 - between tools like this and html so in
101:44 - figma you can select this frame and
101:47 - click on export
101:49 - and then select
101:51 - svg from this drop down menu here and
101:54 - then say export like that
101:56 - and then you get a dot svg
101:59 - file that you can open up in chrome
102:03 - and then
102:05 - you can say view page source and here
102:08 - you have the
102:10 - svg text
102:12 - which you can then copy
102:15 - into vishub
102:18 - so here i've got the svg fundamentals
102:21 - from last week i'm going to fork this
102:23 - and call it sudo
102:26 - scatterplot
102:28 - so i'll clear out the
102:31 - the readme i'll actually say
102:35 - an approximation
102:38 - of a scatter plot
102:41 - and then in index.html
102:44 - i'm going to get rid of that svg that we
102:47 - had before and paste
102:49 - that text
102:50 - in there and use prettier to autoformat
102:53 - that
102:55 - and there we go we've got a pseudo
102:57 - scatter plot
103:00 - uh current yeah
103:02 - does the xmlns
103:06 - attribute is that important
103:11 - is that necessary
103:14 - that's a great question um
103:16 - i believe it
103:18 - might
103:19 - be necessary for svg files as in image
103:23 - files that are outside of html inside of
103:26 - html you really don't need it
103:28 - it'll work without it
103:30 - and
103:31 - it gives you actually a lot of stuff
103:32 - that you don't need
103:34 - you'll see this a lot with
103:36 - programmatically generated svg there's a
103:38 - bunch of stuff that's not really
103:39 - necessary so we could clean up this svg
103:43 - like the view box
103:44 - um
103:45 - is something that
103:47 - you can use to control the relationship
103:50 - between
103:51 - the actual pixels and like the the
103:54 - pixels that you use the coordinate space
103:55 - that you use to define the shapes
103:58 - it helps with controlling the aspect
104:00 - ratio there's some tricks you can do
104:02 - with the view box but
104:03 - i'm going to delete it because it's not
104:05 - strictly required
104:07 - and also fill of none on the svg that's
104:10 - not required either
104:13 - and also fill equals black
104:17 - i'm going to use vim mode here to delete
104:19 - all of these at once you don't need the
104:21 - fill equals black because the fill is
104:22 - black by default
104:25 - on
104:25 - all svg shapes
104:29 - and this one is suffering from the
104:32 - default margins and the scroll bars
104:34 - issue so i'm going to just add that
104:37 - style
104:39 - back in
104:41 - to remove the
104:44 - margin i'm going to select the body
104:48 - element
104:50 - and say margin
104:52 - is zero
104:55 - see that moved it
104:56 - up just a little bit
104:58 - and then
105:00 - overflow
105:02 - is hidden
105:04 - okay that looks decent
105:07 - so there we go
105:08 - a pseudo
105:10 - scatter plot
105:11 - uh let's do also a pseudo
105:14 - bar chart
105:16 - i'm going to go back to figma here
105:20 - i'm going to make a copy
105:22 - of this frame
105:26 - i'll delete
105:28 - everything in it
105:30 - by selecting it hitting delete
105:34 - we can create rectangles
105:39 - can you give me access to the file oh
105:41 - sure
105:43 - yeah figma has real-time collaborations
105:45 - so i can add
105:47 - you
105:49 - can edit it's an invite
105:52 - you should be able to see it now
105:54 - right so making this pseudo bar chart we
105:57 - can just change the fill of this
105:58 - rectangle
106:00 - to be black
106:03 - and then
106:04 - i will copy this rectangle
106:07 - move it over
106:09 - and make it a
106:10 - little smaller
106:13 - and then do the same thing again
106:15 - and figma has this really nice thing
106:17 - where it will
106:18 - sort of snap
106:19 - to
106:22 - proportions that make sense so like
106:24 - the spacing is now the same 39 pixels
106:26 - between all of these
106:29 - and i think i'll make one more
106:32 - make it a little smaller
106:35 - and then i could select all of these and
106:37 - then
106:38 - drag them in
106:40 - uh yeah figma has these really cool
106:42 - features where you can
106:44 - uh move things around all at once like
106:47 - this
106:51 - see this this here is a bar chart with
106:55 - with no
106:56 - padding
106:57 - it's the term is padding
106:59 - between the bars
107:02 - and when you move them
107:04 - to be spaced out like this that's
107:06 - introducing some padding between the
107:08 - bars
107:10 - but anyway now we have our pseudo bar
107:13 - chart i'm going to export this as svg
107:16 - open it up
107:18 - view the source
107:22 - and i'm just going to copy the inside of
107:24 - the svg because we already have an svg
107:27 - sort of container
107:29 - in vishub
107:31 - then i'll go back to vishub here
107:34 - and i'll fork this
107:37 - and i'll call it
107:39 - pseudo bar chart
107:42 - and i'll change the description to say
107:43 - an approximation of a
107:48 - bar
107:48 - chart
107:50 - and then in the source
107:52 - i'm going to just
107:56 - delete the stuff in the svg and paste
107:59 - whatever came out of figma and there we
108:00 - have it
108:02 - there we have a pseudo bar chart
108:05 - and again there's some unnecessary stuff
108:07 - um
108:09 - there's a white
108:10 - background rectangle that we don't need
108:12 - because the background is already white
108:14 - we don't need to fill all of these with
108:15 - black because black is the default fill
108:20 - and if i run prettier again it nicely
108:22 - formats itself
108:27 - so there we have a pseudo bar chart the
108:29 - essence of a bar chart right here
108:33 - and i want to point out one thing here
108:35 - um
108:36 - because this point trips up people later
108:38 - on when you end up coding with d3
108:42 - you might think that you can just change
108:44 - the height of the bars
108:47 - and it'll lay out like this but that's
108:49 - actually not the case look at the y
108:52 - coordinates
108:54 - i mean if the y coordinate is the same
108:56 - and we just vary the height
108:58 - you end up with this
109:00 - inverted
109:01 - bar chart
109:03 - and this is because in svg the
109:05 - coordinate space of the y
109:09 - the y coordinate
109:11 - it goes from top to bottom meaning a y
109:13 - of zero is at the top which is again a
109:16 - confusing point and so what you have to
109:18 - do
109:19 - you do have to change the height of the
109:21 - bars but you also need to change the
109:23 - y-coordinates
109:25 - of the bars
109:27 - to be
109:31 - the y-coordinate of the bottom
109:34 - minus
109:36 - the change in height
109:38 - relative to the biggest bar
109:41 - and so we'll express all that in code
109:43 - later but i just want to sort of
109:44 - foreshadow
109:46 - that element you know that aspect of bar
109:48 - charts
109:50 - so let's let's do some more
109:53 - um
109:55 - a bar chart
109:57 - can also go the other way
109:59 - meaning instead of being
110:03 - the bars going
110:05 - from left to right and vertical like
110:07 - this
110:08 - you could have a bar
110:10 - like this
110:12 - and then have several bars that are
110:17 - you know going down the page
110:20 - like this
110:22 - this format
110:23 - often makes more sense
110:27 - mainly because
110:29 - you can position labels
110:32 - to the left of it
110:34 - and the text of the labels is not
110:39 - it's not sideways
110:42 - and that's a great lead into text
110:45 - we can say like okay this is
110:48 - this is bar a
110:50 - and i can change the size of it
110:54 - yeah so there's like
110:56 - bar a
110:59 - and this would be like
111:01 - bar b and these would be replaced with
111:04 - you know actual labels
111:06 - in real database but these are pseudo
111:08 - visualization so it's just abcd for now
111:15 - and the font here i've selected as share
111:17 - tech this is sort of the
111:19 - font that i'll be using throughout the
111:20 - series in figma you can quickly preview
111:23 - different fonts
111:25 - and i think most of these are available
111:27 - with google fonts
111:31 - but anyway
111:32 - share tech is what it'll be
111:35 - and then i'll just uh
111:38 - you know adjust this
111:40 - to be
111:41 - pleasing to the eye
111:43 - and let's export this one as well
111:46 - export frame eight
111:49 - i'll ins i'll view the source
111:54 - copy this stuff um
111:57 - oh that's that's odd
111:59 - the path has ended up as
112:03 - text
112:04 - rather the text has ended up as paths i
112:07 - guess that makes sense
112:09 - so that you can preserve the font
112:13 - but this is a great opportunity actually
112:16 - to
112:18 - to introduce fonts
112:22 - in code
112:24 - so what i'll do is i'll fork this one
112:29 - horizontal bar chart
112:34 - and then i'll paste
112:35 - that svg right in here
112:39 - and it worked
112:41 - there it is
112:44 - but
112:45 - if you want to
112:48 - programmatically set the text
112:51 - it'll have to be
112:54 - a little different from this i mean if
112:55 - you wanted to change what the text says
112:57 - you would have to like regenerate this
112:58 - path which is
113:00 - it's not something you want to get into
113:01 - doing so
113:02 - instead
113:04 - what we can do is define the text as
113:10 - text elements
113:13 - on the svg so i'm going to delete all
113:14 - those paths
113:16 - that gets rid of those letters
113:21 - and then we can add a text element
113:26 - so begin text end text
113:29 - and this is going to say a
113:34 - and
113:35 - i want to put it right next to this
113:37 - particular rectangle so i'm going to
113:38 - inspect it to see what the x and y
113:40 - coordinates are
113:44 - so x is
113:46 - 122
113:48 - and and with text elements you can have
113:51 - x
113:53 - and y so i'll say x is
113:55 - 122
113:57 - just as a starting point and y equals
114:00 - 27
114:04 - and we can't quite see it
114:07 - what if i say
114:09 - x is a hundred
114:14 - i'm not seeing it do you have a question
114:17 - um
114:22 - there it is so it is there
114:28 - it's just not getting shown maybe i need
114:30 - to say explicitly phil is black
114:35 - there it is
114:37 - so we've got a little a
114:40 - okay we've got a little a here now we
114:43 - want to make it so that it's aligned to
114:46 - this bar
114:47 - and it is big and it has a specific font
114:50 - to do that
114:53 - well to do a couple of those things we
114:55 - can use
114:56 - css
114:58 - so we've got this style tag here we can
115:01 - say
115:02 - select all text
115:04 - elements within the svg
115:07 - and say font size
115:11 - is
115:13 - i don't know 36
115:15 - pixels
115:17 - you just have to sort of tweak it
115:19 - 150
115:22 - okay maybe 120.
115:27 - or actually what was it in figma
115:30 - i'm going to use the same thing
115:36 - 72
115:39 - okay now what we want to do is
115:43 - center it
115:47 - so to do that i can just
115:52 - tweak the x and the y so let's say x is
115:56 - 90
115:58 - or 70.
116:00 - and y should be a little bigger maybe uh
116:03 - 40
116:06 - how about 80.
116:09 - getting there
116:11 - 90.
116:16 - it looks about right
116:19 - and to move it over to the left i'll
116:20 - make it maybe x is 60
116:23 - how about 50.
116:25 - there we go that's approximately the
116:27 - right place
116:28 - and now i want to introduce the font
116:32 - the font and so
116:34 - google fonts
116:37 - is the way to go when you want to add
116:39 - custom fonts nowadays there's a long
116:42 - history of fonts on the web
116:44 - but
116:45 - you know this day and age
116:47 - i would recommend google fonts
116:50 - you are dependent on the google servers
116:53 - but
116:54 - i believe all of these fonts are openly
116:56 - licensed so if you wanted to migrate
116:58 - away from google fonts you could but you
117:00 - would have to host these font files
117:03 - yourself which is sort of a pain
117:05 - but to use any of these fonts now you
117:07 - can just use google fonts and i'll show
117:09 - you how to do that
117:12 - so i want to use this font called share
117:15 - tech
117:18 - so you could download it
117:20 - and then
117:21 - to use it
117:24 - we can click on select this style
117:29 - and it gives you this little snippet of
117:31 - css that you can just copy
117:35 - so it says here use on the web just copy
117:38 - this css or no this is html rather
117:42 - that includes a link
117:46 - so in vishab i can just paste
117:49 - that
117:51 - right there
117:53 - oh there's some problem
117:58 - uh looks like i've got a syntax error
118:00 - somewhere
118:02 - does it require a closing tag
118:06 - for the link
118:07 - for the link time
118:09 - you know i think link is one of those
118:11 - things that does not actually require a
118:14 - closing tag and see if i get rid of it
118:16 - the syntax error is still there
118:19 - unexpected character in line 55
118:25 - oh i didn't
118:26 - see there it is i didn't add this little
118:28 - character to close out the text
118:33 - silly me
118:35 - okay now we're unblocked and i can paste
118:38 - that stuff up here
118:41 - and uh yeah the the link tag
118:44 - is one of those special tags that does
118:47 - not require
118:49 - a closing tag
118:51 - and i think image
118:53 - is also one of these so this is a
118:54 - slightly different syntax this is called
118:56 - a self-closing tag
118:59 - where it gets closed with the
119:03 - the slash right before this character
119:05 - here
119:07 - but anyway
119:08 - now that we've got those
119:10 - these link tags actually pull in the
119:13 - fonts
119:16 - and then
119:17 - we can set the font family like this by
119:19 - copying this little snippet
119:22 - so all the text gets this share tech
119:25 - font family
119:26 - and boom
119:27 - there we have it
119:32 - all right
119:33 - so we've got a pseudo bar chart here
119:38 - we can fill in these labels
119:41 - just by
119:43 - copying this text
119:48 - i'll make a couple copies of that
119:50 - and move on
119:52 - yeah sure
119:54 - is is the css
119:57 - accessing the dom or just the document
120:02 - oh
120:03 - yeah that's a great question
120:05 - is the css accessing the dom
120:10 - well
120:14 - it's
120:15 - it's like um
120:17 - the browser is this engine
120:20 - you could think of it as an engine
120:22 - that takes all of these things
120:25 - as input
120:26 - and
120:27 - works with
120:29 - everything
120:31 - and so
120:33 - so yeah it's a great question does css
120:36 - manipulate the dom
120:38 - not really it's almost like a layer on
120:40 - top of
120:42 - the dom
120:45 - um but it depends on the dom for sure um
120:49 - so it's not it's not like it's not
120:51 - strictly
120:53 - modifying the dom it's like the dom is
120:56 - there as one thing and then the css is
121:00 - sort of a layer on top of it that
121:02 - describes to the browser how to present
121:05 - that dom
121:07 - and so
121:10 - the dependencies are like the css
121:12 - depends on the structure of the dom to
121:15 - function but the dom does not depend on
121:16 - the css
121:19 - so it's really a layer on top of the dom
121:22 - so once the dom is there
121:24 - the browser says okay i've got this dom
121:27 - i have to present it
121:29 - how do i present it oh i have to check
121:31 - all the css that's there to just see if
121:33 - there's any properties that apply to
121:35 - these elements before i
121:37 - display them on the screen and so the
121:39 - browser engine internally says okay here
121:42 - i've got this text element i want to i
121:44 - want to display it
121:46 - what do i do
121:48 - which font do i use let me go and
121:51 - consult the css
121:52 - uh is there any css selector that
121:55 - matches this if so does it have a font
121:58 - family associated with it oh here it is
122:00 - yes it does therefore you know i need to
122:03 - use that font family to present
122:06 - that
122:06 - that dom element
122:09 - so that's generally how it works like
122:11 - that's generally the relationship
122:12 - between
122:14 - css
122:15 - and the dom does that make sense
122:20 - yeah so
122:21 - it is always css which makes the final
122:24 - decision or it is a dom like if we have
122:26 - fill color in dom
122:28 - and same fill in the style for same
122:31 - element then which one will work first
122:33 - which one is oh
122:36 - which one is dominant yeah that's a
122:38 - really good question
122:39 - that's a really good and this this trips
122:41 - people up sometimes so let me uh give a
122:43 - little demonstration
122:47 - so i'll say the class here for this
122:49 - rectangle is first
122:52 - bar
122:56 - and let me set the fill to be red
122:59 - in the in the html
123:02 - and then in the css
123:04 - we can select that by saying first bar
123:08 - gets a fill
123:10 - of green
123:13 - and look at that
123:14 - the css
123:17 - actually takes precedence the css
123:19 - overrides
123:21 - what's there
123:22 - in the dom
123:24 - in terms of
123:25 - the fill so this is one of those tricky
123:28 - rules and you know
123:30 - sometimes i have run into this
123:31 - particular problem
123:34 - when you're coding with d3 and
123:36 - everything
123:38 - and you use some code that sets the fill
123:42 - of a particular element to be some color
123:45 - and it's not working you know i've often
123:47 - sat there tearing my hair out being like
123:49 - what the what is even happening the
123:51 - twilight zone moment
123:54 - and
123:54 - [Music]
123:55 - so the first thing to do if your
123:58 - if your
123:59 - uh fill or any of these attributes in
124:03 - the dom
124:04 - if they're not working
124:06 - check if there's any css that might be
124:08 - overriding it
124:12 - see no matter what we set here if we set
124:15 - this to blue it's not going to work
124:17 - because there's css that is conflicting
124:19 - and the css actually takes priority
124:22 - which is counter-intuitive i mean i
124:24 - thought
124:25 - i thought it would make more sense that
124:26 - the attribute in the dom would take
124:28 - precedence because it's more localized
124:30 - but turns out
124:31 - it's not the case
124:34 - so yeah for this first bar
124:36 - we can set the fill to be let's say
124:38 - white
124:41 - and the stroke
124:44 - to be black
124:46 - and the stroke width
124:50 - to be
124:51 - like 20 pixels
124:54 - goes to show you that yeah css
124:57 - overrides
124:59 - what's in the dom
125:02 - um current i have a question um relating
125:06 - to this about um
125:09 - the fill attribute
125:11 - is that
125:13 - um
125:14 - because we are applying it to an svg
125:16 - element
125:17 - uh it works but uh i don't know if i've
125:21 - seen a fill
125:23 - uh attribute
125:24 - would that apply to html as well because
125:26 - i think i've seen other things like
125:29 - background color or color or
125:31 - i don't think i've come across a color a
125:34 - fill attribute
125:36 - for
125:39 - yeah that's a great question i believe
125:40 - it is localized only to svg
125:45 - it only makes sense to use it with
125:48 - respect to svg elements
125:52 - um and and to to clarify this
125:54 - like if i were to
125:56 - have this question this is where i would
125:58 - go the mdn documentation page for phil
126:03 - and
126:05 - i think there's this notion of a
126:06 - presentation attribute
126:10 - and and that's what
126:13 - the presentation attribute is
126:15 - in
126:16 - in the dom if you set the fill attribute
126:19 - on an element
126:22 - and i recall somewhere in here
126:27 - there was a list of things that could be
126:30 - used as attributes
126:32 - and also
126:34 - as css properties because there are a
126:36 - couple of these
126:41 - but i don't know off hand
126:46 - what they are
126:47 - but definitely fill and definitely
126:49 - stroke
126:50 - and stroke width
126:53 - but yeah to answer your question
126:56 - phil is only applicable to svg elements
127:00 - it's not it doesn't make sense outside
127:01 - of svg but there are a lot of properties
127:04 - that do apply outside of svg
127:07 - like transform i think is so is very
127:08 - generic it applies to all html elements
127:11 - not just svg elements but yeah fill and
127:13 - stroke they could be used as attributes
127:17 - or they could be used as css properties
127:20 - and if they are used as css properties
127:22 - then they dominate
127:23 - the value
127:25 - from the attribute
127:28 - yeah
127:29 - that's great thank you
127:33 - awesome so before we close out today
127:37 - i do want
127:38 - to also just do one last
127:42 - pseudo visualization
127:45 - which is a pseudo line chart
127:50 - oh wait i've already done that look at
127:52 - that
127:55 - so this is a pseudo line chart right
127:57 - here it's pretty much an svg path
128:01 - and on this point
128:06 - um
128:08 - there are
128:09 - aspects of svg paths that become
128:12 - important like
128:13 - the line join
128:15 - you could have different values for line
128:18 - join to make it either jagged cut off
128:20 - like this or rounded and then there's
128:23 - also the cap
128:25 - the cap can be set to round for example
128:28 - to make the caps
128:30 - round
128:32 - so as a last pseudo visualization i'll
128:34 - just make this bigger
128:36 - export this
128:38 - as svg
128:42 - view the page source
128:44 - copy that
128:45 - into vishub
128:51 - this is going to be a pseudo line chart
129:00 - and then i'll paste that here
129:04 - yeah so that completes our series on
129:07 - pseudo visualizations
129:10 - yeah i was looking at the youtube chat
129:12 - uh the only thing i see is from wasim
129:14 - isn't the logic with svg phil different
129:16 - from regular html
129:18 - in which inline styling dominates over
129:20 - the style tag
129:22 - that's a great question um
129:25 - i don't know if
129:28 - i mean
129:29 - we've just looked at how it is with svg
129:32 - with svg
129:33 - whatever's in the css dominates but with
129:36 - other
129:37 - types of tags
129:39 - like straight html i'm actually not sure
129:43 - how it is
129:46 - um i can do
129:49 - a little experimentation
129:52 - yeah let's find out
129:54 - so here's this thing that nita made
129:57 - that is sort of an exploration of basic
130:01 - html elements
130:02 - there's the h1 element that ends up as
130:05 - this text
130:06 - there's the p element which is a
130:07 - paragraph
130:10 - h2
130:11 - which is this
130:12 - smaller text here
130:16 - and
130:18 - i'm going to fork this
130:21 - and call it investigation
130:26 - of css precedence
130:30 - and in here
130:34 - oh this is kind of interesting uh
130:36 - there's some missing
130:39 - tags which is another point we should
130:41 - discuss but to answer the immediate
130:43 - question i'm going to introduce a style
130:45 - tag
130:50 - and i'm going to say
130:54 - h for h1 elements
130:56 - let's make them red
131:02 - oh phil
131:03 - sorry not phil
131:05 - but rather color
131:07 - color is the generic html
131:10 - css property okay so now that's red
131:15 - um how would we make that red otherwise
131:18 - i don't
131:20 - i'm sort of grasping at straws here you
131:22 - have to do can i tell you yeah tell me
131:26 - you write style as a property in h1
131:29 - equals to
131:30 - and everything else goes in the
131:32 - ports here
131:34 - right yeah this is called inline styles
131:38 - which you can do with svg too by the way
131:41 - um
131:42 - yeah i believe in straight html like
131:45 - this the color is not
131:47 - something it's not there is no attribute
131:50 - for color
131:53 - and so you would do inline styles like
131:55 - this
131:57 - and so in this case um
132:02 - yeah i see in the youtube chat milo is
132:05 - saying yeah both things are style
132:06 - instructions
132:08 - that's right that's right yeah it is css
132:11 - so this is called inline css
132:13 - and
132:14 - the inline css does take precedence
132:18 - over
132:19 - the
132:20 - other css the sort of external
132:24 - non-inline css see if i get rid of that
132:28 - it becomes
132:29 - green
132:31 - but if we put the inline style there it
132:33 - does take precedence
132:35 - over the other style
132:38 - and i believe it might be the same
132:41 - with
132:43 - svg
132:45 - let me just
132:46 - uh double check that
132:50 - so we've got this pseudo horizontal bar
132:52 - chart
132:55 - and
132:58 - instead of saying fill equals blue
133:02 - if we say style
133:05 - equals
133:07 - fill
133:08 - is blue does that take precedence
133:12 - it does
133:14 - it does look at that
133:17 - okay cool so we have learned a couple
133:19 - things um inline styles
133:22 - like this inline css
133:25 - always takes precedence over
133:28 - css defined
133:30 - elsewhere
133:32 - however
133:35 - with the attributes
133:37 - if i say fill equals blue
133:42 - the css takes priority over the
133:44 - attributes so that's how that's how it
133:47 - all works
133:48 - with the priorities here
133:51 - that is so deep
133:53 - [Laughter]
133:56 - yeah
133:58 - yeah this is so great i love this
134:00 - question format because um we can stop
134:03 - and really investigate
134:04 - and get to the bottom of things
134:06 - uh that people watching are wondering so
134:09 - yeah this is so uh
134:12 - so good
134:16 - before we go i want to leave you all
134:17 - with this exercise in the forum entry
134:20 - for episode 2
134:21 - here's the exercise
134:23 - recreate a pseudo visualization
134:27 - from one of these visualization
134:29 - taxonomies
134:31 - and so i invite you to go through
134:36 - i invite you to go through these links
134:39 - under data visualization taxonomies
134:41 - and
134:42 - look through all of these
134:44 - and then pick one to reproduce as a
134:46 - pseudo visualization
134:48 - there's the visual vocabulary
134:53 - deviation correlation see there's
134:55 - already sort of pseudo-visualizations in
134:57 - here these are great taxonomies of
135:00 - visualization types
135:02 - that you can use as a reference
135:04 - uh to know how to
135:06 - encode certain types of data
135:10 - and we'll get into all of the logic
135:12 - behind this
135:13 - later on but for now you can just see
135:15 - you know there are a bunch of pseudo
135:17 - visualizations here
135:19 - in these various
135:20 - taxonomies so what i want you to do is
135:23 - look through these
135:26 - pick one
135:28 - and reproduce it with svg
135:30 - invis hub
135:32 - you could modify the html directly or
135:35 - use
135:38 - some design tool like figma or
135:40 - others
135:44 - and here's another one
135:47 - really amazing work
135:51 - these are really fascinating
135:53 - taxonomies
135:55 - of
135:56 - visualizations
135:57 - from data to vis
135:59 - another one
136:01 - sort of a decision tree based on what
136:03 - sort of variables you use which chart
136:05 - types to pick
136:11 - so yeah go through these links
136:15 - and recreate a pseudo visualization from
136:17 - there and post your visa link
136:20 - in this thread
136:21 - alright really looking forward to see
136:23 - what you come up with
136:25 - and thanks for tuning in
136:27 - i'll uh see you again next week take
136:30 - care
136:31 - bye
136:35 - welcome everyone to episode three of get
136:37 - it right in black and white
136:39 - um i've been really looking forward to
136:41 - this one because it's where we're going
136:43 - to dive
136:44 - into dom manipulation with javascript
136:49 - all right so here's what we're going to
136:50 - talk about this time
136:52 - soul li wit
136:55 - reproductions
136:56 - in vanilla javascript
136:58 - and this this thing right here
137:01 - on the screen is
137:03 - a soul lit
137:05 - piece
137:06 - what we'll cover today first i would
137:08 - like to review um the exercise
137:11 - submissions from last week got some
137:12 - really good ones and then i'll talk
137:14 - about sol lewitt this artist who's done
137:17 - a lot of really amazing pieces that we
137:20 - can reproduce with javascript and svg
137:23 - then i'll talk about javascript basics
137:26 - like javascript language features
137:29 - and then i'll talk about the dom api
137:33 - so we're not going to use any libraries
137:35 - no d3 it's just going to be vanilla
137:37 - javascript dom manipulation and to
137:41 - implement some of these solar with
137:43 - pieces we're going to need to use svg
137:46 - masks
137:48 - and perhaps svg clip path
137:51 - all right so let's let's uh review these
137:53 - exercises
137:56 - so here's the forum post from last
137:57 - week's assignment which was recreate a
138:00 - pseudo-visualization from a
138:01 - visualization taxonomy
138:04 - i'm just going to step through these
138:08 - these works here's one from nita
138:10 - a pseudo
138:12 - venn diagram
138:14 - very nice
138:16 - um
138:18 - oh anita's here do you want to talk
138:19 - about this at all
138:21 - yeah i can talk about it um
138:23 - i made this one
138:25 - using figma
138:26 - just basic three circles
138:30 - and
138:33 - from the link that current shared last
138:34 - time
138:36 - basic vein diagram it was
138:39 - took like
138:40 - not that long to make it and just
138:42 - exported it using svg
138:45 - so each shape here is a svg
138:49 - and
138:51 - yeah
138:52 - that's it
138:53 - thank you
138:56 - very nice very nice
139:00 - here's a pseudogantt chart
139:02 - from
139:05 - male uh forgive me if i'm not saying
139:07 - that correctly but this is very nice
139:11 - very beautiful i mean this is getting
139:13 - into some serious uh
139:15 - data vis
139:17 - type stuff with the numbers and the
139:19 - labels and the grid and there's a dashed
139:21 - line
139:22 - this is fairly impressive you know this
139:25 - is amazing and and
139:26 - to be able to implement this later with
139:28 - d3 would be a great
139:30 - uh direction for a project
139:33 - wasim
139:34 - made a
139:36 - pseudo slope graph
139:39 - very nice very nice i appreciate the
139:42 - styling with the font and everything
139:43 - it's very much
139:45 - in the theme of get it right in black
139:46 - and white and this is one of those
139:49 - visualization types that we can
139:50 - definitely implement
139:52 - in the future
139:54 - with real data with d3
139:58 - andre made a pseudo spider chart
140:03 - this is pretty neat
140:06 - also sometimes called radar chart
140:09 - where yeah i could visualize different
140:11 - dimensions of the data along this
140:13 - circular
140:15 - grid shape here
140:16 - very nice
140:19 - and here's a pseudo icon array
140:22 - this is pretty cool
140:24 - pretty cool indeed you know and i love
140:26 - the
140:27 - the creative font
140:29 - and and the trees here they're sort of
140:31 - filled in at different levels
140:34 - very nice work
140:36 - by
140:37 - senna
140:39 - and ideal
140:41 - check out this one by a deal oh my gosh
140:44 - this one when i saw it i
140:45 - i was so happy
140:47 - this is just so gorgeous
140:49 - so gorgeous
140:51 - um ideally you wanna talk about this one
140:53 - a little bit
140:55 - uh yeah this was a really nice exercise
141:00 - it's um
141:01 - circle packing is
141:04 - plays on these tree structure and each
141:07 - circle represents
141:10 - a level and also a branch so
141:14 - in the case of um subcircles
141:17 - will also represent uh sub-branches
141:20 - and um
141:23 - and it just i think it
141:25 - brings out the
141:26 - hierarchy uh at different levels of the
141:29 - tree quite nicely and i think maybe
141:32 - one improvement i could
141:34 - have maybe do in the future is to
141:36 - probably apply different shadings to the
141:39 - different levels
141:40 - uh circles just to bring that maybe uh
141:44 - bring the emphasis of the uh hierarchy
141:47 - out a little bit more
141:49 - but yeah this was
141:50 - a really nice fun exercise
141:53 - and built in
141:55 - the shapes were built in figma and the
141:57 - text was added later inside visha
142:01 - oh very nice that's a great approach
142:04 - and i have to say i love how
142:07 - the consecutive levels
142:09 - are inverted
142:11 - that's a really nice touch
142:14 - really nice and i love how it's just
142:16 - totally black and white
142:17 - but yes if you were to add color you
142:19 - could do a lot of different things with
142:22 - this type of viz and this is another one
142:24 - that we will definitely implement later
142:26 - with d3 based on data
142:28 - so i love where where this is going
142:31 - uh there was some discussion about how
142:33 - is this animation done it was using 3js
142:37 - which is this really crazy uh
142:39 - three-dimensional
142:40 - library that we might touch later on
142:43 - but
142:45 - yeah the point here is that if you
142:47 - inspect the dom
142:48 - you can do some sleuthing and figure out
142:51 - how these various things that you find
142:52 - on the web
142:54 - we're done
142:55 - alenka did this really nice
142:58 - pseudo joy plot
143:00 - very cool very cool
143:02 - and uh here's here's another one from
143:06 - kirsten
143:07 - this
143:09 - faux data vis it's it's a
143:11 - approximation of a stream graph
143:14 - very nice
143:15 - very nice indeed
143:17 - yeah this is another one that we can
143:18 - implement in the future with real data
143:22 - so
143:23 - great work from everyone
143:25 - on these
143:27 - all right now i'd like to talk about
143:30 - sol lewitt uh the whole context for this
143:34 - is that
143:36 - um i went to this exhibition of solowit
143:39 - art years and years ago and i was very
143:41 - inspired
143:42 - by the the art and and years later i was
143:45 - thinking oh my gosh this is perfect
143:47 - stuff to recreate with code because it
143:50 - highlights some of the
143:52 - uh the sort of foundational things that
143:54 - you can do with code
143:56 - this is solowit he was an american
143:59 - artist
144:01 - and he's done all sorts of
144:03 - interesting
144:05 - art pieces he had a very
144:07 - sort of storied career in art
144:11 - and he does these large-scale
144:13 - um exhibitions in in large spaces
144:18 - here's a piece by sol lewitt where it's
144:20 - this giant set of shapes installed on a
144:23 - wall
144:25 - and as you can see it's like bands of
144:29 - black and white
144:31 - vertical and horizontal
144:33 - with different masking patterns applied
144:38 - so this is one of the pieces
144:41 - that i think is really nice and this is
144:43 - the one that i would like to try to
144:45 - reproduce today
144:46 - by writing code
144:48 - and i i really look forward to it it's
144:50 - going to be a lot of fun
144:52 - it may be too ambitious to have the
144:54 - multiple shapes done today but i was
144:57 - thinking just the first one the leftmost
144:59 - one here with the circle
145:01 - masking pattern
145:03 - i think that's what we can target
145:05 - for today
145:08 - before we dive in though i would just
145:09 - like to take a look at a couple other
145:11 - solo wit pieces here's another variation
145:14 - on that theme
145:16 - of different textures going in different
145:18 - directions
145:21 - here's another variation of the same
145:23 - theme with sort of larger scale
145:26 - textures
145:27 - and adding color
145:29 - to some of them
145:32 - here's another piece that explores
145:36 - colors with patterns
145:39 - i don't know how to describe it really
145:40 - but some of the same themes
145:43 - are present in this one
145:45 - here's another piece by sol lewitt
145:47 - where it's interconnected lines between
145:51 - randomly placed points
145:54 - and by the way the the general theme
145:56 - with sol lewitt is he would not
145:59 - do the art himself i don't believe
146:02 - um or this probably changed in different
146:05 - places in his career but
146:07 - the main thing with solowit is he would
146:09 - give instructions
146:12 - almost like algorithmic instructions to
146:15 - a crew of people that would implement
146:18 - his artwork based on those instructions
146:22 - so it's very algorithmic to begin with
146:25 - and it's it's ripe for implementing with
146:27 - computer code
146:30 - here's another solar with piece
146:32 - that is just a grid that's expanding
146:35 - very
146:37 - fundamental i love it
146:39 - let's dive in to trying to reproduce
146:42 - this this solar with piece with code
146:46 - i'm going to start
146:49 - by
146:52 - creating a viz
146:54 - i'm going to fork from this svg
146:57 - fundamentals viz
146:59 - that we did
147:00 - earlier i'll fork this
147:03 - and call it
147:05 - soul lit
147:07 - reproduction
147:09 - all right we've got this sort of blank
147:11 - canvas here
147:15 - i'm going to just adjust the readme and
147:17 - say
147:19 - a reproduction of a solar with art piece
147:23 - and i would like to link into it
147:26 - and this is a good opportunity actually
147:28 - to talk about how to make links in
147:29 - markdown
147:31 - a very small
147:35 - sidetrack thing here this is how you
147:37 - make links in markdown
147:39 - it's very useful so whenever you add a
147:41 - description to things in your visits
147:43 - it's always good idea to link to
147:46 - whatever resources you're drawing from
147:48 - and the way to do that is with square
147:51 - brackets for the text see that becomes a
147:53 - link there
147:54 - and then in parentheses you put the url
147:58 - where the link is going to go
148:00 - and here is the actual article that i
148:03 - got that image from
148:05 - so i'm going to paste that url right
148:08 - there
148:10 - that's how you can add links in markdown
148:13 - and then in index.html
148:16 - i'm going to
148:18 - clear out all of this stuff
148:20 - in the svg
148:24 - okay from here what i would like to do
148:26 - is start using
148:28 - javascript
148:29 - and the way that we can start using
148:32 - javascript is by introducing a script
148:35 - tag
148:36 - inside the html page
148:38 - so script
148:40 - not script
148:41 - like that
148:43 - and what this does here is it opens up a
148:46 - whole world of
148:48 - javascript you can put stuff in the
148:50 - script tag
148:52 - that is you know statements in the
148:53 - javascript language
148:55 - and so the most basic javascript program
148:58 - uh
148:59 - is called hello world and it looks like
149:01 - this
149:03 - console.log
149:05 - hello world in quotes
149:08 - and then
149:09 - if you open up the chrome dev tools
149:13 - by clicking on this little icon here
149:16 - and then going into more tools
149:19 - developer tools
149:22 - by the way this is this is like
149:24 - something that
149:25 - you have to use pretty much all the time
149:27 - when you're developing javascript so i
149:29 - would recommend learning this keyboard
149:31 - shortcut ctrl shift i
149:34 - so inside the developer tools
149:37 - we've got different tabs we've seen the
149:39 - elements tab when we inspect elements
149:41 - but then there's the console meaning the
149:43 - javascript
149:45 - console
149:47 - and by the way with chrome dev
149:49 - you can use this little
149:51 - widget here
149:53 - to move the dev tools around i believe
149:55 - by default they may be on the right
149:58 - so
149:58 - but i personally prefer
150:01 - to put them on the bottom
150:03 - and within here you can change the font
150:04 - size
150:05 - with control plus and control minus
150:09 - but anyway
150:10 - when this program runs
150:13 - it outputs hello world
150:16 - right here
150:18 - there are a bunch of things going on
150:20 - here
150:21 - console
150:23 - is
150:24 - a variable that's just uh there
150:27 - in the browser
150:28 - and when you say console.log you're
150:31 - accessing a property in that object
150:34 - called log
150:36 - and it happens to be a function and that
150:38 - function gets invoked with these
150:41 - parentheses
150:42 - and then the argument that is passed
150:45 - into that function
150:46 - is this string it's called a string when
150:49 - you put something in quotes
150:51 - that is
150:52 - hello world
150:54 - at this point i want to just stop and
150:56 - take a brief tour of the javascript
150:59 - language it's not going to be in depth
151:01 - but it's just um
151:02 - for for folks who've never seen
151:05 - javascript before
151:07 - and i
151:08 - this course is for such people you don't
151:11 - have to know javascript already and i
151:12 - want to introduce everything that you
151:14 - need along the way
151:16 - so that's why i'm going to just touch
151:18 - upon some javascript basics
151:22 - so inside of console.log
151:27 - you could put
151:29 - any javascript expression for example
151:31 - numbers if i hit console.log five
151:34 - it prints out five
151:37 - and in javascript you can comment things
151:39 - out with uh two two slashes
151:43 - in the beginning of the line i'm going
151:44 - to
151:45 - comment out
151:47 - everything that we cover so that this
151:49 - thing is here as a as a record of what
151:51 - we've done
151:53 - console.log 5 works
151:57 - it just outputs a number
152:00 - this highlights that you can pass
152:01 - different types of things into
152:03 - console.log it accepts strings it
152:05 - accepts numbers
152:07 - with numbers in javascript you can use
152:09 - arithmetic like 5 plus 5 is 10.
152:13 - that works
152:15 - and there are
152:17 - you know various operators 5 times 5
152:20 - works as well that gives us 25.
152:23 - parentheses work the way that you would
152:25 - expect them to
152:26 - um with math so if it's like 2 plus
152:30 - 3 times
152:32 - 5
152:33 - that's one thing but then if you put
152:35 - parentheses around
152:37 - a group
152:39 - that's another thing
152:40 - so these are basic arithmetic operations
152:44 - in javascript
152:45 - there's also a fundamental concept of a
152:47 - variable
152:48 - in javascript
152:50 - and for that um in modern times at least
152:54 - we use let or const
152:56 - so i'm going to say const
152:58 - num equals 5
153:01 - that that creates a variable that's
153:03 - called number
153:04 - and it sets the value of that variable
153:06 - to five
153:07 - and then we can say console.log num
153:10 - and that references that variable and it
153:13 - outputs five here
153:14 - the thing with const though is that you
153:17 - you're not allowed to reassign to it so
153:19 - if i say num equals 10 like this
153:22 - it says oh
153:23 - that's not allowed
153:25 - and that's why it's called const because
153:27 - it's a constant it's not allowed to
153:29 - change
153:30 - over time
153:32 - this breaks
153:33 - in order for that not to break we can
153:35 - use let
153:37 - if we say let num equals five
153:40 - we console.log num we get five
153:43 - but then we can say num
153:46 - equals this is called reassignment of a
153:48 - variable it's changing
153:50 - the value that it has over time
153:53 - so if we say num equals 10
153:55 - it changes the value of num and that
153:57 - works because we're using let not const
154:00 - and we get num
154:02 - and in some older code that you may see
154:05 - you might see var
154:08 - and var works just the same as let
154:11 - for the most part but there's some
154:13 - differences about
154:15 - scoping
154:16 - which we can maybe get into
154:18 - at another time
154:20 - it's not really so critical
154:23 - older format
154:24 - behaves like let
154:27 - and what else in javascript we have
154:29 - objects objects are critical
154:32 - so if we want to create an example
154:34 - object we could say const obj
154:36 - or
154:37 - i'll call it object
154:40 - and the way that you create an object is
154:42 - with a pair of curly braces
154:45 - and then objects can have properties
154:47 - inside of them
154:49 - like num for example and then the way
154:52 - you set the value of properties is with
154:54 - a colon
154:56 - like this
154:58 - and now we can say
155:01 - console.log object dot
155:03 - num
155:04 - the dot is how you access properties
155:06 - within objects so it prints out five
155:09 - and that works
155:12 - and while we're here i want to show you
155:14 - a a thing that is a little
155:19 - conceptually tricky to grok
155:22 - and that is
155:25 - you can assign
155:27 - properties of objects even if
155:30 - the object itself is stored in a const
155:34 - for example
155:37 - object.num we can assign that to a new
155:40 - value
155:41 - and it works
155:43 - see it says 10 here
155:45 - when we access it
155:46 - and that's because we are mutating the
155:50 - object we're not reassigning the
155:52 - variable object
155:54 - that's called object here
155:56 - we are just
155:58 - changing its value its internals this is
156:01 - called mutating something
156:03 - so that's the essence of of objects
156:07 - another piece that we'll need is um
156:09 - iterating over loops
156:11 - because when we do this texture thing
156:13 - we're going to have to make
156:15 - a shape many many times
156:18 - and to do that we can use what's called
156:19 - a for loop
156:21 - and i'm going to type this up in a
156:23 - comment
156:24 - so that it doesn't break because if you
156:26 - run a for loop before you stop typing it
156:28 - sometimes it gets into this infinite
156:30 - loop situation
156:33 - and so this looks like this four we put
156:36 - some stuff in parenthesis and then we
156:37 - put some stuff in
156:39 - curly braces in the parentheses
156:42 - we can set a variable
156:44 - let's say i
156:46 - to 0 initially
156:49 - and then say
156:51 - as long as i is less than
156:53 - some number like five
156:55 - we increment i
156:57 - i plus plus
157:00 - um
157:01 - by the way
157:04 - let me just introduce the plus plus
157:05 - operator on its own
157:07 - so if we say let num is five console.log
157:10 - num we get five we can say num plus plus
157:14 - that increments the number by one so now
157:17 - we get six
157:18 - it's the same as
157:21 - num equals num plus one
157:24 - and so now it's incremented twice so now
157:26 - let's get seven
157:28 - so that's the plus plus operator
157:30 - increment operator
157:33 - and also there's another construct this
157:35 - less than
157:38 - there are comparators so if we say like
157:41 - 4 is less than 5 that outputs true and
157:45 - true and false that's another primitive
157:47 - type
157:48 - you can say
157:50 - true
157:51 - console.log false
157:54 - these are booleans
157:57 - so if you say console.log four is less
157:59 - than 5
158:00 - that says true yes it is
158:02 - but then if you console.log 4 is
158:07 - greater than 5
158:08 - that output's false
158:11 - so those are these
158:13 - comparisons between numbers
158:15 - that you can do in javascript
158:17 - and these are
158:18 - to be clear
158:20 - these are expressions in the javascript
158:22 - language that return a value that is a
158:25 - boolean
158:26 - and these can be nested with you know
158:28 - parentheses and whatnot
158:31 - that's the beauty of
158:32 - programming languages
158:35 - but anyway
158:36 - now that we've got this for loop here
158:39 - i'm going to uncomment it and then
158:41 - inside of these curly braces
158:44 - i can say
158:45 - console.log i
158:48 - and it outputs
158:50 - these numbers
158:52 - one two three zero one two three four
158:53 - see it starts at zero
158:55 - and that's the usefulness of a for loop
158:58 - you can have one line that just does one
159:00 - thing but the for loop says okay do that
159:02 - one thing you know x number of times
159:06 - and it gets repeated
159:09 - i'm seeing there's a question in the
159:10 - youtube chat
159:12 - can you assign without const for example
159:15 - just
159:17 - stating object.num equals 10 without
159:20 - first assigning the property
159:22 - with const
159:24 - i can maybe clarify that
159:27 - so it's about this example here
159:30 - maybe the question is can you just say
159:31 - object.num equals 10 without defining
159:33 - object first no you can't you have to
159:36 - have object it has to be something
159:38 - it has to exist
159:40 - first
159:42 - however
159:43 - it does not need to have the property
159:45 - inside of it
159:47 - so i'm going to comment that out make
159:49 - another copy
159:50 - it does not need to have num defined
159:53 - first
159:55 - so it could just be an empty object
159:58 - and then you can
160:00 - you can
160:01 - create a property on that object
160:04 - that didn't exist before just like this
160:07 - and it works yes so i i hope that
160:10 - answers
160:11 - your question
160:12 - i hope that answers your question you
160:14 - don't need to have the property
160:17 - declared like when you create this
160:19 - object it can be added after the fact
160:22 - but the object itself needs to exist
160:26 - if the object doesn't exist
160:27 - you get this what's called a reference
160:29 - error says like object is not defined
160:31 - because it's not there's nothing called
160:33 - object
160:34 - so there you have it
160:40 - as we talked about objects can we talk
160:42 - about
160:43 - other basics of javascript like
160:44 - functions
160:46 - yes while we're here let's do it i want
160:48 - to cover each and every fundamental
160:50 - concept
160:51 - not in a deep level but
160:54 - i do want to cover it
160:56 - so
160:56 - let's say we want to add two numbers
160:58 - five and five
161:00 - we can introduce a function
161:03 - to add two numbers i think this is a
161:05 - good first example of a function
161:08 - so i could say const add
161:10 - equals
161:11 - a function
161:13 - that returns a value and this is es6
161:17 - es6 syntax for defining functions it can
161:20 - take as input two numbers i'll call them
161:22 - a and b
161:23 - and it can return a plus b
161:27 - so now
161:28 - we can say console.log
161:30 - add
161:32 - five and five
161:35 - and it says ten and so if we say add
161:37 - five and ten
161:39 - we also we get fifteen
161:42 - now
161:42 - this is how you would do it
161:45 - with
161:46 - es6 javascript syntax i want to talk
161:49 - about the different um
161:52 - variants that you might see
161:54 - of this
161:56 - so this is one way of defining add
161:58 - another way of defining add you could
162:00 - say function
162:02 - add
162:03 - and then put the parentheses right here
162:06 - and then open it up into curly braces
162:08 - and then say return
162:10 - a this is the sort of old school way
162:15 - of defining functions it's valid
162:16 - javascript still today
162:19 - but
162:20 - as you can see this arrow
162:22 - syntax is much more concise
162:26 - another way of defining add
162:30 - is like this you could say const add
162:33 - equals function that takes as input a
162:35 - and b and then open up into curly braces
162:38 - see when you open up into curly braces
162:41 - you can put many many different lines of
162:44 - code in there and those lines of code
162:46 - will run
162:47 - when that function gets invoked
162:50 - however you need to explicitly return
162:53 - the thing
162:55 - like this return
162:57 - a plus b see now it says 15.
163:00 - and that's
163:01 - a little confusing thing about this
163:03 - syntax up here
163:05 - is that it uses what's called an
163:07 - implicit
163:08 - return
163:11 - it implicitly adds this return statement
163:14 - if you don't
163:15 - open up the function body
163:17 - with curly braces
163:20 - yeah i was just curious um
163:24 - what if we happen to be returning an
163:26 - object
163:27 - um oh that works yeah
163:30 - the curly braces if we had multiple
163:32 - statements and then on the last line we
163:35 - are returning an object
163:37 - would that be
163:39 - um
163:41 - oh i see yeah i think so yeah the curly
163:43 - braces for the first
163:45 - function would be
163:47 - just just be the function body and
163:50 - returning an object would
163:52 - um
163:54 - still be okay yeah that's fine i think
163:56 - yeah i get i i understand what you're
163:58 - getting at and i i would like to walk
164:00 - through that so let's say for example
164:05 - i'll start with the old school syntax
164:07 - let's say we have a function that's
164:08 - going to return a person object with a
164:11 - first name and last name
164:13 - if we were to construct that object
164:16 - let's say i'll call it person example
164:18 - this is going to be like the output that
164:20 - we would like
164:21 - first name is uh jane
164:24 - last name
164:26 - is do
164:28 - that's a generic name
164:30 - this is the kind of object that we would
164:32 - want to
164:33 - create from a function
164:35 - and so then we could say person example
164:37 - dot
164:39 - first name
164:40 - and it'll output jane
164:42 - and then console.log person
164:44 - example.lastname
164:46 - it should output jane and do
164:49 - and by the way you can console.log and
164:52 - object
164:54 - which we do it often
164:56 - and and then you get this little
164:57 - inspector for that object in the
164:59 - devtools which is super duper nice
165:02 - okay this is setting the stage for for
165:04 - writing a function that generates
165:07 - such objects
165:09 - so i'll call it create person and it can
165:12 - take as input first name
165:14 - and last name
165:16 - or for the sake of
165:19 - brevity
165:20 - i'll just call it person
165:23 - first and last
165:25 - and what we can do in here is say return
165:28 - an object
165:29 - and that object can have first
165:32 - first being the property of the object
165:35 - we can assign the property of the object
165:36 - called first to the value of the
165:39 - variable
165:41 - that's inside this function body called
165:43 - first
165:45 - this is called a closure
165:47 - by the way the arguments become visible
165:50 - just like variables inside of this
165:53 - closure that's demarcated by curly
165:55 - braces so we can return an object where
165:58 - first is first
166:00 - last
166:01 - is last
166:03 - and now we can say
166:06 - console.log person
166:09 - and then we can pass in jane
166:11 - and
166:12 - do
166:14 - and then we should get
166:15 - this object back this is first
166:18 - jane last
166:19 - do
166:21 - so to get at your question how does it
166:24 - play out with the um
166:26 - the es6 arrow syntax
166:28 - it is a sort of tricky business
166:31 - and let me show you what that looks like
166:34 - we can refactor
166:36 - or rearrange
166:38 - this code to use es6 arrow functions
166:41 - um
166:43 - so const person equals
166:45 - function that takes as input first and
166:47 - last
166:49 - arrow
166:50 - to curly braces
166:52 - and then the inside of it can remain
166:54 - just the same like it was
166:55 - this is one valid way to do it
166:58 - and yeah no issues no confusion here
167:01 - the place where it gets confusing is
167:03 - when you start to leverage the implicit
167:05 - return
167:06 - on those
167:08 - that arrow function syntax
167:11 - so the way that looks is if you want to
167:13 - return an object
167:15 - you can't just
167:17 - do it like this
167:20 - as in
167:21 - first name
167:23 - last name
167:24 - like this
167:25 - because uh it gets sort of confused
167:28 - about um
167:30 - you know is this an object or is this a
167:34 - opening up of a function body
167:37 - so if you if you put a begin curly brace
167:40 - directly after the arrow it's always
167:42 - interpreted as
167:43 - okay we're opening up the function body
167:45 - now
167:46 - uh so this this is not velicode it says
167:49 - unexpected token
167:50 - what you can do though
167:52 - is use parentheses
167:55 - to say okay
167:58 - i am going to return the thing that is
168:01 - inside these parentheses
168:04 - so this version of the code works
168:08 - and i think this is uh what you were
168:10 - getting at
168:14 - yes absolutely yes it was the uh um
168:17 - thinking about how es6 syntax would uh
168:19 - accommodate returning an object yeah yep
168:22 - nice and this is this is it this is how
168:25 - it works
168:26 - as the last thing in this segment with
168:29 - this function i want to highlight that
168:31 - in es6
168:32 - the most recent version of javascript
168:35 - there is a
168:37 - simplification that you can do in the
168:39 - case that the property name matches the
168:42 - variable name and that is you can just
168:45 - get rid of
168:47 - this stuff here
168:49 - and it automatically
168:51 - assigns
168:53 - the value of the property called first
168:57 - to the variable that's in scope here
168:59 - called first so it's a shorthand
169:02 - for defining object properties where
169:05 - the property name happens to match the
169:07 - variable name
169:08 - so this is sort of the most concise way
169:11 - of implementing this person function and
169:14 - maybe it could all fit on one line
169:17 - yeah it can all fit on one line
169:19 - and that's like a very concise
169:22 - way of doing it
169:25 - all right that concludes our
169:27 - um
169:29 - foray into javascript
169:31 - i did not touch arrays yet um i think
169:34 - i'll do that later once we start using
169:35 - them but this is a first
169:38 - first pass at
169:40 - some stuff in javascript
169:43 - okay since that's what this really is
169:45 - i'm going to
169:47 - rename this to be
169:49 - javascript basics
169:52 - and then i'll fork this one
169:55 - into solarwind
169:58 - reproduction
170:01 - okay now we can start having some fun
170:05 - i'm going to delete all this stuff
170:09 - i would like to
170:12 - build up
170:13 - the dom
170:15 - for this textured background that we see
170:19 - in the solar wet piece
170:20 - within this piece
170:22 - i'm going to first target the background
170:27 - of
170:28 - one of these squares
170:30 - so it's going to be the background of
170:32 - the leftmost
170:34 - square
170:35 - where we're just going to have vertical
170:37 - lines going across the screen that's the
170:39 - first target
170:42 - now to do that i think it makes a lot of
170:44 - sense to use javascript so that we can
170:46 - automate the creation of those
170:48 - rectangles otherwise we would be you
170:51 - know creating a hundred rectangles by
170:53 - hand which is just not
170:55 - practical
170:56 - but to get there
170:58 - we need to build up this svg using
171:02 - javascript
171:05 - as a first thing
171:07 - i would like to create this particular
171:09 - svg element
171:11 - using javascript
171:13 - now how do we do that
171:15 - well it turns out there's this thing
171:17 - called document
171:19 - if we say console.log document
171:22 - we can see what this is
171:25 - it says document
171:27 - it turns out
171:29 - it is the
171:31 - html
171:32 - document
171:35 - it's it's a dom node
171:38 - that you can um unpack see it has the
171:41 - head it has the body
171:44 - all of this stuff is available to you in
171:48 - javascript
171:49 - so what we can do is say
171:51 - document.body
171:53 - that actually gives us the body element
171:57 - and on the body element is where we can
171:59 - append things
172:01 - using javascript
172:03 - so as a first goal of something to
172:05 - create using javascript let's create
172:08 - this svg element
172:10 - itself
172:12 - the way we can create
172:13 - a dom element a dom node part of the
172:16 - document object model
172:19 - i'm going to make a variable i'll call
172:21 - it
172:22 - svg
172:23 - and we can use document
172:26 - dot
172:27 - create element
172:29 - and we can give it svg which is the
172:33 - tag name
172:35 - for this element
172:37 - and now if we say console.log svg
172:41 - we see that it is in fact an empty
172:45 - node
172:47 - that is svg
172:49 - right now though this
172:51 - dom node is sort of hanging in space
172:54 - it's not it's not actually attached to
172:57 - the dom it's just
172:58 - in memory in a variable
173:01 - to put it on the page
173:04 - we can use
173:06 - on the body we can use a method called
173:08 - append child svg
173:11 - that will append this dom node to the
173:14 - body
173:15 - and if we inspect the elements on our
173:18 - page here
173:20 - now we should be able to see
173:23 - that in fact there are two svg elements
173:26 - now see there's the one that we created
173:28 - in our
173:30 - html
173:31 - syntax
173:32 - and there's the new one that we created
173:35 - with javascript
173:37 - my aim is to replace this first one with
173:40 - the second one so that we can add more
173:42 - stuff into it
173:43 - it's going to need to have
173:45 - width and height
173:47 - so how do you do that
173:49 - well
173:50 - we can call svg.set attribute
173:54 - and the first argument is the name of
173:56 - the attribute
173:58 - namely width
173:59 - and i'll set that to
174:03 - 960.
174:05 - and from the javascript perspective uh
174:07 - you can pass in numbers and it will be
174:10 - coerced to a string
174:13 - so that's what i'll do because it's
174:15 - conceptually a number
174:17 - and then svg.set attribute
174:21 - width
174:22 - sorry height
174:24 - svg.set attribute height
174:26 - to be
174:28 - 500.
174:30 - now if we inspect
174:33 - the dom
174:34 - we can see that there are two identical
174:38 - svgs
174:39 - look at that
174:41 - so now i can delete this one that's
174:43 - defined in html
174:45 - and just have the one that's defined in
174:48 - javascript
174:50 - there it is
174:52 - so this is our starting point for
174:55 - javascript driven
174:57 - svg
174:59 - without any libraries without using d3
175:04 - d3 when we do start using it is going to
175:06 - do all this stuff it's d3 uses all of
175:09 - these apis internally it just gives a
175:12 - nice
175:13 - way of interacting with these apis
175:18 - all right now that we've got this svg
175:20 - element
175:22 - let's create
175:24 - a rectangle
175:25 - that goes inside
175:27 - this svg element
175:29 - i'm going to do that by copying this
175:31 - block because it's structurally very
175:34 - similar to what we want to do we want to
175:35 - create a new element
175:37 - let's say a rectangle
175:39 - we can say document.createelement
175:41 - rect
175:42 - to create a rectangle rectangles also
175:45 - have width and height
175:47 - so i'll just set it to 100 and 100 just
175:50 - so we can see something
175:53 - and then
175:54 - instead of appending a child to the body
175:57 - we can append it to the svg
176:00 - this is how you can programmatically
176:02 - build up a tree
176:04 - data structure
176:05 - which the dom is it's a tree data
176:07 - structure so svg.pencil direct should
176:11 - add that rectangle
176:12 - to our svg
176:14 - and i noticed i'm just i have
176:16 - inconsistent formatting i'm going to use
176:18 - prettier
176:19 - to just make everything consistent
176:22 - we should be seeing a rectangle
176:25 - but we're not let's see let's see if the
176:27 - dom is correct
176:29 - oh it's not there's the width and height
176:31 - is 100 on the svg somehow
176:35 - you have to change
176:37 - attribute
176:38 - yeah i just forgot to update it here
176:41 - so rect.set attribute
176:44 - should be the one
176:45 - okay now if we inspect it
176:49 - we can see that
176:51 - it is there
176:52 - all right it is there as vichy has width
176:55 - and height
176:56 - direct is there
176:58 - but it's not showing up
177:00 - the reason why it's not showing up is
177:02 - because we're using create element
177:05 - create element does not work
177:09 - with svg you need to use create element
177:11 - ns
177:12 - so here's why
177:14 - svg and html is a fantastic addition to
177:17 - the web platform but
177:19 - since svg is an xml based language see
177:23 - it comes back to that concept of it is
177:24 - based on xml
177:26 - there is some nuance in how it can be
177:28 - used
177:30 - when parsing html meaning if we write
177:33 - svg
177:34 - and those attributes in html
177:37 - svg elements are automatically created
177:39 - correctly
177:41 - so long as they're inside an svg block
177:45 - but svg elements cannot be dynamically
177:47 - created with create element in the same
177:49 - way as html elements
177:52 - it's
177:54 - in order to dynamically create svg
177:56 - elements you must explicitly tell the
177:58 - browser that you want to use the svg
178:02 - name space
178:04 - so this is something that's particular
178:06 - with xml
178:08 - i must admit i don't fully understand it
178:11 - but what i do understand is this is how
178:13 - you need to do it
178:15 - in order for it to work
178:17 - so let's try this in our code
178:20 - i'm just going to paste that block here
178:22 - for reference it's dot create element ns
178:26 - passing this namespace string
178:29 - that def i think what it's doing is
178:32 - saying okay this is an xml document that
178:34 - uses the svg namespace meaning it's an
178:37 - svg
178:38 - xml document
178:40 - so instead of
178:42 - document.createelement we can say
178:43 - document.createelementns
178:47 - pass that thing and say okay this is an
178:49 - svg
178:51 - container element
178:54 - and similarly with
178:56 - the rectangle
178:58 - we can use the same thing
179:01 - okay
179:02 - now it shows up
179:04 - all right
179:06 - so this is how we can create svg
179:09 - elements that work
179:11 - using
179:12 - the dom api
179:15 - now
179:16 - let's get into
179:17 - um
179:19 - creating a bunch of rectangles to
179:21 - approximate that solar width piece
179:23 - this rectangle is
179:25 - 100 by 100 but
179:29 - what we're going to do is we're going to
179:30 - create a bunch of vertical
179:32 - lines
179:33 - with rectangles
179:35 - so the the width of them could be small
179:38 - let's say 10
179:39 - just 10 pixels but the height of them
179:42 - should be the same as the height of the
179:45 - whole thing
179:46 - meaning 500.
179:49 - see now now it's going to go all the way
179:50 - down the screen
179:52 - and we can move this rectangle around by
179:56 - setting
179:57 - x
179:59 - if i set x here to be 10
180:02 - see it moves over
180:04 - a little bit
180:05 - if i set x to be 100 it moves
180:07 - over 100
180:08 - pixels now at this point i see some
180:11 - duplication duplicated logic in the code
180:16 - it's a very uh simple form of duplicated
180:19 - logic but
180:21 - instinctually i think to myself oh there
180:23 - should not be duplication like that and
180:25 - that is the 500
180:27 - and 500.
180:29 - now that we're out of html and in
180:32 - javascript we can start using variables
180:36 - and later functions
180:38 - to eliminate duplicated logic to me
180:41 - meaning uh if you have to define
180:43 - something multiple times in different
180:45 - places
180:46 - it's preferable to just define it in one
180:48 - place so that you can you know if you
180:50 - need to change it you could just change
180:51 - it in one place
180:54 - so to do that i'm going to say
180:57 - const width
180:58 - equals
181:00 - 960 and height
181:03 - is 500
181:05 - and then
181:06 - wherever there's 960 in use i'm going to
181:08 - use width
181:10 - and wherever there's 500 in use i'm
181:12 - going to use height so setting the
181:15 - the height of the svg and the height of
181:17 - the all of these rectangles
181:19 - so it's just a simple
181:21 - refactoring
181:23 - and at this juncture
181:25 - i want to point out that
181:27 - instead of hard coding these we can
181:29 - actually read them from the parent page
181:31 - which i always love to do because then
181:33 - when somebody loads the page and it's
181:35 - resized differently it'll use whatever
181:37 - width and height the page actually is at
181:39 - the time
181:40 - and the way to do that
181:42 - is
181:45 - i believe
181:48 - window
181:50 - dot inner
181:51 - width
181:54 - and window
181:55 - dot inner height
181:58 - yeah
182:00 - so window is another thing kind of like
182:02 - document that's available in the browser
182:04 - that you can call upon and
182:07 - using inner width and inner height gets
182:09 - you the
182:11 - the actual
182:12 - dimensions of the page when it's loaded
182:15 - okay this feels right to me there's no
182:18 - numbers that are hard coded i find this
182:20 - beautiful
182:21 - oh except for 110
182:24 - but i feel like maybe those are fine for
182:26 - now
182:27 - all right now that we've got one
182:29 - rectangle let's make
182:31 - many rectangles
182:34 - and
182:34 - conceptually what we want to do is you
182:37 - know have this code run but just change
182:40 - x
182:41 - every time
182:43 - but rather than copy paste it a bunch of
182:45 - times i'm going to put it inside of a
182:47 - for loop
182:49 - 4
182:50 - and i'm going to type this in comments
182:52 - so that we don't run into an infinite
182:53 - loop
182:54 - situation
182:56 - 4 let i
182:58 - equals zero
182:59 - i is less than
183:03 - n i like to use n
183:07 - so that we can change it later if we
183:08 - want to um initially i'll just i'll set
183:11 - it to 100. let's make 100 of these
183:15 - i plus plus
183:19 - and by the way
183:20 - in vishub if you ever do
183:22 - run into an infinite loop
183:24 - you can just type hash recover
183:29 - at the end of the url
183:31 - and
183:34 - this is how you enter recovery mode
183:38 - in recovery mode you can edit the code
183:40 - and it's not going to automatically run
183:42 - and then when you're done
183:44 - fixing the code that created the
183:46 - infinite loop you can just hit exit
183:49 - recovery mode
183:51 - but anyway hopefully that'll never
183:53 - happen
183:54 - so now
183:56 - inside of this
183:58 - for loop this is where i'm going to move
184:00 - this code i'm going to cut this code
184:03 - with control x and then paste it into
184:05 - this block
184:06 - with ctrl v and then use prettier to
184:10 - update the formatting so that it's all
184:12 - indented properly
184:15 - and now
184:17 - we can use i
184:20 - to to move things around
184:22 - see i starts at zero
184:24 - and then
184:25 - uh the second time around i is one and
184:28 - then the next time around i is two and
184:30 - so on and so on until it gets to be
184:34 - 99
184:36 - in which case
184:39 - oh this still runs for the 99th time but
184:41 - when i gets to be 100 this check fails
184:44 - because 100 is not less than 100 and
184:47 - then the for loop exits
184:49 - so our values of i are going to be from
184:51 - 0 to 99.
184:52 - so
184:53 - the thing that we want to vary is x
184:56 - if we just set x to be i
184:59 - it's going to
185:00 - go across the screen but it's only going
185:02 - to move one pixel at a time
185:05 - right so
185:06 - if we wanted to move let's say 20 pixels
185:09 - at a time i can multiply i times 20
185:12 - and we get it there it is
185:15 - there it is
185:16 - i see there's a question in the youtube
185:19 - chat
185:20 - um for properties on the window object
185:23 - you actually don't have to write
185:25 - window.inner width just inner width
185:28 - should be enough for the browser to get
185:30 - it
185:30 - yes
185:32 - yes that's true that is true window is
185:35 - an alias for the global object
185:39 - so you can actually say
185:42 - inner height and inner width just like
185:44 - that
185:45 - and it works just the same
185:47 - it's true yeah thanks for that thanks
185:49 - for that however
185:51 - if you use a bundler or a build tool
185:54 - something like that
185:57 - it will complain and say inner width is
185:59 - not defined
186:01 - so that's why i just sort of
186:04 - by default i do like to explicitly say
186:06 - window
186:07 - because those tools
186:10 - well we're not using them now so it
186:11 - doesn't matter but if you are using a
186:13 - tool that sort of checks or eslint for
186:16 - example that checks the validity of the
186:17 - code it often would complain that okay
186:19 - these variables are not defined anywhere
186:22 - so that's an error
186:24 - but it those tools do understand that
186:27 - document and window
186:29 - are
186:31 - things that are provided by the browser
186:34 - and are expected to be in the global
186:36 - namespace so
186:38 - yeah that's why you may need to use
186:42 - window
186:44 - and i see there's another comment you do
186:45 - need window prefix for esm
186:48 - esm
186:51 - oh modules ecmascript modules
186:55 - so i don't know i'll just um
186:57 - i think i'll keep it here for now but
186:59 - i'll just add a little comment that says
187:02 - windows optional sometimes
187:05 - but yeah it's a great little sign
187:06 - discussion thanks for that
187:08 - any other questions in the meantime
187:12 - yes i think uh i have one question um
187:15 - i'm curious about the const
187:18 - inside of the loop um it looks like it's
187:21 - being reassigned but it's
187:23 - it's not um
187:25 - and i'm curious as to
187:28 - how that works
187:31 - yeah that is a great great question
187:34 - it looks as though const is reassigned
187:36 - here
187:37 - but
187:38 - in in fact it's not
187:41 - that's because
187:43 - const and let are block
187:46 - scoped
187:47 - not closure scoped the way that var is
187:52 - so what that means is
187:54 - the block
187:55 - that gets opened up with these curly
187:58 - braces and this for loop
188:00 - defines the scope of that wrecked
188:03 - variable
188:05 - let me give a concrete example here if i
188:07 - say
188:08 - console.log rect
188:11 - out here
188:13 - it says reference error
188:15 - rect is not defined
188:18 - and that's because we use const
188:21 - and it's block scoped that means that
188:23 - that variable does not exist
188:26 - outside of that for loop
188:28 - and so essentially every time that for
188:30 - loop runs with an another version of i
188:34 - that const
188:36 - is
188:38 - re-created in a brand new
188:41 - block scope
188:43 - and so that's what makes it so that cons
188:46 - like this rec it's never actually
188:47 - reassigned
188:49 - the whole variable is recreated again
188:51 - and again
188:52 - each time
188:53 - the for loop runs through one of its
188:55 - loops
188:56 - however
188:57 - if we were to use var
188:59 - here
189:00 - check this out
189:03 - then
189:04 - this console.log rect actually succeeds
189:07 - it actually prints out this dom element
189:09 - here
189:11 - why is that
189:12 - well it's because when you use var
189:16 - it's actually scoped relative to the
189:18 - closure that you're in so right now
189:21 - we're in the global
189:23 - closure because we're not inside of any
189:24 - function definition but if we were
189:27 - inside of a function definition the
189:29 - curly braces of that function would
189:30 - define the closure meaning the scope of
189:33 - that variable
189:34 - and this is actually the core difference
189:36 - between var
189:38 - and the new constructs of let and const
189:41 - let is also block scoped
189:45 - so this is actually the
189:47 - the difference
189:48 - the fundamental difference between var
189:50 - and let var is closure scoped but let
189:53 - see if i use let here
189:55 - it's block scoped meaning it's scoped
189:57 - within the for loop that's why we get
190:00 - this reference error
190:02 - when we try to access it here
190:05 - so yeah that's that's a rundown of
190:08 - scoping with var versus let and const
190:16 - i'll switch it back to const because um
190:19 - it's it's generally i i think
190:22 - and this is a personal preference thing
190:24 - it's generally good practice to use
190:25 - const to default to using const un until
190:28 - you have the need to reassign it and
190:30 - then you can use let it just makes it
190:32 - easier to read the code later on for
190:34 - your future self or for anybody else
190:37 - reading the code
190:39 - someone says
190:41 - let would still be nicer there
190:44 - but i respectfully disagree i mean you
190:47 - could use let i see actually a lot of
190:49 - developers use let by default
190:52 - but um
190:54 - i would argue
190:56 - strongly
190:57 - that
190:58 - it's best practice to use
191:00 - const
191:02 - because
191:04 - when the reader of the code in the
191:05 - future sees that it's it's clear okay
191:08 - this is not going to be reassigned it
191:10 - makes it easier to reason about the code
191:13 - when i see let when i read somebody
191:15 - else's code i immediately look for where
191:17 - it's going to be reassigned like oh
191:18 - that's like something confusing i have
191:20 - to think about it could be reassigned to
191:22 - value where is that reassignment that's
191:23 - where i immediately would go
191:25 - so that's why i would strongly argue
191:28 - that um
191:30 - just use cost by default and if it turns
191:33 - out that you need to reassign it then
191:34 - yeah change it to let change it to let
191:36 - but only if you need it that's just my
191:38 - my personal take on all this
191:43 - all right so i would like to actually
191:45 - reproduce that solarwind piece
191:48 - we've got this as one of the directions
191:52 - of the solar with piece
191:55 - now i would like to change it around so
191:57 - that the texture goes the other way that
191:58 - way we have our two ingredients that we
192:01 - will eventually put together with this
192:03 - clipping path thing
192:06 - to do that i'm going to fork this vis
192:09 - and i'm going to call it solo it
192:11 - reproduction
192:12 - vertical
192:14 - it's just going to be a vertical variant
192:17 - and how do we make it a vertical variant
192:20 - um it's just changing around this stuff
192:23 - here this logic here
192:25 - instead of x varying with
192:29 - i
192:29 - we can very um y
192:33 - with i so y
192:35 - now can be i times 20
192:38 - and instead of width being 10 height can
192:41 - be 10
192:43 - and width can be the value of the width
192:46 - variable
192:48 - okay
192:48 - that's it
192:49 - now we've got our vertical and our
192:51 - horizontal
192:53 - and now what we can do
192:56 - is we can use an svg mask
192:59 - the idea with an svg mask
193:01 - is it defines an alpha mask for
193:03 - compositing
193:05 - things
193:06 - so what we can do is say mask
193:08 - give it an id
193:10 - and this mask is going to be
193:12 - the circle in the solar whip piece
193:15 - see how this circle in the middle masks
193:19 - the textures
193:20 - that's exactly what we're going to do
193:22 - here so we're going to have
193:24 - a black background and a white circle
193:26 - for one of the textures and then a white
193:28 - background and a black circle for the
193:30 - other of the textures to invert the mask
193:33 - and this is how we can implement this
193:35 - piece
193:36 - so it looks generally something like
193:38 - this we create a mask element inside the
193:40 - svg and give it an id let's do that
193:44 - and since we're in this world of
193:46 - uh javascript generated stuff
193:49 - we need to
193:51 - use this api which gets cumbersome
193:54 - pretty fast
193:56 - so what i'm going to do is copy that
193:57 - block of the rect and i'm going to
194:00 - change this to mask
194:03 - document.createelement and s mask i'm
194:05 - going to set the id
194:07 - attribute to
194:10 - something arbitrary i'll just call it my
194:12 - or i'll call it um
194:15 - circle mask
194:17 - circle dash mask
194:19 - we don't need anything else
194:21 - and then we say svg.append
194:24 - child
194:25 - mask
194:26 - and that has to set the attribute on the
194:28 - mask and we append the mask as a child
194:31 - okay now that we've got that mask we can
194:34 - we can create a circle within that mask
194:39 - so i'm going to copy this block again
194:41 - and i'm going to say
194:44 - circle
194:45 - is document.createelementns
194:48 - circle
194:50 - and then on that circle we can set the
194:52 - attribute of cx and cy to be the middle
194:56 - so cx would be width divided by 2
194:59 - to put it in the middle
195:01 - cy
195:02 - would be similarly
195:04 - height divided by two
195:08 - and then we want to append the circle
195:11 - to the mask
195:12 - it has to be a child of the mask
195:16 - now
195:17 - that we have this
195:19 - we can set the mask
195:22 - of
195:22 - these rectangles
195:24 - to be that circle mask
195:28 - and let me just consult the
195:29 - documentation again
195:31 - so on any shape you can say mask equals
195:35 - url parentheses hash
195:39 - the id of the mask and it's kind of a
195:41 - quirky way of
195:43 - doing it but you know
195:45 - that's just what it takes
195:47 - to make it work
195:49 - so i'm going to copy i'm going to paste
195:50 - that reference
195:52 - and then on these rectangles
195:55 - we can implement that by saying rect.set
195:58 - attribute
195:59 - mask
196:02 - and the value of that attribute is going
196:04 - to be
196:07 - url
196:08 - hash
196:10 - and then the id of our mask which is
196:14 - circle dash mask
196:17 - and i think that should work
196:20 - it did not work oh because
196:23 - we need to set the fill of the circle i
196:25 - believe
196:28 - so let's set the fill
196:31 - attribute of the circle to be white
196:33 - i think this is how these masks work
196:37 - no
196:38 - uh black
196:41 - we don't have vertical
196:43 - rectangles at all
196:45 - yeah i know we're not seeing them
196:46 - because i'm sending the mask
196:49 - if i remove the mask then we do see them
196:52 - the question is why is the mask not
196:54 - working oh
196:56 - oh i believe
196:57 - i didn't set the radius of the circle
197:01 - silly me
197:02 - so r of the circle can be
197:06 - say 200
197:09 - and we may need that fill
197:12 - after all
197:14 - okay so we need cx cy and r
197:19 - i'll just try a value of 200 for r
197:23 - and let me try setting the fill to be
197:24 - white
197:26 - ah there it is
197:28 - there it is
197:31 - got there
197:33 - so now the next challenge uh would be to
197:36 - invert
197:38 - this mask
197:40 - for the other texture
197:42 - the way that we can invert the mask
197:46 - is by setting the fill
197:49 - of the circle
197:50 - to be black
197:52 - and then we put a white
197:55 - background rectangle within the same
197:57 - mask because the way the masks work is
198:00 - black becomes
198:02 - you can't see it and white becomes you
198:04 - can see it
198:07 - i'll follow the same pattern as we have
198:09 - for the circle but with the rect
198:14 - i'll call it mask
198:17 - rect
198:18 - so that it doesn't conflict with the
198:19 - other rect
198:21 - not maybe it wouldn't anyway
198:23 - but
198:24 - anyway i'll call it mass correct
198:26 - and the tag name will be wrecked
198:30 - and on the mask rect we can set
198:35 - width and height
198:37 - just to be width and height because i
198:38 - wanted to fill up the background that's
198:41 - the point of this is to just fill up the
198:43 - background
198:45 - and then mask dot append child mask
198:47 - erect
198:48 - and i would have thought
198:51 - that would work um oh i have to set the
198:53 - fill
198:55 - to be white
198:57 - boom all right see that
199:01 - we've got the
199:02 - inverse
199:04 - and now that we have all of the pieces
199:06 - let's put them together
199:09 - to create our
199:10 - solar with
199:13 - reproduction
199:15 - what we need to do
199:16 - is have the rectangles that go in both
199:19 - directions present at the same time
199:24 - right and so i can use
199:27 - vishhub to look back at
199:30 - what i've just created
199:32 - so we've got these horizontal lines oh
199:35 - and let me consult the direction so the
199:37 - background
199:39 - should be vertical
199:42 - and the foreground should be horizontal
199:45 - so um in this one we have the vertical
199:48 - lines
199:50 - we we should really invert this
199:53 - mask
199:55 - because yeah the foreground should be
199:57 - the vertical ones according to the
199:59 - actual piece
200:00 - and then let's bring back the um
200:04 - let's bring back these lines that go in
200:06 - this direction
200:08 - i'm just going to copy this block from
200:10 - here
200:11 - into here
200:13 - as another
200:15 - for loop that runs
200:18 - n should be really only defined once
200:22 - and check that out
200:24 - that's kind of a cool
200:26 - intermediate state by itself
200:29 - i think i'll fork from that
200:33 - and at this point
200:35 - what we need to do
200:37 - is create another mask
200:39 - that is the inverse
200:41 - of the mask that we already have
200:44 - so i'm going to just take all this stuff
200:47 - that defines the mask
200:50 - and i'm going to paste it
200:52 - and rename this to be mask 2
200:56 - and i'll call it circle mask
200:59 - 2
201:01 - not very creative
201:05 - i'll just put 2 at the end of all these
201:07 - variables
201:11 - all right so now we we have that mask 2
201:14 - with direct and the circle
201:17 - we can invert these colors of the mask
201:19 - so i'll change black to white
201:22 - change white to black
201:25 - and
201:26 - for
201:27 - these
201:28 - um
201:30 - vertical rectangles
201:32 - we can use the mask
201:34 - of the circle mask
201:36 - 2. so instead of circle mask it should
201:39 - be circle mask dash two
201:42 - and boom we have done it
201:45 - there we have our solar with
201:47 - reproduction
201:50 - awesome awesome
201:54 - yeah this is so satisfying
201:57 - i'd like to leave you all with an
201:59 - exercise to do
202:01 - between uh now and next week
202:03 - reproduce any solute piece
202:07 - ideally using the javascript dom
202:10 - manipulation that we've done today
202:12 - and these are actually three different
202:14 - options for an exercise i want it to be
202:17 - open-ended
202:18 - so instead of reproducing a particular
202:20 - solar with piece you can create art you
202:22 - know just create generative algorithmic
202:25 - art
202:26 - in the spirit of soul the wit
202:28 - very open-ended you know you can be very
202:30 - creative
202:31 - creative or
202:33 - add animation to what we created today
202:37 - like i was thinking maybe the textures
202:38 - could be rotating or or the circle could
202:41 - change size
202:42 - or something like that
202:44 - so these are your three options
202:46 - in terms of the exercise for this week
202:50 - i have updated the forum index to create
202:53 - uh to have an episode three link
202:56 - so when you uh submit your piece please
202:58 - just submit it
203:00 - as a response to this thread
203:02 - and i'll go over it uh i'll review it
203:04 - next next time
203:07 - all right questions anyone
203:11 - i have a question sure sure
203:14 - what is functional programming and
203:16 - objective programming
203:22 - functional programming
203:25 - versus um
203:28 - perhaps what you're thinking of is
203:29 - object oriented programming
203:36 - that's a great question uh it's it's
203:38 - very like abstract and philosophical
203:41 - in a sense
203:43 - um
203:45 - but i'll give you a brief take you know
203:47 - my brief
203:48 - take on that
203:53 - functional programming
203:56 - generally makes heavy use of functions
204:00 - and in particular passing functions to
204:02 - other functions
204:04 - javascript is actually
204:06 - a functional language it's been called
204:10 - lisp in see's clothing and i love that i
204:13 - think that was who said that
204:17 - i don't remember his name
204:20 - but yeah javascript is lisp
204:23 - a famous functional language nc's
204:25 - clothing and c is a procedural language
204:28 - and c plus plus and java
204:31 - are object oriented
204:33 - languages meaning
204:34 - the central construct in those languages
204:37 - is
204:39 - a class
204:40 - and then you can have instances of the
204:42 - class that are called objects
204:44 - um and so in in the language java for
204:47 - example an object is an instance of a
204:49 - class
204:51 - it's fundamentally different than in
204:53 - javascript an object in javascript is is
204:57 - a set of key value pairs
205:00 - that's often called a
205:02 - you know hash table
205:03 - in other languages
205:05 - and then
205:06 - there's another language called haskell
205:08 - on the extreme side of functional
205:10 - programming
205:11 - in haskell
205:13 - there is no mutation there is no such
205:15 - thing as let and there's no such thing
205:17 - as reassigning
205:19 - a value to an object so you have to
205:21 - create new objects all the time in
205:23 - haskell it's what's called a pure
205:25 - functional language so if you want to
205:26 - learn really really learn about
205:28 - functional programming
205:30 - i would suggest to learn about haskell
205:33 - it's fantastic
205:37 - but yeah practically speaking we are in
205:39 - the world of
205:41 - um
205:43 - functional programming with
205:45 - javascript
205:47 - although it is a mix i mean in es6 there
205:49 - is there is a class construct and you
205:51 - can do
205:53 - object-oriented programming in
205:55 - javascript
205:57 - i personally have sort of moved away
205:58 - from that i don't use classes very much
206:01 - i just use you know objects that have
206:03 - key value pairs that are expected to be
206:05 - a certain thing
206:06 - um
206:07 - and then
206:08 - there's the idea of typescript and type
206:10 - safety
206:11 - which you don't have in vanilla
206:12 - javascript but typescript is great if
206:14 - you want to be sure that there's no um
206:18 - bugs
206:21 - regarding you know objects not having
206:23 - the things you expect them to
206:25 - so that's my brief take on functional
206:27 - versus object-oriented programming i see
206:29 - there are some
206:31 - yeah go ahead
206:34 - what we see here
206:36 - in this one
206:38 - exercise we did just now it's functional
206:40 - programming
206:42 - mostly
206:43 - right
206:46 - i mean is it functional programming is
206:48 - it object oriented programming
206:51 - it's um
206:53 - it's almost like at a at too high of a
206:57 - level of genericness to even say to even
207:00 - make a call
207:02 - i mean the dom api is object oriented
207:05 - in a sense that you know you're you're
207:07 - invoking these functions to create
207:10 - objects that are instances of a class
207:13 - namely the class called dom node
207:16 - i believe it is uh
207:19 - yeah so in this api that we're using
207:21 - it's an interface
207:23 - it's an abstract
207:25 - base class
207:27 - and all of this terminology reeks of
207:29 - object-oriented programming it's like
207:31 - yeah this is definitely object-oriented
207:32 - programming they're having a base class
207:34 - and in object-oriented programming you
207:36 - have classes that inherit from other
207:37 - classes
207:40 - and you have this whole hierarchy of
207:41 - stuff
207:42 - so we are using
207:45 - an object oriented api to the dom
207:48 - so in that sense it is very much object
207:51 - oriented
207:52 - however we're not
207:55 - you know we didn't create any classes of
207:57 - our own
207:59 - so in that sense
208:01 - it's not
208:03 - object-oriented um and we're also not
208:05 - using
208:08 - any functions except for the methods
208:11 - on these
208:12 - instances of the classes
208:15 - so when you when a function is
208:17 - positioned
208:18 - as a property of an object
208:20 - it's often called a method
208:23 - so these are methods on these objects
208:25 - which is also from the object-oriented
208:28 - realm
208:29 - you know instances of classes have
208:31 - methods that's just how object-oriented
208:33 - programming works so if you were to you
208:35 - know broadly say is this code that we
208:37 - wrote today object oriented or
208:39 - functional it's more object oriented
208:42 - honestly we're not using any functions
208:45 - really
208:46 - and even this this way of doing
208:48 - iteration is very procedural
208:51 - if we wanted to do it in in a functional
208:54 - programming kind of way
208:56 - we would use some other constructs and
208:58 - we'll do that later
209:00 - by the way i'm thinking next week we we
209:02 - refactor this whole thing to use d3 and
209:04 - functional programming
209:06 - and abstract away duplicated logic with
209:08 - functions
209:10 - just to see how
209:11 - things get really
209:13 - tight and concise when you do really
209:16 - embrace functional programming
209:20 - and thanks somebody in the youtube chat
209:21 - said um
209:24 - lisp and sees clothing is from douglas
209:27 - crockford yeah yeah yeah
209:30 - douglas crockford he's he's got some
209:32 - really good stuff
209:35 - really good
209:38 - really good written pieces about
209:39 - javascript
209:42 - oh someone asked
209:44 - could i do this using visual studio code
209:47 - yes yes of course i mean it's just a
209:50 - text file here
209:52 - so invis hub by the way
209:54 - you can export the thing
209:57 - and you get a zip file
209:59 - you can extract this somewhere and then
210:01 - just open up index.html
210:03 - in visual studio code
210:05 - and
210:07 - you know everything will just work
210:09 - the same way that it's working here
210:11 - except that you'll have to open up
210:14 - the file in a browser and
210:16 - every time you make a change you can
210:18 - have to save the file and then go and
210:20 - refresh the browser
210:22 - unless you get deeper into the tooling
210:25 - of having something that automatically
210:26 - refreshes like a webpack development
210:29 - environment yeah all this stuff i'm i'm
210:31 - doing here is just purely uh html
210:34 - standard
210:35 - standard html and javascript and svg and
210:38 - it's it's not in any way dependent on
210:41 - the fact that i'm in vishub this hub is
210:43 - i'm just using as a teaching tool so
210:45 - that i can give you references to these
210:47 - code files
210:48 - but yeah you could totally do all this
210:50 - with visual studio code
210:52 - and as we get deeper into javascript
210:56 - i think i'll get deeper into um showing
210:59 - how to work outside of his hub
211:02 - using different build tools
211:04 - yeah great question
211:09 - oh yeah there's a discussion in the
211:11 - youtube chat about um
211:13 - classes in javascript is actually
211:14 - syntactic sugar for appending stuff to
211:17 - the prototype
211:20 - it's very true it's very true but that's
211:22 - like that's a whole other rabbit hole
211:24 - there's like uh
211:27 - when you create objects
211:30 - in javascript you can actually create
211:32 - them to inherit from a prototype
211:35 - which is it's just a whole can of worms
211:37 - that i just would rather not get into
211:39 - because we're not going to need those
211:41 - constructs
211:42 - another comment in the chat is
211:44 - you could have wrapped all this stuff in
211:46 - view.js
211:48 - yeah it's true it's true i mean this is
211:50 - a very crude
211:52 - way of doing dom manipulation but i
211:54 - wanted to explicitly use the dom apis
211:57 - just so you see what it is in its bare
211:59 - form you could wrap all this stuff in d3
212:01 - do it in react do it in angular do it in
212:04 - view
212:05 - anything but the resulting dom is going
212:08 - to be the same and that's really what
212:09 - matters in terms of what you get
212:11 - uh what you see on the screen
212:15 - all right i think i'll wrap for today
212:18 - this has been a really good session and
212:20 - um yeah i'm really super excited to see
212:22 - what you all come up with
212:24 - feel free to fork this or start from
212:26 - scratch um
212:28 - you know be creative add gradients or
212:30 - whatever
212:31 - add animations and
212:34 - all right really looking forward to next
212:35 - week
212:36 - thanks everyone for joining
212:39 - see you in a week
212:40 - bye
212:44 - all right welcome to episode 4 of get it
212:48 - right in black and white today what
212:50 - we're going to do
212:51 - is
212:53 - use d3
212:55 - to reproduce this solar with piece
212:58 - in its
212:59 - fullness
213:02 - with different shapes what we'll cover
213:04 - includes uh
213:06 - a review of exercise submissions from
213:08 - last week
213:10 - and then we're gonna start using d3
213:12 - selections and data joins we're gonna
213:14 - take what we did last week and refactor
213:17 - it you know move the code around change
213:19 - it so that it does the same thing but
213:21 - uses d3
213:23 - and then we'll look at d3 symbols d3
213:26 - actually provides these nice shapes
213:29 - that we can use
213:30 - uh and
213:32 - along the way to reproducing that solar
213:35 - whit piece we're going to talk about svg
213:37 - group elements
213:38 - translating group elements meaning
213:40 - moving them around
213:42 - and we'll touch upon d3
213:45 - point scales and potentially band scales
213:49 - depending on how far we get
213:56 - all right so this is the solar with
213:57 - piece
213:58 - that we're aiming to reproduce
214:02 - and today what i'm hoping to do
214:05 - is get to the point where we have
214:08 - multiple different shapes
214:10 - in this mask
214:12 - and
214:14 - if we get to that point and still have
214:16 - time i want to tackle the problem of the
214:19 - background being different for each of
214:22 - these
214:22 - um i think the first pass would be you
214:24 - know the background is all
214:26 - uh vertical lines and this the filled in
214:29 - shapes are all horizontal lines that
214:32 - would be the first phase that we're
214:33 - going to shoot for so phase two
214:35 - um would be to make it so that each
214:38 - square here has
214:40 - has the um
214:42 - the horizontal lines in the background
214:44 - and the vertical lines in the foreground
214:46 - alternating with the vertical lines in
214:49 - the background and the horizontal lines
214:50 - in the foreground
214:53 - so
214:54 - i don't know i hope it's not too
214:55 - ambitious um
214:57 - let's give it a shot
215:00 - all right here's the forum post from
215:02 - last week
215:03 - let's see what we've got um
215:07 - felipe mayo he's been following and i'm
215:10 - very impressed by this work um this is
215:13 - actually a game
215:15 - check this out
215:17 - uh he is my face
215:19 - with
215:20 - you know
215:21 - this solo wit-esque
215:24 - kind of a thing going on
215:28 - pretty wild
215:29 - and it changes over time
215:33 - i'm just blown away by this very nice
215:36 - very nice work
215:41 - yeah and i think he actually made this
215:43 - into a full-blown
215:45 - game
215:50 - although i can't find it right now
215:53 - and look he made this one earlier oh
215:54 - this is so good look at that
215:57 - incredible
215:58 - really incredible
216:03 - so here's another one
216:05 - from
216:06 - w gloss
216:08 - this is pretty neat there's some
216:10 - randomness here
216:12 - very cool very cool
216:18 - yeah
216:19 - vanilla
216:21 - javascript and dom api
216:25 - here's one from nita
216:27 - check this out whoa what
216:31 - that's
216:32 - crazy oh my gosh nita you want to talk
216:36 - about this a little bit
216:42 - yes i can
216:46 - can i see the code
216:56 - so i added
216:57 - animations
216:59 - and
217:14 - fast
217:23 - that's very cool
217:43 - but how is how are they all going
217:46 - could you mute
217:48 - yourself
217:52 - now how
217:53 - how is it that each of these are are not
217:56 - going all at the same time it seems like
217:58 - it's
217:59 - the duration of this animate is
218:02 - is a random number
218:04 - that's really cool
218:06 - really cool so that's how that effect
218:09 - happens
218:12 - very nice
218:18 - and
218:22 - whoa look at this one
218:26 - very nice
218:29 - it almost looks like three-dimensional
218:32 - uh balls or something
218:36 - wow
218:37 - very cool very cool
218:46 - let's see oh here it is he posted again
218:49 - this is the game version
218:52 - so i was i was quite impressed by this
218:55 - check this out you have to you have to
218:56 - you have
218:59 - this is so funny
219:01 - you have to
219:02 - click
219:04 - when it's black and white
219:05 - so that's i just got one point and if
219:08 - you click when it's not black and white
219:12 - okay i clicked on a
219:13 - black and white again but if you click
219:15 - when it's color
219:16 - you lose a life
219:18 - see that
219:19 - one less little icon there
219:25 - so this is just
219:27 - through the roof
219:29 - really great job
219:30 - really creative
219:32 - very nice work
219:35 - here's another one from nita
219:38 - a bunch of circles
219:42 - wow
219:44 - beautiful beautiful grid of circles
219:50 - very nice
219:51 - do you want to talk about this one at
219:52 - all
219:55 - yeah i would like to talk about it
219:57 - so what i did here uh
220:00 - we are actually
220:02 - positioning each circle
220:05 - in x and y direction
220:07 - so we are using
220:10 - i and j
220:11 - twice
220:12 - so we can get the kind of matrix values
220:16 - in the matrix i and j for each
220:19 - cell there
220:20 - something like that let's say it is
220:21 - going in the x direction and y
220:23 - directions at the same time
220:26 - beautiful
220:27 - you are getting the whole grid gets
220:29 - filled up depending on how many numbers
220:32 - circle we are using
220:34 - and you can add animation and
220:36 - other things on top of it and i did it
220:38 - in another example i kept forking it
220:40 - again and again it was just fun
220:44 - awesome awesome
220:47 - thank you
220:52 - yeah this is great so it's a nested for
220:55 - loop where i goes from zero to count j
220:57 - goes from zero to count
220:59 - and for each combination of i and j
221:02 - the circle is positioned
221:04 - very nice it's very nice
221:09 - and it's pretty close to this other
221:10 - solar with piece
221:12 - so that could be the next
221:14 - phase perhaps
221:16 - all right that's it
221:17 - that's all the work
221:20 - very cool
221:25 - all right here we go here's our piece
221:28 - that we made last time
221:30 - i'm going to start by forking this
221:33 - and i'll call it
221:35 - solar with reproduction with
221:38 - d3
221:41 - all right
221:45 - open the editor
221:59 - the first order of business
222:02 - that i want to do here is
222:04 - include
222:05 - d3
222:07 - into our
222:08 - app
222:09 - here
222:12 - one way to do that would be to add a
222:14 - script tag
222:16 - to the head
222:18 - and put the source equal to
222:20 - something
222:22 - usually from a cdn like unpackage a cdn
222:25 - is a content distribution network that
222:27 - essentially hosts files
222:29 - on the web that you can pull in
222:32 - however
222:33 - in modern
222:34 - web development usually you use a
222:39 - a node js based build system
222:43 - like using webpack or rollup
222:46 - or using some starter app
222:51 - system framework thing
222:53 - and there's a relatively new feature of
222:55 - this hub that lets you approximate
222:58 - package.json
222:59 - which i'm very excited to start using
223:03 - so let's let's do that i'm going to make
223:05 - a new file
223:08 - called package.json
223:12 - package.json by the way it's like a
223:15 - it's a standard in a way
223:27 - npm and the node
223:31 - npm stands for node package manager it's
223:33 - a whole ecosystem
223:35 - of javascript libraries
223:38 - and so npm expects this thing called
223:40 - package.json
223:42 - and you can put a bunch of stuff in here
223:44 - like set the license
223:46 - and
223:46 - you know add dependencies
223:50 - dependencies is
223:52 - what matters for us
223:53 - so it's you specify this object that has
223:56 - dependencies and then the library name
223:59 - and the version
224:00 - we can use this to pull in d3 to our
224:04 - program
224:08 - in package.json
224:11 - i'm going to make it an object
224:14 - in in json format javascript object
224:17 - notation format json
224:21 - and the key
224:23 - will be
224:25 - oh there's some something
224:28 - strange happening
224:46 - all right so we can type dependencies
224:49 - as the key and the object can contain
224:54 - d3
224:55 - at some specific version
224:58 - and um
225:02 - let me check which version d3 is at
225:07 - the way i like to check that is to go to
225:11 - which is a cdn that hosts script files
225:14 - and just type d3
225:16 - and it will automatically fill in the
225:18 - latest version so we're at version
225:21 - 6.6.1
225:29 - so in here d3 version will be 6.6.1
225:41 - all right that's like a bare minimum
225:42 - package.json
225:44 - and then
225:45 - what we can do is introduce a
225:48 - a script
225:49 - file where our javascript can go and
225:52 - just by convention i'm going to call it
225:54 - index.js
225:58 - and what we can do is take all of this
226:00 - javascript
226:02 - that was in this script tag directly on
226:05 - the page
226:07 - and move it over to
226:09 - index.js
226:11 - and everything still runs
226:16 - now i can delete that script tag over
226:18 - here
226:20 - and we have this sort of new setup
226:24 - in which we can import
226:27 - from d3
226:29 - so here we go let's pull in
226:31 - something from d3
226:35 - i'm going to say import selection
226:39 - from
226:40 - d3
226:41 - this is es6
226:43 - module
226:45 - syntax
226:46 - to import from packages and this syntax
226:48 - you can use again with all the modern um
226:51 - templates
226:53 - and whatnot
226:54 - and so let's see if this worked
226:57 - console.log selection
227:00 - i just want to see
227:01 - did it get defined as anything
227:09 - in the dev tools we can say that indeed
227:11 - it's a function
227:13 - array it's a function from d3
227:16 - it's got these weird uh characters
227:18 - because it comes from a minified
227:22 - file
227:22 - the the d3 build
227:25 - but anyway this means that now we can
227:27 - start using d3
227:31 - so let me talk about selection
227:38 - if you google d3 selection and click the
227:40 - first result
227:47 - it's the documentation page for this
227:49 - package called d3-selection
227:52 - and
227:53 - d3
227:55 - by the way is structured as a collection
227:58 - of many smaller packages
228:02 - that are all composed into this one
228:04 - monolithic library called
228:06 - d3
228:08 - and so if you see in in
228:11 - d3 itself it just
228:13 - it exports things from all of these
228:16 - d3 packages which you could use on their
228:19 - own but for convenience sake i'm just
228:21 - going to pull in the whole d3 build
228:23 - which contains all of this stuff
228:26 - but anyway d3 selection is one of these
228:29 - things
228:30 - and i'm gonna pull in uh from there
228:37 - and feel free to stop me at any time
228:39 - with questions
228:40 - by the way
228:49 - yeah i haven't really introduced um
228:52 - d3 itself let me stop and do that
229:04 - since this is this first time that we're
229:06 - pulling in
229:07 - d3
229:09 - i thought i would take a moment to
229:11 - discuss d3 and why we'd want to use it
229:15 - overall just some broad context for this
229:18 - d3 stands for data driven documents
229:21 - it
229:22 - refers to documents as in
229:25 - the dot the html document object model
229:28 - d3 has utilities for dom manipulation
229:31 - which we did last time with the vanilla
229:33 - um javascript api for dom manipulation
229:36 - which was quite verbose
229:38 - a lot of that stuff can be changed such
229:41 - that it uses d3 for dom manipulation and
229:44 - the code will shrink down it'll be a lot
229:46 - simpler to read and use
229:49 - in addition to daw manipulation d3 has
229:52 - all sorts of utilities
229:54 - for building data visualizations
229:59 - so
230:01 - that's why
230:02 - it has become sort of the de facto
230:04 - standard for building visualizations on
230:07 - the web
230:08 - today
230:11 - the whole rest of this series is going
230:13 - to be diving into using d3
230:16 - to make all these different types of
230:18 - visualizations but as a starting point
230:22 - i wanted to introduce d3 in a way that's
230:24 - disconnected from data and all the
230:27 - complexities that comes along with data
230:29 - in this solar with exercise here
230:40 - d3 selection
230:42 - is the package within
230:45 - the set of d3 packages that does dom
230:48 - manipulation
230:53 - here are some examples of how to use it
230:55 - um
230:57 - and and i'll go you know we'll craft
230:59 - these ourselves but for reference this
231:03 - page is the canonical
231:05 - documentation
231:07 - for d3 selections
231:12 - all right now that we've imported
231:14 - selection from d3
231:16 - we can start to use it to replace this
231:19 - code that we had from last time
231:22 - so here's what i'm going to do i'm going
231:24 - to comment out
231:26 - everything
231:27 - and then re-implement it
231:29 - with d3
231:30 - one block at a time
231:33 - the first block to consider
231:36 - is the one that
231:37 - sets up the svg element
231:43 - i'm going to comment this out as well
231:45 - and replace it with some d3 based stuff
231:51 - select
231:53 - body
231:57 - is what we need to do to get
232:00 - a d3 selection of the body element
232:03 - and now that i think of it um
232:06 - we really need to import select from d3
232:09 - not selection
232:10 - so we've got select from d3 we select
232:13 - the body
232:14 - and a d3 selection instance is this sort
232:17 - of complicated thing that we'll be
232:19 - learning more about
232:21 - but it has this
232:22 - this pattern of using it called method
232:25 - chaining where
232:26 - once you invoke something and you get a
232:29 - d3 selection back
232:31 - that
232:32 - thing that gets returned by this
232:33 - function has a bunch of methods on it
232:35 - one of which is
232:37 - append
232:41 - and you can pass into append
232:43 - the tag name like svg
232:48 - and that returns the selection of the
232:51 - svg element that was appended to the
232:54 - body
232:55 - so this this one line here
232:58 - does the exact same thing as
233:00 - this line
233:02 - and
233:03 - this line
233:05 - it creates a new svg element and appends
233:07 - it to the body
233:10 - to set these attributes on this
233:13 - well first of all let me save this as a
233:15 - variable
233:18 - i'll call it svg
233:20 - once we've got that we can say svg.attr
233:24 - which is short for
233:26 - attribute
233:28 - internally this actually invokes set
233:30 - attribute
233:31 - and the signature is compatible
233:35 - with
233:36 - the vanilla
233:38 - dom api method set attribute so i can
233:41 - just paste this stuff here we set the
233:43 - attribute of width to be the value of
233:45 - the variable width
233:47 - and same thing for height
233:54 - the height attribute gets the value of
233:56 - the height variable
233:58 - now we can inspect the dom to see if it
234:01 - worked
234:04 - sure enough there it is there's an svg
234:06 - element
234:07 - with width 960 and height 500
234:14 - any questions at this point
234:28 - all right so this is one way to set up
234:31 - the svg element
234:36 - due to this method chaining thing
234:39 - you can actually combine these together
234:42 - into one big statement
234:44 - so instead of having multiple different
234:46 - statements
234:49 - it could be one giant statement where we
234:51 - chain
234:53 - these things together so we append this
234:55 - the svg
234:56 - and then on the selection of the svg we
234:59 - set the width and height
235:01 - all right so we've got our svg setup
235:04 - the thing that i wanted to do next
235:06 - was
235:08 - add the
235:09 - the rectangles that are in the
235:10 - background that would be a good next
235:13 - thing to add
235:16 - yeah this block here where it's a for
235:18 - loop that adds a bunch of rectangles
235:20 - let's do this with d3
235:26 - so i'll bring that up here
235:31 - the way we would do this
235:33 - in d3 is
235:36 - we need to have an array
235:38 - to work with
235:40 - and then once we have an array we can
235:42 - use the d3 data join
235:45 - concept
235:48 - so
235:50 - here's what we can do i'm going to use
235:52 - this code as a template to build up an
235:55 - array of objects where each object
235:58 - represents
235:59 - the attributes of a single rectangle
236:02 - so i'll paste that
236:04 - uncomment it
236:06 - and then
236:09 - i can initialize an array
236:13 - i'll call it marks
236:15 - because it represents the visual marks
236:17 - that are going to appear on the page
236:19 - i'll initialize it like this to an empty
236:21 - array
236:23 - and then
236:24 - in the body of this for loop
236:27 - instead of creating dom elements
236:29 - i'm just going to push
236:32 - objects onto this array meaning you know
236:35 - append them to the array add new entries
236:37 - to this list of things
236:40 - by using the push method
236:43 - so we can say marks.push
236:46 - and pass in an object literal
236:50 - and on this object literal i can build
236:52 - up all the things that it needs to know
236:56 - to render a rectangle
236:58 - so y for example could be set to
237:02 - i times 20
237:04 - width could be set to width
237:09 - height
237:10 - could be set to 10.
237:12 - i'm just copying from what's there
237:16 - and the mask
237:17 - can be set to
237:19 - this string here
237:26 - that's how we can build up an array of
237:29 - objects that describe
237:32 - the rectangles this is not using d3 at
237:34 - all this is just pure javascript and
237:37 - just to see that it worked
237:38 - let me console.log
237:41 - marks
237:46 - sure enough we get this array
237:49 - and we can see
237:51 - it's got a bunch of objects
237:53 - where the only thing that really varies
237:54 - is
237:55 - y
237:57 - all right so far so good
238:06 - you have a question
238:09 - yes so
238:12 - we are doing this because dt requires
238:19 - right
238:20 - yeah yeah that's right
238:24 - um
238:27 - you know your audio is really bad i
238:30 - don't know what it is but
238:32 - maybe grab a camera or something
238:47 - the reason why we're setting up this
238:49 - array
238:50 - is because d3 expects an array to work
238:54 - with to use this data join feature of d3
238:57 - which we're going to use right now
239:01 - i'm going to refer to this svg
239:04 - selection
239:05 - from earlier to
239:07 - add rectangles inside of it
239:10 - and to use this pattern of d3
239:15 - data joins we can take a d3 selection
239:17 - and say you know that selection dot
239:22 - select all
239:26 - uh rect
239:28 - this makes a selection of all rectangles
239:31 - that are on the page already
239:33 - and
239:34 - at the point that where this code runs
239:36 - there are none
239:38 - but the fact that there are none is
239:40 - useful information to d3
239:42 - because it knows that okay the set of
239:44 - dom elements on the page
239:46 - it doesn't contain what it needs to
239:47 - therefore i have to add it
239:49 - so once we've said select all we can say
239:51 - dot data
239:54 - marks
239:58 - this produces a d3
240:01 - data join that has a bunch of methods on
240:03 - it um
240:08 - one method which was added fairly
240:10 - recently
240:12 - uh in d3
240:13 - is dot join
240:15 - it's a simplified api to
240:18 - um the other stuff that was in use
240:20 - before like uh
240:23 - and dot enter
240:25 - uh dot merge
240:27 - sort of stuff
240:29 - and we'll you know we'll get deeper
240:31 - deeper into this but
240:32 - this is the simplified api that we can
240:34 - use for our case
240:37 - so what it's going to do here is create
240:40 - one rectangle
240:42 - for each of these marks
240:45 - and then
240:46 - on this
240:48 - selection that contains all these
240:51 - newly minted rectangles we can set some
240:54 - attributes
240:56 - we can set the attribute of
241:00 - i'm looking at this object here we want
241:02 - to set all four of these attributes
241:06 - we can set the y attribute to be
241:12 - well what we want to set it to is the y
241:14 - value from the corresponding object that
241:17 - was constructed over here
241:21 - to do that we can accept
241:23 - a function
241:25 - as input
241:26 - to the second argument to attr
241:31 - and that function
241:32 - can take as input d
241:35 - which is the datum
241:36 - uh it's just a convention to use d to
241:39 - represent the datum like one row of the
241:41 - data or you know one entry in the data
241:43 - array
241:45 - and that can return
241:47 - d dot
241:49 - y because we've set it up here
241:51 - so when we access d dot y it's going to
241:54 - access the y value
241:56 - that we set up over there
242:01 - and we can do a similar thing for
242:06 - all the other
242:07 - attributes that we need
242:10 - width
242:12 - we can set it to d dot width
242:14 - height
242:16 - we can set it to d dot height
242:19 - and mask
242:22 - we can set to d dot mask
242:25 - and that that's not doing anything now
242:27 - because i commented out the actual masks
242:32 - and as you can see it worked we've got
242:34 - our rectangles back
242:39 - this is how you can use d3
242:41 - to
242:42 - create a bunch of rectangles on the
242:44 - screen
242:50 - now
242:51 - this duplication
242:53 - between here and here
242:57 - is not ideal but
242:59 - i kind of like this way of doing things
243:02 - in a sense because it decouples
243:04 - the computation of the marks from the
243:06 - rendering
243:08 - of the marks
243:10 - this here it just
243:12 - creates an array of objects that we can
243:14 - directly pass in to all this d3 logic
243:18 - over here
243:21 - and i like this setup because if in the
243:24 - future you ever wanted to change what
243:27 - you were using
243:28 - for doing the dom manipulation
243:30 - you could
243:32 - and this part wouldn't have to change at
243:34 - all the only thing that would have to
243:35 - change is this like if you wanted to
243:37 - render it using
243:38 - react
243:39 - or view for example these other dom
243:41 - manipulation
243:43 - frameworks
243:45 - but this is not often what you see
243:49 - so
243:50 - often what you see is it's all combined
243:53 - into one big block
243:56 - and in a sense that's more efficient
243:58 - because there's no need actually to
244:00 - create all these strings if they're all
244:02 - the same
244:04 - and then refer to it here you know we
244:06 - could just pass in
244:08 - uh the value right here
244:11 - so what i'll do i just want to show you
244:13 - how that looks
244:14 - so i'm going to
244:16 - comment out this
244:18 - so it's there as a reference in the
244:19 - future
244:20 - and then refactor this to use the more
244:23 - common pattern that you find with d3
244:27 - which is
244:29 - to um
244:31 - to compute all the values in these
244:34 - accessor functions
244:39 - so
244:40 - instead of doing all this stuff here
244:46 - i'll do it down here
244:49 - and if we're doing it like that we don't
244:51 - actually need all this logic to build up
244:53 - the array we can use a utility from d3
244:57 - called range
244:58 - which creates an array
245:03 - range of say five it creates an array
245:06 - that has five integers in it that start
245:08 - at zero and to use this we need to
245:11 - import
245:13 - range
245:14 - from d3 along with select
245:32 - now that we've done console.log range of
245:34 - five you can see that it did output here
245:37 - that array that just contains some
245:39 - numbers
245:40 - so this is the data array that i'm going
245:42 - to use now as the input
245:47 - instead of saying data marks i'm going
245:49 - to say data
245:50 - range of 5
245:52 - but we did have this variable called n
245:55 - which is the number of rectangles so i'm
245:57 - going to use that
245:59 - instead
246:07 - now in here instead of accessing the
246:10 - properties that were on those objects
246:12 - we can compute those values
246:15 - on the fly
246:17 - um
246:19 - d is the number
246:21 - in this case so i'm just going to say d
246:23 - times 20. it can take the place of i
246:27 - and for these other ones i'm just going
246:29 - to return
246:30 - width
246:33 - and
246:35 - 10 for height
246:37 - and then this string of the circle mask
246:42 - right here
246:45 - and since these are returning the same
246:47 - values for each rectangle these don't
246:49 - actually need to be functions
246:51 - we could just pass in the value directly
246:54 - like this
246:56 - this highlights an important aspect of
246:58 - this dot attr method
247:00 - that it accepts either
247:03 - constant values like this
247:06 - or
247:07 - functions and when it when it accepts a
247:09 - function
247:11 - it passes in
247:12 - the
247:14 - object from the array into that function
247:16 - and then whatever that function returns
247:18 - it's going to use as the value for that
247:20 - attribute
247:27 - all right so we've got this far let's
247:29 - keep going
247:32 - in our refactoring of this code here
247:36 - what does this block do it creates a
247:38 - mask and it sets the id to be circle
247:41 - mask
247:42 - and it depends it to the svg
247:46 - we can do the same with d3 by saying svg
247:49 - dot append
247:55 - mask
248:02 - and we want to set the id
248:05 - attribute
248:07 - to be
248:09 - circle mask
248:17 - all right that should do the same thing
248:19 - as this block of code over here
248:33 - i don't know why it's not showing up our
248:35 - rectangles though
248:37 - oh oh yes because now that mask exists
248:41 - but it doesn't contain anything yet
248:44 - it doesn't contain those the circle or
248:46 - anything
248:47 - so that's our next step
248:49 - the next block of code adds that
248:51 - background rectangle of the mask
248:53 - let's do that now with d3
248:58 - that would look like a mask dot append
249:03 - although we don't have mask
249:05 - yet
249:06 - um
249:08 - i'll just define that here to be that
249:12 - d3 selection of that mask element so now
249:15 - we could say mask dot append
249:18 - wrecked
249:22 - this one statement does the same thing
249:24 - as
249:25 - this statement here which creates the
249:27 - rectang element
249:29 - and also appends it
249:30 - to the mask
249:32 - parent
249:33 - now we can set the attributes
249:39 - width
249:46 - height
249:55 - and
249:56 - fill
250:02 - and if i change this to white
250:05 - it should show up all of our rectangles
250:07 - and it does
250:09 - okay but black means hide the rectangles
250:15 - this next block
250:17 - does the same thing but for a circle
250:19 - so i'm going to copy
250:21 - that logic for the rectangle and change
250:23 - it to be for a circle
250:25 - instead where we set the cy
250:29 - attribute
250:30 - we set the cx
250:32 - attribute
250:34 - and we set the radius
250:36 - attribute
250:41 - and finally we set the fill
250:44 - attribute of that circle
250:48 - all right and the mask is working again
250:51 - fantastic
250:55 - now
250:56 - let's do the same for
250:58 - mask 2
251:00 - now remember mask 2
251:02 - was
251:04 - all the same stuff as mask one except
251:07 - just the colors
251:09 - were inverted
251:12 - so
251:13 - we can copy
251:15 - uh this whole block
251:17 - of stuff
251:23 - mask 2
251:27 - oops
251:32 - is a new mask that has the id circle
251:34 - mask dash 2.
251:41 - and then we append a rectangle
251:44 - to mask 2
251:47 - and instead of it being black it should
251:49 - be white
251:52 - and then
251:54 - we append the circle
251:56 - to mask 2 down here
251:59 - and the fill of that should be black
252:02 - instead of white
252:09 - okay
252:11 - that seems to be working
252:14 - although
252:15 - i forgot to change it to mask 2
252:18 - so i'll change that now mask 2 dot
252:20 - append mask 2
252:22 - dot append
252:25 - all right and lastly we have our
252:28 - rectangles
252:30 - which i'll bring up to the top near the
252:31 - other rectangles
252:34 - just so all the rectangle stuff is in
252:35 - one spot
252:42 - so i'll paste that here and it's almost
252:45 - exactly the same as this block of code
252:48 - that we did
252:49 - for the first set of rectangles
252:51 - the only difference
252:53 - is that
252:55 - x
252:56 - gets set to
252:58 - i times 20 so i'll just change this y
253:00 - here to x
253:02 - width
253:03 - gets 10
253:05 - height gets the value of the height
253:07 - variable and the mask
253:10 - is circle mask dash two
253:16 - okay
253:18 - um
253:19 - see this breakage
253:25 - this is not what we expect
253:28 - see that
253:31 - so does anyone have
253:34 - any idea what's going on here
254:07 - see what appears to be happening here
254:11 - is that
254:12 - this first chunk of code
254:15 - that made these rectangles
254:19 - it set up all of these rectangles uh
254:21 - properly
254:23 - but
254:24 - this line this next block of code that
254:27 - deals with rectangles
254:29 - it actually selected all of the
254:31 - rectangles that were there
254:34 - from the first block of code
254:38 - and then it set
254:40 - um
254:40 - the x value
254:42 - of that and it set the height value
254:45 - um
254:46 - so it's just sort of a mess
254:48 - where our two different blocks of code
254:51 - are you know impacting the same set of
254:53 - rectangles which we don't want
254:57 - so how can we how can we make it so that
254:59 - these two different blocks
255:01 - um
255:02 - act on different
255:04 - rectangles
255:09 - well there's a couple of approaches one
255:11 - approach is we could use classes to
255:13 - differentiate them
255:15 - and another approach is we could use
255:17 - group elements
255:18 - to contain them
255:21 - let me show you how both of those would
255:23 - play out
255:24 - if we want to use classes
255:27 - we can set the class attribute
255:31 - to be
255:33 - something like
255:36 - maybe horizontal
255:41 - and then when we say select all we can
255:43 - say
255:44 - rect.horizon
255:46 - to only pick up on those horizontal ones
255:50 - and it's still broken because we haven't
255:52 - done
255:53 - the same treatment for the other set
255:56 - but we could say class is vertical
256:00 - over here and then we select on
256:03 - the vertical rectangles only
256:06 - this is one way of doing it
256:14 - i'm going to fork at this point
256:18 - just to have a reference of that state
256:20 - of things
256:37 - okay so this is one way of doing it
256:39 - using classes
256:42 - another way
256:43 - i'm just going to put it back to the way
256:44 - it was
257:13 - another way of solving this problem is
257:15 - to use group elements where you could
257:17 - say
257:18 - svg.append
257:21 - g
257:23 - first
257:26 - and that way
257:28 - it would only be working within this
257:30 - newly appended group element
257:33 - and an svg group element is
257:36 - it's a very um
257:38 - useful
257:40 - element it it just groups its children
257:43 - together
257:45 - in the dom tree
257:47 - and let me do the same for the other set
257:53 - okay now you can see it's it's not
257:55 - broken anymore
257:56 - and if we inspect the dom
257:58 - we can see that
258:00 - there's one group element that contains
258:03 - the set of rectangles going from top to
258:06 - bottom
258:10 - and then there's an entirely other group
258:12 - element
258:13 - that contains the rectangles going from
258:15 - left to right
258:22 - yeah and the reason why this works is
258:24 - because the selection for the rectangles
258:26 - only acts within each of these different
258:28 - group elements so that's another way to
258:31 - to solve that breakage
258:44 - okay
258:45 - very good
258:46 - this feels like a milestone
258:49 - from here i'm going to fork this and try
258:52 - to
258:53 - reproduce
258:55 - that
258:56 - the full
258:57 - the full set with the different shapes
258:59 - any questions at this point
259:06 - yeah just a couple uh um
259:09 - the attributes
259:11 - uh the attr
259:13 - um
259:14 - just so to get it straight in my head
259:17 - those the second arguments to the attr
259:21 - methods
259:22 - those effectively s
259:24 - take
259:26 - match a data point
259:28 - in the um your array and
259:31 - [Music]
259:33 - put it on the screen basically that they
259:35 - they attach some kind of pixel
259:37 - point
259:38 - to that data point is is that the right
259:40 - way of thinking about these
259:42 - um
259:44 - these these arguments that are passed to
259:46 - attr
259:48 - yes
259:49 - yes that's correct
259:51 - that's exactly right so whatever we pass
259:54 - into dot data
259:56 - should be an array
259:59 - and
260:01 - the dot attr
260:05 - applies to all of the
260:08 - dom elements in that selection
260:11 - and so after we call dot join
260:15 - um the first time this runs
260:17 - i mean it's not running multiple times
260:19 - but when it runs
260:21 - it's going to create a bunch of
260:23 - rectangles
260:24 - and then
260:26 - for each element of that array it's
260:29 - going to pass that element as the
260:31 - argument to this function that we've
260:34 - passed in
260:35 - and so the responsibility of this
260:37 - function
260:38 - is to map
260:42 - that entry
260:43 - in that array whatever it may be
260:45 - whatever shape it may be
260:48 - onto
260:49 - whatever is expected for the x
260:52 - coordinate in this case or in general
260:54 - the you know the attribute value of the
260:56 - dom element
260:58 - and so yeah it's a mapping function that
261:00 - essentially transforms the thing
261:03 - from data space
261:05 - whatever that may be
261:06 - into
261:07 - i like to think of it as screen space
261:11 - in this case the x-coordinate so literal
261:13 - position on the screen uh but it could
261:16 - also be
261:17 - a color or
261:18 - you know width and height like these
261:20 - cases here
261:22 - but yes yes that's exactly what it's
261:24 - doing
261:27 - thank you yeah that makes sense
261:29 - and the
261:30 - earlier chunk where
261:33 - it talks about
261:35 - yeah append
261:36 - g
261:37 - um
261:39 - and select all and data
261:42 - are these so just so my mental model is
261:45 - correct
261:46 - um or as close to correct as possible
261:49 - it's
261:50 - recrea it's creating a brand new
261:53 - selection
261:55 - um
261:56 - at that early stage and
261:58 - what the attr's are doing are
262:01 - modifying that selection is is that is
262:04 - that the way to
262:05 - think about it
262:08 - correct
262:09 - yeah some of these lines
262:11 - create a new selection
262:13 - and others of these lines
262:16 - modify
262:17 - an existing selection
262:21 - there was uh in the past i mean it still
262:24 - is there was a convention around
262:26 - indentation
262:28 - relating to this point
262:31 - and that convention
262:33 - was
262:34 - any line that creates a new selection be
262:37 - indented
262:38 - one level
262:39 - and then any line that modifies
262:43 - the exist the other you know modifies
262:45 - the selection that was defined on the
262:47 - line above
262:49 - uh should be indented by
262:51 - two spaces
262:52 - however that's sort of fallen out of
262:54 - fashion because everybody's using
262:55 - prettier nowadays but it's a nice touch
263:00 - and just to to really make it clear let
263:02 - me walk through each and every line
263:05 - of this
263:06 - svg.append g
263:09 - creates
263:10 - a new
263:12 - group element a dom element you know
263:15 - internally it invokes exactly this code
263:20 - of um you know document.createelementns
263:25 - with the svg namespace
263:31 - and
263:33 - it takes that that dom node that was
263:35 - constructed and associates it with this
263:38 - new newly minted d3 selection that
263:40 - didn't exist before
263:42 - and it creates a brand new selection
263:46 - so the return value from svg.append g
263:50 - is a selection that just contains that
263:52 - one group element
263:55 - when you say
263:56 - dot select all
263:58 - rect
264:00 - this creates yet another d3 selection
264:03 - that happens to be
264:05 - empty
264:09 - um
264:11 - it's it's an empty selection
264:13 - that would contain wrecked elements if
264:15 - there were wrecked elements there but
264:17 - there's not
264:18 - um
264:20 - this information
264:22 - the fact that it's empty is very useful
264:24 - to
264:25 - the internals of the dot data
264:28 - method
264:29 - which
264:30 - associates an array
264:33 - to that selection
264:36 - and at a certain point selections were
264:38 - made immutable
264:40 - which is a really nice feature of
264:42 - selection selections are immutable
264:49 - so the dot data call creates a new
264:52 - selection where that empty selection of
264:54 - no rectangles is associated with
264:57 - this data
264:59 - all right and then when you say dot join
265:02 - rect
265:04 - this is actually a short form
265:06 - of
265:08 - another pattern
265:09 - which i'm not sure i totally want to get
265:11 - into but uh essentially it's dot enter
265:16 - dot append
265:18 - wrecked
265:23 - and so the enter selection
265:26 - handles the case where there's no dom
265:29 - element on the page corresponding to a
265:31 - given data element
265:33 - and so for each of those cases it will
265:35 - append a new rectangle
265:39 - so that's
265:40 - this this dot join is a short form for
265:43 - that in this particular case
265:47 - and then all of these lines that use dot
265:50 - attr
265:52 - they
265:54 - they don't actually mutate the
265:57 - the anything in javascript like the so
266:00 - the d3 selection of these rectangles
266:02 - is immutable however
266:05 - what it does when this line runs it goes
266:09 - through each and every dom element and
266:11 - it mutates the dom element it sets the y
266:14 - attribute to be the return value of you
266:17 - know whatever the value is returned
266:19 - from this function
266:21 - and same thing with all these others it
266:23 - goes through and updates
266:25 - the dom elements
266:27 - based on the return values so i hope
266:29 - that clarifies the
266:31 - the role of the different pieces
266:36 - definitely thank you very much my
266:38 - pleasure
266:44 - i see there's some questions
266:45 - in the youtube chat did join us to be
266:48 - enter rect well no it used to be
266:50 - dot enter dot append wrecked and join it
266:53 - actually
266:54 - does something with merge
266:56 - but we we'll get to that later
266:59 - um
267:01 - another question from the youtube chat
267:03 - since mask
267:04 - height and width are the same can you
267:06 - bind them
267:07 - to a parent g element
267:14 - that's interesting
267:22 - so the mask
267:24 - width and height are applied to the
267:27 - the rectangle within the mask not the
267:30 - mask element itself
267:33 - therefore
267:35 - um
267:37 - no i don't think you can do that i don't
267:39 - think you can do that
267:44 - okay here we go
267:46 - let's
267:47 - um
267:49 - let's fork this one
267:55 - and i'll call it
267:57 - full
267:59 - solar with reproduction
268:02 - with d3
268:22 - the first thing i'm going to do here is
268:24 - just delete all this junk that is left
268:26 - over
268:28 - from
268:29 - earlier
268:47 - deleting all these blocks that are
268:50 - commented out
269:11 - all right now we're left with this
269:12 - program that is
269:15 - 62 lines of code
269:23 - what we can do next is
269:25 - change this mask to be a shape
269:30 - and d3 actually provides a set of
269:33 - symbols that we can use
269:42 - there is a package called
269:44 - d3 shape
269:48 - and in d3 shape
269:50 - there is a section on symbols
269:54 - these symbols here are provided
269:58 - by d3
269:59 - and
270:00 - the way this plays out is that
270:03 - um you call some d3 functions and it
270:06 - generates for you the string to use
270:10 - as the d attribute for a
270:12 - path to create one of these
270:15 - symbols on the screen we need to just
270:17 - make a path element and then set the d
270:19 - attribute to the the return value from
270:23 - some invocation let's see what that
270:25 - invocation would be we have to call
270:28 - d3.symbol and pass in type
270:32 - and size
270:34 - the type
270:36 - that we pass in
270:37 - should be one of these
270:40 - symbol types like d3 dot symbol circle
270:43 - d3 dot symbol cross d3 dot symbol
270:46 - diamond
270:51 - also the set of symbols is exposed as d3
270:54 - dot symbols this is an array that
270:58 - contains
270:59 - all of these individual things
271:02 - and so since our aim
271:15 - is to reproduce this piece which has a
271:17 - bunch of different symbols going across
271:21 - i'd say we can just use that array of
271:23 - all the symbols that are available
271:25 - and you know traverse it use that as our
271:28 - data
271:42 - all right so let's import symbols from
271:45 - d3 in our code
271:51 - import select range and
271:54 - symbols from d3
271:58 - we also need to import symbol
272:01 - from d3
272:12 - the way we use this
272:14 - is we call symbol passing in a type and
272:16 - a size and that returns a symbol
272:19 - generator
272:20 - which we then need to invoke
272:24 - with
272:26 - some arguments or no arguments i guess
272:28 - works
272:30 - and
272:31 - that there's some just there's just
272:32 - something complicated um
272:35 - that you could do if you pass an
272:36 - argument but you don't need to pass an
272:38 - argument
272:39 - so once you invoke this function it will
272:41 - return that that string that we can use
272:43 - as the d attribute of a path
272:46 - so let's give it a shot
272:52 - on one of these masks
272:55 - i'm going to replace this circle with a
272:57 - path
272:59 - and instead of cxcy and r
273:04 - we can set the d attribute
273:06 - to be
273:07 - symbol
273:11 - and i'm going to pass in
273:14 - the symbol type which i can just access
273:17 - you know symbols
273:19 - at index 0 the first entry of the
273:22 - symbols array
273:25 - and the second argument here could be
273:26 - the size
273:28 - um
273:30 - i don't really know what the range of
273:32 - size is let's write 300
273:35 - and this invocation here returns a
273:38 - symbol generator which we then need to
273:40 - invoke
273:41 - as a function
273:44 - and once we do it should return
273:47 - some stuff
273:50 - all right i don't see anything maybe the
273:52 - size needs to be increased
273:54 - there it is i see something start to
273:56 - appear
273:58 - yeah
274:00 - okay there it is
274:04 - the first symbol happens to be a circle
274:09 - but to see some other
274:11 - shape we can access i don't know the
274:13 - next symbol symbols that index one
274:15 - for example
274:18 - notice that the symbol is centered in
274:21 - the upper left
274:24 - that's i think the first problem i would
274:26 - like to address here
274:31 - um
274:33 - yeah and the way we need to do this is
274:36 - uh
274:37 - well we want to move it around
274:40 - my first goal here is to move it so that
274:42 - it's in the center
274:44 - and
274:45 - to do that i think the most
274:46 - straightforward way to would be to use
274:48 - an svg group element as the parent of
274:51 - this path
274:53 - and transform
274:54 - that group element meaning move that
274:56 - group element around with everything in
274:58 - it
274:59 - let's try that
275:13 - all right so here we've got mask dot
275:15 - append
275:16 - path
275:17 - but instead what if we did mask
275:20 - dot append
275:23 - g
275:25 - dot append path
275:27 - this works just the same as it did
275:29 - because it's just a grouping
275:31 - with no transform applied to it to apply
275:34 - the transform to this group element to
275:36 - move this path around we can say dot
275:39 - attr
275:44 - transform
275:48 - and the value will be translate
275:52 - of
275:55 - let's just try some numbers 400 comma
275:58 - 400
276:02 - yeah that moved it
276:06 - the way this works is um it's a string
276:10 - but it looks like a function invocation
276:12 - it's it's a domain specific language for
276:15 - transforms
276:16 - and what it looks like is the first
276:19 - argument to this
276:21 - function s kind of a thing
276:23 - in a string is the x
276:26 - coordinate so it's going to move it over
276:28 - to the right by 400 pixels
276:31 - and the second argument here is the y
276:35 - coordinate so it's going to move it down
276:37 - by 400 pixels
276:39 - ideally
276:41 - to put it in the center we could say
276:44 - width divided by two
276:47 - and height
276:49 - divided by two
276:52 - but since this is a string that's not
276:54 - going to work
276:55 - we can take advantage of an es6 language
276:58 - feature called string
277:01 - template literals
277:03 - and the way we can use this is by using
277:06 - backticks
277:07 - and then inside of this thing
277:10 - we can bust out into javascript
277:13 - using this syntax here a dollar symbol
277:16 - and then a pair of curly braces
277:18 - so now whatever is inside this pair of
277:20 - curly braces will be evaluated
277:23 - as javascript and inserted
277:26 - into that location in the string
277:29 - so now we can actually use
277:32 - width over two
277:34 - and height over two
277:35 - and now it's dead center
277:38 - look at that
277:40 - i'll bring the size down a little so it
277:42 - fits
277:43 - on the screen
277:47 - there we go
278:12 - all right so the problem now is that one
278:15 - of these masks uses this
278:17 - symbol and the other mask still uses the
278:20 - circle
278:24 - so i mean one thing we could do to
278:26 - address that is
278:28 - copy paste
278:30 - all this code
278:33 - which is what i'll do
278:34 - for now
278:37 - and change white to black
278:41 - all right now this sort of looks is
278:43 - starting to resemble that solar wood
278:45 - piece a little bit more
278:49 - but i hate this
278:51 - duplicated logic between these two
278:53 - blocks these two masks i mean there's a
278:56 - bunch of
278:57 - code that looks almost exactly the same
279:00 - the only difference is
279:02 - one of these is filled with white
279:05 - and has an id of circle mask
279:08 - and the other
279:10 - is filled with black
279:12 - and has an id of circle mask 2.
279:15 - and now that i think of it these names
279:17 - are a little outdated
279:19 - um because it's not circles anymore
279:22 - so i'm going to rename it to
279:25 - mask 1
279:27 - and mask 2.
279:30 - and i have to go and update the
279:31 - references as well
279:43 - okay
279:44 - now
279:45 - what i would like to do before we go any
279:48 - further
279:49 - is refactor this so that there's no
279:51 - duplicated logic
279:53 - the reason being
279:55 - once we start adding more shapes into
279:58 - here we're going to have to copy paste
280:00 - larger and larger chunks and if we want
280:02 - to change it in one place we'd have to
280:04 - change in two places it would be a total
280:06 - nightmare
280:07 - and so this is a point at which
280:09 - refactoring makes a lot of sense
280:12 - refactoring is this notion of
280:13 - reorganizing code so that it's more
280:16 - maintainable or you can do
280:19 - more things with it generally
280:21 - refactoring is triggered when you see
280:23 - duplicated logic in your code
280:30 - all right so what i'm going to do here
280:32 - is define a function
280:35 - and the idea is
280:36 - we can invoke this function
280:39 - and and we can pass in only the things
280:41 - that vary between the two namely the
280:44 - mask id which is different
280:46 - and the fill
280:47 - which is different
280:50 - so let's try that const um
280:55 - what should i call it
280:58 - render
280:59 - mask
281:03 - equals function
281:08 - and
281:09 - i'm just going to take all this logic
281:11 - that appends the rectangle and the path
281:14 - and put it inside these curly braces and
281:16 - use prettier to automatically indent
281:18 - that
281:21 - now the things that we want to
281:24 - accept here
281:27 - are the id
281:29 - and the fill
281:31 - uh oh but first of all we should
281:33 - actually invoke this function
281:36 - okay now everything is in working order
281:38 - again and we can take as as one argument
281:41 - here
281:41 - the id
281:44 - of the mask
281:46 - and we can use it here when we're
281:47 - setting the id
281:49 - so i'll say render mask and pass in that
281:52 - string mask dash 1
281:54 - here
281:56 - which surfaces inside of this function
281:58 - as the local variable
282:01 - called id
282:02 - which is used here to set the attribute
282:04 - id
282:05 - on the
282:06 - mask
282:08 - right so we can actually now call render
282:10 - mask twice passing in different ids
282:15 - and
282:17 - i'll just comment out this other block
282:19 - because
282:21 - um
282:23 - it's going to be
282:25 - replaced by this function
282:27 - all right so the the fill
282:30 - is the other thing that we
282:32 - we need to have vary between these two
282:34 - function calls
282:36 - so i think what i'll do is
282:41 - instead of white this will be fill which
282:44 - we can accept as the second argument
282:48 - and so what we can do here is
282:50 - pass in white
282:52 - to the first one and black
282:56 - to the second one
283:00 - although
283:02 - this is not exactly right because
283:05 - we also need to deal with the the
283:07 - background rectangle
283:10 - which needs to be inverted like if it's
283:12 - black it needs to be white
283:14 - so you know what instead of using fill
283:17 - i'm going to accept an argument called
283:20 - inverted
283:21 - and this this will be a boolean where if
283:23 - it's true
283:25 - the colors should be inverted if it's
283:27 - false they shouldn't be
283:31 - and so inverted for the first invocation
283:34 - should be false
283:35 - and for the second invocation should be
283:37 - true
283:41 - and then
283:45 - uh we want the rect fill
283:47 - to be black
283:50 - if it's not inverted and white if it is
283:54 - and
283:57 - to do that
284:06 - i see there's some youtube chatter let
284:08 - me finish this thought and i'll answer
284:09 - some questions there
284:12 - to do that the tool that i would reach
284:14 - for is the ternary operator
284:17 - so we can say
284:19 - inverted
284:22 - question mark
284:23 - if it is inverted this should be white
284:26 - otherwise it should be black
284:30 - since this is the first time i'm using
284:31 - this
284:32 - um
284:33 - i want to stop and show you what it
284:35 - would look like without this syntax
284:40 - it would look kind of like this
284:46 - let rect fill equals
284:50 - black
284:53 - and then we could say if inverted
285:01 - wrecked fill equals white
285:04 - and then we would use rect fill
285:06 - down there
285:13 - so what it's doing is
285:15 - if it's not inverted this code will not
285:17 - run and wrecked fill will be black but
285:19 - if inverted is true erect fill will be
285:21 - white and this will be filled in with
285:23 - white
285:25 - however
285:28 - i think the cleaner syntax would be
285:30 - to use the ternary operator
285:33 - and say if it's inverted it should be
285:36 - see now i'm losing track you know which
285:38 - what should it be
285:40 - let's say black
285:42 - and white
285:48 - now we can apply
285:50 - the same logic to the fill of the
285:54 - path
285:55 - but it should be inverted from the
285:57 - background and so
286:00 - if it's inverted now it should be white
286:03 - if it is and black
286:05 - if it isn't
286:06 - okay
286:07 - there we go
286:10 - victory
286:12 - now we can get rid of this commented out
286:14 - stuff here and now there's just one
286:16 - block of code that is responsible
286:19 - for rendering
286:20 - this mask
286:23 - the first time we render it as mask 1
286:25 - which is not inverted and the second
286:27 - time we render it as mask 2 which is
286:31 - inverted
286:33 - and at this juncture i want to
286:37 - introduce
286:39 - the the syntax of calling functions
286:42 - on d3 selections
286:46 - what that looks like is
286:49 - it can take this is just a convention
286:52 - that i want to introduce now it's a
286:54 - convention that's used when you start to
286:56 - use functions to abstract
286:58 - uh to build abstractions
287:00 - in this d3 world
287:03 - so what it looks like is we pass the
287:05 - selection
287:06 - as the first argument
287:08 - and inside of this function we refer to
287:10 - it generically as
287:12 - some selection and we would pass it in
287:14 - as svg here
287:17 - as the first argument
287:19 - now it works everything works as
287:21 - expected
287:23 - and
287:24 - the conventional way of doing these
287:27 - sorts of invocations with d3 would be to
287:29 - use
287:30 - selection.call
287:33 - so we could say svg.call
287:38 - render mask
287:41 - and then
287:42 - pass in these second two arguments here
287:45 - like this
287:49 - and we can invoke it again
287:51 - with these
287:53 - other arguments
287:58 - these two are exactly equivalent
288:01 - in terms of what they do
288:03 - i just wanted to introduce this
288:05 - way of invoking
288:07 - functions on selections
288:09 - it doesn't have any immediate benefit
288:11 - right now
288:12 - um but it can be a very nice elegant way
288:16 - of doing it one of the things
288:18 - one of the reasons being that you can
288:20 - chain it like this
288:24 - so this is also valid syntax
288:32 - all right
288:34 - so i'll fork from here
288:36 - just to capture the state of things
288:47 - now the task before us is to render
288:50 - multiple
288:51 - symbols
288:52 - in here
288:53 - instead of just one
288:56 - so how can we do that
289:00 - well we've got symbols at index one
289:03 - in use here and what we essentially want
289:05 - to do is iterate through so if i change
289:07 - it to be symbols at index 2
289:09 - the shape that you see is a different
289:11 - shape and symbols that index
289:14 - 4
289:15 - is a star
289:16 - for example
289:18 - what we want to do
289:20 - is append multiple paths
289:24 - where each path
289:25 - has the this d attribute from a
289:27 - different symbol
289:33 - so
289:34 - how can we do this
289:36 - instead of just appending a single path
289:38 - we can use this data join pattern that
289:41 - we used earlier with our rectangles
289:46 - what this looks like
289:48 - um
289:49 - is
289:54 - well instead of doing it
289:56 - on the end of here i'm going to assign a
289:58 - variable
290:00 - called g
290:01 - just to sort of
290:04 - separate these concerns here
290:08 - so g is our parent we can say g dot
290:10 - select all
290:13 - paths
290:16 - and initially it's going to be
290:18 - empty
290:20 - dot data
290:24 - and what should the data be here what
290:26 - i'm thinking is it can just be
290:29 - the same thing we did with the
290:30 - rectangles we can use the range
290:33 - utility
290:35 - to create an array that contains
290:37 - integers starting at zero
290:40 - and how many things should be in here
290:43 - well it should be the same as the number
290:46 - of symbols that are available which we
290:48 - can access from
290:50 - symbols dot length
290:54 - all arrays have this dot length property
290:57 - and
290:58 - it it returns to you the number of
291:00 - elements that are on
291:02 - the array
291:05 - all right so
291:07 - we've got this array of integers going
291:09 - from zero to
291:11 - uh the number of symbols
291:18 - so now what we need to do is
291:21 - use this dot join
291:24 - method on paths
291:27 - now it's going to create
291:29 - a bunch of paths
291:33 - and on each path
291:36 - we want to set the d attribute
291:39 - to be
291:42 - something like this that we had earlier
291:46 - but we want it to vary
291:49 - based on the symbols
291:52 - and we also want the fill
291:54 - to be white or black
292:01 - since we are making multiple paths
292:04 - we can
292:05 - use a function here to take as input
292:08 - d
292:09 - one of these integers
292:11 - and we can access symbols at index d
292:16 - to have it be
292:17 - different
292:19 - symbols
292:21 - and what we get here is like this giant
292:24 - splotch where all the symbols are
292:27 - right on top of each other
292:41 - so the task at hand here now that we've
292:44 - got this far is to split these apart
292:48 - in the x
292:49 - direction so that you know one symbol is
292:51 - on the left and one symbol is on the
292:53 - right
293:06 - since we have d
293:08 - as an integer
293:10 - that starts at zero and goes upward we
293:13 - could potentially
293:17 - move
293:19 - each of these
293:20 - group elements
293:24 - over if we had them but we don't we're
293:27 - just creating path elements
293:30 - and there's a containing parent group
293:32 - element i think what we really want is
293:35 - to have it so that
293:37 - for each symbol there is a separate
293:39 - group element created
293:41 - and then within that group element
293:44 - there should be a path
293:47 - yeah to clarify what i'm what i'm saying
293:49 - if we inspect the dom here
293:53 - we can see that within the mask
293:56 - there's a group element
293:58 - that has a transform
294:00 - and then within that group element there
294:01 - are a bunch of paths
294:04 - i think instead
294:05 - we want to invert this containment
294:07 - relationship where
294:10 - for each symbol there should be a parent
294:12 - group element that gets a different
294:15 - transform that gets translated
294:17 - differently in the x direction and then
294:19 - within each one of those group elements
294:21 - we can put the path
294:23 - yeah that's what i'm going to go for
294:29 - and we could keep this
294:31 - parent
294:33 - element
294:34 - but i don't think it's necessary because
294:36 - we could just set the
294:37 - transform on the inner elements
294:40 - so i'm going to get rid of that
294:42 - for now and instead of appending our
294:45 - paths to g i'm going to append them to
294:48 - mask
294:50 - now it's working again but it's it's in
294:53 - the upper
294:55 - left corner
294:57 - because um you know they're at the
294:59 - origin now
295:03 - the next step here
295:05 - is to
295:06 - use group elements instead of paths so
295:09 - i'm going to say mask dot select all g
295:14 - dot data
295:16 - dot dot dot join g
295:20 - however
295:21 - this
295:23 - this convenience method is no longer
295:25 - enough for this case that we've got
295:34 - now we need to deal with this concept of
295:37 - the enter
295:39 - selection because what we want to do is
295:41 - tell d3
295:43 - whenever you create a new group element
295:45 - you should also append a path element
295:49 - inside of it
295:52 - yeah and to do that
295:55 - we need to use the join method in a
295:58 - slightly different way
296:00 - um
296:01 - what we've seen so far is the shorthand
296:04 - of join where it accepts a string being
296:06 - the tag name
296:08 - but the long form of dot join
296:11 - is where it accepts
296:13 - arguments for enter update and exits and
296:17 - i'll get more into this later
296:19 - but
296:20 - the simplest form of this is we pass a
296:23 - function to dot join and it's
296:25 - interpreted as
296:26 - uh the enter
296:28 - selection
296:32 - um
296:33 - actually more precisely we need to pass
296:35 - a function
296:36 - that takes as input the enter selection
296:39 - all right
296:41 - i realize it is a little confusing
296:48 - and
296:49 - in here we can say enter
296:52 - dot append
296:55 - g
296:55 - to create our parent group element but
296:58 - on this we can say dot append
297:01 - path
297:07 - and then on these paths
297:10 - is where we can set
297:12 - the d
297:14 - attribute and the fill
297:16 - attribute
297:20 - okay we're back in working order
297:24 - just to work through to walk through
297:25 - this one more time
297:26 - we're passing a function to dot join
297:29 - that function will be invoked with the
297:31 - enter selection of this data join
297:37 - and because there are no group elements
297:38 - initially
297:40 - the enter selection will
297:42 - will have this append method that will
297:44 - get triggered for each and every entry
297:46 - in the array
297:48 - so we append a group element and we
297:50 - append a path element to each of those
297:52 - group elements
297:53 - and we set d and fill on each of those
297:55 - paths
297:57 - so now if we inspect the dom and look at
298:00 - it that way
298:02 - we can see that there are indeed many
298:04 - group elements
298:06 - it's just that what we need to do now is
298:09 - transform
298:11 - each of these group elements to
298:12 - translate them so that they're in the
298:14 - middle vertically but they're spreading
298:16 - across the page horizontally
298:19 - and i see in the youtube chat
298:21 - vonnie
298:22 - says
298:24 - use this code right here okay i'm going
298:26 - to copy that code and see if it works
298:28 - thanks for that
298:32 - i'm just pasting this from the youtube
298:34 - chat
298:37 - oh that's that's what i've got already
298:41 - but yes that's correct that's correct
298:47 - um
298:50 - all right what we want to do here
298:52 - is for these group elements
298:54 - we want to set
298:56 - the attribute of transform
299:02 - to be
299:05 - we can take this thing that we can had
299:07 - constructed earlier
299:09 - translate by width over two height over
299:11 - two okay now it's in the middle again
299:14 - but we don't actually want to translate
299:17 - in the x direction by width over two we
299:19 - want to translate in the x direction by
299:23 - a function of d and keep in mind d is an
299:26 - integer that goes between one and uh
299:28 - however many symbols there are
299:30 - let's just say d times 200 to like
299:33 - spread them out
299:35 - by
299:36 - 200 oh
299:39 - but this is not a function
299:41 - it's just a string literal so let me
299:43 - make it into a function that accepts d
299:45 - okay there we go
299:47 - there we go
299:50 - all right it's starting to come together
299:51 - that looks like pretty cool
299:53 - abstract art right there
300:03 - oh vani says it's not the same it uses i
300:06 - let me see that
300:08 - let me take a look at that
300:20 - yeah so this is the code that i wrote
300:22 - this is the code from vani in youtube
300:26 - it's it is slightly different it accepts
300:28 - i
300:29 - yeah this when you pass a function it
300:31 - does take
300:32 - um
300:34 - a second argument which is the index in
300:37 - the array
300:38 - so this works as well just the same
300:41 - however
300:42 - it just so happens that
300:44 - the array
300:45 - is integers that would be the same as i
300:50 - all the time
300:51 - so that's why this this variant works
301:01 - but anyway um we can just tweak these
301:04 - numbers to make it so that different
301:06 - shapes
301:07 - show up at this point so they seem to be
301:10 - a little too large
301:12 - what if i say you know
301:14 - the size is 50 000.
301:18 - and by the way i think this size is like
301:22 - the number of fills filled in pixels
301:26 - i don't know it's it's just they're high
301:28 - numbers but i don't know this is just
301:30 - what what it takes
301:32 - so i'll bring down the size until we can
301:33 - see multiple shapes there we go starting
301:36 - to
301:37 - starting to come together
301:39 - and i'm just guessing here at the
301:43 - this constant that
301:45 - will split them apart
301:51 - you can make it even smaller
301:57 - all right this is almost there
302:00 - look at that
302:02 - beautiful
302:05 - beautiful
302:12 - any questions at this point
302:22 - so the
302:23 - example of the
302:25 - join in this case
302:27 - that was
302:30 - a case of appending
302:33 - elements
302:34 - to
302:36 - multiple elements
302:38 - which was uh different from before
302:41 - um
302:42 - is that right
302:44 - correct yeah it's it's a slightly
302:45 - different
302:47 - pattern
302:50 - and it's using the
302:52 - the long form
302:54 - of dot join so that we can access the
302:56 - enter selection
303:02 - yeah so
303:04 - it passes in the enter selection
303:07 - and the enter selection
303:09 - is populated with
303:11 - um
303:13 - the case where there is no corresponding
303:16 - group element
303:17 - for
303:19 - a given
303:20 - data element which is the case for all
303:23 - of them when this runs
303:25 - that's why enter dot append g
303:28 - will append a group element for each and
303:30 - every
303:31 - entry in our array here for each and
303:33 - every symbol
303:36 - and then
303:38 - after appending that group element and
303:40 - setting the transform we append to that
303:43 - group element
303:45 - a path
303:48 - and then dot attr d
303:52 - um
303:54 - this whole thing
303:55 - works
303:57 - because of some
303:58 - the way d3 is set up
304:02 - it actually uses the the data element
304:06 - that was bound to the parent
304:08 - so that's why this works the data
304:10 - element
304:11 - d which is one of those integers
304:14 - is associated with the group element and
304:17 - then if you append to it if it came from
304:19 - the enter selection
304:21 - you can you can reference those those
304:23 - data elements
304:25 - from the child
304:26 - so that that's why this this uh works
304:30 - but i realize it is a lot at once
304:33 - in for today
304:34 - um
304:37 - but that's sort of the intention to just
304:39 - like show
304:40 - you know the scope of this d3 data joint
304:43 - thing
304:44 - um and it will hopefully become more
304:46 - clear
304:47 - over time
304:48 - but does that answer your question
304:52 - uh yes thank you yeah that's really
304:53 - clear thank you nice nice
304:56 - and by the way this
304:58 - this dot join method is is new to me
305:02 - i mean i've i i learned really well the
305:04 - old syntax with the dot enter and the
305:07 - dot
305:08 - merge
305:09 - um
305:10 - so for what it's worth i really only
305:12 - learned this
305:13 - this pattern recently and i'm still sort
305:15 - of
305:16 - you know trying to wrap my head around
305:17 - it
305:19 - so yeah feel free to interrupt me as i
305:22 - go and ask questions like this this is
305:24 - great this is great
305:32 - oh my gosh oh look at this what time is
305:34 - it
305:39 - oh look at the time i'm overtime i'm so
305:42 - sorry
305:46 - all right well we've got pretty far
305:48 - for today
305:53 - i just want to wrap this up by tweaking
305:56 - these numbers a little bit so that
305:57 - there's some space along the side see
305:59 - how this circle is right up against the
306:00 - edge there
306:02 - um i can just add some constant
306:05 - to this like a hundred
306:08 - yeah that looks decent and then i'll
306:10 - bring this number down so that there's
306:11 - some space on the right
306:16 - yeah like 125 or so
306:20 - and i'll bring the size down
306:22 - just a bit
306:24 - to make sure that we can see all the
306:26 - shapes
306:32 - and in viz hub you can set the height so
306:35 - i'm going to make it
306:38 - maybe 200 pixels
306:40 - so that it more closely resembles the
306:42 - original piece
306:49 - okay there we have it
306:51 - there we have it
306:53 - that's all we're going to do for today
306:57 - i will leave it
306:59 - as an exercise
307:10 - to make the back
307:12 - sort of scratch that
307:15 - to make the background rectangles match
307:18 - the original solar with piece so here's
307:21 - your exercise
307:22 - and this is this is um kind of a
307:24 - challenging one
307:26 - see how in this original piece
307:29 - each subsequent
307:32 - square
307:33 - uh
307:34 - reorients the lines
307:36 - however in our example what we've done
307:39 - is um
307:41 - they're all the same
307:43 - so that's one thing you could do
307:46 - as an exercise
307:54 - alternatively um i i would encourage you
307:57 - to use d3 to try to reproduce any other
308:00 - solute piece because now that we have
308:02 - this this new tool in our toolbox of the
308:05 - d3
308:06 - data join
308:08 - it'll become a lot easier to reproduce
308:10 - these solar with pieces
308:13 - or create art just generative art in the
308:16 - spirit of solo wit and just as a
308:18 - reminder here's some
308:20 - other solo wit pieces
308:22 - that you could do with the tools that we
308:24 - have now the svg mask
308:27 - and the paths
308:29 - this one for example could be done with
308:31 - nested for loops and math.random to pre
308:34 - produce the points
308:41 - so yeah that's all for today
308:44 - um thanks everyone for joining
308:46 - and i'll see you next week
308:50 - here's what i'm hoping to cover today
308:53 - javascript arrays
308:56 - writing the dot range function of d3
308:59 - using vanilla javascript i think this is
309:02 - a good example to cement
309:04 - understanding of arrays and functions
309:06 - and then we're going to look at the ins
309:08 - and outs of d3 selections
309:10 - that's what this diagram is over here
309:13 - we'll get really deep into that
309:15 - and then the d3 data join
309:17 - concepts
309:18 - and various ways of implementing them
309:21 - with the d3 apis
309:28 - all right so from here i'm going to dive
309:29 - into vishub
309:34 - and i'll create something new
309:45 - just to uh to get some variety and how
309:47 - we include d3 i'm going to start with
309:49 - this hello d3 version 6
309:52 - d3 starter i'm going to fork this
309:56 - and call it um
309:58 - oh actually
310:00 - apologies we're just going to do vanilla
310:02 - javascript first for arrays
310:05 - i think i'll start with this
310:07 - html starter just totally vanilla
310:11 - html here
310:14 - and i'll call it javascript
310:19 - arrays
310:26 - all right i'll open the editor
310:28 - clear out the readme
310:30 - and then we've got this index.html
310:33 - to work inside
310:41 - and again i'll open up the developer
310:43 - tools so we have this console to work
310:45 - with
310:51 - and it says here hello javascript from
310:54 - this console.log
310:56 - hello javascript
311:05 - all right so we won't really need any
311:07 - html output so i'm just going to sort of
311:09 - clobber all this stuff so we can focus
311:12 - on just the javascript
311:18 - and even i'll hide the output just so we
311:20 - have our code and the output
311:23 - in the console here
311:32 - all right javascript arrays javascript
311:34 - arrays are like arrays in many languages
311:37 - it's a list of things essentially and
311:40 - the syntax for javascript arrays
311:42 - is
311:44 - something like this square brackets
311:47 - square brackets right here
311:50 - it just defines an empty
311:52 - array
311:53 - and you see here it inherits from the
311:55 - prototype of array which is a built-in
311:59 - data type in javascript
312:02 - and if we want to put things in this
312:04 - array we could say like
312:07 - 1
312:07 - for example now it's an array that
312:09 - contains 1
312:11 - or 0 comma one
312:14 - now it's an array that contains two
312:15 - things
312:16 - zero and one
312:19 - and in the developer tools
312:21 - if you click this little arrow
312:23 - it tells you all right at index zero
312:28 - the entry in the ray is zero and at
312:30 - index one the entry in the the array is
312:33 - one
312:34 - and we could put other types of things
312:36 - in here like a and b for example
312:41 - this really demonstrates the index
312:43 - concept so the index of the array always
312:46 - starts at zero
312:48 - and
312:49 - you can sort of use that to look up
312:51 - things at different
312:53 - indices different places
312:55 - different numbers in the list
312:59 - so let's assign this to a variable then
313:02 - we can do more things with it
313:05 - const array equals this and then we can
313:07 - say console.log
313:09 - array
313:11 - same thing happens
313:13 - now
313:14 - we can access things in this array by
313:17 - using the square bracket notation right
313:19 - after
313:20 - the array and we have to pass it the
313:22 - index like index 0 for example so array
313:26 - at index 0 gives us a
313:30 - and array at index 1
313:32 - gives us b
313:37 - now arrays have a bunch of methods on
313:40 - them one of which is push
313:44 - so we can say array.push
313:47 - c
313:48 - for example
313:50 - and now the array has a b
313:53 - and c
313:54 - on it
313:56 - and i want to point out that unlike
313:58 - other languages where arrays need to all
314:01 - contain the same type of thing
314:03 - javascript is a little more flexible so
314:05 - you could have a mix of types like a b 1
314:09 - and c or a b
314:11 - and an object
314:13 - and c
314:13 - it doesn't really matter so it's just a
314:15 - list of things that could be any type
314:24 - and at this point i believe we have
314:26 - everything we need to write the range
314:29 - function
314:30 - of d3
314:35 - um are there any questions at this point
314:41 - yeah there was an interesting uh
314:43 - an interesting property called length
314:46 - um indeed
314:50 - yeah does that mean an array is an
314:52 - object
314:54 - oh is an array an object
314:56 - well it's a
314:58 - array is one of those
315:00 - types that is built into javascript
315:04 - um is it an object i guess it really
315:07 - depends on what you mean what you can do
315:09 - is say
315:10 - type of
315:12 - array
315:13 - and it will actually tell you object
315:16 - and while we're here i think this is the
315:18 - first time we're seeing typeof so i can
315:20 - just explain a little bit about type of
315:23 - it's useful to figure out what type of
315:26 - thing
315:27 - something is in javascript so if you say
315:29 - type of 0 it says number
315:32 - if you say type of
315:34 - the string a
315:35 - it says string
315:36 - if you say type of
315:38 - an empty object it says object
315:41 - and somewhat surprisingly if you say
315:43 - type of array
315:45 - it also says object
315:47 - so in the javascript language
315:51 - it is actually an object
315:53 - but it's a special
315:56 - kind of object
315:59 - that's an array
316:03 - yeah there are there are some mysteries
316:05 - there to be sure
316:07 - but uh that's that's my understanding of
316:09 - it
316:12 - and yeah because it is an object it can
316:14 - have various properties and methods
316:18 - see if we just say console.log array and
316:20 - we expand it in the devtools here
316:23 - we say we see that the prototype this
316:25 - underscore underscore proto
316:29 - is actually
316:30 - array and on that array prototype
316:35 - it's essentially a class
316:37 - you know from the world of
316:38 - object-oriented programming so what
316:40 - we've got is this instance of this array
316:42 - class so it is an object but it inherits
316:46 - from this prototype which is this
316:47 - built-in array
316:50 - class or interface i don't know really
316:53 - what the correct term is
316:54 - but this is where
316:56 - all of these methods are defined so
316:58 - you've got array.concat
317:01 - every
317:02 - filter find
317:05 - for
317:06 - each join
317:09 - map
317:10 - push reduce
317:13 - i'm just calling out the ones that i
317:14 - actually use on a regular basis
317:17 - sort
317:20 - slice these are all extremely useful
317:23 - things and hey if we're talking about
317:25 - arrays why not dig into some of these
317:34 - but yeah does that answer your question
317:35 - ideal
317:37 - yes thank you yeah that's that's a lot
317:39 - more clever nice thank you
317:48 - whoa
317:54 - all right so at this point let's dig
317:56 - into
317:58 - building that um
318:00 - range function from d3
318:03 - so the idea with the range function is
318:05 - that if you give it a number say 3
318:09 - that's what the length of the array
318:10 - should be
318:11 - and
318:12 - this function should return an array
318:14 - that has integers
318:17 - 0 1 and 2.
318:19 - so to simulate what it would be we can
318:21 - enter 0 1
318:23 - and 2
318:25 - and now we get out this array with 0 1
318:27 - and 2.
318:30 - so we can combine all the knowledge from
318:32 - the the basics that we covered before
318:35 - with for loops and everything
318:37 - to define this function range
318:41 - we can say const range is a function
318:43 - that takes as input i'm going to call it
318:45 - n
318:46 - the number of things
318:50 - and then in this function body
318:53 - we can just define
318:55 - an empty array
318:58 - and then at the end of this function
319:01 - we can return
319:03 - this array
319:06 - and in the middle
319:09 - we're going to want to push
319:10 - some stuff onto this array starting with
319:13 - zero
319:17 - and then
319:18 - to sort of test this out i'm going to
319:20 - say console.log
319:22 - range of let's say five
319:26 - okay this is functioning so far
319:29 - but it's not
319:30 - actually giving us an array with the
319:32 - five things
319:33 - what we want to do
319:34 - is push you know 0 1 2 3
319:38 - 4
319:39 - like this
319:40 - this is the correct result
319:43 - but then if we change the number it's no
319:45 - longer going to be the correct result
319:47 - because we're not even using n
319:49 - inside the function
319:51 - what we can do now is use the for loop
319:54 - construct that we looked at earlier
319:57 - we can say 4
320:01 - let
320:01 - i
320:02 - equals 0
320:05 - i is less than
320:07 - n
320:10 - i plus plus
320:13 - so just to remind you the structure here
320:15 - this thing runs once it defines this
320:18 - variable called i
320:19 - this thing runs every time you go
320:21 - through the loop to check if it should
320:23 - proceed or not
320:24 - and so as long as i is less than m
320:27 - we proceed it executes the code in this
320:29 - body and then this thing executes at the
320:32 - end of whatever's in the body of this
320:35 - for loop and this increments i it's
320:37 - equivalent to saying i equals
320:39 - i plus one
320:42 - or
320:43 - i plus equals one
320:45 - these are all the same thing as
320:47 - i plus plus
320:51 - and i typed it in a comment just to
320:53 - avoid an infinite loop
320:55 - if it were to run
320:57 - while i was typing it
320:59 - so now that we've got this in place
321:02 - we can say array.push inside of that
321:05 - loop
321:06 - and now see we get an array with four
321:08 - zeros
321:10 - and now if we just if we want the
321:12 - correct values all we need to do is pass
321:14 - in i to this array.push
321:20 - and now we've got the correct
321:22 - implementation for range so if we were
321:23 - to pass in 10 it would give us this
321:25 - array with
321:26 - with 10 integers in it
321:29 - this is what d3.range does
321:33 - internally
321:36 - so yeah i'm happy to get to this point
321:38 - this is i think a good example to cement
321:40 - our understanding of
321:41 - arrays for loops and functions
321:47 - any questions about this so far
322:01 - all right and i'll i'll just give a
322:02 - brief tour of a couple other frequently
322:06 - used array functions
322:10 - i'm going to extract this return value
322:13 - to a variable and then we can say my
322:16 - range
322:17 - dot
322:19 - uh well we could say a lot of things
322:21 - there's a lot of methods but you know
322:23 - i'll just talk about the methods that i
322:24 - use most frequently
322:27 - for each
322:28 - is a super nice one
322:32 - it allows you to pass a function that
322:34 - takes as input something i'll call it d
322:37 - just by convention this is a convention
322:39 - from the d3 community to refer to each
322:42 - element in an array as d stands for
322:44 - datum
322:48 - and then we can say console.log d so now
322:51 - it's console.logging
322:53 - each of these things here
322:58 - and by the way this is equivalent
323:02 - to
323:04 - writing a for loop
323:10 - and then
323:10 - accessing
323:12 - my range at index i
323:15 - like this
323:17 - it does the same thing
323:19 - oh i i is less than uh
323:22 - my range.length
323:24 - this is what it's equivalent to
323:27 - so yeah dot for each it's like a
323:28 - functional shorthand for writing this uh
323:31 - verbose
323:33 - for loop
323:36 - and then we've got
323:37 - some other things like uh filter super
323:40 - useful
323:46 - filter takes as input a function that
323:49 - takes us input one of the elements of
323:51 - the array
323:53 - and we could just say is is it equal to
323:56 - three
323:58 - and it will just
323:59 - pass three
324:00 - or we could say like is it is it even
324:04 - and we can check if it's even by saying
324:07 - d
324:08 - percent 2
324:11 - equals 0
324:12 - so this will give us all the even
324:14 - numbers
324:16 - this by the way is the modulo operator
324:19 - it's like
324:21 - it's the remainder like if you were to
324:23 - divide it
324:24 - by the number it gives you the remainder
324:27 - sometimes useful
324:34 - let's just see what are what what are
324:36 - the other methods
324:38 - i think i might stop here for now but
324:41 - if there's anything that i'm a big fan
324:43 - of sort yeah yeah sort
324:47 - sword is huge
324:48 - because then you can because then it
324:50 - comes back when you're doing dom stuff
324:52 - because the order of things in svg is
324:54 - really important for its rendering so i
324:56 - i use sort a lot to sort of get around
324:58 - that
324:59 - for sure
325:02 - so let me
325:03 - here i'm going to add you as a
325:04 - collaborator and in fact let me add
325:06 - everybody here as a collaborator because
325:08 - i want this to be a live sort of jam
325:09 - session kind of a thing
325:11 - we've got a deal here
325:13 - and we've got sriram
325:17 - so i'm going to add all of you
325:19 - and oh let me drop this link to you
325:24 - i'll share it in the
325:27 - slack i suppose
325:30 - and the meat why not
325:36 - so yeah feel free to jump into this
325:38 - as i'm going here
325:41 - but yes sort
325:43 - sort is hugely useful
325:48 - let me give some examples of sort
325:53 - i guess it's hard because your your data
325:55 - is already sort of pre-sorted you made
325:57 - it in an order so
325:59 - it's already sorted so we can build up
326:01 - an array that's not sorted like
326:04 - four three five you know just sort of
326:07 - random numbers here
326:08 - and if we console.log that that's what
326:10 - we get
326:11 - but then
326:13 - if we just say dot sort
326:15 - on that
326:17 - it's sorted all of a sudden
326:20 - so a couple subtle things
326:22 - sword actually mutates the array
326:25 - and
326:26 - it also returns the array so that's why
326:29 - it works here it returns the sorted
326:31 - array
326:34 - so let me just demonstrate the fact that
326:36 - it mutates the array
326:41 - i'll call it sortable
326:46 - sortable is this thing
326:52 - and if we say console.log sortable.sort
326:55 - it does sort
326:58 - but check this out
326:59 - if we just say console.log sortable
327:03 - it's unsorted
327:04 - and if we say sortable.sort
327:07 - as an expression in between it's sorted
327:11 - in the output that means that it
327:13 - actually changes around the stuff in the
327:15 - array it mutates the array
327:17 - so it's not it's not one of these
327:19 - immutable
327:22 - things it does not create a new array it
327:24 - just sorts the things that are there
327:29 - and um i'm not sure how deep we want to
327:32 - get into it but sort accepts a
327:33 - comparator function
327:35 - well yeah i was going to say how do you
327:37 - what if i want to sort it in the other
327:38 - direction
327:39 - right well well if you want to do that
327:41 - then the easiest thing would be to do
327:43 - reverse
327:46 - on the sword
327:49 - so now it's sorted in the other way
327:52 - i'm curious what would happen if we add
327:56 - a new number like 20
328:00 - let's find out
328:09 - interesting yeah oh this is so good
328:11 - thank you i do this is amazing so i
328:14 - think what's happening here is if you
328:16 - just call dot sort
328:19 - maybe it treats everything as a string
328:23 - is that right yeah what is it what is it
328:24 - what is the default sort sort on i guess
328:27 - is the real question
328:31 - yeah i don't know let's see mdn
328:35 - javascript array sort
328:38 - the mdn docs are always the best
328:43 - array.prototype.sort it sorts things in
328:46 - place
328:50 - the default sort order is ascending
328:52 - built up here it is
328:55 - built upon converting the elements into
328:59 - strings and then comparing the sequences
329:02 - of utf-16 code units values
329:05 - cool makes sense totally
329:08 - right very logical
329:13 - so i think we should actually dive into
329:16 - the comparator idea
329:20 - um
329:22 - should be here compare function that's
329:24 - what they call it here
329:26 - compare function it specifies a function
329:28 - that defines the sort order so we can
329:30 - use this if we wanted to sort it by the
329:32 - actual numbers
329:33 - or if we had an array of objects and we
329:35 - wanted to sort by a specific field
329:38 - of those objects we could use this as
329:40 - well
329:41 - so here's what it does
329:45 - it accepts two things the first element
329:47 - and the second element
329:49 - and it returns
329:57 - i'm surprised that it doesn't specify
329:58 - here specifically what this function
330:01 - should return
330:05 - but i believe it should return negative
330:07 - 1
330:08 - 0 or 1.
330:13 - let's see it's weird that it doesn't say
330:14 - this has always been a fuzzy area if
330:16 - like it's always been sort of like an
330:18 - incantation but the
330:20 - set of like it's like
330:22 - if if your first element is less than
330:25 - your second element
330:27 - return negative one or zero depending on
330:30 - how you want it to sort right right yeah
330:31 - exactly exactly
330:33 - so here it is if you scroll down a
330:35 - little it says
330:38 - if a and b are two elements being
330:40 - compared then
330:42 - compare function should return less than
330:45 - zero
330:50 - oh it says
330:52 - it says if compare function
330:55 - returns less than zero then it leaves
330:59 - a and b unchanged in the order
331:03 - if compare functions so that's our
331:04 - negative one
331:06 - yeah
331:08 - that could be negative one yeah yeah if
331:10 - so if you return negative one it leaves
331:12 - them unchanged meaning
331:14 - a is less than b
331:15 - i'm pretty sure got it
331:17 - but yeah i think you're right about it
331:18 - if it returns zero
331:20 - also leave a and b unchanged
331:27 - with respect to each other but sorted
331:30 - with respect to all different elements i
331:32 - don't know this is kind of confusing
331:34 - yeah i don't know what that means i
331:35 - don't know what that means
331:38 - so but if it returns greater than zero
331:42 - also known as one yeah also known as one
331:44 - or any other number greater than zero
331:46 - but yeah one is is the most common uh
331:49 - then it then it sorts yeah that's how
331:51 - i've i've always seen it b before a
331:54 - so let's give it a shot
331:58 - that was really confusing right
332:02 - so i'll just leave a record of this
332:06 - and i'll say
332:08 - it outputs this
332:11 - is the documentation assuming that the
332:14 - elements are numbers
332:16 - what's being compared
332:18 - um
332:24 - well we can do i think we can do
332:25 - whatever we want in it and return a
332:28 - number it is expecting us to return a
332:30 - number we could have like a random
332:31 - number generator doing negative one
332:33 - through one and it would randomly sort
332:36 - you know what i mean
332:38 - yeah
332:39 - so
332:40 - yeah a and b
332:42 - are the elements in in the array and
332:44 - they could be anything
332:46 - what matters is that this compare
332:48 - function returns a number
332:50 - and
332:51 - it's up to the implementer of the
332:53 - compare function how you derive that
332:54 - number
332:58 - so let's try this again let's say
333:02 - sortable.sort
333:06 - and then console.log sortable i'll get
333:08 - rid of this reverse
333:12 - and we pass in a comparator function
333:16 - that takes as input a and b two things
333:21 - and because these are numbers i believe
333:24 - we could implement this pretty simply as
333:26 - like a minus b
333:29 - and now they're sorted
333:34 - sorry because you're just telling it to
333:35 - not treat it as strings basically
333:39 - yeah yeah exactly and and this little
333:42 - expression follows all of those rules
333:46 - for sorting meaning um
333:50 - if b is
333:52 - greater than a
333:54 - a negative number is returned
333:56 - but if a is greater than b
334:01 - then a
334:02 - a positive number is returned
334:06 - so if you did b minus a it would reverse
334:08 - it i believe so let's give it a shot
334:13 - yeah
334:15 - cool
334:16 - that's right
334:18 - and another way to phrase this
334:22 - would be
334:24 - um
334:26 - like is b
334:27 - less than
334:29 - a
334:30 - if so return
334:33 - minus one
334:34 - otherwise return
334:37 - one
334:38 - that works but i think
334:40 - if they're oh yeah that makes a ton of
334:41 - sense
334:42 - [Laughter]
334:44 - i mean this works
334:46 - um
334:48 - and this is often what you see of like
334:50 - if
334:50 - if these are data elements
334:53 - and you want to compare a field you
334:54 - could say like b dot
334:57 - some field
335:01 - ada some
335:03 - field but i mean it doesn't make sense
335:05 - now because we don't actually have that
335:06 - scenario
335:08 - but later we will i guarantee it
335:11 - yeah i'm sorry for sending you down this
335:12 - sort rabbit hole you were about to move
335:14 - on no no it's good it's good this is why
335:16 - i love these interruptions because
335:18 - because like i want to
335:22 - empty my head of the stuff that people
335:25 - are
335:26 - uncertain about and want to know about i
335:27 - just don't know what people need to hear
335:29 - at the moment you know when i'm going
335:31 - through this stuff
335:32 - and so yeah that that's why i i think
335:35 - yeah
335:35 - go ahead go ahead you go ahead
335:37 - i don't think i've ever read the docs
335:39 - for sort like i've just like seen
335:41 - like this pattern and then sort of like
335:43 - hacked it to because it is mildly
335:46 - intuitive a little bit but it's cool to
335:48 - sort of actually see it
335:50 - laid out in detail the way that you have
335:53 - for sure for sure oh thanks and you know
335:56 - i think um if we really want to be like
335:59 - pedantically correct about it if if two
336:02 - numbers are the same this function
336:04 - should return zero i think ideally
336:07 - and so to do that we can say okay is b
336:10 - less than a return negative one
336:12 - otherwise
336:14 - is b
336:15 - greater than a
336:18 - return one but otherwise they're equal
336:21 - and returns zero
336:24 - so i think this is like the ultimately
336:26 - correct way
336:28 - but it's like who wants to come across
336:29 - this and you know yeah you're a madman
336:32 - what is this yeah what is this
336:34 - there's like some insane pursuing
336:36 - scribbling on a wall
336:40 - so
336:43 - d3 to the rescue
336:46 - um
336:46 - turns out
336:50 - there is a d3 utility to help you
336:53 - through this stuff
336:57 - a and b
336:59 - we can re return ascending
337:04 - of a and b
337:07 - and ascending we can import from d3 um
337:12 - and this is actually the same as just
337:14 - passing
337:15 - ascending
337:17 - into sort
337:20 - and d3 also provides a thing called
337:22 - descending
337:24 - so this is what
337:27 - you would typically use
337:29 - in practice
337:31 - and these ascending and descending
337:32 - things from d3 automatic like i think
337:34 - they implement this logic
337:36 - internally but they hide it from you
337:38 - they just make it you know
337:39 - very intuitive easy to use
337:46 - and that's the same as like like you
337:48 - were about to go talk about d3 range
337:50 - right like that's these are all sort of
337:52 - very simple wrappers so you don't have
337:54 - to get into this level i've been spoiled
337:56 - right i only ever use the d3 wrappers i
337:58 - never really write any of this stuff
338:00 - exactly exactly yeah and some of the you
338:02 - know philosophy of
338:04 - this course the way i'm progressing
338:06 - through things is to like
338:08 - to show
338:10 - uh
338:12 - like how it's made like how the sausage
338:13 - is made sort of thing you know like this
338:15 - is how d3 works inside it's not like so
338:18 - crazy mysterious but it's a pain if you
338:21 - wanted to implement it yourself all the
338:22 - time
338:26 - all right i think
338:28 - i think that's it for arrays
338:34 - let me see
338:39 - um
338:40 - we covered filter for each
338:44 - push
338:47 - oh map i gotta talk about map
338:51 - oh yeah gosh map is
338:53 - map is huge map is like the most you
338:56 - know one of the most useful things that
338:59 - i find myself using all the time all the
339:02 - time
339:10 - all right we've got console.log sortable
339:13 - and we get this stuff
339:17 - oh actually
339:22 - let me let me use the other
339:24 - um
339:27 - arrays just so all these sections are
339:28 - like decoupled
339:32 - we've got my range here
339:39 - console.log my range gives us these
339:42 - numbers from 0 to 9.
339:44 - check it out we can use dot map
339:47 - map expects a function it's a lot like
339:50 - for each it goes through each of the
339:51 - elements of the array
339:53 - and if we just write a function that
339:55 - returns
339:56 - each element
339:57 - it doesn't do anything essentially
339:59 - passes things through this function
340:02 - it generates a new array with all the
340:05 - return values
340:07 - so if we say like d times 2 for example
340:11 - now we get all of the original the
340:13 - original numbers but multiplied
340:17 - by two
340:22 - so this is this is super useful i mean
340:24 - you could
340:25 - you could do all sorts of things in here
340:27 - like return an object that says
340:31 - number is d
340:33 - and then now we're talking now we're
340:34 - talking
340:36 - yeah
340:39 - right and then even like
340:40 - double is d times
340:43 - two
340:45 - so you can construct objects
340:48 - in this way
340:52 - using dot map
340:53 - so yeah dot map is it's just super
340:55 - useful you know especially when you have
340:57 - data
340:58 - loaded from like a csv file or something
341:01 - you can
341:02 - uh parse dates for example
341:04 - uh clean up the number of fields that
341:06 - you have all using dot map
341:09 - well for me a lot of my work is finding
341:12 - an example of a visualization that's
341:14 - pretty close to what i want and then i
341:16 - have a data set that's slightly
341:17 - different from that so most of the way
341:19 - of like bridging that gap is just a dot
341:22 - map where i make my data look like the
341:24 - data that the example works on does that
341:26 - make sense totally
341:28 - yeah and dot map can be the bridge from
341:30 - here to there
341:32 - for sure for sure
341:42 - let's see what else
341:44 - reduce
341:45 - reduce yes
341:48 - yes yes yes
341:50 - now reduce that's one of those ones that
341:52 - is like kind of
341:54 - tricky to wrap your head around and you
341:56 - can get through life without using
341:58 - reduce ever
342:00 - however
342:02 - i find that one of the most
342:04 - useful things with reduce
342:08 - is to
342:10 - build up an object
342:13 - where
342:14 - the keys are derived from some array so
342:17 - let me just uh
342:19 - just try reduce
342:22 - console.log myrange
342:25 - reduce
342:28 - reduce
342:30 - accepts two arguments the first is a
342:32 - function
342:33 - that takes as input
342:35 - two things
342:37 - and i can never remember the order let
342:39 - me just consult the documentation
342:53 - reduce looks something like this you
342:55 - define what's called a reducer it takes
342:58 - as input the accumulator and the current
343:00 - value
343:02 - and here's one that just adds them
343:04 - together you could use this for example
343:05 - to sum all the numbers in the array
343:09 - current value here is one of the
343:12 - elements from the array
343:15 - accumulator
343:16 - is the returned value from this function
343:23 - as it goes through
343:25 - but the first time this this is invoked
343:28 - accumulator gets the value that you pass
343:30 - in as the second argument
343:32 - to reduce
343:38 - so let's put this into practice we can
343:40 - say dot reduce
343:42 - accumulator i do like that term and i
343:44 - can use d
343:46 - you know why not
343:49 - so if we say accumulator plus d
343:55 - we get
343:56 - 45.
343:58 - which is the sum
344:00 - of all those numbers
344:02 - and uh you know i'm not sure what it
344:05 - what it uses as the first value because
344:07 - i didn't pass anything
344:09 - but
344:13 - if you pass in zero as the second
344:15 - argument to reduce
344:16 - that's what accumulator gets
344:19 - for the first
344:20 - entry
344:22 - right
344:23 - this is this may be kind of confusing so
344:26 - let me just
344:28 - open it up into a function
344:35 - and say console.log accumulator
344:39 - just to see what this is
344:51 - um
344:52 - looks like i have a syntax error
345:01 - actually i didn't
345:07 - so what this is doing here is it's
345:08 - logging the value of accumulator
345:11 - as the as it progresses through the
345:13 - array
345:15 - so here's what it's doing it's adding
345:18 - 0
345:19 - which we passed in as the second
345:21 - argument to reduce
345:22 - and it's also adding zero the first
345:25 - element of the array so the first time
345:27 - through this returns zero plus zero
345:29 - which is zero
345:31 - that's why it's outputting zero twice
345:33 - and then it's then it's returning zero
345:35 - plus one one coming from the first
345:38 - element of the array
345:40 - and then the next time around
345:43 - accumulator is three
345:45 - because it added one
345:47 - plus
345:48 - two 2 being the next element
345:52 - of the array so to be even more clear
345:54 - here we can say
345:56 - adding
345:59 - accumulator
346:02 - plus
346:05 - d
346:12 - so now we can see that it's adding
346:14 - zero plus zero zero plus one one plus
346:17 - two
346:19 - so one plus two is three and then so the
346:22 - output of adding one plus two
346:24 - is the new the next version of the
346:26 - accumulator then it has three plus three
346:28 - which is six and then it adds four to
346:30 - that which is 10 and then it adds 5 and
346:33 - so on until it gets to 45.
346:37 - so that's reduce
346:39 - in a nutshell
346:44 - and while we're here i do want to show
346:46 - the most common use case that i
346:47 - encounter for reduce
346:49 - oh but first of all are there any
346:51 - questions yet here about reduce
346:55 - yes if if
346:56 - you remove the second argument which is
346:59 - zero
347:00 - does the f
347:02 - does it default to something
347:04 - um
347:06 - am i could it just default to the first
347:08 - value of the element
347:10 - in this case
347:12 - that exactly appears like what it is
347:14 - doing
347:15 - yes
347:19 - yeah it appears to be
347:23 - adding zero plus one
347:25 - in the first time around and it must be
347:28 - getting that from the array
347:32 - yeah yep that makes sense
347:34 - and we can we can be totally sure but
347:36 - just by saying like
347:38 - you know two and three
347:41 - it it does see yeah the first time
347:43 - around it takes the first two elements
347:46 - of the array
347:47 - and adds those together meaning it it
347:49 - takes the first element of the array the
347:52 - the thing at index 0 treats that as
347:54 - accumulator and then takes the thing at
347:55 - index one treats that as d so that that
347:58 - is what happens if you leave out the
348:01 - second argument
348:04 - and actually i wasn't sure of that until
348:06 - i just did this just now so
348:09 - i'm learning too
348:15 - all right i think the last thing we're
348:16 - going to do here with arrays is
348:18 - construct an object
348:20 - from an array
348:21 - and let me show you what i mean
348:25 - oops
348:31 - i'm going to make a thing called entries
348:34 - and in this thing there will be
348:37 - objects
348:40 - and
348:42 - the key
348:44 - will be
348:46 - something
348:46 - like
348:49 - um
348:51 - i don't know just a
348:53 - all right and value
348:55 - will be
348:59 - um
349:03 - fool
349:04 - it's just random stuff that doesn't make
349:05 - any sense
349:08 - and then we have another one where the
349:09 - key is b
349:12 - and the value is
349:13 - bar
349:14 - um just to show the mechanics
349:16 - of all this stuff
349:19 - so now let's say what we want
349:25 - is
349:26 - an object
349:27 - that actually has
349:29 - the key of a
349:31 - and the value of foo
349:33 - like this
349:34 - and then the key of b and the value of
349:36 - bar
349:37 - like this
349:38 - this is our desired result
349:41 - so the challenge is how do you write
349:43 - code that gets from this to this
349:47 - i encounter this all the time
349:50 - and here's how you can do it you can do
349:52 - it with reduce
349:56 - entries
349:58 - dot reduce
350:01 - and the trick is that you start with an
350:04 - empty object so you pass in an empty
350:06 - object as the second argument to dot
350:08 - reduce
350:10 - and then this reducer function takes as
350:12 - input the accumulator
350:15 - and
350:16 - i'll call it d
350:18 - just by convention
350:21 - and
350:22 - in the body of this reducer
350:26 - we ultimately
350:29 - want to return
350:30 - the accumulator
350:32 - i mean so here's the approach i'm going
350:34 - to i'm going to add a property to this
350:36 - object
350:37 - and then return the object
350:39 - so we return
350:43 - accumulator
350:45 - but before we do that
350:48 - we can say accumulator
350:51 - at
350:54 - d dot key
350:56 - equals d dot value
351:00 - and then we got that object that we were
351:02 - trying to get
351:08 - and and by the way i'm not sure i've
351:10 - introduced this syntax
351:13 - yet but if you have
351:15 - an object
351:22 - let's say you have an object you can say
351:24 - object dot
351:27 - a
351:28 - equals
351:29 - foo
351:30 - like this
351:32 - but the there's an equivalent syntax
351:35 - where you could say object at
351:38 - a
351:39 - like this using these square brackets
351:41 - and that's equivalent
351:45 - so now object has a is full like that
351:48 - but anyway yeah this is this is how you
351:51 - can use reduce to accomplish that task
352:06 - oh i see there's a question in the
352:08 - youtube chat
352:10 - here let me pull it over here so you can
352:12 - see it
352:14 - question i deal with
352:15 - two dimensional arrays a lot
352:18 - um is there a way to sort by columns
352:21 - question question question question
352:24 - sure let's do it why not i mean
352:28 - so we've got this
352:30 - entries array let's say we wanted to
352:32 - sort by
352:33 - the key
352:38 - and let's say they're out of order
352:40 - to begin with
352:42 - i think the question is asking how would
352:44 - you sort by a certain field
352:46 - of these objects
352:50 - so if you wanted to do that
352:55 - you could say
352:59 - entries dot sort
353:02 - and pass in a comparator
353:06 - or a compare function rather that takes
353:09 - as input a and b these are objects
353:12 - these are the objects in the array
353:14 - and it can return
353:18 - you know if a dot key
353:20 - is less than b dot key
353:24 - and this will be comparing strings so it
353:26 - would be essentially a
353:27 - is less than b which you can do
353:30 - in javascript that works it sorts by
353:33 - alphanumeric
353:35 - values so you could say if a is less
353:37 - than
353:39 - if a dot key is less than b dot key
353:42 - then return
353:45 - one
353:45 - otherwise return one
353:49 - and
353:50 - that works
353:53 - it sorts by key now abc
353:58 - and if we're using
354:00 - d3
354:02 - we can say entries.sort
354:07 - ascending
354:10 - a dot key and b dot key like this
354:17 - and that
354:18 - would do the same thing if we had d3
354:22 - at our disposal
354:24 - so thanks for that question
354:31 - so i think what i'll do is actually pull
354:33 - in d3 so that we can use this and it'll
354:35 - work
354:37 - um and then i'll take a short break like
354:39 - a 5-10 minute break and then come back
354:41 - and do something creative
354:43 - with d3 selections
354:48 - but are there any other questions at
354:49 - this point
354:56 - all right
354:57 - so i'm going to go about
354:59 - pulling in d3
355:02 - in vishub
355:03 - the most straightforward way
355:05 - of doing this is to use the
355:09 - package.json feature which is relatively
355:12 - new
355:17 - specified dependencies d3
355:20 - at version
355:22 - something let's see what's the latest
355:32 - latest version of d3 is 6.6.2
355:39 - so we use that
355:43 - and now
355:48 - now we can put some javascript in
355:52 - index.js
356:00 - so i'll move this
356:02 - into
356:04 - index.js
356:07 - and now
356:09 - we can say
356:12 - import
356:17 - ascending
356:21 - from d3
356:24 - and now it should run
356:27 - there we go
356:29 - so now
356:30 - this code actually ran and this is how
356:33 - you would
356:34 - sort things by a value with d3
356:40 - all right i think we'll dive in to
356:43 - d3 selections
356:46 - so here's what i'll do i'm going to fork
356:49 - this viz and say
356:53 - d3 selection
357:00 - exploration fork it
357:08 - and i'll add you all as collaborators
357:10 - again
357:22 - i want this to be kind of a jam session
357:33 - all right i'm going to delete everything
357:35 - here
357:46 - and then we can import select
357:49 - from d3
357:54 - the select function lets you
357:56 - [Music]
357:58 - create
357:59 - d3 selections
358:01 - using what's called a selector string
358:03 - where you can select elements that are
358:05 - on the page already
358:08 - for example we can say select body
358:13 - and that is a d3 selection
358:16 - that contains the body element so here's
358:18 - what i've i think i'm going to do
358:20 - i'll create an svg append it to the body
358:24 - give it a width and height and then we
358:27 - can create some array maybe using the
358:29 - range function from d3
358:31 - and then make a bunch of circles based
358:33 - on that array and maybe make the circles
358:35 - move around
358:36 - in different ways
358:41 - selections have a method called append
358:44 - so we could say dot append
358:46 - svg
358:48 - like this
358:49 - and it creates a new selection and
358:51 - returns it and that is the selection of
358:54 - that one svg element
358:57 - at this point if we were to inspect the
358:59 - dom
359:11 - we can see that there is in fact an svg
359:13 - element
359:15 - there
359:16 - in the dom
359:18 - and i'm noticing there's an extra script
359:20 - tag
359:24 - yeah there's an empty script tag we'll
359:25 - just get rid of that
359:36 - we can see that in fact there is an svg
359:39 - element
359:40 - appended to the body right here
359:42 - so
359:43 - to work with svg
359:52 - we need to give this svg element width
359:55 - and height so we can say dot attr
359:58 - to set the attribute of that dom element
360:01 - of width
360:03 - to be
360:06 - width
360:07 - which is a variable
360:09 - that i'll create
360:11 - and i'll derive that from
360:13 - the actual width of the browser
360:18 - so we can say window.enter width and
360:20 - we're also going to want height
360:24 - as window.inner height
360:34 - so what's happening here is it's created
360:35 - a selection of that svg element and then
360:38 - when we call dot attr
360:41 - oh
360:47 - hey felipe has joined us hello
360:50 - hello
360:52 - happy birthday
360:53 - thank you thank you very much
360:56 - well i'm so glad you could make it this
360:57 - time alive you i see you've always been
361:00 - watching
361:01 - first time i was able to i mean i was
361:03 - not able to do the exercise from the
361:05 - last class
361:07 - but i was able to join at least amazing
361:10 - amazing so look
361:13 - i'm going to add you here as a
361:14 - collaborator so if you want to jump in
361:16 - you totally can
361:18 - okay thank you
361:21 - oh
361:23 - yeah it's valid
361:25 - oh there it is
361:26 - yeah there it is nice
361:29 - here you are
361:32 - and i will drop you this link
361:36 - in the hangout chat so you can see it
361:42 - so yeah everybody here feel free to jump
361:44 - into this thing
361:46 - once we get rolling
361:51 - all right so we give this svg a height
361:55 - of height here
361:58 - and we can assign this to a variable
362:00 - because we're going to want to add stuff
362:01 - into this svg
362:04 - so const svg equals
362:06 - this stuff
362:08 - so now when we inspect dom
362:10 - we see that it has width of 960 and
362:13 - height of 500.
362:15 - i also noticed that it's slightly offset
362:17 - from the corner and there are scroll
362:19 - bars
362:20 - this is a very common thing
362:22 - that we can address with a little bit of
362:25 - css
362:29 - so in the head i'm going to say
362:32 - style not style
362:39 - and add some css that says
362:43 - for the body
362:46 - make the margin zero
362:49 - that gets rid of the margin but still
362:51 - for some strange reason there are scroll
362:52 - bars
362:54 - we say overflow
362:57 - is
362:58 - hidden
362:59 - to get rid of those
363:01 - pesky scroll bars
363:04 - now we're good to go
363:11 - all right so here's where i want to have
363:13 - some fun we can we can make a bunch of
363:15 - circles and this is our first
363:17 - four a into d3 data joins
363:22 - and it looks something like this
363:23 - svg.select
363:25 - all
363:27 - circle
363:29 - this selects
363:31 - it makes d3 selection that contains all
363:33 - circles that exist
363:35 - within that svg
363:37 - and at this time there are none
363:39 - but that's an important piece of
363:41 - information for the internals of d3
363:43 - because
363:45 - once we say
363:46 - data and we pass in
363:50 - data
363:53 - and i'll just define data to be range
363:56 - of let's say 15 we're going to make 15
363:59 - circles
364:00 - and we can import range from d3
364:03 - like this
364:06 - now that we have
364:08 - called
364:09 - dot data
364:10 - we have created
364:12 - what's known as a d3 data join
364:15 - and on this data join
364:17 - there are three parts enter update and
364:21 - exit and i have a slide about this
364:34 - with a d3 data join
364:38 - there is an array
364:40 - and i'm calling that data here and then
364:42 - there are dom elements
364:45 - which i'm just putting dom calling dom
364:47 - here on this diagram for example it's
364:49 - all of those
364:51 - circles that don't exist yet
364:53 - in the case
364:55 - that
364:56 - there is a data element you know in that
364:59 - array that does not correspond to any
365:02 - existing dom element that's what's known
365:04 - as the enter selection
365:08 - we can tap into the enter selection to
365:10 - append new circles
365:13 - for all of the
365:15 - data elements
365:17 - for which there are no circles yet
365:20 - so let's do that
365:35 - to tap into the enter selection we can
365:37 - say dot
365:38 - enter
365:41 - like this
365:45 - that gives us the enter
365:47 - selection and then on there we can say
365:50 - dot append
365:52 - circle
365:56 - and what this whole expression does
366:01 - is it creates a data join
366:04 - it accesses the enter selection of that
366:07 - data join and then on there it appends
366:10 - a circle
366:11 - so if we inspect the dom now
366:16 - we can see that inside of this svg there
366:18 - are many circles
366:20 - 15
366:21 - to be precise
366:24 - but they don't have any attributes so
366:26 - let's let's work on setting setting up
366:28 - the circle so that we can see them
366:32 - we can call dot attr on this selection
366:36 - that contains these newly appended
366:38 - circles
366:39 - and whatever we put in here will be
366:41 - applied to all of the circles so we can
366:45 - say attr r is where i'm going to start
366:48 - specify the radius
366:49 - to be maybe a hundred
366:51 - and
366:53 - now we get some circles to show up but
366:55 - they're all on top of each other they're
366:57 - all the same place so to spread them out
367:01 - in the x direction
367:03 - i'm going to say dot attr
367:05 - cx which is the center x of the circle
367:11 - and i could say like i don't know 400
367:14 - it puts them all in the middle but
367:15 - they're still all
367:17 - overlapping
367:18 - to make it so that they're not
367:20 - overlapping we can pass a function here
367:22 - as the second argument
367:25 - that function takes as input what i'm
367:27 - going to call d one of the entries of
367:30 - this array and if we just return d
367:34 - we can see that they're slightly spread
367:36 - out
367:38 - because it's setting the pixel
367:39 - coordinate of the center of the circle
367:41 - to be those integers
367:44 - but they're only varying by one pixel so
367:46 - they're not that spread out if we wanted
367:48 - to make them
367:49 - very more we could multiply them let's
367:52 - say multiply by a hundred
367:55 - now they spread out across the screen
367:57 - because for each of these numbers
367:59 - it's multiplying it by 100 and we're
368:01 - getting this x coordinate that goes all
368:04 - the way across the screen
368:06 - i'm just going to tweak these
368:08 - variables here
368:09 - or not variables tweak these values so
368:12 - that we can see some of these circles
368:13 - better
368:16 - and i kind of want to see where it ends
368:19 - see there we now we can see
368:21 - there are 15 circles here
368:24 - and i don't really like how it it's
368:26 - touching the corner so i'm just going to
368:28 - add
368:29 - some number like 20
368:31 - or how about 50.
368:35 - okay now they're nicely spread out in
368:37 - the x direction
368:39 - we can do something similar for the y
368:42 - direction so c y
368:44 - like this so now it's diagonal
368:49 - if we just return
368:51 - let's say
368:53 - 250
368:55 - that puts them right in the middle
368:58 - and
369:00 - here's where i want to do something
369:03 - fun
369:04 - i'm going to use the sine function for
369:06 - math
369:08 - so we say math math.sin
369:12 - this is a built-in function in the
369:14 - browser
369:15 - and it's the sine
369:17 - function from trigonometry
369:19 - so if we say sine of d
369:22 - it's sort of
369:23 - varies a tiny bit just because the
369:25 - output of sine varies from negative one
369:27 - to one if we want to see that variance
369:30 - we have to multiply it
369:32 - so if i multiply it by say
369:34 - 200
369:36 - we can see that now they're all spread
369:38 - out
369:43 - which is you know not ideal it's sort of
369:46 - the sine wave is going too fast and to
369:48 - slow it down we can
369:50 - multiply d by some value like 0.5
369:55 - and now we actually see that it is in
369:57 - fact
369:58 - a sine wave here
370:01 - and i'll just tweak these to
370:04 - you know make it
370:06 - a little bit more
370:08 - uh if if i want to
370:12 - to access the value of cx in the cy
370:17 - how can i do it
370:21 - access the value of cx in cy
370:24 - well the way that i would do that is
370:26 - extract this into a function
370:30 - it's usually not advisable to actually
370:32 - read the properties out of the dom
370:35 - that were already set but what you could
370:38 - do is recompute it
370:40 - and so
370:42 - i could do something like this say const
370:45 - x equals this function and then we can
370:48 - say
370:50 - uh x of d to get that value
370:54 - to c but it would be recomputing it
370:57 - essentially
370:58 - so yeah i was going to say i i
371:01 - i'm tempted to um
371:04 - ask you to turn
371:05 - like when you make data like i would do
371:08 - all of the cool stuff you're doing in a
371:10 - map or like making a new object and then
371:13 - just reference those values when i'm
371:15 - rendering it right
371:17 - love it
371:18 - love it and this this is a great great
371:20 - segue into the discussion about how do
371:22 - you decouple
371:27 - the lodge oh yeah i saw that someone in
371:29 - the youtube chat was asking about like
371:30 - how to separate your your concerns of
371:33 - like processing data versus visualizing
371:35 - it and all that
371:37 - yeah exactly separate the concerns of
371:40 - data from charting yeah another question
371:42 - here from
371:44 - lilac foonish can you please talk about
371:46 - organizing the project top down how to
371:49 - create modules for reusable yeah i'm
371:51 - going to get to all that later but what
371:53 - we can talk about now is this separation
371:55 - of concern between
371:57 - uh data manipulation
371:59 - and
372:00 - charting uh which is you know
372:02 - essentially rendering or dom
372:04 - manipulation
372:05 - right because right now you're sort of
372:06 - you're manipulating it and as you
372:08 - visualize it you're changing it and then
372:10 - rendering those values whereas you might
372:12 - want to like do a
372:14 - making a visualization data middle step
372:17 - that sort of takes your source data and
372:19 - makes it into a format that's ready for
372:21 - visualization and then the visualization
372:23 - side you just grab exactly what you need
372:25 - exactly exactly right now it's tightly
372:27 - coupled this rendering logic is
372:29 - essentially too smart there's there's
372:31 - all this
372:32 - data processing logic
372:34 - embedded in here with the rendering code
372:35 - and this is exactly the pattern that
372:37 - makes it really tough to port things
372:40 - from d3 to other frameworks like react
372:43 - or vue or angular well and also to get
372:46 - the value of cx right so if it's
372:48 - calculated on the visualization side
372:50 - your other visualization parts can't
372:52 - access that right like they have to
372:54 - recompute it but if you do it in the in
372:56 - the viz processing step then any step of
372:59 - the way you can process all those cool
373:00 - values and work with them
373:03 - exactly yeah that's exactly right you
373:05 - wouldn't have to recompute it you could
373:06 - just compute it once and then access it
373:08 - so let's do that
373:10 - the way we would do that is to use dot
373:13 - map right here
373:15 - and so that can take as input d and it
373:17 - can return
373:20 - an object
373:22 - and on that object
373:24 - we can define properties
373:26 - x and y
373:28 - i think this is how i would like to do
373:29 - it
373:30 - and
373:31 - x i can just move this logic over here
373:34 - and say x is this
373:37 - and it's going to work because d is the
373:38 - same
373:40 - and then i can take this logic here for
373:42 - y
373:43 - and move it over here
373:47 - and so now we're constructing
373:49 - the data elements that we can just
373:51 - directly visualize no need to have any
373:53 - complicated logic
373:55 - down here with the d3 selections
373:58 - we can just simply access
374:00 - d dot x and d dot y like this
374:05 - now felipe
374:07 - to answer your question
374:09 - we could just access it like this d dot
374:11 - x
374:12 - in the
374:13 - in the function that computes c y
374:16 - if we wanted to
374:18 - for example if we just use it it would
374:20 - be a diagonal
374:27 - yeah i love it
374:29 - you could do also cool stuff like you
374:30 - could get the extent of your cx and see
374:33 - why like if you wanted to make a light
374:35 - to dark scale for how where they were in
374:38 - the sine wave you know what i mean right
374:40 - yeah for sure
374:42 - for sure we could do something like um
374:47 - yeah so
374:50 - here's here's a place where i want to
374:51 - get to i want to i want to get this
374:52 - thing to move
374:55 - and then we open it up for all sorts of
374:57 - creative directions
374:58 - and so
375:01 - here's what i'm thinking
375:05 - we we can use this construct called
375:07 - request animation frame
375:11 - um
375:12 - well let me sort of ease into this
375:15 - we want to animate it
375:17 - and
375:19 - one construct that's available to us in
375:21 - javascript is set interval
375:25 - and set interval takes as input a
375:27 - function
375:29 - and an interval in milliseconds so if i
375:31 - say
375:32 - 1000 that's one second so every one
375:35 - second
375:36 - it would
375:40 - re-recompute this stuff
375:42 - and i think what i'll do is i'll just
375:44 - move this entire logic
375:47 - into here
375:50 - and so now it's going to
375:53 - append these circles every time
375:56 - but i want to introduce the notion of
375:58 - time
375:59 - so let's say let t equal 0 t is going to
376:02 - be our time
376:05 - and every time we go through this we can
376:06 - say t equals
376:10 - t plus
376:12 - let's say one
376:15 - and then in our sine wave calculation we
376:18 - can say plus t like this
376:22 - so now
376:23 - every second
376:26 - it should
376:28 - work
376:30 - but it's not
376:33 - i think you don't need to like call set
376:35 - interval again or wrap it all in a
376:37 - function or something like that
376:39 - well i think what's happening here
376:42 - is that
376:43 - the enter selection is only triggering
376:46 - on the first run
376:48 - [Music]
376:52 - back to our
376:56 - back to our diagram here
376:58 - the enter selection which we're using to
377:01 - set all these properties only triggers
377:03 - in the case where
377:05 - there are no corresponding
377:08 - dom elements for your data elements
377:10 - but what's happening is
377:12 - that is happening the first time that
377:15 - that function runs but one second later
377:17 - when that function runs again
377:19 - actually what we need to work with is
377:21 - the update
377:22 - selection
377:24 - and that's the case where
377:25 - for each data element there already is a
377:28 - dom element and all we want to do is
377:30 - change it we don't need to end we don't
377:32 - need to append new ones again
377:35 - so let's try that let's work with update
377:44 - okay here's what we can do
377:47 - we can say const circles
377:50 - equals
377:52 - and we can define it to be this data
377:55 - join here
377:58 - right
378:00 - so it will select all circle dot data
378:03 - data this is the d3 data join
378:07 - and then we can say circles
378:10 - dot enter
378:12 - dot append circle
378:15 - and this is only going to happen the
378:17 - first time through
378:19 - right so all we want all we really want
378:20 - to do is create the circles
378:23 - um and i suppose we could set the radius
378:25 - here as well because it's not going to
378:26 - change over time
378:33 - and then
378:34 - circles
378:36 - actually contains that update part
378:38 - of the data join so we could say circles
378:42 - dot attr cx and cy like this
378:52 - but notice what happens
378:57 - it actually works so now it's it's
379:00 - animating
379:02 - which is cool which is where i want it
379:03 - to get to let me just tweak it so that
379:05 - it animates in a smoother way
379:07 - so now it's like every tenth of a second
379:11 - and we can say um
379:14 - t equals t plus 0.1 to make it move more
379:17 - slowly
379:18 - so now you can see really what it's
379:21 - what it's doing here
379:24 - however this is super fun right right
379:27 - but there's like no now that you have
379:29 - this there's so many ways that you could
379:30 - just
379:32 - add cool stuff to it exactly yeah there
379:34 - is it's it's going to be so
379:37 - so intense
379:38 - but before we get into that what i want
379:40 - to what i want to highlight
379:43 - is that
379:44 - check it out when this runs
379:46 - let me set this delay to like
379:48 - five seconds
379:50 - then we can see the first time it runs
379:55 - boom see all those little circles there
379:56 - they're in the corner the circles are
379:58 - just in the corner on the first run and
380:00 - then on the second run they get
380:02 - positioned
380:03 - that's because the first time through
380:06 - this whole thing
380:16 - the update selection is empty there's
380:19 - nothing there
380:21 - there are no circles to update
380:23 - enter only triggers so here the the
380:26 - challenge here is that what we want to
380:28 - do is we want to set all the coordinates
380:30 - of all the circles
380:32 - the first time
380:34 - on the enter selection and also on
380:37 - subsequent times using the update
380:39 - selection
380:41 - and
380:43 - so how do we do that let's get back into
380:45 - the code
380:49 - one option here
380:51 - is that we could duplicate this logic
380:54 - right we could set the values for cx and
380:58 - see why
381:00 - on the enter selection
381:03 - so it just appears
381:04 - immediately correctly
381:07 - and then the next time around it
381:08 - increments just a little bit
381:10 - however this is
381:12 - duplicated logic i mean we want to avoid
381:15 - duplicated logic at all costs because i
381:17 - mean if you wanted to change in one
381:18 - place you'd have to change it someplace
381:19 - else
381:22 - so as a best practice we should aim to
381:25 - avoid this sort of duplicated logic
381:27 - and this is where
381:30 - merge
381:31 - comes in
381:33 - see ideally we could just
381:36 - have this logic once
381:38 - applied to
381:40 - something that
381:42 - that will be the enter selection the
381:44 - first time and it will be the update
381:46 - selection on subsequent times and here's
381:49 - how we get to that thing
381:53 - let me
381:54 - assign enter to be
381:56 - a variable
382:00 - so now we have the enter selection
382:02 - defined here as circles enter and we
382:04 - have the update selection defined as
382:07 - circles
382:09 - so what we want to do is
382:13 - merge those two together
382:17 - so we can say circles dot merge
382:21 - circles enter
382:22 - like this and it creates a brand new
382:24 - selection
382:25 - that
382:26 - merges those two together it's like
382:28 - both of them
382:31 - meaning the first time around that
382:32 - selection resolves to the enter
382:35 - selection with all the brand new circles
382:37 - but on subsequent times
382:40 - it
382:42 - um
382:47 - oh i'm just confused at what's happening
382:50 - sorry i i hacked i was playing around
382:52 - with some svg transitions i wasn't sure
382:54 - if it would take effect right away it
382:56 - did it did and i'm like why are those
382:58 - circles moving a tiny little bit sorry
383:00 - that's so cool
383:03 - oh it's cool it's cool uh but you know
383:06 - this is this is where i wanted to get to
383:08 - just to explain this this pattern with
383:10 - dot merge
383:12 - which is one of the most confusing
383:14 - aspects of d3 so if we use circles.merge
383:16 - circlecenter the first time around it's
383:18 - going to be the enter selection with all
383:20 - the brand new circles and we're going to
383:22 - apply cx and cy to those and on the
383:25 - second and subsequent runs it's going to
383:27 - resolve to the circles from the update
383:30 - selection
383:32 - and in recent times i believe it was d3
383:35 - version 6.
383:38 - there's a new
383:41 - shorthand
383:42 - that you can use
383:44 - to do this exact same thing
383:47 - which is dot join
383:51 - so let me just i'll keep this as it is
383:54 - comment it out just for reference
383:58 - and with the new api
384:01 - you can say
384:03 - right here dot
384:04 - join circle
384:08 - and that actually gives you the merged
384:10 - enter and update selection
384:14 - and on there
384:17 - is where we can set all of the
384:19 - attributes
384:23 - so this is sort of a simpler way
384:25 - to do it
384:28 - and it accomplishes the same thing
384:33 - i mean it would it would actually be
384:34 - equivalent to defining r on the merged
384:37 - enter an update selection
384:40 - so it's assigning r
384:42 - unnecessarily but you know
384:45 - maybe that's
384:46 - fine all right
384:49 - so now we can start really messing
384:51 - around with this
384:52 - uh making the animation go faster and
384:54 - faster
384:55 - ideally it would be 16
384:59 - milliseconds which is uh at 60 frames a
385:02 - second so like 1000 divided by 60
385:06 - should give us animation at 60 frames a
385:08 - second
385:09 - and then we can slow down
385:12 - this stuff
385:18 - so yeah i mean we just we talked about a
385:20 - lot of things any questions or
385:22 - discussions at this point
385:34 - oh i see
385:38 - i see there's a question
385:40 - what is the difference between merge and
385:42 - join
385:46 - what is the difference between merge and
385:48 - join so
385:51 - merge
385:55 - is a method on a selection where you can
385:58 - pass in another selection
386:01 - and it will merge them together it's
386:03 - essentially a set
386:05 - union
386:06 - you can think of it as a set union
386:10 - that's what merge does and the most
386:12 - common use case is to merge together the
386:15 - enter and the update selection
386:18 - uh
386:18 - for rendering a bunch of things
386:22 - that's what merge does
386:26 - join on the other hand
386:29 - is sort of a magical
386:32 - shorthand
386:34 - for this entire pattern
386:38 - so it actually does a bunch of stuff
386:40 - internally
386:42 - what join does internally
386:44 - is it creates
386:46 - the enter selection
386:48 - using this tag
386:51 - um
386:52 - so it's what it actually does is it's
386:55 - equivalent to
387:01 - this up here
387:03 - we pass in the tag name to dot join and
387:06 - internally it says okay
387:09 - on this data join we will create the
387:10 - enter selection and we will append
387:13 - tags of this type it does that
387:15 - internally it has this exact logic
387:18 - internally
387:19 - and it also
387:21 - returns
387:22 - the merged enter and update selection
387:26 - so what we get as a return value out of
387:28 - join
387:31 - is
387:31 - essentially the result from merge which
387:34 - uses internally to merge together the
387:36 - enter and update selections
387:38 - and so then
387:40 - once we have that
387:42 - we can set all these attributes on it
387:46 - and i believe join
387:48 - also removes elements
387:50 - that are in the exit selection
387:54 - so it's a shorthand for the entire
387:56 - pattern which is known as the general
387:58 - update pattern
388:04 - yeah and actually i would love to
388:07 - to demonstrate that
388:08 - so i think i'll i think i'll go for that
388:11 - um we're defining a range of 15 every
388:14 - time
388:15 - but what if that number were different
388:18 - so i'm trying to get get us to a case
388:20 - where
388:21 - where there are things exiting the scene
388:23 - where at a certain point there are fewer
388:25 - data elements than dom elements
388:29 - so i'm going to go back to
388:30 - this
388:34 - the long form
388:36 - using dot merge
388:39 - and then
388:40 - i'll define this number as n
388:42 - like the number of circles
388:47 - so if i set it to say 14
388:51 - it's fixed but what i'm going to do here
388:53 - is i'm going to set it to a value that
388:55 - changes over time so let's say 10
388:58 - oops
389:01 - i'll say 10 plus math dot sine
389:05 - of
389:09 - time
389:11 - times
389:12 - 5. so now it should vary
389:15 - between
389:17 - 5 and 15
389:19 - and notice the effect that it has on the
389:22 - animation
389:26 - over time
389:28 - it is sort of disconnecting from those
389:30 - circles
389:32 - but it's leaving those circles there on
389:34 - the page
389:35 - this is where the exit selection comes
389:38 - into play
389:46 - the exit selection
389:48 - is the case where
389:51 - there are dom elements sort of hanging
389:53 - out in the dom
389:55 - from some past events that no longer
389:58 - have any data elements associated to
390:00 - them
390:02 - and the most common thing to do with the
390:04 - exit selection is just to remove those
390:07 - things
390:08 - so let's try that
390:15 - to access the exit selection
390:17 - from the data join we can say
390:19 - circles.exit
390:22 - dot remove
390:24 - to remove all of those circles
390:26 - so now you can see that the circles are
390:28 - added and then as that number gets
390:30 - decreased the circles are actually
390:32 - removed
390:33 - from the dom
390:35 - and this
390:36 - is also done sort of automatically for
390:39 - you
390:40 - when you use this dot join method
390:44 - so as it decreases
390:46 - boom see those circles are removed
390:48 - so that's what dot join is all about
391:05 - so i think i'll fork this just to sort
391:07 - of save
391:08 - the state of everything but then i'll go
391:10 - back to this one where folks have been
391:12 - added as collaborators and we can sort
391:14 - of get a little creative here
391:17 - and uh
391:18 - make something cool but yeah what do you
391:21 - all think
391:22 - so far i mean i hope this is
391:25 - hope this is a clear
391:27 - explanation of d3 data joins
391:33 - yes it's um so this uh it sounds like d3
391:37 - is automatically
391:38 - matching
391:39 - every
391:40 - data point with every
391:43 - circle in this case it's it knows which
391:45 - data point belongs to which circle
391:48 - that's right
391:51 - yep that's right
391:55 - i believe internally d3 may actually
391:58 - store
392:00 - the data values on the dom elements
392:03 - which are also javascript objects which
392:05 - you can do which is kind of a
392:09 - um
392:11 - a tricky thing if you get into doing it
392:13 - yourself but
392:14 - yeah i believe what d3 does is when it
392:18 - enters
392:20 - i mean when it appends new elements as
392:22 - part of the enter selection i believe it
392:24 - actually associates
392:26 - the data values
392:27 - on those dom nodes for future use
392:30 - i may be wrong you'd have to study the
392:32 - d3 source code
392:34 - but
392:35 - yes essentially it does associate the
392:37 - data elements to the dom elements
392:40 - and so it knows
392:42 - once you create the data join you select
392:44 - all the circles that are there on the
392:45 - page you tell it what data you want to
392:47 - use
392:48 - it computes that venn diagram internally
392:53 - by sort of inspecting those two things
392:55 - comparing them
392:56 - somehow
392:57 - that's how it works
393:02 - yeah sounds that's fantastic
393:11 - current what is this particular
393:13 - programming pattern called where you
393:14 - just join methods together like this
393:18 - oh this is called method chaining
393:21 - yeah method method
393:23 - it's a very uh jquery like thing right
393:26 - was jquery the first kind of language or
393:28 - is this just a common programming
393:29 - pattern
393:31 - you may be right that jquery was the
393:33 - first one i haven't used jquery in so
393:35 - many years
393:36 - i don't even know i don't even remember
393:39 - what it looks like to use it
393:44 - but yeah it does have
393:46 - perhaps this the same method chaining
393:50 - idea where you can say
393:52 - dot something
393:53 - and then that returns the same thing
393:56 - that you invoked it on and so you could
393:58 - chain more and more methods
394:10 - and this still uh this still
394:13 - separates the two concerns
394:16 - one for
394:17 - data processing and then
394:20 - one for
394:21 - displaying it
394:23 - this program yes i would say it does um
394:27 - because
394:28 - we're just using vanilla javascript to
394:30 - produce this data
394:32 - and then in the rendering logic it is
394:34 - just accessing those properties it's not
394:36 - computing anything from those properties
394:39 - i mean if we if we wanted to go all out
394:41 - we could we could associate the radius
394:44 - to these values as well
394:46 - and we could say
394:48 - you know axis d dot r and we could
394:50 - compute that as well
394:54 - and now that we've done this we can
394:57 - you know vary
394:58 - vary the radius as well
395:01 - which could be cool
395:05 - to that question some part of me wants
395:07 - to go like because you basically have
395:09 - two functions here right you have your
395:10 - like make data and you have your vis
395:12 - data you could easily just make this set
395:15 - interval call those two functions right
395:18 - yes
395:22 - yeah you totally could you could you
395:24 - could abstract this
395:25 - into a function
395:26 - and you could abstract this into a
395:28 - function
395:30 - yeah that would make for really clean
395:33 - readable code
395:37 - we could do it shall we
395:40 - yeah do you want to do you want to i'll
395:42 - do you make data and you do this data
395:44 - sounds good
395:52 - then you just need the number it's like
395:57 - you just use n i guess i suppose t is
396:01 - what you would need
396:03 - or no yes i like that yeah n
396:06 - or n
396:08 - t is is used inside of there yeah so you
396:10 - would need it yeah exactly
396:12 - all right
396:32 - does that work did i break everything
396:36 - let's take a look
396:37 - probably huh
396:39 - oh yes the return is critical it's
396:42 - pretty important
396:43 - nice it works
396:46 - sweet
396:47 - yeah now now this is a nice compact
396:50 - little thing that says
396:52 - we compute n we call make data with n
396:54 - and t
396:55 - pass that into viz data
396:59 - yeah and we could even conceivably
397:02 - make it even smaller
397:04 - but i kind of like explicitly saying all
397:06 - right this is our data we're gonna pass
397:08 - it in
397:10 - yeah totally totally this is a great way
397:12 - to decouple
397:13 - these two concerns
397:15 - and these could even be refactored into
397:17 - modules i mean that's something that
397:20 - we could do as well
397:24 - but i don't know if it's worth it
397:34 - actually why not i don't think we've
397:36 - discussed modules yet at all
397:39 - right yeah i'd like to see that that
397:41 - would be really cool
397:42 - yeah let's do it
397:45 - so i'm going to make a new file ej you
397:47 - want to do it at the same time again you
397:49 - want to do make data and all this data
397:51 - yeah that sounds good
397:53 - so i'll make a new file called
397:54 - visdata.js
397:59 - and then i'm just going to grab that
398:01 - stuff inside that function
398:04 - and paste it into that file
398:09 - and in order to expose it to the outside
398:11 - world we need to say export
398:15 - like this
398:16 - now we get what's called a named export
398:19 - from this module
398:21 - and then in index.js i could say import
398:27 - this data from
398:30 - dot slash
398:31 - vis data that tells it to look for a
398:33 - file
398:35 - locally
398:37 - so this is es6
398:39 - modules
398:42 - super super useful way to break down
398:44 - code into multiple files and scale a
398:47 - code base
398:49 - super due super duper useful
399:00 - so
399:00 - you're all set with make data yeah yeah
399:02 - while i'm here i'll i'll import that to
399:04 - make data
399:06 - from dot slash make data
399:11 - and
399:13 - let's see does it work oh range is not
399:16 - defined and make data
399:18 - nice so we just need to move that import
399:20 - over i'll do it
399:23 - we need to import range in that module
399:27 - got it
399:29 - and then
399:31 - i don't believe we need range in index
399:34 - dot js
399:37 - svg is not defined it says
399:40 - ah
399:43 - yeah yeah yeah so this is my bed uh
399:46 - i i didn't pass it into vis data so this
399:49 - data should take as input the selection
399:51 - svg
399:53 - and the data so the x uh
399:56 - svg can be the first argument
399:58 - and now it's working all right
400:02 - excellent so while we're here i just
400:04 - want to say
400:06 - once you abstract things into a function
400:07 - like this it's sort of a best practice
400:09 - to rename this to be like
400:12 - selection or at least this is my
400:13 - personal preference
400:15 - and i'm realizing we're not using the
400:17 - circles variable so we can just get rid
400:19 - of it
400:22 - and this still works as well the idea is
400:24 - that if you wanted to you know call this
400:26 - on a group element it would and the
400:28 - variable name would still make sense
400:32 - and last but not least i do love to use
400:34 - selection.call when i can so we can say
400:37 - svg.call
400:40 - this data
400:48 - and data like this this is the d3
400:51 - invocation pattern on selections
400:56 - it just takes whatever arguments you
400:57 - pass
401:01 - and
401:02 - you know passes them as arguments to
401:04 - this function these two lines are
401:05 - equivalent
401:08 - all right
401:14 - so the uh the svg object is the
401:17 - first argument being sent
401:19 - to the
401:20 - first of the argument to call
401:23 - correct
401:24 - is that how it works okay yeah that's
401:25 - how it works when you when you when you
401:27 - use selection.call it takes as input
401:31 - the first argument which is a function
401:34 - and that function should expect
401:37 - the selection that is called on as the
401:39 - as its first argument
401:41 - and then whatever other arguments you
401:43 - pass get sort of spread out as the
401:46 - arguments
401:47 - to that other function
401:49 - right yeah
401:52 - i mean this in this case it really
401:53 - doesn't matter which which way we we do
401:55 - it
401:57 - but i just kind of like to use dot call
401:59 - when we can
402:01 - is dot call a d3 thing or oh yeah
402:05 - something that
402:06 - okay
402:07 - yeah yeah it's a specific method on d3
402:09 - selections only it's a d3 thing yep
402:14 - it's useful for chaining because then
402:16 - you could call
402:18 - you know multiple things if you wanted
402:19 - to
402:20 - but we don't have that scenario here
402:25 - all right i think i should wrap it up at
402:26 - this point
402:28 - um
402:32 - oh where'd my slides go
402:42 - okay i'd like to leave you all with uh
402:45 - an exercise all of you who are viewing
402:47 - follow me along this this whole series
402:50 - four can modify what we created today
402:53 - and just make something super duper cool
402:55 - you know change the sine wave and like
402:57 - maybe maybe set the fill color based on
403:00 - sign of time or something like that
403:03 - and just see
403:04 - see what you can come up with
403:06 - as an alternative exercise more specific
403:09 - and targeted
403:10 - see if you can add lines between these
403:12 - circles
403:14 - and to do that you could use line
403:16 - elements
403:17 - or you could use a path element
403:19 - or you could use a polygon element
403:21 - any of these things
403:23 - and please once you do this
403:25 - submit it in the hub forum
403:28 - on this episode 5
403:31 - topic here
403:36 - welcome everyone to episode 6 of get it
403:39 - right in black and white where we'll
403:41 - discuss javascript modules
403:44 - and build tools
403:52 - i often get asked the question how do
403:54 - you work outside
403:56 - vishub
403:58 - every time i've taught this course you
404:00 - know people are happy generally using
404:02 - vis-hub to learn how to code
404:04 - it's great because you can start coding
404:06 - right away
404:07 - but um when folks start to export the
404:11 - stuff out of his hub they're confronted
404:13 - with this new universe of stuff like npm
404:17 - package.json
404:18 - roll up
404:20 - building a bundle.js
404:22 - and then including it in the page and
404:24 - then having to serve the files locally
404:26 - within http server
404:28 - so all of this stuff is what i want to
404:30 - get into today
404:32 - today's episode is dedicated to
404:35 - answering this question
404:37 - thoroughly
404:41 - what we'll cover today i will start with
404:43 - reviewing last week's uh exercise
404:45 - submissions as usual
404:48 - and then we'll get into this uh content
404:51 - starting from scratch really how you
404:53 - know how to include javascript in html
404:56 - various ways to do this
404:58 - um we'll talk about es6 modules
405:01 - we'll talk about rollup how to use
405:03 - rollup how to configure rollup i think
405:06 - i'll use a rollup starter project
405:09 - webpack as well
405:12 - and perhaps some other things around
405:14 - webpack like
405:16 - create react app
405:19 - if you all could mute yourselves it'd be
405:21 - great thanks
405:26 - webpack and things around webpack
405:29 - um and also
405:31 - using github because if you're not using
405:34 - vishub you need to you know store the
405:36 - code somewhere store the revisions
405:38 - and so i think i'll walk through also
405:40 - using github creating a github
405:42 - repository
405:43 - putting the code into the github
405:45 - repository
405:47 - and maybe even hosting it with github
405:49 - pages
405:50 - if we have time
405:52 - so that's what we'll cover today that's
405:53 - the plan
406:00 - let me pull up next week's last week's
406:03 - exercises here
406:17 - all right here's
406:18 - last week's
406:20 - uh forum
406:22 - post
406:23 - let's see what we've got this is so cool
406:25 - double harmonic look at this
406:30 - it is a double pendulum
406:33 - inspired by
406:35 - sisyphus table
406:38 - not sure what that is but
406:39 - sounds cool
406:44 - beautiful stuff very mesmerizing and it
406:46 - creates something
406:49 - most worthy of being
406:51 - printed out
406:52 - on a canvas or something
406:56 - no there is a lightest version of it on
406:58 - the home page of wheeze up oh yeah
407:00 - yeah it's cool
407:04 - oh wow he's got a lot of stuff going on
407:06 - here oh my gosh look at this
407:10 - black and white version
407:13 - sweet
407:18 - and yeah it looks like spears in there
407:21 - this one oh look at that
407:27 - that's pretty wild
407:37 - wow very cool
407:39 - very cool
407:42 - yeah w gloss
407:44 - nice work w gloss
407:53 - let's see what else have we got
407:57 - oh there was a question
407:58 - actually like
408:00 - oh i just cannot get this running
408:01 - locally which is like okay yes now it's
408:04 - time i have to talk about how to do that
408:06 - so
408:07 - we'll address all of this stuff today
408:09 - for sure
408:13 - oh some new stuff i haven't even seen
408:14 - yet look at this one from nita
408:17 - whoa
408:23 - very cool
408:25 - some nice transitions
408:31 - very nice
408:34 - you want to talk about this at all
408:38 - yeah i will
408:40 - oh it's using transitions i just use uh
408:43 - transitions to create the basic
408:45 - animation the one you created felt a
408:48 - little difficult
408:54 - very nice so yeah if you
408:57 - if if you run this
408:59 - it has a transition when you load it
409:02 - and that's created by
409:07 - so this the cx and cy are initialized i
409:09 - guess at zero which is inferred
409:12 - and then you use transition and duration
409:15 - and change cx and cy very nice
409:18 - very nice i think in a future episode
409:20 - i'm going to get way deep into
409:21 - transitions
409:25 - and here's one from a deal look at this
409:30 - oh nice you got the lines to work
409:35 - fantastic
409:37 - beautiful
409:44 - wow very nice very nice ideal um would
409:47 - you mind like walking through how you
409:48 - did this here oh sure yeah uh it's um
409:52 - it's
409:53 - yeah so it's basically using um trying
409:56 - to make use of the path element to
409:59 - connect all the circles up
410:01 - and
410:04 - and
410:05 - so that yeah d3 has this um
410:08 - a line generator which will uh convert
410:12 - all the data points into
410:14 - the
410:15 - string that gets passed to
410:18 - the d attribute which is uh
410:22 - which is part of the path element
410:25 - um
410:26 - so um
410:28 - yeah this was really just an experiment
410:30 - to see if i could get it to work
410:34 - and uh so i i would be very keen to find
410:36 - out whether there's a better way of
410:38 - doing this but like for for example
410:40 - combining uh everything in one
410:44 - method chain
410:45 - um
410:46 - but uh my first pass was just to try and
410:50 - think about it separately and then
410:52 - use the
410:53 - the join method um
410:56 - to
410:58 - handle all the uh
411:00 - uh
411:01 - yeah syncing up all the dom elements
411:03 - with all the data
411:05 - um
411:06 - and uh yeah but that line generator is
411:08 - is really awesome because it just
411:09 - generates that complicated
411:12 - d
411:12 - string
411:14 - right
411:16 - um
411:17 - you know what's happening here is it's
411:19 - creating a path
411:21 - for each and every
411:23 - element of the array
411:25 - and so for however many circles there
411:27 - are
411:28 - there are
411:29 - an equal number of paths
411:31 - that are all on top of each other
411:33 - ah yes so if you inspect the dom you'll
411:36 - you'll actually see a many many paths
411:38 - and that's why the line appears somewhat
411:41 - uh harsh like thick if the anti-aliasing
411:44 - around it
411:46 - is not quite right that's because
411:47 - there's maybe you know ten or five
411:50 - lines on top of each other
411:52 - let me just quickly
411:54 - fork this and and
411:57 - you know
411:59 - give you my take on on how to do this
412:06 - so instead of using
412:09 - data here
412:11 - we can just use an element with a single
412:16 - sorry we can we can just use an array
412:19 - with a single element
412:21 - and see now that line is not so thick as
412:24 - it was
412:25 - because now there's only one of them
412:29 - and it doesn't matter what this thing is
412:31 - you could have it be null or whatever
412:33 - because you know none of these functions
412:35 - access it
412:36 - because d is always a line generator of
412:38 - data it's not a it's not a function of
412:41 - the this element in this array
412:44 - so this is
412:46 - um
412:47 - actually something i was hoping to get
412:48 - to in the last episode which is namely
412:51 - the special case
412:55 - the special case of a single element
412:59 - and this is a perfect example of it you
413:01 - know where there's just a path you only
413:03 - want to have one of these path elements
413:06 - but it's driven by data that could have
413:07 - many elements but it's actually just one
413:09 - path
413:11 - if you wanted to have do it a different
413:13 - way where you had maybe line elements
413:16 - multiple line elements
413:17 - then you would you know use
413:20 - an array as data with many elements but
413:23 - since it's just one path
413:25 - this this
413:26 - approach works perfectly well and i
413:29 - would say this is sort of you know the
413:31 - optimal way to do it
413:33 - to use a path
413:34 - and have that path
413:36 - use these multiple lines
413:38 - so
413:39 - yeah great work i feel
413:42 - that's really really good to know yeah i
413:45 - that that's that that's uh it makes a
413:46 - lot more sense now just to have the one
413:48 - element in the
413:49 - uh being passed to the data method that
413:53 - that makes sense nice
413:55 - thank you thank you very much yeah my
413:57 - pleasure
414:01 - all right that's it for the exercise
414:03 - submissions
414:13 - all right that's it for a review of last
414:15 - week's exercises let's get into ways to
414:18 - include javascript in
414:20 - html
414:30 - for this i will start
414:32 - invis hub
414:33 - i'll create a viz from the
414:36 - hello html starter
414:40 - i'll fork this one and call it
414:46 - js in
414:52 - html okay so this example
414:57 - i'll just clear out the readme
415:00 - this example already has
415:03 - some javascript
415:09 - and this is
415:10 - the most straightforward
415:12 - you know maybe simplest
415:14 - way
415:15 - to include javascript in an html page
415:18 - you use a script tag and then inside of
415:21 - that script tag
415:23 - you can put arbitrary javascript
415:26 - but as you see when we write a lot of
415:28 - code
415:30 - it ends up
415:32 - uh
415:33 - getting very large
415:36 - and there may be more stuff in
415:38 - index.html and then pretty soon you're
415:40 - at like 100 lines 200 lines 500 lines
415:45 - in my various work i've seen
415:48 - i've seen you know html files that are a
415:50 - thousand lines or 2 000 lines of code
415:54 - which is just um
415:58 - it's unwieldy
415:59 - so
416:00 - there becomes a need to split the files
416:04 - up
416:05 - so here's one way to split the files up
416:08 - you can take the javascript
416:10 - create a new file
416:12 - let's i don't know i'll call it uh
416:14 - script
416:18 - dot js just as a
416:21 - silly example name
416:27 - and then we can remove
416:32 - the stuff in that script tag there
416:35 - but notice that it's not running
416:38 - now this script is not doing anything
416:39 - because it's not included into
416:42 - the html of the page
416:48 - to include it
416:50 - into the page
416:52 - we can use the src attribute of the
416:54 - script tag so we can say src equals
417:00 - script
417:02 - dot js
417:05 - and now it runs
417:06 - it loads
417:10 - and all this stuff works without any
417:12 - build tools
417:14 - the issue with this approach
417:17 - which by the way used to be the approach
417:19 - years ago
417:20 - in sort of the early years of javascript
417:24 - for a very long time
417:26 - the status quo was you know this is how
417:28 - you include a library
417:30 - on your page and this is how you include
417:33 - your script files on the page
417:35 - but what would happen
417:38 - is that over time
417:45 - you would end up with
417:49 - many
417:50 - script files
417:52 - on the page you know script one script
417:54 - two
417:56 - like this
417:57 - and then
417:58 - you would need to manually keep track of
418:01 - which script depends on which other
418:03 - script
418:04 - so you know for example if in script one
418:07 - you want you want to refer to a global
418:10 - variable introduced by script 3
418:13 - then you would need to rearrange these
418:16 - such that they're in
418:18 - the right order so everything has its
418:20 - dependencies
418:22 - and the algorithm to do such ordering is
418:24 - called topological sorting
418:27 - um
418:29 - so i i think in like rails ruby on rails
418:32 - you can specify
418:33 - which script depends on which other
418:35 - script and then there's some utility
418:36 - that calculates the correct ordering and
418:38 - automatically generates the script tags
418:41 - but that all is sort of
418:44 - um in the past
418:46 - because in modern times there's this
418:48 - thing called
418:49 - es6
418:50 - modules
418:54 - anita says that's so deep
418:58 - yeah feel free to speak with sound it's
419:00 - fine
419:12 - this is you know how one option
419:15 - of a way to work
419:17 - but let me let me show you how it looks
419:19 - with es6 modules
419:23 - in vishub
419:26 - you can use a special name
419:28 - called index.js
419:31 - this is a special
419:33 - name of a file that vishub specifically
419:37 - looks for
419:38 - and so if you
419:40 - if you define an index.js
419:42 - see vishub automatically created
419:45 - this file that you you're not allowed to
419:47 - edit called bundle.js
419:51 - this is
419:52 - a bundle
419:53 - created by
419:55 - rollup
419:56 - internally within vis hub so inside of
419:58 - the vis hub software it actually loads
420:00 - in roll up
420:02 - which is an amazing tool for for
420:04 - generating
420:05 - bundles
420:09 - and what a bundle is
420:13 - is
420:14 - it's a it's a file that combines many
420:16 - modules together
420:18 - here's what es6 modules
420:21 - look like you can say import
420:25 - something
420:27 - from
420:29 - i'll say dot slash
420:32 - um
420:36 - something
420:38 - dot js
420:43 - and we can create this file called
420:48 - something.js and in here we can export
420:53 - something
420:55 - equals i'll just define it as a string
421:00 - a thing
421:03 - so you can use export
421:05 - before the the keyword const
421:08 - to export a named
421:12 - well it's called a named export
421:15 - whatever variable you have locally you
421:17 - can export it with a name
421:19 - and then if you have named exports you
421:22 - can import them with this syntax
421:28 - let's use that by saying instead of
421:30 - hello javascript hello plus
421:34 - something
421:36 - whatever something is
421:37 - it should appear
421:40 - and now it says hello
421:41 - a thing
421:43 - all right so that's generally
421:46 - how you author es6 modules let's take a
421:49 - look at bundle.js to see what it's done
421:52 - here rollup
421:55 - has actually combined
421:57 - index.js and something.js together
422:00 - into a single
422:02 - file
422:06 - here's the content of something and
422:08 - here's the content of
422:10 - index.js
422:20 - so
422:21 - bundle.js makes
422:23 - basically index.js with everything
422:26 - included
422:28 - bundle.js is automatically generated
422:31 - from
422:32 - index.js
422:34 - everything that index.js imports
422:38 - is included in bundle.js and also
422:41 - the things that are imported by the
422:44 - things that are imported
422:46 - by
422:46 - index.js are also included in bundle.js
422:51 - so something.js could also
422:53 - you know import
422:56 - um
422:58 - thing
422:59 - from
423:00 - dot slash thing dot js just making stuff
423:05 - up here
423:06 - and then that could say
423:08 - uh
423:10 - plus
423:11 - thing
423:14 - and then we can make another file
423:18 - thing.js
423:22 - equals
423:25 - thing
423:26 - planet earth
423:28 - sure
423:32 - planet earth
423:33 - so that allows us to author this module
423:35 - that defines this named export
423:38 - called thing
423:40 - which we we can import in something.js
423:43 - and use
423:44 - and something.js
423:46 - in turn exports
423:48 - the named export called something which
423:50 - is imported in index.js which is used
423:54 - there
423:57 - and then
423:58 - the cumulative output is hello uh
424:01 - planet earth
424:03 - and if we look at bundle.js
424:05 - all of those various modules are
424:07 - included
424:08 - inside of bundle.js
424:12 - so bundle.js is totally separate file
424:15 - it is
424:16 - yes
424:18 - yep
424:19 - yeah
424:21 - and we if we name we have to name
424:23 - index.js
424:24 - as index.js expanding
424:28 - correct
424:30 - correct because um
424:32 - the viz hub
424:33 - roll up configuration that it uses
424:35 - internally looks for a file called
424:38 - index.js
424:43 - yeah
424:46 - so what role do the curly braces play
424:49 - the ones that wrap
424:51 - something in this case
424:53 - oh that's a great question this is the
424:55 - distinction between named exports and
424:58 - default exports
425:00 - with named exports you could
425:06 - you could import multiple named exports
425:09 - from an es6 module
425:13 - and here's an example
425:15 - let me just see this through
425:18 - we can use both of these
425:21 - and then in something.js we can say
425:23 - export
425:26 - const
425:27 - something else
425:31 - other
425:36 - when you use this form of exporting
425:40 - export const
425:42 - you could also use export
425:45 - function
425:50 - this is valid syntax
425:53 - you could also use let export let
425:56 - something these are the various ways you
425:58 - can use named exports and with named
426:01 - exports the key thing is that you can
426:03 - export multiple things that have names
426:08 - so now we can see that the output
426:11 - is hello uh planet earth
426:14 - other
426:16 - that's named exports
426:18 - if you don't use
426:21 - the curly braces
426:25 - like this
426:30 - right now we get an error that says
426:34 - default is not exported
426:36 - if you don't use the curly braces it
426:38 - uses what's called the default export
426:42 - this is
426:44 - this is the case where you want a module
426:47 - to export only one thing
426:51 - so if we modify
426:55 - some
426:56 - this
426:57 - if we modify something.js
427:00 - we can
427:03 - use the default export
427:08 - like this i believe export default
427:10 - something
427:12 - this will expose
427:14 - the variable in this file which is
427:16 - called something
427:17 - as the default export
427:19 - and by the way you can have
427:21 - a default export as well as
427:25 - named exports
427:30 - let me just show you what that would
427:31 - look like
427:34 - like this
427:36 - so if we don't export something
427:39 - we export something else
427:42 - and then we export default
427:44 - something
427:46 - check this out in index.js we can import
427:49 - something which is the default export
427:53 - and
427:56 - something else
427:58 - as a named export
428:04 - and we can use that here
428:08 - like this
428:09 - and it still works
428:11 - and you'll often see this uh with react
428:14 - if you end up using react
428:17 - react
428:18 - uppercase react is the default export of
428:21 - react but then there's a lot of named
428:23 - exports from react like use effect
428:27 - stuff like that
428:30 - that's an example
428:32 - where you would see this sort of stuff
428:34 - in the wild
428:37 - does it have something like that what
428:40 - default modules and sorry what was that
428:43 - d3 does d3 have d3
428:48 - well
428:50 - i believe
428:53 - it does not i believe it only uses named
428:57 - exports
429:00 - which is a really good segue
429:02 - let's check it out
429:05 - so in vishub
429:11 - you can include a script tag so here's
429:14 - here's
429:16 - here's the d3 library hosted on
429:19 - unpackage
429:23 - which is a content delivery network
429:28 - that hosts npm packages
429:31 - all right and npm
429:33 - is this
429:35 - giant
429:37 - database of
429:39 - packages
429:40 - with all of their different versions
429:43 - um it's a package manager for javascript
429:46 - and it's sort of the de facto package
429:48 - manager so all this is to say
429:50 - let's let's load in d3 onto our page
429:54 - using unpackage
429:55 - by going to unpackage.com d3
429:59 - and if we just go to onpackage.com d3
430:02 - and hit enter it automatically resolves
430:05 - to the latest version of d3 which at the
430:08 - time
430:09 - happens to be 6.6.2
430:11 - and this is the minified
430:14 - build of d3 which contains all of the
430:18 - different
430:19 - modules
430:20 - that are part of d3
430:22 - so i'm going to copy this url
430:25 - and then over in index.js
430:29 - i'm going to
430:33 - insert a script tag
430:40 - and
430:41 - set the source
430:42 - equal to
430:43 - that
430:44 - url and this is how
430:47 - cdns content delivery networks or
430:50 - content distribution networks
430:54 - are intended to be used
430:59 - at this point
431:00 - in our javascript
431:02 - we can say console.log
431:06 - d3
431:08 - and it should work see
431:12 - that script tag defines d3
431:16 - as a global variable this is called a
431:18 - browser global
431:21 - and this is one way it's like sort of
431:23 - the old school way of using libraries
431:27 - insert a script tag that pulls it from a
431:28 - cdn or you could pull down d3 to your
431:32 - files and load it from your files either
431:34 - way
431:36 - and then access the global variable that
431:38 - it defines
431:40 - this is one way of doing things
431:43 - this is not using es6 modules at all
431:46 - not at all this is this is an older way
431:48 - before there were es6 modules that's
431:50 - called browser globals
431:52 - so you could say d3.select
431:56 - that resolves to a function
431:59 - d3 dot
432:00 - you know scale linear
432:03 - all this stuff
432:05 - so
432:06 - [Music]
432:07 - d3 is object
432:11 - and each module
432:13 - is property correct
432:16 - yes
432:17 - values of functions
432:20 - yep
432:21 - that's
432:22 - correct that's great yeah using
432:26 - the d3 browser global
432:31 - you could say that yes d when you
432:33 - include
432:34 - this script tag here that defines d3
432:38 - that
432:39 - introduces a single global variable into
432:42 - the you know global namespace
432:44 - of javascript
432:45 - that's called d3 so that's a variable
432:48 - called d3
432:49 - and the value of that variable is
432:52 - an object
432:54 - and on that object you can see all the
432:57 - methods of d3
432:59 - listed out here
433:07 - and this is great because
433:10 - when this program runs it just pulls in
433:12 - javascript from that cdn
433:14 - and it doesn't cost us anything meaning
433:17 - i don't have to host d3
433:19 - inside of this hub or anything like that
433:22 - it's just when you load the page it
433:23 - pulls that from that unpackaged server
433:26 - which i have no control over it's you
433:28 - know totally not my thing
433:30 - this is why
433:32 - this is sort of the preferred way of
433:34 - using libraries invis hub in particular
433:41 - and i want to say
433:44 - the vishhub rollup configuration has a
433:47 - mapping for d3
433:49 - as a package
433:51 - so
433:52 - that's what lets us do import
433:55 - select
433:56 - from
434:00 - d3 like this
434:05 - and then we can say console.log
434:08 - d3
434:09 - whoops
434:10 - there is no d3 dot anymore it's just
434:13 - select because we've imported select a
434:17 - named export
434:18 - from d3
434:22 - and it resolves to the right thing
434:26 - this is slightly mysterious
434:29 - right it's there's a little bit of black
434:31 - magic going on here with the roll up
434:33 - configuration
434:35 - roll up has this
434:37 - this feature
434:39 - where you can tell it to resolve package
434:41 - names to browser globals
434:45 - so somewhere in the configuration
434:48 - internally in viz hub that you don't see
434:50 - right now
434:51 - there's a mapping that says okay if you
434:54 - try to import from
434:56 - d3
434:58 - without the dot slash so it's not
435:00 - looking for a local file
435:02 - it's looking for a package
435:05 - called d3
435:07 - if you do that then
435:09 - look for the browser global called d3
435:11 - and resolve all the named exports
435:15 - to properties on that browser global
435:18 - this is a really nice configuration of
435:20 - rollup
435:21 - that allows us
435:23 - to use this really nice es6 import
435:25 - syntax for packages
435:28 - and at the same time
435:30 - pull in the script tag from a cdn
435:35 - now let's take a look at bundle.js
435:38 - for this case
435:47 - oops
435:52 - bundle.js
435:55 - is
435:57 - wrapped up into this
436:00 - this one expression
436:03 - right so it doesn't create any global
436:04 - variables it's very self-contained
436:07 - it defines a function
436:11 - and inside of that function is all of
436:13 - our code from all of our modules that
436:15 - we've authored
436:17 - and that function is immediately invoked
436:20 - with
436:21 - d3
436:24 - which is
436:25 - not defined
436:27 - anywhere in this file
436:29 - because
436:30 - there's an assumption that it will be
436:31 - defined
436:34 - as a browser global and that's why all
436:36 - this works
436:39 - uh let me show you
436:43 - um
436:45 - actually there's a little bit of magic
436:47 - as well where
436:49 - vishub is injecting a script tag at the
436:51 - end of the body that includes bundle.js
436:56 - script src equals
437:02 - bundle.js and if we have it there then
437:05 - it is not automatically injected
437:08 - so i want us i want to show you that
437:10 - if we include d3 after bundle.js
437:16 - it doesn't work
437:20 - i wanted to do this to cement this idea
437:22 - that bundle.js when it runs it assumes
437:25 - that there's a browser global called d3
437:28 - and inside of
437:29 - any html
437:31 - when you have a script tag
437:33 - that script tag is fully loaded
437:37 - parsed and executed
437:39 - before
437:40 - the next script tag
437:42 - in the list
437:44 - so what's happening here
437:46 - is
437:52 - bundle.js is looking for d3
437:55 - it's not there
437:57 - and we get an error but if we reorder
438:01 - this to include
438:02 - the script before
438:04 - bundle.js then
438:07 - it all works
438:08 - so it is a
438:10 - hierarchical
438:14 - i mean in a sense that bundle.js depends
438:18 - on
438:20 - d3
438:22 - yes
438:23 - but the data structure is not actually a
438:25 - tree it's not a hierarchy it's actually
438:27 - a graph it's actually a directed acyclic
438:29 - graph if you want to get into the weeds
438:32 - yes
438:33 - knows which one comes first right right
438:37 - yeah internally
438:39 - roll up
438:41 - i mean if you have this dependency graph
438:42 - of modules
438:45 - rollup knows internally that
438:47 - the stuff in thing must come before the
438:50 - stuff in something because something
438:52 - imports from thing and also it knows
438:54 - that this stuff in something must come
438:56 - before the stuff in index.js
439:00 - inside bundle.js so that's why it has
439:02 - done this correct ordering using the
439:04 - topological sort algorithm
439:07 - internally
439:10 - nice so in virtual world also the things
439:13 - are hierarchical
439:16 - sure
439:20 - i see there was a question here from
439:23 - sriram
439:25 - is roll up
439:27 - comparable to npm or yarn
439:31 - what's the what's the difference between
439:32 - a package manager and a module
439:36 - bundler yeah i mean
439:40 - they're at different levels
439:42 - of this hierarchy
439:44 - in a sense
439:46 - npm
439:47 - is
439:48 - it's a company actually that makes money
439:51 - and it's a bunch of servers that exist
439:53 - out there in some cloud
439:56 - somewhere
439:57 - that's what npm is and it's a set of
440:00 - scripts and tools that allow people to
440:02 - publish modules into npm and also to get
440:06 - modules out of
440:08 - npm
440:11 - and so what we're using here is npm
440:14 - as well as unpackage which is another
440:17 - another product in inside of the
440:19 - ecosystem of npm
440:21 - to pull this script down
440:25 - and
440:29 - npm
440:30 - confusingly is also a command line
440:34 - tool
440:35 - where you can say npm install npm run
440:39 - npm this npm that
440:42 - and there's an alternative command line
440:44 - tool to the npm command line tool that's
440:47 - called yarn
440:49 - and yarn is
440:51 - arguably more efficient faster better
440:54 - but it also pulls
440:56 - the packages out of the npm
441:00 - package manager database system
441:04 - cloud thing so in a sense you know npm
441:06 - and yarn are not that different they're
441:08 - pretty much equivalent tools
441:12 - and rollup
441:14 - is a module bundler and rollup has peers
441:18 - in this ecosystem like webpack
441:20 - parcel
441:21 - snowpack recently
441:24 - but roll up is pretty nice
441:29 - yeah so
441:30 - the difference between a package manager
441:32 - and a module bundler
441:34 - is a package manager is a repository of
441:37 - packages but a module bundler is just a
441:39 - tool it's actually a package within npm
441:42 - rollup is also a package inside of npm
441:46 - um and then when you run rollup on your
441:48 - stuff locally it pulls the packages that
441:51 - are
441:52 - that are installed locally using npm and
441:54 - generates a bundle so it's all kind of
441:57 - kind of this big hairball of stuff which
442:00 - is why it's confusing
442:04 - uh shariram says npm and unpackage are
442:07 - sort of like cdns for code
442:10 - in a way in a way i mean
442:13 - the cdn
442:15 - is
442:16 - is essentially a wrapper around
442:19 - npm
442:20 - this unpackaged cdn and on package
442:23 - itself
442:25 - is more akin to a
442:28 - a library like a physical library where
442:30 - you go to get books like when you
442:32 - publish an npm package it's like you're
442:34 - putting a new book in the library
442:36 - and when you're pulling it out it's like
442:38 - you're
442:39 - you're you're asking them to mail you a
442:41 - copy of the book i don't know
442:44 - maybe it's not the right metaphor but
442:46 - yeah i hope that clarifies things
442:52 - current uh going back to the
442:56 - the default exports and the named
442:58 - exports yeah is there um
443:01 - uh are they
443:02 - are they used in different situations uh
443:04 - is is there a
443:07 - a general
443:08 - uh advantage to using
443:10 - named exports over default and vice
443:12 - versa
443:15 - is something there's some general
443:17 - guideline around that
443:19 - that one could keep in mind
443:28 - if you google named exports versus
443:30 - default exports
443:32 - there are a lot of people that have very
443:35 - strong opinions
443:37 - about this stuff
443:41 - and like here why i've stopped exporting
443:44 - defaults from my javascript
443:47 - and this is actually the philosophy that
443:48 - i adhere to
443:53 - there's a lot of issues
443:56 - with default exports
443:58 - often i've seen
444:02 - in the in the module that has a default
444:04 - export
444:05 - internal to that module that export is
444:07 - named
444:08 - something
444:10 - or not not exactly
444:12 - something but it's it has a particular
444:14 - name and then in the in the module that
444:17 - imports it
444:19 - it's imported with a different name
444:21 - which is super confusing
444:24 - that's the that's the one big drawback i
444:26 - see of of using default exports they
444:29 - don't dictate what name you use so you
444:31 - could actually say import
444:34 - it
444:36 - which is the default
444:39 - and then we could use it
444:41 - like this
444:43 - and it still works
444:46 - so um
444:48 - yeah actually this cropped up in the
444:50 - vis-hub code base
444:52 - where
444:54 - the names don't match and then when
444:55 - you're navigating the code base it makes
444:57 - it super confusing because you have to
444:59 - remember okay it's called this inside
445:01 - the module and it's called this outside
445:03 - the module
445:06 - and it's just it just makes things super
445:07 - confusing so i personally
445:09 - tend to always
445:12 - only use named exports and imports in
445:16 - the code that i author
445:18 - uh but there's pros and cons
445:20 - for sure i mean react has chosen to use
445:23 - the default export of react
445:26 - which makes sense for that case i think
445:29 - um so there are cases where you know
445:31 - using a default export makes sense
445:34 - in a way
445:35 - uh but yeah that's my personal take on
445:37 - it and so all the code that i authored
445:39 - today in my you know
445:42 - work with clients and everything
445:45 - i strictly just use named exports
445:48 - and that's it
445:49 - no default exports
445:53 - yeah that makes sense to me i think i'll
445:55 - follow that
445:56 - nice
445:58 - i see there's a bunch of chatter in the
446:00 - youtube chat so let me get caught up
446:03 - on that
446:10 - guitar covers oh i think i addressed
446:12 - this is bundle.js used there in index.js
446:16 - yes um it's there now because i added it
446:19 - if it's not there vis hub does some
446:21 - magic and it inserts that exact thing
446:23 - so that's that's what's happening there
446:27 - and then
446:30 - yeah you can give the default export of
446:32 - a module any name when you're importing
446:34 - it that's true that's true that's why
446:35 - it's confusing
446:37 - how is index.js included
446:40 - since i don't see it in index.html oh
446:42 - yeah it's the confusing blackmagic part
446:45 - where vishub injects
446:48 - exactly this thing
446:50 - automatically if it's not there
446:53 - you know the intention is to make it
446:54 - easier to use but it's sort of cryptic
446:57 - and strange
446:58 - if you don't know that's happening
447:01 - try out vite sometime as a bundler
447:05 - yeah
447:06 - vite
447:08 - i heard about this like
447:10 - last week for the first time i feel like
447:12 - an old man i can't keep up with his
447:14 - stuff
447:16 - so fight is another one
447:18 - um
447:21 - yeah it looks cool
447:23 - looks cool
447:25 - see the thing with all of this stuff is
447:28 - the intention of vite
447:30 - webpack roll up
447:32 - snowpack
447:34 - parcel the intention of all that stuff
447:36 - is to make it easy and straightforward
447:38 - to author your code
447:41 - so that you don't need to think about or
447:42 - deal with all complexities of generating
447:45 - a bundle including the bundle into your
447:47 - html
447:49 - and all that stuff
447:54 - we've discussed how to use stuff in
447:56 - vishub and es6 modules now i want to
447:59 - talk about how to set a project up
448:01 - locally
448:05 - so
448:06 - let's start by
448:08 - exporting
448:09 - out of this
448:10 - there's this export feature
448:13 - what it gives you is
448:14 - a zip file
448:16 - that has a bunch of files
448:22 - so i'll open up a terminal
448:26 - i'm on linux here
448:31 - i'll go to my
448:33 - my place where i put code called repos
448:36 - short for repositories
448:39 - uh
448:41 - i'll just make a directory called
448:43 - example
448:47 - which is empty
448:50 - um
448:52 - and as you do this stuff
448:54 - you know your setup your mileage may
448:56 - vary i mean i'm very comfortable with
448:58 - the command line and everything but you
449:00 - may want to use gui you may be in
449:02 - windows you may be in mac
449:04 - so
449:05 - the place where we're going
449:08 - is fraught with peril because everybody
449:11 - has a different setup a different system
449:13 - different ide text editor that you use
449:16 - vs code is most popular i think nowadays
449:19 - but i like to use vim
449:21 - doesn't matter
449:24 - once we have this
449:26 - zip file
449:27 - we can hit extract
449:30 - and i'm going to extract it to
449:46 - repos
449:47 - example
449:49 - i'll hit extract
449:51 - show the files
449:54 - in here we have
449:56 - index.html
449:57 - index.js
449:59 - bundle.js which was generated by vishub
450:03 - we've got the readme markdown file
450:06 - and these are all just text files
450:09 - we have something.js and thing.js
450:13 - and we have a few more things that are
450:16 - not visible at all in vishub
450:18 - we have a package.json
450:20 - and a rollup.config.js
450:24 - let's dig into these
450:32 - i'm going to use vim you can use
450:33 - whatever ide you prefer like vs code
450:38 - to look at the files
450:41 - package.json
450:44 - is a file that defines your dependencies
450:49 - and it's a whole
450:51 - it's a whole thing
450:52 - that has a lot of very well defined
450:54 - aspects to it
451:05 - the npm documentation for package.json
451:08 - is the canonical
451:10 - documentation
451:11 - for everything that you could put in
451:13 - package.json
451:15 - this whole concept of package.json has
451:17 - come out of
451:19 - npm
451:20 - essentially it's a way for npm to track
451:22 - dependencies
451:25 - and if you define a package that you
451:28 - want to publish to npm you need a
451:30 - package.json to specify
451:32 - the name
451:33 - the version
451:35 - description keywords home page all this
451:37 - stuff
451:38 - but if
451:39 - and the license you can specify in here
451:42 - which open source license
451:45 - all sorts of things but if you're not
451:47 - publishing a package per se
451:50 - the main thing that we use it for is for
451:52 - dependencies
451:56 - it just maps
451:57 - package name to aversion range and this
452:00 - is using semver semantic versioning
452:03 - and this is
452:04 - what you'd want to research if you get
452:07 - interested in
452:08 - you know how exactly these versions are
452:10 - specified what the carrot means
452:13 - all this stuff
452:20 - here we have a very simple
452:22 - small
452:23 - package.json that says okay we have dev
452:27 - dependencies
452:28 - meaning
452:30 - they're not dependencies of this package
452:33 - if it were to be published but it's
452:35 - dependencies that you need if you're
452:37 - running a development environment
452:38 - locally
452:42 - what this means
452:43 - is that
452:45 - if you run
452:46 - npm install
452:50 - in this directory that has this
452:52 - particular package.json
452:54 - it will
452:56 - use that package.json to figure out what
453:00 - it needs to install and then after it
453:02 - installs that stuff it appears in this
453:04 - directory called
453:05 - node underscore modules
453:10 - node underscore modules let's see what
453:12 - it contains it has all this stuff these
453:14 - are
453:15 - our direct dependencies
453:18 - including rollup and
453:20 - another package
453:22 - called at roll up slash
453:24 - plugin dash buble
453:29 - and we can see those here it's got roll
453:31 - up
453:32 - and it has
453:34 - at roll up
453:36 - and i think the slash
453:38 - um
453:40 - there's stuff inside of there that we're
453:41 - using
453:42 - but what are all these other packages
453:45 - right
453:46 - these are the transitive dependencies of
453:49 - our dependencies
453:50 - a transitive dependency is
453:53 - essentially a dependency of a dependency
453:56 - if we look at rollup for example
454:00 - and
454:00 - we're still inside node modules
454:04 - if we look at the package.json file of
454:08 - the rollup package
454:10 - it contains a bunch of dependencies
454:13 - dev dependencies in particular so all
454:15 - this stuff is pulled in
454:17 - and each of these dependencies
454:20 - has other dependencies
454:22 - so all the dependencies of dependencies
454:24 - of dependencies of dependencies are
454:26 - pulled in
454:28 - and what we end up in
454:31 - node modules with is this list of all
454:33 - the transitive dependencies
454:35 - so this is how you set up a project
454:37 - locally essentially you
454:39 - you run npm install
454:42 - that uses package.json to install these
454:45 - dependencies
454:47 - now
454:48 - the dependency
454:50 - that we're really using is a rollup
454:53 - and we're also using buble
454:57 - to support jsx
454:59 - which we don't actually need here
455:01 - we don't actually need it here but if we
455:02 - want to author react code with jsx we
455:05 - would need buble so i'm actually just
455:07 - going to delete this i'm going to start
455:09 - iterating this configuration
455:11 - locally which i would i would suggest
455:13 - you do
455:15 - because the viz hub export is just
455:17 - sort of a generic simple
455:20 - export
455:21 - that makes it so you can
455:22 - generate bundle.js by yourself outside
455:25 - of vishub
455:27 - here's bundle.js
455:29 - what i'm going to do is delete this file
455:34 - so if i use rm
455:37 - there is no longer any file called
455:39 - bundle.js
455:43 - and then
455:47 - if we look again at package.json
455:50 - it has a scripts field
455:53 - and in that scripts field there's a key
455:56 - called build
455:58 - and the way that the scripts field works
456:00 - with package.json is that you can say
456:03 - npm run
456:06 - followed by the name of a script in
456:08 - which in this case the name is called
456:10 - build
456:12 - and there are sort of conventional names
456:14 - like npm run build generates the bundle
456:17 - across all various
456:19 - tools there's also npm run start
456:22 - which is equivalent to npm start which
456:25 - is set up for a lot with a lot of these
456:26 - templates but it's not set up here
456:28 - there's no script here called start
456:30 - because this is just a very minimal
456:31 - simple
456:33 - configuration that's aimed toward
456:36 - the minimal possible thing that you need
456:38 - to generate bundle.js
456:41 - if we run npm run build
456:44 - it invokes rollup
456:47 - because that's what the script is
456:48 - defined to do rollup dash c
456:52 - and then
456:53 - it creates
456:55 - bundle.js from index.js
456:59 - so this is how you can create bundle.js
457:02 - locally
457:03 - in your
457:04 - own machine outside of vishhub
457:08 - the dash c of rollup means use the
457:11 - rollup configuration file found in
457:14 - rollup.config.js
457:16 - let's take a look at that
457:20 - this is where
457:24 - that mapping exists between the external
457:28 - packages
457:30 - and all of this stuff is sort of
457:32 - pre-programmed
457:34 - into vishub
457:35 - we don't actually need
457:37 - any of it except d3
457:40 - so i'm going to delete all that junk we
457:42 - don't need and here's the mapping from
457:44 - the browser globals to the package names
457:48 - or rather the other way around from
457:51 - package name to browser global
457:53 - again we just need d3 because that's the
457:56 - only one we're using
457:59 - i mean i would like to imp there's a lot
458:00 - of things to improve with vishub like
458:02 - ideally it shouldn't include any of this
458:04 - stuff that you don't need but this is
458:06 - the state of things at the moment
458:09 - it also uses this buble plugin to
458:11 - transpile jsx
458:13 - but we don't actually need that so i'm
458:14 - going to delete that
458:20 - and yeah here is an interesting use of
458:22 - default exports you could just say
458:24 - export default
458:26 - and boom put it put an object literal
458:28 - right there it doesn't even have a name
458:32 - this is this is an es6 module that
458:34 - defines the role of config
458:38 - so now if we if we run that build script
458:41 - again it still works
458:43 - it generates bundle.js
458:47 - and there it is bundle.js
458:52 - how would you run this locally
458:55 - if you wanted to actually develop
458:58 - well you need to use an http server
459:03 - to serve the file locally
459:09 - you could maybe get away with not doing
459:12 - that
459:13 - by just double clicking on index.html
459:17 - yeah in this case it works
459:20 - but
459:21 - as soon as you introduce any code that
459:23 - uses
459:24 - xmlhttprequest
459:26 - or fetch to fetch data
459:29 - that fetching of data uses the http
459:32 - protocol so
459:34 - you need to be hosting it with a with an
459:36 - http http server locally
459:40 - let me just quickly show you how i would
459:41 - do that
459:43 - my go-to tool for that is
459:46 - http dash server
459:48 - which is an npm package so you can say
459:50 - npm install
459:53 - dash g to make it a global command
459:56 - that's available to you http
459:58 - dash server
460:02 - and then you can run
460:04 - http dash server just like that as a
460:07 - command
460:08 - and boom it's created this server that's
460:11 - now running
460:12 - so you can go to this url here
460:15 - and it's serving your page
460:18 - 127.0.0.1
460:22 - this is a special ip address that is
460:24 - equivalent to
460:25 - local
460:27 - host
460:29 - local host colon 8080 the 8080 is the
460:32 - port number
460:34 - that's a sort of conventional port
460:36 - number that's used
460:45 - that's how you can set up
460:47 - things locally
460:49 - and then
460:50 - once you start developing you get into
460:52 - this loop this development loop this
460:54 - cycle
461:01 - check it out our code is running um
461:04 - there's something about a fav icon file
461:08 - yeah the browser when it loads a page it
461:10 - always looks for this thing called
461:12 - favicon
461:13 - favicon i don't know how to pronounce it
461:16 - but that's the little icon that appears
461:17 - in the tab
461:18 - so that's what that error means it
461:20 - doesn't it doesn't really it's not
461:21 - important but that's what it means
461:24 - if you wanted to customize the little
461:25 - icon that appears in the tab
461:28 - you would have to introduce a
461:29 - favicon
461:32 - file
461:34 - but anyway
461:35 - let's say we wanted to change
461:38 - some of this code
461:40 - and oh check it out here's the log from
461:42 - http server
461:43 - every time
461:44 - we fetch the page it outputs something
461:47 - to this log
461:52 - let's say we wanted to change this text
461:56 - from hello to greetings
461:59 - if i change it
462:01 - and then i save this file oh wait a
462:04 - minute i'm editing bundle.js that's a
462:06 - big no no we don't want to be editing
462:07 - bundle.js because it's an automatically
462:10 - generated file
462:13 - so
462:18 - um
462:19 - here's what i typically do is
462:24 - npm run build
462:25 - that generates bundle.js
462:28 - it's the same it was as it was before it
462:30 - says hello because it was derived from
462:33 - index.js which we should be authoring
462:36 - and changing
462:38 - let's say we wanted to change hello to
462:40 - greetings
462:43 - if i save this file
462:46 - and then i refresh this page
462:49 - it does not
462:50 - get
462:51 - our change
462:52 - because
462:54 - this page is using
462:57 - bundle.js not index.js
463:00 - in order to update bundle.js we need to
463:02 - manually run this script
463:05 - called npm run build
463:07 - now if we go and refresh the page it
463:09 - says
463:11 - hello
463:12 - uh planet earth uh oh
463:14 - there's like something wrong here
463:17 - this is called caching
463:19 - if you hit shift and hit the refresh
463:21 - button
463:23 - now it says greetings
463:25 - because it when you hit shift refresh it
463:27 - disables the cache the browser cache the
463:30 - browser cache is a thing
463:32 - that
463:34 - it uses an older version of the file
463:36 - that you that you got and it's for you
463:39 - know efficiency on the internet uh if
463:41 - you loaded an image
463:44 - yesterday
463:45 - and then you go to the same page that
463:47 - uses that same image and that image is
463:49 - on your machine in the cache then the
463:51 - browser will use it and not fetch the
463:53 - image again it's it's a way to conserve
463:55 - bandwidth
463:56 - so this is another sort of thing that
463:59 - you would run into with local
464:00 - development
464:02 - is the cache and in the network tab of
464:05 - the chrome dev tools you can click a
464:07 - little box that says disable cache
464:09 - which is something i would recommend
464:11 - doing
464:14 - because then you won't have to use shift
464:17 - clicking the refresh button it'll just
464:19 - never use the cache
464:25 - alright so
464:27 - this is
464:28 - how you can set up a local development
464:30 - environment and it basically works
464:32 - however
464:34 - you don't get the automatic refresh
464:36 - stuff
464:40 - which is which is nice to have i mean in
464:42 - invis hub if you make a change it
464:44 - automatically generates bundle.js and
464:46 - re-runs the program for you
464:49 - instantly
464:50 - this setup here does not does not do
464:53 - that
464:54 - if you want to do that that's where
464:56 - you get into these project templates
465:02 - and so roll up starter app
465:06 - would let you do that
465:08 - oh but before i get into that are there
465:10 - any questions
465:13 - so far
465:25 - guess not
465:35 - roll up starter app is a more fully
465:38 - fledged
465:39 - project template if we take a look at
465:41 - the package.json here it has more
465:44 - scripts besides build
465:46 - it has
465:48 - start
465:49 - which does the serving for you the http
465:52 - server stuff is built into this
465:55 - it has
465:56 - build which is our same thing we had
465:58 - roll up dash c it also has watch
466:02 - what watch will do is automatically
466:05 - rebuild your bundle every time the
466:08 - source changes
466:09 - the source code changes
466:11 - and then there's
466:12 - dev as a script which is what we would
466:15 - want to use during development we would
466:17 - say npm run dev
466:19 - and
466:20 - what this does is it starts
466:26 - these two scripts in in parallel using
466:30 - this package called npm run all
466:33 - parallel so it runs start
466:36 - which serves
466:38 - the stuff on an http server and it also
466:41 - runs watch
466:46 - and i believe this package called serv
466:49 - which is a
466:50 - dev dependency here
466:52 - it i believe it does that automatic
466:54 - refresh
466:55 - but i don't know let's let's give it a
466:57 - try let's give it a spin
467:00 - so how do we use this
467:08 - what i want to do
467:10 - is
467:14 - i think clone this repository using git
467:25 - i'll call it example roll up starter
467:32 - and then i can run get clone
467:35 - oops
467:36 - i should just copy this here it already
467:38 - has the git clone
467:40 - run this
467:41 - this uses git
467:43 - to
467:44 - make a copy of all these files for me
467:47 - locally
467:48 - it's inside a directory called
467:49 - rollupstarter app
467:53 - which i guess is fine so in here i can
467:55 - run npm
467:57 - install
468:00 - or just npm i which is
468:03 - shorthand for npm install
468:06 - that will install the dependencies
468:11 - and then we can run
468:13 - npm run
468:15 - dev
468:19 - and it gives us this nice little
468:21 - output okay it's running on localhost
468:24 - 5000
468:25 - let's roll up starter app
468:28 - excellent
468:29 - and then the development
468:31 - workflow
468:38 - looks something like
468:42 - we don't open up these files
468:44 - and this is these are the files from the
468:46 - starter app it's like
468:50 - just
468:50 - their version of hello world
469:00 - we could
469:03 - put our code in here
469:05 - um that's probably that's the way to do
469:07 - it if if you want to like
469:09 - really start
469:11 - a new project based on something
469:14 - in
469:14 - vishub probably the thing to do is just
469:17 - copy your files into one of these
469:20 - starter apps
469:23 - notice how this roll-up config is
469:24 - slightly different it looks for
469:27 - src
469:28 - main.js as the entry point instead of
469:30 - index.js like ours does
469:36 - yeah and it has a couple more plugins
469:39 - to resolve
469:40 - npm packages and this is something i
469:42 - want to get into
469:46 - all right
469:47 - so i'm going to gut
469:49 - these
469:50 - files and put our own files in there
469:52 - i'll remove this update.js
469:56 - and then main.js
469:58 - i will replace it with the code that we
470:00 - wrote earlier
470:03 - so here's our index.js i'm just going to
470:06 - copy that over to here
470:10 - and then we need
470:14 - something.js
470:18 - so i'll make a new file
470:20 - called something.js
470:25 - and then i'll just copy this
470:28 - code into there
470:33 - and then we also need
470:36 - thing.js
470:39 - so i'll make a new file called src slash
470:42 - thing dot js
470:46 - and then
470:48 - copy our code
470:53 - into there
470:58 - save all these files
471:01 - and let's see what happened
471:06 - in our
471:08 - window where we're we're running npm run
471:10 - dev
471:12 - we have a couple of warnings here it
471:14 - says unresolved dependencies
471:16 - oh no
471:17 - d3 is imported by src
471:20 - main.js
471:24 - and yeah the bundle has not been updated
471:29 - the problem here is that we don't have
471:31 - d3 as a dependency here
471:35 - now here comes the main difference
471:38 - between what vis-hub does and what
471:40 - people usually do
471:41 - in projects
471:42 - usually
471:44 - instead of
471:45 - pulling in libraries from a cdn with a
471:47 - browser global usually people add it as
471:50 - a dependency in their package.json and
471:52 - then the bundle contains that entire
471:55 - library
471:56 - let's see how that plays out
471:59 - what we want to do is add to this
472:01 - dependencies
472:03 - d3 at a specific version
472:06 - but rather than hand edit this file
472:09 - what we can do
472:10 - is run a command
472:13 - called npm
472:15 - install
472:16 - dash dash save this will update bundle
472:20 - uh sorry
472:21 - this will update package.json and it
472:24 - will add that new dependencies
472:26 - the new
472:28 - this will update
472:29 - package.json
472:31 - and include
472:33 - whatever we type here as a new
472:35 - dependency at the latest version
472:38 - so if i run npm install dash dash save
472:41 - d3
472:43 - it will figure out the latest version
472:45 - and add it
472:46 - to our dependencies section and it will
472:48 - also install it in
472:50 - node underscore modules
472:53 - now if we look at package.json it has d3
472:56 - version 6.6.2
472:59 - all right
473:04 - let me restart this i don't know if it
473:06 - catches that if i change it like that
473:11 - oh there's some warning about circular
473:13 - dependencies with d3 yeah that's a
473:15 - long-standing issue but it's just a
473:16 - warning it's fine
473:18 - it created a bundle.js
473:21 - let's take a look at bundle.js i'm quite
473:24 - curious to see
473:26 - what it looks like now
473:29 - it's in the public directory
473:33 - public by the way is a conventional
473:35 - directory name for the stuff that gets
473:36 - served over http
473:38 - that's where our index.js is and that's
473:41 - where our bundle is
473:43 - now
473:44 - inside of this version of bundle.js
473:49 - um
473:56 - i forgot how to turn on line numbers in
473:58 - vim
473:59 - one moment
474:07 - oh yes
474:11 - okay
474:12 - in this version of bundle.js
474:15 - let's see how big it is how many lines
474:18 - it's massive
474:20 - it's huge
474:22 - look we're only you know ten percent of
474:24 - the way in 300 lines
474:26 - so what three three thousand lines of
474:27 - code
474:29 - this is because
474:30 - all of d3
474:32 - is included now inside of our bundle.js
474:38 - vishub does not do this
474:40 - because it would be a huge waste of
474:43 - storage
474:45 - and
474:46 - compute time and everything
474:49 - but
474:50 - as a standard practice nowadays you know
474:52 - if you have for your own project this is
474:54 - typically what folks do you know all the
474:56 - dependencies
474:58 - get included inside of bundle.js
475:01 - which introduces the need for
475:03 - minification
475:05 - uh minification is when
475:07 - this stuff is sort of compacted the
475:10 - variable names are given nonsense names
475:12 - that are just one character or two
475:14 - um
475:15 - and the idea with minification is to get
475:17 - the size of the bundle down
475:21 - i'm just curious what how big is this
475:23 - bundle
475:27 - if we take a look at these files we can
475:29 - see that bundle.js here is
475:31 - 76 kilobytes
475:37 - so that's
475:38 - you know that's what happens when your
475:41 - dependencies get in there and as you add
475:43 - more and more dependencies this bundle
475:45 - gets to be
475:46 - you know 500 kilobytes
475:49 - a megabyte two megabytes
475:51 - um so you got to be careful when you
475:53 - just you know
475:55 - add dependencies willy-nilly
476:00 - but
476:00 - anyway
476:02 - when we look at the web page now
476:08 - it says roll up starter app
476:13 - i'm not sure why
476:17 - oh perhaps because
476:19 - i did not in i didn't update index.html
476:23 - yeah we're still using their
476:25 - version of this
476:28 - and notice
476:29 - in the rollup starter app version of
476:31 - this they also have script source equals
476:34 - bundle.js
476:35 - it's sort of a standard convention
476:38 - as the last step
476:40 - i'm going to replace that with our
476:43 - version
476:45 - of index.html
476:48 - copy all this stuff that we had from
476:50 - earlier
476:52 - put it into index.html
476:55 - however
476:57 - we no longer need to pull in d3 from
476:59 - unpackage because it's
477:02 - installed
477:03 - locally and it's included inside of
477:06 - bundle.js so i'm going to delete that
477:11 - now if we look at this page it says
477:14 - hello html
477:16 - and it has our greetings
477:18 - here
477:20 - and it also resolves the d3
477:23 - stuff to the correct thing
477:26 - all right this is how you can
477:30 - essentially bootstrap a local project
477:33 - for development
477:38 - yep
477:41 - that's it any any questions
477:46 - and does this uh also
477:48 - refresh the page every time you make a
477:51 - change oh good question
477:53 - let's see
478:03 - if i change index.html
478:07 - and save it
478:11 - it does not
478:14 - no so we need to manually refresh
478:17 - but i wonder
478:18 - is it set up so that when we edit the
478:20 - code
478:23 - it reruns
478:26 - let's just change something
478:30 - here
478:32 - other thing
478:36 - no it does not it automatically
478:39 - generates the bundle but it does not
478:41 - automatically
478:43 - refresh the page
478:47 - hmm
478:53 - i don't think let me just try again
478:57 - make a change save it
479:00 - no
479:01 - it automatically generates the bundle
479:02 - but does not automatically
479:04 - refresh the page
479:08 - okay at this point if you wanted to add
479:09 - that
479:10 - we can start researching
479:13 - about that sort of thing but it's a
479:15 - whole
479:16 - it's a whole can of worms really
479:20 - there are other starters
479:23 - um for example the webpack
479:26 - dev server
479:29 - um
479:31 - i was hoping to go through this today
479:32 - but we don't have time we're at time
479:34 - here
479:36 - webpack is a great alternative to rollup
479:39 - and it has this thing called
479:41 - the the webpack dev server which does
479:44 - exactly this sort of re automatic
479:46 - refreshing of the page
479:48 - and automatic generating of the bundle
479:52 - so i would encourage you if you're
479:54 - interested to go through the docs
479:58 - of webpack
479:59 - they seem to have a very nice
480:02 - getting started section
480:05 - where was that
480:09 - it's in here somewhere
480:12 - but yeah it's it's a similar kind of
480:15 - configuration to the rollup config where
480:17 - there's an entry and then there's output
480:18 - it's not exactly the same as rollup but
480:21 - it's you know the same in spirit
480:23 - webpack i think is uh
480:26 - perhaps more widely used
480:29 - than rollup
480:30 - for projects
480:32 - for you know
480:33 - applications however rollup is very
480:36 - popular for libraries because it has
480:38 - this efficiency around
480:40 - only including the code that you need
480:42 - which is called tree shaking
480:47 - but anyway
480:56 - i would like to leave you all with an
480:58 - exercise for this week
480:59 - export something you made
481:01 - in vishub
481:03 - put it in a github repository
481:06 - um
481:07 - unfortunately i didn't cover that today
481:08 - but you know try to figure it out
481:11 - and then adopt a build tool roll up
481:14 - maybe go through the same process i did
481:16 - or try webpack
481:18 - or try a newer tool like parcel or
481:20 - snowpack or
481:22 - what was that other one that was
481:24 - suggested today
481:26 - i don't even remember
481:29 - what was that one
481:33 - invite
481:35 - invite yeah
481:38 - yeah
481:40 - yeah maybe try out invite
481:43 - and uh
481:46 - yeah i i hope this has clarified
481:50 - the question of
481:52 - how do i work outside of vis hub
482:00 - all right i think we'll well i think
482:02 - we're pretty much done any any any less
482:04 - questions or discussion points
482:17 - if i have to if i want to do the local
482:19 - development then should i
482:22 - start with roll up only
482:24 - i would suggest it that's actually my go
482:27 - to
482:28 - tool
482:30 - it seems to work extremely well
482:34 - uh but
482:36 - maybe webpack
482:37 - is for you i mean
482:41 - totally up to you and some of these new
482:43 - ones
482:45 - like snowpla snowpack or vite you know
482:47 - they claim to be even better
482:49 - than
482:51 - whatever else is there web packet roll
482:53 - up so it's um
482:55 - it's wide open territory
482:58 - it's average it's an ever-changing
483:00 - landscape where things are coming and
483:02 - going people things are hot things are
483:05 - things are cold you know so it's
483:09 - it's really a jungle out there and
483:12 - i've sort of reached the end of what i
483:14 - can
483:15 - recommend because honestly i haven't
483:17 - really kept up with this whole space
483:20 - so it's an you know trial and error and
483:24 - just try a bunch of things and see what
483:26 - works
483:29 - yeah i think i think what i'll do is
483:32 - extend this to next week
483:33 - well actually i should tell you all next
483:35 - week is cancelled
483:37 - the 17th is canceled but i'll resume
483:39 - these streams on the 24th
483:42 - 24th i think that's a saturday
483:46 - and i think it would be worth going
483:48 - through setting up a github repository
483:49 - and maybe walking through
483:51 - using webpack to bootstrap a project
483:56 - and as always i welcome any input
483:59 - or suggestions for things to talk about
484:02 - but then yeah after this we could get
484:04 - into more of the visual stuff d3 making
484:06 - different visualizations and so on
484:16 - all right thanks everyone for joining
484:18 - today
484:19 - i'll uh
484:21 - see you on the 24th and beyond
484:28 - thank you
484:30 - my pleasure
484:31 - very useful thank you
484:37 - testing
484:39 - testing
485:10 - productizing a could base
485:13 - this is
485:14 - part of get it right in black and white
485:16 - but it's a little different because it's
485:17 - just me working on this stuff
485:19 - and this is work i was going to do
485:21 - anyway
485:22 - so why not put it in the series this
485:25 - work is about
485:26 - exporting something that you built invis
485:28 - hub out of vishub putting it into a
485:31 - github repository which is where people
485:33 - you know generally put code and
485:36 - deploying it with github pages
485:50 - also this particular work happens to do
485:52 - some data processing in node js so we'll
485:56 - touch upon that as well
486:23 - this is the thing that i built it's a
486:26 - stream graph of d3 activity for the past
486:29 - 10 years
486:42 - i'm not going to talk at all about how
486:43 - this works
486:45 - but you know think of it as a black box
486:48 - code base that we're going to get out of
486:51 - this hub
486:52 - and
486:53 - sort of productize you know make it a a
486:55 - real open source product
487:33 - i'll start by exporting these files
487:40 - and we get this zip file that has a
487:42 - bunch of files in it
488:21 - but where should we put this stuff we
488:23 - should put it in a git repository let's
488:25 - make one of those
488:53 - in github i'm going to click on this
488:55 - little plus and create new repository
489:10 - i'll call it something like
489:12 - get
489:13 - history
489:15 - stream graph
489:20 - i'll make it public
489:22 - add a readme
489:23 - choose a license i'll make it mit
489:27 - create repository
489:34 - all right we've got this empty
489:35 - repository i'm going to copy this text
489:45 - so that in our terminal
489:57 - we can go to where the repositories are
490:01 - and use git clone
490:04 - and paste that url
490:06 - to clone that down
490:11 - whoops the directory already exists
490:14 - let me try that again
490:23 - and now it's working
490:42 - i'm in a linux terminal by the way this
490:45 - is my typical working environment
490:47 - git is installed you might have to stop
490:49 - and install git on your machine
490:51 - rm means remove
490:54 - uh the dash f means force
490:57 - and the dash r means recursive
491:00 - and git clone is the command that you
491:02 - use to make a copy of all the stuff in
491:05 - the git repository on your machine
491:14 - now that that's there we can cd into
491:16 - that directory cd means change directory
491:20 - and then ls meaning list
491:23 - all the files there
491:24 - and i like to use vim as my editor
491:27 - with nerd tree
491:29 - that lets you see all the files
491:32 - so this is this license is a mit
491:34 - template
491:36 - and this readme is a blank readme
491:45 - i think i'll start this work by just
491:47 - referencing all the input sources in the
491:50 - readme
491:55 - this project aims to
492:05 - visualize get history as stream graphs
492:17 - it draws from the following
492:22 - previous work
492:23 - namely
492:32 - and this is where i'll drop a link to
492:34 - this thing here d3
492:37 - get history stream graph
492:42 - and i'll make that a link in markdown
492:44 - that goes to that url
492:48 - this one here i'll copy it and paste it
492:51 - right in there
492:58 - and this one refers to
493:05 - this thing that's in github gist right
493:08 - now which is a set of
493:10 - node scripts that are forked from
493:14 - original work by ian johnson he actually
493:17 - figured out
493:18 - how to do this how to get the data of
493:20 - commits out of a git repository and into
493:24 - a csv file
493:37 - so i'll link to this one
493:39 - as well
493:46 - ian johnson's set of scripts to pull the
493:49 - git history
493:54 - and i'll make that a link to
493:56 - this url right here
494:03 - okay i'm going to write the file and
494:05 - quit vim
494:06 - and now i'm going to make the first
494:08 - commit
494:10 - git status dash s
494:13 - is how you see
494:14 - what the status is
494:16 - git diff is how you can tell what
494:18 - changed
494:20 - git add
494:21 - makes sure that all the
494:23 - changes you made are sort of staged to
494:25 - be added to a commit
494:27 - and then git commit dash m
494:33 - add links to readme
494:41 - and then finally get push
494:46 - get push
494:55 - will push up the changes that you made
494:58 - into the repository in github
495:08 - so back in github if we refresh the page
495:12 - we should see this new stuff
495:20 - the language of the readme file by the
495:22 - way is markdown it renders to html and
495:26 - looks like this so now you see these are
495:28 - links
495:29 - but in the original
495:31 - text
495:32 - you know this this big heading is just a
495:35 - hash
495:36 - and
495:37 - you can make the bulleted list
495:40 - with these asterisks
496:04 - all right now that we've got this far
496:05 - i'm going to start by pulling in those
496:08 - node scripts and then after that's done
496:09 - we'll pull in the
496:11 - the front end code that makes the
496:12 - visualization
496:43 - here's my fork of ian johnson's gist
496:46 - which has been modified to remove bulky
496:48 - commit message data
496:50 - and to also publish the combined file
496:53 - to adjust
496:57 - and by the way that that stream graph
496:59 - thing it pulls the data from
497:01 - this gist
497:08 - to add these files to the git repository
497:10 - i'm going to start by cloning
497:12 - this gist
497:18 - i'm going to clone it
497:19 - as a peer
497:21 - directory
497:25 - with git clone and then i'll paste that
497:28 - url for the gist
497:31 - okay it's already there on my machine
497:38 - i'll just do a git pull to make sure i
497:39 - have the latest and i do
497:45 - okay so we have a bunch of files here
497:56 - the main things i'm interested in are
497:58 - these javascript files so i'm just going
498:01 - to say
498:02 - copy everything that ends with js over
498:06 - to
498:16 - our get history stream graph
498:18 - directory
498:21 - then i'll go back to that directory take
498:23 - a look okay everything moved over
498:32 - at this point i know we're going to have
498:34 - a bunch of files eventually so i want to
498:36 - start to organize them these files are
498:39 - the data processing scripts
498:42 - which will be i think in a different
498:44 - directory than like the frontend code so
498:46 - i'm going to make that directory now
498:58 - i'm going to make a new directory called
499:00 - data processing
499:03 - scripts
499:06 - and then i'll move over
499:08 - all those javascript files
499:10 - into that directory
499:15 - now our directory looks something like
499:18 - this
499:19 - where we have
499:21 - a bunch of javascript files and a readme
499:23 - and a license at the top level
499:32 - at this point i'll make another commit
499:36 - oh before that i have to add
499:38 - all these files
499:40 - and then i'll make a commit that says
499:42 - add
499:43 - data processing
499:46 - scripts
499:53 - and get push
500:29 - at this point the main focus is just to
500:31 - get all the code into the repository so
500:33 - i'm not even going to run these scripts
500:35 - i'm going to refactor and massage that
500:37 - stuff later but for now the goal is to
500:40 - get the viz running and publish it with
500:42 - github pages
500:57 - to that end
500:58 - i'm going to extract
501:00 - the stuff from our zip file
501:05 - our vishub export
501:08 - into
501:09 - this directory
501:12 - by clicking on extract
501:18 - scratch that
501:23 - by clicking on extract
501:39 - and navigating to that directory
501:48 - and i think i'll make a new directory
501:50 - actually
501:51 - scratch that
501:54 - and i think i'll make a new directory
501:55 - called vishub export
502:00 - just to keep everything totally separate
502:02 - for now
502:03 - i'll hit extract
502:05 - show the files and there they are
502:30 - okay great now we have our vishab export
502:40 - i'll make a commit
502:46 - but first i have to get ad
502:51 - okay i'll push this up
503:09 - okay the main thing that's missing at
503:11 - this point is the data itself the data
503:14 - is currently hosted in a gist and the
503:16 - viz pulls it down from that gist
503:19 - but as we're unifying things we'd like
503:22 - to make
503:23 - the visualization code pull the data
503:25 - from this repository somewhere
503:53 - scratch that whole segment
504:04 - now that everything is there we should
504:06 - just be able to turn on github pages and
504:08 - get that whole hosting working
504:18 - for that i can go back to the repository
504:21 - which now contains
504:23 - vishub export
504:24 - and inside there there's an index.html
504:27 - that should work if we just host it
504:30 - with github pages which we can enable
504:33 - in the settings
504:35 - of the repository
504:39 - we can just scroll down and find
504:42 - pages
504:47 - by default it's disabled but we can just
504:50 - turn it on and say all right host the
504:52 - main branch at the root and click save
504:59 - now it says your site is ready to be
505:01 - published at this url here
505:10 - and now we just need to modify that path
505:13 - to go to
505:15 - slash vishub export slash
505:18 - index.html i think
505:21 - if i just paste that in it's going to
505:22 - work
505:33 - not quite yet
505:42 - it says
505:43 - it's the site is currently being built i
505:45 - guess it might take some time
506:04 - okay i just refreshed and boom there it
506:07 - is
506:39 - all right that's how you can export
506:41 - something out of this hub and put it
506:43 - into a github repository and then enable
506:46 - hosting with github pages
506:56 - from here on out i'm just gonna massage
506:58 - this code base to be
507:00 - coherent and clean
507:05 - and also make it so that the viz pulls
507:07 - the data from the repository
507:10 - as it gets generated
507:12 - in this repository
507:42 - the first thing i'm going to focus on is
507:44 - whipping these uh node scripts
507:47 - into shape currently they're kind of a
507:49 - mess they create github repository they
507:52 - create git repositories
507:54 - as peers of the source files which is
507:57 - not quite right
508:03 - so if i open up the editor
508:07 - go into data processing scripts
508:36 - there's a bunch of different scripts
508:37 - that do different things this one clones
508:39 - all the d3 repositories from
508:42 - dependencies
509:02 - and then you run this knife sv thing
509:05 - that generates a bunch of files
509:08 - json which converts those files to json
509:11 - and then combine which combines all of
509:14 - those together
509:15 - into a single file
509:27 - ideally we would just have one script
509:28 - that we could run so let me start there
509:31 - and see where it goes
509:42 - i'll make a new file called index.js
509:45 - under data processing scripts
510:08 - and this will be the main
510:10 - thing that runs so first we clone the
510:13 - repositories
510:20 - convert to knife
510:24 - sv files
510:30 - convert to json files
510:40 - and combine
510:42 - the output file
511:05 - since this is node
511:07 - i'm just going to use
511:08 - require
511:11 - rather than import
511:19 - if we say require dot slash clone
511:22 - that should pull in the stuff from this
511:25 - clone
511:26 - file over here
511:34 - i'll call it clone when we import it
511:38 - but the thing is this is currently a
511:40 - script
511:42 - that runs
511:45 - so instead of just running a script
511:49 - i'm going to define a function called
511:52 - clone
511:56 - which is a function that just goes
511:58 - through each of the dependencies and
512:01 - clones them
512:09 - and then in node we can export it by
512:11 - saying module dot exports
512:18 - equals clone
512:24 - now we can just proof that this is
512:26 - working by saying console.log
512:28 - clone it should output a function
512:34 - and then i'll make a new
512:36 - terminal
512:37 - window here
512:43 - navigate to the data processing scripts
512:45 - directory and then run it node
512:48 - index.js
512:54 - okay it's looking for d3s
512:56 - package.json
513:25 - yeah those scripts assume that the d3
513:28 - repositories is cloned
513:31 - but that's not really the case
513:38 - so i'm just going to take this
513:40 - package.json and drop it
513:43 - into our
513:45 - repository
513:52 - i'll call it d3package.json
513:57 - create that file
513:59 - paste the content
514:04 - and then i believe it's this depends
514:06 - thing that is pulling in that file
514:13 - let's change this path to be d3
514:15 - package.json
514:19 - and see if it works now
514:22 - okay worked we got a function great
514:27 - now this clone function itself
514:36 - just runs
514:38 - get clone and so
514:41 - um
514:42 - you know i'm not even sure where
514:45 - these would end up
514:50 - let's run it and find out
514:54 - in index.js we can actually run
514:57 - that function
515:06 - so when i run this
515:08 - let's do a bunch of stuff i'm going to
515:10 - stop it before it gets too far
515:13 - and now see there are all these d3
515:15 - repositories right here
515:18 - in the same directories all the source
515:19 - files which is kind of a mess
515:22 - so i'm just going to delete
515:24 - all those
515:28 - remove everything that starts with d3
515:33 - dash
515:37 - because i want to keep d3 package jason
515:40 - okay now those are all gone i think the
515:43 - best approach might be
515:47 - to have this clone script make
515:50 - like a directory
516:06 - we can run exec
516:08 - outside of all that
516:12 - and have the command be
516:19 - make directory repositories
516:30 - and we could handle errors here but
516:34 - i don't think we really need to
516:39 - and then we would a cd
516:41 - into repositories and then run git clone
516:44 - on all this stuff
516:45 - we'll see if that works
516:49 - i'll run node index again
516:54 - and then again i'll stop it with ctrl c
516:58 - huh it did not work
517:06 - it did create the repositories directory
517:08 - though
517:14 - i guess the cd didn't work
517:22 - yeah it looks like it doesn't work for
517:24 - cd
517:59 - it looks like we can pass something into
518:01 - exect called
518:03 - cwd
518:05 - let's try that
518:14 - so instead of cd repositories we just
518:17 - pass
518:19 - an object
518:27 - with cwd
518:34 - dot slash repositories
518:39 - would that work
518:55 - i'll get rid of those d3 things again
519:12 - and then see what's in repositories okay
519:15 - it worked look at that
519:19 - all the stuff has been cloned into
519:21 - repositories
519:24 - excellent
519:30 - okay at this point i'll make a commit
519:38 - oh you've added another git repository
519:43 - inside
519:48 - yeah you know i think we just want to
519:50 - totally ignore
519:52 - that directory which we can do by
519:54 - editing
519:56 - dot git ignore
519:59 - if i just put that in get ignore
520:12 - okay it's still added them
520:16 - but let me just remove that whole thing
520:29 - okay now if i go and run that thing
520:32 - again
520:35 - it's going to clone all the repositories
520:44 - now when i do git add
520:47 - it doesn't catch them
520:52 - but i think they are still there yep
520:55 - okay so git ignore is working
520:59 - now i'm going to make a commit that says
521:07 - start iterating
521:09 - data processing script
521:16 - one thing i don't like about this is
521:17 - when you run it it doesn't even tell you
521:19 - what it's doing or how far along it is
521:29 - so i'm just gonna add a little something
521:30 - that says
521:32 - console.log command
521:35 - just so we know which command is running
521:49 - also we may as well
521:52 - output the error just so we know
521:54 - if anything happens
521:58 - or rather
521:59 - if there's no error error is null
522:01 - so let's say if
522:04 - error then console.log error
522:15 - okay now we get some
522:17 - some stuff
522:20 - git clone fails
522:22 - when it already exists
522:24 - okay yeah that makes sense
522:32 - so let me remove that repositories
522:34 - directory
522:35 - and try again
522:37 - okay
522:38 - it's running all this stuff
522:50 - and i finished amazing
523:06 - so if we run that again
523:09 - it's gonna give us all this um these
523:11 - errors
523:12 - but i think
523:15 - i wanted to actually just
523:19 - not tell us
523:20 - if there's an error
523:21 - because
523:23 - i could imagine you know running this
523:26 - this
523:27 - index again and again
523:31 - and if it's already cloned you know it's
523:33 - already cloned
523:38 - so now let's let's work on the knife
523:42 - aspect
523:48 - just copy that line
523:52 - change all clone to knife
523:56 - and then we just run knife
524:04 - but over in knife
524:09 - we need to again make
524:11 - an exported function
524:15 - so i'll make a function called knife
524:23 - that runs this command
524:33 - and then add it to module.exports
524:38 - module.exports is knife
524:43 - now if we run this whole thing
524:50 - oh it's trying to cd into
524:53 - the repositories
524:55 - but it's looking at the wrong place
525:01 - so instead of cd repo
525:03 - it should be cd
525:11 - repositories
525:13 - slash repo
525:17 - let's try that
525:36 - cannot create dot dot slash data slash
525:38 - d3
525:39 - okay that makes sense because we don't
525:41 - have a data directory
526:03 - similar to clone
526:05 - we might want to make a directory
526:10 - make directory data
526:23 - so now let's try it
526:39 - okay that did not work i think we need
526:42 - to be going dot dot slash dot dot slash
526:45 - because here we go two levels down not
526:46 - one
526:52 - so let me try that dot dot slash dot dot
526:55 - slash
526:58 - okay it's working
527:00 - and we're getting all these nulls
527:02 - because
527:04 - it's doing console.log error
527:09 - i'm going to change it to only
527:12 - console.log the error if there is
527:15 - an error that's not null
527:27 - okay now it runs fine
527:34 - now let's run the json conversion
527:39 - which we can get from that file
527:45 - replace knife with
527:47 - json
527:49 - and in json we can say
527:57 - const json equals a function
528:02 - that runs all this stuff
528:09 - and then export that
528:15 - let's see if that works
528:28 - it seems to have worked but i don't
528:30 - really like
528:31 - how we don't know what's what it's doing
528:35 - so i'm going to add a little bit of
528:37 - console.log
528:41 - cloning dot dot
528:48 - knifing
528:50 - dot dot dot
528:56 - converting to jason
529:01 - dot dot dot
529:05 - that's a little more
529:06 - user friendly i sort of know what's
529:08 - happening
529:12 - and lastly we need to combine
529:19 - the output file
529:25 - dot dot
529:30 - so we can run combine
529:35 - which we get from
529:39 - combine
529:41 - dot js
529:48 - and here again
529:51 - we need to make this a function
529:58 - that runs all this code here
530:04 - and then export it
530:08 - like that
530:20 - all right let's see if it works
530:31 - okay
530:32 - that looks good we've got this new file
530:35 - all d3 commits
530:43 - which looks something like that
530:55 - and you know i'm always a bit hesitant
530:57 - to add data to repositories because
531:01 - the files are usually pretty big
531:25 - and in the case of this one there is
531:27 - actually further aggregation
531:32 - that happens in the front end
531:36 - it actually aggregates
531:38 - by
531:39 - weak
531:48 - yeah with some stuff from d3 utc week
532:06 - and then it applies some smoothing
532:10 - to that data
532:11 - but you know the smoothing i kind of
532:13 - want to keep that on the front end so
532:14 - that if we wanted to we could
532:16 - vary
532:17 - how the smoothing is done
532:26 - but i think it would be advantageous to
532:29 - do this data processing
532:31 - in the node script so that
532:33 - we don't have to fetch a 500 kilobyte
532:36 - file we can fetch a much smaller file
532:39 - that just has the weekly aggregations
532:43 - and then we wouldn't need to add this
532:45 - data file to the git repository at all
533:12 - in our data processing script we can add
533:15 - another step
533:22 - aggregate by week
533:35 - i'll call it aggregate
533:40 - and we can get that from
533:52 - aggregate
533:53 - dot js
534:06 - which is a totally new file
534:11 - which will have a function called
534:13 - aggregate
534:21 - and that will be exported
534:34 - this is where we get to do the fun
534:36 - exercise of porting browser-based code
534:39 - into node
534:52 - this code here
534:54 - expects
534:55 - data
534:57 - as
534:59 - the output from the previous script in
535:02 - this pipeline
535:12 - namely this file here all d3 commits
535:25 - so let's load that file here
535:32 - with fs.read
535:35 - file sync
535:47 - all d3 commits
535:51 - jason
535:58 - and we can call that data
536:11 - string
536:20 - and then data would be json.parse
536:25 - data string
536:29 - and those console.log data just to see
536:31 - if it worked
536:42 - fs is not defined fair enough
537:02 - i'll look at some of these other scripts
537:05 - it just requires fs which is the
537:07 - built-in node file system module
537:18 - and it looks like we might need a dot to
537:20 - string
537:21 - on the
537:22 - result from read file sync
537:39 - but if we run it without that it
537:40 - actually works
537:42 - just fine so maybe we don't need that
537:44 - after all
537:47 - okay we've loaded in this data
537:49 - now
537:50 - we can
537:54 - take the stuff out of his hub that
537:56 - processes this data
538:06 - i'm going to copy all this code up until
538:09 - the place where it computes
538:11 - layer data
538:20 - and what we're calling layer data here i
538:22 - think will be
538:23 - the output it's the aggregated data
538:38 - so i'll paste all that stuff in here
538:43 - this code imports a bunch of stuff from
538:45 - d3
538:52 - but since we're in node
538:54 - we can say
538:57 - const d3 equals
539:00 - require
539:02 - d3
539:09 - and
539:10 - for that to work
539:16 - in our data processing scripts we really
539:18 - probably should have a package.json
539:23 - to track our dependencies like d3
539:27 - to create a package.json i'm going to
539:28 - run npm init
539:32 - and i'll just you know accept all the
539:33 - defaults
539:41 - and then we can run npm install
539:46 - dash s meaning update package.json
539:50 - d3
539:56 - and if we take a look at package.json
540:00 - this is how it looks
540:02 - that's fine main thing is it has the
540:04 - dependencies now
540:08 - that means that
540:12 - this line of code here will work
540:18 - oh we also need
540:20 - array blur no no we don't
540:22 - we don't that'll be done on the client
540:24 - side
540:25 - that's the smoothing
540:30 - we can reconcile this
540:33 - es6 import syntax with our es5 you know
540:36 - node
540:38 - environment by saying const
540:41 - all this stuff
540:44 - equals d3
540:46 - this is destructuring right here
540:48 - and i might as well move that up
540:52 - to where it's imported
541:12 - okay so let's organize this code here
541:14 - we've got parse date and layer which are
541:17 - statically defined
541:19 - so i'll pull those out
541:22 - transform data equals data well we don't
541:24 - need that because we're already inside
541:26 - of a function that has data there
541:28 - visible
541:38 - all this stuff should run just fine
542:06 - and then down here is where it sort of
542:08 - trails off it's we gotta just wrap it up
542:10 - here
542:12 - and we we have layer data
542:20 - which we somehow somehow need to get
542:22 - into a file
542:27 - so let's see what layer data looks like
542:30 - here and see if the code runs
542:33 - to this point
542:35 - so if i run
542:36 - index.js
542:49 - apparently layer data
542:51 - is a big array
543:26 - probably the easiest thing to do would
543:28 - just be
543:29 - you know make a
543:31 - an object
543:38 - i'll call it aggregated data
543:46 - and
543:47 - layer here is the name
543:49 - of the layer
543:51 - so i'm just going to say
543:55 - aggregated data at
543:57 - layer
544:01 - equals layered data
544:06 - now we have something that we can output
544:09 - to
544:09 - a json file
544:14 - let's see how did that other module do
544:16 - it
544:18 - there it is fs.write file sync
544:29 - so i'll just drop that line and it calls
544:31 - json.stringify
544:33 - and i'll just pass in
544:35 - aggregated data
544:37 - to there
544:45 - and the file name i think i'll just call
544:47 - it
545:04 - aggregated data
545:12 - now if i run everything
545:25 - we have a new file called
545:27 - aggregateddata.json
545:34 - it contains a bunch of zeros but i think
545:36 - that's okay
546:54 - each of these numbers corresponds to a
546:57 - week
546:58 - but
546:59 - you wouldn't know that based on this
547:01 - data
547:07 - in our code the weeks are available here
547:09 - as all weeks
547:22 - so let me just make that available here
547:30 - in aggregated data as all weeks
547:44 - and then we can nest
547:46 - the repository
547:52 - data under
547:54 - say repositories
548:04 - now we can say
548:05 - aggregateddata.repositories
548:09 - add layer equals layer data
548:11 - let's try this
548:28 - oh
548:41 - okay now we have all weeks
548:43 - the format is a little verbose
548:51 - i kind of want to just clean that up
549:01 - we already have this parser so let's
549:04 - just add a formatter
549:08 - format date is time format
549:18 - and we need to get that out of d3 as
549:20 - well
549:31 - now um
549:34 - instead of all weeks i think i'll call
549:35 - it
549:36 - dates
549:38 - because you know we might want to use
549:40 - months or something in the future
549:44 - and then we can say all weeks dot map
549:49 - format date
549:56 - now when we run this
550:06 - oh we get an error
550:31 - i'll just backtrack
550:43 - okay now it works i don't know how i
550:45 - what i broke or how i broke it
551:01 - just introducing the formatter shouldn't
551:04 - do anything
551:07 - but it does what
551:16 - that's odd
551:19 - if i don't create the formatter
551:25 - all by
551:36 - myself yeah
552:19 - mommy
552:36 - i don't know twilight zone moment
553:00 - okay let's try it again
554:39 - you
555:12 - okay this is super weird it says you
555:14 - know d.date is undefined
555:18 - if we do it like this
555:21 - but if we do it like this
555:28 - explicitly pass one thing into format
555:31 - date
555:32 - then it works
555:39 - weird might be something about a second
555:41 - argument to format date
555:43 - or something but anyway now it's working
555:45 - just fine
556:03 - now if we take a look at the files
556:07 - we can see that the aggregated data now
556:09 - is only 31 kilobytes
556:12 - instead of a whopping
556:14 - 426
556:25 - we should just make sure that this data
556:26 - doesn't end up in the repository
556:33 - so i'm going to delete this file
556:42 - and i'm going to tweak this script
556:45 - to
556:46 - generate this inside of data
556:50 - inside of the data directory
556:53 - data slash
556:54 - all d3 commits
556:59 - and then when we load that we need to
557:00 - get it from
557:04 - this light the same place data slash all
557:06 - d3 commits
557:14 - and then in our git ignore
557:17 - we can also ignore the data directory so
557:19 - that everything in there does not
557:22 - end up
557:23 - inside the git repository
557:30 - so i'll run all that stuff one last time
557:36 - okay it worked
557:42 - if we do a git status we see
557:46 - the stuff here
557:54 - generally looks good but i see there are
557:57 - swap files being tracked
558:04 - and also node modules is being tracked
558:07 - by git
558:11 - we don't want that so let's go back to
558:13 - our git ignore and say
558:15 - any
558:17 - swap file this is just a temporary thing
558:19 - that vim generates that we don't need
558:21 - and get
558:23 - also node modules
558:38 - okay great there we have it we have
558:41 - aggregateddata.jsonvisible which is only
558:43 - 30 kilobytes
558:45 - so i feel good about adding all this
558:47 - stuff
558:52 - and then i'll make a commit
558:56 - add aggregated data
559:23 - all right now that we've scratched that
559:40 - all right
559:44 - scratch that
559:50 - now that we've got the data processing
559:52 - scripts sorted out let's deal with the
559:55 - front-end code
560:04 - the front end code is currently in this
560:06 - vis-hub export thing
560:09 - which has
560:10 - sort of a sketchy
560:13 - dead simple
560:14 - package.json and rollup config
560:24 - the first thing i want to do here is
560:27 - make sure that we have a proper setup
560:33 - so i'm going to turn to
560:35 - roll up starter app
560:49 - we can pull things in from here
560:52 - and i like to do it one at a time
560:56 - so here's package.json
561:08 - since the thrust of this project is the
561:12 - front end i'm going to let the front end
561:13 - code live
561:15 - at the root of the repository
561:22 - so i'll just drop that stuff
561:24 - into package.json
561:29 - but instead of
561:30 - roll up starter app we should call this
561:40 - git history stream graph
561:47 - like so
561:53 - everything else looks decent
561:55 - i'm just not sure that it's at the
561:57 - latest version oh and we don't need
562:00 - date functions
562:02 - that's something that's used by you know
562:04 - the starter app
562:20 - i'm just not sure all this stuff would
562:22 - be at the latest version
562:24 - so i'm going to run
562:27 - ncu
562:29 - which is
562:30 - you can get it with node
562:34 - sorry npm install
562:37 - g
562:43 - npm check updates
562:54 - this is a little utility that goes
562:55 - through your package.json and checks if
562:58 - all the versions are the latest
563:03 - we can run it with ncu
563:08 - and it turns out there's some version
563:10 - increments
563:12 - and so i'm going to run
563:13 - ncu-u to actually modify package.json to
563:18 - use all the latest versions of things
563:20 - and then i'll run npm install
563:32 - while that runs we can pull in some
563:34 - other stuff
563:41 - from this starter app
563:46 - such as the rollup config
563:50 - this is more of a production oriented
563:54 - configuration
563:55 - for rollup
564:20 - so i'll make a new file called
564:21 - rollup.config.js
564:26 - and i will drop this content
564:29 - into there
564:44 - now let's look at our files
564:47 - and
564:48 - take what we need from the vishub export
565:05 - there are really only two main modules
565:07 - here index.js and transform data
565:11 - i'm inclined to make a new directory
565:13 - called src the source directory
565:17 - and put those files there
565:26 - so i'll just move those into
565:30 - the source directory
565:40 - and notice that the rollup config looks
565:43 - for
565:44 - src slash
565:46 - main.js i'll just change that to index
565:50 - dot js
565:54 - and index.js
566:03 - imports a lot of stuff from d3
566:14 - and also from
566:16 - d3 area label
566:30 - now this is a fork in the road where we
566:32 - could choose
566:34 - how we want to include our dependencies
566:37 - we could either go the traditional route
566:40 - of
566:40 - pulling in the dependencies into our
566:43 - bundle having a huge bundle with all of
566:46 - the functions from d3 and these
566:48 - libraries that we're using
566:50 - or
566:51 - we could opt to
566:53 - pull our dependencies from a cdn like
566:56 - unpackage and have our bundle only
566:59 - contain our code and not any other
567:01 - library code
567:03 - that's what i'm inclined to do because
567:05 - we're publishing this with github pages
567:08 - and to publish this stuff with github
567:09 - pages we need to include the bundle
567:12 - in the git repository
567:14 - and if we include a bundle in the git
567:17 - repository that contains like d3 and and
567:20 - libraries
567:21 - it's going to bloat the git history
567:24 - so that's why at this juncture i'm going
567:26 - to opt toward using
567:29 - libraries that come from a cdn
567:40 - to do that we need to adopt some of the
567:43 - stuff that's going on in the viz hub
567:46 - config for rollup
567:51 - namely marking things as external
567:59 - i'm going to bring that line
568:00 - into our rollup config
568:03 - it says okay d3
568:05 - is external
568:16 - also globals
568:18 - and we need that as well under output
568:24 - so that d3 can be resolved
568:27 - to the right thing at runtime
568:47 - since we're using d3 area label as well
568:51 - this
568:52 - piece also needs to be pulled in
568:55 - from our rollup config
568:59 - it just says
569:00 - anything that gets imported from the d3
569:03 - area label package
569:04 - looks to the d3 global
569:07 - and that just happens to be how that
569:09 - library is set up it adds more stuff
569:12 - to the d3 global
569:23 - okay and finally we have index.html
569:27 - where should we put this
569:28 - and this is a kind of ugly
569:31 - indentation wise
569:35 - let me just fix the formatting
570:15 - okay we're pulling in these three
570:17 - libraries from on package
570:20 - and then we're running our
570:22 - bundle.js
570:24 - uh but is that where it ends up
570:27 - in our new rollup config
570:31 - no it ends up in public slash
570:34 - bundle.js okay good to know that makes a
570:37 - lot of sense
570:58 - the directory name public is typically
571:01 - where
571:02 - index.html lives and also css maybe
571:05 - images
571:07 - or data files things that get loaded
571:10 - by the client
571:22 - so i'll go ahead and make a new
571:23 - directory called public
571:27 - and i'm going to move
571:31 - index.html into
571:35 - public
571:50 - and you know that's where the data
571:52 - should live as well so i'm going to move
571:58 - aggregateddata.json
572:03 - into
572:05 - public
572:14 - there's also styles.css which can go
572:18 - in public as well
572:23 - okay now public has our data our html
572:26 - and our css
572:43 - let's see if our rollup build works
572:57 - see our index.html expects a file called
573:00 - bundle.js
573:06 - and our rollup config outputs a file
573:09 - called bundle.js in public
573:15 - however that's not there at the moment
573:20 - to make that
573:21 - exist
573:23 - we can look at our scripts in
573:24 - package.json see we have a build script
573:29 - which will just run rollup to generate
573:31 - that bundle
573:34 - invoke that we can say npm run build
573:37 - like so
573:41 - and it says unresolved dependencies and
573:44 - also missing global variable name
573:51 - okay we just have to take some more
573:53 - stuff over from our
573:56 - other rollup config
573:59 - from vishub
574:04 - namely we need to add array blur and d3
574:08 - area label
574:16 - under the external
574:18 - configuration
574:22 - like that
574:28 - also in globals we need to define
574:31 - which global array blur
574:33 - resolves to
574:43 - it just so happens that that library is
574:46 - also set up
574:47 - to add stuff to the d3 global
574:52 - so we can say array blur resolves to the
574:55 - d3 global
574:59 - let's try that again
575:02 - okay no errors
575:05 - and now bundle.js has been generated
575:09 - in the public directory
575:16 - and it looks something like this
575:21 - it's pretty small
575:22 - this has been minified
575:25 - by the way because
575:27 - in the rollup config
575:30 - terser is used terser is a minifier
575:39 - okay great now let's see
575:41 - if everything
575:43 - actually works
575:47 - there is a script here called start
575:49 - which just runs serve which is another
575:52 - npm package and it serves the public
575:55 - directory
575:58 - let's try that npm
576:00 - start
576:04 - okay we have a local http server running
576:07 - on port 5000
576:11 - and if i run this boom it works
576:14 - look at that
576:20 - amazing
576:22 - so the work is done
576:31 - the final step here is to you know
576:33 - commit whatever we've done
576:35 - and make it work with github pages as
576:38 - well
576:53 - also i'm remembering that i manually
576:56 - copied the data over into the public
576:58 - directory
576:59 - but ideally our scripts would output
577:02 - there directly
577:04 - from the aggregate step
577:06 - so instead of writing
577:07 - aggregateddata.json i'm going to change
577:09 - this to dot
577:11 - dot dot public
577:13 - slash aggregated data
577:20 - this way if we modify any of these
577:22 - scripts we can just run it and then push
577:25 - to github and it'll actually
577:27 - automatically
577:29 - deploy to github pages with the fresh
577:32 - data
577:47 - i'm just going to run that
577:49 - processing script one last time to make
577:51 - sure that the last step works
578:06 - i think it worked but to be sure i'm
578:08 - going to delete this file
578:12 - now it's gone
578:14 - i'll run this again
578:32 - and i'm getting an error now
579:29 - scratch that
579:36 - okay that ran
579:39 - and now in public that file exists boom
579:42 - all done
579:46 - get status to see what changed oh a lot
579:48 - of stuff changed
579:51 - i'll add everything to get
579:56 - this change set looks good
580:03 - make front end work is my commit message
580:08 - push that up
580:24 - now in the github pages config
580:28 - since we have a public directory now
580:30 - we can actually change this
580:32 - configuration
580:35 - so that instead of serving the root at
580:37 - the root it should serve
580:40 - slash
580:43 - public
581:01 - scratch that section
581:08 - okay now we can go to
581:11 - this github pages site
581:14 - oh now shows the readme that's pretty
581:16 - cool
581:17 - but we can go to slash public
581:20 - and we should get the visualization and
581:22 - we do all right sweet
582:39 - you
583:02 - ideally we would not need this slash
583:04 - public
583:18 - but in the settings for github pages
583:21 - we can only select between two options
583:24 - the root and slash docs
583:29 - so the thing to do might be rename
583:32 - public to docs
583:37 - that way
583:38 - we could
583:40 - you know
583:42 - just use the root
583:44 - of this url
583:46 - and that would resolve to the working
583:48 - visualization
583:53 - so i'll go ahead and do that i'll move
583:55 - public
583:58 - to be called docs
584:04 - and then i'll search for all mention of
584:06 - public
584:20 - which gives us these
584:22 - three places that we need to change
584:25 - public to docs
584:26 - and by the way i'm using this a g
584:29 - function which is a really nice thing
584:31 - called the silver searcher it's like a
584:33 - command line search
584:35 - utility
584:40 - okay so in roll up config
584:44 - i'll change
584:46 - public
584:48 - to docs
584:51 - yeah that's the one
584:57 - same thing in package.json
585:02 - public to docs
585:07 - and lastly in our aggregate script
585:15 - public to docs
585:18 - all right there we go
585:26 - i'll add that to git make commit
585:35 - migrate public to docs for github pages
585:43 - push that up
585:49 - now i can change this setting to use
585:51 - slash docs
585:59 - and now if i go to this url
586:13 - it'll take a minute to change
586:18 - but if i refresh
587:05 - now
589:45 - i'm in the middle of something
589:47 - that i really need to have everything in
589:49 - my head
589:54 - we just sat down
590:35 - you
591:21 - it should eventually show up
591:45 - if somebody can get
591:51 - okay
592:13 - um
592:29 - oh i could
592:30 - um
593:01 - let me just finish what i'm doing
593:02 - sweetie hold on
593:23 - you
594:00 - the last sort of loose end we need to
594:02 - wrap up here
594:04 - is the fact that our our client program
594:07 - is still pulling in data from github
594:09 - gist see check it out under source
594:12 - index.js
594:17 - we've got this data url
594:19 - which is still pulling from github gist
594:22 - this one needs to change to pull it from
594:25 - dot slash
594:28 - aggregated data
594:30 - dot
594:31 - json
594:43 - and this is where you know we've moved a
594:45 - bunch of stuff
594:47 - from the front end to the back end or
594:49 - the pre-processing step
594:52 - so
594:53 - we're gonna have to modify this
594:55 - transform data function
595:04 - so that it does not do
595:06 - all the stuff
595:08 - that it did before
595:10 - rather it's going to expect
595:15 - this new format for our aggregated data
595:18 - which contains dates
595:21 - and
595:23 - what else
595:27 - repositories
595:35 - so we can destructure those from data
595:45 - and let's take a look at our aggregate
595:47 - step
595:54 - it does a bunch of stuff in here so we
595:56 - can delete that from the front end code
595:58 - we don't need to do the grouping
596:03 - we don't need to compute
596:07 - all this stuff
596:09 - we do however want to apply the
596:10 - smoothing
596:22 - layers here represents the list of
596:24 - repositories
596:28 - so we can derive that from repositories
596:30 - by saying object
596:32 - dot keys
596:34 - repositories
596:42 - and all weeks
596:45 - is actually
596:46 - dates
596:57 - however we do need to parse those
596:59 - strings into dates
597:02 - using
597:03 - parse date which we have defined there
597:12 - so how about this instead of doing this
597:13 - destructuring
597:15 - we can say
597:17 - data dot repositories and we can also
597:19 - say
597:22 - dates equals data dot dates dot map
597:28 - a function that takes as input
597:35 - one date and returns parse
597:39 - date of that date
597:45 - now dates should be defined correctly
597:50 - and we should be able to
597:55 - set everything up you know just let it
597:56 - run like it did before
597:58 - however there's this thing called data
598:00 - by layer
598:01 - what is that i think i clobbered its
598:04 - instantiation
598:09 - we can use git diff
598:11 - to figure that out
598:17 - yeah here it is i deleted it by accident
598:21 - it's just a new map
598:28 - so we can bring that back
598:30 - scratch that
598:34 - so we can bring that back right here
598:36 - data by layer a new map
598:46 - and now let's see if it works
598:48 - so
598:50 - npm start just serves
598:52 - everything what we want to do now is
598:54 - actually regenerate the bundle
598:58 - so let's try this dev script
599:00 - npm run dev
599:02 - that will run
599:04 - in parallel both the start script and
599:07 - the watch script and the watch script
599:10 - is essentially the same as the build
599:12 - script but it watches meaning every time
599:14 - you change a file it automatically
599:17 - regenerates
599:18 - bundle.js
599:21 - so i'll shut down npm start and run
599:25 - npm run dev
599:36 - oh look at that we have some warnings
599:38 - that's really nice unused external
599:40 - imports utc week utc weeks
599:44 - and group
599:46 - are imported but never used
599:52 - yeah that makes a lot of sense
599:54 - so
599:55 - we can just get rid of those
599:57 - we don't need uct week you see two weeks
600:00 - or group
600:04 - great see i wrote that file and then it
600:06 - updated bundle
600:08 - immediately automatically
600:12 - let's see if the front end works
600:20 - i believe it was localhost to 5000
600:25 - it appears broken it says grouped data
600:28 - is not defined
600:37 - okay let's see what
600:39 - what is that
600:48 - i think what used to be called grouped
600:50 - data is now
600:52 - called
601:10 - something else but no that's actually
601:12 - not the case
601:14 - what we have is layer data
601:18 - yeah i remember this stuff is actually
601:22 - in
601:23 - our
601:24 - data processing script in the aggregate
601:27 - step
601:29 - yeah so what we're doing is we're saving
601:32 - layer data to the file
601:34 - so we can just get layer data out
601:38 - of the file
601:40 - by saying
601:44 - data dot repositories
601:50 - at layer
601:51 - like that
602:02 - okay let's see if that worked
602:05 - all weeks is not defined
602:11 - yeah i think we re we changed that to be
602:13 - called dates
602:22 - t is not an iterable hmm
602:48 - i don't think i can do it sweetie i'm
602:50 - sorry
603:11 - you
603:46 - okay it says t is not an iterable and if
603:48 - we follow
603:51 - the code it's it's when it tries to
603:52 - compute extent of data
603:55 - apparently data
603:57 - is not an iterable
604:01 - so let's see we just need to connect the
604:03 - dots
604:19 - data i believe was the original
604:23 - data
604:24 - so we actually need to
604:28 - change the frame code
604:48 - so that it doesn't need
604:50 - data at all
605:15 - all it really needs that for is to
605:17 - compute
605:18 - the domain of the x scale which is
605:22 - the extent of the dates
605:32 - and we have those dates available
605:40 - so we can just expose these dates
605:44 - instead of data
605:49 - and then we can use that
605:51 - to compute the extent
605:55 - it's just going to be the extent of the
605:56 - dates
606:09 - and it sort of worked
606:12 - got something kind of funky going on
606:16 - i don't know why the dates go back to
606:18 - 1970.
606:25 - it appears that we might have like an
606:27 - invalid
606:29 - date
607:01 - yeah the dates are going back to like
607:03 - 1971.
607:06 - why is that
607:21 - okay well that's that's what's appearing
607:23 - in our aggregated data
607:31 - so why is that
607:33 - looks like there's some bug in our
607:35 - data processing scripts
607:50 - oh here it is it's all weeks.map
607:53 - that should be
607:59 - well no that looks fine format date of
608:01 - date let's just format all the dates
608:19 - let's counsel.log all weeks at index 0
608:22 - to see what is the first date here
608:39 - it says 2013.
608:43 - that seems right
608:57 - so what are
609:00 - what's going wrong here what if we pass
609:02 - that into format
609:04 - date
609:11 - it says 1969
609:14 - 1227.
609:16 - why
609:57 - you
610:25 - you
610:55 - okay this is super weird if i just bring
610:57 - back the code like this
611:02 - it gets the correct date
611:04 - and
611:06 - the stream graph appears correctly
611:08 - okay weird
611:16 - but we seem to be missing a bunch of
611:18 - commits on d3
612:15 - uh
612:59 - you
614:09 - you
618:03 - okay
619:59 - you
621:37 - you
622:19 - you
623:57 - you
625:21 - okay the issue there was
625:23 - it was calling exec
625:26 - and this command was not finishing
625:30 - before the next step in the pipeline ran
625:33 - that's why we were missing some commits
625:34 - so i just changed it to be exec sync
625:38 - so this command actually totally
625:40 - finishes before the next one runs
625:43 - and that was the source of our strange
625:44 - errors
625:46 - so now if we run this
625:49 - and we load the data into the viz it is
625:53 - full and complete
625:55 - and has all our stuff in it
625:57 - all right that's how you can productize
625:59 - a code base
626:06 - all right welcome everyone to episode 8
626:10 - of get it right in black and white
626:13 - today
626:14 - the goal is to build a d3 scatter plot
626:18 - from scratch
626:23 - so introductions for new folks if any i
626:25 - see
626:26 - oh someone joined the call and left but
626:28 - you're all welcome to join
626:31 - if any money if anybody does join i'll
626:32 - come back and uh
626:34 - we can do introductions
626:39 - i'd like to begin by reviewing some of
626:41 - the submissions from the last episode
626:44 - which was two weeks ago now but let's
626:46 - take a look at what folks did
626:54 - that was the one on javascript modules
626:56 - and build tools
626:58 - and
627:01 - here's a nice roll up example
627:04 - by
627:06 - floating purr
627:09 - very nice very nice
627:15 - and here's another one
627:18 - that uses vite
627:20 - this looks kind of interesting i've
627:21 - never used devite but seems to uh it
627:24 - seems to work
627:31 - and here's another one
627:33 - that seems to be just the straight
627:35 - vishub export which works too
627:37 - but yeah i'm really glad to see folks
627:39 - are able to get their stuff out of his
627:41 - hub into github
627:44 - so that's
627:45 - that's one of the most commonly asked
627:47 - things like how do you get out get out
627:48 - of this hub
627:49 - so that's how and hopefully that's
627:52 - satisfactory
627:57 - and by the way i recorded um episode 7
628:01 - by myself
628:03 - a couple days ago i'm going to release
628:05 - it as a video soon because i was doing
628:07 - this work anyway of of getting a uh
628:10 - you know makings like an open source
628:12 - product out of something that's in vis
628:14 - up and i just recorded it so
628:16 - i'm going to post that
628:17 - eventually it's not posted yet but
628:19 - that's why we're on episode 8 now not
628:21 - episode 7.
628:33 - metal guitar covers hello everyone
628:36 - hey feel free to join the audio if you'd
628:38 - like
628:39 - it'd be a lot of fun
628:45 - today we'll build a scatter plot
628:48 - and the goal here is to create a vanilla
628:51 - html
628:53 - implementation
628:54 - of a d3 scatter plot that uses modern d3
628:57 - conventions
628:59 - and
629:00 - implements this pattern of decoupling
629:03 - rendering from data
629:04 - processing the goal of that is to make
629:07 - it easier down the line to swap out the
629:09 - rendering logic
629:10 - if you want to with another framework or
629:13 - canvas
629:14 - or what have you
629:16 - and
629:17 - i hope to get out of this
629:20 - a forkable template
629:22 - that can be sort of a go-to resource
629:25 - uh if anybody asks like how do i make a
629:27 - scatter plot with d3
629:29 - you could just send them a link to this
629:30 - template and like boom that's it and
629:32 - it's like probably less than 100 lines
629:34 - and it works and it's basic
629:36 - and it's vanilla
629:38 - and i mean truly vanilla so we're not
629:40 - going to use es6 modules even because i
629:43 - want to show
629:44 - what that option looks like to not use
629:46 - es6 modules
629:57 - okay
630:03 - i'm going to start
630:05 - by
630:06 - creating a viz invis hub from
630:09 - this vanilla html starter
630:13 - i'm going to fork this and say
630:15 - d3 scatter plot
630:31 - so what have we got here anyway it's a
630:33 - basic
630:34 - html template with some
630:37 - space for javascript i'm just going to
630:40 - gut this
630:41 - delete everything
630:45 - but i'll keep the places to put things
630:47 - like the script and the style
630:50 - because i know we're going to need to
630:51 - use that stuff
630:57 - okay step one let's load in d3
631:00 - and um there's a number of ways to do
631:03 - this but since we're doing vanilla html
631:05 - let's just load it in from a cdn i'm
631:08 - going to use unpackage as a script tag
631:15 - at the end of the head
631:28 - i'm going to make a new script tag
631:33 - open script close script
631:39 - and the source
631:41 - will be
631:43 - d3 somehow
631:45 - and the way that we get that is i like
631:48 - to go to unpackage.com d3 and it
631:51 - resolves to this minified build of d3
631:56 - so i'm going to paste that url here
632:00 - now we have access to d3
632:03 - which we can prove by saying console.log
632:06 - d3
632:07 - and taking a look in the console and we
632:10 - get this object
632:11 - that has all of the d3 methods
632:22 - right the next step is to load in some
632:23 - data
632:24 - and since this is a you know going to be
632:27 - a template i like to use the iris data
632:29 - set
632:34 - if you just do a google search for the
632:36 - iris data set
632:44 - there's even a wikipedia article about
632:46 - it that helps to give some context it's
632:48 - also known as
632:50 - fisher's iris dataset it's a
632:52 - multivariate data set from like 1936
632:56 - about flowers about iris flowers
633:02 - these are the iris flowers and it's got
633:04 - like petal width
633:06 - petal
633:07 - length
633:08 - and they're just measurements in
633:10 - centimeters about these particular
633:11 - flowers
633:16 - so it's a classic data set
633:18 - i'm going to use it because we end up
633:20 - with nice scatter plots
633:21 - but
633:22 - part of the goal of this is to develop
633:24 - something that's a template that you
633:25 - could easily swap out the data to be
633:28 - something else so in a sense it doesn't
633:30 - really matter what data we use to start
633:39 - anyway if you scroll down in the search
633:40 - results i've got this gist
633:43 - up in github
633:45 - that contains the iris data set as a csv
633:49 - file
633:54 - publishing data in github gists like
633:57 - this is a pretty common practice
634:00 - for visualizations that are hosted
634:03 - on the web and various platforms
634:06 - it's great because github essentially
634:08 - hosts the stuff for free
634:10 - and lets you pull it down from
634:13 - any program
634:14 - so if we click this raw link right here
634:18 - we get to see the content of this file
634:21 - which is a csv
634:23 - a csv file and csv stands for comma
634:26 - separated value this is the header row
634:29 - and these are all the rows that contain
634:32 - the data
634:34 - so it's got sepal length and the sepal
634:37 - length of the first flower is 5.1 it's
634:39 - got sepal width and the sepal width of
634:42 - the first
634:43 - flower is 3.5 centimeters it's got petal
634:46 - length
634:47 - and the petal length of the first flower
634:49 - is 1.4
634:50 - and it's got petal width
634:52 - the petal width of the first flower is
634:55 - and it's got species
634:57 - and the species
634:59 - are iris setosa
635:02 - iris
635:03 - versacolor
635:04 - and
635:06 - virginica these are different species of
635:08 - iris
635:13 - so
635:14 - we can take this url right here copy it
635:18 - and paste it into our program
635:20 - i'd like to make a variable for this
635:26 - so i'm going to call it csv url equals
635:30 - and i'm just going to paste it
635:32 - right there
635:38 - and at this juncture
635:40 - you know
635:41 - for me i don't really like seeing these
635:43 - long lines that wrap around in sort of
635:45 - an unwieldy way so here's a little trick
635:48 - that you can use to
635:50 - to clean up the code around strings
635:53 - i'm going to make it an array
635:55 - of strings
635:57 - so we can see the different components
636:00 - of this url
636:07 - yeah i'm just going to split it up here
636:10 - close out the array and then we can say
636:12 - dot join
636:13 - which is a method
636:15 - on javascript arrays
636:19 - and then we can use prettier to format
636:21 - that nicely
636:23 - and now i feel this is a lot more
636:24 - readable
636:26 - we know that it's coming from github
636:27 - gist this is the user
636:30 - name
636:32 - this part of the url
636:34 - is the id of the gist
636:38 - and this part is the commit
636:42 - and then this part is the file name
636:47 - so that's how you can
636:49 - split a long string
636:50 - into multiple lines in you know a
636:52 - somewhat elegant and readable way in
636:55 - javascript
636:58 - and just to make sure we're getting the
636:59 - right thing still we can console.log
637:02 - csv
637:04 - url
637:05 - and we should see that url yeah there it
637:07 - is
637:08 - and we can even click on that and it
637:10 - resolves to the right thing
637:14 - okay now that we've got this csv url we
637:17 - have to fetch this
637:19 - csv file
637:28 - to do that we can use d3 dot
637:31 - csv
637:35 - now at this juncture
637:37 - we can make a decision do we want to
637:39 - have d3 dot all over the place in our
637:41 - code or
637:43 - do we want to extract the d3
637:46 - stuff into local variables
637:49 - the latter would be my preference
637:50 - because that's how it ends up when you
637:52 - use imports es6 imports
637:55 - so to make this vanilla javascript more
637:58 - closely resemble the code that you would
638:01 - write if you were to use es6 imports
638:05 - i'm going to make a decision
638:07 - to destructure
638:09 - all this stuff out of the d3 global like
638:12 - this we can say const csv equals
638:16 - d3
638:18 - and i'm going to do it at the top
638:20 - because traditionally that's where the
638:21 - imports go
638:23 - so what this is doing is is exactly the
638:26 - same as
638:28 - this const csv equals d3.csv
638:32 - it's exactly the same thing
638:34 - but it uses es6 destructuring which is a
638:37 - nice language feature
638:40 - so now that we've got this
638:42 - the csv
638:44 - thing
638:45 - we can we can use it we can say csv
638:48 - and pass in
638:50 - csv url
638:54 - and
638:56 - what this does is it makes a network
638:58 - request using http
639:01 - for that particular url
639:04 - and the csv function returns a promise
639:08 - which is
639:09 - a construct in esx javascript to deal
639:12 - with asynchronous control flow
639:14 - so when you run this code it makes a
639:16 - request
639:17 - and then that request takes some time to
639:19 - come back and then after it comes back
639:22 - the promise resolves
639:24 - and that's when we want to get the data
639:26 - that comes back
639:29 - to do that we can say dot then
639:32 - dot then is a method on promises
639:35 - and we could pass in a function that
639:37 - takes as input data
639:41 - and then we can say console.log data to
639:43 - see if it worked
639:49 - indeed it did see we get this array of
639:51 - 150 elements
639:53 - that also has a property on it called
639:56 - columns
639:59 - see this is the result of
640:01 - d3
640:02 - dot csv doing its thing internally it
640:05 - actually loads the file
640:07 - and it also parses it it goes through
640:10 - that big string of text
640:12 - and it splits it into rows and it
640:14 - constructs these objects
640:16 - one object per row
640:20 - so what we get here
640:21 - it's an array of objects and each of
640:23 - these objects has
640:25 - a bunch of properties
640:27 - like sepal length simple width
640:31 - however these are strings
640:34 - and ideally these would be numbers
640:37 - so the next step here is to parse these
640:40 - strings
640:41 - into numbers
640:46 - takes as input a second argument
640:50 - i'm going to call it parse row
640:53 - and this is a function
640:59 - that takes as input a single row i'm
641:01 - going to call it d
641:04 - and it returns
641:08 - some object that will replace that row
641:11 - so what i'm going to do here is i'm
641:13 - going to return d
641:15 - but before doing that i'm going to
641:18 - mutate d
641:20 - and say d dot sepal
641:23 - width
641:26 - well actually
641:27 - let me just copy
641:30 - the set of columns out because i can't
641:32 - remember all of them
641:33 - and we only want to do this for the
641:35 - things that are numbers so species is
641:37 - not a number
641:39 - so we don't need to parse the strings
641:41 - into numbers
641:44 - and by the way the reason why it's good
641:46 - practice to parse strings into numbers
641:49 - is because
641:50 - you know when you do math on strings you
641:53 - don't always get the right result
641:55 - just as a brief detour
642:04 - let me just show you
642:06 - if you add like five
642:08 - plus
642:09 - 5 as strings
642:11 - you get 55
642:13 - but
642:14 - if you add 5 plus 5 as numbers
642:18 - you get 10.
642:19 - so how do we get from strings to numbers
642:21 - we can use this operator called unary
642:24 - plus
642:25 - if you put plus right before the string
642:28 - it
642:29 - parses the string into a number
642:31 - and so that's what we can do for for all
642:34 - of these numeric fields here
642:38 - going to paste that here
642:41 - and
642:43 - i'm going to use
642:47 - the macros i think to just write this
642:49 - code quicker
642:52 - so we can say d dot
642:55 - z length
642:57 - equals plus
643:00 - d dot
643:02 - sepal length
643:08 - and then set up for the next one
643:12 - and with these macros i can automate
643:14 - that
643:16 - and then i'll use prettier to format the
643:17 - code and there we go
643:19 - we've got
643:21 - numbers instead of strings and let's
643:24 - just see if that worked
643:26 - in the console we can see
643:29 - indeed these are numbers now
643:39 - we've got some questions in the youtube
643:41 - chat
643:43 - uh by the way anyone can join the live
643:45 - audio be higher bandwidth
643:48 - so
643:51 - csv is converting the file to a json
643:53 - structure
643:54 - yeah you could think of it like that i
643:56 - mean it's a it's converting it to a
643:58 - javascript object in memory which is the
644:01 - same structure as a json file but json
644:04 - is is a serialization of javascript
644:07 - object so it's not exactly json but it's
644:09 - similar it's it's yeah it's an array of
644:12 - objects
644:13 - that's true doesn't d3 add columns
644:17 - yep
644:19 - yep totally does
644:24 - yeah so d3 does all that magic
644:25 - internally where it adds this columns
644:27 - property
644:29 - yep
644:36 - okay what's next here
644:38 - let's start using d3 to build up
644:41 - this graphic using svg so the first step
644:44 - of that is to
644:45 - create an svg element on the page
644:56 - we can do that
645:00 - right here i suppose
645:06 - const svg equals
645:09 - d3 dot
645:10 - select
645:12 - body
645:15 - dot append
645:17 - svg
645:19 - this will append a new svg element to
645:21 - the body
645:22 - however since we don't want to see d3
645:24 - dot
645:25 - sprinkled throughout our code i'm going
645:27 - to also destructure select
645:30 - from d3 up there
645:35 - and for svgs to work we need to give
645:38 - them a width
645:39 - so i'm going to say attr width
645:42 - and also we need to give them a height
645:48 - so i'm going to give it width as
645:52 - the value of a local variable called
645:54 - width that i haven't created yet
645:57 - and the same for height
646:00 - height gets height
646:05 - and let's define
646:07 - width
646:10 - to be window
646:12 - dot inner width
646:14 - this measures the size of the browser
646:17 - at the time where
646:19 - the program runs
646:23 - i like doing it like this so it's
646:24 - generic and it's not a hard-coded number
646:31 - okay let's see did this work
646:34 - we get these uh these undesirable scroll
646:37 - bars which we can address with
646:41 - some styling
646:46 - in the css
646:51 - we can say okay on the body element
646:54 - set the margin
646:56 - to be zero this is just a common trick
646:58 - that you sort of need to do all the time
647:00 - if you want to have full screen svgs
647:04 - and overflow
647:06 - is hidden
647:08 - that will hide those
647:10 - pesky scroll bars
647:13 - okay that looks better
647:27 - all right now that we've got this svg
647:30 - what do we want to put in here um well a
647:33 - scatter plot is made of circles
647:35 - so
647:36 - let's just
647:38 - go at it that way you know let's add
647:40 - some circles to this svg based on the
647:42 - data
647:46 - the thing is though that data is only
647:49 - available inside of this callback here
647:55 - and i don't know this dot then i don't
647:57 - really like it because
647:59 - because there is a more elegant
648:00 - construct called async and await
648:06 - my preference is to use that
648:08 - and the way you can do this is introduce
648:11 - a function i'm going to call it main
648:15 - and this is going to be an async
648:17 - function
648:20 - and what that means is we can say const
648:22 - data equals await
648:26 - csv
648:27 - all this stuff here
648:32 - this um strike strikes me as a little
648:34 - bit more
648:36 - elegant you know i'd prefer to use it
648:37 - like this
648:39 - um and then we have to invoke main of
648:42 - course
648:45 - and let's just see if it still works
648:46 - after this
648:50 - console.log data
648:52 - indeed there it is
648:57 - okay so that's how you can you can use
649:00 - async and await instead of the then
649:02 - syntax for promises which is sort of a
649:04 - more modern approach
649:07 - now
649:08 - we can add circles to our svg
649:13 - with the
649:14 - d3
649:16 - general update pattern
649:18 - svg.select all circle
649:22 - dot data
649:24 - data
649:28 - dot join
649:30 - circle
649:33 - and now we can set our
649:35 - attributes
649:37 - on the circle
649:39 - attr
649:41 - cx
649:45 - is going to be
649:49 - now what is it going to be i mean this
649:51 - is where we need to do a lot of work
649:53 - actually to figure out what that x
649:55 - position should be
649:57 - and
649:59 - it brings up the point that um i would
650:01 - like to have
650:02 - the concerns separated of the data
650:05 - processing and the rendering
650:07 - and so i feel like we're getting a bit
650:09 - ahead of ourselves we're not quite ready
650:10 - for the rendering because we haven't
650:12 - done
650:13 - the data processing and so by data
650:15 - processing what i mean is
650:17 - figuring out
650:19 - which x and y coordinate each circle
650:22 - needs to get based on the data and using
650:25 - this construct called scales linear
650:27 - scales in particular
650:29 - so let's do the data processing first
650:31 - and then circle back to this rendering
650:34 - logic
650:46 - all right i'm going to comment out this
650:51 - and
650:52 - to figure out where x should go
651:02 - we need to use
651:03 - a scale
651:05 - and i'm going to just call it x
651:07 - this is going to be the x scale
651:09 - because this is a convention that i've
651:11 - seen
651:12 - in recent times
651:14 - with d3 programs
651:18 - this is going to be an instance of scale
651:20 - linear
651:22 - and it would be d3 dot scale linear
651:24 - but we're also going to
651:27 - destructure that up here out of d3
651:33 - skill linear
651:40 - but what does a scale linear i mean what
651:42 - is this what is scale linear why do we
651:44 - need it i've prepared a diagram to
651:47 - explain this
652:02 - scale linear
652:05 - has a domain and a range the domain
652:09 - is typically the values that you see in
652:11 - the data
652:13 - in our case this would be like the you
652:15 - know the width of the sepal
652:17 - or whatever
652:18 - and
652:19 - typically the domain goes from the
652:21 - minimum to the maximum value that we see
652:23 - in the data so let's just say we have
652:25 - some data set where the minimum value
652:28 - that we want to use for
652:30 - say the x position
652:32 - is 0
652:34 - and the maximum value is 10.
652:37 - and what the purpose
652:38 - is for scale linear in this case is to
652:41 - transform
652:43 - data space into pixel space
652:47 - and the range of the scale is the pixel
652:51 - space and in the case of the x
652:55 - coordinate
652:56 - this is going to be
652:58 - you know
652:59 - the the lowest and the highest x pixel
653:03 - coordinate that we want to see
653:08 - whoops
653:11 - hang on
653:23 - so
653:24 - when we have a data value and we want to
653:27 - project it
653:28 - onto the screen
653:30 - we we give this scale a value from the
653:33 - domain
653:34 - and what the scale does is it gives us
653:36 - as output a value in the range
653:39 - for example
653:41 - if we were to have the number five in
653:43 - our data
653:44 - we could say okay mr scale linear my
653:47 - data value was five
653:49 - where should that be on the screen
653:51 - and then scale linear would say oh
653:53 - i know that should be at 25
653:56 - because think about it
653:59 - 5 is halfway between
654:02 - 0 and 10
654:03 - and 25 is halfway between 0 and 50.
654:08 - so that's the purpose of
654:10 - skill linear
654:16 - i see someone has joined
654:20 - hey felipe is here hello
654:24 - hello
654:25 - hey
654:26 - i'm late it's really difficult to me to
654:28 - make it oh no worries i'm happy you
654:31 - could join
654:33 - yeah i'll meet you meet you i'm also
654:35 - glad that i came good job
654:37 - nice
654:39 - um
654:40 - i can't remember if you introduced
654:42 - yourself last time you came on but maybe
654:44 - just give a a brief intro to yourself
654:46 - here
654:47 - okay
654:48 - i'm felipe
654:49 - i'm an engineer
654:51 - as a profession
654:53 - i don't code
654:54 - i just love to code but it's not my job
654:58 - and uh
655:00 - and then i'm i'm trying to learn as much
655:02 - as i can
655:04 - to to start
655:06 - coding and make things
655:08 - more
655:10 - more easily
655:12 - very nice i really i'm really enjoying
655:15 - making making things
655:18 - awesome yeah i've been very impressed
655:20 - with your work you know i'm so happy
655:21 - that you've been following the series
655:23 - and and doing the the exercises you know
655:25 - it's very
655:27 - it's very great to see and i'm so happy
655:28 - you could join me today so here's what
655:30 - i'm going to do i'm going to share my
655:31 - screen in the google meet
655:34 - okay
655:35 - so that
655:36 - you can follow along there
655:38 - and you can close the youtube stream
655:40 - because there's a lag there but this is
655:42 - great because you can we can have
655:44 - discussions in real time if you have any
655:46 - questions so feel free to interrupt me
655:47 - if anything's not clear
655:49 - okay we can dive deeper
655:52 - but in the meantime please mute yourself
655:54 - because there's a little bit of
655:55 - background noise oh my gosh adil is here
655:57 - too
655:59 - hey hey adil how are you
656:06 - you're muted
656:10 - hello everyone hi karen how are you
656:12 - hello so glad you could join today
656:14 - sorry about the the last minute arrival
656:17 - at some babysitting duties oh no worries
656:19 - no worries
656:21 - oh this is great two folks joined it
656:23 - once and felipe just joined philippe
656:25 - have you met um a deal
656:28 - not not personally but nice to meet you
656:31 - nice
656:32 - hi filipe hi how are you
656:37 - great well let me just
656:39 - um
656:40 - give a quick recap
656:44 - because you're all just joining
656:50 - this is what we've got so far it's not
656:52 - that much
656:54 - it loads d3
656:57 - it uh fetches a csv
657:00 - parses the rows from a csv
657:04 - constructs an svg element
657:07 - and constructs a scale linear
657:10 - and the goal here is to make a scatter
657:11 - plot
657:13 - and i just went through this slide about
657:16 - linear scales
657:18 - and the purpose of linear scales is to
657:21 - convert values from a domain to a range
657:24 - domain is like the input the range is
657:25 - like the output the domain is the data
657:28 - space and the range is the screen space
657:31 - so in our case
657:39 - we
657:40 - want to position these circles in the
657:42 - scatter plot in the x direction
657:45 - and
657:46 - what should that be though we have to
657:48 - pick one of these columns to use
657:52 - and this is where i like to define
657:54 - an accessor
657:57 - that i call you know i like to call it x
657:59 - value y value
658:01 - color value size value whatever it's a
658:04 - naming convention
658:05 - that i like to use and it's a function
658:08 - that takes as input one row and it gives
658:10 - you back
658:12 - some value from the data
658:14 - that we should use
658:16 - so here are our various options
658:20 - um i don't think it really matters at
658:22 - this point which one because i just want
658:23 - to get something to show up so i'll pick
658:25 - petal length
658:27 - this is going to be our x value and the
658:30 - same for y
658:32 - let's try
658:34 - simple
658:36 - length
658:38 - for y
658:40 - so we're going to build a scatter plot
658:41 - where
658:43 - you know petal length determines the x
658:45 - position of the circles and sepal length
658:48 - determines the y position of the circles
658:51 - now that we have that in hand
658:54 - we can define
658:57 - the domain
658:59 - of rx scale and the way that you do this
659:02 - is
659:03 - firstly you construct an instance of
659:06 - scale linear by invoking d3 dot scale
659:09 - linear as a function
659:10 - this gives you back
659:13 - this object that has methods on it
659:17 - such as domain and domain can be used to
659:20 - set the domain
659:22 - and the domain remember is just two
659:24 - values a minimum and a maximum
659:26 - and so we can this is going to be like
659:28 - min
659:29 - and max
659:32 - min and max are actually functions from
659:35 - d3 so we could say d3.min
659:39 - give it the data
659:40 - and give it the x value accessor
659:44 - and this will actually iterate through
659:46 - all of the different
659:48 - values
659:50 - and compute the minimum
659:52 - from there
659:53 - and we can do the same for max d3.max
659:58 - data x value
660:03 - and it will compute the maximum x value
660:07 - let's just inspect
660:09 - uh what happened there
660:10 - x value is the same of x
660:16 - x value is just this function okay yeah
660:18 - it's just this function here that
660:19 - returns the petal length
660:21 - for each row
660:24 - and we could tweak it here if we wanted
660:25 - to change which row to use but yeah
660:27 - that's all it is it's just a function
660:28 - that returns the petal length
660:30 - for each row
660:32 - and so what what we're doing here we're
660:33 - passing in that function to d3.min
660:38 - which expects a function that takes as
660:40 - input a single row and we're also
660:42 - passing in the data and when we run this
660:45 - d3.min call
660:47 - it actually
660:48 - checks each and every value
660:50 - that gets returned from this function
660:51 - for each and every row and it keeps
660:53 - track of the minimum one that it saw
660:56 - and then it returns
660:58 - the the minimum
661:00 - of all the values
661:02 - and same thing for max but just for the
661:04 - maximum
661:06 - and we can check if this worked by
661:08 - saying x dot domain
661:12 - and the thing about this
661:14 - scale dot domain
661:15 - is if you pass it a value it acts as a
661:18 - setter meaning it sets the value of the
661:21 - domain
661:22 - but if you don't pass it any value like
661:24 - this it acts as a getter and it returns
661:28 - the value that you set
661:30 - previously i just use prettier there to
661:33 - format and so if we look at the result
661:38 - we can see an array of two values
661:41 - and check it out it goes between 1
661:44 - and 6.9
661:51 - so d3.min and d3.max are great and all
661:54 - but there's actually
661:55 - a function that
661:57 - does both of them for you at the same
662:00 - time which is called extend
662:04 - so instead of this
662:06 - we can use d3.extent
662:13 - and d3.extent actually returns an array
662:17 - with two elements
662:19 - so when this runs
662:21 - we can see that it's actually the same
662:24 - the same end
662:26 - result and as a last piece of cleanup
662:29 - instead of using d3 dot extent i'm going
662:32 - to destructure
662:34 - extent from d3
662:36 - up here
662:41 - okay
662:54 - so now we've got the domain of our x
662:57 - scale figured out
662:58 - it's the minimum and maximum value for
663:01 - that column in the data now we need to
663:03 - figure out
663:04 - what should be the range
663:06 - for our x scale
663:14 - we can set the range
663:16 - in much the same way that we set the
663:18 - domain with a function called dot range
663:22 - and by the way note how
663:24 - it's calling dot range on the return
663:26 - value from dot domain
663:29 - and the thing is uh with this with the
663:31 - d3 api
663:32 - it's using um this technique called
663:35 - method chaining
663:37 - and what this does is
663:39 - if you use for example domain as a
663:41 - setter like this
663:43 - it returns
663:46 - the instance of the scale which is the
663:48 - same thing as x
663:50 - so we could potentially say okay x is a
663:53 - scale linear and then
663:55 - x dot domain is this
664:00 - x dot range is this other thing and this
664:02 - all would work
664:05 - but since it's developed
664:07 - with this method chaining api
664:10 - we can use this shorthand
664:12 - and this works as well
664:16 - so
664:17 - let's figure out what should the range
664:18 - be
664:21 - well the range
664:23 - it's going to be an array of two numbers
664:25 - and i think to start let's just make it
664:27 - go between zero and width
664:31 - to fill up the screen
664:35 - and we can see what that is by saying x
664:38 - dot range
664:40 - like this
664:44 - and it's array of you know 0 to 960 that
664:47 - seems right
664:50 - okay
664:51 - that's our x scale it's finished
664:54 - now let's do the same for y i'm just
664:55 - going to copy all that
664:57 - change x to y
665:00 - and then we want the range to go from
665:04 - zero to height
665:07 - but not actually
665:09 - because
665:10 - the y-coordinate is flipped in svg so so
665:13 - zero is at the top not the bottom but we
665:16 - want the lowest data value to be at the
665:17 - bottom in the screen
665:19 - so we actually need to flip
665:21 - this
665:24 - the range will go from height
665:26 - to 0.
665:29 - now we can do our data processing
665:33 - i'm going to create this thing called
665:34 - marks
665:35 - and it's going to be data.map
665:38 - where we invoke a function
665:40 - for each and every row
665:41 - of our data set
665:43 - and we can return
665:45 - an object
665:49 - and this object
665:51 - can have on it
665:53 - the properties of
665:55 - x and y
665:57 - so x
665:59 - will be
666:02 - x
666:03 - meaning this x scale
666:06 - of
666:08 - the
666:09 - value from the domain
666:11 - and by the way
666:13 - these linear scales are functions and
666:15 - you can pass in a value from the domain
666:18 - and so the value from the domain will be
666:22 - you know d dot
666:25 - what is it
666:28 - pedal length
666:34 - oops
666:37 - however
666:39 - since i don't want to hard code these
666:40 - values in here and we already have this
666:42 - accessor function we can just say x
666:44 - value
666:45 - of d
666:46 - that way it's nice and generic
666:50 - and the same thing for y
666:52 - just replace x with y
666:56 - and there we go
667:01 - now let's console.log marks
667:04 - to see what we ended up with
667:14 - oh i've got two console.logs here which
667:16 - is confusing let me get rid of the other
667:17 - one
667:18 - i'll get rid of this console.log data
667:21 - so now we're just going to see the marks
667:25 - and we have objects that have x and y in
667:27 - pixel coordinates
667:32 - all right fantastic this is great now
667:34 - we're ready to move on to the rendering
667:36 - step and and because we did the data
667:38 - processing separately the rendering step
667:41 - is a very straightforward thing where
667:42 - you just map
667:44 - x and y from these objects directly onto
667:47 - cx and cy of the circles
667:54 - pixels pixels for me i have the
667:58 - the impression that should be in tangent
668:01 - numbers not
668:02 - floating numbers
668:04 - why is that
668:06 - yeah that's an interesting point pixels
668:08 - being integers versus uh floating point
668:11 - numbers with decimals
668:13 - yeah it's interesting um
668:17 - svg because it is scalable
668:21 - vector graphics
668:24 - when you're looking at it on the screen
668:28 - um
668:30 - let's say you're looking at it on
668:33 - a high dpi display like a retina display
668:36 - on a really expensive like macbook
668:40 - and um
668:41 - [Music]
668:42 - and you set a pixel value as like 100.5
668:48 - on a high dpi display that has double or
668:51 - quadruple rather the pixel density as a
668:54 - regular display
668:55 - that incrementing of the pixel
668:57 - coordinate by 0.5 will actually
668:59 - increment it by one physical pixel
669:03 - and svg
669:05 - within svg you could do transforms and
669:07 - even with css you can do transforms of
669:09 - scaling and so
669:11 - svg actually does accept pixel
669:13 - coordinates as floating point numbers
669:15 - they don't need to be integers
669:17 - and by the way interestingly this is
669:19 - different
669:20 - with canvas html5 canvas which is a
669:23 - raster
669:24 - based system
669:26 - if you draw a line in canvas and you
669:28 - give it a floating point number i i i'll
669:30 - have to double check but i think
669:32 - it like takes the floor of the number so
669:35 - you can actually only
669:38 - get down to a single pixel
669:40 - in the canvas which is a raster image
669:42 - because it's made up of pixels however
669:44 - in svg
669:47 - it's more
669:49 - detailed than that so somewhat
669:51 - surprisingly you can actually use
669:54 - fractional values for pixels and also
669:57 - for things like line width if you set
669:59 - the line width to
670:01 - 0.5
670:03 - it it makes it like slightly
670:06 - lighter
670:08 - when it gets anti-aliased onto the
670:10 - display
670:11 - uh but again if you were to view it on a
670:14 - high dpi display it would actually be
670:16 - one physical pixel
670:18 - as opposed to like two physical pixels
670:21 - because it depends on the what's it
670:22 - called the device
670:24 - device pixel ratio or something like
670:27 - that but yeah long story short svg
670:30 - accepts floating points as um
670:33 - values
670:34 - okay
670:35 - thank you yeah my pleasure
670:39 - yeah i remember it blew my mind when i
670:40 - learned that actually um and it makes
670:43 - sense in a way because
670:44 - let's say you print an svg when you
670:47 - print something it's like
670:48 - 300 dpi
670:50 - so you can actually get to sub pixel
670:53 - uh precision when you print it or when
670:55 - you view it as a hana high-res display
671:03 - um current yeah
671:04 - when it comes to choosing a scale um
671:08 - does that depend on what kind of
671:11 - um
671:13 - what kind of metric we're dealing with
671:17 - so
671:18 - we're chosen a linear scale in this case
671:23 - and
671:24 - does that is that because it it's
671:26 - there's something about the original
671:27 - metrics um
671:30 - that that makes
671:32 - a linear scale appropriate
671:36 - yes it does
671:38 - and um
671:42 - i will be getting into this in the
671:44 - future but yeah long story short
671:46 - linear scales is just one type of scale
671:51 - it's a particular type of
671:55 - continuous
671:56 - scale
671:58 - and these continuous scales include
672:00 - other ones like a power scale
672:02 - which includes a square root scale a log
672:04 - scale a time scale radial scale
672:07 - so all of these continuous scales are
672:09 - meant to deal with numbers
672:12 - as input
672:13 - so any time you have a column of data
672:15 - that just has numbers in it you can use
672:18 - this type of scale
672:20 - however
672:22 - there are other types of scales that
672:24 - make sense to use for other types of
672:26 - values
672:28 - time scales for example work with dates
672:32 - and it it's categorized as a continuous
672:35 - scale because it
672:37 - it acts like scale linear but for dates
672:39 - it treats a date as a point in time
672:42 - and also
672:45 - there are ordinal scales
672:47 - so in our data value for the iris stuff
672:50 - we have one column which is species
672:52 - right and it has three distinct values
672:55 - that are strings that are not numbers
672:58 - and so when you have strings in your
673:00 - data you can use ordinal scales
673:02 - either an ordinal scale directly which
673:04 - is essentially a dictionary that maps an
673:07 - input value to an output value
673:10 - but within this space of ordinal scales
673:12 - you have
673:13 - band scales and point scales a band
673:15 - scale
673:17 - maps these
673:18 - discrete input values to
673:21 - discrete output values that are arranged
673:24 - as
673:25 - bands
673:27 - on the screen so this is useful for bar
673:29 - charts for example
673:31 - and then you have
673:32 - point scales
673:47 - point scales
673:48 - can be used to represent
673:52 - data that has discrete
673:55 - input values like different strings but
673:57 - then project that onto a space so if you
674:00 - wanted to have a scatter plot where for
674:02 - example y is the species you could use
674:05 - scale point to map species to a y value
674:09 - but since we're just dealing with
674:11 - numbers mapping numbers to the screen
674:13 - that's why we're using linear scale
674:18 - and we will start to use all these
674:20 - different scales in the future for all
674:22 - the various um
674:24 - visualization techniques
674:27 - yeah thanks that makes that makes sense
674:29 - thank you
674:31 - my pleasure
674:37 - okay let's get these circles to show up
674:39 - and make a a basic scatter plot
674:42 - i'm going to bring back this rendering
674:43 - logic that we started on earlier
674:53 - by uncommenting it
674:55 - and i'm going to change it to work with
674:57 - marks instead of the original data
675:03 - now if we want to set the cx attribute
675:06 - we can just give it a function that
675:08 - takes as input
675:09 - one
675:10 - entry in the marks array
675:14 - and it can return d dot x
675:17 - and the same thing for y
675:20 - c y which is the center y coordinate of
675:22 - the circle can return d dot y
675:27 - and let's see if it worked
675:41 - sorry
675:42 - they are
675:43 - missing they are yeah good call good
675:45 - call yes yes yes that's it
675:49 - if you don't give it r if you don't give
675:51 - a circle a radius it doesn't have a
675:53 - radius and it doesn't show up so let's
675:55 - say
675:56 - five
675:57 - all right there we go
676:00 - boom
676:02 - got a basic scatter plot
676:08 - okay so how do we add axes
676:11 - to a scatter plot first of all we need
676:14 - to make room
676:16 - for the axes
676:19 - using a margin
676:23 - and in the d3 world there's this
676:26 - this thing called the margin
676:29 - convention
676:31 - actually let me just show that one
676:32 - because it's it's really good
676:39 - if you just google d3 margin convention
676:42 - mike bostock the author of d3
676:45 - has this piece
676:48 - in observable which is
676:51 - the d3 margin convention
676:58 - the idea
676:59 - behind this is to make room for axes
677:03 - on the left and on the bottom or on the
677:04 - top and the right wherever you want to
677:06 - put them
677:07 - but
677:08 - the whole idea is we define this margin
677:10 - object that has top right bottom and
677:14 - left
677:15 - and our code will sort of use that
677:18 - margin to
677:19 - to know where to put things on the
677:21 - screen so it impacts how we compute the
677:24 - range of our skills
677:26 - instead of going from zero to width for
677:29 - example we would want to go from
677:32 - margin.left
677:34 - to
677:35 - width minus margin.right
677:38 - and that's what this example does here
677:49 - back in our code let's define a margin
677:53 - margin is going to be an object
677:55 - that has top
677:58 - i'll just set them all to 20 for now can
678:02 - change it later
678:07 - right
678:09 - is 20
678:12 - bottom
678:15 - is 20
678:18 - and left is 20.
678:26 - and by the way this is an actual
678:27 - convention to to go from top right
678:30 - bottom left because it's clockwise
678:32 - around the screen and i think that's how
678:34 - css
678:35 - sometimes in css you can
678:37 - you can like specify things as a big
678:40 - string
678:41 - and
678:42 - it goes from top right bottom and left
678:44 - like that
678:45 - so that's why i chose that ordering
678:48 - but anyway now that we have this margin
678:51 - we can tweak our scales
678:54 - instead of going
678:56 - from zero to width for our x scale
679:01 - we can make it go from
679:03 - margin
679:04 - dot left
679:07 - to
679:08 - width
679:09 - minus
679:10 - margin dot right
679:17 - and now we can see that there is
679:19 - actually a margin being applied
679:24 - let's do the same for our y scale
679:28 - instead of going from height to zero
679:30 - it's going to go from
679:34 - height minus margin dot bottom
679:39 - to
679:41 - margin
679:42 - dot top
679:46 - like that
679:48 - and everything else just sort of works
679:50 - everything else flows
679:52 - from the scales so it just works
679:55 - we can verify that it's working by
679:58 - testing each one of these one by one
680:00 - like what if we set the top to 200.
680:03 - see that it works we have a big gap on
680:06 - the top
680:07 - what if we set right to 200
680:10 - it works we have a big gap on the right
680:12 - how about bottom
680:15 - yep
680:16 - got a gap on the bottom and left
680:20 - yes i have a gap on the left
680:25 - that's how you can implement the margin
680:27 - convention
680:29 - now that we have space for axes let's
680:31 - add some axes
680:39 - when we destructor stuff out of d3 let's
680:42 - also pull out axis
680:45 - left
680:46 - and axis bottom
680:54 - and the way that we can use those
681:00 - is
681:01 - on our svg
681:04 - we can append a group element
681:06 - for each of our axes so this is going to
681:08 - be
681:10 - um
681:11 - let's do the y-axis first
681:14 - svg.call
681:20 - and this is where we can construct
681:22 - a new axis
681:24 - axis left
681:26 - and when we construct this axis
681:30 - we can pass in
681:34 - the scale namely uh y
681:40 - like that
681:43 - and we're not seeing anything because
681:47 - it's sort of off to the side of the
681:49 - screen
681:51 - what we need to do is move this group
681:53 - element
681:54 - to the right a little bit
681:58 - actually we need to move it to the right
682:00 - by margin.left
682:02 - we can do that by saying
682:04 - dot
682:05 - attr
682:07 - and we can set the transform
682:10 - to be
682:12 - translated
682:18 - and this is an es6 string template
682:21 - literal
682:23 - we want to translate by
682:26 - margin
682:27 - dot left
682:29 - in the y direction and in the x
682:31 - direction and 0
682:33 - in the y direction
682:35 - and now it shows up see
682:37 - get some tick marks
682:40 - the numbers seem to be cut off though so
682:42 - let me just tweak the margin
682:46 - i'm going to tweak the left margin to be
682:49 - let's say 50.
682:51 - and now we can see
682:54 - this axis shows up
683:00 - all right that's how you can add
683:03 - an axis with d3
683:08 - maybe let's do the same for the y axis
683:14 - or
683:15 - let's do the same for the x axis now
683:28 - just going to copy this code
683:31 - and modify it
683:34 - to be for
683:36 - the x-axis
683:38 - which i would like to put at the bottom
683:40 - so we can call x's
683:42 - bottom
683:44 - and pass an x
683:45 - like this
683:47 - but the transform
683:49 - is not quite right anymore see we've got
683:52 - all these numbers at the top we want
683:54 - these to be at the bottom
683:57 - so what we need to do is translate by
684:02 - 0
684:03 - in the x direction
684:04 - but in the y direction we want to
684:06 - translate it to be all the way down at
684:08 - the bottom
684:10 - and so that's going to be
684:13 - height
684:15 - minus
684:16 - margin
684:17 - dot
684:18 - bottom
684:23 - yep
684:25 - and that works
684:30 - all right very good that's how we can
684:32 - add x and y axes
684:34 - to our scatter plot
684:38 - one last little tweak i would like
684:41 - yeah question uh
684:42 - i'm sorry i i'm not sure how how do you
684:46 - ensure that the
684:48 - uh the mark in the
684:50 - in the axis
684:53 - is exactly
684:54 - matching the the value of the data
684:57 - because
684:58 - since you can transpose the axis
685:02 - you could be ending the number in the
685:05 - different places
685:07 - i don't know if i made myself clear oh
685:10 - sure yeah yeah i mean
685:12 - the shorter the short answer is
685:15 - because they're derived from the same
685:16 - scale
685:18 - but yeah if you
685:20 - if you wanted to
685:22 - you know
685:24 - you could translate it by let's say like
685:26 - 50 pixels in the x direction and make it
685:29 - misaligned
685:31 - like now it's not lined up
685:34 - but if you don't do that
685:37 - it is perfectly aligned
685:40 - just because of how
685:44 - the scales are set up
685:47 - so because the axis takes as input the x
685:51 - scale
685:52 - the axis
685:53 - actually uses
685:56 - the range of the scale to position
685:58 - itself
686:00 - and since it's the same scale that
686:01 - drives the x and y of the circles
686:04 - it it ends up aligning perfectly
686:07 - yeah and we're translating it by
686:11 - notice how we're not translating the
686:14 - x-axis in the x-direction at all we're
686:17 - just translating the x-axis
686:19 - in the y-direction to put it at the
686:21 - bottom
686:22 - and so all yeah so all the x positioning
686:25 - is just strictly coming from the x-scale
686:30 - okay
686:32 - okay nice
686:34 - nice and same with y by the way we're
686:36 - translating y
686:38 - in the x direction
686:39 - just to align it with the x scale so
686:42 - when all of the y positioning is just
686:44 - strictly from
686:46 - the y scale here so that's why that's
686:47 - why they all align correctly and you can
686:49 - sort of see
686:51 - that they align because this the
686:53 - the lowest x value which is the circle
686:56 - here
686:58 - the center of the circle is exactly on
687:00 - that line of the axis
687:08 - can i see something
687:10 - yeah um we can check the value for each
687:14 - circle by putting title on it and we
687:17 - will see it matches with the axis
687:20 - oh we totally could
687:24 - yeah that's fairly easy to do let's just
687:26 - do it that's a great idea
687:32 - so there's this thing
687:37 - called title
687:41 - um
687:43 - you know what
687:45 - that might be a little more complicated
687:56 - because we need to tap into the enter
687:58 - selection
688:01 - yeah i don't know that seems a little
688:03 - bit out of scope for today
688:09 - yeah we need to we need to change this
688:10 - code around to access the enter
688:12 - selection so i don't know i don't really
688:14 - yeah but
688:16 - it's no problem
688:17 - my questions was wondering if we could
688:21 - mess it up
688:22 - but
688:23 - as you said we we never transformed in
688:25 - the axis that
688:28 - we are actually
688:29 - moving exactly
688:31 - made sense completely
688:33 - yeah
688:35 - nice
688:37 - yeah great great but but yes we could
688:40 - potentially add tool tips that will show
688:42 - the numbers
688:43 - um
688:44 - which which we could then verify that
688:47 - could conceivably work but i don't think
688:48 - i'd like to do that right now
688:50 - because i want to keep this example um
688:53 - nice and simple
688:58 - i have a question um
689:00 - if if we wanted to the the axes
689:03 - to begin from zero
689:06 - uh what would we need to do
689:09 - oh yeah sure if you wanted the axes to
689:11 - begin at zero
689:13 - you could just use um
689:17 - instead of using extent you could use
689:19 - max d3.max
689:22 - and
689:24 - as the first value you could explicitly
689:26 - just pass in zero
689:28 - like this
689:32 - now the x-axis starts at zero
689:36 - very cool
689:37 - yeah
689:39 - thank you yeah that makes total sense
689:42 - nice yeah my pleasure and i love how you
689:44 - know d3 is
689:46 - is designed
689:48 - in such a way where it's like you can
689:50 - fit things together like lego blocks
689:53 - you know
689:54 - so it's you can just plug in whatever
689:56 - you want to
689:58 - for the domain but it provides utilities
690:00 - like this max
690:02 - and extent
690:04 - for the most common use cases which is
690:06 - you know deriving
690:08 - the domain from your data
690:12 - and for a bar for a scatter plot it
690:15 - makes sense to use extent but for other
690:17 - visualization types um like a bar chart
690:20 - it always makes sense to start at zero
690:23 - so
690:25 - you know if once we make bar charts
690:27 - we'll always start the domain at zero
690:29 - and then use d3.max
690:32 - and same thing if you're assigning areas
690:34 - to circles like the size of a circle
690:37 - based on some numbers i mean we'll get
690:38 - there in the future but i'm saying like
690:40 - there are very concrete use cases where
690:44 - it makes sense to start the domain at
690:46 - zero and then go from zero to the max
690:49 - of the data and that's how you would do
690:50 - it
691:01 - so yeah i think we're pretty much done
691:02 - here i kind of want to just um you know
691:04 - give this a once-over oh one thing i
691:06 - wanted to do
691:08 - was make the ticks the tick marks bigger
691:10 - because um in my opinion the default
691:13 - size is pretty
691:16 - pretty small
691:18 - and i want to give a f just a flavor of
691:21 - how you might customize
691:23 - some of the stuff on the axis which is a
691:25 - rabbit hole there's a lot of different
691:27 - things you could do there
691:29 - but the simplest thing you can do
691:32 - is just
691:33 - use css
691:35 - to say
691:37 - for all text elements
691:40 - which includes the tick marks
691:44 - we can set the font
691:47 - size
691:48 - to be
691:50 - i don't know 24
691:52 - pixels
691:54 - and that works
691:56 - it's it's bigger
691:58 - but as a best practice i like to scope
692:01 - the changes because if there's you know
692:03 - if there's other text this will apply to
692:05 - all the text
692:06 - which may be what you want
692:08 - but
692:09 - with d3 axes in the dom
692:13 - there is actually
692:15 - a structure that we can leverage
692:20 - namely that each tick mark
692:22 - is is composed of a group element that
692:26 - has a class of tick
692:28 - and then within that group element
692:29 - there's a line element
692:31 - and there's a text
692:32 - element so we can select the text
692:35 - elements inside of the ticks
692:38 - by deleveraging the fact that this group
692:40 - element has a class of tick
692:44 - by saying dot tick
692:47 - space
692:48 - text
692:49 - what this what this does is it
692:51 - constructs a selector css selector
692:56 - that selects the tick
692:59 - elements and then the space signifies
693:02 - okay within within that look for
693:04 - children of that element that are
693:07 - of the type text so this is how you can
693:11 - set the font size
693:12 - of the tick elements
693:16 - and the labels are getting cut off so
693:18 - i'm just going to tweak the margin again
693:24 - i tweak the bottom margin to be
693:26 - say 50.
693:30 - maybe 40.
693:35 - yeah and um
693:37 - at this juncture i think the code is is
693:40 - done
693:41 - in a sense
693:42 - but now just to close this out i want to
693:46 - look through this code from the
693:48 - perspective of
693:50 - someone who wants to fork and modify
693:52 - this
693:53 - because that's what the assignment is to
693:55 - fork this and modify it to show some
693:57 - other data set
693:59 - and so
694:02 - you know in this direction what i want
694:03 - to look for is
694:05 - are all of the tweakable things in one
694:07 - place and all the generic stuff in some
694:09 - other place that's what i would aim for
694:13 - if if the goal is to create a reusable
694:14 - template
694:16 - so let's just look through
694:20 - and
694:21 - i'm going to make a comment
694:25 - here called tweakables
694:30 - and all this stuff should be
694:32 - data set specific
694:34 - so we got the csv url
694:36 - very much data set specific we got
694:38 - parsero
694:39 - very much data set specific
694:42 - x value y value
694:44 - very much tweakable and actually at this
694:46 - point let me just show you how easy it
694:48 - is to change the meaning
694:50 - of of one of these
694:52 - x or y instead of sepal length we can
694:55 - change it to c pull
694:56 - width
694:57 - and boom our scatter plot
694:59 - updates just like that
695:02 - and so when you load in another data set
695:04 - part of the process is just going to be
695:07 - trying out different values for the
695:09 - columns and see and see what pops out
695:12 - the margin
695:15 - very tweakable
695:17 - something you'd want to probably tweak a
695:18 - lot
695:21 - and
695:23 - the width and the height
695:25 - yeah this part is sort of
695:27 - something you might want to tweak like
695:29 - if you have some downstream code that
695:31 - where you want to position the svg
695:32 - inside something else
695:35 - so sure it's tweakable
695:37 - now
695:39 - this part is generic
695:43 - so i'm going to go through this and see
695:44 - is there anything that's
695:47 - specific to this data set in this code
695:49 - or not
695:52 - so far it looks pretty generic you know
695:54 - this cut this same exact code could run
695:58 - on any data set oh there's one thing
696:00 - that's tweakable the radius
696:03 - so i'll pull that out into a tweakable
696:07 - variable
696:08 - i'll put it along with
696:11 - x value y value and margin
696:16 - radius is 5.
696:18 - yeah that's an arbitrary thing
696:21 - that uh you might want to tweak
696:28 - but um i think that's about it that's
696:31 - all i see
696:34 - so that's how
696:37 - that's how you can polish up a
696:39 - a forkable
696:41 - dataviz template
696:44 - all right a great i feel like we've set
696:46 - out the original goal to have something
696:48 - that's just vanilla
696:51 - html javascript it doesn't use any
696:54 - bundler or anything
696:55 - it approximates the feel of es6 modules
696:58 - by
697:01 - destructuring
697:02 - the stuff out of the d3 global but it's
697:05 - it's totally vanilla so anyone could you
697:07 - know
697:08 - export this and use it
697:11 - all right i think that's it any um
697:15 - any questions or things you want to
697:17 - discuss
697:20 - um
697:22 - i have a question about the call
697:24 - function you used for axis
697:32 - sure let me just plug in my laptop
697:35 - there's the batteries running out
698:06 - yeah the question is about dot call
698:09 - i guess you could phrase the question as
698:11 - like
698:12 - what is that what is it really doing
698:16 - and it's it's really just a shorthand
698:19 - for invoking functions and there's a way
698:21 - that you could do this without using dot
698:23 - call
698:24 - let me show you what that looks like
698:34 - um let's let's look at for for
698:37 - axis left
698:41 - we could potentially pull that out
698:46 - like this into a variable
698:51 - and then
698:55 - pull out this group element as another
698:57 - variable
698:59 - so now we have
699:00 - i'll get rid of that dot call
699:02 - now we have
699:04 - the axis as a standalone thing
699:06 - and the group element as a standalone
699:08 - thing
699:09 - and we want to sort of inject that axis
699:12 - into that dom element
699:15 - and one way we could do it is
699:20 - y axis g dot call
699:23 - y-axis
699:25 - which is the same as it was before but
699:27 - now things are split into variables
699:30 - the other way to do it
699:32 - is like this y-axis
699:36 - y-axis
699:37 - g
699:42 - like that
699:45 - and it still works
699:51 - so what's going on here
699:53 - is
699:54 - when you invoke dot call
699:57 - on a selection
699:59 - it expects that you pass in a function
700:05 - and it will invoke that function
700:08 - passing in the selection
700:10 - on which you invoked.call
700:13 - so it's exactly the same as this y-axis
700:16 - is actually a function
700:18 - that expects to be called
700:21 - with a d3 selection of a group element
700:24 - as the input
700:29 - so these two are exactly the same
700:32 - behavior-wise
700:34 - um dot call is just
700:37 - it's just sort of a shorthand a
700:38 - convention it's convenient because you
700:40 - can chain stuff onto it you could say
700:42 - dot call that dot
700:44 - you know select
700:47 - um
700:48 - you know domain
700:50 - path or something
700:54 - and remove it
700:58 - as an example use case where you might
700:59 - want to
701:01 - use dot call
701:03 - and see that removes the domain line
701:05 - that path
701:07 - the which is that vertical thing and
701:09 - often i find myself wanting to remove
701:11 - the domain
701:12 - path because it's like i don't see
701:15 - much value that it provides
701:23 - but
701:24 - anyway
701:26 - yeah i hope that answers your question
701:29 - these two are
701:30 - equivalent dot call just invokes a
701:32 - function and passes the selection
701:45 - but i think i'll put it back to the way
701:46 - it was
701:51 - it's kind of confusing but it will work
701:55 - yeah yeah there's always a trade-off
701:59 - there's always a trade-off between
702:01 - writing
702:02 - concise
702:04 - code that might be a little cryptic
702:06 - versus verbose code that's like twice as
702:09 - long but it's easier to read yeah it's
702:13 - gonna try to strike a balance
702:20 - so it's the first argument
702:22 - to the
702:23 - uh yes the first argument of the first
702:25 - argument
702:27 - [Music]
702:30 - yeah maybe i should just keep all that
702:32 - around as a reference yeah just
702:34 - commenting will be nice
702:46 - so the
702:47 - you know it's like the argument of axis
702:50 - left function
702:53 - is the selection svg selection
702:59 - is that right
703:01 - yeah the argument that y-axis expects
703:05 - is a group element well rather it's a d3
703:08 - selection of a group element that's
703:10 - empty and the y-axis function is going
703:13 - to be like okay you give me an empty
703:14 - group element i'm going to put an axis
703:17 - into it and if there's an axis already
703:18 - there i'm going to
703:19 - i'm going to you know update it to be to
703:22 - be accurate
703:24 - and it has to be group element
703:27 - it expects a group element yeah i mean
703:29 - you could
703:30 - conceivably pass in like the top level
703:32 - svg element but
703:34 - yeah i'd expect a group element
703:40 - but yeah it's a good question could you
703:42 - could you pass in something else i don't
703:43 - know um i've only ever seen it
703:46 - used with a group element
704:01 - oh i
704:02 - i broke it
704:08 - there we go
704:10 - so so yeah i mean it's it's good to
704:12 - study this um because it is a lot of
704:14 - stuff sort of wrapped into one
704:16 - so what it does here is says okay i'm
704:18 - constructing an instance of an axis
704:21 - and i'm passing in the y scale
704:23 - so the return value from this
704:25 - constructor
704:27 - is a function
704:29 - that we could call y axis if we wanted
704:31 - to
704:32 - that expects as input a d3 selection of
704:35 - a group element
704:36 - as its
704:38 - argument when it gets invoked
704:40 - and that's exactly what gets passed in
704:42 - when you when you use dot call
704:45 - and the dot call is
704:47 - is called on this group element
704:50 - that's been transformed
704:53 - but um
704:54 - yeah yeah that's how it all works it
704:56 - does take some time to to wrap your head
704:58 - around it
705:00 - um but oh in time i've come to prefer
705:03 - like this
705:05 - this sort of construct
705:07 - rather than
705:09 - making a bunch of variables
705:12 - but again it's just
705:13 - just personal preference either way
705:15 - works
705:24 - you know that another thing
705:26 - another while we're at it another way
705:28 - that you could potentially do this
705:30 - which might be even
705:31 - more confusing
705:36 - is that you can construct the axis and
705:38 - then
705:39 - pass in
705:42 - this selection here
705:49 - that works as well
705:53 - i i don't understand this
705:55 - to me it seems like uh could be because
705:58 - i'm more used to fighting but seems that
706:02 - you're pressing like
706:05 - the svg thing like a argument to the
706:08 - function that's left
706:12 - yeah it's not clear
706:13 - yeah that's right that's right so
706:16 - when you call axis left from d3
706:19 - you give it the scale
706:21 - it returns an instance of a d3 axis
706:25 - but that instance of d3 axis is in fact
706:28 - a function
706:30 - that expects
706:32 - to be invoked with a single argument
706:35 - namely a d3 selection of a group element
706:38 - and so
706:39 - this statement here
706:43 - returns a function
706:46 - and that's why
706:48 - we can invoke
706:50 - that function
706:54 - like this so this part here
706:57 - we are invoking that function that gets
707:00 - returned from the axis left constructor
707:02 - and we're passing in
707:05 - a d3 selection of this group element
707:08 - because as soon as we call svg.append
707:11 - g
707:11 - it creates a brand new
707:14 - d3 selection of a brand new dom element
707:16 - which is a group element
707:18 - and then it calls dot attr on that group
707:21 - element and because
707:23 - it uses this method chaining api the
707:27 - return value from dot attr is the same
707:30 - as the return value from dot append g
707:33 - it's a d3 selection of the group element
707:36 - and so this whole expression here
707:39 - yields you know it returns
707:41 - a d3 selection of this group element
707:44 - and that's what gets passed into this
707:46 - axis left function
707:53 - okay when when you inspect the
707:56 - inspect the element uh the result is
707:58 - exactly the same right correct
708:02 - yeah all of these different um
708:07 - all of these different ways of
708:09 - of invoking the axes
708:12 - result in the exact same behavior
708:15 - they're just different ways of
708:16 - formulating it
708:19 - but yeah when you when you when you see
708:21 - it visually it's the same and yeah when
708:23 - you inspect the dom it's going to be
708:25 - exactly the same
708:28 - and from the perspective of the dom
708:32 - this thing here is the parent group
708:34 - element that we created
708:37 - with this code here svg.peng said the
708:40 - transform to be translate this is that
708:43 - group element here
708:44 - and then
708:46 - when we pass that into the d3 axis
708:48 - the axis implementation adds all this
708:51 - stuff as children
708:53 - to it so there's a path
708:55 - which is the domain line
708:57 - and then there's
709:00 - group elements for each and every tick
709:04 - and within each tick you have a line
709:07 - and a text element
709:09 - so yeah no matter how you invoke it
709:13 - it ends up to be the exact same dom
709:15 - structure
709:25 - it's quite confusing yeah
709:30 - it looks like you can pass
709:33 - axis function in the svg selection and
709:36 - vice versa
709:39 - well you can that's exactly what dot
709:41 - call does it sort of inverts
709:44 - everything
709:45 - you know i think
709:47 - probably the clearest one
709:50 - to read
709:53 - is this variant here
709:59 - where we don't even use dot call
710:03 - we construct a variable
710:05 - called y-axis which is that return value
710:08 - from axis left and then we construct a
710:10 - group element by appending a group
710:12 - element this is a d3 selection of a
710:14 - group element
710:15 - and you can see the relationship very
710:17 - clearly right here
710:19 - y axis is a function that expects
710:22 - as input a d3 selection of an empty
710:25 - group element
710:27 - and this is
710:29 - this is
710:31 - i guess shows the border between them
710:35 - very clearly
710:37 - but yeah i get it that it's totally
710:38 - confusing that you can invert the order
710:41 - of those
710:42 - in the code with dot call
710:46 - yeah it takes a while to wrap your head
710:47 - around
711:07 - okay let me ask you one thing it's not
711:11 - quite related i i think i got my my head
711:13 - around this
711:15 - it's regarding the the arrow function
711:19 - uh i don't need to use
711:21 - uh the return ever in the arrow function
711:24 - it's always the last line that's
711:26 - returned
711:30 - right
711:31 - there it's only one line so it doesn't
711:33 - make sense my question but if i have um
711:37 - an
711:38 - object
711:39 - and it has more than one line
711:43 - do i have to use return or not
711:47 - that's a good question
711:49 - yeah
711:50 - yeah
711:51 - let me show a variant of this one
711:59 - so with the arrow function
712:03 - if
712:03 - it immediately goes to an expression
712:08 - that could be an object literal could be
712:10 - a string could be a number
712:11 - it it sort of activates this thing
712:15 - called implicit return
712:18 - it's it implicitly
712:21 - adds or exec it implicitly executes a
712:24 - return statement or the equivalent of a
712:26 - return statement
712:27 - and that's sort of one of the magical
712:30 - features of these arrow functions
712:33 - however
712:34 - if
712:35 - you start the arrow function with a
712:37 - curly brace
712:39 - like this
712:41 - then it opens up into a function
712:44 - body
712:45 - where you need to explicitly return
712:49 - so you you could like
712:51 - you know
712:53 - run some code blah blah blah but then
712:57 - at the end of it
712:59 - if you just define an object
713:01 - like this
713:03 - it's not going to be returned you need
713:06 - to explicitly return it
713:09 - like this
713:12 - and so
713:14 - this function here
713:16 - is exactly equivalent to this function
713:19 - here
713:20 - but the one on the top uses that
713:22 - syntactic sugar of the implicit return
713:25 - that comes with arrow functions and
713:27 - that's by the way why it needs to be
713:29 - wrapped
713:30 - in these parentheses
713:34 - because the parentheses signify okay we
713:36 - are defining a literal object
713:39 - and and that's why it gets returned if
713:41 - you leave out these parentheses
713:44 - uh
713:45 - it's not valid javascript and it breaks
713:51 - so like if if we try to run
713:53 - that
713:54 - it's going to say
713:56 - it's not valid it's
713:58 - unexpected token
714:02 - because
714:03 - when the parser goes in it it interprets
714:06 - it okay like we're starting a function
714:07 - body now and then this is like garbage
714:10 - doesn't make any sense
714:13 - so
714:14 - yeah that's why you need those uh
714:16 - parentheses
714:18 - okay
714:19 - i i got this therefore a lot so it's
714:22 - good to know that
714:24 - this could be a reason
714:27 - nice the
714:28 - unexpected two columns
714:31 - yep
714:34 - yeah that's one of the most common areas
714:35 - you got a syntax error then you need to
714:37 - track it down figure out where it is
714:40 - um and by the way you know a lot of
714:42 - folks who have been maybe programming in
714:45 - javascript years ago
714:46 - you're used to this other syntax where
714:49 - it's like a function
714:51 - like this
714:53 - and this is like i like to call it the
714:55 - old school function
714:56 - notation
714:58 - this works too but the arrow function
715:01 - syntax is just
715:03 - it's a lot more
715:04 - concise
715:06 - and
715:08 - that's what folks would use probably
715:10 - nowadays
715:18 - all right very good a lot of fun we've
715:21 - explored some ins and outs of um
715:24 - of the details here and we've ended up
715:26 - with this
715:28 - forkable template
715:30 - oops hold on
715:36 - so i'd like to wrap up
715:41 - and leave you all with an exercise
715:46 - the exercise for this week is fork the
715:49 - scatter plot that we made and i'll share
715:51 - the link
715:53 - and change it around to visualize a
715:54 - different data set
715:56 - and i've provided this link here to
716:01 - uh this data repository that i have
716:04 - where i've just been accumulating
716:06 - over the years um
716:08 - various public data sets of interest and
716:11 - you don't have to necessarily derive any
716:14 - data from here you could just find you
716:15 - know do a search for
716:17 - data that's interesting to you
716:19 - and plug it in to the scatter plot
716:22 - and i've got this other video on youtube
716:25 - called
716:27 - preparing data for visualization and
716:29 - this walks through
716:31 - how you can create a gist
716:33 - and put a csv file
716:36 - in there
716:37 - and then once that's there you can
716:39 - follow the same steps that i did today
716:40 - to pull it into your code and visualize
716:43 - it
716:45 - and this is all there
716:46 - in the vishub forum
716:48 - so please
716:50 - submit your uh
716:52 - your work here
716:53 - looking forward to it
716:59 - okay
717:02 - thank you
717:04 - all right yeah my pleasure and uh thanks
717:06 - everyone for joining today
717:09 - it's a pleasure as always
717:12 - today i'd like to talk about reusable
717:14 - charts
717:16 - this has been a fascination of mine
717:19 - for years because every time you figure
717:22 - out how to make a certain visualization
717:26 - um it becomes sort of a telescope that
717:28 - you can point in different directions
717:30 - right at different data sets
717:34 - and encapsulating the reusable elements
717:38 - has always been somewhat of a challenge
717:42 - hey felipe how are you
717:44 - hey i'm fine thank you what about you
717:47 - good
717:48 - good good we got a full house today we
717:50 - got sriram nita adil and felipe this is
717:52 - amazing
717:54 - very cool
718:01 - so yeah today i'm going to talk about
718:04 - reusable charts and what i'm going to do
718:06 - today the idea is
718:08 - to take what we did last time
718:11 - refactor it a little bit start to use
718:13 - es6 modules
718:15 - and then adopt this
718:17 - reusable
718:18 - charts
718:20 - pattern which is sort of the the module
718:23 - pattern that
718:25 - is is commonly found with pure d3
718:28 - implementations
718:35 - but first let me review
718:37 - the submissions from last week
718:43 - yeah we got some really good stuff
718:45 - this week
718:49 - uh here's philippe's work
718:52 - title to the dot
718:54 - um nice so there's little tool tips that
718:57 - you get when you hover um you want to
718:59 - talk about this a little bit
719:02 - well that's that's not much but this is
719:04 - just uh the title i didn't
719:08 - and knew how to use the invert function
719:12 - so i add p x and p y
719:15 - in the marks
719:18 - uh but what p x and v y is doing it's
719:23 - pretty much
719:24 - the invert function if you can scroll a
719:27 - little bit up
719:29 - yeah
719:30 - there you go right
719:32 - nice
719:34 - but maybe
719:36 - there is some kind of invert function
719:39 - that i could use in the text
719:42 - i i think andrea i guess let's
719:46 - talk about this in one lock post
719:50 - right this is just just to have the
719:53 - title
719:54 - and i i got this from your cheat
719:58 - uh oh yeah cheap tricks for interaction
720:01 - yeah
720:02 - nice
720:04 - let me just provide a little bit of
720:05 - feedback
720:07 - on this
720:10 - so
720:12 - this step here
720:15 - creating marks as a derivative you know
720:18 - array of data
720:19 - this is where all of the transformation
720:22 - can happen that you need in the
720:24 - visualization including logic like
720:27 - putting together strings
720:29 - see doing it this way it actually puts a
720:31 - bunch of intelligence into
720:34 - the rendering logic meaning this this
720:36 - string of the tooltip is derived
720:39 - in the rendering logic rather than
720:42 - in the pre-processing step so here's
720:45 - one thing that you could do
720:47 - is just move this logic
720:51 - out of here
720:53 - and use something like d.title
720:56 - instead
720:58 - and then you could just say the title of
721:00 - each mark is
721:04 - and then you can get rid of these
721:05 - intermediate values
721:07 - p x and p y
721:11 - so it's it's a very small change but
721:14 - this is more in the spirit of like
721:17 - then
721:18 - uh here do do i have to put d dot x v
721:22 - yeah okay no yeah a good catch yeah i
721:24 - just overlooked that yep because x value
721:27 - and d
721:28 - is visible here so this should still be
721:30 - working
721:35 - yep it's still there
721:38 - nice
721:41 - but yeah great work great work adding
721:43 - that that's something that we had talked
721:44 - about during the last
721:46 - uh you know last week session and i
721:48 - never
721:49 - added it but i'm great i'm happy to see
721:51 - that uh it was added here
721:54 - yes this was just after the class the
721:57 - last class
721:58 - and then my my exercises
722:02 - it's
722:04 - in the end of the posts
722:07 - okay
722:09 - it's a little tricky though because just
722:11 - to just so you realize um
722:14 - whenever this runs it's going to append
722:16 - another title every time that's not a
722:18 - problem here because it only runs once
722:21 - but just something to be aware of
722:26 - and yeah in the future we'll dig into
722:27 - the patterns that you need to to make it
722:29 - work properly
722:32 - but yeah nice work very nice
722:36 - let's see oh this one's beautiful
722:40 - this is awesome
722:44 - this is um
722:47 - well let's read what it says daily new
722:49 - cases of covet in italy
722:52 - from andrea this is awesome awesome
722:56 - nice yes x-axis uses scale time
722:59 - excellent
723:03 - and
723:04 - there's some
723:05 - interactivity here let's check it out
723:08 - toggle path
723:09 - whoa it turns the path on and off
723:13 - that's super nice
723:18 - oh my gosh
723:23 - beautiful let's take a look at the code
723:25 - real quick
723:26 - i see that there's different sizes in
723:28 - use as well
723:34 - ah so when the when the path is toggled
723:37 - it just changes the display attribute on
723:39 - the path brilliant
723:47 - very nice very nice
723:49 - yeah so it parses the date
723:56 - a pretty generic way of parsing the
723:58 - numbers
724:03 - and let's check out the rendering
724:07 - r nice so the radius here changes along
724:11 - with x and y
724:12 - beautiful way of doing it
724:17 - but i have to say that
724:20 - uh with radius
724:22 - here let me just
724:24 - fork this and
724:26 - suggest a tweak
724:28 - with radius
724:30 - um it's it's a good practice to have it
724:33 - so that the the area of the circle
724:36 - corresponds with
724:38 - the data values so one filled in pixel
724:40 - would correspond with one you know
724:43 - um unit of of the data and this
724:47 - method here doesn't accomplish that
724:49 - because it uses a linear scale
724:51 - but the area is a function of the square
724:54 - root so we can change this to scale
724:56 - square root
724:58 - sqrt
725:00 - which we can also get from d3
725:07 - like that
725:10 - and then
725:12 - it really the range really should start
725:14 - at zero
725:16 - and the domain really should go from
725:19 - zero to the max of the data
725:26 - and yeah max we need to import from d3
725:40 - so yeah now
725:43 - now that the domain starts at zero and
725:46 - the range starts at zero and we're using
725:48 - a square root scale
725:51 - now the area of the circles is actually
725:55 - proportionate
725:56 - to the value
725:58 - you see as it goes down it's gets down
726:00 - to nothing which is what you'd expect
726:04 - and the higher values are are you know
726:05 - bigger circles
726:08 - and i think
726:10 - well actually what is the
726:13 - what is the radius value
726:18 - terrapia intensiva
726:23 - nice
726:25 - yeah i don't know what it means
726:28 - but this is beautiful work
726:31 - beautiful work
726:36 - let's see what else we've got
726:38 - it means intensive treatment
726:41 - ah
726:46 - intensive treatment
727:01 - yeah interesting
727:03 - so the number of
727:05 - cases
727:07 - yeah it's it's an interesting uh pattern
727:08 - here i'm not quite sure how to
727:11 - what to make of it
727:14 - but as the case numbers were going up it
727:16 - was not
727:18 - that number was not that high but
727:20 - later on that number was higher
727:35 - oh someone's joining
727:38 - hello
727:46 - all right we got someone new
727:49 - hello uh
727:50 - how do you say mex maximiliano you want
727:53 - to introduce yourself a little bit
727:58 - um hello
727:59 - kuran how are you good good how are you
728:04 - yes i'm i'm max you can call me max it's
728:06 - okay
728:07 - um
728:08 - i'm from chile an interest i haven't
728:10 - been able to
728:12 - to see the course uh like it's
728:15 - online last the same day so yeah i i
728:18 - managed to do it today so it's great to
728:21 - be
728:22 - nice welcome welcome i'm glad you could
728:24 - join us
728:26 - so yeah we got a full house today a
728:27 - bunch of people sri ram adil anita and
728:30 - felipe is here
728:32 - so
728:32 - yeah as i dig in feel free to interrupt
728:34 - me and ask questions to clarify as we go
728:38 - awesome thanks awesome
728:43 - so yeah this week
728:45 - there was just a lot of activity in this
728:47 - forum like a lot of back and forth and
728:49 - i'm really happy
728:51 - to see that
728:53 - uh oh here's here's something that adil
728:55 - made dinosaur
728:57 - d3 scatter plot
729:01 - wow ideally you want to just talk
729:02 - briefly about this one
729:04 - uh sure yeah this was um based on a
729:07 - data set from the natural history museum
729:10 - in london
729:12 - they have about 300 plus
729:15 - dinosaurs in that data set and
729:18 - i
729:19 - just wanted to try
729:21 - uh playing with it a bit using this and
729:24 - so i uh thought
729:27 - try plotting the
729:29 - length of the
729:31 - dinosaur uh on the x on the x axis with
729:35 - the weight of the dinosaur on the y axis
729:39 - and
729:40 - i then also stole the
729:43 - the tip from felipe and yourself about
729:46 - implementing these little
729:48 - uh tooltips
729:50 - um
729:51 - and
729:52 - yeah so it was just really uh
729:54 - just just uh getting familiar with the
729:56 - data set and um
730:00 - it's a it's a bit patchy and the the
730:02 - data so i had to do a bit of extra
730:04 - processing because not all of the
730:06 - dinosaurs
730:07 - had a weight um
730:10 - and
730:11 - so
730:12 - from 300 plus dinosaurs i could only get
730:16 - about 49 i think
730:19 - which had both length and weight and
730:21 - then i uh yeah just just uh
730:24 - just try to
730:25 - create a label um early on that combined
730:30 - some interesting uh bits about each
730:34 - dinosaur
730:36 - nice
730:38 - that's beautiful
730:42 - beautiful stuff
730:45 - the uh the one in the corner i thought
730:48 - might have been a typo uh
730:50 - far corner but it turns out it's
730:52 - actually uh um
730:55 - the biggest land animal that's ever been
730:57 - discovered wow that's incredible
731:01 - 70 000 kilograms argentinosaurus
731:06 - 35 meters
731:07 - 70 000 kilograms you got to be kidding
731:10 - me
731:13 - yeah i looked on wikipedia apparently 70
731:15 - 000 was kind of average for that
731:17 - dinosaur yeah not that
731:19 - it's just sort of average
731:22 - wow um one really small thing that i
731:25 - would suggest um
731:28 - so when you have numbers like 70 000
731:32 - i don't think we've touched upon number
731:33 - formatters but it's a really quick
731:35 - change that
731:37 - i would like to just do right now just
731:39 - to show
731:41 - how it could be done so the idea is to
731:45 - oh it looks like you used it here
731:49 - um i think that was already built into
731:51 - your fork i think
731:56 - i see
731:58 - oh maybe the axis does it automatically
732:04 - format
732:06 - but if you so one like the first thing i
732:08 - noticed was in the tool tip 70 000 kg
732:12 - um ideally would have a comma after the
732:14 - 70
732:16 - and we can add it pretty easily
732:18 - by importing format from d3
732:22 - and then making something called uh
732:25 - i'll call it comma format
732:30 - and we can just call format with a comma
732:33 - and format accepts this you know very
732:36 - specific string that you can do all
732:38 - sorts of things with but a very simple
732:39 - version of it is just to
732:41 - specify to to add a comma separator
732:45 - and then
732:46 - in your code that generates the label
732:51 - we can just pass that through that
732:54 - function
732:56 - like so
732:57 - so whatever the v the y value is we
732:59 - format it with a comma
733:02 - and
733:03 - voila
733:05 - there it is 70
733:06 - comma thousand
733:08 - it's very nice oh that's that's really
733:10 - nice yeah thank you yeah
733:13 - nice
733:15 - great work very fascinating data set
733:21 - and i think that's it
733:26 - if you can just go a little bit up uh
733:29 - previous to this one yeah this one
733:32 - um
733:33 - oh yeah
733:35 - sorry
733:37 - yeah just just it's a little bit
733:38 - different uh it's it's the same data set
733:42 - but i use colors oh wow the name of the
733:45 - the class but
733:47 - um
733:48 - my goal here was to have all the
733:51 - information that we had in the data set
733:55 - of the flowers
733:56 - uh
733:57 - here
733:58 - so i put also the
734:01 - a few miles over
734:03 - the color means that the specimen yep
734:06 - right the species very nice the species
734:09 - yep and
734:11 - the elliptical
734:13 - radius
734:14 - is the sepal but
734:16 - that's my question because if i change
734:20 - the the order of the data
734:23 - the petal and the sepal
734:26 - the radius becomes very small so it
734:31 - almost
734:32 - vanished
734:33 - so
734:35 - how can i
734:36 - like normalize the radios
734:40 - right
734:41 - yeah that's a good question i mean
734:44 - let me dig in a little bit
734:48 - it it depends on how you use the scales
734:51 - like which scales you use
734:54 - for the radius
734:57 - so
735:00 - oh you had a question how can i easily
735:02 - change shapes according to the data
735:06 - um yeah this this questions like because
735:08 - i didn't want to use ellipses in the
735:11 - beginning right i thought okay i can use
735:13 - different
735:14 - marks but then i said okay i don't know
735:17 - how to do this so i will just use
735:19 - ellipses and
735:21 - then i can use the
735:23 - the radio different radius different
735:27 - right
735:28 - right i mean
735:31 - it's um
735:34 - you it's it's creative to use an ellipse
735:38 - that has you know different width and
735:40 - height for the different values here
735:42 - but it may be a bit hard to read
735:45 - and so
735:47 - you know
735:48 - maybe
735:50 - maybe the best we could do is just show
735:52 - three variables
735:54 - i mean color is color color is a great
735:56 - choice for the species because it
735:58 - represents a you know
736:00 - a column that has three distinct values
736:03 - a quantity
736:04 - yeah qualitative
736:08 - uh categorical attribute
736:11 - but when it comes to the radius
736:14 - um
736:19 - i would say
736:20 - again it might make sense to use circles
736:27 - and then
736:28 - set the radius
736:30 - using
736:33 - a square root scale
736:39 - so i'm going to set r
736:41 - to be
736:46 - r of
736:48 - r value
736:49 - of d is the way i would set it up
736:54 - and then
736:57 - r
737:00 - again could be a square root scale
737:06 - and then the domain can go from 0
737:11 - to the max
737:14 - of r value
737:17 - and then the range
737:19 - would go from 0 to max radius
737:23 - and i think there's a lot of things that
737:24 - we don't have defined
737:30 - i can pull in this and this from d3
737:35 - and then our value
737:37 - okay you've got our x value in our y
737:39 - value it may be sort of too tricky to
737:42 - show both of those at the same time
737:46 - and so we can just pick one of these
737:50 - and
737:52 - oh let's use this as max
737:55 - radius i'll set it to be i don't know
737:57 - 15.
737:59 - that should work maybe i missed
738:00 - something
738:06 - oh yeah data
738:08 - the max over the data of the r value
738:13 - yeah and so
738:15 - because the the data values are
738:20 - like they don't even get close to zero
738:23 - they're in centimeters
738:25 - and so
738:26 - it works pretty well
738:28 - with um
738:31 - with a square root scale to set the
738:33 - radius like this and we can set the max
738:35 - radius to maybe 10 so we don't get so
738:37 - much overlap
738:39 - but now
738:41 - radius is showing the the variability in
738:44 - sepal length
738:49 - and it doesn't it doesn't vary that much
738:52 - actually
738:54 - but yeah this is how i would suggest to
738:56 - do it is to use the square root scale
738:58 - where the domain and range both start at
739:00 - zero yeah i i see but um
739:04 - if i if i have a kind of data that i
739:06 - won't like uh make a normalization
739:11 - of
739:11 - of the range
739:13 - of the data how how can i do it
739:17 - how do you mean well i'm not sure what
739:19 - you mean
739:21 - um
739:22 - i mean
739:23 - imagine that i have a range of data but
739:27 - i want to restrict it from zero to one
739:31 - and
739:32 - have the average
739:37 - um i'm not quite understanding so let's
739:39 - take for example this data set
739:43 - yeah if you if you see like a petal with
739:48 - it's it's has 0.2
739:51 - if i
739:53 - if i use this it's too small so i want
739:57 - to make it from a range from let's say
740:01 - one two
740:02 - two
740:03 - uh the size of the the radius
740:08 - then it would be a linear scale right
740:11 - yeah
740:12 - i mean you could do that
740:16 - that's totally
740:18 - you know something doable
740:24 - so i'm just going to comment out this
740:26 - one
740:28 - and put this other one back where
740:33 - like you said we we could
740:36 - make it so that
740:38 - the lowest value corresponds with some
740:42 - like min radius
740:44 - and the max value corresponds with some
740:46 - max radius
740:49 - and we could define
740:52 - min radius to be like
740:54 - i don't know five
740:59 - and this would work it would make it so
741:01 - that you have like it would make it so
741:03 - that it's guaranteed that the smallest
741:06 - circle has a radius of 5
741:08 - and the biggest circle has a radius of
741:13 - max radius which is 10.
741:17 - so this is how you would do that i think
741:19 - this is what you were
741:20 - asking about
741:22 - yes yes that's that's right for for this
741:26 - case it doesn't make sense but it's just
741:29 - something that i was thinking about
741:34 - yeah i mean technically it's possible
741:36 - and and you could use a sk a linear
741:38 - scale and do it like this
741:41 - however
741:43 - the main
741:44 - problem
741:45 - with doing it this way is that the area
741:48 - of the circle does not
741:50 - correspond to the data values
741:52 - which could be
741:54 - problematic um
741:58 - it's it's not easy to read this in a
742:02 - sense i said that it's not it's not like
742:04 - um
742:06 - i don't know what the word what the best
742:08 - word is like
742:11 - like it's it's almost like not really
742:13 - honestly
742:14 - yes misleading yeah
742:16 - exactly exactly it can be
742:19 - misleading uh because you know you could
742:22 - pick up a min radius of one
742:24 - and it would make some of the dots
742:26 - really tiny but it would you know
742:28 - it's it doesn't really express the true
742:34 - uh like variability within that
742:37 - particular value of the data and so you
742:40 - know this is an area
742:42 - of
742:44 - debate
742:45 - within the community of people who make
742:47 - visualizations some people are very
742:50 - lacks on how they use radius
742:52 - and so you know it could be a linear
742:54 - scale it could be a square root scale
742:55 - could be a log scale you know whatever
742:57 - it takes to make a pretty picture
742:59 - but i i my sort of philosophy is on the
743:03 - opposite end of the spectrum where like
743:04 - i firmly believe that if you use size
743:08 - to encode
743:09 - some value from the data
743:12 - then
743:14 - you should
743:15 - make it so that the area of the circle
743:19 - corresponds exactly with the values
743:22 - from the data
743:24 - so if the value in the data is zero
743:28 - it should be a zero size circle that you
743:29 - can't even see
743:31 - you know
743:32 - and uh but that's sort of an edge case
743:34 - i've seen people use one as the min
743:36 - value so that you could at least see
743:37 - something on the screen
743:39 - but
743:41 - besides that you know i i would pretty
743:43 - pretty firmly stick to that
743:46 - philosophy that if you do use
743:50 - radius
743:52 - then
743:52 - the best thing to do
743:55 - is to use a square root scale
743:59 - because
744:00 - the area of a circle varies with the
744:02 - square root of the radius
744:06 - um what's that uh
744:14 - what's that that formula yeah area is pi
744:18 - r squared
744:22 - so this is this is why it makes sense to
744:24 - use a square root scale
744:29 - and so the radius of a circle um
744:33 - is calculated
744:36 - with respect to that same formula
744:40 - so that's why
744:42 - if you if you want to make it so that
744:45 - the area of the circle corresponds with
744:48 - the values
744:49 - from the data
744:50 - then you have to use a square root scale
744:52 - and make sure that the domain and the
744:54 - range both start at zero
744:58 - and so the domain could go from zero to
745:00 - the max
745:02 - value
745:05 - oh whoops i'm editing why my mistake
745:12 - yeah so it would be this version here
745:15 - of setting up the scale
745:27 - oh whoops
745:28 - that has to be defined above
745:31 - so it would be this version here
745:34 - and
745:35 - you know sometimes it doesn't
745:40 - turn out
745:41 - the way you expect
745:44 - yeah in this case it doesn't doesn't
745:47 - mean
745:48 - anything
745:50 - right yes
745:51 - exactly exactly
745:53 - and so this is you know part of the
745:55 - process of making data visualizations is
745:58 - just trying different things and seeing
745:59 - what works
746:02 - you know spreading the value across the
746:05 - screen from left to right
746:07 - between the min and the max like you
746:09 - know the x-axis or the y-axis of a
746:11 - scatter plot
746:13 - that's hugely effective at looking at
746:16 - you know things that fall
746:19 - in in like a small range
746:21 - but there's a lot of variability within
746:23 - that small range
746:26 - but radius isn't is not good for that
746:29 - sort of thing you know the because these
746:30 - values i mean look they value they vary
746:32 - between like
746:34 - i don't know two and four or something
746:37 - and so it's not really that great of a
746:39 - variation so it doesn't really
746:42 - it doesn't really pop out when you use
746:44 - radius
746:46 - but it's worth a try for sure
747:00 - all right cool cool
747:02 - so um
747:05 - yeah great work everybody
747:07 - very nice
747:10 - all right let's dig into this um idea of
747:12 - a reusable chart
747:14 - we will build
747:15 - a reusable chart based on the scatter
747:18 - plot we made last time
747:21 - on the way i'm going to refactor the
747:22 - code into modules
747:25 - and then
747:26 - the whole point
747:28 - of this
747:29 - reusable chart thing is to strictly
747:31 - decouple the specific
747:33 - and the generic meaning the stuff that's
747:35 - specific to the data set and the
747:37 - visualization that we're making and then
747:39 - the generic stuff that
747:42 - you know implements
747:44 - reusable
747:46 - logic for a specific type
747:49 - of visualization
747:51 - and we're going to use this tried and
747:53 - true pattern
747:55 - from mike bostock in 2012 can you
747:57 - imagine towards reusable charts is what
747:59 - it's called
748:01 - and
748:02 - i'm going to make it dynamically update
748:04 - it's going to dynamically change
748:07 - x and y
748:12 - and i want to talk a little bit about
748:13 - why
748:14 - i'm
748:15 - doing this
748:16 - today
748:19 - from the structure of the course
748:21 - perspective
748:24 - i i want to go in this direction so that
748:27 - we have a very solid
748:29 - basis
748:31 - for
748:33 - starting on different visualization
748:35 - types so rather than go wide in the
748:38 - beginning like we only made one
748:40 - visualization type so far a scatter plot
748:42 - so rather than
748:43 - you know making a bar chart and a line
748:45 - chart from there what i want to do is
748:48 - make a reusable chart
748:50 - version of the scatter plot
748:54 - and then use that as a basis
748:57 - for
748:58 - future episodes where we branch out into
749:01 - all sorts of different visualization
749:03 - types that way
749:05 - by the end of the course we'll have like
749:07 - a library of
749:09 - reusable chart components that are sort
749:12 - of usable off the shelf
749:15 - and we'll be working within this this
749:17 - pattern which is very useful
749:21 - to know and it's one of the trickiest
749:22 - aspects of d3
749:26 - so let's dig in
749:39 - i'm going to start by forking this
749:41 - scatter plot that we made last time and
749:44 - i'll call it reusable
749:47 - d3 scatter plot
749:57 - right now it's just um
750:00 - this
750:01 - index.html
750:03 - single file sort of thing
750:07 - before we do anything
750:09 - i want to change some stuff around so
750:11 - that it it reflects like the structure
750:14 - of
750:16 - a javascript project that you might see
750:19 - so i'll split out this the styles
750:23 - into a separate file
750:28 - oh someone is joining hello
750:38 - hello someone has joined us uh larry
750:42 - how are you you wanna hi
750:44 - nice you wanna introduce yourself a
750:46 - little bit
750:47 - uh yeah uh my name is uh larry rancho
750:50 - i'm from the philippines
750:52 - nice i work with uh with the university
750:57 - as a faculty and i also work as a
751:00 - developer for data visualization
751:03 - for a company in australia so
751:06 - yeah i've been using your resources
751:10 - since i started working with d3 thank
751:12 - you so much i really appreciate that
751:14 - oh fantastic
751:16 - fantastic well i'm happy you could join
751:20 - um
751:21 - i think this is the most people that
751:23 - have ever been on the live call
751:26 - and this is great so we'll see how it
751:28 - goes um
751:31 - all right thank you welcome welcome
751:40 - okay so the first thing i'm going to do
751:41 - is split out
751:43 - the css into a different file
751:46 - um just because i personally prefer to
751:48 - have a bunch of small well-defined files
751:51 - that that way you know the complexity
751:53 - can scale over time
751:56 - so i'll call it styles.css
752:00 - and i'll take this css and move it into
752:02 - that file
752:04 - and then
752:06 - get rid of that style tag and then we
752:08 - can use a link
752:12 - tag and i can never remember the syntax
752:14 - so i'm just going to google it
752:19 - um
752:21 - yeah the html link tag
752:23 - there we go
752:27 - link rel equals stylesheet which is i
752:30 - guess the type of thing it is and it
752:32 - points to styles.css
752:37 - there we go
752:39 - i'm also going to
752:43 - create a package.json
752:49 - and this is going to have inside of it
752:52 - dependencies
752:57 - d3
752:58 - at a specific version
753:00 - which i'm going to find from
753:04 - on package i'm just trying to figure out
753:05 - what's the latest version of d3
753:08 - okay it's 6.7.0
753:13 - so that's what i'll put there
753:18 - that way
753:19 - um
753:20 - we can get rid of this script
753:26 - tag here
753:31 - and then i'm going to put
753:34 - all of this javascript
753:36 - into a separate file
753:38 - called index.js
753:44 - and the way that vishub is set up
753:47 - it automatically
753:48 - loads in that file and it also
753:51 - automatically loads in
753:53 - our dependencies which includes d3
753:56 - this is how most modern-day
753:59 - javascript build systems work so like it
754:02 - mirrors the experience of webpack or
754:03 - roll-up locally
754:05 - so now we're at sort of
754:08 - a a comfortable starting point where we
754:12 - can start to refactor this stuff
754:16 - at this point i would like to introduce
754:18 - the concept of towards reusable charts
754:22 - this is a great great piece from
754:26 - mikebossdog the author of d3
754:30 - from 2012 and it's one of those unique
754:33 - things that has actually stood the test
754:35 - of time
754:39 - so rather than trying to invent my own
754:42 - pattern
754:43 - which i did for the 2018 version of this
754:45 - course
754:46 - and rather than use a library that has
754:49 - components built in like react does
754:52 - which i used for last year's version of
754:53 - the course
754:55 - this time i want to use the pure d3 way
754:58 - of making so-called components
755:01 - once you make a component with this
755:03 - pattern you can easily wrap it with
755:06 - whatever other framework you're using
755:08 - like vue or react or angular
755:10 - or whatever
755:13 - but
755:14 - this is a way of making components that
755:16 - is just purely dependent on d3 and
755:18 - nothing else so here's how it works
755:21 - it's going to be a function
755:26 - so as i go through
755:31 - i'm going to implement these ideas
755:36 - so i'll make a new file called
755:38 - scatterplot
755:40 - dot js
755:42 - this will be our scatterplot component
755:48 - i'll start by saying export const
755:50 - scatter plot equals
755:52 - a function
755:57 - and
755:58 - it's going to be used in much the same
756:01 - way as
756:03 - a d3 axis
756:05 - this towards reusable charts pattern is
756:07 - actually used
756:08 - or a variant of it you know is used
756:11 - within d3 itself
756:14 - where you have a constructor for
756:16 - something
756:16 - and then you have these chainable
756:18 - methods
756:20 - that you can add onto it
756:23 - so let's keep reading
756:25 - in this towards reusable charts
756:29 - one way of configuring the thing would
756:32 - be to pass arguments
756:35 - but
756:37 - um you know he mike boss dog here goes
756:39 - through the various ways of
756:42 - of configuring something
756:44 - and the pros and cons of each
756:47 - you know it's cumbersome for the caller
756:49 - to remember for example the order of
756:51 - arguments so maybe make it a config
756:54 - object
756:55 - but that's also cumbersome for the
756:57 - caller because the calling code must
757:00 - then manage
757:02 - both the chart function and the
757:03 - configuration object over time
757:06 - so rather than do it like that
757:10 - we can use
757:12 - this method chaining pattern
757:15 - that looks something like this
757:18 - you create the instance of the chart
757:21 - and then you call for example dot width
757:24 - passing in the width that that then
757:27 - returns the instance of the chart and
757:29 - then you can call dot height to set the
757:31 - height
757:32 - and that state
757:34 - of width and height is stored inside of
757:37 - that instance
757:39 - of the chart
757:41 - so let's work toward this
757:44 - in our code
757:56 - um
758:06 - in this scatterblock component
758:09 - we can have a thing that i'm going to
758:11 - call my
758:13 - which is going to be the instance of the
758:15 - chart and this name
758:18 - pays homage to the original
758:20 - article
758:21 - which also uses my
758:23 - so in this chart constructor it returns
758:26 - a function called my
758:30 - this is going to be a function
758:34 - and this is what will be returned
758:37 - from this constructor
758:46 - so
758:47 - let's create
758:48 - some of these
758:50 - accessors or getter setters
758:54 - this here is a kind of verbose way of of
758:57 - doing it but let me just walk through
758:59 - what this means
759:01 - my is a function
759:03 - and in javascript functions can have
759:04 - properties so we can set my.width to be
759:07 - this function
759:09 - that accepts as input a value which will
759:12 - be the new
759:13 - width
759:15 - or not
759:16 - and if it's if it's invoked with no
759:19 - arguments that's what this is checking
759:21 - here arguments.length
759:24 - so if there are no arguments then the
759:26 - function acts as a getter it returns
759:29 - the width which is stored in this
759:31 - variable here
759:34 - otherwise
759:35 - it sets width to be the passed in value
759:39 - and crucially it returns my this this
759:42 - returning of my is what enables
759:45 - method chaining
759:46 - to happen
759:47 - and height is just the same pattern
759:50 - but this is kind of verbose
759:52 - and
759:53 - when i do this sort of thing i like to
759:55 - look at the source code of d3 axis
759:59 - as a reference
760:01 - because
760:02 - it has much the same
760:04 - pattern
760:05 - to it
760:06 - but the implementation is is pretty um
760:09 - pretty concise
760:11 - and this is part of d3 itself so
760:13 - i think it's a good
760:15 - reference to use it's a it's a much
760:17 - smaller way
760:19 - of implementing
760:20 - these getter setter functions
760:23 - and since we'll have a bunch of these i
760:25 - would prefer this one
760:27 - the way it works is
760:29 - you know it it uses underscore for the
760:31 - name of the thing that gets passed in
760:34 - and it says okay return
760:38 - if there is an argument
760:41 - set the
760:42 - value of the thing internally
760:45 - comma
760:46 - axis an axis in our case is going to be
760:49 - my
760:50 - and this is a weird little javascript
760:52 - expression that you can do you can
760:54 - actually have an expression that is just
760:56 - two
760:57 - things separated by a comma
761:00 - and it implicitly returns the second
761:02 - thing
761:03 - and so in this case axis gets returned
761:06 - to enable the method chaining
761:09 - but if there
761:10 - if there's no argument then it just
761:12 - returns
761:13 - uh offset this internal variable here
761:16 - so i'm just gonna copy this template
761:19 - and use it over here and adapt it
761:23 - to to our code here so instead of axis
761:25 - it's going to be my
761:27 - instead of offset i'm going to start
761:29 - with width and height because width and
761:30 - height does need to be configured
761:34 - so my dot width
761:36 - equals
761:40 - a function where if a value is specified
761:43 - it just sets that value
761:45 - to be
761:46 - width
761:47 - right here
761:48 - and it returns
761:50 - my
761:52 - otherwise it will just return
761:54 - with
761:56 - but width is not defined in this scope
761:59 - yet
762:00 - so i need to say let with
762:04 - like this
762:05 - and we can't use
762:07 - const because we reassign to width here
762:11 - so that's why
762:12 - this needs to be let
762:17 - and this is the general pattern
762:20 - of
762:23 - these chainable getter setter functions
762:27 - now i i realized this might have been a
762:28 - lot
762:30 - are there any questions
762:32 - so far
762:35 - yeah the
762:36 - the plus that came before the underscore
762:40 - um
762:41 - was that to
762:43 - ensure that it was a number because i
762:45 - think that worked that this came up in
762:47 - the previous lesson
762:49 - exactly yep that's exactly what it is
762:52 - so in in d3 axis i think it was the
762:55 - offset which
762:57 - is expected to be a number
762:59 - and so yeah if you pass in a string like
763:02 - 50
763:05 - you know it gets to be that value but if
763:07 - you
763:08 - if you preface it with this unary plus
763:10 - operator it parses the string into a
763:12 - number
763:13 - and so that um we actually could add it
763:17 - there
763:18 - this is this is called um
763:21 - defensive
763:23 - programming
763:24 - where you sort of expect the worst case
763:27 - you know you expect people might abuse
763:29 - the api and pass in a string where
763:31 - they're really supposed to pass in a
763:32 - number
763:34 - so
763:35 - that's why the plus is there it's just
763:38 - to guarantee that before it gets to this
763:40 - variable inside that it's
763:42 - the right type of thing
763:45 - um
763:46 - so hey why not let's let's leave it
763:48 - there
763:49 - it'll make our api more robust so we
763:51 - could pass in a string if you you know
763:53 - if we
763:54 - accidentally
763:56 - had a string that's our width and
763:58 - everything would work out just fine
764:01 - yeah
764:03 - and the um
764:04 - the my after the comma that that is i
764:08 - don't think i've seen that before um
764:10 - yeah yeah this one threw me for a loop
764:11 - the first time i saw it too let me
764:13 - unpack it a little bit
764:15 - yeah i'm glad you're asking because
764:18 - it's a lot to process
764:21 - so in javascript
764:23 - there is this um
764:25 - this construct that's not very widely
764:27 - used which is just parentheses
764:30 - and stuff separated by commas
764:33 - and when you execute that
764:36 - it returns the last
764:38 - thing um and those things in the middle
764:41 - could potentially have side effects so
764:43 - let's say let x equals
764:46 - zero
764:48 - we can have something like x
764:51 - equals five
764:53 - comma
764:57 - as a a piece of javascript and like it's
765:00 - yeah it's cryptic it's kind of weird but
765:03 - to understand what it does it just you
765:05 - know it just executes this
765:09 - and
765:10 - it returns the last thing
765:12 - and so this is a miniature version of
765:15 - what's happening in the code here
765:19 - it says width equals this thing
765:22 - and so now if we inspect the value of x
765:25 - it it's actually five
765:27 - because it was assigned here
765:29 - and this you know
765:31 - in all likelihood this violates some
765:33 - kind of like
765:35 - you know if you were to use eslint this
765:37 - might not pass eslint because it's too
765:39 - it's cryptic
765:40 - um
765:41 - but this is what mike bostock uses in d3
765:44 - axis so
765:45 - it's good enough for me
765:46 - that's sort of how i look at it and i
765:48 - think these these parentheses inside may
765:51 - have been added by prettier if i run
765:53 - prettier
765:54 - it adds those parentheses i guess just
765:56 - for clarity
765:59 - um but yeah that's what's going on here
766:01 - if you just have
766:04 - parentheses
766:05 - with commas
766:07 - it executes all of those things and it
766:09 - returns the last
766:11 - entry in the list
766:16 - yep that makes sense thank you yeah
766:21 - um and another another thing that may
766:23 - not be obvious is that
766:26 - we can't use
766:28 - the arrow function
766:30 - here because with
766:32 - with the arrow function
766:34 - arguments is not defined
766:39 - um
766:44 - check this out
766:50 - if we make an arrow function that just
766:52 - logs out arguments
766:54 - arguments is a special keyword in
766:56 - javascript
766:57 - if we execute f
766:59 - we get arguments is not defined
767:02 - that's one of those little changes that
767:04 - was introduced with the fat arrow
767:05 - function
767:06 - but instead if we say f equals function
767:10 - you know the long form where we write
767:12 - out function
767:15 - then we can access
767:18 - arguments
767:20 - and it gets undefined but if we pass in
767:22 - like one two three as the arguments
767:24 - that's what arguments resolves to the is
767:27 - the arguments that you pass into the
767:29 - function
767:32 - so um
767:34 - we could you know instead check like
767:38 - is the value defined but then that would
767:41 - like break in the case of zero you know
767:44 - which
767:45 - so as a general reusable pattern for
767:48 - these getter setter things
767:51 - um this is the safest way to check
767:54 - if there were any arguments passed in or
767:56 - not
767:57 - and that's why
767:59 - we use this keyword function so so that
768:02 - we get arguments defined
768:04 - inside of here
768:12 - all right so we can move on and and we
768:14 - could do the same thing for
768:15 - height
768:19 - we can set height and return height
768:22 - and define height up here
768:28 - and now we can begin to move our
768:32 - visualization logic into this component
768:34 - here
768:38 - the way it's going to look
768:40 - is
768:43 - in our main
768:47 - we're going to load in the data
768:49 - and then
768:50 - all this logic is going to be go inside
768:54 - of this scatter plot function
768:58 - which we're calling my right here
769:01 - so i'm just going to paste it it's not
769:03 - going to work
769:05 - and this is how
769:07 - we can invoke
769:09 - this component we can say
769:12 - well first of all we need to import it
769:17 - import
769:20 - scatter plot
769:22 - from dot slash
769:24 - scatter plot
769:29 - and now we can use it in much the same
769:31 - way as we use
769:32 - a d3 axis we can say scatter plot
769:37 - dot width
769:38 - is width which we have here as our
769:43 - you know window.inner width
769:46 - and same thing for dot height
769:49 - we can call dot height which invokes our
769:51 - setter and we can pass in the local
769:53 - variable here
769:54 - height
769:56 - and then we can
769:57 - call this
769:58 - with our
770:00 - svg element
770:03 - and that's another aspect of this
770:05 - towards reusable charts pattern
770:09 - is that it accepts as input a d3
770:12 - selection
770:14 - and it's going to put stuff inside of
770:16 - that selection so
770:18 - um
770:19 - similarly to axes like d3 axis it
770:22 - expects a d3 selection of a group
770:25 - element
770:26 - and then it puts the axis stuff inside
770:28 - of there
770:29 - our scatter plot can do the same you
770:32 - know it could accept maybe
770:34 - a whole svg element or or an svg group
770:37 - element either way could work
770:41 - and this is how you would invoke it you
770:43 - know pass in the selection
770:45 - to the chart
770:46 - which is equivalent to saying selection
770:48 - dot call
770:50 - my chart and we got into this last time
770:52 - with the axes
770:54 - and so
770:56 - the way that i would love to see it
770:59 - is svg.call
771:03 - scatterplot
771:05 - width and height like this
771:11 - so this is the the overall pattern
771:15 - i'm just going to keep going until it
771:17 - works
771:19 - another point of contention with this
771:21 - pattern is how to deal with the data i
771:23 - think we should deal with the data as
771:25 - just another thing that we can set you
771:28 - know so let's set dot data
771:30 - we pass in the data
771:33 - and then in our scatter plot
771:35 - implementation
771:37 - we can have another one of these local
771:39 - variables called data
771:43 - and then we can have another one of
771:45 - these
771:47 - accessors
771:49 - for data
771:53 - and in this case we
771:55 - we must not have this little plus
771:57 - because uh it's expected to be an array
772:00 - not not a string that's going to be
772:02 - coerced into a number so i'm going to
772:04 - get rid of that it's just going to set
772:06 - data internally to whatever was passed
772:08 - in here
772:11 - and
772:13 - it's it's going to remain broken for a
772:14 - while so i'm just going to keep going
772:16 - like this adding the things that we need
772:21 - for example x value y value
772:24 - margin and radius
772:25 - these are all
772:28 - you know configurable things so let's go
772:31 - ahead and add
772:32 - add these as
772:34 - as configurable things on our plot
772:40 - the way it would look to invoke this
772:43 - stuff is that we could say
772:45 - dot
772:46 - x value
772:48 - and pass in this function
772:54 - dot y value
772:56 - and pass in this function
773:01 - dot margin
773:02 - and pass in
773:04 - this margin
773:07 - and then dot
773:08 - radius
773:10 - passing in
773:12 - 5
773:14 - like that and then when we use prettier
773:16 - it all formats nicely
773:19 - and this is what it looks like to
773:21 - configure
773:22 - our scatter plot
773:27 - now we need to go and implement all of
773:29 - those
773:31 - as you know local variables with getter
773:34 - setters
773:36 - so
773:37 - we've got what was it x value
773:40 - y value
773:43 - margin
773:46 - radius
773:51 - and then i'm just going to copy the same
773:54 - template
773:58 - four
773:58 - times
774:00 - change data to x value which is going to
774:04 - be a function
774:06 - change data to y value
774:10 - which is also going to be a function
774:13 - change data to margin
774:15 - which will be an object
774:18 - and then change data to radius
774:21 - which
774:22 - will be a number so we can actually
774:24 - bring back that little plus
774:26 - to be defensive
774:28 - about how we implement this
774:33 - okay now we have getter setters for x
774:36 - value y value margin and radius
774:45 - [Music]
774:50 - when i see the the more verbose version
774:53 - of that function
774:55 - um the one that you showed before
774:58 - a
774:59 - the function evaluates the absence of
775:02 - argument when with an exclamation mark
775:06 - right
775:07 - in this more concise version how is the
775:10 - absence of length is being evaluated in
775:13 - this in this version oh i see what
775:15 - you're asking
775:18 - yeah yeah let me explain it's it's a um
775:22 - oh there's all our errors
775:25 - it's a behavior of javascript where
775:29 - so
775:30 - let's say let's um
775:33 - bool equals
775:35 - true bool is going to be some boolean
775:37 - value
775:38 - and so if we have something like
775:41 - bull question mark
775:44 - yes or no
775:47 - it evaluates to yes
775:52 - if bool
775:54 - is
775:55 - false
775:58 - it evaluates to no
776:02 - and here's the tricky bit in javascript
776:04 - there's this notion of truthy
776:07 - things are truthy or falsey
776:11 - you know when they're coerced to
776:13 - booleans
776:15 - strings for example numbers
776:17 - when you pass them in when you treat
776:19 - them like booleans they're they're
776:21 - coerced to be truthy or falsy and so the
776:25 - way that that plays out in the case of
776:27 - arguments.length
776:29 - arguments.length
776:31 - is going to be a number because
776:33 - arguments is an array
776:35 - and so if arguments.length is 0
776:39 - then the value of 0 will be put into
776:42 - this ternary operator and it turns out
776:45 - that 0 is falsy in javascript so that's
776:49 - why
776:50 - it would evaluate to no
776:54 - but if the length of arguments is let's
776:56 - say 1
776:58 - that evaluates to something that is
777:00 - truthy in javascript it's kind of true
777:03 - it's it's like true
777:05 - if it's treated as a boolean and so that
777:07 - would evaluate to yes
777:10 - so that's why
777:12 - arguments.length works in this case like
777:16 - it does
777:17 - great okay it makes sense thanks nice
777:20 - nice happy to hear it
777:23 - and this is so great i'm so glad that
777:25 - that you're asking these questions
777:26 - because
777:28 - sometimes i don't know what to stop and
777:30 - explain and what what not to you know so
777:33 - thanks for your question
777:38 - all right let's keep going here
777:40 - um
777:44 - looking at this file
777:47 - it seems like everything is right we're
777:49 - pulling in the data we're defining our
777:51 - svg
777:53 - um
777:55 - one thing that we're not doing yet is
777:58 - in our scatter plot
778:01 - this function here needs to take as
778:03 - input a selection
778:05 - i can call it svg
778:08 - but honestly i would rather not because
778:10 - it could be an svg it could be a group
778:12 - element
778:13 - and so i'm just going to replace
778:15 - svg with selection
778:20 - so i just replaced all instances of svg
778:23 - with selection
778:28 - and now it should work we might be
778:30 - missing some imports yeah that that's
778:32 - one thing that's
778:34 - outstanding
778:37 - um oh i never changed this around
778:41 - to use the es6 import syntax
778:45 - this is something i should have done as
778:47 - soon as i moved it to index.js
778:51 - so we can import all this stuff that we
778:53 - need from d3
778:56 - and in scatter plot
778:58 - dot js we're going to need scale linear
779:01 - extent axis left and axis bottom but not
779:05 - csv and not select and in index.js i
779:09 - don't think we're going to need any of
779:10 - that other stuff
779:12 - so we could just use
779:14 - csv and select
779:19 - over there
779:21 - so let's see is it working
779:23 - um
779:24 - oh we get a nice error
779:26 - unexpected token
779:28 - okay
779:37 - there's an unexpected token somewhere
779:41 - in index.js
779:43 - line 46.
779:50 - it's missing the column in line 45.
779:55 - um
779:58 - in line 40
780:01 - no no you're
780:03 - chaining no you cannot have that
780:08 - it almost feels like it has like a like
780:10 - an older version of
780:14 - my file
780:20 - ah scale yeah it was some some sort of
780:22 - glitch
780:24 - now it says scale linear is not defined
780:31 - okay fair enough
780:33 - scale linear we should be getting that
780:35 - from
780:37 - d3
780:44 - that's odd
780:49 - let me try console.log scale linear
780:53 - to see if it
780:54 - is even like loading to that point
780:59 - it is
781:01 - it's there
781:02 - so now what
781:08 - what
781:10 - what it's working
781:13 - the total um
781:15 - total 20 magic yeah total twilight zone
781:18 - moment with errors that resolve
781:20 - themselves
781:23 - yeah like magic
781:30 - all right
781:32 - sweet
781:33 - we've done it it works
781:36 - this is amazing
781:40 - so yeah just just to quickly review
781:42 - everything
781:45 - index.js
781:46 - has all the logic that we had
781:49 - from earlier where it loads in the data
781:50 - it sets up the svg
781:53 - but now our main function
781:57 - is a lot more concise it just
782:00 - invokes our scatter plot
782:03 - and configures it with all this stuff
782:07 - and here's something that's kind of
782:08 - mind-blowing you can take this
782:10 - expression
782:12 - and and we can skip that local variable
782:14 - we could just pass that straight into
782:16 - data like that
782:18 - that works too
782:23 - yeah to me that's a mind-blowing thing
782:24 - because a weight it's like this
782:26 - asynchronous control flow and it it has
782:28 - to like
782:29 - wait until that's done before it invokes
782:32 - this whole thing but that's the magic of
782:35 - um async await right there and i kind of
782:37 - prefer it like this it's it's more
782:39 - uniform all the configuration happens
782:42 - right here
782:50 - awesome awesome um yeah and in our
782:53 - scatter plot we have a bunch of local
782:55 - variables in this closure
782:59 - um
783:00 - a closure is this the scope of the
783:02 - variables inside of this function so
783:04 - when you invoke the scatter plot
783:06 - constructor it creates this closure
783:09 - and that's where these variables live
783:11 - and we use let here not const because
783:13 - they can change
783:14 - over time
783:16 - and then we've got this my function that
783:18 - gets invoked with a selection and this
783:21 - is where it sets up all the scales and
783:23 - does all the
783:24 - you know transformations
783:27 - right here
783:29 - and it references these variables that
783:31 - are defined above
783:34 - and it resolves to the things that we
783:36 - passed in
783:37 - to these these getter setter functions
783:40 - and we just use them as setters
783:42 - not getters
783:46 - and
783:46 - yeah all the logic is the same as same
783:49 - as it was before for the scatter plot
783:51 - and it works
783:54 - so with this template and
783:57 - one
783:58 - would be able to change the data set and
784:02 - the and the name of the variable the new
784:04 - variables if you change the data set and
784:06 - it will update like automatically now
784:10 - exactly
784:11 - yes that's right and and the key thing
784:15 - is that
784:17 - nothing at all
784:19 - inside scatterplot.js
784:21 - will need to change
784:23 - nothing at all if you change the data
784:25 - set that's what i meant earlier by
784:27 - separating the specific from the generic
784:30 - like this is a totally generic scatter
784:32 - plot implementation if you were to
784:34 - change the data set
784:36 - the only file you would need to change
784:38 - is index.js you can change the csv url
784:42 - change how the rows are parsed
784:45 - and change the configuration of the plot
784:49 - and all that
784:50 - yeah this is like the whole point of
784:52 - this reusable pattern is that all of
784:54 - this configuration happens
784:56 - outside of that reusable component
785:00 - so yeah you can just tweak it right here
785:02 - if you want it to be um
785:04 - you know pedal width you could just
785:06 - change it right here
785:08 - and boom it updates
785:12 - if if i want you
785:14 - to have like the specie
785:17 - as a different marker
785:20 - as a classification marker
785:22 - how could i add this to this code
785:26 - that's a great question
785:30 - and let me just clarify what you mean by
785:32 - marker i think you might mean
785:35 - like a different shape
785:37 - like these yep
785:39 - yes that's right that's right yeah
785:42 - you know this would be um
785:44 - this would be a great thing to try to do
785:47 - as an exercise this week
785:50 - and and i can outline how to do it i
785:52 - don't think we have time today to
785:54 - actually do it but i can outline yeah
785:56 - but
785:57 - but should i use like a case switch
786:01 - uh inside and where in the logic this uh
786:04 - switch case
786:06 - uh how algorithm
786:08 - would be
786:09 - or should i use
786:11 - something completely different
786:15 - well let me walk through how how you
786:17 - would how you might do it um
786:19 - the switch case meaning
786:21 - the logic that determines which shape it
786:23 - is is that what you mean
786:25 - yes yes
786:27 - so d3 dot symbol
786:29 - does that
786:34 - um with symbol.type
786:43 - yeah yeah this would be actually a great
786:44 - thing to work through
786:46 - but what you would do is create an
786:48 - instance of d3 symbol
786:51 - and then
786:52 - set up an ordinal scale
786:54 - that maps
786:56 - the the three values for the species to
786:59 - these
787:01 - symbols you know maybe three particular
787:03 - symbols
787:05 - and yeah it's exposed as like symbol
787:07 - circle symbol cross
787:09 - symbol diamond
787:11 - so it would be something like you know
787:13 - create an ordinal scale
787:16 - and then set the range to be
787:18 - d3 symbol circle d3 symbol cross d3
787:22 - symbol diamond
787:23 - and that scale
787:24 - you can pass in a value from the species
787:27 - column and it will give you back out one
787:30 - of these
787:31 - one of these symbol types
787:33 - and then
787:35 - in the rendering logic of the scatter
787:37 - plot
787:38 - instead of
787:40 - rendering circles these would be paths
787:44 - and then
787:46 - when you set the the d attribute of the
787:49 - path
787:50 - you would want to
787:52 - change the type of the symbol
787:55 - and then invoke the symbol
787:58 - and that's how you could make a scatter
788:00 - plot with different shapes
788:05 - i don't know i kind of want to just go
788:06 - ahead and do it right now
788:08 - what do you think should i
788:10 - yes do it do it do it right
788:13 - yeah let's do it let's do it why not
788:17 - i'm gonna keep this as it is because
788:18 - it's nice and clean but i'm gonna fork
788:20 - this and say
788:23 - reusable d3 scatter plot with cymbals
788:30 - oh i love this it's gonna be so much fun
788:42 - okay now we need to import uh these
788:44 - things oh actually symbols check it out
788:46 - symbols is an array containing the set
788:49 - of built-in symbol types so we could
788:51 - just use that okay so i'm going to
788:53 - import symbols
788:56 - from d3
788:59 - and then
789:01 - i'm going to build out something very
789:03 - similar to x and y i'm going to call it
789:07 - um
789:09 - symbol i guess
789:12 - symbol value
789:15 - and then i'll set up
789:17 - another one of these accessors
789:20 - for symbol value
789:25 - it's going to be a function
789:29 - and then in index.js this is where we
789:32 - would want to say okay our symbol value
789:35 - is the species
789:40 - i think it's
789:42 - d dot species
789:46 - um let's take a look yes yes it is it is
789:50 - nice
789:52 - yeah species nice
789:55 - okay so this is how we would invoke it
789:57 - and configure it now let's implement the
789:59 - rendering
790:01 - so instead of circles these would be
790:03 - paths
790:05 - select all path
790:08 - and
790:09 - instead of cx and cy
790:12 - oh yeah we would still need to position
790:14 - these oh how would we do that
790:17 - you know what we would want to do is um
790:20 - probably use
790:22 - group l yeah okay okay it's getting a
790:25 - little tricky here
790:26 - but let's just get a bunch of different
790:28 - shapes to show up and then we can
790:32 - um
790:34 - we can worry about
790:36 - positioning them
790:40 - looking for the okay there's a
790:42 - constructor
790:45 - so let's import symbol
790:49 - from d3
790:53 - and then we're gonna need a symbol scale
790:58 - i'm gonna call it symbol scale because
791:02 - symbol the word the the name symbol is
791:04 - already taken because it's imported
791:07 - and this will be an ordinal scale
791:10 - we need to import that as well from d3
791:17 - and the range
791:19 - this is the key thing the range is going
791:21 - to be symbols
791:28 - and the domain
791:31 - you know we don't actually need to set
791:32 - the domain
791:34 - uh because it sort of fills in
791:35 - automatically
791:37 - but just for completeness sake we could
791:39 - say data.map
791:41 - symbol value
791:44 - and that will just get all of the
791:46 - different species values
791:48 - and that will contain duplicates but
791:50 - that's okay because when you pass an
791:52 - array with duplicates to scale ordinal
791:54 - dot domain
791:55 - it automatically you know deduplicates
791:58 - it
791:59 - so we can just say
792:01 - just to inspect how that ended up
792:04 - symbol scale.domain let's just
792:06 - console.log that it should just give us
792:08 - those three values
792:11 - oh there's some problem oh i forgot a
792:13 - comma
792:18 - there we go see
792:20 - so that's correct
792:22 - satoshi versus color virginica
792:26 - and then if we take a look at the range
792:30 - it's a bunch of these
792:34 - d3 symbol implementations which are
792:37 - actually objects that have a draw
792:38 - function
792:39 - but we don't really strictly need to
792:41 - know
792:42 - what that is
792:46 - okay now we need to create a symbol
792:50 - generator
792:54 - simple generator is
792:56 - new
792:57 - symbol
792:59 - using the constructor from d3
793:03 - and let me see
793:09 - um
793:10 - size defaults to 64. that should be fine
793:14 - i mean we could we could use it to
793:15 - change the size but let's just use the
793:17 - default for now see how it turns out
793:21 - and this is the thing we can say symbol
793:22 - dot type
793:24 - so this is what we need to do
793:27 - we need to make these paths
793:32 - and
793:33 - we don't need cy cx or r
793:37 - but we need
793:39 - d
793:40 - which is this domain specific language
793:43 - for svg paths
793:45 - that's what the symbol generator will
793:47 - output
793:51 - so we can call symbol generator
793:55 - so this will be a function that takes as
793:56 - input d and then we can call simple
793:58 - generator of
794:01 - symbol
794:02 - value of d
794:06 - those these are different right the
794:11 - the string one and the the other one
794:14 - they don't mean the same thing
794:16 - right they are totally distinct and
794:18 - different yeah it's confusing that they
794:20 - have the same name
794:21 - um d is the attribute of an svg path
794:26 - which has a very specific meaning
794:30 - so if you look at the documentation for
794:32 - svg paths it expects a d attribute
794:36 - that is going to be a string
794:39 - that is a
794:40 - it's an expression in a domain specific
794:42 - language that defines svg paths
794:45 - okay
794:46 - so
794:47 - yeah so this d
794:49 - is the attribute d
794:51 - and this d is
794:54 - it's called
794:55 - it's just one of the rows
794:57 - okay not a column but a row in it's it's
795:00 - an element in the data array or rather
795:02 - the marks array
795:04 - and you know oh my gosh
795:06 - i i sort of forgot that we have this
795:08 - transformation step
795:10 - so this is actually where we can compute
795:13 - d which makes it even more
795:16 - confusing in a way because we d dot d
795:20 - um but this is where it makes sense to
795:22 - pass in
795:24 - yeah to do the transformation to the
795:26 - marks
795:30 - to for clarity i'm going to call it path
795:34 - path d
795:35 - because it's there's too many d's
795:42 - okay and this should
795:45 - work
795:47 - i think but
795:49 - looks like broken let's see what's going
795:50 - on
795:52 - cannot access symbol generator before
795:55 - initialization okay yeah that makes
795:57 - sense
795:57 - i have to move it to be
796:00 - before we compute the marks
796:03 - okay i think it's
796:05 - sort of working see that we have some
796:07 - stuff in the
796:09 - but it's in the corner that's the
796:11 - problem
796:20 - and they're pretty tiny they're pretty
796:22 - tiny
796:23 - so i kind of want to make it
796:26 - bigger
796:28 - but the the main problem is they're all
796:30 - in one place they're all in the corner
796:33 - and i wonder
796:35 - can we have a transform
796:39 - if you just uh set attribute x and y
796:43 - it does not work
796:45 - i don't believe x and y works on paths i
796:49 - mean we can try it
796:52 - that would be ideal if it did
796:56 - but it doesn't
796:58 - okay
796:59 - we may be able to specify a transform
797:03 - on the
797:04 - path so we can translate
797:08 - by
797:11 - d
797:12 - dot x
797:15 - and d dot y
797:19 - but i don't know if that's going to work
797:25 - oh sorry i forgot to make it a function
797:27 - of
797:32 - d oh well look at that it's sort of
797:37 - worked
797:40 - but but they're all circles
797:42 - they're all circles that's indicative of
797:44 - a problem yeah yeah i forgot to um
797:48 - i forgot
797:50 - to
797:51 - set the type
797:54 - so here's what we need to do this is not
797:56 - right we need to
797:58 - we need to call simple generator dot
798:01 - type
798:04 - and then invoke it
798:06 - this is what we need to do
798:18 - uh looks like there's some problem
798:24 - maybe that's not quite right
798:30 - why this empty parenthesis in the end
798:34 - yeah i think we need to invoke it
798:38 - or
798:39 - you know maybe i should consult the
798:41 - documentation
798:44 - assemble that type
798:50 - yeah but it seems that you're invoking
798:52 - two times
798:55 - there
799:02 - again
799:04 - see this is what i want to do i want to
799:06 - i want to create an instance
799:09 - of d3 symbol we'll call it simple
799:11 - generator
799:13 - and then for each mark i want to say
799:15 - symbol generator dot type
799:20 - is
799:22 - oh oh i forgot to pass it through the
799:24 - scale that's
799:26 - so silly so symbol
799:29 - scale
799:30 - of symbol value of d
799:32 - okay so symbol value of d will give us
799:35 - the species value
799:37 - we need to pass that through the scale
799:40 - symbol scale in order to get at the
799:42 - particular symbol and remember symbol
799:45 - scale
799:46 - it just maps the
799:47 - the symbol
799:48 - the
799:49 - species to the various symbols that we
799:51 - imported from d3
799:53 - so we need to call simplegenerator.type
799:58 - to set the type and then these empty
800:01 - parentheses on the end are to invoke the
800:04 - symbol generator
800:06 - as a function to generate this path
800:09 - string so now we can see that it's
800:11 - actually
800:13 - giving us different types of shapes
800:19 - yeah it's kind of tricky business
800:21 - it is
800:29 - but i think what we need to do
800:32 - to move these around
800:36 - um oh wait a minute
800:38 - it should be missing the clothes
800:44 - like this that's what it needs to be
800:45 - there we go
800:49 - there we go so it's translating by x and
800:51 - y
800:53 - correctly now
800:56 - yeah
800:56 - this is what you were trying to do isn't
800:58 - it yes very cool amazing
801:04 - amazing great great yeah that only take
801:06 - like 10 minutes amazing
801:14 - okay now i can make a scatter plot
801:17 - kuhn's face
801:19 - yeah
801:22 - you totally could yeah yeah you could
801:24 - even put different people's faces
801:27 - yeah
801:28 - yeah
801:33 - nice
801:35 - wow pretty satisfying um one thing
801:38 - that's just not quite linked up yet i
801:40 - just want to wrap this up nicely radius
801:42 - is here but it's not being used so what
801:46 - i want to do is use it so that we can
801:48 - configure
801:49 - the size
801:50 - of the symbols
801:52 - but radius doesn't make sense we can use
801:54 - size instead
801:56 - and the default was 164. so let me say
801:59 - size is 50
802:01 - and then in in our scatter plot
802:05 - i'm just going to do a search and
802:07 - replace
802:09 - across the whole thing
802:12 - replacing radius
802:15 - with how do you do a search and replace
802:18 - in views
802:19 - oh i'm using
802:21 - i'm using vim mode
802:24 - and then once you enter vim mode you can
802:27 - use the vim command
802:28 - for the search and replace which is this
802:31 - okay so the
802:33 - the percent
802:34 - means
802:35 - global
802:36 - search and replace um
802:39 - s means
802:40 - search i guess it's it's one of those
802:43 - sort of obscure vim things
802:46 - um it works with uh some other command
802:48 - line tools too in linux
802:51 - but yeah this is how you trigger it you
802:53 - you hit colon to enter this little space
802:56 - which is you know derived from vim the
802:58 - editor
802:59 - and then radius is the thing you find
803:02 - size is the thing it gets replaced with
803:05 - g means global means um
803:08 - it means to replace
803:10 - every instance
803:12 - on a line
803:15 - and so this is just sort of the the
803:17 - incantation to make it happen
803:20 - so once i run that
803:23 - we have size
803:25 - and once we have size
803:29 - defined here
803:32 - then what we can do is
803:35 - we can pass it into our simple generator
803:39 - dot size size like that
803:41 - and it it could we could make it vary
803:44 - for each mark
803:46 - but for now i'm just going to make it
803:48 - all the same size
803:50 - and just to confirm that it's working
803:52 - i'm going to change the size here to
803:54 - like 500
803:56 - okay and it gets bigger
803:58 - and yeah size it's the behavior of size
804:01 - with d3 symbols can be a little
804:03 - counter-intuitive because it actually
804:08 - was really well thought out so that the
804:10 - area of each of the symbols
804:13 - is the same
804:15 - i'm pretty sure
804:18 - um and and when you change the size
804:21 - you're actually changing the area
804:24 - so
804:26 - it's not a linear scale in at play here
804:29 - it's it's more like a square root scale
804:31 - internally so if i change it to like a
804:33 - thousand
804:34 - that means there's going to be a
804:36 - thousand
804:37 - black pixels
804:39 - for each shape
804:41 - but if i change it to a hundred that
804:42 - means there's going to be a hundred
804:44 - filled in black pixels
804:46 - for each shape
804:48 - and while i'm talking about symbols
804:53 - i would be remiss to not show this
804:56 - really nice piece
804:58 - um oh that's not the one
805:12 - hang on hang on
805:16 - mike bostock has this really nice
805:20 - thing that illustrates that they're all
805:22 - the same
805:23 - area
805:31 - it'll be worth the wait
805:33 - there it is
805:43 - yeah this is a really nice little piece
805:45 - by mike bostock that he developed um
805:48 - looks like in 2017 i think when he was
805:51 - working on building out d3 shape
805:53 - and so notice here how the radius
805:57 - of each of these circles is different
806:00 - but it says here each of these shapes
806:01 - has a configurable area
806:04 - here 2 500 square pixels
806:08 - and so this is the
806:10 - this is the like deep thought
806:13 - that that you get for free when you use
806:16 - d3 symbol
806:18 - it turns out that each of these shapes
806:20 - has exactly the same number of filled in
806:22 - pixels and that's what gets configured
806:24 - when you call dot size
806:36 - all right well that's how we do it
806:38 - that's how we make a scatter plot with
806:40 - symbols
806:41 - within the confines of this reusable
806:43 - chart pattern and this is just playing
806:46 - out so well i mean i would much prefer
806:49 - to do things this way to have a reusable
806:51 - chart pattern in place and then branch
806:54 - out to all sorts of different
806:55 - visualization types rather than
806:58 - you know get it basically working in one
807:00 - huge file
807:02 - and fork that a a bunch of times
807:04 - so
807:06 - yeah thanks thanks everyone for for you
807:08 - know sticking with me through this
807:10 - refactoring effort
807:12 - and i hope it was useful
807:19 - thanks quran it was really insightful
807:23 - all this class
807:25 - nice happy to hear it happy to hear it
807:30 - i'd like to leave you all with some
807:32 - exercise options
807:34 - fork and modify
807:36 - what we made
807:37 - and
807:39 - maybe add axis labels one of the things
807:41 - that it's missing is the labels the text
807:43 - labels on the axes
807:45 - and i think we have now enough
807:48 - knowledge of d3 to be able to do that
807:52 - another option would be you know fork
807:54 - this scatter plot and change the data
807:56 - set to get that experience
807:58 - of
807:59 - just changing the index file and leaving
808:02 - leaving the scatter plot implementation
808:04 - as it is as a generic thing
808:07 - or
808:08 - fork this and change the chart type i
808:11 - mean you would probably need to change
808:13 - the data set too
808:14 - in order to do that but that would be a
808:17 - great exercise if you could fork this
808:18 - and maybe change it to be a line chart
808:21 - component or an area chart or a bar
808:23 - chart
808:24 - uh we're going to be doing that in
808:26 - subsequent episodes
808:28 - but if you you know feel inspired by all
808:30 - means take stab at it now
808:34 - um and if
808:35 - if you can't get it done you know at
808:38 - least take a stab at it share your work
808:40 - and maybe maybe you could use that as a
808:42 - jumping off point for a future
808:45 - episode
808:46 - so all of this is in the forum the viz
808:49 - hub forum
808:54 - i made one for
808:56 - episode nine
809:02 - uh where did it go
809:05 - i may have lost it or something
809:08 - but i'm going to make one now for
809:10 - episode nine
809:11 - uh so you can post there
809:16 - welcome everyone to episode 10 of get it
809:19 - right in black and white dynamic charts
809:24 - so first i'd like to start with some
809:27 - introductions
809:29 - um we have some we have a new person
809:32 - today
809:33 - welcome maxine
809:35 - uh you want to introduce yourself
809:36 - briefly
809:38 - yeah so i'm maxine or max and i worked a
809:42 - bit on
809:43 - um viz hub with curran and that was
809:45 - really fun because i think it's a great
809:47 - product
809:48 - and now i'm a data visualization
809:51 - engineer for mural and in my free time i
809:53 - just try to learn as much as i can about
809:55 - d3
809:58 - nice i love mural by the way i've
809:59 - started using it it's a really neat tool
810:03 - and ideal is here hey adil
810:07 - hi karen hi maxine
810:11 - all right so
810:13 - let's start by reviewing the submissions
810:16 - from last time
810:24 - we go reusable charts
810:27 - so here's one from
810:29 - felipe
810:33 - hilarious
810:35 - um
810:38 - i think it's it's like the data of how
810:41 - many viz hub users there are but with my
810:43 - face in there
810:47 - so nice work felipe
810:50 - um yeah very cool very cool
810:55 - i want to take a just quick look at the
810:56 - code it's still the same scatter plot
810:59 - like template with the
811:01 - you know the methods and everything
811:03 - and it's just been modified internally
811:05 - to show these
811:07 - svg paths
811:09 - pretty cool
811:13 - all right what else have we got
811:15 - something from
811:18 - ej dasbach
811:23 - this is pretty neat
811:25 - i was actually pretty impressed with
811:27 - this one
811:31 - it's a nice actual visualization
811:35 - of
811:37 - covet 19 deaths over time
811:41 - and uh yeah great work adding the title
811:43 - adding the labels for the axes
811:46 - vaccination at 30
811:49 - that's like some additional information
811:52 - pretty cool and great job linking to the
811:54 - source too in the viz itself
811:59 - very cool very cool and this easily
812:01 - could be converted to a line chart just
812:03 - by modifying some of the internals i
812:05 - think a line chart might make more sense
812:07 - for this particular data although it's
812:09 - kind of cool with the dots because you
812:10 - can see the gaps
812:13 - yeah good stuff
812:19 - all right yeah there was some confusion
812:20 - about last week i had to cancel but um
812:25 - all right i think that's it
812:27 - that's all there is
812:29 - so all right great to see some
812:31 - participation
812:33 - [Music]
812:39 - yeah before i dig into
812:43 - stuff for today
812:46 - i'm just wondering are there any
812:47 - questions from last week's content adil
812:49 - or maxine
812:51 - uh that was unclear
812:55 - not from my end i thought it was pretty
812:57 - clear nice
813:00 - yeah it was it was really
813:02 - very clear um i think
813:05 - returning
813:06 - the method chaining in particular was
813:08 - quite um
813:10 - it was it was just yeah really
813:12 - eye-opening really
813:13 - oh great i'm glad to hear it
813:17 - yeah yeah that the pattern still blows
813:18 - my mind because it's just javascript
813:22 - essentially
813:24 - but you can make these components and
813:26 - you're not tied to any particular
813:28 - framework like react or view or anything
813:32 - i was wondering
813:34 - when um
813:35 - doing the core dot call
813:38 - and
813:38 - all the method chaining that follows
813:41 - whether there is a
813:43 - uh whether there's a convention uh at
813:46 - all or um
813:48 - a preferred i guess it's a
813:51 - personal approach but um
813:54 - when uh
813:56 - when when doing this uh svg.call scatter
814:00 - plot um
814:02 - then
814:04 - all the methods that uh
814:06 - follow um are they is it recommended to
814:09 - do them in any particular order for
814:11 - example to do the data manipulation
814:13 - first followed by the
814:14 - dom
814:16 - anything that touches the dom or is it
814:18 - um
814:20 - is that
814:21 - is i just just it's up to the
814:24 - uh personal preference um
814:29 - yeah that's a great question does the
814:31 - order matter is there any particular
814:33 - patterns no i would say no it's it's
814:35 - like lego blocks you know you can
814:37 - assemble these things in any way that
814:39 - you want and as long as their
814:41 - relationships are correct between like
814:44 - the inputs and the outputs
814:46 - and um
814:47 - the order of like the
814:49 - the dependencies
814:51 - uh is correct like first you need to set
814:54 - up the svg then you need to call it but
814:56 - beyond that
814:58 - um no it doesn't really matter it's
815:00 - totally personal preference you know
815:01 - which order you call these things um
815:05 - and even
815:06 - i've seen it quite often where you you
815:09 - construct the
815:10 - the element like
815:12 - right here instead of even having a
815:14 - variable and like that works too it's
815:16 - totally personal preference yeah
815:18 - stylistic
815:22 - yeah that makes sense thank you
815:28 - all right we've got another guest
815:30 - um
815:32 - [Music]
815:33 - um
815:34 - hello there you want to um here let me
815:36 - just pull up the introduction slide
815:42 - are you here
815:44 - yes i'm here eric dosbach here can you
815:46 - hear me yes i can hear you great to meet
815:48 - you
815:49 - yeah nice to meet you um finally got
815:52 - this down figuring out between um
815:54 - youtube and
815:56 - um
815:57 - google meetup so
815:59 - yeah yeah it's kind of a kind of a
816:01 - quirky setup but it works
816:04 - yep
816:05 - so just a little about myself uh data
816:08 - scientists outside philadelphia trying
816:10 - to upskill uh my data visualization so i
816:14 - uh
816:15 - filed the
816:17 - first nine
816:18 - and uh now
816:20 - uh
816:21 - looking forward to participating live
816:24 - amazing amazing welcome and i i think i
816:27 - just um presented your work but yep but
816:32 - i would like to welcome you to present
816:33 - it yourself here we go let me find it
816:36 - sure
816:37 - here it is
816:40 - yep
816:41 - yeah so a little bit
816:43 - yeah so thank you yeah so the um so
816:46 - appreciate the opportunity the
816:49 - uh
816:49 - part of what i do and so i work in
816:51 - healthcare and and part of what i do is
816:54 - visualizations of
816:56 - these sorts of dynamics and so forth and
816:59 - so i really enjoyed the notion that we
817:01 - had a reusable scatter plot and i think
817:04 - the assignment was to switch out to
817:06 - another data set one and then to start
817:08 - adding axes and so forth and you know i
817:11 - found that framework
817:12 - uh
817:13 - really useful from which to do it i
817:15 - think probably one of the most
817:16 - challenging things i found was just
817:18 - the date scale and figuring that out and
817:21 - just you know
817:22 - trying to get that to line up right and
817:24 - i still haven't figured out how to
817:26 - manipulate uh the months and years and
817:29 - so forth quite right
817:31 - but um because
817:33 - bizhub is so nice and interactive it
817:35 - allowed me to just keep trial and
817:37 - erroring to get it to this point
817:41 - which is really helpful for uh learning
817:45 - nice
817:47 - that's fantastic
817:49 - yeah well so yeah and i guess the other
817:51 - part of the assignment
817:59 - sorry i lost you there
818:08 - you there
818:15 - i lost your sound there eric are you
818:17 - still there
818:18 - yeah i'm still here yeah oh you were
818:20 - saying
818:21 - oh yeah i was just saying so
818:32 - i think his sound is down yeah i lost
818:35 - your sound
818:36 - um
818:39 - oh you muted yourself
818:46 - can you hear me now yes
818:48 - okay
818:49 - uh
818:51 - yeah so i was just saying that i guess
818:52 - the other aspect of this was trying to
818:54 - um figure out how to make things item
818:57 - potent
818:58 - oh well yeah that's what i was going to
819:00 - get into today that's what i plan to
819:02 - really touch on today
819:04 - and so um so i'm starting to go back to
819:07 - some of your work and react
819:09 - um
819:10 - ah yep
819:14 - yeah i mean i would like to address some
819:17 - of your questions around the the day
819:18 - formatting and stuff because it's
819:20 - actually quite simple what you can do
819:24 - to make adjustments to the formatting
819:27 - um
819:28 - so it's a little bit off topic but i'll
819:29 - spend like five minutes on it just to to
819:31 - move that forward because if because you
819:33 - were struggling with that
819:35 - so when you oh i gotta fork this to make
819:37 - some edits
819:41 - to have a little more control over the
819:45 - the dates
819:46 - and the formatting there
819:48 - so we've got a scale time here
819:55 - and one thing you can do is control the
819:58 - number of ticks by saying
820:01 - dot ticks
820:03 - and you pass in like five or something
820:06 - that gives you
820:12 - oh it's not loading
820:13 - what happened
820:21 - oh sorry not on the scale not on the
820:23 - scale on the axis
820:26 - yeah that's something that trips me up
820:29 - so when we when we create the axis oh
820:32 - you did that already it takes six
820:34 - so if we up it till like 16
820:37 - we get more
820:38 - ticks
820:43 - and so if you want to change the
820:45 - formatting is that what you wanted to do
820:46 - change that formatting
820:48 - yeah i was trying to figure out so
820:51 - implicitly there was
820:53 - it dropped the years in and then um the
820:56 - months and so forth and i was trying to
820:58 - figure out how how to actually
821:00 - manipulate those sorts of things
821:02 - totally totally so you can use this
821:04 - thing called
821:06 - d3 time format and this old example on
821:09 - blocks.org from zen armstrong
821:12 - 2017
821:13 - is a tried and true
821:15 - way of of figuring out how to format
821:18 - dates with d3
821:20 - so the way you use it is uh now it's
821:22 - called time format camel case it used to
821:25 - be time dot format
821:27 - but the api is pretty much the same so
821:29 - you can pass in this weird looking
821:31 - string like you know percent y dash
821:34 - percent m and each of these little codes
821:37 - has a specific meaning like this is the
821:39 - full year this is the the month as zero
821:43 - one
821:45 - but let's see
821:46 - what kind of
821:48 - ticks might be appropriate maybe just
821:50 - the month
821:55 - right like uh
821:57 - yep i think i actually found this site
822:00 - too
822:01 - nice i was
822:02 - i was um
822:04 - not getting it
822:05 - somewhere in there i had the month uh
822:08 - aspect
822:09 - oh nice and time format is even there i
822:12 - see yeah
822:13 - nice nice
822:15 - and so when you call axis bottom you can
822:18 - just call dot format
822:22 - oh okay
822:23 - or maybe it's
822:25 - i think it's actually tick
822:27 - format
822:31 - yeah and then you can just pass in
822:34 - a time format
822:38 - of
822:39 - this string
822:41 - which
822:43 - i can't remember i have to look at the
822:45 - example dollar sign b
822:47 - for like jan feb like that yeah
822:52 - then i'll use prettier to format the
822:53 - code
822:57 - and now we get
823:03 - huh that did not seem to do the trick
823:06 - actually
823:07 - yeah then you have to i think manipulate
823:09 - the text to
823:13 - well that should work
823:16 - that should work let me see if i get any
823:18 - errors no
823:26 - hmm
823:31 - so if i search for d3 axis tick format i
823:33 - hope i get the um
823:36 - the name right
823:47 - yeah axis.tick format
823:51 - i should do the trick
823:58 - [Music]
824:02 - i wonder if it was set somewhere else as
824:04 - well
824:10 - i think you're right i i i know i said
824:12 - it somewhere else i'm trying to remember
824:14 - where
824:18 - yeah cause i think if you
824:19 - if you set it on the axis
824:22 - or the scale
824:23 - it might like take precedence or
824:25 - something
824:27 - oh wait a minute there's two
824:30 - oh there there's two axes on the bottom
824:34 - yeah i forgot to clean that out this is
824:36 - when i was going to item potent
824:39 - oh nice let me see
824:41 - so that might be just not visible and
824:44 - then let's try putting it on this other
824:45 - one
824:55 - let's see
824:57 - we need one more parent yep
825:00 - there we go
825:01 - yep there got it boom
825:06 - yeah so that's how it works
825:09 - very nice very nice
825:11 - thank you yeah my pleasure thanks for
825:13 - doing the assignment i'm really happy to
825:14 - see this sort of uh
825:16 - engagement and participation
825:19 - yeah appreciate it thanks
825:21 - all right we've got a bunch more people
825:23 - coming
825:24 - let's see what's going on here
825:27 - we've got
825:28 - um
825:30 - maximiliano
825:33 - hello
825:35 - i think you came last time
825:40 - and we've got ken penn
825:43 - hey ken welcome
825:50 - and we've got uh
825:52 - maribel
825:54 - welcome maribel
825:58 - would anyone like to introduce
825:59 - themselves
826:09 - am i muted oh there you go i can hear
826:11 - you now
826:14 - this is weird um
826:17 - yeah no i'm still i'm new to to
826:20 - um to d3 and um
826:23 - still learning a lot so i have questions
826:27 - i shall listen okay
826:29 - cool well feel free to interrupt me as i
826:31 - go and
826:32 - and ask the questions along the way
826:36 - thank you
826:45 - hey kuran and everyone
826:47 - yes i was here last week how are you
826:50 - everything's fine thanks good good
826:54 - so great to be here again
826:56 - welcome and i see ken joined us ken you
826:59 - want to introduce yourself one a little
827:01 - bit
827:07 - uh there was a bit of an echo there so i
827:09 - was kind of holding back uh ken pan um
827:13 - currently who run on everyone
827:15 - yes i was here yeah you gotta close the
827:17 - youtube sorry it's a little a little
827:19 - funky of a setup good good but if you
827:21 - close out the youtube uh window
827:23 - shouldn't work
827:24 - there we go uh
827:27 - yeah so uh ken pan um have been using v3
827:32 - for a bunch of years um
827:34 - currently um unemployed and um
827:39 - just uh doing this to stay in practice
827:42 - and get tuned up on uh incorporating
827:45 - d3 with uh modern javascript
827:49 - nice
827:52 - well i'm glad you could join us ken um
827:55 - ken and i go way back from the d3
827:57 - meetups in san francisco
827:59 - many fond memories of attending events
828:02 - there
828:03 - meeting people learning things so
828:06 - great
828:07 - you should provide a link to your uh d3
828:10 - parade entry yesterday that was quite
828:12 - good oh yeah
828:14 - yeah that was fun yeah i hope to
828:15 - actually build something like that as
828:17 - part of this series as we get further
828:20 - along
828:22 - um
828:22 - but yeah yeah it was fun that was fun
828:25 - i i think it was very instructive too
828:27 - and it might be for um
828:29 - for other people where you showed all
828:31 - the the
828:33 - wrong steps broken made art that she had
828:36 - oh yeah
828:37 - persisting to the right kind of like you
828:39 - just helped with the dates just now i
828:42 - thought that you know learning to use it
828:44 - instead of uh
828:46 - just getting frustrated and quit is uh
828:49 - you know how to persist through that is
828:51 - really important i think
828:53 - nice for sure and that's why i'm having
828:56 - this whole thing um
828:59 - you know live with q and a so
829:01 - because i know people get stuck and i
829:03 - want to teach people how to go from
829:05 - stuck to unstuck because that's the key
829:08 - thing
829:10 - yeah
829:12 - all right we've got some other folks
829:13 - joining us um
829:16 - hello felipe how are you
829:22 - and we've also got matt oliver
829:25 - hello matt welcome
829:30 - howdy uh thanks for doing this queren
829:32 - i'm in texas
829:34 - and i'm uh in my day job i'm a product
829:37 - manager and i love building with d3 and
829:40 - um
829:41 - love learning new stuff so happy to be
829:43 - here and um haven't been able to make
829:46 - the last few but um
829:50 - whenever there's time and whenever i can
829:52 - i wanna i wanna participate so thanks
829:54 - again
829:55 - nice this is amazing wow welcome well
829:58 - this is a full house we've got so many
829:59 - people so let me just dig into this
830:03 - what i wanted to do today
830:06 - was to make our chart that we made last
830:08 - time
830:09 - dynamic
830:11 - meaning
830:14 - what i was thinking of doing is cycling
830:16 - through x and y columns
830:19 - we saw last time that if you change
830:22 - the code
830:23 - to change the function that accesses the
830:25 - data for x
830:26 - then the meaning of the x column changes
830:29 - to be that column
830:32 - and
830:33 - what i want to really touch upon today
830:35 - is like
830:37 - if you want to make such a change
830:39 - interactively without having to go and
830:41 - change the code how do you do that
830:45 - that gets into this concept of
830:47 - idempotent rendering
830:50 - where
830:51 - you have this function that you invoke
830:54 - namely the scatter plot
830:56 - and
831:03 - what you want is that the scatter plot
831:06 - knows how it's supposed to look it has
831:09 - all this configuration set up
831:11 - and what you want to have happen is when
831:13 - you call that function again
831:16 - for the second time or the third time or
831:18 - the fourth time
831:19 - it should just
831:21 - sort of whip the dom into shape and and
831:23 - be like all right dom like you need to
831:25 - now
831:26 - change
831:27 - to represent the new setup the new
831:29 - configuration
831:30 - and with d3 there's all these foot guns
831:34 - um things
831:35 - that you can use to shoot yourself in
831:37 - the foot
831:38 - like
831:39 - dot append
831:41 - which doesn't really work well if you
831:43 - invoke the function again and again
831:45 - because it's going to append more and
831:46 - more elements again and again which is
831:49 - not what we want and there's a couple
831:52 - telltale signs of when this is happening
831:54 - that i think i'll get into today
831:56 - and then if there's time after we get
831:58 - the idempotent rendering down
832:01 - if there's time i would like to dig into
832:03 - animated transitions but we may not we
832:05 - may or may not get that far we'll see
832:10 - all right
832:13 - so
832:21 - here is the reusable scatter plot
832:24 - from last time
832:28 - after last week's session
832:31 - i i had like a realization that like oh
832:35 - no it's not actually done
832:37 - because it's not idem potent
832:40 - which which sort of defeats the whole
832:41 - purpose of making it
832:46 - reusable and this is a word that you
832:49 - don't usually come across
832:52 - unless you're in like
832:54 - computer science
832:57 - so i just wanted to read the definition
833:00 - of the word um i think i think the
833:02 - wikipedia article does it justice
833:05 - idempotence
833:06 - is the property of certain operations in
833:10 - mathematics and computer science
833:12 - whereby they can be applied multiple
833:15 - times
833:16 - without changing the results beyond the
833:19 - initial application
833:21 - so the the key here is that
833:26 - the result that you get after invoking
833:29 - the function
833:30 - should be exactly the same
833:32 - regardless of
833:35 - the state of affairs before
833:37 - you invoke that function
833:39 - and so that let's let's apply this to
833:42 - our to our code here
833:48 - all right so first of all we need to
833:50 - have some change be
833:52 - happening
833:54 - and so i propose
833:56 - that instead of just calling the scatter
833:59 - plot one time like we're doing here we
834:02 - can call it
834:04 - multiple times
834:06 - in a loop of sorts so let's say every
834:11 - every second or every two seconds
834:13 - we change the value
834:15 - that gets returned from this x value
834:17 - accessor function and that would have
834:19 - the effect of you know changing it
834:21 - from let's say petal width to sepal
834:25 - with
834:27 - boom see that change
834:28 - that's the kind of that's the change
834:30 - that i want to see
834:32 - without re-running the program
834:36 - so how would we do that
834:38 - there is a a construct in
834:41 - javascript
834:42 - called
834:48 - set interval
834:51 - and what set interval does
834:54 - is it accepts
834:56 - a function as the first argument and as
834:59 - the second argument it accepts a number
835:02 - of milliseconds
835:03 - so if i put a thousand here that means
835:06 - every second it's going to run this
835:08 - function
835:09 - whatever it may be
835:12 - so let's just
835:13 - you know console.log here
835:15 - to make sure that this
835:17 - the setup is working
835:20 - then i'll open the console and we can
835:22 - see
835:24 - it's printing out here
835:27 - again and again and again
835:30 - every second
835:31 - and those little numbers mean
835:34 - like that's the number of times that the
835:35 - same thing was printed out again and
835:37 - again
835:39 - and we see it's incrementing every
835:40 - second but if we change this to
835:43 - 100 it's going to increment every
835:46 - um tenth of a second so we'll see the
835:48 - number going a lot faster
835:50 - so what i want to do here is let's say
835:53 - every two seconds
835:55 - we're going to change the meaning of x
835:59 - but how do we do that
836:02 - and and this comes back to your question
836:04 - from earlier a deal of like does the
836:06 - order that you do this stuff matter
836:09 - well the order depends on
836:11 - the use case like the scenario where you
836:14 - need to invoke this right now we have to
836:16 - do a little bit of refactoring because
836:18 - there's a bunch of stuff happening
836:20 - in one call
836:21 - but now the task at hand is to tease out
836:25 - what needs to happen once
836:27 - at the beginning
836:28 - versus
836:29 - what needs to happen
836:31 - every time we change
836:33 - x
836:34 - for example
836:36 - we're calling await
836:38 - csv here which will fetch the data
836:42 - and we don't want to fetch the data
836:43 - again
836:45 - every time we
836:46 - we set it up
836:49 - and also this scatter plot is being
836:53 - invoked i mean the constructor of the
836:55 - scatter plot is being invoked within
836:58 - this svg call
837:00 - so we have no way of accessing
837:04 - the instance of that plot to change its
837:06 - configuration so i'm going to have to
837:08 - move this around a little bit
837:10 - what i'm going to do is
837:12 - pull this out into a
837:14 - variable
837:16 - i guess i'll call it
837:18 - plot
837:19 - equals
837:20 - and then we invoke the scatter plot
837:23 - now we have
837:24 - we sort of have a handle on this thing
837:27 - so we can change it after the fact
837:30 - now we can do svg call plot right here
837:34 - to initialize it
837:39 - and
837:40 - we can use the same construct inside of
837:44 - our set interval
837:45 - console.log plot like that
837:49 - so now
837:51 - it is invoking our plot function
837:55 - every two seconds and we're already
837:57 - starting to see some of those telltale
837:59 - signs
838:01 - that that the thing is not item potent
838:04 - namely
838:06 - notice how
838:08 - around these labels
838:10 - it's not quite smooth
838:14 - it's a little um
838:16 - pixelated or like harsh when you look at
838:19 - it
838:20 - i mean and what's happening is the
838:21 - anti-aliasing is getting messed up
838:23 - because
838:24 - what it is there actually is a bunch of
838:27 - layers of the axis again and again and
838:30 - again and we can see this if we inspect
838:32 - the dom
838:36 - we can see if we zoom out to the right
838:39 - level
838:42 - there are multiple copies
838:45 - of both the x and y axis
838:48 - being added
838:50 - and if we scroll down to the bottom
838:52 - we can see that every two seconds
838:55 - there's another
838:57 - copy of both axes being added
839:03 - so this is the problem that we have to
839:05 - set out to fix and this is a very common
839:07 - type of bug
839:08 - when you're working with d3
839:11 - because the way d3 is
839:13 - structured like
839:15 - you can get something working
839:18 - when you invoke it once and that's
839:20 - pretty straightforward you can use the
839:22 - dot append construct
839:24 - however when you
839:25 - when you have a situation where
839:28 - you need the thing to change over time
839:30 - you have to actually do different stuff
839:32 - you need to make sure that you use the
839:34 - general update pattern of d3
839:37 - which handles the enter the update and
839:39 - the exit of all of these dom nodes
839:43 - and the problem here is that the parent
839:46 - group
839:46 - for the axes
839:48 - is being just appended over and over
839:51 - so that's what we need to change
839:58 - so let me go back to our
840:03 - scatter plot although you know let me
840:05 - let me just finish this
840:07 - this thought first what we want to do is
840:09 - change the value of x and we're ready to
840:11 - do that so let's do that first let's
840:14 - change x
840:15 - and then let's go and make our our
840:17 - reusable component idempotent
840:21 - we can just say plot
840:23 - dot x value
840:27 - and instead of d dot petal width
840:30 - we're going to want to cycle through
840:33 - so we can say d at
840:36 - column
840:40 - and we can say column equals
840:42 - petal width
840:44 - to start
840:48 - and
840:54 - how do we cycle through
840:56 - the various columns i propose we have
841:00 - something called columns
841:03 - which is going to be an array
841:06 - and petal width will be one of the
841:08 - options
841:09 - another of the options is
841:12 - sepal width
841:18 - and then
841:21 - we can copy those options
841:24 - and add
841:28 - height
841:29 - or no length what was it
841:33 - let me figure out what that was actually
841:36 - from the data
841:38 - yeah it does length
841:41 - oh yeah length length it was indeed
841:45 - so we can change width to length
841:52 - now we've got these options to choose
841:54 - from for our columns
841:57 - and
841:58 - what we want to do is say column is
842:04 - columns
842:07 - at index
842:10 - let's say i
842:12 - and i
842:15 - is something that i would like to
842:17 - increment
842:19 - every two seconds but once it gets to
842:21 - the top we should it should like cycle
842:23 - back it should circle back
842:25 - so instead of using const i'm going to
842:27 - define this outside of set interval and
842:30 - use let
842:31 - i'll initialize i to 0
842:34 - and say i
842:37 - plus plus
842:41 - and then console.log i
842:44 - let's see what this does
842:46 - so
842:48 - far it says
842:51 - one
842:52 - two
842:54 - three
842:57 - four five and this is where it's getting
842:59 - buggy
843:00 - because um
843:02 - once it gets beyond
843:04 - three
843:05 - it should go back to zero
843:08 - and the way that we can do this
843:11 - is
843:13 - i equals
843:15 - i plus one
843:18 - modulo
843:24 - columns
843:25 - dot length
843:28 - -1
843:34 - and just for
843:36 - well let's see if it runs
843:39 - zero zero
843:42 - oh it's not working
843:47 - just for some context if you haven't
843:49 - seen the modulo operator
843:51 - four modulo
843:52 - two is zero
843:55 - but five modulo two is one
843:59 - a modular 2 is is a way that you can
844:01 - check if it's even or odd
844:03 - and so
844:04 - what we want to do
844:09 - is
844:13 - make i go from zero to like three and
844:16 - then go back to zero
844:18 - so you know what we could do actually is
844:20 - just
844:21 - we could simply say i plus plus
844:24 - let it increment
844:25 - and then let's console.log i modulo
844:31 - column stat length
844:34 - minus one
844:36 - you know it could have been a
844:37 - parenthesis issue
844:39 - let's try like this
844:44 - so we see one
844:47 - two
844:49 - zero
844:51 - one
844:53 - two
844:55 - zero
844:57 - but we have four options
844:59 - um maybe it's just a not off by one kind
845:02 - of a thing
845:04 - let's just modulo by columns.length
845:07 - i think this should give us the right
845:08 - thing now
845:12 - one
845:14 - two
845:16 - three
845:18 - zero
845:20 - all right so we just need to use this
845:23 - when we access
845:25 - from columns
845:31 - like this
845:40 - so we can just sort of um compress this
845:45 - like so
845:47 - and i kind of want it to start at zero
845:49 - so let me just increment i after
845:52 - we do this this stuff here
845:59 - all right now it should be behaving
846:02 - as we expect
846:04 - so this is a dynamic scatter plot
846:07 - um the circles are idempotent
846:11 - they're behaving correctly
846:15 - so what it's doing is it's cycling
846:17 - through
846:18 - each of these for x
846:20 - and notice that at a certain point we
846:22 - see a diagonal that's that's when x and
846:25 - y are the same column
846:28 - here's the problem now
846:30 - the axes are getting messed up see the
846:33 - x-axis it's just a bunch of copies now
846:36 - let's address that problem
846:39 - of
846:40 - multiple axes
846:41 - uh but at this point are there any
846:43 - questions about what i've done so far
846:55 - um i
846:57 - i
846:57 - [Music]
846:59 - i wanted to ask
847:00 - how this
847:02 - concept of item potent relates with the
847:07 - the update pattern in the tree because i
847:10 - i i don't know if it's related but but
847:12 - it's like
847:14 - the same principle i guess because the
847:17 - points
847:18 - are dynamically changing but i haven't
847:20 - seen this concept before when we see the
847:24 - update pattern the enter update exit
847:27 - pattern so i'm not sure if how they are
847:29 - related
847:31 - right right
847:33 - and
847:35 - by the way people don't really talk
847:37 - about it they don't use this term very
847:39 - often
847:40 - and the term idimpotent rendering i
847:43 - think was used back in the days of
847:45 - jquery
847:46 - when it became like a thing
847:49 - um
847:51 - so maybe that's why
847:53 - like it's not a commonly used term it's
847:55 - like a sort of a nerdy computer science
847:57 - term but i think it's the right term to
847:58 - apply here
847:59 - but the relationship between the concept
848:02 - of idempotent rendering and d3's general
848:05 - update pattern is
848:07 - it's the same
848:09 - thing
848:10 - d3's general update pattern makes the
848:12 - rendering item potent
848:16 - and so
848:17 - um
848:18 - let's let's take a look at our code for
848:20 - the circles
848:22 - what this does is it uses the new dot
848:25 - join api
848:28 - which does a bunch of stuff internally
848:30 - it creates an enter selection
848:33 - and an update selection and it merges
848:35 - them together and it returns the
848:36 - resulting selection and then we can set
848:39 - the circle the the attributes on
848:42 - the resulting thing so that is an
848:44 - idempotent rendering pattern
848:47 - let me show you a variant of this that
848:49 - is not
848:50 - idempotent
848:51 - if we call
848:52 - dot enter
848:54 - dot append
848:56 - circle
849:00 - and then we set the attributes on those
849:02 - circles
849:03 - what we're going to get is a bunch of
849:06 - overlapping
849:08 - circles oh no i'm that's not right
849:11 - that's not right because
849:13 - it is actually
849:16 - only
849:17 - so when it's when it says select all
849:19 - circle it's picking up the circles that
849:21 - it rendered last time
849:24 - but this is not idempotent because it's
849:25 - not updating it's not updating it's not
849:28 - working right
849:34 - so to make it item potent we use enter
849:36 - dot append circle
849:40 - um
849:41 - well we could use the dot merge
849:45 - thing
849:51 - check it out um
849:55 - circles dot merge
849:59 - um
850:06 - sorry this should be circles
850:09 - which is the update selection
850:11 - and then we merge it with the enter
850:13 - selection
850:17 - like this
850:24 - this should be the idepotent version of
850:27 - it
850:28 - see now it's updating properly
850:32 - and this is like super confusing
850:35 - it's sort of a deprecated api to use
850:38 - merge like this it's very low level it
850:39 - helps you out
850:41 - but what this is doing is exactly the
850:43 - same thing as this
850:45 - simplified api where you just call dot
850:47 - join
850:48 - and it and join also
850:51 - handles the exit case so if there were
850:53 - fewer circles
850:55 - oops i must have deleted something
850:58 - data we need
851:07 - yeah so so this this does item important
851:09 - rendering
851:11 - does that answer your question
851:14 - yes yes definitely that now i i get a
851:17 - how that concept like
851:20 - is part of the of the of all this
851:22 - structure yeah
851:24 - nice
851:26 - and so the problem is
851:29 - are our axes are not idempotent
851:32 - i mean the axis itself is coded in such
851:35 - a way that it does correctly do item
851:38 - potent rendering however
851:40 - we are appending a group element on the
851:43 - outside
851:44 - which is the part of this stuff that's
851:46 - not item potent it just appends a new
851:48 - group element on each render which is
851:50 - not right
851:51 - this is the special case of the general
851:54 - update pattern that deals with just a
851:56 - single element
851:59 - and so it's sort of a non
852:01 - it's not the most common form that you
852:04 - see usually
852:06 - we call data and we pass an array of
852:08 - things that actually represents data
852:10 - however if you want to use d3 selections
852:13 - for just a single element we need to
852:15 - just make up some data that has a single
852:17 - element
852:18 - so let's do it
852:20 - selection dot select all
852:27 - um
852:28 - we could try dot g
852:30 - oh we could try g here just to select
852:32 - all group elements however i could tell
852:34 - you right now this is not going to fly
852:36 - because we have multiple group elements
852:38 - one for each axis and we need to
852:41 - disambiguate between them so at this
852:43 - point before i go any further
852:45 - i'm going to i'm going to use a class to
852:47 - disambiguate these
852:49 - select alt dot
852:52 - i'll call it y axis y dash axis
852:56 - because this it's the y axis
853:01 - dot data
853:04 - and this is where we need to pass in an
853:06 - array that has a single element so i
853:08 - could just put the number one or
853:09 - whatever i'm going to use null
853:12 - because i've seen this around in in the
853:15 - d3 source code actually for
853:17 - i think d3 axis uses this
853:21 - so it's it's an array of data
853:23 - that doesn't really have data it's just
853:25 - null it's but the the thing is it's a
853:27 - single element
853:29 - so it doesn't really matter what that
853:30 - element is it just matters that it's an
853:32 - array that has a single element
853:35 - because when you use the dot join
853:38 - construct
853:43 - like i think i could say join
853:45 - g
853:48 - dot attr
853:51 - i have to give it the class
853:55 - of y-axis
853:56 - so that it picks up
853:59 - the one that was added previously
854:05 - this i believe should work
854:17 - and i think we could say g dot
854:19 - y axis just to make it really clear i
854:21 - think that's a valid selector means it
854:24 - means that the the tag name is g and the
854:26 - class
854:27 - is y axis
854:30 - so the y-axis actually looks good
854:34 - on the side see it's not getting that
854:36 - thick
854:37 - quality to it which indicates to me that
854:39 - it's just rendering
854:41 - once
854:42 - um so what happens is every time
854:45 - the function gets executed
854:48 - it's taking a look at what was there
854:50 - from the last time and just whipping it
854:52 - into shape to match what it should be
854:54 - this time
854:55 - and because we're not changing y
854:58 - it doesn't change
855:01 - uh which is the right thing
855:03 - so now let's apply the same pattern to x
855:05 - this is where we'll actually see it
855:08 - um
855:10 - we'll see it work
855:12 - more clearly because the axis won't be
855:14 - totally messed up
855:16 - so i'm just going to copy paste
855:18 - that whole pattern
855:21 - and then change
855:22 - y-axis to x-axis
855:28 - and let's see let's see if that does the
855:30 - trick
855:34 - yeah see that
855:36 - now it's correct
855:43 - yep
855:45 - the axis is not getting
855:48 - all messed up
855:51 - so just to run through what's happening
855:53 - again here
855:54 - we're using
855:57 - this dot join api of d3 which is the
855:59 - modern day you know general update
856:01 - pattern of d3 that handles enter update
856:04 - and exit
856:05 - and we're passing it a data set that
856:07 - just has a single thing a single element
856:10 - which is null but it could be anything
856:11 - doesn't it really doesn't matter what it
856:13 - is
856:14 - but just the fact that there's one of
856:16 - them
856:17 - is what matters because the the
856:19 - internals of dot join will take that
856:22 - data and say okay
856:23 - i just need to make a single group
856:25 - element so
856:27 - if there's already a group element there
856:29 - that matches this selection then i'm
856:31 - going to use it i'm going to use the old
856:33 - one that was there before i'm not going
856:34 - to make a new one
856:36 - and so that's the beauty of this the
856:37 - first time it runs it will create an a
856:40 - brand new a mint brand new
856:43 - group element but the second time the
856:45 - third time the fourth time it's just
856:46 - going to use the grip element that was
856:48 - there before and then it's going to
856:51 - call
856:53 - this axis function which itself
856:56 - implements idempotent rendering properly
856:58 - internally
856:59 - so that makes the whole thing
857:01 - item potent and and working
857:04 - correctly
857:06 - so this is it this is this is the
857:09 - the complete
857:10 - version of the reusable chart
857:14 - now you can use this you know swap out
857:18 - things in in real time and it'll work
857:20 - correctly
857:22 - any questions
857:26 - great i think it's great so so if i
857:29 - understand correctly the
857:31 - with the
857:32 - null
857:33 - like a
857:35 - array that you create
857:37 - it's like a a a unique id
857:40 - for the for the group and that way it
857:43 - recognizes
857:44 - as the same thing when it updates
857:50 - well
857:52 - it's not really an id it's not actually
857:55 - used
857:56 - at all the thing that's serving as an id
857:59 - to differentiate between the different
858:01 - groups
858:02 - is actually the class
858:04 - so let me show you what happens if we
858:06 - get rid of this
858:08 - class
858:10 - if we just say select all g
858:13 - and then select all g for both of these
858:15 - axes
858:17 - let's see what happens
858:20 - see it's only getting one of them
858:24 - the y axis is not showing up at all
858:28 - and so in terms of the concept of unique
858:31 - id
858:33 - to disambiguate between them the class
858:36 - is really what plays that role the data
858:39 - that array of null is just to signify
858:41 - that there's one thing that we want
858:45 - not two not zero but there's
858:47 - just one thing that's the significance
858:50 - of the
858:52 - of that right
858:53 - right right thank you
858:55 - and just to deconstruct why
858:57 - there's no um y-axis here
859:01 - when this code runs
859:04 - it builds up the y-axis
859:07 - first
859:08 - because select all g
859:10 - the first time there's no group element
859:12 - it'll create one
859:14 - and then after that runs
859:17 - the code that is for the x-axis says
859:21 - select all g
859:23 - boom it's going to select that group
859:25 - element that was used for the y-axis
859:28 - that's what happens
859:31 - that's what happens when you don't use
859:32 - classes it selects whatever group
859:34 - element is there on
859:36 - the page like as a child of the
859:39 - selection
859:40 - and so
859:41 - that's why
859:43 - um it's clobbering
859:46 - the y-axis and it's it's using the same
859:48 - group element and it's building it into
859:51 - the x-axis
859:52 - so let's bring back our
859:55 - our selection that uses class
860:11 - yeah so
860:14 - now it says select all elements that
860:16 - have the class y axis
860:19 - if it's the first time there's going to
860:20 - be none so it's going to make a new one
860:22 - give it the class but if it's the second
860:24 - time around it's going to find the one
860:26 - that
860:27 - that this code put there before and use
860:30 - it
860:31 - yeah
860:36 - okay so i'm going to leave this
860:38 - reusable scatter plot
860:42 - here
860:43 - as it is because now i feel like it's
860:45 - finished
860:46 - i'm going to fork this
860:48 - because the animated transitions do add
860:51 - quite a bit of complexity
860:56 - so i'll call it
860:58 - animated
861:03 - reusable
861:04 - d3 scatter plot
861:12 - all right in our scatter plot
861:18 - i'm thinking we can focus on the circles
861:21 - as the thing to add animation to
861:25 - and maybe
861:27 - we could potentially animate the axes
861:29 - as well
861:30 - d3 axes are implemented in such a way
861:33 - that you can animate them which is
861:34 - really cool
861:37 - but first let's get grounded in some
861:41 - documentation or
861:43 - examples
861:50 - so i'm going to search for d3
861:52 - transitions
861:59 - yeah d3 transition here it is
862:07 - looking for some example code
862:13 - yeah
862:14 - so with transitions like there's a
862:17 - million and one ways you can invoke them
862:20 - um you could even just say dot
862:22 - transition
862:24 - actually let me do that first to see
862:25 - what happens because but i don't think
862:27 - it's
862:28 - the right
862:31 - behavior but
862:32 - just just as an experiment
862:37 - if we just put
862:38 - dot transition
862:41 - right here what happens
862:46 - okay
862:47 - it worked now they're animating
862:53 - see that
862:55 - so that's the simplest
862:57 - way of invoking
863:00 - d3 transitions
863:02 - we just add dot transition
863:05 - and it creates this
863:07 - thing called a d3 transition that
863:09 - kind of looks and feels like a d3
863:11 - selection it so when you call dot
863:13 - transition it creates a new thing
863:16 - which is an instance of a transition and
863:18 - returns it and so these dot attrs
863:21 - they're being invoked on the transition
863:23 - not the original selection
863:26 - and you can also say dot duration
863:31 - like this
863:32 - and pass in a number of milliseconds
863:34 - like let's say two thousand
863:39 - now the transitions are slower
863:43 - two seconds
863:46 - and you can really see the stuff dance
863:47 - around
863:51 - pretty neat
863:55 - however
863:56 - this is sort of
863:59 - the
864:00 - the lazy
864:02 - approach that ends up in
864:05 - semi-buggy stuff because
864:07 - watch this
864:09 - uh when this program runs
864:14 - notice how the circles
864:16 - sort of fly in from the corner
864:21 - zoom
864:22 - this is on to me this i mean it's maybe
864:24 - acceptable
864:26 - but like to me this is
864:28 - not right like this is this is kind of
864:30 - buggy
864:31 - you know
864:34 - so i think we need to do the more proper
864:37 - implementation of of um
864:39 - of transitions
864:41 - which we can get into now from the docs
864:46 - so the thing to do really is to create
864:50 - a transition
864:52 - object
864:54 - that you can use in multiple places
864:57 - because what what this does if you call
864:59 - dot transition it creates a new
865:00 - transition
865:02 - and if we wanted to say
865:04 - transition the axis too it would it
865:06 - would like create a new different
865:08 - transition that has like slightly
865:10 - different timing or something like that
865:12 - and so like if you want everything to be
865:16 - synchronized
865:17 - the best way to do it is to create an
865:20 - instance of d3.transition so that's what
865:22 - i'm going to do now
865:25 - i'll just create it right above our
865:27 - circles
865:30 - i'll use const instead of var
865:34 - and instead of d3 dot transition i will
865:37 - import
865:38 - transition from d3 at the top
865:50 - and i'll get rid of this stuff
865:52 - down here
865:57 - ease linear um oh yeah you can specify
865:59 - all sorts of easing functions which is
866:01 - like the
866:02 - the different way that they animate but
866:04 - i think we can just we can just use the
866:06 - defaults for now
866:08 - and i'll we'll keep the duration of two
866:11 - seconds so we can see it clearly
866:15 - now
866:17 - let me find
866:20 - some more examples
866:22 - so we can call dot transition
866:27 - on a selection and pass in
866:31 - the transition that we created so this
866:33 - is
866:34 - the same behavior as before
866:37 - but what i want to focus on now
866:40 - is
866:42 - when
866:44 - the the plot gets initialized for the
866:46 - first time
866:49 - i want to have like some nuanced
866:52 - animated transitions where
866:54 - here's what i want to have happen the
866:56 - circles should appear
866:58 - in their correct locations
867:00 - but they should grow
867:02 - from nothing to something so i would
867:04 - like to to animate the radius of it
867:09 - right i think that that feels to me like
867:11 - the proper way to start off
867:13 - a scatter plot that has animations is to
867:16 - you know do something sensible
867:19 - rather than like the default behavior
867:21 - which is they fly in from the upper left
867:23 - corner which is sort of nonsensical i
867:25 - mean it makes sense in a way technically
867:28 - but like i wouldn't want to wouldn't
867:30 - want to see that you know
867:31 - so for this
867:33 - we have to
867:35 - we have to use dot join in in a
867:37 - different way
867:40 - let me see if i can find i know there's
867:42 - a good example
867:43 - of this
867:46 - somewhere
867:53 - let me see if i can just find it i know
867:55 - it's probably here in observable
868:03 - here it is here it is
868:05 - yeah this is the canonical example by
868:07 - mike bostock author of d3
868:11 - where it's the general update pattern
868:13 - with animated transitions and these
868:15 - animated transitions are totally
868:18 - um controlled like like the code
868:20 - controls exactly
868:22 - all the cases of of these animations
868:25 - and so when when things enter they're
868:27 - green they fall from the sky when
868:30 - they're exit they transition down
868:32 - they become red and transition down
868:35 - and when they update they're black here
868:37 - and they just move from where they were
868:39 - to where they are
868:42 - or where they should be
868:45 - this is the example i would like to
868:46 - follow
868:48 - so here is
868:49 - here's
868:50 - here's what it looks like to do this
868:52 - properly
868:54 - we call dot join and instead of just
868:56 - passing a string
868:58 - the selector
869:00 - we pass in three functions
869:02 - the first function is what to do on
869:05 - enter
869:06 - the second function is what to do on
869:09 - update
869:10 - meaning when there's something there
869:11 - from the last time around and we just
869:13 - need to update it
869:15 - and what to do on exit when something
869:17 - disappears
869:18 - exit we don't need to handle in our case
869:21 - because we don't have a case where
869:22 - things exit i mean that would be the
869:24 - case where like uh when we invoke the
869:27 - scatter plot we change the data so that
869:29 - there's one fewer
869:31 - uh entry so this case we might not touch
869:34 - upon but we want to touch upon these two
869:37 - for sure
869:39 - let me i'm just going to copy all this
869:42 - stuff because it serves as a decent
869:44 - template
869:46 - for reference
869:51 - uh kern just a question uh you went to
869:55 - uh you went to observable rather than
869:57 - the documentation
870:00 - right
870:02 - and uh is that is that the way to look
870:05 - stuff up now i mean go to observable
870:08 - first rather than the documentation
870:11 - well
870:12 - here's the thing like the documentation
870:15 - of d3 and observable
870:18 - are becoming quite
870:20 - um
870:22 - interconnected
870:24 - so for for example if we look at um
870:29 - d3 selection
870:33 - i often do start with the docs in the
870:36 - readme of the github stuff here
870:39 - but the thing is all of this stuff links
870:42 - into
870:43 - observable well notebooks okay
870:46 - yeah and so joining data for example
870:50 - see the selection.join notebook so
870:54 - this stuff in observable is essentially
870:56 - an extension of
870:58 - the d3 documentation
871:01 - okay i'm just planning on spending a lot
871:03 - of time in the documentation
871:06 - to learn how to do stuff in version six
871:09 - yep
871:10 - yeah the documentation is great but
871:14 - i don't think it contains a
871:16 - complete example i mean this is this is
871:19 - pretty close
871:21 - so this is a place we could start as
871:22 - well
871:24 - but i don't think it contains a full
871:27 - example with the animated transitions so
871:29 - for that we do need to go into
871:32 - observable
871:33 - but yeah my my my general approach is to
871:36 - use the docs
871:38 - as much as i can and then if there's
871:40 - something that i can't find in the docs
871:42 - then i'll click through the observable
871:44 - links
871:45 - and import it
871:46 - essentially port the stuff to vanilla
871:48 - javascript
871:50 - by copy pasting little chunks
871:52 - yep
871:54 - thank you
871:55 - yeah my pleasure thanks for the question
872:01 - here it is so yeah i mean if i had my
872:03 - druthers this
872:04 - code snippet should be in the readme but
872:06 - it's not
872:08 - because this deals with
872:10 - how transitions and selections
872:12 - intermingle and work together
872:19 - so instead of using this approach i'm
872:22 - going to delete
872:23 - what we had earlier
872:26 - for the dot join and then i'll paste
872:29 - all this crazy looking stuff
872:32 - but you know really what i want to do is
872:34 - i want to use this as a reference
872:36 - and then code it
872:38 - ourselves so i'll leave that
872:41 - it out
872:42 - current uh one practical question how
872:45 - what's the shortcut for
872:47 - multiple commenting out in bishop
872:50 - oh it's well if you're not in vim mode
872:53 - it's control
872:54 - slash
873:01 - control slash
873:03 - yeah and i've been meaning to add
873:04 - something like a list of keyboard
873:06 - shortcuts that would be useful wouldn't
873:08 - it
873:09 - right here in the editor
873:10 - yes
873:11 - it's it's
873:13 - it's on the to-do list yeah
873:15 - but um
873:18 - yeah control
873:20 - slash
873:21 - comments the line multiple lines
873:25 - super useful
873:26 - thank you
873:28 - the general structure that we need here
873:31 - is
873:33 - a function that takes as input the enter
873:35 - selection
873:36 - and does something with it
873:38 - a function that takes as input the
873:40 - update selection and does something with
873:42 - it
873:44 - and lastly a function that takes as
873:45 - input the exit selection and does
873:48 - something with it
873:50 - enter what we're going to generally do
873:52 - is append something
873:55 - in this case we are appending
873:57 - a circle
874:00 - and on update
874:04 - is where we want to you know change the
874:06 - position and on exit is where we
874:09 - generally want to remove
874:11 - the stuff
874:15 - um
874:16 - i'm just going to keep it there as a
874:18 - good practice
874:19 - but we don't have like a test harness
874:21 - that tests that case
874:23 - yet
874:27 - but anyway
874:29 - what i think we should do
874:32 - on enter
874:33 - is initialize the circles to where they
874:36 - should be
874:37 - so that's where i'm going to take these
874:39 - lines
874:40 - move them up to here
874:43 - so we are pending a circle a brand new
874:45 - circle
874:47 - the first time it gets invoked and we're
874:48 - setting
874:49 - x and y
874:52 - and what we're left with is now circles
874:54 - that don't move around because we
874:56 - haven't
874:57 - addressed the update selection
875:01 - so let's do the same thing on update
875:05 - i'm just going to paste that logic there
875:06 - so we're setting cx and cy on update as
875:09 - well
875:12 - now we're seeing that the circles change
875:15 - like they should
875:17 - okay
875:18 - so now what i want to do is adopt the
875:20 - transitions
875:24 - the way that we can do this
875:31 - well let's think about first what we
875:33 - want to happen
875:35 - on the enter case when the circles get
875:37 - created what i want to do is transition
875:39 - them from being zero radius to having
875:42 - the radius that they're going to have
875:44 - for the rest of their lives
875:47 - and that is r
875:50 - set to radius here
875:51 - i'm going to move this logic
875:56 - over to here
876:02 - but what i really want to do is
876:04 - initialize r to be zero and that's what
876:07 - we can do here i'll just set r to be
876:09 - zero
876:13 - like this
876:16 - and
876:17 - i wanna i wanna have a transition
876:21 - to
876:22 - the next radius
876:24 - however there are some subtle
876:26 - things to consider here
876:29 - namely
876:30 - this function needs to return the enter
876:33 - selection
876:34 - that's just how this api works it
876:36 - expects the enter selection to be
876:38 - returned
876:39 - so that's why we can't just call dot
876:41 - transition
876:44 - like this
876:45 - because
876:47 - it's going to sort of mess things up
876:49 - internally
876:51 - but
876:51 - then the the last line
876:54 - should be the
876:56 - the radius right i cannot move the
876:58 - radius
876:59 - up and do the transition right
877:04 - or the transition also return the uh
877:07 - returns the enter selection
877:11 - yeah it can be a little confusing so i'm
877:14 - just going to comment out that for now
877:16 - and this is where we need to look to
877:18 - this pattern from from the example from
877:21 - observable
877:23 - it uses dot call
877:26 - and the reason why it uses dot call
877:32 - is that what gets returned from dot call
877:36 - is the enter selection and the enter
877:38 - selection needs to be returned from this
877:40 - function not the transition
877:42 - but this is how we can create a
877:44 - transition
877:45 - derived from the enter selection
877:48 - and then use it to actually do our
877:50 - animations
877:52 - and it takes as input the enter
877:54 - selection
877:55 - and it derives a transition from that
877:59 - and the existence of this
878:02 - this transition is just strictly inside
878:05 - of this callback
878:07 - it doesn't get returned from this this
878:09 - outer function
878:11 - what gets returned is the enter
878:12 - selection because dot call returns the
878:14 - selection that it was called on
878:17 - so this is why you need to use dot call
878:20 - to get at
878:22 - what the transition should do
878:24 - and in here is where we can say dot attr
878:28 - radius
878:29 - r and radius and all this stuff
878:33 - and i might have like a mismatched paren
878:35 - or something
878:36 - i'm missing comma there it is
878:41 - yeah
878:43 - so
878:46 - check this out
878:48 - if i run this
878:50 - i'm going to make a code change to
878:52 - trigger a run make it full screen so you
878:54 - can see
878:56 - this is the transition that we want
879:03 - yeah i'll run that again so you can see
879:05 - it starts out as little dots that don't
879:07 - really exist to they grow
879:09 - into their final form
879:11 - and actually just to make it super
879:14 - visible
879:15 - let me set the duration to like
879:17 - five seconds check this out they're
879:20 - gonna start at nothing get bigger and
879:22 - bigger and bigger
879:24 - and now they're big
879:30 - and if you want to make it smaller after
879:33 - shows then it's you're going to exit
879:35 - right
879:37 - yes
879:38 - okay
879:40 - yeah we could apply the same pattern on
879:42 - exit
879:50 - um yeah exit is um tricky i think i'll
879:53 - leave that to another day um
879:57 - sure
879:58 - because we don't really have a use case
880:00 - for it at the moment
880:01 - but yes you can control what happens on
880:04 - exit
880:06 - and in the example
880:09 - is good like make it turn brown
880:11 - [Music]
880:12 - and then have it transition
880:15 - to go down and then remove it
880:17 - and the trick with exit and transitions
880:19 - is that
880:20 - you need to call dot remove on the
880:22 - transition
880:24 - because what we want to do is have it
880:26 - wait for the transition to finish and
880:29 - then remove the dom element
880:34 - but anyway let's finish
880:37 - the desired update transition
880:42 - again this this should return the
880:45 - update selection so we need to use the
880:47 - same pattern of using dot call
880:50 - update.call
880:52 - update
880:54 - and then update.transition
880:56 - passing in the same transition object
880:58 - that we created earlier
881:00 - and this is where we want to set the
881:03 - cx and cy
881:05 - attributes
881:07 - so now when this runs
881:11 - it should
881:12 - slowly move
881:14 - there we go
881:17 - yeah so now we're having with this kind
881:19 - of a funny
881:22 - a funny effect that's going on because
881:25 - the transition is longer than
881:27 - the time that we're giving it to finish
881:29 - the transition is five seconds but we're
881:31 - changing stuff every two seconds so let
881:33 - me just align on those values
881:38 - two seconds
881:42 - okay
881:44 - this is correct
881:53 - all right and so let's i just want to
881:55 - put a little icing on the cake here
881:58 - um there is a magical thing that you can
882:02 - do with transitions i'm going to make it
882:04 - one second
882:05 - and then do this magical
882:10 - trick
882:11 - which is
882:12 - we can set a dot
882:14 - delay
882:16 - on the transition
882:18 - to be a function that takes as input one
882:21 - row and also the index
882:24 - and we can return the index
882:27 - times let's say 10
882:31 - or 100
882:33 - so you can see what the effect of this
882:34 - is
882:41 - oh you can't really see it
882:43 - i don't know if it actually worked
882:52 - what this should do is make it so that
882:55 - there's a sort of a staggering effect
882:57 - where not all the dots move at the same
883:00 - time
883:07 - i thought this would work
883:11 - gohan um
883:12 - i was doing a few tests
883:15 - another day and i noticed that sometimes
883:19 - the
883:19 - index indexer and the d gets swapped
883:24 - depends of
883:27 - oh really
883:29 - yes i'm not sure why that happened i can
883:33 - check later and let you know but try try
883:35 - to change the ind
883:38 - okay
883:39 - somehow i i i have my doubts but i'll
883:42 - try it
883:46 - yeah nope
883:47 - nope okay um yeah i don't know maybe
883:50 - maybe we need to call this
883:54 - not here but
883:56 - over here
883:59 - after we call dot transition
884:01 - what if we pass it in over there
884:09 - yeah now it's working
884:12 - this is
884:14 - very cool very cool
884:17 - although
884:17 - it's
884:20 - it's set way too high but if if i set it
884:22 - to like a hundred
884:25 - we can see
884:26 - well let's see what happens
884:32 - yeah they all kind of move
884:35 - in a staggered manner
884:40 - let me tweak things
884:41 - a little bit more
884:43 - i'm going to have just a slightly larger
884:45 - delay
884:49 - so instead of two seconds let's make it
884:51 - three seconds
884:52 - and then in the delay let's set this
884:55 - delay to i don't know 50 50 milliseconds
884:59 - to get the desired effect
885:10 - that's still too high let's say like
885:13 - 10 10 milliseconds
885:19 - we can get a really beautiful
885:21 - sort of eye-popping
885:22 - effect there it is that's the effect i
885:25 - was going for
885:27 - so the whole thing finishes between
885:31 - uh the intervals where it changes
885:33 - but it's this beautiful beautiful effect
885:36 - that i love with d3 transitions and
885:38 - setting the delay like this
885:41 - it's got this like voom like this this
885:43 - really almost like a choreographed
885:47 - effect to it
885:50 - it's really cool very cool nice
885:53 - thank you yeah this is
885:58 - fun so yeah i try to you know spice it
886:02 - up
886:04 - with client work like if you add this to
886:06 - work that you do for other people
886:08 - they're gonna just freak out and love it
886:11 - so it's nice icing on the cake that you
886:13 - can add
886:18 - all right and so lastly i think
886:22 - we can
886:23 - we can transition on the axes as well
886:27 - so let me get rid of this
886:29 - reference code
886:31 - and just to wrap this up
886:34 - i'm sort of winging it here
886:37 - but
886:38 - if i just say dot transition t
886:41 - before we call the axis
886:43 - all right let me do it on the x so we
886:45 - can see if it works
886:48 - let's see if that works
886:56 - yeah it works boom see that
886:59 - brilliant
887:03 - yeah the way the d3 access is
887:05 - implemented it does it handles
887:08 - transitions correctly which i just it's
887:11 - just fine so i find it so beautiful
887:14 - you can pass in transition and
887:16 - it updates the axis in an animated
887:18 - fashion
887:21 - brilliant all right i think our
887:23 - animation work is complete
887:27 - any uh
887:28 - any questions or thoughts about this
887:32 - um
887:33 - yeah it's actually it's another task
887:37 - the last class uh
887:39 - exercise was to put the
887:42 - title in the axis
887:44 - i did it but i'm not sure i did the
887:47 - right way
887:48 - so i would like to see how you do it
887:53 - sure um
887:55 - because in this case you have to update
887:57 - also the the title right
888:00 - exactly or is this the exercise for this
888:03 - class
888:04 - actually
888:05 - it is
888:07 - actually it is this is the perfect
888:09 - exercise
888:11 - okay
888:14 - and the timing is perfect we're getting
888:16 - to the end of the time here
888:22 - add axis labels
888:26 - that are idempotent
888:28 - yeah
888:34 - yes this is a very good
888:36 - exercise
888:39 - that i will leave you all
888:41 - to do
888:44 - and just as a as a little hint
888:46 - you're going to have to use that dot
888:48 - data and pass in an array of of no of
888:53 - one item
888:54 - null or whatever
888:56 - and um
888:58 - so instead of just
889:00 - selection dot append text
889:02 - it would be
889:04 - selection dot select all
889:07 - text
889:09 - dot
889:09 - y axis label you're gonna have to use a
889:11 - class to disambiguate between the two
889:13 - things
889:14 - just like we did with the axes
889:17 - and
889:21 - yeah essentially apply the same pattern
889:23 - that we did for the group element that
889:25 - contains our our axes for the text
889:28 - labels
889:29 - and i think this is a great exercise
889:32 - because it it it actually paves the way
889:35 - to a lot of other things like if you try
889:37 - to add
889:38 - labels to this
889:40 - you're going to quickly find
889:42 - that
889:43 - we don't have enough information
889:46 - we need to add another
889:48 - another um
889:50 - accessor to this component which is
889:52 - going to be the x label
889:54 - we're going to have to pass that in too
889:55 - because this passes in a function and
889:57 - from this function we can't tell what
889:59 - the name is of the column so we're going
890:01 - to have to add one additional
890:03 - thing to get it to work so that's why i
890:05 - think it's a good
890:06 - exercise yeah
890:14 - um current yeah
890:16 - i was just curious about the arguments
890:18 - that are passed to join
890:20 - and i noticed that there are a couple of
890:23 - lines that are duplicated namely the cx
890:26 - and cy
890:27 - and i uh
890:29 - i recall that you you've brought up
890:31 - merge in the past to help uh
890:34 - remove that duplication and i was just
890:36 - wondering whether there was something
890:38 - equivalent uh for inside the
890:42 - uh yeah before for inside the arguments
890:46 - um
890:48 - yeah i'm i'm thrilled that you brought
890:50 - this up because
890:52 - duplicated logic is is one of those
890:54 - things that i just hate
890:57 - i just hate to see it
890:59 - and so
891:02 - i would like to address it i'd say it's
891:04 - a great call to address that we've got
891:06 - duplicated logic for cx and cy
891:11 - and it's not so bad i mean it's only two
891:13 - lines that are pretty simple
891:15 - but still it's duplicated logic and you
891:18 - may find yourself with complex logic you
891:20 - know ten lines of complicated stuff that
891:22 - you copy paste
891:23 - between these two places which is not
891:25 - ideal
891:27 - and so
891:31 - the problem is
891:34 - this logic really needs to be executed
891:36 - at these two different places
891:39 - um
891:40 - in the past like if you if we don't have
891:42 - animated transitions
891:45 - you know like we did before i started
891:46 - adding this stuff
891:48 - it could just go once at the at the end
891:51 - because it
891:52 - when you put it here it acts on the
891:54 - merged enter and update selections
891:57 - but if you do it like that you lose the
891:59 - animated transitions
892:01 - like it's not
892:03 - it's not actually correct anymore
892:06 - so let me go back to the way it was
892:13 - is it possible to me like create a
892:16 - function an external function that
892:19 - updates cx and cy
892:21 - then i call this function in the enter
892:24 - and
892:25 - inside the update
892:26 - is that possible yes exactly you hit the
892:30 - nail on the head that's exactly what i
892:31 - was going to do cool
892:33 - and so let's do it
892:35 - i'll call it um
892:39 - what's it going to do it's going to be
892:40 - positioning the circles so i'm just
892:42 - going to call it position
892:45 - circles
892:52 - and this is going to take as input
892:55 - a selection that contains the circles
893:00 - so i'll just i'll call it circles
893:03 - we could call it anything
893:05 - but it'll take that as input
893:08 - and
893:10 - what it will do is just gonna have this
893:12 - side effect
893:13 - of calling
893:15 - dot httr on
893:18 - that selection
893:22 - and
893:23 - it could actually return
893:27 - circles but doesn't really need to
893:32 - um
893:33 - and then to invoke this
893:37 - doesn't need because uh
893:39 - later you will change the r attribute
893:43 - right
893:44 - so it should return the circle or not
893:49 - well it all depends on how we invoke it
893:53 - um if we use dot call
893:57 - then it does not matter what this
894:00 - function returns because dot call
894:03 - is going to return the selection
894:06 - of the circles anyway so it really
894:08 - doesn't matter what this function
894:09 - returns
894:10 - and this is how we can do it we can just
894:13 - say dot call position circles
894:16 - and then in the other place where we
894:17 - have the same logic we can put the same
894:19 - thing dot call position circles
894:23 - like that
894:28 - and it seems to work
894:30 - and on the creation step yeah it seems
894:32 - to work okay
894:34 - yep
894:36 - so yes indeed this is how you can do it
894:38 - this is how you can
894:40 - reduce the duplicated logic
894:43 - across these two places
894:45 - and i think this is the best way to do
894:47 - it because
894:48 - this this logic needs to be executed in
894:51 - both of these places it needs to be the
894:54 - circles need to be positioned before
894:56 - the radius transition happens and they
894:58 - also need to be positioned
895:01 - every time things update and so yeah
895:03 - refactoring it into a common function
895:06 - that's invoked in these two places i
895:07 - think is a good move
895:13 - yeah that's perfect thank you very much
895:16 - for for walking through that
895:18 - nice yeah my pleasure and i'm glad you
895:21 - caught that because um when i was
895:22 - planning for this episode
895:25 - that i had this in mind like oh yeah at
895:27 - the end i'm gonna refactor it but i
895:29 - totally forgot so thank you for
895:31 - reminding me
895:37 - also uh do you have a you i think you
895:40 - mentioned in a previous lesson request
895:42 - animation frame
895:44 - um yeah
895:46 - versus uh set into a interval do you
895:49 - have a preference for one over the other
895:50 - is is one more um
895:53 - does one have benefits of the other
895:56 - well they have different
895:58 - properties request animation frame is
896:02 - actually used internally by d3
896:04 - transitions
896:05 - and when you invoke request animation
896:08 - frame and pass a callback
896:10 - that callback will be invoked
896:13 - as soon as the next
896:15 - render cycle happens
896:18 - and it depends on your system setup for
896:21 - example if your if your monitor is 60
896:23 - frames a second which is most common or
896:25 - 30 frames a second which might happen if
896:27 - you have like a 4k monitor on a computer
896:30 - that's not very powerful
896:32 - and
896:34 - regardless of of your actual hardware
896:37 - request animation frame invokes that
896:39 - function on the next animation frame
896:41 - it's called an anime they call it an
896:43 - animation frame that means when the
896:45 - display updates
896:47 - so let's assume you have a like a
896:49 - standard setup where your refresh rate
896:51 - on your monitor is 60 frames a second
896:54 - that means and that's that's standard
896:56 - like when you move your mouse around on
896:58 - the screen
897:00 - if if you just sit there and up move
897:03 - your mouse around you're going to see
897:04 - that it's not a continuous
897:06 - thing like it actually just appears at
897:08 - different places really fast
897:11 - and every time it appears that's 1 60 of
897:14 - a second which is approximately 16
897:16 - milliseconds
897:19 - and so the benefit of using request
897:20 - animation frame
897:23 - for things like animation
897:25 - is that it it synchronizes correctly
897:28 - with your display
897:30 - whereas if you use request if you use
897:33 - set interval
897:35 - for animation like if you if you were to
897:37 - use set interval and past 16
897:39 - milliseconds
897:40 - it would give you
897:41 - [Music]
897:42 - it would call your function roughly
897:44 - every animation frame but it might call
897:47 - it twice between animation frames
897:49 - sometimes or it might call it once
897:52 - across two
897:53 - animation frames which would result in a
897:55 - slight
897:56 - almost undetectable visual glitch
898:00 - in the animation
898:01 - and so if you're if you're doing
898:03 - animations then request animation frame
898:05 - is the best
898:06 - thing to do hands down
898:09 - uh and and that's why d3 transitions use
898:11 - it internally for a time it wasn't
898:14 - supported by all browsers
898:16 - and so
898:17 - for a couple years there you had to
898:20 - you had to implement a fallback that
898:22 - used um
898:24 - set timeout or set yeah set timeout
898:27 - is the is the like a variant of set
898:29 - interval that just calls the function
898:31 - once
898:32 - um so i remember back in the day i had
898:35 - to do like detection like if request
898:38 - animation frame is there then use it
898:39 - otherwise use
898:41 - set
898:43 - timeout and pass 16 milliseconds
898:46 - or whatever
898:47 - 1000 divided by 60 is
898:50 - and so that would be an approximation
898:52 - however
898:54 - if you have other use cases that are not
898:56 - animation like what we have here
898:59 - um
899:01 - like
899:01 - where you you want to wait for one
899:03 - second or three seconds
899:06 - then set interval is the thing to use
899:10 - actually
899:11 - um
899:13 - yeah set interval is more appropriate
899:14 - when you have longer time
899:16 - scales that you're considering but if
899:18 - you're doing animation then request
899:20 - animation frame is is the thing to use
899:24 - yeah that makes total sense thank you
899:27 - nice
899:31 - my other question yeah
899:33 - um so
899:34 - go back to scatterplot.jf
899:38 - um and so
899:40 - uh
899:41 - where you or i guess the
899:43 - where did you have the abstraction out
899:46 - for position circles okay yeah there um
899:49 - the question i had in terms of and just
899:52 - sort of style and
899:54 - uh readability i really like the notion
899:56 - of putting position circles there
900:00 - it just reflects what's actually
900:02 - happening
900:04 - it from a uh sort of a
900:07 - coding style would someone do the same
900:09 - thing with the dot call enter that
900:12 - comes a little later right after it
900:14 - um it just seems
900:16 - at least to me a little strange
900:18 - but that's probably how javascript works
900:21 - and so forth but could you actually name
900:23 - that as a function that is
900:25 - you know uh more reflective of what's
900:27 - happening just like you did position
900:29 - circles does that make sense
900:32 - yeah um i'm gonna select some text do
900:34 - you mean this block here yeah yeah that
900:37 - dot call enter um
900:39 - or this inner one here yeah yeah that
900:41 - inner one yeah just
900:43 - could you name that uh create a function
900:47 - just like you did call position circles
900:49 - in a way that um it reflects what it's
900:52 - actually doing there in other words
900:54 - making the um
900:57 - uh
900:58 - radius bigger or transitioning yeah grow
901:00 - radius exactly for sure
901:03 - yeah i mean it's just a function
901:06 - okay
901:07 - so for sure i mean um
901:11 - you can you can do all sorts of
901:12 - refactorings like this and organize the
901:14 - code and i like doing things like this
901:16 - because
901:18 - in a way it's
901:19 - documentation like variable name
901:22 - is in a sense documentation for what it
901:24 - does exactly that's where i was going
901:25 - with this yeah um
901:28 - okay
901:28 - for sure and so i love you know when i
901:31 - can i like to structure code like almost
901:33 - like a book
901:35 - exactly where you learn about okay this
901:38 - grow radius what is that it's some
901:40 - cryptic code that sets the radius but it
901:43 - says grow so that therefore it must be
901:46 - like growing from zero to something and
901:49 - so
901:50 - for sure i would encourage doing this
901:52 - sort of uh slight refactoring to make
901:54 - the code more readable and clear
901:58 - yeah right and it's thank you you're
902:00 - welcome you're welcome but yeah it's
902:01 - totally a stylistic thing like i
902:04 - personally probably wouldn't do that
902:08 - just because it's setting the radius on
902:10 - the line before
902:12 - uh but how you know it's totally
902:14 - personal preference like this may be
902:16 - more readable for somebody coming at
902:18 - this code for the first time
902:20 - for sure so yeah
902:22 - up to you okay thanks that helps yeah my
902:25 - pleasure
902:30 - but what's going on that the the radios
902:32 - oh the radius just
902:35 - right it's in in the intersects just
902:37 - begin and yeah okay i got it
902:40 - it's just in there
902:42 - it's not when it moves okay
902:44 - see if we if we wanted to take this to
902:46 - the extreme we could say initialize
902:52 - radius
902:54 - and pair these together
902:56 - and so instead of saying right here attr
902:59 - zero we could say dot call
903:03 - initialize radius
903:13 - and that's what this would do right here
903:16 - and this actually implicitly returns it
903:18 - which we don't need to do so that's why
903:20 - i'm going to add these curly braces
903:29 - and actually same same with this we
903:30 - don't need to return it
903:33 - so this is like the final form if you
903:35 - were if you were to want to
903:37 - you know factor out things and name them
903:41 - this works as well so it's super clear
903:43 - now that like okay first we're going to
903:46 - position the circles
903:47 - then we're going to initialize the
903:49 - radius
903:50 - and if you read it you realize
903:52 - it's initialized to zero
903:54 - and then we're going to grow the radius
903:56 - from zero to something else using a
903:59 - transition
904:00 - so yeah yeah this code
904:04 - it's
904:05 - definitely more organized more readable
904:08 - in a certain sense
904:10 - but it's also more code so it's always a
904:12 - balance between how verbose and clear do
904:15 - you want to be versus how
904:17 - minimal and concise and arguably cryptic
904:20 - you want to be
904:28 - yeah there's trade-offs for sure
904:36 - all right maybe i'll take one more if
904:38 - there is another and then we'll call it
904:40 - wrap it up for the day
904:42 - anyway well karen i have one that's uh
904:44 - on
904:46 - not on this chart but on a
904:49 - forced layout so i don't know if anybody
904:51 - has any other questions on this
904:55 - you know i'll be i'll be working on
904:57 - forced layout in the future so like my
904:59 - inclination is to
905:01 - is to hold off on that until we're
905:04 - dealing with it
905:06 - uh but i'm happy happy to feel the
905:08 - question about it actually
905:10 - it's it's mostly i see some places where
905:13 - um you the
905:15 - links are set up as an empty array
905:18 - and then how do you get that data to do
905:21 - that so that instead of me having to
905:25 - do source target for you know a thousand
905:27 - different data points
905:29 - i just do the auto magic
905:32 - javascript and it does it for me
905:37 - yeah there's some there's some magic
905:39 - stuff that happens with d3 force
905:41 - to be sure
905:43 - um i need the force to be with me on
905:45 - this yeah i get it
905:50 - yeah yeah well
905:52 - yeah when you and i think when you call
905:54 - for
905:55 - i don't remember exactly but when you
905:57 - pass data in there's some kind of magic
905:59 - initialization that happens
906:02 - um
906:03 - but i i will be doing forced layouts in
906:06 - in future episodes so
906:08 - maybe hold that idea how long
906:11 - i'm not sure
906:12 - i'm not sure i haven't planned out the
906:14 - full series but
906:15 - i think from here on out
906:20 - i'm debating to go deeper into this
906:22 - to add menus to this so you can
906:24 - interactively select
906:26 - so that's one direction to go another
906:28 - direction to go would be
906:30 - to
906:31 - do a bunch of things where we start from
906:33 - scratch and just implement different
906:35 - visualization techniques like a bar
906:37 - chart
906:38 - a line chart an area chart a pie chart
906:45 - from scratch
906:46 - with just enter and not this general
906:48 - update pattern stuff um so those are
906:50 - some of the things that i'm going to be
906:51 - doing in the future um
906:55 - any any preferences for for which
906:57 - direction to take it
906:59 - i
907:00 - i would say i would say uh menus are a
907:03 - really good idea if you're uh
907:05 - designing this for a user having them
907:07 - have the power of choice over what what
907:11 - shows on the screen is powerful exactly
907:14 - that's what i was thinking too so like
907:16 - now that we've got it to this point
907:18 - it's a cool technical demonstration but
907:22 - you know we're gonna have to add the
907:23 - axis labels and if you were to develop
907:26 - this for an actual use case of someone
907:29 - needing to visualize the data the
907:31 - logical next step would be to make it so
907:33 - that you can choose like you said which
907:36 - yes i will also appreciate that
907:38 - functionality you know yeah
907:40 - right on right on i like it
907:43 - sweet yeah
907:45 - i agree with ken and everyone yeah
907:48 - sweet yeah yeah let's do it so probably
907:50 - next week i'll
907:52 - add menus to this one
907:56 - and uh yeah that'll uncover some
907:58 - complexities along the way
908:00 - all right i think i'll wrap it up for
908:02 - today
908:03 - so
908:04 - thanks everyone for joining me so much
908:06 - thanks karen
908:08 - thank you thank you
908:10 - yeah this was a lot of fun
908:12 - this was a lot of fun with a lot of
908:14 - people here i love it so um yeah i hope
908:16 - you all can join next week as well and
908:19 - beyond
908:20 - so have a good weekend take care all
908:22 - right bye
908:24 - take care thanks bye bye
908:33 - welcome everyone to episode 11 of get it
908:36 - right in black and white charts with
908:37 - menus
908:40 - we've got a full house today we've got
908:42 - felipe adil nita and eric dasbach i
908:46 - think i'm saying that right is that
908:47 - right
908:49 - das bach great
908:52 - so yeah let's start by reviewing
908:55 - the submissions from last week
909:04 - this forum from last week
909:14 - all right so the exercise was
909:16 - add labels to this reusable scatter plot
909:19 - let's see what folks did
909:25 - wow this is pretty nice
909:30 - the labels are animated
909:36 - very cool
909:37 - nice work
909:38 - it's kind of surprising
909:43 - the arrow that's a good question
909:45 - let's check it out
909:49 - i guess it would be in here somewhere
909:56 - it's an actual character
909:58 - see that
910:02 - yeah
910:05 - yeah pretty neat there's actually a lot
910:07 - of um
910:09 - surprising characters that you can use i
910:12 - think it's from unicode
910:14 - but there's arrows there's little old
910:17 - dots
910:18 - emojis of course you could put emojis in
910:20 - here and it should work
910:31 - nice okay so the the axes
910:34 - the labels are
910:36 - animated as well
910:38 - with the same pattern
910:44 - very nice
910:50 - cool let's take a look at what some
910:51 - other folks did
911:01 - this is pretty cool
911:03 - so the animation pattern is it just
911:04 - disappears
911:06 - and then comes up from the bottom
911:14 - hello
911:17 - welcome
911:19 - perfect timing i'm not sure how to
911:21 - pronounce your name but uh
911:23 - but you just joined the call welcome
911:30 - i think this is the first time you're
911:31 - here you want to uh introduce yourself a
911:33 - bit
911:37 - uh
911:38 - kostav i'm not sure how to say your name
911:40 - but welcome kyle stuff you want to
911:42 - introduce yourself
911:49 - you're muted i'm not can't hear you
911:58 - welcome
912:06 - kathy hello i think this is the first
912:09 - time you're here you want to introduce
912:11 - yourself a little
912:18 - oh yes
912:32 - got it yeah i'm i'm experimenting with
912:34 - opening up the the live chat the live
912:37 - audio chat to everyone watching
912:39 - because um yeah i think there's a lot of
912:41 - value in people you know stopping me
912:43 - asking questions
912:44 - we can have a lively discussion
912:50 - all right glad you could join we have a
912:52 - full house today
912:59 - yeah no i i would suggest you close the
913:01 - youtube window it's a little tricky of a
913:02 - setup
913:05 - yeah because there's delayed audio
913:06 - coming from the youtube window and and
913:09 - there's the google meet window so if
913:10 - you're in the google me you have to
913:12 - close the youtube window
913:14 - sorry it's a little it's a little
913:15 - confusing
913:28 - oh good welcome kostov i'm so glad you
913:31 - could join us um i've i've seen your
913:33 - work recently and it's really great you
913:34 - want to introduce yourself a little bit
914:04 - excellent
914:18 - oh this one
914:40 - nice yeah this is really beautiful work
914:43 - yeah i've been i've been really happy to
914:45 - see see you working here and i'm
914:46 - thrilled you could join us today this is
914:48 - amazing this is amazing
914:50 - so yeah this is this is sort of a dream
914:52 - come true for me with this series i was
914:54 - hoping to
914:55 - collect sort of a core group of people
914:58 - who are following along intensely with
914:59 - this stuff
915:00 - and this is actually what happened so
915:03 - just thank you so much for
915:05 - for joining me on this journey this is
915:07 - amazing
915:09 - so i was just showing your work uh
915:11 - costume how do you say your name again
915:13 - i'm sorry
915:16 - kostov
915:17 - gostiv nice do you want to present this
915:19 - work a little bit see and and explain
915:21 - how you did it
916:01 - very nice
916:17 - right
916:32 - yep oh there it is
916:36 - oh that's actually pretty nice
916:39 - that's a pretty nice technique you're
916:40 - actually checking the value to see if
916:43 - it's a number or not
916:47 - nice work
916:49 - yeah so if folks if folks haven't seen
916:51 - this type of operator this is a really
916:53 - nice operator you can you can say type
916:55 - of something and that operator returns a
916:59 - string and it could be number
917:01 - like the string number
917:02 - or the string s-t-r-i-n-g or object or
917:06 - anything and this tells you what type of
917:08 - thing it is so this is checking
917:10 - the first row
917:11 - at the certain column what type of thing
917:15 - is it
917:17 - nice
917:18 - so it's filtering just by
917:20 - the numeric columns great work
917:43 - i see yeah continue has to be
917:47 - an expression on its own
917:50 - and so if you wanted to do that let me
917:52 - just show you real quick how you could
917:54 - do that
918:00 - so this is using the four in
918:03 - construct which is slightly different
918:05 - from four of
918:06 - uh
918:07 - but this is this is working fine so the
918:09 - thing is
918:11 - the ternary operator
918:13 - it creates an expression that has some
918:15 - return value and so
918:18 - you know if this value is true then it
918:20 - returns
918:21 - the first thing right after the question
918:23 - mark if it's false it returns the thing
918:25 - after the colon
918:28 - however continue
918:30 - continue needs to be its own separate
918:32 - statement so if you wanted to use
918:34 - continue
918:35 - you would need to do it like this
918:38 - you would need to use an if statement
918:41 - and an if block right here
918:45 - and and this use of the ternary operator
918:48 - is a bit confusing but because it has a
918:50 - side effect
918:51 - it's typically not recommended to to
918:53 - have a side effect meaning pushing a new
918:56 - thing onto the array
918:58 - uh inside of a ternary operator it's
919:00 - just a little bit confusing so this is
919:02 - how i would suggest to do it
919:04 - use an if and inside of that if block
919:08 - do this do the thing with the side
919:10 - effect so it's really clear that okay
919:12 - this is this deserves its own line it's
919:14 - doing something it has a side effect
919:16 - it's changing this array
919:18 - and then in the else block
919:21 - then you could use
919:24 - uh continue
919:26 - but
919:30 - yeah i was about to say like but you
919:32 - don't really need that because it's
919:34 - gonna just continue and do nothing
919:36 - anyway
919:39 - so
919:42 - nice
919:43 - nice yeah i'm glad i'm glad this came up
919:47 - yeah continue
919:51 - it's a control flow thing that you only
919:54 - need to use if you're inside of some
919:56 - like deeply nested thing
919:59 - and then you you know inside of some
920:01 - deeply like if you have four
920:03 - like three like i don't know two or
920:05 - three nested if statements and you come
920:07 - to some case where you need to continue
920:09 - that's where you would want to use
920:12 - um continue and i can't think of an
920:14 - example offhand but if it's just a case
920:17 - like this you don't actually need to use
920:19 - continue
920:20 - at all
920:21 - so this is another way of doing it
920:37 - yeah so with the for in construct
920:40 - this actually works because it's block
920:43 - scoped
920:45 - so this block
920:47 - here
920:49 - so const it declares this variable
920:51 - called col column
920:56 - and you could also use let here that
920:58 - would work too uh you could even use var
921:01 - if you're old school
921:04 - but const works
921:11 - yeah yeah my pleasure and um
921:14 - what this what this block of code is
921:16 - actually doing is it's filtering the
921:19 - columns
921:20 - to have only the numeric columns
921:22 - and so i can't help but just also
921:25 - suggest
921:27 - alternate way of doing it
921:30 - as well
921:32 - which is
921:35 - like this
921:37 - const
921:39 - numeric columns
921:40 - equals
921:45 - um
922:12 - there is no list comprehension but there
922:14 - are many useful
922:16 - methods on arrays
922:18 - that you can use
922:20 - and so
922:22 - this for in construct actually uses the
922:24 - keys
922:25 - of this object
922:27 - so
922:28 - you could say object
922:30 - dot keys
922:32 - of the first row
922:34 - this gives you an array of all of these
922:37 - columns
922:38 - and then you can say dot filter which is
922:41 - an array method and a lot of this stuff
922:43 - you could do in python with list
922:44 - comprehensions but there is no list
922:46 - comprehension in javascript it would be
922:48 - cool if there were
922:50 - but we can just use these constructs
922:52 - like filter
922:54 - and so
922:55 - we can pass in a function to filter
922:59 - and
923:01 - this function can just return this
923:03 - boolean
923:04 - you know if the type of
923:08 - the first row at this part particular
923:11 - column is number then return true
923:15 - otherwise it returns
923:18 - false and i'll just use prettier to
923:21 - format this code and this actually does
923:24 - the exact same thing as
923:26 - all of this
923:32 - it's just a more concise way of doing it
923:43 - understood yeah excellent excellent and
923:45 - i can see that like i can see that
923:47 - you're
923:48 - you're learning and trying new things
923:50 - and this is this is a very good way of
923:53 - um
923:54 - like this
923:55 - i can yeah it's great i could see your
923:57 - learning process which is amazing and so
923:59 - this is a good
924:01 - first working version and then you can
924:04 - simplify it with the addition of these
924:06 - different constructs like filter
924:13 - this hub does not do linting i tried to
924:15 - get it to work with linting
924:18 - but
924:19 - it was causing all sorts of
924:20 - instabilities it started crashing
924:22 - uh that's something on the road map for
924:24 - vishub it would be amazing to do linting
924:27 - and vis up that's something i really
924:28 - would like to see but unfortunately not
924:30 - right now
924:32 - but the closest thing we have is
924:34 - prettier this little p which which
924:36 - formats the code for you i find it super
924:38 - useful
924:42 - and along these go ahead
924:47 - sure
924:58 - it's an array of strings
925:03 - and it just for some example if we were
925:05 - to test against
925:07 - string
925:08 - it should return just species and it
925:10 - does yeah
925:13 - species is actually a
925:16 - something that uh sort of throws throws
925:18 - a wrench in the works of how our scatter
925:20 - plot works and this is uh
925:23 - this is going to be related to the
925:25 - exercise for today
925:31 - and we'll get more into it later
925:33 - but yeah
925:34 - this is an alternate way to do that
925:36 - filtering
925:38 - and let's see what time is it it's 11
925:40 - 21.
925:47 - let's just see a couple more
925:48 - exercise submissions
925:59 - here's another one from cost of
926:08 - um i don't know which one i clicked
926:09 - actually hold on
926:11 - this is the one i wanted to click
926:14 - data source dozen d3 scatter plot
926:17 - oh this is amazing the data source
926:20 - so good so good
926:26 - nice so this
926:35 - excellent
926:40 - yeah great work this this is awesome the
926:42 - data source data set by the way it's
926:46 - it's got a lot of history to it
926:49 - um
926:51 - i can go into it at another time but
926:53 - it's a great data set because it
926:56 - it has this picture of a dinosaur that
926:57 - you can see here
927:00 - and
927:01 - the point of it is that
927:04 - if you take all sorts of statistical
927:05 - summaries of this data set
927:08 - they're all like
927:10 - the same for all the different columns
927:13 - but if you visualize it you get totally
927:15 - different things like that data source
927:17 - and dots and the star and the point of
927:19 - it and the circle here and the point of
927:22 - this data set is to show that
927:25 - statistical summaries lose a lot of
927:27 - information
927:28 - and when you visualize the data you can
927:30 - see these patterns and information that
927:32 - you cannot see with just the statistical
927:34 - summaries
927:37 - very nice
927:42 - and here's another one
927:44 - with labels this one blew my mind when i
927:47 - saw it
927:49 - it actually does the
927:51 - animated general update pattern example
927:53 - within the label
927:57 - isn't that cool
927:59 - really a lot of attention to detail on
928:01 - this one it's
928:03 - i was happy to see this one it made me
928:04 - laugh i'm like oh my god this is
928:07 - this is so funny
928:10 - yeah so really nice work really nice
928:12 - work here
928:14 - by andrea nice
928:19 - oh here's one from eric dusbach
928:26 - nice you want to talk about this a
928:28 - little bit oh cool animation
929:01 - alright
929:31 - right nice
929:33 - well this is very nice
929:35 - this is very nice
929:37 - however
929:38 - however i do see some telltale signs
929:41 - that the labels are not
929:43 - adhering to the general update pattern
929:45 - see if you could see around the edges
929:47 - they're like very sharp
929:49 - and crisp
929:51 - that indicates to me that there's
929:52 - actually a bunch of labels on top of one
929:54 - another
929:56 - so let me just go in here and see
930:00 - what's happening with that and how we
930:01 - might fix it
930:06 - so the y-axis label
930:11 - looks fine actually this one is behaving
930:14 - correctly
930:16 - nice work with the data null
930:33 - oh nice
930:35 - oh nice that's great
930:37 - that's great i'm happy to see this like
930:38 - cross communication
930:41 - happening
930:42 - but here's where there's still a problem
930:44 - see
930:45 - with this one it's just appending a new
930:48 - group element every time for for axis
930:50 - bottom year
930:52 - but it's very close to what it needs to
930:54 - be i mean all you need to do here is
930:57 - selection dot select all
931:02 - a dot
931:03 - axis bottom year
931:07 - dot join
931:09 - g
931:10 - and now
931:18 - oh sorry sorry sorry i forgot the data
931:21 - null
931:23 - here
931:30 - now if you see the animation play out
931:33 - this 2020
931:35 - is is looking correct it's not getting
931:38 - that crisp
931:39 - thing happening to it so yeah this is
931:42 - the pattern right here that you can
931:44 - apply to all the different text labels
931:46 - like this one united states
931:48 - and this other one here
931:53 - nice
931:54 - so yeah you're well on your way nice
931:56 - yeah my pleasure
931:59 - great work great work
932:02 - and while i'm in here i just kind of
932:06 - kind of want to see
932:09 - if we make this
932:16 - delay
932:18 - i times like 20
932:20 - i kind of want to see it play out in its
932:22 - full slow
932:25 - beauty
932:28 - see this is
932:30 - this is really cool oh my gosh oh it's
932:33 - look what's happening here
932:42 - nice yeah that's what you got to do you
932:44 - just got to dial it in
932:47 - dial it in or alternatively you could
932:49 - make this a function of the
932:53 - um number of
932:56 - rows in the data that's actually
932:58 - something i wanted to do earlier
933:03 - but yeah it's it's gets a little
933:05 - detailed
933:06 - but yeah excellent work excellent work
933:10 - all right
933:12 - last one from andre
933:14 - take it out
933:20 - oh is it broken
933:40 - oh this is this is just a bug this is a
933:43 - bug invis up i don't know what this is
933:44 - coming from i've been meaning to
933:46 - investigate this i think just the data
933:47 - set was taken a long time to load
933:52 - that's working now
933:55 - nice
933:56 - very cool so it's just plugging in a
933:58 - different data set to that one
934:00 - with the
934:01 - with the transitions on the labels
934:04 - nice very nice work
934:10 - oh let's check it out
934:20 - oh you can only hear me oh my god
934:22 - seriously this is a disaster
934:45 - oh my gosh
934:46 - it's been just my audio coming through
934:48 - this whole time can one of you say
934:50 - something just to check the levels
935:04 - uh
935:27 - yeah i think so yeah it's a
935:32 - yeah sorry i i had my youtube close
935:35 - said something um
935:44 - yeah it's it's my problem on the obs
935:47 - config hold on just let me try to figure
935:48 - this one out
936:02 - all right can you can one of you say
936:03 - something
936:06 - testing nice there it is
936:09 - what is usually
936:11 - okay now it's coming through
936:13 - oh this is a disaster
936:15 - so all the audio so far was was lost
936:17 - from everybody else but now it's coming
936:19 - through
936:20 - sorry about that
936:24 - oh so sorry
936:26 - yeah
936:27 - you saw it
936:28 - before the class start but uh the
936:30 - question is in the
936:32 - uh it's in the meat uh chat oh the meat
936:35 - chat okay this is too much for me to
936:37 - monitor it's too many chats yeah
936:39 - that's why i said because it's
936:41 - too much places
936:43 - yeah i think you need to take break
936:45 - every half hour and check around
936:48 - yeah totally
936:53 - all right now let's get into today's
936:55 - episode
936:57 - so i'm gonna try to
936:58 - i'm gonna try to keep this to a half
937:00 - hour
937:12 - what we're going to try to do today is
937:14 - add menus to our animated scatter plot
937:17 - so that instead of just cycling through
937:19 - different columns it's going to be
937:21 - driven by the choice of the user you
937:23 - know what do i want to see right now and
937:25 - so you can click a menu and select which
937:28 - column to use for both x and y
937:33 - oops
937:38 - so i'm going to start from
937:41 - what we did last week
937:44 - this animated reusable scatter plot and
937:46 - i'll drop the link here
937:48 - in the chat
937:53 - if you'd like to follow along
937:57 - so i'll start by forking this one
938:00 - and i'll say um
938:06 - animated reusable d3 scatter plot or
938:08 - just i'll say scatter plot
938:11 - with menus
938:14 - or reusable
938:16 - how about animated
938:18 - animated scatter plot with menus
938:28 - okay
938:30 - so what i'd like to do here
938:33 - is add menus how do you add menus
938:37 - it turns out this is thing called
938:39 - the select
938:41 - tag in html and it looks something like
938:44 - this
938:47 - here's an example from w3schools
938:53 - this is the sort of basic built-in menu
938:55 - that you get from
938:57 - html
938:58 - and this is this is good for us we can
939:00 - use this
939:02 - so i'm going to copy this code as a
939:04 - reference example
939:07 - and
939:08 - i'm thinking we can use the same pattern
939:11 - that we used for our scatter plot
939:14 - for the menu
939:16 - so we're going to want to be able to say
939:18 - import
939:26 - menu
939:27 - from
939:29 - dot slash menu
939:32 - and we can use the same reusable chart
939:35 - pattern for this menu component
939:38 - so i'll create a new file called menu.js
939:42 - and in here i'm just going to paste this
939:44 - as a reference and comment it out
939:47 - and then
939:49 - i'm going to copy all of this
939:51 - scatterplot stuff
939:53 - paste it in here
939:56 - and change scatter plot to menu
940:01 - and
940:02 - and then just remove
940:05 - everything inside of here except the
940:07 - core skeleton
940:09 - of what we need
940:13 - and i'll keep one example of an accessor
940:15 - because we're going to want to have a
940:16 - bunch of these
940:19 - all right so this is the basic skeleton
940:23 - of what we want to do
940:26 - and then let's let's um invoke this from
940:30 - index.h index.js to get to a starting
940:33 - point
940:35 - for development
940:38 - i'm gonna get rid of this set interval
940:40 - stuff
940:41 - because it's going to be replaced by
940:43 - uh in the interaction of selection and
940:46 - we have this columns thing here which
940:48 - can drive the menus
940:51 - so we want to call
940:53 - dot call
940:55 - menu
940:58 - on something
941:00 - but we don't have that thing yet
941:05 - and i think what that thing should be is
941:08 - a div
941:09 - that we append to the body
941:13 - so maybe up here
941:15 - i'm going to make another block called
941:18 - menu
941:20 - container
941:22 - where we select the body and we can
941:24 - append a div
941:26 - a div is just a container
941:29 - element
941:30 - in html and maybe let's give it a class
941:37 - of menu container
941:40 - just so that we can style it with css
941:46 - and then we can use this
941:50 - to invoke our menu
941:52 - component
941:56 - so what this is i have a question yeah
941:58 - go ahead
942:00 - so this
942:02 - um h table elements uh it doesn't make
942:05 - sense to
942:06 - uh attach them to svg because they are
942:10 - basically html elements so they go to
942:12 - body element only correct
942:15 - yes
942:16 - um
942:19 - within the svg element you can only use
942:22 - certain
942:23 - certain tags that make sense within an
942:25 - svg like circle and line and all that
942:27 - stuff
942:29 - if you want to use a div inside of an
942:31 - svg there is actually a construct you
942:34 - can use to do this it's called foreign
942:36 - element svg foreign element
942:40 - but i don't use that very much because i
942:42 - find it confusing to have divs inside of
942:45 - your svg and it has some weird behavior
942:48 - so what i generally do is
942:50 - keep the svg graphics totally separate
942:53 - from
942:54 - the ui elements the regular old dom
942:56 - elements
942:59 - and so this is why
943:01 - i'm setting up a div giving it a class
943:03 - of menu container
943:05 - and then we can put stuff into there
943:10 - so we can instantiate our menu
943:13 - pass it into dot call and then inside of
943:16 - menu
943:18 - when it gets invoked the selection is
943:20 - this div it's the parent div
943:23 - so let's just try something
943:25 - selection.txt
943:29 - just as an
943:30 - example of something
943:33 - notice how it doesn't actually show up
943:35 - anywhere because i think it's showing up
943:37 - below
943:38 - the svg like beyond the boundary of the
943:41 - page
943:47 - so
943:49 - what we want to do is style it so that
943:51 - it appears at the top of this page
943:56 - so we've got this class menu dash
943:59 - container
944:00 - in our styles.css we can
944:03 - access that
944:04 - and i'm going to just position these
944:07 - menus on top of this svg
944:10 - to do that we can say position
944:13 - fixed
944:17 - top
944:18 - 0
944:19 - and left
944:21 - zero this will put it at the top left
944:23 - corner
944:24 - so now we can see there it is foo at the
944:27 - top left corner
944:30 - i would like to ultimately center all of
944:32 - this stuff and i think i'll do that now
944:34 - just while i'm in the css
944:38 - to do that i like to use flexbox
944:44 - which you can
944:45 - set up with display flex
944:49 - and this is a whole thing
944:50 - that you know i could spend a bunch of
944:52 - time talking about but suffice it to say
944:54 - that when you use display flex
944:57 - it opens up this whole
945:00 - landscape of options for you
945:03 - which is extremely well documented in
945:05 - this thing called a complete guide to
945:07 - flexbox which has been a really great
945:10 - reference for me
945:11 - whenever using flexbox
945:15 - so what i want to do is center it so we
945:17 - can use justify content
945:20 - um
945:22 - i think space around is what i'd like to
945:24 - use so that we have one menu on one side
945:27 - and another menu on the other side
945:31 - so justify content
945:35 - space
945:37 - around
945:42 - it's still in the corner uh i think we
945:44 - need uh right
945:47 - zero as well which will make this div
945:49 - span the whole the whole space from left
945:52 - to right now we can see that little foo
945:54 - is in the middle
945:56 - here
945:57 - which is what we want
946:06 - all right
946:07 - we're going to actually want
946:10 - two menus one for x and one for y so
946:12 - let's scaffold that out now
946:14 - while we're here
946:17 - i will put these as children of menu
946:19 - containers so i'll call it
946:22 - maybe x menu
946:25 - container
946:28 - or how about i'll just call it
946:32 - x menu
946:37 - and we can do the same we can append a
946:39 - div
946:41 - give it a class of
946:44 - x
946:47 - menu container
946:52 - but you know
946:53 - i don't think we actually need different
946:55 - classes for this so i'll just append a
946:57 - div the simpler the better
947:01 - so we've got x menu and y menu
947:07 - and down here we can say xmenu.call
947:11 - and then ymenu
947:13 - dot call
947:16 - and see now
947:18 - we have two different labels
947:20 - one on the left and one on the right
947:22 - this is looking good this is what i
947:23 - wanted to ultimately ultimately end up
947:26 - as one menu on the left one menu on the
947:28 - right
947:29 - now that we have our positioning down
947:32 - let's develop this menu component
947:37 - using this this example code as a
947:39 - reference
947:43 - so i think the menu should be comprised
947:45 - of roughly this structure where there's
947:47 - a label
947:49 - and then there's a select element that
947:51 - has a bunch of options inside of it
947:55 - let's begin by creating this
947:57 - label
948:00 - we can say
948:01 - selection
948:02 - dot select all
948:06 - label
948:07 - dot data
948:09 - null
948:09 - i'm just gonna start by using this this
948:12 - item potent pattern from the beginning
948:14 - so we don't end up with any bugs
948:16 - later if we invoke it multiple times
948:21 - dot join
948:23 - label
948:25 - like this
948:29 - and the label
948:32 - is for
948:35 - this select
948:36 - and that has some implications for the
948:38 - ui like if you i think if you click on
948:41 - the label
948:42 - it gives focus to the select or
948:45 - something like this
948:47 - um i'm just using this as a
948:51 - as a template because i think it's all
948:53 - correct
948:55 - so let's begin by
948:57 - setting this four
948:59 - attribute
949:00 - i can say dot attr
949:04 - for
949:06 - and i'll use something called
949:09 - id
949:11 - which is something that should be
949:14 - configurable
949:17 - so let id
949:18 - equals nothing to start and we can we
949:21 - can set up an accessor for id
949:30 - like this
949:32 - oh what is where is label
949:38 - what do you mean where is label
949:42 - is this variable
949:47 - this is just an element here select all
949:49 - label
949:51 - yeah
949:52 - the idea is we're going to create this
949:54 - structure is inside the dom
949:58 - and so there's no variable called label
950:00 - it's just the tag
950:01 - name label
950:05 - and it's going to appear as some text
950:08 - next to the menu that says what the menu
950:10 - is about
950:11 - yeah but in this case you okay i got it
950:14 - you're selecting all the labels but
950:17 - there is none label
950:19 - right right now correct
950:21 - and then you will create but what what
950:25 - if we have a label
950:28 - in our
950:30 - in our page right if there's already a
950:32 - label there as a child of this selection
950:35 - then it will it will select that and use
950:38 - it instead of creating a new one this is
950:40 - what this
950:41 - this whole pattern is all about this
950:43 - idempotent rendering pattern the first
950:45 - time it's invoked it'll create a new
950:46 - label but subsequent times it's going to
950:49 - use the existing label
950:51 - and then change the change its
950:53 - attributes
950:55 - okay
950:57 - so we are using this fake data for now
950:59 - so what is the real label in our
951:02 - that
951:04 - iris data set well that's where we're
951:06 - gonna have to configure it
951:09 - so i'm beginning by
951:12 - by by setting up this id and in this
951:15 - dummy example the id would be cars
951:18 - so four equals cars here name equals
951:21 - cars and id equals cars over here
951:24 - but we have not set it up yet
951:26 - and what i'm doing is i'm working on
951:28 - [Music]
951:29 - i'm working on the
951:33 - the accessor so that we can set this up
951:37 - so i'm creating an accessor called id
951:40 - and over in index.js
951:42 - when we set up the menu for x
951:46 - we can we can call dot id and pass in
951:49 - the particular id
951:51 - i'll call it x dash
951:53 - menu
951:56 - for example
951:58 - and the key is that the id for the y
952:01 - menu needs to be different
952:05 - so now this will work because we just
952:06 - set up this
952:08 - accessor so we can call dot id pass in
952:10 - the id
952:12 - that invokes this function here which
952:14 - sets
952:15 - the variable called id to the value
952:18 - oh we need to get rid of this plus
952:20 - because that will that will parse the
952:22 - string to a number which we don't want
952:24 - here
952:26 - and then once that is set
952:28 - uh when it gets invoked it'll set for
952:32 - that id
952:35 - now we need to put the
952:37 - the text of the label
952:40 - which i think i'll call label
952:46 - or how about
952:47 - label text
952:50 - just so it's not confusing
952:54 - we want the text inside of this
952:57 - label to be label text
953:00 - so in our in our rendering code here we
953:02 - can say dot text
953:04 - which sets the inner text
953:07 - of the element
953:08 - to be label text
953:11 - and again we need to set up an accessor
953:15 - where we just change id to label text
953:26 - like this
953:28 - and then over in index.js
953:31 - we can call dot label
953:33 - text
953:35 - for these two different menus and pass
953:37 - in different things so for x it would be
953:39 - x colon i think is what i want it to be
953:42 - and then for y it would be
953:45 - y colon
953:50 - all right and then it shows up like that
953:52 - x is here and y is here
953:55 - excellent so far so good
954:01 - now
954:02 - let's begin
954:04 - working on this
954:05 - this the actual menu part of it
954:08 - which is sort of what all of this has
954:10 - been building up to
954:14 - the general update pattern here
954:18 - or
954:19 - yeah this item potent rendering pattern
954:21 - will be the same but instead of a label
954:24 - element it's going to be a select
954:26 - element
954:28 - and here we want to set name
954:31 - and id to be
954:34 - id which is very similar to this line
954:36 - here where we we're setting four on the
954:39 - label
954:40 - so i'm going to use that same
954:42 - pattern
954:43 - but instead of four
954:46 - it's going to be name
954:49 - and id
954:50 - like this
954:54 - now
954:55 - notice that we have sort of a stub
954:58 - of a menu that doesn't have anything in
955:00 - it
955:01 - so we're getting there
955:05 - now we need to populate these options
955:14 - question sure
955:18 - uh so when we're doing this select tag
955:21 - uh we are passing
955:23 - two attributes name and id
955:25 - and in the example as well they are both
955:27 - set to the same value so
955:29 - is this intentional or is this just
955:32 - specific to this particular example
955:36 - yeah this is intentional
955:38 - and to be honest
955:41 - i haven't dug too deep into
955:45 - each of those things
955:49 - i just sort of blindly copied it from
955:54 - the example that i found
955:56 - but here's another example of an html
955:58 - select element from mdn
956:00 - where they do the same thing where the
956:02 - label is for
956:05 - and that has to match up with the
956:07 - id
956:08 - but i see here that name is different
956:11 - and i do i do not actually fully
956:13 - understand the role of the name
956:15 - attribute on a select
956:18 - so let's see if we can find that name
956:21 - it's used to specify the name of the
956:23 - control
956:25 - i mean
956:28 - this is one of those things where
956:31 - i'm just going to sort of blindly follow
956:33 - the example
956:37 - what about id
956:41 - yeah i'm not really sure
956:43 - but the thing is when you when you click
956:45 - on
956:46 - when you click on the label
956:47 - it gives that menu focus
956:50 - that's why i think it's important that
956:52 - these
956:54 - match but apparently okay only the id
956:58 - needs to match and not the name
957:04 - so could it be like the id is its name
957:06 - is sort of like a class
957:08 - to apply say css styling or something
957:11 - like that
957:13 - could be
957:14 - could be but then i mean if you want to
957:16 - use css you may as well just give it a
957:18 - class and be sort of standard about it
957:20 - right
957:21 - i mean maybe it would work to just leave
957:23 - out the name
957:25 - honestly
957:27 - i'm not sure
957:29 - okay
957:32 - yeah but that four should match the id
957:34 - that's the main thing correct yeah four
957:36 - should match id
957:41 - um i think i think the id should be
957:43 - unique to the whole html document
957:48 - right yeah generally id needs to be
957:49 - unique in the whole document
957:55 - and to get to the bottom of this we can
957:56 - do some experiments like if i click on x
957:59 - see how the menu gets focus
958:03 - and i'm curious if i if i leave out both
958:05 - of these
958:07 - name and id
958:10 - and i click on that label
958:12 - it does not get focus
958:15 - so we know that one of these is
958:16 - important
958:18 - let me try just setting name
958:20 - and see what happens
958:22 - if i just set name and i click on it
958:25 - it does not get focus
958:27 - it does not get focused at all
958:30 - however if i leave out name and i just
958:32 - set id
958:35 - and then i click on the label it does
958:37 - get focus this is the behavior that i'm
958:40 - after this is why this is the whole
958:41 - reason why i'm setting this up
958:44 - so you know maybe i'll just be a little
958:46 - cowboy about it and leave out name
958:48 - because like
958:49 - i like to have this philosophy of like
958:52 - if i don't understand why it's there i'm
958:53 - not going to put it there you know if it
958:55 - doesn't do anything for me there's no
958:57 - need to put it
958:58 - so thanks for asking that question i
959:00 - have always wondered about this actually
959:02 - and now with this little experiment
959:05 - we got to the bottom of it
959:08 - so i'm just going to set id and be done
959:10 - with it
959:12 - yeah
959:13 - but id generally yeah it does need to be
959:15 - unique on the whole page that's why it's
959:17 - important that the id is different for x
959:19 - and y
959:23 - all right great let's continue let's add
959:27 - these options
959:28 - to our menu
959:33 - inside the select we want a bunch of
959:36 - options
959:39 - which is where we can
959:43 - continue this
959:45 - expression here
959:49 - so we're inside of the select net in
959:51 - here we can say dot select all
959:55 - option
959:59 - dot data
960:02 - options which we have not defined yet
960:04 - i'm going to define that
960:07 - dot join
960:08 - option
960:12 - and then
960:15 - each of these options needs to have a
960:17 - value
960:19 - attribute and also some text and the
960:21 - text inside the option
960:23 - element is what you see on the screen
960:25 - the value is more like an internal id
960:28 - that the code uses
960:32 - so let us
960:33 - let us assume that each element of this
960:36 - options array which we're going to
960:38 - define in a minute
960:39 - we'll have
960:41 - a couple things
960:45 - namely
960:48 - a value
960:50 - property
960:51 - which we can use here to set the value
960:53 - attribute
960:54 - like this
960:55 - and also a
961:00 - text
961:01 - attribute
961:03 - so i'm going to say dot text
961:06 - and here we can also pass in a function
961:08 - that takes as input one row
961:10 - and we can return text like that
961:16 - yeah this should be the complete code
961:17 - required to render our set of options
961:20 - now we just need to define options
961:23 - and options is something we want to
961:25 - define from the outside so i'm going to
961:27 - set up
961:28 - an accessor
961:30 - for options so we define the variable at
961:32 - the top
961:34 - i'll use this this template here
961:38 - to create a new accessor for
961:40 - options
961:48 - i'll just replace id with options
961:50 - everywhere here
961:54 - all right and then in index.js
961:57 - we need to pass in
962:00 - our options to both of these
962:09 - and columns is pretty close to options
962:12 - however it only has
962:15 - the actual columns it doesn't have the
962:16 - labels that we want to use i mean we
962:18 - could use the same for both
962:20 - but my preference
962:22 - would be to set up
962:24 - objects for each of these that have
962:26 - labels as well
962:28 - so value
962:29 - will be the original
962:32 - value here
962:35 - and then
962:37 - from here
962:40 - we can say text
962:42 - will be
962:44 - some string and
962:47 - for petal width that should be
962:50 - uppercase petal space
962:53 - width
962:54 - i'll just type these out
962:58 - these are the labels that we're going to
963:00 - see on the screen so they should be nice
963:02 - human readable stuff not this lowercase
963:05 - underscored limited thing which is
963:07 - kind of like
963:08 - uh
963:09 - nerdy you know it's not really
963:11 - not really presentable
963:16 - so petal length and sepal
963:19 - length
963:23 - all right
963:24 - these are actually our options
963:28 - so i'll just rename that
963:32 - variable to options
963:34 - which we can pass into the options
963:36 - accessor for both of these different
963:38 - menus
963:43 - all right now we have
963:45 - options in our menu look at that it
963:47 - worked
963:49 - amazing
963:51 - amazing
963:54 - all right now is the fun part where we
963:56 - get to wire it up and make it all work
963:58 - make it all happen
964:01 - this is where things get a little a
964:03 - little tricky
964:05 - what we want to do
964:09 - i want to be able to call dot on
964:13 - on this thing here
964:14 - which is generally how we add event
964:16 - listeners
964:17 - to things
964:20 - typically the first argument is the the
964:22 - name of the event
964:24 - on change
964:26 - and then the second argument is some
964:27 - callback
964:32 - where it accepts a value
964:34 - and it does something
964:36 - so for now i'll just say
964:39 - console.log
964:41 - value
964:45 - and later on we'll have that actually
964:47 - interact with the scatterplot to change
964:50 - to change x and y but for now let's just
964:52 - put it like this to see if it works
964:56 - and this is where
964:58 - it's kind of a challenging thing to
965:00 - to iterate on this pattern this reusable
965:03 - charts pattern to handle events
965:06 - luckily
965:08 - there are a couple d3
965:10 - packages that do this one of them is d3
965:13 - brush
965:14 - and i like to study the source code of
965:16 - d3 itself
965:18 - to see how to do some of this stuff
965:22 - you'll see that
965:26 - the implementation of d3 brush uses this
965:28 - other package for events called d3
965:31 - dispatch
965:32 - which is what we can use as well this is
965:35 - this is part of d3
965:37 - this is how you can set up components
965:39 - with event listeners
965:41 - so the way that brush does it is first
965:44 - it imports dispatch from d3 dispatch
965:49 - which we're gonna have to do as well
965:51 - so i'll just do that now import dispatch
965:54 - from
965:55 - in our case d3
966:01 - um
966:02 - and let's see where it's used
966:06 - listeners equals dispatch
966:09 - passing in various types
966:11 - of events that could potentially happen
966:14 - let's do that as well
966:17 - i'll say
966:19 - const listeners equals dispatch we're
966:21 - only going to want one type of event
966:23 - which is change
966:25 - so i'm going to put that like that here
966:30 - this is the
966:31 - conduit by which we can emit events and
966:34 - we can event we can listen to these
966:36 - events externally
966:38 - and
966:39 - let's see
966:41 - where is listeners used
966:43 - ah to emit an event we need to use dot
966:46 - call
966:48 - but first we need to expose
966:51 - dot on
966:52 - to the external world
966:54 - and this is the pattern
966:57 - that d3 brush uses
967:02 - it calls listeners.on
967:04 - dot apply
967:07 - listeners and the arguments to this
967:09 - function
967:11 - and if that value
967:13 - is the same as listeners then it returns
967:16 - the
967:17 - the brush
967:18 - otherwise it returns
967:20 - the thing that was returned by those
967:22 - listeners
967:23 - now i'm going to be honest with you i
967:24 - have not fully dissected and grocked
967:27 - everything that's happening here i just
967:29 - know that it works
967:31 - and mike bostock the author of this
967:32 - module must have really thought this
967:34 - through
967:35 - so i'm gonna do something a little
967:37 - uncharacteristic and just copy paste
967:40 - this whole thing
967:41 - without fully understanding it
967:46 - and of course all we have to change
967:49 - brush
967:50 - to my
967:56 - and this effectively exposes the dot on
968:00 - method so that you can add an event
968:02 - listener
968:03 - to this menu
968:05 - so now our code should work
968:08 - it's going to add the event listener
968:11 - the next thing we need to do is actually
968:13 - emit that event
968:15 - from our event listener
968:17 - every time that the menu changes
968:20 - this is where we need to iterate our
968:23 - rendering logic to add an event listener
968:25 - to the select element itself
968:30 - which we can do with dot on
968:34 - change i'm pretty sure
968:38 - and this will take
968:40 - as input
968:41 - an event which is the dom event that
968:44 - that's provided to you from from the dom
968:46 - environment
968:49 - now let's console.log event here just to
968:52 - see if this is working at all
968:56 - i'll open up the console
968:59 - and then if i select
969:01 - something from this menu
969:04 - we get this event
969:06 - it worked
969:10 - alright
969:11 - i just know from experience that you can
969:13 - use event dot target
969:18 - and then unpack
969:21 - the value
969:22 - from this
969:24 - dot value is in here somewhere among all
969:27 - this stuff
969:30 - so event dot target
969:32 - dot value
969:35 - is how you extract
969:38 - the actual thing that you clicked on
969:40 - from this
969:41 - so now if i click on pedal width
969:44 - oops sepal width rather it's it prints
969:47 - out
969:48 - the name of the column
969:50 - simple underscore width like this
969:52 - and if i click uh
969:54 - sepal length it outputs sepal length
969:58 - this is the value that we want to
969:59 - dispatch to our outer
970:01 - event listeners
970:04 - and let me again refer to
970:07 - d3 dispatch
970:10 - there is a method here called
970:12 - um dot call
970:16 - this is the method that you need to use
970:17 - to dispatch events
970:20 - to tell all the event listeners like hey
970:22 - this event actually happened
970:27 - so what we need to do is call type
970:31 - and then
970:33 - the the context object which will
970:36 - resolve to dot this
970:38 - i'm not really a big fan of using this
970:40 - like we don't need to use this
970:41 - necessarily
970:43 - but the third argument is important it's
970:45 - the arguments that get passed
970:48 - so let's see how to how to actually set
970:50 - this up
970:53 - our instance of dispatch is called
970:55 - listeners here
970:58 - so in here we can say listeners.call
971:04 - the first argument will be
971:08 - the type which is the name of the event
971:12 - in our case it's going to be change
971:15 - the second argument
971:18 - is going to be
971:20 - the the context that resolves to this
971:23 - and i'm not i'm not a fan of using that
971:25 - so i'm just going to pass in null
971:28 - to say like this is not this is not a
971:29 - thing that we're doing it's not a thing
971:31 - that we're using
971:32 - but the third argument is important
971:35 - which is going to be event.target.value
971:39 - this will make it so that
971:42 - the na the column that you click on is
971:45 - passed to the outer
971:47 - event listener that we've defined in
971:49 - index.js
971:52 - now let's just say console.log
971:55 - in
971:56 - index.js to be sure this is where we are
972:01 - now
972:02 - let's see did it work
972:05 - if i click on this thing
972:08 - it worked
972:10 - boom
972:14 - so i clicked on it the event
972:16 - sort of got forwarded through this
972:19 - component to the outer
972:20 - index.html
972:22 - and now in index.html we get notified
972:27 - when we when we change this
972:30 - so this is
972:31 - this is the pattern that you can use to
972:34 - introduce events to your components and
972:37 - let me just give another
972:39 - overview of how this is working
972:42 - we import dispatch from d3 which gives
972:44 - us this
972:45 - event emitter construct from d3
972:49 - we instantiate it
972:51 - once
972:52 - when we instantiate the menu it's an
972:54 - instance of dispatch that only has one
972:57 - type of event which i'm calling change
972:59 - we could call it anything but i'm
973:00 - calling it change because that's sort of
973:02 - a standard
973:03 - name for menus
973:05 - we're calling that listeners in here
973:08 - when we render our select
973:11 - element we're adding a
973:14 - change event listener to that element
973:17 - which is a it's a standard um
973:20 - thing that emits events from the dom
973:23 - when we get that event we are extracting
973:26 - the value that was clicked on
973:28 - and then we're using
973:30 - listeners.call to essentially forward
973:33 - that event through our
973:35 - d3 dispatch
973:37 - construct
973:38 - so what this is doing it's essentially
973:40 - emitting a change event
973:43 - and it's it's
973:44 - just passing in
973:47 - uh
973:48 - the value which is the the name of the
973:50 - column that was clicked on
973:53 - so you know we could just pass in the
973:54 - event
973:56 - but i my preference is to
974:00 - to eliminate all that complexity for the
974:02 - external listener
974:03 - so that all you need to do is
974:06 - is use the value that was passed in to
974:09 - this callback here
974:13 - right
974:15 - so i i realize this is a lot
974:18 - this was actually pretty difficult to
974:20 - figure out how to do but i think it's
974:22 - the right pattern i want to pause now
974:23 - and ask you know are there any questions
974:26 - so far
974:30 - yeah the the the null that you did there
974:34 - that's supposed to be this and that
974:38 - what what's that
974:39 - yeah we can dig into that because i it's
974:42 - it's a little sort of a mysterious thing
974:44 - i'll pass in
974:46 - foo
974:47 - here just to demonstrate
974:49 - what this is
974:53 - in our index.js
974:55 - if we use the old school function syntax
974:59 - not the fat arrow notation
975:02 - to define this function
975:04 - then we can say
975:06 - console.log
975:07 - this
975:10 - and
975:13 - i'll get rid of all that other stuff so
975:14 - we can just isolate that
975:18 - i think there's a typo in function
975:21 - oh whoops
975:23 - function
975:27 - now if i select something from that menu
975:32 - foo gets output to the console
975:36 - it's um
975:38 - it goes to like the history of
975:39 - javascript and object-oriented
975:41 - programming
975:42 - you know there's a bunch of patterns
975:44 - throughout history of javascript where
975:46 - people try to make it object oriented
975:49 - and use
975:50 - the keyword this
975:52 - extensively
975:55 - but i think like to me that's sort of a
975:57 - thing of the past like there's no need
975:59 - to use this at all
976:03 - and it's just it's essentially another
976:05 - way of passing another thing into this
976:08 - callback in addition to the value
976:12 - but i personally just don't see i just
976:14 - don't see the
976:16 - the usefulness in it
976:18 - but if if you wanted to do it if you
976:20 - wanted to use this
976:22 - then you could um
976:24 - but it is like uh
976:28 - we have like two combo boxes
976:30 - um does
976:33 - does it
976:34 - somehow
976:36 - chew
976:37 - i don't know identify which
976:40 - combo box are you using
976:42 - could be use it like this or not
976:46 - i mean
976:49 - one thing i could imagine is
976:51 - passing in my
976:54 - here
976:57 - so that it would resolve to the instance
976:59 - of our menu component
977:02 - in the external listener so you could
977:04 - say like i don't know
977:08 - so you could manipulate the menu or
977:11 - or something like that
977:15 - but like i said i don't really get it i
977:16 - don't really get the point of it it's
977:18 - just sort of an inherited thing from
977:21 - from patterns of the past that we've
977:23 - sort of moved away from in minor times
977:27 - um
977:29 - so that's why i don't really like to use
977:30 - it it's just a confusing thing
977:33 - um
977:34 - like in d3 a lot of the time
977:36 - this
977:37 - is referred is is the is the dom node
977:42 - but it just goes to show you in
977:44 - javascript the keyword this could
977:46 - resolve to literally anything it depends
977:48 - on how you invoke the function that's
977:50 - why i just find it confusing to use the
977:52 - keyword this when you're developing
977:54 - software
977:57 - but this is it
978:00 - this is how it's how it could be used
978:02 - you could pass something in as the
978:04 - second argument could be anything and
978:06 - then in the callback
978:08 - if you use the old school function
978:10 - notation then you can use the this
978:12 - keyword and it will resolve to whatever
978:15 - you pass in as the second argument here
978:20 - okay
978:22 - um
978:23 - i'm not familiar with this i'm familiar
978:25 - with that you would listen to an event
978:28 - using the on and natasha
978:30 - a function that will
978:32 - that will be operated on when that event
978:35 - is fired and i think i missed the point
978:37 - why we're doing all this while we're
978:39 - using the d3 dispatch
978:42 - oh we're using d3 dispatch
978:46 - so that
978:47 - we can
978:49 - essentially define our own set of events
978:52 - in this component
978:55 - so we can call dot on change and pass a
978:58 - callback which is sort of the ideal api
979:00 - that i would envision for for adding an
979:03 - event listener
979:05 - and it's it's a way of decoupling
979:08 - the dom like what we're doing when we
979:10 - actually render the thing from the
979:12 - component itself it means
979:14 - we can add this event listener to our
979:17 - menu component
979:19 - and then internally that menu component
979:22 - can choose to fire that event anytime
979:24 - inside so i mean we could we could fire
979:26 - this event any time it just so happens
979:28 - that we're listening to the change event
979:31 - on our select element and then
979:34 - essentially forwarding that event
979:39 - i see so for example suppose you're
979:42 - changing one of the selects but you want
979:44 - to change both of the axes you will be
979:46 - able to fire two events based on
979:51 - a selection and one of your selects
979:55 - if you need to well i mean if you wanted
979:58 - to do that then you could just change
980:00 - what the body of the listener does
980:02 - you could like set
980:04 - one axis
980:06 - and then set
980:08 - another
980:09 - you don't need necessarily two different
980:10 - events for that
980:17 - but let me revert this change because
980:19 - using this is confusing
980:21 - and i prefer the
980:23 - the arrow
980:25 - the fat arrow syntax for functions
980:30 - and then in our menu dot js we just pass
980:33 - null
980:34 - as the second argument
980:38 - so so yeah this is this is just
980:40 - generally the pattern that you you can
980:43 - use
980:44 - if you want to introduce events
980:47 - into your reusable components that you
980:49 - generate with this with this towards
980:51 - reusable charts pattern
980:54 - and the reason why we're using d3
980:57 - dispatch
980:58 - is so that we can control the set of
981:00 - events it's a generalized pattern
981:04 - to be clear
981:06 - where you can you can set it up like
981:08 - this
981:09 - you can set up dot on
981:11 - like this
981:13 - and then
981:14 - you could add any sort of interaction
981:16 - like let's say for example you wanted to
981:18 - make it so that your scatter plot could
981:20 - listen to events when you click on the
981:22 - circles you could use the same pattern
981:24 - to accomplish that
981:26 - so the pattern
981:27 - can be the same
981:29 - it's just that
981:30 - the things
981:32 - that trigger those events could be
981:33 - different depending on whatever your
981:35 - component is
981:36 - i wanted to introduce this general
981:38 - pattern because it's useful in a number
981:41 - of different contexts whenever you want
981:42 - to add interaction to your to your
981:45 - components
981:46 - this just so happens to be a menu
981:48 - component where
981:50 - to know when to trigger the event
981:53 - we need to attach an event listener to
981:55 - the select dom element
981:58 - and then unpack it like this and then we
982:01 - pass it into our our change
982:03 - listeners like this
982:12 - all right
982:13 - now
982:14 - let's make it so that when we select
982:16 - something it actually changes the
982:18 - scatter plot this is the moment we've
982:20 - all been waiting for right we've got all
982:22 - this wiring set up that it
982:24 - you know it dispatches the event and
982:26 - everything
982:27 - this is the this is the moment of truth
982:30 - where we sort of connect these two
982:32 - things together
982:36 - let's look at this code that we had
982:37 - earlier
982:39 - it uses
982:41 - plot.x value to set the accessor
982:46 - and then it uses svg.callplot
982:53 - value in this case is actually
982:56 - the column so i'm going to rename it to
982:58 - column
983:00 - just because that makes more sense
983:02 - and then in this event listener we can
983:04 - say svg.call
983:08 - plot
983:09 - this will cause our scatter plot to
983:11 - re-render
983:12 - but
983:13 - just before we render that i'm going to
983:16 - call
983:16 - dot x value
983:19 - and set that x value accessor to be a
983:22 - brand new function that takes as input
983:25 - one of these rows
983:27 - and it returns d
983:29 - at
983:30 - column
983:32 - column being whatever column we just
983:34 - selected from the menu
983:40 - now
983:41 - if i select something
983:44 - it actually changes
983:52 - yeah this is the
983:54 - this is the moment where it all comes
983:56 - together
983:57 - and we can actually use a menu to select
984:00 - what is being displayed on the x-axis
984:06 - and it ends up pretty small and concise
984:10 - but we're getting the column from
984:12 - the event dispatcher
984:14 - and we're setting the x value accessor
984:17 - of our plot
984:19 - to be a function that accesses that
984:21 - particular column for x
984:23 - and then we're
984:24 - invoking our plot with svg.call
984:30 - and to complete this
984:32 - we can do the same for y
984:35 - but instead of saying
984:37 - x value we set the y value
984:42 - and this is it
984:44 - it's done
984:49 - we can set x
984:51 - and we can say y
984:55 - so now we can explore the data
984:58 - and one beautiful thing about the s the
985:00 - the select elements is you can actually
985:02 - use the arrow keys
985:04 - to quickly navigate between the
985:06 - different options
985:10 - so any questions
985:14 - does
985:15 - the event
985:16 - change on the select element files when
985:18 - you first render the page to make sure
985:21 - that you've got the first selections
985:22 - correct it does not that's actually a
985:26 - really good point
985:29 - when we set up our scatter plot it's
985:31 - defaulting to this
985:33 - x value is
985:34 - petal width and y value is sepal length
985:38 - but when we initialize the menus
985:42 - they're just getting
985:44 - i think the first
985:47 - the first option is what they're
985:48 - defaulting to
985:50 - so that's a good call out that when it
985:52 - loads it's actually not correct
985:54 - it says
985:55 - pedal width and it says pedal width for
985:57 - both x and y
986:03 - yep yep so that's a bug
986:07 - that's a bug ideally we would have
986:10 - something like uh
986:12 - initial option
986:14 - or what have you
986:16 - but just to fix the bug
986:18 - i'm going to initialize x value and y
986:21 - value both to be
986:23 - pedal width
986:25 - now at least it's it's correct and
986:27 - accurate when it loads
986:30 - but yeah good catch
986:32 - good catch
986:34 - there are a number of things we could do
986:35 - here to
986:37 - to like make it so that initially
986:40 - there is some
986:41 - some selection
986:44 - of the menus and the accessors that's
986:46 - initialized correctly
986:48 - but i think i'll i'll leave that as an
986:50 - exercise for the reader
986:56 - but actually here here's what i want to
986:58 - leave you with as an exercise for today
987:03 - handle
987:04 - species
987:08 - this is going to be kind of challenging
987:11 - the value here would be species
987:15 - and the text here would be species
987:22 - this would be the ideal
987:24 - situation where you could select species
987:27 - and it would work but right now it does
987:30 - not work
987:31 - because we're using linear scales
987:34 - we're using linear scales with with a
987:37 - thing that is is not numbers it's
987:39 - different strings
987:41 - and so
987:42 - if you wanted to visualize
987:45 - species
987:48 - you would need to use
987:50 - scale point
987:51 - instead and have the domain be
987:55 - data.map
987:58 - x value like this
988:00 - and so the challenge is
988:03 - set up x and y scales conditionally
988:06 - based on the type
988:08 - of attribute you've selected
988:12 - and and the overall goal here would be
988:15 - to make it so that if you select species
988:17 - for x
988:18 - the x scale would change to be
988:22 - a point scale not a linear scale and the
988:24 - axis should render correctly
988:26 - so that's the challenge
988:28 - for this week
988:38 - all right i think we'll wrap it up any
988:40 - other last questions
988:42 - just say thank you this is great
988:45 - my pleasure
988:49 - yeah this was um
988:51 - i was i was a little nervous going into
988:53 - this because i know it's a lot of stuff
988:55 - to digest um but thank you all for
988:57 - asking questions along the way
989:00 - when when things were not clear
989:03 - and uh it's
989:04 - yeah it's not clear to me
989:07 - what
989:08 - we should see
989:10 - if it's
989:11 - if i get this passive because
989:14 - i i can imagine like uh using different
989:18 - icons
989:19 - for different
989:20 - species oh if i
989:23 - if i get like the x's as a specie um
989:27 - especially i i don't get it because i
989:30 - would have like two species two or three
989:33 - something like this
989:34 - let me just show you real quick
989:38 - it should be scale point
989:41 - which will distribute those three values
989:43 - across
989:44 - x and then the domain
989:47 - would be
989:48 - data.map x value like this so it just
989:51 - gets all the unique values
989:54 - and now if i
989:56 - oh scale point we need to import that
989:59 - from d3
990:04 - if it runs now
990:06 - and if i set x to species
990:09 - it looks like this
990:11 - this is what it should look like
990:13 - okay i got it
990:15 - um oh but yeah actually let's add a
990:18 - little bit of padding
990:21 - because it's all up against the edge
990:23 - there
990:25 - we can say
990:28 - dot padding of like 0.2 maybe
990:33 - and now if we select species
990:36 - it looks like this so this is what it
990:38 - should look like when you select species
990:40 - as x
990:42 - because we're using scale point all the
990:44 - time if we go back to one of these
990:46 - numeric columns it's using a point scale
990:48 - what it's doing is it's it's taking all
990:50 - the unique values that it sees
990:53 - and giving them a location along x which
990:55 - is totally not right it's totally
990:57 - incorrect a point scale should only be
991:00 - used if you have a bunch of discrete
991:02 - values for example three species
991:05 - not if you have quantities
991:09 - so what i envision could be the solution
991:11 - uh is like
991:13 - you have some ternary operator here
991:16 - like if x type
991:19 - is
991:21 - a categoric is
991:24 - if x type is categorical
991:27 - and you can create an accessor for x
991:29 - type
991:30 - then use scale point
991:33 - otherwise use
991:35 - scale linear
991:36 - so there's sort of a sketch
991:38 - of what the solution should be and i'll
991:42 - leave it to you to implement it
991:45 - and i might even implement it uh next
991:47 - episode
991:49 - if yeah the
991:51 - other way
991:52 - could be implemented is a third menu
991:55 - which is then a stratification variable
991:59 - which is says overall and then by
992:02 - the species i think
992:04 - then you would see subgroups
992:06 - for each of those xy plots oh yeah
992:10 - you mean like you'd you'd see like three
992:12 - scatter plots side by side
992:15 - you could do that or if someone wants to
992:17 - dive in and you'd have a menu which
992:20 - would be let's say z it says overall and
992:23 - then each of the species
992:25 - and so then you could select each of
992:27 - each species or overall so right now
992:29 - we're looking at overall
992:30 - yep um and so that would be another way
992:34 - that way you're not confounding that
992:36 - categorical variable with um
992:39 - the actual intent of the scatter plot
992:42 - true
992:43 - yeah good call you could do it a number
992:45 - of ways you could use color
992:47 - or you could fast it into like three
992:49 - different plots that have the different
992:52 - subsets highlighted or filtered to just
992:55 - show them
992:56 - yeah yeah totally there's a number of
992:57 - ways to do it
992:59 - yep good call
993:02 - and we'll be getting into those i hope
993:04 - to add color to the scatter plot in the
993:06 - future
993:09 - and also do all sorts of different like
993:11 - aggregations like you could you could do
993:13 - a box plot all sorts of options many
993:16 - things many things to do
993:20 - is there time for a very quick question
993:22 - on selections and join sure yeah
993:25 - thank you if you go back please to uh
993:28 - where you select for the label for
993:30 - example
993:32 - this one
993:34 - yes thank you there seems to be a
993:35 - pattern where you select all for a
993:38 - special
993:39 - uh uh
993:41 - value and then you join the same value
993:44 - is there a case where you would do it
993:46 - two different things or is it always the
993:48 - same you would select all for one thing
993:51 - and then you're showing for exact that
993:52 - same thing
993:56 - that's a great question
993:58 - this is the case where
994:00 - we're selecting on the tag name
994:04 - that appears here label and this string
994:07 - is a selector you could select by class
994:09 - as well if you want to but this case is
994:11 - simple they're the same because we know
994:13 - for sure that inside of any one of these
994:16 - given
994:18 - divs this is our parent that we're just
994:20 - going to have one
994:21 - label
994:23 - element
994:24 - if we know that there's only going to be
994:26 - one label element in here
994:28 - then then we can use the tag name in the
994:30 - select all
994:32 - however
994:33 - if there's going to be different
994:35 - instances of the same tag name
994:38 - as children of the same parent
994:42 - then we want to have something different
994:44 - which we have here in our scatter plot
994:47 - because
994:49 - we have one group element as a container
994:52 - for the y-axis
994:54 - and we have another group element as the
994:57 - container for the x-axis
994:59 - in this case
995:01 - then we need to somehow differentiate
995:03 - between the two
995:05 - and
995:05 - i think the best way to do that is with
995:07 - classes
995:09 - and this is the case where
995:11 - what we pass into select all will be
995:13 - different than what we pass into dot
995:15 - join
995:16 - what we pass into select all
995:18 - is a selector string that uses dot at
995:21 - the beginning to signify that it's going
995:23 - to look for an element that has that
995:25 - class
995:26 - attribute
995:27 - y-axis
995:29 - so if if there's no y-axis
995:31 - then it's going to create a new group
995:34 - element and the thing you need to pass
995:35 - into dot join
995:37 - is always going to be a tag name not a
995:40 - class you're not allowed to pass a class
995:42 - into dot join
995:44 - so this is a case where they could be
995:46 - different
995:47 - yeah and you need to do this like if you
995:50 - pass g into here
995:52 - and into here then
995:55 - this block is going to res it's going to
995:58 - find the group element that was left
995:59 - over for
996:01 - the y-axis and it's going to use it for
996:03 - the x-axis and you're going to get rid
996:04 - of your y-axis it's going to be a bug
996:07 - and so that this is the case where you
996:09 - need to differentiate
996:11 - between two
996:13 - things that are the same tag name namely
996:15 - a group element in for in this case
996:18 - with classes
996:20 - perfect thank you very much my pleasure
996:23 - welcome everyone to episode 11 of get it
996:26 - right in black and white
996:28 - quantitative and categorical
996:31 - we've got a full house today uh we've
996:34 - got kostov here adil is here eric is
996:36 - here
996:37 - anita
996:38 - and myself
996:40 - welcome everybody
996:43 - how are things
996:46 - going all right
996:48 - right great thank you
996:52 - all as well
996:55 - all is well
996:56 - um
996:58 - yeah
996:59 - the submissions for this week were quite
997:01 - cool
997:02 - um looking forward to step through them
997:05 - and maybe we can bring up some any
997:07 - questions that that have arisen
997:10 - through trying to do this exercise
997:14 - so here we go
997:17 - here's the forum submissions from last
997:19 - week
997:20 - um
997:23 - oh there was a typo in there make
997:26 - the menus work
997:27 - with species
997:29 - that was the goal
997:31 - so let's see what happened
997:33 - um
997:36 - let's see
997:39 - oh can you all see my screen
997:42 - actually
997:43 - i can't see your screen there we go
997:45 - sorry
997:47 - now you should be able to see it
997:49 - oh great yep all right
997:55 - so kostov uh
997:57 - had some had some great um
997:59 - discussion and i was so impressed uh
998:02 - that you were able to use the little
998:04 - snippet embed feature of this hub that's
998:06 - so cool so we can talk about the
998:09 - specific line numbers
998:12 - yeah this was really helpful to have the
998:14 - snippet in the chat as well thanks for
998:16 - the tip on how to do that
998:18 - nice yeah my pleasure i'm happy to see
998:20 - the feature being used it's a feature
998:22 - that's been there for a while we haven't
998:23 - really used it much but it's supe it
998:25 - comes
998:26 - in handy when we're you know asking
998:28 - questions about the code
998:30 - so the question was
998:32 - um
998:33 - you were trying to add the click event
998:34 - listener to the option element
998:37 - yeah
998:39 - see
998:43 - this is actually what i did too the
998:45 - first time i tried to get the menu
998:46 - working
998:47 - and i was also confused as to why it
998:49 - wasn't working
998:50 - but it turns out that
998:53 - what you need to do
998:55 - it turns out that what you need to do is
998:57 - actually add the event on the select
999:00 - element
999:01 - not the inner option elements and once
999:04 - you do that it seems to work
999:08 - but yes yeah did that work out for you
999:10 - custom
999:12 - yes yes that worked out so i was instead
999:14 - of use applying the listener on the
999:17 - options element and applying on the
999:19 - select element
999:21 - yup
999:22 - excellent
999:24 - so yeah i think
999:25 - event.target.value works
999:28 - um and this is a great lead-in to some
999:30 - of the stuff we're going to do today but
999:32 - the follow-on question was okay now that
999:34 - i have you know the column name back
999:37 - from the menu how do you get the text of
999:39 - it like the the label text
999:42 - and it's a great question um
999:45 - there are a couple of different
999:46 - approaches but my preference is to keep
999:50 - uh sort of metadata about the columns in
999:52 - a data structure that you define
999:54 - yourself
999:55 - and this is also something i'd like to
999:57 - do in today's
999:58 - live coding
1000:01 - this way you can associate the value the
1000:04 - label and the type for each of the
1000:06 - columns
1000:07 - which lets you then distinguish okay
1000:10 - species is categorical
1000:12 - and you could do this by introspecting
1000:14 - on the data like checking the type
1000:18 - but i like to you know type it out
1000:20 - explicitly
1000:22 - so that we have this data structure and
1000:24 - to be clear you can generate this data
1000:25 - structure by looking at the first row of
1000:28 - the data
1000:30 - so it's a nice way to decouple those two
1000:31 - different activities to have an
1000:33 - intermediate data structure like this
1000:35 - and then
1000:36 - to answer the question you could look up
1000:38 - the text by constructing a map which is
1000:41 - a data structure that's essentially a
1000:43 - dictionary looking up key value pairs
1000:47 - so yeah
1000:49 - um yeah this was really nice i
1000:52 - really like the way you structured your
1000:54 - metadata as a separate variable
1000:57 - and looking into it has also found a
1000:59 - subtle difference like when you said map
1001:01 - i think previously we also used
1001:03 - the map function which had a lowercase m
1001:07 - right while
1001:09 - this map this had this uppercase m
1001:13 - for sure
1001:15 - so this uppercase m map that's the
1001:17 - dictionary and the lowercase one is like
1001:19 - uh a functional functional programming
1001:22 - construct is that right exactly that's
1001:25 - exactly right and i can see how it's
1001:27 - confusing because they have the same
1001:29 - name
1001:31 - but yeah map
1001:33 - is a data structure built in from es6
1001:36 - from i think it's from the introduction
1001:38 - of es6 so it's a fairly new data
1001:40 - structure
1001:44 - if i want to know about it i just typed
1001:46 - up javascript map mdn which is the best
1001:49 - place to look for documentation so this
1001:51 - page here tells you all about uppercase
1001:53 - m map what it does how to use it
1001:57 - so it's
1001:58 - it's different from regular objects
1002:02 - in a number of ways
1002:04 - but essentially it's the same and it has
1002:05 - some nice methods on it
1002:12 - hey felipe is here welcome felipe
1002:22 - but yeah map you can create a new thing
1002:25 - you can set
1002:26 - keys and values for that thing
1002:29 - and then you can check does it have a
1002:30 - certain key all of this stuff is
1002:32 - available on maps
1002:34 - whereas
1002:36 - javascript
1002:38 - array map
1002:41 - is a method
1002:42 - on arrays
1002:44 - which you can find out more about here
1002:46 - it's it's indeed a functional
1002:48 - programming construct where on an array
1002:50 - there's a method called map you can pass
1002:52 - in a function that takes as input one of
1002:54 - the elements of the array and returns
1002:55 - something and then you get a new array
1002:57 - of just the returned values
1002:59 - so yeah that's the distinction between
1003:01 - lowercase m map
1003:03 - and uppercase m
1003:05 - map here
1003:08 - and i think we'll we'll end up using
1003:10 - this data structure in today's live
1003:11 - coding as well
1003:14 - great thanks this was really helpful
1003:17 - nice
1003:22 - so yeah here's the uh the submission oh
1003:25 - i like the styling on the menus very
1003:26 - nice
1003:28 - and it works
1003:30 - fantastic
1003:33 - beautiful beautiful
1003:34 - very nice work
1003:38 - awesome let me just take a quick look
1003:40 - how it's done
1003:47 - nice see here's the trigger
1003:50 - nice work
1003:55 - so it says
1004:04 - if x name
1004:06 - is not species
1004:07 - so for any others column except for
1004:10 - species we use scale in here just like
1004:12 - we did before
1004:13 - but otherwise
1004:16 - use a point scale and set the domain to
1004:19 - data.map x value which isolates all the
1004:21 - unique values and then
1004:24 - point scale spreads them across
1004:26 - the visible space
1004:27 - so that's why this works
1004:30 - nice job
1004:36 - let's see what else do we have
1004:43 - well assad
1004:48 - also took a stab at this
1004:56 - and
1004:57 - went a little bit beyond
1004:59 - as well
1005:01 - this is quite impressive
1005:03 - so we got sepal length petal width using
1005:06 - linear scales
1005:07 - species works using the point scale and
1005:10 - nice job adding the padding see it's not
1005:12 - all the way down to the bottom
1005:14 - and then also
1005:18 - added an option to use a square
1005:20 - root scale
1005:23 - this is amazing
1005:25 - or a power scale what is this
1005:31 - so yeah different types of scales
1005:35 - in use here it's brilliant
1005:37 - so if we want to see what the scale does
1005:39 - we can say okay pedal width linear and
1005:42 - then petal width
1005:44 - square
1005:46 - you can see it's a square root
1005:49 - relationship
1005:52 - if i remember my high school math is
1005:54 - this a parabola
1005:56 - or maybe not
1005:57 - i don't know
1005:59 - but yeah very nice work
1006:01 - i have question about this one sure
1006:04 - are there circles on top of
1006:06 - like many circles in one place
1006:08 - it looks like that yeah it looks like
1006:10 - there is
1006:12 - yep
1006:13 - you could see this the edge on this one
1006:15 - is is sort of soft i don't know if it
1006:17 - comes through in the stream
1006:19 - but the edge on this one is really rough
1006:21 - which indicates that there's a bunch of
1006:23 - circles in the exact same spot
1006:27 - yeah and this makes sense because
1006:29 - there may be
1006:30 - a bunch of data points
1006:33 - that share the same
1006:35 - value
1006:42 - what's the point of square skill
1006:45 - ah
1006:46 - great question i think here is just an
1006:47 - experiment so there's not really any any
1006:51 - point per se except to figure out how to
1006:53 - do it however
1006:54 - the the place where square root scales
1006:56 - come in handy is defining the radius of
1006:59 - circles based on data
1007:01 - such that the area of the circle is
1007:03 - equal to
1007:05 - the quantity in the data
1007:08 - yeah i think we'll get that we'll get to
1007:10 - using it like that some in some future
1007:12 - stream where we use size but that's i
1007:14 - think the main use case for a square
1007:16 - root scale
1007:19 - yeah and then there's a log scale
1007:21 - which is not here but that's useful when
1007:24 - the data follows a power law
1007:26 - distribution
1007:27 - and i think we'll use we'll get into
1007:29 - that again also in the future
1007:32 - but yeah great work here from uh
1007:35 - whale assad let's see how he did this
1007:39 - just adding a type
1007:43 - property to the various columns
1007:46 - very nice
1007:47 - band squale square power
1007:49 - and then in the scatter plot
1007:54 - hook into that value
1007:56 - and he even made a separate function
1007:57 - called get scale which is very nice very
1007:59 - nice
1008:00 - refactoring so if it's
1008:03 - the code is very readable if it's linear
1008:05 - then use scale linear
1008:07 - if it's log then use log
1008:09 - if it's square then use square root
1008:13 - otherwise use power scales
1008:15 - or band scales
1008:19 - so yeah great work
1008:25 - let's see what else
1008:29 - yeah there was some interesting
1008:30 - discussion
1008:33 - using the options array approach works
1008:36 - oh eric has one look at this eric's here
1008:38 - with us right now
1008:40 - let's see what is going on here
1008:42 - oh my gosh they're blue
1008:45 - that's awesome
1008:47 - and it does filtering
1008:50 - look at that oh this is brilliant
1008:53 - brilliant so it filters by the species
1008:56 - you know each particular species
1008:58 - eric you want to talk a little bit about
1009:00 - um
1009:01 - your experience with this
1009:04 - sure yeah i uh
1009:06 - i guess misinterpreted the assignment so
1009:08 - i was just wanting to look at
1009:13 - all the data
1009:15 - stratified by species
1009:37 - this is awesome
1009:49 - oh nice
1010:04 - yep
1010:06 - oh yeah flexbox can be um
1010:09 - kind of tricky and the way i did it last
1010:11 - time was sort of a
1010:12 - shortcut in a way to just overlay them
1010:15 - on the top but yeah when you need more
1010:16 - complex layout you need different
1010:18 - different tools css grid is an amazing
1010:20 - tool to use
1010:28 - nice
1010:30 - that's awesome
1010:33 - and i see that the colors change as well
1010:35 - now that they're now they're all blue
1010:36 - but if you go to one of these
1010:38 - it's it's red
1010:42 - nice nice
1010:46 - yeah this is awesome
1010:50 - um
1010:52 - so yeah let's just take a look at
1010:55 - how it was done
1011:01 - options
1011:07 - so we've got all
1011:08 - setosa versus color and virginica which
1011:11 - is this menu here
1011:13 - and then that's passed in
1011:16 - to the scatter plot
1011:23 - and then
1011:26 - here's where the filtering happens
1011:30 - nice
1011:32 - so this is yeah this is great it uses
1011:34 - the dot filter method on arrays and if
1011:36 - if species equals
1011:38 - the z value of d
1011:41 - which is passed in through these
1011:42 - accessors
1011:45 - then include it
1011:51 - very cool very cool
1011:58 - and i like how you split it out into
1011:59 - functions with dot call that's a nice
1012:02 - approach
1012:04 - very nice
1012:18 - yeah it is kind of crazy yeah that's the
1012:20 - crazy thing about javascript
1012:22 - um and one of the reasons why i love it
1012:24 - because it's
1012:25 - it's got elements of functional
1012:27 - programming and it's got elements of
1012:30 - object-oriented programming
1012:32 - and you can make it yeah you just showed
1012:33 - that map
1012:35 - yep slower and uppercase and like what
1012:40 - yep it's it's a great playground to be
1012:42 - in there's tons of um
1012:44 - tools in the toolbox
1012:45 - so to speak
1012:48 - yep
1012:49 - yeah it's getting complicated yeah it is
1012:53 - it is it's a journey it's a journey of
1012:55 - learning new things using them
1012:58 - and this functional and object oriented
1013:01 - programming is kind of confusing really
1013:03 - and you don't know where which one
1013:05 - starts and which one is
1013:07 - right
1013:09 - yeah and the other thing that's also
1013:11 - interesting is how i don't know if this
1013:13 - is a style
1013:25 - right
1013:27 - yeah it does get confusing
1013:29 - when a variable has the same name as a
1013:31 - function or property has the same name
1013:33 - as a function somewhere else
1013:36 - yeah
1013:38 - yeah it's totally a trade-off
1013:40 - picking variable names
1013:44 - but um
1013:46 - the one piece of feedback
1013:48 - i would i would have for this
1013:52 - in terms of like visualization design
1013:55 - is that when you when you switch between
1013:58 - setosa and versacolor
1014:00 - the dots animate
1014:03 - and that's a cool effect
1014:06 - however it communicates to the viewer
1014:09 - that
1014:11 - each dot
1014:13 - is
1014:16 - like the same
1014:18 - in a sense
1014:20 - you know what i mean it's like when a
1014:22 - dot
1014:23 - when a dot moves across the screen it
1014:25 - makes sense if it's the same exact the
1014:27 - same iris flower as it was before like
1014:31 - this kind of animation makes perfect
1014:33 - sense because when the circle moves
1014:36 - its identity remains unchanged it's the
1014:38 - same flower that it was however when
1014:40 - when this animation happens
1014:43 - it's actually
1014:44 - kind of misleading because the flower
1014:47 - is a different flower that's represented
1014:49 - by the same circle as it moves across
1014:50 - the screen you know what i mean
1014:58 - well
1014:58 - i think it's just a matter of
1015:02 - you know noticing that that's an issue
1015:03 - and we can go in and fix it and here's
1015:06 - how
1015:08 - i'll fork this so i can play around
1015:11 - and
1015:12 - i don't think i ever even talked about
1015:14 - this but because we didn't need it but
1015:17 - there's a second argument that you can
1015:19 - pass into dot data
1015:21 - which is a function that defines the
1015:23 - identity
1015:25 - of the thing
1015:27 - and d3's internals will use that
1015:31 - to distinguish between
1015:34 - um
1015:37 - you know things that are the same and
1015:39 - things that are different
1015:41 - so here's here's what we can do we need
1015:44 - some some kind of identity
1015:48 - across the different iris flowers
1015:52 - first actually before we do anything
1015:54 - else
1015:55 - so here's here's what i propose when we
1015:58 - load in the data
1016:00 - there is no
1016:02 - column that is a unique identifier for
1016:04 - each individual flower
1016:06 - it's just not there
1016:07 - but we can easily make one
1016:10 - by saying d dot id equals
1016:15 - uh you know the simplest way to do it is
1016:17 - just to have an id counter
1016:21 - so like id counter
1016:25 - plus plus
1016:29 - and oftentimes there is something in the
1016:31 - data
1016:32 - that is a unique id but since there's
1016:34 - not here we can just use the index in
1016:36 - the table
1016:38 - as the
1016:38 - id and so
1016:42 - just to see what this does
1016:47 - it gives us
1016:57 - oh sorry d dot id i had a typo
1017:03 - wait why is that not working
1017:16 - somehow it's broken did i break it
1017:24 - i didn't really do anything
1017:28 - huh
1017:45 - i don't know
1017:46 - i'm having um what i like to call a
1017:48 - twilight zone moment or i have no idea
1017:50 - what's going on
1017:52 - so i think i'm just going to delete this
1017:54 - and try again
1018:04 - i'm getting a little
1018:06 - sidetracked
1018:15 - here it is
1018:22 - the original one is not loading now
1018:24 - which is weird
1018:36 - huh
1018:45 - i don't know maybe there's some outage
1018:47 - or oh there it comes there it is
1018:50 - maybe the data was just taking forever
1018:52 - to load or something
1018:57 - i don't know
1018:58 - let me try again i want to do this
1019:01 - because it's a very useful thing to know
1019:03 - okay now it's working it must have been
1019:05 - like a data
1019:06 - latency issue or network problem
1019:10 - so
1019:13 - id counter is zero
1019:16 - d dot id
1019:18 - is id counter
1019:21 - plus plus
1019:25 - console.log d just to see what we're
1019:26 - dealing with here
1019:29 - it should be integers
1019:33 - see this one id 3133
1019:35 - id 134 the point is that it's unique to
1019:38 - each of these different iris flowers
1019:42 - so now that we have that
1019:47 - um and also we might actually get past i
1019:50 - as a second argument to parse rho
1019:54 - i don't remember but if we do then we
1019:56 - don't need to do the id counter oh we do
1019:58 - check that out
1019:59 - that's nice
1020:00 - that's even easier we don't need to do
1020:02 - the incrementing ourselves
1020:06 - so d dot id equals i
1020:08 - done we're just going to have integers
1020:10 - as the ids now in the scatter plot
1020:15 - when we do the data binding we can pass
1020:19 - as a second argument a function that
1020:21 - takes as input one row and returns d dot
1020:24 - id
1020:27 - and hopefully with that one single
1020:29 - change it should actually solve the
1020:32 - visualization design issue that we were
1020:35 - talking about
1020:40 - okay it sort of does there's there's one
1020:45 - there's one that's not behaving
1020:47 - correctly
1020:50 - but it's getting close
1020:54 - and this is this is more
1020:56 - accurate in a sense more honest in terms
1020:58 - of what's happening
1021:00 - although there's
1021:06 - well i mean i've seen this sort of thing
1021:08 - so many times that like oh it's sort of
1021:10 - muscle memory
1021:11 - at this point i don't know why that one
1021:13 - is misbehaving though
1021:28 - i'm getting not a number from somewhere
1021:38 - is it
1021:41 - huh
1021:49 - let's try console.log
1021:51 - d dot id just to see what it is
1021:59 - yeah so these are coming from our
1022:01 - index.js there's not a number coming
1022:03 - from some other console.log somewhere
1022:05 - else
1022:07 - but i think the ids are good
1022:13 - maybe
1022:17 - maybe they need to be strings or
1022:19 - something
1022:24 - so if we do empty string plus i they're
1022:26 - going to be strings now
1022:28 - maybe 0 is coming back falsey and that's
1022:30 - causing problems no
1022:32 - that doesn't do it
1022:46 - the problem is that there's a little
1022:48 - there's one of these red ones
1022:57 - yeah good idea
1023:04 - you know this is buggy too because now
1023:06 - it they should animate
1023:09 - they should animate smoothly
1023:17 - yeah it sure does it looks like they're
1023:20 - they're exiting and then entering again
1023:21 - which is not supposed to happen
1023:41 - good idea
1023:49 - ah
1023:50 - it does not
1023:56 - yeah see we're doing this
1023:58 - i think i know what's going on
1024:01 - we are missing the id in this
1024:03 - transformation here
1024:06 - so good idea to look at this place
1024:10 - we can just solve it by adding the id
1024:12 - to the resulting objects and this makes
1024:15 - sense i mean it decouples the
1024:17 - the data transformation from the
1024:18 - rendering which is good but it adds a
1024:20 - place where we can forget something
1024:22 - let's see if it works now
1024:27 - it still exits all the time
1024:30 - which is not
1024:33 - what we would want oh there's something
1024:34 - else marks overall
1024:38 - oh
1024:39 - there's different paths that it takes
1024:42 - so let me add it there too
1024:48 - now this is working as i would expect
1024:50 - so when you do it like that
1024:54 - the right thing happens now
1024:56 - the right thing happens as well see
1024:59 - okay
1025:02 - great this gets to the bottom of it and
1025:04 - i think this is like the you know
1025:05 - correct
1025:07 - quote in quotes correct design
1025:10 - where if you change these columns it
1025:13 - makes sense that because the identity of
1025:15 - the dot correlates to that iris flower
1025:17 - but then when you do the filtering
1025:20 - they don't animate anymore they sort of
1025:22 - disappear and then reappear
1025:24 - and if you wanted to be complete about
1025:26 - it
1025:27 - you would um
1025:29 - make it so that the exit
1025:32 - mirrors the enter in terms of the
1025:34 - animation so instead of animating in it
1025:37 - would animate back to zero radius and
1025:39 - then disappear that i think would be the
1025:40 - ultimate best solution
1025:42 - but this is
1025:44 - this is pretty awesome as it stands
1025:48 - so i think i'll leave that as an
1025:50 - exercise for you eric if you want to
1025:51 - take that out yeah yeah this this is
1025:54 - great learning so thank you awesome
1025:56 - awesome yeah my pleasure
1025:59 - and the way to do it just a little
1026:01 - teaser would be to
1026:04 - um
1026:05 - put put the transition
1026:08 - on the exit
1026:09 - okay and have something like grow radius
1026:11 - but
1026:12 - oh here's actually how you would do it
1026:14 - dot transition
1026:17 - t
1026:21 - dot call
1026:22 - shrink radius
1026:25 - something like that
1026:27 - oh cool
1026:29 - yeah can i have a quick question here
1026:31 - sure
1026:32 - when you have things entering and
1026:34 - exiting at the same time which runs
1026:37 - first in terms of animation
1026:40 - well they that's the elegance of using
1026:44 - the same transition they run at the
1026:45 - exact same time
1026:51 - i see
1026:52 - and what would you do if you want
1026:55 - things to exit first and then enter
1026:57 - again
1026:59 - well you would have to
1027:01 - invoke the entire code multiple times
1027:04 - with different data
1027:07 - that's the only way to trigger things
1027:09 - that happen at different times or now
1027:11 - that i think of it i mean
1027:13 - you could add a delay
1027:15 - to the whole thing so so that the
1027:16 - transition is delayed by a fixed amount
1027:18 - of time if you wanted to yes i see so if
1027:22 - i want them to exit first i would add a
1027:24 - delay to the enter so they would exit
1027:27 - and that would that would be enough time
1027:28 - for them to exit and then enter will
1027:30 - will be involved oh i see what you're
1027:32 - trying to do yeah yeah
1027:36 - and it almost pains me not to do it
1027:38 - right now because we're so close
1027:40 - and we're discussing this let me just
1027:42 - let me just do it real quick
1027:43 - thank you
1027:46 - so on exit
1027:49 - we use exit.call so that we can use the
1027:51 - transitions
1027:53 - and then
1027:59 - we can call
1028:01 - shrink
1028:04 - radius and then
1028:07 - dot remove
1028:10 - calling the dot remove on the transition
1028:12 - will remove the dom elements only after
1028:14 - the transition finishes
1028:16 - which is something that only d3 does
1028:18 - really well if you try to do transitions
1028:20 - with other libraries like react it's
1028:21 - such a pain to do this sort of thing
1028:24 - but d3 does it very well now we just
1028:26 - need to implement shrink radius
1028:28 - which should be pretty easy
1028:34 - just copy grow radius and make it
1028:36 - transition
1028:37 - r to zero
1028:39 - like this
1028:42 - let's see if it works
1028:51 - it does but the delay is problematic
1028:55 - the delay is like too much
1028:58 - i don't think we need any delay at all
1029:00 - as a matter of fact
1029:03 - the delay is the fancy thing for moving
1029:05 - x and y but for exiting and entering i
1029:08 - don't think we need any delay at all
1029:19 - hmm not sure what's happening here
1029:37 - is shrink radius taking the enter
1029:39 - selection
1029:40 - as an input
1029:44 - shrink radius is just taking
1029:48 - well it's it's called enter here
1029:51 - but the name doesn't matter
1029:54 - oh wait a minute
1029:55 - it's adding the transition here
1030:02 - oh well if it's if it's adding the
1030:04 - transition there we don't need to add
1030:05 - the transition here as well
1030:10 - and we don't even need this call
1030:12 - so
1030:14 - here's what we can do just exit dot call
1030:16 - shrink radius
1030:18 - easy peasy
1030:19 - let's see if that works
1030:28 - oh i think i think we're not making the
1030:30 - radius um
1030:32 - we're not growing the radius
1030:36 - on update
1030:42 - and shrink radius really should remove
1030:46 - the elements as well
1030:50 - let's see if that works
1030:54 - yeah there we go
1030:55 - that's how it should be
1031:00 - yeah this is exactly what i was hoping
1031:02 - for
1031:10 - okay cool
1031:12 - problem solved
1031:14 - and it was a interesting journey to get
1031:16 - there
1031:22 - great
1031:26 - so
1031:28 - i think now what i'd like to do is
1031:31 - you know present my take
1031:33 - on how we would
1031:35 - implement this
1031:37 - just so that every all the pieces are
1031:39 - very clear
1031:42 - i was just noticing that
1031:45 - the problem we were just working on is
1031:46 - not fully done i'm not going to solve it
1031:48 - now
1031:49 - but just just to show you
1031:52 - if you
1031:53 - wait for the transition to finish
1031:56 - before you change the menu
1031:59 - everything works perfectly
1032:02 - however
1032:03 - if you change the menu twice
1032:06 - before
1032:08 - the transition ends or rather if you
1032:09 - change it three times
1032:12 - before the transition ends
1032:16 - you can end up in a state like this
1032:18 - that's not correct
1032:20 - and i think what's happening here
1032:22 - is that the exit transition is starting
1032:27 - and then
1032:30 - you
1032:31 - change the selection which causes the
1032:32 - filtering to change and everything to
1032:34 - update but that exit transition is still
1032:37 - going on and when it finishes
1032:39 - it removes those dom elements
1032:42 - and so to really solve this um eric if
1032:44 - you wanted to take this on as a
1032:46 - challenge because this started from your
1032:47 - work
1032:49 - if you really wanted to solve this the
1032:51 - thing to do would be to cancel
1032:53 - the exit transition
1032:56 - whenever
1032:57 - you render the data
1032:58 - again which may be a little tricky to
1033:01 - figure out but that would be the
1033:02 - ultimate solution okay
1033:04 - give it a go yeah give it a go
1033:06 - see if you can uh
1033:08 - make it happen because this is i'm glad
1033:10 - we got to this point though because this
1033:11 - this reveals some of the trickiest
1033:13 - aspects
1033:14 - of working with d3
1033:16 - and this would be a good solution a good
1033:18 - uh
1033:19 - a good little puzzle to solve to really
1033:21 - solidify the knowledge of everything
1033:24 - great thanks yeah so good luck good luck
1033:27 - with that
1033:36 - okay let's dig into today's
1033:39 - live coding
1033:41 - by handling species using scale point
1033:44 - and manually adding metadata about the
1033:47 - columns
1033:48 - like type for example so column name and
1033:51 - type that's what i'm thinking of as
1033:53 - metadata
1034:10 - before we dig in though
1034:12 - i want to talk about these terms
1034:14 - quantitative
1034:16 - and categorical
1034:19 - these are terms that
1034:21 - i got from tamara munsner's book tamar
1034:24 - munsner's textbook called visualization
1034:27 - analysis and design
1034:29 - which is a great book really great book
1034:31 - highly recommend
1034:33 - and it's used
1034:35 - in a lot of
1034:36 - classrooms you know people teaching
1034:38 - about data visualization use this as the
1034:40 - textbook i use it for example when i
1034:42 - teach
1034:43 - every fall
1034:45 - and
1034:46 - that book defines
1034:49 - terminology
1034:50 - that can be used across
1034:52 - you know discussions of visualization
1034:54 - design
1034:55 - so on and so forth i mean there's a lot
1034:57 - of different terms that have been used
1034:59 - over the years
1035:02 - and she sort of defines it like okay
1035:03 - these are the terms i'm going to use so
1035:05 - i'm going with her set of terms to
1035:06 - define
1035:08 - different types of
1035:10 - attributes in the data
1035:12 - and the term attribute that's another
1035:14 - term that means column some people refer
1035:17 - to them as columns i often refer to
1035:19 - columns as columns because that's what
1035:21 - they are to me
1035:22 - but in a data table sense columns can
1035:25 - also be called as attributes
1035:28 - and attributes have types
1035:30 - much like variables have types
1035:33 - and the types of attributes that we're
1035:34 - dealing with here
1035:36 - when we come up against this problem of
1035:38 - handling species in our drop down menu
1035:42 - is categorical
1035:44 - categorical attributes have different
1035:48 - type things
1035:50 - in them meaning not numbers
1035:53 - they are not numbers they're strings or
1035:56 - identifiers
1035:57 - for for things that have identity so the
1036:01 - identity of
1036:02 - the values in a categorical column
1036:05 - categorical attribute are different
1036:08 - and in the case of this iris data set
1036:10 - we've got a bunch of quantitative
1036:12 - columns that are numbers that you see
1036:14 - here on the left
1036:17 - but then we've got one column that is
1036:19 - special and needs to be treated
1036:21 - differently than all of those other
1036:24 - columns that are numbers namely species
1036:27 - and the reason why it's fundamentally
1036:29 - different is because it's not numbers
1036:31 - it's strings it's a different species of
1036:33 - a virus
1036:35 - setosa is one species versus color is
1036:38 - another
1036:39 - and there's one more
1036:41 - but the point is that there are strings
1036:42 - they're different things they need to be
1036:45 - mapped to the visual
1036:48 - space
1036:50 - in a fundamentally different way
1036:54 - and so that's what we'll
1036:56 - get into here
1036:58 - any questions so far
1037:02 - about this
1037:20 - all right i think i'll move on
1037:25 - okay
1037:26 - so now we'll actually handle species
1037:30 - and we're going to use scale point which
1037:32 - is kind of like scale linear
1037:34 - but it deals with
1037:36 - categorical attributes you can give it
1037:38 - different strings and it will it will
1037:40 - spread the unique values across the
1037:43 - space
1037:44 - which is how we want to do it
1037:52 - all right so let's dig in
1037:55 - the place where i'm going to start from
1037:58 - is
1038:08 - animated scatter plot with menus this is
1038:10 - what we created last week
1038:12 - and just to give a quick recap of what
1038:15 - we did we added these menus
1038:18 - with these animated transitions so you
1038:20 - can change x and y to be
1038:23 - the various
1038:25 - quantitative attributes of the iris data
1038:27 - set but when you select species
1038:30 - it just breaks it crashes
1038:33 - and the way we did this is we introduced
1038:34 - a menu component which is
1038:36 - using the d3 reusable charts pattern but
1038:39 - for a menu
1038:41 - added event
1038:42 - you know event infrastructure
1038:44 - to that thing
1038:45 - and then in index.js
1038:49 - we add a a listener for the change event
1038:52 - on these menus
1038:54 - which will
1038:57 - change the x value accessor of the
1038:59 - scatter plot instance and re-render it
1039:02 - with svg.col
1039:05 - and in scatterplot whenever it gets
1039:06 - rendered it redefines these
1039:10 - these scales x and y scale
1039:14 - and it's here
1039:17 - in the definition of the scale
1039:20 - that we're going to have to make some
1039:21 - adjustments
1039:28 - so to start i'm going to fork this one
1039:35 - i'll call it scatter plot
1039:38 - with menus
1039:41 - that handles
1039:44 - uh um
1039:46 - let me come up with a nice title
1039:50 - including species
1039:52 - thank you
1039:54 - that's perfect
1039:58 - perfect thank you
1040:04 - okay
1040:05 - so
1040:06 - what we want to have happen is that when
1040:08 - you select species here in this menu
1040:11 - and for y for example it should spread
1040:14 - out across
1040:15 - the y
1040:17 - coordinates the different values
1040:21 - but it doesn't do that right now
1040:24 - let's see
1040:25 - where we can jump in to solve this issue
1040:35 - to me it makes sense just to start
1040:38 - scratch that
1040:39 - to me it makes the most sense to start
1040:43 - here at the definition of these options
1040:47 - for the menus
1040:49 - and what this does here is
1040:51 - it defines the entries of our menu
1040:54 - essentially
1040:55 - that's the id for the thing this is the
1040:58 - text
1040:59 - the label the display name that appears
1041:01 - in the menu
1041:03 - i think the the most sensible approach
1041:07 - would be to introduce
1041:08 - another
1041:10 - property
1041:12 - on these objects called type
1041:17 - and the type of the species column
1041:21 - i would say using tomorrow munzener's
1041:23 - terminology is
1041:24 - categorical
1041:30 - and the type for all the others
1041:34 - is quantitative
1041:39 - so just for completeness sake
1041:42 - i'm gonna fill all those out
1041:45 - run prettier
1041:46 - yeah unfortunately because it gets to be
1041:48 - long
1041:50 - i think that's okay it's explicit
1041:53 - so now
1041:55 - we know
1041:56 - when we select a given option what type
1041:58 - it is
1041:59 - which is information that we need in
1042:01 - order to change the type of the scale
1042:03 - that we use
1042:07 - so now that we've got this in hand
1042:13 - we need to tell the scatter plot
1042:17 - you know
1042:19 - what type of column it's dealing with
1042:23 - we could do that in a number of ways but
1042:25 - i think this the most straightforward
1042:27 - way
1042:29 - would be to add another
1042:32 - accessor you know at one of these getter
1042:34 - setter
1042:35 - functions on the plot
1042:37 - called x type
1042:40 - because we already have x value it's
1042:41 - working perfectly fine we don't want to
1042:43 - over complicate that
1042:45 - um
1042:46 - but i think we can add another one
1042:48 - called x type and the invocation would
1042:50 - be something like
1042:52 - dot x type
1042:57 - and then we need to figure out what the
1042:59 - type is
1043:00 - for the column
1043:03 - so we have column which is you know the
1043:06 - name of the column
1043:08 - and we can use it to construct the
1043:10 - accessor like this
1043:11 - but we also need to use it to get
1043:14 - the type
1043:15 - somehow
1043:16 - i'm not sure how
1043:18 - and because i'm not sure how you know
1043:20 - this is a perfect place to introduce a
1043:23 - level of indirection i'm going to i'm
1043:25 - going to call a function called get type
1043:30 - just just one question i was trying to
1043:33 - do this
1043:34 - uh at home but
1043:35 - i was not able what i tried uh uh first
1043:39 - i
1043:40 - rewrote the get data
1043:42 - i put outside in a model
1043:45 - and and then i try to get the json
1043:48 - that's inside your
1043:50 - [Music]
1043:51 - your github
1043:53 - together with the data
1043:56 - there is in the site where i got the
1043:58 - data there is a json there
1044:00 - that has all these options already
1044:04 - the type
1044:04 - [Music]
1044:08 - really
1044:09 - yeah so the gist in here
1044:13 - yes and i try to use
1044:15 - the json
1044:16 - uh but i'm not able to
1044:19 - get the data out of the scope
1044:23 - when i try to
1044:24 - to put this in a in an array or in a
1044:26 - dictionary uh i lose i lose the data
1044:30 - inside the loop i have the data
1044:33 - right when i get outside of the loop the
1044:35 - they don't vanish so huh
1044:38 - how could we use this
1044:40 - so we don't have to hard code like uh
1044:43 - the type string or the type number right
1044:46 - from from this
1044:48 - right and it's so funny i actually
1044:51 - forgot that i put this here
1044:54 - um
1044:55 - let's see when did i make this
1044:57 - this was like
1044:59 - years ago that i put this up here
1045:02 - and at that time as well
1045:04 - i was thinking about metadata for
1045:07 - columns because it makes sense to be
1045:09 - able to
1045:11 - manipulate the metadata along with the
1045:14 - data set
1045:16 - which is totally possible so i mean we
1045:18 - can use the raw url here
1045:21 - and we could potentially use
1045:23 - d3.json to fetch this file
1045:26 - and use it
1045:29 - but uh for simplicity's sake i'm just
1045:31 - gonna you know paste it into the code
1045:34 - but
1045:35 - because we have this data structure you
1045:36 - know uh we could potentially do it like
1045:38 - that
1045:40 - and years ago i was thinking about like
1045:42 - oh i'm going to develop a data
1045:43 - publishing format where it's supposed to
1045:45 - be a csv file and a little json file
1045:48 - like this that describes each of the
1045:49 - columns
1045:50 - don't give up on that right
1045:52 - [Laughter]
1045:54 - it's not a bad idea i mean it would be
1045:56 - super useful
1045:58 - to be able to have like a standard that
1046:00 - you could just plug in
1046:02 - um so i'll keep that in mind but yeah
1046:05 - the way to do it would be
1046:07 - d3.json to fetch this file
1046:11 - and then use promise.all
1046:13 - to fetch the csv and the json at the
1046:15 - same time and then run some code after
1046:17 - both of them have loaded but no matter
1046:19 - where this information comes from
1046:22 - we're going to have to
1046:24 - implement
1046:26 - this function
1046:28 - get type
1046:30 - for the column
1046:33 - oh just yes yep sure
1046:37 - and
1046:38 - so let me just put that right here
1046:41 - get type is a function that takes as
1046:43 - input the column
1046:45 - and returns
1046:49 - the type
1046:53 - of
1046:55 - the column
1046:58 - now
1046:59 - the name column might be confusing
1047:02 - because conceptually a column is
1047:04 - described by one of these objects
1047:06 - but what this really is is the column
1047:10 - value
1047:11 - meaning like the name
1047:13 - the name of the column
1047:16 - so it's just a string it's it's not the
1047:18 - entire object if it were that'd be
1047:19 - simpler but it's just the string sepal
1047:22 - length
1047:23 - so you know honestly to make that more
1047:25 - clear i'm going to call it
1047:27 - column
1047:29 - name
1047:30 - or column value
1047:39 - i like to think of it as column name
1047:46 - that way
1047:48 - column a keyword
1047:50 - column attribute i don't know
1047:54 - in a way i wanna i wanna i want this to
1047:56 - be name
1047:59 - like this
1048:02 - but it's a refactoring that would mean
1048:03 - we'd need to update the code elsewhere
1048:11 - i don't know maybe i'll just leave it
1048:12 - like the way it was
1048:16 - but we just have to understand here
1048:17 - here's what i'll do i'll add a comment
1048:19 - say
1048:20 - column is a string
1048:25 - corresponding to
1048:27 - the
1048:28 - value property
1048:36 - on metadata objects
1048:41 - can i
1048:42 - can i ask a question about the problem
1048:44 - we're trying to solve here sure
1048:47 - thank you so
1048:49 - am i right to understand that we have an
1048:51 - array
1048:52 - of objects
1048:54 - and we have a value
1048:56 - a unique value for one of the properties
1049:01 - of those objects somewhere in that array
1049:03 - and we want to reach
1049:05 - the other
1049:07 - property of that same object within the
1049:10 - array
1049:11 - that's exactly right
1049:14 - yeah we have this
1049:18 - as in
1049:19 - we have
1049:20 - the string corresponding to the value
1049:22 - properties in these objects that exist
1049:25 - in this array and what we want to get
1049:29 - is the type
1049:31 - which is
1049:32 - a strain that comes from a different
1049:34 - property
1049:36 - of those objects
1049:37 - but we have a array of objects right
1049:40 - correct
1049:41 - and we we need to get
1049:43 - the value of the object inside the array
1049:46 - okay
1049:47 - okay
1049:48 - yeah
1049:49 - we have to given
1049:52 - the column name for example species this
1049:54 - function should return the type namely
1049:56 - categorical
1049:59 - yeah
1050:00 - and so one one way we could do this
1050:05 - is
1050:05 - you know
1050:08 - iterate through each of these entries
1050:12 - and then
1050:13 - when it matches when the value matches
1050:16 - will have access to the entire object
1050:18 - and then we can just access the type of
1050:20 - it
1050:21 - and that would look something like
1050:22 - options.find which is another method on
1050:25 - arrays
1050:28 - d.value equals
1050:31 - column
1050:33 - this would give us the object and then
1050:35 - we could just access dot type
1050:43 - that should work
1050:46 - yeah cool
1050:48 - yes
1050:49 - and
1050:50 - and that will enable us to get to jump
1050:52 - from any property to any other property
1050:55 - within the same object exactly
1050:58 - in an array of objects correct
1051:01 - perfect
1051:03 - however
1051:06 - the dot find method on arrays
1051:10 - will check
1051:11 - you know the way it works dot fine the
1051:13 - way it works is it checks each and every
1051:15 - one it says okay let's take a look at
1051:17 - this one
1051:18 - and it passes that object into this
1051:20 - thing
1051:21 - and then this function runs it returns
1051:23 - true or false so it says is d dot value
1051:26 - equal to column it checks the first one
1051:28 - it says okay d dot value is battle width
1051:31 - is that equal to
1051:33 - column
1051:35 - which is you know whatever column we
1051:36 - selected
1051:38 - if it is then it returns true and then
1051:40 - array.find returns that one that matched
1051:43 - but if it returns false
1051:45 - array.fine goes on to the next one and
1051:47 - it passes in the next one and says okay
1051:49 - is that one the same
1051:51 - no it's not the same go on to the next
1051:53 - one
1051:54 - check it again if
1051:56 - if it is the same
1051:57 - then
1051:58 - the define method returns that object so
1052:01 - if it matches species for example it
1052:03 - would return this entire object
1052:06 - from this expression here that's why we
1052:09 - can say dot type
1052:10 - we could we could just as easily say
1052:12 - text
1052:13 - to access the text
1052:17 - so
1052:19 - because it iterates through each and
1052:22 - every one
1052:25 - i generally don't like to do it this way
1052:26 - because it's
1052:28 - big o of n
1052:30 - algorithm wise that means the algorithm
1052:34 - takes n steps where n is the number of
1052:36 - columns
1052:37 - in this case it's it's not that bad
1052:39 - there's only like five
1052:41 - so it's not really
1052:43 - it's not really an issue
1052:45 - so this would work perfectly well
1052:52 - but i kind of do want to show the way i
1052:54 - would do it
1052:55 - which is to create a lookup table using
1052:57 - the map data structure
1053:00 - but any questions so far
1053:02 - i just had a quick question around this
1053:05 - find method yes so
1053:08 - if like it's not present in this current
1053:11 - table lookup example but say we had
1053:14 - multiple
1053:15 - columns or multiple columns with the
1053:17 - same name so species was appearing twice
1053:21 - so what find like return
1053:23 - both those objects or will it just
1053:25 - return the first
1053:27 - uh occurrence of
1053:30 - the
1053:30 - of the selection selected column or the
1053:33 - column that we're trying to find
1053:36 - that's correct it would just return the
1053:38 - first one
1053:40 - okay okay
1053:42 - that's what fine does it just returns
1053:44 - the first match that it encounters so if
1053:47 - you did have species
1053:48 - as the value for multiple of these which
1053:50 - you wouldn't want to that would be a bug
1053:52 - but if you did
1053:53 - uh it would just return the first one
1053:55 - and not the second one
1053:57 - wait thanks
1053:59 - is there a
1054:00 - find all
1054:02 - method
1054:04 - um not the case here but uh just
1054:08 - yeah this is what i would do
1054:11 - i don't
1054:13 - think there is but there is
1054:15 - a filter which is essentially does the
1054:18 - same thing yeah okay yeah
1054:20 - exactly yeah so if you wanted to do that
1054:24 - you would say options.filter
1054:27 - and
1054:28 - you wouldn't want to say that type
1054:30 - because the result would be an array
1054:31 - this would find all of the matches
1054:35 - it would so filter is essentially find
1054:37 - all that match
1054:39 - perfect okay clear
1054:42 - now i just want to before moving on to
1054:44 - the implementation with map i just want
1054:46 - to make sure that this is actually
1054:48 - working
1054:49 - change the filter for find
1054:53 - oh thanks
1054:58 - so to just check if it's working i'm
1055:00 - going to say console.log get type of
1055:02 - column
1055:04 - this will let us
1055:06 - just check if it's working
1055:12 - and this is on the
1055:14 - um
1055:16 - the x menu so when i change x
1055:21 - it works
1055:22 - it says quantitative
1055:24 - excellent
1055:27 - yeah so if i if i use species it outputs
1055:30 - categorical
1055:32 - perfect
1055:34 - so it works quantitative quantitative
1055:36 - quantitative
1055:37 - quantitative categorical if it's species
1055:42 - so that part works that's great
1055:44 - x dot type is not a function but yeah
1055:46 - we'll deal with that later
1055:49 - but first because we're on this topic
1055:51 - and this is such a common thing to have
1055:53 - to do
1055:55 - i just want to say this is not how i
1055:56 - would actually implement this
1055:59 - how i would actually implement this is
1056:01 - to create a map
1056:04 - i'll call it um
1056:08 - column
1056:09 - two
1056:11 - type
1056:14 - is a new map
1056:16 - data structure
1056:18 - and this is built in to the browser you
1056:20 - don't have to import any libraries or
1056:21 - anything
1056:22 - it's an es6 feature
1056:25 - and
1056:26 - map
1056:27 - has a number of methods like set and get
1056:32 - so column two type meaning
1056:34 - the way i named it like that because
1056:36 - it's a lookup table from column to type
1056:39 - you know from column which you use as
1056:42 - the keys
1056:43 - to type which are going to be used as
1056:44 - the values
1056:47 - and so what we can do
1056:50 - is loop through
1056:52 - all of these
1056:54 - options
1056:56 - maybe something like
1056:59 - options
1057:01 - dot 4 each
1057:04 - is a way to iterate through these
1057:10 - and we could say for each of these
1057:11 - options
1057:13 - we can say
1057:14 - we want to set the value
1057:18 - and the key will be
1057:21 - option.value
1057:24 - and the value that the key maps to which
1057:28 - is confusing because the value you know
1057:29 - that we're using the word value here but
1057:32 - the the value that the
1057:35 - key maps to will be type
1057:38 - option.type so how do we put these
1057:40 - together this is where we can say column
1057:43 - to type which is an instance of the map
1057:45 - data structure
1057:46 - dot set
1057:48 - and set takes as input two arguments the
1057:51 - key
1057:52 - and the value
1057:57 - okay i think this uh solves the problem
1058:00 - that i was having
1058:02 - when i imported from the
1058:04 - from the website the json ah because
1058:07 - when i tried to to set the uh what i did
1058:11 - i create a external array
1058:14 - like before the column to type
1058:16 - and try to push the value inside
1058:20 - this array but outside this scope when i
1058:24 - try to get back
1058:25 - the array it's empty
1058:28 - inside the four each if i if i create a
1058:31 - array outside and try to push the values
1058:35 - inside this array when it's outside it's
1058:37 - empty
1058:39 - so i think this set may solve this
1058:44 - yeah and it's important to connect the
1058:46 - dots between the the data structures
1058:48 - because what you need to implement this
1058:50 - get type is a a dictionary essentially a
1058:53 - map a key value mapping where you give
1058:55 - it the key gives it gives you the value
1058:57 - but if you're starting from an array
1059:00 - you have to do something else like dot
1059:02 - find which traverses each element of the
1059:04 - array which you don't want and you can't
1059:06 - you can't say like options at index
1059:08 - column
1059:11 - which is you know you could use an
1059:12 - object
1059:13 - as a map as well
1059:15 - but um
1059:18 - but yeah i think this does solve the
1059:19 - problem and once we have built up this
1059:22 - map
1059:24 - we can access it uh but first just to
1059:27 - really comprehend what's happening let
1059:28 - me say console.log
1059:31 - column to type so we can see what this
1059:34 - map ended up looking like
1059:40 - it's a map instance
1059:42 - that has a bunch of entries and this is
1059:44 - just how chrome
1059:45 - presents it to you
1059:49 - in the console
1059:50 - it means the key
1059:52 - is pedal width and the value is
1059:54 - quantitative
1059:56 - and this double arrow here means like it
1059:57 - maps to you know
1059:59 - if you give
1060:01 - pedal width
1060:02 - to the function dot get
1060:05 - it will return quantitative
1060:08 - and it'll do so efficiently it doesn't
1060:10 - have to check each one internally it
1060:12 - implements probably like a hash table
1060:14 - kind of a lookup scheme where it's big o
1060:17 - of one instead of big o of n in
1060:20 - algorithmic terms it doesn't have to
1060:21 - check all of those it just gives you
1060:23 - back instantly the one you that you want
1060:28 - so
1060:29 - if we say
1060:33 - column
1060:36 - to type
1060:37 - dot get
1060:40 - column
1060:43 - inside of get type
1060:45 - this should work
1060:48 - as well
1060:50 - and to test it
1060:53 - we can change the column
1060:55 - and observe that yeah okay it still
1060:57 - prints out the right thing quantitative
1060:59 - and if i switch to species it outputs
1061:02 - categorical
1061:04 - okay this is working
1061:07 - this is working
1061:10 - however
1061:13 - this is not the
1061:14 - best way
1061:16 - it's not the simplest way
1061:19 - to do it
1061:22 - the simplest way to do it
1061:26 - is to take advantage of
1061:30 - a way of calling the map constructor
1061:34 - where you can actually pass in
1061:37 - an array
1061:39 - of arrays
1061:41 - and each of those
1061:43 - inner arrays
1061:45 - has only two elements the key and the
1061:47 - value
1061:49 - that way of doing it is much more
1061:51 - concise
1061:52 - and all you know
1061:54 - although it is a bit more cryptic
1061:57 - and the way that we would do that is is
1062:00 - we can pass in options.map
1062:03 - again the functional programming
1062:04 - construct that lets you give it a
1062:06 - function that function accepts each
1062:08 - element
1062:09 - and the return values end up as a new
1062:11 - array
1062:15 - we can return an array
1062:20 - that has just two elements
1062:22 - option.value
1062:24 - and option.type
1062:33 - and this should work as well let me see
1062:35 - if i got it right
1062:39 - yeah
1062:40 - seems to work just fine
1062:44 - so just to review
1062:46 - what i did there
1062:51 - options.map
1062:53 - maps over all the options and it returns
1062:56 - an array that has the value and the type
1062:59 - the first thing being the key of the map
1063:01 - the second thing being the
1063:03 - value in the map
1063:05 - and this is just an alternative syntax
1063:07 - for doing the exact same thing as this
1063:09 - other thing does namely looping through
1063:12 - all of the entries and calling.set
1063:16 - and to simplify this even further we
1063:18 - could use es6 destructuring
1063:21 - to destructure value and type
1063:23 - from
1063:24 - the argument
1063:26 - and then we don't have to say option dot
1063:29 - and option dot
1063:36 - so all of this is a roundabout way of
1063:40 - you know
1063:41 - exploring the ins and outs of
1063:43 - constructing maps
1063:46 - um but since it comes up so often i
1063:49 - wanted to dig into this this level of
1063:51 - detail because you know i think it's
1063:53 - it's really important to fundamentally
1063:55 - understand how to use maps
1063:57 - in today's javascript world
1064:02 - i see there are some questions
1064:05 - let me see
1064:07 - what is this and is it live
1064:09 - yeah
1064:10 - it is
1064:11 - it's live
1064:12 - why are you not using typescript
1064:15 - well i'm not using typescript because
1064:18 - typescript is a pain to use in my
1064:19 - experience
1064:23 - then you don't have to write comments
1064:24 - yeah i know
1064:26 - yeah it's just it's just a pain
1064:29 - is this microsoft monaco no it's not
1064:31 - it's a viz hub
1064:32 - this thing that i made
1064:34 - and you can use it too anyone can use it
1064:38 - you can fork this stuff and get a link
1064:39 - to it
1064:41 - what are we doing here i love these
1064:43 - questions
1064:45 - these are great
1064:46 - um
1064:49 - it's a new visualization tool people can
1064:51 - use yeah i mean
1064:52 - this being vishub yeah i created about
1064:54 - two years ago
1064:56 - d3 has been around a while as larry
1064:58 - points out thank you larry
1064:59 - yeah d3 has been around a while but the
1065:01 - apis have changed so that's why i'm
1065:04 - doing this tutorial now to like use the
1065:05 - most modern way
1065:07 - of doing it
1065:10 - okay thanks for those questions
1065:15 - okay um now we can move on to the next
1065:18 - phase
1065:20 - namely implementing
1065:22 - x type but before we do that i just want
1065:24 - to make sure are there any questions so
1065:26 - far about what we've done here so far
1065:36 - please go ahead
1065:38 - that song oh she just said it's so
1065:40 - complicated
1065:42 - yeah i know there's a lot of details
1065:44 - there are a lot of details to remember
1065:45 - but um
1065:48 - and the first time you see stuff like
1065:50 - this i realize it can be overwhelming
1065:52 - that's why i wanted to like
1065:54 - yeah this happens all the time first
1065:56 - time i see something it's like
1065:59 - wow i'm not understanding it and once i
1066:02 - get into it it's like oh it wasn't that
1066:04 - bad
1066:06 - yeah and console.log is your friend i
1066:08 - mean if you were on your own you can say
1066:11 - console.log options.map value type
1066:15 - and see what it is
1066:17 - and and use use console.log to
1066:19 - interrogate what you see here anything
1066:21 - that's confusing to unpack it and
1066:22 - understand what's
1066:24 - what's happening in that intermediate
1066:25 - stage see it's an array of arrays
1066:28 - and i realized when i described it it's
1066:30 - a bit abstract but when you console.log
1066:32 - it and you see it
1066:33 - you can understand oh it's an array of
1066:35 - arrays with the keys and the values
1066:38 - and also if you're on your own and find
1066:40 - the stuff confusing
1066:41 - it's good to consult mdn
1066:43 - which is the de facto standard
1066:46 - documentation for the built-in stuff in
1066:48 - javascript such as map
1066:51 - and it says right here
1066:53 - it describes
1066:56 - the map constructor
1066:59 - creates a new map object
1067:01 - and it says right here
1067:04 - that you can pass an iterable
1067:07 - into the constructor which is what we're
1067:09 - doing
1067:10 - and it just it documents that right here
1067:12 - it says what is this iterable it's an
1067:14 - array
1067:16 - whose elements are key value pairs in
1067:19 - the form of arrays so here's an example
1067:21 - that maps numbers to strings
1067:25 - so yeah if you if you're ever looking at
1067:27 - this stuff on your own and feel oh my
1067:29 - gosh this is so confusing
1067:31 - use console.log and
1067:33 - and and just do google searches for the
1067:35 - data structures that we use like map
1067:37 - because the documentation is great and
1067:39 - also the same goes for d3
1067:42 - the d3 documentation is really good so
1067:44 - if you see a d3 method that you don't
1067:45 - know like just google it find the
1067:47 - documentation
1067:49 - um
1067:52 - i do it all the time but it takes such a
1067:54 - long time it does it does there are a
1067:58 - number of um
1068:01 - there are a lot of rabbit holes that you
1068:03 - could go down and get distracted
1068:05 - really time consuming and
1068:08 - just takes a lot of time
1068:14 - [Music]
1068:19 - yeah i would say it's well worth it it's
1068:21 - an investment in your future
1068:23 - yeah i agree
1068:25 - that's why you and you have every other
1068:27 - week
1068:29 - yeah i changed and that makes it
1068:31 - difficult because
1068:33 - for example i'm so behind i am supposed
1068:35 - to catch up yeah
1068:38 - i wish it was every other day well
1068:40 - actually i was going to announce it at
1068:42 - the end but since you brought it up i
1068:43 - did change it to be every other week not
1068:45 - every week so going forward is going to
1068:47 - be every other week
1068:49 - thank god i updated the meetup page why
1068:52 - because yeah it's for me too it's a bit
1068:54 - hectic to do this every week
1068:57 - anyway are there any other questions
1069:01 - i just wanted to ask
1069:03 - what what would happen if you have
1069:05 - two entries with the same keys so you'd
1069:08 - be like while you were trying to iterate
1069:11 - you're passing two keys
1069:13 - two exact keys to
1069:16 - in your map object
1069:19 - that's a fantastic idea
1069:23 - well if we if we go back to this other
1069:25 - variant that i did here
1069:30 - with this variant it's easy to
1069:32 - understand
1069:34 - what the answer to that question would
1069:35 - be
1069:37 - if you understand
1069:38 - the semantics of dot set
1069:40 - if you call dot set
1069:43 - multiple times
1069:45 - with the same key
1069:48 - it will change
1069:50 - the value
1069:51 - and so in this
1069:53 - case
1069:54 - let's say we had two of these where
1069:56 - species was the same
1069:59 - what this algorithm would do
1070:01 - is
1070:03 - call dot set
1070:05 - passing the key species
1070:09 - and it would
1070:10 - set the value to be this one here
1070:12 - however
1070:14 - the next time around
1070:15 - you know in the for each when it gets
1070:17 - evaluated with the last option it's
1070:20 - going to call dot set again
1070:23 - and so
1070:24 - when it calls set the second time with
1070:26 - the same key
1070:28 - the way that maps work it's going to
1070:29 - overwrite
1070:31 - the first version of it and so
1070:35 - we're going to end up with a map
1070:37 - that
1070:38 - only has one value for species and it's
1070:41 - going to be the last one encountered in
1070:43 - this array
1070:45 - so that's a complete opposite of find in
1070:47 - a way exactly it's the opposite of find
1070:50 - yes
1070:52 - yes that's a great insight the way find
1070:54 - works is it checks each one and it
1070:55 - returns the first match the way this
1070:57 - works is it sets up entries in the map
1071:01 - for each of these entry entries in the
1071:03 - options array one at a time
1071:06 - and if it does encounter the key
1071:07 - multiple times
1071:09 - it overwrites it so essentially it's
1071:12 - putting the last occurrence of the match
1071:14 - in the original array as the the value
1071:17 - in the map that you get
1071:20 - thank you yeah my pleasure
1071:24 - and
1071:24 - i'm not so certain what the behavior is
1071:28 - when you use the constructor like this
1071:31 - but it may well be the same
1071:35 - yeah it may well take the last
1071:37 - match
1071:39 - although i'm not 100 sure
1071:41 - so you know we can do we can actually
1071:43 - test it out
1071:44 - and this is the beautiful thing about
1071:46 - coding too you can use the code to ask
1071:48 - questions about the code
1071:52 - for example
1071:54 - um oh there's a breakage
1071:57 - column to type is not defined
1072:10 - i'm sorry forgot to uncomment
1072:18 - uh sorry i'm just a little disoriented
1072:20 - but yeah let's do this little experiment
1072:23 - to figure out
1072:24 - what the answer is
1072:34 - all right so when we use this variant
1072:36 - that uses for each goes through all of
1072:38 - them i would expect it's going to give
1072:39 - us the last one
1072:43 - and if we select species
1072:45 - it outputs
1072:47 - categorical
1072:49 - which is the last one see the first one
1072:51 - was quantitative
1072:52 - and we actually have the same key here
1072:54 - multiple times
1072:56 - now
1072:58 - let's answer the other question of what
1073:00 - if we use the map constructor
1073:05 - like this
1073:07 - is it the same
1073:08 - so if i select species
1073:11 - it outputs categorical so the answer is
1073:13 - yes it is the same
1073:16 - that takes the last one
1073:18 - great question great question i love how
1073:19 - it digs in a little deeper
1073:22 - yeah thank you
1073:28 - okay
1073:30 - now
1073:33 - let's go ahead and solve the next piece
1073:35 - of this puzzle
1073:36 - now that we know what the type should be
1073:38 - when we select it
1073:40 - we need to pass it into x type
1073:44 - and you know while we're at it let's
1073:46 - pass it into y type
1073:48 - as well
1073:58 - why type is get type of column
1074:01 - oh there's some error
1074:04 - there's a syntax error
1074:20 - i don't know what that was about
1074:28 - so i'm going to also call
1074:31 - why
1074:32 - type here
1074:37 - okay it's fine nothing was
1074:40 - there was no problem
1074:41 - so now from the outer sort of view of
1074:44 - things
1074:45 - we're invoking it where we want to be
1074:47 - invoking it we're setting y type when we
1074:50 - change the y menu and we're setting x
1074:53 - type when we change the x menu
1074:55 - now the task at hand is to implement
1074:58 - that method in our scatter plot
1075:01 - so let's go into our scatter plot code
1075:08 - in scatter plot
1075:10 - dot js we've got a bunch of these
1075:13 - getter setter
1075:15 - accessors
1075:18 - and let's just make a few more
1075:21 - we've got x value and y value
1075:24 - i'm just going to copy paste these
1075:27 - and change
1075:32 - value to type
1075:36 - so x type is going to be x type
1075:41 - change y value to
1075:43 - y type
1075:52 - and we're referring to the variable y
1075:54 - type and x type those don't exist yet so
1075:57 - let's make those
1075:58 - at the top of the file
1076:05 - like this
1076:09 - now
1076:10 - these are available to us
1076:13 - when we render our scatter plot
1076:16 - let's just make sure because this is
1076:18 - where we're going to want to use those
1076:20 - let's make sure it's available with
1076:22 - console.log
1076:24 - x type
1076:28 - here
1076:36 - so we get undefined initially which
1076:39 - makes sense because we're only passing
1076:41 - it in when we change the menu
1076:47 - but when we do change the menu we get
1076:50 - quantitative
1076:54 - for these and if we type if we select
1076:56 - species we get categorical which is
1076:58 - exactly what we want
1077:05 - okay
1077:06 - this is great
1077:09 - and i think what we can do is say
1077:14 - if x type
1077:16 - is
1077:17 - categorical
1077:22 - using this
1077:23 - ternary syntax
1077:26 - we create a linear scale
1077:30 - otherwise
1077:33 - now this is where we can use uh
1077:35 - category
1077:40 - exactly
1077:43 - yeah yeah the good call so i got the
1077:45 - order reversed
1077:48 - it's going to be scale linear if it's
1077:49 - not categorical
1077:51 - but if it is categorical
1077:54 - then it's going to use
1077:56 - scale point
1078:02 - just use prettier to format that
1078:05 - and if it is a scale point
1078:07 - we can set
1078:09 - the domain
1078:12 - to be
1078:14 - data.map
1078:17 - x value
1078:20 - and what this what this does is it
1078:21 - returns an array of all the different x
1078:24 - values
1078:25 - including duplicates so it's going to
1078:27 - return like versa color versus color
1078:28 - versus color setosa satosa setosa but
1078:32 - then when you when you pass that array
1078:33 - into dot domain
1078:35 - the scale will
1078:37 - internally figure out that there are
1078:39 - duplicates and it will deduplicate it so
1078:41 - the domain will only end up having three
1078:43 - entries
1078:44 - the unique values
1078:46 - of the species column
1078:50 - and then dot range
1078:51 - um
1078:52 - actually should be the same
1078:55 - because we want it to span across the
1078:59 - same space
1079:01 - in pixels
1079:08 - so this should work
1079:10 - let's see if it does
1079:14 - if i change x
1079:16 - to species
1079:20 - there's some breakage let's see what it
1079:21 - is
1079:23 - oh scale point is not defined yeah i
1079:26 - forgot to import it
1079:29 - we just need to import that from d3
1079:31 - along with this other stuff
1079:36 - now it should work
1079:40 - okay great
1079:42 - check it out
1079:45 - it works
1079:48 - hooray we solve the problem
1079:56 - yep everything's working
1079:59 - the quantitative stuff is working and
1080:01 - when we hit species
1080:04 - it transitions to this
1080:06 - which is the behavior of a point scale
1080:08 - by the way it just takes the values that
1080:10 - it sees in the order it receives them
1080:13 - and identifies the unique ones and
1080:15 - spreads those across the space across
1080:17 - the screen
1080:18 - it's exactly what we want
1080:20 - and i must say i am impressed by
1080:23 - the way that d3 axis handles the
1080:25 - transition
1080:26 - see how it fades
1080:29 - d3 axis is brilliantly implemented
1080:32 - because
1080:34 - if it is given
1080:35 - another
1080:36 - a linear scale see how it animates the
1080:38 - numbers it animates the ticks
1080:40 - but if you pass into d3 axis with the
1080:43 - transition
1080:44 - a different type of scale it does this
1080:46 - nice fade
1080:48 - animation which is just brilliant
1080:52 - brilliant
1080:54 - but anyway
1080:57 - there's a little bit of cleanup work to
1080:59 - do here
1081:02 - but um any questions so far
1081:06 - yeah just um one question
1081:09 - here is eric
1081:10 - um
1081:11 - just curious uh
1081:14 - how
1081:15 - hard would it be
1081:17 - to actually um show
1081:20 - um
1081:21 - all the data that are
1081:23 - in each of those categories as dot plots
1081:29 - so in other words in other words some of
1081:31 - those as you mentioned earlier are on
1081:33 - top of each other but you would really
1081:35 - have sort of a
1081:37 - frequency
1081:41 - is this what you mean by dot plot yep
1081:44 - yep
1081:45 - so so
1081:46 - so what you're trying to show is uh
1081:49 - almost the distribution across those
1081:51 - categories
1081:52 - so that you can see where the peaks are
1081:55 - so that's hidden right now yep but it's
1081:58 - a sort of a natural transition but
1082:01 - um as i'm thinking about it
1082:04 - just trying to get a sense from your
1082:06 - expertise
1082:07 - how deep one would have to go and
1082:09 - actually do that
1082:11 - not that we do it here but i'm just
1082:12 - curious yeah it's a great question go
1082:16 - ahead
1082:17 - i
1082:19 - i just want to suggest an idea for doing
1082:21 - that and and let you see whether it
1082:24 - works or not
1082:25 - so
1082:27 - we
1082:51 - yes
1082:52 - that's right
1082:56 - to implement that
1082:58 - what you described eric
1083:01 - the first thing i would do
1083:05 - is
1083:06 - just look at it from from a bird's eye
1083:08 - view and say like what should the
1083:10 - architecture of this be
1083:12 - should it be one visualization or should
1083:13 - it be
1083:15 - a parent visualization and a child
1083:16 - visualization where the child
1083:19 - is
1083:19 - one of these reusable components like
1083:21 - the scatter plot but for a single dot
1083:24 - plot
1083:26 - got it you know what i mean and then i
1083:28 - would i would get it to work that's
1083:30 - probably how i would do it i would get
1083:31 - it to work for a single dot plot and
1083:34 - like you said costa
1083:35 - that requires
1083:37 - a step of binning where you take these
1083:42 - um
1083:43 - well in this case you can just use the
1083:46 - the different values that are present
1083:49 - here
1083:50 - i think it increments by 0.1
1083:53 - that's the resolution of the data so for
1083:55 - each one of these unique values you
1083:56 - would want to bin them
1083:58 - and count how many occurrences there are
1084:02 - for each of these unique values and that
1084:04 - there's a feature in d3 called d3 bin i
1084:07 - think or d3 histogram if you google
1084:09 - search d3 histogram
1084:12 - you can see this in action so that's a
1084:14 - data processing step so first you need
1084:16 - to do that binning
1084:18 - so that for each of these numbers you
1084:20 - know how many
1084:22 - occurrences there are and then based on
1084:24 - that after that binning happens
1084:27 - you can visualize
1084:29 - that
1084:30 - as a dot plot
1084:32 - got it and that would be one of these
1084:34 - components and then
1084:37 - what you're doing essentially is called
1084:38 - small multiples dot plots where you
1084:41 - would want to actually have three dot
1084:43 - plots one for each species
1084:46 - and so then you would need to change
1084:48 - this scatter plot code completely
1084:50 - so that
1084:51 - for each of the values
1084:54 - across the x-axis here
1084:56 - it would iterate through those and for
1084:58 - each one invoke that reusable dot plot
1085:02 - instance
1085:03 - so you'd have three instances of a
1085:05 - reusable dot plot that's one way to do
1085:07 - it
1085:09 - okay that's was
1085:10 - that that's sort of just curious how
1085:12 - you'd approach it so um not that
1085:14 - obviously we tackle it
1085:16 - but it's it yeah so that's how you would
1085:18 - do that but there's a uh
1085:21 - if you step back a little there's
1085:22 - another question what is the best
1085:24 - visualization design
1085:26 - to show this type of data
1085:29 - and small multiples dot plots is one
1085:32 - option
1085:33 - but there are a number of different
1085:35 - options there's actually one option
1085:37 - that's very low hanging fruit for us
1085:38 - that we could do right now
1085:41 - and i love doing this
1085:43 - because it's so simple
1085:46 - on the circles
1085:49 - we could set the fill
1085:50 - opacity
1085:53 - to 0.2 in the css
1085:58 - um
1086:00 - i don't think that actually worked
1086:04 - maybe it's just opacity
1086:07 - yeah there we go that worked
1086:09 - so if we set the opacity on the circles
1086:12 - and we subdivide them by species
1086:15 - you can see
1086:17 - it's doing it right there you see what
1086:18 - i'm saying
1086:19 - yeah yeah
1086:22 - i love it
1086:23 - so this is a simple modification we can
1086:25 - do to make the visualization communicate
1086:28 - the information of density like how many
1086:31 - overlapping dots there are which is the
1086:33 - same thing that would be communicated by
1086:35 - the dot plots
1086:36 - yep
1086:38 - yes so this is a bird's eye view yep
1086:42 - okay
1086:43 - so the bird's-eye view meaning
1086:46 - what i meant by a bird's-eye view is you
1086:47 - step back and look at the design space
1086:49 - of the visualization this is one other
1086:52 - option there are so many other options i
1086:53 - mean you could have small multiples box
1086:55 - plots for example
1086:57 - you could have small multiples
1086:58 - histograms
1087:00 - like bar
1087:02 - style histograms you could have small
1087:03 - multiples of violin plots
1087:07 - so many different ways i mean once you
1087:08 - get this
1087:10 - data structure and you want to visualize
1087:11 - it there are so many options but you can
1087:14 - frame it as small multiples
1087:16 - meaning
1087:17 - you want to implement one instance of it
1087:20 - and then just multiply it across the
1087:21 - different values
1087:24 - that's really cool
1087:25 - nice yeah and r by the way ggplot in r
1087:30 - does all this stuff
1087:31 - okay it's brilliant the way it does it
1087:37 - so yeah stuff to look into
1087:41 - thank you
1087:42 - yeah my pleasure
1087:45 - all right let's finish this up here it's
1087:48 - almost done but we've only done it for x
1087:50 - and not y
1087:54 - and this code itself can be cleaned up
1087:57 - whenever i see
1087:59 - duplicated logic
1088:01 - like this dot range dot range copy
1088:04 - pasted its exact same thing
1088:06 - i asked myself how can we get rid of
1088:08 - this duplicated logic
1088:10 - in this case it's fairly simple because
1088:16 - this expression if you put parentheses
1088:18 - around it
1088:21 - returns a scale
1088:23 - it could be a point scale it could be a
1088:24 - linear scale
1088:26 - but it returns the scale
1088:28 - and so we can essentially factor out
1088:31 - the call to dot range
1088:35 - so that it gets applied to the returned
1088:38 - scale whatever
1088:39 - type of scale it happens to be
1088:42 - then i just run prettier on that and
1088:45 - and this is what we get
1088:49 - yeah i would prefer this just because it
1088:51 - has less duplication
1088:54 - so to be clear this
1088:56 - set of parentheses
1088:59 - creates
1089:00 - the scale you know a different type of
1089:02 - scale depending on whether x type is
1089:04 - categorical or not it sets the domain
1089:06 - but it does not set the range
1089:08 - but whatever scale comes back from this
1089:10 - expression
1089:13 - we call dot range on that scale whatever
1089:15 - it is so it's just a simpler way to do
1089:17 - it
1089:23 - now that we've got that
1089:25 - we can just do the exact same thing
1089:29 - for y i'm just going to copy paste it
1089:31 - change x to y
1089:34 - all over the place
1089:37 - so instead of x value it's going to be y
1089:39 - value
1089:42 - but with the y scale we need to be
1089:44 - careful about the range because
1089:47 - it's different it's height minus
1089:50 - margin dot bottom and margin top top
1089:53 - so i'm going to take this
1089:54 - definition of the range and use it here
1089:57 - and get rid of our original
1090:00 - y scale definition
1090:03 - and this should do the trick
1090:05 - for both x and y
1090:10 - let's see if it does
1090:13 - x species works
1090:15 - y species
1090:17 - works
1090:19 - excellent
1090:22 - and one last little thing
1090:24 - that i don't like about this is that
1090:26 - there's no padding it goes all the way
1090:27 - up to the edge
1090:29 - maybe it's just personal preference or
1090:31 - stylistic but
1090:32 - i like always to put a little
1090:35 - padding
1090:37 - and the way where we can put that is
1090:39 - right here scale point.domain.padding
1090:43 - that's a function on these scales
1090:46 - i'll say
1090:48 - 0.2
1090:54 - yeah so if we look at it now
1090:57 - we get this nice padding it doesn't go
1090:59 - all the way up to the edge
1091:01 - which i just find kind of
1091:03 - i don't know
1091:05 - distasteful
1091:07 - it has space to breathe the labels you
1091:09 - can read all the labels now so virginica
1091:11 - used to be off the screen
1091:14 - and just as the final step i'm going to
1091:16 - call dot padding
1091:19 - in the case of y
1091:21 - as well
1091:24 - so now it works
1091:26 - for both x and y
1091:30 - and the the labels get cut
1091:32 - off yeah
1091:34 - let me just
1091:37 - change the margin
1091:39 - to address that problem because what i
1091:40 - want to do is finish today with a
1091:42 - complete product that works
1091:45 - for all the cases that you select
1091:48 - but where's my margin
1091:50 - margin oh it's right here
1091:53 - margin left let me set it to 150 pixels
1091:57 - and see if that's enough for species
1091:59 - okay that's a little too much
1092:02 - maybe 120.
1092:08 - all right
1092:12 - there we have it
1092:23 - any questions
1092:26 - so one question i had was with those
1092:29 - drop downs there um i couldn't find
1092:32 - where one
1092:34 - does this or if it's even possible to
1092:36 - change the font and the size of those
1092:38 - drop downs oh
1092:44 - is that a css thing
1092:46 - that's a great question you know the
1092:49 - html
1092:51 - select element and the options
1092:54 - it's notoriously difficult to style
1092:57 - with css
1092:59 - so if you're working on a product
1093:02 - where you need styled menus the best
1093:04 - approach might to go might be to go
1093:06 - seeking out some third-party library
1093:09 - that implements
1093:10 - a drop-down widget that you could style
1093:12 - with css
1093:14 - okay
1093:15 - yeah explains the hunt
1093:17 - yeah they're right it's it's a hunt yeah
1093:19 - and like you just it's very difficult
1093:22 - to style these the way you want
1093:24 - um
1093:25 - but again it's a whole other level of
1093:27 - complexity to like evaluate the
1093:29 - different libraries and pick one and
1093:30 - figure out how to use it
1093:32 - um however
1093:34 - with this d3 reusable chart pattern
1093:37 - you could implement a menu component
1093:40 - just like this having the same api you
1093:42 - know having the same methods and
1093:44 - everything
1093:45 - but internally it could use that
1093:46 - third-party menu library that would be
1093:48 - the approach that i would suggest
1093:51 - okay
1093:52 - thank you but that said
1093:54 - i was actually surprised to see that in
1093:56 - one of the submissions
1093:58 - the menus were styled let me see if i
1094:00 - can find which was that you cost up yes
1094:03 - kostov how did you do this i think
1094:06 - i
1094:07 - normal css to do this
1094:10 - see this is beautiful it has that custom
1094:12 - font that's awesome yeah i just wanted
1094:15 - to make the phone consistent with maxis
1094:20 - menu so i just use this select
1094:23 - uh html and apply this property here
1094:28 - brilliant so you know
1094:30 - there you go all right i was trying to
1094:32 - figure that out
1094:33 - yeah there you go so it looks like it
1094:36 - looks like you had to style the select
1094:38 - the label and option
1094:40 - to get it to work
1094:43 - yep so i think the labels were for these
1094:46 - axis
1094:48 - labels and the option and select work
1094:51 - for the drop down right
1094:53 - yep
1094:55 - so there's your answer eric should work
1094:59 - thank you and i was actually quite
1095:01 - surprised to see this working
1095:03 - because
1095:04 - i've struggled in the past to try to do
1095:06 - this
1095:07 - but it looks like this works
1095:09 - yeah i was just playing around with it i
1095:11 - totally forgot that it worked for my
1095:14 - case that's awesome
1095:15 - and i wonder if it would behave
1095:17 - correctly if you try more advanced css
1095:20 - like setting the the background color or
1095:22 - the
1095:23 - you know the roundedness of the edges
1095:26 - i think you might run into a wall beyond
1095:28 - which you can't customize but
1095:30 - worth exploring for sure
1095:32 - right but yeah this is very nice and i i
1095:35 - have to say it's really nice how these
1095:36 - animate
1095:38 - or how your labels animate
1095:40 - really nice work
1095:44 - all right well
1095:47 - i think that's all for today
1095:50 - i
1095:51 - thank you so much
1095:53 - yeah my pleasure
1095:55 - thank you all thank you very much
1095:57 - thank you
1095:58 - yeah thank you very much
1096:02 - and uh yeah like i said it's i changed
1096:04 - it to every other week so just mark your
1096:06 - calendars it's not going to be every
1096:08 - week
1096:11 - and i will leave you all with an
1096:13 - exercise for this next two weeks
1096:17 - i want you to find a compelling data set
1096:19 - look around online
1096:21 - for different data sets
1096:31 - and uh yeah try to find a compelling
1096:33 - public data set
1096:36 - and just search around
1096:38 - you know
1096:39 - i would suggest coming up with some idea
1096:42 - of like data that you want to see
1096:44 - visualized
1096:45 - that you've maybe seen in the past or
1096:47 - thought about deeply like some sort of
1096:50 - existential like
1096:51 - question about society or
1096:54 - i don't know climate change the keeling
1096:57 - curve if you the killing curve would be
1096:59 - a good one
1097:00 - um but yeah find a compelling data set
1097:02 - that interests you
1097:04 - and the way to do it is just search for
1097:06 - the topic see if you can find any
1097:07 - visualizations that pertain to the topic
1097:10 - track down their data source
1097:12 - uh you know follow links until you can
1097:15 - get to a downloadable data file like an
1097:18 - excel file
1097:20 - and then export it as csv or just try to
1097:23 - find a csv or a json file
1097:25 - load that up
1097:26 - you know fork the scatter plot we made
1097:28 - with the menus load in that data
1097:31 - update the data parsing logic and i want
1097:33 - you to actually explore the data
1097:36 - using this scatter plot with menus
1097:39 - because now that now that the scatter
1097:41 - plot has the transparency
1097:44 - uh we can see the density of things
1097:47 - and now that we made it handle species
1097:49 - it can handle any column that's
1097:51 - categorical
1097:54 - and i want you to write up the key
1097:56 - insights that you discover
1097:59 - in the readme
1098:00 - of the viz
1098:03 - so fork this
1098:05 - modify the readme.md file to write up
1098:09 - like bullet points of like this is cool
1098:14 - this other thing is cool
1098:17 - you know interesting
1098:19 - insights that you find about the data
1098:21 - not about the vids or the coding
1098:24 - but i want you to like actually
1098:26 - explore some data
1098:29 - and uh yeah share your results in the
1098:31 - forum i've made an entry for
1098:34 - for today
1098:37 - episode 12. here it is
1098:41 - viz hub has been my passion project
1098:44 - since
1098:45 - 2018
1098:47 - and um
1098:49 - i've rewritten it twice
1098:51 - and i'm i'm embarking on rewriting it
1098:53 - again
1098:55 - okay because
1098:56 - i went in the other day to try to
1098:57 - redeploy and like
1098:59 - upgrade the dependencies and it's like
1099:02 - it was just so heavy feeling you know a
1099:04 - code base that i've been working on for
1099:06 - two years and so i really want to like
1099:08 - do a deep dive and like make vidshop as
1099:11 - good as it could possibly be
1099:13 - and uh focus on things like
1099:17 - you know
1099:18 - hot reloading of the code
1099:20 - is is what i've really been intrigued by
1099:23 - and also having some state associated
1099:26 - with the visuals so the if you want to
1099:28 - tweak something you don't have to change
1099:30 - the code but you'd have like a knob or a
1099:32 - dial that you could just touch
1099:34 - and tweak and see the feedback
1099:35 - instantaneously
1099:38 - so i was just very um
1099:40 - inspired to start working on
1099:42 - the next the next iteration of vishub so
1099:45 - that's that's what i'm going to do
1099:48 - but but this has been a really great
1099:50 - experience this series because it's
1099:52 - developed this little following
1099:55 - which i think is
1099:57 - it's amazing it's it's it's a golden
1099:58 - little
1099:59 - um
1100:00 - group of folks and and i just want to
1100:02 - say i really appreciate all of you who
1100:03 - have participated it's been really fun
1100:05 - and i've it's been really great to see
1100:07 - you all learn and grow
1100:10 - and do new things that you've never done
1100:12 - before so thanks for that
1100:16 - now thanks you for all of your
1100:20 - being so kind to to share your knowledge
1100:22 - you know
1100:23 - it's my
1100:24 - pleasure yeah and it's it's you know
1100:28 - it's proved it sort of proved the one of
1100:30 - the original vision
1100:32 - goals of of this hub and my teaching to
1100:35 - to reach a wider audience of folks who
1100:37 - might not
1100:38 - otherwise be able to learn this stuff
1100:40 - you know may not have access to
1100:42 - you know a university
1100:45 - so and it worked it's it's working i
1100:48 - mean i've i've seen people from all
1100:50 - sorts of different countries um if i
1100:51 - look at the google analytics of his hub
1100:53 - it's not just the us it's global the
1100:56 - audience is global particularly in
1100:59 - like developing countries which
1101:01 - which i'm so thrilled by i just that's
1101:03 - so happy to see yeah i'm for example i'm
1101:05 - from chile and you know last year
1101:09 - i it was really a struggle or maybe
1101:12 - 2019 it was really a struggle to find
1101:15 - here
1101:16 - uh a curse on d3 a like a leap course
1101:20 - uh
1101:23 - and well in the internet there's a lot
1101:24 - of tutorials uh but
1101:27 - but i you know
1101:29 - the the ones that you produce are
1101:31 - are the ones that really made me
1101:33 - understand the tree and this one that
1101:35 - was synchronous it was really also
1101:38 - i i've learned a lot thanks to this
1101:42 - oh great
1101:43 - great i'm happy to hear that
1101:45 - yeah
1101:47 - yeah i remember being on and seeing
1101:48 - someone from new zealand i think was on
1101:51 - yep
1101:52 - so
1101:53 - we had new zealand india
1101:56 - us exactly it folks from india i think
1101:59 - kostov you're located in india right
1102:03 - yeah yeah i'm from india
1102:05 - quite a diverse set that we have here oh
1102:08 - i'm curious where do you live in india
1102:11 - uh so i live near delhi
1102:13 - ah
1102:15 - nice up north
1102:17 - you know i lived um i lived outside of
1102:19 - nagpur for four and a half years
1102:22 - oh well i didn't know that and actually
1102:24 - i developed visa when i was living in
1102:26 - india i was riding my scooter my honda
1102:29 - activa
1102:30 - to my little rented office
1102:32 - and uh coding this hub
1102:34 - all day
1102:36 - nice
1102:37 - yeah i also like would be definitely
1102:40 - interested in like you know
1102:42 - seeing this grow and
1102:44 - i found it really nice that feature that
1102:46 - you just write your code and you
1102:48 - automatically see the changes you don't
1102:50 - have to press any button or build right
1102:54 - right exactly
1102:56 - activity
1102:58 - yep and and that's that's one of the
1103:00 - things that i love about this hub too
1103:02 - but the way that it works right now is
1103:04 - that every time you make a a change it
1103:06 - tote it reruns the entire
1103:09 - page and i want to move away from that
1103:12 - i want to share with you all
1103:16 - brett victor
1103:19 - inventing on principle this talk was
1103:21 - hugely hugely inspiring to me so in this
1103:24 - case the the value
1103:26 - because he's got this idea
1103:28 - that
1103:31 - yeah check this out
1103:36 - he's got this
1103:38 - we are not seeing the anything oh i'm
1103:41 - sorry i have to share my screen in this
1103:43 - in this system too i forgot to do that
1103:47 - it's live on youtube but not in the
1103:49 - google meet but now you should be able
1103:50 - to see it
1103:55 - okay
1103:57 - yeah this is the thing i just want to
1103:59 - play this because it really resonates
1104:01 - with me spent working in the code
1104:03 - working in a text editor blindly
1104:06 - without an immediate connection to this
1104:08 - thing which is what i'm actually trying
1104:11 - to make
1104:12 - so i feel this goes against this
1104:14 - principle i have that creators need an
1104:15 - immediate connection
1104:17 - they're making
1104:18 - so i try to come up with a coding
1104:20 - environment that i thought might be more
1104:21 - in line with this principle i have
1104:26 - so what i have here
1104:28 - is i've got this picture on the side
1104:30 - and the code on this side
1104:32 - and
1104:34 - this this part draws the sky and this
1104:35 - draws the mountains
1104:37 - this draws the tree
1104:39 - and when i make any change the code
1104:42 - the picture changes immediately that's
1104:44 - what i want to have so the code and the
1104:45 - picture are always in sync
1104:48 - who did this
1104:49 - just
1104:50 - change things in the code oh brett
1104:51 - victor yeah
1104:53 - i see things changing the picture but
1104:54 - check this out he's about to do the
1104:56 - craziest thing
1104:57 - and now that we have this immediate
1104:59 - connection between the code and the
1105:01 - picture we can start thinking about ways
1105:02 - of changing the code other than typing
1105:04 - so for example this number here is
1105:07 - the length of the branches if i want to
1105:08 - control that number i just point my
1105:09 - mouse to it hold down the control key
1105:12 - and i can dial it up and down that's
1105:14 - what i want
1105:15 - oh wow i can see what it looks like for
1105:17 - big bridges or small branches and i can
1105:19 - kind of converge on what feels right to
1105:21 - me artistically
1105:23 - and this works really well with some of
1105:24 - the stuff in the past it's amazing
1105:27 - so this video by ve it's from 2012 this
1105:30 - video by brett
1105:31 - he's a
1105:32 - visionary yes
1105:35 - and what strikes me about this is it the
1105:37 - way this environment this little
1105:38 - environment that he custom built for
1105:40 - just this one talk
1105:42 - it it seems to not reload the entire
1105:45 - page it just reruns the code in the page
1105:48 - without having to reload the entire html
1105:51 - and so i think you know this is the
1105:53 - direction i want to take vishub i want
1105:55 - to make it so that you can author your
1105:56 - code and
1105:58 - and updates to the code should take on
1106:00 - the order of milliseconds to execute
1106:03 - without having to re run rerun the
1106:06 - entire html and then from there i want
1106:09 - to add like the ability to extract
1106:11 - different variables into like little
1106:13 - widgets
1106:15 - on the side like in the editor of this
1106:17 - hub there should be a visual editor with
1106:19 - colors and numbers and strings and as
1106:22 - you change those it should update
1106:23 - instantly
1106:25 - so yeah i just wanted to share some some
1106:28 - context for why i'm why i'm ending this
1106:31 - this series right now
1106:34 - so
1106:36 - yeah
1106:37 - that's it
1106:38 - have you been in contact with him on how
1106:41 - he's done that no okay i mean he's he's
1106:45 - a towering figure i mean brett victor
1106:47 - he's yeah
1106:49 - so i don't know if he's the kind of
1106:51 - person i could just get in touch with
1106:53 - you know
1106:54 - he's like this
1106:55 - this like celebrity figure yeah you know
1106:58 - i worked at apple for years and years i
1107:01 - think he developed
1107:02 - a lot of the
1107:04 - the early ui for like the ipads and
1107:06 - stuff
1107:09 - but hey that's not a bad idea maybe i
1107:10 - should just send them an email yeah
1107:13 - do it worth a try i guess
1107:19 - and yeah someone asked how to support
1107:21 - viz hub
1107:23 - yeah
1107:23 - the best way to support it right now is
1107:26 - just to sign up for the
1107:28 - the paid plan which is four dollars a
1107:30 - month
1107:31 - there's current there are currently not
1107:32 - that many customers and it's not
1107:35 - making money it's not even paying for
1107:36 - the servers
1107:38 - but um
1107:39 - and this is another direction i'm going
1107:41 - to take it i want to add more features
1107:43 - that people would be willing to pay for
1107:45 - so if anybody has ideas i mean i have a
1107:47 - lot of ideas like
1107:49 - pay for storage
1107:50 - pay for
1107:51 - collaborator seats
1107:53 - pay for
1107:54 - white label embedding where you could
1107:56 - embed a viz onto a website
1107:58 - without the vis hub logo in it
1108:02 - custom domains for visits i mean imagine
1108:05 - if you could create something at visshub
1108:06 - and create it set up a domain name to
1108:09 - point to that and so this help could be
1108:10 - your website hosting
1108:12 - provider so i've got a lot of ideas if
1108:15 - anybody else has more ideas let me know
1108:18 - and i'd also i also want to make it the
1108:20 - best tool out there for professors and
1108:22 - teachers to use for teaching web any any
1108:25 - courses to do with web technology
1108:30 - so what's the best way to get to get in
1108:32 - touch with you
1108:33 - oh just just email me okay uh at gmail
1108:37 - yeah current.kelliher gmail.com all
1108:40 - right
1108:42 - yep
1108:45 - yeah and um i'm on twitter
1108:47 - so you know after i end this series
1108:51 - i'll still be active on twitter and i
1108:52 - will definitely announce um
1108:56 - so it's yeah curran what is it
1108:59 - current keller on twitter this is where
1109:01 - i'll announce um
1109:03 - any new
1109:04 - developments or activities
1109:06 - um
1109:07 - okay
1109:09 - and i i am thinking of doing like a a
1109:12 - beta program
1109:14 - where where i invite people to test out
1109:17 - the new version of vis hub that i'm
1109:18 - developing
1109:20 - and so if anybody would be interested in
1109:21 - that let me know
1109:23 - um i don't have any
1109:25 - any onboarding form set up or anything
1109:27 - like that you know but let me know i'd
1109:29 - be happy to
1109:33 - great yeah i'll keep you in mind
1109:39 - all right so let's let's dig into this i
1109:41 - i want to just wrap up the series
1109:44 - by reviewing
1109:46 - all the last
1109:47 - uh the work that everyone's done for the
1109:50 - last assignment and uh responding to
1109:54 - whatever questions that come up i don't
1109:55 - have any prepared material that i'm
1109:57 - going to go through today so it's really
1109:58 - just more of an informal
1110:00 - discussion
1110:02 - sort of a thing
1110:08 - so let's see
1110:10 - oh kostov is here with us um
1110:13 - custom you want to walk us through what
1110:15 - um what you've what you've done
1110:18 - yeah sure so
1110:21 - like i took a copy of the scatter plot
1110:23 - templates template that we
1110:26 - prepared last thing and plugged in
1110:30 - a data set which comes from
1110:33 - this tidy tuesday project which also
1110:35 - runs on twitter so this is run by the r
1110:38 - for data science online learning
1110:40 - community and they release like new data
1110:43 - sets every week
1110:45 - and this was a data set that i hadn't
1110:47 - explored before and just wanted to try
1110:50 - out like
1110:52 - explore it a bit further and thought
1110:54 - like using d3 and the
1110:58 - and all the things that you've learned
1111:00 - over the past
1111:01 - past weeks to
1111:03 - create this wiz
1111:06 - it shows the
1111:08 - i think the median income
1111:11 - median household income over time
1111:14 - and varies by
1111:18 - the different communities
1111:20 - so as you can see that there's a
1111:22 - significant difference between
1111:25 - like
1111:26 - whites and blacks and hispanics so this
1111:29 - sort of brings out
1111:31 - the income inequality which is still
1111:34 - prevalent
1111:38 - wow this is amazing and what where is
1111:41 - this localized is it for the us or
1111:44 - globally or yes
1111:46 - so this is just in the u.s
1111:48 - so it's the entire us
1111:51 - yes yes
1111:52 - wow i think the original data comes from
1111:54 - the us census
1111:56 - right oh great
1111:59 - urban institute that's a great group
1112:04 - great great work good stuff
1112:06 - uh
1112:07 - i i have a question for current about
1112:09 - this beast yeah it's okay
1112:11 - sure um
1112:13 - is there a way because i really
1112:15 - love the idea but but i think that maybe
1112:18 - if the labels of the years are exactly
1112:22 - a correspond exactly to the to the point
1112:26 - it could be more
1112:28 - easy to to read is there a way for the
1112:31 - x-axis the scale x-axis come on process
1112:35 - that or
1112:36 - or do that
1112:38 - let's take a look
1112:40 - yeah i think that would be a very nice
1112:42 - edition
1112:48 - but before we dig into that i just want
1112:50 - to say that this is exactly the kind of
1112:52 - work that i was hoping for where it
1112:54 - actually
1112:55 - looks at a an issue in the world and i
1112:57 - just want to take a second and i will i
1112:59 - will get into that that question but i
1113:01 - just want to take a second and think
1113:03 - about what it means
1113:05 - that
1113:06 - white people in the u.s
1113:09 - are earning
1113:10 - it looks like on the order of you know
1113:11 - 160 k
1113:13 - up and down
1113:15 - whereas black people in the u.s are
1113:17 - earning
1113:19 - on the order of
1113:21 - less than 40 000 a year
1113:27 - i mean that's profound that's that's a
1113:29 - profound piece of information
1113:32 - also yeah
1113:33 - i was also surprised when i looked at
1113:35 - sad to revisit the raw data just to
1113:37 - confirm like i hadn't read it
1113:39 - incorrectly or right like is that
1113:40 - correct like oh my gosh
1113:42 - that's what i was wondering there's such
1113:44 - income inequality
1113:46 - like this is
1113:47 - the median what's the the metric
1113:51 - yeah this this is the median median
1113:53 - household earnings
1113:55 - adjusted for inflation i think yeah it's
1113:58 - adjusted for inflation
1114:00 - what is shocking to me as well that that
1114:03 - that this difference is not improving in
1114:06 - time
1114:07 - right
1114:09 - it's not improving at all it's it's you
1114:12 - know it seems to almost have been
1114:14 - getting worse
1114:16 - and if you if you if you inspect the
1114:19 - median of the white group again you
1114:21 - would see that they have increased in
1114:23 - time
1114:24 - right rising up compared to the other
1114:27 - ethnic minorities and this big gap this
1114:30 - big gap here must have been the 2008
1114:34 - um
1114:36 - financial yeah
1114:38 - financial crisis recession whatever they
1114:40 - call it
1114:42 - so that seems to have impacted everyone
1114:44 - but
1114:46 - it is it is shocking and like disturbing
1114:48 - like why is it that white people earn so
1114:50 - much more than black people
1114:53 - i think that's
1114:56 - that's ridiculous and just i you know
1114:57 - thank you costa for selecting this
1114:59 - particular data set and servicing this
1115:01 - particular issue i think it's a very
1115:03 - important thing to look at
1115:06 - and can i say as well you brought last
1115:08 - time you brought an important point that
1115:10 - animation need to serve a purpose
1115:13 - and it's nice seeing it's not it's not
1115:15 - very nice but it's it's very telling
1115:17 - seeing those
1115:18 - points drop when you start
1115:22 - yes i agree it's a very great use of
1115:24 - animation
1115:27 - yep
1115:30 - and i would be curious to to do a
1115:32 - similar analysis for different countries
1115:35 - across the world
1115:37 - and see if the gap is so high in other
1115:39 - countries as well or if it's something
1115:40 - that's unique to the us
1115:45 - i don't know i haven't looked at the
1115:46 - data but
1115:47 - that would be an interesting analysis
1115:51 - or maybe have this broken down in males
1115:53 - and females as well right that would be
1115:55 - another
1115:56 - good analysis
1115:58 - yes for sure for sure and then once you
1116:00 - do that the possibilities of different
1116:03 - ways of visualizing that increase
1116:05 - dramatically because you can show
1116:07 - multiple things at once
1116:09 - and yeah that's one thing i wanted to
1116:11 - get to with this course of like the
1116:12 - variety of visualization types
1116:15 - but we didn't we just essentially worked
1116:17 - on scatter plots but i think that's okay
1116:19 - because
1116:20 - because you can build things that are
1116:22 - interactive and scatter plots actually
1116:24 - cover a huge range of data and so the
1116:27 - first first thing you can do with any
1116:29 - data set is make a scatter plot
1116:35 - so yeah amazing word costume
1116:39 - now
1116:40 - um who asked that question about
1116:42 - aligning
1116:45 - i did
1116:47 - great great let's dig into that because
1116:49 - i agree i agree this this apparently
1116:52 - uses the built-in axis of you know from
1116:54 - d3
1116:56 - which is not the same as the data points
1116:59 - and so makes you wonder you know for a
1117:01 - given dot
1117:03 - what year is that
1117:04 - right and i agree that that's a that's a
1117:06 - good that's a good issue
1117:10 - that i want to see fixed
1117:15 - i'm just scrolling through to see
1117:18 - what is actually going on
1117:21 - here's the x-axis
1117:23 - so if we just comment out that
1117:27 - oh i forgot the dot call line
1117:30 - if we just comment that out
1117:33 - it renders without the axis
1117:36 - which is fine
1117:40 - although i kind of like i kind of want
1117:42 - to keep
1117:44 - the visual elements of the axis
1117:50 - um so i'm just thinking how could we do
1117:52 - this
1117:54 - we could
1117:55 - do some
1117:56 - other rendering logic
1117:58 - where we we render these tick tick marks
1118:01 - ourselves
1118:04 - or
1118:04 - we may be able to configure d3 axis with
1118:07 - a set number of points
1118:13 - i believe we can do that
1118:17 - let me just consult the d3 documentation
1118:20 - yeah i think so
1118:26 - ticks
1118:34 - so
1118:35 - yeah the nature of the tix
1118:39 - method
1118:42 - is
1118:45 - not just one
1118:50 - format
1119:01 - see this is the format that we're using
1119:06 - like 10.
1119:12 - and then oh
1119:16 - put something in the chat
1119:17 - oh which jet
1119:21 - google me
1119:30 - nice
1119:36 - so i'll copy it from the chat and take a
1119:38 - look
1119:43 - this is i'm pasting from the chat
1119:48 - c dot tx6 i still don't think this will
1119:51 - do what we need
1119:52 - because what i'm thinking is
1119:54 - we may be able to pass an array of
1119:57 - specific values
1119:59 - into ticks
1120:00 - that's what i'm trying to figure out
1120:03 - see this this one here
1120:07 - you it this passes in an array to ticks
1120:11 - which leads me to believe that i think
1120:13 - we can pass in an array of of dates
1120:17 - so let's just try it
1120:20 - instead of passing in ticks
1120:22 - 10
1120:24 - what if i pass in
1120:27 - an array that has
1120:28 - just a single date
1120:32 - where it's like uh the year 2000
1120:37 - does that show up no
1120:44 - if i get rid of the formatter
1120:48 - no
1120:53 - do i huh
1120:58 - i'm pretty sure there's a way to specify
1121:05 - oh look here it is sorry to set the tick
1121:07 - values explicitly use access dot take
1121:09 - values
1121:10 - yeah yeah yeah this is what we need this
1121:13 - is what we need
1121:14 - all right let's try that
1121:18 - so i'll just undo to where it was before
1121:24 - and then
1121:27 - what if we say dot tick values
1121:32 - and here we pass in a new date
1121:36 - year 2000
1121:41 - boom that works
1121:44 - see
1121:46 - right it says 2000.
1121:48 - and so now what we need to do to
1121:50 - implement your idea is to just isolate
1121:53 - the
1121:54 - unique dates that appear in the data
1121:58 - which should be relatively
1122:00 - straightforward
1122:04 - let me see what is the structure of the
1122:07 - data
1122:11 - well we already have x value
1122:16 - which is perfect and i think this is the
1122:18 - function that we need right here
1122:21 - data.map a function that just returns
1122:23 - all the x values all the dates
1122:26 - or for that matter
1122:30 - for that matter we can um um
1122:33 - wait a minute wait a minute i was just
1122:36 - thinking could we use x scale domain no
1122:38 - we can't because that's the extent of it
1122:40 - which we don't want
1122:42 - so i'll just try this if i copy that
1122:46 - down into the place where we put
1122:49 - new date
1122:54 - that does the trick
1123:00 - awesome that was success that's
1123:02 - impressive
1123:04 - great
1123:06 - beautiful yeah this is exactly
1123:10 - what you were describing and i think it
1123:12 - is a very nice improvement
1123:14 - to the viz because now you know exactly
1123:16 - what year
1123:17 - each of these are and it's kind of
1123:19 - surprising
1123:21 - which years they selected i mean it
1123:23 - doesn't seem to make any sense
1123:25 - there's not really any
1123:28 - pattern to it
1123:34 - is there
1123:35 - i mean
1123:36 - i think it's every three years since
1123:38 - 1999 every three years
1123:41 - yeah yeah
1123:42 - with one listen
1123:44 - in 1988
1123:54 - interesting
1123:56 - i wonder why they chose every three
1123:57 - years
1124:01 - well i guess that's the census every
1124:02 - three years
1124:04 - interesting
1124:11 - oh i see there's a message in the chat
1124:14 - from
1124:17 - people's feelings you want to describe
1124:19 - that
1124:22 - oh yeah this is i was working on a
1124:23 - similar thing i don't know if this is
1124:25 - directly pertinent but just in case you
1124:27 - wanted to look at it
1124:32 - nice it's
1124:33 - the same as the earlier approach you
1124:35 - looked at
1124:37 - what is the
1124:39 - approach
1124:42 - because it's a scatter plot and it
1124:44 - references a cell this is from
1124:46 - observable hq so tornado years is an
1124:49 - array
1124:52 - but this
1124:54 - this i mean this will create an axis
1124:56 - that just has the ticks that are defined
1124:58 - by
1125:00 - the like default tick generator
1125:03 - setup so i don't think it actually
1125:05 - addresses the issue that we were having
1125:08 - oh sorry where because yeah we the issue
1125:11 - that we wanted to do is is make it so
1125:14 - that it's not just
1125:16 - like every year or every 10 years or
1125:18 - every five years but it's actually just
1125:20 - the ticks from the years that are
1125:21 - present in the data
1125:27 - but yeah thank you thanks for that
1125:30 - can you have as well default labels
1125:34 - default labels how do you mean
1125:37 - so
1125:38 - i was i was experimenting with something
1125:40 - and i felt completely
1125:42 - um say for example you have a a
1125:45 - categorical variable you want to you
1125:48 - want to show but one way of showing that
1125:50 - is assigning
1125:52 - numerical values
1125:54 - for those say zero and one
1125:56 - and by and by adding jitter you allow
1125:59 - the points not to
1126:01 - position themselves over each other but
1126:03 - then i got stuck with the actual label
1126:06 - on the axis because then they display
1126:08 - zeros and ones and and i want them to
1126:10 - display back those categorical
1126:13 - strings
1126:16 - is this something invis hub that we
1126:18 - could look at
1126:21 - i've
1126:21 - i failed completely to put it into his
1126:23 - home
1126:25 - oh it's not there
1126:26 - okay it's not it's not i apologize it's
1126:28 - just an idea in my head
1126:30 - i see but you tried it you tried
1126:32 - something
1126:34 - i
1126:35 - for for the exercise i wanted to
1126:37 - represent
1126:38 - data from the titanic and i wanted to
1126:41 - show
1126:42 - those uh say different
1126:45 - deck levels but i want to show them as
1126:48 - numerical values with a little bit of
1126:50 - random jitter so the points don't
1126:52 - position
1126:54 - but i wanted to add the labels in and i
1126:56 - kept turning in my head and i felt
1126:58 - completely i didn't know where to to
1127:00 - start from really reading
1127:01 - that is basis of my question
1127:04 - like a label over each point of the
1127:07 - scatter plot
1127:09 - uh like the current scatter plot we have
1127:12 - but instead of saying 2005 you you you
1127:14 - want to say say for example the
1127:17 - financial collapse year you you may want
1127:19 - to label that financial collapse instead
1127:21 - of 2008.
1127:24 - so i think what you're describing it's a
1127:26 - lot like
1127:28 - species
1127:29 - right
1127:33 - where you have discrete values and you
1127:35 - want to map them to some x y
1127:38 - like this
1127:41 - yes
1127:42 - so suppose in your data set those
1127:45 - species were represented by three
1127:47 - different numbers
1127:48 - one two and three right but when you
1127:50 - want to display the access label you
1127:53 - want that they you want that access to
1127:56 - display the actual species strings
1127:59 - oh oh i see what you're saying well in
1128:01 - that case you could do a data
1128:02 - pre-processing step
1128:04 - where
1128:05 - before you pass the data into the
1128:07 - visualization code
1128:09 - you can just replace those numbers with
1128:11 - the strings
1128:13 - in the data
1128:16 - but then i would lose that bit of jitter
1128:19 - i would have on those values
1128:23 - so they say
1128:25 - i i
1128:26 - i
1128:27 - encountered the same challenge and you
1128:29 - know um
1128:31 - and
1128:32 - i was able to i don't know if that's the
1128:35 - correct approach but i was able to add
1128:37 - jitter to a scale point
1128:42 - even though it was a discrete variable
1128:46 - um
1128:47 - it it's it a current if you want to to
1128:50 - show my example it's in in in the
1128:53 - in the forum and i think it addressed i
1128:55 - i believe it addresses this this issue
1128:58 - oh great is it in here in this thread
1129:01 - yes
1129:04 - that's the one oh this one
1129:06 - ah let's take a look
1129:12 - very so
1129:13 - if you put the the continent in the
1129:17 - y-axis
1129:19 - and the date inscribed in the x-axis
1129:23 - there's a little bit of jitter big and
1129:26 - that way it's not
1129:28 - like a like in the in the setosa example
1129:31 - in the in the flower example it's not
1129:33 - like on the same exactly exact line
1129:37 - this is brilliant
1129:38 - exactly exactly
1129:40 - so how did you do it
1129:43 - uh look the the
1129:45 - y scale i believe i i added some at
1129:48 - random there
1129:55 - at some point so it's not in it's not in
1129:57 - the scale definition it could be in the
1130:00 - is it in the y value accessor perhaps
1130:04 - i don't know i i you know i i look for
1130:06 - examples yeah it took me a time a while
1130:09 - to figure out you know
1130:10 - i uh i borrow it from somewhere so i
1130:13 - don't remember exactly where i put it so
1130:15 - it's not there it must be it must be in
1130:18 - the rendering
1130:21 - yes
1130:24 - wow let me just search for a random
1130:27 - there it is yeah it's right in the
1130:29 - rendering logic see that makes it that
1130:31 - makes perfect sense and that's how i
1130:32 - would have done it as well
1130:35 - yeah i see now i see
1130:38 - yeah so right before you render it to
1130:40 - the point
1130:42 - add the jitter
1130:43 - which is just a random number times 10.
1130:49 - however
1130:51 - math.random you have to understand it
1130:54 - varies between 0 and 1.
1130:57 - and so
1130:57 - this code here
1130:59 - will jitter the points
1131:02 - only in one specific direction
1131:05 - meaning it's it's gonna it's going to be
1131:06 - the original x
1131:08 - or greater
1131:09 - so it's going to be some place between
1131:11 - the original x and the original x plus
1131:14 - 10.
1131:16 - normally jitter
1131:18 - would um
1131:20 - would move it in both directions
1131:23 - and the way that
1131:24 - you can do that
1131:26 - oh it's i have to fork this to edit it
1131:34 - and another just another side point i
1131:36 - want this hub to show the previous
1131:38 - authors too because it looks like i made
1131:39 - this but it's not my work so that's one
1131:42 - thing i want to address
1131:45 - but
1131:47 - the way that you could do that
1131:53 - is something like -5
1132:03 - so then it would
1132:05 - it would be x plus or minus five
1132:08 - randomly
1132:12 - and in general that would be like
1132:16 - if you could you could if you wanted a
1132:17 - variable
1132:18 - for jitter
1132:20 - you could make it like that and say
1132:22 - random times jitter minus
1132:25 - jitter divided by two
1132:31 - yeah jitter is an interesting technique
1132:35 - just adding adding random variation
1132:38 - and
1132:40 - this one actually if you were to put a
1132:42 - bunch of points and jitter them like
1132:43 - this
1132:44 - what you would see is a square
1132:47 - not a circle
1132:49 - because it varies them in x and y in a
1132:51 - square
1132:53 - i've seen other people do jitter
1132:55 - with
1132:56 - such that when you generate you would
1132:58 - see a circle and so then
1133:00 - what you want to do is compute
1133:02 - a random angle and a random distance
1133:05 - from that angle
1133:07 - and do the jitter like that
1133:10 - that sounds difficult
1133:12 - it's it's not that bad
1133:18 - i mean you just need some sine and
1133:20 - cosine
1133:22 - it's easier to just create a function
1133:24 - for for this right
1133:31 - yeah
1133:33 - actually that's not a bad idea
1133:37 - yeah because there's duplicated logic
1133:40 - which is unfortunate
1133:46 - so we can call this jitter
1133:49 - magnitude
1133:52 - and we can make a function
1133:57 - it's just a number
1133:59 - and then we
1134:00 - just do the jittering of that number
1134:06 - and so that way we can say
1134:08 - d is
1134:09 - jitter of d dot x
1134:12 - and then jitter of d dot y that would be
1134:16 - one way to
1134:17 - do it
1134:18 - um
1134:21 - uh you're defining jitter for the jitter
1134:23 - it's a recursive i whoops this one
1134:26 - i forgot to change the name
1134:31 - ah there we go
1134:39 - yeah jitter is an interesting technique
1134:42 - but
1134:43 - there's another technique that i like
1134:44 - which is the force layout
1134:47 - and in certain cases the force layout
1134:50 - could be better than the jitter and this
1134:53 - comes back to
1134:57 - this notion that you mentioned
1135:03 - here it is
1135:05 - yeah
1135:09 - so in the original question
1135:11 - it was like how do we how do we split up
1135:14 - how do we split the points
1135:16 - jitter is one option but with jitter
1135:20 - there's still a high probability that
1135:21 - they're going to overlap each other
1135:24 - however if you use d3 force with the
1135:27 - collision constraint
1135:29 - um
1135:29 - it has a similar effect to jitter but it
1135:32 - guarantees that there's not going to be
1135:34 - any overlap
1135:36 - and this this could be
1135:38 - a really nice option as well
1135:40 - yes especially because my purpose was to
1135:44 - like visualize each else that you were
1135:47 - able to visualize each element each
1135:50 - retouch element so i think that this
1135:52 - solution is more proper to accomplish
1135:55 - that goal
1135:57 - yeah i think it's it's more
1135:59 - accurate in a sense
1136:02 - as well i'm trying to find a good
1136:04 - example
1136:05 - it gives a better sense where points
1136:07 - cluster at specific places as opposed to
1136:10 - jitter
1136:12 - yes
1136:14 - yes because for example in my in my in
1136:16 - my case i i wanted to show how in europe
1136:21 - there's a disproportionately amount of
1136:25 - heritage elements and and you can't
1136:27 - really see that in this version because
1136:31 - because as as current says there's a lot
1136:34 - of overplotting in in europe
1136:38 - right
1136:44 - yeah yes if you did the b swarm on this
1136:48 - layout
1136:51 - or maybe this one
1136:54 - that would be a very that if yeah i
1136:56 - would suggest to try that to try the
1136:58 - force layout the force directed layout
1137:00 - with the collision constraint for this
1137:03 - exact view without the jitter
1137:05 - that way
1137:06 - you would see that like with this this
1137:08 - really dense area here in europe it
1137:11 - would actually
1137:12 - spread up and down
1137:14 - it would give you a a visual up and down
1137:17 - spread so you could really see the the
1137:20 - quantity like the density of the points
1137:23 - much more clearly than in this view
1137:27 - yeah that would be
1137:28 - similar to sort of a quasi quasi-dot
1137:31 - plot
1137:32 - yes
1137:35 - yes
1137:36 - and and also almost reminiscent of um
1137:38 - like a violin plot
1137:45 - but yeah this is really nice work so i'm
1137:47 - curious did you see any insights from
1137:49 - the data
1137:50 - in here that surprised you
1137:53 - well that's the main insight
1137:56 - that i put because i i read the that
1138:01 - before the 90s
1138:03 - there was a
1138:05 - like
1138:07 - a really disproportionate amount of a
1138:10 - cultural and natural heritage sites
1138:13 - in europe and there was less of a
1138:15 - presence in latin america
1138:18 - africa
1138:19 - and other parts of the world but
1138:22 - but you can't really see see that with
1138:25 - these visualizations you know
1138:28 - and it was surprising maybe it's because
1138:30 - of this visualization doesn't show it
1138:32 - but
1138:33 - but i didn't really see that
1138:35 - that a temp temporal trend
1138:38 - with this visualization but but indeed
1138:41 - europe has like them the most every
1138:44 - touch size sites declare
1138:46 - by unesco
1138:49 - so that's the main insight you know
1138:52 - i see
1138:53 - i want to try i guess that
1138:55 - other thing i thought that i really
1138:57 - loved about this plot just from an
1138:59 - artistic standpoint was
1139:01 - that
1139:02 - how it showed the world map
1139:05 - oh yeah indirectly
1139:07 - yes yes
1139:08 - indeed in the readme section i i said
1139:11 - that it's really a map but but i like i
1139:15 - don't
1139:16 - i haven't learned yet how to make it
1139:19 - but
1139:19 - but because i use latitude and longitude
1139:21 - it really it's it resembles the
1139:25 - the geographical points
1139:28 - yep
1139:30 - totally
1139:34 - yeah i i can talk a little bit about
1139:36 - about how to actually make it a map
1139:39 - but first
1139:40 - i kind of want to try tweaking
1139:43 - some of the things that we have
1139:44 - available to us to tweak
1139:47 - to to show more clearly the things that
1139:49 - you're describing
1139:53 - one thing is if we pull the opacity way
1139:55 - down
1139:58 - that helps to show density in europe see
1140:01 - that
1140:02 - right yes definitely
1140:06 - and then
1140:07 - if we do it
1140:10 - by continent and date
1140:18 - i want to try
1140:21 - making the radius more
1140:27 - so instead of a radius of 5 let's say a
1140:28 - radius of 20.
1140:34 - oh see
1140:36 - ah this is
1140:37 - this is one thing where like the next
1140:39 - version of this hub i want to be able to
1140:41 - tweak the radius but have it remember
1140:43 - which things i selected
1140:45 - you know what i mean
1140:51 - now
1140:55 - maybe that's a little too big let's say
1140:57 - 15
1140:58 - but then i want to bring down the
1141:00 - opacity even more like .05
1141:11 - now we can see a little more clearly
1141:15 - how dis disproportionate the density is
1141:17 - in europe
1141:20 - and if that's the thing you want to
1141:21 - highlight it's it's currently confounded
1141:23 - with the colors
1141:26 - it's hard to tell
1141:28 - based on the colors
1141:30 - so
1141:31 - just to tease out that one thing
1141:34 - if i just make them all black
1141:43 - oh whoops that should be date continent
1141:47 - now you can see it more clearly see
1141:50 - yes definitely
1141:52 - right
1141:57 - man i'm it's impressive how it gets
1141:58 - almost completely black
1142:02 - it's a heritage x-ray
1142:05 - is there a way you could also
1142:08 - filter on the counts and then
1142:11 - switch up the color once it hits a
1142:14 - threshold so that it pops
1142:16 - so you could have it red
1142:18 - yeah that's a great idea
1142:20 - to do that
1142:22 - you yeah and hey if you wanted to show
1142:26 - that europe has more
1142:28 - or less the message with this
1142:31 - probably that that's that's the thing to
1142:33 - do is to aggregate it by binning it by
1142:35 - the years
1142:38 - and then maybe applying some smoothing
1142:40 - even
1142:42 - and then you would have um
1142:44 - an aggregated view where you could apply
1142:47 - a threshold of say if it's more than 100
1142:50 - per year make it red or something so it
1142:53 - really pops
1142:54 - yeah that could totally work and to do
1142:56 - the binning you could leverage d3
1143:00 - histogram i think it might have been
1143:02 - renamed to d3 bin
1143:06 - or is it banned
1143:10 - no it's not banned
1143:13 - it's
1143:14 - ah it's bin this is the one so this this
1143:17 - example
1143:18 - is a normal distribution of like a
1143:20 - thousand points oh sorry i lost it
1143:26 - and then what it's doing is it's
1143:29 - it's calculating the number of points
1143:31 - that fall into each
1143:32 - bin
1143:33 - each bucket and in this case each bin is
1143:36 - like
1143:37 - 0.5 or 0.05
1143:40 - or
1143:41 - here's 0.4 0.5
1143:46 - so 0.05 is the the width of the buckets
1143:48 - but you could
1143:50 - bin by the years
1143:53 - and so yeah that's that's one thing i
1143:55 - would suggest to try is binning by year
1143:59 - and another thing that now that i'm
1144:02 - looking at the visualization i i think
1144:04 - that that it it doesn't reflect the
1144:08 - message
1144:09 - uh so clearly
1144:12 - uh because it
1144:14 - i mean the main message is that for
1144:16 - example asia that's a continent with a
1144:21 - a bigger population than europe
1144:24 - has significantly
1144:26 - lower heritage sites so their culture is
1144:29 - not being like highlighted by unesco
1144:32 - as much as europe and and because
1144:35 - the population for example it's not
1144:37 - being considered in this vist you don't
1144:39 - really see that disproportionate a
1144:42 - reality you know
1144:44 - yes
1144:47 - this is so maybe i i i should i should i
1144:50 - should have done that data a
1144:52 - transformation before to to highlight
1144:55 - that disparity
1144:57 - but those are the kind of things that
1144:59 - i'm thinking now when when i hear about
1145:01 - you guys
1145:04 - yeah taking the population into account
1145:06 - would be quite interesting
1145:08 - as well
1145:11 - why africa was doing much better in the
1145:14 - 60s compared to later years
1145:18 - that's a great question i don't know
1145:21 - but that's a great question
1145:26 - so 1980 there's a lot more heritage
1145:29 - sites defined in the 80s
1145:31 - and by the way this this number
1145:32 - formatting is not right that's something
1145:34 - we could fix
1145:39 - see
1145:40 - in the um
1145:46 - see why type
1145:50 - what is y type for the so i'm i'm
1145:52 - looking at the problem of the number
1145:54 - formatting and i'm thinking to myself
1145:56 - those should actually be just
1145:57 - represented as years without the comma
1146:00 - right and this actually is i'm glad you
1146:02 - did this because
1146:06 - it highlights the fact that we need
1146:08 - another type which is which is right i
1146:11 - just put it quantitative like date as
1146:14 - quantitative not as date exactly
1146:18 - oh i'm so happy that that this happened
1146:21 - yeah so now we can actually do that next
1146:23 - step which is the the complete the
1146:25 - completion of this generic scatter plot
1146:27 - make it handle quantitative categorical
1146:30 - and
1146:31 - time
1146:33 - or dates
1146:35 - uh what is the type of that i'll just
1146:37 - call it
1146:38 - time
1146:41 - and if it's time we need to have
1146:44 - a time
1146:46 - format
1146:49 - which is how we parse it
1146:58 - zan armstrong has this really great
1147:01 - time formatting example
1147:03 - so the specifier for the time parsing
1147:06 - would be
1147:07 - if it's just year it would be this one
1147:10 - percent y
1147:15 - and i'm pretty sure that's what it is in
1147:16 - the data
1147:17 - if it's showing up like that
1147:20 - and so now let's actually do this work
1147:22 - of making it work with time
1147:26 - so
1147:27 - let me get more space for the code
1147:36 - so we're looking at just x
1147:40 - if x type is categorical
1147:42 - then do this
1147:45 - otherwise
1147:49 - this is where
1147:51 - i want to introduce another
1147:55 - another case
1147:58 - where if x type is
1148:01 - time
1148:02 - then
1148:04 - do their switch and case for
1148:06 - javascript
1148:08 - oh yeah we could do that
1148:10 - we could do that yeah as we add more of
1148:11 - these it's getting a little cumbersome
1148:13 - to use this
1148:15 - this ternary operator
1148:18 - yeah that could work
1148:21 - but i feel like this is pretty close i
1148:22 - mean we're pretty close
1148:24 - to having just one type it doesn't make
1148:27 - sense to
1148:28 - create another logic for this yeah but
1148:31 - at this juncture i mean it's a good
1148:33 - thought and and what i would do is
1148:36 - get it working
1148:38 - first with the minimal effort
1148:41 - and then after we run prettier on that
1148:44 - then we make the call like is this ugly
1148:46 - enough to merit a refactoring where we
1148:49 - use the case switch
1148:51 - and then we would we could write it with
1148:53 - the k switch and see how it looks and
1148:54 - that might turn out to be more more code
1148:56 - more complicated
1148:59 - so yeah it's a good thought it's a good
1149:01 - thought but let's try to get this to
1149:03 - work
1149:04 - so it would be exactly the same as
1149:07 - scale linear except
1149:11 - that
1149:13 - it would be scale time
1149:17 - which we need to import from d3
1149:23 - and now that i think about it we may not
1149:25 - need to
1149:28 - specify the time formatter
1149:31 - if the data is already parsed into dates
1149:36 - which i'm not sure if it is
1149:38 - let's see where's the data loaded
1149:48 - where is the data
1149:59 - await oh parse row parser where's that
1150:04 - here it is
1150:06 - yeah yeah yeah
1150:08 - so this is where we can say
1150:12 - instead of just parsing the string into
1150:16 - a number like this
1150:18 - we can use time parse
1150:23 - or
1150:24 - yeah
1150:27 - we need to come up with a parse date
1150:29 - function that we can pass in
1150:31 - that string
1150:34 - and the way we can use um
1150:37 - d3 time format
1150:39 - or no i'm sorry time parse
1150:44 - and then we can use that
1150:46 - percent y
1150:47 - to parse those into dates
1150:52 - and we need to import time parse from d3
1150:59 - and let me just see if it's working by
1151:01 - logging these out
1151:16 - okay they appear to be dates that's good
1151:22 - and
1151:24 - yeah i think i implemented all the all
1151:26 - the logic let's see if it works
1151:31 - it does see that
1151:34 - awesome
1151:36 - this is great yeah this so now we have a
1151:39 - truly generic
1151:40 - scatter plot
1151:42 - that can handle dates as well but we're
1151:45 - not quite done yet
1151:48 - because
1151:52 - the code is kind of a mess i'm going to
1151:54 - run prettier on it
1151:59 - yeah i mean
1152:03 - it's okay
1152:05 - but it is a little cumbersome
1152:07 - with with two levels
1152:10 - of this
1152:12 - um you were asking about the switch
1152:13 - statement
1152:15 - let me see what time it is oh it's noon
1152:18 - yeah let's try the switch statement
1152:27 - i always like to look at mdn for
1152:29 - examples
1152:30 - this is what the switch statement looks
1152:32 - like in javascript
1152:38 - so let me copy this and try it out
1152:48 - okay so if we use a switch statement
1152:50 - we're going to have to use
1152:53 - let
1152:54 - so i'll comment this out for now
1152:57 - and let's just see how this plays out if
1152:58 - we do use the switch statement
1153:03 - let x
1153:07 - and then we are switching on
1153:10 - x type
1153:12 - and if the case is
1153:14 - categorical
1153:16 - then we say x equals
1153:21 - this one here
1153:25 - and then
1153:27 - if x type is time
1153:30 - then we use
1153:33 - this one here
1153:35 - x equals that
1153:37 - break
1153:38 - we need to put these break statements
1153:40 - otherwise it continues down to the next
1153:41 - one
1153:44 - and then
1153:46 - finally
1153:49 - if it's
1153:53 - quantitative
1153:55 - uh which we're not even explicitly
1153:57 - stating here we're assuming that if it's
1153:59 - not categorical and if it's not time
1154:01 - it's going to be quantitative
1154:03 - i think that's fine the yeah
1154:07 - yeah we could so we can use the default
1154:08 - here
1154:10 - okay
1154:11 - yeah and then
1154:13 - to the last case is this one
1154:16 - x equals
1154:17 - scale linear
1154:21 - and i'll try prettier on this
1154:24 - this is what we get
1154:26 - and let's see if it still works
1154:29 - oh there's something
1154:32 - we didn't
1154:34 - we didn't assign it back to the x-axis
1154:37 - we didn't assign the new x
1154:39 - back to the i think we also need to
1154:41 - assign that range
1154:44 - which we did oh i missed the range i
1154:47 - missed the range ah that's what it is
1154:49 - good catch
1154:52 - so yeah the way that this works is
1154:54 - the return value from this expression
1154:57 - is you know it's the value of x and then
1154:59 - we say dot range so what we can do is
1155:02 - just say
1155:03 - x dot range like this
1155:10 - okay
1155:12 - that works
1155:15 - yeah
1155:16 - great and so now
1155:20 - it's up to us to decide
1155:22 - which version
1155:24 - is more
1155:26 - aesthetically pleasing
1155:35 - yeah in this case maybe the
1155:37 - if and else makes sense but maybe if we
1155:40 - increase the number of
1155:42 - of options then
1155:44 - switch would be better
1155:47 - i i guess i don't know
1155:50 - yeah i like the case
1155:53 - i i was wondering just from uh
1155:56 - i don't know this style
1155:59 - um works in javascript but
1156:02 - could
1156:03 - when
1156:04 - type is passed in could that
1156:06 - automatically call a function
1156:10 - that would
1156:11 - render
1156:12 - uh
1156:13 - that logic
1156:15 - for the x assignment
1156:18 - oh yeah i know in other line
1156:19 - other languages where you just so so
1156:22 - that you don't have anything there
1156:24 - and that each of those would be a
1156:26 - function of itself
1156:29 - oh yeah i think
1156:31 - i think it may be complicated by the
1156:33 - fact we have different types of domains
1156:35 - depending on
1156:37 - those different scales
1156:41 - and actually i like the idea of
1156:43 - abstracting it out into a function that
1156:44 - way we could call the same function for
1156:46 - x and y
1156:49 - and we can we don't need to put x and y
1156:51 - in our in our stuff so we can just have
1156:53 - it a function of type
1156:57 - and
1157:01 - data
1157:02 - and
1157:05 - value
1157:07 - which is going to be the accessor
1157:11 - and in this case
1157:13 - we can just move this
1157:16 - into the function
1157:18 - and then instead of instead of x we can
1157:20 - call it scale
1157:23 - and then we can switch on type
1157:27 - and then instead of x value we can use
1157:29 - value
1157:31 - all these places
1157:34 - oh type is not a reserved word here
1157:38 - i don't think it is no in javascript i
1157:40 - don't believe
1157:42 - i don't believe type is a reserved
1157:43 - keyword
1157:45 - okay
1157:50 - and then we can return it at the end
1157:54 - and then
1158:00 - all we have to do is say x equals
1158:03 - compute scale
1158:06 - x type
1158:08 - data
1158:10 - and x value
1158:20 - and that still
1158:23 - seems to work
1158:28 - and then once we've done that
1158:30 - we can use it for for y as well
1158:34 - so we actually get rid of a bunch of
1158:36 - code which is great
1158:43 - but the question remains when we
1158:44 - implement that function
1158:48 - should we use switch
1158:50 - or this other thing i mean it doesn't
1158:52 - really matter but this is the process
1158:54 - that you that you go through and this is
1158:56 - what i wanted to
1158:58 - also convey in this in this course is
1159:00 - like what is the process of writing code
1159:03 - you have to make so many decisions
1159:04 - evaluate things based on efficiency but
1159:07 - also
1159:08 - you know aesthetics
1159:10 - and you could do the same thing with if
1159:12 - else
1159:13 - if
1159:14 - you know
1159:15 - you could go on and on trying different
1159:17 - ways and i actually do that when i write
1159:19 - code i spend time evaluating all
1159:21 - possible ways of doing one thing
1159:24 - and then getting them all to work
1159:26 - and then looking at the code from a
1159:28 - number of angles you know how easy is it
1159:30 - to read if i give it to somebody else in
1159:32 - the future how easy is it going to be be
1159:34 - able
1159:35 - to be understood
1159:37 - by someone else and also how efficient
1159:39 - is it does it create additional new
1159:41 - objects that you don't need to does it
1159:43 - need to be optimized
1159:46 - anyway these are all considerations um
1159:50 - yeah
1159:51 - so
1159:52 - in your
1159:53 - switch
1159:55 - scale is assigned once
1159:57 - yet you still have to declare it as let
1160:03 - because it's going to go past
1160:05 - one of these cases only and it's going
1160:07 - to be assigned once but we still have to
1160:10 - declare it as lead
1160:13 - not const
1160:16 - i believe so yes if you have the
1160:20 - um
1160:21 - well actually let's do some experiments
1160:23 - with that
1160:25 - if we don't declare it there and we
1160:26 - declare it here
1160:28 - i'm not sure
1160:30 - if that would work
1160:32 - i'm not sure what the scoping rules are
1160:35 - for for the switch statement
1160:41 - but it says it gives us an error that
1160:43 - says the identifier has been already
1160:45 - declared in the same scope
1160:49 - so this approach would not work
1160:52 - i see and thank you
1160:54 - if you
1160:55 - if you use const here that's also not
1160:58 - going to work oops
1161:02 - that's also not going to work because
1161:08 - oh well you need to assign a const uh
1161:11 - when it's declared
1161:13 - but here's here's another approach that
1161:15 - could work if you don't define any
1161:17 - variables
1161:19 - you could just
1161:20 - return them
1161:25 - like this actually this this simplifies
1161:27 - the code quite a bit
1161:29 - then we don't need the breaks because
1161:31 - when we return it's implicitly breaking
1161:34 - out of the whole function
1161:40 - however we need to pull out the setting
1161:41 - of the range to be outside this function
1161:48 - which is again duplicated logic down
1161:50 - here
1161:51 - we'd have to do it twice
1161:53 - so that's sort of a dead end i would
1161:55 - rather not do it like that
1162:08 - ah
1162:11 - so let's see is it still working
1162:14 - there seems to be some problem
1162:17 - oh i set the range or what happened
1162:21 - sorry
1162:33 - somehow it got messed up
1162:50 - that's odd it was working a second ago
1162:56 - is it because we missed the brakes again
1162:59 - no
1163:00 - the brakes are there
1163:03 - is it because like the range takes this
1163:05 - width thing like but for my skin you
1163:08 - would need like
1163:13 - yeah that's it oh good catch
1163:17 - good catch
1163:19 - so in that case
1163:22 - maybe we do want to use the return
1163:26 - approach and then set the range
1163:28 - separately that's what it is that's
1163:30 - exactly what it is
1163:32 - so the range for the y scale is going to
1163:34 - be
1163:37 - well let me just see what it was in the
1163:40 - one that i forked it from
1163:43 - i
1163:44 - accidentally assumed that the range
1163:46 - would be the same across each but it's
1163:48 - not
1163:55 - that's the right range
1163:57 - yeah that's right
1163:59 - and then
1164:04 - now we can just use return
1164:09 - but let me keep this around as a
1164:11 - reference
1164:22 - so this is option three
1164:25 - this is
1164:29 - option two
1164:33 - and i was just thinking to myself
1164:35 - if we're going to use a return
1164:38 - we may as well just use if statements
1164:42 - which might be even more clear to read
1164:44 - if
1164:45 - type equals
1164:48 - categorical
1164:52 - then
1164:55 - return
1164:58 - this kind of a scale
1165:01 - and since we return it we don't need to
1165:03 - use elf
1165:04 - we know if we don't need to use
1165:06 - else
1165:07 - we could just have another if
1165:12 - so if it's time then we can return
1165:15 - this one
1165:19 - and then
1165:22 - if it's nothing else then we can fall
1165:24 - through to the default of the linear
1165:26 - scale
1165:32 - so
1165:34 - this also works
1165:38 - as an alternate way of doing it
1165:51 - so yeah it's up to you it's a stylistic
1165:54 - choice
1165:55 - um i personally kind of like this just
1165:57 - because it's only
1165:58 - a couple lines
1166:00 - one two three four five six
1166:02 - however it could be cryptic for others
1166:04 - to read if you hand it off to somebody
1166:06 - else
1166:07 - so maybe maybe this is the best choice
1166:10 - or maybe this is good i don't know it's
1166:12 - it it's a it's a very subjective choice
1166:20 - but yeah this this has been fun really
1166:22 - nice work
1166:29 - and i like how how all of these
1166:32 - i mean this visualization as well as the
1166:34 - one that kostov worked on it highlights
1166:36 - social inequality issues which i think
1166:38 - is a very important
1166:40 - topic area to address with data
1166:43 - visualization in particular because it
1166:45 - really makes clear
1166:47 - things that are
1166:48 - in the data they're clear in the data if
1166:50 - you look at the data in the right way
1166:57 - and so yeah i think this is a valid
1166:58 - point like why is why are there so many
1167:00 - world heritage sites in europe does your
1167:02 - is europe really the like center of
1167:04 - civilization or is it just you know is
1167:06 - this unesco neglecting
1167:09 - you know other countries out of some
1167:11 - kind of
1167:12 - i don't know racist underpinnings i
1167:14 - don't have no idea i have no idea about
1167:16 - it but
1167:17 - but just to start investing these
1167:19 - investigating these angles is uh
1167:21 - it's great
1167:23 - it's really interesting seeing how
1167:24 - removing colors have brought this much
1167:27 - clearer
1167:28 - right because color itself has a
1167:31 - brightness
1167:32 - value to it it's called there's hue
1167:34 - saturation and luminance in colors and
1167:36 - luminance
1167:38 - is the luminance means how how much
1167:41 - between white and black it is but if you
1167:44 - have hue
1167:45 - um
1167:46 - it confounds the the brightness
1167:50 - i mean
1167:51 - yes and i think it's full circle that
1167:53 - this is get it right in black and white
1167:55 - right and we and we turn the the
1167:58 - visualizations into black and white
1168:00 - exactly finally
1168:02 - exactly
1168:04 - yep
1168:06 - yeah i'm happy it ended up in black and
1168:08 - white turns out black and white is clear
1168:10 - it's more clear and it's the same with
1168:12 - 3d by the way if you see 3d pie charts
1168:14 - 3d scatter plots
1168:16 - it's it's the same kind of thing as
1168:18 - adding color where you just make it like
1168:20 - more flashy but it doesn't really add
1168:22 - any value
1168:23 - most of the time
1168:26 - so yeah as a next step for this i would
1168:28 - suggest trying to do the binning
1168:30 - and the smoothing
1168:31 - and i wanted to show you all this thing
1168:33 - that i built
1168:35 - fairly recently
1168:38 - that that does
1168:40 - exactly that it's a stream graph of d3
1168:44 - contributions
1168:46 - over time
1168:47 - and what it what i did is i took um
1168:50 - d commits commit data from git from
1168:54 - github
1168:55 - um on all the various d3 packages and i
1168:58 - i've been to them by i think weak and
1169:00 - then i applied smoothing and i wanted to
1169:02 - show you the effect
1169:04 - of of changing the smoothing parameter
1169:08 - see if there's no smoothing
1169:10 - it looks
1169:12 - something like this
1169:16 - this is just the raw aggregated values
1169:19 - per week
1169:21 - and i think if you were to aggregate the
1169:22 - data that you have
1169:24 - per year
1169:26 - you would get something kind of similar
1169:28 - to this
1169:30 - but with you know with a different
1169:32 - layout
1169:34 - and you can apply smoothing though to
1169:37 - get a more broad
1169:40 - picture
1169:41 - of
1169:42 - of generally when things increased or
1169:44 - decreased it's a smoothed out
1169:47 - view of it and for this particular
1169:49 - analysis the smoothed out view was much
1169:50 - more useful than the detailed view you
1169:52 - can see clearly okay d3 was developed
1169:54 - monolithically
1169:56 - from 2011 to 2014 and then it was split
1169:59 - into a bunch of packages and then some
1170:01 - new packages were created after that
1170:05 - the the other thing is it gave you
1170:08 - an opportunity to annotate
1170:11 - which she just couldn't
1170:13 - exactly
1170:16 - exactly there's no room for the labels
1170:19 - in the version that's not smooth
1170:21 - exactly yeah
1170:23 - yeah
1170:24 - and even if you hovered over you
1170:26 - wouldn't get the insight
1170:28 - yeah it's tricky to
1170:29 - to hover over each and every one to try
1170:31 - to figure out what it is
1170:34 - yeah
1170:36 - so i forgot what it was originally
1170:38 - 15 maybe
1170:42 - that's cool
1170:44 - so yeah this this one was a lot of fun
1170:45 - to make i had hoped to continue this
1170:47 - series and get to making something like
1170:50 - this
1170:51 - but uh
1170:52 - you know in the future
1170:55 - i'll do it in the future
1170:58 - all right well
1171:00 - i think i'm gonna wrap up
1171:03 - but um
1171:10 - let me see
1171:15 - yeah i'm gonna wrap up thank you all for
1171:17 - joining me for this this ongoing saga
1171:20 - of uh get it right in black and white
1171:23 - with vishub as our
1171:25 - as our tool
1171:26 - and uh
1171:29 - yeah i'll see you
1171:30 - [Music]
1171:31 - in the future sometime
1171:34 - and
1171:35 - yeah feel free to reach out to me
1171:38 - um
1171:39 - if you want to get involved with
1171:41 - upcoming versions of his hub maybe be a
1171:43 - beta tester
1171:45 - and just and let me know if you have any
1171:46 - feedback on viz hub in general or the
1171:48 - way i'm doing the courses ways that
1171:50 - things could be improved
1171:53 - what you've gotten out of it
1171:57 - what things that have been frustrating
1172:00 - i i want to hear it all
1172:02 - um
1172:04 - all right so thank you all fantastic and
1172:06 - he finally thank you so much
1172:08 - yeah my pleasure
1172:11 - thank you queen
1172:13 - thank you
1172:14 - i'll be in touch
1172:15 - all right great and if you want to
1172:17 - support me in the meantime sign up for
1172:19 - this measly four dollars a month and
1172:21 - it'll go a long way
1172:24 - yep done all right thanks everyone
1172:27 - thank you thank you ryan take care thank
1172:29 - you
1172:30 - bye bye
1172:32 - bye

Cleaned transcript:

curran is an expert when it comes to data visualizations this is an edited collection of live streams where current teaches data visualization using d3 so hi everyone i'm curran welcome to this stream get it right in black and white i am super super excited about this this new series which i'm calling get it right in black and white is going to be a long running live stream series and course on data visualization with svg and d3 and maybe other technologies we will weave in in time but that's the theme a little bit about what this course is i'm very excited to begin again from the beginning i have learned a lot from teaching this course in 2018 and 2020 this is the 2018 version of the course which was quite popular and its visualization was d3 this is the 2020 version of the course called dataviz 2020. it was recently published by free codecamp as a giant compilation but having taught this entire course twice now actually three times the first time it wasn't public i've learned quite a lot and one of the main pieces of feedback that i've got from dataviz2020 is that you know that's cool and all but how can i do all that stuff without react so one of the key differences from the last year's version of this is that it's going to be oriented around pure d3 meaning figuring out all these visualization problems purely with d3 but coding it in such a way that if you wanted to you could integrate with different frameworks another key difference is that this is going to be live it's going to be like a tv show about data visualization so you can tune in live to the event i'm gonna have you know youtube chat open and i'll be responsive to that during the event and i'm also inviting a small group of friends and special guests to participate um with me live on the stream with their audio so we can have direct discussions during this event the reason why i'm doing this is because in previous courses i was sitting there all alone making these videos and if i forgot to say something or cover something it would come up only you know a week later that's why i want to have this live element to it this is a great opportunity to explain everything step by step so i'm there's lots of time here i think this series my intention at the moment is to have this series go for about a year so this will be a recurring event every single saturday for a year at this time i mean i might change the time but there's lots of time so there's no need to rush through anything there's no need to skip anything so i want to build up the viewers understanding step by step every step of the way so that's the overall summary of this course so introductions there are a couple here a couple folks here present in audio only via google meet um this is my sort of little uh you know community of collaborators slash learners um you know the idea is that these folks can step in we can have discussions on the fly i can be interrupted and be asked questions to go into more detail about whatever thing is happening so why don't you all just introduce yourselves i think i'll i'll call on you one by one um ideally you want to go first uh sure thank you karum um hello everyone i am adil and i'm very excited to be here i'm based in the uk and i work in the informatics department of a hospital and my work is a bit sequel heavy but i became enamored with d3 a while back and i'm really excited to be learning it uh deeply and yeah i'm really really happy to be here nice welcome a deal um sri ram sharma is also here you want to go sriram sure hi um my name is sriram i used to be a journalist now i'm learning to become a frontend web developer i have been following d3 through current tutorials and uh been a big fan of his database 2020 uh database 2020 and even the 2018 uh series so i'm really looking forward to this uh series as well and just kind of uh learning more from current on d3 as much as possible nice yep welcome shiram and also nita is here you want to go hello everyone my name is nita i'm also very much interested into data visualization and i see this live stream has an opportunity to learn directly from kara and his time is really valuable but he managed to do this trimming so i'm planning on getting benefited from it as much as i can and i hope you also you all also get benefited from it it's really good series is doing all right welcome neeta all right here we go this is episode one of get it right in black and white svg fundamentals what we'll cover today is what is html css and svg adding an svg element to an html page creating circles rectangles and lines adding text in svg and customizing the font with css all right so html hypertext markup language this is the standard that defines the language of web pages that you see on the web every single web page is an html page there's some source code that somebody wrote or that gets generated on the fly that has markup with those brackets and everything and your browser loads that in and it parses that html page and then displays it in your browser so when you go to a url in your browser that makes an http request to some server http means hypertext transfer protocol that's the you know the protocol the networking protocol that web browsers use so the browser makes an http request to some server that server comes back with an http response that has a bunch of text which is html source code and then when that source code gets loaded into your browser your browser parses it meaning it interprets it and then it does a whole bunch of stuff to make the web page appear within the html standard there are apis application programming interfaces that are sort of partitioned off one of them is svg scalable vector graphics another is css cascading style sheets and another is javascript which is often abbreviated js i'll go into detail on each of these a little bit these wikipedia pages are great i would recommend to read them if these are new concepts for you html hypertext markup language it was invented in 1993 28 years ago that's very old by tim bernerslee and it went through many many revisions and each revision introduced a lot of new features right now we're at html5 and this standard is maintained by this group called w3c world wide web consortium so it's an open standard and all these various browsers implement it and this is what a very basic html page looks like and i'll go into more detail later on the specifics css stands for cascading style sheets it is a style sheet language so it's it is its own different language that gets embedded within html and um it it looks um see if i can find an example it looks something like this where inside of a style tag these things are called tags by the way there's an opening tag and a closing tag you can select elements on the page like an h1 element which is a heading one element and you can set a bunch of properties on it like the color and there's many many many properties that you can use this is very useful for styling things on the page and when i say styling i mean changing the color the font the size all sorts of different presentation kind of attributes svg stands for scalable vector graphics so scalable vector graphics it's a way of representing computer graphics that is based on the geometries and the shapes so for example if you have the letter s and you zoom it in with svg because it's vector graphics you don't lose any crispness because the graphics are defined in terms of the geometries themselves points and you know lines that connect the points as opposed to raster images like pngs bitmaps jpegs these are images defined in terms of pixels and a pixel is one of these little squares on your screen um so if you zoom it the pixels will get uh blown up or blurry often when you scale a raster it ends up getting blurry because the rendering engine tries to compensate so that's what happens with raster images when you scale them they get pixelated or blurry that's because they're defined in terms of pixels not the geometries and this is um one of the many reasons why svg is really good for data visualization because if you define a visualization with svg shapes you can for example output that to a pdf and print it out and it's very crisp when you print it in a web browser you can use the browser zoom and scale it and it doesn't lose any clarity that's one huge advantage of svg and also it's generally easy to work with programmatically because it's got this um dom structure which i'll get into but you can you can define um tags essentially in html for these different svg shapes so that's what html is in a nutshell any questions so far sure i was um wondering um svg um elements are they designed to create things that html can't do normally is that why svg exists so the question is um can h can svg elements do things that you can't do in html without svg yes that's right yes that's right um i believe in the early days of html svg was not a part of html and you were limited to things like divs to make shapes and that was it's very limiting to just use divs and css to make graphics on the screen so there are many many many things that you can do in svg that you can't do in html without svg there's a it's it's a massive library essentially of graphics capabilities paths lines areas different ways of blending the colors together all sorts of text utilities um yeah a great many things and and it's svg has a history as an image format as well so um tools like adobe illustrator can be used to create svg image files which if you open up an svg image file you see the text it looks a lot like html it's actually i guess a subset of xml so yeah it does introduce a lot of capabilities to html that that html does not have without svg thank you thanks karen and and we'll get into those the specifics and see what they are so in wikipedia it says svg is an extensible markup language yeah so i'm confused is it's a language itself or it's just a tag in html oh well actually if you read this text carefully it says scalable vector graphics is an xml based vector image format so it's confusing how wikipedia does this but the way to parse it it says it's it's extensible markup language based meaning it's based on xml and xml is is a good thing to know about for context because it defines the structure of svg and html in a sense html it used to be at least a strict subset of xml i think now there's some more language features of html than xml but xml i think came first so the comments that you see in html are derived or inherited from xml the notion of tags with openings and closing is from xml and so what it says in the wikipedia article is that svg is based on xml so you don't have any good example documents there but just the fact that svg is defined in terms of tags that can be nested that's that's all that it means that it's based on xml so htm html is derived from xml yes correct but yeah great question great question i think i'll move on i think sriram has questions oh did you three of them which chat no i just had an observation uh one is that like fonts which we use typically on the browser uh they are vector based um that was kind of like a thing i realized because you can scale up the fonts without losing any quality so that's like a realization that that's a vectorbased format whatever type we import into our files when creating an html file another observation was that in the document formats that use the xml for syntax this includes like rss atom yes so people might have used maybe rss speed readers most likely soap protocols is used more by developers i think were making uh web uh api things like that so that's unlikely but essentially it's just following that same format even html is i think similar to the xml format in a sense yes yep it's very very similar and another thing was that xml was considered to be the way that everything was supposed to be written but then json came in and json has become now the defacto way for applications to talk to each other that's right what has happened is there's been a reversal of fortune because xml is actually two verbose and there's a lot of craft in an xml document which is kind of removed in something like json json is more readable which is why it's become more popular yeah that's true yeah there and i'll get into this when we start getting into like fetching data but there is a a long history to to the idea of um fetching data it used to be that the only like the only way to fetch data into the browser was to use xml files and so that xml text would contain data and nowadays people have migrated to use json instead javascript object notation but yeah long story short nowadays people use json and xml is sort of a thing in the of the past uh except for those little you know legacy systems that still use it like soap is using xml i bet there's still a ton of software that that uses xml as data interchange but for new projects yeah the preference is to use json all right awesome thanks for the questions everyone now let's actually use these things to create some basic shapes with svg now i'd like to get into this segment on creating stuff by writing code and to do this i'm going to use vishub which is this thing that i built over the past couple years essentially to help me teach my courses and i'm trying to evolve it into a business and there it's quite an active community there's you know 5 000 or so unique users over the course of its history and there's a ton of content in here and people are using it every day so this is what i'm going to use for this entire series and you too can use vishub so if you're following along with the live stream or watching this as a video i encourage you to follow the steps that i'm about to do so in vishub to start really using it you have to sign in via github so i'm going to sign into github so now i'm signed in and i can see my profile or create viz so if you click on create vis there are a lot of these templates here the most popular template is just a starter html page which is where we're going to start from today so what i'm going to do next is fork this meaning to make a copy of it that i can modify and you can do the same once you're logged in if you click on this little fork icon you get this little uh popup that says you know choose a name for this vis and i'm gonna say svg fundamentals that's my name so now i've got a copy of this and i can click open editor right here to see this little browserbased ide essentially ide by the way stands for integrated development environment it's not an advanced ide here by any stretch but it lets you edit code right here in the browser so if you click a file it pops open and you can see some details i'm gonna just remove stuff that we don't need um because i really want to sort of start from the beginning here and vishub has all these options to you know reclaim screen real estate a lot of the stuff i built specifically for teaching so here we have a very very bare bones html page now i'm going to get into the details of what is a barebones html page first of all we've got the doctype this is a thing that tells the browser okay this document uses html version five and uh yeah it's not strictly required like i think it would work without it but it's good practice from what i hear to include it so once you've told the browser that we're using html5 then you can open up into this block of html and so i just want to point out that the structure of html is in general you've got an opening tag and a closing tag and a tag is defined by these um greater than less than things here and a closing tag has this slash after the uh this less than symbol right here and once you've got this opening and closing tag pair you can put a bunch of stuff inside it essentially developing a tree data structure and that's what xml is it's really a tree data structure meaning there's nodes and and each node has children so when you define a pair of opening and closing tags that's a that's defining a node a dom node dom means dom document object model so when this html page gets loaded and parsed and it runs in the browser the browser in parsing this and running it creates this thing called the dom the document object model and so this is the document the source code and the document object model is this data structure that gets created from this stuff and so this is the root node of the dom which is a tree data structure and then this root node has two children the head and the body so you can see very clearly here there's the head and the body the head of an html page it defines stuff that sort of uh is not directly visible on the page but may have some side effects uh for example the title tag is a tag that goes into the head and it's i believe it's actually required to to have a valid html document so if you were to have a text file on your machine called index.html and double click it and open it in the browser that the tab would say svg fundamentals and to that point i want to stress the fact that you can do all this stuff without using vishub so let me just show you what i mean i won't spend too much time on this but i want to stress that this is all using standard technologies and there's nothing really viz hub specific about any of this so if i make a new directory called test i'm using linux here and i create a file called index.html and i save this file and then i open up this folder you can see okay there is a file called index.html and if i double click that it opens in the browser and check it out it says svg fundamentals in the tab so that's the role of the title tag see all these different pages they have different text in the tab all of those are derived from the title tag inside of those html pages and then if you right click in the browser you can say view page source you can do this on any web page and it shows you the source code of that page which was just loaded in from this text file on my machine so this little diversion is just to say that you don't have to use vishub per se this is one of the complaints that i've gotten my previous courses like he doesn't tell us how to not use vishub vishub is a tool that makes it easier to get started writing code right away without having to set up a local development environment but for this svg stuff you don't need any development environment you can just double click the file and it should all work in vishub the title tag it feeds into the title of the viz which you see here on the page also invis hub there's a file called readme.md and i'm just going to delete all that stuff this is just where you can add the description of this page i'll type something here like a demonstration of svg shapes so the idea is you can use this readme.md to add a text description to your viz and then um you can close out the editor and then share a link like this just how viz works you can share links to these things with other people and then this page will load up without the editor open all right so now that we've got this basic page here how do we create svg shapes well it turns out you can put svg elements into the body the body is the part of the html document that contains things that end up visible on the actual page so just to give a little preview if we say hello world right here then hello world pops up in really tiny text on the running page and for this sort of thing i like to use the mini mode of vishub which will show the running page right there and i can edit the text over here so to create something with svg we can create an svg element right here in the body so we can have an opening svg tag and then a closing svg tag and this opens up a world of possibilities because within this pair of opening and closing svg tags we can put tags that are not valid outside of svg for example circle we can put a circle right here and again it's all tagged so you have to have opening and closing so we've got circle um not circle i like to phrase a lot of people phrase the closing tag as not so you could say body not body svg not svg circle and then not circle but the circle doesn't actually show because there's no um there's no attributes of it defined and in html attributes are specified like this cx equals 50 cx is the attribute that defines the center x coordinate of the circle in pixels so if we set cx to be 50 and cy to be 50 we still don't have anything showing up because there's no radius defined the radius of the circle you can define with r so if i say r is 50 now we get a circle current yeah can i ask questions um just to recap the an element whether it's a html element or a svg element that is a group of tags is that is that right it's it is the the difference between element and a tag is it is that quite um important to know yeah that's actually a really great point it's it's real oh thank you so much this is what this is so good the distinction between element and tag is is very confusing i feel like a lot of people even folks who have that have been doing this stuff for a long time don't really grok what the difference is so my understanding of what the difference is between an element and a tag is that a tag strictly refers to the text in the source code of the html so this you know when i select this text on my screen that's an svg tag and that's a closing svg tag and then when the page runs in the browser that tag which is part of the source code it's part of the text of the source code all of these tags get parsed by the browser into this tree data structure called the document object model and then in that document object model the instantiation of that object is called the element so this set of tags in the source code when parsed leads to the creation of an svg element and a circle element inside of that svg element and you can see these elements using the chrome dev tools which is a really essential thing so if i right click here on that circle in chrome and click on inspect it opens up what's called the chrome dev tools and you can arrange these or if you like i prefer them at the bottom i'll make it bigger with control plus so you can see here that this is the svg element that's actually instantiated on the page and see when you hover over the svg element that little box appears and that box by the way is the default dimensions of svg when you don't specify width and height you'll also notice that that box is not flush with the edge of of the page so all of these things we will be addressing but yeah to your point the element is what's instantiated in the browser after the page runs the tag is just the text in the source code yeah i think that makes sense say so tags are used to describe what gets created at runtime exactly yes yes that's exactly right thank you thanks correct yep um and and by the way i want to highlight that these chrome dev tools are are so amazing because you can actually edit the dom so if i change cx to say 100 in the chrome devtools the circle moved over and if i change the radius to 500 here it gets bigger it well it fills the entire space of the svg because svg this svg element has the default width and height so we can set the width to be um 960 and the height to be 500 these are the default dimensions inherited from blocks.org which vishub also uses so what we're doing here is i would call it manual dom manipulation so manually manipulating the document object model using the chrome dev tools and when you hear the term dom manipulation that's usually when a javascript program reaches into the dom and changes it around at runtime and that's what d3 does that's what react does that's what vue does felt all these things uh jquery the original they all do dom manipulation and so that's another key distinguishing factor between tags and elements i mean a tag is just it's static it just gets loaded once from the source code but an element the instantiation of the tag is dynamic meaning it can change at run time so it's i'm changing it manually by you know changing this text in the chrome dev tools but you can also make these same kind of dynamic changes using javascript and we'll do that in future episodes but now if this program reruns again if i trigger a rerun by editing it all of those changes are lost so um at this point i noticed some folks poking their head into this file i saw anita and sriram in there in terms of their presence cursors and i want to take this opportunity to open up this viz to be edited in real time by you all so i'm going to go to the collaborators and add both of you and all that ideal too just in case so this is a feature of viz hub where you can give people permission to edit the document in real time and i see some edits are already being made um whoever's editing you want to describe what's going on yeah i'm editing it it's just so much fun right wow this is amazing so okay a copy of the circle was made and the fill was set to be red this is perfect fill is an attribute of svg elements that defines the color of the inside of the shape and notice that the formatting is a little different um there's single quotes in use here uh and there's spaces around the equal sign uh but i've used single double quotes i just want to say it it doesn't really matter in terms of how the program runs but stylistically you can unify all of this stuff with a utility called prettier prettier is an amazing utility that automatically formats code and it's built into vishub oh i see you just use prettier nice if you click this little colorful p it auto formats the code invis hub to be consistently formatted wow this is really cool really cool so cx is 150 on the red circle meaning it's moved over to the right i want to clarify that that the coordinate space of svg it has um the origin in the upper left so the upper left is actually the coordinate 0 0. and then as x increases the shape moves over with my screen the shape moves to the right and as y increases the shape moves down and the y direction is inverted relative to what you see in like math textbooks with graphs and stuff or in data visualizations y typically goes up so that's that's going to be it's a source of confusion um often times when developing visualizations why it's flipped so just to be aware that's the coordinate space of svg so i see some edits are being made where there's a rectangle at x equals 400 but that's not going to show up because the svg currently still has its default width and height so i'm going to just change that by saying width is 960 and height is 500. now the svg should fill up the page and it does this is quite the little party going on here we've got a green circle we got a red circle we got a rectangle this is great so let me just use prettier on this so we can see clearly this rectangle rectangles are another you know fundamental svg shape it's you can create a rectangle with the rect element x and y are the coordinates of the upper left corner of that rectangle rectangles can have width and height these are all in pixels and yeah fill set to none means that the shape is transparent that there's no fill inside of it and stroke stroke is an attribute of svg elements that you could apply you can apply to circles rectangles a lot of different shapes and that's the outline and so stroke equals blue means that this thing here has a blue outline now and stroke width is what you can use to control the thickness of that outline so if i set the stroke width to be like 20 we can see that that rectangle is actually the outer rectangle and and check that out that outer rectangle is actually above the circles that's another thing about svg is that um in in svg you can't control the z index by setting the z index css property which you can with other html elements the z index means which which thing comes on top of which other things the z ordering uh is purely dependent on the ordering of the stuff in the document itself so that's why this rectangle is on top of those circles but check this out if i move the black circle to be to be after that rectangle see how it appears on top now so that's why um that's what i mean when i say the z ordering is determined by the ordering in the svg document and that becomes super super important when you're in the weeds of making a visualization it's like a fundamental thing that you really need to understand so how about this let's collectively clean this up a little bit um these rectangles let's have like one rectangle one circle or no we it's multiple circles or it's nice in a way i also wanted to introduce the svg element of a line so you can have a line element begin line end line and that line has x one so if i put x one at zero y one at zero x at maybe 100 and y2 at 100 should create a line um it does not and i believe that's because we have not set the stroke on the line i think lines might be invisible until you set a stroke on them there we go now you can see that little line i'm currently i noticed something earlier uh when the height of the svg was uh i think maybe halfway down and the nice big yellow rectangle was only only half of it was showing and i was wondering whether that meant you could create uh shapes and elements outside of that uh out of outside of the width and height does that mean uh when one sets a width and a height on the svg element in the sv svg tag sorry that only shows a partial view of what's what's being created or is like a sort of a window if that makes sense yeah that's correct see if we if we were to change the width for example to be 400 or let's say 500 it clips everything that falls outside of that so if you inspect the the svg element you can see that it's bounded at this square which is 500 and 500. the outer svg element clips the things that are inside of it because the the browser gives the svg only the screen real estate of its width and height and the things inside of it may well be outside of those that width and height i mean if we set x to 600 that rectangle is going to be totally off to the side and it's going to get clipped out and you won't be able to see it so yeah i mean you can you can totally put stuff in an svg that's outside the bounds of the width and height and you just won't be able to see it yeah and there's a similar construct called an svg clip path that i think we'll get into a lot later on but that with an svg clip path you can you can use these shapes to clip other shapes inside of it like say if you had a texture you could clip the texture by a circle things like that i'll get into all that quite a bit later on oh i see there's a path who made that path i think it was sriram do you want to talk about that sorry kurt um i was just actually playing around with an svg that i downloaded from icon monster nice so i thought i'll just try and paste some elements out of it to see what exactly it's doing it's very cool like it's actually an element from um this thing that just creates an x button um like a menu x button nice so like we have these burger icons right like which are pretty much now the edm for menu yeah so i was just going through that it was a nice and did it work did it show up there yeah actually it did i saw a small like line cutting across the black circle so that line i believe was the one that i had added see if i set the stroke width on that line you can see it should get bigger there i don't know if that path is visible so let me let me do this i'll inspect the element and the path somehow the path is not showing up there in the svg is it valid oh it's got a selfclosing tag i i don't believe that's uh that's not valid um html it may be valid jsx but in html you have you have to explicitly close the tag like this not path now it should show up yeah that's what i was wondering like it doesn't have a rosy tank there it is yeah yeah you in in in straight html a closing tag is strictly required except for certain elements like maybe an image element don't know but but yeah there's that path it is there it's a nice little rounded uh a rounded line there is there um is there a difference between line and path or is is one based on the other um because that that um i suppose you one could use either either thing to create a straight line like like the line shown in path yes there's a huge difference line is just it's just a straight line from point a to point b point a being um x1 y1 point b being x2 y2 but path is a much much more generic thing that you can use to construct all sorts of shapes really um it's got this domain specific language as part of it so let me let me edit this path because this string this string looks very cryptic and uh when you when you have icons and and stuff that are defined in svg you do have these cryptic strings that you can copy paste over but these cryptic strings actually use a language they use their own language so i'm going to actually edit this particular string i'm going to make some edits right in here to clarify how this little domain specific language works let me preserve that one just so we have it as a reference i'll make a new i'll make a new path so d equals this domain specific string that's specifically for svg paths m is the move to command so m if we want to move to let's say 400 400 move to the x coordinate 400 and the ycoordinate 400 it's like that and then there's another command that you can issue which is the l command which is line two and and this is how it works like this is one command in this little domain specific language it means move to this these coordinates it's like putting a pen down it's like move your pen to this place and then l means line two means draw a line from that place to the other place so if i say l 500 comma 500 it should draw a little line and i believe i have to say i need to i need to specify a stroke so this i'll say the stroke is black and see there there it is there's that little line there which is which is our path and you may be thinking well that's the kind of stuff you can do with an svg line but check this out um you can you can add another line to command attached to that one so let's say if we go l 500 600 what does that do oh it's actually off the screen let me just bring everything down so move to 200 200 line to 300 300 and then another line to let's say 300 400 you can see that it has created this filled in shape there and it's filled in because fill is automatically set to black so if i say fill equals none now it's just this this path here and and let me increase the stroke width too so you can see it so here's an example of a path that's actually comprised of two line segments this is the first line segment and this is the second line segment and so this one here is actually that path element and the path element is what is used to construct line charts for example that are data driven instead of having a bunch of separate lines that are separate elements you can just have one path element that is comprised of many lines and same thing for area charts if you just use the fill it becomes this filled in area so you can use you can use paths for areas and area charts paths are also also used for geometries in maps like you know the shape of a country or what have you so i think that's all i really want to cover today but i feel like that's a lot oh and by the way this is how you can make comments in html begin it with this exclamation mark in two dashes and then end it with two dashes and a in a um a less than a greater than symbol or less than symbol yeah those are html comments so i see there's some activity in the youtube chat let me address those there's a question can you make layers like circle on top of another circle i see when i was talking someone made that edit and in fact yes you can see that there's there's the circle below and the circle above and yeah the layering is just purely based on the ordering of the document so if i were to take this smaller circle and put it before then it would be essentially invisible because it's actually behind the red circle which we can see if we if we move it around a little bit but yeah that's how you would create layers is by just making sure one comes after the other in the document and the one on top is smaller so you can see that what's behind it yeah great question adele you had a question uh yeah i'm just just curious uh about the path elements uh specifically the d attributes and um i would just uh is there a difference between the letters if they're uppercase or lowercase and um uh is is that is that something that um you you you've had to do before to uh because i'm not sure exactly what the difference is um and uh it'd be i'll just wondering a few sure yeah um let's find out if i make it a lowercase m it seems to still work and the lowercase l oh uh looks like that did something different actually so um it appears it is case sensitive uh to learn more about this i would suggest the md n article about svg paths because it's an entire language it says the d attribute is a value of string it is animatable yes um and somewhere in here yeah here it is these are all the path commands so there are a ton of these path commands uh but more often than not you don't need to construct these commands yourself because there's some utility that generates it often you encounter these like if you want to put icons into your svg you can you can copy paste these paths from an icon svg file with data visualization there's a package called d3 shape that will use later that actually generates these strings for you so usually you can treat this d attribute as a black box that you don't really need to know about like you don't really need to understand it um but i wanted to go into a little detail now because it's good to just know um the structure of it and i see in this example there are spaces like i think it could have spaces in it and it would be fine it works just the same and i feel like i've seen space delimited coordinates yeah that works too you don't even need the commas so there there is some flexibility there in terms of the structure but it looks like it is case sensitive maybe uppercase l and lowercase l um honestly i don't know they might be different commands or something yeah i think it's uh it says versus relative coordinates it could be just yeah in the note just below your where you're highlighting ah yes oh look at that uppercase is absolute and lowercase is relative based on the differences oh that's quite interesting so let's let me just see if i really understand that in our path we've got a move to command and let's let's see this second line to command it uses the absolute coordinates 300 400 but in if we were to rephrase that in terms of relative coordinates with the lowercase l the change in x would be zero and the change in y would be 100 and we get the same result yes that's what it is nice nice i'm actually learning that just now so thanks for that oh there's a question in the youtube channel did you say there was a get it right in black and white channel in the u in the d3 slack yeah you know um i was going back and forth mentally about how i wanted to deal with the um asynchronous communication for this and what i've decided is for now at least i want to try to use the vishub forum for these communications not the d3 slack mainly because the d3 slack is very um transient um but if you feel strongly let me know i mean i i i may end up creating a d3 slack channel for for this series i'm not sure but i used i used slack in the past for for the date of his 2020 series and there was so much really great activity in the d3 slack that is currently gone forever lost to the sands of time uh because slack doesn't preserve its history with the d3 slack which is on their free plan of slack so that's why um i want to use this vishub forum thing instead so um in the youtube stream there's a link to the blog post about it and in the blog post there's a link to the forum index and the forum index looks like this this is a page that i plan to maintain that will have an index of all the resources for all of the episodes and right now there's just episode one which doesn't really have anything in here yet but this is one i want to leave you with as we close out today i want to leave you all who are watching with an exercise this is another differentiator between this series and last series i want to give exercises at the end of each and every episode so that you all can engage with this stuff and try your hand at it and share your work and hopefully we'll build up a community of people who are following this series and participating and so here's what i want you to do make something creative with basic svg shapes and do that by you know fork fork the hello html example or you can fork the example that we made today and i'm just going to remove collaborators right now so we can like freeze it the way that it is as a record of today and so you can fork this viz to do your exercise and by the way in this vis hub forum software which is an instance of discourse what you can do is put a vishub link on its own line and it will unfurl to include a thumbnail so when you share your work that's what you can do let me just sign in so i can edit so you can fork this example and what i'm going to do is drop that viz hub link and on its own line and you see what happens here it unfurls so yeah that's what i'll leave you with today uh if you followed along enjoyed this please go ahead uh fork this thing modify it and share your work here um and feel free to ask questions also in this in this forum thread i'm hoping that this forum works out well as a platform for discussions and stuff um if there if it doesn't i might introduce a slack channel or a slack channel might be good to have anyway i'm not sure we'll see uh stay tuned for that so welcome everyone to episode two of get it right in black and white i'm just so pumped to do this so we've got adil here we've got anita here some others may join but in the meantime we can start episode 2 is going to be about pseudo visualizations what that means is we're going to use basic svg shapes to approximate visualizations and this will make sure that you know we really grok the fundamental shapes that go into making visualizations what we'll cover today and this is aspirational i may not get to all of these but i am going to review the exercise submissions from last week we got some really good ones removing the default margins and scroll bars that appear on an html page i would like to revisit the topic of text versus elements because there was some confusion around that and then we'll go ahead and develop a pseudo scatter plot a pseudo bar chart a pseudo line chart and a pseudo area chart and i would like to discuss svg interoperability with figma and other tools and if we get to it we'll add svg text and customize the font before we get into all of that i just want to reflect on what we've gotten into so far it's been html which is comprised of svg css and javascript and we have delved into svg a little bit more so within that svg concept we're looking at circles lines and paths and i think i'll be evolving this diagram as we go to add in all the various concepts that we learn about let's review the submissions from last week the exercise was make something creative with basic svg shapes and this is what happens here's one submission i'll click through it and see what it is this is just gorgeous beautiful beautiful stuff you know it's very artistic and this is what got me thinking of of highlighting some of the integrations with design tools and i want to point out if you put the link on its own line it will unfurl like this get a little preview in here so here's another submission the vision beautiful beautiful stuff and it's all just svg right there in the page oh here anita did one with um transitions actually now that i'm here um anita would you mind just describing the transitions that are happening here should i talk about it yeah yeah can you just talk about it for a few minutes and i'll highlight the the code as you as you talk about it okay so we made a basic uh rectangle using svg so rectangle is graphics here and the properties of these rectangles are width height fill x and y position and we can change all of that using css language which is here on the top style and in the style so using red i'm accessing this left element index vg directly and what is what is our aim is to do the transition on it when i'm hovering on a triangle so what i want to change the feel of it fill and stroke with so when i hover on it the transition is happening at three thousand millisecond means three seconds here and in the beginning the fill of the rectangle is red and stroke is black and on however rect and hover is changing fill to grain and stroke weight to 100 pixel so the first one it just it shows the css properties for rectangle and the next rect semicolon hover is another state on the first state so it changes and that's where the transition come transition is actually between two states first is when the field is read and the second state is going to feel is the green forward angle and that's where transition property comes and we can define that using css language nice thank you that's awesome oh thank you so much for for describing that that's that's really great to see thank you so yeah just to recap a little bit i think this is the first time we're actually using css so when you when you introduce these style tags it opens up into a block of css and then these are the css selectors so this selects the body element this selects all rectangles and this one colon hover it says okay apply these styles when the thing is hovered over and so that is cool by itself and then you know when you add this transition you know this is one way to to animate things with svg and css so yeah great one by nita this one is really incredible i was just blown away by this i mean look at this this is just so beautiful so beautiful and i want to highlight that when this submission originally came in it looked like this and i immediately noticed that there's the default margin that appears with html see on the upper left corner there's a default margin of some i don't know some on pixels and then there are scroll bars here and so these are both undesirable things and so in the forum i just said oh add the css and i want to just discuss this css a little bit because it's very useful for pretty much anything that you do where there's a full screen svg this css applies to the body element that has a default margin in html and so to get rid of that default margin we can set the margin css property to zero that will get rid of the margin but then there do appear these scroll bars which are kind of a bummer and i don't really understand why they appear but anyway to get rid of those scroll bars you can add overflow hidden to the body as well and this gives you a really nice blank canvas where the svg does fill up the screen all right really good stuff yeah here's here's my comment you know that's how you can remove the scroll bars a couple more here's one with some circles it almost looks like a record very cool um oh yeah and you can set the height of things in viz hub so i noticed with this one it's actually larger than the page there's this scroll bar so you could get rid of the scroll bar or another thing that you could do is change the height there's an option here to set the height i just wanted to make sure everybody's aware of this so yeah you can use that to change the aspect ratio of the viz and this one also blew my mind look at that took my avatar with and uh you know exported the paths to svg pretty wild and this one also uses the hover css selector so when you hover it changes the transform which is a css property that you can use to to scale and rotate and translate things so i thought this was very nice work very nice work here's a flag of seychelles very beautiful this one uses the polygon construct within html it also uses an h1 element which is this text here h1 in html means heading one so the text is kind of big and bold and here's what seams work very nice kind of like abstract art and you can see that it's a bunch of path elements where the only difference is where it moves to initially and since these are lowercase commands these are relative so all you need to do is change that one thing and it moves the whole thing down and check this out there's a class on the path element and a class can be selected with css meaning you can use css to select all elements that have a specific class using the dot prefix on the css selector so this one here this little block of css selects this inner path this one here and sets the fill to black just on that one whereas on all the other ones the fill is none so that's a nice you know first sighting of css classes can i ask questions yeah so what is difference between id and class oh id and class yeah this could be a basic question let me just uh fork this so i can modify it and show you to give a sense so the question is about um id versus class class is something that many things can have so there could be many classes that have the same sorry there could be many path elements that have the same class in which case this selector would apply to all of them there's also a construct called id and if you use id see how now it's broken it didn't it didn't select if you use id then the prefix on the css selector is a hash symbol so now that should work oops i i misspelled id as i n so id is inner path and it works the main difference between id and class is that the intention behind id is that there's only one thing that has a given id that's why it's called the id means the identifier for that one particular thing so id is for just one element meaning no two elements should have the same id ideally but class is is it defines a class of elements meaning a grouping of multiple elements so there could be many elements that share the same class so that's the main difference between id and class so going through the submissions and questions here neeta asked a question about svg it says svg is an xmlbased markup language for describing twodimensional vector graphics as such it is text base and so on and so the question is is svg a graphics language similar to html and xml yes yes it is svg in fact stands on its own as an image format and so in a sense it's not strictly within html svg exists as a standard for defining images outside of xml outside of html but it is based on xml so xml is the language used with the tags and everything that's the language used inside of svg images so i hope that i hope that answers the question is that clear enough yes yes intense nice and is everything inside svg tags text data um well this comes to the point of the distinction between the document and the dom this came up last time too i think it was ideal that asks what is the difference between a tag and an element and i gave an answer that i don't think was 100 accurate uh anita did some researching and reading about this um and i wanted to just clarify this point that in a document meaning in the text that defines an html document the source code you know in the dot html file there are elements there in the sense that the syntax in there defines the element and that element in the document is comprised of the start tag the ending tag and everything in between tags on the other hand are constructs that only exist in the document the tags for like every element in its definition in the in the document has two tags an opening tag and a closing tag and those tags are purely syntax for defining the elements but when the document gets loaded and parsed into the browser it becomes the dom the document object model and in the dom it's a tree data structure where there are elements so if you if you google html element and read about it people discuss it in in different ways and they use the same term element to define things that are in the source code meaning you know the start tag the end tag all the attributes and everything in between that's often referred to as an element when you're discussing the source code the document but there is a distinction between an element in the source code and an element in the living breathing dom and so the living breathing dom is a dynamic thing where the elements can change over time but the element in the document is a onetime thing like it's it's fixed when you load the page so i just wanted to discuss about this a little bit i hope it clears up any confusion around this any any remaining questions about this we'll be talking about dom in the future because we did not talk about it yet oh yeah i mean we'll be using the dom quite a bit quite a bit and i think we did talk about it a little bit yeah so if we look at anything in vishub i just want to clarify this with some some grounding um here's the begin tag here's the end tag and taken together it defines the element in the source code similarly here's this svg all this stuff that i've selected defines this svg element and there are elements nested within this but this is the source code you know this is the document but when it runs in the browser you can right click it and say inspect and that gives you this chrome dev tools which is a is a window into the dom not the document not the source code and so um in this sense we have touched the dom by using the chrome dev tools and like i said last time you can manipulate these things these attributes in here and it will update and see look at that it actually it it actually transitions so if i set the width to be 400 it transitions because there's a css transition applied to it but what i'm doing here is manipulating the dom by using the chrome dev tools and in the future we're going to use javascript to manipulate the dom yeah but we're not quite there yet so going through the submissions i want to uh highlight this one by ideal this is so good yeah check this out it's this really beautiful animation with the sun setting and the colors changing so this is just gorgeous gorgeous work and ideal is live with us now and i was hoping we could um dive into this a little bit because there are a couple of new constructs used in here like gradients and animate tags so ideal would you like to sort of narrate what's going on here and also describe you know how you came to create this sure uh this was uh a really fun exercise um uh it i thought of the uh yeah there was a the idea of the sun rising and setting and uh automatically um thinking well i think how would that affect the surroundings as well so we have a um to begin with i created the sky element as a rectangle and gave it a fill um and which would be determined by the something called yeah the sky gradient and so this is a linear gradient that sits in a special tag called defs where it gets defined and sorry this was a radial gradient not a not a linear one and uh the uh it takes an id so we can refer to the definition and it's uh there is also it takes a cx and cy property which is uh familiar i think when when we use the circle tag and what the these do is uh similarly they define the the circle for that gradient and that the perimeter of that circle can be have a gradient um or a color attached to it um and um so yeah this was this was really uh this was the first time i'd really come across the animate and gradient apis of svg um so i just want to make sure i understand and just to explain everything uh if you change cx to zero see how the the gradient is sort of emanating from this side and 50 puts it in the middle and likewise with cy if you put it to zero it's emanating from the top very very nice and you know i didn't actually know that um percentages are the unit here that so i'm learning things as we go so yeah i just wanted to tweak those um but yeah continue please yes the uh yeah it takes uh percentage units uh which was uh interesting and uh i may be wrong but i wonder whether it uh it uh it just corresponds to the position across the screen in terms of how far in terms of as a percentage it goes across this screen um uh so i think this would be 50 50 for each of cx and cy would be right in the middle of the screen um of the svg and there is a it takes a radius um uh which also i i think uh tries to yeah uh describe the again in a percentage um uh but also tries to uh describe the width of the overall where the position of the perimeter would end up and so that was this was quite new um and uh so i think yeah in so i think we after experimenting just like that uh with the various numbers uh i settled on 75 um and then uh but yeah i was experimenting exactly in that way just to get an idea of what what that radius really meant um and uh yeah there's a inside of that radial gradient there are a there is a stop tag um a couple of stop tags um one that uh hasn't uh each of the these have have an offset property of z um and one is zero and the other is a hundred and um i think this really describes the offset property describes where that gradient stop is located and so i think for a radial gradient um it will be the distance from the center to the uh edges of the circle um so um yes again i was experimenting exactly like that just to see what the how the numbers would translate into into different uh yeah colors across the screen um so that was uh yeah just um and then there was uh a little uh yeah so there was a radial gradient used for the sky backdrop and then two linear gradients used for the two landscapes in the foreground and um actually before we go on what is this q is this what makes it curvy uh yes so i think uh this is a cubic curve if if i i looked up the mdn documentation um from uh uh last week and i think this is um it might be sorry not cubic but quadratic um some quadratic bezier curve and so um that will allow uh from the current position which is defined by um the first two sorry the last the second two which is um um the okay see if i just get this right so it takes a current position uh which is uh defined by what comes after m um where we as you described last week that's where when we put the ink to paper we put the pen to paper and then the what comes after q are four numbers the first two of those numbers are control points and the second two are where you would uh where the final point ends up so that's 960 is right on the other end of the screen and yeah again experimenting this is this is how i became a little bit more comfortable uh with understanding what it does and the two um the control points uh straight up to cue i think these help this uh help um these are points located somewhere which help describe the um the curve and the way that it gets pulled towards those control points um yeah again a lot lots of experimentation was involved just to just to see how um this this could this could work um very nice yeah it was it was fun um yeah similarly um we had uh yeah that was yeah again yeah i think that about sums it up there's linear gradients that use a similar format to the radial gradient and stops within those and i'm curious about this animate tag how did you figure this out yeah so this was uh so the problem i was trying to solve here was how could we animate the gradients so to speak how could as as the sun is rising and setting how can the colors change so um in this case uh this is the um this this particular uh landscaping i think in the foreground this would go from um alice blue to steel blue back to alice blue and it would do it across a number of seconds and so yeah the animate tag was very interesting you can try and descr by using something called the attribute name um which is uh the stop color and you can change the values of the stop color from and this blue to still blue and alice blue so that's a list of values that you would like it to go through nice um again so much experimentation yes really to help understand what was really uh what was going on this is really great adil thank you so much it was fun thank you you know this might be a good um transition with the discussion on control points to using um figma figma is this really amazing design tool that i've actually been learning myself for the first time recently and i've used it to create all of the various uh you know pieces of graphics for this series so far uh you may be interested to know that the mask that is applied to my video is actually drawn driven by this graphic right here so that's being masked onto my video and that's actually how it's working but anyway figma and a lot of different design tools like figma including sketch or adobe xd or uh even like straight vector graphics tools like adobe illustrator or inkscape which is open source or i believe has limited svg capabilities but it it lets you design svg graphics and there's this whole interface around it and because the idea of control points came up i want to just create a little sample to illustrate control points so i've got this sort of template here i'm going to delete this stuff and there's this thing called the pen tool you can use it to define svg paths and so there's a path i can set the stroke and interactively control all this stuff so instead of having to tweak it little by little you know in the html you could use a tool like this to very rapidly iterate on stuff like this and because the control point concept is so abstract i wanted to illustrate it in a concrete way and i believe if you drag in here you can define a control point and so this dragging defines the control points along this bezier curve i think it's a bezier curve i may be mistaken but that that is the effect of the control points so if i grab that and change it around see that is that right there is the control point it sort of pulls the line in a certain direction yeah so that's the essence of control points one thing i wanted to do today was pseudo visualizations and what i mean by that is approximating visualizations and i want to take a moment to just discuss that sketching and doing mockups in a design tool are actually very important pieces of data visualization work i mean when i get involved in a client project for example we have a meeting and then the first thing i do you know if they send me the data i'm lucky if they don't i have to imagine the data but often based on a discussion i often sketch out something and this is a popular technique from nadi bremer and shirley wu they have data sketches that whole thing highly recommend it uh but to give a sense you know what i do is sketch on a notebook so i've got all these ideas that i've sketched out this is for like what i wanted to talk about today and the next episode and so sketching is the first step and then once you have a sketch that you like and sketches by the way you can communicate sketches to clients it's a very effective tool because then they realize that it's sketchy it's not final in any way but then once you get a sketch you like the next step often is to mock it up in a design tool i mean sometimes you do go straight to implementing with d3 or whatever but mocking up something in a design tool is a big part of the process and i think it would be good for us to do now to cement our understanding of the basic svg shapes that go into visualizations so here i am in figma which is the tool that i've come to really like for this sort of stuff and i think you know you can sign up for a free figma account and use it for free i think they charge you when you want to add real time collaborators so i'm going to start by making what they call a frame in figma this is going to be the sort of container for our svg and i'm going to set the width to be 960 and the height to be 500 because that's what the default width and height are in vishub and in blocks.org and let's start by creating a pseudo bar chart um p s e u d o pseudo something means a fake version of the thing uh if anybody hasn't heard of that term pseudo so um yeah i wanted to make a pseudo uh scatter plot a pseudo bar chart pseudo line chart so why don't we start with the pseudo scatter plot a scatter plot visualization is comprised of circles and so if you drop in a circle there i can set the fill here to be black because we're going to get it right in black and white and then i'm just going to make a bunch of copies of that circle and position them around the screen like this so this is a pseudo scatter plot really um so i'll just you know spread them out a little more make it sort of aesthetically pleasing and at this point i want to highlight the interoperability of svg between tools like this and html so in figma you can select this frame and click on export and then select svg from this drop down menu here and then say export like that and then you get a dot svg file that you can open up in chrome and then you can say view page source and here you have the svg text which you can then copy into vishub so here i've got the svg fundamentals from last week i'm going to fork this and call it sudo scatterplot so i'll clear out the the readme i'll actually say an approximation of a scatter plot and then in index.html i'm going to get rid of that svg that we had before and paste that text in there and use prettier to autoformat that and there we go we've got a pseudo scatter plot uh current yeah does the xmlns attribute is that important is that necessary that's a great question um i believe it might be necessary for svg files as in image files that are outside of html inside of html you really don't need it it'll work without it and it gives you actually a lot of stuff that you don't need you'll see this a lot with programmatically generated svg there's a bunch of stuff that's not really necessary so we could clean up this svg like the view box um is something that you can use to control the relationship between the actual pixels and like the the pixels that you use the coordinate space that you use to define the shapes it helps with controlling the aspect ratio there's some tricks you can do with the view box but i'm going to delete it because it's not strictly required and also fill of none on the svg that's not required either and also fill equals black i'm going to use vim mode here to delete all of these at once you don't need the fill equals black because the fill is black by default on all svg shapes and this one is suffering from the default margins and the scroll bars issue so i'm going to just add that style back in to remove the margin i'm going to select the body element and say margin is zero see that moved it up just a little bit and then overflow is hidden okay that looks decent so there we go a pseudo scatter plot uh let's do also a pseudo bar chart i'm going to go back to figma here i'm going to make a copy of this frame i'll delete everything in it by selecting it hitting delete we can create rectangles can you give me access to the file oh sure yeah figma has realtime collaborations so i can add you can edit it's an invite you should be able to see it now right so making this pseudo bar chart we can just change the fill of this rectangle to be black and then i will copy this rectangle move it over and make it a little smaller and then do the same thing again and figma has this really nice thing where it will sort of snap to proportions that make sense so like the spacing is now the same 39 pixels between all of these and i think i'll make one more make it a little smaller and then i could select all of these and then drag them in uh yeah figma has these really cool features where you can uh move things around all at once like this see this this here is a bar chart with with no padding it's the term is padding between the bars and when you move them to be spaced out like this that's introducing some padding between the bars but anyway now we have our pseudo bar chart i'm going to export this as svg open it up view the source and i'm just going to copy the inside of the svg because we already have an svg sort of container in vishub then i'll go back to vishub here and i'll fork this and i'll call it pseudo bar chart and i'll change the description to say an approximation of a bar chart and then in the source i'm going to just delete the stuff in the svg and paste whatever came out of figma and there we have it there we have a pseudo bar chart and again there's some unnecessary stuff um there's a white background rectangle that we don't need because the background is already white we don't need to fill all of these with black because black is the default fill and if i run prettier again it nicely formats itself so there we have a pseudo bar chart the essence of a bar chart right here and i want to point out one thing here um because this point trips up people later on when you end up coding with d3 you might think that you can just change the height of the bars and it'll lay out like this but that's actually not the case look at the y coordinates i mean if the y coordinate is the same and we just vary the height you end up with this inverted bar chart and this is because in svg the coordinate space of the y the y coordinate it goes from top to bottom meaning a y of zero is at the top which is again a confusing point and so what you have to do you do have to change the height of the bars but you also need to change the ycoordinates of the bars to be the ycoordinate of the bottom minus the change in height relative to the biggest bar and so we'll express all that in code later but i just want to sort of foreshadow that element you know that aspect of bar charts so let's let's do some more um a bar chart can also go the other way meaning instead of being the bars going from left to right and vertical like this you could have a bar like this and then have several bars that are you know going down the page like this this format often makes more sense mainly because you can position labels to the left of it and the text of the labels is not it's not sideways and that's a great lead into text we can say like okay this is this is bar a and i can change the size of it yeah so there's like bar a and this would be like bar b and these would be replaced with you know actual labels in real database but these are pseudo visualization so it's just abcd for now and the font here i've selected as share tech this is sort of the font that i'll be using throughout the series in figma you can quickly preview different fonts and i think most of these are available with google fonts but anyway share tech is what it'll be and then i'll just uh you know adjust this to be pleasing to the eye and let's export this one as well export frame eight i'll ins i'll view the source copy this stuff um oh that's that's odd the path has ended up as text rather the text has ended up as paths i guess that makes sense so that you can preserve the font but this is a great opportunity actually to to introduce fonts in code so what i'll do is i'll fork this one horizontal bar chart and then i'll paste that svg right in here and it worked there it is but if you want to programmatically set the text it'll have to be a little different from this i mean if you wanted to change what the text says you would have to like regenerate this path which is it's not something you want to get into doing so instead what we can do is define the text as text elements on the svg so i'm going to delete all those paths that gets rid of those letters and then we can add a text element so begin text end text and this is going to say a and i want to put it right next to this particular rectangle so i'm going to inspect it to see what the x and y coordinates are so x is 122 and and with text elements you can have x and y so i'll say x is 122 just as a starting point and y equals 27 and we can't quite see it what if i say x is a hundred i'm not seeing it do you have a question um there it is so it is there it's just not getting shown maybe i need to say explicitly phil is black there it is so we've got a little a okay we've got a little a here now we want to make it so that it's aligned to this bar and it is big and it has a specific font to do that well to do a couple of those things we can use css so we've got this style tag here we can say select all text elements within the svg and say font size is i don't know 36 pixels you just have to sort of tweak it 150 okay maybe 120. or actually what was it in figma i'm going to use the same thing 72 okay now what we want to do is center it so to do that i can just tweak the x and the y so let's say x is 90 or 70. and y should be a little bigger maybe uh 40 how about 80. getting there 90. it looks about right and to move it over to the left i'll make it maybe x is 60 how about 50. there we go that's approximately the right place and now i want to introduce the font the font and so google fonts is the way to go when you want to add custom fonts nowadays there's a long history of fonts on the web but you know this day and age i would recommend google fonts you are dependent on the google servers but i believe all of these fonts are openly licensed so if you wanted to migrate away from google fonts you could but you would have to host these font files yourself which is sort of a pain but to use any of these fonts now you can just use google fonts and i'll show you how to do that so i want to use this font called share tech so you could download it and then to use it we can click on select this style and it gives you this little snippet of css that you can just copy so it says here use on the web just copy this css or no this is html rather that includes a link so in vishab i can just paste that right there oh there's some problem uh looks like i've got a syntax error somewhere does it require a closing tag for the link for the link time you know i think link is one of those things that does not actually require a closing tag and see if i get rid of it the syntax error is still there unexpected character in line 55 oh i didn't see there it is i didn't add this little character to close out the text silly me okay now we're unblocked and i can paste that stuff up here and uh yeah the the link tag is one of those special tags that does not require a closing tag and i think image is also one of these so this is a slightly different syntax this is called a selfclosing tag where it gets closed with the the slash right before this character here but anyway now that we've got those these link tags actually pull in the fonts and then we can set the font family like this by copying this little snippet so all the text gets this share tech font family and boom there we have it all right so we've got a pseudo bar chart here we can fill in these labels just by copying this text i'll make a couple copies of that and move on yeah sure is is the css accessing the dom or just the document oh yeah that's a great question is the css accessing the dom well it's it's like um the browser is this engine you could think of it as an engine that takes all of these things as input and works with everything and so so yeah it's a great question does css manipulate the dom not really it's almost like a layer on top of the dom um but it depends on the dom for sure um so it's not it's not like it's not strictly modifying the dom it's like the dom is there as one thing and then the css is sort of a layer on top of it that describes to the browser how to present that dom and so the dependencies are like the css depends on the structure of the dom to function but the dom does not depend on the css so it's really a layer on top of the dom so once the dom is there the browser says okay i've got this dom i have to present it how do i present it oh i have to check all the css that's there to just see if there's any properties that apply to these elements before i display them on the screen and so the browser engine internally says okay here i've got this text element i want to i want to display it what do i do which font do i use let me go and consult the css uh is there any css selector that matches this if so does it have a font family associated with it oh here it is yes it does therefore you know i need to use that font family to present that that dom element so that's generally how it works like that's generally the relationship between css and the dom does that make sense yeah so it is always css which makes the final decision or it is a dom like if we have fill color in dom and same fill in the style for same element then which one will work first which one is oh which one is dominant yeah that's a really good question that's a really good and this this trips people up sometimes so let me uh give a little demonstration so i'll say the class here for this rectangle is first bar and let me set the fill to be red in the in the html and then in the css we can select that by saying first bar gets a fill of green and look at that the css actually takes precedence the css overrides what's there in the dom in terms of the fill so this is one of those tricky rules and you know sometimes i have run into this particular problem when you're coding with d3 and everything and you use some code that sets the fill of a particular element to be some color and it's not working you know i've often sat there tearing my hair out being like what the what is even happening the twilight zone moment and so the first thing to do if your if your uh fill or any of these attributes in the dom if they're not working check if there's any css that might be overriding it see no matter what we set here if we set this to blue it's not going to work because there's css that is conflicting and the css actually takes priority which is counterintuitive i mean i thought i thought it would make more sense that the attribute in the dom would take precedence because it's more localized but turns out it's not the case so yeah for this first bar we can set the fill to be let's say white and the stroke to be black and the stroke width to be like 20 pixels goes to show you that yeah css overrides what's in the dom um current i have a question um relating to this about um the fill attribute is that um because we are applying it to an svg element uh it works but uh i don't know if i've seen a fill uh attribute would that apply to html as well because i think i've seen other things like background color or color or i don't think i've come across a color a fill attribute for yeah that's a great question i believe it is localized only to svg it only makes sense to use it with respect to svg elements um and and to to clarify this like if i were to have this question this is where i would go the mdn documentation page for phil and i think there's this notion of a presentation attribute and and that's what the presentation attribute is in in the dom if you set the fill attribute on an element and i recall somewhere in here there was a list of things that could be used as attributes and also as css properties because there are a couple of these but i don't know off hand what they are but definitely fill and definitely stroke and stroke width but yeah to answer your question phil is only applicable to svg elements it's not it doesn't make sense outside of svg but there are a lot of properties that do apply outside of svg like transform i think is so is very generic it applies to all html elements not just svg elements but yeah fill and stroke they could be used as attributes or they could be used as css properties and if they are used as css properties then they dominate the value from the attribute yeah that's great thank you awesome so before we close out today i do want to also just do one last pseudo visualization which is a pseudo line chart oh wait i've already done that look at that so this is a pseudo line chart right here it's pretty much an svg path and on this point um there are aspects of svg paths that become important like the line join you could have different values for line join to make it either jagged cut off like this or rounded and then there's also the cap the cap can be set to round for example to make the caps round so as a last pseudo visualization i'll just make this bigger export this as svg view the page source copy that into vishub this is going to be a pseudo line chart and then i'll paste that here yeah so that completes our series on pseudo visualizations yeah i was looking at the youtube chat uh the only thing i see is from wasim isn't the logic with svg phil different from regular html in which inline styling dominates over the style tag that's a great question um i don't know if i mean we've just looked at how it is with svg with svg whatever's in the css dominates but with other types of tags like straight html i'm actually not sure how it is um i can do a little experimentation yeah let's find out so here's this thing that nita made that is sort of an exploration of basic html elements there's the h1 element that ends up as this text there's the p element which is a paragraph h2 which is this smaller text here and i'm going to fork this and call it investigation of css precedence and in here oh this is kind of interesting uh there's some missing tags which is another point we should discuss but to answer the immediate question i'm going to introduce a style tag and i'm going to say h for h1 elements let's make them red oh phil sorry not phil but rather color color is the generic html css property okay so now that's red um how would we make that red otherwise i don't i'm sort of grasping at straws here you have to do can i tell you yeah tell me you write style as a property in h1 equals to and everything else goes in the ports here right yeah this is called inline styles which you can do with svg too by the way um yeah i believe in straight html like this the color is not something it's not there is no attribute for color and so you would do inline styles like this and so in this case um yeah i see in the youtube chat milo is saying yeah both things are style instructions that's right that's right yeah it is css so this is called inline css and the inline css does take precedence over the other css the sort of external noninline css see if i get rid of that it becomes green but if we put the inline style there it does take precedence over the other style and i believe it might be the same with svg let me just uh double check that so we've got this pseudo horizontal bar chart and instead of saying fill equals blue if we say style equals fill is blue does that take precedence it does it does look at that okay cool so we have learned a couple things um inline styles like this inline css always takes precedence over css defined elsewhere however with the attributes if i say fill equals blue the css takes priority over the attributes so that's how that's how it all works with the priorities here that is so deep [Laughter] yeah yeah this is so great i love this question format because um we can stop and really investigate and get to the bottom of things uh that people watching are wondering so yeah this is so uh so good before we go i want to leave you all with this exercise in the forum entry for episode 2 here's the exercise recreate a pseudo visualization from one of these visualization taxonomies and so i invite you to go through i invite you to go through these links under data visualization taxonomies and look through all of these and then pick one to reproduce as a pseudo visualization there's the visual vocabulary deviation correlation see there's already sort of pseudovisualizations in here these are great taxonomies of visualization types that you can use as a reference uh to know how to encode certain types of data and we'll get into all of the logic behind this later on but for now you can just see you know there are a bunch of pseudo visualizations here in these various taxonomies so what i want you to do is look through these pick one and reproduce it with svg invis hub you could modify the html directly or use some design tool like figma or others and here's another one really amazing work these are really fascinating taxonomies of visualizations from data to vis another one sort of a decision tree based on what sort of variables you use which chart types to pick so yeah go through these links and recreate a pseudo visualization from there and post your visa link in this thread alright really looking forward to see what you come up with and thanks for tuning in i'll uh see you again next week take care bye welcome everyone to episode three of get it right in black and white um i've been really looking forward to this one because it's where we're going to dive into dom manipulation with javascript all right so here's what we're going to talk about this time soul li wit reproductions in vanilla javascript and this this thing right here on the screen is a soul lit piece what we'll cover today first i would like to review um the exercise submissions from last week got some really good ones and then i'll talk about sol lewitt this artist who's done a lot of really amazing pieces that we can reproduce with javascript and svg then i'll talk about javascript basics like javascript language features and then i'll talk about the dom api so we're not going to use any libraries no d3 it's just going to be vanilla javascript dom manipulation and to implement some of these solar with pieces we're going to need to use svg masks and perhaps svg clip path all right so let's let's uh review these exercises so here's the forum post from last week's assignment which was recreate a pseudovisualization from a visualization taxonomy i'm just going to step through these these works here's one from nita a pseudo venn diagram very nice um oh anita's here do you want to talk about this at all yeah i can talk about it um i made this one using figma just basic three circles and from the link that current shared last time basic vein diagram it was took like not that long to make it and just exported it using svg so each shape here is a svg and yeah that's it thank you very nice very nice here's a pseudogantt chart from male uh forgive me if i'm not saying that correctly but this is very nice very beautiful i mean this is getting into some serious uh data vis type stuff with the numbers and the labels and the grid and there's a dashed line this is fairly impressive you know this is amazing and and to be able to implement this later with d3 would be a great uh direction for a project wasim made a pseudo slope graph very nice very nice i appreciate the styling with the font and everything it's very much in the theme of get it right in black and white and this is one of those visualization types that we can definitely implement in the future with real data with d3 andre made a pseudo spider chart this is pretty neat also sometimes called radar chart where yeah i could visualize different dimensions of the data along this circular grid shape here very nice and here's a pseudo icon array this is pretty cool pretty cool indeed you know and i love the the creative font and and the trees here they're sort of filled in at different levels very nice work by senna and ideal check out this one by a deal oh my gosh this one when i saw it i i was so happy this is just so gorgeous so gorgeous um ideally you wanna talk about this one a little bit uh yeah this was a really nice exercise it's um circle packing is plays on these tree structure and each circle represents a level and also a branch so in the case of um subcircles will also represent uh subbranches and um and it just i think it brings out the hierarchy uh at different levels of the tree quite nicely and i think maybe one improvement i could have maybe do in the future is to probably apply different shadings to the different levels uh circles just to bring that maybe uh bring the emphasis of the uh hierarchy out a little bit more but yeah this was a really nice fun exercise and built in the shapes were built in figma and the text was added later inside visha oh very nice that's a great approach and i have to say i love how the consecutive levels are inverted that's a really nice touch really nice and i love how it's just totally black and white but yes if you were to add color you could do a lot of different things with this type of viz and this is another one that we will definitely implement later with d3 based on data so i love where where this is going uh there was some discussion about how is this animation done it was using 3js which is this really crazy uh threedimensional library that we might touch later on but yeah the point here is that if you inspect the dom you can do some sleuthing and figure out how these various things that you find on the web we're done alenka did this really nice pseudo joy plot very cool very cool and uh here's here's another one from kirsten this faux data vis it's it's a approximation of a stream graph very nice very nice indeed yeah this is another one that we can implement in the future with real data so great work from everyone on these all right now i'd like to talk about sol lewitt uh the whole context for this is that um i went to this exhibition of solowit art years and years ago and i was very inspired by the the art and and years later i was thinking oh my gosh this is perfect stuff to recreate with code because it highlights some of the uh the sort of foundational things that you can do with code this is solowit he was an american artist and he's done all sorts of interesting art pieces he had a very sort of storied career in art and he does these largescale um exhibitions in in large spaces here's a piece by sol lewitt where it's this giant set of shapes installed on a wall and as you can see it's like bands of black and white vertical and horizontal with different masking patterns applied so this is one of the pieces that i think is really nice and this is the one that i would like to try to reproduce today by writing code and i i really look forward to it it's going to be a lot of fun it may be too ambitious to have the multiple shapes done today but i was thinking just the first one the leftmost one here with the circle masking pattern i think that's what we can target for today before we dive in though i would just like to take a look at a couple other solo wit pieces here's another variation on that theme of different textures going in different directions here's another variation of the same theme with sort of larger scale textures and adding color to some of them here's another piece that explores colors with patterns i don't know how to describe it really but some of the same themes are present in this one here's another piece by sol lewitt where it's interconnected lines between randomly placed points and by the way the the general theme with sol lewitt is he would not do the art himself i don't believe um or this probably changed in different places in his career but the main thing with solowit is he would give instructions almost like algorithmic instructions to a crew of people that would implement his artwork based on those instructions so it's very algorithmic to begin with and it's it's ripe for implementing with computer code here's another solar with piece that is just a grid that's expanding very fundamental i love it let's dive in to trying to reproduce this this solar with piece with code i'm going to start by creating a viz i'm going to fork from this svg fundamentals viz that we did earlier i'll fork this and call it soul lit reproduction all right we've got this sort of blank canvas here i'm going to just adjust the readme and say a reproduction of a solar with art piece and i would like to link into it and this is a good opportunity actually to talk about how to make links in markdown a very small sidetrack thing here this is how you make links in markdown it's very useful so whenever you add a description to things in your visits it's always good idea to link to whatever resources you're drawing from and the way to do that is with square brackets for the text see that becomes a link there and then in parentheses you put the url where the link is going to go and here is the actual article that i got that image from so i'm going to paste that url right there that's how you can add links in markdown and then in index.html i'm going to clear out all of this stuff in the svg okay from here what i would like to do is start using javascript and the way that we can start using javascript is by introducing a script tag inside the html page so script not script like that and what this does here is it opens up a whole world of javascript you can put stuff in the script tag that is you know statements in the javascript language and so the most basic javascript program uh is called hello world and it looks like this console.log hello world in quotes and then if you open up the chrome dev tools by clicking on this little icon here and then going into more tools developer tools by the way this is this is like something that you have to use pretty much all the time when you're developing javascript so i would recommend learning this keyboard shortcut ctrl shift i so inside the developer tools we've got different tabs we've seen the elements tab when we inspect elements but then there's the console meaning the javascript console and by the way with chrome dev you can use this little widget here to move the dev tools around i believe by default they may be on the right so but i personally prefer to put them on the bottom and within here you can change the font size with control plus and control minus but anyway when this program runs it outputs hello world right here there are a bunch of things going on here console is a variable that's just uh there in the browser and when you say console.log you're accessing a property in that object called log and it happens to be a function and that function gets invoked with these parentheses and then the argument that is passed into that function is this string it's called a string when you put something in quotes that is hello world at this point i want to just stop and take a brief tour of the javascript language it's not going to be in depth but it's just um for for folks who've never seen javascript before and i this course is for such people you don't have to know javascript already and i want to introduce everything that you need along the way so that's why i'm going to just touch upon some javascript basics so inside of console.log you could put any javascript expression for example numbers if i hit console.log five it prints out five and in javascript you can comment things out with uh two two slashes in the beginning of the line i'm going to comment out everything that we cover so that this thing is here as a as a record of what we've done console.log 5 works it just outputs a number this highlights that you can pass different types of things into console.log it accepts strings it accepts numbers with numbers in javascript you can use arithmetic like 5 plus 5 is 10. that works and there are you know various operators 5 times 5 works as well that gives us 25. parentheses work the way that you would expect them to um with math so if it's like 2 plus 3 times 5 that's one thing but then if you put parentheses around a group that's another thing so these are basic arithmetic operations in javascript there's also a fundamental concept of a variable in javascript and for that um in modern times at least we use let or const so i'm going to say const num equals 5 that that creates a variable that's called number and it sets the value of that variable to five and then we can say console.log num and that references that variable and it outputs five here the thing with const though is that you you're not allowed to reassign to it so if i say num equals 10 like this it says oh that's not allowed and that's why it's called const because it's a constant it's not allowed to change over time this breaks in order for that not to break we can use let if we say let num equals five we console.log num we get five but then we can say num equals this is called reassignment of a variable it's changing the value that it has over time so if we say num equals 10 it changes the value of num and that works because we're using let not const and we get num and in some older code that you may see you might see var and var works just the same as let for the most part but there's some differences about scoping which we can maybe get into at another time it's not really so critical older format behaves like let and what else in javascript we have objects objects are critical so if we want to create an example object we could say const obj or i'll call it object and the way that you create an object is with a pair of curly braces and then objects can have properties inside of them like num for example and then the way you set the value of properties is with a colon like this and now we can say console.log object dot num the dot is how you access properties within objects so it prints out five and that works and while we're here i want to show you a a thing that is a little conceptually tricky to grok and that is you can assign properties of objects even if the object itself is stored in a const for example object.num we can assign that to a new value and it works see it says 10 here when we access it and that's because we are mutating the object we're not reassigning the variable object that's called object here we are just changing its value its internals this is called mutating something so that's the essence of of objects another piece that we'll need is um iterating over loops because when we do this texture thing we're going to have to make a shape many many times and to do that we can use what's called a for loop and i'm going to type this up in a comment so that it doesn't break because if you run a for loop before you stop typing it sometimes it gets into this infinite loop situation and so this looks like this four we put some stuff in parenthesis and then we put some stuff in curly braces in the parentheses we can set a variable let's say i to 0 initially and then say as long as i is less than some number like five we increment i i plus plus um by the way let me just introduce the plus plus operator on its own so if we say let num is five console.log num we get five we can say num plus plus that increments the number by one so now we get six it's the same as num equals num plus one and so now it's incremented twice so now let's get seven so that's the plus plus operator increment operator and also there's another construct this less than there are comparators so if we say like 4 is less than 5 that outputs true and true and false that's another primitive type you can say true console.log false these are booleans so if you say console.log four is less than 5 that says true yes it is but then if you console.log 4 is greater than 5 that output's false so those are these comparisons between numbers that you can do in javascript and these are to be clear these are expressions in the javascript language that return a value that is a boolean and these can be nested with you know parentheses and whatnot that's the beauty of programming languages but anyway now that we've got this for loop here i'm going to uncomment it and then inside of these curly braces i can say console.log i and it outputs these numbers one two three zero one two three four see it starts at zero and that's the usefulness of a for loop you can have one line that just does one thing but the for loop says okay do that one thing you know x number of times and it gets repeated i'm seeing there's a question in the youtube chat can you assign without const for example just stating object.num equals 10 without first assigning the property with const i can maybe clarify that so it's about this example here maybe the question is can you just say object.num equals 10 without defining object first no you can't you have to have object it has to be something it has to exist first however it does not need to have the property inside of it so i'm going to comment that out make another copy it does not need to have num defined first so it could just be an empty object and then you can you can create a property on that object that didn't exist before just like this and it works yes so i i hope that answers your question i hope that answers your question you don't need to have the property declared like when you create this object it can be added after the fact but the object itself needs to exist if the object doesn't exist you get this what's called a reference error says like object is not defined because it's not there's nothing called object so there you have it as we talked about objects can we talk about other basics of javascript like functions yes while we're here let's do it i want to cover each and every fundamental concept not in a deep level but i do want to cover it so let's say we want to add two numbers five and five we can introduce a function to add two numbers i think this is a good first example of a function so i could say const add equals a function that returns a value and this is es6 es6 syntax for defining functions it can take as input two numbers i'll call them a and b and it can return a plus b so now we can say console.log add five and five and it says ten and so if we say add five and ten we also we get fifteen now this is how you would do it with es6 javascript syntax i want to talk about the different um variants that you might see of this so this is one way of defining add another way of defining add you could say function add and then put the parentheses right here and then open it up into curly braces and then say return a this is the sort of old school way of defining functions it's valid javascript still today but as you can see this arrow syntax is much more concise another way of defining add is like this you could say const add equals function that takes as input a and b and then open up into curly braces see when you open up into curly braces you can put many many different lines of code in there and those lines of code will run when that function gets invoked however you need to explicitly return the thing like this return a plus b see now it says 15. and that's a little confusing thing about this syntax up here is that it uses what's called an implicit return it implicitly adds this return statement if you don't open up the function body with curly braces yeah i was just curious um what if we happen to be returning an object um oh that works yeah the curly braces if we had multiple statements and then on the last line we are returning an object would that be um oh i see yeah i think so yeah the curly braces for the first function would be just just be the function body and returning an object would um still be okay yeah that's fine i think yeah i get i i understand what you're getting at and i i would like to walk through that so let's say for example i'll start with the old school syntax let's say we have a function that's going to return a person object with a first name and last name if we were to construct that object let's say i'll call it person example this is going to be like the output that we would like first name is uh jane last name is do that's a generic name this is the kind of object that we would want to create from a function and so then we could say person example dot first name and it'll output jane and then console.log person example.lastname it should output jane and do and by the way you can console.log and object which we do it often and and then you get this little inspector for that object in the devtools which is super duper nice okay this is setting the stage for for writing a function that generates such objects so i'll call it create person and it can take as input first name and last name or for the sake of brevity i'll just call it person first and last and what we can do in here is say return an object and that object can have first first being the property of the object we can assign the property of the object called first to the value of the variable that's inside this function body called first this is called a closure by the way the arguments become visible just like variables inside of this closure that's demarcated by curly braces so we can return an object where first is first last is last and now we can say console.log person and then we can pass in jane and do and then we should get this object back this is first jane last do so to get at your question how does it play out with the um the es6 arrow syntax it is a sort of tricky business and let me show you what that looks like we can refactor or rearrange this code to use es6 arrow functions um so const person equals function that takes as input first and last arrow to curly braces and then the inside of it can remain just the same like it was this is one valid way to do it and yeah no issues no confusion here the place where it gets confusing is when you start to leverage the implicit return on those that arrow function syntax so the way that looks is if you want to return an object you can't just do it like this as in first name last name like this because uh it gets sort of confused about um you know is this an object or is this a opening up of a function body so if you if you put a begin curly brace directly after the arrow it's always interpreted as okay we're opening up the function body now uh so this this is not velicode it says unexpected token what you can do though is use parentheses to say okay i am going to return the thing that is inside these parentheses so this version of the code works and i think this is uh what you were getting at yes absolutely yes it was the uh um thinking about how es6 syntax would uh accommodate returning an object yeah yep nice and this is this is it this is how it works as the last thing in this segment with this function i want to highlight that in es6 the most recent version of javascript there is a simplification that you can do in the case that the property name matches the variable name and that is you can just get rid of this stuff here and it automatically assigns the value of the property called first to the variable that's in scope here called first so it's a shorthand for defining object properties where the property name happens to match the variable name so this is sort of the most concise way of implementing this person function and maybe it could all fit on one line yeah it can all fit on one line and that's like a very concise way of doing it all right that concludes our um foray into javascript i did not touch arrays yet um i think i'll do that later once we start using them but this is a first first pass at some stuff in javascript okay since that's what this really is i'm going to rename this to be javascript basics and then i'll fork this one into solarwind reproduction okay now we can start having some fun i'm going to delete all this stuff i would like to build up the dom for this textured background that we see in the solar wet piece within this piece i'm going to first target the background of one of these squares so it's going to be the background of the leftmost square where we're just going to have vertical lines going across the screen that's the first target now to do that i think it makes a lot of sense to use javascript so that we can automate the creation of those rectangles otherwise we would be you know creating a hundred rectangles by hand which is just not practical but to get there we need to build up this svg using javascript as a first thing i would like to create this particular svg element using javascript now how do we do that well it turns out there's this thing called document if we say console.log document we can see what this is it says document it turns out it is the html document it's it's a dom node that you can um unpack see it has the head it has the body all of this stuff is available to you in javascript so what we can do is say document.body that actually gives us the body element and on the body element is where we can append things using javascript so as a first goal of something to create using javascript let's create this svg element itself the way we can create a dom element a dom node part of the document object model i'm going to make a variable i'll call it svg and we can use document dot create element and we can give it svg which is the tag name for this element and now if we say console.log svg we see that it is in fact an empty node that is svg right now though this dom node is sort of hanging in space it's not it's not actually attached to the dom it's just in memory in a variable to put it on the page we can use on the body we can use a method called append child svg that will append this dom node to the body and if we inspect the elements on our page here now we should be able to see that in fact there are two svg elements now see there's the one that we created in our html syntax and there's the new one that we created with javascript my aim is to replace this first one with the second one so that we can add more stuff into it it's going to need to have width and height so how do you do that well we can call svg.set attribute and the first argument is the name of the attribute namely width and i'll set that to 960. and from the javascript perspective uh you can pass in numbers and it will be coerced to a string so that's what i'll do because it's conceptually a number and then svg.set attribute width sorry height svg.set attribute height to be 500. now if we inspect the dom we can see that there are two identical svgs look at that so now i can delete this one that's defined in html and just have the one that's defined in javascript there it is so this is our starting point for javascript driven svg without any libraries without using d3 d3 when we do start using it is going to do all this stuff it's d3 uses all of these apis internally it just gives a nice way of interacting with these apis all right now that we've got this svg element let's create a rectangle that goes inside this svg element i'm going to do that by copying this block because it's structurally very similar to what we want to do we want to create a new element let's say a rectangle we can say document.createelement rect to create a rectangle rectangles also have width and height so i'll just set it to 100 and 100 just so we can see something and then instead of appending a child to the body we can append it to the svg this is how you can programmatically build up a tree data structure which the dom is it's a tree data structure so svg.pencil direct should add that rectangle to our svg and i noticed i'm just i have inconsistent formatting i'm going to use prettier to just make everything consistent we should be seeing a rectangle but we're not let's see let's see if the dom is correct oh it's not there's the width and height is 100 on the svg somehow you have to change attribute yeah i just forgot to update it here so rect.set attribute should be the one okay now if we inspect it we can see that it is there all right it is there as vichy has width and height direct is there but it's not showing up the reason why it's not showing up is because we're using create element create element does not work with svg you need to use create element ns so here's why svg and html is a fantastic addition to the web platform but since svg is an xml based language see it comes back to that concept of it is based on xml there is some nuance in how it can be used when parsing html meaning if we write svg and those attributes in html svg elements are automatically created correctly so long as they're inside an svg block but svg elements cannot be dynamically created with create element in the same way as html elements it's in order to dynamically create svg elements you must explicitly tell the browser that you want to use the svg name space so this is something that's particular with xml i must admit i don't fully understand it but what i do understand is this is how you need to do it in order for it to work so let's try this in our code i'm just going to paste that block here for reference it's dot create element ns passing this namespace string that def i think what it's doing is saying okay this is an xml document that uses the svg namespace meaning it's an svg xml document so instead of document.createelement we can say document.createelementns pass that thing and say okay this is an svg container element and similarly with the rectangle we can use the same thing okay now it shows up all right so this is how we can create svg elements that work using the dom api now let's get into um creating a bunch of rectangles to approximate that solar width piece this rectangle is 100 by 100 but what we're going to do is we're going to create a bunch of vertical lines with rectangles so the the width of them could be small let's say 10 just 10 pixels but the height of them should be the same as the height of the whole thing meaning 500. see now now it's going to go all the way down the screen and we can move this rectangle around by setting x if i set x here to be 10 see it moves over a little bit if i set x to be 100 it moves over 100 pixels now at this point i see some duplication duplicated logic in the code it's a very uh simple form of duplicated logic but instinctually i think to myself oh there should not be duplication like that and that is the 500 and 500. now that we're out of html and in javascript we can start using variables and later functions to eliminate duplicated logic to me meaning uh if you have to define something multiple times in different places it's preferable to just define it in one place so that you can you know if you need to change it you could just change it in one place so to do that i'm going to say const width equals 960 and height is 500 and then wherever there's 960 in use i'm going to use width and wherever there's 500 in use i'm going to use height so setting the the height of the svg and the height of the all of these rectangles so it's just a simple refactoring and at this juncture i want to point out that instead of hard coding these we can actually read them from the parent page which i always love to do because then when somebody loads the page and it's resized differently it'll use whatever width and height the page actually is at the time and the way to do that is i believe window dot inner width and window dot inner height yeah so window is another thing kind of like document that's available in the browser that you can call upon and using inner width and inner height gets you the the actual dimensions of the page when it's loaded okay this feels right to me there's no numbers that are hard coded i find this beautiful oh except for 110 but i feel like maybe those are fine for now all right now that we've got one rectangle let's make many rectangles and conceptually what we want to do is you know have this code run but just change x every time but rather than copy paste it a bunch of times i'm going to put it inside of a for loop 4 and i'm going to type this in comments so that we don't run into an infinite loop situation 4 let i equals zero i is less than n i like to use n so that we can change it later if we want to um initially i'll just i'll set it to 100. let's make 100 of these i plus plus and by the way in vishub if you ever do run into an infinite loop you can just type hash recover at the end of the url and this is how you enter recovery mode in recovery mode you can edit the code and it's not going to automatically run and then when you're done fixing the code that created the infinite loop you can just hit exit recovery mode but anyway hopefully that'll never happen so now inside of this for loop this is where i'm going to move this code i'm going to cut this code with control x and then paste it into this block with ctrl v and then use prettier to update the formatting so that it's all indented properly and now we can use i to to move things around see i starts at zero and then uh the second time around i is one and then the next time around i is two and so on and so on until it gets to be 99 in which case oh this still runs for the 99th time but when i gets to be 100 this check fails because 100 is not less than 100 and then the for loop exits so our values of i are going to be from 0 to 99. so the thing that we want to vary is x if we just set x to be i it's going to go across the screen but it's only going to move one pixel at a time right so if we wanted to move let's say 20 pixels at a time i can multiply i times 20 and we get it there it is there it is i see there's a question in the youtube chat um for properties on the window object you actually don't have to write window.inner width just inner width should be enough for the browser to get it yes yes that's true that is true window is an alias for the global object so you can actually say inner height and inner width just like that and it works just the same it's true yeah thanks for that thanks for that however if you use a bundler or a build tool something like that it will complain and say inner width is not defined so that's why i just sort of by default i do like to explicitly say window because those tools well we're not using them now so it doesn't matter but if you are using a tool that sort of checks or eslint for example that checks the validity of the code it often would complain that okay these variables are not defined anywhere so that's an error but it those tools do understand that document and window are things that are provided by the browser and are expected to be in the global namespace so yeah that's why you may need to use window and i see there's another comment you do need window prefix for esm esm oh modules ecmascript modules so i don't know i'll just um i think i'll keep it here for now but i'll just add a little comment that says windows optional sometimes but yeah it's a great little sign discussion thanks for that any other questions in the meantime yes i think uh i have one question um i'm curious about the const inside of the loop um it looks like it's being reassigned but it's it's not um and i'm curious as to how that works yeah that is a great great question it looks as though const is reassigned here but in in fact it's not that's because const and let are block scoped not closure scoped the way that var is so what that means is the block that gets opened up with these curly braces and this for loop defines the scope of that wrecked variable let me give a concrete example here if i say console.log rect out here it says reference error rect is not defined and that's because we use const and it's block scoped that means that that variable does not exist outside of that for loop and so essentially every time that for loop runs with an another version of i that const is recreated in a brand new block scope and so that's what makes it so that cons like this rec it's never actually reassigned the whole variable is recreated again and again each time the for loop runs through one of its loops however if we were to use var here check this out then this console.log rect actually succeeds it actually prints out this dom element here why is that well it's because when you use var it's actually scoped relative to the closure that you're in so right now we're in the global closure because we're not inside of any function definition but if we were inside of a function definition the curly braces of that function would define the closure meaning the scope of that variable and this is actually the core difference between var and the new constructs of let and const let is also block scoped so this is actually the the difference the fundamental difference between var and let var is closure scoped but let see if i use let here it's block scoped meaning it's scoped within the for loop that's why we get this reference error when we try to access it here so yeah that's that's a rundown of scoping with var versus let and const i'll switch it back to const because um it's it's generally i i think and this is a personal preference thing it's generally good practice to use const to default to using const un until you have the need to reassign it and then you can use let it just makes it easier to read the code later on for your future self or for anybody else reading the code someone says let would still be nicer there but i respectfully disagree i mean you could use let i see actually a lot of developers use let by default but um i would argue strongly that it's best practice to use const because when the reader of the code in the future sees that it's it's clear okay this is not going to be reassigned it makes it easier to reason about the code when i see let when i read somebody else's code i immediately look for where it's going to be reassigned like oh that's like something confusing i have to think about it could be reassigned to value where is that reassignment that's where i immediately would go so that's why i would strongly argue that um just use cost by default and if it turns out that you need to reassign it then yeah change it to let change it to let but only if you need it that's just my my personal take on all this all right so i would like to actually reproduce that solarwind piece we've got this as one of the directions of the solar with piece now i would like to change it around so that the texture goes the other way that way we have our two ingredients that we will eventually put together with this clipping path thing to do that i'm going to fork this vis and i'm going to call it solo it reproduction vertical it's just going to be a vertical variant and how do we make it a vertical variant um it's just changing around this stuff here this logic here instead of x varying with i we can very um y with i so y now can be i times 20 and instead of width being 10 height can be 10 and width can be the value of the width variable okay that's it now we've got our vertical and our horizontal and now what we can do is we can use an svg mask the idea with an svg mask is it defines an alpha mask for compositing things so what we can do is say mask give it an id and this mask is going to be the circle in the solar whip piece see how this circle in the middle masks the textures that's exactly what we're going to do here so we're going to have a black background and a white circle for one of the textures and then a white background and a black circle for the other of the textures to invert the mask and this is how we can implement this piece so it looks generally something like this we create a mask element inside the svg and give it an id let's do that and since we're in this world of uh javascript generated stuff we need to use this api which gets cumbersome pretty fast so what i'm going to do is copy that block of the rect and i'm going to change this to mask document.createelement and s mask i'm going to set the id attribute to something arbitrary i'll just call it my or i'll call it um circle mask circle dash mask we don't need anything else and then we say svg.append child mask and that has to set the attribute on the mask and we append the mask as a child okay now that we've got that mask we can we can create a circle within that mask so i'm going to copy this block again and i'm going to say circle is document.createelementns circle and then on that circle we can set the attribute of cx and cy to be the middle so cx would be width divided by 2 to put it in the middle cy would be similarly height divided by two and then we want to append the circle to the mask it has to be a child of the mask now that we have this we can set the mask of these rectangles to be that circle mask and let me just consult the documentation again so on any shape you can say mask equals url parentheses hash the id of the mask and it's kind of a quirky way of doing it but you know that's just what it takes to make it work so i'm going to copy i'm going to paste that reference and then on these rectangles we can implement that by saying rect.set attribute mask and the value of that attribute is going to be url hash and then the id of our mask which is circle dash mask and i think that should work it did not work oh because we need to set the fill of the circle i believe so let's set the fill attribute of the circle to be white i think this is how these masks work no uh black we don't have vertical rectangles at all yeah i know we're not seeing them because i'm sending the mask if i remove the mask then we do see them the question is why is the mask not working oh oh i believe i didn't set the radius of the circle silly me so r of the circle can be say 200 and we may need that fill after all okay so we need cx cy and r i'll just try a value of 200 for r and let me try setting the fill to be white ah there it is there it is got there so now the next challenge uh would be to invert this mask for the other texture the way that we can invert the mask is by setting the fill of the circle to be black and then we put a white background rectangle within the same mask because the way the masks work is black becomes you can't see it and white becomes you can see it i'll follow the same pattern as we have for the circle but with the rect i'll call it mask rect so that it doesn't conflict with the other rect not maybe it wouldn't anyway but anyway i'll call it mass correct and the tag name will be wrecked and on the mask rect we can set width and height just to be width and height because i wanted to fill up the background that's the point of this is to just fill up the background and then mask dot append child mask erect and i would have thought that would work um oh i have to set the fill to be white boom all right see that we've got the inverse and now that we have all of the pieces let's put them together to create our solar with reproduction what we need to do is have the rectangles that go in both directions present at the same time right and so i can use vishhub to look back at what i've just created so we've got these horizontal lines oh and let me consult the direction so the background should be vertical and the foreground should be horizontal so um in this one we have the vertical lines we we should really invert this mask because yeah the foreground should be the vertical ones according to the actual piece and then let's bring back the um let's bring back these lines that go in this direction i'm just going to copy this block from here into here as another for loop that runs n should be really only defined once and check that out that's kind of a cool intermediate state by itself i think i'll fork from that and at this point what we need to do is create another mask that is the inverse of the mask that we already have so i'm going to just take all this stuff that defines the mask and i'm going to paste it and rename this to be mask 2 and i'll call it circle mask 2 not very creative i'll just put 2 at the end of all these variables all right so now we we have that mask 2 with direct and the circle we can invert these colors of the mask so i'll change black to white change white to black and for these um vertical rectangles we can use the mask of the circle mask 2. so instead of circle mask it should be circle mask dash two and boom we have done it there we have our solar with reproduction awesome awesome yeah this is so satisfying i'd like to leave you all with an exercise to do between uh now and next week reproduce any solute piece ideally using the javascript dom manipulation that we've done today and these are actually three different options for an exercise i want it to be openended so instead of reproducing a particular solar with piece you can create art you know just create generative algorithmic art in the spirit of soul the wit very openended you know you can be very creative creative or add animation to what we created today like i was thinking maybe the textures could be rotating or or the circle could change size or something like that so these are your three options in terms of the exercise for this week i have updated the forum index to create uh to have an episode three link so when you uh submit your piece please just submit it as a response to this thread and i'll go over it uh i'll review it next next time all right questions anyone i have a question sure sure what is functional programming and objective programming functional programming versus um perhaps what you're thinking of is object oriented programming that's a great question uh it's it's very like abstract and philosophical in a sense um but i'll give you a brief take you know my brief take on that functional programming generally makes heavy use of functions and in particular passing functions to other functions javascript is actually a functional language it's been called lisp in see's clothing and i love that i think that was who said that i don't remember his name but yeah javascript is lisp a famous functional language nc's clothing and c is a procedural language and c plus plus and java are object oriented languages meaning the central construct in those languages is a class and then you can have instances of the class that are called objects um and so in in the language java for example an object is an instance of a class it's fundamentally different than in javascript an object in javascript is is a set of key value pairs that's often called a you know hash table in other languages and then there's another language called haskell on the extreme side of functional programming in haskell there is no mutation there is no such thing as let and there's no such thing as reassigning a value to an object so you have to create new objects all the time in haskell it's what's called a pure functional language so if you want to learn really really learn about functional programming i would suggest to learn about haskell it's fantastic but yeah practically speaking we are in the world of um functional programming with javascript although it is a mix i mean in es6 there is there is a class construct and you can do objectoriented programming in javascript i personally have sort of moved away from that i don't use classes very much i just use you know objects that have key value pairs that are expected to be a certain thing um and then there's the idea of typescript and type safety which you don't have in vanilla javascript but typescript is great if you want to be sure that there's no um bugs regarding you know objects not having the things you expect them to so that's my brief take on functional versus objectoriented programming i see there are some yeah go ahead what we see here in this one exercise we did just now it's functional programming mostly right i mean is it functional programming is it object oriented programming it's um it's almost like at a at too high of a level of genericness to even say to even make a call i mean the dom api is object oriented in a sense that you know you're you're invoking these functions to create objects that are instances of a class namely the class called dom node i believe it is uh yeah so in this api that we're using it's an interface it's an abstract base class and all of this terminology reeks of objectoriented programming it's like yeah this is definitely objectoriented programming they're having a base class and in objectoriented programming you have classes that inherit from other classes and you have this whole hierarchy of stuff so we are using an object oriented api to the dom so in that sense it is very much object oriented however we're not you know we didn't create any classes of our own so in that sense it's not objectoriented um and we're also not using any functions except for the methods on these instances of the classes so when you when a function is positioned as a property of an object it's often called a method so these are methods on these objects which is also from the objectoriented realm you know instances of classes have methods that's just how objectoriented programming works so if you were to you know broadly say is this code that we wrote today object oriented or functional it's more object oriented honestly we're not using any functions really and even this this way of doing iteration is very procedural if we wanted to do it in in a functional programming kind of way we would use some other constructs and we'll do that later by the way i'm thinking next week we we refactor this whole thing to use d3 and functional programming and abstract away duplicated logic with functions just to see how things get really tight and concise when you do really embrace functional programming and thanks somebody in the youtube chat said um lisp and sees clothing is from douglas crockford yeah yeah yeah douglas crockford he's he's got some really good stuff really good really good written pieces about javascript oh someone asked could i do this using visual studio code yes yes of course i mean it's just a text file here so invis hub by the way you can export the thing and you get a zip file you can extract this somewhere and then just open up index.html in visual studio code and you know everything will just work the same way that it's working here except that you'll have to open up the file in a browser and every time you make a change you can have to save the file and then go and refresh the browser unless you get deeper into the tooling of having something that automatically refreshes like a webpack development environment yeah all this stuff i'm i'm doing here is just purely uh html standard standard html and javascript and svg and it's it's not in any way dependent on the fact that i'm in vishub this hub is i'm just using as a teaching tool so that i can give you references to these code files but yeah you could totally do all this with visual studio code and as we get deeper into javascript i think i'll get deeper into um showing how to work outside of his hub using different build tools yeah great question oh yeah there's a discussion in the youtube chat about um classes in javascript is actually syntactic sugar for appending stuff to the prototype it's very true it's very true but that's like that's a whole other rabbit hole there's like uh when you create objects in javascript you can actually create them to inherit from a prototype which is it's just a whole can of worms that i just would rather not get into because we're not going to need those constructs another comment in the chat is you could have wrapped all this stuff in view.js yeah it's true it's true i mean this is a very crude way of doing dom manipulation but i wanted to explicitly use the dom apis just so you see what it is in its bare form you could wrap all this stuff in d3 do it in react do it in angular do it in view anything but the resulting dom is going to be the same and that's really what matters in terms of what you get uh what you see on the screen all right i think i'll wrap for today this has been a really good session and um yeah i'm really super excited to see what you all come up with feel free to fork this or start from scratch um you know be creative add gradients or whatever add animations and all right really looking forward to next week thanks everyone for joining see you in a week bye all right welcome to episode 4 of get it right in black and white today what we're going to do is use d3 to reproduce this solar with piece in its fullness with different shapes what we'll cover includes uh a review of exercise submissions from last week and then we're gonna start using d3 selections and data joins we're gonna take what we did last week and refactor it you know move the code around change it so that it does the same thing but uses d3 and then we'll look at d3 symbols d3 actually provides these nice shapes that we can use uh and along the way to reproducing that solar whit piece we're going to talk about svg group elements translating group elements meaning moving them around and we'll touch upon d3 point scales and potentially band scales depending on how far we get all right so this is the solar with piece that we're aiming to reproduce and today what i'm hoping to do is get to the point where we have multiple different shapes in this mask and if we get to that point and still have time i want to tackle the problem of the background being different for each of these um i think the first pass would be you know the background is all uh vertical lines and this the filled in shapes are all horizontal lines that would be the first phase that we're going to shoot for so phase two um would be to make it so that each square here has has the um the horizontal lines in the background and the vertical lines in the foreground alternating with the vertical lines in the background and the horizontal lines in the foreground so i don't know i hope it's not too ambitious um let's give it a shot all right here's the forum post from last week let's see what we've got um felipe mayo he's been following and i'm very impressed by this work um this is actually a game check this out uh he is my face with you know this solo witesque kind of a thing going on pretty wild and it changes over time i'm just blown away by this very nice very nice work yeah and i think he actually made this into a fullblown game although i can't find it right now and look he made this one earlier oh this is so good look at that incredible really incredible so here's another one from w gloss this is pretty neat there's some randomness here very cool very cool yeah vanilla javascript and dom api here's one from nita check this out whoa what that's crazy oh my gosh nita you want to talk about this a little bit yes i can can i see the code so i added animations and fast that's very cool but how is how are they all going could you mute yourself now how how is it that each of these are are not going all at the same time it seems like it's the duration of this animate is is a random number that's really cool really cool so that's how that effect happens very nice and whoa look at this one very nice it almost looks like threedimensional uh balls or something wow very cool very cool let's see oh here it is he posted again this is the game version so i was i was quite impressed by this check this out you have to you have to you have this is so funny you have to click when it's black and white so that's i just got one point and if you click when it's not black and white okay i clicked on a black and white again but if you click when it's color you lose a life see that one less little icon there so this is just through the roof really great job really creative very nice work here's another one from nita a bunch of circles wow beautiful beautiful grid of circles very nice do you want to talk about this one at all yeah i would like to talk about it so what i did here uh we are actually positioning each circle in x and y direction so we are using i and j twice so we can get the kind of matrix values in the matrix i and j for each cell there something like that let's say it is going in the x direction and y directions at the same time beautiful you are getting the whole grid gets filled up depending on how many numbers circle we are using and you can add animation and other things on top of it and i did it in another example i kept forking it again and again it was just fun awesome awesome thank you yeah this is great so it's a nested for loop where i goes from zero to count j goes from zero to count and for each combination of i and j the circle is positioned very nice it's very nice and it's pretty close to this other solar with piece so that could be the next phase perhaps all right that's it that's all the work very cool all right here we go here's our piece that we made last time i'm going to start by forking this and i'll call it solar with reproduction with d3 all right open the editor the first order of business that i want to do here is include d3 into our app here one way to do that would be to add a script tag to the head and put the source equal to something usually from a cdn like unpackage a cdn is a content distribution network that essentially hosts files on the web that you can pull in however in modern web development usually you use a a node js based build system like using webpack or rollup or using some starter app system framework thing and there's a relatively new feature of this hub that lets you approximate package.json which i'm very excited to start using so let's let's do that i'm going to make a new file called package.json package.json by the way it's like a it's a standard in a way npm and the node npm stands for node package manager it's a whole ecosystem of javascript libraries and so npm expects this thing called package.json and you can put a bunch of stuff in here like set the license and you know add dependencies dependencies is what matters for us so it's you specify this object that has dependencies and then the library name and the version we can use this to pull in d3 to our program in package.json i'm going to make it an object in in json format javascript object notation format json and the key will be oh there's some something strange happening all right so we can type dependencies as the key and the object can contain d3 at some specific version and um let me check which version d3 is at the way i like to check that is to go to which is a cdn that hosts script files and just type d3 and it will automatically fill in the latest version so we're at version 6.6.1 so in here d3 version will be 6.6.1 all right that's like a bare minimum package.json and then what we can do is introduce a a script file where our javascript can go and just by convention i'm going to call it index.js and what we can do is take all of this javascript that was in this script tag directly on the page and move it over to index.js and everything still runs now i can delete that script tag over here and we have this sort of new setup in which we can import from d3 so here we go let's pull in something from d3 i'm going to say import selection from d3 this is es6 module syntax to import from packages and this syntax you can use again with all the modern um templates and whatnot and so let's see if this worked console.log selection i just want to see did it get defined as anything in the dev tools we can say that indeed it's a function array it's a function from d3 it's got these weird uh characters because it comes from a minified file the the d3 build but anyway this means that now we can start using d3 so let me talk about selection if you google d3 selection and click the first result it's the documentation page for this package called d3selection and d3 by the way is structured as a collection of many smaller packages that are all composed into this one monolithic library called d3 and so if you see in in d3 itself it just it exports things from all of these d3 packages which you could use on their own but for convenience sake i'm just going to pull in the whole d3 build which contains all of this stuff but anyway d3 selection is one of these things and i'm gonna pull in uh from there and feel free to stop me at any time with questions by the way yeah i haven't really introduced um d3 itself let me stop and do that since this is this first time that we're pulling in d3 i thought i would take a moment to discuss d3 and why we'd want to use it overall just some broad context for this d3 stands for data driven documents it refers to documents as in the dot the html document object model d3 has utilities for dom manipulation which we did last time with the vanilla um javascript api for dom manipulation which was quite verbose a lot of that stuff can be changed such that it uses d3 for dom manipulation and the code will shrink down it'll be a lot simpler to read and use in addition to daw manipulation d3 has all sorts of utilities for building data visualizations so that's why it has become sort of the de facto standard for building visualizations on the web today the whole rest of this series is going to be diving into using d3 to make all these different types of visualizations but as a starting point i wanted to introduce d3 in a way that's disconnected from data and all the complexities that comes along with data in this solar with exercise here d3 selection is the package within the set of d3 packages that does dom manipulation here are some examples of how to use it um and and i'll go you know we'll craft these ourselves but for reference this page is the canonical documentation for d3 selections all right now that we've imported selection from d3 we can start to use it to replace this code that we had from last time so here's what i'm going to do i'm going to comment out everything and then reimplement it with d3 one block at a time the first block to consider is the one that sets up the svg element i'm going to comment this out as well and replace it with some d3 based stuff select body is what we need to do to get a d3 selection of the body element and now that i think of it um we really need to import select from d3 not selection so we've got select from d3 we select the body and a d3 selection instance is this sort of complicated thing that we'll be learning more about but it has this this pattern of using it called method chaining where once you invoke something and you get a d3 selection back that thing that gets returned by this function has a bunch of methods on it one of which is append and you can pass into append the tag name like svg and that returns the selection of the svg element that was appended to the body so this this one line here does the exact same thing as this line and this line it creates a new svg element and appends it to the body to set these attributes on this well first of all let me save this as a variable i'll call it svg once we've got that we can say svg.attr which is short for attribute internally this actually invokes set attribute and the signature is compatible with the vanilla dom api method set attribute so i can just paste this stuff here we set the attribute of width to be the value of the variable width and same thing for height the height attribute gets the value of the height variable now we can inspect the dom to see if it worked sure enough there it is there's an svg element with width 960 and height 500 any questions at this point all right so this is one way to set up the svg element due to this method chaining thing you can actually combine these together into one big statement so instead of having multiple different statements it could be one giant statement where we chain these things together so we append this the svg and then on the selection of the svg we set the width and height all right so we've got our svg setup the thing that i wanted to do next was add the the rectangles that are in the background that would be a good next thing to add yeah this block here where it's a for loop that adds a bunch of rectangles let's do this with d3 so i'll bring that up here the way we would do this in d3 is we need to have an array to work with and then once we have an array we can use the d3 data join concept so here's what we can do i'm going to use this code as a template to build up an array of objects where each object represents the attributes of a single rectangle so i'll paste that uncomment it and then i can initialize an array i'll call it marks because it represents the visual marks that are going to appear on the page i'll initialize it like this to an empty array and then in the body of this for loop instead of creating dom elements i'm just going to push objects onto this array meaning you know append them to the array add new entries to this list of things by using the push method so we can say marks.push and pass in an object literal and on this object literal i can build up all the things that it needs to know to render a rectangle so y for example could be set to i times 20 width could be set to width height could be set to 10. i'm just copying from what's there and the mask can be set to this string here that's how we can build up an array of objects that describe the rectangles this is not using d3 at all this is just pure javascript and just to see that it worked let me console.log marks sure enough we get this array and we can see it's got a bunch of objects where the only thing that really varies is y all right so far so good you have a question yes so we are doing this because dt requires right yeah yeah that's right um you know your audio is really bad i don't know what it is but maybe grab a camera or something the reason why we're setting up this array is because d3 expects an array to work with to use this data join feature of d3 which we're going to use right now i'm going to refer to this svg selection from earlier to add rectangles inside of it and to use this pattern of d3 data joins we can take a d3 selection and say you know that selection dot select all uh rect this makes a selection of all rectangles that are on the page already and at the point that where this code runs there are none but the fact that there are none is useful information to d3 because it knows that okay the set of dom elements on the page it doesn't contain what it needs to therefore i have to add it so once we've said select all we can say dot data marks this produces a d3 data join that has a bunch of methods on it um one method which was added fairly recently uh in d3 is dot join it's a simplified api to um the other stuff that was in use before like uh and dot enter uh dot merge sort of stuff and we'll you know we'll get deeper deeper into this but this is the simplified api that we can use for our case so what it's going to do here is create one rectangle for each of these marks and then on this selection that contains all these newly minted rectangles we can set some attributes we can set the attribute of i'm looking at this object here we want to set all four of these attributes we can set the y attribute to be well what we want to set it to is the y value from the corresponding object that was constructed over here to do that we can accept a function as input to the second argument to attr and that function can take as input d which is the datum uh it's just a convention to use d to represent the datum like one row of the data or you know one entry in the data array and that can return d dot y because we've set it up here so when we access d dot y it's going to access the y value that we set up over there and we can do a similar thing for all the other attributes that we need width we can set it to d dot width height we can set it to d dot height and mask we can set to d dot mask and that that's not doing anything now because i commented out the actual masks and as you can see it worked we've got our rectangles back this is how you can use d3 to create a bunch of rectangles on the screen now this duplication between here and here is not ideal but i kind of like this way of doing things in a sense because it decouples the computation of the marks from the rendering of the marks this here it just creates an array of objects that we can directly pass in to all this d3 logic over here and i like this setup because if in the future you ever wanted to change what you were using for doing the dom manipulation you could and this part wouldn't have to change at all the only thing that would have to change is this like if you wanted to render it using react or view for example these other dom manipulation frameworks but this is not often what you see so often what you see is it's all combined into one big block and in a sense that's more efficient because there's no need actually to create all these strings if they're all the same and then refer to it here you know we could just pass in uh the value right here so what i'll do i just want to show you how that looks so i'm going to comment out this so it's there as a reference in the future and then refactor this to use the more common pattern that you find with d3 which is to um to compute all the values in these accessor functions so instead of doing all this stuff here i'll do it down here and if we're doing it like that we don't actually need all this logic to build up the array we can use a utility from d3 called range which creates an array range of say five it creates an array that has five integers in it that start at zero and to use this we need to import range from d3 along with select now that we've done console.log range of five you can see that it did output here that array that just contains some numbers so this is the data array that i'm going to use now as the input instead of saying data marks i'm going to say data range of 5 but we did have this variable called n which is the number of rectangles so i'm going to use that instead now in here instead of accessing the properties that were on those objects we can compute those values on the fly um d is the number in this case so i'm just going to say d times 20. it can take the place of i and for these other ones i'm just going to return width and 10 for height and then this string of the circle mask right here and since these are returning the same values for each rectangle these don't actually need to be functions we could just pass in the value directly like this this highlights an important aspect of this dot attr method that it accepts either constant values like this or functions and when it when it accepts a function it passes in the object from the array into that function and then whatever that function returns it's going to use as the value for that attribute all right so we've got this far let's keep going in our refactoring of this code here what does this block do it creates a mask and it sets the id to be circle mask and it depends it to the svg we can do the same with d3 by saying svg dot append mask and we want to set the id attribute to be circle mask all right that should do the same thing as this block of code over here i don't know why it's not showing up our rectangles though oh oh yes because now that mask exists but it doesn't contain anything yet it doesn't contain those the circle or anything so that's our next step the next block of code adds that background rectangle of the mask let's do that now with d3 that would look like a mask dot append although we don't have mask yet um i'll just define that here to be that d3 selection of that mask element so now we could say mask dot append wrecked this one statement does the same thing as this statement here which creates the rectang element and also appends it to the mask parent now we can set the attributes width height and fill and if i change this to white it should show up all of our rectangles and it does okay but black means hide the rectangles this next block does the same thing but for a circle so i'm going to copy that logic for the rectangle and change it to be for a circle instead where we set the cy attribute we set the cx attribute and we set the radius attribute and finally we set the fill attribute of that circle all right and the mask is working again fantastic now let's do the same for mask 2 now remember mask 2 was all the same stuff as mask one except just the colors were inverted so we can copy uh this whole block of stuff mask 2 oops is a new mask that has the id circle mask dash 2. and then we append a rectangle to mask 2 and instead of it being black it should be white and then we append the circle to mask 2 down here and the fill of that should be black instead of white okay that seems to be working although i forgot to change it to mask 2 so i'll change that now mask 2 dot append mask 2 dot append all right and lastly we have our rectangles which i'll bring up to the top near the other rectangles just so all the rectangle stuff is in one spot so i'll paste that here and it's almost exactly the same as this block of code that we did for the first set of rectangles the only difference is that x gets set to i times 20 so i'll just change this y here to x width gets 10 height gets the value of the height variable and the mask is circle mask dash two okay um see this breakage this is not what we expect see that so does anyone have any idea what's going on here see what appears to be happening here is that this first chunk of code that made these rectangles it set up all of these rectangles uh properly but this line this next block of code that deals with rectangles it actually selected all of the rectangles that were there from the first block of code and then it set um the x value of that and it set the height value um so it's just sort of a mess where our two different blocks of code are you know impacting the same set of rectangles which we don't want so how can we how can we make it so that these two different blocks um act on different rectangles well there's a couple of approaches one approach is we could use classes to differentiate them and another approach is we could use group elements to contain them let me show you how both of those would play out if we want to use classes we can set the class attribute to be something like maybe horizontal and then when we say select all we can say rect.horizon to only pick up on those horizontal ones and it's still broken because we haven't done the same treatment for the other set but we could say class is vertical over here and then we select on the vertical rectangles only this is one way of doing it i'm going to fork at this point just to have a reference of that state of things okay so this is one way of doing it using classes another way i'm just going to put it back to the way it was another way of solving this problem is to use group elements where you could say svg.append g first and that way it would only be working within this newly appended group element and an svg group element is it's a very um useful element it it just groups its children together in the dom tree and let me do the same for the other set okay now you can see it's it's not broken anymore and if we inspect the dom we can see that there's one group element that contains the set of rectangles going from top to bottom and then there's an entirely other group element that contains the rectangles going from left to right yeah and the reason why this works is because the selection for the rectangles only acts within each of these different group elements so that's another way to to solve that breakage okay very good this feels like a milestone from here i'm going to fork this and try to reproduce that the full the full set with the different shapes any questions at this point yeah just a couple uh um the attributes uh the attr um just so to get it straight in my head those the second arguments to the attr methods those effectively s take match a data point in the um your array and put it on the screen basically that they they attach some kind of pixel point to that data point is is that the right way of thinking about these um these these arguments that are passed to attr yes yes that's correct that's exactly right so whatever we pass into dot data should be an array and the dot attr applies to all of the dom elements in that selection and so after we call dot join um the first time this runs i mean it's not running multiple times but when it runs it's going to create a bunch of rectangles and then for each element of that array it's going to pass that element as the argument to this function that we've passed in and so the responsibility of this function is to map that entry in that array whatever it may be whatever shape it may be onto whatever is expected for the x coordinate in this case or in general the you know the attribute value of the dom element and so yeah it's a mapping function that essentially transforms the thing from data space whatever that may be into i like to think of it as screen space in this case the xcoordinate so literal position on the screen uh but it could also be a color or you know width and height like these cases here but yes yes that's exactly what it's doing thank you yeah that makes sense and the earlier chunk where it talks about yeah append g um and select all and data are these so just so my mental model is correct um or as close to correct as possible it's recrea it's creating a brand new selection um at that early stage and what the attr's are doing are modifying that selection is is that is that the way to think about it correct yeah some of these lines create a new selection and others of these lines modify an existing selection there was uh in the past i mean it still is there was a convention around indentation relating to this point and that convention was any line that creates a new selection be indented one level and then any line that modifies the exist the other you know modifies the selection that was defined on the line above uh should be indented by two spaces however that's sort of fallen out of fashion because everybody's using prettier nowadays but it's a nice touch and just to to really make it clear let me walk through each and every line of this svg.append g creates a new group element a dom element you know internally it invokes exactly this code of um you know document.createelementns with the svg namespace and it takes that that dom node that was constructed and associates it with this new newly minted d3 selection that didn't exist before and it creates a brand new selection so the return value from svg.append g is a selection that just contains that one group element when you say dot select all rect this creates yet another d3 selection that happens to be empty um it's it's an empty selection that would contain wrecked elements if there were wrecked elements there but there's not um this information the fact that it's empty is very useful to the internals of the dot data method which associates an array to that selection and at a certain point selections were made immutable which is a really nice feature of selection selections are immutable so the dot data call creates a new selection where that empty selection of no rectangles is associated with this data all right and then when you say dot join rect this is actually a short form of another pattern which i'm not sure i totally want to get into but uh essentially it's dot enter dot append wrecked and so the enter selection handles the case where there's no dom element on the page corresponding to a given data element and so for each of those cases it will append a new rectangle so that's this this dot join is a short form for that in this particular case and then all of these lines that use dot attr they they don't actually mutate the the anything in javascript like the so the d3 selection of these rectangles is immutable however what it does when this line runs it goes through each and every dom element and it mutates the dom element it sets the y attribute to be the return value of you know whatever the value is returned from this function and same thing with all these others it goes through and updates the dom elements based on the return values so i hope that clarifies the the role of the different pieces definitely thank you very much my pleasure i see there's some questions in the youtube chat did join us to be enter rect well no it used to be dot enter dot append wrecked and join it actually does something with merge but we we'll get to that later um another question from the youtube chat since mask height and width are the same can you bind them to a parent g element that's interesting so the mask width and height are applied to the the rectangle within the mask not the mask element itself therefore um no i don't think you can do that i don't think you can do that okay here we go let's um let's fork this one and i'll call it full solar with reproduction with d3 the first thing i'm going to do here is just delete all this junk that is left over from earlier deleting all these blocks that are commented out all right now we're left with this program that is 62 lines of code what we can do next is change this mask to be a shape and d3 actually provides a set of symbols that we can use there is a package called d3 shape and in d3 shape there is a section on symbols these symbols here are provided by d3 and the way this plays out is that um you call some d3 functions and it generates for you the string to use as the d attribute for a path to create one of these symbols on the screen we need to just make a path element and then set the d attribute to the the return value from some invocation let's see what that invocation would be we have to call d3.symbol and pass in type and size the type that we pass in should be one of these symbol types like d3 dot symbol circle d3 dot symbol cross d3 dot symbol diamond also the set of symbols is exposed as d3 dot symbols this is an array that contains all of these individual things and so since our aim is to reproduce this piece which has a bunch of different symbols going across i'd say we can just use that array of all the symbols that are available and you know traverse it use that as our data all right so let's import symbols from d3 in our code import select range and symbols from d3 we also need to import symbol from d3 the way we use this is we call symbol passing in a type and a size and that returns a symbol generator which we then need to invoke with some arguments or no arguments i guess works and that there's some just there's just something complicated um that you could do if you pass an argument but you don't need to pass an argument so once you invoke this function it will return that that string that we can use as the d attribute of a path so let's give it a shot on one of these masks i'm going to replace this circle with a path and instead of cxcy and r we can set the d attribute to be symbol and i'm going to pass in the symbol type which i can just access you know symbols at index 0 the first entry of the symbols array and the second argument here could be the size um i don't really know what the range of size is let's write 300 and this invocation here returns a symbol generator which we then need to invoke as a function and once we do it should return some stuff all right i don't see anything maybe the size needs to be increased there it is i see something start to appear yeah okay there it is the first symbol happens to be a circle but to see some other shape we can access i don't know the next symbol symbols that index one for example notice that the symbol is centered in the upper left that's i think the first problem i would like to address here um yeah and the way we need to do this is uh well we want to move it around my first goal here is to move it so that it's in the center and to do that i think the most straightforward way to would be to use an svg group element as the parent of this path and transform that group element meaning move that group element around with everything in it let's try that all right so here we've got mask dot append path but instead what if we did mask dot append g dot append path this works just the same as it did because it's just a grouping with no transform applied to it to apply the transform to this group element to move this path around we can say dot attr transform and the value will be translate of let's just try some numbers 400 comma 400 yeah that moved it the way this works is um it's a string but it looks like a function invocation it's it's a domain specific language for transforms and what it looks like is the first argument to this function s kind of a thing in a string is the x coordinate so it's going to move it over to the right by 400 pixels and the second argument here is the y coordinate so it's going to move it down by 400 pixels ideally to put it in the center we could say width divided by two and height divided by two but since this is a string that's not going to work we can take advantage of an es6 language feature called string template literals and the way we can use this is by using backticks and then inside of this thing we can bust out into javascript using this syntax here a dollar symbol and then a pair of curly braces so now whatever is inside this pair of curly braces will be evaluated as javascript and inserted into that location in the string so now we can actually use width over two and height over two and now it's dead center look at that i'll bring the size down a little so it fits on the screen there we go all right so the problem now is that one of these masks uses this symbol and the other mask still uses the circle so i mean one thing we could do to address that is copy paste all this code which is what i'll do for now and change white to black all right now this sort of looks is starting to resemble that solar wood piece a little bit more but i hate this duplicated logic between these two blocks these two masks i mean there's a bunch of code that looks almost exactly the same the only difference is one of these is filled with white and has an id of circle mask and the other is filled with black and has an id of circle mask 2. and now that i think of it these names are a little outdated um because it's not circles anymore so i'm going to rename it to mask 1 and mask 2. and i have to go and update the references as well okay now what i would like to do before we go any further is refactor this so that there's no duplicated logic the reason being once we start adding more shapes into here we're going to have to copy paste larger and larger chunks and if we want to change it in one place we'd have to change in two places it would be a total nightmare and so this is a point at which refactoring makes a lot of sense refactoring is this notion of reorganizing code so that it's more maintainable or you can do more things with it generally refactoring is triggered when you see duplicated logic in your code all right so what i'm going to do here is define a function and the idea is we can invoke this function and and we can pass in only the things that vary between the two namely the mask id which is different and the fill which is different so let's try that const um what should i call it render mask equals function and i'm just going to take all this logic that appends the rectangle and the path and put it inside these curly braces and use prettier to automatically indent that now the things that we want to accept here are the id and the fill uh oh but first of all we should actually invoke this function okay now everything is in working order again and we can take as as one argument here the id of the mask and we can use it here when we're setting the id so i'll say render mask and pass in that string mask dash 1 here which surfaces inside of this function as the local variable called id which is used here to set the attribute id on the mask right so we can actually now call render mask twice passing in different ids and i'll just comment out this other block because um it's going to be replaced by this function all right so the the fill is the other thing that we we need to have vary between these two function calls so i think what i'll do is instead of white this will be fill which we can accept as the second argument and so what we can do here is pass in white to the first one and black to the second one although this is not exactly right because we also need to deal with the the background rectangle which needs to be inverted like if it's black it needs to be white so you know what instead of using fill i'm going to accept an argument called inverted and this this will be a boolean where if it's true the colors should be inverted if it's false they shouldn't be and so inverted for the first invocation should be false and for the second invocation should be true and then uh we want the rect fill to be black if it's not inverted and white if it is and to do that i see there's some youtube chatter let me finish this thought and i'll answer some questions there to do that the tool that i would reach for is the ternary operator so we can say inverted question mark if it is inverted this should be white otherwise it should be black since this is the first time i'm using this um i want to stop and show you what it would look like without this syntax it would look kind of like this let rect fill equals black and then we could say if inverted wrecked fill equals white and then we would use rect fill down there so what it's doing is if it's not inverted this code will not run and wrecked fill will be black but if inverted is true erect fill will be white and this will be filled in with white however i think the cleaner syntax would be to use the ternary operator and say if it's inverted it should be see now i'm losing track you know which what should it be let's say black and white now we can apply the same logic to the fill of the path but it should be inverted from the background and so if it's inverted now it should be white if it is and black if it isn't okay there we go victory now we can get rid of this commented out stuff here and now there's just one block of code that is responsible for rendering this mask the first time we render it as mask 1 which is not inverted and the second time we render it as mask 2 which is inverted and at this juncture i want to introduce the the syntax of calling functions on d3 selections what that looks like is it can take this is just a convention that i want to introduce now it's a convention that's used when you start to use functions to abstract uh to build abstractions in this d3 world so what it looks like is we pass the selection as the first argument and inside of this function we refer to it generically as some selection and we would pass it in as svg here as the first argument now it works everything works as expected and the conventional way of doing these sorts of invocations with d3 would be to use selection.call so we could say svg.call render mask and then pass in these second two arguments here like this and we can invoke it again with these other arguments these two are exactly equivalent in terms of what they do i just wanted to introduce this way of invoking functions on selections it doesn't have any immediate benefit right now um but it can be a very nice elegant way of doing it one of the things one of the reasons being that you can chain it like this so this is also valid syntax all right so i'll fork from here just to capture the state of things now the task before us is to render multiple symbols in here instead of just one so how can we do that well we've got symbols at index one in use here and what we essentially want to do is iterate through so if i change it to be symbols at index 2 the shape that you see is a different shape and symbols that index 4 is a star for example what we want to do is append multiple paths where each path has the this d attribute from a different symbol so how can we do this instead of just appending a single path we can use this data join pattern that we used earlier with our rectangles what this looks like um is well instead of doing it on the end of here i'm going to assign a variable called g just to sort of separate these concerns here so g is our parent we can say g dot select all paths and initially it's going to be empty dot data and what should the data be here what i'm thinking is it can just be the same thing we did with the rectangles we can use the range utility to create an array that contains integers starting at zero and how many things should be in here well it should be the same as the number of symbols that are available which we can access from symbols dot length all arrays have this dot length property and it it returns to you the number of elements that are on the array all right so we've got this array of integers going from zero to uh the number of symbols so now what we need to do is use this dot join method on paths now it's going to create a bunch of paths and on each path we want to set the d attribute to be something like this that we had earlier but we want it to vary based on the symbols and we also want the fill to be white or black since we are making multiple paths we can use a function here to take as input d one of these integers and we can access symbols at index d to have it be different symbols and what we get here is like this giant splotch where all the symbols are right on top of each other so the task at hand here now that we've got this far is to split these apart in the x direction so that you know one symbol is on the left and one symbol is on the right since we have d as an integer that starts at zero and goes upward we could potentially move each of these group elements over if we had them but we don't we're just creating path elements and there's a containing parent group element i think what we really want is to have it so that for each symbol there is a separate group element created and then within that group element there should be a path yeah to clarify what i'm what i'm saying if we inspect the dom here we can see that within the mask there's a group element that has a transform and then within that group element there are a bunch of paths i think instead we want to invert this containment relationship where for each symbol there should be a parent group element that gets a different transform that gets translated differently in the x direction and then within each one of those group elements we can put the path yeah that's what i'm going to go for and we could keep this parent element but i don't think it's necessary because we could just set the transform on the inner elements so i'm going to get rid of that for now and instead of appending our paths to g i'm going to append them to mask now it's working again but it's it's in the upper left corner because um you know they're at the origin now the next step here is to use group elements instead of paths so i'm going to say mask dot select all g dot data dot dot dot join g however this this convenience method is no longer enough for this case that we've got now we need to deal with this concept of the enter selection because what we want to do is tell d3 whenever you create a new group element you should also append a path element inside of it yeah and to do that we need to use the join method in a slightly different way um what we've seen so far is the shorthand of join where it accepts a string being the tag name but the long form of dot join is where it accepts arguments for enter update and exits and i'll get more into this later but the simplest form of this is we pass a function to dot join and it's interpreted as uh the enter selection um actually more precisely we need to pass a function that takes as input the enter selection all right i realize it is a little confusing and in here we can say enter dot append g to create our parent group element but on this we can say dot append path and then on these paths is where we can set the d attribute and the fill attribute okay we're back in working order just to work through to walk through this one more time we're passing a function to dot join that function will be invoked with the enter selection of this data join and because there are no group elements initially the enter selection will will have this append method that will get triggered for each and every entry in the array so we append a group element and we append a path element to each of those group elements and we set d and fill on each of those paths so now if we inspect the dom and look at it that way we can see that there are indeed many group elements it's just that what we need to do now is transform each of these group elements to translate them so that they're in the middle vertically but they're spreading across the page horizontally and i see in the youtube chat vonnie says use this code right here okay i'm going to copy that code and see if it works thanks for that i'm just pasting this from the youtube chat oh that's that's what i've got already but yes that's correct that's correct um all right what we want to do here is for these group elements we want to set the attribute of transform to be we can take this thing that we can had constructed earlier translate by width over two height over two okay now it's in the middle again but we don't actually want to translate in the x direction by width over two we want to translate in the x direction by a function of d and keep in mind d is an integer that goes between one and uh however many symbols there are let's just say d times 200 to like spread them out by 200 oh but this is not a function it's just a string literal so let me make it into a function that accepts d okay there we go there we go all right it's starting to come together that looks like pretty cool abstract art right there oh vani says it's not the same it uses i let me see that let me take a look at that yeah so this is the code that i wrote this is the code from vani in youtube it's it is slightly different it accepts i yeah this when you pass a function it does take um a second argument which is the index in the array so this works as well just the same however it just so happens that the array is integers that would be the same as i all the time so that's why this this variant works but anyway um we can just tweak these numbers to make it so that different shapes show up at this point so they seem to be a little too large what if i say you know the size is 50 000. and by the way i think this size is like the number of fills filled in pixels i don't know it's it's just they're high numbers but i don't know this is just what what it takes so i'll bring down the size until we can see multiple shapes there we go starting to starting to come together and i'm just guessing here at the this constant that will split them apart you can make it even smaller all right this is almost there look at that beautiful beautiful any questions at this point so the example of the join in this case that was a case of appending elements to multiple elements which was uh different from before um is that right correct yeah it's it's a slightly different pattern and it's using the the long form of dot join so that we can access the enter selection yeah so it passes in the enter selection and the enter selection is populated with um the case where there is no corresponding group element for a given data element which is the case for all of them when this runs that's why enter dot append g will append a group element for each and every entry in our array here for each and every symbol and then after appending that group element and setting the transform we append to that group element a path and then dot attr d um this whole thing works because of some the way d3 is set up it actually uses the the data element that was bound to the parent so that's why this works the data element d which is one of those integers is associated with the group element and then if you append to it if it came from the enter selection you can you can reference those those data elements from the child so that that's why this this uh works but i realize it is a lot at once in for today um but that's sort of the intention to just like show you know the scope of this d3 data joint thing um and it will hopefully become more clear over time but does that answer your question uh yes thank you yeah that's really clear thank you nice nice and by the way this this dot join method is is new to me i mean i've i i learned really well the old syntax with the dot enter and the dot merge um so for what it's worth i really only learned this this pattern recently and i'm still sort of you know trying to wrap my head around it so yeah feel free to interrupt me as i go and ask questions like this this is great this is great oh my gosh oh look at this what time is it oh look at the time i'm overtime i'm so sorry all right well we've got pretty far for today i just want to wrap this up by tweaking these numbers a little bit so that there's some space along the side see how this circle is right up against the edge there um i can just add some constant to this like a hundred yeah that looks decent and then i'll bring this number down so that there's some space on the right yeah like 125 or so and i'll bring the size down just a bit to make sure that we can see all the shapes and in viz hub you can set the height so i'm going to make it maybe 200 pixels so that it more closely resembles the original piece okay there we have it there we have it that's all we're going to do for today i will leave it as an exercise to make the back sort of scratch that to make the background rectangles match the original solar with piece so here's your exercise and this is this is um kind of a challenging one see how in this original piece each subsequent square uh reorients the lines however in our example what we've done is um they're all the same so that's one thing you could do as an exercise alternatively um i i would encourage you to use d3 to try to reproduce any other solute piece because now that we have this this new tool in our toolbox of the d3 data join it'll become a lot easier to reproduce these solar with pieces or create art just generative art in the spirit of solo wit and just as a reminder here's some other solo wit pieces that you could do with the tools that we have now the svg mask and the paths this one for example could be done with nested for loops and math.random to pre produce the points so yeah that's all for today um thanks everyone for joining and i'll see you next week here's what i'm hoping to cover today javascript arrays writing the dot range function of d3 using vanilla javascript i think this is a good example to cement understanding of arrays and functions and then we're going to look at the ins and outs of d3 selections that's what this diagram is over here we'll get really deep into that and then the d3 data join concepts and various ways of implementing them with the d3 apis all right so from here i'm going to dive into vishub and i'll create something new just to uh to get some variety and how we include d3 i'm going to start with this hello d3 version 6 d3 starter i'm going to fork this and call it um oh actually apologies we're just going to do vanilla javascript first for arrays i think i'll start with this html starter just totally vanilla html here and i'll call it javascript arrays all right i'll open the editor clear out the readme and then we've got this index.html to work inside and again i'll open up the developer tools so we have this console to work with and it says here hello javascript from this console.log hello javascript all right so we won't really need any html output so i'm just going to sort of clobber all this stuff so we can focus on just the javascript and even i'll hide the output just so we have our code and the output in the console here all right javascript arrays javascript arrays are like arrays in many languages it's a list of things essentially and the syntax for javascript arrays is something like this square brackets square brackets right here it just defines an empty array and you see here it inherits from the prototype of array which is a builtin data type in javascript and if we want to put things in this array we could say like 1 for example now it's an array that contains 1 or 0 comma one now it's an array that contains two things zero and one and in the developer tools if you click this little arrow it tells you all right at index zero the entry in the ray is zero and at index one the entry in the the array is one and we could put other types of things in here like a and b for example this really demonstrates the index concept so the index of the array always starts at zero and you can sort of use that to look up things at different indices different places different numbers in the list so let's assign this to a variable then we can do more things with it const array equals this and then we can say console.log array same thing happens now we can access things in this array by using the square bracket notation right after the array and we have to pass it the index like index 0 for example so array at index 0 gives us a and array at index 1 gives us b now arrays have a bunch of methods on them one of which is push so we can say array.push c for example and now the array has a b and c on it and i want to point out that unlike other languages where arrays need to all contain the same type of thing javascript is a little more flexible so you could have a mix of types like a b 1 and c or a b and an object and c it doesn't really matter so it's just a list of things that could be any type and at this point i believe we have everything we need to write the range function of d3 um are there any questions at this point yeah there was an interesting uh an interesting property called length um indeed yeah does that mean an array is an object oh is an array an object well it's a array is one of those types that is built into javascript um is it an object i guess it really depends on what you mean what you can do is say type of array and it will actually tell you object and while we're here i think this is the first time we're seeing typeof so i can just explain a little bit about type of it's useful to figure out what type of thing something is in javascript so if you say type of 0 it says number if you say type of the string a it says string if you say type of an empty object it says object and somewhat surprisingly if you say type of array it also says object so in the javascript language it is actually an object but it's a special kind of object that's an array yeah there are there are some mysteries there to be sure but uh that's that's my understanding of it and yeah because it is an object it can have various properties and methods see if we just say console.log array and we expand it in the devtools here we say we see that the prototype this underscore underscore proto is actually array and on that array prototype it's essentially a class you know from the world of objectoriented programming so what we've got is this instance of this array class so it is an object but it inherits from this prototype which is this builtin array class or interface i don't know really what the correct term is but this is where all of these methods are defined so you've got array.concat every filter find for each join map push reduce i'm just calling out the ones that i actually use on a regular basis sort slice these are all extremely useful things and hey if we're talking about arrays why not dig into some of these but yeah does that answer your question ideal yes thank you yeah that's that's a lot more clever nice thank you whoa all right so at this point let's dig into building that um range function from d3 so the idea with the range function is that if you give it a number say 3 that's what the length of the array should be and this function should return an array that has integers 0 1 and 2. so to simulate what it would be we can enter 0 1 and 2 and now we get out this array with 0 1 and 2. so we can combine all the knowledge from the the basics that we covered before with for loops and everything to define this function range we can say const range is a function that takes as input i'm going to call it n the number of things and then in this function body we can just define an empty array and then at the end of this function we can return this array and in the middle we're going to want to push some stuff onto this array starting with zero and then to sort of test this out i'm going to say console.log range of let's say five okay this is functioning so far but it's not actually giving us an array with the five things what we want to do is push you know 0 1 2 3 4 like this this is the correct result but then if we change the number it's no longer going to be the correct result because we're not even using n inside the function what we can do now is use the for loop construct that we looked at earlier we can say 4 let i equals 0 i is less than n i plus plus so just to remind you the structure here this thing runs once it defines this variable called i this thing runs every time you go through the loop to check if it should proceed or not and so as long as i is less than m we proceed it executes the code in this body and then this thing executes at the end of whatever's in the body of this for loop and this increments i it's equivalent to saying i equals i plus one or i plus equals one these are all the same thing as i plus plus and i typed it in a comment just to avoid an infinite loop if it were to run while i was typing it so now that we've got this in place we can say array.push inside of that loop and now see we get an array with four zeros and now if we just if we want the correct values all we need to do is pass in i to this array.push and now we've got the correct implementation for range so if we were to pass in 10 it would give us this array with with 10 integers in it this is what d3.range does internally so yeah i'm happy to get to this point this is i think a good example to cement our understanding of arrays for loops and functions any questions about this so far all right and i'll i'll just give a brief tour of a couple other frequently used array functions i'm going to extract this return value to a variable and then we can say my range dot uh well we could say a lot of things there's a lot of methods but you know i'll just talk about the methods that i use most frequently for each is a super nice one it allows you to pass a function that takes as input something i'll call it d just by convention this is a convention from the d3 community to refer to each element in an array as d stands for datum and then we can say console.log d so now it's console.logging each of these things here and by the way this is equivalent to writing a for loop and then accessing my range at index i like this it does the same thing oh i i is less than uh my range.length this is what it's equivalent to so yeah dot for each it's like a functional shorthand for writing this uh verbose for loop and then we've got some other things like uh filter super useful filter takes as input a function that takes us input one of the elements of the array and we could just say is is it equal to three and it will just pass three or we could say like is it is it even and we can check if it's even by saying d percent 2 equals 0 so this will give us all the even numbers this by the way is the modulo operator it's like it's the remainder like if you were to divide it by the number it gives you the remainder sometimes useful let's just see what are what what are the other methods i think i might stop here for now but if there's anything that i'm a big fan of sort yeah yeah sort sword is huge because then you can because then it comes back when you're doing dom stuff because the order of things in svg is really important for its rendering so i i use sort a lot to sort of get around that for sure so let me here i'm going to add you as a collaborator and in fact let me add everybody here as a collaborator because i want this to be a live sort of jam session kind of a thing we've got a deal here and we've got sriram so i'm going to add all of you and oh let me drop this link to you i'll share it in the slack i suppose and the meat why not so yeah feel free to jump into this as i'm going here but yes sort sort is hugely useful let me give some examples of sort i guess it's hard because your your data is already sort of presorted you made it in an order so it's already sorted so we can build up an array that's not sorted like four three five you know just sort of random numbers here and if we console.log that that's what we get but then if we just say dot sort on that it's sorted all of a sudden so a couple subtle things sword actually mutates the array and it also returns the array so that's why it works here it returns the sorted array so let me just demonstrate the fact that it mutates the array i'll call it sortable sortable is this thing and if we say console.log sortable.sort it does sort but check this out if we just say console.log sortable it's unsorted and if we say sortable.sort as an expression in between it's sorted in the output that means that it actually changes around the stuff in the array it mutates the array so it's not it's not one of these immutable things it does not create a new array it just sorts the things that are there and um i'm not sure how deep we want to get into it but sort accepts a comparator function well yeah i was going to say how do you what if i want to sort it in the other direction right well well if you want to do that then the easiest thing would be to do reverse on the sword so now it's sorted in the other way i'm curious what would happen if we add a new number like 20 let's find out interesting yeah oh this is so good thank you i do this is amazing so i think what's happening here is if you just call dot sort maybe it treats everything as a string is that right yeah what is it what is it what is the default sort sort on i guess is the real question yeah i don't know let's see mdn javascript array sort the mdn docs are always the best array.prototype.sort it sorts things in place the default sort order is ascending built up here it is built upon converting the elements into strings and then comparing the sequences of utf16 code units values cool makes sense totally right very logical so i think we should actually dive into the comparator idea um should be here compare function that's what they call it here compare function it specifies a function that defines the sort order so we can use this if we wanted to sort it by the actual numbers or if we had an array of objects and we wanted to sort by a specific field of those objects we could use this as well so here's what it does it accepts two things the first element and the second element and it returns i'm surprised that it doesn't specify here specifically what this function should return but i believe it should return negative 1 0 or 1. let's see it's weird that it doesn't say this has always been a fuzzy area if like it's always been sort of like an incantation but the set of like it's like if if your first element is less than your second element return negative one or zero depending on how you want it to sort right right yeah exactly exactly so here it is if you scroll down a little it says if a and b are two elements being compared then compare function should return less than zero oh it says it says if compare function returns less than zero then it leaves a and b unchanged in the order if compare functions so that's our negative one yeah that could be negative one yeah yeah if so if you return negative one it leaves them unchanged meaning a is less than b i'm pretty sure got it but yeah i think you're right about it if it returns zero also leave a and b unchanged with respect to each other but sorted with respect to all different elements i don't know this is kind of confusing yeah i don't know what that means i don't know what that means so but if it returns greater than zero also known as one yeah also known as one or any other number greater than zero but yeah one is is the most common uh then it then it sorts yeah that's how i've i've always seen it b before a so let's give it a shot that was really confusing right so i'll just leave a record of this and i'll say it outputs this is the documentation assuming that the elements are numbers what's being compared um well we can do i think we can do whatever we want in it and return a number it is expecting us to return a number we could have like a random number generator doing negative one through one and it would randomly sort you know what i mean yeah so yeah a and b are the elements in in the array and they could be anything what matters is that this compare function returns a number and it's up to the implementer of the compare function how you derive that number so let's try this again let's say sortable.sort and then console.log sortable i'll get rid of this reverse and we pass in a comparator function that takes as input a and b two things and because these are numbers i believe we could implement this pretty simply as like a minus b and now they're sorted sorry because you're just telling it to not treat it as strings basically yeah yeah exactly and and this little expression follows all of those rules for sorting meaning um if b is greater than a a negative number is returned but if a is greater than b then a a positive number is returned so if you did b minus a it would reverse it i believe so let's give it a shot yeah cool that's right and another way to phrase this would be um like is b less than a if so return minus one otherwise return one that works but i think if they're oh yeah that makes a ton of sense [Laughter] i mean this works um and this is often what you see of like if if these are data elements and you want to compare a field you could say like b dot some field ada some field but i mean it doesn't make sense now because we don't actually have that scenario but later we will i guarantee it yeah i'm sorry for sending you down this sort rabbit hole you were about to move on no no it's good it's good this is why i love these interruptions because because like i want to empty my head of the stuff that people are uncertain about and want to know about i just don't know what people need to hear at the moment you know when i'm going through this stuff and so yeah that that's why i i think yeah go ahead go ahead you go ahead i don't think i've ever read the docs for sort like i've just like seen like this pattern and then sort of like hacked it to because it is mildly intuitive a little bit but it's cool to sort of actually see it laid out in detail the way that you have for sure for sure oh thanks and you know i think um if we really want to be like pedantically correct about it if if two numbers are the same this function should return zero i think ideally and so to do that we can say okay is b less than a return negative one otherwise is b greater than a return one but otherwise they're equal and returns zero so i think this is like the ultimately correct way but it's like who wants to come across this and you know yeah you're a madman what is this yeah what is this there's like some insane pursuing scribbling on a wall so d3 to the rescue um turns out there is a d3 utility to help you through this stuff a and b we can re return ascending of a and b and ascending we can import from d3 um and this is actually the same as just passing ascending into sort and d3 also provides a thing called descending so this is what you would typically use in practice and these ascending and descending things from d3 automatic like i think they implement this logic internally but they hide it from you they just make it you know very intuitive easy to use and that's the same as like like you were about to go talk about d3 range right like that's these are all sort of very simple wrappers so you don't have to get into this level i've been spoiled right i only ever use the d3 wrappers i never really write any of this stuff exactly exactly yeah and some of the you know philosophy of this course the way i'm progressing through things is to like to show uh like how it's made like how the sausage is made sort of thing you know like this is how d3 works inside it's not like so crazy mysterious but it's a pain if you wanted to implement it yourself all the time all right i think i think that's it for arrays let me see um we covered filter for each push oh map i gotta talk about map oh yeah gosh map is map is huge map is like the most you know one of the most useful things that i find myself using all the time all the time all right we've got console.log sortable and we get this stuff oh actually let me let me use the other um arrays just so all these sections are like decoupled we've got my range here console.log my range gives us these numbers from 0 to 9. check it out we can use dot map map expects a function it's a lot like for each it goes through each of the elements of the array and if we just write a function that returns each element it doesn't do anything essentially passes things through this function it generates a new array with all the return values so if we say like d times 2 for example now we get all of the original the original numbers but multiplied by two so this is this is super useful i mean you could you could do all sorts of things in here like return an object that says number is d and then now we're talking now we're talking yeah right and then even like double is d times two so you can construct objects in this way using dot map so yeah dot map is it's just super useful you know especially when you have data loaded from like a csv file or something you can uh parse dates for example uh clean up the number of fields that you have all using dot map well for me a lot of my work is finding an example of a visualization that's pretty close to what i want and then i have a data set that's slightly different from that so most of the way of like bridging that gap is just a dot map where i make my data look like the data that the example works on does that make sense totally yeah and dot map can be the bridge from here to there for sure for sure let's see what else reduce reduce yes yes yes yes now reduce that's one of those ones that is like kind of tricky to wrap your head around and you can get through life without using reduce ever however i find that one of the most useful things with reduce is to build up an object where the keys are derived from some array so let me just uh just try reduce console.log myrange reduce reduce accepts two arguments the first is a function that takes as input two things and i can never remember the order let me just consult the documentation reduce looks something like this you define what's called a reducer it takes as input the accumulator and the current value and here's one that just adds them together you could use this for example to sum all the numbers in the array current value here is one of the elements from the array accumulator is the returned value from this function as it goes through but the first time this this is invoked accumulator gets the value that you pass in as the second argument to reduce so let's put this into practice we can say dot reduce accumulator i do like that term and i can use d you know why not so if we say accumulator plus d we get 45. which is the sum of all those numbers and uh you know i'm not sure what it what it uses as the first value because i didn't pass anything but if you pass in zero as the second argument to reduce that's what accumulator gets for the first entry right this is this may be kind of confusing so let me just open it up into a function and say console.log accumulator just to see what this is um looks like i have a syntax error actually i didn't so what this is doing here is it's logging the value of accumulator as the as it progresses through the array so here's what it's doing it's adding 0 which we passed in as the second argument to reduce and it's also adding zero the first element of the array so the first time through this returns zero plus zero which is zero that's why it's outputting zero twice and then it's then it's returning zero plus one one coming from the first element of the array and then the next time around accumulator is three because it added one plus two 2 being the next element of the array so to be even more clear here we can say adding accumulator plus d so now we can see that it's adding zero plus zero zero plus one one plus two so one plus two is three and then so the output of adding one plus two is the new the next version of the accumulator then it has three plus three which is six and then it adds four to that which is 10 and then it adds 5 and so on until it gets to 45. so that's reduce in a nutshell and while we're here i do want to show the most common use case that i encounter for reduce oh but first of all are there any questions yet here about reduce yes if if you remove the second argument which is zero does the f does it default to something um am i could it just default to the first value of the element in this case that exactly appears like what it is doing yes yeah it appears to be adding zero plus one in the first time around and it must be getting that from the array yeah yep that makes sense and we can we can be totally sure but just by saying like you know two and three it it does see yeah the first time around it takes the first two elements of the array and adds those together meaning it it takes the first element of the array the the thing at index 0 treats that as accumulator and then takes the thing at index one treats that as d so that that is what happens if you leave out the second argument and actually i wasn't sure of that until i just did this just now so i'm learning too all right i think the last thing we're going to do here with arrays is construct an object from an array and let me show you what i mean oops i'm going to make a thing called entries and in this thing there will be objects and the key will be something like um i don't know just a all right and value will be um fool it's just random stuff that doesn't make any sense and then we have another one where the key is b and the value is bar um just to show the mechanics of all this stuff so now let's say what we want is an object that actually has the key of a and the value of foo like this and then the key of b and the value of bar like this this is our desired result so the challenge is how do you write code that gets from this to this i encounter this all the time and here's how you can do it you can do it with reduce entries dot reduce and the trick is that you start with an empty object so you pass in an empty object as the second argument to dot reduce and then this reducer function takes as input the accumulator and i'll call it d just by convention and in the body of this reducer we ultimately want to return the accumulator i mean so here's the approach i'm going to i'm going to add a property to this object and then return the object so we return accumulator but before we do that we can say accumulator at d dot key equals d dot value and then we got that object that we were trying to get and and by the way i'm not sure i've introduced this syntax yet but if you have an object let's say you have an object you can say object dot a equals foo like this but the there's an equivalent syntax where you could say object at a like this using these square brackets and that's equivalent so now object has a is full like that but anyway yeah this is this is how you can use reduce to accomplish that task oh i see there's a question in the youtube chat here let me pull it over here so you can see it question i deal with two dimensional arrays a lot um is there a way to sort by columns question question question question sure let's do it why not i mean so we've got this entries array let's say we wanted to sort by the key and let's say they're out of order to begin with i think the question is asking how would you sort by a certain field of these objects so if you wanted to do that you could say entries dot sort and pass in a comparator or a compare function rather that takes as input a and b these are objects these are the objects in the array and it can return you know if a dot key is less than b dot key and this will be comparing strings so it would be essentially a is less than b which you can do in javascript that works it sorts by alphanumeric values so you could say if a is less than if a dot key is less than b dot key then return one otherwise return one and that works it sorts by key now abc and if we're using d3 we can say entries.sort ascending a dot key and b dot key like this and that would do the same thing if we had d3 at our disposal so thanks for that question so i think what i'll do is actually pull in d3 so that we can use this and it'll work um and then i'll take a short break like a 510 minute break and then come back and do something creative with d3 selections but are there any other questions at this point all right so i'm going to go about pulling in d3 in vishub the most straightforward way of doing this is to use the package.json feature which is relatively new specified dependencies d3 at version something let's see what's the latest latest version of d3 is 6.6.2 so we use that and now now we can put some javascript in index.js so i'll move this into index.js and now we can say import ascending from d3 and now it should run there we go so now this code actually ran and this is how you would sort things by a value with d3 all right i think we'll dive in to d3 selections so here's what i'll do i'm going to fork this viz and say d3 selection exploration fork it and i'll add you all as collaborators again i want this to be kind of a jam session all right i'm going to delete everything here and then we can import select from d3 the select function lets you create d3 selections using what's called a selector string where you can select elements that are on the page already for example we can say select body and that is a d3 selection that contains the body element so here's what i've i think i'm going to do i'll create an svg append it to the body give it a width and height and then we can create some array maybe using the range function from d3 and then make a bunch of circles based on that array and maybe make the circles move around in different ways selections have a method called append so we could say dot append svg like this and it creates a new selection and returns it and that is the selection of that one svg element at this point if we were to inspect the dom we can see that there is in fact an svg element there in the dom and i'm noticing there's an extra script tag yeah there's an empty script tag we'll just get rid of that we can see that in fact there is an svg element appended to the body right here so to work with svg we need to give this svg element width and height so we can say dot attr to set the attribute of that dom element of width to be width which is a variable that i'll create and i'll derive that from the actual width of the browser so we can say window.enter width and we're also going to want height as window.inner height so what's happening here is it's created a selection of that svg element and then when we call dot attr oh hey felipe has joined us hello hello happy birthday thank you thank you very much well i'm so glad you could make it this time alive you i see you've always been watching first time i was able to i mean i was not able to do the exercise from the last class but i was able to join at least amazing amazing so look i'm going to add you here as a collaborator so if you want to jump in you totally can okay thank you oh yeah it's valid oh there it is yeah there it is nice here you are and i will drop you this link in the hangout chat so you can see it so yeah everybody here feel free to jump into this thing once we get rolling all right so we give this svg a height of height here and we can assign this to a variable because we're going to want to add stuff into this svg so const svg equals this stuff so now when we inspect dom we see that it has width of 960 and height of 500. i also noticed that it's slightly offset from the corner and there are scroll bars this is a very common thing that we can address with a little bit of css so in the head i'm going to say style not style and add some css that says for the body make the margin zero that gets rid of the margin but still for some strange reason there are scroll bars we say overflow is hidden to get rid of those pesky scroll bars now we're good to go all right so here's where i want to have some fun we can we can make a bunch of circles and this is our first four a into d3 data joins and it looks something like this svg.select all circle this selects it makes d3 selection that contains all circles that exist within that svg and at this time there are none but that's an important piece of information for the internals of d3 because once we say data and we pass in data and i'll just define data to be range of let's say 15 we're going to make 15 circles and we can import range from d3 like this now that we have called dot data we have created what's known as a d3 data join and on this data join there are three parts enter update and exit and i have a slide about this with a d3 data join there is an array and i'm calling that data here and then there are dom elements which i'm just putting dom calling dom here on this diagram for example it's all of those circles that don't exist yet in the case that there is a data element you know in that array that does not correspond to any existing dom element that's what's known as the enter selection we can tap into the enter selection to append new circles for all of the data elements for which there are no circles yet so let's do that to tap into the enter selection we can say dot enter like this that gives us the enter selection and then on there we can say dot append circle and what this whole expression does is it creates a data join it accesses the enter selection of that data join and then on there it appends a circle so if we inspect the dom now we can see that inside of this svg there are many circles 15 to be precise but they don't have any attributes so let's let's work on setting setting up the circle so that we can see them we can call dot attr on this selection that contains these newly appended circles and whatever we put in here will be applied to all of the circles so we can say attr r is where i'm going to start specify the radius to be maybe a hundred and now we get some circles to show up but they're all on top of each other they're all the same place so to spread them out in the x direction i'm going to say dot attr cx which is the center x of the circle and i could say like i don't know 400 it puts them all in the middle but they're still all overlapping to make it so that they're not overlapping we can pass a function here as the second argument that function takes as input what i'm going to call d one of the entries of this array and if we just return d we can see that they're slightly spread out because it's setting the pixel coordinate of the center of the circle to be those integers but they're only varying by one pixel so they're not that spread out if we wanted to make them very more we could multiply them let's say multiply by a hundred now they spread out across the screen because for each of these numbers it's multiplying it by 100 and we're getting this x coordinate that goes all the way across the screen i'm just going to tweak these variables here or not variables tweak these values so that we can see some of these circles better and i kind of want to see where it ends see there we now we can see there are 15 circles here and i don't really like how it it's touching the corner so i'm just going to add some number like 20 or how about 50. okay now they're nicely spread out in the x direction we can do something similar for the y direction so c y like this so now it's diagonal if we just return let's say 250 that puts them right in the middle and here's where i want to do something fun i'm going to use the sine function for math so we say math math.sin this is a builtin function in the browser and it's the sine function from trigonometry so if we say sine of d it's sort of varies a tiny bit just because the output of sine varies from negative one to one if we want to see that variance we have to multiply it so if i multiply it by say 200 we can see that now they're all spread out which is you know not ideal it's sort of the sine wave is going too fast and to slow it down we can multiply d by some value like 0.5 and now we actually see that it is in fact a sine wave here and i'll just tweak these to you know make it a little bit more uh if if i want to to access the value of cx in the cy how can i do it access the value of cx in cy well the way that i would do that is extract this into a function it's usually not advisable to actually read the properties out of the dom that were already set but what you could do is recompute it and so i could do something like this say const x equals this function and then we can say uh x of d to get that value to c but it would be recomputing it essentially so yeah i was going to say i i i'm tempted to um ask you to turn like when you make data like i would do all of the cool stuff you're doing in a map or like making a new object and then just reference those values when i'm rendering it right love it love it and this this is a great great segue into the discussion about how do you decouple the lodge oh yeah i saw that someone in the youtube chat was asking about like how to separate your your concerns of like processing data versus visualizing it and all that yeah exactly separate the concerns of data from charting yeah another question here from lilac foonish can you please talk about organizing the project top down how to create modules for reusable yeah i'm going to get to all that later but what we can talk about now is this separation of concern between uh data manipulation and charting uh which is you know essentially rendering or dom manipulation right because right now you're sort of you're manipulating it and as you visualize it you're changing it and then rendering those values whereas you might want to like do a making a visualization data middle step that sort of takes your source data and makes it into a format that's ready for visualization and then the visualization side you just grab exactly what you need exactly exactly right now it's tightly coupled this rendering logic is essentially too smart there's there's all this data processing logic embedded in here with the rendering code and this is exactly the pattern that makes it really tough to port things from d3 to other frameworks like react or vue or angular well and also to get the value of cx right so if it's calculated on the visualization side your other visualization parts can't access that right like they have to recompute it but if you do it in the in the viz processing step then any step of the way you can process all those cool values and work with them exactly yeah that's exactly right you wouldn't have to recompute it you could just compute it once and then access it so let's do that the way we would do that is to use dot map right here and so that can take as input d and it can return an object and on that object we can define properties x and y i think this is how i would like to do it and x i can just move this logic over here and say x is this and it's going to work because d is the same and then i can take this logic here for y and move it over here and so now we're constructing the data elements that we can just directly visualize no need to have any complicated logic down here with the d3 selections we can just simply access d dot x and d dot y like this now felipe to answer your question we could just access it like this d dot x in the in the function that computes c y if we wanted to for example if we just use it it would be a diagonal yeah i love it you could do also cool stuff like you could get the extent of your cx and see why like if you wanted to make a light to dark scale for how where they were in the sine wave you know what i mean right yeah for sure for sure we could do something like um yeah so here's here's a place where i want to get to i want to i want to get this thing to move and then we open it up for all sorts of creative directions and so here's what i'm thinking we we can use this construct called request animation frame um well let me sort of ease into this we want to animate it and one construct that's available to us in javascript is set interval and set interval takes as input a function and an interval in milliseconds so if i say 1000 that's one second so every one second it would rerecompute this stuff and i think what i'll do is i'll just move this entire logic into here and so now it's going to append these circles every time but i want to introduce the notion of time so let's say let t equal 0 t is going to be our time and every time we go through this we can say t equals t plus let's say one and then in our sine wave calculation we can say plus t like this so now every second it should work but it's not i think you don't need to like call set interval again or wrap it all in a function or something like that well i think what's happening here is that the enter selection is only triggering on the first run back to our back to our diagram here the enter selection which we're using to set all these properties only triggers in the case where there are no corresponding dom elements for your data elements but what's happening is that is happening the first time that that function runs but one second later when that function runs again actually what we need to work with is the update selection and that's the case where for each data element there already is a dom element and all we want to do is change it we don't need to end we don't need to append new ones again so let's try that let's work with update okay here's what we can do we can say const circles equals and we can define it to be this data join here right so it will select all circle dot data data this is the d3 data join and then we can say circles dot enter dot append circle and this is only going to happen the first time through right so all we want all we really want to do is create the circles um and i suppose we could set the radius here as well because it's not going to change over time and then circles actually contains that update part of the data join so we could say circles dot attr cx and cy like this but notice what happens it actually works so now it's it's animating which is cool which is where i want it to get to let me just tweak it so that it animates in a smoother way so now it's like every tenth of a second and we can say um t equals t plus 0.1 to make it move more slowly so now you can see really what it's what it's doing here however this is super fun right right but there's like no now that you have this there's so many ways that you could just add cool stuff to it exactly yeah there is it's it's going to be so so intense but before we get into that what i want to what i want to highlight is that check it out when this runs let me set this delay to like five seconds then we can see the first time it runs boom see all those little circles there they're in the corner the circles are just in the corner on the first run and then on the second run they get positioned that's because the first time through this whole thing the update selection is empty there's nothing there there are no circles to update enter only triggers so here the the challenge here is that what we want to do is we want to set all the coordinates of all the circles the first time on the enter selection and also on subsequent times using the update selection and so how do we do that let's get back into the code one option here is that we could duplicate this logic right we could set the values for cx and see why on the enter selection so it just appears immediately correctly and then the next time around it increments just a little bit however this is duplicated logic i mean we want to avoid duplicated logic at all costs because i mean if you wanted to change in one place you'd have to change it someplace else so as a best practice we should aim to avoid this sort of duplicated logic and this is where merge comes in see ideally we could just have this logic once applied to something that that will be the enter selection the first time and it will be the update selection on subsequent times and here's how we get to that thing let me assign enter to be a variable so now we have the enter selection defined here as circles enter and we have the update selection defined as circles so what we want to do is merge those two together so we can say circles dot merge circles enter like this and it creates a brand new selection that merges those two together it's like both of them meaning the first time around that selection resolves to the enter selection with all the brand new circles but on subsequent times it um oh i'm just confused at what's happening sorry i i hacked i was playing around with some svg transitions i wasn't sure if it would take effect right away it did it did and i'm like why are those circles moving a tiny little bit sorry that's so cool oh it's cool it's cool uh but you know this is this is where i wanted to get to just to explain this this pattern with dot merge which is one of the most confusing aspects of d3 so if we use circles.merge circlecenter the first time around it's going to be the enter selection with all the brand new circles and we're going to apply cx and cy to those and on the second and subsequent runs it's going to resolve to the circles from the update selection and in recent times i believe it was d3 version 6. there's a new shorthand that you can use to do this exact same thing which is dot join so let me just i'll keep this as it is comment it out just for reference and with the new api you can say right here dot join circle and that actually gives you the merged enter and update selection and on there is where we can set all of the attributes so this is sort of a simpler way to do it and it accomplishes the same thing i mean it would it would actually be equivalent to defining r on the merged enter an update selection so it's assigning r unnecessarily but you know maybe that's fine all right so now we can start really messing around with this uh making the animation go faster and faster ideally it would be 16 milliseconds which is uh at 60 frames a second so like 1000 divided by 60 should give us animation at 60 frames a second and then we can slow down this stuff so yeah i mean we just we talked about a lot of things any questions or discussions at this point oh i see i see there's a question what is the difference between merge and join what is the difference between merge and join so merge is a method on a selection where you can pass in another selection and it will merge them together it's essentially a set union you can think of it as a set union that's what merge does and the most common use case is to merge together the enter and the update selection uh for rendering a bunch of things that's what merge does join on the other hand is sort of a magical shorthand for this entire pattern so it actually does a bunch of stuff internally what join does internally is it creates the enter selection using this tag um so it's what it actually does is it's equivalent to this up here we pass in the tag name to dot join and internally it says okay on this data join we will create the enter selection and we will append tags of this type it does that internally it has this exact logic internally and it also returns the merged enter and update selection so what we get as a return value out of join is essentially the result from merge which uses internally to merge together the enter and update selections and so then once we have that we can set all these attributes on it and i believe join also removes elements that are in the exit selection so it's a shorthand for the entire pattern which is known as the general update pattern yeah and actually i would love to to demonstrate that so i think i'll i think i'll go for that um we're defining a range of 15 every time but what if that number were different so i'm trying to get get us to a case where where there are things exiting the scene where at a certain point there are fewer data elements than dom elements so i'm going to go back to this the long form using dot merge and then i'll define this number as n like the number of circles so if i set it to say 14 it's fixed but what i'm going to do here is i'm going to set it to a value that changes over time so let's say 10 oops i'll say 10 plus math dot sine of time times 5. so now it should vary between 5 and 15 and notice the effect that it has on the animation over time it is sort of disconnecting from those circles but it's leaving those circles there on the page this is where the exit selection comes into play the exit selection is the case where there are dom elements sort of hanging out in the dom from some past events that no longer have any data elements associated to them and the most common thing to do with the exit selection is just to remove those things so let's try that to access the exit selection from the data join we can say circles.exit dot remove to remove all of those circles so now you can see that the circles are added and then as that number gets decreased the circles are actually removed from the dom and this is also done sort of automatically for you when you use this dot join method so as it decreases boom see those circles are removed so that's what dot join is all about so i think i'll fork this just to sort of save the state of everything but then i'll go back to this one where folks have been added as collaborators and we can sort of get a little creative here and uh make something cool but yeah what do you all think so far i mean i hope this is hope this is a clear explanation of d3 data joins yes it's um so this uh it sounds like d3 is automatically matching every data point with every circle in this case it's it knows which data point belongs to which circle that's right yep that's right i believe internally d3 may actually store the data values on the dom elements which are also javascript objects which you can do which is kind of a um a tricky thing if you get into doing it yourself but yeah i believe what d3 does is when it enters i mean when it appends new elements as part of the enter selection i believe it actually associates the data values on those dom nodes for future use i may be wrong you'd have to study the d3 source code but yes essentially it does associate the data elements to the dom elements and so it knows once you create the data join you select all the circles that are there on the page you tell it what data you want to use it computes that venn diagram internally by sort of inspecting those two things comparing them somehow that's how it works yeah sounds that's fantastic current what is this particular programming pattern called where you just join methods together like this oh this is called method chaining yeah method method it's a very uh jquery like thing right was jquery the first kind of language or is this just a common programming pattern you may be right that jquery was the first one i haven't used jquery in so many years i don't even know i don't even remember what it looks like to use it but yeah it does have perhaps this the same method chaining idea where you can say dot something and then that returns the same thing that you invoked it on and so you could chain more and more methods and this still uh this still separates the two concerns one for data processing and then one for displaying it this program yes i would say it does um because we're just using vanilla javascript to produce this data and then in the rendering logic it is just accessing those properties it's not computing anything from those properties i mean if we if we wanted to go all out we could we could associate the radius to these values as well and we could say you know axis d dot r and we could compute that as well and now that we've done this we can you know vary vary the radius as well which could be cool to that question some part of me wants to go like because you basically have two functions here right you have your like make data and you have your vis data you could easily just make this set interval call those two functions right yes yeah you totally could you could you could abstract this into a function and you could abstract this into a function yeah that would make for really clean readable code we could do it shall we yeah do you want to do you want to i'll do you make data and you do this data sounds good then you just need the number it's like you just use n i guess i suppose t is what you would need or no yes i like that yeah n or n t is is used inside of there yeah so you would need it yeah exactly all right does that work did i break everything let's take a look probably huh oh yes the return is critical it's pretty important nice it works sweet yeah now now this is a nice compact little thing that says we compute n we call make data with n and t pass that into viz data yeah and we could even conceivably make it even smaller but i kind of like explicitly saying all right this is our data we're gonna pass it in yeah totally totally this is a great way to decouple these two concerns and these could even be refactored into modules i mean that's something that we could do as well but i don't know if it's worth it actually why not i don't think we've discussed modules yet at all right yeah i'd like to see that that would be really cool yeah let's do it so i'm going to make a new file ej you want to do it at the same time again you want to do make data and all this data yeah that sounds good so i'll make a new file called visdata.js and then i'm just going to grab that stuff inside that function and paste it into that file and in order to expose it to the outside world we need to say export like this now we get what's called a named export from this module and then in index.js i could say import this data from dot slash vis data that tells it to look for a file locally so this is es6 modules super super useful way to break down code into multiple files and scale a code base super due super duper useful so you're all set with make data yeah yeah while i'm here i'll i'll import that to make data from dot slash make data and let's see does it work oh range is not defined and make data nice so we just need to move that import over i'll do it we need to import range in that module got it and then i don't believe we need range in index dot js svg is not defined it says ah yeah yeah yeah so this is my bed uh i i didn't pass it into vis data so this data should take as input the selection svg and the data so the x uh svg can be the first argument and now it's working all right excellent so while we're here i just want to say once you abstract things into a function like this it's sort of a best practice to rename this to be like selection or at least this is my personal preference and i'm realizing we're not using the circles variable so we can just get rid of it and this still works as well the idea is that if you wanted to you know call this on a group element it would and the variable name would still make sense and last but not least i do love to use selection.call when i can so we can say svg.call this data and data like this this is the d3 invocation pattern on selections it just takes whatever arguments you pass and you know passes them as arguments to this function these two lines are equivalent all right so the uh the svg object is the first argument being sent to the first of the argument to call correct is that how it works okay yeah that's how it works when you when you when you use selection.call it takes as input the first argument which is a function and that function should expect the selection that is called on as the as its first argument and then whatever other arguments you pass get sort of spread out as the arguments to that other function right yeah i mean this in this case it really doesn't matter which which way we we do it but i just kind of like to use dot call when we can is dot call a d3 thing or oh yeah something that okay yeah yeah it's a specific method on d3 selections only it's a d3 thing yep it's useful for chaining because then you could call you know multiple things if you wanted to but we don't have that scenario here all right i think i should wrap it up at this point um oh where'd my slides go okay i'd like to leave you all with uh an exercise all of you who are viewing follow me along this this whole series four can modify what we created today and just make something super duper cool you know change the sine wave and like maybe maybe set the fill color based on sign of time or something like that and just see see what you can come up with as an alternative exercise more specific and targeted see if you can add lines between these circles and to do that you could use line elements or you could use a path element or you could use a polygon element any of these things and please once you do this submit it in the hub forum on this episode 5 topic here welcome everyone to episode 6 of get it right in black and white where we'll discuss javascript modules and build tools i often get asked the question how do you work outside vishub every time i've taught this course you know people are happy generally using vishub to learn how to code it's great because you can start coding right away but um when folks start to export the stuff out of his hub they're confronted with this new universe of stuff like npm package.json roll up building a bundle.js and then including it in the page and then having to serve the files locally within http server so all of this stuff is what i want to get into today today's episode is dedicated to answering this question thoroughly what we'll cover today i will start with reviewing last week's uh exercise submissions as usual and then we'll get into this uh content starting from scratch really how you know how to include javascript in html various ways to do this um we'll talk about es6 modules we'll talk about rollup how to use rollup how to configure rollup i think i'll use a rollup starter project webpack as well and perhaps some other things around webpack like create react app if you all could mute yourselves it'd be great thanks webpack and things around webpack um and also using github because if you're not using vishub you need to you know store the code somewhere store the revisions and so i think i'll walk through also using github creating a github repository putting the code into the github repository and maybe even hosting it with github pages if we have time so that's what we'll cover today that's the plan let me pull up next week's last week's exercises here all right here's last week's uh forum post let's see what we've got this is so cool double harmonic look at this it is a double pendulum inspired by sisyphus table not sure what that is but sounds cool beautiful stuff very mesmerizing and it creates something most worthy of being printed out on a canvas or something no there is a lightest version of it on the home page of wheeze up oh yeah yeah it's cool oh wow he's got a lot of stuff going on here oh my gosh look at this black and white version sweet and yeah it looks like spears in there this one oh look at that that's pretty wild wow very cool very cool yeah w gloss nice work w gloss let's see what else have we got oh there was a question actually like oh i just cannot get this running locally which is like okay yes now it's time i have to talk about how to do that so we'll address all of this stuff today for sure oh some new stuff i haven't even seen yet look at this one from nita whoa very cool some nice transitions very nice you want to talk about this at all yeah i will oh it's using transitions i just use uh transitions to create the basic animation the one you created felt a little difficult very nice so yeah if you if if you run this it has a transition when you load it and that's created by so this the cx and cy are initialized i guess at zero which is inferred and then you use transition and duration and change cx and cy very nice very nice i think in a future episode i'm going to get way deep into transitions and here's one from a deal look at this oh nice you got the lines to work fantastic beautiful wow very nice very nice ideal um would you mind like walking through how you did this here oh sure yeah uh it's um it's yeah so it's basically using um trying to make use of the path element to connect all the circles up and and so that yeah d3 has this um a line generator which will uh convert all the data points into the string that gets passed to the d attribute which is uh which is part of the path element um so um yeah this was really just an experiment to see if i could get it to work and uh so i i would be very keen to find out whether there's a better way of doing this but like for for example combining uh everything in one method chain um but uh my first pass was just to try and think about it separately and then use the the join method um to handle all the uh uh yeah syncing up all the dom elements with all the data um and uh yeah but that line generator is is really awesome because it just generates that complicated d string right um you know what's happening here is it's creating a path for each and every element of the array and so for however many circles there are there are an equal number of paths that are all on top of each other ah yes so if you inspect the dom you'll you'll actually see a many many paths and that's why the line appears somewhat uh harsh like thick if the antialiasing around it is not quite right that's because there's maybe you know ten or five lines on top of each other let me just quickly fork this and and you know give you my take on on how to do this so instead of using data here we can just use an element with a single sorry we can we can just use an array with a single element and see now that line is not so thick as it was because now there's only one of them and it doesn't matter what this thing is you could have it be null or whatever because you know none of these functions access it because d is always a line generator of data it's not a it's not a function of the this element in this array so this is um actually something i was hoping to get to in the last episode which is namely the special case the special case of a single element and this is a perfect example of it you know where there's just a path you only want to have one of these path elements but it's driven by data that could have many elements but it's actually just one path if you wanted to have do it a different way where you had maybe line elements multiple line elements then you would you know use an array as data with many elements but since it's just one path this this approach works perfectly well and i would say this is sort of you know the optimal way to do it to use a path and have that path use these multiple lines so yeah great work i feel that's really really good to know yeah i that that's that that's uh it makes a lot more sense now just to have the one element in the uh being passed to the data method that that makes sense nice thank you thank you very much yeah my pleasure all right that's it for the exercise submissions all right that's it for a review of last week's exercises let's get into ways to include javascript in html for this i will start invis hub i'll create a viz from the hello html starter i'll fork this one and call it js in html okay so this example i'll just clear out the readme this example already has some javascript and this is the most straightforward you know maybe simplest way to include javascript in an html page you use a script tag and then inside of that script tag you can put arbitrary javascript but as you see when we write a lot of code it ends up uh getting very large and there may be more stuff in index.html and then pretty soon you're at like 100 lines 200 lines 500 lines in my various work i've seen i've seen you know html files that are a thousand lines or 2 000 lines of code which is just um it's unwieldy so there becomes a need to split the files up so here's one way to split the files up you can take the javascript create a new file let's i don't know i'll call it uh script dot js just as a silly example name and then we can remove the stuff in that script tag there but notice that it's not running now this script is not doing anything because it's not included into the html of the page to include it into the page we can use the src attribute of the script tag so we can say src equals script dot js and now it runs it loads and all this stuff works without any build tools the issue with this approach which by the way used to be the approach years ago in sort of the early years of javascript for a very long time the status quo was you know this is how you include a library on your page and this is how you include your script files on the page but what would happen is that over time you would end up with many script files on the page you know script one script two like this and then you would need to manually keep track of which script depends on which other script so you know for example if in script one you want you want to refer to a global variable introduced by script 3 then you would need to rearrange these such that they're in the right order so everything has its dependencies and the algorithm to do such ordering is called topological sorting um so i i think in like rails ruby on rails you can specify which script depends on which other script and then there's some utility that calculates the correct ordering and automatically generates the script tags but that all is sort of um in the past because in modern times there's this thing called es6 modules anita says that's so deep yeah feel free to speak with sound it's fine this is you know how one option of a way to work but let me let me show you how it looks with es6 modules in vishub you can use a special name called index.js this is a special name of a file that vishub specifically looks for and so if you if you define an index.js see vishub automatically created this file that you you're not allowed to edit called bundle.js this is a bundle created by rollup internally within vis hub so inside of the vis hub software it actually loads in roll up which is an amazing tool for for generating bundles and what a bundle is is it's a it's a file that combines many modules together here's what es6 modules look like you can say import something from i'll say dot slash um something dot js and we can create this file called something.js and in here we can export something equals i'll just define it as a string a thing so you can use export before the the keyword const to export a named well it's called a named export whatever variable you have locally you can export it with a name and then if you have named exports you can import them with this syntax let's use that by saying instead of hello javascript hello plus something whatever something is it should appear and now it says hello a thing all right so that's generally how you author es6 modules let's take a look at bundle.js to see what it's done here rollup has actually combined index.js and something.js together into a single file here's the content of something and here's the content of index.js so bundle.js makes basically index.js with everything included bundle.js is automatically generated from index.js everything that index.js imports is included in bundle.js and also the things that are imported by the things that are imported by index.js are also included in bundle.js so something.js could also you know import um thing from dot slash thing dot js just making stuff up here and then that could say uh plus thing and then we can make another file thing.js equals thing planet earth sure planet earth so that allows us to author this module that defines this named export called thing which we we can import in something.js and use and something.js in turn exports the named export called something which is imported in index.js which is used there and then the cumulative output is hello uh planet earth and if we look at bundle.js all of those various modules are included inside of bundle.js so bundle.js is totally separate file it is yes yep yeah and we if we name we have to name index.js as index.js expanding correct correct because um the viz hub roll up configuration that it uses internally looks for a file called index.js yeah so what role do the curly braces play the ones that wrap something in this case oh that's a great question this is the distinction between named exports and default exports with named exports you could you could import multiple named exports from an es6 module and here's an example let me just see this through we can use both of these and then in something.js we can say export const something else other when you use this form of exporting export const you could also use export function this is valid syntax you could also use let export let something these are the various ways you can use named exports and with named exports the key thing is that you can export multiple things that have names so now we can see that the output is hello uh planet earth other that's named exports if you don't use the curly braces like this right now we get an error that says default is not exported if you don't use the curly braces it uses what's called the default export this is this is the case where you want a module to export only one thing so if we modify some this if we modify something.js we can use the default export like this i believe export default something this will expose the variable in this file which is called something as the default export and by the way you can have a default export as well as named exports let me just show you what that would look like like this so if we don't export something we export something else and then we export default something check this out in index.js we can import something which is the default export and something else as a named export and we can use that here like this and it still works and you'll often see this uh with react if you end up using react react uppercase react is the default export of react but then there's a lot of named exports from react like use effect stuff like that that's an example where you would see this sort of stuff in the wild does it have something like that what default modules and sorry what was that d3 does d3 have d3 well i believe it does not i believe it only uses named exports which is a really good segue let's check it out so in vishub you can include a script tag so here's here's here's the d3 library hosted on unpackage which is a content delivery network that hosts npm packages all right and npm is this giant database of packages with all of their different versions um it's a package manager for javascript and it's sort of the de facto package manager so all this is to say let's let's load in d3 onto our page using unpackage by going to unpackage.com d3 and if we just go to onpackage.com d3 and hit enter it automatically resolves to the latest version of d3 which at the time happens to be 6.6.2 and this is the minified build of d3 which contains all of the different modules that are part of d3 so i'm going to copy this url and then over in index.js i'm going to insert a script tag and set the source equal to that url and this is how cdns content delivery networks or content distribution networks are intended to be used at this point in our javascript we can say console.log d3 and it should work see that script tag defines d3 as a global variable this is called a browser global and this is one way it's like sort of the old school way of using libraries insert a script tag that pulls it from a cdn or you could pull down d3 to your files and load it from your files either way and then access the global variable that it defines this is one way of doing things this is not using es6 modules at all not at all this is this is an older way before there were es6 modules that's called browser globals so you could say d3.select that resolves to a function d3 dot you know scale linear all this stuff so d3 is object and each module is property correct yes values of functions yep that's correct that's great yeah using the d3 browser global you could say that yes d when you include this script tag here that defines d3 that introduces a single global variable into the you know global namespace of javascript that's called d3 so that's a variable called d3 and the value of that variable is an object and on that object you can see all the methods of d3 listed out here and this is great because when this program runs it just pulls in javascript from that cdn and it doesn't cost us anything meaning i don't have to host d3 inside of this hub or anything like that it's just when you load the page it pulls that from that unpackaged server which i have no control over it's you know totally not my thing this is why this is sort of the preferred way of using libraries invis hub in particular and i want to say the vishhub rollup configuration has a mapping for d3 as a package so that's what lets us do import select from d3 like this and then we can say console.log d3 whoops there is no d3 dot anymore it's just select because we've imported select a named export from d3 and it resolves to the right thing this is slightly mysterious right it's there's a little bit of black magic going on here with the roll up configuration roll up has this this feature where you can tell it to resolve package names to browser globals so somewhere in the configuration internally in viz hub that you don't see right now there's a mapping that says okay if you try to import from d3 without the dot slash so it's not looking for a local file it's looking for a package called d3 if you do that then look for the browser global called d3 and resolve all the named exports to properties on that browser global this is a really nice configuration of rollup that allows us to use this really nice es6 import syntax for packages and at the same time pull in the script tag from a cdn now let's take a look at bundle.js for this case oops bundle.js is wrapped up into this this one expression right so it doesn't create any global variables it's very selfcontained it defines a function and inside of that function is all of our code from all of our modules that we've authored and that function is immediately invoked with d3 which is not defined anywhere in this file because there's an assumption that it will be defined as a browser global and that's why all this works uh let me show you um actually there's a little bit of magic as well where vishub is injecting a script tag at the end of the body that includes bundle.js script src equals bundle.js and if we have it there then it is not automatically injected so i want us i want to show you that if we include d3 after bundle.js it doesn't work i wanted to do this to cement this idea that bundle.js when it runs it assumes that there's a browser global called d3 and inside of any html when you have a script tag that script tag is fully loaded parsed and executed before the next script tag in the list so what's happening here is bundle.js is looking for d3 it's not there and we get an error but if we reorder this to include the script before bundle.js then it all works so it is a hierarchical i mean in a sense that bundle.js depends on d3 yes but the data structure is not actually a tree it's not a hierarchy it's actually a graph it's actually a directed acyclic graph if you want to get into the weeds yes knows which one comes first right right yeah internally roll up i mean if you have this dependency graph of modules rollup knows internally that the stuff in thing must come before the stuff in something because something imports from thing and also it knows that this stuff in something must come before the stuff in index.js inside bundle.js so that's why it has done this correct ordering using the topological sort algorithm internally nice so in virtual world also the things are hierarchical sure i see there was a question here from sriram is roll up comparable to npm or yarn what's the what's the difference between a package manager and a module bundler yeah i mean they're at different levels of this hierarchy in a sense npm is it's a company actually that makes money and it's a bunch of servers that exist out there in some cloud somewhere that's what npm is and it's a set of scripts and tools that allow people to publish modules into npm and also to get modules out of npm and so what we're using here is npm as well as unpackage which is another another product in inside of the ecosystem of npm to pull this script down and npm confusingly is also a command line tool where you can say npm install npm run npm this npm that and there's an alternative command line tool to the npm command line tool that's called yarn and yarn is arguably more efficient faster better but it also pulls the packages out of the npm package manager database system cloud thing so in a sense you know npm and yarn are not that different they're pretty much equivalent tools and rollup is a module bundler and rollup has peers in this ecosystem like webpack parcel snowpack recently but roll up is pretty nice yeah so the difference between a package manager and a module bundler is a package manager is a repository of packages but a module bundler is just a tool it's actually a package within npm rollup is also a package inside of npm um and then when you run rollup on your stuff locally it pulls the packages that are that are installed locally using npm and generates a bundle so it's all kind of kind of this big hairball of stuff which is why it's confusing uh shariram says npm and unpackage are sort of like cdns for code in a way in a way i mean the cdn is is essentially a wrapper around npm this unpackaged cdn and on package itself is more akin to a a library like a physical library where you go to get books like when you publish an npm package it's like you're putting a new book in the library and when you're pulling it out it's like you're you're you're asking them to mail you a copy of the book i don't know maybe it's not the right metaphor but yeah i hope that clarifies things current uh going back to the the default exports and the named exports yeah is there um uh are they are they used in different situations uh is is there a a general uh advantage to using named exports over default and vice versa is something there's some general guideline around that that one could keep in mind if you google named exports versus default exports there are a lot of people that have very strong opinions about this stuff and like here why i've stopped exporting defaults from my javascript and this is actually the philosophy that i adhere to there's a lot of issues with default exports often i've seen in the in the module that has a default export internal to that module that export is named something or not not exactly something but it's it has a particular name and then in the in the module that imports it it's imported with a different name which is super confusing that's the that's the one big drawback i see of of using default exports they don't dictate what name you use so you could actually say import it which is the default and then we could use it like this and it still works so um yeah actually this cropped up in the vishub code base where the names don't match and then when you're navigating the code base it makes it super confusing because you have to remember okay it's called this inside the module and it's called this outside the module and it's just it just makes things super confusing so i personally tend to always only use named exports and imports in the code that i author uh but there's pros and cons for sure i mean react has chosen to use the default export of react which makes sense for that case i think um so there are cases where you know using a default export makes sense in a way uh but yeah that's my personal take on it and so all the code that i authored today in my you know work with clients and everything i strictly just use named exports and that's it no default exports yeah that makes sense to me i think i'll follow that nice i see there's a bunch of chatter in the youtube chat so let me get caught up on that guitar covers oh i think i addressed this is bundle.js used there in index.js yes um it's there now because i added it if it's not there vis hub does some magic and it inserts that exact thing so that's that's what's happening there and then yeah you can give the default export of a module any name when you're importing it that's true that's true that's why it's confusing how is index.js included since i don't see it in index.html oh yeah it's the confusing blackmagic part where vishub injects exactly this thing automatically if it's not there you know the intention is to make it easier to use but it's sort of cryptic and strange if you don't know that's happening try out vite sometime as a bundler yeah vite i heard about this like last week for the first time i feel like an old man i can't keep up with his stuff so fight is another one um yeah it looks cool looks cool see the thing with all of this stuff is the intention of vite webpack roll up snowpack parcel the intention of all that stuff is to make it easy and straightforward to author your code so that you don't need to think about or deal with all complexities of generating a bundle including the bundle into your html and all that stuff we've discussed how to use stuff in vishub and es6 modules now i want to talk about how to set a project up locally so let's start by exporting out of this there's this export feature what it gives you is a zip file that has a bunch of files so i'll open up a terminal i'm on linux here i'll go to my my place where i put code called repos short for repositories uh i'll just make a directory called example which is empty um and as you do this stuff you know your setup your mileage may vary i mean i'm very comfortable with the command line and everything but you may want to use gui you may be in windows you may be in mac so the place where we're going is fraught with peril because everybody has a different setup a different system different ide text editor that you use vs code is most popular i think nowadays but i like to use vim doesn't matter once we have this zip file we can hit extract and i'm going to extract it to repos example i'll hit extract show the files in here we have index.html index.js bundle.js which was generated by vishub we've got the readme markdown file and these are all just text files we have something.js and thing.js and we have a few more things that are not visible at all in vishub we have a package.json and a rollup.config.js let's dig into these i'm going to use vim you can use whatever ide you prefer like vs code to look at the files package.json is a file that defines your dependencies and it's a whole it's a whole thing that has a lot of very well defined aspects to it the npm documentation for package.json is the canonical documentation for everything that you could put in package.json this whole concept of package.json has come out of npm essentially it's a way for npm to track dependencies and if you define a package that you want to publish to npm you need a package.json to specify the name the version description keywords home page all this stuff but if and the license you can specify in here which open source license all sorts of things but if you're not publishing a package per se the main thing that we use it for is for dependencies it just maps package name to aversion range and this is using semver semantic versioning and this is what you'd want to research if you get interested in you know how exactly these versions are specified what the carrot means all this stuff here we have a very simple small package.json that says okay we have dev dependencies meaning they're not dependencies of this package if it were to be published but it's dependencies that you need if you're running a development environment locally what this means is that if you run npm install in this directory that has this particular package.json it will use that package.json to figure out what it needs to install and then after it installs that stuff it appears in this directory called node underscore modules node underscore modules let's see what it contains it has all this stuff these are our direct dependencies including rollup and another package called at roll up slash plugin dash buble and we can see those here it's got roll up and it has at roll up and i think the slash um there's stuff inside of there that we're using but what are all these other packages right these are the transitive dependencies of our dependencies a transitive dependency is essentially a dependency of a dependency if we look at rollup for example and we're still inside node modules if we look at the package.json file of the rollup package it contains a bunch of dependencies dev dependencies in particular so all this stuff is pulled in and each of these dependencies has other dependencies so all the dependencies of dependencies of dependencies of dependencies are pulled in and what we end up in node modules with is this list of all the transitive dependencies so this is how you set up a project locally essentially you you run npm install that uses package.json to install these dependencies now the dependency that we're really using is a rollup and we're also using buble to support jsx which we don't actually need here we don't actually need it here but if we want to author react code with jsx we would need buble so i'm actually just going to delete this i'm going to start iterating this configuration locally which i would i would suggest you do because the viz hub export is just sort of a generic simple export that makes it so you can generate bundle.js by yourself outside of vishub here's bundle.js what i'm going to do is delete this file so if i use rm there is no longer any file called bundle.js and then if we look again at package.json it has a scripts field and in that scripts field there's a key called build and the way that the scripts field works with package.json is that you can say npm run followed by the name of a script in which in this case the name is called build and there are sort of conventional names like npm run build generates the bundle across all various tools there's also npm run start which is equivalent to npm start which is set up for a lot with a lot of these templates but it's not set up here there's no script here called start because this is just a very minimal simple configuration that's aimed toward the minimal possible thing that you need to generate bundle.js if we run npm run build it invokes rollup because that's what the script is defined to do rollup dash c and then it creates bundle.js from index.js so this is how you can create bundle.js locally in your own machine outside of vishhub the dash c of rollup means use the rollup configuration file found in rollup.config.js let's take a look at that this is where that mapping exists between the external packages and all of this stuff is sort of preprogrammed into vishub we don't actually need any of it except d3 so i'm going to delete all that junk we don't need and here's the mapping from the browser globals to the package names or rather the other way around from package name to browser global again we just need d3 because that's the only one we're using i mean i would like to imp there's a lot of things to improve with vishub like ideally it shouldn't include any of this stuff that you don't need but this is the state of things at the moment it also uses this buble plugin to transpile jsx but we don't actually need that so i'm going to delete that and yeah here is an interesting use of default exports you could just say export default and boom put it put an object literal right there it doesn't even have a name this is this is an es6 module that defines the role of config so now if we if we run that build script again it still works it generates bundle.js and there it is bundle.js how would you run this locally if you wanted to actually develop well you need to use an http server to serve the file locally you could maybe get away with not doing that by just double clicking on index.html yeah in this case it works but as soon as you introduce any code that uses xmlhttprequest or fetch to fetch data that fetching of data uses the http protocol so you need to be hosting it with a with an http http server locally let me just quickly show you how i would do that my goto tool for that is http dash server which is an npm package so you can say npm install dash g to make it a global command that's available to you http dash server and then you can run http dash server just like that as a command and boom it's created this server that's now running so you can go to this url here and it's serving your page 127.0.0.1 this is a special ip address that is equivalent to local host local host colon 8080 the 8080 is the port number that's a sort of conventional port number that's used that's how you can set up things locally and then once you start developing you get into this loop this development loop this cycle check it out our code is running um there's something about a fav icon file yeah the browser when it loads a page it always looks for this thing called favicon favicon i don't know how to pronounce it but that's the little icon that appears in the tab so that's what that error means it doesn't it doesn't really it's not important but that's what it means if you wanted to customize the little icon that appears in the tab you would have to introduce a favicon file but anyway let's say we wanted to change some of this code and oh check it out here's the log from http server every time we fetch the page it outputs something to this log let's say we wanted to change this text from hello to greetings if i change it and then i save this file oh wait a minute i'm editing bundle.js that's a big no no we don't want to be editing bundle.js because it's an automatically generated file so um here's what i typically do is npm run build that generates bundle.js it's the same it was as it was before it says hello because it was derived from index.js which we should be authoring and changing let's say we wanted to change hello to greetings if i save this file and then i refresh this page it does not get our change because this page is using bundle.js not index.js in order to update bundle.js we need to manually run this script called npm run build now if we go and refresh the page it says hello uh planet earth uh oh there's like something wrong here this is called caching if you hit shift and hit the refresh button now it says greetings because it when you hit shift refresh it disables the cache the browser cache the browser cache is a thing that it uses an older version of the file that you that you got and it's for you know efficiency on the internet uh if you loaded an image yesterday and then you go to the same page that uses that same image and that image is on your machine in the cache then the browser will use it and not fetch the image again it's it's a way to conserve bandwidth so this is another sort of thing that you would run into with local development is the cache and in the network tab of the chrome dev tools you can click a little box that says disable cache which is something i would recommend doing because then you won't have to use shift clicking the refresh button it'll just never use the cache alright so this is how you can set up a local development environment and it basically works however you don't get the automatic refresh stuff which is which is nice to have i mean in invis hub if you make a change it automatically generates bundle.js and reruns the program for you instantly this setup here does not does not do that if you want to do that that's where you get into these project templates and so roll up starter app would let you do that oh but before i get into that are there any questions so far guess not roll up starter app is a more fully fledged project template if we take a look at the package.json here it has more scripts besides build it has start which does the serving for you the http server stuff is built into this it has build which is our same thing we had roll up dash c it also has watch what watch will do is automatically rebuild your bundle every time the source changes the source code changes and then there's dev as a script which is what we would want to use during development we would say npm run dev and what this does is it starts these two scripts in in parallel using this package called npm run all parallel so it runs start which serves the stuff on an http server and it also runs watch and i believe this package called serv which is a dev dependency here it i believe it does that automatic refresh but i don't know let's let's give it a try let's give it a spin so how do we use this what i want to do is i think clone this repository using git i'll call it example roll up starter and then i can run get clone oops i should just copy this here it already has the git clone run this this uses git to make a copy of all these files for me locally it's inside a directory called rollupstarter app which i guess is fine so in here i can run npm install or just npm i which is shorthand for npm install that will install the dependencies and then we can run npm run dev and it gives us this nice little output okay it's running on localhost 5000 let's roll up starter app excellent and then the development workflow looks something like we don't open up these files and this is these are the files from the starter app it's like just their version of hello world we could put our code in here um that's probably that's the way to do it if if you want to like really start a new project based on something in vishub probably the thing to do is just copy your files into one of these starter apps notice how this rollup config is slightly different it looks for src main.js as the entry point instead of index.js like ours does yeah and it has a couple more plugins to resolve npm packages and this is something i want to get into all right so i'm going to gut these files and put our own files in there i'll remove this update.js and then main.js i will replace it with the code that we wrote earlier so here's our index.js i'm just going to copy that over to here and then we need something.js so i'll make a new file called something.js and then i'll just copy this code into there and then we also need thing.js so i'll make a new file called src slash thing dot js and then copy our code into there save all these files and let's see what happened in our window where we're we're running npm run dev we have a couple of warnings here it says unresolved dependencies oh no d3 is imported by src main.js and yeah the bundle has not been updated the problem here is that we don't have d3 as a dependency here now here comes the main difference between what vishub does and what people usually do in projects usually instead of pulling in libraries from a cdn with a browser global usually people add it as a dependency in their package.json and then the bundle contains that entire library let's see how that plays out what we want to do is add to this dependencies d3 at a specific version but rather than hand edit this file what we can do is run a command called npm install dash dash save this will update bundle uh sorry this will update package.json and it will add that new dependencies the new this will update package.json and include whatever we type here as a new dependency at the latest version so if i run npm install dash dash save d3 it will figure out the latest version and add it to our dependencies section and it will also install it in node underscore modules now if we look at package.json it has d3 version 6.6.2 all right let me restart this i don't know if it catches that if i change it like that oh there's some warning about circular dependencies with d3 yeah that's a longstanding issue but it's just a warning it's fine it created a bundle.js let's take a look at bundle.js i'm quite curious to see what it looks like now it's in the public directory public by the way is a conventional directory name for the stuff that gets served over http that's where our index.js is and that's where our bundle is now inside of this version of bundle.js um i forgot how to turn on line numbers in vim one moment oh yes okay in this version of bundle.js let's see how big it is how many lines it's massive it's huge look we're only you know ten percent of the way in 300 lines so what three three thousand lines of code this is because all of d3 is included now inside of our bundle.js vishub does not do this because it would be a huge waste of storage and compute time and everything but as a standard practice nowadays you know if you have for your own project this is typically what folks do you know all the dependencies get included inside of bundle.js which introduces the need for minification uh minification is when this stuff is sort of compacted the variable names are given nonsense names that are just one character or two um and the idea with minification is to get the size of the bundle down i'm just curious what how big is this bundle if we take a look at these files we can see that bundle.js here is 76 kilobytes so that's you know that's what happens when your dependencies get in there and as you add more and more dependencies this bundle gets to be you know 500 kilobytes a megabyte two megabytes um so you got to be careful when you just you know add dependencies willynilly but anyway when we look at the web page now it says roll up starter app i'm not sure why oh perhaps because i did not in i didn't update index.html yeah we're still using their version of this and notice in the rollup starter app version of this they also have script source equals bundle.js it's sort of a standard convention as the last step i'm going to replace that with our version of index.html copy all this stuff that we had from earlier put it into index.html however we no longer need to pull in d3 from unpackage because it's installed locally and it's included inside of bundle.js so i'm going to delete that now if we look at this page it says hello html and it has our greetings here and it also resolves the d3 stuff to the correct thing all right this is how you can essentially bootstrap a local project for development yep that's it any any questions and does this uh also refresh the page every time you make a change oh good question let's see if i change index.html and save it it does not no so we need to manually refresh but i wonder is it set up so that when we edit the code it reruns let's just change something here other thing no it does not it automatically generates the bundle but it does not automatically refresh the page hmm i don't think let me just try again make a change save it no it automatically generates the bundle but does not automatically refresh the page okay at this point if you wanted to add that we can start researching about that sort of thing but it's a whole it's a whole can of worms really there are other starters um for example the webpack dev server um i was hoping to go through this today but we don't have time we're at time here webpack is a great alternative to rollup and it has this thing called the the webpack dev server which does exactly this sort of re automatic refreshing of the page and automatic generating of the bundle so i would encourage you if you're interested to go through the docs of webpack they seem to have a very nice getting started section where was that it's in here somewhere but yeah it's it's a similar kind of configuration to the rollup config where there's an entry and then there's output it's not exactly the same as rollup but it's you know the same in spirit webpack i think is uh perhaps more widely used than rollup for projects for you know applications however rollup is very popular for libraries because it has this efficiency around only including the code that you need which is called tree shaking but anyway i would like to leave you all with an exercise for this week export something you made in vishub put it in a github repository um unfortunately i didn't cover that today but you know try to figure it out and then adopt a build tool roll up maybe go through the same process i did or try webpack or try a newer tool like parcel or snowpack or what was that other one that was suggested today i don't even remember what was that one invite invite yeah yeah yeah maybe try out invite and uh yeah i i hope this has clarified the question of how do i work outside of vis hub all right i think we'll well i think we're pretty much done any any any less questions or discussion points if i have to if i want to do the local development then should i start with roll up only i would suggest it that's actually my go to tool it seems to work extremely well uh but maybe webpack is for you i mean totally up to you and some of these new ones like snowpla snowpack or vite you know they claim to be even better than whatever else is there web packet roll up so it's um it's wide open territory it's average it's an everchanging landscape where things are coming and going people things are hot things are things are cold you know so it's it's really a jungle out there and i've sort of reached the end of what i can recommend because honestly i haven't really kept up with this whole space so it's an you know trial and error and just try a bunch of things and see what works yeah i think i think what i'll do is extend this to next week well actually i should tell you all next week is cancelled the 17th is canceled but i'll resume these streams on the 24th 24th i think that's a saturday and i think it would be worth going through setting up a github repository and maybe walking through using webpack to bootstrap a project and as always i welcome any input or suggestions for things to talk about but then yeah after this we could get into more of the visual stuff d3 making different visualizations and so on all right thanks everyone for joining today i'll uh see you on the 24th and beyond thank you my pleasure very useful thank you testing testing productizing a could base this is part of get it right in black and white but it's a little different because it's just me working on this stuff and this is work i was going to do anyway so why not put it in the series this work is about exporting something that you built invis hub out of vishub putting it into a github repository which is where people you know generally put code and deploying it with github pages also this particular work happens to do some data processing in node js so we'll touch upon that as well this is the thing that i built it's a stream graph of d3 activity for the past 10 years i'm not going to talk at all about how this works but you know think of it as a black box code base that we're going to get out of this hub and sort of productize you know make it a a real open source product i'll start by exporting these files and we get this zip file that has a bunch of files in it but where should we put this stuff we should put it in a git repository let's make one of those in github i'm going to click on this little plus and create new repository i'll call it something like get history stream graph i'll make it public add a readme choose a license i'll make it mit create repository all right we've got this empty repository i'm going to copy this text so that in our terminal we can go to where the repositories are and use git clone and paste that url to clone that down whoops the directory already exists let me try that again and now it's working i'm in a linux terminal by the way this is my typical working environment git is installed you might have to stop and install git on your machine rm means remove uh the dash f means force and the dash r means recursive and git clone is the command that you use to make a copy of all the stuff in the git repository on your machine now that that's there we can cd into that directory cd means change directory and then ls meaning list all the files there and i like to use vim as my editor with nerd tree that lets you see all the files so this is this license is a mit template and this readme is a blank readme i think i'll start this work by just referencing all the input sources in the readme this project aims to visualize get history as stream graphs it draws from the following previous work namely and this is where i'll drop a link to this thing here d3 get history stream graph and i'll make that a link in markdown that goes to that url this one here i'll copy it and paste it right in there and this one refers to this thing that's in github gist right now which is a set of node scripts that are forked from original work by ian johnson he actually figured out how to do this how to get the data of commits out of a git repository and into a csv file so i'll link to this one as well ian johnson's set of scripts to pull the git history and i'll make that a link to this url right here okay i'm going to write the file and quit vim and now i'm going to make the first commit git status dash s is how you see what the status is git diff is how you can tell what changed git add makes sure that all the changes you made are sort of staged to be added to a commit and then git commit dash m add links to readme and then finally get push get push will push up the changes that you made into the repository in github so back in github if we refresh the page we should see this new stuff the language of the readme file by the way is markdown it renders to html and looks like this so now you see these are links but in the original text you know this this big heading is just a hash and you can make the bulleted list with these asterisks all right now that we've got this far i'm going to start by pulling in those node scripts and then after that's done we'll pull in the the front end code that makes the visualization here's my fork of ian johnson's gist which has been modified to remove bulky commit message data and to also publish the combined file to adjust and by the way that that stream graph thing it pulls the data from this gist to add these files to the git repository i'm going to start by cloning this gist i'm going to clone it as a peer directory with git clone and then i'll paste that url for the gist okay it's already there on my machine i'll just do a git pull to make sure i have the latest and i do okay so we have a bunch of files here the main things i'm interested in are these javascript files so i'm just going to say copy everything that ends with js over to our get history stream graph directory then i'll go back to that directory take a look okay everything moved over at this point i know we're going to have a bunch of files eventually so i want to start to organize them these files are the data processing scripts which will be i think in a different directory than like the frontend code so i'm going to make that directory now i'm going to make a new directory called data processing scripts and then i'll move over all those javascript files into that directory now our directory looks something like this where we have a bunch of javascript files and a readme and a license at the top level at this point i'll make another commit oh before that i have to add all these files and then i'll make a commit that says add data processing scripts and get push at this point the main focus is just to get all the code into the repository so i'm not even going to run these scripts i'm going to refactor and massage that stuff later but for now the goal is to get the viz running and publish it with github pages to that end i'm going to extract the stuff from our zip file our vishub export into this directory by clicking on extract scratch that by clicking on extract and navigating to that directory and i think i'll make a new directory actually scratch that and i think i'll make a new directory called vishub export just to keep everything totally separate for now i'll hit extract show the files and there they are okay great now we have our vishab export i'll make a commit but first i have to get ad okay i'll push this up okay the main thing that's missing at this point is the data itself the data is currently hosted in a gist and the viz pulls it down from that gist but as we're unifying things we'd like to make the visualization code pull the data from this repository somewhere scratch that whole segment now that everything is there we should just be able to turn on github pages and get that whole hosting working for that i can go back to the repository which now contains vishub export and inside there there's an index.html that should work if we just host it with github pages which we can enable in the settings of the repository we can just scroll down and find pages by default it's disabled but we can just turn it on and say all right host the main branch at the root and click save now it says your site is ready to be published at this url here and now we just need to modify that path to go to slash vishub export slash index.html i think if i just paste that in it's going to work not quite yet it says it's the site is currently being built i guess it might take some time okay i just refreshed and boom there it is all right that's how you can export something out of this hub and put it into a github repository and then enable hosting with github pages from here on out i'm just gonna massage this code base to be coherent and clean and also make it so that the viz pulls the data from the repository as it gets generated in this repository the first thing i'm going to focus on is whipping these uh node scripts into shape currently they're kind of a mess they create github repository they create git repositories as peers of the source files which is not quite right so if i open up the editor go into data processing scripts there's a bunch of different scripts that do different things this one clones all the d3 repositories from dependencies and then you run this knife sv thing that generates a bunch of files json which converts those files to json and then combine which combines all of those together into a single file ideally we would just have one script that we could run so let me start there and see where it goes i'll make a new file called index.js under data processing scripts and this will be the main thing that runs so first we clone the repositories convert to knife sv files convert to json files and combine the output file since this is node i'm just going to use require rather than import if we say require dot slash clone that should pull in the stuff from this clone file over here i'll call it clone when we import it but the thing is this is currently a script that runs so instead of just running a script i'm going to define a function called clone which is a function that just goes through each of the dependencies and clones them and then in node we can export it by saying module dot exports equals clone now we can just proof that this is working by saying console.log clone it should output a function and then i'll make a new terminal window here navigate to the data processing scripts directory and then run it node index.js okay it's looking for d3s package.json yeah those scripts assume that the d3 repositories is cloned but that's not really the case so i'm just going to take this package.json and drop it into our repository i'll call it d3package.json create that file paste the content and then i believe it's this depends thing that is pulling in that file let's change this path to be d3 package.json and see if it works now okay worked we got a function great now this clone function itself just runs get clone and so um you know i'm not even sure where these would end up let's run it and find out in index.js we can actually run that function so when i run this let's do a bunch of stuff i'm going to stop it before it gets too far and now see there are all these d3 repositories right here in the same directories all the source files which is kind of a mess so i'm just going to delete all those remove everything that starts with d3 dash because i want to keep d3 package jason okay now those are all gone i think the best approach might be to have this clone script make like a directory we can run exec outside of all that and have the command be make directory repositories and we could handle errors here but i don't think we really need to and then we would a cd into repositories and then run git clone on all this stuff we'll see if that works i'll run node index again and then again i'll stop it with ctrl c huh it did not work it did create the repositories directory though i guess the cd didn't work yeah it looks like it doesn't work for cd it looks like we can pass something into exect called cwd let's try that so instead of cd repositories we just pass an object with cwd dot slash repositories would that work i'll get rid of those d3 things again and then see what's in repositories okay it worked look at that all the stuff has been cloned into repositories excellent okay at this point i'll make a commit oh you've added another git repository inside yeah you know i think we just want to totally ignore that directory which we can do by editing dot git ignore if i just put that in get ignore okay it's still added them but let me just remove that whole thing okay now if i go and run that thing again it's going to clone all the repositories now when i do git add it doesn't catch them but i think they are still there yep okay so git ignore is working now i'm going to make a commit that says start iterating data processing script one thing i don't like about this is when you run it it doesn't even tell you what it's doing or how far along it is so i'm just gonna add a little something that says console.log command just so we know which command is running also we may as well output the error just so we know if anything happens or rather if there's no error error is null so let's say if error then console.log error okay now we get some some stuff git clone fails when it already exists okay yeah that makes sense so let me remove that repositories directory and try again okay it's running all this stuff and i finished amazing so if we run that again it's gonna give us all this um these errors but i think i wanted to actually just not tell us if there's an error because i could imagine you know running this this index again and again and if it's already cloned you know it's already cloned so now let's let's work on the knife aspect just copy that line change all clone to knife and then we just run knife but over in knife we need to again make an exported function so i'll make a function called knife that runs this command and then add it to module.exports module.exports is knife now if we run this whole thing oh it's trying to cd into the repositories but it's looking at the wrong place so instead of cd repo it should be cd repositories slash repo let's try that cannot create dot dot slash data slash d3 okay that makes sense because we don't have a data directory similar to clone we might want to make a directory make directory data so now let's try it okay that did not work i think we need to be going dot dot slash dot dot slash because here we go two levels down not one so let me try that dot dot slash dot dot slash okay it's working and we're getting all these nulls because it's doing console.log error i'm going to change it to only console.log the error if there is an error that's not null okay now it runs fine now let's run the json conversion which we can get from that file replace knife with json and in json we can say const json equals a function that runs all this stuff and then export that let's see if that works it seems to have worked but i don't really like how we don't know what's what it's doing so i'm going to add a little bit of console.log cloning dot dot knifing dot dot dot converting to jason dot dot dot that's a little more user friendly i sort of know what's happening and lastly we need to combine the output file dot dot so we can run combine which we get from combine dot js and here again we need to make this a function that runs all this code here and then export it like that all right let's see if it works okay that looks good we've got this new file all d3 commits which looks something like that and you know i'm always a bit hesitant to add data to repositories because the files are usually pretty big and in the case of this one there is actually further aggregation that happens in the front end it actually aggregates by weak yeah with some stuff from d3 utc week and then it applies some smoothing to that data but you know the smoothing i kind of want to keep that on the front end so that if we wanted to we could vary how the smoothing is done but i think it would be advantageous to do this data processing in the node script so that we don't have to fetch a 500 kilobyte file we can fetch a much smaller file that just has the weekly aggregations and then we wouldn't need to add this data file to the git repository at all in our data processing script we can add another step aggregate by week i'll call it aggregate and we can get that from aggregate dot js which is a totally new file which will have a function called aggregate and that will be exported this is where we get to do the fun exercise of porting browserbased code into node this code here expects data as the output from the previous script in this pipeline namely this file here all d3 commits so let's load that file here with fs.read file sync all d3 commits jason and we can call that data string and then data would be json.parse data string and those console.log data just to see if it worked fs is not defined fair enough i'll look at some of these other scripts it just requires fs which is the builtin node file system module and it looks like we might need a dot to string on the result from read file sync but if we run it without that it actually works just fine so maybe we don't need that after all okay we've loaded in this data now we can take the stuff out of his hub that processes this data i'm going to copy all this code up until the place where it computes layer data and what we're calling layer data here i think will be the output it's the aggregated data so i'll paste all that stuff in here this code imports a bunch of stuff from d3 but since we're in node we can say const d3 equals require d3 and for that to work in our data processing scripts we really probably should have a package.json to track our dependencies like d3 to create a package.json i'm going to run npm init and i'll just you know accept all the defaults and then we can run npm install dash s meaning update package.json d3 and if we take a look at package.json this is how it looks that's fine main thing is it has the dependencies now that means that this line of code here will work oh we also need array blur no no we don't we don't that'll be done on the client side that's the smoothing we can reconcile this es6 import syntax with our es5 you know node environment by saying const all this stuff equals d3 this is destructuring right here and i might as well move that up to where it's imported okay so let's organize this code here we've got parse date and layer which are statically defined so i'll pull those out transform data equals data well we don't need that because we're already inside of a function that has data there visible all this stuff should run just fine and then down here is where it sort of trails off it's we gotta just wrap it up here and we we have layer data which we somehow somehow need to get into a file so let's see what layer data looks like here and see if the code runs to this point so if i run index.js apparently layer data is a big array probably the easiest thing to do would just be you know make a an object i'll call it aggregated data and layer here is the name of the layer so i'm just going to say aggregated data at layer equals layered data now we have something that we can output to a json file let's see how did that other module do it there it is fs.write file sync so i'll just drop that line and it calls json.stringify and i'll just pass in aggregated data to there and the file name i think i'll just call it aggregated data now if i run everything we have a new file called aggregateddata.json it contains a bunch of zeros but i think that's okay each of these numbers corresponds to a week but you wouldn't know that based on this data in our code the weeks are available here as all weeks so let me just make that available here in aggregated data as all weeks and then we can nest the repository data under say repositories now we can say aggregateddata.repositories add layer equals layer data let's try this oh okay now we have all weeks the format is a little verbose i kind of want to just clean that up we already have this parser so let's just add a formatter format date is time format and we need to get that out of d3 as well now um instead of all weeks i think i'll call it dates because you know we might want to use months or something in the future and then we can say all weeks dot map format date now when we run this oh we get an error i'll just backtrack okay now it works i don't know how i what i broke or how i broke it just introducing the formatter shouldn't do anything but it does what that's odd if i don't create the formatter all by myself yeah mommy i don't know twilight zone moment okay let's try it again you okay this is super weird it says you know d.date is undefined if we do it like this but if we do it like this explicitly pass one thing into format date then it works weird might be something about a second argument to format date or something but anyway now it's working just fine now if we take a look at the files we can see that the aggregated data now is only 31 kilobytes instead of a whopping 426 we should just make sure that this data doesn't end up in the repository so i'm going to delete this file and i'm going to tweak this script to generate this inside of data inside of the data directory data slash all d3 commits and then when we load that we need to get it from this light the same place data slash all d3 commits and then in our git ignore we can also ignore the data directory so that everything in there does not end up inside the git repository so i'll run all that stuff one last time okay it worked if we do a git status we see the stuff here generally looks good but i see there are swap files being tracked and also node modules is being tracked by git we don't want that so let's go back to our git ignore and say any swap file this is just a temporary thing that vim generates that we don't need and get also node modules okay great there we have it we have aggregateddata.jsonvisible which is only 30 kilobytes so i feel good about adding all this stuff and then i'll make a commit add aggregated data all right now that we've scratched that all right scratch that now that we've got the data processing scripts sorted out let's deal with the frontend code the front end code is currently in this vishub export thing which has sort of a sketchy dead simple package.json and rollup config the first thing i want to do here is make sure that we have a proper setup so i'm going to turn to roll up starter app we can pull things in from here and i like to do it one at a time so here's package.json since the thrust of this project is the front end i'm going to let the front end code live at the root of the repository so i'll just drop that stuff into package.json but instead of roll up starter app we should call this git history stream graph like so everything else looks decent i'm just not sure that it's at the latest version oh and we don't need date functions that's something that's used by you know the starter app i'm just not sure all this stuff would be at the latest version so i'm going to run ncu which is you can get it with node sorry npm install g npm check updates this is a little utility that goes through your package.json and checks if all the versions are the latest we can run it with ncu and it turns out there's some version increments and so i'm going to run ncuu to actually modify package.json to use all the latest versions of things and then i'll run npm install while that runs we can pull in some other stuff from this starter app such as the rollup config this is more of a production oriented configuration for rollup so i'll make a new file called rollup.config.js and i will drop this content into there now let's look at our files and take what we need from the vishub export there are really only two main modules here index.js and transform data i'm inclined to make a new directory called src the source directory and put those files there so i'll just move those into the source directory and notice that the rollup config looks for src slash main.js i'll just change that to index dot js and index.js imports a lot of stuff from d3 and also from d3 area label now this is a fork in the road where we could choose how we want to include our dependencies we could either go the traditional route of pulling in the dependencies into our bundle having a huge bundle with all of the functions from d3 and these libraries that we're using or we could opt to pull our dependencies from a cdn like unpackage and have our bundle only contain our code and not any other library code that's what i'm inclined to do because we're publishing this with github pages and to publish this stuff with github pages we need to include the bundle in the git repository and if we include a bundle in the git repository that contains like d3 and and libraries it's going to bloat the git history so that's why at this juncture i'm going to opt toward using libraries that come from a cdn to do that we need to adopt some of the stuff that's going on in the viz hub config for rollup namely marking things as external i'm going to bring that line into our rollup config it says okay d3 is external also globals and we need that as well under output so that d3 can be resolved to the right thing at runtime since we're using d3 area label as well this piece also needs to be pulled in from our rollup config it just says anything that gets imported from the d3 area label package looks to the d3 global and that just happens to be how that library is set up it adds more stuff to the d3 global okay and finally we have index.html where should we put this and this is a kind of ugly indentation wise let me just fix the formatting okay we're pulling in these three libraries from on package and then we're running our bundle.js uh but is that where it ends up in our new rollup config no it ends up in public slash bundle.js okay good to know that makes a lot of sense the directory name public is typically where index.html lives and also css maybe images or data files things that get loaded by the client so i'll go ahead and make a new directory called public and i'm going to move index.html into public and you know that's where the data should live as well so i'm going to move aggregateddata.json into public there's also styles.css which can go in public as well okay now public has our data our html and our css let's see if our rollup build works see our index.html expects a file called bundle.js and our rollup config outputs a file called bundle.js in public however that's not there at the moment to make that exist we can look at our scripts in package.json see we have a build script which will just run rollup to generate that bundle invoke that we can say npm run build like so and it says unresolved dependencies and also missing global variable name okay we just have to take some more stuff over from our other rollup config from vishub namely we need to add array blur and d3 area label under the external configuration like that also in globals we need to define which global array blur resolves to it just so happens that that library is also set up to add stuff to the d3 global so we can say array blur resolves to the d3 global let's try that again okay no errors and now bundle.js has been generated in the public directory and it looks something like this it's pretty small this has been minified by the way because in the rollup config terser is used terser is a minifier okay great now let's see if everything actually works there is a script here called start which just runs serve which is another npm package and it serves the public directory let's try that npm start okay we have a local http server running on port 5000 and if i run this boom it works look at that amazing so the work is done the final step here is to you know commit whatever we've done and make it work with github pages as well also i'm remembering that i manually copied the data over into the public directory but ideally our scripts would output there directly from the aggregate step so instead of writing aggregateddata.json i'm going to change this to dot dot dot public slash aggregated data this way if we modify any of these scripts we can just run it and then push to github and it'll actually automatically deploy to github pages with the fresh data i'm just going to run that processing script one last time to make sure that the last step works i think it worked but to be sure i'm going to delete this file now it's gone i'll run this again and i'm getting an error now scratch that okay that ran and now in public that file exists boom all done get status to see what changed oh a lot of stuff changed i'll add everything to get this change set looks good make front end work is my commit message push that up now in the github pages config since we have a public directory now we can actually change this configuration so that instead of serving the root at the root it should serve slash public scratch that section okay now we can go to this github pages site oh now shows the readme that's pretty cool but we can go to slash public and we should get the visualization and we do all right sweet you ideally we would not need this slash public but in the settings for github pages we can only select between two options the root and slash docs so the thing to do might be rename public to docs that way we could you know just use the root of this url and that would resolve to the working visualization so i'll go ahead and do that i'll move public to be called docs and then i'll search for all mention of public which gives us these three places that we need to change public to docs and by the way i'm using this a g function which is a really nice thing called the silver searcher it's like a command line search utility okay so in roll up config i'll change public to docs yeah that's the one same thing in package.json public to docs and lastly in our aggregate script public to docs all right there we go i'll add that to git make commit migrate public to docs for github pages push that up now i can change this setting to use slash docs and now if i go to this url it'll take a minute to change but if i refresh now i'm in the middle of something that i really need to have everything in my head we just sat down you it should eventually show up if somebody can get okay um oh i could um let me just finish what i'm doing sweetie hold on you the last sort of loose end we need to wrap up here is the fact that our our client program is still pulling in data from github gist see check it out under source index.js we've got this data url which is still pulling from github gist this one needs to change to pull it from dot slash aggregated data dot json and this is where you know we've moved a bunch of stuff from the front end to the back end or the preprocessing step so we're gonna have to modify this transform data function so that it does not do all the stuff that it did before rather it's going to expect this new format for our aggregated data which contains dates and what else repositories so we can destructure those from data and let's take a look at our aggregate step it does a bunch of stuff in here so we can delete that from the front end code we don't need to do the grouping we don't need to compute all this stuff we do however want to apply the smoothing layers here represents the list of repositories so we can derive that from repositories by saying object dot keys repositories and all weeks is actually dates however we do need to parse those strings into dates using parse date which we have defined there so how about this instead of doing this destructuring we can say data dot repositories and we can also say dates equals data dot dates dot map a function that takes as input one date and returns parse date of that date now dates should be defined correctly and we should be able to set everything up you know just let it run like it did before however there's this thing called data by layer what is that i think i clobbered its instantiation we can use git diff to figure that out yeah here it is i deleted it by accident it's just a new map so we can bring that back scratch that so we can bring that back right here data by layer a new map and now let's see if it works so npm start just serves everything what we want to do now is actually regenerate the bundle so let's try this dev script npm run dev that will run in parallel both the start script and the watch script and the watch script is essentially the same as the build script but it watches meaning every time you change a file it automatically regenerates bundle.js so i'll shut down npm start and run npm run dev oh look at that we have some warnings that's really nice unused external imports utc week utc weeks and group are imported but never used yeah that makes a lot of sense so we can just get rid of those we don't need uct week you see two weeks or group great see i wrote that file and then it updated bundle immediately automatically let's see if the front end works i believe it was localhost to 5000 it appears broken it says grouped data is not defined okay let's see what what is that i think what used to be called grouped data is now called something else but no that's actually not the case what we have is layer data yeah i remember this stuff is actually in our data processing script in the aggregate step yeah so what we're doing is we're saving layer data to the file so we can just get layer data out of the file by saying data dot repositories at layer like that okay let's see if that worked all weeks is not defined yeah i think we re we changed that to be called dates t is not an iterable hmm i don't think i can do it sweetie i'm sorry you okay it says t is not an iterable and if we follow the code it's it's when it tries to compute extent of data apparently data is not an iterable so let's see we just need to connect the dots data i believe was the original data so we actually need to change the frame code so that it doesn't need data at all all it really needs that for is to compute the domain of the x scale which is the extent of the dates and we have those dates available so we can just expose these dates instead of data and then we can use that to compute the extent it's just going to be the extent of the dates and it sort of worked got something kind of funky going on i don't know why the dates go back to 1970. it appears that we might have like an invalid date yeah the dates are going back to like 1971. why is that okay well that's that's what's appearing in our aggregated data so why is that looks like there's some bug in our data processing scripts oh here it is it's all weeks.map that should be well no that looks fine format date of date let's just format all the dates let's counsel.log all weeks at index 0 to see what is the first date here it says 2013. that seems right so what are what's going wrong here what if we pass that into format date it says 1969 1227. why you you okay this is super weird if i just bring back the code like this it gets the correct date and the stream graph appears correctly okay weird but we seem to be missing a bunch of commits on d3 uh you you okay you you you you okay the issue there was it was calling exec and this command was not finishing before the next step in the pipeline ran that's why we were missing some commits so i just changed it to be exec sync so this command actually totally finishes before the next one runs and that was the source of our strange errors so now if we run this and we load the data into the viz it is full and complete and has all our stuff in it all right that's how you can productize a code base all right welcome everyone to episode 8 of get it right in black and white today the goal is to build a d3 scatter plot from scratch so introductions for new folks if any i see oh someone joined the call and left but you're all welcome to join if any money if anybody does join i'll come back and uh we can do introductions i'd like to begin by reviewing some of the submissions from the last episode which was two weeks ago now but let's take a look at what folks did that was the one on javascript modules and build tools and here's a nice roll up example by floating purr very nice very nice and here's another one that uses vite this looks kind of interesting i've never used devite but seems to uh it seems to work and here's another one that seems to be just the straight vishub export which works too but yeah i'm really glad to see folks are able to get their stuff out of his hub into github so that's that's one of the most commonly asked things like how do you get out get out of this hub so that's how and hopefully that's satisfactory and by the way i recorded um episode 7 by myself a couple days ago i'm going to release it as a video soon because i was doing this work anyway of of getting a uh you know makings like an open source product out of something that's in vis up and i just recorded it so i'm going to post that eventually it's not posted yet but that's why we're on episode 8 now not episode 7. metal guitar covers hello everyone hey feel free to join the audio if you'd like it'd be a lot of fun today we'll build a scatter plot and the goal here is to create a vanilla html implementation of a d3 scatter plot that uses modern d3 conventions and implements this pattern of decoupling rendering from data processing the goal of that is to make it easier down the line to swap out the rendering logic if you want to with another framework or canvas or what have you and i hope to get out of this a forkable template that can be sort of a goto resource uh if anybody asks like how do i make a scatter plot with d3 you could just send them a link to this template and like boom that's it and it's like probably less than 100 lines and it works and it's basic and it's vanilla and i mean truly vanilla so we're not going to use es6 modules even because i want to show what that option looks like to not use es6 modules okay i'm going to start by creating a viz invis hub from this vanilla html starter i'm going to fork this and say d3 scatter plot so what have we got here anyway it's a basic html template with some space for javascript i'm just going to gut this delete everything but i'll keep the places to put things like the script and the style because i know we're going to need to use that stuff okay step one let's load in d3 and um there's a number of ways to do this but since we're doing vanilla html let's just load it in from a cdn i'm going to use unpackage as a script tag at the end of the head i'm going to make a new script tag open script close script and the source will be d3 somehow and the way that we get that is i like to go to unpackage.com d3 and it resolves to this minified build of d3 so i'm going to paste that url here now we have access to d3 which we can prove by saying console.log d3 and taking a look in the console and we get this object that has all of the d3 methods right the next step is to load in some data and since this is a you know going to be a template i like to use the iris data set if you just do a google search for the iris data set there's even a wikipedia article about it that helps to give some context it's also known as fisher's iris dataset it's a multivariate data set from like 1936 about flowers about iris flowers these are the iris flowers and it's got like petal width petal length and they're just measurements in centimeters about these particular flowers so it's a classic data set i'm going to use it because we end up with nice scatter plots but part of the goal of this is to develop something that's a template that you could easily swap out the data to be something else so in a sense it doesn't really matter what data we use to start anyway if you scroll down in the search results i've got this gist up in github that contains the iris data set as a csv file publishing data in github gists like this is a pretty common practice for visualizations that are hosted on the web and various platforms it's great because github essentially hosts the stuff for free and lets you pull it down from any program so if we click this raw link right here we get to see the content of this file which is a csv a csv file and csv stands for comma separated value this is the header row and these are all the rows that contain the data so it's got sepal length and the sepal length of the first flower is 5.1 it's got sepal width and the sepal width of the first flower is 3.5 centimeters it's got petal length and the petal length of the first flower is 1.4 and it's got petal width the petal width of the first flower is and it's got species and the species are iris setosa iris versacolor and virginica these are different species of iris so we can take this url right here copy it and paste it into our program i'd like to make a variable for this so i'm going to call it csv url equals and i'm just going to paste it right there and at this juncture you know for me i don't really like seeing these long lines that wrap around in sort of an unwieldy way so here's a little trick that you can use to to clean up the code around strings i'm going to make it an array of strings so we can see the different components of this url yeah i'm just going to split it up here close out the array and then we can say dot join which is a method on javascript arrays and then we can use prettier to format that nicely and now i feel this is a lot more readable we know that it's coming from github gist this is the user name this part of the url is the id of the gist and this part is the commit and then this part is the file name so that's how you can split a long string into multiple lines in you know a somewhat elegant and readable way in javascript and just to make sure we're getting the right thing still we can console.log csv url and we should see that url yeah there it is and we can even click on that and it resolves to the right thing okay now that we've got this csv url we have to fetch this csv file to do that we can use d3 dot csv now at this juncture we can make a decision do we want to have d3 dot all over the place in our code or do we want to extract the d3 stuff into local variables the latter would be my preference because that's how it ends up when you use imports es6 imports so to make this vanilla javascript more closely resemble the code that you would write if you were to use es6 imports i'm going to make a decision to destructure all this stuff out of the d3 global like this we can say const csv equals d3 and i'm going to do it at the top because traditionally that's where the imports go so what this is doing is is exactly the same as this const csv equals d3.csv it's exactly the same thing but it uses es6 destructuring which is a nice language feature so now that we've got this the csv thing we can we can use it we can say csv and pass in csv url and what this does is it makes a network request using http for that particular url and the csv function returns a promise which is a construct in esx javascript to deal with asynchronous control flow so when you run this code it makes a request and then that request takes some time to come back and then after it comes back the promise resolves and that's when we want to get the data that comes back to do that we can say dot then dot then is a method on promises and we could pass in a function that takes as input data and then we can say console.log data to see if it worked indeed it did see we get this array of 150 elements that also has a property on it called columns see this is the result of d3 dot csv doing its thing internally it actually loads the file and it also parses it it goes through that big string of text and it splits it into rows and it constructs these objects one object per row so what we get here it's an array of objects and each of these objects has a bunch of properties like sepal length simple width however these are strings and ideally these would be numbers so the next step here is to parse these strings into numbers takes as input a second argument i'm going to call it parse row and this is a function that takes as input a single row i'm going to call it d and it returns some object that will replace that row so what i'm going to do here is i'm going to return d but before doing that i'm going to mutate d and say d dot sepal width well actually let me just copy the set of columns out because i can't remember all of them and we only want to do this for the things that are numbers so species is not a number so we don't need to parse the strings into numbers and by the way the reason why it's good practice to parse strings into numbers is because you know when you do math on strings you don't always get the right result just as a brief detour let me just show you if you add like five plus 5 as strings you get 55 but if you add 5 plus 5 as numbers you get 10. so how do we get from strings to numbers we can use this operator called unary plus if you put plus right before the string it parses the string into a number and so that's what we can do for for all of these numeric fields here going to paste that here and i'm going to use the macros i think to just write this code quicker so we can say d dot z length equals plus d dot sepal length and then set up for the next one and with these macros i can automate that and then i'll use prettier to format the code and there we go we've got numbers instead of strings and let's just see if that worked in the console we can see indeed these are numbers now we've got some questions in the youtube chat uh by the way anyone can join the live audio be higher bandwidth so csv is converting the file to a json structure yeah you could think of it like that i mean it's a it's converting it to a javascript object in memory which is the same structure as a json file but json is is a serialization of javascript object so it's not exactly json but it's similar it's it's yeah it's an array of objects that's true doesn't d3 add columns yep yep totally does yeah so d3 does all that magic internally where it adds this columns property yep okay what's next here let's start using d3 to build up this graphic using svg so the first step of that is to create an svg element on the page we can do that right here i suppose const svg equals d3 dot select body dot append svg this will append a new svg element to the body however since we don't want to see d3 dot sprinkled throughout our code i'm going to also destructure select from d3 up there and for svgs to work we need to give them a width so i'm going to say attr width and also we need to give them a height so i'm going to give it width as the value of a local variable called width that i haven't created yet and the same for height height gets height and let's define width to be window dot inner width this measures the size of the browser at the time where the program runs i like doing it like this so it's generic and it's not a hardcoded number okay let's see did this work we get these uh these undesirable scroll bars which we can address with some styling in the css we can say okay on the body element set the margin to be zero this is just a common trick that you sort of need to do all the time if you want to have full screen svgs and overflow is hidden that will hide those pesky scroll bars okay that looks better all right now that we've got this svg what do we want to put in here um well a scatter plot is made of circles so let's just go at it that way you know let's add some circles to this svg based on the data the thing is though that data is only available inside of this callback here and i don't know this dot then i don't really like it because because there is a more elegant construct called async and await my preference is to use that and the way you can do this is introduce a function i'm going to call it main and this is going to be an async function and what that means is we can say const data equals await csv all this stuff here this um strike strikes me as a little bit more elegant you know i'd prefer to use it like this um and then we have to invoke main of course and let's just see if it still works after this console.log data indeed there it is okay so that's how you can you can use async and await instead of the then syntax for promises which is sort of a more modern approach now we can add circles to our svg with the d3 general update pattern svg.select all circle dot data data dot join circle and now we can set our attributes on the circle attr cx is going to be now what is it going to be i mean this is where we need to do a lot of work actually to figure out what that x position should be and it brings up the point that um i would like to have the concerns separated of the data processing and the rendering and so i feel like we're getting a bit ahead of ourselves we're not quite ready for the rendering because we haven't done the data processing and so by data processing what i mean is figuring out which x and y coordinate each circle needs to get based on the data and using this construct called scales linear scales in particular so let's do the data processing first and then circle back to this rendering logic all right i'm going to comment out this and to figure out where x should go we need to use a scale and i'm going to just call it x this is going to be the x scale because this is a convention that i've seen in recent times with d3 programs this is going to be an instance of scale linear and it would be d3 dot scale linear but we're also going to destructure that up here out of d3 skill linear but what does a scale linear i mean what is this what is scale linear why do we need it i've prepared a diagram to explain this scale linear has a domain and a range the domain is typically the values that you see in the data in our case this would be like the you know the width of the sepal or whatever and typically the domain goes from the minimum to the maximum value that we see in the data so let's just say we have some data set where the minimum value that we want to use for say the x position is 0 and the maximum value is 10. and what the purpose is for scale linear in this case is to transform data space into pixel space and the range of the scale is the pixel space and in the case of the x coordinate this is going to be you know the the lowest and the highest x pixel coordinate that we want to see whoops hang on so when we have a data value and we want to project it onto the screen we we give this scale a value from the domain and what the scale does is it gives us as output a value in the range for example if we were to have the number five in our data we could say okay mr scale linear my data value was five where should that be on the screen and then scale linear would say oh i know that should be at 25 because think about it 5 is halfway between 0 and 10 and 25 is halfway between 0 and 50. so that's the purpose of skill linear i see someone has joined hey felipe is here hello hello hey i'm late it's really difficult to me to make it oh no worries i'm happy you could join yeah i'll meet you meet you i'm also glad that i came good job nice um i can't remember if you introduced yourself last time you came on but maybe just give a a brief intro to yourself here okay i'm felipe i'm an engineer as a profession i don't code i just love to code but it's not my job and uh and then i'm i'm trying to learn as much as i can to to start coding and make things more more easily very nice i really i'm really enjoying making making things awesome yeah i've been very impressed with your work you know i'm so happy that you've been following the series and and doing the the exercises you know it's very it's very great to see and i'm so happy you could join me today so here's what i'm going to do i'm going to share my screen in the google meet okay so that you can follow along there and you can close the youtube stream because there's a lag there but this is great because you can we can have discussions in real time if you have any questions so feel free to interrupt me if anything's not clear okay we can dive deeper but in the meantime please mute yourself because there's a little bit of background noise oh my gosh adil is here too hey hey adil how are you you're muted hello everyone hi karen how are you hello so glad you could join today sorry about the the last minute arrival at some babysitting duties oh no worries no worries oh this is great two folks joined it once and felipe just joined philippe have you met um a deal not not personally but nice to meet you nice hi filipe hi how are you great well let me just um give a quick recap because you're all just joining this is what we've got so far it's not that much it loads d3 it uh fetches a csv parses the rows from a csv constructs an svg element and constructs a scale linear and the goal here is to make a scatter plot and i just went through this slide about linear scales and the purpose of linear scales is to convert values from a domain to a range domain is like the input the range is like the output the domain is the data space and the range is the screen space so in our case we want to position these circles in the scatter plot in the x direction and what should that be though we have to pick one of these columns to use and this is where i like to define an accessor that i call you know i like to call it x value y value color value size value whatever it's a naming convention that i like to use and it's a function that takes as input one row and it gives you back some value from the data that we should use so here are our various options um i don't think it really matters at this point which one because i just want to get something to show up so i'll pick petal length this is going to be our x value and the same for y let's try simple length for y so we're going to build a scatter plot where you know petal length determines the x position of the circles and sepal length determines the y position of the circles now that we have that in hand we can define the domain of rx scale and the way that you do this is firstly you construct an instance of scale linear by invoking d3 dot scale linear as a function this gives you back this object that has methods on it such as domain and domain can be used to set the domain and the domain remember is just two values a minimum and a maximum and so we can this is going to be like min and max min and max are actually functions from d3 so we could say d3.min give it the data and give it the x value accessor and this will actually iterate through all of the different values and compute the minimum from there and we can do the same for max d3.max data x value and it will compute the maximum x value let's just inspect uh what happened there x value is the same of x x value is just this function okay yeah it's just this function here that returns the petal length for each row and we could tweak it here if we wanted to change which row to use but yeah that's all it is it's just a function that returns the petal length for each row and so what what we're doing here we're passing in that function to d3.min which expects a function that takes as input a single row and we're also passing in the data and when we run this d3.min call it actually checks each and every value that gets returned from this function for each and every row and it keeps track of the minimum one that it saw and then it returns the the minimum of all the values and same thing for max but just for the maximum and we can check if this worked by saying x dot domain and the thing about this scale dot domain is if you pass it a value it acts as a setter meaning it sets the value of the domain but if you don't pass it any value like this it acts as a getter and it returns the value that you set previously i just use prettier there to format and so if we look at the result we can see an array of two values and check it out it goes between 1 and 6.9 so d3.min and d3.max are great and all but there's actually a function that does both of them for you at the same time which is called extend so instead of this we can use d3.extent and d3.extent actually returns an array with two elements so when this runs we can see that it's actually the same the same end result and as a last piece of cleanup instead of using d3 dot extent i'm going to destructure extent from d3 up here okay so now we've got the domain of our x scale figured out it's the minimum and maximum value for that column in the data now we need to figure out what should be the range for our x scale we can set the range in much the same way that we set the domain with a function called dot range and by the way note how it's calling dot range on the return value from dot domain and the thing is uh with this with the d3 api it's using um this technique called method chaining and what this does is if you use for example domain as a setter like this it returns the instance of the scale which is the same thing as x so we could potentially say okay x is a scale linear and then x dot domain is this x dot range is this other thing and this all would work but since it's developed with this method chaining api we can use this shorthand and this works as well so let's figure out what should the range be well the range it's going to be an array of two numbers and i think to start let's just make it go between zero and width to fill up the screen and we can see what that is by saying x dot range like this and it's array of you know 0 to 960 that seems right okay that's our x scale it's finished now let's do the same for y i'm just going to copy all that change x to y and then we want the range to go from zero to height but not actually because the ycoordinate is flipped in svg so so zero is at the top not the bottom but we want the lowest data value to be at the bottom in the screen so we actually need to flip this the range will go from height to 0. now we can do our data processing i'm going to create this thing called marks and it's going to be data.map where we invoke a function for each and every row of our data set and we can return an object and this object can have on it the properties of x and y so x will be x meaning this x scale of the value from the domain and by the way these linear scales are functions and you can pass in a value from the domain and so the value from the domain will be you know d dot what is it pedal length oops however since i don't want to hard code these values in here and we already have this accessor function we can just say x value of d that way it's nice and generic and the same thing for y just replace x with y and there we go now let's console.log marks to see what we ended up with oh i've got two console.logs here which is confusing let me get rid of the other one i'll get rid of this console.log data so now we're just going to see the marks and we have objects that have x and y in pixel coordinates all right fantastic this is great now we're ready to move on to the rendering step and and because we did the data processing separately the rendering step is a very straightforward thing where you just map x and y from these objects directly onto cx and cy of the circles pixels pixels for me i have the the impression that should be in tangent numbers not floating numbers why is that yeah that's an interesting point pixels being integers versus uh floating point numbers with decimals yeah it's interesting um svg because it is scalable vector graphics when you're looking at it on the screen um let's say you're looking at it on a high dpi display like a retina display on a really expensive like macbook and um and you set a pixel value as like 100.5 on a high dpi display that has double or quadruple rather the pixel density as a regular display that incrementing of the pixel coordinate by 0.5 will actually increment it by one physical pixel and svg within svg you could do transforms and even with css you can do transforms of scaling and so svg actually does accept pixel coordinates as floating point numbers they don't need to be integers and by the way interestingly this is different with canvas html5 canvas which is a raster based system if you draw a line in canvas and you give it a floating point number i i i'll have to double check but i think it like takes the floor of the number so you can actually only get down to a single pixel in the canvas which is a raster image because it's made up of pixels however in svg it's more detailed than that so somewhat surprisingly you can actually use fractional values for pixels and also for things like line width if you set the line width to 0.5 it it makes it like slightly lighter when it gets antialiased onto the display uh but again if you were to view it on a high dpi display it would actually be one physical pixel as opposed to like two physical pixels because it depends on the what's it called the device device pixel ratio or something like that but yeah long story short svg accepts floating points as um values okay thank you yeah my pleasure yeah i remember it blew my mind when i learned that actually um and it makes sense in a way because let's say you print an svg when you print something it's like 300 dpi so you can actually get to sub pixel uh precision when you print it or when you view it as a hana highres display um current yeah when it comes to choosing a scale um does that depend on what kind of um what kind of metric we're dealing with so we're chosen a linear scale in this case and does that is that because it it's there's something about the original metrics um that that makes a linear scale appropriate yes it does and um i will be getting into this in the future but yeah long story short linear scales is just one type of scale it's a particular type of continuous scale and these continuous scales include other ones like a power scale which includes a square root scale a log scale a time scale radial scale so all of these continuous scales are meant to deal with numbers as input so any time you have a column of data that just has numbers in it you can use this type of scale however there are other types of scales that make sense to use for other types of values time scales for example work with dates and it it's categorized as a continuous scale because it it acts like scale linear but for dates it treats a date as a point in time and also there are ordinal scales so in our data value for the iris stuff we have one column which is species right and it has three distinct values that are strings that are not numbers and so when you have strings in your data you can use ordinal scales either an ordinal scale directly which is essentially a dictionary that maps an input value to an output value but within this space of ordinal scales you have band scales and point scales a band scale maps these discrete input values to discrete output values that are arranged as bands on the screen so this is useful for bar charts for example and then you have point scales point scales can be used to represent data that has discrete input values like different strings but then project that onto a space so if you wanted to have a scatter plot where for example y is the species you could use scale point to map species to a y value but since we're just dealing with numbers mapping numbers to the screen that's why we're using linear scale and we will start to use all these different scales in the future for all the various um visualization techniques yeah thanks that makes that makes sense thank you my pleasure okay let's get these circles to show up and make a a basic scatter plot i'm going to bring back this rendering logic that we started on earlier by uncommenting it and i'm going to change it to work with marks instead of the original data now if we want to set the cx attribute we can just give it a function that takes as input one entry in the marks array and it can return d dot x and the same thing for y c y which is the center y coordinate of the circle can return d dot y and let's see if it worked sorry they are missing they are yeah good call good call yes yes yes that's it if you don't give it r if you don't give a circle a radius it doesn't have a radius and it doesn't show up so let's say five all right there we go boom got a basic scatter plot okay so how do we add axes to a scatter plot first of all we need to make room for the axes using a margin and in the d3 world there's this this thing called the margin convention actually let me just show that one because it's it's really good if you just google d3 margin convention mike bostock the author of d3 has this piece in observable which is the d3 margin convention the idea behind this is to make room for axes on the left and on the bottom or on the top and the right wherever you want to put them but the whole idea is we define this margin object that has top right bottom and left and our code will sort of use that margin to to know where to put things on the screen so it impacts how we compute the range of our skills instead of going from zero to width for example we would want to go from margin.left to width minus margin.right and that's what this example does here back in our code let's define a margin margin is going to be an object that has top i'll just set them all to 20 for now can change it later right is 20 bottom is 20 and left is 20. and by the way this is an actual convention to to go from top right bottom left because it's clockwise around the screen and i think that's how css sometimes in css you can you can like specify things as a big string and it goes from top right bottom and left like that so that's why i chose that ordering but anyway now that we have this margin we can tweak our scales instead of going from zero to width for our x scale we can make it go from margin dot left to width minus margin dot right and now we can see that there is actually a margin being applied let's do the same for our y scale instead of going from height to zero it's going to go from height minus margin dot bottom to margin dot top like that and everything else just sort of works everything else flows from the scales so it just works we can verify that it's working by testing each one of these one by one like what if we set the top to 200. see that it works we have a big gap on the top what if we set right to 200 it works we have a big gap on the right how about bottom yep got a gap on the bottom and left yes i have a gap on the left that's how you can implement the margin convention now that we have space for axes let's add some axes when we destructor stuff out of d3 let's also pull out axis left and axis bottom and the way that we can use those is on our svg we can append a group element for each of our axes so this is going to be um let's do the yaxis first svg.call and this is where we can construct a new axis axis left and when we construct this axis we can pass in the scale namely uh y like that and we're not seeing anything because it's sort of off to the side of the screen what we need to do is move this group element to the right a little bit actually we need to move it to the right by margin.left we can do that by saying dot attr and we can set the transform to be translated and this is an es6 string template literal we want to translate by margin dot left in the y direction and in the x direction and 0 in the y direction and now it shows up see get some tick marks the numbers seem to be cut off though so let me just tweak the margin i'm going to tweak the left margin to be let's say 50. and now we can see this axis shows up all right that's how you can add an axis with d3 maybe let's do the same for the y axis or let's do the same for the x axis now just going to copy this code and modify it to be for the xaxis which i would like to put at the bottom so we can call x's bottom and pass an x like this but the transform is not quite right anymore see we've got all these numbers at the top we want these to be at the bottom so what we need to do is translate by 0 in the x direction but in the y direction we want to translate it to be all the way down at the bottom and so that's going to be height minus margin dot bottom yep and that works all right very good that's how we can add x and y axes to our scatter plot one last little tweak i would like yeah question uh i'm sorry i i'm not sure how how do you ensure that the uh the mark in the in the axis is exactly matching the the value of the data because since you can transpose the axis you could be ending the number in the different places i don't know if i made myself clear oh sure yeah yeah i mean the shorter the short answer is because they're derived from the same scale but yeah if you if you wanted to you know you could translate it by let's say like 50 pixels in the x direction and make it misaligned like now it's not lined up but if you don't do that it is perfectly aligned just because of how the scales are set up so because the axis takes as input the x scale the axis actually uses the range of the scale to position itself and since it's the same scale that drives the x and y of the circles it it ends up aligning perfectly yeah and we're translating it by notice how we're not translating the xaxis in the xdirection at all we're just translating the xaxis in the ydirection to put it at the bottom and so all yeah so all the x positioning is just strictly coming from the xscale okay okay nice nice and same with y by the way we're translating y in the x direction just to align it with the x scale so when all of the y positioning is just strictly from the y scale here so that's why that's why they all align correctly and you can sort of see that they align because this the the lowest x value which is the circle here the center of the circle is exactly on that line of the axis can i see something yeah um we can check the value for each circle by putting title on it and we will see it matches with the axis oh we totally could yeah that's fairly easy to do let's just do it that's a great idea so there's this thing called title um you know what that might be a little more complicated because we need to tap into the enter selection yeah i don't know that seems a little bit out of scope for today yeah we need to we need to change this code around to access the enter selection so i don't know i don't really yeah but it's no problem my questions was wondering if we could mess it up but as you said we we never transformed in the axis that we are actually moving exactly made sense completely yeah nice yeah great great but but yes we could potentially add tool tips that will show the numbers um which which we could then verify that could conceivably work but i don't think i'd like to do that right now because i want to keep this example um nice and simple i have a question um if if we wanted to the the axes to begin from zero uh what would we need to do oh yeah sure if you wanted the axes to begin at zero you could just use um instead of using extent you could use max d3.max and as the first value you could explicitly just pass in zero like this now the xaxis starts at zero very cool yeah thank you yeah that makes total sense nice yeah my pleasure and i love how you know d3 is is designed in such a way where it's like you can fit things together like lego blocks you know so it's you can just plug in whatever you want to for the domain but it provides utilities like this max and extent for the most common use cases which is you know deriving the domain from your data and for a bar for a scatter plot it makes sense to use extent but for other visualization types um like a bar chart it always makes sense to start at zero so you know if once we make bar charts we'll always start the domain at zero and then use d3.max and same thing if you're assigning areas to circles like the size of a circle based on some numbers i mean we'll get there in the future but i'm saying like there are very concrete use cases where it makes sense to start the domain at zero and then go from zero to the max of the data and that's how you would do it so yeah i think we're pretty much done here i kind of want to just um you know give this a onceover oh one thing i wanted to do was make the ticks the tick marks bigger because um in my opinion the default size is pretty pretty small and i want to give a f just a flavor of how you might customize some of the stuff on the axis which is a rabbit hole there's a lot of different things you could do there but the simplest thing you can do is just use css to say for all text elements which includes the tick marks we can set the font size to be i don't know 24 pixels and that works it's it's bigger but as a best practice i like to scope the changes because if there's you know if there's other text this will apply to all the text which may be what you want but with d3 axes in the dom there is actually a structure that we can leverage namely that each tick mark is is composed of a group element that has a class of tick and then within that group element there's a line element and there's a text element so we can select the text elements inside of the ticks by deleveraging the fact that this group element has a class of tick by saying dot tick space text what this what this does is it constructs a selector css selector that selects the tick elements and then the space signifies okay within within that look for children of that element that are of the type text so this is how you can set the font size of the tick elements and the labels are getting cut off so i'm just going to tweak the margin again i tweak the bottom margin to be say 50. maybe 40. yeah and um at this juncture i think the code is is done in a sense but now just to close this out i want to look through this code from the perspective of someone who wants to fork and modify this because that's what the assignment is to fork this and modify it to show some other data set and so you know in this direction what i want to look for is are all of the tweakable things in one place and all the generic stuff in some other place that's what i would aim for if if the goal is to create a reusable template so let's just look through and i'm going to make a comment here called tweakables and all this stuff should be data set specific so we got the csv url very much data set specific we got parsero very much data set specific x value y value very much tweakable and actually at this point let me just show you how easy it is to change the meaning of of one of these x or y instead of sepal length we can change it to c pull width and boom our scatter plot updates just like that and so when you load in another data set part of the process is just going to be trying out different values for the columns and see and see what pops out the margin very tweakable something you'd want to probably tweak a lot and the width and the height yeah this part is sort of something you might want to tweak like if you have some downstream code that where you want to position the svg inside something else so sure it's tweakable now this part is generic so i'm going to go through this and see is there anything that's specific to this data set in this code or not so far it looks pretty generic you know this cut this same exact code could run on any data set oh there's one thing that's tweakable the radius so i'll pull that out into a tweakable variable i'll put it along with x value y value and margin radius is 5. yeah that's an arbitrary thing that uh you might want to tweak but um i think that's about it that's all i see so that's how that's how you can polish up a a forkable dataviz template all right a great i feel like we've set out the original goal to have something that's just vanilla html javascript it doesn't use any bundler or anything it approximates the feel of es6 modules by destructuring the stuff out of the d3 global but it's it's totally vanilla so anyone could you know export this and use it all right i think that's it any um any questions or things you want to discuss um i have a question about the call function you used for axis sure let me just plug in my laptop there's the batteries running out yeah the question is about dot call i guess you could phrase the question as like what is that what is it really doing and it's it's really just a shorthand for invoking functions and there's a way that you could do this without using dot call let me show you what that looks like um let's let's look at for for axis left we could potentially pull that out like this into a variable and then pull out this group element as another variable so now we have i'll get rid of that dot call now we have the axis as a standalone thing and the group element as a standalone thing and we want to sort of inject that axis into that dom element and one way we could do it is y axis g dot call yaxis which is the same as it was before but now things are split into variables the other way to do it is like this yaxis yaxis g like that and it still works so what's going on here is when you invoke dot call on a selection it expects that you pass in a function and it will invoke that function passing in the selection on which you invoked.call so it's exactly the same as this yaxis is actually a function that expects to be called with a d3 selection of a group element as the input so these two are exactly the same behaviorwise um dot call is just it's just sort of a shorthand a convention it's convenient because you can chain stuff onto it you could say dot call that dot you know select um you know domain path or something and remove it as an example use case where you might want to use dot call and see that removes the domain line that path the which is that vertical thing and often i find myself wanting to remove the domain path because it's like i don't see much value that it provides but anyway yeah i hope that answers your question these two are equivalent dot call just invokes a function and passes the selection but i think i'll put it back to the way it was it's kind of confusing but it will work yeah yeah there's always a tradeoff there's always a tradeoff between writing concise code that might be a little cryptic versus verbose code that's like twice as long but it's easier to read yeah it's gonna try to strike a balance so it's the first argument to the uh yes the first argument of the first argument yeah maybe i should just keep all that around as a reference yeah just commenting will be nice so the you know it's like the argument of axis left function is the selection svg selection is that right yeah the argument that yaxis expects is a group element well rather it's a d3 selection of a group element that's empty and the yaxis function is going to be like okay you give me an empty group element i'm going to put an axis into it and if there's an axis already there i'm going to i'm going to you know update it to be to be accurate and it has to be group element it expects a group element yeah i mean you could conceivably pass in like the top level svg element but yeah i'd expect a group element but yeah it's a good question could you could you pass in something else i don't know um i've only ever seen it used with a group element oh i i broke it there we go so so yeah i mean it's it's good to study this um because it is a lot of stuff sort of wrapped into one so what it does here is says okay i'm constructing an instance of an axis and i'm passing in the y scale so the return value from this constructor is a function that we could call y axis if we wanted to that expects as input a d3 selection of a group element as its argument when it gets invoked and that's exactly what gets passed in when you when you use dot call and the dot call is is called on this group element that's been transformed but um yeah yeah that's how it all works it does take some time to to wrap your head around it um but oh in time i've come to prefer like this this sort of construct rather than making a bunch of variables but again it's just just personal preference either way works you know that another thing another while we're at it another way that you could potentially do this which might be even more confusing is that you can construct the axis and then pass in this selection here that works as well i i don't understand this to me it seems like uh could be because i'm more used to fighting but seems that you're pressing like the svg thing like a argument to the function that's left yeah it's not clear yeah that's right that's right so when you call axis left from d3 you give it the scale it returns an instance of a d3 axis but that instance of d3 axis is in fact a function that expects to be invoked with a single argument namely a d3 selection of a group element and so this statement here returns a function and that's why we can invoke that function like this so this part here we are invoking that function that gets returned from the axis left constructor and we're passing in a d3 selection of this group element because as soon as we call svg.append g it creates a brand new d3 selection of a brand new dom element which is a group element and then it calls dot attr on that group element and because it uses this method chaining api the return value from dot attr is the same as the return value from dot append g it's a d3 selection of the group element and so this whole expression here yields you know it returns a d3 selection of this group element and that's what gets passed into this axis left function okay when when you inspect the inspect the element uh the result is exactly the same right correct yeah all of these different um all of these different ways of of invoking the axes result in the exact same behavior they're just different ways of formulating it but yeah when you when you when you see it visually it's the same and yeah when you inspect the dom it's going to be exactly the same and from the perspective of the dom this thing here is the parent group element that we created with this code here svg.peng said the transform to be translate this is that group element here and then when we pass that into the d3 axis the axis implementation adds all this stuff as children to it so there's a path which is the domain line and then there's group elements for each and every tick and within each tick you have a line and a text element so yeah no matter how you invoke it it ends up to be the exact same dom structure it's quite confusing yeah it looks like you can pass axis function in the svg selection and vice versa well you can that's exactly what dot call does it sort of inverts everything you know i think probably the clearest one to read is this variant here where we don't even use dot call we construct a variable called yaxis which is that return value from axis left and then we construct a group element by appending a group element this is a d3 selection of a group element and you can see the relationship very clearly right here y axis is a function that expects as input a d3 selection of an empty group element and this is this is i guess shows the border between them very clearly but yeah i get it that it's totally confusing that you can invert the order of those in the code with dot call yeah it takes a while to wrap your head around okay let me ask you one thing it's not quite related i i think i got my my head around this it's regarding the the arrow function uh i don't need to use uh the return ever in the arrow function it's always the last line that's returned right there it's only one line so it doesn't make sense my question but if i have um an object and it has more than one line do i have to use return or not that's a good question yeah yeah let me show a variant of this one so with the arrow function if it immediately goes to an expression that could be an object literal could be a string could be a number it it sort of activates this thing called implicit return it's it implicitly adds or exec it implicitly executes a return statement or the equivalent of a return statement and that's sort of one of the magical features of these arrow functions however if you start the arrow function with a curly brace like this then it opens up into a function body where you need to explicitly return so you you could like you know run some code blah blah blah but then at the end of it if you just define an object like this it's not going to be returned you need to explicitly return it like this and so this function here is exactly equivalent to this function here but the one on the top uses that syntactic sugar of the implicit return that comes with arrow functions and that's by the way why it needs to be wrapped in these parentheses because the parentheses signify okay we are defining a literal object and and that's why it gets returned if you leave out these parentheses uh it's not valid javascript and it breaks so like if if we try to run that it's going to say it's not valid it's unexpected token because when the parser goes in it it interprets it okay like we're starting a function body now and then this is like garbage doesn't make any sense so yeah that's why you need those uh parentheses okay i i got this therefore a lot so it's good to know that this could be a reason nice the unexpected two columns yep yeah that's one of the most common areas you got a syntax error then you need to track it down figure out where it is um and by the way you know a lot of folks who have been maybe programming in javascript years ago you're used to this other syntax where it's like a function like this and this is like i like to call it the old school function notation this works too but the arrow function syntax is just it's a lot more concise and that's what folks would use probably nowadays all right very good a lot of fun we've explored some ins and outs of um of the details here and we've ended up with this forkable template oops hold on so i'd like to wrap up and leave you all with an exercise the exercise for this week is fork the scatter plot that we made and i'll share the link and change it around to visualize a different data set and i've provided this link here to uh this data repository that i have where i've just been accumulating over the years um various public data sets of interest and you don't have to necessarily derive any data from here you could just find you know do a search for data that's interesting to you and plug it in to the scatter plot and i've got this other video on youtube called preparing data for visualization and this walks through how you can create a gist and put a csv file in there and then once that's there you can follow the same steps that i did today to pull it into your code and visualize it and this is all there in the vishub forum so please submit your uh your work here looking forward to it okay thank you all right yeah my pleasure and uh thanks everyone for joining today it's a pleasure as always today i'd like to talk about reusable charts this has been a fascination of mine for years because every time you figure out how to make a certain visualization um it becomes sort of a telescope that you can point in different directions right at different data sets and encapsulating the reusable elements has always been somewhat of a challenge hey felipe how are you hey i'm fine thank you what about you good good good we got a full house today we got sriram nita adil and felipe this is amazing very cool so yeah today i'm going to talk about reusable charts and what i'm going to do today the idea is to take what we did last time refactor it a little bit start to use es6 modules and then adopt this reusable charts pattern which is sort of the the module pattern that is is commonly found with pure d3 implementations but first let me review the submissions from last week yeah we got some really good stuff this week uh here's philippe's work title to the dot um nice so there's little tool tips that you get when you hover um you want to talk about this a little bit well that's that's not much but this is just uh the title i didn't and knew how to use the invert function so i add p x and p y in the marks uh but what p x and v y is doing it's pretty much the invert function if you can scroll a little bit up yeah there you go right nice but maybe there is some kind of invert function that i could use in the text i i think andrea i guess let's talk about this in one lock post right this is just just to have the title and i i got this from your cheat uh oh yeah cheap tricks for interaction yeah nice let me just provide a little bit of feedback on this so this step here creating marks as a derivative you know array of data this is where all of the transformation can happen that you need in the visualization including logic like putting together strings see doing it this way it actually puts a bunch of intelligence into the rendering logic meaning this this string of the tooltip is derived in the rendering logic rather than in the preprocessing step so here's one thing that you could do is just move this logic out of here and use something like d.title instead and then you could just say the title of each mark is and then you can get rid of these intermediate values p x and p y so it's it's a very small change but this is more in the spirit of like then uh here do do i have to put d dot x v yeah okay no yeah a good catch yeah i just overlooked that yep because x value and d is visible here so this should still be working yep it's still there nice but yeah great work great work adding that that's something that we had talked about during the last uh you know last week session and i never added it but i'm great i'm happy to see that uh it was added here yes this was just after the class the last class and then my my exercises it's in the end of the posts okay it's a little tricky though because just to just so you realize um whenever this runs it's going to append another title every time that's not a problem here because it only runs once but just something to be aware of and yeah in the future we'll dig into the patterns that you need to to make it work properly but yeah nice work very nice let's see oh this one's beautiful this is awesome this is um well let's read what it says daily new cases of covet in italy from andrea this is awesome awesome nice yes xaxis uses scale time excellent and there's some interactivity here let's check it out toggle path whoa it turns the path on and off that's super nice oh my gosh beautiful let's take a look at the code real quick i see that there's different sizes in use as well ah so when the when the path is toggled it just changes the display attribute on the path brilliant very nice very nice yeah so it parses the date a pretty generic way of parsing the numbers and let's check out the rendering r nice so the radius here changes along with x and y beautiful way of doing it but i have to say that uh with radius here let me just fork this and suggest a tweak with radius um it's it's a good practice to have it so that the the area of the circle corresponds with the data values so one filled in pixel would correspond with one you know um unit of of the data and this method here doesn't accomplish that because it uses a linear scale but the area is a function of the square root so we can change this to scale square root sqrt which we can also get from d3 like that and then it really the range really should start at zero and the domain really should go from zero to the max of the data and yeah max we need to import from d3 so yeah now now that the domain starts at zero and the range starts at zero and we're using a square root scale now the area of the circles is actually proportionate to the value you see as it goes down it's gets down to nothing which is what you'd expect and the higher values are are you know bigger circles and i think well actually what is the what is the radius value terrapia intensiva nice yeah i don't know what it means but this is beautiful work beautiful work let's see what else we've got it means intensive treatment ah intensive treatment yeah interesting so the number of cases yeah it's it's an interesting uh pattern here i'm not quite sure how to what to make of it but as the case numbers were going up it was not that number was not that high but later on that number was higher oh someone's joining hello all right we got someone new hello uh how do you say mex maximiliano you want to introduce yourself a little bit um hello kuran how are you good good how are you yes i'm i'm max you can call me max it's okay um i'm from chile an interest i haven't been able to to see the course uh like it's online last the same day so yeah i i managed to do it today so it's great to be nice welcome welcome i'm glad you could join us so yeah we got a full house today a bunch of people sri ram adil anita and felipe is here so yeah as i dig in feel free to interrupt me and ask questions to clarify as we go awesome thanks awesome so yeah this week there was just a lot of activity in this forum like a lot of back and forth and i'm really happy to see that uh oh here's here's something that adil made dinosaur d3 scatter plot wow ideally you want to just talk briefly about this one uh sure yeah this was um based on a data set from the natural history museum in london they have about 300 plus dinosaurs in that data set and i just wanted to try uh playing with it a bit using this and so i uh thought try plotting the length of the dinosaur uh on the x on the x axis with the weight of the dinosaur on the y axis and i then also stole the the tip from felipe and yourself about implementing these little uh tooltips um and yeah so it was just really uh just just uh getting familiar with the data set and um it's a it's a bit patchy and the the data so i had to do a bit of extra processing because not all of the dinosaurs had a weight um and so from 300 plus dinosaurs i could only get about 49 i think which had both length and weight and then i uh yeah just just uh just try to create a label um early on that combined some interesting uh bits about each dinosaur nice that's beautiful beautiful stuff the uh the one in the corner i thought might have been a typo uh far corner but it turns out it's actually uh um the biggest land animal that's ever been discovered wow that's incredible 70 000 kilograms argentinosaurus 35 meters 70 000 kilograms you got to be kidding me yeah i looked on wikipedia apparently 70 000 was kind of average for that dinosaur yeah not that it's just sort of average wow um one really small thing that i would suggest um so when you have numbers like 70 000 i don't think we've touched upon number formatters but it's a really quick change that i would like to just do right now just to show how it could be done so the idea is to oh it looks like you used it here um i think that was already built into your fork i think i see oh maybe the axis does it automatically format but if you so one like the first thing i noticed was in the tool tip 70 000 kg um ideally would have a comma after the 70 and we can add it pretty easily by importing format from d3 and then making something called uh i'll call it comma format and we can just call format with a comma and format accepts this you know very specific string that you can do all sorts of things with but a very simple version of it is just to specify to to add a comma separator and then in your code that generates the label we can just pass that through that function like so so whatever the v the y value is we format it with a comma and voila there it is 70 comma thousand it's very nice oh that's that's really nice yeah thank you yeah nice great work very fascinating data set and i think that's it if you can just go a little bit up uh previous to this one yeah this one um oh yeah sorry yeah just just it's a little bit different uh it's it's the same data set but i use colors oh wow the name of the the class but um my goal here was to have all the information that we had in the data set of the flowers uh here so i put also the a few miles over the color means that the specimen yep right the species very nice the species yep and the elliptical radius is the sepal but that's my question because if i change the the order of the data the petal and the sepal the radius becomes very small so it almost vanished so how can i like normalize the radios right yeah that's a good question i mean let me dig in a little bit it it depends on how you use the scales like which scales you use for the radius so oh you had a question how can i easily change shapes according to the data um yeah this this questions like because i didn't want to use ellipses in the beginning right i thought okay i can use different marks but then i said okay i don't know how to do this so i will just use ellipses and then i can use the the radio different radius different right right i mean it's um you it's it's creative to use an ellipse that has you know different width and height for the different values here but it may be a bit hard to read and so you know maybe maybe the best we could do is just show three variables i mean color is color color is a great choice for the species because it represents a you know a column that has three distinct values a quantity yeah qualitative uh categorical attribute but when it comes to the radius um i would say again it might make sense to use circles and then set the radius using a square root scale so i'm going to set r to be r of r value of d is the way i would set it up and then r again could be a square root scale and then the domain can go from 0 to the max of r value and then the range would go from 0 to max radius and i think there's a lot of things that we don't have defined i can pull in this and this from d3 and then our value okay you've got our x value in our y value it may be sort of too tricky to show both of those at the same time and so we can just pick one of these and oh let's use this as max radius i'll set it to be i don't know 15. that should work maybe i missed something oh yeah data the max over the data of the r value yeah and so because the the data values are like they don't even get close to zero they're in centimeters and so it works pretty well with um with a square root scale to set the radius like this and we can set the max radius to maybe 10 so we don't get so much overlap but now radius is showing the the variability in sepal length and it doesn't it doesn't vary that much actually but yeah this is how i would suggest to do it is to use the square root scale where the domain and range both start at zero yeah i i see but um if i if i have a kind of data that i won't like uh make a normalization of of the range of the data how how can i do it how do you mean well i'm not sure what you mean um i mean imagine that i have a range of data but i want to restrict it from zero to one and have the average um i'm not quite understanding so let's take for example this data set yeah if you if you see like a petal with it's it's has 0.2 if i if i use this it's too small so i want to make it from a range from let's say one two two uh the size of the the radius then it would be a linear scale right yeah i mean you could do that that's totally you know something doable so i'm just going to comment out this one and put this other one back where like you said we we could make it so that the lowest value corresponds with some like min radius and the max value corresponds with some max radius and we could define min radius to be like i don't know five and this would work it would make it so that you have like it would make it so that it's guaranteed that the smallest circle has a radius of 5 and the biggest circle has a radius of max radius which is 10. so this is how you would do that i think this is what you were asking about yes yes that's that's right for for this case it doesn't make sense but it's just something that i was thinking about yeah i mean technically it's possible and and you could use a sk a linear scale and do it like this however the main problem with doing it this way is that the area of the circle does not correspond to the data values which could be problematic um it's it's not easy to read this in a sense i said that it's not it's not like um i don't know what the word what the best word is like like it's it's almost like not really honestly yes misleading yeah exactly exactly it can be misleading uh because you know you could pick up a min radius of one and it would make some of the dots really tiny but it would you know it's it doesn't really express the true uh like variability within that particular value of the data and so you know this is an area of debate within the community of people who make visualizations some people are very lacks on how they use radius and so you know it could be a linear scale it could be a square root scale could be a log scale you know whatever it takes to make a pretty picture but i i my sort of philosophy is on the opposite end of the spectrum where like i firmly believe that if you use size to encode some value from the data then you should make it so that the area of the circle corresponds exactly with the values from the data so if the value in the data is zero it should be a zero size circle that you can't even see you know and uh but that's sort of an edge case i've seen people use one as the min value so that you could at least see something on the screen but besides that you know i i would pretty pretty firmly stick to that philosophy that if you do use radius then the best thing to do is to use a square root scale because the area of a circle varies with the square root of the radius um what's that uh what's that that formula yeah area is pi r squared so this is this is why it makes sense to use a square root scale and so the radius of a circle um is calculated with respect to that same formula so that's why if you if you want to make it so that the area of the circle corresponds with the values from the data then you have to use a square root scale and make sure that the domain and the range both start at zero and so the domain could go from zero to the max value oh whoops i'm editing why my mistake yeah so it would be this version here of setting up the scale oh whoops that has to be defined above so it would be this version here and you know sometimes it doesn't turn out the way you expect yeah in this case it doesn't doesn't mean anything right yes exactly exactly and so this is you know part of the process of making data visualizations is just trying different things and seeing what works you know spreading the value across the screen from left to right between the min and the max like you know the xaxis or the yaxis of a scatter plot that's hugely effective at looking at you know things that fall in in like a small range but there's a lot of variability within that small range but radius isn't is not good for that sort of thing you know the because these values i mean look they value they vary between like i don't know two and four or something and so it's not really that great of a variation so it doesn't really it doesn't really pop out when you use radius but it's worth a try for sure all right cool cool so um yeah great work everybody very nice all right let's dig into this um idea of a reusable chart we will build a reusable chart based on the scatter plot we made last time on the way i'm going to refactor the code into modules and then the whole point of this reusable chart thing is to strictly decouple the specific and the generic meaning the stuff that's specific to the data set and the visualization that we're making and then the generic stuff that you know implements reusable logic for a specific type of visualization and we're going to use this tried and true pattern from mike bostock in 2012 can you imagine towards reusable charts is what it's called and i'm going to make it dynamically update it's going to dynamically change x and y and i want to talk a little bit about why i'm doing this today from the structure of the course perspective i i want to go in this direction so that we have a very solid basis for starting on different visualization types so rather than go wide in the beginning like we only made one visualization type so far a scatter plot so rather than you know making a bar chart and a line chart from there what i want to do is make a reusable chart version of the scatter plot and then use that as a basis for future episodes where we branch out into all sorts of different visualization types that way by the end of the course we'll have like a library of reusable chart components that are sort of usable off the shelf and we'll be working within this this pattern which is very useful to know and it's one of the trickiest aspects of d3 so let's dig in i'm going to start by forking this scatter plot that we made last time and i'll call it reusable d3 scatter plot right now it's just um this index.html single file sort of thing before we do anything i want to change some stuff around so that it it reflects like the structure of a javascript project that you might see so i'll split out this the styles into a separate file oh someone is joining hello hello someone has joined us uh larry how are you you wanna hi nice you wanna introduce yourself a little bit uh yeah uh my name is uh larry rancho i'm from the philippines nice i work with uh with the university as a faculty and i also work as a developer for data visualization for a company in australia so yeah i've been using your resources since i started working with d3 thank you so much i really appreciate that oh fantastic fantastic well i'm happy you could join um i think this is the most people that have ever been on the live call and this is great so we'll see how it goes um all right thank you welcome welcome okay so the first thing i'm going to do is split out the css into a different file um just because i personally prefer to have a bunch of small welldefined files that that way you know the complexity can scale over time so i'll call it styles.css and i'll take this css and move it into that file and then get rid of that style tag and then we can use a link tag and i can never remember the syntax so i'm just going to google it um yeah the html link tag there we go link rel equals stylesheet which is i guess the type of thing it is and it points to styles.css there we go i'm also going to create a package.json and this is going to have inside of it dependencies d3 at a specific version which i'm going to find from on package i'm just trying to figure out what's the latest version of d3 okay it's 6.7.0 so that's what i'll put there that way um we can get rid of this script tag here and then i'm going to put all of this javascript into a separate file called index.js and the way that vishub is set up it automatically loads in that file and it also automatically loads in our dependencies which includes d3 this is how most modernday javascript build systems work so like it mirrors the experience of webpack or rollup locally so now we're at sort of a a comfortable starting point where we can start to refactor this stuff at this point i would like to introduce the concept of towards reusable charts this is a great great piece from mikebossdog the author of d3 from 2012 and it's one of those unique things that has actually stood the test of time so rather than trying to invent my own pattern which i did for the 2018 version of this course and rather than use a library that has components built in like react does which i used for last year's version of the course this time i want to use the pure d3 way of making socalled components once you make a component with this pattern you can easily wrap it with whatever other framework you're using like vue or react or angular or whatever but this is a way of making components that is just purely dependent on d3 and nothing else so here's how it works it's going to be a function so as i go through i'm going to implement these ideas so i'll make a new file called scatterplot dot js this will be our scatterplot component i'll start by saying export const scatter plot equals a function and it's going to be used in much the same way as a d3 axis this towards reusable charts pattern is actually used or a variant of it you know is used within d3 itself where you have a constructor for something and then you have these chainable methods that you can add onto it so let's keep reading in this towards reusable charts one way of configuring the thing would be to pass arguments but um you know he mike boss dog here goes through the various ways of of configuring something and the pros and cons of each you know it's cumbersome for the caller to remember for example the order of arguments so maybe make it a config object but that's also cumbersome for the caller because the calling code must then manage both the chart function and the configuration object over time so rather than do it like that we can use this method chaining pattern that looks something like this you create the instance of the chart and then you call for example dot width passing in the width that that then returns the instance of the chart and then you can call dot height to set the height and that state of width and height is stored inside of that instance of the chart so let's work toward this in our code um in this scatterblock component we can have a thing that i'm going to call my which is going to be the instance of the chart and this name pays homage to the original article which also uses my so in this chart constructor it returns a function called my this is going to be a function and this is what will be returned from this constructor so let's create some of these accessors or getter setters this here is a kind of verbose way of of doing it but let me just walk through what this means my is a function and in javascript functions can have properties so we can set my.width to be this function that accepts as input a value which will be the new width or not and if it's if it's invoked with no arguments that's what this is checking here arguments.length so if there are no arguments then the function acts as a getter it returns the width which is stored in this variable here otherwise it sets width to be the passed in value and crucially it returns my this this returning of my is what enables method chaining to happen and height is just the same pattern but this is kind of verbose and when i do this sort of thing i like to look at the source code of d3 axis as a reference because it has much the same pattern to it but the implementation is is pretty um pretty concise and this is part of d3 itself so i think it's a good reference to use it's a it's a much smaller way of implementing these getter setter functions and since we'll have a bunch of these i would prefer this one the way it works is you know it it uses underscore for the name of the thing that gets passed in and it says okay return if there is an argument set the value of the thing internally comma axis an axis in our case is going to be my and this is a weird little javascript expression that you can do you can actually have an expression that is just two things separated by a comma and it implicitly returns the second thing and so in this case axis gets returned to enable the method chaining but if there if there's no argument then it just returns uh offset this internal variable here so i'm just gonna copy this template and use it over here and adapt it to to our code here so instead of axis it's going to be my instead of offset i'm going to start with width and height because width and height does need to be configured so my dot width equals a function where if a value is specified it just sets that value to be width right here and it returns my otherwise it will just return with but width is not defined in this scope yet so i need to say let with like this and we can't use const because we reassign to width here so that's why this needs to be let and this is the general pattern of these chainable getter setter functions now i i realized this might have been a lot are there any questions so far yeah the the plus that came before the underscore um was that to ensure that it was a number because i think that worked that this came up in the previous lesson exactly yep that's exactly what it is so in in d3 axis i think it was the offset which is expected to be a number and so yeah if you pass in a string like 50 you know it gets to be that value but if you if you preface it with this unary plus operator it parses the string into a number and so that um we actually could add it there this is this is called um defensive programming where you sort of expect the worst case you know you expect people might abuse the api and pass in a string where they're really supposed to pass in a number so that's why the plus is there it's just to guarantee that before it gets to this variable inside that it's the right type of thing um so hey why not let's let's leave it there it'll make our api more robust so we could pass in a string if you you know if we accidentally had a string that's our width and everything would work out just fine yeah and the um the my after the comma that that is i don't think i've seen that before um yeah yeah this one threw me for a loop the first time i saw it too let me unpack it a little bit yeah i'm glad you're asking because it's a lot to process so in javascript there is this um this construct that's not very widely used which is just parentheses and stuff separated by commas and when you execute that it returns the last thing um and those things in the middle could potentially have side effects so let's say let x equals zero we can have something like x equals five comma as a a piece of javascript and like it's yeah it's cryptic it's kind of weird but to understand what it does it just you know it just executes this and it returns the last thing and so this is a miniature version of what's happening in the code here it says width equals this thing and so now if we inspect the value of x it it's actually five because it was assigned here and this you know in all likelihood this violates some kind of like you know if you were to use eslint this might not pass eslint because it's too it's cryptic um but this is what mike bostock uses in d3 axis so it's good enough for me that's sort of how i look at it and i think these these parentheses inside may have been added by prettier if i run prettier it adds those parentheses i guess just for clarity um but yeah that's what's going on here if you just have parentheses with commas it executes all of those things and it returns the last entry in the list yep that makes sense thank you yeah um and another another thing that may not be obvious is that we can't use the arrow function here because with with the arrow function arguments is not defined um check this out if we make an arrow function that just logs out arguments arguments is a special keyword in javascript if we execute f we get arguments is not defined that's one of those little changes that was introduced with the fat arrow function but instead if we say f equals function you know the long form where we write out function then we can access arguments and it gets undefined but if we pass in like one two three as the arguments that's what arguments resolves to the is the arguments that you pass into the function so um we could you know instead check like is the value defined but then that would like break in the case of zero you know which so as a general reusable pattern for these getter setter things um this is the safest way to check if there were any arguments passed in or not and that's why we use this keyword function so so that we get arguments defined inside of here all right so we can move on and and we could do the same thing for height we can set height and return height and define height up here and now we can begin to move our visualization logic into this component here the way it's going to look is in our main we're going to load in the data and then all this logic is going to be go inside of this scatter plot function which we're calling my right here so i'm just going to paste it it's not going to work and this is how we can invoke this component we can say well first of all we need to import it import scatter plot from dot slash scatter plot and now we can use it in much the same way as we use a d3 axis we can say scatter plot dot width is width which we have here as our you know window.inner width and same thing for dot height we can call dot height which invokes our setter and we can pass in the local variable here height and then we can call this with our svg element and that's another aspect of this towards reusable charts pattern is that it accepts as input a d3 selection and it's going to put stuff inside of that selection so um similarly to axes like d3 axis it expects a d3 selection of a group element and then it puts the axis stuff inside of there our scatter plot can do the same you know it could accept maybe a whole svg element or or an svg group element either way could work and this is how you would invoke it you know pass in the selection to the chart which is equivalent to saying selection dot call my chart and we got into this last time with the axes and so the way that i would love to see it is svg.call scatterplot width and height like this so this is the the overall pattern i'm just going to keep going until it works another point of contention with this pattern is how to deal with the data i think we should deal with the data as just another thing that we can set you know so let's set dot data we pass in the data and then in our scatter plot implementation we can have another one of these local variables called data and then we can have another one of these accessors for data and in this case we we must not have this little plus because uh it's expected to be an array not not a string that's going to be coerced into a number so i'm going to get rid of that it's just going to set data internally to whatever was passed in here and it's it's going to remain broken for a while so i'm just going to keep going like this adding the things that we need for example x value y value margin and radius these are all you know configurable things so let's go ahead and add add these as as configurable things on our plot the way it would look to invoke this stuff is that we could say dot x value and pass in this function dot y value and pass in this function dot margin and pass in this margin and then dot radius passing in 5 like that and then when we use prettier it all formats nicely and this is what it looks like to configure our scatter plot now we need to go and implement all of those as you know local variables with getter setters so we've got what was it x value y value margin radius and then i'm just going to copy the same template four times change data to x value which is going to be a function change data to y value which is also going to be a function change data to margin which will be an object and then change data to radius which will be a number so we can actually bring back that little plus to be defensive about how we implement this okay now we have getter setters for x value y value margin and radius when i see the the more verbose version of that function um the one that you showed before a the function evaluates the absence of argument when with an exclamation mark right in this more concise version how is the absence of length is being evaluated in this in this version oh i see what you're asking yeah yeah let me explain it's it's a um oh there's all our errors it's a behavior of javascript where so let's say let's um bool equals true bool is going to be some boolean value and so if we have something like bull question mark yes or no it evaluates to yes if bool is false it evaluates to no and here's the tricky bit in javascript there's this notion of truthy things are truthy or falsey you know when they're coerced to booleans strings for example numbers when you pass them in when you treat them like booleans they're they're coerced to be truthy or falsy and so the way that that plays out in the case of arguments.length arguments.length is going to be a number because arguments is an array and so if arguments.length is 0 then the value of 0 will be put into this ternary operator and it turns out that 0 is falsy in javascript so that's why it would evaluate to no but if the length of arguments is let's say 1 that evaluates to something that is truthy in javascript it's kind of true it's it's like true if it's treated as a boolean and so that would evaluate to yes so that's why arguments.length works in this case like it does great okay it makes sense thanks nice nice happy to hear it and this is so great i'm so glad that that you're asking these questions because sometimes i don't know what to stop and explain and what what not to you know so thanks for your question all right let's keep going here um looking at this file it seems like everything is right we're pulling in the data we're defining our svg um one thing that we're not doing yet is in our scatter plot this function here needs to take as input a selection i can call it svg but honestly i would rather not because it could be an svg it could be a group element and so i'm just going to replace svg with selection so i just replaced all instances of svg with selection and now it should work we might be missing some imports yeah that that's one thing that's outstanding um oh i never changed this around to use the es6 import syntax this is something i should have done as soon as i moved it to index.js so we can import all this stuff that we need from d3 and in scatter plot dot js we're going to need scale linear extent axis left and axis bottom but not csv and not select and in index.js i don't think we're going to need any of that other stuff so we could just use csv and select over there so let's see is it working um oh we get a nice error unexpected token okay there's an unexpected token somewhere in index.js line 46. it's missing the column in line 45. um in line 40 no no you're chaining no you cannot have that it almost feels like it has like a like an older version of my file ah scale yeah it was some some sort of glitch now it says scale linear is not defined okay fair enough scale linear we should be getting that from d3 that's odd let me try console.log scale linear to see if it is even like loading to that point it is it's there so now what what what it's working the total um total 20 magic yeah total twilight zone moment with errors that resolve themselves yeah like magic all right sweet we've done it it works this is amazing so yeah just just to quickly review everything index.js has all the logic that we had from earlier where it loads in the data it sets up the svg but now our main function is a lot more concise it just invokes our scatter plot and configures it with all this stuff and here's something that's kind of mindblowing you can take this expression and and we can skip that local variable we could just pass that straight into data like that that works too yeah to me that's a mindblowing thing because a weight it's like this asynchronous control flow and it it has to like wait until that's done before it invokes this whole thing but that's the magic of um async await right there and i kind of prefer it like this it's it's more uniform all the configuration happens right here awesome awesome um yeah and in our scatter plot we have a bunch of local variables in this closure um a closure is this the scope of the variables inside of this function so when you invoke the scatter plot constructor it creates this closure and that's where these variables live and we use let here not const because they can change over time and then we've got this my function that gets invoked with a selection and this is where it sets up all the scales and does all the you know transformations right here and it references these variables that are defined above and it resolves to the things that we passed in to these these getter setter functions and we just use them as setters not getters and yeah all the logic is the same as same as it was before for the scatter plot and it works so with this template and one would be able to change the data set and the and the name of the variable the new variables if you change the data set and it will update like automatically now exactly yes that's right and and the key thing is that nothing at all inside scatterplot.js will need to change nothing at all if you change the data set that's what i meant earlier by separating the specific from the generic like this is a totally generic scatter plot implementation if you were to change the data set the only file you would need to change is index.js you can change the csv url change how the rows are parsed and change the configuration of the plot and all that yeah this is like the whole point of this reusable pattern is that all of this configuration happens outside of that reusable component so yeah you can just tweak it right here if you want it to be um you know pedal width you could just change it right here and boom it updates if if i want you to have like the specie as a different marker as a classification marker how could i add this to this code that's a great question and let me just clarify what you mean by marker i think you might mean like a different shape like these yep yes that's right that's right yeah you know this would be um this would be a great thing to try to do as an exercise this week and and i can outline how to do it i don't think we have time today to actually do it but i can outline yeah but but should i use like a case switch uh inside and where in the logic this uh switch case uh how algorithm would be or should i use something completely different well let me walk through how how you would how you might do it um the switch case meaning the logic that determines which shape it is is that what you mean yes yes so d3 dot symbol does that um with symbol.type yeah yeah this would be actually a great thing to work through but what you would do is create an instance of d3 symbol and then set up an ordinal scale that maps the the three values for the species to these symbols you know maybe three particular symbols and yeah it's exposed as like symbol circle symbol cross symbol diamond so it would be something like you know create an ordinal scale and then set the range to be d3 symbol circle d3 symbol cross d3 symbol diamond and that scale you can pass in a value from the species column and it will give you back out one of these one of these symbol types and then in the rendering logic of the scatter plot instead of rendering circles these would be paths and then when you set the the d attribute of the path you would want to change the type of the symbol and then invoke the symbol and that's how you could make a scatter plot with different shapes i don't know i kind of want to just go ahead and do it right now what do you think should i yes do it do it do it right yeah let's do it let's do it why not i'm gonna keep this as it is because it's nice and clean but i'm gonna fork this and say reusable d3 scatter plot with cymbals oh i love this it's gonna be so much fun okay now we need to import uh these things oh actually symbols check it out symbols is an array containing the set of builtin symbol types so we could just use that okay so i'm going to import symbols from d3 and then i'm going to build out something very similar to x and y i'm going to call it um symbol i guess symbol value and then i'll set up another one of these accessors for symbol value it's going to be a function and then in index.js this is where we would want to say okay our symbol value is the species i think it's d dot species um let's take a look yes yes it is it is nice yeah species nice okay so this is how we would invoke it and configure it now let's implement the rendering so instead of circles these would be paths select all path and instead of cx and cy oh yeah we would still need to position these oh how would we do that you know what we would want to do is um probably use group l yeah okay okay it's getting a little tricky here but let's just get a bunch of different shapes to show up and then we can um we can worry about positioning them looking for the okay there's a constructor so let's import symbol from d3 and then we're gonna need a symbol scale i'm gonna call it symbol scale because symbol the word the the name symbol is already taken because it's imported and this will be an ordinal scale we need to import that as well from d3 and the range this is the key thing the range is going to be symbols and the domain you know we don't actually need to set the domain uh because it sort of fills in automatically but just for completeness sake we could say data.map symbol value and that will just get all of the different species values and that will contain duplicates but that's okay because when you pass an array with duplicates to scale ordinal dot domain it automatically you know deduplicates it so we can just say just to inspect how that ended up symbol scale.domain let's just console.log that it should just give us those three values oh there's some problem oh i forgot a comma there we go see so that's correct satoshi versus color virginica and then if we take a look at the range it's a bunch of these d3 symbol implementations which are actually objects that have a draw function but we don't really strictly need to know what that is okay now we need to create a symbol generator simple generator is new symbol using the constructor from d3 and let me see um size defaults to 64. that should be fine i mean we could we could use it to change the size but let's just use the default for now see how it turns out and this is the thing we can say symbol dot type so this is what we need to do we need to make these paths and we don't need cy cx or r but we need d which is this domain specific language for svg paths that's what the symbol generator will output so we can call symbol generator so this will be a function that takes as input d and then we can call simple generator of symbol value of d those these are different right the the string one and the the other one they don't mean the same thing right they are totally distinct and different yeah it's confusing that they have the same name um d is the attribute of an svg path which has a very specific meaning so if you look at the documentation for svg paths it expects a d attribute that is going to be a string that is a it's an expression in a domain specific language that defines svg paths okay so yeah so this d is the attribute d and this d is it's called it's just one of the rows okay not a column but a row in it's it's an element in the data array or rather the marks array and you know oh my gosh i i sort of forgot that we have this transformation step so this is actually where we can compute d which makes it even more confusing in a way because we d dot d um but this is where it makes sense to pass in yeah to do the transformation to the marks to for clarity i'm going to call it path path d because it's there's too many d's okay and this should work i think but looks like broken let's see what's going on cannot access symbol generator before initialization okay yeah that makes sense i have to move it to be before we compute the marks okay i think it's sort of working see that we have some stuff in the but it's in the corner that's the problem and they're pretty tiny they're pretty tiny so i kind of want to make it bigger but the the main problem is they're all in one place they're all in the corner and i wonder can we have a transform if you just uh set attribute x and y it does not work i don't believe x and y works on paths i mean we can try it that would be ideal if it did but it doesn't okay we may be able to specify a transform on the path so we can translate by d dot x and d dot y but i don't know if that's going to work oh sorry i forgot to make it a function of d oh well look at that it's sort of worked but but they're all circles they're all circles that's indicative of a problem yeah yeah i forgot to um i forgot to set the type so here's what we need to do this is not right we need to we need to call simple generator dot type and then invoke it this is what we need to do uh looks like there's some problem maybe that's not quite right why this empty parenthesis in the end yeah i think we need to invoke it or you know maybe i should consult the documentation assemble that type yeah but it seems that you're invoking two times there again see this is what i want to do i want to i want to create an instance of d3 symbol we'll call it simple generator and then for each mark i want to say symbol generator dot type is oh oh i forgot to pass it through the scale that's so silly so symbol scale of symbol value of d okay so symbol value of d will give us the species value we need to pass that through the scale symbol scale in order to get at the particular symbol and remember symbol scale it just maps the the symbol the species to the various symbols that we imported from d3 so we need to call simplegenerator.type to set the type and then these empty parentheses on the end are to invoke the symbol generator as a function to generate this path string so now we can see that it's actually giving us different types of shapes yeah it's kind of tricky business it is but i think what we need to do to move these around um oh wait a minute it should be missing the clothes like this that's what it needs to be there we go there we go so it's translating by x and y correctly now yeah this is what you were trying to do isn't it yes very cool amazing amazing great great yeah that only take like 10 minutes amazing okay now i can make a scatter plot kuhn's face yeah you totally could yeah yeah you could even put different people's faces yeah yeah nice wow pretty satisfying um one thing that's just not quite linked up yet i just want to wrap this up nicely radius is here but it's not being used so what i want to do is use it so that we can configure the size of the symbols but radius doesn't make sense we can use size instead and the default was 164. so let me say size is 50 and then in in our scatter plot i'm just going to do a search and replace across the whole thing replacing radius with how do you do a search and replace in views oh i'm using i'm using vim mode and then once you enter vim mode you can use the vim command for the search and replace which is this okay so the the percent means global search and replace um s means search i guess it's it's one of those sort of obscure vim things um it works with uh some other command line tools too in linux but yeah this is how you trigger it you you hit colon to enter this little space which is you know derived from vim the editor and then radius is the thing you find size is the thing it gets replaced with g means global means um it means to replace every instance on a line and so this is just sort of the the incantation to make it happen so once i run that we have size and once we have size defined here then what we can do is we can pass it into our simple generator dot size size like that and it it could we could make it vary for each mark but for now i'm just going to make it all the same size and just to confirm that it's working i'm going to change the size here to like 500 okay and it gets bigger and yeah size it's the behavior of size with d3 symbols can be a little counterintuitive because it actually was really well thought out so that the area of each of the symbols is the same i'm pretty sure um and and when you change the size you're actually changing the area so it's not a linear scale in at play here it's it's more like a square root scale internally so if i change it to like a thousand that means there's going to be a thousand black pixels for each shape but if i change it to a hundred that means there's going to be a hundred filled in black pixels for each shape and while i'm talking about symbols i would be remiss to not show this really nice piece um oh that's not the one hang on hang on mike bostock has this really nice thing that illustrates that they're all the same area it'll be worth the wait there it is yeah this is a really nice little piece by mike bostock that he developed um looks like in 2017 i think when he was working on building out d3 shape and so notice here how the radius of each of these circles is different but it says here each of these shapes has a configurable area here 2 500 square pixels and so this is the this is the like deep thought that that you get for free when you use d3 symbol it turns out that each of these shapes has exactly the same number of filled in pixels and that's what gets configured when you call dot size all right well that's how we do it that's how we make a scatter plot with symbols within the confines of this reusable chart pattern and this is just playing out so well i mean i would much prefer to do things this way to have a reusable chart pattern in place and then branch out to all sorts of different visualization types rather than you know get it basically working in one huge file and fork that a a bunch of times so yeah thanks thanks everyone for for you know sticking with me through this refactoring effort and i hope it was useful thanks quran it was really insightful all this class nice happy to hear it happy to hear it i'd like to leave you all with some exercise options fork and modify what we made and maybe add axis labels one of the things that it's missing is the labels the text labels on the axes and i think we have now enough knowledge of d3 to be able to do that another option would be you know fork this scatter plot and change the data set to get that experience of just changing the index file and leaving leaving the scatter plot implementation as it is as a generic thing or fork this and change the chart type i mean you would probably need to change the data set too in order to do that but that would be a great exercise if you could fork this and maybe change it to be a line chart component or an area chart or a bar chart uh we're going to be doing that in subsequent episodes but if you you know feel inspired by all means take stab at it now um and if if you can't get it done you know at least take a stab at it share your work and maybe maybe you could use that as a jumping off point for a future episode so all of this is in the forum the viz hub forum i made one for episode nine uh where did it go i may have lost it or something but i'm going to make one now for episode nine uh so you can post there welcome everyone to episode 10 of get it right in black and white dynamic charts so first i'd like to start with some introductions um we have some we have a new person today welcome maxine uh you want to introduce yourself briefly yeah so i'm maxine or max and i worked a bit on um viz hub with curran and that was really fun because i think it's a great product and now i'm a data visualization engineer for mural and in my free time i just try to learn as much as i can about d3 nice i love mural by the way i've started using it it's a really neat tool and ideal is here hey adil hi karen hi maxine all right so let's start by reviewing the submissions from last time we go reusable charts so here's one from felipe hilarious um i think it's it's like the data of how many viz hub users there are but with my face in there so nice work felipe um yeah very cool very cool i want to take a just quick look at the code it's still the same scatter plot like template with the you know the methods and everything and it's just been modified internally to show these svg paths pretty cool all right what else have we got something from ej dasbach this is pretty neat i was actually pretty impressed with this one it's a nice actual visualization of covet 19 deaths over time and uh yeah great work adding the title adding the labels for the axes vaccination at 30 that's like some additional information pretty cool and great job linking to the source too in the viz itself very cool very cool and this easily could be converted to a line chart just by modifying some of the internals i think a line chart might make more sense for this particular data although it's kind of cool with the dots because you can see the gaps yeah good stuff all right yeah there was some confusion about last week i had to cancel but um all right i think that's it that's all there is so all right great to see some participation yeah before i dig into stuff for today i'm just wondering are there any questions from last week's content adil or maxine uh that was unclear not from my end i thought it was pretty clear nice yeah it was it was really very clear um i think returning the method chaining in particular was quite um it was it was just yeah really eyeopening really oh great i'm glad to hear it yeah yeah that the pattern still blows my mind because it's just javascript essentially but you can make these components and you're not tied to any particular framework like react or view or anything i was wondering when um doing the core dot call and all the method chaining that follows whether there is a uh whether there's a convention uh at all or um a preferred i guess it's a personal approach but um when uh when when doing this uh svg.call scatter plot um then all the methods that uh follow um are they is it recommended to do them in any particular order for example to do the data manipulation first followed by the dom anything that touches the dom or is it um is that is i just just it's up to the uh personal preference um yeah that's a great question does the order matter is there any particular patterns no i would say no it's it's like lego blocks you know you can assemble these things in any way that you want and as long as their relationships are correct between like the inputs and the outputs and um the order of like the the dependencies uh is correct like first you need to set up the svg then you need to call it but beyond that um no it doesn't really matter it's totally personal preference you know which order you call these things um and even i've seen it quite often where you you construct the the element like right here instead of even having a variable and like that works too it's totally personal preference yeah stylistic yeah that makes sense thank you all right we've got another guest um um hello there you want to um here let me just pull up the introduction slide are you here yes i'm here eric dosbach here can you hear me yes i can hear you great to meet you yeah nice to meet you um finally got this down figuring out between um youtube and um google meetup so yeah yeah it's kind of a kind of a quirky setup but it works yep so just a little about myself uh data scientists outside philadelphia trying to upskill uh my data visualization so i uh filed the first nine and uh now uh looking forward to participating live amazing amazing welcome and i i think i just um presented your work but yep but i would like to welcome you to present it yourself here we go let me find it sure here it is yep yeah so a little bit yeah so thank you yeah so the um so appreciate the opportunity the uh part of what i do and so i work in healthcare and and part of what i do is visualizations of these sorts of dynamics and so forth and so i really enjoyed the notion that we had a reusable scatter plot and i think the assignment was to switch out to another data set one and then to start adding axes and so forth and you know i found that framework uh really useful from which to do it i think probably one of the most challenging things i found was just the date scale and figuring that out and just you know trying to get that to line up right and i still haven't figured out how to manipulate uh the months and years and so forth quite right but um because bizhub is so nice and interactive it allowed me to just keep trial and erroring to get it to this point which is really helpful for uh learning nice that's fantastic yeah well so yeah and i guess the other part of the assignment sorry i lost you there you there i lost your sound there eric are you still there yeah i'm still here yeah oh you were saying oh yeah i was just saying so i think his sound is down yeah i lost your sound um oh you muted yourself can you hear me now yes okay uh yeah so i was just saying that i guess the other aspect of this was trying to um figure out how to make things item potent oh well yeah that's what i was going to get into today that's what i plan to really touch on today and so um so i'm starting to go back to some of your work and react um ah yep yeah i mean i would like to address some of your questions around the the day formatting and stuff because it's actually quite simple what you can do to make adjustments to the formatting um so it's a little bit off topic but i'll spend like five minutes on it just to to move that forward because if because you were struggling with that so when you oh i gotta fork this to make some edits to have a little more control over the the dates and the formatting there so we've got a scale time here and one thing you can do is control the number of ticks by saying dot ticks and you pass in like five or something that gives you oh it's not loading what happened oh sorry not on the scale not on the scale on the axis yeah that's something that trips me up so when we when we create the axis oh you did that already it takes six so if we up it till like 16 we get more ticks and so if you want to change the formatting is that what you wanted to do change that formatting yeah i was trying to figure out so implicitly there was it dropped the years in and then um the months and so forth and i was trying to figure out how how to actually manipulate those sorts of things totally totally so you can use this thing called d3 time format and this old example on blocks.org from zen armstrong 2017 is a tried and true way of of figuring out how to format dates with d3 so the way you use it is uh now it's called time format camel case it used to be time dot format but the api is pretty much the same so you can pass in this weird looking string like you know percent y dash percent m and each of these little codes has a specific meaning like this is the full year this is the the month as zero one but let's see what kind of ticks might be appropriate maybe just the month right like uh yep i think i actually found this site too nice i was i was um not getting it somewhere in there i had the month uh aspect oh nice and time format is even there i see yeah nice nice and so when you call axis bottom you can just call dot format oh okay or maybe it's i think it's actually tick format yeah and then you can just pass in a time format of this string which i can't remember i have to look at the example dollar sign b for like jan feb like that yeah then i'll use prettier to format the code and now we get huh that did not seem to do the trick actually yeah then you have to i think manipulate the text to well that should work that should work let me see if i get any errors no hmm so if i search for d3 axis tick format i hope i get the um the name right yeah axis.tick format i should do the trick i wonder if it was set somewhere else as well i think you're right i i i know i said it somewhere else i'm trying to remember where yeah cause i think if you if you set it on the axis or the scale it might like take precedence or something oh wait a minute there's two oh there there's two axes on the bottom yeah i forgot to clean that out this is when i was going to item potent oh nice let me see so that might be just not visible and then let's try putting it on this other one let's see we need one more parent yep there we go yep there got it boom yeah so that's how it works very nice very nice thank you yeah my pleasure thanks for doing the assignment i'm really happy to see this sort of uh engagement and participation yeah appreciate it thanks all right we've got a bunch more people coming let's see what's going on here we've got um maximiliano hello i think you came last time and we've got ken penn hey ken welcome and we've got uh maribel welcome maribel would anyone like to introduce themselves am i muted oh there you go i can hear you now this is weird um yeah no i'm still i'm new to to um to d3 and um still learning a lot so i have questions i shall listen okay cool well feel free to interrupt me as i go and and ask the questions along the way thank you hey kuran and everyone yes i was here last week how are you everything's fine thanks good good so great to be here again welcome and i see ken joined us ken you want to introduce yourself one a little bit uh there was a bit of an echo there so i was kind of holding back uh ken pan um currently who run on everyone yes i was here yeah you gotta close the youtube sorry it's a little a little funky of a setup good good but if you close out the youtube uh window shouldn't work there we go uh yeah so uh ken pan um have been using v3 for a bunch of years um currently um unemployed and um just uh doing this to stay in practice and get tuned up on uh incorporating d3 with uh modern javascript nice well i'm glad you could join us ken um ken and i go way back from the d3 meetups in san francisco many fond memories of attending events there meeting people learning things so great you should provide a link to your uh d3 parade entry yesterday that was quite good oh yeah yeah that was fun yeah i hope to actually build something like that as part of this series as we get further along um but yeah yeah it was fun that was fun i i think it was very instructive too and it might be for um for other people where you showed all the the wrong steps broken made art that she had oh yeah persisting to the right kind of like you just helped with the dates just now i thought that you know learning to use it instead of uh just getting frustrated and quit is uh you know how to persist through that is really important i think nice for sure and that's why i'm having this whole thing um you know live with q and a so because i know people get stuck and i want to teach people how to go from stuck to unstuck because that's the key thing yeah all right we've got some other folks joining us um hello felipe how are you and we've also got matt oliver hello matt welcome howdy uh thanks for doing this queren i'm in texas and i'm uh in my day job i'm a product manager and i love building with d3 and um love learning new stuff so happy to be here and um haven't been able to make the last few but um whenever there's time and whenever i can i wanna i wanna participate so thanks again nice this is amazing wow welcome well this is a full house we've got so many people so let me just dig into this what i wanted to do today was to make our chart that we made last time dynamic meaning what i was thinking of doing is cycling through x and y columns we saw last time that if you change the code to change the function that accesses the data for x then the meaning of the x column changes to be that column and what i want to really touch upon today is like if you want to make such a change interactively without having to go and change the code how do you do that that gets into this concept of idempotent rendering where you have this function that you invoke namely the scatter plot and what you want is that the scatter plot knows how it's supposed to look it has all this configuration set up and what you want to have happen is when you call that function again for the second time or the third time or the fourth time it should just sort of whip the dom into shape and and be like all right dom like you need to now change to represent the new setup the new configuration and with d3 there's all these foot guns um things that you can use to shoot yourself in the foot like dot append which doesn't really work well if you invoke the function again and again because it's going to append more and more elements again and again which is not what we want and there's a couple telltale signs of when this is happening that i think i'll get into today and then if there's time after we get the idempotent rendering down if there's time i would like to dig into animated transitions but we may not we may or may not get that far we'll see all right so here is the reusable scatter plot from last time after last week's session i i had like a realization that like oh no it's not actually done because it's not idem potent which which sort of defeats the whole purpose of making it reusable and this is a word that you don't usually come across unless you're in like computer science so i just wanted to read the definition of the word um i think i think the wikipedia article does it justice idempotence is the property of certain operations in mathematics and computer science whereby they can be applied multiple times without changing the results beyond the initial application so the the key here is that the result that you get after invoking the function should be exactly the same regardless of the state of affairs before you invoke that function and so that let's let's apply this to our to our code here all right so first of all we need to have some change be happening and so i propose that instead of just calling the scatter plot one time like we're doing here we can call it multiple times in a loop of sorts so let's say every every second or every two seconds we change the value that gets returned from this x value accessor function and that would have the effect of you know changing it from let's say petal width to sepal with boom see that change that's the kind of that's the change that i want to see without rerunning the program so how would we do that there is a a construct in javascript called set interval and what set interval does is it accepts a function as the first argument and as the second argument it accepts a number of milliseconds so if i put a thousand here that means every second it's going to run this function whatever it may be so let's just you know console.log here to make sure that this the setup is working then i'll open the console and we can see it's printing out here again and again and again every second and those little numbers mean like that's the number of times that the same thing was printed out again and again and we see it's incrementing every second but if we change this to 100 it's going to increment every um tenth of a second so we'll see the number going a lot faster so what i want to do here is let's say every two seconds we're going to change the meaning of x but how do we do that and and this comes back to your question from earlier a deal of like does the order that you do this stuff matter well the order depends on the use case like the scenario where you need to invoke this right now we have to do a little bit of refactoring because there's a bunch of stuff happening in one call but now the task at hand is to tease out what needs to happen once at the beginning versus what needs to happen every time we change x for example we're calling await csv here which will fetch the data and we don't want to fetch the data again every time we we set it up and also this scatter plot is being invoked i mean the constructor of the scatter plot is being invoked within this svg call so we have no way of accessing the instance of that plot to change its configuration so i'm going to have to move this around a little bit what i'm going to do is pull this out into a variable i guess i'll call it plot equals and then we invoke the scatter plot now we have we sort of have a handle on this thing so we can change it after the fact now we can do svg call plot right here to initialize it and we can use the same construct inside of our set interval console.log plot like that so now it is invoking our plot function every two seconds and we're already starting to see some of those telltale signs that that the thing is not item potent namely notice how around these labels it's not quite smooth it's a little um pixelated or like harsh when you look at it i mean and what's happening is the antialiasing is getting messed up because what it is there actually is a bunch of layers of the axis again and again and again and we can see this if we inspect the dom we can see if we zoom out to the right level there are multiple copies of both the x and y axis being added and if we scroll down to the bottom we can see that every two seconds there's another copy of both axes being added so this is the problem that we have to set out to fix and this is a very common type of bug when you're working with d3 because the way d3 is structured like you can get something working when you invoke it once and that's pretty straightforward you can use the dot append construct however when you when you have a situation where you need the thing to change over time you have to actually do different stuff you need to make sure that you use the general update pattern of d3 which handles the enter the update and the exit of all of these dom nodes and the problem here is that the parent group for the axes is being just appended over and over so that's what we need to change so let me go back to our scatter plot although you know let me let me just finish this this thought first what we want to do is change the value of x and we're ready to do that so let's do that first let's change x and then let's go and make our our reusable component idempotent we can just say plot dot x value and instead of d dot petal width we're going to want to cycle through so we can say d at column and we can say column equals petal width to start and how do we cycle through the various columns i propose we have something called columns which is going to be an array and petal width will be one of the options another of the options is sepal width and then we can copy those options and add height or no length what was it let me figure out what that was actually from the data yeah it does length oh yeah length length it was indeed so we can change width to length now we've got these options to choose from for our columns and what we want to do is say column is columns at index let's say i and i is something that i would like to increment every two seconds but once it gets to the top we should it should like cycle back it should circle back so instead of using const i'm going to define this outside of set interval and use let i'll initialize i to 0 and say i plus plus and then console.log i let's see what this does so far it says one two three four five and this is where it's getting buggy because um once it gets beyond three it should go back to zero and the way that we can do this is i equals i plus one modulo columns dot length 1 and just for well let's see if it runs zero zero oh it's not working just for some context if you haven't seen the modulo operator four modulo two is zero but five modulo two is one a modular 2 is is a way that you can check if it's even or odd and so what we want to do is make i go from zero to like three and then go back to zero so you know what we could do actually is just we could simply say i plus plus let it increment and then let's console.log i modulo column stat length minus one you know it could have been a parenthesis issue let's try like this so we see one two zero one two zero but we have four options um maybe it's just a not off by one kind of a thing let's just modulo by columns.length i think this should give us the right thing now one two three zero all right so we just need to use this when we access from columns like this so we can just sort of um compress this like so and i kind of want it to start at zero so let me just increment i after we do this this stuff here all right now it should be behaving as we expect so this is a dynamic scatter plot um the circles are idempotent they're behaving correctly so what it's doing is it's cycling through each of these for x and notice that at a certain point we see a diagonal that's that's when x and y are the same column here's the problem now the axes are getting messed up see the xaxis it's just a bunch of copies now let's address that problem of multiple axes uh but at this point are there any questions about what i've done so far um i i i wanted to ask how this concept of item potent relates with the the update pattern in the tree because i i i don't know if it's related but but it's like the same principle i guess because the points are dynamically changing but i haven't seen this concept before when we see the update pattern the enter update exit pattern so i'm not sure if how they are related right right and by the way people don't really talk about it they don't use this term very often and the term idimpotent rendering i think was used back in the days of jquery when it became like a thing um so maybe that's why like it's not a commonly used term it's like a sort of a nerdy computer science term but i think it's the right term to apply here but the relationship between the concept of idempotent rendering and d3's general update pattern is it's the same thing d3's general update pattern makes the rendering item potent and so um let's let's take a look at our code for the circles what this does is it uses the new dot join api which does a bunch of stuff internally it creates an enter selection and an update selection and it merges them together and it returns the resulting selection and then we can set the circle the the attributes on the resulting thing so that is an idempotent rendering pattern let me show you a variant of this that is not idempotent if we call dot enter dot append circle and then we set the attributes on those circles what we're going to get is a bunch of overlapping circles oh no i'm that's not right that's not right because it is actually only so when it's when it says select all circle it's picking up the circles that it rendered last time but this is not idempotent because it's not updating it's not updating it's not working right so to make it item potent we use enter dot append circle um well we could use the dot merge thing check it out um circles dot merge um sorry this should be circles which is the update selection and then we merge it with the enter selection like this this should be the idepotent version of it see now it's updating properly and this is like super confusing it's sort of a deprecated api to use merge like this it's very low level it helps you out but what this is doing is exactly the same thing as this simplified api where you just call dot join and it and join also handles the exit case so if there were fewer circles oops i must have deleted something data we need yeah so so this this does item important rendering does that answer your question yes yes definitely that now i i get a how that concept like is part of the of the of all this structure yeah nice and so the problem is are our axes are not idempotent i mean the axis itself is coded in such a way that it does correctly do item potent rendering however we are appending a group element on the outside which is the part of this stuff that's not item potent it just appends a new group element on each render which is not right this is the special case of the general update pattern that deals with just a single element and so it's sort of a non it's not the most common form that you see usually we call data and we pass an array of things that actually represents data however if you want to use d3 selections for just a single element we need to just make up some data that has a single element so let's do it selection dot select all um we could try dot g oh we could try g here just to select all group elements however i could tell you right now this is not going to fly because we have multiple group elements one for each axis and we need to disambiguate between them so at this point before i go any further i'm going to i'm going to use a class to disambiguate these select alt dot i'll call it y axis y dash axis because this it's the y axis dot data and this is where we need to pass in an array that has a single element so i could just put the number one or whatever i'm going to use null because i've seen this around in in the d3 source code actually for i think d3 axis uses this so it's it's an array of data that doesn't really have data it's just null it's but the the thing is it's a single element so it doesn't really matter what that element is it just matters that it's an array that has a single element because when you use the dot join construct like i think i could say join g dot attr i have to give it the class of yaxis so that it picks up the one that was added previously this i believe should work and i think we could say g dot y axis just to make it really clear i think that's a valid selector means it means that the the tag name is g and the class is y axis so the yaxis actually looks good on the side see it's not getting that thick quality to it which indicates to me that it's just rendering once um so what happens is every time the function gets executed it's taking a look at what was there from the last time and just whipping it into shape to match what it should be this time and because we're not changing y it doesn't change uh which is the right thing so now let's apply the same pattern to x this is where we'll actually see it um we'll see it work more clearly because the axis won't be totally messed up so i'm just going to copy paste that whole pattern and then change yaxis to xaxis and let's see let's see if that does the trick yeah see that now it's correct yep the axis is not getting all messed up so just to run through what's happening again here we're using this dot join api of d3 which is the modern day you know general update pattern of d3 that handles enter update and exit and we're passing it a data set that just has a single thing a single element which is null but it could be anything doesn't it really doesn't matter what it is but just the fact that there's one of them is what matters because the the internals of dot join will take that data and say okay i just need to make a single group element so if there's already a group element there that matches this selection then i'm going to use it i'm going to use the old one that was there before i'm not going to make a new one and so that's the beauty of this the first time it runs it will create an a brand new a mint brand new group element but the second time the third time the fourth time it's just going to use the grip element that was there before and then it's going to call this axis function which itself implements idempotent rendering properly internally so that makes the whole thing item potent and and working correctly so this is it this is this is the the complete version of the reusable chart now you can use this you know swap out things in in real time and it'll work correctly any questions great i think it's great so so if i understand correctly the with the null like a array that you create it's like a a a unique id for the for the group and that way it recognizes as the same thing when it updates well it's not really an id it's not actually used at all the thing that's serving as an id to differentiate between the different groups is actually the class so let me show you what happens if we get rid of this class if we just say select all g and then select all g for both of these axes let's see what happens see it's only getting one of them the y axis is not showing up at all and so in terms of the concept of unique id to disambiguate between them the class is really what plays that role the data that array of null is just to signify that there's one thing that we want not two not zero but there's just one thing that's the significance of the of that right right right thank you and just to deconstruct why there's no um yaxis here when this code runs it builds up the yaxis first because select all g the first time there's no group element it'll create one and then after that runs the code that is for the xaxis says select all g boom it's going to select that group element that was used for the yaxis that's what happens that's what happens when you don't use classes it selects whatever group element is there on the page like as a child of the selection and so that's why um it's clobbering the yaxis and it's it's using the same group element and it's building it into the xaxis so let's bring back our our selection that uses class yeah so now it says select all elements that have the class y axis if it's the first time there's going to be none so it's going to make a new one give it the class but if it's the second time around it's going to find the one that that this code put there before and use it yeah okay so i'm going to leave this reusable scatter plot here as it is because now i feel like it's finished i'm going to fork this because the animated transitions do add quite a bit of complexity so i'll call it animated reusable d3 scatter plot all right in our scatter plot i'm thinking we can focus on the circles as the thing to add animation to and maybe we could potentially animate the axes as well d3 axes are implemented in such a way that you can animate them which is really cool but first let's get grounded in some documentation or examples so i'm going to search for d3 transitions yeah d3 transition here it is looking for some example code yeah so with transitions like there's a million and one ways you can invoke them um you could even just say dot transition actually let me do that first to see what happens because but i don't think it's the right behavior but just just as an experiment if we just put dot transition right here what happens okay it worked now they're animating see that so that's the simplest way of invoking d3 transitions we just add dot transition and it creates this thing called a d3 transition that kind of looks and feels like a d3 selection it so when you call dot transition it creates a new thing which is an instance of a transition and returns it and so these dot attrs they're being invoked on the transition not the original selection and you can also say dot duration like this and pass in a number of milliseconds like let's say two thousand now the transitions are slower two seconds and you can really see the stuff dance around pretty neat however this is sort of the the lazy approach that ends up in semibuggy stuff because watch this uh when this program runs notice how the circles sort of fly in from the corner zoom this is on to me this i mean it's maybe acceptable but like to me this is not right like this is this is kind of buggy you know so i think we need to do the more proper implementation of of um of transitions which we can get into now from the docs so the thing to do really is to create a transition object that you can use in multiple places because what what this does if you call dot transition it creates a new transition and if we wanted to say transition the axis too it would it would like create a new different transition that has like slightly different timing or something like that and so like if you want everything to be synchronized the best way to do it is to create an instance of d3.transition so that's what i'm going to do now i'll just create it right above our circles i'll use const instead of var and instead of d3 dot transition i will import transition from d3 at the top and i'll get rid of this stuff down here ease linear um oh yeah you can specify all sorts of easing functions which is like the the different way that they animate but i think we can just we can just use the defaults for now and i'll we'll keep the duration of two seconds so we can see it clearly now let me find some more examples so we can call dot transition on a selection and pass in the transition that we created so this is the same behavior as before but what i want to focus on now is when the the plot gets initialized for the first time i want to have like some nuanced animated transitions where here's what i want to have happen the circles should appear in their correct locations but they should grow from nothing to something so i would like to to animate the radius of it right i think that that feels to me like the proper way to start off a scatter plot that has animations is to you know do something sensible rather than like the default behavior which is they fly in from the upper left corner which is sort of nonsensical i mean it makes sense in a way technically but like i wouldn't want to wouldn't want to see that you know so for this we have to we have to use dot join in in a different way let me see if i can find i know there's a good example of this somewhere let me see if i can just find it i know it's probably here in observable here it is here it is yeah this is the canonical example by mike bostock author of d3 where it's the general update pattern with animated transitions and these animated transitions are totally um controlled like like the code controls exactly all the cases of of these animations and so when when things enter they're green they fall from the sky when they're exit they transition down they become red and transition down and when they update they're black here and they just move from where they were to where they are or where they should be this is the example i would like to follow so here is here's here's what it looks like to do this properly we call dot join and instead of just passing a string the selector we pass in three functions the first function is what to do on enter the second function is what to do on update meaning when there's something there from the last time around and we just need to update it and what to do on exit when something disappears exit we don't need to handle in our case because we don't have a case where things exit i mean that would be the case where like uh when we invoke the scatter plot we change the data so that there's one fewer uh entry so this case we might not touch upon but we want to touch upon these two for sure let me i'm just going to copy all this stuff because it serves as a decent template for reference uh kern just a question uh you went to uh you went to observable rather than the documentation right and uh is that is that the way to look stuff up now i mean go to observable first rather than the documentation well here's the thing like the documentation of d3 and observable are becoming quite um interconnected so for for example if we look at um d3 selection i often do start with the docs in the readme of the github stuff here but the thing is all of this stuff links into observable well notebooks okay yeah and so joining data for example see the selection.join notebook so this stuff in observable is essentially an extension of the d3 documentation okay i'm just planning on spending a lot of time in the documentation to learn how to do stuff in version six yep yeah the documentation is great but i don't think it contains a complete example i mean this is this is pretty close so this is a place we could start as well but i don't think it contains a full example with the animated transitions so for that we do need to go into observable but yeah my my my general approach is to use the docs as much as i can and then if there's something that i can't find in the docs then i'll click through the observable links and import it essentially port the stuff to vanilla javascript by copy pasting little chunks yep thank you yeah my pleasure thanks for the question here it is so yeah i mean if i had my druthers this code snippet should be in the readme but it's not because this deals with how transitions and selections intermingle and work together so instead of using this approach i'm going to delete what we had earlier for the dot join and then i'll paste all this crazy looking stuff but you know really what i want to do is i want to use this as a reference and then code it ourselves so i'll leave that it out current uh one practical question how what's the shortcut for multiple commenting out in bishop oh it's well if you're not in vim mode it's control slash control slash yeah and i've been meaning to add something like a list of keyboard shortcuts that would be useful wouldn't it right here in the editor yes it's it's it's on the todo list yeah but um yeah control slash comments the line multiple lines super useful thank you the general structure that we need here is a function that takes as input the enter selection and does something with it a function that takes as input the update selection and does something with it and lastly a function that takes as input the exit selection and does something with it enter what we're going to generally do is append something in this case we are appending a circle and on update is where we want to you know change the position and on exit is where we generally want to remove the stuff um i'm just going to keep it there as a good practice but we don't have like a test harness that tests that case yet but anyway what i think we should do on enter is initialize the circles to where they should be so that's where i'm going to take these lines move them up to here so we are pending a circle a brand new circle the first time it gets invoked and we're setting x and y and what we're left with is now circles that don't move around because we haven't addressed the update selection so let's do the same thing on update i'm just going to paste that logic there so we're setting cx and cy on update as well now we're seeing that the circles change like they should okay so now what i want to do is adopt the transitions the way that we can do this well let's think about first what we want to happen on the enter case when the circles get created what i want to do is transition them from being zero radius to having the radius that they're going to have for the rest of their lives and that is r set to radius here i'm going to move this logic over to here but what i really want to do is initialize r to be zero and that's what we can do here i'll just set r to be zero like this and i wanna i wanna have a transition to the next radius however there are some subtle things to consider here namely this function needs to return the enter selection that's just how this api works it expects the enter selection to be returned so that's why we can't just call dot transition like this because it's going to sort of mess things up internally but then the the last line should be the the radius right i cannot move the radius up and do the transition right or the transition also return the uh returns the enter selection yeah it can be a little confusing so i'm just going to comment out that for now and this is where we need to look to this pattern from from the example from observable it uses dot call and the reason why it uses dot call is that what gets returned from dot call is the enter selection and the enter selection needs to be returned from this function not the transition but this is how we can create a transition derived from the enter selection and then use it to actually do our animations and it takes as input the enter selection and it derives a transition from that and the existence of this this transition is just strictly inside of this callback it doesn't get returned from this this outer function what gets returned is the enter selection because dot call returns the selection that it was called on so this is why you need to use dot call to get at what the transition should do and in here is where we can say dot attr radius r and radius and all this stuff and i might have like a mismatched paren or something i'm missing comma there it is yeah so check this out if i run this i'm going to make a code change to trigger a run make it full screen so you can see this is the transition that we want yeah i'll run that again so you can see it starts out as little dots that don't really exist to they grow into their final form and actually just to make it super visible let me set the duration to like five seconds check this out they're gonna start at nothing get bigger and bigger and bigger and now they're big and if you want to make it smaller after shows then it's you're going to exit right yes okay yeah we could apply the same pattern on exit um yeah exit is um tricky i think i'll leave that to another day um sure because we don't really have a use case for it at the moment but yes you can control what happens on exit and in the example is good like make it turn brown and then have it transition to go down and then remove it and the trick with exit and transitions is that you need to call dot remove on the transition because what we want to do is have it wait for the transition to finish and then remove the dom element but anyway let's finish the desired update transition again this this should return the update selection so we need to use the same pattern of using dot call update.call update and then update.transition passing in the same transition object that we created earlier and this is where we want to set the cx and cy attributes so now when this runs it should slowly move there we go yeah so now we're having with this kind of a funny a funny effect that's going on because the transition is longer than the time that we're giving it to finish the transition is five seconds but we're changing stuff every two seconds so let me just align on those values two seconds okay this is correct all right and so let's i just want to put a little icing on the cake here um there is a magical thing that you can do with transitions i'm going to make it one second and then do this magical trick which is we can set a dot delay on the transition to be a function that takes as input one row and also the index and we can return the index times let's say 10 or 100 so you can see what the effect of this is oh you can't really see it i don't know if it actually worked what this should do is make it so that there's a sort of a staggering effect where not all the dots move at the same time i thought this would work gohan um i was doing a few tests another day and i noticed that sometimes the index indexer and the d gets swapped depends of oh really yes i'm not sure why that happened i can check later and let you know but try try to change the ind okay somehow i i i have my doubts but i'll try it yeah nope nope okay um yeah i don't know maybe maybe we need to call this not here but over here after we call dot transition what if we pass it in over there yeah now it's working this is very cool very cool although it's it's set way too high but if if i set it to like a hundred we can see well let's see what happens yeah they all kind of move in a staggered manner let me tweak things a little bit more i'm going to have just a slightly larger delay so instead of two seconds let's make it three seconds and then in the delay let's set this delay to i don't know 50 50 milliseconds to get the desired effect that's still too high let's say like 10 10 milliseconds we can get a really beautiful sort of eyepopping effect there it is that's the effect i was going for so the whole thing finishes between uh the intervals where it changes but it's this beautiful beautiful effect that i love with d3 transitions and setting the delay like this it's got this like voom like this this really almost like a choreographed effect to it it's really cool very cool nice thank you yeah this is fun so yeah i try to you know spice it up with client work like if you add this to work that you do for other people they're gonna just freak out and love it so it's nice icing on the cake that you can add all right and so lastly i think we can we can transition on the axes as well so let me get rid of this reference code and just to wrap this up i'm sort of winging it here but if i just say dot transition t before we call the axis all right let me do it on the x so we can see if it works let's see if that works yeah it works boom see that brilliant yeah the way the d3 access is implemented it does it handles transitions correctly which i just it's just fine so i find it so beautiful you can pass in transition and it updates the axis in an animated fashion brilliant all right i think our animation work is complete any uh any questions or thoughts about this um yeah it's actually it's another task the last class uh exercise was to put the title in the axis i did it but i'm not sure i did the right way so i would like to see how you do it sure um because in this case you have to update also the the title right exactly or is this the exercise for this class actually it is actually it is this is the perfect exercise okay and the timing is perfect we're getting to the end of the time here add axis labels that are idempotent yeah yes this is a very good exercise that i will leave you all to do and just as a as a little hint you're going to have to use that dot data and pass in an array of of no of one item null or whatever and um so instead of just selection dot append text it would be selection dot select all text dot y axis label you're gonna have to use a class to disambiguate between the two things just like we did with the axes and yeah essentially apply the same pattern that we did for the group element that contains our our axes for the text labels and i think this is a great exercise because it it it actually paves the way to a lot of other things like if you try to add labels to this you're going to quickly find that we don't have enough information we need to add another another um accessor to this component which is going to be the x label we're going to have to pass that in too because this passes in a function and from this function we can't tell what the name is of the column so we're going to have to add one additional thing to get it to work so that's why i think it's a good exercise yeah um current yeah i was just curious about the arguments that are passed to join and i noticed that there are a couple of lines that are duplicated namely the cx and cy and i uh i recall that you you've brought up merge in the past to help uh remove that duplication and i was just wondering whether there was something equivalent uh for inside the uh yeah before for inside the arguments um yeah i'm i'm thrilled that you brought this up because duplicated logic is is one of those things that i just hate i just hate to see it and so i would like to address it i'd say it's a great call to address that we've got duplicated logic for cx and cy and it's not so bad i mean it's only two lines that are pretty simple but still it's duplicated logic and you may find yourself with complex logic you know ten lines of complicated stuff that you copy paste between these two places which is not ideal and so the problem is this logic really needs to be executed at these two different places um in the past like if you if we don't have animated transitions you know like we did before i started adding this stuff it could just go once at the at the end because it when you put it here it acts on the merged enter and update selections but if you do it like that you lose the animated transitions like it's not it's not actually correct anymore so let me go back to the way it was is it possible to me like create a function an external function that updates cx and cy then i call this function in the enter and inside the update is that possible yes exactly you hit the nail on the head that's exactly what i was going to do cool and so let's do it i'll call it um what's it going to do it's going to be positioning the circles so i'm just going to call it position circles and this is going to take as input a selection that contains the circles so i'll just i'll call it circles we could call it anything but it'll take that as input and what it will do is just gonna have this side effect of calling dot httr on that selection and it could actually return circles but doesn't really need to um and then to invoke this doesn't need because uh later you will change the r attribute right so it should return the circle or not well it all depends on how we invoke it um if we use dot call then it does not matter what this function returns because dot call is going to return the selection of the circles anyway so it really doesn't matter what this function returns and this is how we can do it we can just say dot call position circles and then in the other place where we have the same logic we can put the same thing dot call position circles like that and it seems to work and on the creation step yeah it seems to work okay yep so yes indeed this is how you can do it this is how you can reduce the duplicated logic across these two places and i think this is the best way to do it because this this logic needs to be executed in both of these places it needs to be the circles need to be positioned before the radius transition happens and they also need to be positioned every time things update and so yeah refactoring it into a common function that's invoked in these two places i think is a good move yeah that's perfect thank you very much for for walking through that nice yeah my pleasure and i'm glad you caught that because um when i was planning for this episode that i had this in mind like oh yeah at the end i'm gonna refactor it but i totally forgot so thank you for reminding me also uh do you have a you i think you mentioned in a previous lesson request animation frame um yeah versus uh set into a interval do you have a preference for one over the other is is one more um does one have benefits of the other well they have different properties request animation frame is actually used internally by d3 transitions and when you invoke request animation frame and pass a callback that callback will be invoked as soon as the next render cycle happens and it depends on your system setup for example if your if your monitor is 60 frames a second which is most common or 30 frames a second which might happen if you have like a 4k monitor on a computer that's not very powerful and regardless of of your actual hardware request animation frame invokes that function on the next animation frame it's called an anime they call it an animation frame that means when the display updates so let's assume you have a like a standard setup where your refresh rate on your monitor is 60 frames a second that means and that's that's standard like when you move your mouse around on the screen if if you just sit there and up move your mouse around you're going to see that it's not a continuous thing like it actually just appears at different places really fast and every time it appears that's 1 60 of a second which is approximately 16 milliseconds and so the benefit of using request animation frame for things like animation is that it it synchronizes correctly with your display whereas if you use request if you use set interval for animation like if you if you were to use set interval and past 16 milliseconds it would give you it would call your function roughly every animation frame but it might call it twice between animation frames sometimes or it might call it once across two animation frames which would result in a slight almost undetectable visual glitch in the animation and so if you're if you're doing animations then request animation frame is the best thing to do hands down uh and and that's why d3 transitions use it internally for a time it wasn't supported by all browsers and so for a couple years there you had to you had to implement a fallback that used um set timeout or set yeah set timeout is the is the like a variant of set interval that just calls the function once um so i remember back in the day i had to do like detection like if request animation frame is there then use it otherwise use set timeout and pass 16 milliseconds or whatever 1000 divided by 60 is and so that would be an approximation however if you have other use cases that are not animation like what we have here um like where you you want to wait for one second or three seconds then set interval is the thing to use actually um yeah set interval is more appropriate when you have longer time scales that you're considering but if you're doing animation then request animation frame is is the thing to use yeah that makes total sense thank you nice my other question yeah um so go back to scatterplot.jf um and so uh where you or i guess the where did you have the abstraction out for position circles okay yeah there um the question i had in terms of and just sort of style and uh readability i really like the notion of putting position circles there it just reflects what's actually happening it from a uh sort of a coding style would someone do the same thing with the dot call enter that comes a little later right after it um it just seems at least to me a little strange but that's probably how javascript works and so forth but could you actually name that as a function that is you know uh more reflective of what's happening just like you did position circles does that make sense yeah um i'm gonna select some text do you mean this block here yeah yeah that dot call enter um or this inner one here yeah yeah that inner one yeah just could you name that uh create a function just like you did call position circles in a way that um it reflects what it's actually doing there in other words making the um uh radius bigger or transitioning yeah grow radius exactly for sure yeah i mean it's just a function okay so for sure i mean um you can you can do all sorts of refactorings like this and organize the code and i like doing things like this because in a way it's documentation like variable name is in a sense documentation for what it does exactly that's where i was going with this yeah um okay for sure and so i love you know when i can i like to structure code like almost like a book exactly where you learn about okay this grow radius what is that it's some cryptic code that sets the radius but it says grow so that therefore it must be like growing from zero to something and so for sure i would encourage doing this sort of uh slight refactoring to make the code more readable and clear yeah right and it's thank you you're welcome you're welcome but yeah it's totally a stylistic thing like i personally probably wouldn't do that just because it's setting the radius on the line before uh but how you know it's totally personal preference like this may be more readable for somebody coming at this code for the first time for sure so yeah up to you okay thanks that helps yeah my pleasure but what's going on that the the radios oh the radius just right it's in in the intersects just begin and yeah okay i got it it's just in there it's not when it moves okay see if we if we wanted to take this to the extreme we could say initialize radius and pair these together and so instead of saying right here attr zero we could say dot call initialize radius and that's what this would do right here and this actually implicitly returns it which we don't need to do so that's why i'm going to add these curly braces and actually same same with this we don't need to return it so this is like the final form if you were if you were to want to you know factor out things and name them this works as well so it's super clear now that like okay first we're going to position the circles then we're going to initialize the radius and if you read it you realize it's initialized to zero and then we're going to grow the radius from zero to something else using a transition so yeah yeah this code it's definitely more organized more readable in a certain sense but it's also more code so it's always a balance between how verbose and clear do you want to be versus how minimal and concise and arguably cryptic you want to be yeah there's tradeoffs for sure all right maybe i'll take one more if there is another and then we'll call it wrap it up for the day anyway well karen i have one that's uh on not on this chart but on a forced layout so i don't know if anybody has any other questions on this you know i'll be i'll be working on forced layout in the future so like my inclination is to is to hold off on that until we're dealing with it uh but i'm happy happy to feel the question about it actually it's it's mostly i see some places where um you the links are set up as an empty array and then how do you get that data to do that so that instead of me having to do source target for you know a thousand different data points i just do the auto magic javascript and it does it for me yeah there's some there's some magic stuff that happens with d3 force to be sure um i need the force to be with me on this yeah i get it yeah yeah well yeah when you and i think when you call for i don't remember exactly but when you pass data in there's some kind of magic initialization that happens um but i i will be doing forced layouts in in future episodes so maybe hold that idea how long i'm not sure i'm not sure i haven't planned out the full series but i think from here on out i'm debating to go deeper into this to add menus to this so you can interactively select so that's one direction to go another direction to go would be to do a bunch of things where we start from scratch and just implement different visualization techniques like a bar chart a line chart an area chart a pie chart from scratch with just enter and not this general update pattern stuff um so those are some of the things that i'm going to be doing in the future um any any preferences for for which direction to take it i i would say i would say uh menus are a really good idea if you're uh designing this for a user having them have the power of choice over what what shows on the screen is powerful exactly that's what i was thinking too so like now that we've got it to this point it's a cool technical demonstration but you know we're gonna have to add the axis labels and if you were to develop this for an actual use case of someone needing to visualize the data the logical next step would be to make it so that you can choose like you said which yes i will also appreciate that functionality you know yeah right on right on i like it sweet yeah i agree with ken and everyone yeah sweet yeah yeah let's do it so probably next week i'll add menus to this one and uh yeah that'll uncover some complexities along the way all right i think i'll wrap it up for today so thanks everyone for joining me so much thanks karen thank you thank you yeah this was a lot of fun this was a lot of fun with a lot of people here i love it so um yeah i hope you all can join next week as well and beyond so have a good weekend take care all right bye take care thanks bye bye welcome everyone to episode 11 of get it right in black and white charts with menus we've got a full house today we've got felipe adil nita and eric dasbach i think i'm saying that right is that right das bach great so yeah let's start by reviewing the submissions from last week this forum from last week all right so the exercise was add labels to this reusable scatter plot let's see what folks did wow this is pretty nice the labels are animated very cool nice work it's kind of surprising the arrow that's a good question let's check it out i guess it would be in here somewhere it's an actual character see that yeah yeah pretty neat there's actually a lot of um surprising characters that you can use i think it's from unicode but there's arrows there's little old dots emojis of course you could put emojis in here and it should work nice okay so the the axes the labels are animated as well with the same pattern very nice cool let's take a look at what some other folks did this is pretty cool so the animation pattern is it just disappears and then comes up from the bottom hello welcome perfect timing i'm not sure how to pronounce your name but uh but you just joined the call welcome i think this is the first time you're here you want to uh introduce yourself a bit uh kostav i'm not sure how to say your name but welcome kyle stuff you want to introduce yourself you're muted i'm not can't hear you welcome kathy hello i think this is the first time you're here you want to introduce yourself a little oh yes got it yeah i'm i'm experimenting with opening up the the live chat the live audio chat to everyone watching because um yeah i think there's a lot of value in people you know stopping me asking questions we can have a lively discussion all right glad you could join we have a full house today yeah no i i would suggest you close the youtube window it's a little tricky of a setup yeah because there's delayed audio coming from the youtube window and and there's the google meet window so if you're in the google me you have to close the youtube window sorry it's a little it's a little confusing oh good welcome kostov i'm so glad you could join us um i've i've seen your work recently and it's really great you want to introduce yourself a little bit excellent oh this one nice yeah this is really beautiful work yeah i've been i've been really happy to see see you working here and i'm thrilled you could join us today this is amazing this is amazing so yeah this is this is sort of a dream come true for me with this series i was hoping to collect sort of a core group of people who are following along intensely with this stuff and this is actually what happened so just thank you so much for for joining me on this journey this is amazing so i was just showing your work uh costume how do you say your name again i'm sorry kostov gostiv nice do you want to present this work a little bit see and and explain how you did it very nice right yep oh there it is oh that's actually pretty nice that's a pretty nice technique you're actually checking the value to see if it's a number or not nice work yeah so if folks if folks haven't seen this type of operator this is a really nice operator you can you can say type of something and that operator returns a string and it could be number like the string number or the string string or object or anything and this tells you what type of thing it is so this is checking the first row at the certain column what type of thing is it nice so it's filtering just by the numeric columns great work i see yeah continue has to be an expression on its own and so if you wanted to do that let me just show you real quick how you could do that so this is using the four in construct which is slightly different from four of uh but this is this is working fine so the thing is the ternary operator it creates an expression that has some return value and so you know if this value is true then it returns the first thing right after the question mark if it's false it returns the thing after the colon however continue continue needs to be its own separate statement so if you wanted to use continue you would need to do it like this you would need to use an if statement and an if block right here and and this use of the ternary operator is a bit confusing but because it has a side effect it's typically not recommended to to have a side effect meaning pushing a new thing onto the array uh inside of a ternary operator it's just a little bit confusing so this is how i would suggest to do it use an if and inside of that if block do this do the thing with the side effect so it's really clear that okay this is this deserves its own line it's doing something it has a side effect it's changing this array and then in the else block then you could use uh continue but yeah i was about to say like but you don't really need that because it's gonna just continue and do nothing anyway so nice nice yeah i'm glad i'm glad this came up yeah continue it's a control flow thing that you only need to use if you're inside of some like deeply nested thing and then you you know inside of some deeply like if you have four like three like i don't know two or three nested if statements and you come to some case where you need to continue that's where you would want to use um continue and i can't think of an example offhand but if it's just a case like this you don't actually need to use continue at all so this is another way of doing it yeah so with the for in construct this actually works because it's block scoped so this block here so const it declares this variable called col column and you could also use let here that would work too uh you could even use var if you're old school but const works yeah yeah my pleasure and um what this what this block of code is actually doing is it's filtering the columns to have only the numeric columns and so i can't help but just also suggest alternate way of doing it as well which is like this const numeric columns equals um there is no list comprehension but there are many useful methods on arrays that you can use and so this for in construct actually uses the keys of this object so you could say object dot keys of the first row this gives you an array of all of these columns and then you can say dot filter which is an array method and a lot of this stuff you could do in python with list comprehensions but there is no list comprehension in javascript it would be cool if there were but we can just use these constructs like filter and so we can pass in a function to filter and this function can just return this boolean you know if the type of the first row at this part particular column is number then return true otherwise it returns false and i'll just use prettier to format this code and this actually does the exact same thing as all of this it's just a more concise way of doing it understood yeah excellent excellent and i can see that like i can see that you're you're learning and trying new things and this is this is a very good way of um like this i can yeah it's great i could see your learning process which is amazing and so this is a good first working version and then you can simplify it with the addition of these different constructs like filter this hub does not do linting i tried to get it to work with linting but it was causing all sorts of instabilities it started crashing uh that's something on the road map for vishub it would be amazing to do linting and vis up that's something i really would like to see but unfortunately not right now but the closest thing we have is prettier this little p which which formats the code for you i find it super useful and along these go ahead sure it's an array of strings and it just for some example if we were to test against string it should return just species and it does yeah species is actually a something that uh sort of throws throws a wrench in the works of how our scatter plot works and this is uh this is going to be related to the exercise for today and we'll get more into it later but yeah this is an alternate way to do that filtering and let's see what time is it it's 11 21. let's just see a couple more exercise submissions here's another one from cost of um i don't know which one i clicked actually hold on this is the one i wanted to click data source dozen d3 scatter plot oh this is amazing the data source so good so good nice so this excellent yeah great work this this is awesome the data source data set by the way it's it's got a lot of history to it um i can go into it at another time but it's a great data set because it it has this picture of a dinosaur that you can see here and the point of it is that if you take all sorts of statistical summaries of this data set they're all like the same for all the different columns but if you visualize it you get totally different things like that data source and dots and the star and the point of it and the circle here and the point of this data set is to show that statistical summaries lose a lot of information and when you visualize the data you can see these patterns and information that you cannot see with just the statistical summaries very nice and here's another one with labels this one blew my mind when i saw it it actually does the animated general update pattern example within the label isn't that cool really a lot of attention to detail on this one it's i was happy to see this one it made me laugh i'm like oh my god this is this is so funny yeah so really nice work really nice work here by andrea nice oh here's one from eric dusbach nice you want to talk about this a little bit oh cool animation alright right nice well this is very nice this is very nice however however i do see some telltale signs that the labels are not adhering to the general update pattern see if you could see around the edges they're like very sharp and crisp that indicates to me that there's actually a bunch of labels on top of one another so let me just go in here and see what's happening with that and how we might fix it so the yaxis label looks fine actually this one is behaving correctly nice work with the data null oh nice oh nice that's great that's great i'm happy to see this like cross communication happening but here's where there's still a problem see with this one it's just appending a new group element every time for for axis bottom year but it's very close to what it needs to be i mean all you need to do here is selection dot select all a dot axis bottom year dot join g and now oh sorry sorry sorry i forgot the data null here now if you see the animation play out this 2020 is is looking correct it's not getting that crisp thing happening to it so yeah this is the pattern right here that you can apply to all the different text labels like this one united states and this other one here nice so yeah you're well on your way nice yeah my pleasure great work great work and while i'm in here i just kind of kind of want to see if we make this delay i times like 20 i kind of want to see it play out in its full slow beauty see this is this is really cool oh my gosh oh it's look what's happening here nice yeah that's what you got to do you just got to dial it in dial it in or alternatively you could make this a function of the um number of rows in the data that's actually something i wanted to do earlier but yeah it's it's gets a little detailed but yeah excellent work excellent work all right last one from andre take it out oh is it broken oh this is this is just a bug this is a bug invis up i don't know what this is coming from i've been meaning to investigate this i think just the data set was taken a long time to load that's working now nice very cool so it's just plugging in a different data set to that one with the with the transitions on the labels nice very nice work oh let's check it out oh you can only hear me oh my god seriously this is a disaster oh my gosh it's been just my audio coming through this whole time can one of you say something just to check the levels uh yeah i think so yeah it's a yeah sorry i i had my youtube close said something um yeah it's it's my problem on the obs config hold on just let me try to figure this one out all right can you can one of you say something testing nice there it is what is usually okay now it's coming through oh this is a disaster so all the audio so far was was lost from everybody else but now it's coming through sorry about that oh so sorry yeah you saw it before the class start but uh the question is in the uh it's in the meat uh chat oh the meat chat okay this is too much for me to monitor it's too many chats yeah that's why i said because it's too much places yeah i think you need to take break every half hour and check around yeah totally all right now let's get into today's episode so i'm gonna try to i'm gonna try to keep this to a half hour what we're going to try to do today is add menus to our animated scatter plot so that instead of just cycling through different columns it's going to be driven by the choice of the user you know what do i want to see right now and so you can click a menu and select which column to use for both x and y oops so i'm going to start from what we did last week this animated reusable scatter plot and i'll drop the link here in the chat if you'd like to follow along so i'll start by forking this one and i'll say um animated reusable d3 scatter plot or just i'll say scatter plot with menus or reusable how about animated animated scatter plot with menus okay so what i'd like to do here is add menus how do you add menus it turns out this is thing called the select tag in html and it looks something like this here's an example from w3schools this is the sort of basic builtin menu that you get from html and this is this is good for us we can use this so i'm going to copy this code as a reference example and i'm thinking we can use the same pattern that we used for our scatter plot for the menu so we're going to want to be able to say import menu from dot slash menu and we can use the same reusable chart pattern for this menu component so i'll create a new file called menu.js and in here i'm just going to paste this as a reference and comment it out and then i'm going to copy all of this scatterplot stuff paste it in here and change scatter plot to menu and and then just remove everything inside of here except the core skeleton of what we need and i'll keep one example of an accessor because we're going to want to have a bunch of these all right so this is the basic skeleton of what we want to do and then let's let's um invoke this from index.h index.js to get to a starting point for development i'm gonna get rid of this set interval stuff because it's going to be replaced by uh in the interaction of selection and we have this columns thing here which can drive the menus so we want to call dot call menu on something but we don't have that thing yet and i think what that thing should be is a div that we append to the body so maybe up here i'm going to make another block called menu container where we select the body and we can append a div a div is just a container element in html and maybe let's give it a class of menu container just so that we can style it with css and then we can use this to invoke our menu component so what this is i have a question yeah go ahead so this um h table elements uh it doesn't make sense to uh attach them to svg because they are basically html elements so they go to body element only correct yes um within the svg element you can only use certain certain tags that make sense within an svg like circle and line and all that stuff if you want to use a div inside of an svg there is actually a construct you can use to do this it's called foreign element svg foreign element but i don't use that very much because i find it confusing to have divs inside of your svg and it has some weird behavior so what i generally do is keep the svg graphics totally separate from the ui elements the regular old dom elements and so this is why i'm setting up a div giving it a class of menu container and then we can put stuff into there so we can instantiate our menu pass it into dot call and then inside of menu when it gets invoked the selection is this div it's the parent div so let's just try something selection.txt just as an example of something notice how it doesn't actually show up anywhere because i think it's showing up below the svg like beyond the boundary of the page so what we want to do is style it so that it appears at the top of this page so we've got this class menu dash container in our styles.css we can access that and i'm going to just position these menus on top of this svg to do that we can say position fixed top 0 and left zero this will put it at the top left corner so now we can see there it is foo at the top left corner i would like to ultimately center all of this stuff and i think i'll do that now just while i'm in the css to do that i like to use flexbox which you can set up with display flex and this is a whole thing that you know i could spend a bunch of time talking about but suffice it to say that when you use display flex it opens up this whole landscape of options for you which is extremely well documented in this thing called a complete guide to flexbox which has been a really great reference for me whenever using flexbox so what i want to do is center it so we can use justify content um i think space around is what i'd like to use so that we have one menu on one side and another menu on the other side so justify content space around it's still in the corner uh i think we need uh right zero as well which will make this div span the whole the whole space from left to right now we can see that little foo is in the middle here which is what we want all right we're going to actually want two menus one for x and one for y so let's scaffold that out now while we're here i will put these as children of menu containers so i'll call it maybe x menu container or how about i'll just call it x menu and we can do the same we can append a div give it a class of x menu container but you know i don't think we actually need different classes for this so i'll just append a div the simpler the better so we've got x menu and y menu and down here we can say xmenu.call and then ymenu dot call and see now we have two different labels one on the left and one on the right this is looking good this is what i wanted to ultimately ultimately end up as one menu on the left one menu on the right now that we have our positioning down let's develop this menu component using this this example code as a reference so i think the menu should be comprised of roughly this structure where there's a label and then there's a select element that has a bunch of options inside of it let's begin by creating this label we can say selection dot select all label dot data null i'm just gonna start by using this this item potent pattern from the beginning so we don't end up with any bugs later if we invoke it multiple times dot join label like this and the label is for this select and that has some implications for the ui like if you i think if you click on the label it gives focus to the select or something like this um i'm just using this as a as a template because i think it's all correct so let's begin by setting this four attribute i can say dot attr for and i'll use something called id which is something that should be configurable so let id equals nothing to start and we can we can set up an accessor for id like this oh what is where is label what do you mean where is label is this variable this is just an element here select all label yeah the idea is we're going to create this structure is inside the dom and so there's no variable called label it's just the tag name label and it's going to appear as some text next to the menu that says what the menu is about yeah but in this case you okay i got it you're selecting all the labels but there is none label right right now correct and then you will create but what what if we have a label in our in our page right if there's already a label there as a child of this selection then it will it will select that and use it instead of creating a new one this is what this this whole pattern is all about this idempotent rendering pattern the first time it's invoked it'll create a new label but subsequent times it's going to use the existing label and then change the change its attributes okay so we are using this fake data for now so what is the real label in our that iris data set well that's where we're gonna have to configure it so i'm beginning by by by setting up this id and in this dummy example the id would be cars so four equals cars here name equals cars and id equals cars over here but we have not set it up yet and what i'm doing is i'm working on i'm working on the the accessor so that we can set this up so i'm creating an accessor called id and over in index.js when we set up the menu for x we can we can call dot id and pass in the particular id i'll call it x dash menu for example and the key is that the id for the y menu needs to be different so now this will work because we just set up this accessor so we can call dot id pass in the id that invokes this function here which sets the variable called id to the value oh we need to get rid of this plus because that will that will parse the string to a number which we don't want here and then once that is set uh when it gets invoked it'll set for that id now we need to put the the text of the label which i think i'll call label or how about label text just so it's not confusing we want the text inside of this label to be label text so in our in our rendering code here we can say dot text which sets the inner text of the element to be label text and again we need to set up an accessor where we just change id to label text like this and then over in index.js we can call dot label text for these two different menus and pass in different things so for x it would be x colon i think is what i want it to be and then for y it would be y colon all right and then it shows up like that x is here and y is here excellent so far so good now let's begin working on this this the actual menu part of it which is sort of what all of this has been building up to the general update pattern here or yeah this item potent rendering pattern will be the same but instead of a label element it's going to be a select element and here we want to set name and id to be id which is very similar to this line here where we we're setting four on the label so i'm going to use that same pattern but instead of four it's going to be name and id like this now notice that we have sort of a stub of a menu that doesn't have anything in it so we're getting there now we need to populate these options question sure uh so when we're doing this select tag uh we are passing two attributes name and id and in the example as well they are both set to the same value so is this intentional or is this just specific to this particular example yeah this is intentional and to be honest i haven't dug too deep into each of those things i just sort of blindly copied it from the example that i found but here's another example of an html select element from mdn where they do the same thing where the label is for and that has to match up with the id but i see here that name is different and i do i do not actually fully understand the role of the name attribute on a select so let's see if we can find that name it's used to specify the name of the control i mean this is one of those things where i'm just going to sort of blindly follow the example what about id yeah i'm not really sure but the thing is when you when you click on when you click on the label it gives that menu focus that's why i think it's important that these match but apparently okay only the id needs to match and not the name so could it be like the id is its name is sort of like a class to apply say css styling or something like that could be could be but then i mean if you want to use css you may as well just give it a class and be sort of standard about it right i mean maybe it would work to just leave out the name honestly i'm not sure okay yeah but that four should match the id that's the main thing correct yeah four should match id um i think i think the id should be unique to the whole html document right yeah generally id needs to be unique in the whole document and to get to the bottom of this we can do some experiments like if i click on x see how the menu gets focus and i'm curious if i if i leave out both of these name and id and i click on that label it does not get focus so we know that one of these is important let me try just setting name and see what happens if i just set name and i click on it it does not get focus it does not get focused at all however if i leave out name and i just set id and then i click on the label it does get focus this is the behavior that i'm after this is why this is the whole reason why i'm setting this up so you know maybe i'll just be a little cowboy about it and leave out name because like i like to have this philosophy of like if i don't understand why it's there i'm not going to put it there you know if it doesn't do anything for me there's no need to put it so thanks for asking that question i have always wondered about this actually and now with this little experiment we got to the bottom of it so i'm just going to set id and be done with it yeah but id generally yeah it does need to be unique on the whole page that's why it's important that the id is different for x and y all right great let's continue let's add these options to our menu inside the select we want a bunch of options which is where we can continue this expression here so we're inside of the select net in here we can say dot select all option dot data options which we have not defined yet i'm going to define that dot join option and then each of these options needs to have a value attribute and also some text and the text inside the option element is what you see on the screen the value is more like an internal id that the code uses so let us let us assume that each element of this options array which we're going to define in a minute we'll have a couple things namely a value property which we can use here to set the value attribute like this and also a text attribute so i'm going to say dot text and here we can also pass in a function that takes as input one row and we can return text like that yeah this should be the complete code required to render our set of options now we just need to define options and options is something we want to define from the outside so i'm going to set up an accessor for options so we define the variable at the top i'll use this this template here to create a new accessor for options i'll just replace id with options everywhere here all right and then in index.js we need to pass in our options to both of these and columns is pretty close to options however it only has the actual columns it doesn't have the labels that we want to use i mean we could use the same for both but my preference would be to set up objects for each of these that have labels as well so value will be the original value here and then from here we can say text will be some string and for petal width that should be uppercase petal space width i'll just type these out these are the labels that we're going to see on the screen so they should be nice human readable stuff not this lowercase underscored limited thing which is kind of like uh nerdy you know it's not really not really presentable so petal length and sepal length all right these are actually our options so i'll just rename that variable to options which we can pass into the options accessor for both of these different menus all right now we have options in our menu look at that it worked amazing amazing all right now is the fun part where we get to wire it up and make it all work make it all happen this is where things get a little a little tricky what we want to do i want to be able to call dot on on this thing here which is generally how we add event listeners to things typically the first argument is the the name of the event on change and then the second argument is some callback where it accepts a value and it does something so for now i'll just say console.log value and later on we'll have that actually interact with the scatterplot to change to change x and y but for now let's just put it like this to see if it works and this is where it's kind of a challenging thing to to iterate on this pattern this reusable charts pattern to handle events luckily there are a couple d3 packages that do this one of them is d3 brush and i like to study the source code of d3 itself to see how to do some of this stuff you'll see that the implementation of d3 brush uses this other package for events called d3 dispatch which is what we can use as well this is this is part of d3 this is how you can set up components with event listeners so the way that brush does it is first it imports dispatch from d3 dispatch which we're gonna have to do as well so i'll just do that now import dispatch from in our case d3 um and let's see where it's used listeners equals dispatch passing in various types of events that could potentially happen let's do that as well i'll say const listeners equals dispatch we're only going to want one type of event which is change so i'm going to put that like that here this is the conduit by which we can emit events and we can event we can listen to these events externally and let's see where is listeners used ah to emit an event we need to use dot call but first we need to expose dot on to the external world and this is the pattern that d3 brush uses it calls listeners.on dot apply listeners and the arguments to this function and if that value is the same as listeners then it returns the the brush otherwise it returns the thing that was returned by those listeners now i'm going to be honest with you i have not fully dissected and grocked everything that's happening here i just know that it works and mike bostock the author of this module must have really thought this through so i'm gonna do something a little uncharacteristic and just copy paste this whole thing without fully understanding it and of course all we have to change brush to my and this effectively exposes the dot on method so that you can add an event listener to this menu so now our code should work it's going to add the event listener the next thing we need to do is actually emit that event from our event listener every time that the menu changes this is where we need to iterate our rendering logic to add an event listener to the select element itself which we can do with dot on change i'm pretty sure and this will take as input an event which is the dom event that that's provided to you from from the dom environment now let's console.log event here just to see if this is working at all i'll open up the console and then if i select something from this menu we get this event it worked alright i just know from experience that you can use event dot target and then unpack the value from this dot value is in here somewhere among all this stuff so event dot target dot value is how you extract the actual thing that you clicked on from this so now if i click on pedal width oops sepal width rather it's it prints out the name of the column simple underscore width like this and if i click uh sepal length it outputs sepal length this is the value that we want to dispatch to our outer event listeners and let me again refer to d3 dispatch there is a method here called um dot call this is the method that you need to use to dispatch events to tell all the event listeners like hey this event actually happened so what we need to do is call type and then the the context object which will resolve to dot this i'm not really a big fan of using this like we don't need to use this necessarily but the third argument is important it's the arguments that get passed so let's see how to how to actually set this up our instance of dispatch is called listeners here so in here we can say listeners.call the first argument will be the type which is the name of the event in our case it's going to be change the second argument is going to be the the context that resolves to this and i'm not i'm not a fan of using that so i'm just going to pass in null to say like this is not this is not a thing that we're doing it's not a thing that we're using but the third argument is important which is going to be event.target.value this will make it so that the na the column that you click on is passed to the outer event listener that we've defined in index.js now let's just say console.log in index.js to be sure this is where we are now let's see did it work if i click on this thing it worked boom so i clicked on it the event sort of got forwarded through this component to the outer index.html and now in index.html we get notified when we when we change this so this is this is the pattern that you can use to introduce events to your components and let me just give another overview of how this is working we import dispatch from d3 which gives us this event emitter construct from d3 we instantiate it once when we instantiate the menu it's an instance of dispatch that only has one type of event which i'm calling change we could call it anything but i'm calling it change because that's sort of a standard name for menus we're calling that listeners in here when we render our select element we're adding a change event listener to that element which is a it's a standard um thing that emits events from the dom when we get that event we are extracting the value that was clicked on and then we're using listeners.call to essentially forward that event through our d3 dispatch construct so what this is doing it's essentially emitting a change event and it's it's just passing in uh the value which is the the name of the column that was clicked on so you know we could just pass in the event but i my preference is to to eliminate all that complexity for the external listener so that all you need to do is is use the value that was passed in to this callback here right so i i realize this is a lot this was actually pretty difficult to figure out how to do but i think it's the right pattern i want to pause now and ask you know are there any questions so far yeah the the the null that you did there that's supposed to be this and that what what's that yeah we can dig into that because i it's it's a little sort of a mysterious thing i'll pass in foo here just to demonstrate what this is in our index.js if we use the old school function syntax not the fat arrow notation to define this function then we can say console.log this and i'll get rid of all that other stuff so we can just isolate that i think there's a typo in function oh whoops function now if i select something from that menu foo gets output to the console it's um it goes to like the history of javascript and objectoriented programming you know there's a bunch of patterns throughout history of javascript where people try to make it object oriented and use the keyword this extensively but i think like to me that's sort of a thing of the past like there's no need to use this at all and it's just it's essentially another way of passing another thing into this callback in addition to the value but i personally just don't see i just don't see the the usefulness in it but if if you wanted to do it if you wanted to use this then you could um but it is like uh we have like two combo boxes um does does it somehow chew i don't know identify which combo box are you using could be use it like this or not i mean one thing i could imagine is passing in my here so that it would resolve to the instance of our menu component in the external listener so you could say like i don't know so you could manipulate the menu or or something like that but like i said i don't really get it i don't really get the point of it it's just sort of an inherited thing from from patterns of the past that we've sort of moved away from in minor times um so that's why i don't really like to use it it's just a confusing thing um like in d3 a lot of the time this is referred is is the is the dom node but it just goes to show you in javascript the keyword this could resolve to literally anything it depends on how you invoke the function that's why i just find it confusing to use the keyword this when you're developing software but this is it this is how it's how it could be used you could pass something in as the second argument could be anything and then in the callback if you use the old school function notation then you can use the this keyword and it will resolve to whatever you pass in as the second argument here okay um i'm not familiar with this i'm familiar with that you would listen to an event using the on and natasha a function that will that will be operated on when that event is fired and i think i missed the point why we're doing all this while we're using the d3 dispatch oh we're using d3 dispatch so that we can essentially define our own set of events in this component so we can call dot on change and pass a callback which is sort of the ideal api that i would envision for for adding an event listener and it's it's a way of decoupling the dom like what we're doing when we actually render the thing from the component itself it means we can add this event listener to our menu component and then internally that menu component can choose to fire that event anytime inside so i mean we could we could fire this event any time it just so happens that we're listening to the change event on our select element and then essentially forwarding that event i see so for example suppose you're changing one of the selects but you want to change both of the axes you will be able to fire two events based on a selection and one of your selects if you need to well i mean if you wanted to do that then you could just change what the body of the listener does you could like set one axis and then set another you don't need necessarily two different events for that but let me revert this change because using this is confusing and i prefer the the arrow the fat arrow syntax for functions and then in our menu dot js we just pass null as the second argument so so yeah this is this is just generally the pattern that you you can use if you want to introduce events into your reusable components that you generate with this with this towards reusable charts pattern and the reason why we're using d3 dispatch is so that we can control the set of events it's a generalized pattern to be clear where you can you can set it up like this you can set up dot on like this and then you could add any sort of interaction like let's say for example you wanted to make it so that your scatter plot could listen to events when you click on the circles you could use the same pattern to accomplish that so the pattern can be the same it's just that the things that trigger those events could be different depending on whatever your component is i wanted to introduce this general pattern because it's useful in a number of different contexts whenever you want to add interaction to your to your components this just so happens to be a menu component where to know when to trigger the event we need to attach an event listener to the select dom element and then unpack it like this and then we pass it into our our change listeners like this all right now let's make it so that when we select something it actually changes the scatter plot this is the moment we've all been waiting for right we've got all this wiring set up that it you know it dispatches the event and everything this is the this is the moment of truth where we sort of connect these two things together let's look at this code that we had earlier it uses plot.x value to set the accessor and then it uses svg.callplot value in this case is actually the column so i'm going to rename it to column just because that makes more sense and then in this event listener we can say svg.call plot this will cause our scatter plot to rerender but just before we render that i'm going to call dot x value and set that x value accessor to be a brand new function that takes as input one of these rows and it returns d at column column being whatever column we just selected from the menu now if i select something it actually changes yeah this is the this is the moment where it all comes together and we can actually use a menu to select what is being displayed on the xaxis and it ends up pretty small and concise but we're getting the column from the event dispatcher and we're setting the x value accessor of our plot to be a function that accesses that particular column for x and then we're invoking our plot with svg.call and to complete this we can do the same for y but instead of saying x value we set the y value and this is it it's done we can set x and we can say y so now we can explore the data and one beautiful thing about the s the the select elements is you can actually use the arrow keys to quickly navigate between the different options so any questions does the event change on the select element files when you first render the page to make sure that you've got the first selections correct it does not that's actually a really good point when we set up our scatter plot it's defaulting to this x value is petal width and y value is sepal length but when we initialize the menus they're just getting i think the first the first option is what they're defaulting to so that's a good call out that when it loads it's actually not correct it says pedal width and it says pedal width for both x and y yep yep so that's a bug that's a bug ideally we would have something like uh initial option or what have you but just to fix the bug i'm going to initialize x value and y value both to be pedal width now at least it's it's correct and accurate when it loads but yeah good catch good catch there are a number of things we could do here to to like make it so that initially there is some some selection of the menus and the accessors that's initialized correctly but i think i'll i'll leave that as an exercise for the reader but actually here here's what i want to leave you with as an exercise for today handle species this is going to be kind of challenging the value here would be species and the text here would be species this would be the ideal situation where you could select species and it would work but right now it does not work because we're using linear scales we're using linear scales with with a thing that is is not numbers it's different strings and so if you wanted to visualize species you would need to use scale point instead and have the domain be data.map x value like this and so the challenge is set up x and y scales conditionally based on the type of attribute you've selected and and the overall goal here would be to make it so that if you select species for x the x scale would change to be a point scale not a linear scale and the axis should render correctly so that's the challenge for this week all right i think we'll wrap it up any other last questions just say thank you this is great my pleasure yeah this was um i was i was a little nervous going into this because i know it's a lot of stuff to digest um but thank you all for asking questions along the way when when things were not clear and uh it's yeah it's not clear to me what we should see if it's if i get this passive because i i can imagine like uh using different icons for different species oh if i if i get like the x's as a specie um especially i i don't get it because i would have like two species two or three something like this let me just show you real quick it should be scale point which will distribute those three values across x and then the domain would be data.map x value like this so it just gets all the unique values and now if i oh scale point we need to import that from d3 if it runs now and if i set x to species it looks like this this is what it should look like okay i got it um oh but yeah actually let's add a little bit of padding because it's all up against the edge there we can say dot padding of like 0.2 maybe and now if we select species it looks like this so this is what it should look like when you select species as x because we're using scale point all the time if we go back to one of these numeric columns it's using a point scale what it's doing is it's it's taking all the unique values that it sees and giving them a location along x which is totally not right it's totally incorrect a point scale should only be used if you have a bunch of discrete values for example three species not if you have quantities so what i envision could be the solution uh is like you have some ternary operator here like if x type is a categoric is if x type is categorical and you can create an accessor for x type then use scale point otherwise use scale linear so there's sort of a sketch of what the solution should be and i'll leave it to you to implement it and i might even implement it uh next episode if yeah the other way could be implemented is a third menu which is then a stratification variable which is says overall and then by the species i think then you would see subgroups for each of those xy plots oh yeah you mean like you'd you'd see like three scatter plots side by side you could do that or if someone wants to dive in and you'd have a menu which would be let's say z it says overall and then each of the species and so then you could select each of each species or overall so right now we're looking at overall yep um and so that would be another way that way you're not confounding that categorical variable with um the actual intent of the scatter plot true yeah good call you could do it a number of ways you could use color or you could fast it into like three different plots that have the different subsets highlighted or filtered to just show them yeah yeah totally there's a number of ways to do it yep good call and we'll be getting into those i hope to add color to the scatter plot in the future and also do all sorts of different like aggregations like you could you could do a box plot all sorts of options many things many things to do is there time for a very quick question on selections and join sure yeah thank you if you go back please to uh where you select for the label for example this one yes thank you there seems to be a pattern where you select all for a special uh uh value and then you join the same value is there a case where you would do it two different things or is it always the same you would select all for one thing and then you're showing for exact that same thing that's a great question this is the case where we're selecting on the tag name that appears here label and this string is a selector you could select by class as well if you want to but this case is simple they're the same because we know for sure that inside of any one of these given divs this is our parent that we're just going to have one label element if we know that there's only going to be one label element in here then then we can use the tag name in the select all however if there's going to be different instances of the same tag name as children of the same parent then we want to have something different which we have here in our scatter plot because we have one group element as a container for the yaxis and we have another group element as the container for the xaxis in this case then we need to somehow differentiate between the two and i think the best way to do that is with classes and this is the case where what we pass into select all will be different than what we pass into dot join what we pass into select all is a selector string that uses dot at the beginning to signify that it's going to look for an element that has that class attribute yaxis so if if there's no yaxis then it's going to create a new group element and the thing you need to pass into dot join is always going to be a tag name not a class you're not allowed to pass a class into dot join so this is a case where they could be different yeah and you need to do this like if you pass g into here and into here then this block is going to res it's going to find the group element that was left over for the yaxis and it's going to use it for the xaxis and you're going to get rid of your yaxis it's going to be a bug and so that this is the case where you need to differentiate between two things that are the same tag name namely a group element in for in this case with classes perfect thank you very much my pleasure welcome everyone to episode 11 of get it right in black and white quantitative and categorical we've got a full house today uh we've got kostov here adil is here eric is here anita and myself welcome everybody how are things going all right right great thank you all as well all is well um yeah the submissions for this week were quite cool um looking forward to step through them and maybe we can bring up some any questions that that have arisen through trying to do this exercise so here we go here's the forum submissions from last week um oh there was a typo in there make the menus work with species that was the goal so let's see what happened um let's see oh can you all see my screen actually i can't see your screen there we go sorry now you should be able to see it oh great yep all right so kostov uh had some had some great um discussion and i was so impressed uh that you were able to use the little snippet embed feature of this hub that's so cool so we can talk about the specific line numbers yeah this was really helpful to have the snippet in the chat as well thanks for the tip on how to do that nice yeah my pleasure i'm happy to see the feature being used it's a feature that's been there for a while we haven't really used it much but it's supe it comes in handy when we're you know asking questions about the code so the question was um you were trying to add the click event listener to the option element yeah see this is actually what i did too the first time i tried to get the menu working and i was also confused as to why it wasn't working but it turns out that what you need to do it turns out that what you need to do is actually add the event on the select element not the inner option elements and once you do that it seems to work but yes yeah did that work out for you custom yes yes that worked out so i was instead of use applying the listener on the options element and applying on the select element yup excellent so yeah i think event.target.value works um and this is a great leadin to some of the stuff we're going to do today but the followon question was okay now that i have you know the column name back from the menu how do you get the text of it like the the label text and it's a great question um there are a couple of different approaches but my preference is to keep uh sort of metadata about the columns in a data structure that you define yourself and this is also something i'd like to do in today's live coding this way you can associate the value the label and the type for each of the columns which lets you then distinguish okay species is categorical and you could do this by introspecting on the data like checking the type but i like to you know type it out explicitly so that we have this data structure and to be clear you can generate this data structure by looking at the first row of the data so it's a nice way to decouple those two different activities to have an intermediate data structure like this and then to answer the question you could look up the text by constructing a map which is a data structure that's essentially a dictionary looking up key value pairs so yeah um yeah this was really nice i really like the way you structured your metadata as a separate variable and looking into it has also found a subtle difference like when you said map i think previously we also used the map function which had a lowercase m right while this map this had this uppercase m for sure so this uppercase m map that's the dictionary and the lowercase one is like uh a functional functional programming construct is that right exactly that's exactly right and i can see how it's confusing because they have the same name but yeah map is a data structure built in from es6 from i think it's from the introduction of es6 so it's a fairly new data structure if i want to know about it i just typed up javascript map mdn which is the best place to look for documentation so this page here tells you all about uppercase m map what it does how to use it so it's it's different from regular objects in a number of ways but essentially it's the same and it has some nice methods on it hey felipe is here welcome felipe but yeah map you can create a new thing you can set keys and values for that thing and then you can check does it have a certain key all of this stuff is available on maps whereas javascript array map is a method on arrays which you can find out more about here it's it's indeed a functional programming construct where on an array there's a method called map you can pass in a function that takes as input one of the elements of the array and returns something and then you get a new array of just the returned values so yeah that's the distinction between lowercase m map and uppercase m map here and i think we'll we'll end up using this data structure in today's live coding as well great thanks this was really helpful nice so yeah here's the uh the submission oh i like the styling on the menus very nice and it works fantastic beautiful beautiful very nice work awesome let me just take a quick look how it's done nice see here's the trigger nice work so it says if x name is not species so for any others column except for species we use scale in here just like we did before but otherwise use a point scale and set the domain to data.map x value which isolates all the unique values and then point scale spreads them across the visible space so that's why this works nice job let's see what else do we have well assad also took a stab at this and went a little bit beyond as well this is quite impressive so we got sepal length petal width using linear scales species works using the point scale and nice job adding the padding see it's not all the way down to the bottom and then also added an option to use a square root scale this is amazing or a power scale what is this so yeah different types of scales in use here it's brilliant so if we want to see what the scale does we can say okay pedal width linear and then petal width square you can see it's a square root relationship if i remember my high school math is this a parabola or maybe not i don't know but yeah very nice work i have question about this one sure are there circles on top of like many circles in one place it looks like that yeah it looks like there is yep you could see this the edge on this one is is sort of soft i don't know if it comes through in the stream but the edge on this one is really rough which indicates that there's a bunch of circles in the exact same spot yeah and this makes sense because there may be a bunch of data points that share the same value what's the point of square skill ah great question i think here is just an experiment so there's not really any any point per se except to figure out how to do it however the the place where square root scales come in handy is defining the radius of circles based on data such that the area of the circle is equal to the quantity in the data yeah i think we'll get that we'll get to using it like that some in some future stream where we use size but that's i think the main use case for a square root scale yeah and then there's a log scale which is not here but that's useful when the data follows a power law distribution and i think we'll use we'll get into that again also in the future but yeah great work here from uh whale assad let's see how he did this just adding a type property to the various columns very nice band squale square power and then in the scatter plot hook into that value and he even made a separate function called get scale which is very nice very nice refactoring so if it's the code is very readable if it's linear then use scale linear if it's log then use log if it's square then use square root otherwise use power scales or band scales so yeah great work let's see what else yeah there was some interesting discussion using the options array approach works oh eric has one look at this eric's here with us right now let's see what is going on here oh my gosh they're blue that's awesome and it does filtering look at that oh this is brilliant brilliant so it filters by the species you know each particular species eric you want to talk a little bit about um your experience with this sure yeah i uh i guess misinterpreted the assignment so i was just wanting to look at all the data stratified by species this is awesome oh nice yep oh yeah flexbox can be um kind of tricky and the way i did it last time was sort of a shortcut in a way to just overlay them on the top but yeah when you need more complex layout you need different different tools css grid is an amazing tool to use nice that's awesome and i see that the colors change as well now that they're now they're all blue but if you go to one of these it's it's red nice nice yeah this is awesome um so yeah let's just take a look at how it was done options so we've got all setosa versus color and virginica which is this menu here and then that's passed in to the scatter plot and then here's where the filtering happens nice so this is yeah this is great it uses the dot filter method on arrays and if if species equals the z value of d which is passed in through these accessors then include it very cool very cool and i like how you split it out into functions with dot call that's a nice approach very nice yeah it is kind of crazy yeah that's the crazy thing about javascript um and one of the reasons why i love it because it's it's got elements of functional programming and it's got elements of objectoriented programming and you can make it yeah you just showed that map yep slower and uppercase and like what yep it's it's a great playground to be in there's tons of um tools in the toolbox so to speak yep yeah it's getting complicated yeah it is it is it's a journey it's a journey of learning new things using them and this functional and object oriented programming is kind of confusing really and you don't know where which one starts and which one is right yeah and the other thing that's also interesting is how i don't know if this is a style right yeah it does get confusing when a variable has the same name as a function or property has the same name as a function somewhere else yeah yeah it's totally a tradeoff picking variable names but um the one piece of feedback i would i would have for this in terms of like visualization design is that when you when you switch between setosa and versacolor the dots animate and that's a cool effect however it communicates to the viewer that each dot is like the same in a sense you know what i mean it's like when a dot when a dot moves across the screen it makes sense if it's the same exact the same iris flower as it was before like this kind of animation makes perfect sense because when the circle moves its identity remains unchanged it's the same flower that it was however when when this animation happens it's actually kind of misleading because the flower is a different flower that's represented by the same circle as it moves across the screen you know what i mean well i think it's just a matter of you know noticing that that's an issue and we can go in and fix it and here's how i'll fork this so i can play around and i don't think i ever even talked about this but because we didn't need it but there's a second argument that you can pass into dot data which is a function that defines the identity of the thing and d3's internals will use that to distinguish between um you know things that are the same and things that are different so here's here's what we can do we need some some kind of identity across the different iris flowers first actually before we do anything else so here's here's what i propose when we load in the data there is no column that is a unique identifier for each individual flower it's just not there but we can easily make one by saying d dot id equals uh you know the simplest way to do it is just to have an id counter so like id counter plus plus and oftentimes there is something in the data that is a unique id but since there's not here we can just use the index in the table as the id and so just to see what this does it gives us oh sorry d dot id i had a typo wait why is that not working somehow it's broken did i break it i didn't really do anything huh i don't know i'm having um what i like to call a twilight zone moment or i have no idea what's going on so i think i'm just going to delete this and try again i'm getting a little sidetracked here it is the original one is not loading now which is weird huh i don't know maybe there's some outage or oh there it comes there it is maybe the data was just taking forever to load or something i don't know let me try again i want to do this because it's a very useful thing to know okay now it's working it must have been like a data latency issue or network problem so id counter is zero d dot id is id counter plus plus console.log d just to see what we're dealing with here it should be integers see this one id 3133 id 134 the point is that it's unique to each of these different iris flowers so now that we have that um and also we might actually get past i as a second argument to parse rho i don't remember but if we do then we don't need to do the id counter oh we do check that out that's nice that's even easier we don't need to do the incrementing ourselves so d dot id equals i done we're just going to have integers as the ids now in the scatter plot when we do the data binding we can pass as a second argument a function that takes as input one row and returns d dot id and hopefully with that one single change it should actually solve the visualization design issue that we were talking about okay it sort of does there's there's one there's one that's not behaving correctly but it's getting close and this is this is more accurate in a sense more honest in terms of what's happening although there's well i mean i've seen this sort of thing so many times that like oh it's sort of muscle memory at this point i don't know why that one is misbehaving though i'm getting not a number from somewhere is it huh let's try console.log d dot id just to see what it is yeah so these are coming from our index.js there's not a number coming from some other console.log somewhere else but i think the ids are good maybe maybe they need to be strings or something so if we do empty string plus i they're going to be strings now maybe 0 is coming back falsey and that's causing problems no that doesn't do it the problem is that there's a little there's one of these red ones yeah good idea you know this is buggy too because now it they should animate they should animate smoothly yeah it sure does it looks like they're they're exiting and then entering again which is not supposed to happen good idea ah it does not yeah see we're doing this i think i know what's going on we are missing the id in this transformation here so good idea to look at this place we can just solve it by adding the id to the resulting objects and this makes sense i mean it decouples the the data transformation from the rendering which is good but it adds a place where we can forget something let's see if it works now it still exits all the time which is not what we would want oh there's something else marks overall oh there's different paths that it takes so let me add it there too now this is working as i would expect so when you do it like that the right thing happens now the right thing happens as well see okay great this gets to the bottom of it and i think this is like the you know correct quote in quotes correct design where if you change these columns it makes sense that because the identity of the dot correlates to that iris flower but then when you do the filtering they don't animate anymore they sort of disappear and then reappear and if you wanted to be complete about it you would um make it so that the exit mirrors the enter in terms of the animation so instead of animating in it would animate back to zero radius and then disappear that i think would be the ultimate best solution but this is this is pretty awesome as it stands so i think i'll leave that as an exercise for you eric if you want to take that out yeah yeah this this is great learning so thank you awesome awesome yeah my pleasure and the way to do it just a little teaser would be to um put put the transition on the exit okay and have something like grow radius but oh here's actually how you would do it dot transition t dot call shrink radius something like that oh cool yeah can i have a quick question here sure when you have things entering and exiting at the same time which runs first in terms of animation well they that's the elegance of using the same transition they run at the exact same time i see and what would you do if you want things to exit first and then enter again well you would have to invoke the entire code multiple times with different data that's the only way to trigger things that happen at different times or now that i think of it i mean you could add a delay to the whole thing so so that the transition is delayed by a fixed amount of time if you wanted to yes i see so if i want them to exit first i would add a delay to the enter so they would exit and that would that would be enough time for them to exit and then enter will will be involved oh i see what you're trying to do yeah yeah and it almost pains me not to do it right now because we're so close and we're discussing this let me just let me just do it real quick thank you so on exit we use exit.call so that we can use the transitions and then we can call shrink radius and then dot remove calling the dot remove on the transition will remove the dom elements only after the transition finishes which is something that only d3 does really well if you try to do transitions with other libraries like react it's such a pain to do this sort of thing but d3 does it very well now we just need to implement shrink radius which should be pretty easy just copy grow radius and make it transition r to zero like this let's see if it works it does but the delay is problematic the delay is like too much i don't think we need any delay at all as a matter of fact the delay is the fancy thing for moving x and y but for exiting and entering i don't think we need any delay at all hmm not sure what's happening here is shrink radius taking the enter selection as an input shrink radius is just taking well it's it's called enter here but the name doesn't matter oh wait a minute it's adding the transition here oh well if it's if it's adding the transition there we don't need to add the transition here as well and we don't even need this call so here's what we can do just exit dot call shrink radius easy peasy let's see if that works oh i think i think we're not making the radius um we're not growing the radius on update and shrink radius really should remove the elements as well let's see if that works yeah there we go that's how it should be yeah this is exactly what i was hoping for okay cool problem solved and it was a interesting journey to get there great so i think now what i'd like to do is you know present my take on how we would implement this just so that every all the pieces are very clear i was just noticing that the problem we were just working on is not fully done i'm not going to solve it now but just just to show you if you wait for the transition to finish before you change the menu everything works perfectly however if you change the menu twice before the transition ends or rather if you change it three times before the transition ends you can end up in a state like this that's not correct and i think what's happening here is that the exit transition is starting and then you change the selection which causes the filtering to change and everything to update but that exit transition is still going on and when it finishes it removes those dom elements and so to really solve this um eric if you wanted to take this on as a challenge because this started from your work if you really wanted to solve this the thing to do would be to cancel the exit transition whenever you render the data again which may be a little tricky to figure out but that would be the ultimate solution okay give it a go yeah give it a go see if you can uh make it happen because this is i'm glad we got to this point though because this this reveals some of the trickiest aspects of working with d3 and this would be a good solution a good uh a good little puzzle to solve to really solidify the knowledge of everything great thanks yeah so good luck good luck with that okay let's dig into today's live coding by handling species using scale point and manually adding metadata about the columns like type for example so column name and type that's what i'm thinking of as metadata before we dig in though i want to talk about these terms quantitative and categorical these are terms that i got from tamara munsner's book tamar munsner's textbook called visualization analysis and design which is a great book really great book highly recommend and it's used in a lot of classrooms you know people teaching about data visualization use this as the textbook i use it for example when i teach every fall and that book defines terminology that can be used across you know discussions of visualization design so on and so forth i mean there's a lot of different terms that have been used over the years and she sort of defines it like okay these are the terms i'm going to use so i'm going with her set of terms to define different types of attributes in the data and the term attribute that's another term that means column some people refer to them as columns i often refer to columns as columns because that's what they are to me but in a data table sense columns can also be called as attributes and attributes have types much like variables have types and the types of attributes that we're dealing with here when we come up against this problem of handling species in our drop down menu is categorical categorical attributes have different type things in them meaning not numbers they are not numbers they're strings or identifiers for for things that have identity so the identity of the values in a categorical column categorical attribute are different and in the case of this iris data set we've got a bunch of quantitative columns that are numbers that you see here on the left but then we've got one column that is special and needs to be treated differently than all of those other columns that are numbers namely species and the reason why it's fundamentally different is because it's not numbers it's strings it's a different species of a virus setosa is one species versus color is another and there's one more but the point is that there are strings they're different things they need to be mapped to the visual space in a fundamentally different way and so that's what we'll get into here any questions so far about this all right i think i'll move on okay so now we'll actually handle species and we're going to use scale point which is kind of like scale linear but it deals with categorical attributes you can give it different strings and it will it will spread the unique values across the space which is how we want to do it all right so let's dig in the place where i'm going to start from is animated scatter plot with menus this is what we created last week and just to give a quick recap of what we did we added these menus with these animated transitions so you can change x and y to be the various quantitative attributes of the iris data set but when you select species it just breaks it crashes and the way we did this is we introduced a menu component which is using the d3 reusable charts pattern but for a menu added event you know event infrastructure to that thing and then in index.js we add a a listener for the change event on these menus which will change the x value accessor of the scatter plot instance and rerender it with svg.col and in scatterplot whenever it gets rendered it redefines these these scales x and y scale and it's here in the definition of the scale that we're going to have to make some adjustments so to start i'm going to fork this one i'll call it scatter plot with menus that handles uh um let me come up with a nice title including species thank you that's perfect perfect thank you okay so what we want to have happen is that when you select species here in this menu and for y for example it should spread out across the y coordinates the different values but it doesn't do that right now let's see where we can jump in to solve this issue to me it makes sense just to start scratch that to me it makes the most sense to start here at the definition of these options for the menus and what this does here is it defines the entries of our menu essentially that's the id for the thing this is the text the label the display name that appears in the menu i think the the most sensible approach would be to introduce another property on these objects called type and the type of the species column i would say using tomorrow munzener's terminology is categorical and the type for all the others is quantitative so just for completeness sake i'm gonna fill all those out run prettier yeah unfortunately because it gets to be long i think that's okay it's explicit so now we know when we select a given option what type it is which is information that we need in order to change the type of the scale that we use so now that we've got this in hand we need to tell the scatter plot you know what type of column it's dealing with we could do that in a number of ways but i think this the most straightforward way would be to add another accessor you know at one of these getter setter functions on the plot called x type because we already have x value it's working perfectly fine we don't want to over complicate that um but i think we can add another one called x type and the invocation would be something like dot x type and then we need to figure out what the type is for the column so we have column which is you know the name of the column and we can use it to construct the accessor like this but we also need to use it to get the type somehow i'm not sure how and because i'm not sure how you know this is a perfect place to introduce a level of indirection i'm going to i'm going to call a function called get type just just one question i was trying to do this uh at home but i was not able what i tried uh uh first i rewrote the get data i put outside in a model and and then i try to get the json that's inside your your github together with the data there is in the site where i got the data there is a json there that has all these options already the type really yeah so the gist in here yes and i try to use the json uh but i'm not able to get the data out of the scope when i try to to put this in a in an array or in a dictionary uh i lose i lose the data inside the loop i have the data right when i get outside of the loop the they don't vanish so huh how could we use this so we don't have to hard code like uh the type string or the type number right from from this right and it's so funny i actually forgot that i put this here um let's see when did i make this this was like years ago that i put this up here and at that time as well i was thinking about metadata for columns because it makes sense to be able to manipulate the metadata along with the data set which is totally possible so i mean we can use the raw url here and we could potentially use d3.json to fetch this file and use it but uh for simplicity's sake i'm just gonna you know paste it into the code but because we have this data structure you know uh we could potentially do it like that and years ago i was thinking about like oh i'm going to develop a data publishing format where it's supposed to be a csv file and a little json file like this that describes each of the columns don't give up on that right [Laughter] it's not a bad idea i mean it would be super useful to be able to have like a standard that you could just plug in um so i'll keep that in mind but yeah the way to do it would be d3.json to fetch this file and then use promise.all to fetch the csv and the json at the same time and then run some code after both of them have loaded but no matter where this information comes from we're going to have to implement this function get type for the column oh just yes yep sure and so let me just put that right here get type is a function that takes as input the column and returns the type of the column now the name column might be confusing because conceptually a column is described by one of these objects but what this really is is the column value meaning like the name the name of the column so it's just a string it's it's not the entire object if it were that'd be simpler but it's just the string sepal length so you know honestly to make that more clear i'm going to call it column name or column value i like to think of it as column name that way column a keyword column attribute i don't know in a way i wanna i wanna i want this to be name like this but it's a refactoring that would mean we'd need to update the code elsewhere i don't know maybe i'll just leave it like the way it was but we just have to understand here here's what i'll do i'll add a comment say column is a string corresponding to the value property on metadata objects can i can i ask a question about the problem we're trying to solve here sure thank you so am i right to understand that we have an array of objects and we have a value a unique value for one of the properties of those objects somewhere in that array and we want to reach the other property of that same object within the array that's exactly right yeah we have this as in we have the string corresponding to the value properties in these objects that exist in this array and what we want to get is the type which is a strain that comes from a different property of those objects but we have a array of objects right correct and we we need to get the value of the object inside the array okay okay yeah we have to given the column name for example species this function should return the type namely categorical yeah and so one one way we could do this is you know iterate through each of these entries and then when it matches when the value matches will have access to the entire object and then we can just access the type of it and that would look something like options.find which is another method on arrays d.value equals column this would give us the object and then we could just access dot type that should work yeah cool yes and and that will enable us to get to jump from any property to any other property within the same object exactly in an array of objects correct perfect however the dot find method on arrays will check you know the way it works dot fine the way it works is it checks each and every one it says okay let's take a look at this one and it passes that object into this thing and then this function runs it returns true or false so it says is d dot value equal to column it checks the first one it says okay d dot value is battle width is that equal to column which is you know whatever column we selected if it is then it returns true and then array.find returns that one that matched but if it returns false array.fine goes on to the next one and it passes in the next one and says okay is that one the same no it's not the same go on to the next one check it again if if it is the same then the define method returns that object so if it matches species for example it would return this entire object from this expression here that's why we can say dot type we could we could just as easily say text to access the text so because it iterates through each and every one i generally don't like to do it this way because it's big o of n algorithm wise that means the algorithm takes n steps where n is the number of columns in this case it's it's not that bad there's only like five so it's not really it's not really an issue so this would work perfectly well but i kind of do want to show the way i would do it which is to create a lookup table using the map data structure but any questions so far i just had a quick question around this find method yes so if like it's not present in this current table lookup example but say we had multiple columns or multiple columns with the same name so species was appearing twice so what find like return both those objects or will it just return the first uh occurrence of the of the selection selected column or the column that we're trying to find that's correct it would just return the first one okay okay that's what fine does it just returns the first match that it encounters so if you did have species as the value for multiple of these which you wouldn't want to that would be a bug but if you did uh it would just return the first one and not the second one wait thanks is there a find all method um not the case here but uh just yeah this is what i would do i don't think there is but there is a filter which is essentially does the same thing yeah okay yeah exactly yeah so if you wanted to do that you would say options.filter and you wouldn't want to say that type because the result would be an array this would find all of the matches it would so filter is essentially find all that match perfect okay clear now i just want to before moving on to the implementation with map i just want to make sure that this is actually working change the filter for find oh thanks so to just check if it's working i'm going to say console.log get type of column this will let us just check if it's working and this is on the um the x menu so when i change x it works it says quantitative excellent yeah so if i if i use species it outputs categorical perfect so it works quantitative quantitative quantitative quantitative categorical if it's species so that part works that's great x dot type is not a function but yeah we'll deal with that later but first because we're on this topic and this is such a common thing to have to do i just want to say this is not how i would actually implement this how i would actually implement this is to create a map i'll call it um column two type is a new map data structure and this is built in to the browser you don't have to import any libraries or anything it's an es6 feature and map has a number of methods like set and get so column two type meaning the way i named it like that because it's a lookup table from column to type you know from column which you use as the keys to type which are going to be used as the values and so what we can do is loop through all of these options maybe something like options dot 4 each is a way to iterate through these and we could say for each of these options we can say we want to set the value and the key will be option.value and the value that the key maps to which is confusing because the value you know that we're using the word value here but the the value that the key maps to will be type option.type so how do we put these together this is where we can say column to type which is an instance of the map data structure dot set and set takes as input two arguments the key and the value okay i think this uh solves the problem that i was having when i imported from the from the website the json ah because when i tried to to set the uh what i did i create a external array like before the column to type and try to push the value inside this array but outside this scope when i try to get back the array it's empty inside the four each if i if i create a array outside and try to push the values inside this array when it's outside it's empty so i think this set may solve this yeah and it's important to connect the dots between the the data structures because what you need to implement this get type is a a dictionary essentially a map a key value mapping where you give it the key gives it gives you the value but if you're starting from an array you have to do something else like dot find which traverses each element of the array which you don't want and you can't you can't say like options at index column which is you know you could use an object as a map as well but um but yeah i think this does solve the problem and once we have built up this map we can access it uh but first just to really comprehend what's happening let me say console.log column to type so we can see what this map ended up looking like it's a map instance that has a bunch of entries and this is just how chrome presents it to you in the console it means the key is pedal width and the value is quantitative and this double arrow here means like it maps to you know if you give pedal width to the function dot get it will return quantitative and it'll do so efficiently it doesn't have to check each one internally it implements probably like a hash table kind of a lookup scheme where it's big o of one instead of big o of n in algorithmic terms it doesn't have to check all of those it just gives you back instantly the one you that you want so if we say column to type dot get column inside of get type this should work as well and to test it we can change the column and observe that yeah okay it still prints out the right thing quantitative and if i switch to species it outputs categorical okay this is working this is working however this is not the best way it's not the simplest way to do it the simplest way to do it is to take advantage of a way of calling the map constructor where you can actually pass in an array of arrays and each of those inner arrays has only two elements the key and the value that way of doing it is much more concise and all you know although it is a bit more cryptic and the way that we would do that is is we can pass in options.map again the functional programming construct that lets you give it a function that function accepts each element and the return values end up as a new array we can return an array that has just two elements option.value and option.type and this should work as well let me see if i got it right yeah seems to work just fine so just to review what i did there options.map maps over all the options and it returns an array that has the value and the type the first thing being the key of the map the second thing being the value in the map and this is just an alternative syntax for doing the exact same thing as this other thing does namely looping through all of the entries and calling.set and to simplify this even further we could use es6 destructuring to destructure value and type from the argument and then we don't have to say option dot and option dot so all of this is a roundabout way of you know exploring the ins and outs of constructing maps um but since it comes up so often i wanted to dig into this this level of detail because you know i think it's it's really important to fundamentally understand how to use maps in today's javascript world i see there are some questions let me see what is this and is it live yeah it is it's live why are you not using typescript well i'm not using typescript because typescript is a pain to use in my experience then you don't have to write comments yeah i know yeah it's just it's just a pain is this microsoft monaco no it's not it's a viz hub this thing that i made and you can use it too anyone can use it you can fork this stuff and get a link to it what are we doing here i love these questions these are great um it's a new visualization tool people can use yeah i mean this being vishub yeah i created about two years ago d3 has been around a while as larry points out thank you larry yeah d3 has been around a while but the apis have changed so that's why i'm doing this tutorial now to like use the most modern way of doing it okay thanks for those questions okay um now we can move on to the next phase namely implementing x type but before we do that i just want to make sure are there any questions so far about what we've done here so far please go ahead that song oh she just said it's so complicated yeah i know there's a lot of details there are a lot of details to remember but um and the first time you see stuff like this i realize it can be overwhelming that's why i wanted to like yeah this happens all the time first time i see something it's like wow i'm not understanding it and once i get into it it's like oh it wasn't that bad yeah and console.log is your friend i mean if you were on your own you can say console.log options.map value type and see what it is and and use use console.log to interrogate what you see here anything that's confusing to unpack it and understand what's what's happening in that intermediate stage see it's an array of arrays and i realized when i described it it's a bit abstract but when you console.log it and you see it you can understand oh it's an array of arrays with the keys and the values and also if you're on your own and find the stuff confusing it's good to consult mdn which is the de facto standard documentation for the builtin stuff in javascript such as map and it says right here it describes the map constructor creates a new map object and it says right here that you can pass an iterable into the constructor which is what we're doing and it just it documents that right here it says what is this iterable it's an array whose elements are key value pairs in the form of arrays so here's an example that maps numbers to strings so yeah if you if you're ever looking at this stuff on your own and feel oh my gosh this is so confusing use console.log and and and just do google searches for the data structures that we use like map because the documentation is great and also the same goes for d3 the d3 documentation is really good so if you see a d3 method that you don't know like just google it find the documentation um i do it all the time but it takes such a long time it does it does there are a number of um there are a lot of rabbit holes that you could go down and get distracted really time consuming and just takes a lot of time yeah i would say it's well worth it it's an investment in your future yeah i agree that's why you and you have every other week yeah i changed and that makes it difficult because for example i'm so behind i am supposed to catch up yeah i wish it was every other day well actually i was going to announce it at the end but since you brought it up i did change it to be every other week not every week so going forward is going to be every other week thank god i updated the meetup page why because yeah it's for me too it's a bit hectic to do this every week anyway are there any other questions i just wanted to ask what what would happen if you have two entries with the same keys so you'd be like while you were trying to iterate you're passing two keys two exact keys to in your map object that's a fantastic idea well if we if we go back to this other variant that i did here with this variant it's easy to understand what the answer to that question would be if you understand the semantics of dot set if you call dot set multiple times with the same key it will change the value and so in this case let's say we had two of these where species was the same what this algorithm would do is call dot set passing the key species and it would set the value to be this one here however the next time around you know in the for each when it gets evaluated with the last option it's going to call dot set again and so when it calls set the second time with the same key the way that maps work it's going to overwrite the first version of it and so we're going to end up with a map that only has one value for species and it's going to be the last one encountered in this array so that's a complete opposite of find in a way exactly it's the opposite of find yes yes that's a great insight the way find works is it checks each one and it returns the first match the way this works is it sets up entries in the map for each of these entry entries in the options array one at a time and if it does encounter the key multiple times it overwrites it so essentially it's putting the last occurrence of the match in the original array as the the value in the map that you get thank you yeah my pleasure and i'm not so certain what the behavior is when you use the constructor like this but it may well be the same yeah it may well take the last match although i'm not 100 sure so you know we can do we can actually test it out and this is the beautiful thing about coding too you can use the code to ask questions about the code for example um oh there's a breakage column to type is not defined i'm sorry forgot to uncomment uh sorry i'm just a little disoriented but yeah let's do this little experiment to figure out what the answer is all right so when we use this variant that uses for each goes through all of them i would expect it's going to give us the last one and if we select species it outputs categorical which is the last one see the first one was quantitative and we actually have the same key here multiple times now let's answer the other question of what if we use the map constructor like this is it the same so if i select species it outputs categorical so the answer is yes it is the same that takes the last one great question great question i love how it digs in a little deeper yeah thank you okay now let's go ahead and solve the next piece of this puzzle now that we know what the type should be when we select it we need to pass it into x type and you know while we're at it let's pass it into y type as well why type is get type of column oh there's some error there's a syntax error i don't know what that was about so i'm going to also call why type here okay it's fine nothing was there was no problem so now from the outer sort of view of things we're invoking it where we want to be invoking it we're setting y type when we change the y menu and we're setting x type when we change the x menu now the task at hand is to implement that method in our scatter plot so let's go into our scatter plot code in scatter plot dot js we've got a bunch of these getter setter accessors and let's just make a few more we've got x value and y value i'm just going to copy paste these and change value to type so x type is going to be x type change y value to y type and we're referring to the variable y type and x type those don't exist yet so let's make those at the top of the file like this now these are available to us when we render our scatter plot let's just make sure because this is where we're going to want to use those let's make sure it's available with console.log x type here so we get undefined initially which makes sense because we're only passing it in when we change the menu but when we do change the menu we get quantitative for these and if we type if we select species we get categorical which is exactly what we want okay this is great and i think what we can do is say if x type is categorical using this ternary syntax we create a linear scale otherwise now this is where we can use uh category exactly yeah yeah the good call so i got the order reversed it's going to be scale linear if it's not categorical but if it is categorical then it's going to use scale point just use prettier to format that and if it is a scale point we can set the domain to be data.map x value and what this what this does is it returns an array of all the different x values including duplicates so it's going to return like versa color versus color versus color setosa satosa setosa but then when you when you pass that array into dot domain the scale will internally figure out that there are duplicates and it will deduplicate it so the domain will only end up having three entries the unique values of the species column and then dot range um actually should be the same because we want it to span across the same space in pixels so this should work let's see if it does if i change x to species there's some breakage let's see what it is oh scale point is not defined yeah i forgot to import it we just need to import that from d3 along with this other stuff now it should work okay great check it out it works hooray we solve the problem yep everything's working the quantitative stuff is working and when we hit species it transitions to this which is the behavior of a point scale by the way it just takes the values that it sees in the order it receives them and identifies the unique ones and spreads those across the space across the screen it's exactly what we want and i must say i am impressed by the way that d3 axis handles the transition see how it fades d3 axis is brilliantly implemented because if it is given another a linear scale see how it animates the numbers it animates the ticks but if you pass into d3 axis with the transition a different type of scale it does this nice fade animation which is just brilliant brilliant but anyway there's a little bit of cleanup work to do here but um any questions so far yeah just um one question here is eric um just curious uh how hard would it be to actually um show um all the data that are in each of those categories as dot plots so in other words in other words some of those as you mentioned earlier are on top of each other but you would really have sort of a frequency is this what you mean by dot plot yep yep so so so what you're trying to show is uh almost the distribution across those categories so that you can see where the peaks are so that's hidden right now yep but it's a sort of a natural transition but um as i'm thinking about it just trying to get a sense from your expertise how deep one would have to go and actually do that not that we do it here but i'm just curious yeah it's a great question go ahead i i just want to suggest an idea for doing that and and let you see whether it works or not so we yes that's right to implement that what you described eric the first thing i would do is just look at it from from a bird's eye view and say like what should the architecture of this be should it be one visualization or should it be a parent visualization and a child visualization where the child is one of these reusable components like the scatter plot but for a single dot plot got it you know what i mean and then i would i would get it to work that's probably how i would do it i would get it to work for a single dot plot and like you said costa that requires a step of binning where you take these um well in this case you can just use the the different values that are present here i think it increments by 0.1 that's the resolution of the data so for each one of these unique values you would want to bin them and count how many occurrences there are for each of these unique values and that there's a feature in d3 called d3 bin i think or d3 histogram if you google search d3 histogram you can see this in action so that's a data processing step so first you need to do that binning so that for each of these numbers you know how many occurrences there are and then based on that after that binning happens you can visualize that as a dot plot got it and that would be one of these components and then what you're doing essentially is called small multiples dot plots where you would want to actually have three dot plots one for each species and so then you would need to change this scatter plot code completely so that for each of the values across the xaxis here it would iterate through those and for each one invoke that reusable dot plot instance so you'd have three instances of a reusable dot plot that's one way to do it okay that's was that that's sort of just curious how you'd approach it so um not that obviously we tackle it but it's it yeah so that's how you would do that but there's a uh if you step back a little there's another question what is the best visualization design to show this type of data and small multiples dot plots is one option but there are a number of different options there's actually one option that's very low hanging fruit for us that we could do right now and i love doing this because it's so simple on the circles we could set the fill opacity to 0.2 in the css um i don't think that actually worked maybe it's just opacity yeah there we go that worked so if we set the opacity on the circles and we subdivide them by species you can see it's doing it right there you see what i'm saying yeah yeah i love it so this is a simple modification we can do to make the visualization communicate the information of density like how many overlapping dots there are which is the same thing that would be communicated by the dot plots yep yes so this is a bird's eye view yep okay so the bird'seye view meaning what i meant by a bird'seye view is you step back and look at the design space of the visualization this is one other option there are so many other options i mean you could have small multiples box plots for example you could have small multiples histograms like bar style histograms you could have small multiples of violin plots so many different ways i mean once you get this data structure and you want to visualize it there are so many options but you can frame it as small multiples meaning you want to implement one instance of it and then just multiply it across the different values that's really cool nice yeah and r by the way ggplot in r does all this stuff okay it's brilliant the way it does it so yeah stuff to look into thank you yeah my pleasure all right let's finish this up here it's almost done but we've only done it for x and not y and this code itself can be cleaned up whenever i see duplicated logic like this dot range dot range copy pasted its exact same thing i asked myself how can we get rid of this duplicated logic in this case it's fairly simple because this expression if you put parentheses around it returns a scale it could be a point scale it could be a linear scale but it returns the scale and so we can essentially factor out the call to dot range so that it gets applied to the returned scale whatever type of scale it happens to be then i just run prettier on that and and this is what we get yeah i would prefer this just because it has less duplication so to be clear this set of parentheses creates the scale you know a different type of scale depending on whether x type is categorical or not it sets the domain but it does not set the range but whatever scale comes back from this expression we call dot range on that scale whatever it is so it's just a simpler way to do it now that we've got that we can just do the exact same thing for y i'm just going to copy paste it change x to y all over the place so instead of x value it's going to be y value but with the y scale we need to be careful about the range because it's different it's height minus margin dot bottom and margin top top so i'm going to take this definition of the range and use it here and get rid of our original y scale definition and this should do the trick for both x and y let's see if it does x species works y species works excellent and one last little thing that i don't like about this is that there's no padding it goes all the way up to the edge maybe it's just personal preference or stylistic but i like always to put a little padding and the way where we can put that is right here scale point.domain.padding that's a function on these scales i'll say 0.2 yeah so if we look at it now we get this nice padding it doesn't go all the way up to the edge which i just find kind of i don't know distasteful it has space to breathe the labels you can read all the labels now so virginica used to be off the screen and just as the final step i'm going to call dot padding in the case of y as well so now it works for both x and y and the the labels get cut off yeah let me just change the margin to address that problem because what i want to do is finish today with a complete product that works for all the cases that you select but where's my margin margin oh it's right here margin left let me set it to 150 pixels and see if that's enough for species okay that's a little too much maybe 120. all right there we have it any questions so one question i had was with those drop downs there um i couldn't find where one does this or if it's even possible to change the font and the size of those drop downs oh is that a css thing that's a great question you know the html select element and the options it's notoriously difficult to style with css so if you're working on a product where you need styled menus the best approach might to go might be to go seeking out some thirdparty library that implements a dropdown widget that you could style with css okay yeah explains the hunt yeah they're right it's it's a hunt yeah and like you just it's very difficult to style these the way you want um but again it's a whole other level of complexity to like evaluate the different libraries and pick one and figure out how to use it um however with this d3 reusable chart pattern you could implement a menu component just like this having the same api you know having the same methods and everything but internally it could use that thirdparty menu library that would be the approach that i would suggest okay thank you but that said i was actually surprised to see that in one of the submissions the menus were styled let me see if i can find which was that you cost up yes kostov how did you do this i think i normal css to do this see this is beautiful it has that custom font that's awesome yeah i just wanted to make the phone consistent with maxis menu so i just use this select uh html and apply this property here brilliant so you know there you go all right i was trying to figure that out yeah there you go so it looks like it looks like you had to style the select the label and option to get it to work yep so i think the labels were for these axis labels and the option and select work for the drop down right yep so there's your answer eric should work thank you and i was actually quite surprised to see this working because i've struggled in the past to try to do this but it looks like this works yeah i was just playing around with it i totally forgot that it worked for my case that's awesome and i wonder if it would behave correctly if you try more advanced css like setting the the background color or the you know the roundedness of the edges i think you might run into a wall beyond which you can't customize but worth exploring for sure right but yeah this is very nice and i i have to say it's really nice how these animate or how your labels animate really nice work all right well i think that's all for today i thank you so much yeah my pleasure thank you all thank you very much thank you yeah thank you very much and uh yeah like i said it's i changed it to every other week so just mark your calendars it's not going to be every week and i will leave you all with an exercise for this next two weeks i want you to find a compelling data set look around online for different data sets and uh yeah try to find a compelling public data set and just search around you know i would suggest coming up with some idea of like data that you want to see visualized that you've maybe seen in the past or thought about deeply like some sort of existential like question about society or i don't know climate change the keeling curve if you the killing curve would be a good one um but yeah find a compelling data set that interests you and the way to do it is just search for the topic see if you can find any visualizations that pertain to the topic track down their data source uh you know follow links until you can get to a downloadable data file like an excel file and then export it as csv or just try to find a csv or a json file load that up you know fork the scatter plot we made with the menus load in that data update the data parsing logic and i want you to actually explore the data using this scatter plot with menus because now that now that the scatter plot has the transparency uh we can see the density of things and now that we made it handle species it can handle any column that's categorical and i want you to write up the key insights that you discover in the readme of the viz so fork this modify the readme.md file to write up like bullet points of like this is cool this other thing is cool you know interesting insights that you find about the data not about the vids or the coding but i want you to like actually explore some data and uh yeah share your results in the forum i've made an entry for for today episode 12. here it is viz hub has been my passion project since 2018 and um i've rewritten it twice and i'm i'm embarking on rewriting it again okay because i went in the other day to try to redeploy and like upgrade the dependencies and it's like it was just so heavy feeling you know a code base that i've been working on for two years and so i really want to like do a deep dive and like make vidshop as good as it could possibly be and uh focus on things like you know hot reloading of the code is is what i've really been intrigued by and also having some state associated with the visuals so the if you want to tweak something you don't have to change the code but you'd have like a knob or a dial that you could just touch and tweak and see the feedback instantaneously so i was just very um inspired to start working on the next the next iteration of vishub so that's that's what i'm going to do but but this has been a really great experience this series because it's developed this little following which i think is it's amazing it's it's it's a golden little um group of folks and and i just want to say i really appreciate all of you who have participated it's been really fun and i've it's been really great to see you all learn and grow and do new things that you've never done before so thanks for that now thanks you for all of your being so kind to to share your knowledge you know it's my pleasure yeah and it's it's you know it's proved it sort of proved the one of the original vision goals of of this hub and my teaching to to reach a wider audience of folks who might not otherwise be able to learn this stuff you know may not have access to you know a university so and it worked it's it's working i mean i've i've seen people from all sorts of different countries um if i look at the google analytics of his hub it's not just the us it's global the audience is global particularly in like developing countries which which i'm so thrilled by i just that's so happy to see yeah i'm for example i'm from chile and you know last year i it was really a struggle or maybe 2019 it was really a struggle to find here uh a curse on d3 a like a leap course uh and well in the internet there's a lot of tutorials uh but but i you know the the ones that you produce are are the ones that really made me understand the tree and this one that was synchronous it was really also i i've learned a lot thanks to this oh great great i'm happy to hear that yeah yeah i remember being on and seeing someone from new zealand i think was on yep so we had new zealand india us exactly it folks from india i think kostov you're located in india right yeah yeah i'm from india quite a diverse set that we have here oh i'm curious where do you live in india uh so i live near delhi ah nice up north you know i lived um i lived outside of nagpur for four and a half years oh well i didn't know that and actually i developed visa when i was living in india i was riding my scooter my honda activa to my little rented office and uh coding this hub all day nice yeah i also like would be definitely interested in like you know seeing this grow and i found it really nice that feature that you just write your code and you automatically see the changes you don't have to press any button or build right right exactly activity yep and and that's that's one of the things that i love about this hub too but the way that it works right now is that every time you make a a change it tote it reruns the entire page and i want to move away from that i want to share with you all brett victor inventing on principle this talk was hugely hugely inspiring to me so in this case the the value because he's got this idea that yeah check this out he's got this we are not seeing the anything oh i'm sorry i have to share my screen in this in this system too i forgot to do that it's live on youtube but not in the google meet but now you should be able to see it okay yeah this is the thing i just want to play this because it really resonates with me spent working in the code working in a text editor blindly without an immediate connection to this thing which is what i'm actually trying to make so i feel this goes against this principle i have that creators need an immediate connection they're making so i try to come up with a coding environment that i thought might be more in line with this principle i have so what i have here is i've got this picture on the side and the code on this side and this this part draws the sky and this draws the mountains this draws the tree and when i make any change the code the picture changes immediately that's what i want to have so the code and the picture are always in sync who did this just change things in the code oh brett victor yeah i see things changing the picture but check this out he's about to do the craziest thing and now that we have this immediate connection between the code and the picture we can start thinking about ways of changing the code other than typing so for example this number here is the length of the branches if i want to control that number i just point my mouse to it hold down the control key and i can dial it up and down that's what i want oh wow i can see what it looks like for big bridges or small branches and i can kind of converge on what feels right to me artistically and this works really well with some of the stuff in the past it's amazing so this video by ve it's from 2012 this video by brett he's a visionary yes and what strikes me about this is it the way this environment this little environment that he custom built for just this one talk it it seems to not reload the entire page it just reruns the code in the page without having to reload the entire html and so i think you know this is the direction i want to take vishub i want to make it so that you can author your code and and updates to the code should take on the order of milliseconds to execute without having to re run rerun the entire html and then from there i want to add like the ability to extract different variables into like little widgets on the side like in the editor of this hub there should be a visual editor with colors and numbers and strings and as you change those it should update instantly so yeah i just wanted to share some some context for why i'm why i'm ending this this series right now so yeah that's it have you been in contact with him on how he's done that no okay i mean he's he's a towering figure i mean brett victor he's yeah so i don't know if he's the kind of person i could just get in touch with you know he's like this this like celebrity figure yeah you know i worked at apple for years and years i think he developed a lot of the the early ui for like the ipads and stuff but hey that's not a bad idea maybe i should just send them an email yeah do it worth a try i guess and yeah someone asked how to support viz hub yeah the best way to support it right now is just to sign up for the the paid plan which is four dollars a month there's current there are currently not that many customers and it's not making money it's not even paying for the servers but um and this is another direction i'm going to take it i want to add more features that people would be willing to pay for so if anybody has ideas i mean i have a lot of ideas like pay for storage pay for collaborator seats pay for white label embedding where you could embed a viz onto a website without the vis hub logo in it custom domains for visits i mean imagine if you could create something at visshub and create it set up a domain name to point to that and so this help could be your website hosting provider so i've got a lot of ideas if anybody else has more ideas let me know and i'd also i also want to make it the best tool out there for professors and teachers to use for teaching web any any courses to do with web technology so what's the best way to get to get in touch with you oh just just email me okay uh at gmail yeah current.kelliher gmail.com all right yep yeah and um i'm on twitter so you know after i end this series i'll still be active on twitter and i will definitely announce um so it's yeah curran what is it current keller on twitter this is where i'll announce um any new developments or activities um okay and i i am thinking of doing like a a beta program where where i invite people to test out the new version of vis hub that i'm developing and so if anybody would be interested in that let me know um i don't have any any onboarding form set up or anything like that you know but let me know i'd be happy to great yeah i'll keep you in mind all right so let's let's dig into this i i want to just wrap up the series by reviewing all the last uh the work that everyone's done for the last assignment and uh responding to whatever questions that come up i don't have any prepared material that i'm going to go through today so it's really just more of an informal discussion sort of a thing so let's see oh kostov is here with us um custom you want to walk us through what um what you've what you've done yeah sure so like i took a copy of the scatter plot templates template that we prepared last thing and plugged in a data set which comes from this tidy tuesday project which also runs on twitter so this is run by the r for data science online learning community and they release like new data sets every week and this was a data set that i hadn't explored before and just wanted to try out like explore it a bit further and thought like using d3 and the and all the things that you've learned over the past past weeks to create this wiz it shows the i think the median income median household income over time and varies by the different communities so as you can see that there's a significant difference between like whites and blacks and hispanics so this sort of brings out the income inequality which is still prevalent wow this is amazing and what where is this localized is it for the us or globally or yes so this is just in the u.s so it's the entire us yes yes wow i think the original data comes from the us census right oh great urban institute that's a great group great great work good stuff uh i i have a question for current about this beast yeah it's okay sure um is there a way because i really love the idea but but i think that maybe if the labels of the years are exactly a correspond exactly to the to the point it could be more easy to to read is there a way for the xaxis the scale xaxis come on process that or or do that let's take a look yeah i think that would be a very nice edition but before we dig into that i just want to say that this is exactly the kind of work that i was hoping for where it actually looks at a an issue in the world and i just want to take a second and i will i will get into that that question but i just want to take a second and think about what it means that white people in the u.s are earning it looks like on the order of you know 160 k up and down whereas black people in the u.s are earning on the order of less than 40 000 a year i mean that's profound that's that's a profound piece of information also yeah i was also surprised when i looked at sad to revisit the raw data just to confirm like i hadn't read it incorrectly or right like is that correct like oh my gosh that's what i was wondering there's such income inequality like this is the median what's the the metric yeah this this is the median median household earnings adjusted for inflation i think yeah it's adjusted for inflation what is shocking to me as well that that that this difference is not improving in time right it's not improving at all it's it's you know it seems to almost have been getting worse and if you if you if you inspect the median of the white group again you would see that they have increased in time right rising up compared to the other ethnic minorities and this big gap this big gap here must have been the 2008 um financial yeah financial crisis recession whatever they call it so that seems to have impacted everyone but it is it is shocking and like disturbing like why is it that white people earn so much more than black people i think that's that's ridiculous and just i you know thank you costa for selecting this particular data set and servicing this particular issue i think it's a very important thing to look at and can i say as well you brought last time you brought an important point that animation need to serve a purpose and it's nice seeing it's not it's not very nice but it's it's very telling seeing those points drop when you start yes i agree it's a very great use of animation yep and i would be curious to to do a similar analysis for different countries across the world and see if the gap is so high in other countries as well or if it's something that's unique to the us i don't know i haven't looked at the data but that would be an interesting analysis or maybe have this broken down in males and females as well right that would be another good analysis yes for sure for sure and then once you do that the possibilities of different ways of visualizing that increase dramatically because you can show multiple things at once and yeah that's one thing i wanted to get to with this course of like the variety of visualization types but we didn't we just essentially worked on scatter plots but i think that's okay because because you can build things that are interactive and scatter plots actually cover a huge range of data and so the first first thing you can do with any data set is make a scatter plot so yeah amazing word costume now um who asked that question about aligning i did great great let's dig into that because i agree i agree this this apparently uses the builtin axis of you know from d3 which is not the same as the data points and so makes you wonder you know for a given dot what year is that right and i agree that that's a that's a good that's a good issue that i want to see fixed i'm just scrolling through to see what is actually going on here's the xaxis so if we just comment out that oh i forgot the dot call line if we just comment that out it renders without the axis which is fine although i kind of like i kind of want to keep the visual elements of the axis um so i'm just thinking how could we do this we could do some other rendering logic where we we render these tick tick marks ourselves or we may be able to configure d3 axis with a set number of points i believe we can do that let me just consult the d3 documentation yeah i think so ticks so yeah the nature of the tix method is not just one format see this is the format that we're using like 10. and then oh put something in the chat oh which jet google me nice so i'll copy it from the chat and take a look this is i'm pasting from the chat c dot tx6 i still don't think this will do what we need because what i'm thinking is we may be able to pass an array of specific values into ticks that's what i'm trying to figure out see this this one here you it this passes in an array to ticks which leads me to believe that i think we can pass in an array of of dates so let's just try it instead of passing in ticks 10 what if i pass in an array that has just a single date where it's like uh the year 2000 does that show up no if i get rid of the formatter no do i huh i'm pretty sure there's a way to specify oh look here it is sorry to set the tick values explicitly use access dot take values yeah yeah yeah this is what we need this is what we need all right let's try that so i'll just undo to where it was before and then what if we say dot tick values and here we pass in a new date year 2000 boom that works see right it says 2000. and so now what we need to do to implement your idea is to just isolate the unique dates that appear in the data which should be relatively straightforward let me see what is the structure of the data well we already have x value which is perfect and i think this is the function that we need right here data.map a function that just returns all the x values all the dates or for that matter for that matter we can um um wait a minute wait a minute i was just thinking could we use x scale domain no we can't because that's the extent of it which we don't want so i'll just try this if i copy that down into the place where we put new date that does the trick awesome that was success that's impressive great beautiful yeah this is exactly what you were describing and i think it is a very nice improvement to the viz because now you know exactly what year each of these are and it's kind of surprising which years they selected i mean it doesn't seem to make any sense there's not really any pattern to it is there i mean i think it's every three years since 1999 every three years yeah yeah with one listen in 1988 interesting i wonder why they chose every three years well i guess that's the census every three years interesting oh i see there's a message in the chat from people's feelings you want to describe that oh yeah this is i was working on a similar thing i don't know if this is directly pertinent but just in case you wanted to look at it nice it's the same as the earlier approach you looked at what is the approach because it's a scatter plot and it references a cell this is from observable hq so tornado years is an array but this this i mean this will create an axis that just has the ticks that are defined by the like default tick generator setup so i don't think it actually addresses the issue that we were having oh sorry where because yeah we the issue that we wanted to do is is make it so that it's not just like every year or every 10 years or every five years but it's actually just the ticks from the years that are present in the data but yeah thank you thanks for that can you have as well default labels default labels how do you mean so i was i was experimenting with something and i felt completely um say for example you have a a categorical variable you want to you want to show but one way of showing that is assigning numerical values for those say zero and one and by and by adding jitter you allow the points not to position themselves over each other but then i got stuck with the actual label on the axis because then they display zeros and ones and and i want them to display back those categorical strings is this something invis hub that we could look at i've i failed completely to put it into his home oh it's not there okay it's not it's not i apologize it's just an idea in my head i see but you tried it you tried something i for for the exercise i wanted to represent data from the titanic and i wanted to show those uh say different deck levels but i want to show them as numerical values with a little bit of random jitter so the points don't position but i wanted to add the labels in and i kept turning in my head and i felt completely i didn't know where to to start from really reading that is basis of my question like a label over each point of the scatter plot uh like the current scatter plot we have but instead of saying 2005 you you you want to say say for example the financial collapse year you you may want to label that financial collapse instead of 2008. so i think what you're describing it's a lot like species right where you have discrete values and you want to map them to some x y like this yes so suppose in your data set those species were represented by three different numbers one two and three right but when you want to display the access label you want that they you want that access to display the actual species strings oh oh i see what you're saying well in that case you could do a data preprocessing step where before you pass the data into the visualization code you can just replace those numbers with the strings in the data but then i would lose that bit of jitter i would have on those values so they say i i i encountered the same challenge and you know um and i was able to i don't know if that's the correct approach but i was able to add jitter to a scale point even though it was a discrete variable um it it's it a current if you want to to show my example it's in in in the in the forum and i think it addressed i i believe it addresses this this issue oh great is it in here in this thread yes that's the one oh this one ah let's take a look very so if you put the the continent in the yaxis and the date inscribed in the xaxis there's a little bit of jitter big and that way it's not like a like in the in the setosa example in the in the flower example it's not like on the same exactly exact line this is brilliant exactly exactly so how did you do it uh look the the y scale i believe i i added some at random there at some point so it's not in it's not in the scale definition it could be in the is it in the y value accessor perhaps i don't know i i you know i i look for examples yeah it took me a time a while to figure out you know i uh i borrow it from somewhere so i don't remember exactly where i put it so it's not there it must be it must be in the rendering yes wow let me just search for a random there it is yeah it's right in the rendering logic see that makes it that makes perfect sense and that's how i would have done it as well yeah i see now i see yeah so right before you render it to the point add the jitter which is just a random number times 10. however math.random you have to understand it varies between 0 and 1. and so this code here will jitter the points only in one specific direction meaning it's it's gonna it's going to be the original x or greater so it's going to be some place between the original x and the original x plus 10. normally jitter would um would move it in both directions and the way that you can do that oh it's i have to fork this to edit it and another just another side point i want this hub to show the previous authors too because it looks like i made this but it's not my work so that's one thing i want to address but the way that you could do that is something like 5 so then it would it would be x plus or minus five randomly and in general that would be like if you could you could if you wanted a variable for jitter you could make it like that and say random times jitter minus jitter divided by two yeah jitter is an interesting technique just adding adding random variation and this one actually if you were to put a bunch of points and jitter them like this what you would see is a square not a circle because it varies them in x and y in a square i've seen other people do jitter with such that when you generate you would see a circle and so then what you want to do is compute a random angle and a random distance from that angle and do the jitter like that that sounds difficult it's it's not that bad i mean you just need some sine and cosine it's easier to just create a function for for this right yeah actually that's not a bad idea yeah because there's duplicated logic which is unfortunate so we can call this jitter magnitude and we can make a function it's just a number and then we just do the jittering of that number and so that way we can say d is jitter of d dot x and then jitter of d dot y that would be one way to do it um uh you're defining jitter for the jitter it's a recursive i whoops this one i forgot to change the name ah there we go yeah jitter is an interesting technique but there's another technique that i like which is the force layout and in certain cases the force layout could be better than the jitter and this comes back to this notion that you mentioned here it is yeah so in the original question it was like how do we how do we split up how do we split the points jitter is one option but with jitter there's still a high probability that they're going to overlap each other however if you use d3 force with the collision constraint um it has a similar effect to jitter but it guarantees that there's not going to be any overlap and this this could be a really nice option as well yes especially because my purpose was to like visualize each else that you were able to visualize each element each retouch element so i think that this solution is more proper to accomplish that goal yeah i think it's it's more accurate in a sense as well i'm trying to find a good example it gives a better sense where points cluster at specific places as opposed to jitter yes yes because for example in my in my in my case i i wanted to show how in europe there's a disproportionately amount of heritage elements and and you can't really see that in this version because because as as current says there's a lot of overplotting in in europe right yeah yes if you did the b swarm on this layout or maybe this one that would be a very that if yeah i would suggest to try that to try the force layout the force directed layout with the collision constraint for this exact view without the jitter that way you would see that like with this this really dense area here in europe it would actually spread up and down it would give you a a visual up and down spread so you could really see the the quantity like the density of the points much more clearly than in this view yeah that would be similar to sort of a quasi quasidot plot yes yes and and also almost reminiscent of um like a violin plot but yeah this is really nice work so i'm curious did you see any insights from the data in here that surprised you well that's the main insight that i put because i i read the that before the 90s there was a like a really disproportionate amount of a cultural and natural heritage sites in europe and there was less of a presence in latin america africa and other parts of the world but but you can't really see see that with these visualizations you know and it was surprising maybe it's because of this visualization doesn't show it but but i didn't really see that that a temp temporal trend with this visualization but but indeed europe has like them the most every touch size sites declare by unesco so that's the main insight you know i see i want to try i guess that other thing i thought that i really loved about this plot just from an artistic standpoint was that how it showed the world map oh yeah indirectly yes yes indeed in the readme section i i said that it's really a map but but i like i don't i haven't learned yet how to make it but but because i use latitude and longitude it really it's it resembles the the geographical points yep totally yeah i i can talk a little bit about about how to actually make it a map but first i kind of want to try tweaking some of the things that we have available to us to tweak to to show more clearly the things that you're describing one thing is if we pull the opacity way down that helps to show density in europe see that right yes definitely and then if we do it by continent and date i want to try making the radius more so instead of a radius of 5 let's say a radius of 20. oh see ah this is this is one thing where like the next version of this hub i want to be able to tweak the radius but have it remember which things i selected you know what i mean now maybe that's a little too big let's say 15 but then i want to bring down the opacity even more like .05 now we can see a little more clearly how dis disproportionate the density is in europe and if that's the thing you want to highlight it's it's currently confounded with the colors it's hard to tell based on the colors so just to tease out that one thing if i just make them all black oh whoops that should be date continent now you can see it more clearly see yes definitely right man i'm it's impressive how it gets almost completely black it's a heritage xray is there a way you could also filter on the counts and then switch up the color once it hits a threshold so that it pops so you could have it red yeah that's a great idea to do that you yeah and hey if you wanted to show that europe has more or less the message with this probably that that's that's the thing to do is to aggregate it by binning it by the years and then maybe applying some smoothing even and then you would have um an aggregated view where you could apply a threshold of say if it's more than 100 per year make it red or something so it really pops yeah that could totally work and to do the binning you could leverage d3 histogram i think it might have been renamed to d3 bin or is it banned no it's not banned it's ah it's bin this is the one so this this example is a normal distribution of like a thousand points oh sorry i lost it and then what it's doing is it's it's calculating the number of points that fall into each bin each bucket and in this case each bin is like 0.5 or 0.05 or here's 0.4 0.5 so 0.05 is the the width of the buckets but you could bin by the years and so yeah that's that's one thing i would suggest to try is binning by year and another thing that now that i'm looking at the visualization i i think that that it it doesn't reflect the message uh so clearly uh because it i mean the main message is that for example asia that's a continent with a a bigger population than europe has significantly lower heritage sites so their culture is not being like highlighted by unesco as much as europe and and because the population for example it's not being considered in this vist you don't really see that disproportionate a reality you know yes this is so maybe i i i should i should i should have done that data a transformation before to to highlight that disparity but those are the kind of things that i'm thinking now when when i hear about you guys yeah taking the population into account would be quite interesting as well why africa was doing much better in the 60s compared to later years that's a great question i don't know but that's a great question so 1980 there's a lot more heritage sites defined in the 80s and by the way this this number formatting is not right that's something we could fix see in the um see why type what is y type for the so i'm i'm looking at the problem of the number formatting and i'm thinking to myself those should actually be just represented as years without the comma right and this actually is i'm glad you did this because it highlights the fact that we need another type which is which is right i just put it quantitative like date as quantitative not as date exactly oh i'm so happy that that this happened yeah so now we can actually do that next step which is the the complete the completion of this generic scatter plot make it handle quantitative categorical and time or dates uh what is the type of that i'll just call it time and if it's time we need to have a time format which is how we parse it zan armstrong has this really great time formatting example so the specifier for the time parsing would be if it's just year it would be this one percent y and i'm pretty sure that's what it is in the data if it's showing up like that and so now let's actually do this work of making it work with time so let me get more space for the code so we're looking at just x if x type is categorical then do this otherwise this is where i want to introduce another another case where if x type is time then do their switch and case for javascript oh yeah we could do that we could do that yeah as we add more of these it's getting a little cumbersome to use this this ternary operator yeah that could work but i feel like this is pretty close i mean we're pretty close to having just one type it doesn't make sense to create another logic for this yeah but at this juncture i mean it's a good thought and and what i would do is get it working first with the minimal effort and then after we run prettier on that then we make the call like is this ugly enough to merit a refactoring where we use the case switch and then we would we could write it with the k switch and see how it looks and that might turn out to be more more code more complicated so yeah it's a good thought it's a good thought but let's try to get this to work so it would be exactly the same as scale linear except that it would be scale time which we need to import from d3 and now that i think about it we may not need to specify the time formatter if the data is already parsed into dates which i'm not sure if it is let's see where's the data loaded where is the data await oh parse row parser where's that here it is yeah yeah yeah so this is where we can say instead of just parsing the string into a number like this we can use time parse or yeah we need to come up with a parse date function that we can pass in that string and the way we can use um d3 time format or no i'm sorry time parse and then we can use that percent y to parse those into dates and we need to import time parse from d3 and let me just see if it's working by logging these out okay they appear to be dates that's good and yeah i think i implemented all the all the logic let's see if it works it does see that awesome this is great yeah this so now we have a truly generic scatter plot that can handle dates as well but we're not quite done yet because the code is kind of a mess i'm going to run prettier on it yeah i mean it's okay but it is a little cumbersome with with two levels of this um you were asking about the switch statement let me see what time it is oh it's noon yeah let's try the switch statement i always like to look at mdn for examples this is what the switch statement looks like in javascript so let me copy this and try it out okay so if we use a switch statement we're going to have to use let so i'll comment this out for now and let's just see how this plays out if we do use the switch statement let x and then we are switching on x type and if the case is categorical then we say x equals this one here and then if x type is time then we use this one here x equals that break we need to put these break statements otherwise it continues down to the next one and then finally if it's quantitative uh which we're not even explicitly stating here we're assuming that if it's not categorical and if it's not time it's going to be quantitative i think that's fine the yeah yeah we could so we can use the default here okay yeah and then to the last case is this one x equals scale linear and i'll try prettier on this this is what we get and let's see if it still works oh there's something we didn't we didn't assign it back to the xaxis we didn't assign the new x back to the i think we also need to assign that range which we did oh i missed the range i missed the range ah that's what it is good catch so yeah the way that this works is the return value from this expression is you know it's the value of x and then we say dot range so what we can do is just say x dot range like this okay that works yeah great and so now it's up to us to decide which version is more aesthetically pleasing yeah in this case maybe the if and else makes sense but maybe if we increase the number of of options then switch would be better i i guess i don't know yeah i like the case i i was wondering just from uh i don't know this style um works in javascript but could when type is passed in could that automatically call a function that would render uh that logic for the x assignment oh yeah i know in other line other languages where you just so so that you don't have anything there and that each of those would be a function of itself oh yeah i think i think it may be complicated by the fact we have different types of domains depending on those different scales and actually i like the idea of abstracting it out into a function that way we could call the same function for x and y and we can we don't need to put x and y in our in our stuff so we can just have it a function of type and data and value which is going to be the accessor and in this case we can just move this into the function and then instead of instead of x we can call it scale and then we can switch on type and then instead of x value we can use value all these places oh type is not a reserved word here i don't think it is no in javascript i don't believe i don't believe type is a reserved keyword okay and then we can return it at the end and then all we have to do is say x equals compute scale x type data and x value and that still seems to work and then once we've done that we can use it for for y as well so we actually get rid of a bunch of code which is great but the question remains when we implement that function should we use switch or this other thing i mean it doesn't really matter but this is the process that you that you go through and this is what i wanted to also convey in this in this course is like what is the process of writing code you have to make so many decisions evaluate things based on efficiency but also you know aesthetics and you could do the same thing with if else if you know you could go on and on trying different ways and i actually do that when i write code i spend time evaluating all possible ways of doing one thing and then getting them all to work and then looking at the code from a number of angles you know how easy is it to read if i give it to somebody else in the future how easy is it going to be be able to be understood by someone else and also how efficient is it does it create additional new objects that you don't need to does it need to be optimized anyway these are all considerations um yeah so in your switch scale is assigned once yet you still have to declare it as let because it's going to go past one of these cases only and it's going to be assigned once but we still have to declare it as lead not const i believe so yes if you have the um well actually let's do some experiments with that if we don't declare it there and we declare it here i'm not sure if that would work i'm not sure what the scoping rules are for for the switch statement but it says it gives us an error that says the identifier has been already declared in the same scope so this approach would not work i see and thank you if you if you use const here that's also not going to work oops that's also not going to work because oh well you need to assign a const uh when it's declared but here's here's another approach that could work if you don't define any variables you could just return them like this actually this this simplifies the code quite a bit then we don't need the breaks because when we return it's implicitly breaking out of the whole function however we need to pull out the setting of the range to be outside this function which is again duplicated logic down here we'd have to do it twice so that's sort of a dead end i would rather not do it like that ah so let's see is it still working there seems to be some problem oh i set the range or what happened sorry somehow it got messed up that's odd it was working a second ago is it because we missed the brakes again no the brakes are there is it because like the range takes this width thing like but for my skin you would need like yeah that's it oh good catch good catch so in that case maybe we do want to use the return approach and then set the range separately that's what it is that's exactly what it is so the range for the y scale is going to be well let me just see what it was in the one that i forked it from i accidentally assumed that the range would be the same across each but it's not that's the right range yeah that's right and then now we can just use return but let me keep this around as a reference so this is option three this is option two and i was just thinking to myself if we're going to use a return we may as well just use if statements which might be even more clear to read if type equals categorical then return this kind of a scale and since we return it we don't need to use elf we know if we don't need to use else we could just have another if so if it's time then we can return this one and then if it's nothing else then we can fall through to the default of the linear scale so this also works as an alternate way of doing it so yeah it's up to you it's a stylistic choice um i personally kind of like this just because it's only a couple lines one two three four five six however it could be cryptic for others to read if you hand it off to somebody else so maybe maybe this is the best choice or maybe this is good i don't know it's it it's a it's a very subjective choice but yeah this this has been fun really nice work and i like how how all of these i mean this visualization as well as the one that kostov worked on it highlights social inequality issues which i think is a very important topic area to address with data visualization in particular because it really makes clear things that are in the data they're clear in the data if you look at the data in the right way and so yeah i think this is a valid point like why is why are there so many world heritage sites in europe does your is europe really the like center of civilization or is it just you know is this unesco neglecting you know other countries out of some kind of i don't know racist underpinnings i don't have no idea i have no idea about it but but just to start investing these investigating these angles is uh it's great it's really interesting seeing how removing colors have brought this much clearer right because color itself has a brightness value to it it's called there's hue saturation and luminance in colors and luminance is the luminance means how how much between white and black it is but if you have hue um it confounds the the brightness i mean yes and i think it's full circle that this is get it right in black and white right and we and we turn the the visualizations into black and white exactly finally exactly yep yeah i'm happy it ended up in black and white turns out black and white is clear it's more clear and it's the same with 3d by the way if you see 3d pie charts 3d scatter plots it's it's the same kind of thing as adding color where you just make it like more flashy but it doesn't really add any value most of the time so yeah as a next step for this i would suggest trying to do the binning and the smoothing and i wanted to show you all this thing that i built fairly recently that that does exactly that it's a stream graph of d3 contributions over time and what it what i did is i took um d commits commit data from git from github um on all the various d3 packages and i i've been to them by i think weak and then i applied smoothing and i wanted to show you the effect of of changing the smoothing parameter see if there's no smoothing it looks something like this this is just the raw aggregated values per week and i think if you were to aggregate the data that you have per year you would get something kind of similar to this but with you know with a different layout and you can apply smoothing though to get a more broad picture of of generally when things increased or decreased it's a smoothed out view of it and for this particular analysis the smoothed out view was much more useful than the detailed view you can see clearly okay d3 was developed monolithically from 2011 to 2014 and then it was split into a bunch of packages and then some new packages were created after that the the other thing is it gave you an opportunity to annotate which she just couldn't exactly exactly there's no room for the labels in the version that's not smooth exactly yeah yeah and even if you hovered over you wouldn't get the insight yeah it's tricky to to hover over each and every one to try to figure out what it is yeah so i forgot what it was originally 15 maybe that's cool so yeah this this one was a lot of fun to make i had hoped to continue this series and get to making something like this but uh you know in the future i'll do it in the future all right well i think i'm gonna wrap up but um let me see yeah i'm gonna wrap up thank you all for joining me for this this ongoing saga of uh get it right in black and white with vishub as our as our tool and uh yeah i'll see you in the future sometime and yeah feel free to reach out to me um if you want to get involved with upcoming versions of his hub maybe be a beta tester and just and let me know if you have any feedback on viz hub in general or the way i'm doing the courses ways that things could be improved what you've gotten out of it what things that have been frustrating i i want to hear it all um all right so thank you all fantastic and he finally thank you so much yeah my pleasure thank you queen thank you i'll be in touch all right great and if you want to support me in the meantime sign up for this measly four dollars a month and it'll go a long way yep done all right thanks everyone thank you thank you ryan take care thank you bye bye bye
