With timestamps:

00:02 - hello everyone we are going to build
00:04 - this recipe application in react
00:07 - so before we dive into it let me just
00:09 - give you a quick demo of how it's going
00:11 - to work
00:12 - essentially it grabs the recipes from an
00:15 - external api so this is what happens
00:17 - when the page first loads
00:19 - and then from there on we can search for
00:20 - recipes so if i type in shrimp it's
00:24 - going to give me the recipes that
00:25 - involve shrimp and then if i type in
00:28 - chicken it's going to give me the
00:29 - recipes that involve chicken
00:32 - from there on we can view the recipe by
00:34 - clicking this view recipe button and
00:36 - then it takes us to that recipe using
00:38 - react router
00:40 - once it's been loaded we can go back to
00:42 - the home page by pressing this go home
00:44 - button and it takes us back to home page
00:47 - again using react router
00:50 - now you may notice that the results that
00:52 - we looked for are still there and this
00:54 - is because we are using data persistence
00:56 - to store our data locally
00:59 - for this project you are expected to
01:01 - have a little bit of knowledge of
01:03 - javascript react and react router okay
01:06 - so without any further ado let's get
01:08 - started
01:09 - alright so to get started i've already
01:12 - created a project folder for you using
01:14 - the createx app cli
01:16 - so inside of this folder i've included
01:19 - the css that i've written for this
01:21 - project which lives right there so feel
01:23 - free to take a look at it
01:25 - and i've also installed the packages
01:27 - that we're going to need for this
01:29 - project so i've installed bootstrap and
01:31 - i've also installed this react write it
01:34 - down packet and these three they already
01:36 - come built into a create react app
01:38 - project
01:40 - okay so i've i will link this project in
01:43 - the video description so go and download
01:45 - it
01:46 - and once you have downloaded it just go
01:48 - ahead and navigate to it in your
01:50 - terminal
01:52 - type in npm install to install the all
01:55 - the packages and the node modules folder
01:58 - and once you've done that just type in
02:00 - npm start or yarn start
02:03 - to launch this project into your web
02:05 - browser
02:07 - okay so
02:11 - come on
02:13 - this is what we're going to start with
02:16 - it's just a blank screen with basically
02:18 - a header and a title that reads recipe
02:21 - search
02:22 - and this is what's going on in this
02:24 - app.js file
02:27 - okay so
02:28 - as you know
02:30 - we're going to type in the values well
02:33 - the names of the recipes to search for
02:35 - them
02:36 - so how do we actually search for recipes
02:39 - well we need the input form so to do
02:42 - that let's just first create a new
02:44 - folder in this source folder
02:46 - and i'm going to name it components
02:50 - within this components folder let's just
02:52 - create a new file and call it form.js
02:57 - all right in there first things first we
02:59 - need to input react from react
03:02 - and then i'm going to create a stateless
03:04 - functional component and i'm going to
03:05 - call it form
03:08 - and it's going to be a stateless
03:10 - functional component because we don't
03:12 - need any state in this component so if a
03:14 - component is a needed state that means
03:16 - we can make it a stateless functional
03:18 - component and not a class-based
03:20 - component
03:21 - all right so
03:23 - i'm just going to implicitly return some
03:25 - jsx so inside of it i'm going to create
03:27 - a form
03:29 - come on
03:31 - and we don't need the action so inside
03:33 - of this form let's just create a new
03:35 - input
03:37 - the type of text let's get rid of this
03:39 - id and the name for now
03:43 - and i'm also going to create a button
03:45 - that says search
03:47 - and before i forget let's just go ahead
03:49 - and export this right here at the bottom
03:51 - so export default
03:53 - form
03:55 - excellent now let's go back to app.js
03:58 - and input this so import form
04:01 - from
04:02 - and then we need to
04:05 - stay in the same directory go into the
04:07 - components directory and then import
04:08 - form
04:10 - all right so let's just render it out
04:12 - right there just below the header so
04:15 - there we go
04:17 - let's go back to the web browser and
04:19 - make sure that it's showing up yes it is
04:22 - so
04:23 - let's just create a
04:25 - method inside of this component and hook
04:28 - it up to this form.js because
04:30 - we need to first make sure that
04:31 - everything is working correctly so i'm
04:34 - going to call this method get recipe and
04:36 - this method is going to be responsible
04:38 - for making the api call okay
04:41 - and let's set it to a arrow function
04:44 - now this syntax may look a bit weird to
04:47 - you you may be used to seeing something
04:49 - like
04:50 - a constructor function
04:52 - and then inside of it you basically type
04:55 - in your methods like this
04:57 - and then you have to hook them up in
04:59 - your constructor function like
05:01 - this dot get recipe equals
05:04 - this
05:06 - dot get recipe dot
05:08 - bind and then you bind in your methods
05:11 - whatever
05:12 - well this has been
05:15 - removed or you can say that deprecated
05:18 - in react-16 so essentially in react-16
05:21 - you don't really need a constructor
05:22 - function you can even declare your state
05:25 - without a constructor function just like
05:27 - that
05:27 - okay so this is just a neat bit of
05:30 - syntax in the new version of react and i
05:32 - think this is much better and much more
05:34 - practical than the previous versions
05:37 - anyway getting back to the topic
05:39 - first of all let's just
05:41 - console.log something into this method
05:43 - just to make sure that it's working fine
05:45 - so i'm just going to console.log saying
05:47 - working
05:51 - but how do we hook it up to this form
05:53 - component
05:54 - well we first need to go ahead and pass
05:57 - this
05:58 - data to the sum component and how do you
06:01 - pass data to another component you use
06:03 - props
06:04 - so i'm going to name this prop the same
06:07 - as this method so i'm going to say get
06:09 - recipe equals this so this refers to
06:11 - this app component and then this dot get
06:14 - recipe okay
06:16 - press save
06:18 - now back in form
06:19 - we do have access to this get recipe
06:22 - prop because we set it up right there
06:25 - but to access it we can't really use the
06:28 - this
06:29 - dot props approach because
06:31 - this keyword only works in class-based
06:34 - components but this is a stateless
06:36 - functional component which means we have
06:38 - to pass an argument right there
06:41 - called props
06:42 - now with this props
06:44 - refers to
06:45 - these right there so whatever get passed
06:47 - in there
06:48 - gets stored into this argument
06:51 - so this prop is basically an object so
06:53 - to access the properties of an object
06:55 - you type in
06:57 - well props dot and then whatever the
06:58 - name of the property is
07:01 - now in our case we are going to set up
07:03 - an attribute called spawn submit which
07:05 - is a built-in react react attribute
07:09 - and then we can say props
07:11 - dot and then the name of the prop is get
07:13 - recipe so let's just copy it and place
07:15 - it right there
07:17 - excellent
07:18 - press save app.js
07:21 - and now what do we want well we want
07:23 - this console.log to show up as soon as
07:26 - we press this button so now if i open up
07:29 - my developer tools go to the console
07:32 - press search
07:33 - oh what's happening there well keep your
07:36 - keep your eye right about there as soon
07:38 - as i press the search button keep your
07:40 - eye there
07:42 - did you see that that working console
07:45 - log appeared for like just a split
07:47 - second but then it disappears
07:49 - and this is because we are going through
07:51 - a full page refresh
07:54 - this this full page refresh is the
07:56 - default behavior of any web page and to
07:59 - change that all we need to do is we need
08:02 - to pass in an argument e actually let me
08:04 - just convert that to a
08:06 - arrow function first
08:08 - so i don't have to bind it
08:10 - so this e is basically the event object
08:13 - in javascript this is nothing specific
08:16 - to react
08:17 - so
08:19 - since this is an object means we can
08:21 - access the properties of this object so
08:24 - i can say e dot prevent
08:29 - default
08:32 - and this method is going to prevent the
08:35 - default behavior of this web page which
08:37 - is what that is going to refresh so now
08:40 - if i press save go back to the web
08:43 - browser
08:44 - press search we can see that the working
08:46 - console log is showing up brilliant
08:50 - okay well what do we need to do next
08:53 - well we need to first let's just
08:56 - let's just um make sure that we are
08:58 - actually reading the values that we type
09:00 - in there
09:01 - so
09:02 - first of all we need to
09:04 - set up a name attribute because this is
09:06 - what we're going to use to read the
09:08 - values from the input okay so name and
09:11 - i'm gonna name it
09:13 - recipe or let's just call it
09:16 - recipe name
09:18 - okay i'm gonna copy this
09:20 - and within this get recipe method i'm
09:22 - going to create a new constant and i'm
09:24 - going to call it same as that recipe
09:27 - name equals so again this event object
09:30 - means we can read the properties from it
09:32 - so e
09:33 - dot target
09:35 - dot elements
09:37 - and then what do we need to access well
09:39 - we need to access this name attribute so
09:42 - what's the name of this name attribute
09:43 - it's recipe name
09:45 - so e dot
09:46 - target.elements.name
09:48 - dot recipe name and then what do we need
09:50 - to access from it we need to access its
09:52 - value so doc value okay
09:56 - now instead of console logging this
09:58 - working string let's just actually
10:00 - console.log this recipe name constant
10:03 - that we just created
10:05 - right so let's go back to the web
10:07 - browser and type in anything type in
10:10 - chicken press search and there we go
10:12 - this is working just fine
10:15 - okay now let's get into some more
10:17 - interesting stuff
10:19 - we need to
10:21 - make an api call to a website and then
10:25 - we are reading the data from the website
10:27 - and showing up to our web application
10:30 - and what's the website that we need to
10:31 - make the api call to well is this recipe
10:34 - api called
10:36 - food to fork
10:38 - that's kind of a weird name but food to
10:40 - fork dot com
10:41 - slash about slash api
10:43 - now you can read this
10:45 - but for the most part all you need to do
10:47 - is you first need to sign up for the
10:49 - website it's completely free and you
10:51 - need to obtain
10:53 - an api key
10:55 - because you need that in order to work
10:58 - with their data
11:01 - essentially an api key is a way for
11:03 - websites to know who you are and what
11:06 - kind of data you're trying to access so
11:08 - they they use your api key that are
11:10 - associated to your email address and
11:13 - then they just basically want to know
11:15 - what kind of data you're trying to
11:16 - access
11:18 - that's the whole purpose of
11:20 - obtaining the api keys okay so all you
11:22 - need to do is just press the sign o
11:24 - button and then it will redirect you
11:26 - back to this page once you have got your
11:28 - api key
11:30 - so the url that we need to make the api
11:32 - call to lives right there
11:35 - now see this is the url that we need and
11:38 - see this key parameter right there
11:40 - this is where your api key should go
11:43 - so
11:44 - once you have done that your url should
11:46 - look something like this right there see
11:49 - this is the exact same api right there
11:52 - sorry this is the exact same url
11:55 - apart from the fact that this api key
11:58 - variable has been replaced by my actual
12:01 - api key so all i did was i first signed
12:04 - up
12:04 - then i copied this url i pasted it right
12:07 - there
12:08 - and then instead of this api key wrapped
12:12 - within those curly braces i just pasted
12:15 - my api key right there and what i've
12:18 - been looking for by default we are
12:20 - looking for this shredded chicken and
12:23 - these are the results that we are
12:24 - getting back and you may also notice
12:27 - that there's also this count parameter
12:28 - right there and we can change that we
12:30 - will do that later on in the video but
12:33 - we can change that to anything we can
12:34 - change that to 5 10 15 whatever you like
12:37 - it just depends on how many results you
12:38 - want to show so in this case the count
12:40 - is set to five which means we are
12:42 - getting an array of recipes and this
12:45 - array has five different objects and
12:47 - then you see that these are the
12:48 - properties that we're going to read in
12:50 - order to access the data so this
12:52 - publisher title recipe id just some of
12:55 - these we're going to use in our web
12:58 - application
12:59 - okay so let's actually go ahead and copy
13:02 - this url
13:05 - okay
13:06 - go back to our application
13:09 - and
13:10 - i'm actually going to just go ahead and
13:13 - create a new constant
13:15 - but
13:16 - all i'm going to do there is i'm first
13:18 - going to
13:19 - extract my api key because i'm going to
13:21 - store that in a new constant so
13:24 - there we go
13:26 - because it's always a good practice to
13:28 - just
13:29 - store your important data into your own
13:31 - constants in case you need it later on
13:34 - okay
13:35 - and i'm just going to go ahead and
13:37 - create a new string and paste my api key
13:39 - right there
13:41 - okay so once that's been done we are now
13:43 - ready to make the http call to this url
13:47 - right there
13:48 - so
13:49 - to do that i'm first going to go ahead
13:51 - and put this link out
13:54 - just like that
13:56 - and inside of this get recipe method
13:59 - just below this prevent default call i'm
14:02 - gonna create a new constant and i'm
14:04 - gonna call it api underscore call
14:06 - and for now i'm just going to go ahead
14:09 - and initialize a string and inside of
14:12 - that i'm going to paste this link right
14:14 - there
14:15 - that doesn't seem right
14:16 - let's just fix that there we go
14:19 - okay so
14:21 - we're gonna make use of something called
14:23 - async await and the fetch api to make
14:26 - the call to this link right there so how
14:30 - do you initialize a async await function
14:33 - or in this case how do we make this
14:36 - method asynchronous
14:38 - well
14:39 - just before we declare the method we're
14:41 - going to type the keywords async okay
14:45 - and
14:46 - then
14:47 - right there we're making the api call we
14:49 - type in the keyword of eight
14:52 - and to actually make the http call we're
14:55 - gonna use the fetch api so to do that
14:57 - i'm again going to go ahead and cut this
15:00 - link out
15:01 - and i'm going to type in the keyword
15:03 - fetch
15:05 - and within that
15:06 - instead of initializing the string i'm
15:08 - going to use the es6 template literals
15:11 - so to do that is just using the
15:13 - backticks and then i'm going to paste
15:16 - the link right there
15:18 - so we need to change a couple of things
15:20 - now because remember we have our api key
15:23 - stored in this constant right there so
15:26 - in es6 template literals
15:29 - we are allowed to inject the variables
15:31 - inside our string so to do that we're
15:34 - going to go ahead and copy this api key
15:36 - constant
15:38 - and we're going to inject it right there
15:40 - where the key is required so to insert a
15:43 - template neutral all you do is you type
15:45 - in the dollar sign
15:47 - and then a couple of
15:49 - uh curly braces and then whatever goes
15:51 - inside of these curly braces it
15:54 - basically what we want to do so in this
15:56 - case we just want to inject this api key
15:59 - variable so again i'm just going to go
16:01 - ahead and copy this and paste it right
16:03 - there
16:04 - and what do we need to do next well
16:07 - the default
16:09 - search for now is just shredded chicken
16:11 - right there
16:13 - later on we will change that to whatever
16:15 - we type into our form but for now let's
16:17 - just leave it to shredded chicken
16:20 - okay so i'm actually going to get rid of
16:22 - this console log right there because we
16:24 - don't need that anymore
16:26 - so
16:26 - this is just making the api call it's
16:29 - it's not actually grabbing any kind of
16:31 - data so to do that i'm actually going to
16:33 - create a new constant and i'm going to
16:35 - call it results or let's just call it
16:37 - data
16:39 - and we're going to set it to the return
16:40 - value of this fetch function right there
16:43 - so again to grab the value we're going
16:45 - to first type the keyword await
16:48 - okay
16:50 - and then
16:52 - we also need to convert this whatever we
16:55 - get back from this api to a json format
16:58 - so you may be used to seeing something
17:00 - like you know
17:02 - json.parse or json.stringify
17:05 - but what's how clean this is in fetch
17:08 - api all you need to do is you need to
17:10 - type in the contents name which in our
17:12 - case is api call and then we just call
17:15 - the json method there we go just like so
17:18 - okay so now whatever we get back from
17:21 - the api
17:22 - is going to be stored in this data
17:24 - constant right there
17:25 - so
17:26 - let's just check what's inside of this
17:28 - data constant so
17:30 - if i console console.log this data
17:32 - object now remember
17:34 - this method is going to fire as soon as
17:37 - we press this button right there so now
17:39 - let's just go back to our application
17:42 - and
17:43 - press search
17:46 - what's that
17:47 - no access control allow origin
17:50 - some websites do not allow local servers
17:54 - to access their data now in our case
17:57 - we are using our localhost 3000 to
18:00 - access the data from this food to fork
18:02 - website
18:03 - so we need to do something to trick this
18:06 - food to fork servers into thinking that
18:09 - we are a legitimate website so in other
18:12 - in other words we are live on the
18:14 - servers
18:15 - so how do we fix that
18:16 - well there's a very handy tool for that
18:18 - it's called course anywhere.heroku.com
18:22 - so all we need to do is we need to go
18:24 - ahead and copy this url
18:26 - okay
18:28 - and go back to our application and just
18:31 - before our link begins we just prefix it
18:34 - with this url that we just copied right
18:36 - there
18:37 - all this is going to do is it's going to
18:39 - trick this website into thinking that
18:42 - our server which in our case is
18:45 - localhost this is actually a live server
18:48 - that lives somewhere on the internet
18:49 - okay that's all this url is going to do
18:53 - so now if i press save and then go back
18:57 - to our application
18:59 - press it and hopefully this should give
19:01 - us some sort of data and yes it does
19:05 - so this essentially is an object and the
19:09 - value of that is this data constant
19:11 - right there
19:12 - so if i expand it
19:15 - this is the count so remember we get an
19:17 - array of five objects because we have
19:19 - set the count to five so if i change the
19:22 - count to let's say 10.
19:25 - let's see what we get back so press
19:27 - search
19:29 - and there we go we get an array of 10
19:31 - objects so let's just go ahead and crack
19:33 - open this recipe array and let's take a
19:36 - look at what's inside of this well it's
19:38 - basically
19:39 - like i said it's an array and inside of
19:41 - that is
19:42 - just a count
19:44 - of objects so that count is what we type
19:46 - in right there
19:47 - so let's just crack open the first one
19:52 - so these are just a bunch of properties
19:54 - that we're going to use
19:56 - in order to display the data on our
19:57 - website so
19:59 - what do we need here
20:00 - well
20:02 - to actually access this data what we
20:04 - need to do is we need to drill down into
20:06 - this array first this recipes array so
20:08 - we're going to have to say something
20:09 - like data
20:11 - so
20:12 - remember data is this whole object so to
20:15 - drill down into recipes we have to say
20:17 - data dot recipes
20:20 - and now if i console log this we get
20:23 - back the array that we need so this is
20:25 - the array and
20:28 - let's just say that we want to go to
20:30 - this first element in this array so i
20:33 - can say data so again
20:35 - to
20:36 - access
20:37 - a number in an array you use the index
20:40 - in this case it's zero so
20:43 - we want to access the first element and
20:45 - inside of this and inside of that let's
20:47 - just try and access
20:50 - this recipe id so let's just copy that
20:54 - and paste it right there
21:00 - and let's see what we get back so press
21:02 - search
21:03 - and there we go we get the recipe id
21:05 - back
21:06 - but this isn't what we want we actually
21:08 - want to display the data on our actual
21:11 - web page which is this whole thing right
21:13 - there
21:14 - so how do we do that well let's take a
21:17 - look
21:18 - so to actually display this piece of
21:21 - data we don't really have anywhere to
21:23 - store that inside of
21:25 - so we do have this constant called data
21:28 - but this only exists inside of this
21:31 - method
21:32 - so now would be a good time to introduce
21:35 - state within our application so to do
21:38 - that
21:39 - it's just going to type in the keyword
21:41 - state
21:42 - and
21:43 - i'm just gonna set it to an empty object
21:45 - now again
21:47 - you might be used to doing something
21:49 - like typing in a constructor
21:51 - and then declaring your state like that
21:55 - but like i said in
21:57 - react 16 and further on you don't need
22:01 - the constructor function at all so you
22:03 - can just delete that all together
22:05 - and what you can do is you can just
22:07 - simply declare your state like that
22:11 - so what kind of state do we want to
22:13 - trace
22:15 - what we want to do is we want to set up
22:17 - an array which is going to
22:20 - store whatever we get back from the api
22:24 - and what do we get back we get back an
22:26 - array so to do that let's just create a
22:29 - first piece of state called recipes and
22:32 - set it to an empty array
22:34 - excellent
22:36 - now how do we actually make use of this
22:38 - state right there well instead of
22:40 - console logging this piece of data right
22:42 - there
22:43 - let's just do something else
22:47 - let's just use the built-in set state
22:49 - method
22:50 - to set this piece of data to this
22:53 - recipes array so to do that i'm just
22:55 - going to say this
22:57 - dot set state
23:00 - and it's going to take an object and
23:03 - within there we want to grab the recipe
23:05 - state and we want to set it to data
23:09 - just like that
23:11 - okay so now instead of console logging
23:14 - once we get back from this data let's
23:16 - console log
23:17 - this piece of state right there so
23:20 - console.log
23:21 - and this dot state dot recipes
23:25 - okay let's go back to the web browser
23:28 - open up our console
23:30 - press search and we should get back our
23:33 - piece of state
23:34 - and that we do and inside of this piece
23:37 - of state we have an object and then
23:39 - inside of the object
23:40 - uh is this recipes array right there so
23:44 - all we want to do right there is we only
23:46 - want this array right there so to do
23:49 - that let's just say
23:52 - data dot and then is this recipes array
23:55 - right there because we want to set this
23:56 - recipes array to this recipes area right
23:59 - there okay so data dot recipes
24:05 - there we go
24:06 - go back to the web browser press search
24:08 - and now all we get back is an array and
24:12 - within that array there's just a bunch
24:14 - of objects
24:15 - so
24:17 - this is all well and good but how do we
24:19 - actually display this data onto our
24:22 - actual screen
24:23 - so to do that let's just do something
24:26 - more
24:27 - interesting
24:29 - for now all i'm going to do is i'm going
24:31 - to open up a javascript expression right
24:34 - there which means
24:36 - and by the way in jsx opening up a pair
24:38 - of curly braces means that you want to
24:41 - inject something that is related to
24:43 - javascript okay so to do that
24:48 - i'm going to make use of an array method
24:50 - called map
24:51 - now map is a new method that was
24:54 - introduced in a later version of
24:56 - javascript and essentially it allows you
24:59 - to go through
25:00 - each element inside of an array and then
25:03 - you can manipulate it you can change it
25:05 - anything you want to do with it so it's
25:08 - kind of like the for each method but
25:11 - in gsx we can't really use the for loop
25:14 - or the for each loop so we're gonna have
25:17 - to make do with what we have so what we
25:19 - have here is the array method uh
25:21 - array.map method so in this case the
25:24 - recipe state is an array so all we can
25:26 - do is we can say this dot state dot
25:29 - recipes
25:30 - and then we call in the method called
25:32 - map
25:34 - and this method takes a callback
25:37 - function
25:38 - so let's just give it a callback
25:40 - function and we also give it a argument
25:43 - right there
25:44 - an argument i should say
25:46 - or a parameter
25:48 - and this parameter is going to contain
25:50 - each of the elements that are inside of
25:53 - this recipes array once the state has
25:56 - been set
25:57 - so let's just call it a individual
25:59 - recipes just like that
26:01 - and then
26:02 - within there let's just return a
26:05 - paragraph that says and again
26:08 - since we're going to make use of this
26:09 - javascript thing inside of this jsx
26:12 - paragraph tags we have to introduce
26:14 - curly braces
26:16 - so what do we want to access well for
26:18 - now
26:19 - let's just say recipe
26:21 - and
26:22 - then let's just crack open one of these
26:25 - and recipe.title
26:27 - for now let's just console let's just
26:29 - print out recipe.title so remember
26:32 - it's going to print out 10 different
26:34 - titles on the screen because it's going
26:36 - to loop through each of these elements
26:39 - right there and the number of them is 10
26:41 - so we're going to get 10 titles printing
26:43 - out to the screen
26:45 - okay so again press save
26:48 - go back to the web browser there are no
26:50 - errors which is good so now if i press
26:53 - search i should get some titles onto the
26:55 - screen
26:57 - yes we do this is brilliant but we also
26:59 - have an error
27:00 - it reads each child in an array or
27:03 - iterator should have a unique key prop
27:07 - and this error is something to do with
27:10 - react
27:11 - essentially it's asking us to set a
27:13 - parameter called key to each of these
27:16 - elements that have been looped over
27:20 - and the reason for this is that react
27:22 - wants to know what each of these
27:25 - elements are i mean there is no way for
27:28 - react to know what this title is what
27:30 - this title is all it's doing is it's
27:32 - reading the properties of each of the
27:34 - objects right there
27:36 - but it also needs to know
27:38 - that in future in case we need to
27:40 - manipulate any of these so react can
27:43 - just grab the key prop and then from
27:45 - there it can do its thing so to do that
27:48 - all i'm going to do is i'm going to set
27:51 - this recipe id which is this right there
27:55 - i can also set the title or the search
27:57 - url as long as it's something unique and
27:59 - different to compared to the other
28:01 - objects it will do but just for the sake
28:04 - of simplicity i'm gonna copy this
28:07 - and i'm gonna say that key equals and
28:10 - again i'm gonna have to open up a
28:12 - javascript expression and inside of this
28:14 - i'm gonna say recipe
28:16 - dot
28:17 - recipe underscore id
28:19 - now if i press save and go back to the
28:21 - web browser press search
28:23 - we can see that all the titles are
28:26 - printing out to the screen and we also
28:28 - don't have any errors uh this is just a
28:32 - eslint complaining that recipe name has
28:35 - been declared but it's not been used
28:38 - and this isn't really something to worry
28:40 - about so let's just move on
28:44 - so currently
28:46 - we are just getting the default value
28:48 - which is this shredded chicken right
28:50 - there but what we want to do is we want
28:53 - to get the results
28:55 - of whatever the user types into this
28:58 - input form right there
29:00 - so to change that we already have a
29:02 - value from that form which we grabbed
29:05 - earlier on using the event object so all
29:08 - we can do is we can use this recipe name
29:10 - constant
29:11 - and like i said this is a template
29:13 - string so we can actually inject this
29:15 - variable right there instead of this
29:17 - shredded chicken so what i can do is i
29:19 - can just cut this out
29:22 - okay
29:24 - and
29:25 - then to open up a template literal you
29:28 - type in the dollar sign followed by a
29:30 - pair of curly braces and then within
29:32 - there we can inject this variable right
29:34 - there just like that
29:36 - okay press save
29:38 - go back to the web browser and now if we
29:41 - type in let's say shrimp press search
29:45 - and we are indeed getting the results
29:47 - that involve shrimp on the screen as
29:49 - well as in the console right there
29:52 - okay so what's next
29:55 - so let's actually grab a bit more than
29:58 - just the titles
29:59 - so if i just crack open one of these
30:02 - objects right there
30:04 - uh we can use a bunch of properties
30:06 - there so what we're gonna use is we're
30:08 - gonna use this title which we already
30:10 - use
30:11 - and we're also gonna use this
30:14 - publisher name
30:15 - and we're also gonna use this image url
30:18 - but for now let's just throw in this
30:20 - image and see how it goes so i'm just
30:22 - going to go ahead and copy this
30:26 - i'm going to go back to our application
30:29 - and instead of just returning this one
30:31 - single paragraph let's
30:34 - actually just cut it out open up a pair
30:36 - of parentheses
30:38 - and inside of it let's create a div
30:42 - throw in that paragraph tag and let's
30:45 - also add in a image tag just above this
30:49 - paragraph sag so
30:50 - and the source is going to be actually
30:54 - this recipe dot and then the image url
30:57 - so
30:59 - as always to open up
31:01 - a
31:02 - javascript expression you have to throw
31:04 - in a pair of curly braces and then
31:06 - recipe and then image url so
31:10 - what kind of description do we need to
31:12 - give it to this image tag well we can
31:14 - just throw in the title there just like
31:16 - we did
31:17 - right there so we can say again to
31:20 - initialize a javascript expression come
31:22 - on
31:23 - we have to first open up a pair of curly
31:26 - braces and then recipe
31:28 - dot
31:29 - title
31:30 - excellent now if we go back to the web
31:32 - browser
31:34 - and press search let's look for pizza
31:37 - this time
31:38 - and we should get back the images they
31:41 - look hideous at the moment but we will
31:43 - fix that
31:45 - so
31:46 - why is this giving an error again uh
31:49 - this
31:52 - key prop error
31:55 - even though we have already passed the
31:57 - key right there
31:59 - well the error here is that the key has
32:01 - to be passed within the most parent
32:03 - element
32:04 - so what's the most parent element in
32:06 - this case well it's this div right there
32:09 - so i'm just going to cut this out
32:13 - and paste it right there just like that
32:17 - so now if you go back to our application
32:20 - press pizza and
32:23 - yeah it's working out fine but it's
32:25 - looking rather hideous at the moment so
32:29 - we're gonna fix that next
32:31 - so to do that we're gonna make use of
32:34 - bootstrap which i already have included
32:37 - in our package.json and as well as our
32:41 - index.js file right there
32:43 - so to make use of bootstrap
32:46 - we're just going to add a bunch of
32:48 - classes from the bootstrap framework
32:51 - but before we do that let's take care of
32:54 - this piece of code right there
32:56 - all we are doing there is we are mapping
32:58 - over this piece of state right there
33:02 - but this is a bit messy i mean we don't
33:04 - want to do that in our app component
33:07 - so to take care of that let's just
33:09 - transfer this into its own component so
33:12 - what i'm going to do is i'm going to
33:13 - create a new component in the components
33:16 - folder and i'm going to call it
33:17 - recipes.js
33:20 - okay
33:22 - once i'm in there it's gonna import
33:24 - react from react
33:25 - after that let's just create a stateless
33:28 - functional component because again we
33:30 - don't need any state in there so we can
33:32 - make this a stateless functional
33:34 - component so to do that i'm just gonna
33:36 - call it recipes
33:38 - and i'm going to set it equal to an
33:40 - error function and i'm going to
33:42 - implicitly return some jsx
33:45 - so first of all i'm just going to return
33:46 - it div and within this step for now
33:49 - let's just type in recipes just to make
33:51 - sure that it's working
33:53 - and right there let's just export
33:55 - defaults at the bottom
33:57 - excellent now let's go back to our
34:00 - app.js file
34:01 - and just underneath this form component
34:05 - let's import the recipe so import
34:07 - recipes from
34:09 - and then it's the components directory
34:11 - and then
34:12 - recipes
34:14 - okay so
34:16 - i'm actually going to cut this out
34:19 - and i'm just going to go ahead and
34:22 - render out a recipes component
34:25 - press save go back to the web browser
34:27 - and we do have our recipes component
34:29 - showing up
34:30 - okay but we don't want it to just render
34:33 - out this text
34:35 - we wanted to actually display the data
34:37 - that we were previously getting so
34:39 - how do we do that
34:41 - well
34:42 - first of all we need to pass this state
34:45 - this recipes array
34:47 - to this recipes component and then
34:50 - in this inside of this recipes component
34:54 - that is where we're going to map over
34:56 - that piece of state right there
34:58 - so how do we pass this piece of state to
35:01 - our recipes components
35:03 - well as always to pass anything inside
35:06 - of react you have to use props
35:09 - so to do that i'm just gonna pass a new
35:11 - props and i'm gonna call it recipes okay
35:14 - and and i'm going to set it to this dot
35:17 - state
35:18 - dot recipes
35:20 - excellent
35:21 - so
35:22 - now this prop means that we do have
35:24 - access to our recipe stage that lives
35:27 - there
35:28 - so now back in recipes.js file
35:32 - to get access to this prop right there
35:35 - we first need to pass in an argument
35:36 - right there called
35:38 - props because this is the only way we
35:40 - can access the props we can't really say
35:42 - something like this dot props dot
35:44 - whatever because this keyword will not
35:47 - work inside of this jsl that lives
35:50 - inside of this error function okay
35:53 - if it was a class-based component then
35:55 - we could have used it but in stateless
35:57 - functional components there's no way we
35:59 - can access the props using these
36:01 - keywords
36:02 - okay so
36:04 - now how do we proceed with our
36:07 - recipes props well it's the same as what
36:10 - we did right there so i'm actually just
36:12 - going to paste the
36:13 - piece of code that i copied that i cut
36:16 - earlier and all i'm going to do with in
36:18 - there is i'm going to get rid of this
36:20 - keyword
36:22 - and i'm also going to get rid of this
36:25 - state because the state does not exist
36:27 - in this component
36:28 - instead i'm going to type in props
36:31 - and what's the name of the prop is this
36:34 - recipe so
36:35 - props
36:37 - dot recipes and then is the exact same
36:39 - thing that we have been following
36:41 - so again let's just break it down
36:44 - we passed the props property uh you
36:46 - passed the props argument that props
36:48 - argument has access to this recipes prop
36:50 - right there and then inside of this
36:54 - inside of this div all we are doing is
36:56 - we are mapping over
36:59 - this piece of state
37:00 - right there and this gets filled once
37:03 - this search recipe button gets called
37:05 - okay and then once that's been called
37:08 - that means that this this prop has
37:10 - access to this piece of state right
37:12 - there which means we can actually map
37:14 - over inside of another component and
37:16 - that component right now is this recipes
37:19 - components
37:20 - okay a lot of talking
37:23 - now let's save the file go back to the
37:25 - web browser and see if that works
37:27 - let's just open up the console and let's
37:30 - look for chicken
37:32 - press search
37:33 - and we are indeed getting back 10
37:36 - different values
37:37 - sorry 10 different recipes for the
37:39 - chicken
37:40 - and this is brilliant
37:42 - so now that we have taken care of this
37:44 - recipes component let's go ahead and
37:46 - actually style
37:48 - our application because it it looks very
37:51 - ugly right now
37:53 - so
37:54 - let's continue with that
37:57 - so when i say styling
38:00 - i mean that i'm just gonna add a bunch
38:03 - of css properties that i've already
38:05 - declared
38:06 - inside of this app.css file so if
38:10 - something doesn't make sense to you
38:12 - then i've named these classes very
38:14 - appropriately so just have a look at
38:16 - this file and it should make everything
38:19 - clear to you
38:20 - and like i said before i've already
38:22 - installed bootstrap into this project as
38:24 - well
38:25 - and this is being imported right there
38:29 - inside of this index.js file and we're
38:32 - gonna make use of bootstrap as well
38:34 - okay so we're not really gonna make any
38:37 - changes to this app.js file
38:40 - instead let's just first open up this
38:42 - form.js file and this is where we're
38:45 - gonna get started with our styling
38:47 - okay so
38:49 - the first thing that i'm gonna do here
38:51 - is i'm gonna add a style attribute right
38:53 - there
38:55 - and this takes a javascript expression
38:58 - and then inside of it you can declare
39:00 - declare an object
39:02 - and then there you can define your
39:04 - styles
39:05 - so the first thing that i'm going to do
39:06 - is i'm going to declare a margin button
39:09 - okay and i'm going to set it to
39:11 - to ram
39:15 - okay
39:16 - now next step i'm gonna do is
39:20 - press save
39:22 - and i'm gonna give this input a class
39:24 - name of
39:27 - form underscore underscore input
39:30 - copy that
39:32 - and i'm going to give this button a
39:34 - class name of form underscore underscore
39:37 - button
39:39 - brilliant let's just go back to our
39:41 - application now and we can see that
39:43 - those styles are being applied
39:45 - okay now
39:48 - for the main styling we're going to stay
39:50 - in this recipes.js file so
39:54 - right now it's very simple but we're
39:55 - gonna completely transform this
39:57 - structure right there
39:58 - so what i'm gonna do is i'm actually
40:00 - going to go ahead and put this whole
40:02 - thing out
40:03 - just like that
40:05 - so start with the div okay so this div
40:07 - is gonna act as a bootstrap container
40:11 - okay
40:12 - and inside of this div let's just throw
40:14 - in a row
40:18 - okay now next up
40:20 - what do we need to do well this is where
40:22 - we are going to throw in our map
40:24 - function
40:25 - okay
40:26 - so to do that let's just
40:29 - let me just take a look at what i'm
40:30 - doing here because
40:32 - this tutorial is not scripted so i just
40:35 - really need to be careful
40:37 - with the classes so i don't mess
40:38 - anything up anyway
40:40 - so
40:41 - i need to add
40:43 - the bootstrap columns so what would be
40:46 - the best place to do that
40:48 - well
40:50 - this is one individual
40:54 - div that's being rendered out to the web
40:56 - browser so that means this would be an
40:59 - ideal place to throw in the bootstrap
41:01 - column class okay so to do that i'm
41:03 - actually going to cut this whole thing
41:05 - out
41:08 - just like that
41:10 - create a new class and i'm going to call
41:12 - it call
41:14 - md-4
41:16 - excellent
41:17 - so now
41:19 - let's just go ahead and open up this div
41:21 - and inside of this div let's also throw
41:24 - in an other class name and call it
41:27 - recipe underscore underscore box
41:31 - brilliant okay let's carry on and
41:35 - what do we need to do next
41:37 - well seeing as we are mapping over we
41:40 - are throwing in this div inside of this
41:41 - map function that means we get we have
41:43 - access to every property that this
41:45 - recipe has
41:47 - so the first thing that we're going to
41:48 - do is we're going to throw in an image
41:50 - tag
41:52 - and the source is going to be again
41:54 - recipe dot
41:56 - i believe it was image underscore url
42:00 - and the alt was
42:04 - recipe underscore the recipe dots i
42:06 - believe it was title yes it was
42:11 - okay what's next well let's also give
42:14 - this image a class so i'm going to say
42:16 - class name
42:17 - and i'm going to set it equal to
42:20 - recipe
42:22 - underscore underscore box
42:24 - and then it's img
42:27 - let's just break these attributes down
42:29 - to their own lines just so it's a bit
42:31 - more clear
42:32 - okay let's indent that in
42:34 - let's get rid of that there
42:37 - okay so what's next well after the image
42:39 - stack let's just go ahead and underneath
42:42 - this image tag let's open up a div
42:45 - and call it recipe
42:47 - underscore underscore text
42:50 - okay inside there what are we doing
42:54 - well
42:55 - let's open up a javascript expression
42:57 - because this is where we're going to
42:58 - throw out our recipe title
43:00 - so
43:02 - let's just say recipe
43:04 - dot title
43:07 - okay
43:08 - and let's wrap this inside of a h5 tag
43:12 - just so it looks like so it actually
43:14 - looks like a title so recipe
43:17 - come on on this recipe.title
43:21 - okay let's just take a look at how it's
43:23 - looking like so far well it says rvc is
43:27 - not defined so line number 12
43:30 - and yep of course it's not defined so
43:33 - press save and go back to the web
43:35 - browser
43:36 - let's just close that for now and press
43:39 - pizza search and see what we got back
43:42 - well we are getting stuff back but it's
43:44 - not looking very promising at the moment
43:46 - so let's just go ahead and fix this
43:49 - so the source for this tag is of course
43:52 - this image url so i typed in img
43:55 - anyway let's take a look at it now so
43:57 - pizza search and this is looking much
44:00 - better now
44:01 - okay
44:02 - well what is next
44:05 - well let's also grab another property
44:08 - from this array
44:10 - called publisher
44:12 - okay this one right there and again it's
44:15 - complaining about that key prop and we
44:17 - will pass that in a moment in fact let's
44:19 - just do it right now so
44:21 - what's the most parent div is this
44:23 - component right there so sorry this div
44:26 - right there so let's just say the key
44:28 - equals recipe
44:30 - dot title
44:32 - and that should fix it
44:34 - and while i'm here let's also give this
44:37 - each of the columns a
44:40 - bit of spacing towards the bottom so i'm
44:42 - going to say style
44:44 - equals
44:45 - and then an object
44:47 - that says margin bottom
44:51 - is let's just give it to ram
44:53 - okay press save
44:56 - so what is next
44:57 - well we were going to throw in the
44:59 - publisher so to do that
45:02 - let's just um shall we throw in a
45:04 - paragraph tag right there yeah staying
45:06 - inside of this div let's just throw in a
45:08 - paragraph tag
45:09 - and
45:10 - give it a class of
45:14 - recipes
45:15 - underscore underscore title and let's
45:18 - also copy this class and paste it right
45:21 - there
45:22 - and this should be title and this should
45:24 - be subtitle okay
45:27 - so let's open let's just type in
45:29 - publisher so this shows up
45:31 - and then
45:33 - let's throw that in a span tag so span
45:36 - and then inside of this pen what do we
45:38 - need to do well let's just open up a
45:40 - javascript expression and type in recipe
45:44 - dot publisher
45:47 - okay
45:48 - so what is next
45:49 - so we're also going to add a button
45:52 - which we can click and then we get taken
45:54 - to the recipe and we will hook that up
45:57 - using react router later on but for now
45:59 - let's just go ahead and add it so
46:02 - below this
46:04 - come on this recipe underscore text div
46:08 - let's just open up a a button tag
46:11 - okay
46:12 - and call it for now let's just call it
46:14 - view recipe
46:17 - and give it a class of
46:21 - recipe underscore underscore button
46:25 - brilliant now let's go back to our
46:27 - application and this should look the way
46:30 - we want it to look
46:32 - okay it's looking promising for the most
46:34 - part but i still kind of don't like the
46:37 - way it's looking so i probably mistyped
46:39 - something
46:41 - so i think the class name is recipe
46:43 - buttons actually
46:44 - it is
46:46 - and
46:48 - this should be recipe text
46:51 - and it should be recipe this should be
46:53 - recipes box okay my mistake
46:57 - okay let's go back to our
47:00 - application
47:01 - again press search
47:06 - okay this is looking good but again it's
47:09 - not perfect
47:10 - and i'm pretty sure that i'm typing out
47:12 - the class names
47:15 - somewhere wrong
47:18 - so
47:20 - it's recipe underscore underscore
47:23 - buttons
47:24 - actually i think i just typed one
47:27 - underscore right there so now if i press
47:29 - search
47:31 - there we go this is looking much better
47:33 - now
47:34 - so
47:35 - see i don't like how
47:38 - some of these boxes are
47:41 - longer in height and some are small in
47:43 - height so let's just type in something
47:45 - else so chicken
47:48 - see
47:48 - notice that you know
47:51 - when the name gets longer the box itself
47:54 - gets longer as well so how do we fix
47:56 - that
47:57 - well let's just make use of something
48:00 - inside of something very handy inside of
48:02 - javascript so to do that we're gonna do
48:06 - this inside of this recipe title
48:09 - so we're gonna make use of a javascript
48:12 - method called substring
48:15 - so
48:16 - it's better to explain it while we do it
48:19 - so let's just open up let's just expand
48:22 - this h5 tag right there
48:24 - let's put that in a separate line
48:27 - and right there what we're gonna do is
48:29 - we're gonna say if recipes dot title
48:33 - okay so
48:34 - dot length
48:36 - so remember this is a string and
48:38 - strings in javascript have a property
48:40 - called length
48:42 - so we can check that if recipe or title
48:44 - dot length
48:46 - is smaller than 20
48:48 - okay
48:50 - so we're using the ternary operator
48:52 - right there so it kind of works like if
48:55 - else statement but we can't really use
48:57 - if else statements inside of jsx so
49:00 - we're gonna have to make do with the
49:01 - ternary operator
49:03 - okay so if
49:04 - recipe title dot length is smaller than
49:08 - 20
49:09 - then this question mark refers the
49:13 - then clause inside of the if else
49:14 - statement then what we want to do is we
49:17 - want to open up a template string and
49:19 - inside of it we're just going to render
49:21 - out a recipe
49:22 - oops that's not how it should be
49:26 - it should be like that we're going to
49:28 - render out just the recipe or title as
49:30 - it is
49:31 - so if
49:32 - that the length of the title is less
49:34 - than 20 characters then we are just
49:36 - going to render out the recipe title
49:38 - just as it is okay
49:40 - else so this colon stands for else so if
49:44 - this condition isn't true
49:46 - then this is what's going to happen so
49:48 - else let's open up a
49:51 - template string again
49:53 - else
49:54 - recipe
49:55 - dot title
49:58 - dot and this is where we're going to
49:59 - make use of the substring method inside
50:02 - of javascript
50:03 - okay so this essentially takes a couple
50:06 - of arguments the first one is where it's
50:08 - going to start
50:09 - and the second one is where we want our
50:12 - string to trim
50:13 - so if
50:16 - the length of the title is smaller than
50:19 - 20 characters that means it can fix
50:21 - inside of just one box
50:23 - if it's greater than 20 characters which
50:25 - this one is what we can do is we can cut
50:28 - it down to just 25 characters so to do
50:31 - that we need to start with the first
50:33 - index the so the first letter which is
50:36 - right there and the index of that is
50:38 - zero so zero and then we just want to
50:41 - trim it down to 25 characters so this is
50:44 - what the second argument is going to be
50:47 - okay so once it's been done
50:50 - once the character has been trimmed
50:52 - let's also give the user some kind of
50:53 - feedback that this string is longer than
50:56 - it's appearing out to be so to do that
50:58 - let's just type in three dots right
51:00 - there okay
51:01 - go back to the web browser
51:03 - again search for chicken press set
51:07 - and now we can see that the titles that
51:10 - are longer than 20 characters have this
51:13 - kind of a nice
51:14 - you know three ellipses showing up right
51:16 - there
51:17 - and
51:17 - those titles that are smaller than 20
51:19 - characters they're just showing in their
51:21 - full length and this is exactly what we
51:24 - wanted to do
51:25 - okay
51:27 - so let's continue
51:32 - okay so now we're gonna add react router
51:35 - to our application
51:37 - more specifically we're gonna make this
51:39 - view recipe button work
51:41 - okay so to do that we're obviously gonna
51:43 - need react router and i did tell you
51:45 - earlier that i already have installed
51:48 - the react router packet so which lives
51:51 - right there
51:52 - okay so
51:54 - what we're going to do for that is we're
51:56 - going to create a new component inside
51:58 - of this components folder
52:00 - and we're going to call it
52:02 - router.js this component is ultimately
52:06 - going to replace this app component
52:08 - which lives which currently lives inside
52:11 - of this index.js file and this is what
52:14 - we're going to render out to the web
52:15 - browser
52:16 - okay so what do we actually need inside
52:19 - of this
52:22 - router components well obviously we need
52:24 - react so import react from react
52:27 - and we're also going to grab a bunch of
52:29 - named exports from this react write down
52:31 - package so we're gonna grab in fact
52:34 - let's just um first say import and then
52:38 - react router dom
52:39 - and then we can type in the property so
52:42 - we need browser router
52:44 - we need switch and we also need
52:47 - what do we need
52:48 - route okay
52:51 - if you are new to react router then i
52:54 - highly recommend you first learn about
52:56 - react router and i do have a video for
52:59 - that on my channel
53:00 - so go check that out it will give you a
53:02 - basic idea of react router and how it
53:05 - works
53:06 - okay so
53:08 - now you may notice that
53:09 - this new update in vs code it basically
53:12 - doesn't give you any highlighting unless
53:15 - you use
53:16 - the variables that you are using in your
53:19 - application so let's say that this
53:21 - reacts it's it's not highlighted it's
53:23 - usually in colors and the reason is
53:25 - appearing this dim is because we haven't
53:27 - used it yet
53:28 - so this is a nice way of vs code or to
53:31 - you know tell you that this is the stuff
53:33 - that you haven't used yet so use it okay
53:35 - so now if i just create a new
53:39 - component and i'm going to call it
53:40 - router
53:42 - and i'm going to set it to a stateless
53:43 - functional component and let's just make
53:45 - it return some
53:47 - jsx
53:48 - so now as soon as i create this div
53:51 - you can see that this line gets
53:54 - highlighted and this is because react
53:56 - has uh and this is because vs code has
53:58 - told us that you know this this thing
54:01 - right there has been used but we haven't
54:03 - used any of these properties yet so this
54:05 - is why they are still appearing gray
54:08 - okay coming back to the topic so
54:11 - we don't actually need this div what
54:13 - we're gonna do is we're gonna wrap
54:15 - everything inside of this browser router
54:17 - so i'm gonna place it right there
54:20 - and inside of it what do we need well we
54:23 - need our routes so to throw in our
54:25 - routes we just type in route
54:27 - and it's a self-closing tag and inside
54:30 - of it we add a component attribute
54:33 - and we also add a
54:36 - i believe is path yeah but i think that
54:38 - comes before the component so path
54:40 - equals and anything that that goes
54:43 - inside of it
54:45 - okay so how are we going to structure
54:47 - this
54:48 - well for the home component which
54:50 - obviously gets represented by this
54:52 - forward slash
54:54 - so if the path is this forward slash
54:57 - then we are going to show up our app.js
54:59 - components so app.js is obviously this
55:02 - whole thing right there
55:04 - so to do that we first need to import
55:06 - our app component so import up from
55:10 - and then we need to jump up our
55:12 - directory and then this app
55:14 - so if the compo if the path is this
55:16 - forward slash then show us this app
55:18 - component and we're also going to add a
55:21 - new route and that route is going to be
55:24 - that individual recipe whatever we click
55:26 - on
55:27 - so we don't really have any component
55:30 - for that yet but for the time being
55:32 - let's just create a new component and
55:34 - call it recipe now
55:36 - pay attention this is recipe and this is
55:39 - just an individual recipe okay it's very
55:41 - easy to make mistakes so just pay
55:43 - attention right there
55:45 - create a new components input react from
55:47 - react
55:48 - and then just create a stateless
55:50 - function component for now anyway and
55:53 - let's call it recipe
55:55 - and set it to another function
55:58 - and let's just implicitly return some
56:00 - jsx
56:02 - okay dev and let's just type in
56:05 - recipe
56:08 - component
56:11 - and export this right here at the bottom
56:13 - so export defaults
56:15 - recipe excellent
56:17 - now
56:19 - we need to actually input this into our
56:21 - router because this is what we're going
56:23 - to use in order to render it out
56:25 - so import
56:27 - recipe
56:29 - from
56:31 - and then it's in the same directory so
56:33 - recipe right there
56:35 - okay i'm just going to duplicate this
56:37 - line
56:38 - and i'm going to say that if so what
56:40 - what path do we need
56:42 - well it's going to be
56:44 - a bit more complicated than what we're
56:46 - used to but
56:48 - for now let's just throw in the path
56:50 - recipe so if the path is forward slash
56:52 - forward slash recipe
56:54 - then render out this recipe
56:56 - component okay well currently it's not
56:59 - going to work because
57:01 - this router file only exists in our
57:04 - components folder and we actually need
57:05 - to make use of it so to make use of it
57:08 - let's just go back to our index.js file
57:11 - and let's completely trash this app
57:13 - component right there and instead let's
57:16 - import
57:17 - i believe it's router
57:20 - from
57:21 - and then i think it's in the components
57:24 - folder and then router okay so now
57:27 - instead of this app component we're
57:29 - going to make use of this router
57:30 - component right there
57:32 - okay press save go back to the web
57:34 - browser and it says export defaults
57:37 - imported as router was not found and i
57:39 - know what the mistake is
57:42 - back in writing yes we need to make use
57:44 - of this
57:45 - switch statement right there so to do
57:47 - that
57:49 - let's just type switch
57:53 - and then throw in
57:55 - our routes
57:57 - and i also forgot to
57:59 - export this so export defaults and then
58:02 - router
58:03 - so now if i go back to
58:05 - the web browser we can see that we have
58:08 - our app component in all its glory and
58:11 - we can still search for recipes so
58:13 - if i type in chicken i can get the
58:15 - results that involve chicken and then
58:18 - right there what comp what other path
58:20 - did we create we created this recipe
58:23 - path so if i type in
58:26 - forward slash recipe
58:28 - i don't get recipe and this is because
58:30 - react router can be a huge dick at times
58:35 - so to fix that all we need to do is we
58:37 - need to give in the keyword exact right
58:40 - there to the topmost component
58:43 - what this is going to do is it's going
58:45 - to make sure that only render out this
58:47 - app components
58:49 - when this path is exactly this forward
58:51 - slash and there's there is nothing else
58:54 - in front of it
58:55 - so now if you press save go back to the
58:58 - web browser we can see that we are
59:00 - indeed on this recipe path and we are
59:02 - getting this
59:04 - recipe component render out to our
59:07 - application
59:10 - okay so now let's actually
59:12 - make the button work so what i mean is
59:15 - you know this person right there
59:20 - let's actually make this work so when we
59:22 - press it we actually get taken to the
59:24 - recipe
59:25 - okay so to do that
59:27 - it's going to be a bit more complicated
59:29 - than what we're used to but let's give
59:31 - it a go
59:33 - so
59:35 - back in this router.js file
59:37 - we don't really want this
59:40 - static recipe path what we want is we
59:42 - want
59:43 - a path parameter
59:45 - or in other words it's also called a
59:47 - route parameter so to start error
59:49 - parameter you type in colon
59:51 - and then anything that goes after it is
59:54 - considered as a parameter or a variable
59:57 - so
59:58 - what do we need in this case well you
59:59 - can name it anything but we're gonna
60:01 - grab the recipe id
60:03 - to access the data of the recipe so
60:06 - for the sake of simplicity and relevance
60:09 - let's just type in id
60:11 - okay now
60:13 - this path will only work
60:16 - so if i just simply go to recipe it's
60:18 - not going to work so forward slash
60:20 - recipe
60:21 - you can see that it's not going to work
60:22 - and this is because it also it's also
60:25 - going to take a route parameter
60:27 - so if i type anything after that let's
60:30 - say if i type in one
60:31 - then we can see that the recipe
60:33 - component is indeed showing up okay so
60:36 - this is how it's going to work
60:39 - so what's next
60:41 - well
60:42 - you know this button
60:45 - this view recipe button this lives
60:47 - inside of this recipes.js file which is
60:51 - this thing right there
60:53 - so to make to make this work we're going
60:55 - to grab another named export from the
60:58 - react write down packets and let's just
61:01 - type it in first
61:04 - come on
61:08 - and
61:09 - this package is called well this is a
61:11 - named export indeed and this is called
61:14 - link
61:15 - now this link essentially works the same
61:17 - as the anchor tag in html all it does is
61:21 - it directs you to whatever link it is
61:24 - you know pointing at
61:26 - so to do that let's just first go ahead
61:28 - and split this button into multiple
61:31 - lines
61:32 - and what i'm going to do is i'm going to
61:33 - cook this this new recipe text
61:36 - and there i'm just going to go ahead and
61:38 - throw in this view recipe and convert
61:40 - this to a link
61:41 - it's not going to do anything just yet
61:43 - but let's just go ahead and press save
61:45 - go back to the web browser
61:47 - search for the recipes
61:49 - and our application breaks this is
61:52 - because
61:53 - we need to specify a two attribute
61:56 - to this this link
61:58 - right there so essentially it's the same
62:01 - as saying so you know two is basically
62:03 - telling it what path does it need to go
62:06 - to so in our application we have two
62:08 - paths
62:10 - so what we're doing here is we need we
62:11 - need to tell this link to which of these
62:13 - two paths to go to once it's been
62:15 - clicked
62:17 - so now obviously we need to go to this
62:19 - recipe forward slash id and now remember
62:22 - this is a parameter so anything that
62:24 - goes in there gets gets replaced by this
62:27 - id parameter okay
62:29 - so we're actually going to make use of
62:31 - template strings right there because we
62:34 - need to inject some variables
62:36 - so to do that how do we do that because
62:39 - the template strings don't really seem
62:40 - to be working well to fix this all we
62:43 - need to do is we need to open up a
62:45 - javascript expression and then inside of
62:47 - it we need to open up a object
62:51 - and then we type in path name
62:53 - now this is where we're going to assign
62:55 - the path so
62:57 - if the path is and and let's set it to
63:00 - tempo literals because remember inside
63:02 - of a javascript express
63:04 - inside of a javascript expression we can
63:07 - use the template rituals
63:09 - so
63:09 - if the path is forward slash recipe
63:13 - now
63:14 - again this is id so that means we need
63:18 - to grab the id of the recipe
63:20 - so remember we are in fact mapping over
63:24 - the the whole recipes array right there
63:27 - so to grab the recipes all we need to do
63:29 - is forward slash recipes and then
63:31 - remember we can inject the variables so
63:34 - to throw in the recipe id we can just
63:36 - say that recipe so remember this recipe
63:39 - is referring to
63:40 - this recipe argument right there so
63:43 - recipe dot and then the properties that
63:45 - we need is called come on it's not there
63:49 - recipe
63:52 - underscore id
63:54 - okay and now
63:56 - how do we actually proceed with that i
63:59 - mean yes we do have this path provided
64:01 - so if i go back to the web browser
64:06 - press search
64:07 - and you can see that this has indeed
64:09 - been
64:10 - convert it to a link so now if i hover
64:13 - over it i get this you know hand sign
64:15 - and then it's showing me that it's
64:16 - actually a link so let's see what
64:18 - happens when we press this button the
64:20 - recipe
64:21 - boom
64:22 - we do indeed get taken so remember this
64:24 - is the recipe
64:26 - this is the recipe id
64:28 - and once we hit it we get taken to this
64:33 - recipe route right there
64:34 - so now if we choose a different recipe
64:38 - let's say we click on that
64:40 - we can see that the recipe id has been
64:42 - changed because the recipe id is just a
64:44 - number and that is what we're using to
64:46 - throw into our url
64:49 - does that make sense well i hope it does
64:52 - okay so what's next
64:55 - well how do we actually access the data
64:57 - inside of this recipe.js file
65:01 - first of all we need to convert this to
65:03 - a class-based component because we're
65:05 - going to use some of the properties that
65:08 - are only available inside of the class
65:10 - based component so to do that class
65:12 - recipe
65:13 - extends
65:15 - react
65:16 - dot component
65:18 - excellent let's just open up a pair of
65:21 - curly braces type in render and return
65:27 - some jsx so for now let's just return
65:29 - again the recipe component
65:35 - okay press search go back to the web
65:37 - browser make sure everything is working
65:38 - fine yes it is
65:41 - okay so
65:44 - if we didn't know any better we wouldn't
65:45 - know that what's going on inside of this
65:48 - recipe component but we do indeed have
65:52 - access to props right so if i type in
65:55 - console.log
65:57 - and then just props so we all we're
66:00 - doing here is we're just console logging
66:02 - the props
66:03 - so as soon as this component is loaded
66:05 - it says props is not defined and this is
66:07 - because we need to lock this dot props
66:09 - okay
66:10 - go back to the web browser
66:13 - open up the console so
66:15 - there we go and we do indeed have an
66:17 - object so if i expand it
66:20 - this is just
66:21 - a lot of
66:22 - react writer stuff that's been bound to
66:26 - this recipe component because
66:29 - we specified it right there in this
66:31 - recipes.js file
66:34 - so the reason we are getting all this
66:36 - react writer stuff is because we created
66:38 - a link right there
66:40 - and then this link belongs to react
66:42 - router so that means it's been bound to
66:44 - this recipe component as well
66:47 - okay so now if we go ahead and take a
66:50 - look at it
66:52 - we can see that we have a location
66:54 - object and if i expand it
66:57 - this is the path name that we set right
67:00 - there in recipes.js file
67:03 - this thing right there
67:04 - okay
67:06 - and we also have another property called
67:09 - state
67:11 - and this is what we're going to use in
67:13 - order to display the actual recipe onto
67:17 - this recipe component
67:19 - so to do that
67:21 - what are we gonna do
67:23 - well back in this recipes.js file we are
67:26 - gonna create an other attribute inside
67:29 - of this object right there
67:32 - so right after this string ends
67:36 - actually let me just break it down to a
67:38 - new line
67:39 - so path name and then i believe it's
67:43 - that one right there
67:45 - and this one is going to be called state
67:47 - okay
67:49 - now this state is going to
67:51 - contain a another object and the name of
67:54 - the object is gonna be recipe
67:58 - okay and let's just call it now like i
68:01 - said we're gonna use the recipe title in
68:04 - order to display the data so
68:06 - to see to do that let's just say recipe
68:09 - dots and then title
68:11 - and we do have access to this recipe
68:14 - because we are mapping over a recipe
68:15 - array and then we are setting up this
68:17 - recipe argument right there
68:19 - press save go back to the web browser
68:22 - and again expand this object
68:25 - and if i refresh it
68:27 - we can see that the state is still
68:29 - undefined
68:31 - and this is because the state is only
68:33 - going to get calls when we press this
68:35 - button now in this case this page is
68:38 - merely getting refreshed it's not
68:40 - we are not coming here because the
68:42 - button has been pressed so the state is
68:45 - only going to get set once we actually
68:47 - press the button
68:49 - so now if i go back all the way to my
68:52 - app component
68:53 - and again we type in chicken press
68:57 - search just go to any recipe let's just
69:00 - try that one
69:01 - and now if i open up my console
69:04 - we can see we have an object
69:06 - and there we
69:08 - do have a state object and inside of it
69:11 - we have the title which is called well
69:14 - whatever it was called chicken
69:16 - pyramidian i don't know what it is but
69:18 - anyway the good news is that we can use
69:20 - this state to display the data onto this
69:24 - recipe application
69:26 - okay so let's just do that now
69:31 - so back in this recipe.js file there is
69:34 - a reason why i set this up as a
69:36 - class-based component
69:39 - and the reason is that we're going to
69:41 - make use of state inside of this
69:43 - component okay
69:45 - so first of all let's just go ahead and
69:47 - declare our state
69:50 - and
69:51 - the state is going to be called active
69:54 - recipe
69:56 - and for now let's just set it to an
69:58 - empty array
70:00 - okay well next uh what's next
70:03 - well we're gonna make use of a react
70:06 - built-in method or in other words called
70:09 - a life cycle hook
70:11 - called
70:12 - component did mount
70:15 - this method is going to get fired as
70:17 - soon as this component
70:19 - gets loaded or gets mounted onto the web
70:23 - browser
70:25 - so anything that happens inside of it
70:27 - it's going to happen as soon as this
70:29 - component loads on the screen okay
70:32 - and we're actually going to do something
70:34 - pretty similar to what we did in app.js
70:37 - so for the most part what i'm going to
70:38 - do is i'm just going to go ahead and
70:40 - copy everything that's inside of this
70:42 - skip recipe method
70:44 - and we're just gonna change a few things
70:47 - for now let's just paste them and we
70:49 - also need our api key
70:52 - okay copy this go back to the recipe
70:55 - component and paste it right there
70:58 - so what exactly are we going to change
71:01 - well
71:02 - there is no recipe name
71:05 - in this component because obviously
71:06 - there is no form so
71:08 - what i'm going to do is i'm going to go
71:10 - ahead and delete this and i'm gonna
71:12 - instead type in title because the title
71:15 - is what we're gonna grab
71:17 - in order to display the data so title is
71:20 - what what do we equal it to
71:22 - we have an object there right so
71:24 - this dot props and then it's location so
71:28 - this dot prop shot location and then
71:31 - location.state and then the property is
71:34 - called recipe
71:36 - and remember we are getting this because
71:39 - back in recipes.js file we set up the
71:41 - state and then state the recipe
71:44 - okay so
71:45 - this
71:46 - the location
71:48 - actually is this dot crops
71:51 - location
71:52 - and then it's state
71:54 - and then it's recipe excellent
72:00 - so now what we need to do is we need to
72:02 - replace
72:04 - this recipe name with this title right
72:06 - there because this recipe name constant
72:08 - does not exist anymore and we can also
72:11 - get rid of this count
72:13 - okay so we can get rid of that and i'm
72:15 - just going to copy this and i'm going to
72:17 - paste it right there
72:19 - and we don't need this e dot prevent
72:21 - default because there is no form right
72:23 - there so we can just go ahead and get
72:25 - rid of that as well
72:27 - right so
72:29 - next up let's just change uh the names
72:32 - of these two constants because they
72:33 - already exist inside of this app.js file
72:37 - and it's not going to make a difference
72:39 - but it's best not to have any duplicates
72:41 - so i'm going to change this to
72:44 - rec or request and i'm going to change
72:46 - that to res or results or response
72:49 - whatever you want to call it
72:51 - and let's just get rid of these two
72:52 - statements right there and for now let's
72:55 - just console log
72:56 - this res right there
72:58 - all right so press save
73:01 - go back to the web browser
73:03 - and it says that api call is not defined
73:06 - and line number 13. so let's take a look
73:08 - at what's going wrong all right of
73:10 - course we need to
73:12 - change this to rec
73:15 - okay press save go back to the web
73:17 - browser
73:18 - and we are on the recipe component and
73:21 - there we go we do have a count showing
73:23 - up but it's actually 18 recipes it's
73:25 - giving us
73:27 - and the reason for this is because the
73:28 - recipe that we clicked on
73:31 - maybe has more than one name so you know
73:33 - it's cashew and chicken pasta you can
73:36 - see there's quite a few of these so to
73:38 - fix that
73:39 - the the most relevant recipe is going to
73:42 - be
73:43 - the topmost recipe in the array in this
73:46 - case the index is zero so instead of
73:48 - grabbing everything that's inside of
73:51 - this um recipes array what we can do is
73:53 - we can say red so remember res is this
73:56 - whole object so rest.recipes
74:01 - and then we just need to grab the first
74:04 - element in the array so in this case
74:06 - we're going to grab the
74:08 - element with the index of zero okay
74:10 - press save go back to the web browser
74:14 - and now we can see that we're only
74:16 - getting the
74:18 - recipe with this id that we searched for
74:20 - which is four six double line six and
74:23 - this is the title and these are all the
74:25 - images and you know the publisher that
74:27 - we're going to use to display the data
74:29 - okay brilliant so what's next
74:34 - so now we're going to make use of this
74:36 - active recipe state right there to
74:38 - actually display the data onto our
74:41 - actual screen okay so to do that let's
74:44 - just type let's just get rid of this
74:46 - console log right there for now
74:48 - and
74:49 - instead just type in this
74:51 - dot
74:52 - set state
74:55 - and then it's going to take an object
74:56 - and then we're going to assign the
74:58 - active recipe state the exact same thing
75:01 - that we will that we were console
75:03 - logging earlier so that was res that
75:06 - recipe
75:07 - and then the first
75:09 - index inside of it okay
75:12 - press save and now instead of console
75:14 - logging the res object let's just
75:17 - console log the actual state so this dot
75:20 - state dot
75:21 - active recipe
75:23 - press save
75:24 - go back to the web browser and we should
75:27 - still get back the same thing but beyond
75:29 - so let's take a look why
75:32 - so it says
75:34 - oh actually it should be recipes
75:38 - okay now this should work let's go back
75:40 - to the web browser
75:41 - and
75:42 - yes we are indeed getting back the same
75:44 - thing
75:46 - okay so
75:48 - now how do we use this piece of state to
75:50 - actually display the data onto our
75:53 - actual you know
75:54 - this whole screen right there
75:56 - well
75:57 - let's just add a bit obstructed inside
75:59 - of this render method so i'm actually
76:02 - gonna get rid of this whole thing and
76:05 - you're just gonna have to watch me type
76:06 - a bunch of
76:07 - you know markup using the using the
76:10 - classes and some of the bootstrap
76:11 - classes so
76:13 - the first one we're gonna start off with
76:15 - is called container
76:18 - and this is going to act as the wrapper
76:21 - div
76:22 - and then inside of container what we're
76:24 - going to do is i think the next class
76:27 - that comes is a
76:30 - because we
76:31 - we don't need to add a row because in
76:33 - this case we aren't really
76:35 - throwing in any columns all we need is
76:37 - just a big image and then underneath
76:40 - that just the title and the publisher
76:42 - and that's it so we don't really need to
76:44 - add any rows or anything so what i'm
76:45 - going to do is i'm just going to throw
76:47 - in a custom class that i've written and
76:49 - this is called active
76:51 - dash recipe
76:53 - okay let's crack open this and inside of
76:56 - it we're going to grab the image so
76:57 - remember we do have access to all these
77:00 - properties just like we did in app.js
77:02 - file
77:03 - so in this image tag i'm going to give
77:05 - it a class of
77:09 - i believe is active
77:12 - recipe underscore underscore image and
77:15 - then the source is going to be
77:19 - now see if we type in this dot state dot
77:23 - active recipe and then you know grab all
77:25 - these values
77:26 - this is going to get a bit messy
77:29 - i mean we're gonna have to do this for
77:30 - the title we're gonna have to do this
77:32 - for um
77:33 - for the publisher for the website
77:35 - so an easy way to fix this is to
77:37 - actually store that into a constant so
77:40 - just above this return statement what we
77:43 - can do is we can create a new constant
77:45 - and we can call it recipe and then we
77:47 - can set it to this dot state dot active
77:49 - recipe
77:51 - okay so now instead of typing out this
77:53 - whole thing we can just copy this
77:55 - and we can paste it right there
77:58 - and now that's all we need to type in
78:00 - order to grab the values of the object
78:02 - okay
78:03 - so now recipe starts and then it's
78:06 - image underscore url
78:09 - and for the alt tag let's just give it
78:11 - recipe
78:12 - dot
78:14 - title
78:15 - excellent
78:17 - press save
78:18 - let's take a look at what's going on in
78:20 - the web browser and
78:22 - there we go we do have the image showing
78:24 - up and this is brilliant so that means
78:26 - everything is working fine so let's move
78:28 - on
78:29 - okay so right below this image tag i'm
78:31 - gonna throw in a h3 title tag and i'm
78:35 - gonna give it a class name of i think
78:38 - it's i'm just gonna head go ahead and
78:40 - copy this active recipe because
78:42 - this is the prefix to every class name
78:45 - and then
78:46 - the prefix is
78:48 - title
78:50 - okay and the title is obviously going to
78:52 - be recipe
78:55 - dot title
78:57 - okay moving on let's add a h4 in there
79:01 - and i'm going to give this a class name
79:04 - of i think it's rest active recipe and
79:07 - then we're going to also grab this
79:09 - publisher
79:10 - because you know we're just going to
79:11 - show that who actually created this
79:13 - recipe so we're going to grab this
79:14 - publisher property
79:15 - so i'm just going to go ahead and copy
79:17 - this whole thing
79:19 - and paste it right there and i'm going
79:21 - to replace this title with
79:24 - i think is publisher
79:26 - yep
79:27 - okay and within there let's just throw
79:30 - in
79:31 - actually let's just break this into a
79:33 - multiple line because we're also going
79:34 - to throw in a span tag
79:36 - so
79:37 - let's type in publisher
79:40 - and then open up a span tag and then
79:42 - inside of it i'm just going to add a
79:45 - i'm just going to grab the property so
79:47 - recipe.publisher
79:50 - okay brilliant so what's next
79:54 - well uh just below this
79:56 - uh h4 tag let's throw in a paragraph tag
80:00 - and give it a class name
80:02 - of
80:04 - i'm just going to go ahead and copy this
80:06 - active recipe underscore underscore
80:09 - and this is going to be the website of
80:10 - the publisher so in this case we're
80:12 - going to grab
80:14 - come on
80:16 - where is the website so publisher
80:18 - publisher url recipe id title i think
80:21 - it's this one right there search url yep
80:23 - that's it
80:25 - oh publisher url actually this one right
80:27 - there so this is the property that we're
80:29 - gonna grab in order to let users know
80:30 - that you know this is the website of
80:33 - this
80:33 - recipe creator
80:35 - so again we're going to break this down
80:37 - to a multiple a new line and i'm just
80:40 - going to type in the word website right
80:42 - there
80:43 - add in a colon and then right there i'm
80:45 - going to type in a span
80:47 - and i'm going to give that
80:50 - inside of it it's going to be an anchor
80:51 - tag because obviously we need to redraw
80:53 - it
80:54 - we need to redirect our users to their
80:56 - website
80:57 - so the hrav is going to be so
81:01 - what is it
81:02 - recipe.publisher publisher url okay
81:06 - recipe.publisher
81:11 - and then underscore
81:12 - url and within there let's just uh
81:17 - type in the uh exact same thing so i'm
81:19 - actually just going to go ahead and copy
81:21 - this
81:22 - and paste it right there because we're
81:23 - actually going to display the website
81:25 - onto the screen as well
81:27 - right so the last thing that we need in
81:29 - there is the actual button that we are
81:32 - going to go ahead and create now so
81:36 - button
81:38 - and this is going to be responsible for
81:39 - taking us back to the home page so let's
81:42 - just give it a class name of
81:45 - and i'm just gonna go ahead and copy
81:47 - this active recipe thing paste it right
81:49 - there
81:50 - and then it's called button
81:53 - okay and let's just type in go
81:57 - home
81:58 - brilliant
81:59 - press save go back to the web browser
82:02 - and we should have our desired desired
82:05 - results yes we do
82:07 - okay so
82:10 - now you may notice that before the page
82:13 - loads
82:14 - this whole blank thing is showing up
82:16 - right there
82:18 - and we don't want that
82:20 - so what do we do to change that
82:22 - well let's just make a check
82:24 - we can check that
82:26 - if the uh because you know since all
82:29 - these values are coming from the state
82:30 - so we can just make a simple check that
82:32 - if this state
82:34 - has a length of zero then we don't want
82:38 - to display anything
82:40 - because if it's zero that means that
82:42 - this array is empty this active recipe
82:45 - state is empty which means that nothing
82:47 - is inside of it so as soon as it it gets
82:50 - filled we can actually display our data
82:53 - okay so to do that i'm actually going to
82:56 - cut out everything that's inside of this
82:58 - active recipe div
83:00 - and open up a javascript expression
83:03 - and inside of it i'm just going to type
83:06 - so we're going to make use of the and
83:08 - operator so as you know for the and
83:10 - operator
83:12 - both of the conditions have to be true
83:13 - in order for something to execute okay
83:16 - so we can say that this
83:18 - dot state
83:19 - dot active recipe
83:21 - and then since it's an array we can grab
83:23 - the length property and we can check
83:25 - that if this is not equal to zero
83:29 - so again
83:30 - if anything is inside of this array
83:33 - the length is going to be greater than
83:35 - zero so if this dot state dot active
83:38 - recipes length is not equal to zero only
83:41 - then do we want to render out everything
83:44 - that that's inside of this div that we
83:46 - just cut out so
83:48 - there we go we are making use of the and
83:51 - operator and now we can just go ahead
83:53 - and paste our div right there
83:56 - excellent
83:58 - so i'm just going to indent some of this
84:00 - stuff in just like that
84:04 - actually this should be there and then
84:07 - this should be there okay now if we go
84:09 - back to the web browser we can see that
84:13 - nothing shows up until the page actually
84:16 - loads and then the state gets filled
84:19 - so
84:20 - we need to actually make this go
84:22 - homework button work as well so how do
84:24 - we do that because you know we can't
84:27 - really make use of the actual a tag
84:29 - because that's gonna result into a full
84:31 - page refresh
84:33 - so if you are guessing that we're gonna
84:35 - make use of react router then you are
84:37 - absolutely right so
84:39 - first of all we need to grab a named
84:41 - export from react router
84:44 - okay and
84:48 - that is going to be
84:50 - link
84:51 - and remember we did we did use this link
84:55 - right there in recipes as well and that
84:57 - is exactly what we're going to do inside
84:59 - of this recipe components as well
85:02 - okay so i'm just going to go ahead and
85:04 - break this button down into multiple
85:06 - lines
85:07 - cut this out and
85:09 - open up a link tag and paste it right
85:11 - there now the only thing that we need to
85:13 - provide here is the path name so
85:15 - remember we have two parts we have the
85:18 - home path and then we have the recipe
85:20 - path so currently in this inside of the
85:23 - society component we are indeed on the
85:25 - recipe path so
85:27 - right there all we need to do is we need
85:29 - to say that once this button has been
85:31 - clicked take us back to home page so for
85:34 - the home page the path is forward slash
85:37 - okay so now if we go back to the web
85:39 - browser
85:42 - and we can see that this has been
85:43 - converted to a link and if i press this
85:46 - we get taken to the home page and from
85:48 - there on we can search for another
85:50 - recipe so
85:51 - actually let's type something different
85:53 - because we have used chicken quite a bit
85:55 - okay shrimp and then let's just go to
85:58 - one of these
85:59 - the recipe and then yeah it's working
86:02 - just fine
86:03 - from there on we can go back to our
86:06 - homepage using this go home button
86:09 - okay so our application is pretty much
86:12 - done for the most part the only thing
86:14 - that's left now is
86:16 - you know when we go back to the home
86:17 - page our results are gone
86:19 - so
86:20 - we want uh
86:23 - you know we
86:24 - we want to keep our results
86:26 - you know when we go back to the homepage
86:27 - we don't really want to search through
86:29 - the you know the index again
86:32 - and grab everything we want to we want
86:35 - we want our results to be there just the
86:37 - way they were before we navigated away
86:39 - from this page
86:40 - so let's take care of that
86:43 - inside of our app.js file okay so i'm
86:46 - just going to close everything else
86:48 - because i don't think we need anything
86:49 - else anymore
86:51 - now inside of this app.js file
86:56 - we're gonna make use of a couple new
86:59 - react lifecycle hooks
87:01 - and those two are component did update
87:04 - and component did mount actually we've
87:07 - used component demand already so the
87:09 - only new one is componented update
87:12 - so
87:13 - component did update works something
87:15 - like
87:18 - this we don't really need these two
87:20 - arguments because these are for
87:22 - something a little more advanced but
87:25 - essentially the way this works is
87:27 - whatever happens inside of this method
87:30 - is going to happen as soon as the
87:31 - component has updated
87:33 - and when does the component usually
87:35 - update well when the state changes okay
87:38 - so as soon as the state updates the
87:40 - component is going to update as well so
87:43 - as soon as that happens what we're going
87:44 - to do is we're going to create a
87:46 - constant all right and we're going to
87:47 - call it recipes
87:50 - and then we're just going to make use of
87:52 - the local storage to store our data so
87:55 - what we're going to do is
87:58 - first of all we're gonna
88:00 - convert this into you know our
88:03 - our recipe state into the json format
88:06 - because local storage only takes strings
88:09 - it doesn't take any objects it doesn't
88:11 - take any arrays it doesn't take any
88:13 - numbers nothing it just takes string uh
88:16 - it just takes the string so as uh json
88:18 - basically is just a one big string
88:21 - so to convert this we're gonna say json
88:24 - dot stringify
88:25 - and then what what do we need to
88:27 - stringify well we need to stringify this
88:30 - recipe state so json.stringify
88:33 - and then this dot state
88:36 - dot recipes
88:38 - okay so once that's been done we need to
88:40 - actually assign it to local storage so
88:42 - to do that we can just say local storage
88:45 - and then you set an item in local
88:47 - storage you use the property called set
88:49 - item
88:50 - and it takes a couple of arguments
88:53 - the first one is the name of the item
88:56 - which is going to store this recipe
88:58 - array right there so we need to provide
89:01 - that into in a string so i'm just going
89:03 - to call it recipes
89:05 - and the second argument is the actual
89:08 - thing that you want to store and in this
89:09 - case we want to store our recipes
89:12 - our recipe state so this is what we're
89:14 - going to type in right there okay
89:17 - so now if we go back to our web browser
89:20 - open up the state
89:22 - and let's just search for chicken
89:24 - because right now it hasn't been updated
89:26 - but it's going to get updated as soon as
89:28 - you press search because that's when the
89:30 - state updates
89:31 - so
89:32 - now from there let's just look for local
89:35 - storage because i kind of forgot where
89:37 - it lives so performance application
89:40 - local storage
89:42 - and there we go we can see that
89:45 - everything that we looked for is inside
89:47 - of this
89:48 - recipes object so right there if we type
89:51 - in
89:53 - local storage
89:55 - dot get item and then what did we set
89:58 - the item to is recipes right
90:00 - so get item is an other method on local
90:03 - storage which we can use to grab the
90:07 - items that we set so in this case we set
90:09 - the recipes item right there so we can
90:11 - say localstorage.get item and then if
90:14 - you press it press enter we can see that
90:17 - we are getting everything in form of a
90:19 - string so you can see this is a
90:21 - quotation mark and it ends right there
90:23 - at the end and this is why it's a very
90:25 - ugly format because this is not json
90:27 - this is just a one big string
90:31 - all right so what's next well
90:33 - once we have actually set this to local
90:34 - storage
90:36 - now using another lifecycle hook called
90:38 - component did mount
90:40 - we're just going to oh that's not it
90:45 - now in this method we're just going to
90:47 - fetch everything that's inside of our
90:49 - local storage so to do that
90:53 - we first need to grab our
90:56 - stored item which in this case is recipe
90:58 - so i'm just going to create a new
91:00 - constant and i'm gonna call it json
91:03 - okay and i'm gonna set it to local
91:05 - storage dot and then in order to get an
91:08 - item we use the get item property and
91:10 - then we're gonna grab the recipes item
91:13 - that we just set
91:14 - okay so now we first need to convert it
91:17 - to the actual json format because
91:20 - currently it's in the string format
91:22 - because we can't display any strings or
91:25 - any of the type onto the web browser so
91:27 - it has to be in json okay so we can say
91:31 - we can create a new constant called
91:32 - recipes
91:34 - and then we can say json and then to
91:36 - pass a string we say json.parse
91:39 - and then we can type we can pass in this
91:41 - json constraint right there okay
91:44 - excellent so now all we need to do is we
91:47 - just need to set this recipes to this
91:50 - recipe state right there okay so this
91:53 - dot set state
91:54 - and then
91:55 - an object and then recipes
91:58 - and then this constant right there
92:00 - okay
92:02 - and now one neat bit of syntax in es6 is
92:05 - that if the name of the of the
92:09 - property and the key
92:11 - if
92:12 - these two names are the same then you
92:14 - can just make it something like this
92:16 - okay if it was something like recipe
92:18 - then we would actually have to type it
92:20 - this way but in es6 if the names of the
92:24 - keys and the values are the same then
92:26 - you can just do something like this okay
92:28 - now if you press save go back to the web
92:31 - browser
92:32 - we can see that we are indeed going
92:34 - through a full page refresh but nothing
92:36 - is changing we can see that we are still
92:38 - getting the results and
92:41 - let's just look for something else let's
92:42 - look for garlic press set
92:46 - and let's just do let's just view one of
92:48 - these recipes let's just view this one
92:52 - and we are indeed getting it back now if
92:54 - you go back to the home page we can see
92:56 - that we still have the recipe that we
92:58 - searched for
93:00 - okay well this is it for this video and
93:03 - i really hope you learned something from
93:05 - it thank you very much for watching and
93:07 - i will see you next time goodbye

Cleaned transcript:

hello everyone we are going to build this recipe application in react so before we dive into it let me just give you a quick demo of how it's going to work essentially it grabs the recipes from an external api so this is what happens when the page first loads and then from there on we can search for recipes so if i type in shrimp it's going to give me the recipes that involve shrimp and then if i type in chicken it's going to give me the recipes that involve chicken from there on we can view the recipe by clicking this view recipe button and then it takes us to that recipe using react router once it's been loaded we can go back to the home page by pressing this go home button and it takes us back to home page again using react router now you may notice that the results that we looked for are still there and this is because we are using data persistence to store our data locally for this project you are expected to have a little bit of knowledge of javascript react and react router okay so without any further ado let's get started alright so to get started i've already created a project folder for you using the createx app cli so inside of this folder i've included the css that i've written for this project which lives right there so feel free to take a look at it and i've also installed the packages that we're going to need for this project so i've installed bootstrap and i've also installed this react write it down packet and these three they already come built into a create react app project okay so i've i will link this project in the video description so go and download it and once you have downloaded it just go ahead and navigate to it in your terminal type in npm install to install the all the packages and the node modules folder and once you've done that just type in npm start or yarn start to launch this project into your web browser okay so come on this is what we're going to start with it's just a blank screen with basically a header and a title that reads recipe search and this is what's going on in this app.js file okay so as you know we're going to type in the values well the names of the recipes to search for them so how do we actually search for recipes well we need the input form so to do that let's just first create a new folder in this source folder and i'm going to name it components within this components folder let's just create a new file and call it form.js all right in there first things first we need to input react from react and then i'm going to create a stateless functional component and i'm going to call it form and it's going to be a stateless functional component because we don't need any state in this component so if a component is a needed state that means we can make it a stateless functional component and not a classbased component all right so i'm just going to implicitly return some jsx so inside of it i'm going to create a form come on and we don't need the action so inside of this form let's just create a new input the type of text let's get rid of this id and the name for now and i'm also going to create a button that says search and before i forget let's just go ahead and export this right here at the bottom so export default form excellent now let's go back to app.js and input this so import form from and then we need to stay in the same directory go into the components directory and then import form all right so let's just render it out right there just below the header so there we go let's go back to the web browser and make sure that it's showing up yes it is so let's just create a method inside of this component and hook it up to this form.js because we need to first make sure that everything is working correctly so i'm going to call this method get recipe and this method is going to be responsible for making the api call okay and let's set it to a arrow function now this syntax may look a bit weird to you you may be used to seeing something like a constructor function and then inside of it you basically type in your methods like this and then you have to hook them up in your constructor function like this dot get recipe equals this dot get recipe dot bind and then you bind in your methods whatever well this has been removed or you can say that deprecated in react16 so essentially in react16 you don't really need a constructor function you can even declare your state without a constructor function just like that okay so this is just a neat bit of syntax in the new version of react and i think this is much better and much more practical than the previous versions anyway getting back to the topic first of all let's just console.log something into this method just to make sure that it's working fine so i'm just going to console.log saying working but how do we hook it up to this form component well we first need to go ahead and pass this data to the sum component and how do you pass data to another component you use props so i'm going to name this prop the same as this method so i'm going to say get recipe equals this so this refers to this app component and then this dot get recipe okay press save now back in form we do have access to this get recipe prop because we set it up right there but to access it we can't really use the this dot props approach because this keyword only works in classbased components but this is a stateless functional component which means we have to pass an argument right there called props now with this props refers to these right there so whatever get passed in there gets stored into this argument so this prop is basically an object so to access the properties of an object you type in well props dot and then whatever the name of the property is now in our case we are going to set up an attribute called spawn submit which is a builtin react react attribute and then we can say props dot and then the name of the prop is get recipe so let's just copy it and place it right there excellent press save app.js and now what do we want well we want this console.log to show up as soon as we press this button so now if i open up my developer tools go to the console press search oh what's happening there well keep your keep your eye right about there as soon as i press the search button keep your eye there did you see that that working console log appeared for like just a split second but then it disappears and this is because we are going through a full page refresh this this full page refresh is the default behavior of any web page and to change that all we need to do is we need to pass in an argument e actually let me just convert that to a arrow function first so i don't have to bind it so this e is basically the event object in javascript this is nothing specific to react so since this is an object means we can access the properties of this object so i can say e dot prevent default and this method is going to prevent the default behavior of this web page which is what that is going to refresh so now if i press save go back to the web browser press search we can see that the working console log is showing up brilliant okay well what do we need to do next well we need to first let's just let's just um make sure that we are actually reading the values that we type in there so first of all we need to set up a name attribute because this is what we're going to use to read the values from the input okay so name and i'm gonna name it recipe or let's just call it recipe name okay i'm gonna copy this and within this get recipe method i'm going to create a new constant and i'm going to call it same as that recipe name equals so again this event object means we can read the properties from it so e dot target dot elements and then what do we need to access well we need to access this name attribute so what's the name of this name attribute it's recipe name so e dot target.elements.name dot recipe name and then what do we need to access from it we need to access its value so doc value okay now instead of console logging this working string let's just actually console.log this recipe name constant that we just created right so let's go back to the web browser and type in anything type in chicken press search and there we go this is working just fine okay now let's get into some more interesting stuff we need to make an api call to a website and then we are reading the data from the website and showing up to our web application and what's the website that we need to make the api call to well is this recipe api called food to fork that's kind of a weird name but food to fork dot com slash about slash api now you can read this but for the most part all you need to do is you first need to sign up for the website it's completely free and you need to obtain an api key because you need that in order to work with their data essentially an api key is a way for websites to know who you are and what kind of data you're trying to access so they they use your api key that are associated to your email address and then they just basically want to know what kind of data you're trying to access that's the whole purpose of obtaining the api keys okay so all you need to do is just press the sign o button and then it will redirect you back to this page once you have got your api key so the url that we need to make the api call to lives right there now see this is the url that we need and see this key parameter right there this is where your api key should go so once you have done that your url should look something like this right there see this is the exact same api right there sorry this is the exact same url apart from the fact that this api key variable has been replaced by my actual api key so all i did was i first signed up then i copied this url i pasted it right there and then instead of this api key wrapped within those curly braces i just pasted my api key right there and what i've been looking for by default we are looking for this shredded chicken and these are the results that we are getting back and you may also notice that there's also this count parameter right there and we can change that we will do that later on in the video but we can change that to anything we can change that to 5 10 15 whatever you like it just depends on how many results you want to show so in this case the count is set to five which means we are getting an array of recipes and this array has five different objects and then you see that these are the properties that we're going to read in order to access the data so this publisher title recipe id just some of these we're going to use in our web application okay so let's actually go ahead and copy this url okay go back to our application and i'm actually going to just go ahead and create a new constant but all i'm going to do there is i'm first going to extract my api key because i'm going to store that in a new constant so there we go because it's always a good practice to just store your important data into your own constants in case you need it later on okay and i'm just going to go ahead and create a new string and paste my api key right there okay so once that's been done we are now ready to make the http call to this url right there so to do that i'm first going to go ahead and put this link out just like that and inside of this get recipe method just below this prevent default call i'm gonna create a new constant and i'm gonna call it api underscore call and for now i'm just going to go ahead and initialize a string and inside of that i'm going to paste this link right there that doesn't seem right let's just fix that there we go okay so we're gonna make use of something called async await and the fetch api to make the call to this link right there so how do you initialize a async await function or in this case how do we make this method asynchronous well just before we declare the method we're going to type the keywords async okay and then right there we're making the api call we type in the keyword of eight and to actually make the http call we're gonna use the fetch api so to do that i'm again going to go ahead and cut this link out and i'm going to type in the keyword fetch and within that instead of initializing the string i'm going to use the es6 template literals so to do that is just using the backticks and then i'm going to paste the link right there so we need to change a couple of things now because remember we have our api key stored in this constant right there so in es6 template literals we are allowed to inject the variables inside our string so to do that we're going to go ahead and copy this api key constant and we're going to inject it right there where the key is required so to insert a template neutral all you do is you type in the dollar sign and then a couple of uh curly braces and then whatever goes inside of these curly braces it basically what we want to do so in this case we just want to inject this api key variable so again i'm just going to go ahead and copy this and paste it right there and what do we need to do next well the default search for now is just shredded chicken right there later on we will change that to whatever we type into our form but for now let's just leave it to shredded chicken okay so i'm actually going to get rid of this console log right there because we don't need that anymore so this is just making the api call it's it's not actually grabbing any kind of data so to do that i'm actually going to create a new constant and i'm going to call it results or let's just call it data and we're going to set it to the return value of this fetch function right there so again to grab the value we're going to first type the keyword await okay and then we also need to convert this whatever we get back from this api to a json format so you may be used to seeing something like you know json.parse or json.stringify but what's how clean this is in fetch api all you need to do is you need to type in the contents name which in our case is api call and then we just call the json method there we go just like so okay so now whatever we get back from the api is going to be stored in this data constant right there so let's just check what's inside of this data constant so if i console console.log this data object now remember this method is going to fire as soon as we press this button right there so now let's just go back to our application and press search what's that no access control allow origin some websites do not allow local servers to access their data now in our case we are using our localhost 3000 to access the data from this food to fork website so we need to do something to trick this food to fork servers into thinking that we are a legitimate website so in other in other words we are live on the servers so how do we fix that well there's a very handy tool for that it's called course anywhere.heroku.com so all we need to do is we need to go ahead and copy this url okay and go back to our application and just before our link begins we just prefix it with this url that we just copied right there all this is going to do is it's going to trick this website into thinking that our server which in our case is localhost this is actually a live server that lives somewhere on the internet okay that's all this url is going to do so now if i press save and then go back to our application press it and hopefully this should give us some sort of data and yes it does so this essentially is an object and the value of that is this data constant right there so if i expand it this is the count so remember we get an array of five objects because we have set the count to five so if i change the count to let's say 10. let's see what we get back so press search and there we go we get an array of 10 objects so let's just go ahead and crack open this recipe array and let's take a look at what's inside of this well it's basically like i said it's an array and inside of that is just a count of objects so that count is what we type in right there so let's just crack open the first one so these are just a bunch of properties that we're going to use in order to display the data on our website so what do we need here well to actually access this data what we need to do is we need to drill down into this array first this recipes array so we're going to have to say something like data so remember data is this whole object so to drill down into recipes we have to say data dot recipes and now if i console log this we get back the array that we need so this is the array and let's just say that we want to go to this first element in this array so i can say data so again to access a number in an array you use the index in this case it's zero so we want to access the first element and inside of this and inside of that let's just try and access this recipe id so let's just copy that and paste it right there and let's see what we get back so press search and there we go we get the recipe id back but this isn't what we want we actually want to display the data on our actual web page which is this whole thing right there so how do we do that well let's take a look so to actually display this piece of data we don't really have anywhere to store that inside of so we do have this constant called data but this only exists inside of this method so now would be a good time to introduce state within our application so to do that it's just going to type in the keyword state and i'm just gonna set it to an empty object now again you might be used to doing something like typing in a constructor and then declaring your state like that but like i said in react 16 and further on you don't need the constructor function at all so you can just delete that all together and what you can do is you can just simply declare your state like that so what kind of state do we want to trace what we want to do is we want to set up an array which is going to store whatever we get back from the api and what do we get back we get back an array so to do that let's just create a first piece of state called recipes and set it to an empty array excellent now how do we actually make use of this state right there well instead of console logging this piece of data right there let's just do something else let's just use the builtin set state method to set this piece of data to this recipes array so to do that i'm just going to say this dot set state and it's going to take an object and within there we want to grab the recipe state and we want to set it to data just like that okay so now instead of console logging once we get back from this data let's console log this piece of state right there so console.log and this dot state dot recipes okay let's go back to the web browser open up our console press search and we should get back our piece of state and that we do and inside of this piece of state we have an object and then inside of the object uh is this recipes array right there so all we want to do right there is we only want this array right there so to do that let's just say data dot and then is this recipes array right there because we want to set this recipes array to this recipes area right there okay so data dot recipes there we go go back to the web browser press search and now all we get back is an array and within that array there's just a bunch of objects so this is all well and good but how do we actually display this data onto our actual screen so to do that let's just do something more interesting for now all i'm going to do is i'm going to open up a javascript expression right there which means and by the way in jsx opening up a pair of curly braces means that you want to inject something that is related to javascript okay so to do that i'm going to make use of an array method called map now map is a new method that was introduced in a later version of javascript and essentially it allows you to go through each element inside of an array and then you can manipulate it you can change it anything you want to do with it so it's kind of like the for each method but in gsx we can't really use the for loop or the for each loop so we're gonna have to make do with what we have so what we have here is the array method uh array.map method so in this case the recipe state is an array so all we can do is we can say this dot state dot recipes and then we call in the method called map and this method takes a callback function so let's just give it a callback function and we also give it a argument right there an argument i should say or a parameter and this parameter is going to contain each of the elements that are inside of this recipes array once the state has been set so let's just call it a individual recipes just like that and then within there let's just return a paragraph that says and again since we're going to make use of this javascript thing inside of this jsx paragraph tags we have to introduce curly braces so what do we want to access well for now let's just say recipe and then let's just crack open one of these and recipe.title for now let's just console let's just print out recipe.title so remember it's going to print out 10 different titles on the screen because it's going to loop through each of these elements right there and the number of them is 10 so we're going to get 10 titles printing out to the screen okay so again press save go back to the web browser there are no errors which is good so now if i press search i should get some titles onto the screen yes we do this is brilliant but we also have an error it reads each child in an array or iterator should have a unique key prop and this error is something to do with react essentially it's asking us to set a parameter called key to each of these elements that have been looped over and the reason for this is that react wants to know what each of these elements are i mean there is no way for react to know what this title is what this title is all it's doing is it's reading the properties of each of the objects right there but it also needs to know that in future in case we need to manipulate any of these so react can just grab the key prop and then from there it can do its thing so to do that all i'm going to do is i'm going to set this recipe id which is this right there i can also set the title or the search url as long as it's something unique and different to compared to the other objects it will do but just for the sake of simplicity i'm gonna copy this and i'm gonna say that key equals and again i'm gonna have to open up a javascript expression and inside of this i'm gonna say recipe dot recipe underscore id now if i press save and go back to the web browser press search we can see that all the titles are printing out to the screen and we also don't have any errors uh this is just a eslint complaining that recipe name has been declared but it's not been used and this isn't really something to worry about so let's just move on so currently we are just getting the default value which is this shredded chicken right there but what we want to do is we want to get the results of whatever the user types into this input form right there so to change that we already have a value from that form which we grabbed earlier on using the event object so all we can do is we can use this recipe name constant and like i said this is a template string so we can actually inject this variable right there instead of this shredded chicken so what i can do is i can just cut this out okay and then to open up a template literal you type in the dollar sign followed by a pair of curly braces and then within there we can inject this variable right there just like that okay press save go back to the web browser and now if we type in let's say shrimp press search and we are indeed getting the results that involve shrimp on the screen as well as in the console right there okay so what's next so let's actually grab a bit more than just the titles so if i just crack open one of these objects right there uh we can use a bunch of properties there so what we're gonna use is we're gonna use this title which we already use and we're also gonna use this publisher name and we're also gonna use this image url but for now let's just throw in this image and see how it goes so i'm just going to go ahead and copy this i'm going to go back to our application and instead of just returning this one single paragraph let's actually just cut it out open up a pair of parentheses and inside of it let's create a div throw in that paragraph tag and let's also add in a image tag just above this paragraph sag so and the source is going to be actually this recipe dot and then the image url so as always to open up a javascript expression you have to throw in a pair of curly braces and then recipe and then image url so what kind of description do we need to give it to this image tag well we can just throw in the title there just like we did right there so we can say again to initialize a javascript expression come on we have to first open up a pair of curly braces and then recipe dot title excellent now if we go back to the web browser and press search let's look for pizza this time and we should get back the images they look hideous at the moment but we will fix that so why is this giving an error again uh this key prop error even though we have already passed the key right there well the error here is that the key has to be passed within the most parent element so what's the most parent element in this case well it's this div right there so i'm just going to cut this out and paste it right there just like that so now if you go back to our application press pizza and yeah it's working out fine but it's looking rather hideous at the moment so we're gonna fix that next so to do that we're gonna make use of bootstrap which i already have included in our package.json and as well as our index.js file right there so to make use of bootstrap we're just going to add a bunch of classes from the bootstrap framework but before we do that let's take care of this piece of code right there all we are doing there is we are mapping over this piece of state right there but this is a bit messy i mean we don't want to do that in our app component so to take care of that let's just transfer this into its own component so what i'm going to do is i'm going to create a new component in the components folder and i'm going to call it recipes.js okay once i'm in there it's gonna import react from react after that let's just create a stateless functional component because again we don't need any state in there so we can make this a stateless functional component so to do that i'm just gonna call it recipes and i'm going to set it equal to an error function and i'm going to implicitly return some jsx so first of all i'm just going to return it div and within this step for now let's just type in recipes just to make sure that it's working and right there let's just export defaults at the bottom excellent now let's go back to our app.js file and just underneath this form component let's import the recipe so import recipes from and then it's the components directory and then recipes okay so i'm actually going to cut this out and i'm just going to go ahead and render out a recipes component press save go back to the web browser and we do have our recipes component showing up okay but we don't want it to just render out this text we wanted to actually display the data that we were previously getting so how do we do that well first of all we need to pass this state this recipes array to this recipes component and then in this inside of this recipes component that is where we're going to map over that piece of state right there so how do we pass this piece of state to our recipes components well as always to pass anything inside of react you have to use props so to do that i'm just gonna pass a new props and i'm gonna call it recipes okay and and i'm going to set it to this dot state dot recipes excellent so now this prop means that we do have access to our recipe stage that lives there so now back in recipes.js file to get access to this prop right there we first need to pass in an argument right there called props because this is the only way we can access the props we can't really say something like this dot props dot whatever because this keyword will not work inside of this jsl that lives inside of this error function okay if it was a classbased component then we could have used it but in stateless functional components there's no way we can access the props using these keywords okay so now how do we proceed with our recipes props well it's the same as what we did right there so i'm actually just going to paste the piece of code that i copied that i cut earlier and all i'm going to do with in there is i'm going to get rid of this keyword and i'm also going to get rid of this state because the state does not exist in this component instead i'm going to type in props and what's the name of the prop is this recipe so props dot recipes and then is the exact same thing that we have been following so again let's just break it down we passed the props property uh you passed the props argument that props argument has access to this recipes prop right there and then inside of this inside of this div all we are doing is we are mapping over this piece of state right there and this gets filled once this search recipe button gets called okay and then once that's been called that means that this this prop has access to this piece of state right there which means we can actually map over inside of another component and that component right now is this recipes components okay a lot of talking now let's save the file go back to the web browser and see if that works let's just open up the console and let's look for chicken press search and we are indeed getting back 10 different values sorry 10 different recipes for the chicken and this is brilliant so now that we have taken care of this recipes component let's go ahead and actually style our application because it it looks very ugly right now so let's continue with that so when i say styling i mean that i'm just gonna add a bunch of css properties that i've already declared inside of this app.css file so if something doesn't make sense to you then i've named these classes very appropriately so just have a look at this file and it should make everything clear to you and like i said before i've already installed bootstrap into this project as well and this is being imported right there inside of this index.js file and we're gonna make use of bootstrap as well okay so we're not really gonna make any changes to this app.js file instead let's just first open up this form.js file and this is where we're gonna get started with our styling okay so the first thing that i'm gonna do here is i'm gonna add a style attribute right there and this takes a javascript expression and then inside of it you can declare declare an object and then there you can define your styles so the first thing that i'm going to do is i'm going to declare a margin button okay and i'm going to set it to to ram okay now next step i'm gonna do is press save and i'm gonna give this input a class name of form underscore underscore input copy that and i'm going to give this button a class name of form underscore underscore button brilliant let's just go back to our application now and we can see that those styles are being applied okay now for the main styling we're going to stay in this recipes.js file so right now it's very simple but we're gonna completely transform this structure right there so what i'm gonna do is i'm actually going to go ahead and put this whole thing out just like that so start with the div okay so this div is gonna act as a bootstrap container okay and inside of this div let's just throw in a row okay now next up what do we need to do well this is where we are going to throw in our map function okay so to do that let's just let me just take a look at what i'm doing here because this tutorial is not scripted so i just really need to be careful with the classes so i don't mess anything up anyway so i need to add the bootstrap columns so what would be the best place to do that well this is one individual div that's being rendered out to the web browser so that means this would be an ideal place to throw in the bootstrap column class okay so to do that i'm actually going to cut this whole thing out just like that create a new class and i'm going to call it call md4 excellent so now let's just go ahead and open up this div and inside of this div let's also throw in an other class name and call it recipe underscore underscore box brilliant okay let's carry on and what do we need to do next well seeing as we are mapping over we are throwing in this div inside of this map function that means we get we have access to every property that this recipe has so the first thing that we're going to do is we're going to throw in an image tag and the source is going to be again recipe dot i believe it was image underscore url and the alt was recipe underscore the recipe dots i believe it was title yes it was okay what's next well let's also give this image a class so i'm going to say class name and i'm going to set it equal to recipe underscore underscore box and then it's img let's just break these attributes down to their own lines just so it's a bit more clear okay let's indent that in let's get rid of that there okay so what's next well after the image stack let's just go ahead and underneath this image tag let's open up a div and call it recipe underscore underscore text okay inside there what are we doing well let's open up a javascript expression because this is where we're going to throw out our recipe title so let's just say recipe dot title okay and let's wrap this inside of a h5 tag just so it looks like so it actually looks like a title so recipe come on on this recipe.title okay let's just take a look at how it's looking like so far well it says rvc is not defined so line number 12 and yep of course it's not defined so press save and go back to the web browser let's just close that for now and press pizza search and see what we got back well we are getting stuff back but it's not looking very promising at the moment so let's just go ahead and fix this so the source for this tag is of course this image url so i typed in img anyway let's take a look at it now so pizza search and this is looking much better now okay well what is next well let's also grab another property from this array called publisher okay this one right there and again it's complaining about that key prop and we will pass that in a moment in fact let's just do it right now so what's the most parent div is this component right there so sorry this div right there so let's just say the key equals recipe dot title and that should fix it and while i'm here let's also give this each of the columns a bit of spacing towards the bottom so i'm going to say style equals and then an object that says margin bottom is let's just give it to ram okay press save so what is next well we were going to throw in the publisher so to do that let's just um shall we throw in a paragraph tag right there yeah staying inside of this div let's just throw in a paragraph tag and give it a class of recipes underscore underscore title and let's also copy this class and paste it right there and this should be title and this should be subtitle okay so let's open let's just type in publisher so this shows up and then let's throw that in a span tag so span and then inside of this pen what do we need to do well let's just open up a javascript expression and type in recipe dot publisher okay so what is next so we're also going to add a button which we can click and then we get taken to the recipe and we will hook that up using react router later on but for now let's just go ahead and add it so below this come on this recipe underscore text div let's just open up a a button tag okay and call it for now let's just call it view recipe and give it a class of recipe underscore underscore button brilliant now let's go back to our application and this should look the way we want it to look okay it's looking promising for the most part but i still kind of don't like the way it's looking so i probably mistyped something so i think the class name is recipe buttons actually it is and this should be recipe text and it should be recipe this should be recipes box okay my mistake okay let's go back to our application again press search okay this is looking good but again it's not perfect and i'm pretty sure that i'm typing out the class names somewhere wrong so it's recipe underscore underscore buttons actually i think i just typed one underscore right there so now if i press search there we go this is looking much better now so see i don't like how some of these boxes are longer in height and some are small in height so let's just type in something else so chicken see notice that you know when the name gets longer the box itself gets longer as well so how do we fix that well let's just make use of something inside of something very handy inside of javascript so to do that we're gonna do this inside of this recipe title so we're gonna make use of a javascript method called substring so it's better to explain it while we do it so let's just open up let's just expand this h5 tag right there let's put that in a separate line and right there what we're gonna do is we're gonna say if recipes dot title okay so dot length so remember this is a string and strings in javascript have a property called length so we can check that if recipe or title dot length is smaller than 20 okay so we're using the ternary operator right there so it kind of works like if else statement but we can't really use if else statements inside of jsx so we're gonna have to make do with the ternary operator okay so if recipe title dot length is smaller than 20 then this question mark refers the then clause inside of the if else statement then what we want to do is we want to open up a template string and inside of it we're just going to render out a recipe oops that's not how it should be it should be like that we're going to render out just the recipe or title as it is so if that the length of the title is less than 20 characters then we are just going to render out the recipe title just as it is okay else so this colon stands for else so if this condition isn't true then this is what's going to happen so else let's open up a template string again else recipe dot title dot and this is where we're going to make use of the substring method inside of javascript okay so this essentially takes a couple of arguments the first one is where it's going to start and the second one is where we want our string to trim so if the length of the title is smaller than 20 characters that means it can fix inside of just one box if it's greater than 20 characters which this one is what we can do is we can cut it down to just 25 characters so to do that we need to start with the first index the so the first letter which is right there and the index of that is zero so zero and then we just want to trim it down to 25 characters so this is what the second argument is going to be okay so once it's been done once the character has been trimmed let's also give the user some kind of feedback that this string is longer than it's appearing out to be so to do that let's just type in three dots right there okay go back to the web browser again search for chicken press set and now we can see that the titles that are longer than 20 characters have this kind of a nice you know three ellipses showing up right there and those titles that are smaller than 20 characters they're just showing in their full length and this is exactly what we wanted to do okay so let's continue okay so now we're gonna add react router to our application more specifically we're gonna make this view recipe button work okay so to do that we're obviously gonna need react router and i did tell you earlier that i already have installed the react router packet so which lives right there okay so what we're going to do for that is we're going to create a new component inside of this components folder and we're going to call it router.js this component is ultimately going to replace this app component which lives which currently lives inside of this index.js file and this is what we're going to render out to the web browser okay so what do we actually need inside of this router components well obviously we need react so import react from react and we're also going to grab a bunch of named exports from this react write down package so we're gonna grab in fact let's just um first say import and then react router dom and then we can type in the property so we need browser router we need switch and we also need what do we need route okay if you are new to react router then i highly recommend you first learn about react router and i do have a video for that on my channel so go check that out it will give you a basic idea of react router and how it works okay so now you may notice that this new update in vs code it basically doesn't give you any highlighting unless you use the variables that you are using in your application so let's say that this reacts it's it's not highlighted it's usually in colors and the reason is appearing this dim is because we haven't used it yet so this is a nice way of vs code or to you know tell you that this is the stuff that you haven't used yet so use it okay so now if i just create a new component and i'm going to call it router and i'm going to set it to a stateless functional component and let's just make it return some jsx so now as soon as i create this div you can see that this line gets highlighted and this is because react has uh and this is because vs code has told us that you know this this thing right there has been used but we haven't used any of these properties yet so this is why they are still appearing gray okay coming back to the topic so we don't actually need this div what we're gonna do is we're gonna wrap everything inside of this browser router so i'm gonna place it right there and inside of it what do we need well we need our routes so to throw in our routes we just type in route and it's a selfclosing tag and inside of it we add a component attribute and we also add a i believe is path yeah but i think that comes before the component so path equals and anything that that goes inside of it okay so how are we going to structure this well for the home component which obviously gets represented by this forward slash so if the path is this forward slash then we are going to show up our app.js components so app.js is obviously this whole thing right there so to do that we first need to import our app component so import up from and then we need to jump up our directory and then this app so if the compo if the path is this forward slash then show us this app component and we're also going to add a new route and that route is going to be that individual recipe whatever we click on so we don't really have any component for that yet but for the time being let's just create a new component and call it recipe now pay attention this is recipe and this is just an individual recipe okay it's very easy to make mistakes so just pay attention right there create a new components input react from react and then just create a stateless function component for now anyway and let's call it recipe and set it to another function and let's just implicitly return some jsx okay dev and let's just type in recipe component and export this right here at the bottom so export defaults recipe excellent now we need to actually input this into our router because this is what we're going to use in order to render it out so import recipe from and then it's in the same directory so recipe right there okay i'm just going to duplicate this line and i'm going to say that if so what what path do we need well it's going to be a bit more complicated than what we're used to but for now let's just throw in the path recipe so if the path is forward slash forward slash recipe then render out this recipe component okay well currently it's not going to work because this router file only exists in our components folder and we actually need to make use of it so to make use of it let's just go back to our index.js file and let's completely trash this app component right there and instead let's import i believe it's router from and then i think it's in the components folder and then router okay so now instead of this app component we're going to make use of this router component right there okay press save go back to the web browser and it says export defaults imported as router was not found and i know what the mistake is back in writing yes we need to make use of this switch statement right there so to do that let's just type switch and then throw in our routes and i also forgot to export this so export defaults and then router so now if i go back to the web browser we can see that we have our app component in all its glory and we can still search for recipes so if i type in chicken i can get the results that involve chicken and then right there what comp what other path did we create we created this recipe path so if i type in forward slash recipe i don't get recipe and this is because react router can be a huge dick at times so to fix that all we need to do is we need to give in the keyword exact right there to the topmost component what this is going to do is it's going to make sure that only render out this app components when this path is exactly this forward slash and there's there is nothing else in front of it so now if you press save go back to the web browser we can see that we are indeed on this recipe path and we are getting this recipe component render out to our application okay so now let's actually make the button work so what i mean is you know this person right there let's actually make this work so when we press it we actually get taken to the recipe okay so to do that it's going to be a bit more complicated than what we're used to but let's give it a go so back in this router.js file we don't really want this static recipe path what we want is we want a path parameter or in other words it's also called a route parameter so to start error parameter you type in colon and then anything that goes after it is considered as a parameter or a variable so what do we need in this case well you can name it anything but we're gonna grab the recipe id to access the data of the recipe so for the sake of simplicity and relevance let's just type in id okay now this path will only work so if i just simply go to recipe it's not going to work so forward slash recipe you can see that it's not going to work and this is because it also it's also going to take a route parameter so if i type anything after that let's say if i type in one then we can see that the recipe component is indeed showing up okay so this is how it's going to work so what's next well you know this button this view recipe button this lives inside of this recipes.js file which is this thing right there so to make to make this work we're going to grab another named export from the react write down packets and let's just type it in first come on and this package is called well this is a named export indeed and this is called link now this link essentially works the same as the anchor tag in html all it does is it directs you to whatever link it is you know pointing at so to do that let's just first go ahead and split this button into multiple lines and what i'm going to do is i'm going to cook this this new recipe text and there i'm just going to go ahead and throw in this view recipe and convert this to a link it's not going to do anything just yet but let's just go ahead and press save go back to the web browser search for the recipes and our application breaks this is because we need to specify a two attribute to this this link right there so essentially it's the same as saying so you know two is basically telling it what path does it need to go to so in our application we have two paths so what we're doing here is we need we need to tell this link to which of these two paths to go to once it's been clicked so now obviously we need to go to this recipe forward slash id and now remember this is a parameter so anything that goes in there gets gets replaced by this id parameter okay so we're actually going to make use of template strings right there because we need to inject some variables so to do that how do we do that because the template strings don't really seem to be working well to fix this all we need to do is we need to open up a javascript expression and then inside of it we need to open up a object and then we type in path name now this is where we're going to assign the path so if the path is and and let's set it to tempo literals because remember inside of a javascript express inside of a javascript expression we can use the template rituals so if the path is forward slash recipe now again this is id so that means we need to grab the id of the recipe so remember we are in fact mapping over the the whole recipes array right there so to grab the recipes all we need to do is forward slash recipes and then remember we can inject the variables so to throw in the recipe id we can just say that recipe so remember this recipe is referring to this recipe argument right there so recipe dot and then the properties that we need is called come on it's not there recipe underscore id okay and now how do we actually proceed with that i mean yes we do have this path provided so if i go back to the web browser press search and you can see that this has indeed been convert it to a link so now if i hover over it i get this you know hand sign and then it's showing me that it's actually a link so let's see what happens when we press this button the recipe boom we do indeed get taken so remember this is the recipe this is the recipe id and once we hit it we get taken to this recipe route right there so now if we choose a different recipe let's say we click on that we can see that the recipe id has been changed because the recipe id is just a number and that is what we're using to throw into our url does that make sense well i hope it does okay so what's next well how do we actually access the data inside of this recipe.js file first of all we need to convert this to a classbased component because we're going to use some of the properties that are only available inside of the class based component so to do that class recipe extends react dot component excellent let's just open up a pair of curly braces type in render and return some jsx so for now let's just return again the recipe component okay press search go back to the web browser make sure everything is working fine yes it is okay so if we didn't know any better we wouldn't know that what's going on inside of this recipe component but we do indeed have access to props right so if i type in console.log and then just props so we all we're doing here is we're just console logging the props so as soon as this component is loaded it says props is not defined and this is because we need to lock this dot props okay go back to the web browser open up the console so there we go and we do indeed have an object so if i expand it this is just a lot of react writer stuff that's been bound to this recipe component because we specified it right there in this recipes.js file so the reason we are getting all this react writer stuff is because we created a link right there and then this link belongs to react router so that means it's been bound to this recipe component as well okay so now if we go ahead and take a look at it we can see that we have a location object and if i expand it this is the path name that we set right there in recipes.js file this thing right there okay and we also have another property called state and this is what we're going to use in order to display the actual recipe onto this recipe component so to do that what are we gonna do well back in this recipes.js file we are gonna create an other attribute inside of this object right there so right after this string ends actually let me just break it down to a new line so path name and then i believe it's that one right there and this one is going to be called state okay now this state is going to contain a another object and the name of the object is gonna be recipe okay and let's just call it now like i said we're gonna use the recipe title in order to display the data so to see to do that let's just say recipe dots and then title and we do have access to this recipe because we are mapping over a recipe array and then we are setting up this recipe argument right there press save go back to the web browser and again expand this object and if i refresh it we can see that the state is still undefined and this is because the state is only going to get calls when we press this button now in this case this page is merely getting refreshed it's not we are not coming here because the button has been pressed so the state is only going to get set once we actually press the button so now if i go back all the way to my app component and again we type in chicken press search just go to any recipe let's just try that one and now if i open up my console we can see we have an object and there we do have a state object and inside of it we have the title which is called well whatever it was called chicken pyramidian i don't know what it is but anyway the good news is that we can use this state to display the data onto this recipe application okay so let's just do that now so back in this recipe.js file there is a reason why i set this up as a classbased component and the reason is that we're going to make use of state inside of this component okay so first of all let's just go ahead and declare our state and the state is going to be called active recipe and for now let's just set it to an empty array okay well next uh what's next well we're gonna make use of a react builtin method or in other words called a life cycle hook called component did mount this method is going to get fired as soon as this component gets loaded or gets mounted onto the web browser so anything that happens inside of it it's going to happen as soon as this component loads on the screen okay and we're actually going to do something pretty similar to what we did in app.js so for the most part what i'm going to do is i'm just going to go ahead and copy everything that's inside of this skip recipe method and we're just gonna change a few things for now let's just paste them and we also need our api key okay copy this go back to the recipe component and paste it right there so what exactly are we going to change well there is no recipe name in this component because obviously there is no form so what i'm going to do is i'm going to go ahead and delete this and i'm gonna instead type in title because the title is what we're gonna grab in order to display the data so title is what what do we equal it to we have an object there right so this dot props and then it's location so this dot prop shot location and then location.state and then the property is called recipe and remember we are getting this because back in recipes.js file we set up the state and then state the recipe okay so this the location actually is this dot crops location and then it's state and then it's recipe excellent so now what we need to do is we need to replace this recipe name with this title right there because this recipe name constant does not exist anymore and we can also get rid of this count okay so we can get rid of that and i'm just going to copy this and i'm going to paste it right there and we don't need this e dot prevent default because there is no form right there so we can just go ahead and get rid of that as well right so next up let's just change uh the names of these two constants because they already exist inside of this app.js file and it's not going to make a difference but it's best not to have any duplicates so i'm going to change this to rec or request and i'm going to change that to res or results or response whatever you want to call it and let's just get rid of these two statements right there and for now let's just console log this res right there all right so press save go back to the web browser and it says that api call is not defined and line number 13. so let's take a look at what's going wrong all right of course we need to change this to rec okay press save go back to the web browser and we are on the recipe component and there we go we do have a count showing up but it's actually 18 recipes it's giving us and the reason for this is because the recipe that we clicked on maybe has more than one name so you know it's cashew and chicken pasta you can see there's quite a few of these so to fix that the the most relevant recipe is going to be the topmost recipe in the array in this case the index is zero so instead of grabbing everything that's inside of this um recipes array what we can do is we can say red so remember res is this whole object so rest.recipes and then we just need to grab the first element in the array so in this case we're going to grab the element with the index of zero okay press save go back to the web browser and now we can see that we're only getting the recipe with this id that we searched for which is four six double line six and this is the title and these are all the images and you know the publisher that we're going to use to display the data okay brilliant so what's next so now we're going to make use of this active recipe state right there to actually display the data onto our actual screen okay so to do that let's just type let's just get rid of this console log right there for now and instead just type in this dot set state and then it's going to take an object and then we're going to assign the active recipe state the exact same thing that we will that we were console logging earlier so that was res that recipe and then the first index inside of it okay press save and now instead of console logging the res object let's just console log the actual state so this dot state dot active recipe press save go back to the web browser and we should still get back the same thing but beyond so let's take a look why so it says oh actually it should be recipes okay now this should work let's go back to the web browser and yes we are indeed getting back the same thing okay so now how do we use this piece of state to actually display the data onto our actual you know this whole screen right there well let's just add a bit obstructed inside of this render method so i'm actually gonna get rid of this whole thing and you're just gonna have to watch me type a bunch of you know markup using the using the classes and some of the bootstrap classes so the first one we're gonna start off with is called container and this is going to act as the wrapper div and then inside of container what we're going to do is i think the next class that comes is a because we we don't need to add a row because in this case we aren't really throwing in any columns all we need is just a big image and then underneath that just the title and the publisher and that's it so we don't really need to add any rows or anything so what i'm going to do is i'm just going to throw in a custom class that i've written and this is called active dash recipe okay let's crack open this and inside of it we're going to grab the image so remember we do have access to all these properties just like we did in app.js file so in this image tag i'm going to give it a class of i believe is active recipe underscore underscore image and then the source is going to be now see if we type in this dot state dot active recipe and then you know grab all these values this is going to get a bit messy i mean we're gonna have to do this for the title we're gonna have to do this for um for the publisher for the website so an easy way to fix this is to actually store that into a constant so just above this return statement what we can do is we can create a new constant and we can call it recipe and then we can set it to this dot state dot active recipe okay so now instead of typing out this whole thing we can just copy this and we can paste it right there and now that's all we need to type in order to grab the values of the object okay so now recipe starts and then it's image underscore url and for the alt tag let's just give it recipe dot title excellent press save let's take a look at what's going on in the web browser and there we go we do have the image showing up and this is brilliant so that means everything is working fine so let's move on okay so right below this image tag i'm gonna throw in a h3 title tag and i'm gonna give it a class name of i think it's i'm just gonna head go ahead and copy this active recipe because this is the prefix to every class name and then the prefix is title okay and the title is obviously going to be recipe dot title okay moving on let's add a h4 in there and i'm going to give this a class name of i think it's rest active recipe and then we're going to also grab this publisher because you know we're just going to show that who actually created this recipe so we're going to grab this publisher property so i'm just going to go ahead and copy this whole thing and paste it right there and i'm going to replace this title with i think is publisher yep okay and within there let's just throw in actually let's just break this into a multiple line because we're also going to throw in a span tag so let's type in publisher and then open up a span tag and then inside of it i'm just going to add a i'm just going to grab the property so recipe.publisher okay brilliant so what's next well uh just below this uh h4 tag let's throw in a paragraph tag and give it a class name of i'm just going to go ahead and copy this active recipe underscore underscore and this is going to be the website of the publisher so in this case we're going to grab come on where is the website so publisher publisher url recipe id title i think it's this one right there search url yep that's it oh publisher url actually this one right there so this is the property that we're gonna grab in order to let users know that you know this is the website of this recipe creator so again we're going to break this down to a multiple a new line and i'm just going to type in the word website right there add in a colon and then right there i'm going to type in a span and i'm going to give that inside of it it's going to be an anchor tag because obviously we need to redraw it we need to redirect our users to their website so the hrav is going to be so what is it recipe.publisher publisher url okay recipe.publisher and then underscore url and within there let's just uh type in the uh exact same thing so i'm actually just going to go ahead and copy this and paste it right there because we're actually going to display the website onto the screen as well right so the last thing that we need in there is the actual button that we are going to go ahead and create now so button and this is going to be responsible for taking us back to the home page so let's just give it a class name of and i'm just gonna go ahead and copy this active recipe thing paste it right there and then it's called button okay and let's just type in go home brilliant press save go back to the web browser and we should have our desired desired results yes we do okay so now you may notice that before the page loads this whole blank thing is showing up right there and we don't want that so what do we do to change that well let's just make a check we can check that if the uh because you know since all these values are coming from the state so we can just make a simple check that if this state has a length of zero then we don't want to display anything because if it's zero that means that this array is empty this active recipe state is empty which means that nothing is inside of it so as soon as it it gets filled we can actually display our data okay so to do that i'm actually going to cut out everything that's inside of this active recipe div and open up a javascript expression and inside of it i'm just going to type so we're going to make use of the and operator so as you know for the and operator both of the conditions have to be true in order for something to execute okay so we can say that this dot state dot active recipe and then since it's an array we can grab the length property and we can check that if this is not equal to zero so again if anything is inside of this array the length is going to be greater than zero so if this dot state dot active recipes length is not equal to zero only then do we want to render out everything that that's inside of this div that we just cut out so there we go we are making use of the and operator and now we can just go ahead and paste our div right there excellent so i'm just going to indent some of this stuff in just like that actually this should be there and then this should be there okay now if we go back to the web browser we can see that nothing shows up until the page actually loads and then the state gets filled so we need to actually make this go homework button work as well so how do we do that because you know we can't really make use of the actual a tag because that's gonna result into a full page refresh so if you are guessing that we're gonna make use of react router then you are absolutely right so first of all we need to grab a named export from react router okay and that is going to be link and remember we did we did use this link right there in recipes as well and that is exactly what we're going to do inside of this recipe components as well okay so i'm just going to go ahead and break this button down into multiple lines cut this out and open up a link tag and paste it right there now the only thing that we need to provide here is the path name so remember we have two parts we have the home path and then we have the recipe path so currently in this inside of the society component we are indeed on the recipe path so right there all we need to do is we need to say that once this button has been clicked take us back to home page so for the home page the path is forward slash okay so now if we go back to the web browser and we can see that this has been converted to a link and if i press this we get taken to the home page and from there on we can search for another recipe so actually let's type something different because we have used chicken quite a bit okay shrimp and then let's just go to one of these the recipe and then yeah it's working just fine from there on we can go back to our homepage using this go home button okay so our application is pretty much done for the most part the only thing that's left now is you know when we go back to the home page our results are gone so we want uh you know we we want to keep our results you know when we go back to the homepage we don't really want to search through the you know the index again and grab everything we want to we want we want our results to be there just the way they were before we navigated away from this page so let's take care of that inside of our app.js file okay so i'm just going to close everything else because i don't think we need anything else anymore now inside of this app.js file we're gonna make use of a couple new react lifecycle hooks and those two are component did update and component did mount actually we've used component demand already so the only new one is componented update so component did update works something like this we don't really need these two arguments because these are for something a little more advanced but essentially the way this works is whatever happens inside of this method is going to happen as soon as the component has updated and when does the component usually update well when the state changes okay so as soon as the state updates the component is going to update as well so as soon as that happens what we're going to do is we're going to create a constant all right and we're going to call it recipes and then we're just going to make use of the local storage to store our data so what we're going to do is first of all we're gonna convert this into you know our our recipe state into the json format because local storage only takes strings it doesn't take any objects it doesn't take any arrays it doesn't take any numbers nothing it just takes string uh it just takes the string so as uh json basically is just a one big string so to convert this we're gonna say json dot stringify and then what what do we need to stringify well we need to stringify this recipe state so json.stringify and then this dot state dot recipes okay so once that's been done we need to actually assign it to local storage so to do that we can just say local storage and then you set an item in local storage you use the property called set item and it takes a couple of arguments the first one is the name of the item which is going to store this recipe array right there so we need to provide that into in a string so i'm just going to call it recipes and the second argument is the actual thing that you want to store and in this case we want to store our recipes our recipe state so this is what we're going to type in right there okay so now if we go back to our web browser open up the state and let's just search for chicken because right now it hasn't been updated but it's going to get updated as soon as you press search because that's when the state updates so now from there let's just look for local storage because i kind of forgot where it lives so performance application local storage and there we go we can see that everything that we looked for is inside of this recipes object so right there if we type in local storage dot get item and then what did we set the item to is recipes right so get item is an other method on local storage which we can use to grab the items that we set so in this case we set the recipes item right there so we can say localstorage.get item and then if you press it press enter we can see that we are getting everything in form of a string so you can see this is a quotation mark and it ends right there at the end and this is why it's a very ugly format because this is not json this is just a one big string all right so what's next well once we have actually set this to local storage now using another lifecycle hook called component did mount we're just going to oh that's not it now in this method we're just going to fetch everything that's inside of our local storage so to do that we first need to grab our stored item which in this case is recipe so i'm just going to create a new constant and i'm gonna call it json okay and i'm gonna set it to local storage dot and then in order to get an item we use the get item property and then we're gonna grab the recipes item that we just set okay so now we first need to convert it to the actual json format because currently it's in the string format because we can't display any strings or any of the type onto the web browser so it has to be in json okay so we can say we can create a new constant called recipes and then we can say json and then to pass a string we say json.parse and then we can type we can pass in this json constraint right there okay excellent so now all we need to do is we just need to set this recipes to this recipe state right there okay so this dot set state and then an object and then recipes and then this constant right there okay and now one neat bit of syntax in es6 is that if the name of the of the property and the key if these two names are the same then you can just make it something like this okay if it was something like recipe then we would actually have to type it this way but in es6 if the names of the keys and the values are the same then you can just do something like this okay now if you press save go back to the web browser we can see that we are indeed going through a full page refresh but nothing is changing we can see that we are still getting the results and let's just look for something else let's look for garlic press set and let's just do let's just view one of these recipes let's just view this one and we are indeed getting it back now if you go back to the home page we can see that we still have the recipe that we searched for okay well this is it for this video and i really hope you learned something from it thank you very much for watching and i will see you next time goodbye
