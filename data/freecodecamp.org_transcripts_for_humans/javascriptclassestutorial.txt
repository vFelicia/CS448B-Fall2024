With timestamps:

00:00 - how's it going guys my name is dom and
00:02 - today i want to talk about classes in
00:05 - javascript so
00:07 - basically for those of you who haven't
00:08 - ever used classes before
00:12 - a class is used to create one or more
00:15 - objects so
00:17 - you can think of an object as being
00:19 - a
00:20 - creation from a class definition so
00:24 - these classes aren't actually used
00:27 - directly by your program logic but they
00:30 - used to create objects now these objects
00:34 - are the ones that actually used by your
00:36 - program to achieve different things so
00:39 - with that being said
00:42 - you can define
00:43 - two main areas with a class definition
00:47 - you can define what an object will have
00:50 - so this is called an instance property
00:53 - and also what they do this is called an
00:56 - instance method so
00:59 - with instance properties
01:01 - taking into basically example of a human
01:04 - being a human might have a name
01:08 - an age and a height so
01:10 - an instance property describes the
01:13 - current state of that object what they
01:16 - have it's basically just data about that
01:19 - property sorry that objects so
01:23 - these instance properties are unique to
01:26 - every object which is created from that
01:29 - class definition
01:31 - so
01:32 - we now have the instance methods this is
01:34 - what they do so an instance method
01:37 - for a human being
01:39 - might be to talk to run and to jump so
01:42 - this refers to what they actually do
01:44 - what actions
01:46 - and their behavior so
01:48 - typically an instance method will use
01:52 - the instance properties to achieve
01:54 - their result
01:56 - so those two main areas right there so
01:59 - let's now create a class in javascript
02:03 - so
02:04 - down here
02:06 - we can create a class definition by
02:08 - using the class keyword
02:10 - let's type out class like that
02:13 - followed by the name of your class
02:16 - let's create a class for a rectangle
02:19 - let's type out rectangle
02:21 - right there
02:23 - now typically by convention you want to
02:25 - use a capital letter at the beginning of
02:28 - your class name so it's going to be
02:30 - rectangle with a capital r just like
02:32 - that
02:33 - followed by
02:35 - two curly braces so now inside here
02:39 - this is your class definition so
02:42 - every class also has what's called a
02:45 - constructor
02:47 - now the constructor is basically just a
02:49 - method which is ran only once
02:53 - during the life of the objects so
02:56 - this constructor is ran once and it's
02:59 - ran when the object is being created
03:03 - so
03:04 - let's define this constructor by typing
03:07 - a constructor like that
03:08 - followed by two parentheses and your
03:11 - normal curly braces so
03:13 - the constructor is used to set up
03:17 - your object okay
03:20 - so
03:21 - this behaves like a normal method or
03:23 - normal function which means if i type
03:26 - out console.log inside here and then
03:29 - just say
03:31 - the rectangle
03:32 - is being created
03:35 - okay
03:36 - so now
03:38 - this method constructor is ran
03:40 - when the object is being created so
03:44 - we have a class
03:45 - let's now create an object from that
03:48 - class
03:49 - so down here
03:51 - let's create a new variable
03:54 - and we call this one something like my
03:57 - rectangle
03:58 - number one which is then equal to
04:02 - a new object based off
04:04 - this class let's type out new that's the
04:08 - that's the new keyword
04:10 - and then say rectangle just like that
04:13 - and then two parentheses to actually
04:16 - call that constructor method so
04:18 - if i was to hover over this
04:20 - we see we get constructor just like that
04:23 - so
04:24 - this will call the constructor method
04:27 - so now if i was to save this html file
04:30 - and then refresh the web browser
04:33 - in the console window we get the
04:35 - rectangle is being created
04:38 - if i was to
04:40 - make two of these rectangles so my
04:43 - rectangle number two down here
04:45 - save this and refresh the browser one
04:47 - more time
04:49 - we get
04:50 - two
04:51 - messages
04:52 - of creation okay so that is how the
04:55 - constructor method actually works
04:58 - okay
04:59 - the constructor is used to actually
05:01 - obviously as i said used to set up
05:04 - the actual object so
05:06 - back to these instance properties
05:08 - what you
05:10 - might commonly see is
05:12 - the instance properties being defined
05:14 - inside the constructor
05:16 - so
05:17 - we have a rectangle now a rectangle
05:19 - might have a width a height and also a
05:23 - color
05:24 - so
05:25 - let's define these three instance
05:27 - properties within the constructor so
05:30 - below here
05:32 - let's define a instance property
05:35 - we can do this by typing out this dot
05:39 - and then the actual property name for
05:41 - example
05:42 - width
05:44 - is equal to and then the value
05:47 - let's just say it'll be 5 for now
05:51 - and we can do the same thing for
05:54 - the other two properties we'll say this
05:57 - and then dot height equal to let's just
06:00 - say something like
06:01 - 3
06:03 - and the color
06:05 - let's make this a blue
06:07 - rectangle
06:08 - so
06:11 - this keyword right there that is a
06:14 - keyword which refers to the current
06:17 - object
06:18 - so
06:19 - when i say this i'm talking about
06:22 - the objects which is being created by
06:25 - that class okay
06:27 - so
06:28 - we now have
06:29 - our three instance properties defined
06:32 - inside the constructor
06:34 - so now
06:35 - if i was to
06:37 - save this and refresh the browser
06:41 - then in the console if i just refer to
06:43 - the myrectangle object or the variable
06:46 - here
06:47 - okay and press enter we can see we get
06:51 - three properties
06:54 - those color height and width which
06:56 - describe the current rectangle okay so
06:59 - these properties are unique to this
07:02 - rectangle instance
07:04 - all right
07:06 - so
07:07 - in most cases though
07:09 - you actually
07:11 - define
07:13 - instance properties
07:15 - when you construct the object
07:17 - but these are typically user defined so
07:19 - usually you would type in my rectangle
07:23 - and then say something like three and
07:25 - then five and also maybe the color so it
07:28 - will say blue like that
07:30 - okay
07:32 - cut this out blue
07:34 - so
07:35 - you want to make
07:36 - this 3 5 and blue
07:38 - actually turn out to be the instance
07:40 - properties for this
07:42 - created object
07:44 - okay this allows you to make custom
07:47 - rectangles
07:48 - with whatever values that you actually
07:50 - pass in so to achieve this result you
07:54 - actually want to make the constructor
07:55 - function accept parameters or arguments
08:00 - so
08:01 - let's type our underscore here and then
08:03 - say
08:05 - heights actually let's start with width
08:07 - so say width
08:08 - and then heights
08:10 - and then color so
08:12 - these are now three parameters which are
08:15 - passed in
08:17 - through the constructor function
08:19 - and then these will be assigned to the
08:21 - instance
08:22 - properties of this particular rectangle
08:24 - object so
08:26 - let's swap out
08:28 - this width
08:29 - with these actual
08:33 - variables right here
08:34 - so
08:36 - now
08:37 - we're assigning the width of this
08:39 - rectangle to be width height and color
08:42 - and so on okay
08:44 - let's just make this a five and a three
08:46 - so now running this line of code right
08:48 - here creates a rectangle with the
08:51 - with a width of five a height of 3 and a
08:55 - color of blue so these are all passed in
08:58 - and inserted right there so now if i was
09:01 - to save this one and refresh the browser
09:04 - we get the same result let's just
09:07 - log out the actual rectangle object
09:09 - we've got this rectangle with the five
09:12 - height of three and a color of blue so
09:16 - with this scenario we can actually
09:18 - create two objects here two rectangles
09:21 - once again
09:23 - for the second time
09:24 - let's give different
09:26 - data
09:28 - let's say 10
09:28 - [Music]
09:30 - 5
09:31 - and then
09:32 - red
09:33 - so now using this class definition
09:36 - we're defining the structure of this
09:38 - rectangle but giving it custom values
09:42 - based on the individual needs of this i
09:44 - guess current state in the program so
09:47 - if i was to save this and refresh the
09:49 - browser this time
09:51 - if i type out rectangle number one
09:55 - we get width five three in blue
09:58 - number two
09:59 - we get ten five and red so
10:02 - we can see how the instance properties
10:05 - are unique to the actual object being
10:08 - created we have two squares here with
10:10 - different instance properties for their
10:13 - data so that is the actual instance
10:15 - properties and the constructor function
10:17 - okay
10:19 - now
10:20 - for the instance methods
10:22 - we can define these
10:24 - under the constructor
10:27 - so
10:28 - to work out i believe the area of a
10:31 - rectangle you multiply the width and the
10:34 - height
10:35 - so we can actually create a method
10:39 - which will give us
10:40 - the area of this rectangle or
10:44 - the rectangle being created
10:47 - so
10:47 - let's define a new instance method
10:50 - we can do this by typing out the name of
10:52 - the method let's say
10:55 - get
10:56 - area so
10:57 - get area right there that is the name of
10:59 - our instance method followed by the two
11:02 - parentheses right there
11:04 - and then
11:06 - the brackets
11:07 - so
11:08 - inside here
11:10 - let's actually just return
11:12 - the width and the height of this
11:14 - rectangle so
11:16 - let's say
11:17 - return
11:21 - return
11:22 - this dot width
11:24 - multiplied by this dot height
11:28 - okay
11:29 - so now
11:30 - we should get different
11:32 - return values from this method based on
11:36 - the um
11:38 - the rectangle being used
11:40 - so
11:42 - for example down here let's say
11:45 - console.log
11:47 - and then just say rectangle1.getarea
11:52 - okay
11:54 - so dot get area this will call the
11:57 - instance method
11:58 - so
11:59 - for this rectangle right here we should
12:01 - get five times three
12:03 - for the second one
12:05 - rectangle number two
12:07 - get area will give us 10 x 5.
12:10 - let's save this and refresh the browser
12:13 - we get 15
12:15 - and 50.
12:17 - okay so you can see how these methods
12:20 - are defined in the actual class
12:22 - definition and their generic
12:26 - to the actual class and then they're
12:28 - using the instance properties
12:30 - that are defined by the constructor to
12:33 - give you different results based on
12:35 - the object being used okay
12:39 - now one more example of the actual
12:41 - method let's make a method that will
12:43 - actually print out a description of
12:47 - the actual
12:48 - object
12:50 - let's say print description
12:53 - okay
12:54 - inside here let's just say console.log
12:58 - and then just say something like
13:00 - um
13:02 - i am a rectangle
13:05 - um of and then let's put the um
13:08 - the width and height so we'll say this
13:10 - dot width
13:11 - and then
13:13 - um
13:14 - this dot height
13:18 - then we'll say
13:19 - and i am and then the actual color
13:22 - so this dot color
13:24 - so now
13:25 - by calling this print description method
13:29 - on
13:31 - a rectangle we get i am a rectangle of
13:34 - width times height and i am
13:37 - then the color so now down here
13:40 - let's call the print description method
13:43 - on the my rectangle number two
13:45 - okay
13:46 - dot print description
13:49 - if i was to save and refresh this one we
13:52 - get the expected result
13:54 - rectangle of ten times five and i am red
13:59 - okay
14:01 - so just to recap we have a class which
14:05 - is a definition
14:07 - basically a structure
14:09 - of the eventual object being created
14:12 - we have an instance property which
14:14 - refers to data that is relevant
14:17 - to
14:18 - each individual object being created and
14:20 - we also have an instance method which
14:23 - uses the instance properties to achieve
14:26 - an action or some sort of result
14:29 - based on once again each individual
14:32 - object being created from that class
14:35 - right and that is the basics of classes
14:38 - in javascript
14:43 - i want to talk about getters and setters
14:45 - in
14:46 - javascript classes so
14:49 - basically
14:50 - getters and setters are used to
14:54 - define methods on a class
14:57 - which are then used as if they're
14:59 - properties so
15:01 - essentially they look like properties
15:03 - but they're actually
15:04 - methods of that class so
15:06 - let's see with an example
15:08 - um
15:09 - i'm just going to define a class here in
15:11 - a javascript and we'll call this one a
15:13 - square
15:14 - okay
15:16 - for the constructor let's just take in a
15:18 - single
15:19 - argument here called width
15:22 - and that will be the width and the
15:23 - height of the actual square so
15:26 - inside here let's just say
15:28 - this dot width is equal to
15:30 - that width parameter and the same thing
15:33 - for the height
15:34 - okay so now the square has a equal width
15:37 - and height okay
15:39 - now
15:40 - we have this basic square
15:42 - so
15:44 - to work out the area
15:45 - of this square it'll be the height
15:48 - multiplied by the width okay
15:52 - so we can actually define a getter to
15:55 - achieve this so
15:57 - down here let's create a getter for the
16:00 - area
16:02 - we can do this by typing out gets just
16:04 - like that then a space and then specify
16:07 - the name of your getter and this will be
16:10 - the actual name
16:12 - that you type out as if it's a property
16:14 - so let's just say get and then put down
16:16 - area followed by parentheses okay
16:19 - then the um the normal brackets there
16:22 - for the actual method body so now
16:25 - inside here
16:27 - this is now basically a function we can
16:30 - put any logic we want inside here we can
16:31 - do anything so
16:33 - let's just
16:34 - return return this dot width
16:37 - multiplied by this dot height
16:40 - and that will give us the area of this
16:42 - square so you can see how i put a return
16:44 - statement
16:45 - inside this block because
16:47 - it literally behaves as if it's a method
16:49 - okay so now
16:52 - we can we can test this together we can
16:54 - create an instance of this square so
16:56 - let's just
16:57 - go down here and say
16:59 - we'll say let's make a new variable
17:01 - and say we'll call this one square one
17:04 - equal to a new square with a width and
17:07 - height of something like
17:09 - 25
17:10 - okay
17:11 - so now down here let's just console.log
17:15 - and then we're going to call this area
17:17 - getter
17:18 - by typing out
17:20 - square one and then dots area
17:24 - so you can see how it
17:26 - essentially behaves like a property okay
17:28 - all right
17:29 - so there's no need to put any
17:32 - any
17:33 - parentheses here because yeah it
17:35 - literally is a property right
17:37 - if i was to save this one and then
17:39 - refresh the browser
17:41 - okay
17:43 - we get 625
17:46 - as a result so
17:48 - um 25 times 25 would be 625. let's make
17:52 - that maybe um four just so we get a
17:54 - smaller number so square up for width
17:57 - and height
17:58 - save and refresh and we get 16. so you
18:00 - can see how
18:02 - we're calling
18:03 - this area getter
18:06 - running this this function body
18:08 - but it behaves like it's a property okay
18:11 - so that's the actual get out right there
18:13 - so now let's actually create a setup so
18:16 - a setter behaves basically in the same
18:19 - way
18:21 - you can assign new values to
18:24 - your instance
18:26 - properties with a property like syntax
18:30 - so you can actually
18:31 - do this you can say square1 dot area
18:34 - equals and then something like 25 for
18:37 - example so
18:38 - let's create this setup so this right
18:41 - here this line right there will actually
18:43 - convert this 25 into a width and height
18:46 - for these two properties okay so
18:49 - back inside here
18:51 - let's just create a setup for area
18:54 - so we'll say sets and then put area
18:57 - like that
18:58 - now this one is going to take a single
19:00 - argument and that will be
19:02 - this value right there so
19:05 - let's say set area
19:07 - in parentheses let's put down area
19:10 - okay
19:12 - so now inside here
19:14 - we can now simply just
19:16 - find the square root of this 25
19:21 - and then we can assign that that result
19:24 - to the width and height of the square
19:26 - because obviously
19:28 - the square root of the area would be the
19:30 - width and height of the actual square so
19:33 - let's say this dot width is equal to the
19:37 - square root so we'll use the math.sqrt
19:42 - method
19:42 - and pass in here the area
19:45 - okay so now if i was to pass in 25
19:47 - inside here we'd say the width is equal
19:50 - to the math dot square root of 25 which
19:52 - is actually going to be five okay so
19:54 - the width is equal to the square root
19:56 - we can do the same thing for the height
19:58 - so this height is equal to and we could
20:00 - just say this dot width for
20:03 - um i guess consistency okay so
20:07 - now
20:08 - we can
20:09 - run this code and that line right there
20:13 - will change the value of the width and
20:15 - height for this for this square
20:18 - so let's just see how this thing looks
20:19 - so
20:20 - let's get rid of that right there
20:22 - and
20:23 - console.log down here square one dot
20:26 - area
20:27 - okay
20:29 - let's save this and refresh the browser
20:33 - okay 25 yeah of course let's actually
20:35 - just console.log the width of this
20:37 - square and also the height
20:39 - okay
20:41 - let's try again save and refresh
20:44 - and we get 5 right there so
20:47 - we have converted the initial width and
20:49 - height of 4 into
20:52 - 5
20:52 - using this setup which modified the
20:55 - width and the height based on the area
20:58 - that you pass in
21:00 - that is the basics right there i just
21:02 - want to show another example of how
21:04 - you can basically treat these like a
21:06 - function so
21:08 - with this getter
21:10 - let's actually keep track of how many
21:12 - times we have requested this square
21:16 - to give us the area
21:18 - so
21:19 - every time i call this getter i want to
21:21 - actually increment a number which tells
21:23 - us how many times we've called this
21:25 - getter so
21:26 - up inside here let's create a new
21:29 - instance variable and we'll call this
21:30 - one
21:32 - number
21:33 - number of requests for area okay
21:37 - equal to zero so
21:40 - when it's constructed we have no
21:42 - requests for the area inside the getter
21:45 - let's just say this dot num of requests
21:48 - for area plus plus
21:50 - so now every time we request for the
21:52 - area this will be incremented
21:55 - so down here
21:57 - let's just get rid of this um
21:59 - that right there
22:00 - and then let's just say console.log
22:04 - square one dot area okay
22:06 - and do it let's just say four times
22:09 - okay
22:10 - so now
22:11 - if i was to then console.log and say
22:14 - square one dot number of requests for
22:16 - area
22:17 - this should now equal four because i've
22:19 - requested it four times and that has
22:21 - been incremented
22:22 - four times okay
22:24 - so now if i was to save this and refresh
22:26 - the browser one last time
22:28 - you can see we get the area and also
22:31 - number four
22:32 - and that is how many times i've actually
22:33 - requested for the area
22:35 - okay
22:36 - so that is how you can use
22:39 - getters and setters on classes in
22:41 - javascript
22:46 - i want to talk about static methods in
22:48 - javascript classes so basically a static
22:52 - method
22:54 - is a method which you define on a class
22:56 - but it is not actually part of the
23:00 - instantiated object
23:03 - once it's been created so basically a
23:05 - static method does not require an
23:07 - instance of
23:09 - the class to be created in order to be
23:12 - used so
23:14 - a lot of static methods are
23:17 - what's called helper methods so they're
23:19 - like little utilities that are relevant
23:21 - to that class but not really
23:23 - you know that don't have a an object
23:26 - bound to them so
23:27 - let's just see with an example
23:30 - i'm going to define a new class here and
23:32 - we'll go with the the standard square
23:34 - example so a class of of square and
23:39 - for the constructor let's just take in a
23:41 - width and the width will be assigned as
23:44 - per usual
23:46 - to the
23:47 - sort of width and height instance
23:49 - properties let's just say constructor
23:51 - and we'll say this dot width is equal to
23:54 - that width parameter and this dot height
23:56 - is also equal to
23:58 - that width parameter so now we have a
24:01 - square class with a constructor so now
24:05 - let's just create an instance of this
24:07 - square so down here
24:09 - let's create a new variable here and
24:10 - call this one square one equal to a new
24:13 - square
24:14 - passing in a width of let's just say
24:17 - eight okay
24:18 - so now
24:20 - we have this
24:21 - this square so if i was to just
24:23 - console.log
24:25 - be square in the console
24:27 - save this and refresh the browser in the
24:29 - console we get obviously a square
24:31 - with a and height of 8 so now
24:34 - let's create a static method
24:37 - on this square class that's basically
24:41 - going to compare two square instances
24:45 - and then
24:47 - let us know if they're of equal width
24:50 - and height so
24:52 - in here
24:53 - let's define a static method we can do
24:56 - this by first typing out the keyword
24:58 - static
24:59 - followed by the name of the method so
25:01 - let's just say
25:06 - maybe equals
25:07 - equals okay something like that right
25:09 - equals and then
25:11 - this method here will take in two
25:13 - parameters or two arguments now the
25:16 - first one being obviously a square and
25:18 - the second one being another square
25:20 - let's just say a
25:21 - and b so
25:23 - a and b are two different square
25:25 - instances all right
25:27 - and the equals static method is going to
25:30 - check the width and height of these two
25:32 - squares and then give us
25:34 - the result if they are equal or not
25:36 - equal so
25:37 - let's just um
25:39 - let's just return
25:41 - then use the ternary operator let's just
25:44 - say
25:45 - return
25:47 - if a dot width
25:51 - times a dot height
25:53 - is equal to b dot width times b dot
25:56 - height
25:58 - then
25:59 - return true
26:01 - actually let's just let's return that
26:03 - so now we're going to return the result
26:05 - of this expression or this comparison
26:06 - here
26:07 - if the area of the first square is equal
26:10 - to the area of the second square
26:13 - obviously just return
26:15 - return that comparison result
26:18 - so now this method should work
26:20 - let's test this out i'm going to create
26:23 - another square here square 2
26:26 - with a width and height of 9. so we have
26:28 - two different areas for these two
26:30 - squares
26:32 - and then down here i'm going to
26:33 - console.log the
26:35 - the return value of this equals static
26:37 - method
26:38 - and i actually call a static method um
26:41 - you call it directly
26:43 - on the actual square class itself and
26:46 - not on
26:48 - um
26:49 - a square instance
26:51 - let's just type out square here and then
26:53 - dot
26:54 - equals
26:55 - okay
26:56 - and here we're gonna
26:58 - pass in square number one and square
27:00 - number two
27:02 - okay so now if i was to save this and
27:05 - refresh the browser window
27:08 - in the console we get false because
27:10 - uh here clearly the area of a is
27:13 - different to the area of b
27:15 - if i was to make
27:17 - the area the same make them both eight
27:20 - okay
27:21 - so 64 here and 64 here for the area
27:24 - save and refresh this one
27:26 - we get true so we can see how we've used
27:29 - a static method here now this static
27:31 - method doesn't require an instance for
27:33 - it to work it does in the regard of the
27:36 - actual parameters but
27:38 - the actual method itself doesn't ever
27:40 - say this dot this or you know this to
27:43 - area so there's never any
27:46 - um
27:47 - i guess referrals
27:49 - to the actual this keyword okay so
27:52 - there's no instance binded to this
27:54 - static method
27:56 - probably a better example of this
27:58 - would be maybe
28:00 - a static method that will uh
28:03 - test whether or not
28:04 - um a width and height
28:07 - is a valid square so
28:09 - for a square to be valid it needs to
28:11 - have an equal width and an equal height
28:13 - okay so
28:15 - let's just create a new static method
28:16 - down here
28:18 - and call this one something like is
28:20 - valid maybe
28:22 - is valid dimensions okay
28:25 - this takes in a width and a height
28:28 - so now this this static method is
28:30 - technically relevant to the square class
28:33 - so we're checking if a square is valid
28:35 - um or our dimensions is valid based on
28:37 - the width and height so if the width and
28:40 - height are the same then it can be a
28:41 - valid square let's just return here
28:44 - let's just return
28:46 - the result of
28:48 - a condition
28:49 - if the width is equal to the height
28:52 - then
28:54 - it is a valence square so let's just
28:55 - return with equal to height that
28:58 - comparison result right there so now um
29:00 - down here again
29:02 - if i was to just console.log here
29:05 - console.log and then say once again
29:07 - calling the square class
29:09 - directly and saying is valid dimensions
29:13 - and passing in something like
29:15 - 6 and 6 inside there
29:17 - if i was to save this and refresh the
29:19 - browser we actually get true
29:21 - okay because obviously
29:24 - 6 is equal to six so we get the return
29:26 - value of two here supposed to make this
29:28 - um seven and six
29:29 - well
29:30 - um we should get false in the console
29:32 - refresh and we get false okay
29:35 - so
29:36 - um static methods are used um for
29:41 - i guess helper helper functions so
29:44 - um they're still relevant to the actual
29:46 - class but they don't actually require an
29:49 - instance of that class to work in fact
29:52 - if i was to just get rid of these two
29:54 - guys right here
29:56 - okay save and refresh
29:58 - we still get the same result there's no
30:00 - error or anything so you can see how
30:02 - it's sort of like a helper function all
30:05 - right
30:05 - and that's how you can use static
30:07 - methods in classes in javascript
30:13 - i want to talk about inheritance or the
30:16 - extends keyword in regards to javascript
30:19 - classes
30:20 - so basically um the extends keyword
30:22 - allows you to achieve the concept of
30:24 - inheritance in javascript classes so
30:28 - um you're basically going to use this
30:30 - whenever you have a generic class
30:34 - and then you want to actually create a
30:36 - new child class
30:37 - of that generic one
30:39 - while still maintaining its features and
30:41 - behavior
30:42 - but a little bit extra so basically it's
30:45 - when you have a parent class
30:47 - to create a child class okay so
30:51 - let's see how to actually do this so i'm
30:52 - going to create a new class here and
30:55 - this will be a representation of a
30:57 - person so
30:58 - let's type out the class keyword and
31:00 - then just say person just like that
31:03 - this person will have let's just say two
31:05 - properties we'll have um we'll have a
31:07 - name and an age so
31:10 - in the constructor
31:11 - let's take in a name and an age just
31:14 - like that
31:15 - and then assign it to instance
31:17 - properties we'll say this dot name equal
31:20 - to the name and this dot age equal to
31:23 - the age passed it
31:25 - okay
31:26 - this will be our parent class the
31:28 - generic class now
31:30 - let's just say inside our code we have a
31:34 - function
31:35 - okay this function
31:38 - we'll call this one something like a
31:39 - develop software
31:42 - this function requires
31:44 - a bunch of programmers
31:46 - to develop the software so
31:48 - this will take in an array of
31:50 - programmers just like that okay
31:53 - inside here
31:55 - um basically we just say
31:57 - develop software so each one of these
31:59 - programs are going to develop some
32:02 - sort of software
32:03 - so
32:04 - as you can see
32:06 - a normal person
32:07 - won't be able to actually be passed in
32:10 - to this array because we expect
32:13 - programmers not
32:15 - a generic person
32:17 - with no
32:18 - attribute on their skill or occupation
32:21 - so
32:22 - we're actually going to create a child
32:24 - class which inherits from this person
32:26 - class and this child class is going to
32:28 - be
32:29 - a programmer so
32:31 - we can achieve this by creating a new
32:34 - class
32:35 - okay
32:37 - and call this one programmer okay
32:40 - now
32:41 - if we type out extends here that extends
32:44 - and then say person
32:46 - we've just achieved inheritance so now
32:48 - we have a program which extends
32:51 - a person which means it takes in all the
32:54 - attributes and behavior
32:56 - of this person so name and age and it
32:59 - also
33:00 - will have its own custom
33:03 - behavior and properties itself so
33:07 - i might just create a new method inside
33:09 - the person real quick and just say
33:10 - something like
33:12 - describe or something like that so
33:13 - describe this is just simply console.log
33:18 - a message saying
33:20 - i am and then their name so i am
33:22 - i don't know dom and i am
33:26 - age
33:27 - years old
33:29 - okay
33:31 - say this shot name so now
33:33 - this programmer class is going to have
33:35 - access to not only these properties but
33:37 - also access to the describe method
33:41 - okay so
33:42 - down here
33:44 - let's create the constructor for this
33:47 - programmer
33:48 - we'll type out constructor here
33:50 - this will take in a name and an age okay
33:53 - the same thing as the actual
33:55 - parent class
33:58 - and also let's just say
34:02 - years of experience we'll say
34:04 - years years of experience
34:09 - all right
34:10 - so now
34:11 - inside here
34:12 - we actually have to call the parent
34:15 - class
34:16 - oh sorry
34:18 - the parent constructor so we still have
34:20 - to actually assign the name and age
34:23 - but we can do this
34:25 - in a more generic way by typing out
34:27 - super
34:28 - and then passing in name
34:31 - and age so here this super is basically
34:34 - just going to call the constructor of
34:37 - the person that way all this logic is
34:39 - still maintained in this class okay so
34:42 - super name age basically just calls this
34:45 - in the parent class
34:46 - now down here is the custom behavior
34:51 - of
34:52 - the photos out behavior of
34:55 - the programmer
34:57 - let's just say this dot years of
34:59 - experience
35:00 - is equal to that parameter
35:03 - right there
35:05 - okay
35:06 - so now um before we define a new method
35:08 - for this program let's just create some
35:10 - instances of these people so down here
35:14 - let's just um
35:16 - create
35:17 - a new person so our new generic person
35:19 - so let will say person one is equal to a
35:23 - new person and um passing a name of
35:27 - something like jeff
35:29 - and an age of something like 45
35:31 - okay
35:32 - let's also create a programmer we'll say
35:35 - let's and then programmer one you could
35:38 - do a new programmer passing in a name
35:42 - such as i don't know dom myself age of
35:45 - 56
35:46 - and
35:47 - years of experience i've had about 12.
35:50 - okay not really but that's all right so
35:52 - now we have these
35:53 - these two people a person we have one
35:55 - person here
35:57 - another person we have two people but
35:59 - the programmer is a special type of
36:01 - person okay
36:03 - so
36:04 - we can now console.log person one
36:08 - and do the same thing
36:10 - for the programmer number one so that
36:13 - was to save this and refresh the web
36:15 - browser
36:18 - in the console okay fair enough let's
36:20 - just see what's happening here
36:22 - yep cool
36:23 - put that there perfect okay save and
36:26 - refresh this one
36:29 - all right we get a person name of jeff
36:32 - age 45 programmer named dom
36:36 - age 56 and a year of experience 12. so
36:39 - we can see how we have
36:41 - obviously this
36:43 - the same behavior as the person
36:46 - with edit sorry with um with extra added
36:48 - functionality of 12 years of experience
36:51 - the prototype for this programmer is
36:54 - person and you can see how
36:57 - it all works with the
37:00 - with the prototype chain and the
37:01 - inheritance so you can see how
37:03 - this programmer
37:05 - is a child of this person class
37:08 - okay
37:10 - so
37:11 - let's add some extra functionality to
37:13 - this program all right so down here
37:17 - let's just say
37:19 - develop actually
37:21 - let's call this method code okay so make
37:24 - a new method here called code and it'll
37:26 - just say okay console.log
37:29 - and we'll say
37:32 - this dot name
37:34 - this dot name
37:36 - is
37:37 - programming or is is coding
37:42 - okay there we are
37:44 - so now obviously here
37:46 - only the programmers have access to this
37:49 - method so if i was to say
37:52 - person one dot code it's not going to
37:54 - work let's save and refresh this
37:58 - refresh
37:59 - uncaught type error not a function so a
38:02 - regular person cannot code if i change
38:04 - this to programmer 1 this time we get
38:09 - the message refresh we get that right
38:11 - there so you can see how we've added
38:13 - extra functionality to this programmer
38:16 - class while still maintaining the
38:20 - functionality of the person
38:22 - let's just prove this right now by
38:24 - calling the describe method
38:27 - on the programmer
38:29 - and not the person
38:31 - let's save and refresh
38:33 - and we still get i'm dom and i'm 56
38:36 - years old so you can see how
38:38 - we're maintaining the same behavior
38:40 - so
38:41 - back to this function we might as well
38:43 - finish it off so
38:45 - let's just create a new array here
38:48 - get rid of all this stuff
38:49 - let's make a new array call this one
38:51 - programs equal to an array of programs
38:56 - so we'll say new programmer
38:59 - say dom
39:01 - with
39:02 - five six years old and 12 years of
39:05 - experience
39:07 - create one more
39:09 - let's just say
39:10 - jeff once again
39:12 - okay
39:13 - age of think it was 24 something like
39:15 - that and he's he's got four years of
39:17 - experience
39:18 - okay
39:20 - who might as well stop there that's fine
39:22 - okay so now we can just obviously pass
39:24 - in um
39:26 - into this
39:27 - function here develop software and pass
39:29 - in these programmers
39:31 - inside the function body
39:33 - let's just
39:34 - loop through all these programs so we'll
39:36 - say for let programmer
39:40 - in programs i believe it is
39:44 - and we'll say
39:45 - programmer
39:47 - dot code okay so we're looking through
39:49 - all the programmers and just calling
39:51 - their code method
39:52 - for us to save this and refresh what we
39:55 - get
39:57 - okay cool that's fine
40:01 - yeah
40:03 - oh i think it's off isn't it yeah it's
40:05 - off okay get rid of that
40:08 - refresh this and
40:11 - we get dom is coding and jeff is coding
40:14 - all right
40:16 - and that's how you can achieve
40:17 - inheritance using the extend keyword in
40:20 - javascript
40:25 - i want to talk about the concept of
40:27 - polymorphism in javascript classes so
40:30 - basically polymorphism is the act of
40:33 - redefining a method
40:35 - inside a derived child class of a parent
40:39 - so
40:40 - let's just see with an example
40:42 - we'll go with the typical
40:45 - animal example so
40:47 - let's just define a new class inside
40:49 - here
40:50 - and call this one animal
40:52 - which obviously represents a generic
40:55 - type of animal okay so for the actual
40:57 - constructor
40:59 - we're just taking a single argument this
41:02 - would be
41:03 - just the name of that animal okay
41:06 - and we can set that to an instance
41:09 - property so
41:10 - we can say this dot name is equal to the
41:14 - name that is passed in
41:16 - in the constructor all right so now we
41:18 - have an animal with a name so let's just
41:22 - define a new method inside here
41:25 - and let's call this method make sounds
41:28 - alright this will take no arguments now
41:31 - this method right here is the one that
41:34 - we're going to eventually override to
41:36 - achieve polymorphism so
41:39 - let's just say for a generic animal
41:42 - we're going to console.log
41:44 - and we're going to say
41:46 - generic
41:47 - animal sound
41:49 - okay
41:50 - so
41:51 - this is the make sound method that is
41:54 - present in the parent class of animal
41:58 - and it just says
41:59 - generic animal sound so
42:02 - if i was to make a new instance of this
42:05 - animal real quick down here
42:07 - let's just define a new constant and
42:10 - call this one a1
42:13 - equal to a new animal and we'll call
42:16 - this animal um dom
42:19 - all right
42:20 - and then if i say a1 dot make sound just
42:24 - like that
42:26 - we should now see that in the console
42:28 - let's just save this and refresh the web
42:31 - browser
42:32 - and we see that right there okay so
42:35 - that's fine
42:36 - now let's actually just
42:38 - create a new child class of this animal
42:41 - class
42:42 - and then override the make sound method
42:45 - okay so
42:46 - let's go down here
42:48 - and declare a new class
42:51 - let's call this class dog okay so a dog
42:54 - is an animal so let's just say dog
42:56 - extends animal all right
43:00 - cool
43:01 - for the constructor
43:03 - let's just take in once again the name
43:06 - and then call the super
43:08 - constructor passing in name so
43:11 - that means just call this constructor
43:14 - for the parent all right so we have this
43:16 - functionality right here
43:18 - now let's just redefine the make sound
43:20 - method
43:22 - and this is called polymorphism okay
43:25 - make sound
43:27 - this time
43:29 - let's say console.log
43:31 - and say woof woof
43:34 - all right
43:36 - okay
43:36 - so we are now done so now if i was to
43:39 - make a new animal down here or a new dog
43:42 - down here
43:44 - new constant call this one a2 equal to a
43:47 - new dog let's call this dog jeff
43:51 - now we're going to call the make sound
43:53 - method
43:54 - on the constant which is the type of dog
43:59 - let's say a2 dot make sound
44:03 - alright
44:04 - if i was to save this and refresh
44:07 - this time
44:08 - we get woof in the console
44:10 - right so we can see how we're actually
44:12 - achieving polymorphism here by
44:15 - overriding the method inside the child
44:18 - class dog
44:20 - you know of that in the in the parent
44:22 - class make sound so we're just basically
44:25 - overriding it so if i was to
44:27 - comment that out in the child class and
44:30 - save and refresh
44:33 - we get once again the generic sound so
44:37 - what's happening here is it's actually
44:38 - checking
44:40 - on the dog class if it has that method
44:43 - if it doesn't then it checks the parent
44:45 - class and it uses that one right there
44:48 - all right so that's that's polymorphism
44:51 - i'll just show one more example
44:54 - this time calling the super
44:56 - inside
44:57 - the actual
45:00 - overwritten method so i can actually
45:03 - call the parrot method inside the
45:06 - derived method so
45:08 - inside this make sound method i can say
45:10 - super
45:11 - dot make sound and that right there is
45:14 - going to call the parent class animal
45:18 - dot make sounds
45:20 - so we'll actually see
45:21 - that message followed by
45:24 - that message
45:25 - and this is common practice
45:27 - you'll see how we're actually using the
45:29 - generic behavior and then adding on
45:32 - special functionality for the special
45:35 - derived child class if i was to save
45:38 - this and refresh the browser
45:41 - this time we see here
45:44 - generic
45:45 - and then woof so
45:47 - these two right here are part of the dog
45:50 - dot make sound method call
45:52 - okay
45:54 - and that's how you can achieve
45:55 - polymorphism
45:57 - inside your javascript classes
46:03 - i want to show you an example of how you
46:05 - can use the javascript classes to
46:08 - make a binding to a html element so
46:12 - what i mean by this is we're actually
46:14 - going to be able to create a class
46:16 - which can then manipulate the dom or the
46:19 - document object model directly so for
46:22 - example here i have an unordered list
46:25 - element on the html document with a few
46:29 - list items inside it okay
46:32 - in the javascript i can actually just
46:34 - type out
46:35 - list and then dot ads
46:38 - and then add an item to that list
46:41 - directly so for example list dot add
46:44 - bottle
46:45 - press enter and we see bottle appears
46:48 - right there
46:49 - we can do the same thing for removing an
46:51 - item let's say list dot remove
46:54 - and pass in an index for example
46:57 - index number one press enter and is is
47:01 - removed okay so
47:03 - we're going to make this right here
47:06 - so inside the clean
47:08 - document here
47:10 - we have a simple structure
47:13 - so first let's just create the actual
47:16 - unordered list item
47:18 - to use so
47:20 - let's say ul
47:22 - with an id of something like my list
47:26 - okay
47:28 - so this list will be filled by a
47:30 - javascript so let's just say
47:32 - we'll put a comment down
47:34 - we'll say it should be filled by
47:36 - javascripts
47:38 - okay so now
47:40 - we need to actually reference
47:44 - this list
47:45 - this list element in javascript so using
47:48 - the actual id here we're going to make a
47:51 - new constant which references this
47:53 - unordered list element so
47:56 - down here
47:57 - let's make a new constant and call this
48:00 - one something like my list
48:03 - equal to
48:04 - document.getl
48:07 - passing in my list right there
48:10 - so now
48:11 - my list means
48:13 - that element right there okay
48:16 - so now
48:17 - let's start by or let's let's start
48:20 - creating the actual class so
48:23 - let's make a new external file here
48:26 - make a new file let's call this class
48:30 - list binding
48:32 - dot js
48:33 - okay
48:35 - let's now link this class in the actual
48:37 - html document
48:39 - we'll say scripts with a source of list
48:42 - binding
48:43 - dot js okay
48:46 - so
48:48 - in this class here let's just actually
48:51 - firstly define this class we'll say
48:52 - class and call this one list binding
48:55 - okay so
48:57 - in this class
48:59 - we're actually going to be able to pass
49:01 - in the my list
49:03 - element to the class constructor
49:07 - okay so
49:08 - this class will actually keep a
49:10 - reference to the physical
49:13 - tag or element okay so
49:16 - in the constructor
49:18 - let's just take in a single argument
49:21 - and call this one element okay
49:25 - now
49:26 - we can say this dot list element is
49:30 - equal to elements
49:31 - okay so we have an instance
49:34 - an instance property here called list
49:36 - element referring to the physical
49:40 - list html element okay so now we can
49:45 - make a underlying
49:47 - simple array that will be filled with
49:50 - all that text so we can say
49:52 - this dot text list
49:55 - is equal to an empty array so
49:58 - this text list here might contain
50:02 - some strings for example decode
50:05 - is
50:08 - not bad okay
50:10 - so back in the actual demo
50:12 - we have
50:13 - we have that right here so
50:15 - we can see how
50:17 - this array structure
50:19 - will eventually actually contain all
50:21 - these text items right here that's what
50:23 - the actual text list property is used
50:26 - for okay
50:27 - so now let's just make a
50:31 - an instance method for this class
50:33 - and let's call this method update
50:36 - say update this will take no
50:39 - no arguments
50:41 - the update method is actually just going
50:42 - to
50:44 - update the physical dom so the physical
50:47 - list element
50:49 - with
50:50 - the items contained in text list
50:54 - so we maintain an array of of strings
50:57 - and then the update method is actually
50:59 - going to insert all these strings
51:01 - into the physical list element
51:05 - yeah property or this element so
51:07 - down here we can start by first clearing
51:11 - the
51:12 - the list element of list items
51:15 - so let's just say
51:17 - remove all existing
51:19 - ally
51:21 - elements or slash tags
51:23 - okay
51:25 - we can say while
51:27 - this dot list element dot first child so
51:30 - why there is a first child
51:33 - then we can say this.list element dot
51:36 - remove child
51:38 - and pass in the first child
51:42 - okay so this right here is going to
51:44 - remove all the existing li
51:47 - tags
51:48 - from the list element so let's just see
51:51 - an example of this in use so back inside
51:54 - the html
51:56 - let's just put some sample
51:58 - ally tags inside here
52:01 - we'll say item number one
52:03 - and item number two
52:05 - okay
52:07 - inside here
52:09 - let's make a new constant
52:11 - okay called list binding
52:14 - this is equal to
52:16 - a new instance of that list binding
52:19 - class
52:20 - let's say new
52:21 - list binding
52:23 - taking in
52:25 - my list
52:26 - okay
52:28 - so this is like registering
52:31 - um this list element with
52:33 - this list binding class
52:36 - okay
52:38 - let's save this and refresh the browser
52:41 - we get that about there so now
52:43 - let's call the update method on that
52:46 - list binding and see what happens
52:49 - we'll say list binding dot update
52:53 - and they go away so you can see how
52:57 - that code right here removes all the
53:00 - existing list item tags
53:02 - so now
53:03 - we have to add
53:06 - add
53:07 - well let's say field so fill
53:10 - ul
53:13 - tag with ally
53:15 - okay let's just um
53:17 - let's just fill up this list element
53:19 - with all these strings inside this text
53:22 - list array property so
53:24 - let's just say for each of the text list
53:28 - items so
53:30 - for each const text of this dot text
53:33 - list
53:35 - okay we're going to say
53:37 - this dot list element dot append child
53:41 - and we're going to append obviously
53:43 - a li tag
53:45 - so how do we actually convert a string
53:49 - to an ally tag
53:51 - let's just say this let's just say list
53:53 - binding
53:54 - dot creates
53:56 - list item and pass in text so
54:01 - we're going to make a static method
54:03 - called create list item
54:05 - which will generate an html element for
54:09 - um for the text that is passed in
54:13 - all right so
54:14 - let's just make this static class or
54:16 - this um this static method right now
54:19 - up here
54:20 - let's say static
54:22 - call this one create list item
54:25 - which takes in a single
54:28 - argument being text
54:31 - okay for the body
54:33 - let's just make a new constant here call
54:35 - this one li
54:37 - equal to
54:38 - document.createelement
54:42 - of an ally tag
54:43 - okay
54:45 - then say ally dot text content
54:48 - let's put the actual text inside the
54:50 - actual tag and then return
54:54 - ally
54:55 - so now
54:56 - this method
54:57 - actually makes
54:59 - makes an ally
55:03 - tag
55:04 - okay or element elements slash tag
55:09 - with text inside they actually pass in
55:12 - right there
55:13 - all right
55:14 - so
55:16 - now
55:17 - if we actually put some sample data
55:20 - inside this array for example
55:23 - d code and then i don't know bottle
55:26 - okay
55:28 - if i save this and refresh the browser
55:32 - we still get these two existing elements
55:34 - right
55:35 - if we say list binding dot update now
55:39 - press enter
55:40 - they get replaced so here
55:44 - we are first clearing
55:45 - the existing elements so we clear them
55:49 - with that right there and then
55:52 - add
55:53 - alloy tags for each
55:56 - text or each string
55:58 - inside this text list
56:00 - underlying array right there
56:03 - okay
56:05 - let's make this back to
56:06 - [Music]
56:08 - no elements okay so now let's actually
56:11 - create the add and remove methods
56:15 - we can first just get rid of those
56:16 - sample
56:18 - tags okay save this all right so
56:22 - let's make the add and remove methods so
56:25 - basically
56:27 - these two methods right here are simply
56:29 - just going to update the underlying
56:32 - array
56:33 - that guy right there
56:35 - and then call
56:37 - the update method so it's going to be
56:40 - quite lean and what do you call it loose
56:42 - coupling all right so
56:44 - down here
56:46 - let's make a new add method
56:49 - all right this will take in some texts
56:51 - we'll say text just like that
56:54 - inside here let's just say
56:56 - this dot text list
57:00 - and call the push
57:01 - method
57:03 - we're gonna push text to the array so
57:06 - this will add
57:07 - this text to this underlying array quite
57:11 - simple
57:12 - and then we're going to say
57:15 - this dot update
57:17 - all right
57:18 - so basically
57:21 - the add method does its simple job of
57:23 - adding the actual text to the array
57:26 - then the update method does its job of
57:30 - updating the actual physical document
57:33 - object model the actual html page
57:36 - all right
57:37 - let's just save this and test it out
57:39 - save and refresh the browser
57:42 - all right
57:43 - let's say
57:45 - list binding dot add
57:48 - all right
57:49 - let's add decode
57:51 - to the list
57:52 - boom there we are let's add some more
57:55 - for example
57:57 - add dog
57:58 - so it works completely fine all right
58:00 - good
58:01 - for the actual remove method
58:04 - um
58:05 - for a move
58:06 - let's add this method right here
58:09 - this will take in an index so remove an
58:11 - item at a particular index
58:15 - index right there okay
58:17 - then once again it'll follow a similar
58:20 - sort of structure
58:21 - it's going to say
58:22 - this dot text list dot splice
58:26 - all right that's an array method
58:29 - splice at the index okay
58:32 - and then one so this means
58:34 - remove an item starting at all multiple
58:38 - items maybe starting at this index
58:41 - and then how many so
58:43 - remove an item
58:45 - at this index but only one of them okay
58:47 - so that actually removes one item
58:51 - this dot update
58:52 - okay so
58:53 - similar thing
58:55 - modify the existing underlying array
58:58 - and then
59:00 - update the dom right there
59:03 - let's save this refresher browser and
59:05 - test it out
59:07 - let's add dog decode and
59:10 - let's just say bottle
59:13 - okay
59:14 - and then i'll say list binding
59:16 - dot remove
59:19 - at index one press enter boom there we
59:22 - are
59:23 - all right so
59:25 - that's the whole thing done
59:27 - but i'll just recap what's actually
59:29 - happening
59:30 - all right so what's happening well
59:33 - um in this class here actually let's
59:35 - start with the actual html so in the
59:37 - html we are making an unordered list
59:39 - element right there which is then passed
59:42 - into the javascript through that
59:44 - method right there and then we're making
59:47 - a new instance of the list binding class
59:51 - passing in the actual physical unordered
59:54 - list element
59:55 - from there in the class
59:58 - in the constructor we are maintaining a
60:01 - reference to the actual list element
60:04 - property
60:05 - and then making an underlying array to
60:07 - store all these strings of text to be
60:10 - displayed
60:12 - inside the update method
60:14 - we are removing all the existing list
60:17 - item
60:18 - elements
60:19 - and then
60:20 - filling up the actual ul or the ol tag
60:24 - so this guy right here
60:26 - with
60:26 - the actual text inside
60:29 - the underlying text list array
60:32 - this is done by calling the static
60:35 - method create list item
60:37 - which simply just makes a list item
60:39 - element
60:40 - putting the actual text inside that
60:43 - for the add method we are simply just
60:45 - adding um
60:47 - adding a an item to the actual array
60:51 - and then using the update method to
60:53 - actually update the dom once that has
60:55 - been added so
60:56 - we're keeping things lean we're only
60:58 - actually updating what
61:00 - we need inside the add method same goes
61:03 - for the remove method we're just
61:05 - removing an item at that index and then
61:08 - once again passing it over to the actual
61:11 - update method
61:12 - to do the actual dom visual work
61:15 - all right
61:16 - and that's how you can
61:18 - make a
61:20 - binding from a javascript class to an
61:22 - html element inside your javascript
61:25 - classes thank you for watching and i'll
61:27 - see you later

Cleaned transcript:

how's it going guys my name is dom and today i want to talk about classes in javascript so basically for those of you who haven't ever used classes before a class is used to create one or more objects so you can think of an object as being a creation from a class definition so these classes aren't actually used directly by your program logic but they used to create objects now these objects are the ones that actually used by your program to achieve different things so with that being said you can define two main areas with a class definition you can define what an object will have so this is called an instance property and also what they do this is called an instance method so with instance properties taking into basically example of a human being a human might have a name an age and a height so an instance property describes the current state of that object what they have it's basically just data about that property sorry that objects so these instance properties are unique to every object which is created from that class definition so we now have the instance methods this is what they do so an instance method for a human being might be to talk to run and to jump so this refers to what they actually do what actions and their behavior so typically an instance method will use the instance properties to achieve their result so those two main areas right there so let's now create a class in javascript so down here we can create a class definition by using the class keyword let's type out class like that followed by the name of your class let's create a class for a rectangle let's type out rectangle right there now typically by convention you want to use a capital letter at the beginning of your class name so it's going to be rectangle with a capital r just like that followed by two curly braces so now inside here this is your class definition so every class also has what's called a constructor now the constructor is basically just a method which is ran only once during the life of the objects so this constructor is ran once and it's ran when the object is being created so let's define this constructor by typing a constructor like that followed by two parentheses and your normal curly braces so the constructor is used to set up your object okay so this behaves like a normal method or normal function which means if i type out console.log inside here and then just say the rectangle is being created okay so now this method constructor is ran when the object is being created so we have a class let's now create an object from that class so down here let's create a new variable and we call this one something like my rectangle number one which is then equal to a new object based off this class let's type out new that's the that's the new keyword and then say rectangle just like that and then two parentheses to actually call that constructor method so if i was to hover over this we see we get constructor just like that so this will call the constructor method so now if i was to save this html file and then refresh the web browser in the console window we get the rectangle is being created if i was to make two of these rectangles so my rectangle number two down here save this and refresh the browser one more time we get two messages of creation okay so that is how the constructor method actually works okay the constructor is used to actually obviously as i said used to set up the actual object so back to these instance properties what you might commonly see is the instance properties being defined inside the constructor so we have a rectangle now a rectangle might have a width a height and also a color so let's define these three instance properties within the constructor so below here let's define a instance property we can do this by typing out this dot and then the actual property name for example width is equal to and then the value let's just say it'll be 5 for now and we can do the same thing for the other two properties we'll say this and then dot height equal to let's just say something like 3 and the color let's make this a blue rectangle so this keyword right there that is a keyword which refers to the current object so when i say this i'm talking about the objects which is being created by that class okay so we now have our three instance properties defined inside the constructor so now if i was to save this and refresh the browser then in the console if i just refer to the myrectangle object or the variable here okay and press enter we can see we get three properties those color height and width which describe the current rectangle okay so these properties are unique to this rectangle instance all right so in most cases though you actually define instance properties when you construct the object but these are typically user defined so usually you would type in my rectangle and then say something like three and then five and also maybe the color so it will say blue like that okay cut this out blue so you want to make this 3 5 and blue actually turn out to be the instance properties for this created object okay this allows you to make custom rectangles with whatever values that you actually pass in so to achieve this result you actually want to make the constructor function accept parameters or arguments so let's type our underscore here and then say heights actually let's start with width so say width and then heights and then color so these are now three parameters which are passed in through the constructor function and then these will be assigned to the instance properties of this particular rectangle object so let's swap out this width with these actual variables right here so now we're assigning the width of this rectangle to be width height and color and so on okay let's just make this a five and a three so now running this line of code right here creates a rectangle with the with a width of five a height of 3 and a color of blue so these are all passed in and inserted right there so now if i was to save this one and refresh the browser we get the same result let's just log out the actual rectangle object we've got this rectangle with the five height of three and a color of blue so with this scenario we can actually create two objects here two rectangles once again for the second time let's give different data let's say 10 5 and then red so now using this class definition we're defining the structure of this rectangle but giving it custom values based on the individual needs of this i guess current state in the program so if i was to save this and refresh the browser this time if i type out rectangle number one we get width five three in blue number two we get ten five and red so we can see how the instance properties are unique to the actual object being created we have two squares here with different instance properties for their data so that is the actual instance properties and the constructor function okay now for the instance methods we can define these under the constructor so to work out i believe the area of a rectangle you multiply the width and the height so we can actually create a method which will give us the area of this rectangle or the rectangle being created so let's define a new instance method we can do this by typing out the name of the method let's say get area so get area right there that is the name of our instance method followed by the two parentheses right there and then the brackets so inside here let's actually just return the width and the height of this rectangle so let's say return return this dot width multiplied by this dot height okay so now we should get different return values from this method based on the um the rectangle being used so for example down here let's say console.log and then just say rectangle1.getarea okay so dot get area this will call the instance method so for this rectangle right here we should get five times three for the second one rectangle number two get area will give us 10 x 5. let's save this and refresh the browser we get 15 and 50. okay so you can see how these methods are defined in the actual class definition and their generic to the actual class and then they're using the instance properties that are defined by the constructor to give you different results based on the object being used okay now one more example of the actual method let's make a method that will actually print out a description of the actual object let's say print description okay inside here let's just say console.log and then just say something like um i am a rectangle um of and then let's put the um the width and height so we'll say this dot width and then um this dot height then we'll say and i am and then the actual color so this dot color so now by calling this print description method on a rectangle we get i am a rectangle of width times height and i am then the color so now down here let's call the print description method on the my rectangle number two okay dot print description if i was to save and refresh this one we get the expected result rectangle of ten times five and i am red okay so just to recap we have a class which is a definition basically a structure of the eventual object being created we have an instance property which refers to data that is relevant to each individual object being created and we also have an instance method which uses the instance properties to achieve an action or some sort of result based on once again each individual object being created from that class right and that is the basics of classes in javascript i want to talk about getters and setters in javascript classes so basically getters and setters are used to define methods on a class which are then used as if they're properties so essentially they look like properties but they're actually methods of that class so let's see with an example um i'm just going to define a class here in a javascript and we'll call this one a square okay for the constructor let's just take in a single argument here called width and that will be the width and the height of the actual square so inside here let's just say this dot width is equal to that width parameter and the same thing for the height okay so now the square has a equal width and height okay now we have this basic square so to work out the area of this square it'll be the height multiplied by the width okay so we can actually define a getter to achieve this so down here let's create a getter for the area we can do this by typing out gets just like that then a space and then specify the name of your getter and this will be the actual name that you type out as if it's a property so let's just say get and then put down area followed by parentheses okay then the um the normal brackets there for the actual method body so now inside here this is now basically a function we can put any logic we want inside here we can do anything so let's just return return this dot width multiplied by this dot height and that will give us the area of this square so you can see how i put a return statement inside this block because it literally behaves as if it's a method okay so now we can we can test this together we can create an instance of this square so let's just go down here and say we'll say let's make a new variable and say we'll call this one square one equal to a new square with a width and height of something like 25 okay so now down here let's just console.log and then we're going to call this area getter by typing out square one and then dots area so you can see how it essentially behaves like a property okay all right so there's no need to put any any parentheses here because yeah it literally is a property right if i was to save this one and then refresh the browser okay we get 625 as a result so um 25 times 25 would be 625. let's make that maybe um four just so we get a smaller number so square up for width and height save and refresh and we get 16. so you can see how we're calling this area getter running this this function body but it behaves like it's a property okay so that's the actual get out right there so now let's actually create a setup so a setter behaves basically in the same way you can assign new values to your instance properties with a property like syntax so you can actually do this you can say square1 dot area equals and then something like 25 for example so let's create this setup so this right here this line right there will actually convert this 25 into a width and height for these two properties okay so back inside here let's just create a setup for area so we'll say sets and then put area like that now this one is going to take a single argument and that will be this value right there so let's say set area in parentheses let's put down area okay so now inside here we can now simply just find the square root of this 25 and then we can assign that that result to the width and height of the square because obviously the square root of the area would be the width and height of the actual square so let's say this dot width is equal to the square root so we'll use the math.sqrt method and pass in here the area okay so now if i was to pass in 25 inside here we'd say the width is equal to the math dot square root of 25 which is actually going to be five okay so the width is equal to the square root we can do the same thing for the height so this height is equal to and we could just say this dot width for um i guess consistency okay so now we can run this code and that line right there will change the value of the width and height for this for this square so let's just see how this thing looks so let's get rid of that right there and console.log down here square one dot area okay let's save this and refresh the browser okay 25 yeah of course let's actually just console.log the width of this square and also the height okay let's try again save and refresh and we get 5 right there so we have converted the initial width and height of 4 into 5 using this setup which modified the width and the height based on the area that you pass in that is the basics right there i just want to show another example of how you can basically treat these like a function so with this getter let's actually keep track of how many times we have requested this square to give us the area so every time i call this getter i want to actually increment a number which tells us how many times we've called this getter so up inside here let's create a new instance variable and we'll call this one number number of requests for area okay equal to zero so when it's constructed we have no requests for the area inside the getter let's just say this dot num of requests for area plus plus so now every time we request for the area this will be incremented so down here let's just get rid of this um that right there and then let's just say console.log square one dot area okay and do it let's just say four times okay so now if i was to then console.log and say square one dot number of requests for area this should now equal four because i've requested it four times and that has been incremented four times okay so now if i was to save this and refresh the browser one last time you can see we get the area and also number four and that is how many times i've actually requested for the area okay so that is how you can use getters and setters on classes in javascript i want to talk about static methods in javascript classes so basically a static method is a method which you define on a class but it is not actually part of the instantiated object once it's been created so basically a static method does not require an instance of the class to be created in order to be used so a lot of static methods are what's called helper methods so they're like little utilities that are relevant to that class but not really you know that don't have a an object bound to them so let's just see with an example i'm going to define a new class here and we'll go with the the standard square example so a class of of square and for the constructor let's just take in a width and the width will be assigned as per usual to the sort of width and height instance properties let's just say constructor and we'll say this dot width is equal to that width parameter and this dot height is also equal to that width parameter so now we have a square class with a constructor so now let's just create an instance of this square so down here let's create a new variable here and call this one square one equal to a new square passing in a width of let's just say eight okay so now we have this this square so if i was to just console.log be square in the console save this and refresh the browser in the console we get obviously a square with a and height of 8 so now let's create a static method on this square class that's basically going to compare two square instances and then let us know if they're of equal width and height so in here let's define a static method we can do this by first typing out the keyword static followed by the name of the method so let's just say maybe equals equals okay something like that right equals and then this method here will take in two parameters or two arguments now the first one being obviously a square and the second one being another square let's just say a and b so a and b are two different square instances all right and the equals static method is going to check the width and height of these two squares and then give us the result if they are equal or not equal so let's just um let's just return then use the ternary operator let's just say return if a dot width times a dot height is equal to b dot width times b dot height then return true actually let's just let's return that so now we're going to return the result of this expression or this comparison here if the area of the first square is equal to the area of the second square obviously just return return that comparison result so now this method should work let's test this out i'm going to create another square here square 2 with a width and height of 9. so we have two different areas for these two squares and then down here i'm going to console.log the the return value of this equals static method and i actually call a static method um you call it directly on the actual square class itself and not on um a square instance let's just type out square here and then dot equals okay and here we're gonna pass in square number one and square number two okay so now if i was to save this and refresh the browser window in the console we get false because uh here clearly the area of a is different to the area of b if i was to make the area the same make them both eight okay so 64 here and 64 here for the area save and refresh this one we get true so we can see how we've used a static method here now this static method doesn't require an instance for it to work it does in the regard of the actual parameters but the actual method itself doesn't ever say this dot this or you know this to area so there's never any um i guess referrals to the actual this keyword okay so there's no instance binded to this static method probably a better example of this would be maybe a static method that will uh test whether or not um a width and height is a valid square so for a square to be valid it needs to have an equal width and an equal height okay so let's just create a new static method down here and call this one something like is valid maybe is valid dimensions okay this takes in a width and a height so now this this static method is technically relevant to the square class so we're checking if a square is valid um or our dimensions is valid based on the width and height so if the width and height are the same then it can be a valid square let's just return here let's just return the result of a condition if the width is equal to the height then it is a valence square so let's just return with equal to height that comparison result right there so now um down here again if i was to just console.log here console.log and then say once again calling the square class directly and saying is valid dimensions and passing in something like 6 and 6 inside there if i was to save this and refresh the browser we actually get true okay because obviously 6 is equal to six so we get the return value of two here supposed to make this um seven and six well um we should get false in the console refresh and we get false okay so um static methods are used um for i guess helper helper functions so um they're still relevant to the actual class but they don't actually require an instance of that class to work in fact if i was to just get rid of these two guys right here okay save and refresh we still get the same result there's no error or anything so you can see how it's sort of like a helper function all right and that's how you can use static methods in classes in javascript i want to talk about inheritance or the extends keyword in regards to javascript classes so basically um the extends keyword allows you to achieve the concept of inheritance in javascript classes so um you're basically going to use this whenever you have a generic class and then you want to actually create a new child class of that generic one while still maintaining its features and behavior but a little bit extra so basically it's when you have a parent class to create a child class okay so let's see how to actually do this so i'm going to create a new class here and this will be a representation of a person so let's type out the class keyword and then just say person just like that this person will have let's just say two properties we'll have um we'll have a name and an age so in the constructor let's take in a name and an age just like that and then assign it to instance properties we'll say this dot name equal to the name and this dot age equal to the age passed it okay this will be our parent class the generic class now let's just say inside our code we have a function okay this function we'll call this one something like a develop software this function requires a bunch of programmers to develop the software so this will take in an array of programmers just like that okay inside here um basically we just say develop software so each one of these programs are going to develop some sort of software so as you can see a normal person won't be able to actually be passed in to this array because we expect programmers not a generic person with no attribute on their skill or occupation so we're actually going to create a child class which inherits from this person class and this child class is going to be a programmer so we can achieve this by creating a new class okay and call this one programmer okay now if we type out extends here that extends and then say person we've just achieved inheritance so now we have a program which extends a person which means it takes in all the attributes and behavior of this person so name and age and it also will have its own custom behavior and properties itself so i might just create a new method inside the person real quick and just say something like describe or something like that so describe this is just simply console.log a message saying i am and then their name so i am i don't know dom and i am age years old okay say this shot name so now this programmer class is going to have access to not only these properties but also access to the describe method okay so down here let's create the constructor for this programmer we'll type out constructor here this will take in a name and an age okay the same thing as the actual parent class and also let's just say years of experience we'll say years years of experience all right so now inside here we actually have to call the parent class oh sorry the parent constructor so we still have to actually assign the name and age but we can do this in a more generic way by typing out super and then passing in name and age so here this super is basically just going to call the constructor of the person that way all this logic is still maintained in this class okay so super name age basically just calls this in the parent class now down here is the custom behavior of the photos out behavior of the programmer let's just say this dot years of experience is equal to that parameter right there okay so now um before we define a new method for this program let's just create some instances of these people so down here let's just um create a new person so our new generic person so let will say person one is equal to a new person and um passing a name of something like jeff and an age of something like 45 okay let's also create a programmer we'll say let's and then programmer one you could do a new programmer passing in a name such as i don't know dom myself age of 56 and years of experience i've had about 12. okay not really but that's all right so now we have these these two people a person we have one person here another person we have two people but the programmer is a special type of person okay so we can now console.log person one and do the same thing for the programmer number one so that was to save this and refresh the web browser in the console okay fair enough let's just see what's happening here yep cool put that there perfect okay save and refresh this one all right we get a person name of jeff age 45 programmer named dom age 56 and a year of experience 12. so we can see how we have obviously this the same behavior as the person with edit sorry with um with extra added functionality of 12 years of experience the prototype for this programmer is person and you can see how it all works with the with the prototype chain and the inheritance so you can see how this programmer is a child of this person class okay so let's add some extra functionality to this program all right so down here let's just say develop actually let's call this method code okay so make a new method here called code and it'll just say okay console.log and we'll say this dot name this dot name is programming or is is coding okay there we are so now obviously here only the programmers have access to this method so if i was to say person one dot code it's not going to work let's save and refresh this refresh uncaught type error not a function so a regular person cannot code if i change this to programmer 1 this time we get the message refresh we get that right there so you can see how we've added extra functionality to this programmer class while still maintaining the functionality of the person let's just prove this right now by calling the describe method on the programmer and not the person let's save and refresh and we still get i'm dom and i'm 56 years old so you can see how we're maintaining the same behavior so back to this function we might as well finish it off so let's just create a new array here get rid of all this stuff let's make a new array call this one programs equal to an array of programs so we'll say new programmer say dom with five six years old and 12 years of experience create one more let's just say jeff once again okay age of think it was 24 something like that and he's he's got four years of experience okay who might as well stop there that's fine okay so now we can just obviously pass in um into this function here develop software and pass in these programmers inside the function body let's just loop through all these programs so we'll say for let programmer in programs i believe it is and we'll say programmer dot code okay so we're looking through all the programmers and just calling their code method for us to save this and refresh what we get okay cool that's fine yeah oh i think it's off isn't it yeah it's off okay get rid of that refresh this and we get dom is coding and jeff is coding all right and that's how you can achieve inheritance using the extend keyword in javascript i want to talk about the concept of polymorphism in javascript classes so basically polymorphism is the act of redefining a method inside a derived child class of a parent so let's just see with an example we'll go with the typical animal example so let's just define a new class inside here and call this one animal which obviously represents a generic type of animal okay so for the actual constructor we're just taking a single argument this would be just the name of that animal okay and we can set that to an instance property so we can say this dot name is equal to the name that is passed in in the constructor all right so now we have an animal with a name so let's just define a new method inside here and let's call this method make sounds alright this will take no arguments now this method right here is the one that we're going to eventually override to achieve polymorphism so let's just say for a generic animal we're going to console.log and we're going to say generic animal sound okay so this is the make sound method that is present in the parent class of animal and it just says generic animal sound so if i was to make a new instance of this animal real quick down here let's just define a new constant and call this one a1 equal to a new animal and we'll call this animal um dom all right and then if i say a1 dot make sound just like that we should now see that in the console let's just save this and refresh the web browser and we see that right there okay so that's fine now let's actually just create a new child class of this animal class and then override the make sound method okay so let's go down here and declare a new class let's call this class dog okay so a dog is an animal so let's just say dog extends animal all right cool for the constructor let's just take in once again the name and then call the super constructor passing in name so that means just call this constructor for the parent all right so we have this functionality right here now let's just redefine the make sound method and this is called polymorphism okay make sound this time let's say console.log and say woof woof all right okay so we are now done so now if i was to make a new animal down here or a new dog down here new constant call this one a2 equal to a new dog let's call this dog jeff now we're going to call the make sound method on the constant which is the type of dog let's say a2 dot make sound alright if i was to save this and refresh this time we get woof in the console right so we can see how we're actually achieving polymorphism here by overriding the method inside the child class dog you know of that in the in the parent class make sound so we're just basically overriding it so if i was to comment that out in the child class and save and refresh we get once again the generic sound so what's happening here is it's actually checking on the dog class if it has that method if it doesn't then it checks the parent class and it uses that one right there all right so that's that's polymorphism i'll just show one more example this time calling the super inside the actual overwritten method so i can actually call the parrot method inside the derived method so inside this make sound method i can say super dot make sound and that right there is going to call the parent class animal dot make sounds so we'll actually see that message followed by that message and this is common practice you'll see how we're actually using the generic behavior and then adding on special functionality for the special derived child class if i was to save this and refresh the browser this time we see here generic and then woof so these two right here are part of the dog dot make sound method call okay and that's how you can achieve polymorphism inside your javascript classes i want to show you an example of how you can use the javascript classes to make a binding to a html element so what i mean by this is we're actually going to be able to create a class which can then manipulate the dom or the document object model directly so for example here i have an unordered list element on the html document with a few list items inside it okay in the javascript i can actually just type out list and then dot ads and then add an item to that list directly so for example list dot add bottle press enter and we see bottle appears right there we can do the same thing for removing an item let's say list dot remove and pass in an index for example index number one press enter and is is removed okay so we're going to make this right here so inside the clean document here we have a simple structure so first let's just create the actual unordered list item to use so let's say ul with an id of something like my list okay so this list will be filled by a javascript so let's just say we'll put a comment down we'll say it should be filled by javascripts okay so now we need to actually reference this list this list element in javascript so using the actual id here we're going to make a new constant which references this unordered list element so down here let's make a new constant and call this one something like my list equal to document.getl passing in my list right there so now my list means that element right there okay so now let's start by or let's let's start creating the actual class so let's make a new external file here make a new file let's call this class list binding dot js okay let's now link this class in the actual html document we'll say scripts with a source of list binding dot js okay so in this class here let's just actually firstly define this class we'll say class and call this one list binding okay so in this class we're actually going to be able to pass in the my list element to the class constructor okay so this class will actually keep a reference to the physical tag or element okay so in the constructor let's just take in a single argument and call this one element okay now we can say this dot list element is equal to elements okay so we have an instance an instance property here called list element referring to the physical list html element okay so now we can make a underlying simple array that will be filled with all that text so we can say this dot text list is equal to an empty array so this text list here might contain some strings for example decode is not bad okay so back in the actual demo we have we have that right here so we can see how this array structure will eventually actually contain all these text items right here that's what the actual text list property is used for okay so now let's just make a an instance method for this class and let's call this method update say update this will take no no arguments the update method is actually just going to update the physical dom so the physical list element with the items contained in text list so we maintain an array of of strings and then the update method is actually going to insert all these strings into the physical list element yeah property or this element so down here we can start by first clearing the the list element of list items so let's just say remove all existing ally elements or slash tags okay we can say while this dot list element dot first child so why there is a first child then we can say this.list element dot remove child and pass in the first child okay so this right here is going to remove all the existing li tags from the list element so let's just see an example of this in use so back inside the html let's just put some sample ally tags inside here we'll say item number one and item number two okay inside here let's make a new constant okay called list binding this is equal to a new instance of that list binding class let's say new list binding taking in my list okay so this is like registering um this list element with this list binding class okay let's save this and refresh the browser we get that about there so now let's call the update method on that list binding and see what happens we'll say list binding dot update and they go away so you can see how that code right here removes all the existing list item tags so now we have to add add well let's say field so fill ul tag with ally okay let's just um let's just fill up this list element with all these strings inside this text list array property so let's just say for each of the text list items so for each const text of this dot text list okay we're going to say this dot list element dot append child and we're going to append obviously a li tag so how do we actually convert a string to an ally tag let's just say this let's just say list binding dot creates list item and pass in text so we're going to make a static method called create list item which will generate an html element for um for the text that is passed in all right so let's just make this static class or this um this static method right now up here let's say static call this one create list item which takes in a single argument being text okay for the body let's just make a new constant here call this one li equal to document.createelement of an ally tag okay then say ally dot text content let's put the actual text inside the actual tag and then return ally so now this method actually makes makes an ally tag okay or element elements slash tag with text inside they actually pass in right there all right so now if we actually put some sample data inside this array for example d code and then i don't know bottle okay if i save this and refresh the browser we still get these two existing elements right if we say list binding dot update now press enter they get replaced so here we are first clearing the existing elements so we clear them with that right there and then add alloy tags for each text or each string inside this text list underlying array right there okay let's make this back to no elements okay so now let's actually create the add and remove methods we can first just get rid of those sample tags okay save this all right so let's make the add and remove methods so basically these two methods right here are simply just going to update the underlying array that guy right there and then call the update method so it's going to be quite lean and what do you call it loose coupling all right so down here let's make a new add method all right this will take in some texts we'll say text just like that inside here let's just say this dot text list and call the push method we're gonna push text to the array so this will add this text to this underlying array quite simple and then we're going to say this dot update all right so basically the add method does its simple job of adding the actual text to the array then the update method does its job of updating the actual physical document object model the actual html page all right let's just save this and test it out save and refresh the browser all right let's say list binding dot add all right let's add decode to the list boom there we are let's add some more for example add dog so it works completely fine all right good for the actual remove method um for a move let's add this method right here this will take in an index so remove an item at a particular index index right there okay then once again it'll follow a similar sort of structure it's going to say this dot text list dot splice all right that's an array method splice at the index okay and then one so this means remove an item starting at all multiple items maybe starting at this index and then how many so remove an item at this index but only one of them okay so that actually removes one item this dot update okay so similar thing modify the existing underlying array and then update the dom right there let's save this refresher browser and test it out let's add dog decode and let's just say bottle okay and then i'll say list binding dot remove at index one press enter boom there we are all right so that's the whole thing done but i'll just recap what's actually happening all right so what's happening well um in this class here actually let's start with the actual html so in the html we are making an unordered list element right there which is then passed into the javascript through that method right there and then we're making a new instance of the list binding class passing in the actual physical unordered list element from there in the class in the constructor we are maintaining a reference to the actual list element property and then making an underlying array to store all these strings of text to be displayed inside the update method we are removing all the existing list item elements and then filling up the actual ul or the ol tag so this guy right here with the actual text inside the underlying text list array this is done by calling the static method create list item which simply just makes a list item element putting the actual text inside that for the add method we are simply just adding um adding a an item to the actual array and then using the update method to actually update the dom once that has been added so we're keeping things lean we're only actually updating what we need inside the add method same goes for the remove method we're just removing an item at that index and then once again passing it over to the actual update method to do the actual dom visual work all right and that's how you can make a binding from a javascript class to an html element inside your javascript classes thank you for watching and i'll see you later
