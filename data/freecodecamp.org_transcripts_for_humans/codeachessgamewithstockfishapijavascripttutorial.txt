With timestamps:

00:00 - learn how to code a chess game that can
00:01 - be played against another person or a
00:04 - computer using the stockfish API this
00:07 - course from Robert uses angular but you
00:10 - can still follow along if you're new to
00:11 - angular hi and welcome to this
00:14 - comprehensive tutorial where I'm going
00:15 - to teach you how to build a full chess
00:17 - application from scratch using angular
00:19 - even though you may not use angular I
00:21 - will explain everything in detail so it
00:24 - will be easy for you to follow and
00:25 - implement it using your preferred
00:27 - language and framework application
00:29 - consists of two two parts playing
00:30 - against friend in the same browser where
00:32 - we implemented correct piece
00:37 - moves we also implemented special moves
00:40 - like aasad
00:44 - capturing also implemented check
00:53 - detection Pawn
00:57 - promotion and castling as well here we
01:00 - have game history component which shows
01:02 - us moves that have been previously
01:04 - played if we click on one of the move it
01:07 - will simulate how that position looks
01:09 - like when that move has been
01:15 - played finally we are going to use
01:17 - stockfish rest API in order to be able
01:20 - to play against computer in our
01:23 - application click on play against
01:24 - computer button dialogue shows us to
01:27 - choose between different levels of
01:28 - stockish strength and also to choose
01:31 - color for our pieces we are waiting for
01:33 - computer to move
01:35 - and as we can see everything works fine
01:39 - if that sounds interesting let's start
01:41 - with tutorial before we start writing
01:44 - any code my goal will be to First
01:46 - clarify how things should be done and
01:48 - then we will move on to the writing code
01:50 - part because if we know exactly what
01:53 - needs to be done writing code is the
01:55 - easier part although the code is written
01:57 - using angular and typescript if you
02:00 - understand the basic logic behind the
02:01 - application it will be clear to you how
02:03 - to implement it using other languages
02:06 - and Frameworks so let's first start with
02:09 - the objectoriented model for our chess
02:11 - application on the one hand we will have
02:13 - the chess board and on the other hand
02:16 - the
02:17 - pieces for the chess board we are going
02:20 - to have several basic properties like
02:22 - chess board which is two dimensional
02:24 - Matrix of pieces player color which is
02:27 - color of the player which turn is now
02:31 - and chessboard view which is getter that
02:33 - represents board as two dimensional
02:35 - Matrix of characters from which UI can
02:37 - print the board for pieces we will have
02:40 - fanch which is short name for piece for
02:43 - now you don't need to worry about fan
02:45 - rotation we will talk about that later
02:48 - also piece color which can be either
02:51 - white or black and directions in which
02:53 - piece can move represented as array of
02:57 - coordinates here are fan characters for
03:01 - each type of the pieces for both black
03:03 - and white pieces as you can see fan CH
03:08 - is simply first letter of piece original
03:11 - name and for white pieces it is
03:13 - represented as uppercase letters and for
03:16 - black pieces in lowercase
03:20 - letters here is the coordinate system
03:23 - for our chess board X represents board
03:28 - Rank and Y represents board
03:31 - file and finally I want to make
03:34 - difference between piece save squares
03:37 - and pieces directions as we can see both
03:40 - queen and king have same directions but
03:45 - Queen can move multiple squares along
03:48 - One Directions while King can move only
03:51 - one square at the time if we don't
03:53 - counting castling as move in terminal
03:56 - create new angular project chess game
04:00 - and once it is completed open Visual
04:03 - Studio code and we can start with
04:07 - coding we are in Visual Studio code in
04:09 - app folder create chess logic
04:13 - folder then pieces folder and declare
04:16 - piece. TS file now declare abstract pie
04:23 - class that has protected abstract
04:26 - property fan character which is of type
04:29 - fan character that we are going to
04:31 - Define later also protected abstract
04:34 - property for pieces
04:37 - directions which is type of array of
04:41 - coordinates and through Constructor
04:43 - Define private property color which is
04:47 - type of
04:50 - color now we need to Define Getters for
04:53 - those properties so first let Define
04:55 - getter for fan character
05:04 - now Define get for pie
05:16 - directions and finally Define get for p
05:26 - color now in chess logic create models
05:29 - .ts file and here we are going to
05:32 - declare those
05:34 - types so
05:37 - firstly Define a numeration for piece
05:40 - color color could be either white or
05:44 - black Define type for
05:48 - coordinates which is object that has X
05:51 - and Y property both type of
05:55 - numbers and finally Define enumeration
05:59 - fan
06:02 - Char and here we are going to
06:05 - Define fan character for each type of
06:08 - pieces for both black and white
06:21 - colors white pieces are represented as
06:24 - uppercase letters while black pieces are
06:28 - represented in low overc case
06:31 - letters so now just copy white pieces
06:35 - and change white to
06:52 - black now in pie class import those
06:58 - types and
07:00 - finally after we are done with that we
07:02 - can start implementing those abstract
07:05 - class for each type of piece now we are
07:08 - going to create Bishop TS
07:14 - file declare Bishop class that extends
07:18 - base piece
07:24 - class now Implement inherited properties
07:30 - Bishop could move in four
07:32 - directions all of them are diagonally as
07:35 - you can see in the
07:48 - picture now specify Bishop color through
07:58 - Constructor now called the super
08:03 - Constructor and implementing fan
08:06 - character that depends on the color of
08:08 - the
08:09 - piece so if piece color is white then
08:14 - fan character white
08:16 - Bishop otherwise fan character black
08:21 - Bishop now create Knight DS
08:27 - file then declare KN class that extends
08:32 - base piece
08:35 - class Implement inherited
08:39 - properties Knight can move in eight
08:41 - directions as you can see in the
08:44 - picture now we are specifying all of
08:47 - them
09:16 - now specify piece color through
09:23 - Constructor call the super
09:26 - Constructor and Implement fan character
09:29 - property that depends on the piece
09:37 - color again if P color is white it's fan
09:40 - character White Knight otherwise fan
09:44 - character Black
09:54 - Knight now create Queen TS file
10:01 - declare Queen
10:05 - class that extends Base pce
10:11 - Class Implement inherited
10:15 - properties Queen can move in eight
10:18 - directions
10:49 - now specify piece
10:56 - color and again call Super Constructor
11:00 - and Implement fan character
11:05 - property so if P call is white then it's
11:09 - fan character White Queen otherwise
11:12 - black
11:26 - queen now create Rook TS file
11:33 - declare Rook class that extends base
11:37 - piece
11:39 - class Implement inherited
11:42 - properties Rook can move in four
11:45 - directions
12:02 - now specify Rook color through
12:11 - Constructor call Super
12:18 - Constructor and Implement fan character
12:23 - property if the color is white then it's
12:26 - fan character white Rook otherwise
12:29 - character black
12:34 - rook and now we are going to have one
12:37 - additional property has moved which
12:40 - signalizes if Rook has moved and that
12:43 - property is important because castling
12:47 - can't be done if one of the Rook has
12:51 - moved and here declare
12:54 - get for HMO property
13:00 - and also
13:03 - Setter that takes no arguments and it
13:08 - just
13:10 - sets has mve property to
13:15 - true now create King TS
13:21 - file declare King
13:24 - class that xense base pie class
13:29 - Implement inherited
13:34 - properties King can move in eight
13:37 - directions same as Queen so now we are
13:40 - copied directions from Queen and paste
13:43 - it in King
13:47 - class now specify King
13:54 - color again call Super Constructor
13:59 - Implement fan character
14:17 - property King also have private has mode
14:25 - property same as rook and now from Rook
14:29 - class just copy getter and Setter for
14:32 - has
14:37 - move now create pawn. TS
14:42 - file and declare Pawn class that extends
14:46 - base piece
14:49 - class Implement inherited properties and
14:53 - now for Pawn directions we are
14:54 - specifying all possible moves for white
14:57 - Pawn later we are going to create method
15:02 - to change those directions if Pawn is
15:05 - actually black
15:15 - pawn call Super
15:19 - Constructor Implement fan character
15:36 - now Define private method set black pawn
15:40 - directions that changes directions if
15:44 - Pawn has black
15:49 - color we just need to change X property
15:52 - to x * minus1 for black pieces
16:01 - now if piece color is black we need to
16:03 - call set black pawn directions
16:09 - method and also need to declare private
16:13 - has moved
16:19 - property private has moved property is
16:22 - responsible to manage if pawns have
16:24 - ability to move two squares straight
16:27 - because initially they have that option
16:30 - but after each move we need to restrict
16:32 - that so firstly copy getter and Setter
16:34 - from R class and paste it in Pawn
16:38 - class
16:41 - and now copy
16:43 - directions so when Pawn has moved we
16:47 - need to update directions by restricting
16:50 - that coordinate that says that pawn can
16:53 - move to
16:54 - square and now if Pawn is actually black
16:58 - pawn we need need to
17:00 - call Private set black pawn directions
17:06 - method now create chessboard TS file in
17:09 - chess logic
17:13 - folder and declare chessboard
17:20 - class declare private chessboard
17:22 - property that is two dimensional Matrix
17:25 - of pieces or null where null
17:27 - representing empty Square
17:31 - Define player
17:33 - color which is color of current
17:39 - player initially white is firstly
17:43 - playing and in
17:45 - Constructor implementing chessboard
17:51 - property Define first White
17:57 - Rook then White
18:02 - Knight then white
18:10 - Bishop then White
18:16 - Queen White
18:21 - King then Bishop
18:26 - again Knight
18:32 - and
18:38 - Rook now specify right
18:47 - pawns need to copy that seven more times
19:02 - now need to specify four empty
19:15 - rows and finally Define black
19:22 - bonds and black major pieces so here
19:25 - just change white color to Black
19:35 - now Define getter for player
19:48 - caller and finally Define public getter
19:52 - chessboard view which is responsible to
19:54 - printing the board
20:00 - so here we are looping through
20:05 - chessboard and for each
20:09 - row we need to see if that row
20:13 - contains Square which has piece or it's
20:16 - empty Square so
20:18 - if piece is instance of piece we need to
20:22 - return its fan
20:27 - representation otherwise we are
20:29 - returning
20:31 - now import fan
20:35 - character now close all the tabs and
20:39 - open Terminal and generate component
20:42 - that is responsible for rendering
20:44 - chessboard in the browser in modules
20:47 - folder and Skip all the
20:57 - tests now open chessboard component TS
21:00 - file in modules
21:03 - folder and here instantiate chessboard
21:08 - class as private chessboard
21:13 - property Al declare chessboard View
21:30 - and also declare public getter for
21:33 - current
21:44 - player now open tboard component HTML
21:48 - file and here declare div with class of
21:53 - chessboard all of the CSS will be
21:55 - provided in the GitHub repository so you
21:57 - don't need to worry about
22:00 - that now declare another div and here we
22:05 - are looping through each row of
22:08 - chessboard view also declare x
22:11 - coordinate and give it class of
22:19 - row so
22:22 - ang4 for let piece of
22:26 - row also declare y cord
22:29 - coordinate and give it class
22:35 - square and for now just set coordinates
22:39 - for each Square so we can see in browser
22:42 - how our board looks
22:46 - like now open chessboard component CSS
22:50 - file and here paste all of the CSS from
22:52 - GitHub repository and now you can see
22:55 - what chessboard row and square class
22:58 - repres
23:03 - present and
23:06 - now in terminal start the
23:11 - project our project is live on Port
23:17 - 42,000 now in style
23:20 - CSS paste some basic
23:24 - CSS and open up component a HTML and
23:29 - here remove all of the default HTML and
23:33 - just include our app chessboard
23:41 - component now in square class append
23:44 - border and background color because
23:46 - background is initially set to
23:48 - Black let's see how our board looks in
23:51 - the browser so every coordinate is
23:53 - placed well and if we compare that with
23:55 - original board we can see that first row
23:57 - has first Square black then light and
24:00 - second row has opposite so in order to
24:05 - get desired view we need to apply
24:07 - certain CSS classes we are in chessboard
24:10 - TS file and
24:13 - here declare public static is square
24:17 - dark
24:20 - method that takes X and Y coordinates as
24:24 - arguments and return type is Boolean
24:28 - so if both X and Y coordinates are
24:32 - either odd or even then square is
24:45 - dark now open chessboard component TS
24:50 - file and here declare public e Square
24:53 - dark method that takes X and Y as
24:57 - arguments return
24:59 - Boolean and it calls static method of
25:02 - chessboard
25:10 - class now in chessboard component
25:14 - HTML delete x and y coordinate and for
25:19 - square append new
25:22 - class so append dark CSS class if square
25:28 - is
25:31 - dark but if square is not dark it means
25:35 - that we need to append light CSS
25:39 - class those class are just different
25:42 - background
25:47 - colors as you can
25:49 - see in chessboard component CSS file
25:59 - now our board looks perfect we applied
26:02 - dark and light squares correctly and now
26:05 - we need to append pieces to the board
26:08 - now under the source and assets folder
26:10 - you have piece folder with all of the
26:13 - images for each piece in sfg
26:17 - format now open Chess logic folder and
26:20 - in models. TS
26:24 - file we are declaring the piece image
26:28 - Parts
26:30 - constant that is read only
26:34 - object that for its key has fan
26:39 - character a for Value has PA to this
26:44 - image now implement
26:47 - it by adding missing properties and now
26:50 - we need to specify part to each image so
26:53 - it's under the assets and pieces
26:56 - directory
26:58 - in order to speed this up you can copy
27:01 - this object from GitHub
27:07 - repository now open chessboard component
27:10 - TS file and here declare public piece
27:12 - image paths
27:21 - property and now in drbo component HTML
27:26 - file add image St
27:28 - T that exist only if piece is different
27:32 - than null and append Source
27:35 - tag that has value piece image parts of
27:38 - piece and also declare alternative
27:45 - tag and add class of
27:52 - piece and P class is actually just
27:55 - setting width of 50 pixels
27:59 - now all of the pieces are on its correct
28:01 - positions and now we need to create
28:04 - functions that allows us to move pieces
28:07 - and play game so now we are going to
28:10 - discuss how we can achieve that our goal
28:12 - is to implement a function that returns
28:14 - all possible save squares for the
28:16 - current player so we can display save
28:18 - squares when user clicks on certain
28:19 - piece initially we Define find save
28:22 - squares function that takes no arguments
28:24 - and return type is map of the player
28:26 - available squares that map is is in
28:28 - format string for each key which is in
28:31 - format X+ comma + Y where X and Y are
28:35 - initial coordinates of the piece and for
28:37 - Value we have array of coordinates which
28:39 - represents piece save squares initially
28:42 - we Define empty map for the player
28:44 - available squares now we are looping
28:46 - through each of the pieces for current
28:49 - player Define empty list of coordinates
28:53 - that represents piece save squares now
28:55 - we are looking through each direction of
28:57 - the piece directions declare new X and
29:00 - New Y coordinates if those coordinates
29:02 - are out of range we can't continue along
29:06 - this direction now declare piece on new
29:10 - coordinates as new piece which can
29:12 - either be piece or empty square if that
29:15 - piece is not empty Square as has same
29:18 - color as initial piece we need to
29:21 - continue because we can't put piece on
29:25 - the Square that already contains our our
29:28 - piece now we need to check if that
29:31 - position is safe after that move we are
29:34 - going to see later what is meant by
29:36 - safety of the position then if the
29:39 - position is safe we update piece save
29:41 - squares
29:43 - list after we done with traversing all
29:46 - of the pieces direction we are checking
29:48 - for special moves like ampasant and
29:50 - castling if piece has any save squares
29:54 - we are appending that to initial map for
29:57 - the player a available squares and
29:59 - finally we return that map of the player
30:01 - available
30:03 - squares now to determine if position is
30:06 - save after move we firstly need to
30:08 - simulate how that position would look
30:10 - like after the move has
30:12 - played and now if the player who just
30:15 - moved piece creates position such that
30:18 - he's in check now position is then
30:21 - unsafe we need to restore that
30:24 - position and return safety of the
30:27 - simulated position
30:29 - position now let's see this position in
30:33 - that position white is on move and white
30:35 - Rook has only three available Square
30:37 - let's say that it doesn't so if he's
30:40 - moving on the one square that we are not
30:43 - specified he will create position that
30:46 - he is in check now which means that this
30:48 - position is unsafe so if white creates
30:52 - position or black creates position in
30:55 - which he left his own king in check that
30:58 - position is considered as unsafe
31:01 - position to determine if King is in
31:04 - check look at this position to determine
31:06 - if black king is in check we need to
31:08 - Traverse through all of the white pieces
31:12 - and see if any of those pieces attacks
31:16 - black
31:18 - king So firstly we are checking for
31:21 - white Rook eight doesn't attack black
31:24 - king then for queen queen also doesn't
31:26 - attack black king
31:28 - same for The Rook for the king bishop
31:34 - and finally we see that white knight
31:36 - attacks black king which mean that black
31:39 - is in check
31:42 - now so here's the pseudo code to
31:45 - determine if one side is in check look
31:47 - through each piece of the opposite color
31:49 - to determine if black king is in check
31:51 - we are looping through all of the white
31:54 - pieces and if one of the attacking
31:56 - Square contain PS King with the opposite
32:00 - color so in this case black king then
32:05 - position is in check if no such a square
32:07 - exists there is no check and finally
32:10 - just one exception that pawns are
32:12 - attacking in diagonal directions here in
32:14 - justb TS file and here Implement public
32:17 - is in check
32:18 - method that takes player color as
32:21 - argument of type color and returns
32:25 - Boolean we needs to return f in case
32:28 - that position is not in check but to see
32:31 - if position is in check we need to
32:33 - Traverse the board so here writing two
32:36 - Ned for
32:45 - Loops as you can notice we here
32:47 - hardcoded
32:50 - eight now we're going to store that in
32:52 - private readon chessboard size property
33:11 - and now we need to see if that square is
33:14 - actually empty square or contains
33:18 - piece so declare piece variable that is
33:21 - either piece or
33:22 - null and here we are checking if pie is
33:26 - empty square or piece color is same as
33:29 - player color if it is true we need to
33:34 - continue but now we need to Traverse to
33:37 - all of the piece
33:45 - directions and now declare new X and New
33:48 - Y coordinates
33:59 - in order to see if those coordinates are
34:02 - in range we need to create new method
34:05 - private R chords
34:08 - valid that takes X and Y as
34:12 - arguments returns
34:16 - Boolean and if both X and Y are greater
34:21 - or equal than zero and less than chbo
34:25 - size coordinates are
34:34 - valid but now if coordinates are not
34:40 - valid we need to
34:48 - continue now we need to check if p is
34:51 - either instance of Pawn Knight or King
35:04 - and here
35:06 - decare attacked
35:08 - piece which is piece or
35:12 - null which is square at new X and New Y
35:17 - coordinates in the
35:20 - board and here we need to check if
35:23 - attacked piece is instance of King and
35:27 - here has same color as player color
35:30 - argument of easy in check
35:36 - method if it does we need to return true
35:39 - here I've wrongly typed false but we'll
35:41 - correct that
35:43 - later and if pie is instance of
35:48 - Pawn and Dy is equal to Z we need to
35:52 - continue because pawns are only
35:55 - attacking diagonally and here I'm also
35:57 - leaving
36:04 - comment now if pieces are Bishops Rooks
36:09 - or Queens they can move multiple squares
36:14 - along One Directions so we need to
36:17 - Traverse all of that possible squares
36:19 - along each Direction here we also need
36:22 - to check if attacked piece is instance
36:25 - of King and has same color as player
36:28 - color
36:29 - argument so copy that from previous if
36:33 - statement and paste
36:38 - it but now we also need to check if
36:41 - attacked piece is different than now if
36:44 - it does it means that we need to stop
36:47 - traversing along this direction because
36:50 - we reach certain piece and Bishop Rooks
36:53 - and queens can't move over the other
36:57 - pieces and finally we need to update new
37:01 - X and New Y coordinates by incrementing
37:04 - them for the X and
37:07 - Dy now we are going to implement a
37:10 - method that checks if the position is
37:12 - safe after
37:13 - move declare private is positioned save
37:16 - after move method that takes couple of
37:19 - arguments first is piece and others are
37:22 - previous X previous Y and new X and New
37:26 - Y coordinates
37:31 - and return type is
37:32 - Boolean firstly declare new
37:36 - piece which represents piece or empty
37:39 - Square on new
37:43 - coordinates and we need to check if that
37:46 - new piece is actually piece and has same
37:49 - color as the initial piece that wants to
37:51 - move if it does we need to return false
37:55 - because we can't put our piece on the
37:57 - Square that already contains piece of
38:00 - our
38:12 - color also I'm leaving comment here and
38:15 - now we need to simulate how that new
38:17 - position would look
38:19 - like at previous X and previous Y
38:23 - coordinates we need to put empty Square
38:28 - that's the reason why we are setting
38:31 - null and at new X and New Y coordinates
38:35 - we are putting that
38:40 - piece now we need to check if that
38:42 - player is in
38:49 - check by declaring his position safe
38:52 - Boolean so position is safe if that
38:54 - player is not in check after he moved
38:57 - piece
38:58 - we now need to restore
39:03 - position at previous X and previous y
39:06 - will be piece and at new X and New Y
39:10 - will be new piece and finally we need to
39:13 - return is position safe
39:17 - Boolean we are in chbo TS file and here
39:20 - implementing private find save squares
39:22 - method that takes no arguments and
39:25 - return custom type save
39:29 - squares which we are going to declare in
39:32 - models. TS file which is basically map
39:35 - that for each key has string in format X
39:39 - Plus comma plus Y where X and Y as we
39:41 - said are initial coordinates of the
39:43 - piece and for Value has array of
39:50 - coordinates then import save squares
39:53 - type declare that initial map
40:13 - and also return that
40:15 - map now we need to Traverse through the
40:17 - board to be able to find those safe
40:20 - squares
40:31 - now we need to check if piece is empty
40:33 - square or piece colar is different than
40:36 - the color of the current player if it is
40:39 - we need to
40:43 - continue also declare piece save squares
40:46 - which is initially empty array of
40:51 - coordinates and now look through all of
40:53 - the pieces Direction
41:02 - now specify new X and New Y
41:14 - coordinates now we need to check if
41:16 - those coordinates are valid because if
41:17 - they're not valid we cannot process
41:25 - further also declare new P which
41:27 - represents square at the new X and New Y
41:30 - coordinates which can be either piece or
41:33 - empty
41:34 - square and now we need to check if new
41:36 - piece is actually piece and has same
41:39 - color as the piece that wants to move if
41:42 - it does we cannot process further
41:45 - because we can't put our piece on the
41:47 - Square that already contains piece of
41:49 - our color now we are checking if piece
41:51 - is either Pawn Knight or King
42:04 - now we are checking if position is save
42:06 - after move and we are passing piece x y
42:10 - and new X and New Y
42:15 - coordinates and if position is safe it
42:18 - means that we can append those
42:21 - coordinates to piece save
42:24 - squares appending new X and new y
42:30 - now we are checking for other
42:35 - pieces Bishop Rooks and queens can move
42:38 - multiple squares along One Direction
42:40 - that's the reason why we are having this
42:42 - while
42:43 - loop because we need to Traverse all of
42:46 - the possible squares along each
42:48 - Direction here also declare new piece
42:51 - and checking if that new piece has same
42:54 - color as piece that wants to move if it
42:57 - does we need to break the V Loop because
43:00 - those pieces can't move over the other
43:04 - pieces now copy this if
43:11 - statement if new piece is actually
43:13 - different than null we also need to
43:15 - break for the same reason that I
43:17 - mentioned couple seconds ago and finally
43:20 - we need to increment new X and New Y
43:23 - coordinates by DX and Dy
43:29 - after we traversing all of the pieces
43:31 - directions we need to check if piece has
43:34 - any save squares if it does we need to
43:36 - append those save squares into the save
43:39 - squares
43:53 - map and finally we need to restrict Pond
43:56 - movements in certain
44:03 - directions because for example pawns can
44:06 - only take pieces diagonally but can move
44:09 - forward if there is piece in front of
44:12 - them so now we are going to address all
44:16 - of that cases pawns can't move two
44:19 - square straight if there is pieace in
44:20 - front of
44:25 - them we are checking at the same time
44:28 - for both black and white pawns if DX is
44:31 - equal to two it means that we are
44:33 - checking for white pawns otherwise we
44:35 - are checking for black
44:51 - pawns also I'm going to leave comment
44:54 - what we did here in in case someone
44:58 - watches code at GitHub
45:07 - repository also now we need to do the
45:09 - same thing if Pawn is moving one square
45:13 - straight so same principle
45:16 - again checking for both black and white
45:19 - Pawns
45:39 - also I'm leaving comment for this
45:49 - situation and finally we need to
45:51 - restrict pal movements diagonally if
45:55 - that square
45:57 - diagonally is empty or has the piece
46:00 - that has the same color as the pawn that
46:03 - wants to
46:20 - move also I'm leaving comment for this
46:23 - situation as well
46:40 - now open chessboard component DS file
46:43 - and declare private property selected
46:46 - Square which is type of selected square
46:48 - that we are going to Define
46:51 - now so create models. TS file in
46:54 - chessboard directory
46:57 - and declare type for square with piece
47:02 - which is object that has piece of type
47:04 - fan character as property as well as X
47:07 - and Y coordinates of that
47:10 - square now Define type Square without
47:15 - piece that is object that for piece has
47:19 - null value and finally declare type
47:22 - selected Square which is discriminated
47:24 - Union between those types
47:31 - now import selected
47:35 - Square initially no square is
47:38 - selected and declare private property
47:40 - piece save squares which represents save
47:44 - squares for selected
47:46 - piece as array of coordinates which is
47:48 - initially empty
47:53 - array now open chessboard component HTML
47:57 - file and declare click event for
47:59 - selecting
48:02 - piece selecting piece function takes two
48:04 - arguments X and Y coordinates of that
48:07 - square and in jbor component TS file
48:09 - we're going to implement that
48:16 - method return type is
48:20 - void here we are declaring piece on that
48:24 - square which can be piece or empty
48:28 - Square so if it is actually empty Square
48:31 - we need to return from the function as
48:32 - we doing
48:35 - now and also we need to update private
48:37 - properties for selected square and piece
48:39 - save squares so firstly update selected
48:45 - Square by setting piece and X and Y
48:51 - properties and we need to update piece
48:53 - save squares now but before doing so
48:56 - open chessboard TS file and we need to
49:00 - declare property that
49:02 - holds save squares for the current
49:05 - player so here Define underscore save
49:08 - squares private
49:13 - property and we are going to assign
49:15 - value in Constructor by calling find
49:18 - save squares function
49:27 - we also need to create getter for that
49:29 - private save squares
49:41 - property and now go to chessboard
49:43 - component TS file and declare public
49:46 - getter for Save squares
50:00 - and now finally update piece save
50:17 - squares we are going to apply certain
50:19 - CSS classes in case that square is
50:22 - selected or Square is save for selected
50:24 - piece in order to achieve that imp
50:26 - public e Square selected method that
50:28 - takes X and Y coordinates as arguments
50:31 - and return type is Boolean if no square
50:34 - is selected return
50:38 - false and here we are checking if X and
50:41 - Y from E Square selected method are
50:43 - equal to selected Square X and Y
50:50 - properties also Implement public e
50:52 - Square save for selected piece method
50:54 - that also takes X and Y coordinates Ates
50:56 - as arguments and returns
51:03 - Boolean and here we are checking if
51:05 - piece save squares actually contains x
51:08 - and y
51:19 - coordinate now open dasboard component
51:21 - HTML file and apply selected Square
51:24 - class if square is actually selected
51:35 - and also create new div and give it
51:38 - class save square if that square is
51:42 - actually save for selected
51:54 - piece now you can notice that if I click
51:57 - on a square with a piece it marks that
51:58 - square as selected and highlights its
52:01 - save
52:04 - squares so for now everything works fine
52:06 - but however as you can also observe I
52:08 - can select squares with black pieces
52:11 - even though it's white turn so we go on
52:13 - address that bug and also we need to
52:14 - create functions that allows us to move
52:17 - pieces now we're addressing bug for
52:19 - selecting piece with wrong color so
52:21 - Implement is a wrong piece selected
52:23 - method that takes piece as fan character
52:25 - as argument and returns
52:30 - Boolean declare Boolean that says if
52:33 - white piece is
52:36 - selected so if piece is equal to piece
52:39 - to uppercase it means that white piece
52:41 - is selected and now we need to return if
52:44 - white piece is selected and player color
52:48 - is black
52:50 - or black piece is selected and player
52:54 - color is white in that case this method
52:56 - returns
53:00 - true and now we are going to call that
53:03 - method in selecting piece to prevent
53:07 - selecting piece with wrong
53:11 - color if I try to select black pieces
53:14 - when white is on move you can see that I
53:17 - couldn't select them which means that
53:18 - our method is working well and bug is
53:20 - resolved we are in chessboard TS file
53:23 - and implementing public move method that
53:25 - takes for our arguments previous X
53:27 - previous Y and new X and New Y
53:32 - coordinates and return type is
53:38 - void now we need to check if those
53:40 - coordinates are valid if they're not
53:42 - valid we need to return from the
53:55 - function now decare piece
53:57 - variable which is type piece or null
54:00 - that represents item on previous X and
54:03 - previous Y coordinates in the
54:05 - board and now we are checking if piece
54:08 - is actually empty square or has color
54:11 - that is different than color of the
54:13 - current player if it does we need to
54:15 - return from the
54:17 - function also here declare piece save
54:24 - squares that we are going to get from
54:26 - Save squares
54:36 - property and now we need to check if new
54:38 - X and New Y coordinates are actually in
54:41 - those piece save squares if they are not
54:43 - we need to return from the function
54:46 - because they are not safe squares
54:59 - so if those coordinates are not safe
55:02 - throw an
55:08 - error and now update the
55:12 - board at previous X and previous Y
55:17 - coordinates we are setting
55:20 - null and at new X and new y coordinate
55:24 - set piece
55:29 - also update player color variable so if
55:32 - player was white now it's black and vice
55:43 - versa and also we need to recalculate
55:46 - save squares after each
55:51 - move if piece is Pawn Rook or King and
55:56 - hasn't been moved we need to set has
55:59 - moved property to
56:21 - true now open chessboard component TS
56:24 - file and we are going to implement
56:27 - placing piece method which is private
56:30 - method that takes two arguments new X
56:33 - and new y coordinate and return type is
56:39 - void here we first need to check if
56:43 - square with piece is actually
56:47 - selected also we need to check if new X
56:51 - and New Y coordinates are safe
56:53 - coordinates for selected piece
56:58 - now we are destructuring previous X and
57:00 - previous y property from selected
57:07 - square and now we are going to call move
57:11 - function with previous X previous Y and
57:14 - new X and New Y
57:19 - coordinates and also update chessboard
57:21 - View
57:28 - now create public move method which
57:31 - takes X and Y coordinates as
57:34 - arguments and call both selecting and
57:37 - placing piece
57:44 - functions after calling both
57:46 - methods go to chessboard component HTML
57:50 - file and there instead of selecting
57:53 - piece call move function now you can see
57:55 - that our move fun function is working
57:56 - but there is bug because save squares
57:59 - remain still even though after I played
58:00 - move also I couldn't take
58:10 - aasan also I couldn't
58:17 - Cel and as you can notice when I check
58:21 - black king we should have some
58:24 - signalization to mark that King is in
58:26 - check so now we are going to address
58:29 - those bugs now Implement private
58:32 - unmarking previously selected and save
58:35 - squares
58:37 - method that takes no
58:40 - arguments and return type is
58:43 - void so here for selected Square say
58:47 - that no square is
58:49 - selected and also set piece save squares
58:52 - to empty
58:54 - array and now we we are going to call
58:56 - that method each time we move the
59:06 - piece we successfully removed bug that
59:08 - showed previously save squares after we
59:11 - moved
59:13 - piece now we are going to fix bug that
59:16 - happens when we click on the Square that
59:19 - has already been selected so here we are
59:21 - checking if same square is clicked
59:27 - so if selected square piece is not null
59:31 - and selected Square X is equal to
59:34 - X and selected Square Y is equal to Y it
59:39 - means that same square is clicked if it
59:42 - does we need to return from the
59:45 - function but previously we need to call
59:48 - Private unmarking previously save and
59:50 - selected Square method to unmark that
59:53 - square and save squares for that
59:55 - selected piece
59:56 - now if I click on square that is already
59:58 - been selected it is
60:01 - unmarked so everything works fine open
60:04 - models. TS file in chest logic folder
60:08 - and declare last move type which is
60:11 - object that contains previous X
60:14 - property previous y
60:17 - property as well as current X and
60:19 - current Y
60:23 - coordinates and also piece that has made
60:31 - move now open chessboard DS
60:35 - file and here after each move we need to
60:37 - update last move property but first we
60:40 - need to Define it declare
60:43 - privatecore last move property which is
60:46 - type of last move or undefined because
60:49 - it is initially
60:51 - undefined and
60:53 - here Implement getter for last move
61:09 - property now scroll down to move
61:11 - function and update underscore last move
61:19 - property set previous X previous Y and
61:22 - for current X and current y set new X
61:25 - and New Y and also pass
61:31 - piece we need to Define property that
61:34 - tells us if King is in check we have is
61:36 - in check method that returns if King is
61:39 - in check so somehow we need to update
61:42 - that property in that function but let's
61:46 - firstly see when that function is
61:49 - called that function is called in is
61:52 - position save after move method but on
61:54 - simulated position so so we need to have
61:57 - some argument that tells us if we called
62:00 - that on simulated position or on the
62:02 - real one so Define checking current
62:06 - position
62:14 - Boolean in E position save after move
62:17 - call it with
62:20 - false and firstly in models Define type
62:24 - King check which is object that has is
62:28 - in check set to true and also X and Y
62:32 - coordinates of the
62:35 - king declare type King not
62:39 - check which is object that has is in
62:42 - check property set to
62:45 - false and
62:47 - declare check State
62:51 - type which is discriminated Union
62:53 - between King checked and King not
62:55 - checked
63:00 - types and now in jbo TS file declare
63:05 - private property underscore check
63:10 - state which is initially set to King not
63:17 - checked import check State
63:21 - type and now we are going to implement
63:24 - getter for that prop
63:34 - y after we implemented getter foror
63:37 - check state property in e in check
63:39 - function here when we returning true we
63:43 - need to update the check state property
63:47 - if we are checking current position
63:58 - and
63:59 - also don't forget to return
64:03 - true now we are going to do same
64:06 - for Rooks Bishops and
64:14 - queens and finally if king is not in
64:17 - check but we are checking current
64:20 - position we are also updating the
64:22 - underscore check State Property by
64:25 - setting is in check to
64:29 - false and scroll down to move
64:32 - function after we changed player call
64:36 - property we need to call is in check
64:42 - method for current player and for
64:46 - checking current position we are passing
64:48 - true now open chessboard component TS
64:51 - file and declare private properties for
64:53 - both last move and check state
64:56 - we are going to apply certain CSS
64:58 - classes in case that King is in check or
65:02 - Square is actually either starting or
65:05 - end Square for the piece that last made
65:08 - a
65:12 - move in order to do that we need to
65:15 - create two functions firstly Define
65:18 - public is square last move that takes X
65:22 - and Y
65:23 - arguments and returns both
65:28 - firstly we are checking if last move is
65:30 - undefined if it does return
65:34 - false otherwise we need to
65:37 - firstly destructure previous X previous
65:40 - Y and current X and current White
65:44 - properties from last
65:49 - move and here we are checking if x is
65:52 - either equal to previous X and Y is
65:54 - equal to previous y
65:56 - or X is equal to current X and Y is
66:01 - equal to current
66:03 - y now Implement
66:06 - method is square checked which also
66:10 - takes X and Y coordinates as arguments
66:13 - returns
66:14 - Boolean and if is in check property of
66:18 - check
66:19 - state is set to true and check State X
66:23 - is equal to X and check state Y is equal
66:26 - to Y it means that King is in
66:32 - check so in placing
66:35 - piece after we called move function I
66:38 - want to update check
66:40 - State and last
66:50 - move and now go to chessboard component
66:53 - HTML file and here here append class
66:57 - last move if square is actually last
67:02 - move and do the
67:04 - same if King is in check append king in
67:08 - check CSS
67:17 - class now as you can see those classes
67:20 - just set different box Shadow for that
67:24 - square
67:25 - we can see that last move class is
67:28 - implemented well as well as king in
67:35 - check that is working
67:38 - good but you will notice that I still
67:42 - don't have option to Castle so we are
67:44 - going to work on that we are in
67:46 - chessboard dots file and here we are
67:49 - going to implement method can Castle
67:53 - here I have wrongly typed can capture
67:55 - but can Castle met takes King as
67:57 - argument as well as king side Castle
68:00 - bullion which signalizes if we want to
68:02 - Castle King side or queen side firstly
68:05 - if King has been moved we are returning
68:09 - false here specify King X and Y position
68:13 - King position X actually depends on the
68:16 - color of the king so if King color is
68:20 - white king position X is zero otherwise
68:23 - it's
68:24 - seven declare King position Y which is
68:29 - four declare Rook position
68:34 - X which depends on the color of the king
68:39 - but is same as king position
68:41 - X Rook position y depends on the king
68:45 - side Castle bullion so if it is King
68:49 - side it's seven if it's Queen side it's
68:51 - zero so Rook should be on Rook position
68:55 - X and row position Y coordinates at the
68:57 - board now we are going to check
69:04 - that now if Rook isn't instance of
69:09 - Rook or Rook has been
69:12 - moved or King is currently in check it
69:16 - means that we can't Castle so we're
69:18 - returning false now Define first next
69:22 - king position why which is coordinate of
69:26 - Y Square through which king needs to
69:30 - pass here we are declaring for both king
69:33 - and queen side
69:36 - castling also declare second next king
69:39 - position y that Kings need to
69:42 - cross in order to
69:45 - Castle now we need to check that both of
69:48 - those squares need to be
69:53 - empty if either one of them is is not
69:55 - empty Square we need to return
70:05 - false in case that three wants to Castle
70:07 - Queen
70:11 - side we also need to check that chess
70:15 - board at King position X and one need to
70:19 - be empty finally we need to check if
70:23 - those squares over which Kings need
70:25 - needs to pass our save squares so that's
70:28 - the reason why we are calling is
70:29 - position save after move
70:31 - function on first next king position Y
70:34 - and second next king position
70:37 - y for y coordinate and for x coordinate
70:42 - King position
70:45 - X after we implemented K Castle
70:49 - method we need to call that method in
70:52 - find save squares function so after we
70:55 - Traverse all of the pieces
70:59 - direction if piece is instance of King
71:02 - we need to check for both queen and king
71:05 - side
71:06 - castling so if King can
71:11 - Castle King side append to piece save
71:16 - squares x coordinate and for y set
71:21 - six now we need to check if King can
71:24 - canel
71:25 - Queen
71:27 - side if it can to piece save squares
71:30 - append X and for y append
71:36 - two now let's play couple of moves to
71:38 - get in the position where King can
71:43 - Castle now you see that I have option to
71:46 - Castle but if I Castle castling is done
71:50 - incorrectly because Rook didn't move at
71:52 - all so this is the bug that needs to be
71:54 - resolved
71:56 - also you see that black hasn't option
71:58 - for casting because white Bishop attacks
72:01 - that square over which Kings need to
72:02 - cross in order to fix bug for castling
72:05 - in move function we are going to call
72:07 - another special function that updates
72:09 - the
72:12 - board Implement private handling special
72:14 - moves
72:16 - method that takes five arguments first
72:19 - is piece that has been previously moved
72:22 - and others are its previous X previous y
72:26 - new X and New Y coordinates return type
72:28 - is
72:30 - white here we are checking if pce is
72:32 - instance of King and if absolute
72:35 - difference between its previous Y and
72:38 - New Y coordinates is exactly two if it
72:42 - does it means that castling has happened
72:44 - but if New Y is bigger than previous y
72:48 - it means that we Castle King side
72:52 - otherwise Queen side
72:56 - now declare Rook position
72:59 - X which is same as previous
73:03 - X declare Rook position Y which depends
73:07 - on the side where we Castle so if if
73:10 - it's King side it's seven if it's Queen
73:13 - side it's zero now Define Rook that we
73:16 - are going to get from board at Rook
73:18 - position X and the r position Y
73:20 - coordinates
73:30 - also declare Rook new position
73:35 - Y which also depends on the side where
73:38 - we Castle so if it's King's
73:42 - side it's five but if it's Queen side
73:46 - it's three and now finally we need to
73:49 - update the board so at chess board Rook
73:51 - position X and Rook position y we are
73:54 - setting n because we are moving Rook
73:56 - from that
73:57 - position and at chess boort Rook
74:01 - position X and Rook new position y we
74:04 - are setting that
74:07 - rook and also set that Rook has been
74:13 - moved now we are going to call that
74:15 - function in move method
74:33 - now play couple of moves just to get the
74:35 - position where both King can
74:39 - Castle now you can see that I
74:42 - implemented King side castling
74:44 - well as well as Queen side
74:47 - castling now we are going to discuss
74:50 - whether ampasant capturing can occur we
74:52 - observe that in the given position White
74:55 - last move involved moving upon pawn two
74:57 - squares and now black pawn has the
74:59 - option to capture aasan in order for the
75:01 - ability to capture aasan to be present
75:04 - certain conditions need to be met and
75:05 - these are previous player moved upon two
75:08 - squares our pawn and the opponent Pawn
75:11 - are on the same Rank and also pawns need
75:14 - to be adjacent to each other and finally
75:17 - position must be save after capture is
75:19 - completed if you look at this position
75:22 - even though black moved pawn two squares
75:24 - White PA hasn't option to capture aasan
75:27 - because if he has he will create such a
75:31 - position that he's in check now which
75:33 - means that this is unsafe position we
75:36 - are in chessboard TS file and now
75:37 - Implement private can capture ENT
75:40 - method that takes Pawn as argument as
75:44 - well as Pawn X and pawn Y
75:48 - coordinates and returns
75:53 - bullan if last move is undefined we need
75:57 - to return
76:01 - false now the structure properties from
76:04 - last move
76:15 - object and now in that if statement we
76:19 - need to check if amband can actually
76:21 - happen so if piece isn't inst of Pawn
76:27 - or Pawn color is different than color of
76:31 - current player
76:33 - or absolute difference between current X
76:38 - and previous X is different than
76:43 - two also if Pawn X is different than
76:46 - current X or absolute difference between
76:50 - Pawn Y and current Y is different than
76:52 - one
76:55 - so if any of those conditions are met we
76:58 - cannot capture
77:01 - ampasant now declare P new X
77:12 - position for both black and white
77:19 - pawns now declare Pawn New Y position
77:28 - which is same as current
77:30 - p and now we need to simulate how that
77:33 - position would look like so at current X
77:37 - and current y we are setting null
77:40 - because we removed Pond from that
77:45 - position now we need to check if
77:47 - position is safe after that move
78:01 - we need to restore position
78:08 - back and finally we need to return is
78:11 - position safe Boolean now go to find
78:14 - save squares function where we need to
78:16 - check if aasan can actually be
78:20 - completed so if p is instance of Pawn
78:24 - and can't capture
78:31 - ound we need to update piece save
78:39 - squares here we are going to handle for
78:42 - both black and white pieces at the same
78:44 - time
79:01 - we created position in which white has
79:03 - option to capture aasand but if he
79:07 - captur we didn't remove black pawn so
79:09 - this is the bug that we need to resolve
79:11 - in handling special moves function as we
79:13 - did for the
79:16 - castling now in handling special moves
79:19 - function we need to check if ENT
79:21 - capturing has
79:23 - occurred so if piece is instance of
79:26 - Pawn and last move isn't
79:35 - undefined and last move piece is
79:37 - instance of
79:43 - Pawn and absolute difference between
79:47 - last
79:48 - move current X property and
79:55 - last
79:56 - move previous X property is exactly
80:03 - two and also if previous X is same as
80:06 - last move current
80:10 - X and finally if New Y is same as last
80:16 - move current
80:19 - y it means that aasan has actually
80:23 - happened and now we need to update the
80:28 - board so now chess board at last move
80:31 - current X and last move current y will
80:35 - be
80:41 - null if fight Pawn captures a passant we
80:44 - remove black pawn successfully and bug
80:46 - is resolved but however there is another
80:48 - bug about Pawn promotion so if white
80:51 - Pawn takes a rook we should display
80:52 - promotion dialogue from which white
80:54 - player can choose in which piece he
80:56 - wants to promote his Pawn now we are
80:58 - going to work on
81:02 - that in chessboard TS file Implement
81:05 - private promoted piece
81:08 - method that takes one argument promoted
81:10 - piece type of type fan character and
81:14 - returns one of the piece in which we can
81:16 - promote our Pawn which is either Knight
81:18 - Bishop Rook or
81:22 - queen and now if from oted P type is
81:26 - either F character White Knight or Black
81:39 - Knight return new
81:42 - Knight and for callor pass Coler of the
81:45 - current player so now we are going to do
81:47 - same for Bishop rook and queen
81:55 - so if promoted P type is either white
81:57 - bishop or black Bishop return return new
82:04 - bishop do the same for
82:21 - rook and finally
82:24 - for
82:29 - queen go to move
82:32 - function and add one more argument for
82:35 - promoted piece type which is fan
82:37 - character or
82:42 - null and here we need to check if
82:44 - promoted piece type is different than
82:46 - null if it does it means that promotion
82:48 - is happening and we need to update the
82:50 - board so at new X and New Y coordinates
82:53 - we are not going to to set piece but
82:55 - rather result of the function promoted
82:58 - piece because if we set piece we will
83:01 - place Pawn on that position and we don't
83:03 - want to do that so here call promoted
83:06 - piece for promoted piece type and if
83:08 - promotion doesn't
83:10 - happening we need to place piece at new
83:12 - X and New Y
83:17 - coordinates now open chessboard
83:19 - component TS
83:20 - file and we are going to declare
83:22 - properties for p promotion
83:28 - first decare property is promotion
83:31 - active which is bullan that signalizes
83:33 - if promotion dialogue should be open and
83:37 - initially set to
83:38 - false also private promotion courts
83:42 - property which is type of coordinates or
83:44 - null and initially set to
83:49 - null and promoted piece which is type of
83:53 - fan character or null and by default is
83:55 - set to
83:56 - null and create function public
83:59 - promotion
84:04 - pieces which returns array of fan
84:06 - character so if the color is
84:11 - white it will return array of fan
84:13 - characters for white pieces in which we
84:15 - can promote our
84:19 - pawn and those are fan character White
84:23 - Knight
84:25 - fan character white Bishop white rook
84:28 - and White
84:36 - Queen and just copy that array and
84:39 - change white to black
84:47 - color now we need to fix bug because
84:50 - move function now takes five arguments
84:52 - and for a promoted pie type for for now
84:54 - just pass
84:56 - null and here we are going to handle
85:02 - promotion so firstly declare is Pawn
85:06 - selected
85:08 - Boolean so if selected square piece is
85:11 - actually fan character of white
85:14 - Pawn or selected square piece is black
85:22 - pawn now we need to check if that pawn
85:25 - is on last
85:32 - rank so if Pawn is selected
85:36 - and new X is equal to 7 or new X is
85:40 - equal to zero it means that pawn is on
85:42 - last
85:44 - Rank and now we need to check if we
85:47 - should open promotion dialogue so declar
85:50 - should open promotion dialogue bullan
85:55 - and if promotion isn't active and pawn
85:59 - is on last rank it means that we need to
86:01 - open promotion
86:04 - dialogue so set is promotion active to
86:08 - true and also update promotion
86:16 - coordinates and now we need to return
86:19 - because now we wait for player to choose
86:22 - in which piece he wants to promote his
86:36 - on now open chessboard component HTML
86:39 - file and now we are going to display
86:41 - that P promotion dialogue so here we
86:44 - have one div that is displayed only if
86:47 - promotion is
86:49 - active and give class of promotion
86:52 - dialogue
86:59 - and now we need to look through the
87:01 - result of promotion pieces function and
87:04 - to display each of the promoted
87:09 - piece add Source
87:21 - T and also create button to close the D
87:24 - dialog in case that we don't want to
87:25 - promote our Pawn but for now remove NG
87:29 - if condition to display dialogue when
87:31 - his promotion active is said to true
87:33 - because we want to show how the dialogue
87:35 - would look in the
87:39 - browser now you can see how that
87:41 - dialogue looks like if I move white
87:43 - pieces it changes color to Black and
87:46 - again changes to
87:49 - White now in chor component HTML file
87:52 - display dialogue only when is promotion
87:54 - active is set to
87:58 - true now if I want to take a look
88:01 - dialogue will be displayed and it will
88:03 - display me all of the pieces in which I
88:05 - can promote my pone but there is a bug
88:07 - because safe and selected squares are
88:09 - now also marked and I need to create a
88:11 - function when I click on a promotion
88:14 - piece it will place that piece on the
88:16 - board and also another bug when I click
88:19 - on another piece dialog Still Remains
88:22 - open so we need to correct that
88:25 - in chessboard component HTML file
88:28 - declare click event for each promotion
88:31 - piece and pass promoted piece function
88:34 - that has one argument and it's piece of
88:36 - type fan character now in chbo component
88:39 - TS file we're are going to implement
88:41 - that
88:43 - method return type is
88:46 - void and here if promotion cords are
88:51 - null or selected square piece is now we
88:56 - need to return from the
89:02 - function also update promoted piece
89:04 - property and set it to
89:09 - piece now we need to destructure
89:12 - properties from promotion
89:19 - chords now the structure previous X and
89:22 - previous y property from Ed
89:31 - square and now we need to update the
89:34 - port so we should call placing piece
89:36 - function but we don't need to check for
89:38 - those if statements so I'm going to
89:40 - create another
89:44 - function private update board
89:48 - method that takes previous X previous y
89:50 - new X and New Y
89:52 - coordinates return type is void and I'm
89:55 - going to copy code that updates the
90:01 - board and remove it in placing piece
90:04 - function and just call update
90:13 - board and copy that method and call it
90:17 - in promote piece
90:21 - method let's correct is position save
90:23 - after move function here I don't need to
90:25 - pass piece as argument but rather I will
90:28 - read it from board at previous X and
90:30 - previous Y
90:38 - coordinates and if p is null we need to
90:42 - return
90:44 - false and now every time that we called
90:46 - is position save after move function
90:48 - with five arguments we need to change
90:50 - that and call it with four
91:07 - now go to unmarking previously selected
91:10 - and save Square method and check if is
91:13 - promotion active if it does set is
91:16 - promotion active to
91:18 - false also set promoted piece to null
91:25 - and set promotion cords to
91:32 - null in update board method when we call
91:35 - move function instead of passing null we
91:38 - need to pass promoted piece
91:43 - property now if we want to take a R and
91:46 - P promotion dialogue opens we still have
91:48 - bug because save squares are
91:50 - highlighted also we need to create
91:52 - function to close the dialogue
91:54 - and if we don't remove save squares when
91:56 - dialogue is open we have option to place
91:58 - PA on Square even though we didn't
92:00 - choose in which piece we want to promote
92:02 - our Pawn so now we are going to address
92:04 - that
92:06 - bug in chessboard component HTML file
92:09 - declare click event to close the
92:15 - dialogue and in chort component TS file
92:18 - we are going to implement that method
92:24 - public close pawn promotion
92:27 - dialogue takes no arguments and return
92:30 - type is void and here we just need to
92:32 - call unmarking previously selected and
92:34 - save Square method in order to remove
92:36 - save squares when dialogue is open in
92:39 - placing piece function in if statement
92:41 - where we check if we should open
92:43 - promotion dialogue we need to set that
92:44 - piece save squares are now empty
92:49 - array and finally declare public method
92:52 - that will check if Square is actually
92:54 - promotion
92:55 - Square so in that case we can signalize
92:59 - which Square we clicked when we want to
93:01 - promote our
93:04 - Pawn so if promotion cords are null we
93:07 - need to return
93:08 - false and now we need to check if
93:11 - promotion courts X is equal to X and if
93:14 - promotion courts Y is equal to y
93:26 - now go to chessboard component HTML file
93:29 - and here upend class if that function
93:33 - returns true for that coordinates so
93:35 - append promotion Square
93:45 - class now if we take a rook save squares
93:48 - for Pawn are now not highlighted anymore
93:50 - and which signalizes our promotion
93:52 - Square close PA promotion dialog
93:54 - function works well if we click on
93:56 - another P when dialog is open dialog
93:58 - will
93:59 - disappear and if we want to take a rook
94:02 - we see that now we can put Pawn on its
94:04 - previously saved Square which means that
94:06 - previous bug is resolved and now if I
94:08 - want to promote into a queen everything
94:10 - works well I couldn't move a bishop
94:13 - because blacking will be in check now
94:15 - decare properties that will signalizes
94:17 - if the game is over so first let Define
94:19 - privatecore is game over Boolean which
94:21 - is initially set to false and also
94:24 - privatecore game over message which is
94:27 - string or
94:30 - undefined and now Define gets for both
94:49 - properties and also getter for game over
95:03 - now let's Implement a method that checks
95:05 - if game is
95:11 - finished private is game finished method
95:13 - takes no arguments and returns
95:16 - bullion and here if player doesn't have
95:19 - any safe squares it means that game is
95:22 - over and we need to check if it is a
95:25 - Checkmate or
95:27 - stalemate so if is in check property of
95:30 - check State object is said to true it
95:32 - means that player lost via
95:36 - Checkmate so here declare previous
95:42 - player if current player is white it
95:45 - means that previous player was black and
95:48 - vice
95:52 - versa and now update unor game over
95:55 - message
95:56 - property and set previous
95:58 - player one by
96:04 - Checkmate otherwise update game over
96:07 - message and said that this is
96:12 - State and return
96:16 - true otherwise we need to return
96:20 - false and finally go in move function
96:24 - and after we calculated save squares we
96:27 - need to update e game over
96:31 - property we are going to handle
96:33 - situations in which draw is happening to
96:35 - a 50 move rule basically this rule
96:37 - states that if no capture has been made
96:40 - or no Pawn has moved in the last 50
96:42 - moves game is declared as draw so here
96:44 - we are declaring private 50 move rule
96:46 - counter and set it to zero and scroll
96:49 - down to move function
96:54 - declare is p taken
97:01 - Boolean and if square at new X and New Y
97:05 - coordinates is different than empty
97:06 - Square it means that piece is
97:11 - taken now we need to check if piece is
97:14 - taken or piece that is last moved is
97:17 - actually Pawn if it does we need to
97:19 - reset the counter to zero
97:26 - otherwise we need to increment it by
97:34 - 0.5 and now go to E game finished
97:38 - method and we need to see
97:41 - if 50 move Ru counter is equal to 50 if
97:45 - it does update game over
97:49 - message and set draw do a 50 move roll
97:54 - and return
97:58 - true now we are going to talk about
98:00 - insufficient material positions a
98:02 - position is considered insufficient
98:04 - material position if neither site can
98:06 - mate the other there are couple of those
98:07 - position and we are starting with King
98:09 - versus King
98:11 - position also if one side has exactly
98:14 - one minor piece knight or Bishop it is
98:18 - also considered as insufficient material
98:20 - position if one side have two knights
98:22 - and King versus King it is also
98:24 - insufficient material
98:26 - position if both sides have exactly one
98:29 - Bishop of same colors it is also
98:32 - considered as insufficient material
98:33 - position and finally if one side have
98:36 - multiple Bishops of same color position
98:40 - is also insufficient material position
98:42 - we are not going to implement
98:43 - insufficient material function because
98:45 - it is Trivial function and I don't want
98:47 - to spend time on it I'm going to paste
98:50 - the code and we can see what we did in
98:51 - that method
98:54 - so now we have private insufficient
98:55 - material method that takes no arguments
98:58 - and returns bullion now we declared
99:00 - white and black pieces as array of
99:03 - object and that object has piece X and Y
99:06 - properties we need to have X and Y
99:09 - because in some cases we can have
99:11 - Bishops that are on same
99:13 - color now we are traversing the board
99:16 - and see if piece has white color if it
99:19 - does append it to White pieces otherwise
99:22 - append it to Black pieces
99:24 - and now we are checking if white pieces
99:26 - has length of one and black pieces has
99:28 - length of one which means that this is
99:30 - King versus King position and we are
99:32 - returning true now we are checking if
99:35 - one side has King and minor piece
99:38 - against King so if white piece length is
99:41 - equal to one and black piece length
99:44 - equal to two we are checking if black
99:46 - pieces has either Knight or Bishop we
99:49 - are doing same for white pieces now
99:53 - here we are checking if both sides have
99:56 - Bishop of same color so if white piece
99:58 - has length of two and black pieces has
100:01 - length of two now we are checking if
100:03 - both sides have Bishop if it does we
100:07 - need to check if those Bishops are on
100:09 - same color so we are calling is square
100:11 - dark method so if both white and black
100:15 - bishops are either dark or
100:19 - light we are returning that
100:21 - Boolean now we are check checking if one
100:24 - side has two knights and King against
100:26 - King for the sake of that we Define
100:28 - player has only two knights and King
100:31 - method which simply filters the piece
100:34 - and see if that piece is actually night
100:36 - and if the length of that filtered array
100:39 - is equal to
100:40 - two and finally we are checking if one
100:43 - side has only bishops of same color
100:46 - against King so we declared function and
100:49 - we're filtering Bishops and now we need
100:51 - to see if all of Bishops are on same
100:54 - color for the sake of that we declared
100:56 - set and we mapped Bishop's array to see
101:00 - if square is actually dark and if the
101:02 - size of that set is equal to one It
101:05 - means that all of the Bishops are on
101:07 - same squares and now we need to see if
101:09 - Bishop's length is equal to pce length
101:11 - minus one because of King and if all of
101:14 - the Bishops are on same
101:16 - color and finally we are returning false
101:19 - if neither of these cases return to True
101:22 - finally we need to call insufficient
101:24 - material method in E game finished
101:30 - method update underscore game over
101:33 - message
101:35 - property and say draw do a insufficient
101:39 - material
101:41 - position and return
101:47 - through we are in jbo component TS file
101:50 - and here declare get for game over m
101:53 - message
102:09 - property and go to chessboard component
102:11 - TS file and now we want to display that
102:13 - message if game is
102:16 - over so if game over message is
102:19 - different than undefined we need to
102:22 - display this
102:26 - message and give
102:29 - class game over
102:34 - message go to chessboard component TS
102:37 - file and now I want to prevent selecting
102:38 - and placing piece once game is finished
102:42 - so here we are checking if game over
102:44 - message is different than undefined if
102:46 - it does we need to return from the
102:50 - function and by doing so we we cannot
102:53 - call placing piece
102:57 - method because we can't select square
103:00 - and set piece save squares and hence
103:03 - placing piece function will never be
103:05 - executed and same is for promote piece
103:08 - now go to chessboard TS file and in move
103:14 - function if is game over property is set
103:18 - to true I need to throw an error
103:23 - that says that game is
103:25 - over and we can't play
103:31 - Move let's play a couple of moves just
103:33 - to see if Checkmate detection is
103:36 - working and it does game over message is
103:40 - displayed and you can see that now I
103:42 - can't select black pieces because game
103:44 - is over now we are going to see that
103:47 - stalemate detection is also
103:50 - working stalemate game over message is
103:54 - displayed now let's check for
103:57 - insufficient material position detection
103:58 - and King versus King position is
104:00 - successfully detected insufficient
104:03 - material position for King and minor
104:05 - piece against King is detected
104:07 - insufficient material position detection
104:09 - is working in case that we have two
104:10 - knights against
104:13 - King and it is also working in case that
104:15 - we have multiples Bishop of same
104:19 - color and finally it is working in case
104:22 - that both sides have Bishops of same
104:24 - color before we start to implement fan
104:27 - converter class we need to Define
104:28 - private full number of moves property
104:31 - which is Sixth and last part of the fan
104:33 - string which is initially set to one and
104:36 - now scroll back to move
104:39 - function and after each
104:42 - move when white is on move we need to
104:44 - increment that
104:47 - counter so here we are checking if
104:49 - player color is white
104:54 - if it does then increment number of full
104:56 - moves by
104:58 - one now we are going to talk about fan
105:01 - notation which will help us in
105:03 - implementing method for detecting if
105:05 - same position is occured three times
105:06 - during the game and also we will use it
105:09 - when we want to receive move from
105:10 - stockish rest API to be able to play
105:12 - against computer so we're in Wikipedia
105:15 - page and for fan says that it is a
105:17 - standard notation for describing a
105:19 - particular board position of a chess
105:21 - game the purpose of fan is to provide
105:24 - all the necessary information to restart
105:25 - the game for particular position here we
105:28 - have fan string that consist of six
105:31 - parts separated via slash
105:34 - character so first part actually
105:37 - represents position of the board but
105:38 - starting from the reverse so we are
105:40 - first looking through black pieces and
105:42 - black pieces are represented in
105:44 - lowercase letters and if we have numbers
105:48 - it means that those numbers are
105:50 - represented empty squares like now we
105:53 - have firstly four empty squares then we
105:55 - have white pawn and another three empty
105:58 - squares and rows are separated via SL
106:02 - character second part of the fan string
106:04 - represents player on the move which can
106:06 - either be W or B for white and black
106:10 - pieces third part represents right for
106:12 - castling so K means that King has right
106:14 - to Castle King's side while Q means that
106:17 - King has right to Castle Queen side and
106:19 - uppercase letters are for white player
106:21 - and lower case are for black black
106:23 - player and if neither side have ability
106:26 - to Castle we need to return Dash fourth
106:29 - part is actually represent aasan Target
106:32 - Square so if there is no option to
106:35 - capture Pawn in aasan we return Dash and
106:38 - fifth part is actually represent half
106:40 - move clock which is the number of half
106:42 - moves since the last capture or Pawn
106:44 - Advan is made and finally last part
106:47 - represents full move number which is
106:49 - number of the full moves it starts at
106:51 - one and it is incremented after black
106:54 - move now create new file fan converter
107:00 - TS and declare fan converter
107:06 - class and now we are implementing method
107:09 - that converts current board position to
107:11 - Fan
107:14 - string that method takes couple of
107:16 - arguments first is
107:18 - board which is two dimensional Matrix of
107:21 - pieces or null
107:25 - also player
107:31 - color last move which is last move or
107:39 - undefined 50 move roll
107:47 - counter and finally number of full moves
107:56 - return type is
107:57 - string and here declar that fan string
108:00 - as an empty string that we need to
108:02 - return from the
108:03 - function now we need to look through the
108:05 - board and get first part of the fan
108:07 - string which represents position of the
108:09 - board and we are doing that from reverse
108:11 - because this is how fan is
108:15 - defined now declare fan row which
108:18 - represents row of board as fan string
108:22 - and initially set to empty string and
108:24 - also declare consecutive empty squares
108:27 - counter and set it to
108:31 - zero now we need to look through each
108:33 - square of the
108:38 - row if that square is empty we need to
108:41 - increment consecutive empty squares
108:44 - counter and
108:48 - continue but now if consecutive mty
108:51 - squares counter is different than
108:55 - zero in Fen row string append that value
108:58 - for consecutive mty squares
109:00 - counter by
109:04 - string and also we need to reset the
109:11 - counter and append piece fan character
109:14 - property to Fan
109:17 - row and now we also need to check if
109:19 - consecutive empty squares counter is
109:21 - different than zero which means that row
109:23 - ends with empty square and
109:29 - now also append consecutive empty Square
109:33 - counter as string to Fan row
109:37 - string and
109:39 - finally we need to update defend string
109:42 - so if I is equal to zero it means that
109:45 - it is last row fan rows are separated
109:48 - via slash character but that doesn't
109:50 - count for last row
109:57 - now we finished with first part of the
109:59 - fan string now Define player
110:02 - color so if player color is
110:06 - white then second part of the fence
110:08 - string will be W otherwise would be
110:15 - B now create private method castling
110:20 - availability that will tells us if white
110:23 - and black king have rights to Castle
110:26 - both King side and queen side so here we
110:28 - are passing
110:31 - board return type E
110:37 - string here declare casting
110:39 - possibilities
110:44 - function let's take scholar as argument
110:47 - and return string
110:53 - here declare castling
110:55 - availability as an empty string that we
110:58 - need to return in order for King to have
111:01 - ability to Castle it has moved property
111:03 - must be set to false so here firstly get
111:06 - King position X which depends on the
111:08 - color so if the color is white it is
111:11 - zero but if it's black it's
111:14 - seven and here get King from the
111:20 - board King is at King position X and for
111:26 - y4 now we need to check if King is
111:29 - actually instance of
111:32 - King and if hesm property is set to
111:42 - false now we need to get a rook position
111:46 - X which is same as king position X
111:59 - now declare King side
112:03 - Rook which is at Rook position
112:06 - X and seven for y and declare Queens
112:10 - side
112:11 - Rook which is at Rook position X and
112:14 - zero for
112:17 - y now we need to check if those Rooks
112:19 - are actually Rooks so firstly for King
112:21 - side Rook checking if it is instance of
112:24 - rook and if it has no property set to
112:30 - false if it does in Cas link
112:32 - availability append
112:39 - K also doing same for Queen side
112:45 - Rook upend lowercase
112:49 - q and finally if the color is white we
112:52 - need to present caselink availability in
113:08 - uppercase and finally we need to return
113:11 - casting
113:20 - availability Now call Cas possibilities
113:23 - function for both black and white
113:39 - king now we need to check if castling
113:42 - availability is actually empty string
113:44 - which means that neither side have right
113:46 - to Castle if it does we need to return
113:48 - Dash otherwise we are returning castling
113:50 - availability
113:52 - and as we declared casting availability
113:54 - method now we need to do same for
113:57 - ampasant possibilities so here declare
114:00 - private impossibility that takes last
114:02 - move as argument which is type of last
114:04 - move or
114:07 - undefined and also takes
114:11 - color which is color of the current
114:13 - player and return
114:15 - string so first we need to check if last
114:18 - move is undefined if it does return
114:20 - Dash otherwise we need to the structure
114:23 - properties from last
114:36 - move now we're checking if last move
114:38 - involved moving upon two squares so
114:40 - firstly check if p is instance of Pawn
114:43 - and if absolute difference between new X
114:46 - and previous X is exactly two which
114:48 - means that there is possibility to
114:50 - capture that pawn in unass
114:53 - some firstly declare a row of that
114:56 - Target
114:57 - Square which depends on the color so if
115:00 - the color is white it is six if it's
115:03 - black it's three and now we need to
115:05 - return that Target
115:09 - Square so first we need to Define
115:11 - columns in models. TS
115:16 - file which represents Columns of the
115:19 - board from a to H
115:23 - and here we need to return exactly
115:25 - coordinates of that square as
115:28 - strings so we are returning Columns of
115:30 - previous y plus string of
115:38 - row if that square doesn't exist return
115:41 - Dash and now we need to call casting
115:44 - possibilities and aasan possibility
115:46 - function in convert board to Fan so
115:50 - firstly a p to fend player which is
115:52 - second part of the fan
115:54 - string and fan parts are separated via
115:57 - space
115:58 - character so third part is actually
116:01 - casting availability
116:09 - string fourth part represents ampasant
116:12 - options
116:24 - fifth part represents 50 rule move
116:28 - counter multiplied by
116:32 - two and last part is actually number of
116:35 - full
116:41 - moves we are going to implement a method
116:44 - that detects if same position is occured
116:46 - three times during the game for the sake
116:48 - of that declare private property three
116:52 - fold repetition
116:59 - dictionary which is map that for each
117:02 - key have string and for Value has
117:07 - number and also declare private
117:10 - threefold repetition flag
117:12 - property which is initially set to
117:18 - false after each move we need to update
117:21 - threefold repetition dictionary for the
117:23 - sake of that Implement private update
117:24 - threefold repetition dictionary method
117:27 - that takes one argument and it is fan
117:29 - string and return type is
117:34 - void here declare threefold repetition
117:38 - fan key which represents first four
117:41 - parts of the fan
117:44 - string because if they are same it means
117:46 - that position is repeated
117:54 - and now we need to see if that key
117:56 - actually is in
118:11 - map now we are checking if threefold
118:14 - repetition value is
118:15 - undefined if it does we need to update
118:19 - threefold repetition dictionary map and
118:22 - for threefold repetition key set value
118:25 - of
118:28 - one and now if that key is present in
118:31 - map we are checking if this value is
118:34 - equal to two which means that now we are
118:37 - repeated position three times and set
118:40 - threefold repetition flag to true and we
118:42 - are returning from the function
118:44 - otherwise we need to set value for
118:47 - threefold repetition key to two
118:52 - now go to is game finished
118:55 - method and here we need to check if
118:58 - three-fold repetition flag is set to
119:00 - true if it does we need to update
119:02 - underscore game over message property
119:05 - and return
119:08 - true so set draw do three-fold
119:16 - repetition and return true we need to
119:18 - have some property that holds board
119:21 - position as f string for the sake of
119:23 - that declare privatecore board as fan
119:27 - property which is string and here I
119:31 - pasted F string for the start position
119:34 - of the
119:35 - game now instantiate private property
119:38 - fan
119:50 - converter we now need to implement
119:53 - getter for underscore Board San
120:07 - property now scroll down to move
120:09 - function where we need to update uncore
120:12 - board sent property after each
120:15 - move so here we are in move
120:19 - function cut this line and paste it at
120:22 - the end of the
120:26 - function and finally update uncore board
120:29 - s Spen
120:30 - property by calling convert board to Fan
120:33 - method of fan converter class and here
120:36 - pass chess board as first argument then
120:40 - player color then last
120:46 - move also 50 move rule counter and
120:49 - number of full moves and finally after
120:52 - we updated underscore board Spen
120:55 - property we need to call update refold
120:57 - repetition dictionary and pass
121:00 - underscore board s Spen as argument now
121:03 - we are going to repeat same position
121:05 - three times just to see if our method is
121:07 - working
121:13 - well and if we can see it does draw do
121:16 - three fold repetition rule message is
121:18 - displayed we are in chbo component TS
121:21 - file and now we are going to implement a
121:23 - method that will rotate the board so
121:25 - firstly declare public flip mode Boolean
121:28 - which is initially set to false and now
121:30 - Implement Flipboard method that takes no
121:32 - arguments and return type is void and it
121:36 - simply inverts the flip mode
121:43 - property now go to chessboard component
121:45 - HTML
121:48 - file Place Pawn promotion dialogue
121:51 - outside of the PR board
121:56 - div here declare
121:59 - button that flips the board and append
122:03 - click
122:05 - event and for function set flip
122:09 - board and now we are going to append
122:12 - rotate CSS class in case that flip mode
122:15 - is set to
122:20 - true we need to do that for div
122:26 - chessboard and also for each
122:33 - piece now in chessboard component CSS
122:37 - class firstly set width and height for
122:41 - chessboard
122:46 - class and also declare rotated class
122:49 - that simply rotate the board for
122:53 - 180° now we can see that Flipboard
122:55 - function is working I can successfully
122:58 - rotate the
122:59 - board open
123:01 - Terminal and generate computer mode
123:06 - component in modules folder and Skip
123:13 - test now generate stockfish
123:17 - service in computer mode folder
123:25 - and also skip
123:28 - tests now go to app module TS file and
123:32 - here import HTTP client
123:38 - module from angular common http
123:54 - now go in computer mode and in stock
123:57 - with service TS file inject HTTP through
124:08 - Constructor now let's take a look at
124:10 - stockish rest API website that we are
124:12 - going to use in order to be able to
124:14 - create mod toplay against computer
124:16 - firstly I need to say that while I was
124:17 - recording this tutorial version of this
124:19 - API has changed and now you don't need
124:22 - to create multiple requests to get best
124:24 - move evaluation and top Engine line
124:27 - initially in the video I used all API
124:29 - but later you can find part where I make
124:31 - certain changes and application is now
124:33 - compatible with the new version of API
124:36 - now if I click on send get request I
124:38 - receive response from the stockish and
124:40 - in docs we can get more information
124:42 - about that so here is the end point for
124:44 - this API method is get we need to send
124:47 - two parameters to that method first is
124:50 - Fen string that we want to anal second
124:52 - is depth for engine to go which is
124:54 - integer below
124:56 - 16 for Success we can either have true
124:59 - or false and if value is true we receive
125:03 - object that is look like this so first
125:06 - we have evaluation which is number that
125:08 - is evaluation of the current position
125:10 - that we get from
125:12 - stockfish mate is null unless there is
125:15 - force Checkmate in the given position
125:17 - best move is in this format where first
125:19 - part is best move string then we have
125:22 - space character second part is computer
125:24 - move where first two letters represent
125:26 - starting coordinates of that move and
125:29 - coordinates of that move and that second
125:32 - part can sometimes have five letters
125:35 - where last letter represents piece in
125:37 - which computer wants to promote his
125:39 - phone and finally we have top Engine
125:42 - line now create private readon property
125:45 - for API endpoint and here I pasted
125:49 - version of the old API
125:57 - then in computer mode folder create
125:59 - models. TS
126:01 - file and here I'm going to declare type
126:05 - for stockfish query
126:08 - params which is object that has fan as
126:12 - property which is type of
126:14 - string depth which is
126:17 - number and third parameter which is mode
126:20 - but later we will see that we don't need
126:22 - to have that mode property now go to
126:25 - stock with service TS file and we are
126:28 - going to implement method to get best
126:30 - move from the
126:33 - computer that method takes fan string as
126:37 - argument return type is observable of
126:40 - chess move which is custom type that we
126:42 - are going to Define
126:47 - now so now go in models. TS file and
126:51 - here declare that chess move
126:56 - type which is object that has previous X
127:00 - property which is number previous
127:03 - y as well as new X and New
127:08 - Y and also promoted
127:12 - piece which can be fan character or
127:17 - null now go back to stock P service and
127:20 - now import both chest move and
127:28 - observable here declare query param
127:34 - object that we are going to send with
127:37 - get
127:39 - request so pass fan for dep say
127:44 - 13 and for mode set best move because
127:48 - this is old API
127:57 - create HTTP params
128:00 - object and append query params to
128:12 - that now go to Model Ts file and here
128:16 - declare one more
128:18 - type which is stockish response
128:21 - that is
128:24 - object that has success of type bullion
128:27 - as property as well as data which is of
128:35 - string now we are sending get HTTP
128:50 - request now import switch map
128:54 - operator and we want to create new
128:57 - observable from that
129:01 - response now declare best move that we
129:04 - will get from response
129:08 - data but we need to split that via space
129:11 - character and to get second part of that
129:14 - and best move is type of string in
129:16 - format B6 B7 and we need to convert that
129:20 - string into chest
129:23 - type that's the reason why we are
129:25 - implementing now private move from
129:27 - stockish string
129:30 - method that takes one argument move of
129:33 - type string and returns chess
129:38 - move but because this response is in
129:41 - format B6 B7 we need to have another
129:44 - function that will convert that letter
129:47 - to y coordinate
129:57 - now we are implementing that method
130:00 - takes one argument of type
130:05 - string returns
130:10 - number and we need to subtract chart
130:13 - code of that
130:15 - string with Char code of lowercase a
130:33 - declare previous X previous X is
130:35 - actually number of second character in
130:38 - move
130:41 - string minus
130:43 - one here declare New
130:48 - Y and we also need to call conver column
130:51 - lad to y coordinate for thre
130:54 - ladder declare new
131:03 - X and finally if you remember best move
131:06 - from stock which can sometimes have five
131:08 - letters and that fifth letter represents
131:11 - promoted piece so we need to handle that
131:12 - situation as well that's the reason why
131:14 - we are implementing promote piece method
131:16 - that takes piece as argument of type
131:18 - string or undefined and returns than or
131:21 - null so if piece is undefined we are
131:24 - returning null but if piece is equal to
131:27 - lowercase n we need to return fan
131:30 - character Black Knight now we are
131:33 - assuming that computer plays with black
131:35 - pieces but later we are going to change
131:37 - that so if piece is B we need to return
131:41 - fan character black
131:47 - Bishop if piece is equal to R
131:53 - return fan character black
131:57 - rook and finally return fan character
132:00 - black
132:07 - queen now
132:09 - declare promoted
132:11 - piece and call promoted piece
132:14 - method for last letter of the stockish
132:18 - string
132:21 - and return chest move
132:29 - type now after we finished with move
132:31 - from stock with string we need to call
132:33 - that function in get best move so here
132:36 - we are returning new
132:38 - observable of result of the move from
132:41 - stock with string
132:44 - function now open computer mode
132:47 - component TS file and here computer mode
132:49 - component class extend chessboard
132:52 - component
132:54 - class and also for HTML template set
132:58 - HTML template of chessboard
133:05 - component and also use CSS from
133:07 - chessboard
133:18 - component and also we can delete just
133:21 - mode component CSS and HTML
133:26 - files now open Terminal and they want to
133:29 - install angular
133:38 - material choose custom
133:43 - team we don't want to use typography
133:46 - Styles and also don't include
133:50 - animations now generate now menu
133:58 - component and Skip
134:03 - tests now we are going to implement
134:08 - routing in app folder create a routes
134:13 - folder and in routes folder create up
134:17 - routing module TS file
134:39 - for now declare empty arrays of imports
134:41 - and exports then declare up routing
134:45 - module class
134:51 - and now declare
134:54 - routes we will have two routes first is
134:57 - to play against friend and second is to
134:59 - play against
135:11 - computer also adds title
135:37 - and now in Imports add router module for
135:41 - root
135:47 - route in exports add router module
135:54 - and here open up module TS
135:58 - file and in import include up routing
136:01 - module
136:07 - class now go to nav menu
136:11 - component open nav menu component TS
136:16 - file and here mark it as Standalone
136:20 - component
136:22 - and
136:24 - import mod toolbar
136:29 - module as well as bottle
136:39 - module now we need to import mod toolbar
136:42 - module and M bottle module from angular
136:44 - material
137:11 - Now open up module TS file and here we
137:14 - need to correct error because now menu
137:16 - component is now Standalone component
137:18 - and it to be included in Imports array
137:20 - and now go to nav menu component HTML
137:23 - file where we are going to declare basic
137:26 - HTML for nav menu
137:31 - component we will have two
137:37 - buttons and add router link to against
137:41 - friend
137:48 - mode and also add another but to play
137:51 - against
137:59 - computer also add router
138:06 - outlet and then in N menu component DS
138:09 - file we need to import router
138:15 - module and finally go to up component
138:18 - HTML file and remove up board component
138:22 - and append up nav menu
138:25 - component this is how our application
138:28 - looks now so we have now menu component
138:30 - and two buttons for play against front
138:33 - and play against computer but for now
138:35 - play against computer component is same
138:37 - as play against friend component and now
138:39 - we are going to work on that now go to
138:41 - computer mode component TS file and here
138:44 - we want to inject stockfish service
138:46 - through Constructor
138:54 - also we need to call Super
139:05 - Constructor now Implement NG on it
139:24 - now we are going to subscribe to
139:26 - chessboard State behavioral subject from
139:28 - chessboard service because after each
139:31 - move is played we want to see if
139:33 - computer is on move and then to call get
139:36 - best move method from stockfish
139:40 - service but first open chessboard
139:42 - component TS file and Mark chessboard
139:44 - Service as protected
139:59 - we receive fan as
140:03 - response and now we need to check which
140:05 - player is currently on move this is
140:08 - second part of the fan
140:11 - string now if player is white we need to
140:14 - return from the function because we
140:16 - initially said that computer is always
140:18 - playing with black pieces
140:21 - and now we are going to call method to
140:24 - receive best move from stockfish
140:30 - string pass F to get best move
140:35 - function and this type is observable of
140:38 - chess move so now we need to convert
140:41 - that observable to promise using first
140:43 - value from rxjs
140:48 - operator and also Mark that function as
140:51 - a
141:01 - sync now we are going to destructure
141:03 - stockfish
141:16 - move before we call update board method
141:19 - in computer mode component we need to
141:20 - mark it as
141:28 - protected and then we are going to call
141:30 - update board
141:32 - method and pass previous X previous y
141:35 - new X New Y and promoted
141:40 - piece then declare private subscriptions
141:43 - property that is going to hold all of
141:46 - the subscriptions that we declared in NG
141:48 - onit method
141:55 - add Jabo State subscription to
142:10 - subscriptions now Implement on destroy
142:13 - life cycle
142:18 - hook and in Ng on this dry method we are
142:22 - going to unsubscribe from those
142:30 - subscriptions we are in computer mode
142:33 - component and after I play Move I
142:35 - receive move back from computer and now
142:38 - as you can see everything works
142:42 - fine now open Terminal and generate play
142:46 - against computer dialogue which is
142:49 - component that will all allows us to
142:51 - choose to play with black or white
142:52 - pieces against computer and also skip
142:58 - tests now go to play against computer
143:00 - dialog
143:04 - component Mark component as
143:11 - Standalone and here import mat dialogue
143:15 - module mat button module and common
143:19 - module
143:37 - then declare public property stockfish
143:39 - levels that represents different levels
143:41 - of stockfish strength
143:57 - also declare current stock which level
143:59 - that we
144:01 - choose which is initially set to
144:09 - one now we are going to implement HTML
144:12 - for play against computer dialog
144:14 - component
144:21 - now declare title for
144:29 - dialogue then we need to display
144:31 - stockish levels from which we can choose
144:33 - to
144:45 - play now we are looking through all
144:48 - stockish levels
145:05 - add class strength
145:13 - de also add button that is going to
145:17 - close the dialogue
145:23 - now go to app module and play against
145:25 - computer dialog component is Standalone
145:27 - so include it in Imports array open play
145:30 - against computer dialog component CSS
145:32 - file and here I pasted code for CSS that
145:34 - you can find on GitHub repository then
145:37 - open play against computer component
145:38 - HTML file and here I'm going to create
145:41 - two images for black and white king so
145:43 - when I click on one of those image I can
145:46 - choose color for my pieces
146:09 - also set dragable attribute to
146:19 - false well to nav menu component DS
146:22 - file and here we are going to implement
146:25 - a method that will open the dialogue
146:28 - once we clicked on play against computer
146:30 - mode button so here import M dialog
146:44 - module then go to now menu component
146:47 - HTML file remove router link
146:51 - and here add click
146:54 - event and add play against computer
146:58 - function that takes no
147:03 - arguments now we are going to implement
147:06 - that
147:11 - method return type is
147:19 - void when need to inject dialogue
147:21 - through
147:30 - Constructor and open the dialogue in
147:33 - play against computer
147:42 - method correct typing mistake for CSS
147:46 - class dialog component is working well
147:49 - but now we need to create functions to
147:50 - choose level of stockfish and also to
147:52 - choose player
147:56 - color now declare click event for
147:58 - stockfish
148:01 - levels select stockfish level method
148:04 - takes level as
148:08 - argument now we are going to implement
148:10 - that method
148:21 - return type is
148:23 - void and here update stockfish level
148:29 - property now go back to HTML file and
148:33 - here we are going to add CSS class that
148:35 - will signalizes if that level is
148:38 - selected so app selected CSS
148:41 - class if level is same as stockish level
148:50 - then declare click event for both
148:54 - Kings we're going to have play function
148:57 - that takes one argument which is either
149:00 - W or
149:05 - B now let's Implement that method
149:20 - return type is
149:23 - void and here we need to go to Model Ts
149:27 - file in computer mode component and
149:29 - declare a new type which is computer
149:32 - configuration which is object that holds
149:35 - two
149:38 - properties and first is
149:40 - color of type color and also level of
149:45 - stockish which is type of number
149:51 - but now we also need to map that levels
149:53 - to stockfish depth for the sake of
149:59 - that we declare constant stockfish level
150:02 - which is read only
150:11 - object and here just map levels to
150:14 - stockfish depth
150:24 - go to stock with service TS file and
150:27 - here declare public behavioral subject
150:29 - property that is of type computer
150:44 - configuration and for initial value set
150:46 - the color is black
150:50 - and for level set
150:56 - one now open play against computer
150:58 - dialog component TS
151:00 - file we need to inject stock with
151:03 - service through Constructor
151:20 - also we need to inject dialog
151:26 - component and now when we click play
151:28 - function we need to close all
151:35 - dialogues computer configuration
151:37 - behavioral subject needs to emit new
151:39 - value once we click play
151:44 - function here we are setting value for
151:46 - color
151:50 - here I have wrongly typed color white
151:53 - but should be color black if we choose
151:55 - to play with white pieces that mistake
151:58 - will be corrected
152:00 - later and for level set stockfish
152:11 - level also we are injecting
152:17 - router so once we click on play function
152:20 - we should navigate that to computer mode
152:38 - component and also create click event to
152:42 - close the
152:44 - dialogue theog is closed by
152:48 - default but we are going to navigate to
152:51 - play against friend component if we
152:53 - choose to not play against computer then
152:55 - Implement close dialogue method this
152:58 - takes no arguments and return type is
153:00 - void and we simply need to navigate to
153:03 - play against friend
153:07 - component then go to computer mode
153:09 - component TS file and here we are
153:11 - hardcoded that computer is always
153:13 - playing with black pieces now we are
153:15 - going to change that
153:30 - and now we are checking if player is
153:33 - different than computer configuration
153:35 - value for color if it does we need to
153:37 - return from the function because this is
153:39 - not computer
153:41 - move if we choose to play against
153:43 - computer with the black pieces I want to
153:45 - rotate the board so black pieces would
153:47 - be closer to us here the declare
153:50 - computer configuration
153:53 - subscription and they want to subscribe
153:56 - to computer configuration behavioral
154:16 - subject and now we need to check if
154:18 - computer configuration value for color
154:21 - is white if it does we need to call
154:23 - Flipboard
154:29 - method also we are going to append that
154:31 - computer configuration subscription to
154:34 - subscriptions
154:39 - property then go to stockish service TS
154:42 - file and here in get best move method
154:45 - you see that we hardcoded 13 but rather
154:48 - we are going to pass value from computer
154:51 - configuration behavioral subject for
154:58 - level now go to chessboard component TS
155:05 - file and Mark private tboard property as
155:10 - protected then go back to computer mode
155:12 - component TS file and here we need to
155:15 - check if game is actually over so if
155:17 - game is over we need to unsubscribe from
155:20 - chessboard State
155:23 - subscription and also to return because
155:26 - we don't want to generate computer move
155:28 - once game is
155:46 - finished then go to play against
155:49 - computer dialog component and fixed bug
155:51 - that we said earlier for computer
155:58 - color finally go to stockfish service TS
156:01 - file where we need to handle last bug
156:03 - you can see that private promote piece
156:05 - method is only handling situations when
156:07 - computer is playing with black pieces
156:10 - that's the reason we have now computer
156:12 - call variable that we get from computer
156:15 - configuration behavioral subject
156:21 - and now we need to check if computer
156:24 - color is white and then to return fan
156:26 - character white piece otherwise we are
156:28 - returning fan character black piece now
156:31 - we need to correct that for each Knight
156:33 - Bishop Rook or queen
156:46 - promotion now do same for Rook
156:55 - and finally for
157:04 - Queen now we fixed
157:09 - method we are going to make certain
157:11 - changes in order to make application
157:13 - compatible with new API firstly change
157:15 - API end point then remove mode property
157:18 - from stockish params object and also
157:21 - remove data from stockish
157:24 - response and instead of data we will
157:27 - have evaluation property which is type
157:29 - of number or null mate which is also
157:31 - number or null best move of type string
157:33 - continuation of type
157:35 - string then in stock with service TS
157:38 - remove
157:39 - mode and here we need to access response
157:43 - best move
157:45 - property and finally go to play against
157:48 - computer dialog component is file and
157:50 - here instead of passing stockfish level
157:52 - we need to pass stockfish levels which
157:55 - is map and access here stockfish
158:00 - level we can see that our application
158:03 - works well I can select different level
158:05 - for stock strength and also for color
158:07 - board is rotated automatically if I
158:09 - choose black pieces now open models. TS
158:13 - file in ch logic folder and here declare
158:16 - enumeration for different move types
158:23 - we have capture cast
158:25 - Link
158:27 - promotion check checkmate and basic
158:34 - move and append new property in last
158:37 - move object which is move type of type
158:41 - set of move type
158:44 - enumeration then open chessboard TS file
158:46 - scroll down to move function
158:50 - and you will see an error because last
158:52 - move now has one additional property
158:54 - which is move type so we are going to
158:57 - declare move type as an empty set of
158:59 - move type
159:06 - enumeration and now if piece is taken it
159:09 - means that capture is happening so
159:11 - append capture to move type set
159:22 - also add move type for last move
159:29 - object and here if promoted piece type
159:32 - is different than null it means that
159:33 - promotion is happening so also upend
159:35 - promotion in move
159:40 - type and also we need to pass move type
159:44 - as handling special moves argument go to
159:48 - handling special moves function
159:56 - and here if castling is happening at
160:05 - castling and also if aasan is happening
160:08 - add
160:15 - capturing again go to move function and
160:18 - here we need to check if if Checkmate or
160:20 - check is
160:23 - happening so if is in check property of
160:26 - check State object is set to
160:29 - true and if player doesn't have any save
160:33 - squares it means that is a
160:36 - Checkmate otherwise it is a check
160:39 - position
160:50 - and also if move type sa doesn't have
160:53 - any elements we need to append basic
161:07 - move now go to Model Ts file where we
161:09 - are going to declare type that is
161:11 - responsible to hold list of previous
161:13 - moves move list type is array of tles
161:17 - and first element of tle is string and
161:19 - and second is optional
161:21 - string now declare game history type
161:24 - which is array of objects and that
161:27 - object has last move property which is
161:29 - type last move or
161:33 - undefined as well as check state
161:35 - property of type check
161:39 - State and board which is two dimensional
161:42 - Matrix of f character or null elements
161:51 - then go to chessboard TS
161:54 - file here declare properties for those
161:57 - type so firstly declare privatecore move
161:59 - list which is of type move
162:03 - list and initial value is Mt
162:06 - array declare underscore game history
162:09 - property of type game
162:13 - history and we are going to assign value
162:16 - to that in Constructor
162:40 - now let's Implement gets for both last
162:42 - move and game history properties
163:09 - now we are going to implement a method
163:11 - that is responsible for storing move so
163:13 - here Implement private store move method
163:17 - that takes no arguments and return type
163:19 - is void now the structure properties
163:21 - from last move
163:34 - object declare piece name so in case
163:37 - that piece is Pawn piece name is empty
163:40 - string otherwise it's piece fan
163:42 - character property
163:51 - now declare move which is initially
163:54 - empty
163:55 - string and here we need to check if move
163:59 - type from last move object contains
164:02 - castling which signalizes that castling
164:04 - is
164:10 - happening if it does we need to check if
164:13 - it is actually King side or queen side
164:15 - castling in case that current Y is
164:18 - bigger than previous y it means that
164:19 - this is kingside
164:23 - castling and this is notation for
164:26 - kingside
164:28 - castling and for Queen side
164:32 - castling otherwise for move out piece
164:35 - name and also include initial
164:38 - coordinates of the piece so this is long
164:40 - notation later we will make certain
164:42 - changes and make it
164:47 - shorter or also we need to check if
164:50 - capture has
164:54 - happened if it does append X signed to
165:00 - move also include end
165:13 - coordinates we need to check if
165:16 - promotion is happening so upend promot
165:18 - Ed piece which is type fan character or
165:21 - null as stor Mo function
165:25 - argument and here if promoted piece is
165:28 - different than null append equal sign
165:32 - plus promoted
165:33 - piece to
165:36 - uppercase finally we need to check if
165:38 - check or Checkmate has happened so here
165:41 - we are checking if check is
165:44 - happened if it does append plus sign to
165:48 - move stre
165:50 - and if Checkmate has happened aen hash
165:54 - symbol to
166:01 - move now we need to store that move in
166:04 - move list
166:17 - property so here we are pending move for
166:21 - right and now for
166:31 - black then we are going to implement a
166:34 - method to update game
166:38 - history takes no arguments and return
166:40 - type is void now we need to update
166:42 - underscore game history
166:47 - property so for both board we are
166:49 - creating deep copy of chessboard view
166:59 - property now we need to create deep copy
167:02 - of check State
167:07 - object and same for last
167:11 - move but first we need to check if last
167:13 - move is undefined
167:24 - then go to move
167:31 - function and here we need to call stor
167:34 - move method and update game history
167:37 - method
167:49 - now open Terminal and generate move list
167:52 - component in modules
167:56 - folder and also skip
168:00 - tests go to move list component TS
168:06 - file Mark component as
168:16 - Standalone and now import common mode
168:20 - module mat button
168:25 - module and mat icon
168:47 - module go to move component HTML
168:51 - file and I'm going to paste basic HTML
168:54 - for navigating between moves so we're
168:56 - having navigate to First move to move
168:59 - before to move next and to last
169:03 - move also we need to correct error
169:06 - because move list is Standalone
169:08 - component and needs to be included in
169:10 - Imports array go back to move list
169:12 - component TS file and here declare input
169:15 - property move list which is the required
169:17 - property
169:28 - then open mov this component HTML
169:31 - file and here we going to render those
169:35 - moves from move
169:36 - list so create div and add class move
169:43 - list now we need to Loop through each
169:46 - move of move list
169:50 - Al declare move number which is
169:54 - index and aend class of
170:06 - Row first append white move and then we
170:10 - should check if black has
170:14 - play if it does we also need to append
170:18 - black
170:20 - move and we give class move for that
170:27 - div and also I'm going to paste CSS
170:30 - which you can find on GitHub
170:33 - repository then open transboard
170:35 - component TS
170:40 - file and here declare getter for move
170:42 - list
170:54 - now open tboard component HTML
170:57 - file and here we want to upend move list
171:03 - component and also pass move list
171:08 - property play couple of moves just to
171:10 - see how our move list component looks so
171:13 - far
171:18 - so this is long notation later we will
171:20 - change it to short notation but also we
171:23 - need to implement functions so each time
171:25 - I click on move in M list component it
171:27 - should render me that position and also
171:29 - to navigate using
171:33 - arrows in chbar component TS file
171:37 - declare getter for game
171:46 - history and declare public property game
171:49 - history
171:50 - pointer which represents move that we
171:53 - are currently on in move list component
171:56 - and initially set to
171:58 - zero so scroll down to update board
172:01 - method and each time we call move
172:04 - function we need to increment that game
172:07 - history
172:11 - pointer now go to Mo list component TS
172:14 - file and add another input required
172:18 - property
172:24 - which is game history
172:28 - pointer and initially should be set to
172:30 - zero here I have wrongly set it to one
172:32 - but we'll correct
172:35 - that then go to chbar component HTML
172:38 - file and add input binding to game
172:42 - history pointer
172:52 - then go to move this component HTML
172:55 - file and here also add move
173:03 - number which is move number +
173:12 - one and also we need to check which move
173:15 - we are currently on and to add class
173:19 - current
173:23 - move so here we are checking if move
173:26 - number * 2 + 1 is equal to game history
173:33 - pointer and for black pieces we are
173:36 - checking if move number time 2 + 2 is
173:39 - equal to game history pointer now we
173:41 - successfully added current move class
173:49 - go to move this component TS file and
173:51 - declare one more input property which is
173:54 - also
173:57 - required and it is game history
174:02 - length which is length of game history
174:05 - property of chessboard
174:08 - class and has initial value of one and
174:12 - now we need to make binding for those
174:16 - property so go to chessboard comp
174:18 - component HTML
174:22 - file and add input binding for game
174:25 - history length and say that this is game
174:28 - history
174:33 - length we are going to disable
174:35 - navigation buttons in move this
174:37 - component so disable navigating to
174:39 - initial game position if game history
174:41 - pointer is equal to
174:43 - zero also disable navigating to move
174:46 - before if game history pointer is equal
174:49 - to
174:49 - zero disable navigating to next move if
174:52 - game history pointer is same as game
174:55 - history length minus
174:57 - one and do the same for navigating to
175:00 - last
175:03 - move finally we need to declare output
175:05 - property which is event emitter that
175:07 - will emit new value after we click on
175:09 - certain move in move list component and
175:12 - that emitter will trigger function in
175:14 - chessboard component that will show us
175:16 - position of the board when that move has
175:18 - has been played so here we declared show
175:20 - previous position event output property
175:23 - which is event emitter of type
175:26 - number and here declare Show preview
175:29 - position
175:32 - method that takes move index as argument
175:35 - of type number return type is void and
175:38 - it simply emit new value for show
175:41 - previous position event amiter
175:48 - and now in move list component HTML file
175:51 - we need to call show previous position
175:52 - method for each of the navigation
175:54 - buttons and for both black and white
175:55 - moves in move list so firstly declare
175:58 - click event for navigating to zero
176:02 - move also to navigating to move before
176:05 - and pass for argument game history
176:07 - pointer minus
176:09 - one to navigate to next
176:12 - move add click event to navigate to game
176:15 - history pointer plus one
176:19 - and to navigate to last
176:21 - move call show previous position method
176:24 - for game history length minus
176:29 - one and now also call it for both black
176:32 - and white moves in move
176:35 - list call show previous
176:38 - position for move number time 2 + 1 if
176:42 - the move is white
176:49 - and call show previous position for move
176:51 - number * 2 + 2 for black
176:54 - move then go to chessboard component TS
176:57 - file and here declare show previous
176:59 - position
177:03 - method this Stakes move index as
177:06 - argument of type number and return type
177:08 - is void and here we need to update check
177:11 - state board and last move property and
177:15 - first we need to destructure them from
177:17 - game history at move
177:21 - index and now update chessboard
177:27 - view check
177:31 - State and also last
177:36 - move and finally update game history
177:45 - pointer and finally add output binding
177:48 - to up move this
177:58 - component now let's see how Mo list
178:00 - component looks now initially every
178:02 - navigation button is
178:04 - disabled and after playing couple of
178:06 - moves you can notice that buttons that
178:08 - navigates to next move and to the last
178:10 - move are
178:16 - disabled and also if I click on certain
178:19 - move in move list Position will be
178:21 - displayed when that move has been played
178:23 - and this is same for navigation buttons
178:25 - now we are going to implement a method
178:27 - that will convert long chest notation in
178:29 - short notation first we need to remove
178:30 - coordinates of initial
178:38 - Square then here Implement private
178:41 - starting piece courts
178:45 - notation which takes no arguments and
178:48 - turn
178:50 - string firstly we need to destructure
178:52 - properties of last move
179:08 - object then we need to check if current
179:11 - piece is instance of Pawn or
179:15 - King if it does we need to return empty
179:17 - string
179:25 - because we have only have one king and
179:27 - for Pawn we are handling that situation
179:29 - later and now we need to have array of
179:31 - coordinates that represents all pieces
179:33 - of the same type that have same Target
179:35 - Square as piece that just made the
179:38 - move so here for X add previous X and
179:41 - for Y at previous
179:44 - y now we need to look through the board
179:46 - and see which piece of same type has
179:49 - exactly same Target Square as initial
180:06 - piece declare piece on that square which
180:09 - is either piece or null
180:20 - and now if piece is null or X and Y are
180:25 - same as current X and current y this
180:28 - means that this is the same piece and we
180:30 - need to
180:38 - continue and now if piece actually has
180:41 - same F character as current piece we
180:43 - need to check if that piece had same
180:45 - Target Square now let's get save squ for
180:48 - that piece from underscore save squares
181:03 - property now we need to look through
181:05 - that save squares and see if that save
181:07 - squares contains coordinate that has X
181:10 - which is equal to current X and Y which
181:12 - is equal to current y
181:33 - and if it does we need to append those
181:36 - coordinates in same pieces qut
181:55 - if same pieces cords array has length of
181:57 - one it means that there are no pieces of
181:59 - same type that had same Target Square as
182:02 - piece that made the move hence we need
182:04 - to return empty string and now declare
182:06 - two more sets and those sets are
182:09 - important because from them we can
182:11 - conclude how many same type pieces that
182:13 - had same Target Square shares both X and
182:16 - Y coordinates so firstly we declared
182:18 - pieces file
182:21 - set that represents pieces that shares
182:25 - y-coordinate going to do same for x
182:27 - coordinate pieces rank
182:40 - set and now we need to check if pieces
182:43 - file size is same as same piece cords
182:47 - length
182:53 - if it does it means that all of the
182:55 - pieces are on different files hence we
182:59 - are returning columns at previous y
183:02 - index also I'm going to leave comment
183:05 - for that
183:14 - case now we need to do the same for
183:17 - pieces r
183:19 - so if pieces rank size is same as same
183:22 - pieces quarts length it means that all
183:24 - of the pieces are on different ranks for
183:27 - example 1 2 3 and so on hence we need to
183:31 - return string from previous x +
183:40 - one also I'm leaving comment for this
183:42 - one
183:53 - and finally if none of these if
183:55 - statements returns to true we need to
183:57 - specify both column and
184:06 - rank also I'm leaving comment for this
184:09 - case
184:17 - so that's the situation where multiple
184:20 - piece shares both Rank and a
184:31 - file now go to store move
184:34 - function and here call starting piece
184:37 - qus notation
184:41 - method also here when we are checking
184:43 - for capturing we need to see if Pawn is
184:46 - pieced at last move
184:48 - because if it does we need to include
184:50 - its previous
185:07 - column that's because in starting piece
185:10 - course notation method if current piece
185:12 - is Pawn we returned empty
185:15 - string and now as you may all already
185:17 - noticed there is a bug in this approach
185:19 - because in starting piece cord notation
185:21 - method when we get save squares for
185:23 - piece we use it save squares after
185:25 - they've been calculated for next player
185:27 - in move
185:31 - function as you can see right here so we
185:35 - called store move function after save
185:37 - squares are being calculated so we need
185:38 - to store save squares in some variable
185:41 - and update uncore save squares property
185:44 - after we called store move function
186:10 - and also in stor move
186:12 - function piece name f character should
186:15 - be uppercase
186:20 - now we are going to see if short
186:21 - notation method is
186:23 - working play couple of
186:30 - moves and now we will get in position
186:33 - where both B and F Knights can go to
186:36 - same square and we specified that this
186:39 - is B Knight so method is working we are
186:42 - in Wikipedia page that talks about chest
186:44 - notation and they provide some example
186:46 - where multiple pieces share either
186:48 - column rank or both and we are going to
186:50 - replicate that
186:52 - position so in our chess application we
186:54 - are playing same moves as they were
186:57 - playing and everything works for Queen
187:00 - We need to specify both initial column
187:02 - and the rank because multiple Queens
187:04 - share both Rank and a file now we are
187:07 - going to emit a sound after each move is
187:09 - played so we have sound folder that
187:11 - represents different sounds of each move
187:13 - type in assets folder and now open
187:16 - chessboard component TS file where we
187:18 - are going to implement a method that
187:20 - will emit new sound after each move here
187:24 - Implement private move sound
187:29 - method and declare basic audio
187:33 - element and for each Source set source
187:38 - of basic
187:45 - move that private method should take one
187:48 - argument and this is move type which is
187:51 - set of move type
187:56 - enumeration now we are checking if move
187:59 - type set contains
188:06 - promotion if it does we need to update
188:08 - source for move sound
188:23 - now we are going to check for both G
188:25 - link and
188:43 - capturing now we are checking for both
188:46 - Checkmate and check
188:49 - they have higher presence than promotion
188:51 - capture and cting
188:54 - sound here correct
189:12 - mistake and now finally we need to emit
189:15 - that sound
189:20 - in move sound function I have typing
189:23 - mistake because I double checked for
189:25 - checkmate should be for
189:27 - check you can see that we manually
189:30 - update check State and last move
189:31 - property in show previous position
189:33 - method and we are doing same in update
189:35 - board method but rather we are going to
189:38 - create method that marks check State and
189:41 - last
189:45 - mole so here implement private Mark last
189:48 - move and check
189:53 - state that method takes last move which
189:56 - is type last move or
189:59 - undefined as well as check state of type
190:02 - check
190:03 - State and return type is
190:10 - vo and here we are assigned last move to
190:14 - last move property as well as check
190:16 - state to check state state
190:20 - property and now we are going to a it
190:23 - sound so if last move is different than
190:26 - undefined we are calling move sound
190:32 - function and here pass move type from
190:34 - last move
190:37 - property and if last move is undefined
190:40 - it means that we are going back to first
190:42 - move so here just emit new set of Base
191:00 - move now we need to call Mark last move
191:03 - and check State method so here in update
191:14 - board pass chessboard last move and
191:17 - chessboard check State
191:25 - properties and do same in show previous
191:29 - position
191:39 - method pass last move and check state
191:42 - that we are D structured from game
191:44 - history now as you can hear move sound
191:47 - is emitted after each move it is working
191:50 - for basic move and for
191:55 - capturing as well as for
192:04 - check and for cast
192:06 - link also if I navigate between moves in
192:09 - move list component move sound is played
192:12 - also when I promote my Pawn different
192:15 - audio is emitted
192:19 - here is the sound of
192:22 - Checkmate now we are going to create a
192:24 - method to navigate between moves in MO
192:26 - list component using left and right
192:28 - arrow key so firstly Implement on init
192:32 - life cycle
192:39 - hook and here declare key event
192:42 - subscription
192:52 - so we are getting event from
193:00 - keyboard for whole document and even
193:03 - that we're listening is key
193:08 - up now we need to filter those
193:13 - events so we are only listening to right
193:17 - and left arrow
193:30 - keys now we are going to Define
193:33 - functionalities in top operator so we
193:35 - need to import it from
193:38 - rxjs and here declare switch
193:42 - statement so if we have Arrow right
193:50 - we are checking if game history
193:53 - component is same as game history length
193:57 - minus one in this case we cannot go any
194:00 - further so we need to
194:02 - return otherwise we need to increment
194:06 - game history
194:16 - pointer for left Arrow we need to check
194:18 - if game history component is equal to
194:21 - zero in that case we need to
194:24 - return otherwise we need to decrement
194:27 - game history
194:38 - pointer and finally we need to call show
194:40 - previous position method and pass game
194:43 - history pointer
194:51 - also we need to subscribe to that from
194:58 - event and we need to Define private
195:01 - subscriptions property that is going to
195:03 - hold all of the subscriptions defined in
195:05 - chessboard component TS
195:14 - file now add key event subscriptions in
195:18 - subscriptions
195:22 - property also we need to implement on
195:24 - destroy life cycle
195:36 - hook and here we need to call
195:39 - subscriptions unsubscribe
195:48 - now go to computer mode component TS
195:51 - file and here we need to call
195:54 - Base NG on it from chessboard component
196:03 - class also we have same subscriptions
196:06 - property so we need to rename it to
196:08 - computer
196:15 - subscriptions also we we need to
196:17 - override NG on in it and NG on Destroy
196:20 - in computer mode component
196:27 - class and also call Super NG on
196:31 - Destroy as you can see we Implement
196:33 - navigating between moves in move list
196:35 - component using arrows well so
196:38 - everything is working

Cleaned transcript:

learn how to code a chess game that can be played against another person or a computer using the stockfish API this course from Robert uses angular but you can still follow along if you're new to angular hi and welcome to this comprehensive tutorial where I'm going to teach you how to build a full chess application from scratch using angular even though you may not use angular I will explain everything in detail so it will be easy for you to follow and implement it using your preferred language and framework application consists of two two parts playing against friend in the same browser where we implemented correct piece moves we also implemented special moves like aasad capturing also implemented check detection Pawn promotion and castling as well here we have game history component which shows us moves that have been previously played if we click on one of the move it will simulate how that position looks like when that move has been played finally we are going to use stockfish rest API in order to be able to play against computer in our application click on play against computer button dialogue shows us to choose between different levels of stockish strength and also to choose color for our pieces we are waiting for computer to move and as we can see everything works fine if that sounds interesting let's start with tutorial before we start writing any code my goal will be to First clarify how things should be done and then we will move on to the writing code part because if we know exactly what needs to be done writing code is the easier part although the code is written using angular and typescript if you understand the basic logic behind the application it will be clear to you how to implement it using other languages and Frameworks so let's first start with the objectoriented model for our chess application on the one hand we will have the chess board and on the other hand the pieces for the chess board we are going to have several basic properties like chess board which is two dimensional Matrix of pieces player color which is color of the player which turn is now and chessboard view which is getter that represents board as two dimensional Matrix of characters from which UI can print the board for pieces we will have fanch which is short name for piece for now you don't need to worry about fan rotation we will talk about that later also piece color which can be either white or black and directions in which piece can move represented as array of coordinates here are fan characters for each type of the pieces for both black and white pieces as you can see fan CH is simply first letter of piece original name and for white pieces it is represented as uppercase letters and for black pieces in lowercase letters here is the coordinate system for our chess board X represents board Rank and Y represents board file and finally I want to make difference between piece save squares and pieces directions as we can see both queen and king have same directions but Queen can move multiple squares along One Directions while King can move only one square at the time if we don't counting castling as move in terminal create new angular project chess game and once it is completed open Visual Studio code and we can start with coding we are in Visual Studio code in app folder create chess logic folder then pieces folder and declare piece. TS file now declare abstract pie class that has protected abstract property fan character which is of type fan character that we are going to Define later also protected abstract property for pieces directions which is type of array of coordinates and through Constructor Define private property color which is type of color now we need to Define Getters for those properties so first let Define getter for fan character now Define get for pie directions and finally Define get for p color now in chess logic create models .ts file and here we are going to declare those types so firstly Define a numeration for piece color color could be either white or black Define type for coordinates which is object that has X and Y property both type of numbers and finally Define enumeration fan Char and here we are going to Define fan character for each type of pieces for both black and white colors white pieces are represented as uppercase letters while black pieces are represented in low overc case letters so now just copy white pieces and change white to black now in pie class import those types and finally after we are done with that we can start implementing those abstract class for each type of piece now we are going to create Bishop TS file declare Bishop class that extends base piece class now Implement inherited properties Bishop could move in four directions all of them are diagonally as you can see in the picture now specify Bishop color through Constructor now called the super Constructor and implementing fan character that depends on the color of the piece so if piece color is white then fan character white Bishop otherwise fan character black Bishop now create Knight DS file then declare KN class that extends base piece class Implement inherited properties Knight can move in eight directions as you can see in the picture now we are specifying all of them now specify piece color through Constructor call the super Constructor and Implement fan character property that depends on the piece color again if P color is white it's fan character White Knight otherwise fan character Black Knight now create Queen TS file declare Queen class that extends Base pce Class Implement inherited properties Queen can move in eight directions now specify piece color and again call Super Constructor and Implement fan character property so if P call is white then it's fan character White Queen otherwise black queen now create Rook TS file declare Rook class that extends base piece class Implement inherited properties Rook can move in four directions now specify Rook color through Constructor call Super Constructor and Implement fan character property if the color is white then it's fan character white Rook otherwise character black rook and now we are going to have one additional property has moved which signalizes if Rook has moved and that property is important because castling can't be done if one of the Rook has moved and here declare get for HMO property and also Setter that takes no arguments and it just sets has mve property to true now create King TS file declare King class that xense base pie class Implement inherited properties King can move in eight directions same as Queen so now we are copied directions from Queen and paste it in King class now specify King color again call Super Constructor Implement fan character property King also have private has mode property same as rook and now from Rook class just copy getter and Setter for has move now create pawn. TS file and declare Pawn class that extends base piece class Implement inherited properties and now for Pawn directions we are specifying all possible moves for white Pawn later we are going to create method to change those directions if Pawn is actually black pawn call Super Constructor Implement fan character now Define private method set black pawn directions that changes directions if Pawn has black color we just need to change X property to x * minus1 for black pieces now if piece color is black we need to call set black pawn directions method and also need to declare private has moved property private has moved property is responsible to manage if pawns have ability to move two squares straight because initially they have that option but after each move we need to restrict that so firstly copy getter and Setter from R class and paste it in Pawn class and now copy directions so when Pawn has moved we need to update directions by restricting that coordinate that says that pawn can move to square and now if Pawn is actually black pawn we need need to call Private set black pawn directions method now create chessboard TS file in chess logic folder and declare chessboard class declare private chessboard property that is two dimensional Matrix of pieces or null where null representing empty Square Define player color which is color of current player initially white is firstly playing and in Constructor implementing chessboard property Define first White Rook then White Knight then white Bishop then White Queen White King then Bishop again Knight and Rook now specify right pawns need to copy that seven more times now need to specify four empty rows and finally Define black bonds and black major pieces so here just change white color to Black now Define getter for player caller and finally Define public getter chessboard view which is responsible to printing the board so here we are looping through chessboard and for each row we need to see if that row contains Square which has piece or it's empty Square so if piece is instance of piece we need to return its fan representation otherwise we are returning now import fan character now close all the tabs and open Terminal and generate component that is responsible for rendering chessboard in the browser in modules folder and Skip all the tests now open chessboard component TS file in modules folder and here instantiate chessboard class as private chessboard property Al declare chessboard View and also declare public getter for current player now open tboard component HTML file and here declare div with class of chessboard all of the CSS will be provided in the GitHub repository so you don't need to worry about that now declare another div and here we are looping through each row of chessboard view also declare x coordinate and give it class of row so ang4 for let piece of row also declare y cord coordinate and give it class square and for now just set coordinates for each Square so we can see in browser how our board looks like now open chessboard component CSS file and here paste all of the CSS from GitHub repository and now you can see what chessboard row and square class repres present and now in terminal start the project our project is live on Port 42,000 now in style CSS paste some basic CSS and open up component a HTML and here remove all of the default HTML and just include our app chessboard component now in square class append border and background color because background is initially set to Black let's see how our board looks in the browser so every coordinate is placed well and if we compare that with original board we can see that first row has first Square black then light and second row has opposite so in order to get desired view we need to apply certain CSS classes we are in chessboard TS file and here declare public static is square dark method that takes X and Y coordinates as arguments and return type is Boolean so if both X and Y coordinates are either odd or even then square is dark now open chessboard component TS file and here declare public e Square dark method that takes X and Y as arguments return Boolean and it calls static method of chessboard class now in chessboard component HTML delete x and y coordinate and for square append new class so append dark CSS class if square is dark but if square is not dark it means that we need to append light CSS class those class are just different background colors as you can see in chessboard component CSS file now our board looks perfect we applied dark and light squares correctly and now we need to append pieces to the board now under the source and assets folder you have piece folder with all of the images for each piece in sfg format now open Chess logic folder and in models. TS file we are declaring the piece image Parts constant that is read only object that for its key has fan character a for Value has PA to this image now implement it by adding missing properties and now we need to specify part to each image so it's under the assets and pieces directory in order to speed this up you can copy this object from GitHub repository now open chessboard component TS file and here declare public piece image paths property and now in drbo component HTML file add image St T that exist only if piece is different than null and append Source tag that has value piece image parts of piece and also declare alternative tag and add class of piece and P class is actually just setting width of 50 pixels now all of the pieces are on its correct positions and now we need to create functions that allows us to move pieces and play game so now we are going to discuss how we can achieve that our goal is to implement a function that returns all possible save squares for the current player so we can display save squares when user clicks on certain piece initially we Define find save squares function that takes no arguments and return type is map of the player available squares that map is is in format string for each key which is in format X+ comma + Y where X and Y are initial coordinates of the piece and for Value we have array of coordinates which represents piece save squares initially we Define empty map for the player available squares now we are looping through each of the pieces for current player Define empty list of coordinates that represents piece save squares now we are looking through each direction of the piece directions declare new X and New Y coordinates if those coordinates are out of range we can't continue along this direction now declare piece on new coordinates as new piece which can either be piece or empty square if that piece is not empty Square as has same color as initial piece we need to continue because we can't put piece on the Square that already contains our our piece now we need to check if that position is safe after that move we are going to see later what is meant by safety of the position then if the position is safe we update piece save squares list after we done with traversing all of the pieces direction we are checking for special moves like ampasant and castling if piece has any save squares we are appending that to initial map for the player a available squares and finally we return that map of the player available squares now to determine if position is save after move we firstly need to simulate how that position would look like after the move has played and now if the player who just moved piece creates position such that he's in check now position is then unsafe we need to restore that position and return safety of the simulated position position now let's see this position in that position white is on move and white Rook has only three available Square let's say that it doesn't so if he's moving on the one square that we are not specified he will create position that he is in check now which means that this position is unsafe so if white creates position or black creates position in which he left his own king in check that position is considered as unsafe position to determine if King is in check look at this position to determine if black king is in check we need to Traverse through all of the white pieces and see if any of those pieces attacks black king So firstly we are checking for white Rook eight doesn't attack black king then for queen queen also doesn't attack black king same for The Rook for the king bishop and finally we see that white knight attacks black king which mean that black is in check now so here's the pseudo code to determine if one side is in check look through each piece of the opposite color to determine if black king is in check we are looping through all of the white pieces and if one of the attacking Square contain PS King with the opposite color so in this case black king then position is in check if no such a square exists there is no check and finally just one exception that pawns are attacking in diagonal directions here in justb TS file and here Implement public is in check method that takes player color as argument of type color and returns Boolean we needs to return f in case that position is not in check but to see if position is in check we need to Traverse the board so here writing two Ned for Loops as you can notice we here hardcoded eight now we're going to store that in private readon chessboard size property and now we need to see if that square is actually empty square or contains piece so declare piece variable that is either piece or null and here we are checking if pie is empty square or piece color is same as player color if it is true we need to continue but now we need to Traverse to all of the piece directions and now declare new X and New Y coordinates in order to see if those coordinates are in range we need to create new method private R chords valid that takes X and Y as arguments returns Boolean and if both X and Y are greater or equal than zero and less than chbo size coordinates are valid but now if coordinates are not valid we need to continue now we need to check if p is either instance of Pawn Knight or King and here decare attacked piece which is piece or null which is square at new X and New Y coordinates in the board and here we need to check if attacked piece is instance of King and here has same color as player color argument of easy in check method if it does we need to return true here I've wrongly typed false but we'll correct that later and if pie is instance of Pawn and Dy is equal to Z we need to continue because pawns are only attacking diagonally and here I'm also leaving comment now if pieces are Bishops Rooks or Queens they can move multiple squares along One Directions so we need to Traverse all of that possible squares along each Direction here we also need to check if attacked piece is instance of King and has same color as player color argument so copy that from previous if statement and paste it but now we also need to check if attacked piece is different than now if it does it means that we need to stop traversing along this direction because we reach certain piece and Bishop Rooks and queens can't move over the other pieces and finally we need to update new X and New Y coordinates by incrementing them for the X and Dy now we are going to implement a method that checks if the position is safe after move declare private is positioned save after move method that takes couple of arguments first is piece and others are previous X previous Y and new X and New Y coordinates and return type is Boolean firstly declare new piece which represents piece or empty Square on new coordinates and we need to check if that new piece is actually piece and has same color as the initial piece that wants to move if it does we need to return false because we can't put our piece on the Square that already contains piece of our color also I'm leaving comment here and now we need to simulate how that new position would look like at previous X and previous Y coordinates we need to put empty Square that's the reason why we are setting null and at new X and New Y coordinates we are putting that piece now we need to check if that player is in check by declaring his position safe Boolean so position is safe if that player is not in check after he moved piece we now need to restore position at previous X and previous y will be piece and at new X and New Y will be new piece and finally we need to return is position safe Boolean we are in chbo TS file and here implementing private find save squares method that takes no arguments and return custom type save squares which we are going to declare in models. TS file which is basically map that for each key has string in format X Plus comma plus Y where X and Y as we said are initial coordinates of the piece and for Value has array of coordinates then import save squares type declare that initial map and also return that map now we need to Traverse through the board to be able to find those safe squares now we need to check if piece is empty square or piece colar is different than the color of the current player if it is we need to continue also declare piece save squares which is initially empty array of coordinates and now look through all of the pieces Direction now specify new X and New Y coordinates now we need to check if those coordinates are valid because if they're not valid we cannot process further also declare new P which represents square at the new X and New Y coordinates which can be either piece or empty square and now we need to check if new piece is actually piece and has same color as the piece that wants to move if it does we cannot process further because we can't put our piece on the Square that already contains piece of our color now we are checking if piece is either Pawn Knight or King now we are checking if position is save after move and we are passing piece x y and new X and New Y coordinates and if position is safe it means that we can append those coordinates to piece save squares appending new X and new y now we are checking for other pieces Bishop Rooks and queens can move multiple squares along One Direction that's the reason why we are having this while loop because we need to Traverse all of the possible squares along each Direction here also declare new piece and checking if that new piece has same color as piece that wants to move if it does we need to break the V Loop because those pieces can't move over the other pieces now copy this if statement if new piece is actually different than null we also need to break for the same reason that I mentioned couple seconds ago and finally we need to increment new X and New Y coordinates by DX and Dy after we traversing all of the pieces directions we need to check if piece has any save squares if it does we need to append those save squares into the save squares map and finally we need to restrict Pond movements in certain directions because for example pawns can only take pieces diagonally but can move forward if there is piece in front of them so now we are going to address all of that cases pawns can't move two square straight if there is pieace in front of them we are checking at the same time for both black and white pawns if DX is equal to two it means that we are checking for white pawns otherwise we are checking for black pawns also I'm going to leave comment what we did here in in case someone watches code at GitHub repository also now we need to do the same thing if Pawn is moving one square straight so same principle again checking for both black and white Pawns also I'm leaving comment for this situation and finally we need to restrict pal movements diagonally if that square diagonally is empty or has the piece that has the same color as the pawn that wants to move also I'm leaving comment for this situation as well now open chessboard component DS file and declare private property selected Square which is type of selected square that we are going to Define now so create models. TS file in chessboard directory and declare type for square with piece which is object that has piece of type fan character as property as well as X and Y coordinates of that square now Define type Square without piece that is object that for piece has null value and finally declare type selected Square which is discriminated Union between those types now import selected Square initially no square is selected and declare private property piece save squares which represents save squares for selected piece as array of coordinates which is initially empty array now open chessboard component HTML file and declare click event for selecting piece selecting piece function takes two arguments X and Y coordinates of that square and in jbor component TS file we're going to implement that method return type is void here we are declaring piece on that square which can be piece or empty Square so if it is actually empty Square we need to return from the function as we doing now and also we need to update private properties for selected square and piece save squares so firstly update selected Square by setting piece and X and Y properties and we need to update piece save squares now but before doing so open chessboard TS file and we need to declare property that holds save squares for the current player so here Define underscore save squares private property and we are going to assign value in Constructor by calling find save squares function we also need to create getter for that private save squares property and now go to chessboard component TS file and declare public getter for Save squares and now finally update piece save squares we are going to apply certain CSS classes in case that square is selected or Square is save for selected piece in order to achieve that imp public e Square selected method that takes X and Y coordinates as arguments and return type is Boolean if no square is selected return false and here we are checking if X and Y from E Square selected method are equal to selected Square X and Y properties also Implement public e Square save for selected piece method that also takes X and Y coordinates Ates as arguments and returns Boolean and here we are checking if piece save squares actually contains x and y coordinate now open dasboard component HTML file and apply selected Square class if square is actually selected and also create new div and give it class save square if that square is actually save for selected piece now you can notice that if I click on a square with a piece it marks that square as selected and highlights its save squares so for now everything works fine but however as you can also observe I can select squares with black pieces even though it's white turn so we go on address that bug and also we need to create functions that allows us to move pieces now we're addressing bug for selecting piece with wrong color so Implement is a wrong piece selected method that takes piece as fan character as argument and returns Boolean declare Boolean that says if white piece is selected so if piece is equal to piece to uppercase it means that white piece is selected and now we need to return if white piece is selected and player color is black or black piece is selected and player color is white in that case this method returns true and now we are going to call that method in selecting piece to prevent selecting piece with wrong color if I try to select black pieces when white is on move you can see that I couldn't select them which means that our method is working well and bug is resolved we are in chessboard TS file and implementing public move method that takes for our arguments previous X previous Y and new X and New Y coordinates and return type is void now we need to check if those coordinates are valid if they're not valid we need to return from the function now decare piece variable which is type piece or null that represents item on previous X and previous Y coordinates in the board and now we are checking if piece is actually empty square or has color that is different than color of the current player if it does we need to return from the function also here declare piece save squares that we are going to get from Save squares property and now we need to check if new X and New Y coordinates are actually in those piece save squares if they are not we need to return from the function because they are not safe squares so if those coordinates are not safe throw an error and now update the board at previous X and previous Y coordinates we are setting null and at new X and new y coordinate set piece also update player color variable so if player was white now it's black and vice versa and also we need to recalculate save squares after each move if piece is Pawn Rook or King and hasn't been moved we need to set has moved property to true now open chessboard component TS file and we are going to implement placing piece method which is private method that takes two arguments new X and new y coordinate and return type is void here we first need to check if square with piece is actually selected also we need to check if new X and New Y coordinates are safe coordinates for selected piece now we are destructuring previous X and previous y property from selected square and now we are going to call move function with previous X previous Y and new X and New Y coordinates and also update chessboard View now create public move method which takes X and Y coordinates as arguments and call both selecting and placing piece functions after calling both methods go to chessboard component HTML file and there instead of selecting piece call move function now you can see that our move fun function is working but there is bug because save squares remain still even though after I played move also I couldn't take aasan also I couldn't Cel and as you can notice when I check black king we should have some signalization to mark that King is in check so now we are going to address those bugs now Implement private unmarking previously selected and save squares method that takes no arguments and return type is void so here for selected Square say that no square is selected and also set piece save squares to empty array and now we we are going to call that method each time we move the piece we successfully removed bug that showed previously save squares after we moved piece now we are going to fix bug that happens when we click on the Square that has already been selected so here we are checking if same square is clicked so if selected square piece is not null and selected Square X is equal to X and selected Square Y is equal to Y it means that same square is clicked if it does we need to return from the function but previously we need to call Private unmarking previously save and selected Square method to unmark that square and save squares for that selected piece now if I click on square that is already been selected it is unmarked so everything works fine open models. TS file in chest logic folder and declare last move type which is object that contains previous X property previous y property as well as current X and current Y coordinates and also piece that has made move now open chessboard DS file and here after each move we need to update last move property but first we need to Define it declare privatecore last move property which is type of last move or undefined because it is initially undefined and here Implement getter for last move property now scroll down to move function and update underscore last move property set previous X previous Y and for current X and current y set new X and New Y and also pass piece we need to Define property that tells us if King is in check we have is in check method that returns if King is in check so somehow we need to update that property in that function but let's firstly see when that function is called that function is called in is position save after move method but on simulated position so so we need to have some argument that tells us if we called that on simulated position or on the real one so Define checking current position Boolean in E position save after move call it with false and firstly in models Define type King check which is object that has is in check set to true and also X and Y coordinates of the king declare type King not check which is object that has is in check property set to false and declare check State type which is discriminated Union between King checked and King not checked types and now in jbo TS file declare private property underscore check state which is initially set to King not checked import check State type and now we are going to implement getter for that prop y after we implemented getter foror check state property in e in check function here when we returning true we need to update the check state property if we are checking current position and also don't forget to return true now we are going to do same for Rooks Bishops and queens and finally if king is not in check but we are checking current position we are also updating the underscore check State Property by setting is in check to false and scroll down to move function after we changed player call property we need to call is in check method for current player and for checking current position we are passing true now open chessboard component TS file and declare private properties for both last move and check state we are going to apply certain CSS classes in case that King is in check or Square is actually either starting or end Square for the piece that last made a move in order to do that we need to create two functions firstly Define public is square last move that takes X and Y arguments and returns both firstly we are checking if last move is undefined if it does return false otherwise we need to firstly destructure previous X previous Y and current X and current White properties from last move and here we are checking if x is either equal to previous X and Y is equal to previous y or X is equal to current X and Y is equal to current y now Implement method is square checked which also takes X and Y coordinates as arguments returns Boolean and if is in check property of check state is set to true and check State X is equal to X and check state Y is equal to Y it means that King is in check so in placing piece after we called move function I want to update check State and last move and now go to chessboard component HTML file and here here append class last move if square is actually last move and do the same if King is in check append king in check CSS class now as you can see those classes just set different box Shadow for that square we can see that last move class is implemented well as well as king in check that is working good but you will notice that I still don't have option to Castle so we are going to work on that we are in chessboard dots file and here we are going to implement method can Castle here I have wrongly typed can capture but can Castle met takes King as argument as well as king side Castle bullion which signalizes if we want to Castle King side or queen side firstly if King has been moved we are returning false here specify King X and Y position King position X actually depends on the color of the king so if King color is white king position X is zero otherwise it's seven declare King position Y which is four declare Rook position X which depends on the color of the king but is same as king position X Rook position y depends on the king side Castle bullion so if it is King side it's seven if it's Queen side it's zero so Rook should be on Rook position X and row position Y coordinates at the board now we are going to check that now if Rook isn't instance of Rook or Rook has been moved or King is currently in check it means that we can't Castle so we're returning false now Define first next king position why which is coordinate of Y Square through which king needs to pass here we are declaring for both king and queen side castling also declare second next king position y that Kings need to cross in order to Castle now we need to check that both of those squares need to be empty if either one of them is is not empty Square we need to return false in case that three wants to Castle Queen side we also need to check that chess board at King position X and one need to be empty finally we need to check if those squares over which Kings need needs to pass our save squares so that's the reason why we are calling is position save after move function on first next king position Y and second next king position y for y coordinate and for x coordinate King position X after we implemented K Castle method we need to call that method in find save squares function so after we Traverse all of the pieces direction if piece is instance of King we need to check for both queen and king side castling so if King can Castle King side append to piece save squares x coordinate and for y set six now we need to check if King can canel Queen side if it can to piece save squares append X and for y append two now let's play couple of moves to get in the position where King can Castle now you see that I have option to Castle but if I Castle castling is done incorrectly because Rook didn't move at all so this is the bug that needs to be resolved also you see that black hasn't option for casting because white Bishop attacks that square over which Kings need to cross in order to fix bug for castling in move function we are going to call another special function that updates the board Implement private handling special moves method that takes five arguments first is piece that has been previously moved and others are its previous X previous y new X and New Y coordinates return type is white here we are checking if pce is instance of King and if absolute difference between its previous Y and New Y coordinates is exactly two if it does it means that castling has happened but if New Y is bigger than previous y it means that we Castle King side otherwise Queen side now declare Rook position X which is same as previous X declare Rook position Y which depends on the side where we Castle so if if it's King side it's seven if it's Queen side it's zero now Define Rook that we are going to get from board at Rook position X and the r position Y coordinates also declare Rook new position Y which also depends on the side where we Castle so if it's King's side it's five but if it's Queen side it's three and now finally we need to update the board so at chess board Rook position X and Rook position y we are setting n because we are moving Rook from that position and at chess boort Rook position X and Rook new position y we are setting that rook and also set that Rook has been moved now we are going to call that function in move method now play couple of moves just to get the position where both King can Castle now you can see that I implemented King side castling well as well as Queen side castling now we are going to discuss whether ampasant capturing can occur we observe that in the given position White last move involved moving upon pawn two squares and now black pawn has the option to capture aasan in order for the ability to capture aasan to be present certain conditions need to be met and these are previous player moved upon two squares our pawn and the opponent Pawn are on the same Rank and also pawns need to be adjacent to each other and finally position must be save after capture is completed if you look at this position even though black moved pawn two squares White PA hasn't option to capture aasan because if he has he will create such a position that he's in check now which means that this is unsafe position we are in chessboard TS file and now Implement private can capture ENT method that takes Pawn as argument as well as Pawn X and pawn Y coordinates and returns bullan if last move is undefined we need to return false now the structure properties from last move object and now in that if statement we need to check if amband can actually happen so if piece isn't inst of Pawn or Pawn color is different than color of current player or absolute difference between current X and previous X is different than two also if Pawn X is different than current X or absolute difference between Pawn Y and current Y is different than one so if any of those conditions are met we cannot capture ampasant now declare P new X position for both black and white pawns now declare Pawn New Y position which is same as current p and now we need to simulate how that position would look like so at current X and current y we are setting null because we removed Pond from that position now we need to check if position is safe after that move we need to restore position back and finally we need to return is position safe Boolean now go to find save squares function where we need to check if aasan can actually be completed so if p is instance of Pawn and can't capture ound we need to update piece save squares here we are going to handle for both black and white pieces at the same time we created position in which white has option to capture aasand but if he captur we didn't remove black pawn so this is the bug that we need to resolve in handling special moves function as we did for the castling now in handling special moves function we need to check if ENT capturing has occurred so if piece is instance of Pawn and last move isn't undefined and last move piece is instance of Pawn and absolute difference between last move current X property and last move previous X property is exactly two and also if previous X is same as last move current X and finally if New Y is same as last move current y it means that aasan has actually happened and now we need to update the board so now chess board at last move current X and last move current y will be null if fight Pawn captures a passant we remove black pawn successfully and bug is resolved but however there is another bug about Pawn promotion so if white Pawn takes a rook we should display promotion dialogue from which white player can choose in which piece he wants to promote his Pawn now we are going to work on that in chessboard TS file Implement private promoted piece method that takes one argument promoted piece type of type fan character and returns one of the piece in which we can promote our Pawn which is either Knight Bishop Rook or queen and now if from oted P type is either F character White Knight or Black Knight return new Knight and for callor pass Coler of the current player so now we are going to do same for Bishop rook and queen so if promoted P type is either white bishop or black Bishop return return new bishop do the same for rook and finally for queen go to move function and add one more argument for promoted piece type which is fan character or null and here we need to check if promoted piece type is different than null if it does it means that promotion is happening and we need to update the board so at new X and New Y coordinates we are not going to to set piece but rather result of the function promoted piece because if we set piece we will place Pawn on that position and we don't want to do that so here call promoted piece for promoted piece type and if promotion doesn't happening we need to place piece at new X and New Y coordinates now open chessboard component TS file and we are going to declare properties for p promotion first decare property is promotion active which is bullan that signalizes if promotion dialogue should be open and initially set to false also private promotion courts property which is type of coordinates or null and initially set to null and promoted piece which is type of fan character or null and by default is set to null and create function public promotion pieces which returns array of fan character so if the color is white it will return array of fan characters for white pieces in which we can promote our pawn and those are fan character White Knight fan character white Bishop white rook and White Queen and just copy that array and change white to black color now we need to fix bug because move function now takes five arguments and for a promoted pie type for for now just pass null and here we are going to handle promotion so firstly declare is Pawn selected Boolean so if selected square piece is actually fan character of white Pawn or selected square piece is black pawn now we need to check if that pawn is on last rank so if Pawn is selected and new X is equal to 7 or new X is equal to zero it means that pawn is on last Rank and now we need to check if we should open promotion dialogue so declar should open promotion dialogue bullan and if promotion isn't active and pawn is on last rank it means that we need to open promotion dialogue so set is promotion active to true and also update promotion coordinates and now we need to return because now we wait for player to choose in which piece he wants to promote his on now open chessboard component HTML file and now we are going to display that P promotion dialogue so here we have one div that is displayed only if promotion is active and give class of promotion dialogue and now we need to look through the result of promotion pieces function and to display each of the promoted piece add Source T and also create button to close the D dialog in case that we don't want to promote our Pawn but for now remove NG if condition to display dialogue when his promotion active is said to true because we want to show how the dialogue would look in the browser now you can see how that dialogue looks like if I move white pieces it changes color to Black and again changes to White now in chor component HTML file display dialogue only when is promotion active is set to true now if I want to take a look dialogue will be displayed and it will display me all of the pieces in which I can promote my pone but there is a bug because safe and selected squares are now also marked and I need to create a function when I click on a promotion piece it will place that piece on the board and also another bug when I click on another piece dialog Still Remains open so we need to correct that in chessboard component HTML file declare click event for each promotion piece and pass promoted piece function that has one argument and it's piece of type fan character now in chbo component TS file we're are going to implement that method return type is void and here if promotion cords are null or selected square piece is now we need to return from the function also update promoted piece property and set it to piece now we need to destructure properties from promotion chords now the structure previous X and previous y property from Ed square and now we need to update the port so we should call placing piece function but we don't need to check for those if statements so I'm going to create another function private update board method that takes previous X previous y new X and New Y coordinates return type is void and I'm going to copy code that updates the board and remove it in placing piece function and just call update board and copy that method and call it in promote piece method let's correct is position save after move function here I don't need to pass piece as argument but rather I will read it from board at previous X and previous Y coordinates and if p is null we need to return false and now every time that we called is position save after move function with five arguments we need to change that and call it with four now go to unmarking previously selected and save Square method and check if is promotion active if it does set is promotion active to false also set promoted piece to null and set promotion cords to null in update board method when we call move function instead of passing null we need to pass promoted piece property now if we want to take a R and P promotion dialogue opens we still have bug because save squares are highlighted also we need to create function to close the dialogue and if we don't remove save squares when dialogue is open we have option to place PA on Square even though we didn't choose in which piece we want to promote our Pawn so now we are going to address that bug in chessboard component HTML file declare click event to close the dialogue and in chort component TS file we are going to implement that method public close pawn promotion dialogue takes no arguments and return type is void and here we just need to call unmarking previously selected and save Square method in order to remove save squares when dialogue is open in placing piece function in if statement where we check if we should open promotion dialogue we need to set that piece save squares are now empty array and finally declare public method that will check if Square is actually promotion Square so in that case we can signalize which Square we clicked when we want to promote our Pawn so if promotion cords are null we need to return false and now we need to check if promotion courts X is equal to X and if promotion courts Y is equal to y now go to chessboard component HTML file and here upend class if that function returns true for that coordinates so append promotion Square class now if we take a rook save squares for Pawn are now not highlighted anymore and which signalizes our promotion Square close PA promotion dialog function works well if we click on another P when dialog is open dialog will disappear and if we want to take a rook we see that now we can put Pawn on its previously saved Square which means that previous bug is resolved and now if I want to promote into a queen everything works well I couldn't move a bishop because blacking will be in check now decare properties that will signalizes if the game is over so first let Define privatecore is game over Boolean which is initially set to false and also privatecore game over message which is string or undefined and now Define gets for both properties and also getter for game over now let's Implement a method that checks if game is finished private is game finished method takes no arguments and returns bullion and here if player doesn't have any safe squares it means that game is over and we need to check if it is a Checkmate or stalemate so if is in check property of check State object is said to true it means that player lost via Checkmate so here declare previous player if current player is white it means that previous player was black and vice versa and now update unor game over message property and set previous player one by Checkmate otherwise update game over message and said that this is State and return true otherwise we need to return false and finally go in move function and after we calculated save squares we need to update e game over property we are going to handle situations in which draw is happening to a 50 move rule basically this rule states that if no capture has been made or no Pawn has moved in the last 50 moves game is declared as draw so here we are declaring private 50 move rule counter and set it to zero and scroll down to move function declare is p taken Boolean and if square at new X and New Y coordinates is different than empty Square it means that piece is taken now we need to check if piece is taken or piece that is last moved is actually Pawn if it does we need to reset the counter to zero otherwise we need to increment it by 0.5 and now go to E game finished method and we need to see if 50 move Ru counter is equal to 50 if it does update game over message and set draw do a 50 move roll and return true now we are going to talk about insufficient material positions a position is considered insufficient material position if neither site can mate the other there are couple of those position and we are starting with King versus King position also if one side has exactly one minor piece knight or Bishop it is also considered as insufficient material position if one side have two knights and King versus King it is also insufficient material position if both sides have exactly one Bishop of same colors it is also considered as insufficient material position and finally if one side have multiple Bishops of same color position is also insufficient material position we are not going to implement insufficient material function because it is Trivial function and I don't want to spend time on it I'm going to paste the code and we can see what we did in that method so now we have private insufficient material method that takes no arguments and returns bullion now we declared white and black pieces as array of object and that object has piece X and Y properties we need to have X and Y because in some cases we can have Bishops that are on same color now we are traversing the board and see if piece has white color if it does append it to White pieces otherwise append it to Black pieces and now we are checking if white pieces has length of one and black pieces has length of one which means that this is King versus King position and we are returning true now we are checking if one side has King and minor piece against King so if white piece length is equal to one and black piece length equal to two we are checking if black pieces has either Knight or Bishop we are doing same for white pieces now here we are checking if both sides have Bishop of same color so if white piece has length of two and black pieces has length of two now we are checking if both sides have Bishop if it does we need to check if those Bishops are on same color so we are calling is square dark method so if both white and black bishops are either dark or light we are returning that Boolean now we are check checking if one side has two knights and King against King for the sake of that we Define player has only two knights and King method which simply filters the piece and see if that piece is actually night and if the length of that filtered array is equal to two and finally we are checking if one side has only bishops of same color against King so we declared function and we're filtering Bishops and now we need to see if all of Bishops are on same color for the sake of that we declared set and we mapped Bishop's array to see if square is actually dark and if the size of that set is equal to one It means that all of the Bishops are on same squares and now we need to see if Bishop's length is equal to pce length minus one because of King and if all of the Bishops are on same color and finally we are returning false if neither of these cases return to True finally we need to call insufficient material method in E game finished method update underscore game over message property and say draw do a insufficient material position and return through we are in jbo component TS file and here declare get for game over m message property and go to chessboard component TS file and now we want to display that message if game is over so if game over message is different than undefined we need to display this message and give class game over message go to chessboard component TS file and now I want to prevent selecting and placing piece once game is finished so here we are checking if game over message is different than undefined if it does we need to return from the function and by doing so we we cannot call placing piece method because we can't select square and set piece save squares and hence placing piece function will never be executed and same is for promote piece now go to chessboard TS file and in move function if is game over property is set to true I need to throw an error that says that game is over and we can't play Move let's play a couple of moves just to see if Checkmate detection is working and it does game over message is displayed and you can see that now I can't select black pieces because game is over now we are going to see that stalemate detection is also working stalemate game over message is displayed now let's check for insufficient material position detection and King versus King position is successfully detected insufficient material position for King and minor piece against King is detected insufficient material position detection is working in case that we have two knights against King and it is also working in case that we have multiples Bishop of same color and finally it is working in case that both sides have Bishops of same color before we start to implement fan converter class we need to Define private full number of moves property which is Sixth and last part of the fan string which is initially set to one and now scroll back to move function and after each move when white is on move we need to increment that counter so here we are checking if player color is white if it does then increment number of full moves by one now we are going to talk about fan notation which will help us in implementing method for detecting if same position is occured three times during the game and also we will use it when we want to receive move from stockish rest API to be able to play against computer so we're in Wikipedia page and for fan says that it is a standard notation for describing a particular board position of a chess game the purpose of fan is to provide all the necessary information to restart the game for particular position here we have fan string that consist of six parts separated via slash character so first part actually represents position of the board but starting from the reverse so we are first looking through black pieces and black pieces are represented in lowercase letters and if we have numbers it means that those numbers are represented empty squares like now we have firstly four empty squares then we have white pawn and another three empty squares and rows are separated via SL character second part of the fan string represents player on the move which can either be W or B for white and black pieces third part represents right for castling so K means that King has right to Castle King's side while Q means that King has right to Castle Queen side and uppercase letters are for white player and lower case are for black black player and if neither side have ability to Castle we need to return Dash fourth part is actually represent aasan Target Square so if there is no option to capture Pawn in aasan we return Dash and fifth part is actually represent half move clock which is the number of half moves since the last capture or Pawn Advan is made and finally last part represents full move number which is number of the full moves it starts at one and it is incremented after black move now create new file fan converter TS and declare fan converter class and now we are implementing method that converts current board position to Fan string that method takes couple of arguments first is board which is two dimensional Matrix of pieces or null also player color last move which is last move or undefined 50 move roll counter and finally number of full moves return type is string and here declar that fan string as an empty string that we need to return from the function now we need to look through the board and get first part of the fan string which represents position of the board and we are doing that from reverse because this is how fan is defined now declare fan row which represents row of board as fan string and initially set to empty string and also declare consecutive empty squares counter and set it to zero now we need to look through each square of the row if that square is empty we need to increment consecutive empty squares counter and continue but now if consecutive mty squares counter is different than zero in Fen row string append that value for consecutive mty squares counter by string and also we need to reset the counter and append piece fan character property to Fan row and now we also need to check if consecutive empty squares counter is different than zero which means that row ends with empty square and now also append consecutive empty Square counter as string to Fan row string and finally we need to update defend string so if I is equal to zero it means that it is last row fan rows are separated via slash character but that doesn't count for last row now we finished with first part of the fan string now Define player color so if player color is white then second part of the fence string will be W otherwise would be B now create private method castling availability that will tells us if white and black king have rights to Castle both King side and queen side so here we are passing board return type E string here declare casting possibilities function let's take scholar as argument and return string here declare castling availability as an empty string that we need to return in order for King to have ability to Castle it has moved property must be set to false so here firstly get King position X which depends on the color so if the color is white it is zero but if it's black it's seven and here get King from the board King is at King position X and for y4 now we need to check if King is actually instance of King and if hesm property is set to false now we need to get a rook position X which is same as king position X now declare King side Rook which is at Rook position X and seven for y and declare Queens side Rook which is at Rook position X and zero for y now we need to check if those Rooks are actually Rooks so firstly for King side Rook checking if it is instance of rook and if it has no property set to false if it does in Cas link availability append K also doing same for Queen side Rook upend lowercase q and finally if the color is white we need to present caselink availability in uppercase and finally we need to return casting availability Now call Cas possibilities function for both black and white king now we need to check if castling availability is actually empty string which means that neither side have right to Castle if it does we need to return Dash otherwise we are returning castling availability and as we declared casting availability method now we need to do same for ampasant possibilities so here declare private impossibility that takes last move as argument which is type of last move or undefined and also takes color which is color of the current player and return string so first we need to check if last move is undefined if it does return Dash otherwise we need to the structure properties from last move now we're checking if last move involved moving upon two squares so firstly check if p is instance of Pawn and if absolute difference between new X and previous X is exactly two which means that there is possibility to capture that pawn in unass some firstly declare a row of that Target Square which depends on the color so if the color is white it is six if it's black it's three and now we need to return that Target Square so first we need to Define columns in models. TS file which represents Columns of the board from a to H and here we need to return exactly coordinates of that square as strings so we are returning Columns of previous y plus string of row if that square doesn't exist return Dash and now we need to call casting possibilities and aasan possibility function in convert board to Fan so firstly a p to fend player which is second part of the fan string and fan parts are separated via space character so third part is actually casting availability string fourth part represents ampasant options fifth part represents 50 rule move counter multiplied by two and last part is actually number of full moves we are going to implement a method that detects if same position is occured three times during the game for the sake of that declare private property three fold repetition dictionary which is map that for each key have string and for Value has number and also declare private threefold repetition flag property which is initially set to false after each move we need to update threefold repetition dictionary for the sake of that Implement private update threefold repetition dictionary method that takes one argument and it is fan string and return type is void here declare threefold repetition fan key which represents first four parts of the fan string because if they are same it means that position is repeated and now we need to see if that key actually is in map now we are checking if threefold repetition value is undefined if it does we need to update threefold repetition dictionary map and for threefold repetition key set value of one and now if that key is present in map we are checking if this value is equal to two which means that now we are repeated position three times and set threefold repetition flag to true and we are returning from the function otherwise we need to set value for threefold repetition key to two now go to is game finished method and here we need to check if threefold repetition flag is set to true if it does we need to update underscore game over message property and return true so set draw do threefold repetition and return true we need to have some property that holds board position as f string for the sake of that declare privatecore board as fan property which is string and here I pasted F string for the start position of the game now instantiate private property fan converter we now need to implement getter for underscore Board San property now scroll down to move function where we need to update uncore board sent property after each move so here we are in move function cut this line and paste it at the end of the function and finally update uncore board s Spen property by calling convert board to Fan method of fan converter class and here pass chess board as first argument then player color then last move also 50 move rule counter and number of full moves and finally after we updated underscore board Spen property we need to call update refold repetition dictionary and pass underscore board s Spen as argument now we are going to repeat same position three times just to see if our method is working well and if we can see it does draw do three fold repetition rule message is displayed we are in chbo component TS file and now we are going to implement a method that will rotate the board so firstly declare public flip mode Boolean which is initially set to false and now Implement Flipboard method that takes no arguments and return type is void and it simply inverts the flip mode property now go to chessboard component HTML file Place Pawn promotion dialogue outside of the PR board div here declare button that flips the board and append click event and for function set flip board and now we are going to append rotate CSS class in case that flip mode is set to true we need to do that for div chessboard and also for each piece now in chessboard component CSS class firstly set width and height for chessboard class and also declare rotated class that simply rotate the board for 180° now we can see that Flipboard function is working I can successfully rotate the board open Terminal and generate computer mode component in modules folder and Skip test now generate stockfish service in computer mode folder and also skip tests now go to app module TS file and here import HTTP client module from angular common http now go in computer mode and in stock with service TS file inject HTTP through Constructor now let's take a look at stockish rest API website that we are going to use in order to be able to create mod toplay against computer firstly I need to say that while I was recording this tutorial version of this API has changed and now you don't need to create multiple requests to get best move evaluation and top Engine line initially in the video I used all API but later you can find part where I make certain changes and application is now compatible with the new version of API now if I click on send get request I receive response from the stockish and in docs we can get more information about that so here is the end point for this API method is get we need to send two parameters to that method first is Fen string that we want to anal second is depth for engine to go which is integer below 16 for Success we can either have true or false and if value is true we receive object that is look like this so first we have evaluation which is number that is evaluation of the current position that we get from stockfish mate is null unless there is force Checkmate in the given position best move is in this format where first part is best move string then we have space character second part is computer move where first two letters represent starting coordinates of that move and coordinates of that move and that second part can sometimes have five letters where last letter represents piece in which computer wants to promote his phone and finally we have top Engine line now create private readon property for API endpoint and here I pasted version of the old API then in computer mode folder create models. TS file and here I'm going to declare type for stockfish query params which is object that has fan as property which is type of string depth which is number and third parameter which is mode but later we will see that we don't need to have that mode property now go to stock with service TS file and we are going to implement method to get best move from the computer that method takes fan string as argument return type is observable of chess move which is custom type that we are going to Define now so now go in models. TS file and here declare that chess move type which is object that has previous X property which is number previous y as well as new X and New Y and also promoted piece which can be fan character or null now go back to stock P service and now import both chest move and observable here declare query param object that we are going to send with get request so pass fan for dep say 13 and for mode set best move because this is old API create HTTP params object and append query params to that now go to Model Ts file and here declare one more type which is stockish response that is object that has success of type bullion as property as well as data which is of string now we are sending get HTTP request now import switch map operator and we want to create new observable from that response now declare best move that we will get from response data but we need to split that via space character and to get second part of that and best move is type of string in format B6 B7 and we need to convert that string into chest type that's the reason why we are implementing now private move from stockish string method that takes one argument move of type string and returns chess move but because this response is in format B6 B7 we need to have another function that will convert that letter to y coordinate now we are implementing that method takes one argument of type string returns number and we need to subtract chart code of that string with Char code of lowercase a declare previous X previous X is actually number of second character in move string minus one here declare New Y and we also need to call conver column lad to y coordinate for thre ladder declare new X and finally if you remember best move from stock which can sometimes have five letters and that fifth letter represents promoted piece so we need to handle that situation as well that's the reason why we are implementing promote piece method that takes piece as argument of type string or undefined and returns than or null so if piece is undefined we are returning null but if piece is equal to lowercase n we need to return fan character Black Knight now we are assuming that computer plays with black pieces but later we are going to change that so if piece is B we need to return fan character black Bishop if piece is equal to R return fan character black rook and finally return fan character black queen now declare promoted piece and call promoted piece method for last letter of the stockish string and return chest move type now after we finished with move from stock with string we need to call that function in get best move so here we are returning new observable of result of the move from stock with string function now open computer mode component TS file and here computer mode component class extend chessboard component class and also for HTML template set HTML template of chessboard component and also use CSS from chessboard component and also we can delete just mode component CSS and HTML files now open Terminal and they want to install angular material choose custom team we don't want to use typography Styles and also don't include animations now generate now menu component and Skip tests now we are going to implement routing in app folder create a routes folder and in routes folder create up routing module TS file for now declare empty arrays of imports and exports then declare up routing module class and now declare routes we will have two routes first is to play against friend and second is to play against computer also adds title and now in Imports add router module for root route in exports add router module and here open up module TS file and in import include up routing module class now go to nav menu component open nav menu component TS file and here mark it as Standalone component and import mod toolbar module as well as bottle module now we need to import mod toolbar module and M bottle module from angular material Now open up module TS file and here we need to correct error because now menu component is now Standalone component and it to be included in Imports array and now go to nav menu component HTML file where we are going to declare basic HTML for nav menu component we will have two buttons and add router link to against friend mode and also add another but to play against computer also add router outlet and then in N menu component DS file we need to import router module and finally go to up component HTML file and remove up board component and append up nav menu component this is how our application looks now so we have now menu component and two buttons for play against front and play against computer but for now play against computer component is same as play against friend component and now we are going to work on that now go to computer mode component TS file and here we want to inject stockfish service through Constructor also we need to call Super Constructor now Implement NG on it now we are going to subscribe to chessboard State behavioral subject from chessboard service because after each move is played we want to see if computer is on move and then to call get best move method from stockfish service but first open chessboard component TS file and Mark chessboard Service as protected we receive fan as response and now we need to check which player is currently on move this is second part of the fan string now if player is white we need to return from the function because we initially said that computer is always playing with black pieces and now we are going to call method to receive best move from stockfish string pass F to get best move function and this type is observable of chess move so now we need to convert that observable to promise using first value from rxjs operator and also Mark that function as a sync now we are going to destructure stockfish move before we call update board method in computer mode component we need to mark it as protected and then we are going to call update board method and pass previous X previous y new X New Y and promoted piece then declare private subscriptions property that is going to hold all of the subscriptions that we declared in NG onit method add Jabo State subscription to subscriptions now Implement on destroy life cycle hook and in Ng on this dry method we are going to unsubscribe from those subscriptions we are in computer mode component and after I play Move I receive move back from computer and now as you can see everything works fine now open Terminal and generate play against computer dialogue which is component that will all allows us to choose to play with black or white pieces against computer and also skip tests now go to play against computer dialog component Mark component as Standalone and here import mat dialogue module mat button module and common module then declare public property stockfish levels that represents different levels of stockfish strength also declare current stock which level that we choose which is initially set to one now we are going to implement HTML for play against computer dialog component now declare title for dialogue then we need to display stockish levels from which we can choose to play now we are looking through all stockish levels add class strength de also add button that is going to close the dialogue now go to app module and play against computer dialog component is Standalone so include it in Imports array open play against computer dialog component CSS file and here I pasted code for CSS that you can find on GitHub repository then open play against computer component HTML file and here I'm going to create two images for black and white king so when I click on one of those image I can choose color for my pieces also set dragable attribute to false well to nav menu component DS file and here we are going to implement a method that will open the dialogue once we clicked on play against computer mode button so here import M dialog module then go to now menu component HTML file remove router link and here add click event and add play against computer function that takes no arguments now we are going to implement that method return type is void when need to inject dialogue through Constructor and open the dialogue in play against computer method correct typing mistake for CSS class dialog component is working well but now we need to create functions to choose level of stockfish and also to choose player color now declare click event for stockfish levels select stockfish level method takes level as argument now we are going to implement that method return type is void and here update stockfish level property now go back to HTML file and here we are going to add CSS class that will signalizes if that level is selected so app selected CSS class if level is same as stockish level then declare click event for both Kings we're going to have play function that takes one argument which is either W or B now let's Implement that method return type is void and here we need to go to Model Ts file in computer mode component and declare a new type which is computer configuration which is object that holds two properties and first is color of type color and also level of stockish which is type of number but now we also need to map that levels to stockfish depth for the sake of that we declare constant stockfish level which is read only object and here just map levels to stockfish depth go to stock with service TS file and here declare public behavioral subject property that is of type computer configuration and for initial value set the color is black and for level set one now open play against computer dialog component TS file we need to inject stock with service through Constructor also we need to inject dialog component and now when we click play function we need to close all dialogues computer configuration behavioral subject needs to emit new value once we click play function here we are setting value for color here I have wrongly typed color white but should be color black if we choose to play with white pieces that mistake will be corrected later and for level set stockfish level also we are injecting router so once we click on play function we should navigate that to computer mode component and also create click event to close the dialogue theog is closed by default but we are going to navigate to play against friend component if we choose to not play against computer then Implement close dialogue method this takes no arguments and return type is void and we simply need to navigate to play against friend component then go to computer mode component TS file and here we are hardcoded that computer is always playing with black pieces now we are going to change that and now we are checking if player is different than computer configuration value for color if it does we need to return from the function because this is not computer move if we choose to play against computer with the black pieces I want to rotate the board so black pieces would be closer to us here the declare computer configuration subscription and they want to subscribe to computer configuration behavioral subject and now we need to check if computer configuration value for color is white if it does we need to call Flipboard method also we are going to append that computer configuration subscription to subscriptions property then go to stockish service TS file and here in get best move method you see that we hardcoded 13 but rather we are going to pass value from computer configuration behavioral subject for level now go to chessboard component TS file and Mark private tboard property as protected then go back to computer mode component TS file and here we need to check if game is actually over so if game is over we need to unsubscribe from chessboard State subscription and also to return because we don't want to generate computer move once game is finished then go to play against computer dialog component and fixed bug that we said earlier for computer color finally go to stockfish service TS file where we need to handle last bug you can see that private promote piece method is only handling situations when computer is playing with black pieces that's the reason we have now computer call variable that we get from computer configuration behavioral subject and now we need to check if computer color is white and then to return fan character white piece otherwise we are returning fan character black piece now we need to correct that for each Knight Bishop Rook or queen promotion now do same for Rook and finally for Queen now we fixed method we are going to make certain changes in order to make application compatible with new API firstly change API end point then remove mode property from stockish params object and also remove data from stockish response and instead of data we will have evaluation property which is type of number or null mate which is also number or null best move of type string continuation of type string then in stock with service TS remove mode and here we need to access response best move property and finally go to play against computer dialog component is file and here instead of passing stockfish level we need to pass stockfish levels which is map and access here stockfish level we can see that our application works well I can select different level for stock strength and also for color board is rotated automatically if I choose black pieces now open models. TS file in ch logic folder and here declare enumeration for different move types we have capture cast Link promotion check checkmate and basic move and append new property in last move object which is move type of type set of move type enumeration then open chessboard TS file scroll down to move function and you will see an error because last move now has one additional property which is move type so we are going to declare move type as an empty set of move type enumeration and now if piece is taken it means that capture is happening so append capture to move type set also add move type for last move object and here if promoted piece type is different than null it means that promotion is happening so also upend promotion in move type and also we need to pass move type as handling special moves argument go to handling special moves function and here if castling is happening at castling and also if aasan is happening add capturing again go to move function and here we need to check if if Checkmate or check is happening so if is in check property of check State object is set to true and if player doesn't have any save squares it means that is a Checkmate otherwise it is a check position and also if move type sa doesn't have any elements we need to append basic move now go to Model Ts file where we are going to declare type that is responsible to hold list of previous moves move list type is array of tles and first element of tle is string and and second is optional string now declare game history type which is array of objects and that object has last move property which is type last move or undefined as well as check state property of type check State and board which is two dimensional Matrix of f character or null elements then go to chessboard TS file here declare properties for those type so firstly declare privatecore move list which is of type move list and initial value is Mt array declare underscore game history property of type game history and we are going to assign value to that in Constructor now let's Implement gets for both last move and game history properties now we are going to implement a method that is responsible for storing move so here Implement private store move method that takes no arguments and return type is void now the structure properties from last move object declare piece name so in case that piece is Pawn piece name is empty string otherwise it's piece fan character property now declare move which is initially empty string and here we need to check if move type from last move object contains castling which signalizes that castling is happening if it does we need to check if it is actually King side or queen side castling in case that current Y is bigger than previous y it means that this is kingside castling and this is notation for kingside castling and for Queen side castling otherwise for move out piece name and also include initial coordinates of the piece so this is long notation later we will make certain changes and make it shorter or also we need to check if capture has happened if it does append X signed to move also include end coordinates we need to check if promotion is happening so upend promot Ed piece which is type fan character or null as stor Mo function argument and here if promoted piece is different than null append equal sign plus promoted piece to uppercase finally we need to check if check or Checkmate has happened so here we are checking if check is happened if it does append plus sign to move stre and if Checkmate has happened aen hash symbol to move now we need to store that move in move list property so here we are pending move for right and now for black then we are going to implement a method to update game history takes no arguments and return type is void now we need to update underscore game history property so for both board we are creating deep copy of chessboard view property now we need to create deep copy of check State object and same for last move but first we need to check if last move is undefined then go to move function and here we need to call stor move method and update game history method now open Terminal and generate move list component in modules folder and also skip tests go to move list component TS file Mark component as Standalone and now import common mode module mat button module and mat icon module go to move component HTML file and I'm going to paste basic HTML for navigating between moves so we're having navigate to First move to move before to move next and to last move also we need to correct error because move list is Standalone component and needs to be included in Imports array go back to move list component TS file and here declare input property move list which is the required property then open mov this component HTML file and here we going to render those moves from move list so create div and add class move list now we need to Loop through each move of move list Al declare move number which is index and aend class of Row first append white move and then we should check if black has play if it does we also need to append black move and we give class move for that div and also I'm going to paste CSS which you can find on GitHub repository then open transboard component TS file and here declare getter for move list now open tboard component HTML file and here we want to upend move list component and also pass move list property play couple of moves just to see how our move list component looks so far so this is long notation later we will change it to short notation but also we need to implement functions so each time I click on move in M list component it should render me that position and also to navigate using arrows in chbar component TS file declare getter for game history and declare public property game history pointer which represents move that we are currently on in move list component and initially set to zero so scroll down to update board method and each time we call move function we need to increment that game history pointer now go to Mo list component TS file and add another input required property which is game history pointer and initially should be set to zero here I have wrongly set it to one but we'll correct that then go to chbar component HTML file and add input binding to game history pointer then go to move this component HTML file and here also add move number which is move number + one and also we need to check which move we are currently on and to add class current move so here we are checking if move number * 2 + 1 is equal to game history pointer and for black pieces we are checking if move number time 2 + 2 is equal to game history pointer now we successfully added current move class go to move this component TS file and declare one more input property which is also required and it is game history length which is length of game history property of chessboard class and has initial value of one and now we need to make binding for those property so go to chessboard comp component HTML file and add input binding for game history length and say that this is game history length we are going to disable navigation buttons in move this component so disable navigating to initial game position if game history pointer is equal to zero also disable navigating to move before if game history pointer is equal to zero disable navigating to next move if game history pointer is same as game history length minus one and do the same for navigating to last move finally we need to declare output property which is event emitter that will emit new value after we click on certain move in move list component and that emitter will trigger function in chessboard component that will show us position of the board when that move has has been played so here we declared show previous position event output property which is event emitter of type number and here declare Show preview position method that takes move index as argument of type number return type is void and it simply emit new value for show previous position event amiter and now in move list component HTML file we need to call show previous position method for each of the navigation buttons and for both black and white moves in move list so firstly declare click event for navigating to zero move also to navigating to move before and pass for argument game history pointer minus one to navigate to next move add click event to navigate to game history pointer plus one and to navigate to last move call show previous position method for game history length minus one and now also call it for both black and white moves in move list call show previous position for move number time 2 + 1 if the move is white and call show previous position for move number * 2 + 2 for black move then go to chessboard component TS file and here declare show previous position method this Stakes move index as argument of type number and return type is void and here we need to update check state board and last move property and first we need to destructure them from game history at move index and now update chessboard view check State and also last move and finally update game history pointer and finally add output binding to up move this component now let's see how Mo list component looks now initially every navigation button is disabled and after playing couple of moves you can notice that buttons that navigates to next move and to the last move are disabled and also if I click on certain move in move list Position will be displayed when that move has been played and this is same for navigation buttons now we are going to implement a method that will convert long chest notation in short notation first we need to remove coordinates of initial Square then here Implement private starting piece courts notation which takes no arguments and turn string firstly we need to destructure properties of last move object then we need to check if current piece is instance of Pawn or King if it does we need to return empty string because we have only have one king and for Pawn we are handling that situation later and now we need to have array of coordinates that represents all pieces of the same type that have same Target Square as piece that just made the move so here for X add previous X and for Y at previous y now we need to look through the board and see which piece of same type has exactly same Target Square as initial piece declare piece on that square which is either piece or null and now if piece is null or X and Y are same as current X and current y this means that this is the same piece and we need to continue and now if piece actually has same F character as current piece we need to check if that piece had same Target Square now let's get save squ for that piece from underscore save squares property now we need to look through that save squares and see if that save squares contains coordinate that has X which is equal to current X and Y which is equal to current y and if it does we need to append those coordinates in same pieces qut if same pieces cords array has length of one it means that there are no pieces of same type that had same Target Square as piece that made the move hence we need to return empty string and now declare two more sets and those sets are important because from them we can conclude how many same type pieces that had same Target Square shares both X and Y coordinates so firstly we declared pieces file set that represents pieces that shares ycoordinate going to do same for x coordinate pieces rank set and now we need to check if pieces file size is same as same piece cords length if it does it means that all of the pieces are on different files hence we are returning columns at previous y index also I'm going to leave comment for that case now we need to do the same for pieces r so if pieces rank size is same as same pieces quarts length it means that all of the pieces are on different ranks for example 1 2 3 and so on hence we need to return string from previous x + one also I'm leaving comment for this one and finally if none of these if statements returns to true we need to specify both column and rank also I'm leaving comment for this case so that's the situation where multiple piece shares both Rank and a file now go to store move function and here call starting piece qus notation method also here when we are checking for capturing we need to see if Pawn is pieced at last move because if it does we need to include its previous column that's because in starting piece course notation method if current piece is Pawn we returned empty string and now as you may all already noticed there is a bug in this approach because in starting piece cord notation method when we get save squares for piece we use it save squares after they've been calculated for next player in move function as you can see right here so we called store move function after save squares are being calculated so we need to store save squares in some variable and update uncore save squares property after we called store move function and also in stor move function piece name f character should be uppercase now we are going to see if short notation method is working play couple of moves and now we will get in position where both B and F Knights can go to same square and we specified that this is B Knight so method is working we are in Wikipedia page that talks about chest notation and they provide some example where multiple pieces share either column rank or both and we are going to replicate that position so in our chess application we are playing same moves as they were playing and everything works for Queen We need to specify both initial column and the rank because multiple Queens share both Rank and a file now we are going to emit a sound after each move is played so we have sound folder that represents different sounds of each move type in assets folder and now open chessboard component TS file where we are going to implement a method that will emit new sound after each move here Implement private move sound method and declare basic audio element and for each Source set source of basic move that private method should take one argument and this is move type which is set of move type enumeration now we are checking if move type set contains promotion if it does we need to update source for move sound now we are going to check for both G link and capturing now we are checking for both Checkmate and check they have higher presence than promotion capture and cting sound here correct mistake and now finally we need to emit that sound in move sound function I have typing mistake because I double checked for checkmate should be for check you can see that we manually update check State and last move property in show previous position method and we are doing same in update board method but rather we are going to create method that marks check State and last mole so here implement private Mark last move and check state that method takes last move which is type last move or undefined as well as check state of type check State and return type is vo and here we are assigned last move to last move property as well as check state to check state state property and now we are going to a it sound so if last move is different than undefined we are calling move sound function and here pass move type from last move property and if last move is undefined it means that we are going back to first move so here just emit new set of Base move now we need to call Mark last move and check State method so here in update board pass chessboard last move and chessboard check State properties and do same in show previous position method pass last move and check state that we are D structured from game history now as you can hear move sound is emitted after each move it is working for basic move and for capturing as well as for check and for cast link also if I navigate between moves in move list component move sound is played also when I promote my Pawn different audio is emitted here is the sound of Checkmate now we are going to create a method to navigate between moves in MO list component using left and right arrow key so firstly Implement on init life cycle hook and here declare key event subscription so we are getting event from keyboard for whole document and even that we're listening is key up now we need to filter those events so we are only listening to right and left arrow keys now we are going to Define functionalities in top operator so we need to import it from rxjs and here declare switch statement so if we have Arrow right we are checking if game history component is same as game history length minus one in this case we cannot go any further so we need to return otherwise we need to increment game history pointer for left Arrow we need to check if game history component is equal to zero in that case we need to return otherwise we need to decrement game history pointer and finally we need to call show previous position method and pass game history pointer also we need to subscribe to that from event and we need to Define private subscriptions property that is going to hold all of the subscriptions defined in chessboard component TS file now add key event subscriptions in subscriptions property also we need to implement on destroy life cycle hook and here we need to call subscriptions unsubscribe now go to computer mode component TS file and here we need to call Base NG on it from chessboard component class also we have same subscriptions property so we need to rename it to computer subscriptions also we we need to override NG on in it and NG on Destroy in computer mode component class and also call Super NG on Destroy as you can see we Implement navigating between moves in move list component using arrows well so everything is working
