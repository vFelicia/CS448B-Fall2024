With timestamps:

00:00 - the Import and Export statements allow
00:03 - you to break up your code in different
00:05 - files or modules though this is an
00:07 - official es6 feature it is not
00:09 - implemented in any browsers natively at
00:12 - this time but it is implemented in many
00:15 - transpilers such as Babel and webpack
00:18 - the export statement is used to export
00:22 - functions objects or Primitives from a
00:24 - given file or module you can have
00:26 - multiple named exports in one file like
00:29 - this so imagine this is all one file li.
00:33 - JS and these are all the exports we can
00:35 - export a constant we can export a
00:38 - function and see these all have
00:40 - different
00:42 - names then you can import the functions
00:45 - objects or Primitives in another file so
00:47 - here we're going to import part of this
00:49 - module in another file named
00:52 - main.js this can be done individually or
00:55 - alog together here we're importing the
00:57 - exports individually we're importing
00:59 - just square and diag so here we're not
01:02 - importing the square root constant up
01:04 - here however you can also import the
01:07 - complete module so this is how you would
01:09 - do that to import the complete module
01:11 - you just do import Aster as lib from lib
01:15 - so now instead of calling the functions
01:18 - directly with square and diag we're
01:20 - going to do lib do square li. diag but
01:24 - now we'll also be able to directly
01:26 - access the square root constant by doing
01:28 - lib do square root you can also import
01:31 - with different names so if you have a
01:32 - really long function name you just put
01:35 - import really really long module member
01:37 - name as short name now you can just
01:41 - access it by just typing short name
01:42 - instead of the much longer name that it
01:45 - was originally in the other file now
01:47 - what I've shown you so far are called
01:49 - named exports because we're exporting
01:52 - things with specific names square root
01:54 - export square there's another export
01:57 - syntax called export default
02:00 - usually you're going to use this syntax
02:02 - if only one value is being exported from
02:05 - a file it is also used to create a
02:07 - fallback value for a file or module with
02:10 - export default you can only have one
02:12 - value be a default export in each module
02:15 - or file at the beginning of your file
02:18 - we're saying this is my funk. Js you're
02:20 - going to put export default and then the
02:23 - function or you can put a class here and
02:26 - then the entire function or class you
02:28 - want to export go goes right in these
02:30 - curly braces so this is going to be your
02:33 - whole file with all the code right in
02:35 - here one thing to remember is that you
02:37 - don't put a semicolon at the end and
02:39 - then when you're importing it so we're
02:41 - imagining this is another file called
02:44 - main.js and when you import it's a
02:46 - little different because when you're
02:48 - importing a single default export there
02:50 - are no curly braces around the name so
02:53 - I'm going to import my funk and you can
02:56 - see that's different from up here where
02:59 - you put curly braces around the names of
03:01 - what you're importing also you can see
03:04 - the name my funk is not up here so we're
03:06 - actually giving it a name in this other
03:08 - file and then we can call that function
03:10 - here well thanks for watching my name is
03:13 - boars don't forget to subscribe and
03:16 - remember use your code for good

Cleaned transcript:

the Import and Export statements allow you to break up your code in different files or modules though this is an official es6 feature it is not implemented in any browsers natively at this time but it is implemented in many transpilers such as Babel and webpack the export statement is used to export functions objects or Primitives from a given file or module you can have multiple named exports in one file like this so imagine this is all one file li. JS and these are all the exports we can export a constant we can export a function and see these all have different names then you can import the functions objects or Primitives in another file so here we're going to import part of this module in another file named main.js this can be done individually or alog together here we're importing the exports individually we're importing just square and diag so here we're not importing the square root constant up here however you can also import the complete module so this is how you would do that to import the complete module you just do import Aster as lib from lib so now instead of calling the functions directly with square and diag we're going to do lib do square li. diag but now we'll also be able to directly access the square root constant by doing lib do square root you can also import with different names so if you have a really long function name you just put import really really long module member name as short name now you can just access it by just typing short name instead of the much longer name that it was originally in the other file now what I've shown you so far are called named exports because we're exporting things with specific names square root export square there's another export syntax called export default usually you're going to use this syntax if only one value is being exported from a file it is also used to create a fallback value for a file or module with export default you can only have one value be a default export in each module or file at the beginning of your file we're saying this is my funk. Js you're going to put export default and then the function or you can put a class here and then the entire function or class you want to export go goes right in these curly braces so this is going to be your whole file with all the code right in here one thing to remember is that you don't put a semicolon at the end and then when you're importing it so we're imagining this is another file called main.js and when you import it's a little different because when you're importing a single default export there are no curly braces around the name so I'm going to import my funk and you can see that's different from up here where you put curly braces around the names of what you're importing also you can see the name my funk is not up here so we're actually giving it a name in this other file and then we can call that function here well thanks for watching my name is boars don't forget to subscribe and remember use your code for good
