With timestamps:

00:00 - simple pong and Python 3 for beginners
00:02 - part 1 let's take a look at what we're
00:03 - gonna be building today
00:05 - classic pong game so we've got a paddle
00:08 - on the right we got a paddle on the left
00:12 - and we've got a ball in the center okay
00:16 - yeah the ball goes off the screen and
00:22 - yeah opposite player gets a point then
00:24 - the ball continues okay so that is what
00:27 - we're gonna be working on so let's get
00:29 - started today we're gonna be doing this
00:32 - by using Python of course this is
00:33 - written in Python 3 but it should work
00:36 - in Python 2 as well I don't think
00:37 - there's any Python 3 specific code in
00:40 - this particular tutorial so we're gonna
00:43 - be building this on top of the turtle
00:45 - module I'm turtle module it was like
00:47 - nice little module it lets you do some
00:49 - basic graphics it's great for getting
00:51 - started with games a lot of a lot of
00:53 - tutorials use PI game which is amazing
00:56 - it's got a lot of great features but for
00:58 - beginners this is a lot simpler and it's
01:01 - built-in you don't have to install it
01:02 - like you do with Pi game so now that
01:05 - I've got my turtle imported the module I
01:08 - need to create a window so I'm gonna
01:10 - call it WN you call twin WI N or
01:13 - whatever you want to call it and but I
01:16 - use W N and it's turtle dot screen
01:18 - notice the S is capitalized it's very
01:21 - important and I'm gonna give it a title
01:24 - and I'm gonna call that pong buy at
01:28 - Tokyo EdTech that's my twitter handle
01:31 - you can follow me there you can
01:33 - certainly subscribe here on YouTube and
01:35 - and follow any new tutorials I have and
01:38 - do feel free to you know leave comments
01:41 - I do take keep a close eye on things and
01:43 - if you have any trouble let me know and
01:46 - I want to change the background color of
01:48 - the window to black classic pong and I
01:52 - want to change the size of the window
01:53 - and I want the width to be 800 and I
01:56 - want the height to be 600 pixels I'm
02:03 - gonna do something called wind tracer
02:05 - this one's a little bit hard to explain
02:06 - but basically what that does is it
02:08 - actually stops the window from updating
02:10 - and so we have to manually
02:13 - update it what this lets us do is
02:14 - basically speed up our our games quite a
02:17 - bit if we didn't do that things would
02:19 - run much much slower so every game meat
02:22 - needs something called a main game loop
02:24 - and this is where basically all the meat
02:26 - and potatoes of your your game goes to
02:29 - so we're gonna make a loop while true
02:33 - and I'm gonna put four spaces there you
02:36 - can use tabs but spaces are recommended
02:39 - but whatever you use make sure that you
02:41 - are consistent you can't mix spaces and
02:43 - tabs and then we do wind update and what
02:47 - that does is every time the loop runs it
02:50 - updates the screen okay just a quick
02:52 - note this this program is written for
02:54 - beginners so I'm not really using
02:56 - object-oriented programming I'm not
02:57 - really using classes except as it
02:59 - relates to the turtle module this is
03:02 - basically a really straightforward an
03:04 - old-school style of programming
03:06 - methodology so let's run that and see
03:09 - how it goes and what we should have is
03:13 - we have our title black background it is
03:18 - 800 wide by 600 tall zero zero is at the
03:21 - center so plus 300 - 300 + 400 - 400
03:26 - remember those numbers as they'll come
03:28 - in handy in our next few tutorials
03:35 - part two of simple pong in Python 3 for
03:38 - beginners in this part of the tutorial
03:40 - we're going to add our paddles to the
03:42 - screen and we're going to add the ball
03:44 - to the screen as well so let's get
03:47 - started with that so basically what we
03:50 - have in pong is we have pad I'm gonna
03:52 - call it paddle a we have paddle B and we
03:58 - have a ball
03:58 - so those are the three items that we
04:01 - need to add to the screen now as I
04:03 - mentioned earlier in the previous video
04:04 - we are using the turtle module to you
04:08 - know add our graphics and to open our
04:10 - windows and things like that it's very
04:11 - very convenient it works great for basic
04:14 - games a lot of people use Pi game which
04:16 - is great but for simple games this is
04:18 - probably an easier way to get started
04:20 - so everything in our game needs a name
04:23 - so I'm gonna call it paddle a very
04:26 - original and it is actually going to be
04:28 - a turtle what's known as a turtle object
04:31 - so to do that it's turtle dot capital
04:34 - turtle notice the capitalisation small t
04:36 - because that is our module name capital
04:39 - T because that is the class name now as
04:42 - this tutorial is aimed at beginners I'm
04:43 - not going to talk about classes I'm not
04:46 - writing it object-oriented style I'm
04:47 - just writing it in you know functional
04:50 - style although there are some object
04:52 - kind of patterns here you'll you'll see
04:54 - but for beginners don't worry about that
04:57 - stuff for now so then what I want to do
04:59 - is paddle a I need to set the speed now
05:03 - this is not the speed that the paddle
05:06 - moves on the screen this is the speed of
05:08 - animation this is just something we need
05:10 - to do for the turtle module and what
05:12 - this does is it sets the speed to the
05:14 - maximum possible speed otherwise things
05:17 - would be really slow we want to give our
05:19 - paddle a shape and there are a few
05:23 - built-in shapes and we're gonna use
05:25 - square in this case okay there's Circle
05:29 - Square
05:31 - let's your Circle Square triangle a few
05:33 - others we're gonna give our paddle a
05:36 - color and or you can call it white
05:41 - because that's what pong looks like and
05:44 - we're going to
05:48 - basically do something called pen.up
05:52 - turtles by definition what they do is
05:55 - they draw a line as they're moving we
05:57 - don't need to draw a lines because
05:58 - that's not what this program does so we
06:00 - do the pet up and I want my paddle a to
06:04 - start at minus 350
06:07 - that's an x-coordinate and zero and the
06:10 - vertically centered in the screen so in
06:12 - our game zero zero is in the middle -
06:15 - 350 + 350 so I'm gonna go ahead and run
06:18 - that and see what it looks like so far
06:23 - okay so this is our left paddle now you
06:28 - know you've played pong you've seen the
06:29 - the demo from the first video clearly
06:32 - it's not the right size so what we can
06:34 - do in our program is this now just just
06:40 - for your information by default that
06:42 - shape is 20 pixels by 20 pixels so it's
06:45 - 20 pixels wide by 20 pixels high so what
06:47 - we're gonna do is we're going to stretch
06:51 - the shape so we use the shape size
06:54 - method you can see I'm using Visual
06:57 - Studio codes very good program even on a
06:59 - Mac and it tells you you know what you
07:01 - can do stretch with stretched lengths
07:03 - etc etc so what I want to do is I want
07:07 - to stretch the width by 5 so that's me 5
07:15 - times 20 so that'll make it 100 tall and
07:19 - then by 20 wide and stretch lame is
07:24 - gonna be 1 we're gonna keep it at the
07:25 - default so let's save that and run it ok
07:32 - so you see now we've got a paddle over
07:34 - here 20 pixels wide by 20 pixels high
07:37 - okay now
07:39 - so that's paddle a now I'm kind of lazy
07:42 - guy so I'm just gonna copy this so what
07:46 - I always recommend if something's
07:47 - similar similar styles or similar you
07:49 - know functions you know get it working
07:52 - right once and copy it paste and just
07:55 - make the necessary changes so now that
07:57 - we've done that we just need to change
07:58 - that to be
08:00 - so if you keep consistent names it'll
08:02 - really help your programming in this
08:03 - case we want it to go on the right side
08:05 - of the screen so that's gonna be plus
08:07 - 350 so I'm gonna run that and test it
08:11 - and testing your program is very very
08:13 - important at each stage a lot of
08:15 - beginners I don't know why they insist
08:17 - on typing the whole program in and then
08:19 - trying to test it and you'll never be
08:21 - able to figure out where the problems
08:22 - are especially as a beginner unless you
08:25 - do it step by step like this so we got
08:27 - our left paddle we got our right paddle
08:29 - so I just call it I said paddle a paddle
08:31 - beam and then the last thing we need is
08:34 - gonna be our ball so I'm gonna just go
08:37 - ahead and copy this because it's
08:39 - basically the same thing I don't need it
08:42 - stretched I want to keep it the original
08:43 - size and I want it to start in the
08:47 - middle of the screen and I'm gonna call
08:49 - it ball instead of paddle so you see
08:52 - once if you do it like this method if
08:54 - you get everything working correctly
08:56 - there's no errors and you tested it then
08:59 - you just copy and paste it really speeds
09:01 - up your programming okay so I'm gonna
09:03 - run that one more time okay you can see
09:06 - we've got our left paddle paddle a our
09:08 - right paddle paddle B and we've got our
09:11 - ball which is starting in the center so
09:13 - we're off to a good start
09:18 - three let's take a look at what we have
09:20 - so far okay so we've got our pong window
09:23 - we've got our paddle a on the left
09:25 - paddle B on the right and we've got our
09:27 - ball in the middle so in this lesson
09:29 - we're going to learn how to move the
09:31 - paddles using the keyboard okay so what
09:34 - we need to do is to basically we're
09:37 - going to create some functions okay and
09:39 - if you haven't ever used functions
09:42 - before a function is basically kind of a
09:47 - piece of a program that does a something
09:50 - that's been defined for it so so in this
09:53 - case we want to move paddle a up we want
09:55 - to move paddle a down we move paddle
09:57 - beat up when we've paddled B down so to
10:01 - use functions you first need to define
10:02 - your function and I'm going to call this
10:05 - first function paddle a up okay you
10:09 - recall in the last video I talked about
10:11 - doing one function at a time or one
10:13 - piece at a time getting that working
10:15 - perfectly and then you can copy and just
10:17 - make the necessary changes so that's
10:18 - what we're gonna do here okay so paddle
10:21 - a up so to move the paddle what I need
10:25 - to do is I need to know the current y
10:27 - coordinate so what I'm gonna do is gonna
10:30 - say y equals paddle a dot y core okay
10:35 - now this part here paddle a is the name
10:37 - of the object we created here we called
10:39 - it paddle a and the dot Y core method is
10:44 - from the turtle module okay what that
10:46 - does is it returns the y coordinate and
10:48 - so we're just assign that value to a
10:51 - variable called Y which makes sense okay
10:54 - so we've defined the function using the
10:56 - de f keyword you notice we have a I
10:59 - guess it's the tab in this case well
11:02 - it's it's a space we'll see I might get
11:05 - an error there and that's maybe not a
11:07 - second if we do and it's supposed to be
11:10 - set to automatically change the spaces
11:11 - but I think it's not set that way so
11:12 - I'll leave it the way it is so then what
11:14 - I want to do if I'm going to go up on
11:16 - the screen it's this way so up so Y
11:21 - increases as we go up it decreases as we
11:24 - go down so I'm going to do is I'm going
11:26 - to add 22 Y and this is the way you do
11:30 - that you say Y plus
11:32 - equals 20 so that will add 20 pixels to
11:36 - the y-coordinate okay so now notice
11:38 - we've just calculated the Y's so then
11:40 - what we actually have to do is paddle a
11:42 - set Y to the new Y so now having a
11:51 - function doesn't actually do anything
11:54 - until we call the function so the
11:57 - function has just been defined but we're
11:59 - not using it so what would you do is we
12:01 - do something called a keyboard binding
12:06 - okay so in the turtle module we need to
12:10 - do W n so that was our window and listen
12:13 - this tells it to listen for keyboard
12:16 - input then we're going to use the on key
12:20 - press method okay and watch what I do
12:25 - here paddle a up W okay so let me
12:30 - explain what that does so this line here
12:34 - it tells the program to listen for
12:37 - keyboard input this line here says when
12:41 - the user presses W notice that the
12:43 - lowercase W so if you have caps lock on
12:45 - it won't work call the function paddle a
12:48 - up okay here's our function paddle a up
12:51 - paddle a up says get the y-coordinate
12:55 - add 20 to the y-coordinate and then
12:58 - actually set the y of the paddle to the
13:02 - new y-coordinate okay so let's test that
13:05 - and see what happens okay so I'm gonna
13:12 - hit the W key okay so you can see how it
13:15 - is moving up okay actually move it off
13:18 - the screen okay so now that we've gotten
13:21 - that working okay
13:23 - what I can do is I can copy that okay
13:30 - and I'm going to change this to paddle a
13:31 - down so instead of adding 20 I'm going
13:37 - to subtract 20 and then I need to do a
13:40 - key binding for that as well so I'm
13:43 - gonna copy and paste that so that's
13:45 - gonna be paddle a
13:46 - down and in this case I'm gonna use the
13:48 - S key you can use whatever key you want
13:51 - but I just chose nose cuz usually it's
13:53 - WASD on the left and the arrow keys on
13:55 - the right so again I've done one thing
13:59 - I've changed it now I'm gonna test it
14:03 - okay so W s okay so everything's working
14:08 - exactly as expected okay so then what
14:12 - I'm gonna do is now I've got both of
14:13 - those working I'm gonna copy it and I'm
14:18 - gonna do paddle be glad I'll be paddle B
14:23 - so if you keep your naming consistent it
14:27 - makes it very very easy to do what I'm
14:29 - doing which is to be lazy and just use
14:31 - copy and paste and then here now for
14:38 - paddle B I'm gonna use the arrow keys
14:41 - and then for the up arrow it's it's a
14:44 - little bit different use up notice it's
14:46 - capitalized and down is the down arrow
14:49 - okay so yeah I made a couple changes I'm
14:52 - gonna test my code okay so WS on the
14:56 - left up and down on the right and voila
15:00 - there you have it
15:01 - hey stay tuned next next lesson we're
15:03 - gonna get that ball moving
15:09 - for moving the ball this is really kind
15:12 - of the meat and the central kind of part
15:15 - of the program this is where we actually
15:16 - get the ball to move so we need to get
15:20 - it to move we need to get it to bounce
15:22 - off the top and the bottom and we need
15:24 - to get it to bounce off of the paddles
15:26 - and so I'm going to show you how that's
15:27 - gonna work because we have our paddles
15:30 - can move and but the ball does not yet
15:33 - so let's say I get started with that and
15:35 - so what I want to do is with the ball is
15:40 - I want to separate the balls movement
15:43 - into two parts and X movement and a Y
15:46 - movement so what I'm going to call that
15:49 - I'm gonna say ball dot DX D means Delta
15:53 - or change you can even call it X speed
15:56 - or whatever you want to but DX works
15:58 - very very well now on my computer I've
16:01 - found that too the number two works very
16:03 - very well my computer at home actually
16:06 - it was like 0.1 it's much much faster I
16:09 - don't know quite know why seem I have to
16:11 - play with the numbers here to get it you
16:14 - know to where you feel the game should
16:15 - be so so DX and dy equals two so what
16:21 - that means is every time our ball moves
16:25 - it moves by two pixels so since X is
16:28 - positive it's going to move to the right
16:30 - two and since Y is positive it's gonna
16:32 - move up two so it'll be kind of moving
16:33 - up and diagonally okay so to get that to
16:36 - actually happen we have to go inside the
16:39 - main game loop okay and in here I'm
16:45 - gonna say move the ball so what we need
16:48 - to do is ball dot set X and what we want
16:54 - is the current x coordinate so I'm just
16:57 - basically kind of combining what I did
16:59 - up here into one line plus ball DX okay
17:06 - so the ball starts at zero zero so zero
17:08 - X so the first time through this loop
17:10 - it's gonna go to then the next time to
17:14 - the loop is gonna go to two two two two
17:16 - so depending on your computer speed it
17:18 - could just fly off the screen or it
17:20 - could it can go a little bit slower so
17:22 - again you'll have to play around
17:22 - that a little bit so that I'm gonna say
17:25 - ball dot set why and I basically the
17:30 - same thing I can kind of copy and paste
17:31 - it but I should have done and ball dot
17:35 - DUI so I'm gonna say that and I'm gonna
17:41 - test to see what happens you see some
17:43 - red lines here I think there's gonna be
17:44 - maybe we problem yeah so I'm gonna run
17:48 - that and explain why it's not gonna work
17:50 - okay so you see here I've got an error
17:52 - and this is something again beginners I
17:55 - don't know why do not want to read error
17:57 - messages the error messages basically
17:59 - tell you what's wrong
18:00 - and so you see here's this tab error
18:02 - inconsistent use of tabs and spaces okay
18:05 - so I mention this in an earlier video so
18:08 - here I used four spaces but here it's a
18:11 - tab okay
18:12 - you got to use the same thing each time
18:13 - so I'm gonna go with four spaces that's
18:15 - actually the preferred method now I can
18:18 - set my editor upset when I hit a tab it
18:20 - changes the four spaces automatically
18:21 - but I'll do that another time okay so
18:23 - I'm gonna run that and hopefully we'll
18:26 - see the ball move okay so plus it's
18:31 - going plus and right off the screen
18:33 - alright which is what we expected okay
18:35 - so that's that's good so now what we
18:37 - need to do is we need to do some border
18:40 - checking so what do we want to happen
18:44 - when the ball hits the border okay so
18:47 - since it's moving up into the right
18:49 - we'll do the top border first we look at
18:52 - the top border working then it's easy to
18:53 - get the bottom border working so what we
18:56 - have to do is we have to compare the
18:58 - ball's y-coordinate okay so once it gets
19:02 - to a certain point we want it to bounce
19:05 - okay so if you recall earlier in the
19:07 - program we set the height of the window
19:10 - to be 600 so so that means that the top
19:16 - the top y-coordinate is plus 300 the
19:19 - bottom is minus 300 okay but the ball
19:23 - itself is 20 to 20 high by 20 wide okay
19:28 - so what we'll do then is we'll kind of
19:30 - split the difference so we're gonna say
19:31 - if the ball dot y core so if the current
19:36 - coordinate is greater than 290 thank :
19:41 - and I gotta use spaces it's telling me
19:52 - 2:34 if it's greater than 290 what we do
19:57 - is we we set it back to 290 this avoids
20:02 - certain types of problems and then what
20:05 - we need to do is we say ball dot dy x
20:10 - equals negative one okay and what that
20:14 - does is it reverses the direction okay
20:21 - so if dy is two so dy minus negative one
20:25 - is negative two and that should reverse
20:29 - the direction of the ball let's run that
20:35 - okay so let's watch it and boom very
20:40 - good that's exactly what we wanted to
20:41 - happen
20:41 - okay now since this is working correct
20:45 - exactly as we want it I'm going to copy
20:50 - and paste that and just make some
20:53 - changes so on the other end it's less
20:55 - than negative 290 we said it's a
20:58 - negative 290 and that is that so let's
21:01 - test that so test that we'll need to
21:04 - start the ball off with a negative dy
21:08 - for now again notice how I'm making a
21:12 - change testing making a change testing
21:15 - okay that's working that's about what we
21:17 - wanted it was little bit off screen
21:19 - better but we'll let that go so that's
21:21 - the borders that's the top and bottom
21:23 - borders okay now the next thing we need
21:27 - to do is the left and right border so
21:32 - this is where it gets not more tricky or
21:36 - anything but you've got to think about
21:39 - what we want to happen so in this case
21:41 - because we're looking at left and right
21:43 - okay we're not looking at the y
21:46 - coordinate we're looking at the x
21:47 - coordinate and now what we want to do is
21:49 - if the x coordinate basically if it goes
21:53 - off the the right side so if you
21:57 - remember we said the width was 800 so
22:00 - that means it's plus 400 on the Left
22:01 - minus 400 on the right so let's say if
22:04 - it's greater than
22:06 - I'll say 290 sorry 390 so that tells us
22:10 - it's basically it's going past the
22:11 - paddle and it is off the screen okay
22:18 - okay so if that's the case basically
22:25 - we're gonna put the ball back to the
22:29 - center zero and then what I can do is I
22:33 - can maybe ball dot DX may have it
22:38 - reverse direction okay so let's take a
22:42 - look at that again I'm testing to make
22:45 - sure it works and if it does that I can
22:47 - copy and paste and do the other side
22:56 - okay so we got an error okay so it says
23:04 - we had a lot of weird stuff here that
23:05 - was a really long one
23:07 - and you say here you say this says line
23:15 - 87 so here's the line where it thinks
23:18 - the error is and there's a lot of
23:20 - different weird stuff but basically what
23:22 - I forgot to do it was zero comma zero so
23:26 - let's test that again so it should go
23:31 - off the screen and I went back to the
23:35 - center and reverse direction okay so we
23:38 - know it works so let's copy that and
23:46 - paste it and again we're gonna reverse
23:48 - it so if it's less than negative 390 and
23:51 - that's all we got to do
23:52 - okay so again let's test it hopefully it
23:59 - will come back okay so that's basically
24:04 - that's exactly what we wanted to happen
24:06 - okay
24:12 - part five so in this lesson we're going
24:15 - to learn how to get the ball to collide
24:17 - with the paddles so let's see what we
24:19 - have so far so we've got our ball it's
24:21 - bouncing off the top of the screen
24:23 - and it's at the edge of the screen it
24:25 - goes back to the center which is what we
24:26 - want so what we got to do is we got to
24:28 - make it so that when it touches the
24:30 - paddles it will reverse and how we're
24:32 - gonna do that is basically what we're
24:35 - going to do is we're comparing
24:37 - y-coordinates of the paddle and the ball
24:39 - so if we look at our code we put paddle
24:44 - be at 350 so the x-coordinate of the
24:48 - center is 350 and if you recall the
24:51 - center it's that's right 20 pixels wide
24:54 - by a hundred pixels tall so we need to
24:58 - basically look at we need to make sure
25:01 - that the ball is basically between here
25:04 - and here and that it's basically between
25:07 - here and here and if it is then we'll
25:10 - call that a bounce okay so let me uh
25:12 - kind of play the math a little bit on
25:14 - that and give that a shot so it's let's
25:16 - again as I mentioned before we're just
25:17 - gonna try and get the right paddle
25:18 - working and if we get the right paddle
25:20 - working then it's easy to get the left
25:22 - paddle working okay so I'm gonna say so
25:27 - pedal and ball collisions okay so if the
25:34 - ball dot XCore so if the balls
25:37 - x-coordinate is greater than so we said
25:41 - 350 it's ten wide so it's greater than
25:44 - say 340 and the ball well I should I
25:49 - leave it at that
25:50 - I'll leave it that and we'll come back
25:51 - and fix it in a bit so that's one
25:54 - condition and the ball's y-coordinate
26:05 - is less than paddle be dot why core +50
26:15 - here's a lot of stuff in here and
26:21 - there's a lot of different things here
26:22 - ball dot y core is greater than paddle B
26:34 - dot y core minus 50 okay I'm glad that's
26:47 - scrolling over so let me explain that
26:50 - real quick
26:51 - so if that's the case take notes Heather
27:00 - if that is the case basically we just
27:02 - want the DX same thing we did at the top
27:05 - x equals one although this is X not Y
27:09 - sorry negative one so if it's going this
27:12 - way the DX is positive and a balance to
27:15 - go back this way so what we want to see
27:18 - is the ball x-coordinate greater than
27:20 - 340 that means the edges are basically
27:22 - touching and is it between the top of
27:25 - the paddle and the bottom of the paddle
27:28 - actually there should be 50 it's
27:30 - probably 40 because of the size of the
27:31 - ball now let's let's play route that
27:34 - let's test out see what happens
27:35 - guess I want to run that oops okay so
27:45 - did you see what happened there which is
27:50 - not what we wanted okay see it bounced
27:54 - there but watch what happens if I miss
28:02 - it
28:03 - see there's like a little bit of a
28:04 - glitch there it's because even though
28:07 - it's behind the x-coordinate is greater
28:10 - than 340 and it's between here okay so
28:14 - you see how that's kind of acting weird
28:15 - so what you need to do is I'm gonna add
28:19 - this condition and ball dot X core is
28:27 - less than will say 350 so that gives it
28:32 - basically to the middle of the paddle so
28:35 - we'll say ball dot set X to 340 so that
28:41 - moves it back to the left a little bit
28:42 - and then it reverses the direction which
28:49 - is what we wanted
28:54 - okay so let me test that one more time
28:56 - make sure it's working so it bounces
29:02 - which is good
29:09 - let's let it get past and see okay so
29:12 - you see how it did not get stuck that
29:14 - time so that's basically what we wanted
29:15 - to happen so let's just test it one more
29:17 - time yep so that's that's where we
29:20 - wanted it okay so I'm just gonna
29:22 - basically take this I'm gonna copy it
29:24 - paste it and I'm just do the same thing
29:30 - on the other side so minus 3 for t
29:33 - greater than minus 350 and the top and
29:38 - bottom doesn't matter but in this case
29:40 - it's gonna be paddle a not paddle B that
29:44 - would give you some definitely some
29:45 - weird glitches and then say anything
29:50 - we're gonna reverse the ball so let's
29:52 - test it again okay so over here we're
29:58 - using the up and down arrows they
30:00 - bounced when we were here we're gonna
30:03 - use the W and s Keys we test it okay so
30:08 - something went wrong there hmm I know
30:12 - what I did wrong so I had set X here to
30:14 - 340 it should be negative 340 so again
30:18 - notice because I'm testing it you know
30:20 - after every little bit of code I knew
30:22 - that the problem had to be in here
30:24 - somewhere
30:24 - cuz that's the only thing I changed I
30:26 - just got I can't emphasize that enough
30:27 - cuz my students like I said they always
30:29 - want to type the whole thing in and then
30:32 - debug which is never a good idea okay so
30:37 - let's test it one more time so you see
30:39 - this process we're iterating we're
30:40 - testing and just making sure everything
30:43 - is working as expected before we move on
30:50 - in park six we're gonna learn how to get
30:52 - some scoring working so here's what we
30:54 - have so far we've actually got a
30:55 - functioning pong game the paddle on the
30:57 - right is moving using the up and down
30:59 - arrows the paddle on the left is moving
31:02 - using W and s the ball is bouncing it's
31:06 - doing everything it needs ooh
31:07 - next we want to add a scoring system so
31:10 - let's go and take a look at that so
31:13 - basically what I do is we want to draw
31:14 - the score on the screen and here's how
31:16 - we're gonna do that in Python using the
31:20 - turtle module so we gotta do is we
31:22 - actually gonna create a pen okay I just
31:25 - call it a pen but it's actually just a
31:26 - turtle just like the ball like the
31:28 - paddle but the the turtle module gives
31:30 - these turtles objects a lot of different
31:34 - abilities so I'm gonna make a pen and it
31:38 - like the other is a turtle turtle again
31:42 - I always spell that wrong and keep an
31:45 - eye on the capitalization so small T for
31:47 - the module name capital T for the class
31:50 - name which we it's happening in the
31:51 - background same thing as before so Penn
31:55 - dot speed and again this is the
31:58 - animation speed not the movement speed
32:00 - it's not we're gonna move but we're
32:02 - gonna give it a color penndot color the
32:05 - shape doesn't matter because we're not
32:06 - gonna see it if we want to print in
32:08 - white on a screen like classic pong
32:10 - style and penndot pan up this is because
32:14 - we don't want to draw a line when the
32:16 - pen moves every turtle actually starts
32:19 - out at the dead center of the screen
32:20 - then we move it somewhere if we don't do
32:22 - pan up you'll see a line moving
32:24 - I look between those two points and then
32:27 - here we want to hide the turtle because
32:32 - we don't need to see it now with the
32:35 - ball and the paddle paddles we didn't
32:37 - hide it because we want to see those on
32:39 - the screen but with a pen we don't want
32:40 - to see we just want to see the text
32:42 - that's gonna write so pen go to and 0
32:46 - comma I think 260 again I played around
32:49 - with the numbers that's why I know 260
32:50 - is a number I want if you remember again
32:53 - the screen height is 600 so that means
32:56 - it's 0 to 300 here so we want the score
32:58 - to be right around this part of the
33:00 - screen and then it gets pretty easy at
33:03 - this point
33:03 - as we use the right method so we want to
33:07 - write and the right player a and now
33:10 - when the game starts the score of course
33:12 - is 0 2 spaces player B 0 comma and they
33:18 - want to align equals Center because that
33:21 - will Center the text force around that
33:23 - point and then we want to choose a font
33:26 - you know watch here I've got an extra
33:29 - set of parentheses here okay don't
33:31 - forget that and I want the font Courier
33:34 - that's kind of old-school techy I choose
33:37 - a font size of 24 and normal I think
33:40 - normal I think you can choose bold and
33:42 - italics and I represent sure on that one
33:44 - so be very careful again we've got a set
33:46 - of parentheses here and I got an extra
33:48 - set of parentheses here for the font so
33:50 - because there's three arguments we got
33:52 - to send there okay so again now test
33:56 - your code make sure this is working I'm
34:00 - gonna run that okay so that's what we
34:03 - wanted you see a Fred little space after
34:05 - player B but yeah that's basically what
34:08 - we wanted okay so that's how we get the
34:11 - default score on the screen now what we
34:13 - got to do is we need to keep track of
34:16 - the score and so what I'm gonna do and
34:19 - I'm gonna put this up here and score so
34:25 - I need to create a couple variables I'm
34:27 - going to call it score a and we start
34:30 - the game it's way zero and score B is
34:35 - gonna be zero now down down here okay so
34:43 - we get a score when the ball goes off
34:47 - the screen so here's the right size if
34:50 - the ball goes off the right side thank
34:52 - yourself who gets a score of course that
34:55 - is gonna be player a so what I can do is
34:58 - score a plus equals one i adds one two
35:04 - player A's score and by the same token
35:09 - on this on the other side
35:14 - if the ball goes off the left side of
35:16 - the screen player B gets that okay so
35:21 - let's run that
35:29 - oops okay so nothing we don't see any
35:32 - change can you guess why okay
35:36 - now if you said well we didn't update
35:38 - the score on the screen you'd be a
35:41 - hundred percent correct okay so what I'm
35:43 - just gonna do is I'm gonna copy this
35:47 - line here and I'm gonna put that into
35:52 - here and you'll see what I got to do is
35:56 - instead of the zeros this is just print
36:00 - you know basic printing you know 101 so
36:04 - we're not sure how to do that I do have
36:05 - a video on that somewhere I'll try to
36:07 - remember to link that below about how
36:09 - printing works so we use the format
36:11 - method on our string and we want score a
36:14 - and score B okay so what that does is
36:18 - put score a here and score be there so
36:22 - I'm going to again make sure I'm using
36:25 - spaces I'm gonna copy that cuz I'm
36:30 - pretty sure this is correct so basically
36:35 - every time I update the score I need to
36:37 - update the actual printed score on the
36:39 - screen or the Shone's displayed screw
36:41 - score I should say so I'm gonna run that
36:45 - now watch what happens here okay so you
36:50 - can see it did update okay but clearly
36:55 - something is wrong okay cuz basically
36:58 - what it's doing is it's just printing on
36:59 - top of itself okay so what we have to do
37:02 - is before we do that call the right
37:05 - method we say penndot clear now we'll
37:08 - actually clear what's on the screen you
37:11 - know it happens so fast that you don't
37:13 - see it but it actually it does I'm just
37:18 - gonna take my word for that one
37:22 - again if you're using pygame or some
37:24 - other you know framework or method you
37:27 - might not have to do this type of steps
37:28 - but for the turtle module this is what
37:30 - you need to do okay so I'm gonna run
37:32 - that and let's watch what happens
37:37 - okay so player a just got a point player
37:41 - B just got a point and so on and so
37:45 - forth so yeah so basically we've got a
37:48 - pretty well working game here again the
37:50 - game never ends you just go until you
37:52 - know until you give up and get bored
37:54 - which is pretty easy with pong
37:59 - I'm going to show you how to add a
38:01 - little bit of sound to your game so just
38:05 - basically you know what you need to do
38:06 - to get started with that is you need to
38:08 - have a sound you need to have a fast
38:10 - ound file and what i've done is i have
38:12 - downloaded this file from I forgot the
38:17 - site now but it is balance dot wave and
38:20 - it's like kind of a classic old-school
38:23 - bouncing sound you'll hear it in a
38:25 - minute now
38:27 - Python is generally pretty
38:28 - cross-platform basically everything
38:31 - we've done so far it doesn't matter
38:33 - which operating system you're using
38:36 - Linux Mac or Windows everything that
38:40 - works the same sound is one of those
38:42 - things where it doesn't work the same so
38:45 - right now I'm on a Mac and I'm going to
38:46 - show you how to do it on a Mac and then
38:48 - I'll talk about how you would do it then
38:50 - on Linux or Windows ok so that's it's a
38:53 - bit different okay so the first thing I
38:55 - got to point out is that the sound that
38:58 - I found bounce dot wave and WAV files
39:01 - generally are more compatible across
39:03 - platforms of compatibility is in the
39:06 - exact same folder as my Python file so
39:10 - right now I'm on pong 7 and pong sevens
39:12 - in there so they are in the same folder
39:14 - that's that's a really important point
39:17 - now that you can even work around that
39:19 - if you know what you're doing but for
39:21 - beginners this is probably the easiest
39:22 - way to do things and so basically it's
39:26 - really simple when do I want to play a
39:28 - sound and so I'm gonna play a sound when
39:31 - I having to put it when I when the ball
39:35 - either touches one of the borders or
39:40 - bounces off of the paddle okay so in Mac
39:46 - okay so I'm gonna use something called
39:47 - the OS module and what that lets us do
39:51 - is basically interact with the operating
39:53 - system through text commands and so I've
39:57 - imported OS so I can use that module and
40:00 - then down here so what I can do is I can
40:04 - say OS that system that will do a system
40:07 - function call for us now on Mac it's a
40:10 - play
40:12 - bounce MP bounce dot wav so this is it
40:22 - this will play the sound when it hits
40:25 - the border now there's there's a problem
40:26 - here and I'm going to show you that in a
40:28 - second but again let's test it see what
40:29 - happens
40:32 - oops went the wrong way the wait till I
40:35 - get to the top I'll turn my volume up
40:39 - oops
40:40 - sorry my bad a play is for Linux AF play
40:44 - is for Mac let's try that again got that
40:49 - backwards I had a 50-50 chance and I
40:52 - blew it
40:53 - ok let's listen now did you notice that
40:58 - everything stopped while that sound
41:00 - played so watch it again okay that is
41:04 - not what we want to happen okay so to
41:07 - get around that at the end of this
41:09 - command we need to add an ampersand
41:12 - that's the end symbol okay so yeah let's
41:15 - test it
41:21 - and I'll watch it will not delay okay so
41:26 - a little bit it's a little bit off but
41:27 - that's you know neither here nor there I
41:29 - suppose we want to deal with that okay I
41:33 - think actually what I would probably do
41:34 - is edit this this wave sound there's
41:36 - probably a little bit of a blank space
41:38 - at the beginning of it so that's that's
41:41 - it on Mac okay so let me copy that and
41:45 - let's say we want to play it when it
41:46 - bounces at the top bottom and when it
41:51 - touches the paddles so we just need to
41:55 - put oops I'm gonna do that okay so let's
42:01 - test it so again I got it working once
42:03 - now I just copy and paste so I should
42:05 - bounce here just that I'm terrible at
42:14 - pong apparently okay now you can choose
42:17 - different sounds you have one sound for
42:19 - when it bounces off the walls one cell
42:21 - for when it bounces off the paddle etc
42:23 - etc okay now if you are a Linux user the
42:29 - system is very very similar
42:31 - instead of AF play it's a play and
42:34 - that's all you have to change okay now
42:36 - for our windows it's a little bit
42:37 - different now I can't test it for you
42:40 - but I can explain how it works and I do
42:42 - have a video that explains this and I'll
42:44 - try to remember to link that down below
42:45 - and basically in Windows instead of
42:50 - importing OS you import wind sound which
42:53 - is a little module that only exists on
42:55 - Windows and then when you want to play
42:58 - your sound instead of this OS dot system
43:01 - stuff you would type win sound dot play
43:07 - sound again pay attention to the
43:10 - capitalization okay
43:12 - small W capital P capital S then in
43:16 - parentheses so you don't need the
43:20 - ampersand here but you do need a comma
43:22 - and a wind sound dot snd async so what
43:29 - that does is that same thing as adding
43:31 - the ampersand that'll stop you have it's
43:34 - asynchronous
43:35 - it'll play the sound in the background
43:36 - if it's not a synchronous program will
43:38 - stop again I can't show this to you
43:40 - because this is Mac but that should
43:43 - should do it so I'm gonna undo that and
43:45 - get back to my sister oops somebody
43:48 - wanted to I keep going yeah a play and
43:52 - it's AF play let's leave that I'm gonna
43:54 - test it one more time and that is our
43:58 - bond program

Cleaned transcript:

simple pong and Python 3 for beginners part 1 let's take a look at what we're gonna be building today classic pong game so we've got a paddle on the right we got a paddle on the left and we've got a ball in the center okay yeah the ball goes off the screen and yeah opposite player gets a point then the ball continues okay so that is what we're gonna be working on so let's get started today we're gonna be doing this by using Python of course this is written in Python 3 but it should work in Python 2 as well I don't think there's any Python 3 specific code in this particular tutorial so we're gonna be building this on top of the turtle module I'm turtle module it was like nice little module it lets you do some basic graphics it's great for getting started with games a lot of a lot of tutorials use PI game which is amazing it's got a lot of great features but for beginners this is a lot simpler and it's builtin you don't have to install it like you do with Pi game so now that I've got my turtle imported the module I need to create a window so I'm gonna call it WN you call twin WI N or whatever you want to call it and but I use W N and it's turtle dot screen notice the S is capitalized it's very important and I'm gonna give it a title and I'm gonna call that pong buy at Tokyo EdTech that's my twitter handle you can follow me there you can certainly subscribe here on YouTube and and follow any new tutorials I have and do feel free to you know leave comments I do take keep a close eye on things and if you have any trouble let me know and I want to change the background color of the window to black classic pong and I want to change the size of the window and I want the width to be 800 and I want the height to be 600 pixels I'm gonna do something called wind tracer this one's a little bit hard to explain but basically what that does is it actually stops the window from updating and so we have to manually update it what this lets us do is basically speed up our our games quite a bit if we didn't do that things would run much much slower so every game meat needs something called a main game loop and this is where basically all the meat and potatoes of your your game goes to so we're gonna make a loop while true and I'm gonna put four spaces there you can use tabs but spaces are recommended but whatever you use make sure that you are consistent you can't mix spaces and tabs and then we do wind update and what that does is every time the loop runs it updates the screen okay just a quick note this this program is written for beginners so I'm not really using objectoriented programming I'm not really using classes except as it relates to the turtle module this is basically a really straightforward an oldschool style of programming methodology so let's run that and see how it goes and what we should have is we have our title black background it is 800 wide by 600 tall zero zero is at the center so plus 300 300 + 400 400 remember those numbers as they'll come in handy in our next few tutorials part two of simple pong in Python 3 for beginners in this part of the tutorial we're going to add our paddles to the screen and we're going to add the ball to the screen as well so let's get started with that so basically what we have in pong is we have pad I'm gonna call it paddle a we have paddle B and we have a ball so those are the three items that we need to add to the screen now as I mentioned earlier in the previous video we are using the turtle module to you know add our graphics and to open our windows and things like that it's very very convenient it works great for basic games a lot of people use Pi game which is great but for simple games this is probably an easier way to get started so everything in our game needs a name so I'm gonna call it paddle a very original and it is actually going to be a turtle what's known as a turtle object so to do that it's turtle dot capital turtle notice the capitalisation small t because that is our module name capital T because that is the class name now as this tutorial is aimed at beginners I'm not going to talk about classes I'm not writing it objectoriented style I'm just writing it in you know functional style although there are some object kind of patterns here you'll you'll see but for beginners don't worry about that stuff for now so then what I want to do is paddle a I need to set the speed now this is not the speed that the paddle moves on the screen this is the speed of animation this is just something we need to do for the turtle module and what this does is it sets the speed to the maximum possible speed otherwise things would be really slow we want to give our paddle a shape and there are a few builtin shapes and we're gonna use square in this case okay there's Circle Square let's your Circle Square triangle a few others we're gonna give our paddle a color and or you can call it white because that's what pong looks like and we're going to basically do something called pen.up turtles by definition what they do is they draw a line as they're moving we don't need to draw a lines because that's not what this program does so we do the pet up and I want my paddle a to start at minus 350 that's an xcoordinate and zero and the vertically centered in the screen so in our game zero zero is in the middle 350 + 350 so I'm gonna go ahead and run that and see what it looks like so far okay so this is our left paddle now you know you've played pong you've seen the the demo from the first video clearly it's not the right size so what we can do in our program is this now just just for your information by default that shape is 20 pixels by 20 pixels so it's 20 pixels wide by 20 pixels high so what we're gonna do is we're going to stretch the shape so we use the shape size method you can see I'm using Visual Studio codes very good program even on a Mac and it tells you you know what you can do stretch with stretched lengths etc etc so what I want to do is I want to stretch the width by 5 so that's me 5 times 20 so that'll make it 100 tall and then by 20 wide and stretch lame is gonna be 1 we're gonna keep it at the default so let's save that and run it ok so you see now we've got a paddle over here 20 pixels wide by 20 pixels high okay now so that's paddle a now I'm kind of lazy guy so I'm just gonna copy this so what I always recommend if something's similar similar styles or similar you know functions you know get it working right once and copy it paste and just make the necessary changes so now that we've done that we just need to change that to be so if you keep consistent names it'll really help your programming in this case we want it to go on the right side of the screen so that's gonna be plus 350 so I'm gonna run that and test it and testing your program is very very important at each stage a lot of beginners I don't know why they insist on typing the whole program in and then trying to test it and you'll never be able to figure out where the problems are especially as a beginner unless you do it step by step like this so we got our left paddle we got our right paddle so I just call it I said paddle a paddle beam and then the last thing we need is gonna be our ball so I'm gonna just go ahead and copy this because it's basically the same thing I don't need it stretched I want to keep it the original size and I want it to start in the middle of the screen and I'm gonna call it ball instead of paddle so you see once if you do it like this method if you get everything working correctly there's no errors and you tested it then you just copy and paste it really speeds up your programming okay so I'm gonna run that one more time okay you can see we've got our left paddle paddle a our right paddle paddle B and we've got our ball which is starting in the center so we're off to a good start three let's take a look at what we have so far okay so we've got our pong window we've got our paddle a on the left paddle B on the right and we've got our ball in the middle so in this lesson we're going to learn how to move the paddles using the keyboard okay so what we need to do is to basically we're going to create some functions okay and if you haven't ever used functions before a function is basically kind of a piece of a program that does a something that's been defined for it so so in this case we want to move paddle a up we want to move paddle a down we move paddle beat up when we've paddled B down so to use functions you first need to define your function and I'm going to call this first function paddle a up okay you recall in the last video I talked about doing one function at a time or one piece at a time getting that working perfectly and then you can copy and just make the necessary changes so that's what we're gonna do here okay so paddle a up so to move the paddle what I need to do is I need to know the current y coordinate so what I'm gonna do is gonna say y equals paddle a dot y core okay now this part here paddle a is the name of the object we created here we called it paddle a and the dot Y core method is from the turtle module okay what that does is it returns the y coordinate and so we're just assign that value to a variable called Y which makes sense okay so we've defined the function using the de f keyword you notice we have a I guess it's the tab in this case well it's it's a space we'll see I might get an error there and that's maybe not a second if we do and it's supposed to be set to automatically change the spaces but I think it's not set that way so I'll leave it the way it is so then what I want to do if I'm going to go up on the screen it's this way so up so Y increases as we go up it decreases as we go down so I'm going to do is I'm going to add 22 Y and this is the way you do that you say Y plus equals 20 so that will add 20 pixels to the ycoordinate okay so now notice we've just calculated the Y's so then what we actually have to do is paddle a set Y to the new Y so now having a function doesn't actually do anything until we call the function so the function has just been defined but we're not using it so what would you do is we do something called a keyboard binding okay so in the turtle module we need to do W n so that was our window and listen this tells it to listen for keyboard input then we're going to use the on key press method okay and watch what I do here paddle a up W okay so let me explain what that does so this line here it tells the program to listen for keyboard input this line here says when the user presses W notice that the lowercase W so if you have caps lock on it won't work call the function paddle a up okay here's our function paddle a up paddle a up says get the ycoordinate add 20 to the ycoordinate and then actually set the y of the paddle to the new ycoordinate okay so let's test that and see what happens okay so I'm gonna hit the W key okay so you can see how it is moving up okay actually move it off the screen okay so now that we've gotten that working okay what I can do is I can copy that okay and I'm going to change this to paddle a down so instead of adding 20 I'm going to subtract 20 and then I need to do a key binding for that as well so I'm gonna copy and paste that so that's gonna be paddle a down and in this case I'm gonna use the S key you can use whatever key you want but I just chose nose cuz usually it's WASD on the left and the arrow keys on the right so again I've done one thing I've changed it now I'm gonna test it okay so W s okay so everything's working exactly as expected okay so then what I'm gonna do is now I've got both of those working I'm gonna copy it and I'm gonna do paddle be glad I'll be paddle B so if you keep your naming consistent it makes it very very easy to do what I'm doing which is to be lazy and just use copy and paste and then here now for paddle B I'm gonna use the arrow keys and then for the up arrow it's it's a little bit different use up notice it's capitalized and down is the down arrow okay so yeah I made a couple changes I'm gonna test my code okay so WS on the left up and down on the right and voila there you have it hey stay tuned next next lesson we're gonna get that ball moving for moving the ball this is really kind of the meat and the central kind of part of the program this is where we actually get the ball to move so we need to get it to move we need to get it to bounce off the top and the bottom and we need to get it to bounce off of the paddles and so I'm going to show you how that's gonna work because we have our paddles can move and but the ball does not yet so let's say I get started with that and so what I want to do is with the ball is I want to separate the balls movement into two parts and X movement and a Y movement so what I'm going to call that I'm gonna say ball dot DX D means Delta or change you can even call it X speed or whatever you want to but DX works very very well now on my computer I've found that too the number two works very very well my computer at home actually it was like 0.1 it's much much faster I don't know quite know why seem I have to play with the numbers here to get it you know to where you feel the game should be so so DX and dy equals two so what that means is every time our ball moves it moves by two pixels so since X is positive it's going to move to the right two and since Y is positive it's gonna move up two so it'll be kind of moving up and diagonally okay so to get that to actually happen we have to go inside the main game loop okay and in here I'm gonna say move the ball so what we need to do is ball dot set X and what we want is the current x coordinate so I'm just basically kind of combining what I did up here into one line plus ball DX okay so the ball starts at zero zero so zero X so the first time through this loop it's gonna go to then the next time to the loop is gonna go to two two two two so depending on your computer speed it could just fly off the screen or it could it can go a little bit slower so again you'll have to play around that a little bit so that I'm gonna say ball dot set why and I basically the same thing I can kind of copy and paste it but I should have done and ball dot DUI so I'm gonna say that and I'm gonna test to see what happens you see some red lines here I think there's gonna be maybe we problem yeah so I'm gonna run that and explain why it's not gonna work okay so you see here I've got an error and this is something again beginners I don't know why do not want to read error messages the error messages basically tell you what's wrong and so you see here's this tab error inconsistent use of tabs and spaces okay so I mention this in an earlier video so here I used four spaces but here it's a tab okay you got to use the same thing each time so I'm gonna go with four spaces that's actually the preferred method now I can set my editor upset when I hit a tab it changes the four spaces automatically but I'll do that another time okay so I'm gonna run that and hopefully we'll see the ball move okay so plus it's going plus and right off the screen alright which is what we expected okay so that's that's good so now what we need to do is we need to do some border checking so what do we want to happen when the ball hits the border okay so since it's moving up into the right we'll do the top border first we look at the top border working then it's easy to get the bottom border working so what we have to do is we have to compare the ball's ycoordinate okay so once it gets to a certain point we want it to bounce okay so if you recall earlier in the program we set the height of the window to be 600 so so that means that the top the top ycoordinate is plus 300 the bottom is minus 300 okay but the ball itself is 20 to 20 high by 20 wide okay so what we'll do then is we'll kind of split the difference so we're gonna say if the ball dot y core so if the current coordinate is greater than 290 thank and I gotta use spaces it's telling me 234 if it's greater than 290 what we do is we we set it back to 290 this avoids certain types of problems and then what we need to do is we say ball dot dy x equals negative one okay and what that does is it reverses the direction okay so if dy is two so dy minus negative one is negative two and that should reverse the direction of the ball let's run that okay so let's watch it and boom very good that's exactly what we wanted to happen okay now since this is working correct exactly as we want it I'm going to copy and paste that and just make some changes so on the other end it's less than negative 290 we said it's a negative 290 and that is that so let's test that so test that we'll need to start the ball off with a negative dy for now again notice how I'm making a change testing making a change testing okay that's working that's about what we wanted it was little bit off screen better but we'll let that go so that's the borders that's the top and bottom borders okay now the next thing we need to do is the left and right border so this is where it gets not more tricky or anything but you've got to think about what we want to happen so in this case because we're looking at left and right okay we're not looking at the y coordinate we're looking at the x coordinate and now what we want to do is if the x coordinate basically if it goes off the the right side so if you remember we said the width was 800 so that means it's plus 400 on the Left minus 400 on the right so let's say if it's greater than I'll say 290 sorry 390 so that tells us it's basically it's going past the paddle and it is off the screen okay okay so if that's the case basically we're gonna put the ball back to the center zero and then what I can do is I can maybe ball dot DX may have it reverse direction okay so let's take a look at that again I'm testing to make sure it works and if it does that I can copy and paste and do the other side okay so we got an error okay so it says we had a lot of weird stuff here that was a really long one and you say here you say this says line 87 so here's the line where it thinks the error is and there's a lot of different weird stuff but basically what I forgot to do it was zero comma zero so let's test that again so it should go off the screen and I went back to the center and reverse direction okay so we know it works so let's copy that and paste it and again we're gonna reverse it so if it's less than negative 390 and that's all we got to do okay so again let's test it hopefully it will come back okay so that's basically that's exactly what we wanted to happen okay part five so in this lesson we're going to learn how to get the ball to collide with the paddles so let's see what we have so far so we've got our ball it's bouncing off the top of the screen and it's at the edge of the screen it goes back to the center which is what we want so what we got to do is we got to make it so that when it touches the paddles it will reverse and how we're gonna do that is basically what we're going to do is we're comparing ycoordinates of the paddle and the ball so if we look at our code we put paddle be at 350 so the xcoordinate of the center is 350 and if you recall the center it's that's right 20 pixels wide by a hundred pixels tall so we need to basically look at we need to make sure that the ball is basically between here and here and that it's basically between here and here and if it is then we'll call that a bounce okay so let me uh kind of play the math a little bit on that and give that a shot so it's let's again as I mentioned before we're just gonna try and get the right paddle working and if we get the right paddle working then it's easy to get the left paddle working okay so I'm gonna say so pedal and ball collisions okay so if the ball dot XCore so if the balls xcoordinate is greater than so we said 350 it's ten wide so it's greater than say 340 and the ball well I should I leave it at that I'll leave it that and we'll come back and fix it in a bit so that's one condition and the ball's ycoordinate is less than paddle be dot why core +50 here's a lot of stuff in here and there's a lot of different things here ball dot y core is greater than paddle B dot y core minus 50 okay I'm glad that's scrolling over so let me explain that real quick so if that's the case take notes Heather if that is the case basically we just want the DX same thing we did at the top x equals one although this is X not Y sorry negative one so if it's going this way the DX is positive and a balance to go back this way so what we want to see is the ball xcoordinate greater than 340 that means the edges are basically touching and is it between the top of the paddle and the bottom of the paddle actually there should be 50 it's probably 40 because of the size of the ball now let's let's play route that let's test out see what happens guess I want to run that oops okay so did you see what happened there which is not what we wanted okay see it bounced there but watch what happens if I miss it see there's like a little bit of a glitch there it's because even though it's behind the xcoordinate is greater than 340 and it's between here okay so you see how that's kind of acting weird so what you need to do is I'm gonna add this condition and ball dot X core is less than will say 350 so that gives it basically to the middle of the paddle so we'll say ball dot set X to 340 so that moves it back to the left a little bit and then it reverses the direction which is what we wanted okay so let me test that one more time make sure it's working so it bounces which is good let's let it get past and see okay so you see how it did not get stuck that time so that's basically what we wanted to happen so let's just test it one more time yep so that's that's where we wanted it okay so I'm just gonna basically take this I'm gonna copy it paste it and I'm just do the same thing on the other side so minus 3 for t greater than minus 350 and the top and bottom doesn't matter but in this case it's gonna be paddle a not paddle B that would give you some definitely some weird glitches and then say anything we're gonna reverse the ball so let's test it again okay so over here we're using the up and down arrows they bounced when we were here we're gonna use the W and s Keys we test it okay so something went wrong there hmm I know what I did wrong so I had set X here to 340 it should be negative 340 so again notice because I'm testing it you know after every little bit of code I knew that the problem had to be in here somewhere cuz that's the only thing I changed I just got I can't emphasize that enough cuz my students like I said they always want to type the whole thing in and then debug which is never a good idea okay so let's test it one more time so you see this process we're iterating we're testing and just making sure everything is working as expected before we move on in park six we're gonna learn how to get some scoring working so here's what we have so far we've actually got a functioning pong game the paddle on the right is moving using the up and down arrows the paddle on the left is moving using W and s the ball is bouncing it's doing everything it needs ooh next we want to add a scoring system so let's go and take a look at that so basically what I do is we want to draw the score on the screen and here's how we're gonna do that in Python using the turtle module so we gotta do is we actually gonna create a pen okay I just call it a pen but it's actually just a turtle just like the ball like the paddle but the the turtle module gives these turtles objects a lot of different abilities so I'm gonna make a pen and it like the other is a turtle turtle again I always spell that wrong and keep an eye on the capitalization so small T for the module name capital T for the class name which we it's happening in the background same thing as before so Penn dot speed and again this is the animation speed not the movement speed it's not we're gonna move but we're gonna give it a color penndot color the shape doesn't matter because we're not gonna see it if we want to print in white on a screen like classic pong style and penndot pan up this is because we don't want to draw a line when the pen moves every turtle actually starts out at the dead center of the screen then we move it somewhere if we don't do pan up you'll see a line moving I look between those two points and then here we want to hide the turtle because we don't need to see it now with the ball and the paddle paddles we didn't hide it because we want to see those on the screen but with a pen we don't want to see we just want to see the text that's gonna write so pen go to and 0 comma I think 260 again I played around with the numbers that's why I know 260 is a number I want if you remember again the screen height is 600 so that means it's 0 to 300 here so we want the score to be right around this part of the screen and then it gets pretty easy at this point as we use the right method so we want to write and the right player a and now when the game starts the score of course is 0 2 spaces player B 0 comma and they want to align equals Center because that will Center the text force around that point and then we want to choose a font you know watch here I've got an extra set of parentheses here okay don't forget that and I want the font Courier that's kind of oldschool techy I choose a font size of 24 and normal I think normal I think you can choose bold and italics and I represent sure on that one so be very careful again we've got a set of parentheses here and I got an extra set of parentheses here for the font so because there's three arguments we got to send there okay so again now test your code make sure this is working I'm gonna run that okay so that's what we wanted you see a Fred little space after player B but yeah that's basically what we wanted okay so that's how we get the default score on the screen now what we got to do is we need to keep track of the score and so what I'm gonna do and I'm gonna put this up here and score so I need to create a couple variables I'm going to call it score a and we start the game it's way zero and score B is gonna be zero now down down here okay so we get a score when the ball goes off the screen so here's the right size if the ball goes off the right side thank yourself who gets a score of course that is gonna be player a so what I can do is score a plus equals one i adds one two player A's score and by the same token on this on the other side if the ball goes off the left side of the screen player B gets that okay so let's run that oops okay so nothing we don't see any change can you guess why okay now if you said well we didn't update the score on the screen you'd be a hundred percent correct okay so what I'm just gonna do is I'm gonna copy this line here and I'm gonna put that into here and you'll see what I got to do is instead of the zeros this is just print you know basic printing you know 101 so we're not sure how to do that I do have a video on that somewhere I'll try to remember to link that below about how printing works so we use the format method on our string and we want score a and score B okay so what that does is put score a here and score be there so I'm going to again make sure I'm using spaces I'm gonna copy that cuz I'm pretty sure this is correct so basically every time I update the score I need to update the actual printed score on the screen or the Shone's displayed screw score I should say so I'm gonna run that now watch what happens here okay so you can see it did update okay but clearly something is wrong okay cuz basically what it's doing is it's just printing on top of itself okay so what we have to do is before we do that call the right method we say penndot clear now we'll actually clear what's on the screen you know it happens so fast that you don't see it but it actually it does I'm just gonna take my word for that one again if you're using pygame or some other you know framework or method you might not have to do this type of steps but for the turtle module this is what you need to do okay so I'm gonna run that and let's watch what happens okay so player a just got a point player B just got a point and so on and so forth so yeah so basically we've got a pretty well working game here again the game never ends you just go until you know until you give up and get bored which is pretty easy with pong I'm going to show you how to add a little bit of sound to your game so just basically you know what you need to do to get started with that is you need to have a sound you need to have a fast ound file and what i've done is i have downloaded this file from I forgot the site now but it is balance dot wave and it's like kind of a classic oldschool bouncing sound you'll hear it in a minute now Python is generally pretty crossplatform basically everything we've done so far it doesn't matter which operating system you're using Linux Mac or Windows everything that works the same sound is one of those things where it doesn't work the same so right now I'm on a Mac and I'm going to show you how to do it on a Mac and then I'll talk about how you would do it then on Linux or Windows ok so that's it's a bit different okay so the first thing I got to point out is that the sound that I found bounce dot wave and WAV files generally are more compatible across platforms of compatibility is in the exact same folder as my Python file so right now I'm on pong 7 and pong sevens in there so they are in the same folder that's that's a really important point now that you can even work around that if you know what you're doing but for beginners this is probably the easiest way to do things and so basically it's really simple when do I want to play a sound and so I'm gonna play a sound when I having to put it when I when the ball either touches one of the borders or bounces off of the paddle okay so in Mac okay so I'm gonna use something called the OS module and what that lets us do is basically interact with the operating system through text commands and so I've imported OS so I can use that module and then down here so what I can do is I can say OS that system that will do a system function call for us now on Mac it's a play bounce MP bounce dot wav so this is it this will play the sound when it hits the border now there's there's a problem here and I'm going to show you that in a second but again let's test it see what happens oops went the wrong way the wait till I get to the top I'll turn my volume up oops sorry my bad a play is for Linux AF play is for Mac let's try that again got that backwards I had a 5050 chance and I blew it ok let's listen now did you notice that everything stopped while that sound played so watch it again okay that is not what we want to happen okay so to get around that at the end of this command we need to add an ampersand that's the end symbol okay so yeah let's test it and I'll watch it will not delay okay so a little bit it's a little bit off but that's you know neither here nor there I suppose we want to deal with that okay I think actually what I would probably do is edit this this wave sound there's probably a little bit of a blank space at the beginning of it so that's that's it on Mac okay so let me copy that and let's say we want to play it when it bounces at the top bottom and when it touches the paddles so we just need to put oops I'm gonna do that okay so let's test it so again I got it working once now I just copy and paste so I should bounce here just that I'm terrible at pong apparently okay now you can choose different sounds you have one sound for when it bounces off the walls one cell for when it bounces off the paddle etc etc okay now if you are a Linux user the system is very very similar instead of AF play it's a play and that's all you have to change okay now for our windows it's a little bit different now I can't test it for you but I can explain how it works and I do have a video that explains this and I'll try to remember to link that down below and basically in Windows instead of importing OS you import wind sound which is a little module that only exists on Windows and then when you want to play your sound instead of this OS dot system stuff you would type win sound dot play sound again pay attention to the capitalization okay small W capital P capital S then in parentheses so you don't need the ampersand here but you do need a comma and a wind sound dot snd async so what that does is that same thing as adding the ampersand that'll stop you have it's asynchronous it'll play the sound in the background if it's not a synchronous program will stop again I can't show this to you because this is Mac but that should should do it so I'm gonna undo that and get back to my sister oops somebody wanted to I keep going yeah a play and it's AF play let's leave that I'm gonna test it one more time and that is our bond program
