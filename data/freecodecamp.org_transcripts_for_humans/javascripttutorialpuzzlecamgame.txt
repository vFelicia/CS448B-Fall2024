With timestamps:

00:00 - this is a really cool course that
00:02 - teaches you how to use javascript and
00:04 - html to create a puzzle game that uses
00:07 - the video feed from a camera you will
00:10 - also learn a bit of html and sql radio
00:13 - has a unique and interesting style that
00:15 - makes learning the concepts really fun
00:18 - hi i'm radu and today i'm going to teach
00:20 - you how to make a puzzle game that uses
00:22 - the camera
00:24 - this whole project is done using only
00:25 - vanilla javascript and html canvas and a
00:28 - small part of it
00:30 - this one here is done using php and
00:33 - mysql to save and load scores from the
00:36 - database
00:37 - the game works on desktop computers but
00:40 - also on mobile devices like phones and
00:42 - tablets
00:44 - by watching this you'll learn many
00:45 - useful things that you can later apply
00:47 - in other projects
00:49 - even though some of these things are
00:51 - quite advanced i'll teach them as simple
00:53 - as i can and i'll leave the two most
00:55 - complicated things at the end good news
00:58 - is that they're also optional meaning
01:00 - that you can get a fully working game
01:02 - without them
01:03 - so don't be scared it'll be fun i
01:06 - promise
01:08 - also special thanks to beau from free
01:10 - code camp for allowing me to share this
01:12 - with you guys i hope you'll like it and
01:15 - if you have any questions do contact me
01:17 - via my youtube channel
01:20 - now let's begin
01:29 - we begin by writing the html page
01:34 - in the header we give the page a title
01:37 - this will change what we see here in the
01:39 - browser tab
01:41 - and we'll also link the two external
01:43 - files
01:44 - one for the javascript and another for
01:46 - the css
01:48 - these files are just empty for now
01:54 - then the body part of our document will
01:56 - be really simple for now we just run a
01:59 - function called main when the page loads
02:03 - and add the canvas element here which is
02:05 - what we'll primarily use to build the
02:07 - game it will be a canvas app
02:12 - if we refresh the page now we see the
02:14 - tab shows the correct title
02:16 - and we also get an error here in the
02:18 - console
02:20 - if you don't see the console in your
02:21 - browser try pressing f12 it's the
02:24 - shortcut for the developer tools in most
02:27 - browsers
02:28 - i'm using google chrome i think it has
02:30 - the most useful tools but it's really
02:32 - just a personal preference any one of
02:35 - them will work just fine
02:37 - now the error says that this main
02:39 - function is missing so let's move to our
02:41 - javascript file and implement it
02:45 - for now i'll just make it output the
02:47 - string main into the console to test if
02:50 - it works
02:51 - and it does
02:52 - it's very good to debug like this
02:54 - whenever you make a change otherwise
02:56 - errors pile up and it can be very
02:58 - confusing to deal with many of them at
03:00 - once
03:02 - but now let's see how to access the
03:04 - camera
03:05 - we'll use a promise to get access to our
03:08 - media devices
03:09 - we're only interested in the video
03:11 - coming from the camera and we specify
03:13 - that here
03:15 - what happens now is that the browser
03:16 - will ask the player for permission to
03:18 - use the camera
03:20 - when they give it the code will go here
03:23 - where we define a callback function in
03:25 - which we have access to the camera
03:27 - signal
03:29 - if the player doesn't allow the camera
03:31 - or there is some other error we will
03:33 - catch it and show it on screen
03:40 - when everything works out we initialize
03:42 - a video object
03:43 - we'll use a global variable for this and
03:46 - i will write these in capital letters to
03:48 - make it clear when a variable is global
03:50 - or not in the code we next create the
03:53 - video element
03:55 - initialize it to the signal coming from
03:57 - the camera
04:00 - and play it
04:06 - when video data is available we can
04:09 - start updating it on the canvas
04:12 - this update canvas function is what we
04:14 - will implement next but first let's also
04:17 - define the canvas here globally and add
04:20 - a reference to the canvas context object
04:23 - as well
04:26 - we initialize the canvas with the one
04:28 - defined in the html page previously
04:35 - this 2d context of the canvas provides
04:38 - all drawing methods we will need to
04:40 - build the game our canvas will fill the
04:43 - entire window
04:52 - now the update canvas function needs to
04:55 - draw the video onto the canvas
04:57 - so we will use the draw image method of
05:00 - the canvas context to do just that we
05:03 - also need to specify here that we want
05:05 - to start drawing from the top left
05:07 - corner which has zero zero coordinates
05:10 - now when i refresh something happens it
05:13 - shows the image coming from my camera
05:16 - my camera is just pointed at the wall
05:18 - here at the moment
05:20 - but it doesn't pick up any movement just
05:22 - yet
05:23 - we need to update the canvas many times
05:25 - per second to see this happen and we'll
05:27 - use the request animation frame method
05:29 - to make it work
05:31 - this method will call the function
05:33 - recursively many times per second and it
05:37 - will try to update 60 times per second
05:39 - if the computer is fast enough
05:42 - now we get a live image
05:44 - let me just put mr chibison here to make
05:46 - it less boring
05:53 - now you'll notice a white border here
05:57 - it's a bit strange because we said we
05:59 - want to draw the video at zero zero
06:01 - but the body element has some default
06:04 - margin and that's what we are actually
06:06 - seeing
06:08 - we'll remove that by going to our css
06:10 - file and changing the style of the body
06:13 - element by setting the margin to zero
06:16 - better now but we still get these scroll
06:19 - bars here which are not really necessary
06:22 - so i'll remove them by setting overflow
06:25 - to hidden
06:29 - now the scroll bars are gone but the
06:31 - video actually goes outside the screen
06:34 - we don't want that
06:36 - and we need to keep in mind that in
06:38 - general there are many webcams or phone
06:41 - cameras out there with different
06:43 - resolutions aspect ratios and so on
06:46 - so we need a way to resize the video so
06:49 - that it fits in the middle of the screen
06:51 - preferably with some space around it so
06:53 - that we have enough room to move the
06:55 - pieces later
06:57 - we'll use this scaler to specify how
07:00 - much of the screen space will be used by
07:02 - the image
07:03 - and i will also keep track of other
07:05 - related information in this size
07:07 - variable
07:15 - we update these values here when
07:17 - metadata about the video is available
07:21 - first we use a helper variable to find
07:24 - out the minimum ratio between the screen
07:26 - size and the video size
07:39 - and then we set the size attributes
07:41 - accordingly
07:51 - note that here one of these things will
07:54 - simplify
07:55 - so we properly preserve the aspect ratio
07:58 - and nothing gets stretched
08:00 - for the x and y coordinates we start off
08:02 - in the middle of the screen
08:04 - and go just half the width towards the
08:06 - left and half the height towards the top
08:16 - then to actually affect the image we
08:19 - must update the draw image method here
08:22 - this method can be called with a
08:24 - different number of arguments
08:26 - before we just specified the top left
08:28 - corner but now we also add the width and
08:31 - the height
08:36 - ok it works we now see the entire image
08:39 - coming from the camera before it was
08:41 - slightly cropped on the right
08:44 - we also get this 80 margin
08:52 - and if we change the value here we get a
08:54 - different sized margin instead
08:57 - we can also check to see how the
08:59 - application looks on different sized
09:01 - screens by pressing this button
09:03 - we can even select some specific device
09:06 - from this list
09:08 - but every time we change something we
09:10 - need to refresh the page to see it
09:12 - happen
09:13 - looks good
09:14 - how about in landscape mode
09:17 - need to refresh again
09:20 - we could actually make this resizing
09:22 - happen automatically by using an event
09:25 - listener for the window resize
09:28 - we then need to move this code in the
09:30 - callback function
09:39 - and also need to call this function here
09:42 - so that the code executes as before
09:45 - and i should also move these lines here
09:48 - too
09:49 - in this way the canvas will resize as
09:51 - well not just the camera stream
09:54 - okay let's see
09:56 - if we change the orientation
09:58 - yes it works
10:01 - no matter what the screen size we will
10:02 - get the proper fitting this time
10:05 - but even more important is that it will
10:07 - work regardless of the size and aspect
10:09 - ratio your camera outputs
10:11 - i'll demonstrate this by forcing my
10:13 - webcam to output a specific size
10:17 - note that not all webcams support
10:19 - resizing in this way and it may not work
10:22 - for you but you can try
10:25 - you can see it works just fine with the
10:27 - square aspect ratio
10:29 - let's try a vertical aspect ratio next
10:33 - okay works just fine
10:36 - i will remove these extra parameters now
10:38 - because we want to see the entire video
10:40 - coming from the camera
10:42 - this was just an experiment
10:45 - and i will actually comment out this
10:47 - event listener because we don't really
10:49 - need this functionality inside the app
10:51 - users are not expected to resize the
10:53 - screen like this
10:56 - i made it to demonstrate better how
10:57 - things work and avoid refreshing all the
11:00 - time
11:01 - plus you may need it in one of your
11:02 - projects
11:11 - we now define the piece class and
11:13 - specify a row and column index in the
11:16 - constructor
11:28 - we will have an array of these pieces
11:31 - and define it globally here
11:34 - we also need to specify how many rows
11:36 - and columns there are
11:38 - and i will store these
11:40 - here now to initialize the pieces we
11:44 - begin with an empty array
11:48 - and iterate through the rows using the i
11:50 - variable and through the columns using
11:52 - the j variable
11:54 - and add a new piece defined using these
11:56 - two indices into the array
12:00 - to be able to draw the pieces we are
12:02 - going to implement the draw method that
12:04 - takes the context as a parameter
12:07 - let's first just draw a simple rectangle
12:09 - here to see if what we did so far is
12:12 - working
12:13 - now we need to figure out the location
12:16 - and the size of these pieces based on
12:18 - the number of rows columns and the size
12:21 - of the video on the screen
12:24 - i will enter these placeholders here and
12:26 - calculate the exact values in the
12:28 - constructor
12:36 - the width and height of each piece is
12:38 - just the width and height of the area
12:40 - divided by the number of columns and
12:42 - rows respectively
12:44 - i set here the x and y to be so that
12:47 - each piece is defined to be at the
12:50 - correct location at first
12:53 - even though this is a puzzle game where
12:55 - the player needs to find out what the
12:57 - correct locations are
12:58 - it helps to start with the solved
13:00 - configuration when developing the game
13:03 - you'll see
13:04 - i realize now that x and y could
13:07 - actually be defined after we have the
13:09 - width and the height
13:11 - and then define them using the width and
13:14 - height like this
13:16 - the code is clearer in this way
13:19 - we now need a way to draw the pieces
13:22 - we do this here by just iterating
13:24 - through all of them and calling the draw
13:26 - method using the global context
13:33 - okay i think we're ready to debug now oh
13:37 - i forgot to call the stroke method here
13:40 - without it nothing will be drawn
13:43 - let's see i'll refresh and
13:46 - nothing is different just yet
13:48 - it's because the pieces array is empty
13:51 - we need to call the initialize pieces
13:53 - function and we'll do this in the
13:54 - console for now
13:56 - okay now something happens and it looks
13:58 - good three rows and three columns
14:01 - but it's not ready yet
14:03 - these are just empty rectangles drawn on
14:05 - top of the video
14:07 - look if i comment out drawing the video
14:09 - image here
14:13 - you can just see the grid
14:15 - each piece needs to crop a specific part
14:18 - of the video and show it
14:21 - we do that by adding a call to the draw
14:23 - image method here
14:26 - we use another version of the draw image
14:28 - method
14:30 - a more complicated one that accepts nine
14:33 - arguments
14:34 - after we specify the video we need to
14:37 - tell the left part where the cropping
14:39 - happens
14:41 - then the top part
14:48 - then the width and the height
14:53 - these values are relative to the video
14:56 - and whatever the resolution and aspect
14:58 - ratio it has
15:01 - now after we specify where to take the
15:03 - image data from we need to say where to
15:06 - draw it
15:07 - this is easy it's just that the piece x
15:10 - and y location and we need to use its
15:12 - width and height
15:18 - okay it now looks the same as before but
15:22 - each piece is showing the part of the
15:24 - video it's responsible for
15:27 - we can actually parameterize this
15:29 - function here to support any number of
15:32 - rows and columns
15:39 - and we just call it here with default
15:41 - values in the beginning
15:46 - we can test in the console by using
15:48 - different sized grids
15:58 - let's randomize the location of the
16:00 - pieces next
16:02 - we'll just write a function where we
16:04 - iterate through all of them and generate
16:06 - a random location for each piece
16:13 - we set here the x and y respectively
16:25 - we call this in the console and
16:29 - it's not what we expect
16:33 - the random values are between 0 and 1
16:36 - meaning that they are all pretty much in
16:38 - the top left corner here
16:41 - i'm not gonna go into how half pixels
16:43 - work
16:44 - so let's just move on and scale these by
16:47 - the canvas width and height
16:54 - okay much better but you can see that
16:57 - some pieces go outside the screen here
17:00 - we can prevent that by subtracting the
17:03 - piece width and height here when scaling
17:14 - ok good
17:15 - now the reason why we see duplicate
17:17 - pieces
17:18 - once randomly distributed and others
17:21 - that are behind than in the correct
17:23 - locations
17:24 - is that we are not clearing the canvas
17:26 - before redrawing each frame
17:29 - if we do this here
17:37 - and randomize the pieces again
17:40 - we get what we expect
17:42 - let's test different grid sizes as well
17:47 - neat
17:50 - i actually want to have an idea of where
17:52 - the pieces need to go it will make
17:55 - debugging easier and maybe we can keep
17:58 - it as a
17:59 - easy mode or something like that
18:03 - so
18:03 - i'll move this clear wrecked call to the
18:06 - top
18:07 - set the 50 transparency
18:10 - and uncomment drawing the video we had
18:12 - earlier
18:14 - then i reset the transparency so that
18:17 - only the video is semi-transparent but
18:19 - the pieces are drawn normally after that
18:23 - in this way the video on the background
18:25 - shows where i need to move the pieces
18:27 - but it's faded so it won't be confused
18:30 - with the actual pieces
18:38 - now to implement the drag and drop
18:40 - functionality for the pieces we need to
18:42 - add some event listeners to the canvas
18:45 - we implement a function for it here and
18:48 - begin by adding an event listener for
18:50 - mousedown with a callback function that
18:52 - we will need to define
18:55 - then two more event listeners for mouse
18:57 - move and mouse up will also be needed
19:08 - to handle the mouse down event we first
19:10 - mark down what is the selected piece by
19:13 - getting the one the user presses in the
19:15 - interface
19:19 - we will define this function soon but
19:22 - let's get the top level logic down first
19:25 - we'll store the selected piece inside
19:27 - the global variable which we initialize
19:30 - with null in the beginning or if no
19:32 - piece is pressed
19:34 - then if a piece is selected we calculate
19:37 - what is the offset to the top left
19:39 - corner of the piece like this
19:50 - we will use this offset while dragging
19:53 - so that the piece doesn't just snap to
19:55 - the mouse location like this
19:58 - it will make for a smoother interaction
20:02 - then on mouse move if a piece is
20:05 - selected we update the location to the
20:07 - new mouse location and consider the
20:10 - offset as well
20:20 - the mouse up event will just leave empty
20:22 - for now
20:30 - so how do we find out if the player
20:32 - presses a piece or not
20:35 - well all we need to do is iterate
20:38 - through all the pieces and check to see
20:40 - if the click location is within the
20:42 - bounds of any of them
20:45 - we need to check if x is greater than
20:47 - the piece is x
20:49 - and less than that plus the piece's
20:52 - width
20:59 - and if the y is greater than the piece
21:01 - is y
21:02 - and less than that plus the piece's
21:05 - height
21:14 - if so we just return this piece
21:21 - if nothing matches these conditions we
21:23 - just return null which means that
21:26 - nothing was pressed
21:28 - ok let's test i move the mouse over the
21:31 - bottom left corner piece i click
21:34 - and drag
21:35 - great but now i'm stuck like this
21:38 - i need to implement the mouse up event
21:41 - so that i can actually let go of the
21:43 - piece
21:44 - now the obvious thing that we need to do
21:46 - is set the selected piece to null
21:49 - but before that we need to do one more
21:52 - thing
21:53 - we check if the piece is close
21:55 - to the correct location where it's
21:57 - supposed to go
21:59 - and if so we snap it in place
22:04 - we will need to implement these new
22:06 - methods but first let's discuss why
22:09 - we're doing this
22:11 - the first reason is that it gives proper
22:14 - feedback
22:16 - when a player lets go of the piece if it
22:18 - jumps into place
22:20 - it means that the move was correct
22:23 - and the player can move on to the next
22:25 - one the second reason is that later we
22:28 - will need to evaluate if the pieces are
22:30 - in the correct position or not
22:33 - and it's very unlikely that the player
22:35 - will be able to drop all pieces in a
22:38 - pixel perfect way so this snapping will
22:41 - help with that as well
22:43 - final reason is that i think it makes
22:45 - the game more interesting and fun to
22:47 - play
22:48 - so to implement this functionality we go
22:51 - back to the piece class
22:53 - and add the two new methods
22:56 - first we check if the piece is close to
22:58 - the correct location
23:00 - we do that by simply calculating the
23:03 - distance to the correct location and
23:05 - checking if it's under a threshold
23:14 - i use a threshold that is proportional
23:16 - to the size of the piece here
23:18 - about 33 percent
23:20 - i just did some trial and error and i
23:22 - think it feels good like that
23:24 - if the distance is less
23:26 - then it's considered close
23:28 - otherwise it's not
23:31 - the correct locations should be stored
23:33 - somewhere and i'll do that here in the
23:35 - constructor because we already agreed
23:37 - that the pieces will be initialized at
23:39 - the correct location
23:41 - to measure the distance we just use a
23:44 - consequence of the pythagorean theorem
23:47 - i'm pretty sure you know it already but
23:49 - if you don't or want to learn something
23:51 - more about it
23:53 - check out the recent video i made about
23:55 - it
23:56 - i think i did a pretty good job
23:57 - explaining it proving it and giving all
24:00 - kinds of applications what do you guys
24:02 - think
24:11 - the snap method is really easy
24:13 - it just puts the piece in the correct
24:15 - location and that's it
24:22 - let's debug
24:23 - now i can go and click on a piece
24:26 - drag it and release
24:28 - i can release it anywhere i want and if
24:31 - i drop it close to the correct location
24:33 - it will snap into place
24:35 - and this works for every piece
24:37 - but one issue is that the selected piece
24:40 - is sometimes drawn underneath the others
24:43 - this is not good
24:45 - it depends on the order we are drawing
24:47 - the pieces
24:48 - since the top left one is the first in
24:50 - the array all others will be drawn on
24:53 - top of it
24:55 - but the bottom right one doesn't have
24:57 - this problem it's always on top
24:59 - we need to fix this by moving the
25:01 - selected piece at the last index in the
25:03 - array
25:04 - we first find out the index it's
25:06 - currently at
25:13 - then even though it should not be
25:15 - possible for it to be missing i check
25:17 - here just to be sure
25:19 - i then remove it using the splice method
25:22 - and add it again at the end of the array
25:24 - using the push method
25:28 - now no matter which piece i select it
25:31 - will be drawn on top of everything as
25:33 - expected
25:34 - but there's still one problem
25:36 - when i click here where multiple pieces
25:39 - overlap it selects the bottom most piece
25:43 - we fix this by iterating the pieces
25:45 - array in reverse order
25:48 - in this way
25:49 - we stop at the topmost piece that the
25:52 - user is clicking on
25:58 - now everything works well but one final
26:01 - thing we need to consider is mobile
26:03 - devices
26:04 - what we did so far actually doesn't work
26:06 - on those yet
26:08 - see even if i debug using this mode and
26:11 - i try dragging pieces around
26:13 - nothing happens
26:15 - this is because mobile uses touch events
26:18 - instead of mouse events
26:20 - so we need to support those as
26:22 - well we go back to the function where we
26:25 - add event listeners
26:27 - copy all three of them and rewrite what
26:30 - is necessary
26:48 - the touch start touch move and touch and
26:51 - callback functions will need to be
26:53 - defined next
26:54 - but they are easy to do because we will
26:57 - reuse the mouse event callback functions
26:59 - from earlier
27:00 - we just need to get the location here in
27:03 - a little different way
27:05 - and then we can call the other callback
27:07 - like this
27:14 - we copy this callback function and
27:16 - implement the other two
27:30 - now when we debug it works
27:32 - but an error happens on touch end
27:36 - that's because there's no location
27:37 - available then
27:39 - i mean if you're not touching
27:42 - where are you not touching
27:45 - so we actually omit these arguments here
27:58 - now everything works when i'm debugging
28:00 - here but some mobile devices have a
28:02 - built-in function that refreshes the
28:04 - page when dragging down
28:06 - we don't want this to happen every time
28:08 - a player drags a piece downwards
28:11 - so we disable it in the css file by
28:14 - setting overscroll behavior to none
28:21 - that's it for the drag and drop
28:23 - let's just see if it also works with
28:25 - different sized pieces
28:50 - next we add gameplay elements like the
28:52 - menu and showing the elapsed time
28:55 - we need to define some more structure in
28:57 - the html page
28:59 - a div that will contain all these new
29:01 - elements
29:05 - a div for the menu and the div for
29:07 - showing the time
29:10 - the menu will contain a select component
29:13 - for setting the difficulty
29:24 - there will be four different options and
29:26 - when the user changes these we will call
29:29 - a function called set difficulty which
29:31 - we'll need to define in javascript
29:38 - we also need the button here to start
29:41 - the game pressing it will call a
29:43 - function called restart that we'll also
29:45 - need to define in javascript
29:47 - so let's move to the javascript file
29:49 - next
29:51 - we add two new global variables to keep
29:53 - track of the start and end time
30:00 - we then implement the set difficulty
30:02 - function
30:08 - first we get the value of the select
30:10 - component we defined in html
30:18 - based on that we call the initialize
30:20 - pieces function with a different number
30:22 - of rows and columns
30:24 - i'm using a switch case structure here
30:27 - to avoid many if else statements
30:30 - it's a common mistake my students make
30:32 - the values i use here are just guesses
30:35 - pretty much
30:36 - but for the insane variant i wanted to
30:39 - have exactly 1000 pieces
30:41 - so i use 40 and 25 which has the most
30:45 - square aspect ratio
30:48 - then the restart function will set the
30:51 - start time variable to the current
30:53 - timestamp
30:59 - and the end time is set to null because
31:01 - we just started playing
31:03 - we also randomized the pieces at this
31:05 - stage
31:06 - if i refresh we don't see the menu
31:09 - anywhere
31:10 - actually it flashes rapidly before the
31:13 - page loads but where does it go we can
31:15 - use the developer tools to inspect the
31:17 - elements and see that they are pushed
31:20 - below the bottom of the page by the
31:22 - canvas
31:23 - we can actually try out different styles
31:26 - here to get it to work
31:28 - setting an absolute positioning with the
31:30 - zero top will do the trick for now
31:33 - so i will add this to our css file
31:45 - refreshing now it works
31:49 - i can press start and it will randomize
31:52 - the pieces each time
31:54 - and if i change the difficulty level we
31:56 - see the different sized grids coming up
31:59 - i thought the insane mode would be too
32:01 - processor intensive at first
32:03 - but it works fine on my computer at
32:05 - least
32:06 - i'm sure some devices will struggle
32:08 - though
32:11 - next we display the time i will define a
32:14 - function called updatetime that first
32:17 - takes the current time from the system
32:23 - then it takes the div we defined earlier
32:26 - to hold this value and sets the inner
32:29 - html to the difference between now and
32:32 - the start time
32:39 - we need to call this function somewhere
32:41 - so i will go to the update canvas
32:43 - function that is called on every frame
32:46 - and enter it here
32:47 - we also notice that this name is not
32:50 - proper anymore because now we update
32:52 - more than just the canvas here
32:54 - so i will refactor it a bit
33:07 - when i refresh now i press start and it
33:10 - shows the time here
33:12 - but it's in milliseconds and we should
33:14 - format it properly
33:23 - i'll first convert it to seconds by
33:25 - keeping the integer part of the
33:27 - milliseconds when dividing by 1000
33:31 - then i want to consider this format
33:34 - so we need to know the seconds part
33:37 - between 0 and 59
33:39 - and we will get it like this
33:45 - the minute part also between 0 and 59
33:48 - can be obtained like this
33:52 - and the hour part is between 0 and 23
33:55 - and we get it like this i doubt anybody
33:58 - will spend more than a day playing this
34:08 - then to format them into the final
34:10 - string i take each component and do a
34:13 - left padding with 0 if necessary
34:19 - i use a column between each part
34:32 - then we return this final value and
34:34 - that's it
34:35 - now we can use it here to format the
34:37 - difference
34:49 - starts to feel like a real game already
34:51 - don't you think
34:54 - but nothing happens when we're done we
34:56 - need to detect somehow that all pieces
34:58 - are in the correct locations
35:02 - we do that by adding an attribute here
35:04 - that will say if the location is correct
35:06 - or not
35:07 - initially it should be because the
35:09 - pieces are defined at the correct
35:11 - location
35:12 - but then when we randomize we
35:15 - immediately set it to false
35:17 - then when a piece is snapped to the
35:19 - correct location we set it to true again
35:24 - it's possible that someone grabs a piece
35:26 - from the correct location
35:29 - so we need to set it back to false here
35:31 - on mouse down
35:34 - then to check if all the pieces are
35:36 - correct we write a function like this
35:41 - it goes through all pieces
35:43 - and if even one of them is not correct
35:46 - the function returns false
35:48 - otherwise we return true
35:53 - we check this in the mouse up callback
35:56 - function because the game can only be
35:58 - completed when the player releases a
36:00 - piece
36:01 - the last piece that goes in the correct
36:03 - location
36:05 - here we also need to check if the end
36:07 - time is null because in principle the
36:09 - player can continue to move pieces
36:11 - around after the game is over and we
36:14 - don't want to update the time anymore
36:16 - after that
36:18 - we just set the end time here to the
36:20 - current time
36:22 - we also need to change the display here
36:25 - so that if an end time is available the
36:27 - difference to that is shown and not the
36:30 - difference to the current time
36:41 - okay let's see now
36:43 - timer starts counting same as before
36:46 - we play the game
36:51 - and now the timer
36:52 - stopped now we'll make this part look
36:55 - better
36:56 - first let's put the button below like
36:59 - this
37:02 - now we can move to the css file and
37:04 - position these in the center of the
37:06 - screen
37:08 - we say that the items should be 50
37:10 - percent from the left and 50 percent
37:12 - from the top
37:13 - now if we leave it like this the items
37:16 - will move here so their top left corner
37:19 - is in the center screen
37:21 - but we would like them to be here so we
37:24 - need to add transform translate minus 50
37:27 - minus 50
37:28 - and now we get this
37:32 - now the text isn't clearly readable as
37:34 - such
37:35 - let's add the semi-transparent
37:37 - background here like this
37:45 - better now we can align the items to
37:47 - center like this
37:53 - we can give the items some spacing
37:55 - around by setting a value for the
37:57 - padding
37:58 - i'm using a value of phi min here which
38:01 - means that the spacing will be five
38:03 - percent of the minimum between the width
38:05 - and height of the window
38:08 - i also set the black semi-transparent
38:10 - border here as well
38:18 - now we can make the button look better
38:20 - we'll give it a larger font size
38:23 - and a bluish background color
38:30 - and white text
38:33 - good
38:34 - we can make the button more
38:36 - user-friendly by changing its properties
38:38 - when mouse is hovering it
38:41 - i'll make it have an orange background
38:43 - and black text in this case
38:50 - okay now when i hover it changes style
38:53 - you can't see my mouse here now for some
38:56 - reason
38:56 - but it's there and it looks like the
38:58 - default arrow
39:00 - to make it look like a hand cursor we
39:03 - can change it here in css
39:06 - nowadays there are many fancy features
39:08 - you can choose when styling elements
39:11 - like you can easily add animations with
39:13 - the transition property
39:16 - by setting this 0.3 second duration here
39:20 - we will get a short animation from one
39:22 - style to the other on hover i think it's
39:25 - really nice
39:26 - i don't like this border here so i'll
39:29 - remove it and i will make the bottom
39:31 - corners round by setting a small radius
39:37 - the font size apart from this button is
39:39 - rather small
39:41 - so we'll work on that next
39:44 - first i change it to arial
39:47 - i think that the serifs don't look very
39:49 - good in this case
39:50 - okay now i'll make it bigger same as the
39:53 - font size on the button
39:58 - i think it's okay now let's see how it
40:00 - would look like on mobiles as well
40:03 - it's definitely readable i think it
40:06 - could be a bit bigger but this will also
40:08 - do for now the text on the select
40:11 - component is not affected yet
40:13 - so we need to specifically add the font
40:15 - size there as well
40:20 - ok switching back to full screen now
40:23 - i'll change the mouse to look like a
40:25 - pointer when hovering this select
40:27 - component as well and style this element
40:30 - to be more in line with the button
40:32 - so no border a small radius and we need
40:36 - to remove the outline here as well
40:41 - okay let's try testing the game now
40:44 - i press start and
40:46 - it's not what we want really
40:49 - this menu should disappear at this stage
40:52 - and only the timer should remain visible
40:55 - so i will go back to the html and take
40:58 - out this element from here
41:03 - then in the javascript file we go to the
41:06 - restart function and set the display of
41:08 - the menu items to none
41:17 - now i refresh press the start button and
41:22 - the menu is gone but the timer is gone
41:25 - as well
41:26 - it should be there
41:28 - let's debug
41:29 - i switch to the elements panel and
41:32 - it is there it is just below the canvas
41:36 - so we need to change its style in css
41:39 - i want it on the top of the screen so i
41:42 - will change positioning to absolute
41:45 - set the zero top
41:47 - and let's have it center screen
41:49 - so i set left to 50
41:51 - and i use the transform translate method
41:54 - again but only on the left side now i
41:57 - refresh press start and the timer is
41:59 - there
42:03 - next i'll show you how to draw a logo
42:05 - using powerpoint
42:07 - you can use a number of different
42:08 - software to do this i'm using powerpoint
42:11 - just because it's installed on most
42:13 - student computers
42:15 - so hopefully you have it too i use the
42:17 - rounded rectangle tool to start drawing
42:20 - a camera i can adjust the corner radius
42:23 - like this
42:24 - now i make a copy of the item by holding
42:27 - down the ctrl key and dragging it to a
42:30 - new location
42:38 - i will do a similar thing with circles
42:40 - now
42:47 - i will change the colors to just black
42:50 - and white for the circles
42:52 - and i will use the align tools to make
42:54 - sure they are just the way i want them
42:56 - to be i change the color of the
42:58 - rectangles drawn earlier to black and
43:01 - move the circles on top
43:03 - newer features of powerpoint have these
43:06 - helper lines appearing and they are
43:08 - useful i think but if you don't have
43:10 - them and want to have proper alignment
43:13 - just use the align tools we used earlier
43:16 - now i'm happy with how this looks so i
43:19 - will copy it and paste it as an image we
43:22 - will need to use it later in this format
43:25 - but now i want to draw a small puzzle
43:28 - piece
43:29 - so i start off with a rectangle about
43:32 - this size
43:33 - and i draw an oval here as well
43:41 - i will shape this oval to look more like
43:43 - the connecting part of puzzle pieces and
43:46 - i do that by editing the points of this
43:48 - shape
43:50 - right click edit points
43:52 - it's useful if you understand how bezier
43:55 - curves work at this stage
43:57 - ok i'm happy with this
44:00 - i copy it
44:01 - rotate it on its side
44:08 - and merge these three items into a
44:10 - single shape by going to merge shapes
44:13 - and union
44:14 - now i'll place this on top of the image
44:17 - copy of our camera align it a bit better
44:20 - and duplicate both objects on the right
44:26 - for the first copy we select first the
44:29 - camera image
44:30 - then holding shift
44:33 - press on the puzzle piece as well
44:35 - go to merge shapes and subtract
44:39 - for the second copy also select the
44:42 - camera image first
44:44 - then holding shift press on the puzzle
44:46 - piece as well
44:48 - go to merge shapes and intersect
44:51 - i now move this piece into place so that
44:54 - it looks like we're just completing the
44:56 - puzzle
44:57 - now select these two objects copy and
45:00 - paste as image
45:02 - at this point we don't need all the
45:04 - other items anymore
45:06 - we just keep this one as the icon and
45:09 - we'll use it to make a title next
45:11 - i just create a text box and write
45:14 - puzzle cam here in all caps
45:17 - i set the font to arial black to be
45:20 - similar to that in the html page
45:23 - and increase the size of the font
45:30 - i then make the p larger
45:32 - and i want it to be the same size as the
45:35 - camera
45:36 - so a bit of trial and error goes here
45:47 - and when we're happy with it apply the
45:49 - same size to letter c and we're almost
45:52 - done
45:53 - we can now copy everything and paste as
45:55 - an image once again
45:57 - but you'll see that the image has some
45:59 - weird transparent margins here
46:01 - it's how powerpoint works when text
46:04 - boxes are involved unfortunately
46:06 - but we can crop that out using the
46:08 - cropping tool
46:16 - resize the image to the size we want
46:20 - right click and save as picture
46:23 - then i name it as title.png
46:26 - and add it to the same directory as our
46:29 - code
46:30 - speaking of which we can now add the new
46:32 - image to the html file like this
46:35 - and i'll set its width to 90
46:37 - inline here because there's no other
46:40 - style i will add to this
46:42 - then refreshing makes the image appear
46:46 - i think it will look better if we do one
46:48 - small change in css
46:50 - i will make the whole menu wider like
46:52 - this in this way the title image is
46:55 - significantly larger than the other text
46:58 - and the drop down for the difficulty
47:00 - moved on the same line as the label i
47:03 - think it's better like this
47:11 - let's add some sounds next
47:13 - first i'll define one using an mp3 file
47:16 - i recorded earlier like this
47:23 - i'll set the volume quite low because
47:26 - this will play whenever we drop a piece
47:28 - in the correct place
47:30 - it would be really annoying if it plays
47:31 - at maximum volume i think
47:34 - so let's now add it here in the snap
47:37 - method and test
47:40 - i refresh the page press start and
47:47 - yay
47:48 - it works
47:54 - but there is no sound when completing
47:56 - the game and there definitely needs to
47:58 - be something there
48:00 - instead of simply adding another mp3
48:02 - file here which would make this tutorial
48:05 - really short
48:06 - i will remind you that it's possible to
48:08 - synthesize sounds in javascript to
48:11 - generate the sounds we will need to
48:13 - define an audio context and doing it
48:16 - like this will make it work on most
48:18 - browsers
48:25 - then i want to create a simple melody
48:27 - consisting of three notes played on
48:29 - piano keys here i'm writing their
48:32 - frequencies
48:40 - we need to create a function to play a
48:42 - single note
48:43 - it will have a specified key and a given
48:46 - duration how long the key should be
48:48 - pressed
48:53 - we next define an oscillator
48:55 - this will be responsible for generating
48:58 - the sound with a given frequency
49:01 - we set the frequency to the value coming
49:03 - as a parameter here
49:06 - we start the oscillator like this at the
49:09 - current time
49:11 - and we can also tell it to stop after
49:13 - the specified duration
49:15 - it is good to also disconnect the
49:17 - oscillator at the same time otherwise
49:20 - some hardly noticeable background noise
49:23 - can still be heard on some browsers
49:26 - i'm using set timeout for that and i
49:28 - specified the duration here as well
49:31 - now there's a problem because set
49:34 - timeout expects the duration in
49:36 - milliseconds
49:37 - but the stop method expects it in
49:39 - seconds
49:40 - so i decided it to be in milliseconds
49:43 - and need to divide here by 1000
49:47 - one more thing we need to do before we
49:49 - test is to connect the oscillator to the
49:52 - destination
49:53 - which in this case is the default
49:55 - speakers on your device
49:59 - okay let's test
50:01 - i do that by calling the play note here
50:04 - in the console
50:07 - and we get an error looks like i don't
50:09 - know how to spell oscillator let me just
50:12 - fix that real quick and
50:19 - you can hear a simple sound for one
50:21 - second
50:22 - now we begin to shape this to sound more
50:25 - like a piano
50:27 - i will use an envelope to control the
50:29 - gain
50:30 - you can think of it as the volume in a
50:32 - sense i connect the envelope now to the
50:35 - destination and i change the oscillator
50:38 - here to be connected to this envelope
50:40 - instead forming a kind of chain
50:43 - then the piano sound has a powerful
50:45 - attack
50:46 - which means that it needs to go from
50:48 - zero to maximum gain really quickly
50:52 - here it happens in 0.1 of a second
50:55 - i set the maximum here to be 0.5 instead
50:59 - of 1 so that it's not too loud
51:02 - then the gain will gradually decrease
51:04 - back to 0 for the given duration
51:07 - again specified here in seconds
51:10 - now let's refresh and test
51:13 - another error
51:15 - i sure do many of those today it seems
51:18 - the problem is that i connect the
51:19 - oscillator here to the envelope before i
51:22 - even define it
51:24 - so moving it down here should work
51:29 - you can now hear the sound gradually
51:32 - fading during the course of one second
51:35 - [Music]
51:39 - and you can get an even nicer sound by
51:42 - changing the wave type from the default
51:44 - sign to triangle
51:48 - [Music]
51:51 - if you're having trouble understanding
51:53 - these things do check out my visual web
51:55 - development course
51:57 - there i use a much slower pace and
52:00 - explain all the different techniques i
52:02 - needed to make my augmented reality
52:04 - piano
52:05 - now let's compose the melody itself
52:11 - it will start with a simple note at
52:13 - first played for 300 milliseconds
52:17 - then i'll play a different note after
52:19 - 300 milliseconds
52:24 - and another one 300 milliseconds after
52:27 - that or 600 milliseconds from the
52:30 - starting point
52:33 - and what we get is this
52:36 - [Music]
52:38 - now this could work as the melody
52:41 - but you're free to make it sound any way
52:43 - you like
52:44 - for example it could sound like this
52:48 - [Music]
52:53 - now to play it when finishing the puzzle
52:55 - we just call this function here
53:28 - [Music]
53:30 - it sounds a bit bad because it overlaps
53:33 - with the final popping noise when the
53:35 - piece snaps into place
53:37 - i fixed this by adding a small delay
53:39 - here to the function call
54:08 - [Music]
54:14 - to store the scores we will need to use
54:16 - some kind of database
54:19 - i recommend going to the following link
54:21 - and downloading xampp
54:23 - it comes with mysql and phpmyadmin which
54:27 - is a nice user interface for managing
54:29 - database contents
54:31 - xampp also includes the apache server
54:34 - which we will need to write the backend
54:36 - php code
54:38 - after installing samp we go to the
54:41 - control panel and start these two
54:43 - services
54:45 - then we head on to the admin page
54:48 - from here we can open phpmyadmin and
54:51 - begin to construct our database to hold
54:53 - the scores
54:55 - we create a new database by pressing the
54:57 - new button on the left and we give our
54:59 - database a name
55:04 - now we need to create a table
55:07 - four columns are just fine and let's
55:09 - call it scores
55:11 - now every mysql table should have an id
55:14 - field
55:16 - we leave it as an integer type and mark
55:18 - it as a primary key
55:24 - and tick this checkbox right here so
55:27 - that it will auto increment
55:29 - this means that every time we'll add a
55:31 - new score we don't have to worry about
55:33 - its id anymore it will automatically be
55:36 - decided by mysql
55:38 - next we'll need to store the name of the
55:40 - player here it will be a string so we'll
55:44 - use varchar as the data type and put a
55:46 - maximum length of 255 characters here
55:51 - might be a bit too much but never can
55:53 - know what names people come up with
55:56 - next we'll store the time
55:58 - it can be an integer because i plan to
56:00 - store the number of seconds
56:03 - i can also add the comment here to
56:05 - clarify the format so i don't need to
56:07 - remember it later
56:09 - and finally let's store the difficulty
56:11 - level so that we can later group the
56:13 - scores based on that now we press save
56:17 - and we can see the table structure right
56:19 - here
56:20 - let's add some sample data to work with
56:24 - it's going to be some fake placeholder
56:27 - data for now
56:28 - we go to insert
56:30 - and start entering values in every field
56:33 - but as i said earlier we don't need to
56:36 - worry about the id it will be
56:38 - automatically generated by mysql
56:41 - i'll just add my name here and let's say
56:44 - it took me 50 seconds to complete the
56:46 - puzzle on easy difficulty
56:52 - then i'll add radu again and 100 seconds
56:55 - while playing a medium
57:04 - and again with 200 seconds on hard and
57:07 - finally 4 000 seconds on insane mode
57:11 - so now it looks like i've played the
57:13 - game on all difficulty levels
57:16 - let's add a few more people here like
57:19 - john with 20 seconds on easy and 1000
57:22 - seconds on insane
57:27 - diana with 100 seconds on hard and 400
57:31 - seconds also on hard
57:36 - michael with 400 seconds on medium and
57:39 - leo with 10 seconds on medium
57:45 - now we press go and all these 10 entries
57:48 - were added into the table
57:50 - we can click on the browse tab to
57:52 - inspect it
57:55 - now we can actually see here the sql
57:58 - query that outputs this entire table
58:01 - it says select everything from scores
58:06 - we will later need to write similar
58:08 - queries in php to communicate between
58:11 - our frontend game and the database
58:14 - this query right here could be useful to
58:17 - load the scores for example
58:19 - but it's not very nice as such
58:21 - it mixes all difficulty levels and is
58:24 - not sorted in any way
58:26 - hard to see who the winners are like
58:28 - this
58:31 - so let's head on over to search and say
58:34 - that we want only those entries with
58:36 - easy difficulty
58:38 - we can see how the sql query here is
58:41 - updated as well
58:43 - i think this phpmyadmin tool is very
58:45 - useful for learning sql syntax
58:48 - you can also practice writing the syntax
58:51 - by yourself by pressing on edit
58:54 - here we could for example add an order
58:58 - by clause
58:59 - so that the results are sorted by time
59:02 - now it's really easy to see that john is
59:04 - the winner when playing on easy mode
59:07 - we can similarly obtain the results for
59:09 - the other difficulty levels
59:11 - we just need to change the difficulty
59:13 - here each time
59:22 - we'll use this query later in php to get
59:25 - the high scores
59:27 - now to add a new result we use the
59:30 - insert keyword
59:32 - we specify the table name and the
59:35 - columns that will receive the data
59:46 - and then the actual values that go into
59:49 - it
59:53 - note here that the name and difficulty
59:55 - are strings
59:56 - so they need to be specified using
59:58 - quotes otherwise you'll get an error
60:03 - then we press go
60:05 - and get feedback that one row was
60:07 - inserted
60:09 - if we browse the table again we'll see a
60:11 - new entry for radu on insane difficulty
60:22 - now we'll practice these queries using
60:24 - php and because this is the first time i
60:27 - teach it i will take it slow
60:30 - i've moved all project files of the game
60:32 - built so far in the htdocs directory of
60:36 - xaap
60:38 - now i'll create an empty file called
60:41 - server.php
60:43 - we next open this file in our text
60:45 - editor and in the browser
60:48 - but note here the address is localhost
60:51 - slash puzzlecam slash
60:54 - server.php you need to write it like
60:57 - that because then the php code is
60:59 - executed by the apache server
61:02 - i remind you that you need to have xampp
61:05 - installed and both apache and mysql
61:07 - running at this stage
61:10 - now php code is quite different from
61:13 - javascript
61:14 - the syntax starts and ends like this
61:17 - and all the code goes in between
61:20 - if you want to print something here you
61:22 - use the keyword echo followed by what
61:25 - you want to print
61:27 - if you refresh the page you get exactly
61:30 - that
61:31 - now i'll teach you how to connect the
61:32 - mysql database we created earlier
61:36 - because it's also running locally on our
61:38 - computer we'll use localhost as the host
61:42 - the default user is root and the
61:44 - password is empty
61:46 - of course if you're gonna put this
61:48 - online somewhere you'll want to add some
61:50 - better security but i won't focus on
61:53 - that in this video
61:55 - then to connect to the database we use
61:58 - the mysqli connect function and provided
62:01 - this information
62:09 - if the link was not established we
62:11 - warned that the connection failed
62:14 - the die function terminates the php
62:17 - script as
62:18 - well if the code passes the if statement
62:22 - it will go here where we just echoed
62:24 - that connection was successful
62:27 - i'll refresh and connection was
62:29 - successful
62:31 - but if i specify a different host php
62:34 - will produce some warning messages and
62:36 - the program terminates after this die
62:39 - statement
62:40 - we also get an error message if we use
62:42 - the wrong user or password
62:45 - now with the successful connection we
62:47 - can move on and select the database like
62:50 - this
62:57 - and we can use the or keyword to call
63:00 - the die function in case of failure
63:04 - if the code reaches here it will output
63:06 - the success message
63:08 - we can test and see that it was a
63:10 - success because the puzzle cam database
63:13 - really exists
63:15 - if we mess up here and use a different
63:17 - name for example the code will terminate
63:20 - with an error
63:22 - let's now define an sql query as a
63:24 - simple string
63:26 - i'll use the query we figured out
63:28 - earlier using phpmyadmin
63:30 - to select those entries from the scores
63:33 - table with easy
63:42 - difficulty we can execute this query
63:45 - using the mysqli query function
63:49 - now this function doesn't actually
63:51 - return the result but an object that we
63:54 - can use to iterate through the results
63:57 - i'll show you
63:58 - we first initialize an empty array
64:01 - then if the result contains any rows we
64:04 - will use a while loop to fetch each row
64:07 - one by one using the mysqli fetch asoc
64:11 - function on the rs object
64:14 - we add each row to the results array
64:17 - using the array push function and then
64:20 - print the array using the print r
64:22 - function like this
64:25 - and we get an error
64:28 - i forgot an i here it should be mysql i
64:32 - num rows
64:35 - now we have the array printed out here
64:37 - but it's not sorted with respect to the
64:39 - score or in this case playing time
64:43 - as we saw earlier we can do that using
64:46 - the order by clause
64:48 - i'll also format this query a bit better
64:51 - so it doesn't go outside the screen
64:54 - note that in php the stop sign is used
64:57 - for concatenation not the plus as in
65:00 - javascript and many other programming
65:02 - languages
65:04 - now because we'll reuse this code to get
65:07 - results for other difficulty levels it
65:10 - makes sense to write this as a function
65:12 - that returns the results array
65:15 - we can then call it with easy as a
65:17 - parameter and get the same result
65:26 - let me just replace here the difficulty
65:28 - to use this argument and
65:31 - almost forgot need to specify the link
65:34 - here as well
65:36 - now we refresh and get the same result
65:38 - as previously
65:40 - but we can get other results as well by
65:42 - calling the function again
65:48 - let me quickly add the other difficulty
65:50 - levels as well
65:55 - now let's wrap all this into one
65:57 - function to get all the scores
66:00 - we don't need these print statements
66:01 - anymore we can just return an
66:03 - associative array with each of these
66:06 - results
66:07 - associative arrays are like javascript
66:10 - objects where we can give names to the
66:12 - keys
66:22 - now we call this function and print the
66:25 - result like this
66:28 - or to be more familiar you can use echo
66:32 - and convert this result array into a
66:34 - json string like this
66:37 - it's great that php has support for all
66:40 - these without needing to install any
66:42 - libraries
66:44 - i'll comment this out and focus on
66:46 - creating the other function we'll need
66:48 - to add the new score to the database
66:52 - i'll pass the information as the first
66:54 - argument
66:56 - for now i'll write the query as a simple
66:59 - string with hard-coded values here
67:02 - and then replace each value one by one
67:05 - with the elements from the info
67:08 - if you write your query like this it's
67:10 - less likely to make mistakes
67:13 - otherwise it's quite easy to mess up and
67:15 - forget the single quote or a double
67:17 - quote somewhere
67:20 - now we call mysqli query again
67:23 - if we don't succeed for some reason we
67:25 - will return false
67:27 - otherwise we return true to signify
67:30 - success
67:32 - now we can test the function like this
67:34 - by defining some info and calling the
67:37 - add score function using it
67:41 - we can wrap it in an if statement like
67:43 - this to see if the insert was a success
67:46 - or not
67:53 - and it claims to have worked let me now
67:56 - bring back this function call to get all
67:59 - the scores and see if it really worked
68:02 - and it did
68:04 - great
68:05 - now we're gonna change this php server
68:07 - to support both functionalities to add
68:10 - the score and to read all the scores
68:13 - let me remove this testing code first
68:17 - now i'll use a get parameter named info
68:20 - to send some additional information to
68:23 - the page
68:24 - let's first read it here and see how it
68:27 - works
68:28 - so i need to set here info equal to
68:30 - something let's try hello for now
68:33 - and you can see it is indeed printed
68:36 - here
68:37 - i'll change info now to contain
68:39 - information necessary to add the score
68:42 - and i'll write it as a json string
68:47 - now to parse this string i call json
68:50 - decode and get info as an object here
68:53 - which i can pass to our add score
68:55 - function we wrote previously and handle
68:57 - the outcome as before
68:59 - now we can insert the score by just
69:02 - visiting this address with some
69:03 - parameters
69:06 - now make it so that if we don't send any
69:08 - info it will list all the scores instead
69:12 - in this way we support both reading and
69:15 - writing to the database with this single
69:17 - script
69:18 - now let me address the elephant in the
69:20 - room yes this code is not very secure
69:24 - anyone can hack my scores database by
69:27 - going to this link and sending some data
69:30 - there
69:31 - even worse this data is not escaped in
69:33 - any way so they can even do some damage
69:36 - through sql injections here
69:39 - all these issues are not easy to fix and
69:41 - if i spend time on it now it will
69:44 - deviate too much from the project we are
69:46 - building a puzzle game not making the
69:48 - most secure thing in the world
69:51 - but because many of you are interested
69:53 - in security
69:54 - here's what you should do
69:57 - first escape the information here or
70:00 - even better use user prepared statement
70:03 - change get here into post it's more
70:05 - secure
70:07 - i didn't do it myself because i would
70:09 - need something like postman to test and
70:12 - i didn't want to install more tools here
70:15 - post is also the common practice when
70:17 - sending data so you definitely should
70:19 - use it here
70:20 - then you'd want to add some
70:22 - authentication here so that not everyone
70:24 - can make a request such as this
70:27 - you will need to ask people to register
70:29 - and confirm their account by sending
70:31 - them a confirmation email
70:34 - i don't usually do this for my small
70:36 - projects i feel i would be asking too
70:38 - much from those visiting my website and
70:41 - if i'm hacked so what i don't have any
70:44 - sensitive information here and i kinda
70:46 - like the attention
70:48 - all these steps don't make the system
70:50 - bulletproof but each of them make it a
70:52 - little bit harder to hack
70:54 - you could go even further like adding a
70:57 - captcha because someone could automate
70:59 - the authentication if they really want
71:02 - and flood your database with a bunch of
71:04 - fake accounts and fake scores
71:06 - captchas make it harder to do but
71:09 - not impossible
71:11 - you could design some kind of validity
71:13 - checking system here
71:15 - maybe record the start time end time and
71:18 - individual moves if the result doesn't
71:21 - contain pieces moving one by one at
71:24 - reasonable time intervals it's a sign of
71:27 - foul play
71:28 - of course one could hack that too by
71:31 - figuring out how the validity checker
71:33 - works and generating fake data that
71:36 - looks real
71:37 - but
71:38 - that's all i got so let me know if you
71:40 - have better tips on security i'm really
71:43 - interested to know what you guys think
71:46 - but now let's continue with the front
71:48 - end part let me put mr chibison here
71:51 - again
71:53 - in html i'll now create an end screen
71:56 - it will show the score and allow the
71:59 - user to enter his name in this input
72:01 - field
72:05 - there will also be a button to save the
72:07 - score on click
72:09 - we'll need to implement this save score
72:11 - function in javascript
72:13 - i'll also add here a button to show the
72:15 - scores with another function we'll need
72:17 - to define
72:19 - and another button to go back to the
72:21 - menu
72:23 - i will also create the scores screen
72:27 - it will contain an empty div which will
72:29 - eventually hold the scores
72:31 - and a button to go back to the end
72:33 - screen we'll need to define this
72:35 - javascript function as well
72:37 - now i'll copy this title image in both
72:40 - these screens so that they look
72:41 - consistent
72:43 - and speaking about looks i'll define a
72:45 - css class called menu and apply it to
72:49 - all these items
72:50 - this class will be the same style we
72:53 - previously applied to the div with id
72:55 - menu items so we just changed this here
72:59 - in css
73:00 - now we refresh and we can see all three
73:03 - screens overlapping each other
73:05 - we need to hide the end screen and the
73:08 - score screen in the beginning of course
73:13 - now let's start defining the missing
73:14 - functions in javascript first the one to
73:17 - show the end screen
73:19 - i will simply use the playing time as
73:22 - the score and i'll place it inside the
73:24 - element with id score value we also need
73:27 - to compute this time as the end time
73:30 - minus the start time we need to make
73:32 - sure the end screen element becomes
73:35 - visible too like this
73:41 - then the function to show the menu will
73:44 - begin by closing the end screen and then
73:46 - making the menu appear
73:48 - now if i refresh and press start the
73:50 - menu disappears as before
73:53 - but if i call the show and screen
73:55 - function here in the console the end
73:58 - screen appears and it looks good
74:00 - but the score is now something strange
74:02 - because we didn't actually complete the
74:05 - puzzle to get the true value for the end
74:07 - time
74:08 - it will be okay when playing the game
74:10 - for real we don't need to worry about
74:12 - this
74:13 - now pressing the menu
74:16 - doesn't work
74:19 - oh i forgot the parenthesis here we need
74:22 - to call this function here on click
74:25 - sorry about that
74:26 - let's fix this and
74:29 - refresh
74:30 - start
74:31 - call show and screen function in the
74:33 - console
74:35 - press menu
74:36 - and yes it works now
74:38 - let's move on to show the scores next i
74:42 - will copy this line so that the end
74:44 - screen goes away
74:46 - and let's make the score screen appear
74:48 - instead
74:52 - now i'll make the scores container
74:55 - initially showed the text loading
74:57 - because it can take some time to load
74:59 - the scores and we want to let the player
75:02 - know something's happening we then get
75:04 - the scores with the function we'll
75:06 - implement next this getscores function
75:08 - uses fetch to get data from server.php
75:12 - which i remind is located in the same
75:14 - directory here
75:16 - fetch returns a promise
75:18 - when the response is available we
75:20 - convert it into json this returns
75:23 - another promise so we need to write then
75:26 - again and here we have access to the
75:28 - actual data
75:30 - let's log it to the console to test
75:32 - i refresh press start call show and
75:35 - screen in the console and press show
75:38 - scores and now our data is here
75:42 - it still shows loading because now we
75:44 - have to format the scores and place them
75:47 - here instead
75:48 - the format scores function will generate
75:50 - a table in html
75:52 - i won't explain this too much i feel
75:55 - that this tutorial becomes too long if i
75:57 - do that and if you were able to follow
76:00 - up to here i'm sure you'll have no
76:02 - trouble understanding what this is i
76:05 - will say however that now when i have
76:07 - the results formatted for easy i will
76:10 - extract this functionality into its own
76:12 - function it's a really bad habit to
76:15 - write similar code instead of using
76:17 - functions and many of my students have
76:19 - this problem so i thought i pointed out
76:22 - here as well
76:23 - i now call this function for each
76:25 - difficulty level to show all results one
76:28 - after the other
76:30 - the final list is just too long
76:33 - i'll set the fixed height here and
76:35 - overflow to auto so that the scroll bar
76:38 - appears
76:39 - this is better i think
76:42 - now i press back and
76:45 - i guess it's time to define the close
76:47 - scores function
76:48 - this is easy to do it will make the end
76:51 - screen visible and hide the scores
76:53 - screen
76:57 - now i refresh and
77:05 - everything seems to work well except for
77:08 - the save feature that is not implemented
77:11 - yet
77:12 - the safescore function is going to
77:14 - calculate the score as the time it took
77:16 - to play the game and get the player name
77:19 - from the input field
77:23 - if no name is entered we give a warning
77:26 - and stop the function right here
77:28 - otherwise we get the difficulty from the
77:30 - select element and do a fetch to
77:33 - server.php using the info parameter
77:35 - where we pass the name playing time and
77:38 - the difficulty level
77:42 - to give feedback to the user i'll change
77:45 - the text on the save button to say ok
77:50 - during the fetch i disable this button
77:52 - so that players can't press it multiple
77:54 - times by mistake
77:56 - i also reset the text on the save button
77:58 - when opening the end screen again in
78:00 - case the player plays a second time and
78:03 - i need to re-enable the button as well
78:07 - let's add the gray style for the
78:08 - disabled button and make the cursor a
78:11 - default arrow indicating that it can't
78:13 - be clicked
78:16 - now let's see
78:18 - an error
78:20 - of course
78:21 - looks like i forgot the closing
78:23 - parenthesis
78:25 - before i test let's also call the show
78:28 - end screen function here when the puzzle
78:30 - is complete and test for real this time
78:41 - okay works pretty well but
78:43 - my score here is in milliseconds instead
78:46 - of seconds
78:48 - but on second thought i think it's
78:49 - better to keep these in milliseconds so
78:52 - that we can better distinguish between
78:54 - people playing in almost the same time
78:56 - i'll
78:57 - format the score to show the number of
78:59 - seconds but i keep milliseconds in the
79:02 - database so that the ordering of the
79:04 - ranked list comes from that
79:16 - ok now the score appears to be the
79:18 - number of seconds and the scores table
79:20 - looks good too
79:22 - those two have zero because we now
79:25 - consider they played in 20 and 50
79:27 - milliseconds but when we clear the
79:29 - database and people actually start
79:31 - playing this this problem will go away
79:34 - one thing that still bothers me is that
79:36 - the save button is on the next line but
79:39 - then it becomes smaller when it says
79:41 - okay and it jumps up i'll fix this by
79:45 - making the input smaller so that the
79:47 - button always fits on the same line
79:50 - i'll also style it to be more consistent
79:52 - with the other items
80:02 - ok great
80:09 - now we're going to do some fine tuning
80:12 - and work on styling the pieces to look
80:14 - like actual puzzle pieces
80:16 - to do that we go to initialize pieces
80:18 - function and iterate through the grid of
80:21 - pieces like this
80:22 - the pieces are stored in a list in this
80:25 - top down and left to right order so we
80:28 - can get the index of each piece by
80:30 - simply counting here like this
80:36 - now we take each piece one by one and i
80:40 - and j will point to the row and column
80:42 - where it belongs
80:44 - we now need to add information about
80:46 - these
80:47 - things
80:48 - to each piece
80:50 - let's call them tabs
80:52 - for each tab we need to know if it's an
80:54 - inner tab or an outer tab
80:57 - we'll decide that randomly with equal
80:59 - probability like this
81:08 - so this sign becomes either a minus one
81:10 - or a plus one
81:12 - telling if it's going to be an inner or
81:13 - an outer tab
81:15 - the second thing we need to decide is
81:17 - where will the tab be located on the
81:19 - edge
81:20 - if we consider this to start at zero and
81:23 - end at one hundred percent let's allow
81:26 - the tab to be anywhere between thirty
81:28 - percent and seventy percent
81:30 - moving too close to the corners is not a
81:33 - good idea
81:34 - i'll now set this bottom attribute to
81:37 - encode the information for the tab on
81:39 - the bottom
81:40 - it will be a single number between 0.3
81:43 - and 0.7 if it's an outer tab and between
81:46 - minus 0.7 and minus 0.3 if it's an inner
81:50 - tab
81:51 - note how we store both pieces of
81:53 - information with this simple trick
81:56 - if we are on the last row we don't have
81:58 - any bottom tabs here so we'll set this
82:01 - to null
82:04 - we now do the same thing for the tab on
82:06 - the right and make sure i don't add tabs
82:10 - on the rightmost column
82:13 - the top tabs are not going to be random
82:15 - anymore because they need to connect
82:17 - with the pieces from above
82:19 - we need to set top to be minus the
82:22 - bottom value of the piece directly on
82:25 - top of it
82:27 - if we're on the first row we don't have
82:29 - a tab on the top
82:35 - we now handle the left tab in a similar
82:38 - way we use the value of minus the
82:41 - previous piece's write attribute
82:44 - now let's refresh make this console
82:46 - bigger and check here what the pieces
82:48 - array looks like
82:52 - so the first piece has a positive value
82:55 - here meaning it should be an outer tab
82:58 - the right value is negative meaning it's
83:00 - an inner tab
83:02 - we have null for left and top so looking
83:06 - good so far
83:08 - for the second piece we need to check if
83:10 - the left value is this number but
83:12 - flipped
83:13 - so let's see
83:20 - yes it looks good let's check again with
83:22 - the next piece
83:25 - good and now we get right equal to null
83:28 - because we are on the rightmost column
83:31 - now the next piece is on the next row so
83:34 - the top is not null anymore and it
83:36 - should be the opposite of the bottom of
83:38 - the first piece
83:40 - which it is
83:42 - good let's see the last piece now too
83:48 - has no values for the bottom and right
83:50 - and values for the left and top look
83:52 - okay
83:54 - yeah i think we're good
83:56 - let's now draw new shapes for the pieces
83:58 - using this extra information
84:01 - we won't use direct method here anymore
84:04 - but for now i'll just re-implement it
84:06 - using move 2 and 4 line 2 commands
84:10 - let me just add comments here to explain
84:13 - where each of these lines is going
84:17 - now refreshing doesn't change anything
84:19 - pieces are still rectangle shaped but
84:22 - now we have more control over this
84:24 - drawing
84:25 - i'm gonna need to know the minimum
84:27 - length of the piece and use it to define
84:30 - some visual characteristics of the tab
84:32 - relative to it
84:34 - like the neck tab width and height
84:44 - now let's first make a detour on our way
84:46 - to top right like this
84:49 - the location of the tab is given by the
84:51 - absolute value of the top argument
84:54 - we move on the vertical axis the tab
84:57 - height in the direction given by the
84:59 - sign of the top value
85:02 - let's refresh now and see what happens
85:05 - so pieces look a bit like houses with
85:08 - some kind of roof
85:10 - for some the roof goes inward like this
85:14 - let me disable drawing of the video for
85:16 - now it's confusing i think
85:23 - so now you just see the shape of the
85:25 - pieces but you can actually tell that
85:27 - those with the flat roof belong on top
85:30 - so we start to see that the shape of the
85:33 - pieces really helps when playing the
85:34 - game and makes the overall experience
85:37 - nicer
85:39 - let's continue i'll add similar detours
85:42 - for the other sides as well
85:51 - we refresh and
85:53 - look at that
85:55 - we get an interesting division now
85:57 - i think this could actually be another
85:59 - version of the game if so wanted
86:02 - it's quite unique looking i
86:06 - think what an error where did that come
86:10 - from
86:12 - ah i see
86:14 - looks like it happens when i click
86:15 - outside the piece
86:17 - this here is considered to be outside
86:20 - the piece because we're still using the
86:22 - rectangle shape for hit detection but
86:24 - the error appears every time i click out
86:27 - here as well
86:28 - can't believe i missed that
86:30 - we need to make sure the selected piece
86:32 - is not null before checking if it's
86:34 - close or not
86:41 - ok no more error
86:43 - also notice how every time we refresh we
86:46 - get different looking pieces this is
86:49 - really nice i think
86:51 - but now let's create the tabs
86:54 - i'll make two more detours one before
86:57 - this point and one after it and we use
86:59 - the value of the neck we defined earlier
87:12 - let me now quickly write this for the
87:14 - other sides as well
87:17 - i now refresh and
87:19 - it looks okay but you see some of the
87:22 - pieces have some weird lines sticking
87:24 - out
87:27 - not all pieces have it this one is okay
87:30 - because it has tabs on all sides
87:32 - the problem is that we add these new
87:34 - detours even when an edge doesn't have a
87:37 - tab
87:38 - we need to check if we need to draw the
87:40 - tab otherwise we just line two to the
87:43 - end of the edge and that's it i'll
87:46 - quickly add this to the other sides as
87:48 - well
87:49 - and now
87:51 - things look quite good
88:01 - and notice that because we work with
88:03 - values relative to the size of the
88:05 - pieces it will work as expected on every
88:07 - difficulty level when this size changes
88:11 - no need to do anything special here at
88:13 - all
88:14 - now this shape is still not perfect we
88:17 - need to add some curves
88:19 - we'll replace this line here with the
88:22 - bezier curve instead
88:24 - i'll define it with the help of two
88:26 - control points and this same endpoint
88:28 - from earlier
88:30 - looks like something's not right here i
88:33 - think i'm missing this closing
88:34 - parenthesis
88:36 - but let me arrange this code better
88:38 - anyway
88:41 - refreshing and
88:43 - now you can see what happened here
88:46 - it makes a curve instead of a straight
88:48 - line
88:49 - i'll do the same thing on the right side
88:52 - i just copy these lines in reverse order
88:55 - and change this minus into a plus here
88:59 - and here
89:00 - we basically make it symmetrical
89:08 - let's test and
89:10 - it looks okay i think
89:14 - if you want it to look differently you
89:16 - can change these values here
89:18 - like you can make the neck narrower
89:24 - or you can make the tab wider for
89:26 - example
89:31 - you could actually even have different
89:33 - properties for each piece if you want
89:35 - it's not too much trouble but i think
89:38 - it's overkill and i'm happy with this
89:40 - being hard coded here
89:42 - notice that this also affected the other
89:44 - tabs now
89:46 - they are thinner and longer
89:48 - i will make them all curved next by
89:51 - adding similar code in each of these
89:53 - sections
89:54 - this is where i would usually say that
89:56 - we should extract a function like draw
89:59 - tab or something but i couldn't think of
90:02 - good parameter names and it would
90:04 - actually make some things more
90:06 - complicated inside the function
90:08 - so i decided to leave it like that but
90:11 - the advice still stands just because i
90:14 - can't figure out how to do it nicely
90:16 - doesn't mean it can't be done
90:18 - okay let's see
90:21 - yeah
90:22 - nice
90:23 - and again it works on any size pieces
90:33 - now all we need to do is add the video
90:36 - back in
90:40 - i'll move the code right
90:42 - here and before it i call the clip
90:45 - method of the context and i save the
90:48 - state before the clip and restore it
90:51 - after the call to draw image so it won't
90:54 - affect the following pieces in a weird
90:56 - way
90:57 - now some of the pieces look great like
90:59 - this one
91:00 - but those that have an outer tab are
91:03 - missing the video inside it
91:05 - we fix this by taking the video with
91:07 - some padding on each side
91:10 - a padding equal to the tab height is
91:12 - enough
91:13 - because the size of the puzzle and the
91:15 - size of the video don't match we need to
91:18 - scale this tab height for the first four
91:21 - parameters like this
91:30 - note that i actually divide here by this
91:33 - size so essentially i'm simplifying here
91:37 - it would have been better to store the
91:38 - percent values only but i noticed this
91:41 - just when editing the video so now it's
91:44 - too late
91:45 - anyway this works
91:50 - or not
91:52 - looks like i have an extra parenthesis
91:54 - here
91:55 - it's supposed to close after the min
91:57 - method here
91:59 - now it works and it looks great
92:02 - only thing remaining is to handle when
92:04 - user clicks inside the tabs
92:07 - the outer tabs are not clickable and the
92:10 - inner tabs select the piece even when it
92:12 - shouldn't
92:13 - you would think that it's not a big
92:15 - issue but if pieces overlap like this
92:18 - you won't get the piece below it and
92:20 - it's very annoying
92:22 - you don't want to annoy your players now
92:24 - do you
92:34 - to fix this we will re-implement the way
92:37 - we select the pieces i will use a
92:39 - different strategy for this
92:42 - bear with me for a while as i implement
92:44 - some things that may seem unrelated
92:47 - first let's make a function to generate
92:49 - a random caller it will first generate a
92:52 - random red component between 0 and 255
92:56 - and we make it into an integer using
92:58 - floor
92:59 - we do the same for the green and blue
93:01 - values and return it as a string using
93:04 - the rgb syntax like this
93:10 - now we'll generate a random color for
93:12 - each piece
93:13 - we really want the colors to be unique
93:16 - and it's very unlikely for duplicates to
93:18 - happen especially when the game has only
93:21 - a few pieces
93:22 - but on insane mode
93:24 - i don't know
93:26 - better safe than sorry and check if a
93:28 - collar was used before and regenerated
93:31 - in that case
93:37 - we'll pass this caller to each piece and
93:40 - now in the piece class we store it as an
93:43 - attribute
93:45 - then in the draw method we'll specify a
93:47 - second argument that tells whether to
93:50 - use the camera or not
93:52 - default set to true
93:55 - if true the code here stays the same but
93:58 - if not it will draw the pieces using
94:00 - their color instead like this
94:05 - i use the fill rect method here and add
94:08 - a padding of tab height so that the
94:10 - outer tabs are colored as well
94:16 - now let's test by setting use cam to
94:19 - false
94:22 - everything still works but now the
94:24 - pieces are more colorful and the camera
94:26 - input is not used anymore
94:28 - you can actually play the game like this
94:31 - based on the shape alone it's quite easy
94:34 - on easy mode at least
94:36 - now we did this change because i want to
94:38 - use the clicked caller to detect if i'm
94:41 - clicking on a piece or not
94:43 - like here it should not detect a click
94:45 - because there's nothing there and here
94:48 - it should activate because i'm pressing
94:50 - on a pink color
94:52 - the piece with the color i'm clicking on
94:54 - should start dragging
94:56 - we implement this by going to the
94:58 - unmousedown callback function and
95:00 - getting the color information from where
95:02 - we clicked on the canvas
95:04 - we get the image data at event.x and
95:07 - event.y as an array with four elements
95:11 - first is for red second is for green
95:14 - third is blue and fourth is the
95:16 - transparency i check if the fourth
95:18 - element is zero so
95:21 - transparent and return in this case
95:24 - we're not clicking on anything then
95:26 - this is not white actually it's
95:29 - transparent black
95:31 - but if we pass this part we format the
95:33 - color in the rgb string format and check
95:36 - to see where it belongs inside the piece
95:39 - we need to implement a new function for
95:41 - that but it's really easy
95:44 - i'll use this other function as a
95:46 - reference and pass the color here as a
95:48 - second argument
95:50 - now we loop through these pieces as
95:53 - before and if the color matches we
95:55 - return that piece
95:57 - simple as that
95:58 - now if you want to make the code more
96:00 - efficient you could store the pieces in
96:03 - a dictionary with keys equal to the
96:05 - color values and then do this lookup in
96:08 - constant time instead of linear but this
96:11 - method here works just fine we don't
96:13 - have that many pieces even on insane
96:16 - mode
96:17 - ok let's refresh and test
96:25 - it works but now you're going to say but
96:28 - radu so what if it works we want to see
96:31 - the webcam image here not some random
96:33 - colors
96:35 - and to that i say multiple canvases
96:39 - we'll add another canvas here i'll call
96:41 - it helper canvas
96:43 - and now in javascript i'll refer to it
96:46 - as well in the same way we did for the
96:48 - other one
96:52 - we then set its width and height to be
96:54 - the same as well
96:58 - now in update game i'll also clear the
97:01 - helper canvas like this
97:04 - and then draw the pieces normally with
97:06 - camera data on the main canvas but using
97:09 - the colors on the helper canvas
97:12 - and the trick is that now on mouse down
97:15 - we don't take the color data from the
97:17 - main canvas we take it from the helper
97:20 - canvas instead
97:21 - let me just refresh and you'll get it in
97:24 - a sec
97:26 - or a couple of seconds
97:28 - it doesn't work
97:30 - i forgot to change the id here to help
97:33 - our canvas
97:35 - okay
97:36 - now my elements show the helper canvas
97:39 - somewhere here or below
97:42 - let me just move it into screen like
97:44 - this
97:46 - i'll make it smaller so it doesn't
97:48 - overlap as much and i'll put it in the
97:50 - corner here
97:54 - now when i click somewhere on the main
97:56 - canvas the corresponding color value
97:58 - comes from this helper canvas so
98:01 - selecting the piece now works as
98:03 - expected
98:05 - and both canvases update at the same
98:07 - time making the helper canvas a reliable
98:10 - hit detector for our pieces
98:12 - this helper canvas doesn't need to be
98:15 - visible
98:16 - actually it doesn't even need to be
98:18 - added to the dom but it can be there as
98:21 - well it's useful for debugging i think
98:24 - i'll just set the display here in line
98:26 - to none and that's it
98:29 - let's test one final time
98:52 - [Music]
99:10 - that's it hope it was worth it and that
99:13 - you learned something from this
99:14 - and if you did please like and share
99:17 - this video with anyone you think is
99:18 - interested
99:20 - you can download the source code from my
99:22 - website
99:24 - it's split into parts so you can take it
99:26 - step by step if you want
99:28 - also let me know if you can think of a
99:30 - good strategy to play the game
99:33 - it took me one and a half hours to solve
99:35 - the insane mode with 1000 pieces
99:38 - there must be a smarter way of doing
99:40 - this
99:42 - anyway thanks for watching and see you
99:45 - guys

Cleaned transcript:

this is a really cool course that teaches you how to use javascript and html to create a puzzle game that uses the video feed from a camera you will also learn a bit of html and sql radio has a unique and interesting style that makes learning the concepts really fun hi i'm radu and today i'm going to teach you how to make a puzzle game that uses the camera this whole project is done using only vanilla javascript and html canvas and a small part of it this one here is done using php and mysql to save and load scores from the database the game works on desktop computers but also on mobile devices like phones and tablets by watching this you'll learn many useful things that you can later apply in other projects even though some of these things are quite advanced i'll teach them as simple as i can and i'll leave the two most complicated things at the end good news is that they're also optional meaning that you can get a fully working game without them so don't be scared it'll be fun i promise also special thanks to beau from free code camp for allowing me to share this with you guys i hope you'll like it and if you have any questions do contact me via my youtube channel now let's begin we begin by writing the html page in the header we give the page a title this will change what we see here in the browser tab and we'll also link the two external files one for the javascript and another for the css these files are just empty for now then the body part of our document will be really simple for now we just run a function called main when the page loads and add the canvas element here which is what we'll primarily use to build the game it will be a canvas app if we refresh the page now we see the tab shows the correct title and we also get an error here in the console if you don't see the console in your browser try pressing f12 it's the shortcut for the developer tools in most browsers i'm using google chrome i think it has the most useful tools but it's really just a personal preference any one of them will work just fine now the error says that this main function is missing so let's move to our javascript file and implement it for now i'll just make it output the string main into the console to test if it works and it does it's very good to debug like this whenever you make a change otherwise errors pile up and it can be very confusing to deal with many of them at once but now let's see how to access the camera we'll use a promise to get access to our media devices we're only interested in the video coming from the camera and we specify that here what happens now is that the browser will ask the player for permission to use the camera when they give it the code will go here where we define a callback function in which we have access to the camera signal if the player doesn't allow the camera or there is some other error we will catch it and show it on screen when everything works out we initialize a video object we'll use a global variable for this and i will write these in capital letters to make it clear when a variable is global or not in the code we next create the video element initialize it to the signal coming from the camera and play it when video data is available we can start updating it on the canvas this update canvas function is what we will implement next but first let's also define the canvas here globally and add a reference to the canvas context object as well we initialize the canvas with the one defined in the html page previously this 2d context of the canvas provides all drawing methods we will need to build the game our canvas will fill the entire window now the update canvas function needs to draw the video onto the canvas so we will use the draw image method of the canvas context to do just that we also need to specify here that we want to start drawing from the top left corner which has zero zero coordinates now when i refresh something happens it shows the image coming from my camera my camera is just pointed at the wall here at the moment but it doesn't pick up any movement just yet we need to update the canvas many times per second to see this happen and we'll use the request animation frame method to make it work this method will call the function recursively many times per second and it will try to update 60 times per second if the computer is fast enough now we get a live image let me just put mr chibison here to make it less boring now you'll notice a white border here it's a bit strange because we said we want to draw the video at zero zero but the body element has some default margin and that's what we are actually seeing we'll remove that by going to our css file and changing the style of the body element by setting the margin to zero better now but we still get these scroll bars here which are not really necessary so i'll remove them by setting overflow to hidden now the scroll bars are gone but the video actually goes outside the screen we don't want that and we need to keep in mind that in general there are many webcams or phone cameras out there with different resolutions aspect ratios and so on so we need a way to resize the video so that it fits in the middle of the screen preferably with some space around it so that we have enough room to move the pieces later we'll use this scaler to specify how much of the screen space will be used by the image and i will also keep track of other related information in this size variable we update these values here when metadata about the video is available first we use a helper variable to find out the minimum ratio between the screen size and the video size and then we set the size attributes accordingly note that here one of these things will simplify so we properly preserve the aspect ratio and nothing gets stretched for the x and y coordinates we start off in the middle of the screen and go just half the width towards the left and half the height towards the top then to actually affect the image we must update the draw image method here this method can be called with a different number of arguments before we just specified the top left corner but now we also add the width and the height ok it works we now see the entire image coming from the camera before it was slightly cropped on the right we also get this 80 margin and if we change the value here we get a different sized margin instead we can also check to see how the application looks on different sized screens by pressing this button we can even select some specific device from this list but every time we change something we need to refresh the page to see it happen looks good how about in landscape mode need to refresh again we could actually make this resizing happen automatically by using an event listener for the window resize we then need to move this code in the callback function and also need to call this function here so that the code executes as before and i should also move these lines here too in this way the canvas will resize as well not just the camera stream okay let's see if we change the orientation yes it works no matter what the screen size we will get the proper fitting this time but even more important is that it will work regardless of the size and aspect ratio your camera outputs i'll demonstrate this by forcing my webcam to output a specific size note that not all webcams support resizing in this way and it may not work for you but you can try you can see it works just fine with the square aspect ratio let's try a vertical aspect ratio next okay works just fine i will remove these extra parameters now because we want to see the entire video coming from the camera this was just an experiment and i will actually comment out this event listener because we don't really need this functionality inside the app users are not expected to resize the screen like this i made it to demonstrate better how things work and avoid refreshing all the time plus you may need it in one of your projects we now define the piece class and specify a row and column index in the constructor we will have an array of these pieces and define it globally here we also need to specify how many rows and columns there are and i will store these here now to initialize the pieces we begin with an empty array and iterate through the rows using the i variable and through the columns using the j variable and add a new piece defined using these two indices into the array to be able to draw the pieces we are going to implement the draw method that takes the context as a parameter let's first just draw a simple rectangle here to see if what we did so far is working now we need to figure out the location and the size of these pieces based on the number of rows columns and the size of the video on the screen i will enter these placeholders here and calculate the exact values in the constructor the width and height of each piece is just the width and height of the area divided by the number of columns and rows respectively i set here the x and y to be so that each piece is defined to be at the correct location at first even though this is a puzzle game where the player needs to find out what the correct locations are it helps to start with the solved configuration when developing the game you'll see i realize now that x and y could actually be defined after we have the width and the height and then define them using the width and height like this the code is clearer in this way we now need a way to draw the pieces we do this here by just iterating through all of them and calling the draw method using the global context okay i think we're ready to debug now oh i forgot to call the stroke method here without it nothing will be drawn let's see i'll refresh and nothing is different just yet it's because the pieces array is empty we need to call the initialize pieces function and we'll do this in the console for now okay now something happens and it looks good three rows and three columns but it's not ready yet these are just empty rectangles drawn on top of the video look if i comment out drawing the video image here you can just see the grid each piece needs to crop a specific part of the video and show it we do that by adding a call to the draw image method here we use another version of the draw image method a more complicated one that accepts nine arguments after we specify the video we need to tell the left part where the cropping happens then the top part then the width and the height these values are relative to the video and whatever the resolution and aspect ratio it has now after we specify where to take the image data from we need to say where to draw it this is easy it's just that the piece x and y location and we need to use its width and height okay it now looks the same as before but each piece is showing the part of the video it's responsible for we can actually parameterize this function here to support any number of rows and columns and we just call it here with default values in the beginning we can test in the console by using different sized grids let's randomize the location of the pieces next we'll just write a function where we iterate through all of them and generate a random location for each piece we set here the x and y respectively we call this in the console and it's not what we expect the random values are between 0 and 1 meaning that they are all pretty much in the top left corner here i'm not gonna go into how half pixels work so let's just move on and scale these by the canvas width and height okay much better but you can see that some pieces go outside the screen here we can prevent that by subtracting the piece width and height here when scaling ok good now the reason why we see duplicate pieces once randomly distributed and others that are behind than in the correct locations is that we are not clearing the canvas before redrawing each frame if we do this here and randomize the pieces again we get what we expect let's test different grid sizes as well neat i actually want to have an idea of where the pieces need to go it will make debugging easier and maybe we can keep it as a easy mode or something like that so i'll move this clear wrecked call to the top set the 50 transparency and uncomment drawing the video we had earlier then i reset the transparency so that only the video is semitransparent but the pieces are drawn normally after that in this way the video on the background shows where i need to move the pieces but it's faded so it won't be confused with the actual pieces now to implement the drag and drop functionality for the pieces we need to add some event listeners to the canvas we implement a function for it here and begin by adding an event listener for mousedown with a callback function that we will need to define then two more event listeners for mouse move and mouse up will also be needed to handle the mouse down event we first mark down what is the selected piece by getting the one the user presses in the interface we will define this function soon but let's get the top level logic down first we'll store the selected piece inside the global variable which we initialize with null in the beginning or if no piece is pressed then if a piece is selected we calculate what is the offset to the top left corner of the piece like this we will use this offset while dragging so that the piece doesn't just snap to the mouse location like this it will make for a smoother interaction then on mouse move if a piece is selected we update the location to the new mouse location and consider the offset as well the mouse up event will just leave empty for now so how do we find out if the player presses a piece or not well all we need to do is iterate through all the pieces and check to see if the click location is within the bounds of any of them we need to check if x is greater than the piece is x and less than that plus the piece's width and if the y is greater than the piece is y and less than that plus the piece's height if so we just return this piece if nothing matches these conditions we just return null which means that nothing was pressed ok let's test i move the mouse over the bottom left corner piece i click and drag great but now i'm stuck like this i need to implement the mouse up event so that i can actually let go of the piece now the obvious thing that we need to do is set the selected piece to null but before that we need to do one more thing we check if the piece is close to the correct location where it's supposed to go and if so we snap it in place we will need to implement these new methods but first let's discuss why we're doing this the first reason is that it gives proper feedback when a player lets go of the piece if it jumps into place it means that the move was correct and the player can move on to the next one the second reason is that later we will need to evaluate if the pieces are in the correct position or not and it's very unlikely that the player will be able to drop all pieces in a pixel perfect way so this snapping will help with that as well final reason is that i think it makes the game more interesting and fun to play so to implement this functionality we go back to the piece class and add the two new methods first we check if the piece is close to the correct location we do that by simply calculating the distance to the correct location and checking if it's under a threshold i use a threshold that is proportional to the size of the piece here about 33 percent i just did some trial and error and i think it feels good like that if the distance is less then it's considered close otherwise it's not the correct locations should be stored somewhere and i'll do that here in the constructor because we already agreed that the pieces will be initialized at the correct location to measure the distance we just use a consequence of the pythagorean theorem i'm pretty sure you know it already but if you don't or want to learn something more about it check out the recent video i made about it i think i did a pretty good job explaining it proving it and giving all kinds of applications what do you guys think the snap method is really easy it just puts the piece in the correct location and that's it let's debug now i can go and click on a piece drag it and release i can release it anywhere i want and if i drop it close to the correct location it will snap into place and this works for every piece but one issue is that the selected piece is sometimes drawn underneath the others this is not good it depends on the order we are drawing the pieces since the top left one is the first in the array all others will be drawn on top of it but the bottom right one doesn't have this problem it's always on top we need to fix this by moving the selected piece at the last index in the array we first find out the index it's currently at then even though it should not be possible for it to be missing i check here just to be sure i then remove it using the splice method and add it again at the end of the array using the push method now no matter which piece i select it will be drawn on top of everything as expected but there's still one problem when i click here where multiple pieces overlap it selects the bottom most piece we fix this by iterating the pieces array in reverse order in this way we stop at the topmost piece that the user is clicking on now everything works well but one final thing we need to consider is mobile devices what we did so far actually doesn't work on those yet see even if i debug using this mode and i try dragging pieces around nothing happens this is because mobile uses touch events instead of mouse events so we need to support those as well we go back to the function where we add event listeners copy all three of them and rewrite what is necessary the touch start touch move and touch and callback functions will need to be defined next but they are easy to do because we will reuse the mouse event callback functions from earlier we just need to get the location here in a little different way and then we can call the other callback like this we copy this callback function and implement the other two now when we debug it works but an error happens on touch end that's because there's no location available then i mean if you're not touching where are you not touching so we actually omit these arguments here now everything works when i'm debugging here but some mobile devices have a builtin function that refreshes the page when dragging down we don't want this to happen every time a player drags a piece downwards so we disable it in the css file by setting overscroll behavior to none that's it for the drag and drop let's just see if it also works with different sized pieces next we add gameplay elements like the menu and showing the elapsed time we need to define some more structure in the html page a div that will contain all these new elements a div for the menu and the div for showing the time the menu will contain a select component for setting the difficulty there will be four different options and when the user changes these we will call a function called set difficulty which we'll need to define in javascript we also need the button here to start the game pressing it will call a function called restart that we'll also need to define in javascript so let's move to the javascript file next we add two new global variables to keep track of the start and end time we then implement the set difficulty function first we get the value of the select component we defined in html based on that we call the initialize pieces function with a different number of rows and columns i'm using a switch case structure here to avoid many if else statements it's a common mistake my students make the values i use here are just guesses pretty much but for the insane variant i wanted to have exactly 1000 pieces so i use 40 and 25 which has the most square aspect ratio then the restart function will set the start time variable to the current timestamp and the end time is set to null because we just started playing we also randomized the pieces at this stage if i refresh we don't see the menu anywhere actually it flashes rapidly before the page loads but where does it go we can use the developer tools to inspect the elements and see that they are pushed below the bottom of the page by the canvas we can actually try out different styles here to get it to work setting an absolute positioning with the zero top will do the trick for now so i will add this to our css file refreshing now it works i can press start and it will randomize the pieces each time and if i change the difficulty level we see the different sized grids coming up i thought the insane mode would be too processor intensive at first but it works fine on my computer at least i'm sure some devices will struggle though next we display the time i will define a function called updatetime that first takes the current time from the system then it takes the div we defined earlier to hold this value and sets the inner html to the difference between now and the start time we need to call this function somewhere so i will go to the update canvas function that is called on every frame and enter it here we also notice that this name is not proper anymore because now we update more than just the canvas here so i will refactor it a bit when i refresh now i press start and it shows the time here but it's in milliseconds and we should format it properly i'll first convert it to seconds by keeping the integer part of the milliseconds when dividing by 1000 then i want to consider this format so we need to know the seconds part between 0 and 59 and we will get it like this the minute part also between 0 and 59 can be obtained like this and the hour part is between 0 and 23 and we get it like this i doubt anybody will spend more than a day playing this then to format them into the final string i take each component and do a left padding with 0 if necessary i use a column between each part then we return this final value and that's it now we can use it here to format the difference starts to feel like a real game already don't you think but nothing happens when we're done we need to detect somehow that all pieces are in the correct locations we do that by adding an attribute here that will say if the location is correct or not initially it should be because the pieces are defined at the correct location but then when we randomize we immediately set it to false then when a piece is snapped to the correct location we set it to true again it's possible that someone grabs a piece from the correct location so we need to set it back to false here on mouse down then to check if all the pieces are correct we write a function like this it goes through all pieces and if even one of them is not correct the function returns false otherwise we return true we check this in the mouse up callback function because the game can only be completed when the player releases a piece the last piece that goes in the correct location here we also need to check if the end time is null because in principle the player can continue to move pieces around after the game is over and we don't want to update the time anymore after that we just set the end time here to the current time we also need to change the display here so that if an end time is available the difference to that is shown and not the difference to the current time okay let's see now timer starts counting same as before we play the game and now the timer stopped now we'll make this part look better first let's put the button below like this now we can move to the css file and position these in the center of the screen we say that the items should be 50 percent from the left and 50 percent from the top now if we leave it like this the items will move here so their top left corner is in the center screen but we would like them to be here so we need to add transform translate minus 50 minus 50 and now we get this now the text isn't clearly readable as such let's add the semitransparent background here like this better now we can align the items to center like this we can give the items some spacing around by setting a value for the padding i'm using a value of phi min here which means that the spacing will be five percent of the minimum between the width and height of the window i also set the black semitransparent border here as well now we can make the button look better we'll give it a larger font size and a bluish background color and white text good we can make the button more userfriendly by changing its properties when mouse is hovering it i'll make it have an orange background and black text in this case okay now when i hover it changes style you can't see my mouse here now for some reason but it's there and it looks like the default arrow to make it look like a hand cursor we can change it here in css nowadays there are many fancy features you can choose when styling elements like you can easily add animations with the transition property by setting this 0.3 second duration here we will get a short animation from one style to the other on hover i think it's really nice i don't like this border here so i'll remove it and i will make the bottom corners round by setting a small radius the font size apart from this button is rather small so we'll work on that next first i change it to arial i think that the serifs don't look very good in this case okay now i'll make it bigger same as the font size on the button i think it's okay now let's see how it would look like on mobiles as well it's definitely readable i think it could be a bit bigger but this will also do for now the text on the select component is not affected yet so we need to specifically add the font size there as well ok switching back to full screen now i'll change the mouse to look like a pointer when hovering this select component as well and style this element to be more in line with the button so no border a small radius and we need to remove the outline here as well okay let's try testing the game now i press start and it's not what we want really this menu should disappear at this stage and only the timer should remain visible so i will go back to the html and take out this element from here then in the javascript file we go to the restart function and set the display of the menu items to none now i refresh press the start button and the menu is gone but the timer is gone as well it should be there let's debug i switch to the elements panel and it is there it is just below the canvas so we need to change its style in css i want it on the top of the screen so i will change positioning to absolute set the zero top and let's have it center screen so i set left to 50 and i use the transform translate method again but only on the left side now i refresh press start and the timer is there next i'll show you how to draw a logo using powerpoint you can use a number of different software to do this i'm using powerpoint just because it's installed on most student computers so hopefully you have it too i use the rounded rectangle tool to start drawing a camera i can adjust the corner radius like this now i make a copy of the item by holding down the ctrl key and dragging it to a new location i will do a similar thing with circles now i will change the colors to just black and white for the circles and i will use the align tools to make sure they are just the way i want them to be i change the color of the rectangles drawn earlier to black and move the circles on top newer features of powerpoint have these helper lines appearing and they are useful i think but if you don't have them and want to have proper alignment just use the align tools we used earlier now i'm happy with how this looks so i will copy it and paste it as an image we will need to use it later in this format but now i want to draw a small puzzle piece so i start off with a rectangle about this size and i draw an oval here as well i will shape this oval to look more like the connecting part of puzzle pieces and i do that by editing the points of this shape right click edit points it's useful if you understand how bezier curves work at this stage ok i'm happy with this i copy it rotate it on its side and merge these three items into a single shape by going to merge shapes and union now i'll place this on top of the image copy of our camera align it a bit better and duplicate both objects on the right for the first copy we select first the camera image then holding shift press on the puzzle piece as well go to merge shapes and subtract for the second copy also select the camera image first then holding shift press on the puzzle piece as well go to merge shapes and intersect i now move this piece into place so that it looks like we're just completing the puzzle now select these two objects copy and paste as image at this point we don't need all the other items anymore we just keep this one as the icon and we'll use it to make a title next i just create a text box and write puzzle cam here in all caps i set the font to arial black to be similar to that in the html page and increase the size of the font i then make the p larger and i want it to be the same size as the camera so a bit of trial and error goes here and when we're happy with it apply the same size to letter c and we're almost done we can now copy everything and paste as an image once again but you'll see that the image has some weird transparent margins here it's how powerpoint works when text boxes are involved unfortunately but we can crop that out using the cropping tool resize the image to the size we want right click and save as picture then i name it as title.png and add it to the same directory as our code speaking of which we can now add the new image to the html file like this and i'll set its width to 90 inline here because there's no other style i will add to this then refreshing makes the image appear i think it will look better if we do one small change in css i will make the whole menu wider like this in this way the title image is significantly larger than the other text and the drop down for the difficulty moved on the same line as the label i think it's better like this let's add some sounds next first i'll define one using an mp3 file i recorded earlier like this i'll set the volume quite low because this will play whenever we drop a piece in the correct place it would be really annoying if it plays at maximum volume i think so let's now add it here in the snap method and test i refresh the page press start and yay it works but there is no sound when completing the game and there definitely needs to be something there instead of simply adding another mp3 file here which would make this tutorial really short i will remind you that it's possible to synthesize sounds in javascript to generate the sounds we will need to define an audio context and doing it like this will make it work on most browsers then i want to create a simple melody consisting of three notes played on piano keys here i'm writing their frequencies we need to create a function to play a single note it will have a specified key and a given duration how long the key should be pressed we next define an oscillator this will be responsible for generating the sound with a given frequency we set the frequency to the value coming as a parameter here we start the oscillator like this at the current time and we can also tell it to stop after the specified duration it is good to also disconnect the oscillator at the same time otherwise some hardly noticeable background noise can still be heard on some browsers i'm using set timeout for that and i specified the duration here as well now there's a problem because set timeout expects the duration in milliseconds but the stop method expects it in seconds so i decided it to be in milliseconds and need to divide here by 1000 one more thing we need to do before we test is to connect the oscillator to the destination which in this case is the default speakers on your device okay let's test i do that by calling the play note here in the console and we get an error looks like i don't know how to spell oscillator let me just fix that real quick and you can hear a simple sound for one second now we begin to shape this to sound more like a piano i will use an envelope to control the gain you can think of it as the volume in a sense i connect the envelope now to the destination and i change the oscillator here to be connected to this envelope instead forming a kind of chain then the piano sound has a powerful attack which means that it needs to go from zero to maximum gain really quickly here it happens in 0.1 of a second i set the maximum here to be 0.5 instead of 1 so that it's not too loud then the gain will gradually decrease back to 0 for the given duration again specified here in seconds now let's refresh and test another error i sure do many of those today it seems the problem is that i connect the oscillator here to the envelope before i even define it so moving it down here should work you can now hear the sound gradually fading during the course of one second and you can get an even nicer sound by changing the wave type from the default sign to triangle if you're having trouble understanding these things do check out my visual web development course there i use a much slower pace and explain all the different techniques i needed to make my augmented reality piano now let's compose the melody itself it will start with a simple note at first played for 300 milliseconds then i'll play a different note after 300 milliseconds and another one 300 milliseconds after that or 600 milliseconds from the starting point and what we get is this now this could work as the melody but you're free to make it sound any way you like for example it could sound like this now to play it when finishing the puzzle we just call this function here it sounds a bit bad because it overlaps with the final popping noise when the piece snaps into place i fixed this by adding a small delay here to the function call to store the scores we will need to use some kind of database i recommend going to the following link and downloading xampp it comes with mysql and phpmyadmin which is a nice user interface for managing database contents xampp also includes the apache server which we will need to write the backend php code after installing samp we go to the control panel and start these two services then we head on to the admin page from here we can open phpmyadmin and begin to construct our database to hold the scores we create a new database by pressing the new button on the left and we give our database a name now we need to create a table four columns are just fine and let's call it scores now every mysql table should have an id field we leave it as an integer type and mark it as a primary key and tick this checkbox right here so that it will auto increment this means that every time we'll add a new score we don't have to worry about its id anymore it will automatically be decided by mysql next we'll need to store the name of the player here it will be a string so we'll use varchar as the data type and put a maximum length of 255 characters here might be a bit too much but never can know what names people come up with next we'll store the time it can be an integer because i plan to store the number of seconds i can also add the comment here to clarify the format so i don't need to remember it later and finally let's store the difficulty level so that we can later group the scores based on that now we press save and we can see the table structure right here let's add some sample data to work with it's going to be some fake placeholder data for now we go to insert and start entering values in every field but as i said earlier we don't need to worry about the id it will be automatically generated by mysql i'll just add my name here and let's say it took me 50 seconds to complete the puzzle on easy difficulty then i'll add radu again and 100 seconds while playing a medium and again with 200 seconds on hard and finally 4 000 seconds on insane mode so now it looks like i've played the game on all difficulty levels let's add a few more people here like john with 20 seconds on easy and 1000 seconds on insane diana with 100 seconds on hard and 400 seconds also on hard michael with 400 seconds on medium and leo with 10 seconds on medium now we press go and all these 10 entries were added into the table we can click on the browse tab to inspect it now we can actually see here the sql query that outputs this entire table it says select everything from scores we will later need to write similar queries in php to communicate between our frontend game and the database this query right here could be useful to load the scores for example but it's not very nice as such it mixes all difficulty levels and is not sorted in any way hard to see who the winners are like this so let's head on over to search and say that we want only those entries with easy difficulty we can see how the sql query here is updated as well i think this phpmyadmin tool is very useful for learning sql syntax you can also practice writing the syntax by yourself by pressing on edit here we could for example add an order by clause so that the results are sorted by time now it's really easy to see that john is the winner when playing on easy mode we can similarly obtain the results for the other difficulty levels we just need to change the difficulty here each time we'll use this query later in php to get the high scores now to add a new result we use the insert keyword we specify the table name and the columns that will receive the data and then the actual values that go into it note here that the name and difficulty are strings so they need to be specified using quotes otherwise you'll get an error then we press go and get feedback that one row was inserted if we browse the table again we'll see a new entry for radu on insane difficulty now we'll practice these queries using php and because this is the first time i teach it i will take it slow i've moved all project files of the game built so far in the htdocs directory of xaap now i'll create an empty file called server.php we next open this file in our text editor and in the browser but note here the address is localhost slash puzzlecam slash server.php you need to write it like that because then the php code is executed by the apache server i remind you that you need to have xampp installed and both apache and mysql running at this stage now php code is quite different from javascript the syntax starts and ends like this and all the code goes in between if you want to print something here you use the keyword echo followed by what you want to print if you refresh the page you get exactly that now i'll teach you how to connect the mysql database we created earlier because it's also running locally on our computer we'll use localhost as the host the default user is root and the password is empty of course if you're gonna put this online somewhere you'll want to add some better security but i won't focus on that in this video then to connect to the database we use the mysqli connect function and provided this information if the link was not established we warned that the connection failed the die function terminates the php script as well if the code passes the if statement it will go here where we just echoed that connection was successful i'll refresh and connection was successful but if i specify a different host php will produce some warning messages and the program terminates after this die statement we also get an error message if we use the wrong user or password now with the successful connection we can move on and select the database like this and we can use the or keyword to call the die function in case of failure if the code reaches here it will output the success message we can test and see that it was a success because the puzzle cam database really exists if we mess up here and use a different name for example the code will terminate with an error let's now define an sql query as a simple string i'll use the query we figured out earlier using phpmyadmin to select those entries from the scores table with easy difficulty we can execute this query using the mysqli query function now this function doesn't actually return the result but an object that we can use to iterate through the results i'll show you we first initialize an empty array then if the result contains any rows we will use a while loop to fetch each row one by one using the mysqli fetch asoc function on the rs object we add each row to the results array using the array push function and then print the array using the print r function like this and we get an error i forgot an i here it should be mysql i num rows now we have the array printed out here but it's not sorted with respect to the score or in this case playing time as we saw earlier we can do that using the order by clause i'll also format this query a bit better so it doesn't go outside the screen note that in php the stop sign is used for concatenation not the plus as in javascript and many other programming languages now because we'll reuse this code to get results for other difficulty levels it makes sense to write this as a function that returns the results array we can then call it with easy as a parameter and get the same result let me just replace here the difficulty to use this argument and almost forgot need to specify the link here as well now we refresh and get the same result as previously but we can get other results as well by calling the function again let me quickly add the other difficulty levels as well now let's wrap all this into one function to get all the scores we don't need these print statements anymore we can just return an associative array with each of these results associative arrays are like javascript objects where we can give names to the keys now we call this function and print the result like this or to be more familiar you can use echo and convert this result array into a json string like this it's great that php has support for all these without needing to install any libraries i'll comment this out and focus on creating the other function we'll need to add the new score to the database i'll pass the information as the first argument for now i'll write the query as a simple string with hardcoded values here and then replace each value one by one with the elements from the info if you write your query like this it's less likely to make mistakes otherwise it's quite easy to mess up and forget the single quote or a double quote somewhere now we call mysqli query again if we don't succeed for some reason we will return false otherwise we return true to signify success now we can test the function like this by defining some info and calling the add score function using it we can wrap it in an if statement like this to see if the insert was a success or not and it claims to have worked let me now bring back this function call to get all the scores and see if it really worked and it did great now we're gonna change this php server to support both functionalities to add the score and to read all the scores let me remove this testing code first now i'll use a get parameter named info to send some additional information to the page let's first read it here and see how it works so i need to set here info equal to something let's try hello for now and you can see it is indeed printed here i'll change info now to contain information necessary to add the score and i'll write it as a json string now to parse this string i call json decode and get info as an object here which i can pass to our add score function we wrote previously and handle the outcome as before now we can insert the score by just visiting this address with some parameters now make it so that if we don't send any info it will list all the scores instead in this way we support both reading and writing to the database with this single script now let me address the elephant in the room yes this code is not very secure anyone can hack my scores database by going to this link and sending some data there even worse this data is not escaped in any way so they can even do some damage through sql injections here all these issues are not easy to fix and if i spend time on it now it will deviate too much from the project we are building a puzzle game not making the most secure thing in the world but because many of you are interested in security here's what you should do first escape the information here or even better use user prepared statement change get here into post it's more secure i didn't do it myself because i would need something like postman to test and i didn't want to install more tools here post is also the common practice when sending data so you definitely should use it here then you'd want to add some authentication here so that not everyone can make a request such as this you will need to ask people to register and confirm their account by sending them a confirmation email i don't usually do this for my small projects i feel i would be asking too much from those visiting my website and if i'm hacked so what i don't have any sensitive information here and i kinda like the attention all these steps don't make the system bulletproof but each of them make it a little bit harder to hack you could go even further like adding a captcha because someone could automate the authentication if they really want and flood your database with a bunch of fake accounts and fake scores captchas make it harder to do but not impossible you could design some kind of validity checking system here maybe record the start time end time and individual moves if the result doesn't contain pieces moving one by one at reasonable time intervals it's a sign of foul play of course one could hack that too by figuring out how the validity checker works and generating fake data that looks real but that's all i got so let me know if you have better tips on security i'm really interested to know what you guys think but now let's continue with the front end part let me put mr chibison here again in html i'll now create an end screen it will show the score and allow the user to enter his name in this input field there will also be a button to save the score on click we'll need to implement this save score function in javascript i'll also add here a button to show the scores with another function we'll need to define and another button to go back to the menu i will also create the scores screen it will contain an empty div which will eventually hold the scores and a button to go back to the end screen we'll need to define this javascript function as well now i'll copy this title image in both these screens so that they look consistent and speaking about looks i'll define a css class called menu and apply it to all these items this class will be the same style we previously applied to the div with id menu items so we just changed this here in css now we refresh and we can see all three screens overlapping each other we need to hide the end screen and the score screen in the beginning of course now let's start defining the missing functions in javascript first the one to show the end screen i will simply use the playing time as the score and i'll place it inside the element with id score value we also need to compute this time as the end time minus the start time we need to make sure the end screen element becomes visible too like this then the function to show the menu will begin by closing the end screen and then making the menu appear now if i refresh and press start the menu disappears as before but if i call the show and screen function here in the console the end screen appears and it looks good but the score is now something strange because we didn't actually complete the puzzle to get the true value for the end time it will be okay when playing the game for real we don't need to worry about this now pressing the menu doesn't work oh i forgot the parenthesis here we need to call this function here on click sorry about that let's fix this and refresh start call show and screen function in the console press menu and yes it works now let's move on to show the scores next i will copy this line so that the end screen goes away and let's make the score screen appear instead now i'll make the scores container initially showed the text loading because it can take some time to load the scores and we want to let the player know something's happening we then get the scores with the function we'll implement next this getscores function uses fetch to get data from server.php which i remind is located in the same directory here fetch returns a promise when the response is available we convert it into json this returns another promise so we need to write then again and here we have access to the actual data let's log it to the console to test i refresh press start call show and screen in the console and press show scores and now our data is here it still shows loading because now we have to format the scores and place them here instead the format scores function will generate a table in html i won't explain this too much i feel that this tutorial becomes too long if i do that and if you were able to follow up to here i'm sure you'll have no trouble understanding what this is i will say however that now when i have the results formatted for easy i will extract this functionality into its own function it's a really bad habit to write similar code instead of using functions and many of my students have this problem so i thought i pointed out here as well i now call this function for each difficulty level to show all results one after the other the final list is just too long i'll set the fixed height here and overflow to auto so that the scroll bar appears this is better i think now i press back and i guess it's time to define the close scores function this is easy to do it will make the end screen visible and hide the scores screen now i refresh and everything seems to work well except for the save feature that is not implemented yet the safescore function is going to calculate the score as the time it took to play the game and get the player name from the input field if no name is entered we give a warning and stop the function right here otherwise we get the difficulty from the select element and do a fetch to server.php using the info parameter where we pass the name playing time and the difficulty level to give feedback to the user i'll change the text on the save button to say ok during the fetch i disable this button so that players can't press it multiple times by mistake i also reset the text on the save button when opening the end screen again in case the player plays a second time and i need to reenable the button as well let's add the gray style for the disabled button and make the cursor a default arrow indicating that it can't be clicked now let's see an error of course looks like i forgot the closing parenthesis before i test let's also call the show end screen function here when the puzzle is complete and test for real this time okay works pretty well but my score here is in milliseconds instead of seconds but on second thought i think it's better to keep these in milliseconds so that we can better distinguish between people playing in almost the same time i'll format the score to show the number of seconds but i keep milliseconds in the database so that the ordering of the ranked list comes from that ok now the score appears to be the number of seconds and the scores table looks good too those two have zero because we now consider they played in 20 and 50 milliseconds but when we clear the database and people actually start playing this this problem will go away one thing that still bothers me is that the save button is on the next line but then it becomes smaller when it says okay and it jumps up i'll fix this by making the input smaller so that the button always fits on the same line i'll also style it to be more consistent with the other items ok great now we're going to do some fine tuning and work on styling the pieces to look like actual puzzle pieces to do that we go to initialize pieces function and iterate through the grid of pieces like this the pieces are stored in a list in this top down and left to right order so we can get the index of each piece by simply counting here like this now we take each piece one by one and i and j will point to the row and column where it belongs we now need to add information about these things to each piece let's call them tabs for each tab we need to know if it's an inner tab or an outer tab we'll decide that randomly with equal probability like this so this sign becomes either a minus one or a plus one telling if it's going to be an inner or an outer tab the second thing we need to decide is where will the tab be located on the edge if we consider this to start at zero and end at one hundred percent let's allow the tab to be anywhere between thirty percent and seventy percent moving too close to the corners is not a good idea i'll now set this bottom attribute to encode the information for the tab on the bottom it will be a single number between 0.3 and 0.7 if it's an outer tab and between minus 0.7 and minus 0.3 if it's an inner tab note how we store both pieces of information with this simple trick if we are on the last row we don't have any bottom tabs here so we'll set this to null we now do the same thing for the tab on the right and make sure i don't add tabs on the rightmost column the top tabs are not going to be random anymore because they need to connect with the pieces from above we need to set top to be minus the bottom value of the piece directly on top of it if we're on the first row we don't have a tab on the top we now handle the left tab in a similar way we use the value of minus the previous piece's write attribute now let's refresh make this console bigger and check here what the pieces array looks like so the first piece has a positive value here meaning it should be an outer tab the right value is negative meaning it's an inner tab we have null for left and top so looking good so far for the second piece we need to check if the left value is this number but flipped so let's see yes it looks good let's check again with the next piece good and now we get right equal to null because we are on the rightmost column now the next piece is on the next row so the top is not null anymore and it should be the opposite of the bottom of the first piece which it is good let's see the last piece now too has no values for the bottom and right and values for the left and top look okay yeah i think we're good let's now draw new shapes for the pieces using this extra information we won't use direct method here anymore but for now i'll just reimplement it using move 2 and 4 line 2 commands let me just add comments here to explain where each of these lines is going now refreshing doesn't change anything pieces are still rectangle shaped but now we have more control over this drawing i'm gonna need to know the minimum length of the piece and use it to define some visual characteristics of the tab relative to it like the neck tab width and height now let's first make a detour on our way to top right like this the location of the tab is given by the absolute value of the top argument we move on the vertical axis the tab height in the direction given by the sign of the top value let's refresh now and see what happens so pieces look a bit like houses with some kind of roof for some the roof goes inward like this let me disable drawing of the video for now it's confusing i think so now you just see the shape of the pieces but you can actually tell that those with the flat roof belong on top so we start to see that the shape of the pieces really helps when playing the game and makes the overall experience nicer let's continue i'll add similar detours for the other sides as well we refresh and look at that we get an interesting division now i think this could actually be another version of the game if so wanted it's quite unique looking i think what an error where did that come from ah i see looks like it happens when i click outside the piece this here is considered to be outside the piece because we're still using the rectangle shape for hit detection but the error appears every time i click out here as well can't believe i missed that we need to make sure the selected piece is not null before checking if it's close or not ok no more error also notice how every time we refresh we get different looking pieces this is really nice i think but now let's create the tabs i'll make two more detours one before this point and one after it and we use the value of the neck we defined earlier let me now quickly write this for the other sides as well i now refresh and it looks okay but you see some of the pieces have some weird lines sticking out not all pieces have it this one is okay because it has tabs on all sides the problem is that we add these new detours even when an edge doesn't have a tab we need to check if we need to draw the tab otherwise we just line two to the end of the edge and that's it i'll quickly add this to the other sides as well and now things look quite good and notice that because we work with values relative to the size of the pieces it will work as expected on every difficulty level when this size changes no need to do anything special here at all now this shape is still not perfect we need to add some curves we'll replace this line here with the bezier curve instead i'll define it with the help of two control points and this same endpoint from earlier looks like something's not right here i think i'm missing this closing parenthesis but let me arrange this code better anyway refreshing and now you can see what happened here it makes a curve instead of a straight line i'll do the same thing on the right side i just copy these lines in reverse order and change this minus into a plus here and here we basically make it symmetrical let's test and it looks okay i think if you want it to look differently you can change these values here like you can make the neck narrower or you can make the tab wider for example you could actually even have different properties for each piece if you want it's not too much trouble but i think it's overkill and i'm happy with this being hard coded here notice that this also affected the other tabs now they are thinner and longer i will make them all curved next by adding similar code in each of these sections this is where i would usually say that we should extract a function like draw tab or something but i couldn't think of good parameter names and it would actually make some things more complicated inside the function so i decided to leave it like that but the advice still stands just because i can't figure out how to do it nicely doesn't mean it can't be done okay let's see yeah nice and again it works on any size pieces now all we need to do is add the video back in i'll move the code right here and before it i call the clip method of the context and i save the state before the clip and restore it after the call to draw image so it won't affect the following pieces in a weird way now some of the pieces look great like this one but those that have an outer tab are missing the video inside it we fix this by taking the video with some padding on each side a padding equal to the tab height is enough because the size of the puzzle and the size of the video don't match we need to scale this tab height for the first four parameters like this note that i actually divide here by this size so essentially i'm simplifying here it would have been better to store the percent values only but i noticed this just when editing the video so now it's too late anyway this works or not looks like i have an extra parenthesis here it's supposed to close after the min method here now it works and it looks great only thing remaining is to handle when user clicks inside the tabs the outer tabs are not clickable and the inner tabs select the piece even when it shouldn't you would think that it's not a big issue but if pieces overlap like this you won't get the piece below it and it's very annoying you don't want to annoy your players now do you to fix this we will reimplement the way we select the pieces i will use a different strategy for this bear with me for a while as i implement some things that may seem unrelated first let's make a function to generate a random caller it will first generate a random red component between 0 and 255 and we make it into an integer using floor we do the same for the green and blue values and return it as a string using the rgb syntax like this now we'll generate a random color for each piece we really want the colors to be unique and it's very unlikely for duplicates to happen especially when the game has only a few pieces but on insane mode i don't know better safe than sorry and check if a collar was used before and regenerated in that case we'll pass this caller to each piece and now in the piece class we store it as an attribute then in the draw method we'll specify a second argument that tells whether to use the camera or not default set to true if true the code here stays the same but if not it will draw the pieces using their color instead like this i use the fill rect method here and add a padding of tab height so that the outer tabs are colored as well now let's test by setting use cam to false everything still works but now the pieces are more colorful and the camera input is not used anymore you can actually play the game like this based on the shape alone it's quite easy on easy mode at least now we did this change because i want to use the clicked caller to detect if i'm clicking on a piece or not like here it should not detect a click because there's nothing there and here it should activate because i'm pressing on a pink color the piece with the color i'm clicking on should start dragging we implement this by going to the unmousedown callback function and getting the color information from where we clicked on the canvas we get the image data at event.x and event.y as an array with four elements first is for red second is for green third is blue and fourth is the transparency i check if the fourth element is zero so transparent and return in this case we're not clicking on anything then this is not white actually it's transparent black but if we pass this part we format the color in the rgb string format and check to see where it belongs inside the piece we need to implement a new function for that but it's really easy i'll use this other function as a reference and pass the color here as a second argument now we loop through these pieces as before and if the color matches we return that piece simple as that now if you want to make the code more efficient you could store the pieces in a dictionary with keys equal to the color values and then do this lookup in constant time instead of linear but this method here works just fine we don't have that many pieces even on insane mode ok let's refresh and test it works but now you're going to say but radu so what if it works we want to see the webcam image here not some random colors and to that i say multiple canvases we'll add another canvas here i'll call it helper canvas and now in javascript i'll refer to it as well in the same way we did for the other one we then set its width and height to be the same as well now in update game i'll also clear the helper canvas like this and then draw the pieces normally with camera data on the main canvas but using the colors on the helper canvas and the trick is that now on mouse down we don't take the color data from the main canvas we take it from the helper canvas instead let me just refresh and you'll get it in a sec or a couple of seconds it doesn't work i forgot to change the id here to help our canvas okay now my elements show the helper canvas somewhere here or below let me just move it into screen like this i'll make it smaller so it doesn't overlap as much and i'll put it in the corner here now when i click somewhere on the main canvas the corresponding color value comes from this helper canvas so selecting the piece now works as expected and both canvases update at the same time making the helper canvas a reliable hit detector for our pieces this helper canvas doesn't need to be visible actually it doesn't even need to be added to the dom but it can be there as well it's useful for debugging i think i'll just set the display here in line to none and that's it let's test one final time that's it hope it was worth it and that you learned something from this and if you did please like and share this video with anyone you think is interested you can download the source code from my website it's split into parts so you can take it step by step if you want also let me know if you can think of a good strategy to play the game it took me one and a half hours to solve the insane mode with 1000 pieces there must be a smarter way of doing this anyway thanks for watching and see you guys
