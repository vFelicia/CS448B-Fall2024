With timestamps:

00:00 - arduino is an open source electronics
00:02 - platform based on
00:03 - easy to use hardware and software this
00:06 - course from ashish will teach you
00:07 - everything you need to know
00:08 - to start creating your own electronics
00:10 - with arduino
00:11 - and you don't even have to have any
00:13 - hardware to follow along
00:15 - hello everyone thank you for joining
00:17 - this arduino course for beginners
00:20 - this course is created for people who
00:22 - have no or very little prior experience
00:24 - in electronics
00:25 - and programming so in this course i'm
00:28 - going to help you get started with your
00:30 - arduino adventures and by the end of the
00:32 - course
00:32 - we will have some basic knowledge of the
00:34 - most common hardware components
00:35 - such as breadboard resistor led etc
00:39 - and their usage in electronic circuits
00:42 - you will also be able to write arduino
00:44 - programs on your own
00:47 - this course is built in such a way that
00:49 - it would cover
00:50 - things which absolute beginners face
00:52 - while understanding the code written by
00:54 - other creators
00:55 - while creating this course i've kept in
00:57 - my mind what problems i had faced
01:00 - when i started my own journey with
01:02 - arduino and made it like a course
01:04 - which i wished i had watched before
01:07 - starting
01:07 - anything at all if you don't have an
01:11 - arduino and other components with you
01:12 - right now
01:13 - you can still follow along the course
01:15 - and get one later
01:16 - to perform your experiments which you
01:18 - have in your mind so let's get
01:20 - started this section will be a quick
01:22 - overview to practical electronics and
01:24 - some of the most common electronics
01:26 - components that we will be using
01:27 - throughout the course with the arduino
01:30 - you can always revisit this section if
01:32 - you find any term confusing or you need
01:34 - to understand something again
01:36 - so let us start with electricity i'm
01:39 - pretty sure that you all must have heard
01:40 - of this term at least once in your
01:42 - lifetime
01:44 - if not let me tell you that electricity
01:46 - has played a major role in letting you
01:47 - watch this video on your computer or
01:49 - your laptop
01:51 - electricity is a type of energy that can
01:53 - be built up in one place or flow from
01:55 - one place to another
01:56 - when electricity gathers in one place it
01:58 - is known as static electricity
02:00 - and electricity when moves from one
02:03 - place to another
02:04 - is called current electricity
02:10 - have you felt a sudden painful jolt when
02:12 - you brush someone's arm
02:14 - or crackling sounds when you take off
02:15 - your sweaters or have you
02:18 - tried to attract paper bits by a comb
02:21 - all this happens due to static charges
02:23 - that were accumulated at a place
02:26 - believe it or not even the lightning
02:28 - that happens in the sky
02:29 - happens due to static electricity so why
02:32 - does this happen
02:34 - everything in this universe is made up
02:36 - of atoms which are made up of protons
02:39 - and electrons
02:40 - protons are positively charged and
02:41 - electrons are negatively charged
02:43 - in an atom generally the number of
02:45 - protons and electrons are equal
02:48 - hence the electric state of atom is
02:50 - neutral but when some atoms lose their
02:52 - electrons they become positively charged
02:54 - and when some atoms gain electrons they
02:57 - become negatively charged
02:59 - the short learning which i want you to
03:01 - take from this lesson
03:02 - is that similar charges repel and
03:05 - opposite charges attract each other
03:07 - as shown in this diagram static
03:09 - electricity is a very deep topic
03:11 - and has a separate study called as
03:13 - electrostatics
03:15 - which will go beyond the scope of this
03:16 - course
03:19 - the other reason i told you about static
03:20 - electricity is that
03:22 - the static electric charges in our hands
03:24 - may damage your electronic components
03:26 - sometimes
03:26 - so just make sure you keep your stuff on
03:28 - hard and solid surfaces
03:30 - and keep your components back in the
03:32 - anti-static packets which you got
03:34 - along with the components current
03:37 - electricity is the form of electricity
03:39 - which makes all of our electronic
03:41 - gadgets work
03:42 - this form of electricity exists when
03:44 - charges are able to constantly flow
03:47 - as opposed to static electricity where
03:49 - charges gather and remain at rest
03:51 - current electricity is dynamic charges
03:54 - are always on the move
03:55 - we will be focusing on this form of
03:57 - electricity throughout
03:59 - the rest of our course so in the next
04:01 - video we will talk about
04:02 - voltage which is one of the most
04:04 - important concepts
04:05 - for the existence of this current
04:07 - electricity so i will see you in the
04:09 - next video
04:11 - in this video we will learn about
04:13 - voltage voltage is a force
04:15 - that makes electrons move through a wire
04:17 - it is measured in
04:18 - volts and the symbol is v okay voltage
04:21 - is also called as
04:22 - electromotive force or emf which
04:26 - drives the electrons inside a wire
04:28 - voltage was named after a scientist
04:30 - called
04:30 - alessandro volta so now technically
04:32 - speaking the voltage is a difference in
04:34 - electric potential
04:35 - between two points for example the
04:38 - difference between
04:39 - the positive and the negative terminal
04:41 - of a battery
04:43 - let's say this battery is of 5 volts so
04:46 - the potential at this point can be 5
04:48 - volts and the potential at this point
04:50 - can be 0 volts
04:52 - so the potential difference is 5 volts
04:54 - okay
04:55 - it can also be 10 volts here and 5 volts
04:57 - here resulting into a difference of 5
04:59 - volts it can also be 0 here
05:01 - and minus 5 here then also the
05:03 - difference will be
05:04 - 5 volt so this battery provides some
05:07 - force
05:08 - on electrons so that they can move
05:10 - inside a wire
05:11 - like this you can see these electrons
05:13 - are moving inside a wire
05:15 - and and this bulb is glowing now let us
05:18 - understand
05:18 - voltage by a water analogy this is a
05:21 - water tank
05:22 - and the pressure at the end of the hose
05:24 - can represent
05:25 - voltage the water in the tank represents
05:28 - charge
05:29 - more the water in the tank the higher is
05:30 - the charge and
05:32 - more is the pressure at the end of the
05:34 - hose we can think of this tank as a
05:36 - battery
05:37 - a place where we can store certain
05:38 - amount of energy and then
05:40 - release it if we drain our tank a
05:42 - certain amount the pressure created at
05:44 - the end of the hose
05:45 - also goes down right what i mean to say
05:48 - is we can think of this as a decrease in
05:50 - voltage like when the flashlights which
05:53 - use batteries
05:54 - glow dimmer as the batteries run down
05:57 - and then there is also a decrease in
05:58 - amount of water that will flow through
06:00 - this hose
06:01 - less pressure means less water is
06:03 - flowing so we can consider this flowing
06:04 - water
06:05 - as current which we will discuss in the
06:08 - next video
06:09 - in this video we will learn about
06:10 - current on a very basic note the rate of
06:13 - flow of charge is known as current
06:15 - when electrons move from a negative
06:16 - terminal to positive terminal of a
06:18 - battery
06:18 - they give rise to current the unit of
06:21 - current is
06:22 - amperes and the direction in which the
06:24 - current flows is is the opposite
06:26 - to the direction of electrons what that
06:28 - means is
06:29 - if electrons are moving in this
06:30 - direction then the current will move in
06:32 - this direction all right so now on a
06:35 - more technical note
06:36 - current is the amount of electric charge
06:38 - that flows when one coulomb of charge
06:40 - moves past somewhere in one second and
06:43 - that current is
06:45 - one ampere coulomb is the measuring unit
06:47 - of charge
06:48 - all right and to measure the current at
06:50 - any point we can use an ammeter
06:53 - we can also understand the flow of
06:54 - current by water analogy
06:56 - let's say this is a tank filled with
06:58 - water and this water is flowing due to
07:00 - potential energy of water which we
07:02 - learned is called as
07:03 - voltage in the previous video so here
07:05 - the size of
07:07 - hose is acting as resistance a bigger
07:09 - size hose
07:10 - offers less resistance and the smaller
07:12 - size hose offers more resistance
07:14 - so the path which has
07:18 - lower resistance more current can flow
07:20 - through that path
07:22 - and the path which offers more
07:24 - resistance less current can
07:26 - flow through that path okay so here
07:30 - since the voltage is equal and
07:33 - resistance is lower in this case
07:35 - the water flowing here will be more and
07:37 - the water flowing here will be less
07:39 - okay so this has given
07:42 - rise to another term called as
07:43 - resistance and we will learn about
07:45 - resistance in
07:46 - next video but before that i would like
07:48 - to tell you that there are two types of
07:49 - current
07:50 - one is direct current and one is
07:51 - alternating current in dc current
07:53 - the flow of electrons stay in the same
07:55 - direction and the voltage stays
07:57 - steady with the time as you can see from
07:59 - the graph
08:00 - while in ac the flow of electrons change
08:03 - and the voltage does not stay steady
08:05 - with time that also you can see from the
08:07 - graph
08:07 - don't worry if you could not understand
08:09 - all this at this moment
08:10 - at this point you only need to
08:12 - understand that the current
08:14 - which you see in your home that is the
08:16 - current which drives your fans
08:18 - and other appliances like air
08:20 - conditioners televisions
08:21 - etc is known as ac current and the
08:25 - current which you get from the batteries
08:26 - or specific power supplies is dc or
08:29 - direct current the current you get
08:31 - from your laptop or computer's usb port
08:33 - is also dc current
08:35 - and for our course we will be dealing
08:37 - with the dc current only
08:39 - if you have understood just this part
08:41 - you are good to go
08:43 - so i will see you in the next video now
08:45 - we will take a look at resistance
08:47 - the electrical resistance of any
08:48 - component is a measure of difficulty of
08:51 - passing an electric current
08:52 - through that substance with more
08:54 - resistance in a circuit less electricity
08:56 - will flow through the circuit
08:57 - based on this term resistance there is
08:59 - an electrical component known as a
09:01 - resistor
09:02 - a resistor is a device which limits the
09:03 - flow of a current in a circuit
09:05 - we may need resistor inner circuits
09:07 - where we need to drive leds
09:09 - which require limited amount of current
09:11 - so that we can prevent it from burning
09:13 - off
09:14 - right now if we see the resistance with
09:16 - the water analogy
09:18 - we can see this is a pipe and this is
09:20 - one another pipe
09:21 - the water can flow easily through this
09:22 - pipe because it offers less resistance
09:25 - the flowing water can be
09:26 - synonymous to flowing current okay and
09:29 - when there is more resistance
09:30 - less current will pass through it one
09:32 - important thing which you would like to
09:33 - know is
09:34 - that the current always takes the least
09:37 - resistive path
09:38 - for example if you offer two parts for
09:41 - current to flow
09:42 - it will try to flow from the least
09:43 - resistive path out of them
09:45 - okay so in the next video we will study
09:48 - the relation between current voltage
09:50 - and resistance and in upcoming videos we
09:52 - will also learn
09:53 - how to identify the value of the
09:55 - resistor the value
09:56 - of the resistor is measured in ohms more
09:59 - the value of resistor
10:00 - more the resistance it will offer in the
10:02 - circuit so now i will see you in the
10:04 - next video
10:05 - so till now i'm sure that you all must
10:07 - have inferred that somehow
10:08 - all these terms are interconnected if
10:11 - you have then you are absolutely correct
10:14 - there is a law known as ohm's law which
10:16 - tells the correlation of these terms
10:18 - a german physicist george simon ohm
10:21 - stated
10:22 - that the electric current flowing
10:24 - through a metallic wire is directly
10:26 - proportional
10:26 - to the potential difference across it
10:28 - provided
10:29 - temperature remains the same that means
10:33 - like i said earlier more the force more
10:36 - the current
10:37 - so potential difference is the force
10:38 - here which we talked about earlier
10:41 - so mathematically we get voltage v
10:45 - is equal to the product of resistance r
10:47 - and
10:48 - current a or i for that matter
10:52 - [Music]
10:54 - if any one of them is unknown we can
10:56 - find out by doing the math
10:59 - there's an easy way to find that out
11:01 - there is a triangle
11:02 - known as ohm's law triangle
11:04 - [Music]
11:06 - we just hide the unknown quantity and we
11:09 - get
11:10 - the answer for example if we hide v
11:13 - so i and r looks in a multiplication
11:16 - position
11:16 - so v is equal to i multiplied by r
11:20 - if we have to find resistance we will
11:22 - cover up r then v and i
11:24 - appear in a division like position so r
11:27 - is equal to v divided by i
11:30 - then we have i as unknown quantity
11:33 - then we can do i is equal to v by r
11:37 - based on the similar reason
11:40 - this interesting image shows that if we
11:42 - consider voltage current and resistance
11:44 - as people
11:45 - how would they behave the voltage would
11:47 - keep pushing the current
11:49 - and resistance would create difficulty
11:51 - for it to pass
11:52 - isn't it funny so now let's see how
11:56 - do we use ohm's law to calculate the
11:58 - unknown values in a circuit
12:00 - this is a circuit and this is a very
12:02 - basic circuit right
12:03 - and here is the resistance of value 600
12:07 - ohms
12:08 - and this is the circuit representation
12:10 - of a resistance
12:11 - which is a zigzag line right
12:14 - here we have a battery which measures 12
12:16 - volts
12:17 - and this is the connecting wire so can
12:20 - you figure out
12:21 - how much current is flowing in the
12:22 - circuit right now we will use ohm's law
12:25 - to find out
12:26 - okay so here what quantity is unknown
12:29 - i which is current right so we will be
12:32 - using i
12:32 - is equal to v by r so we'll do
12:36 - 12 upon 600 which would be 0.02 amperes
12:40 - okay so now if we change the value of
12:44 - our resistance
12:45 - and make it 6 ohms instead of 600
12:48 - so can you tell me the new value
12:52 - we just need to do 12 by 6 now
12:55 - which would turn out to be 2 amperes all
12:58 - right
12:59 - so did you observe that if we reduce the
13:01 - resistance in a circuit
13:02 - the current flowing in the circuit
13:03 - increased earlier it was 0.02 amperes
13:06 - and now
13:07 - it is 2 amperes right
13:10 - now if we change the voltage
13:13 - of the battery as well let's say 24 so
13:15 - now the current flowing will be
13:17 - 4 amperes right so we increase the
13:20 - voltage and reduce the resistance
13:22 - so the overall current flowing in the
13:23 - circuit was 4 amperes
13:26 - so i guess you must be able to see the
13:28 - relation between voltage
13:29 - resistance and the current flowing in
13:31 - the circuit one thing you need to learn
13:32 - about using resistances in a circuit
13:35 - is that there are multiple ways we can
13:38 - use resistances
13:39 - like we can use them in series we can
13:41 - use them in parallel
13:42 - so now i will show you how to use
13:44 - resistances in series and parallel
13:47 - if i give you a general idea about
13:49 - resistances in series in parallel
13:51 - i would say in a series circuit the
13:54 - output current of the first resistor
13:56 - flows into the second resistor and into
13:59 - the third resistor
14:00 - therefore the current is the same in
14:03 - each resistor
14:04 - while in parallel all the resistors are
14:07 - connected to each other
14:08 - in a manner shown here right all the
14:11 - ends
14:12 - are connected to each other like this so
14:14 - now we will look at
14:15 - series circuit in a bit more detail so
14:17 - if we look at
14:18 - the circuit here we can see that three
14:20 - resistances
14:21 - r1 r2 and r3 are connected in series
14:24 - across a battery of a certain voltage
14:26 - okay we don't know what voltage is that
14:28 - right now but let's say
14:30 - that voltage is v right so now since
14:33 - there is just
14:34 - one path for current to flow in this
14:35 - circuit the
14:37 - value of current flowing in the circuit
14:38 - would be same let's say
14:40 - it would be equal to i okay so due to
14:43 - that
14:44 - in a series circuit the voltage drop
14:46 - across each resistor
14:47 - would be different and interestingly the
14:49 - sum of v1
14:50 - v2 and v3 that is the voltage across
14:53 - each resistor
14:54 - will be equal to the voltage of the
14:56 - battery
14:57 - right let's say if the voltage of the
14:59 - battery is 12 volts okay
15:01 - so the voltages which we will get across
15:03 - these resistances
15:04 - would add up to 12 and from this circuit
15:07 - we can create
15:08 - an equivalent circuit like this where
15:10 - where the equivalent resistance is the
15:12 - algebraic sum of
15:13 - all the resistances which we have used
15:15 - so let us now see an example
15:17 - where you can apply this learning right
15:19 - so here we have a circuit
15:21 - with five resistances connected in
15:24 - series
15:24 - and which are connected across a battery
15:26 - which measures 9 volts
15:28 - so what we need to do is we need to find
15:30 - the equivalent resistance
15:31 - the current flowing in this circuit and
15:33 - individual voltages
15:34 - across each resistance right let's have
15:37 - our diagram handy with ourself
15:39 - which we use to remember the ohm's law
15:44 - so let us first calculate the equivalent
15:47 - resistance
15:48 - as i told you to calculate the
15:49 - equivalent resistance in a series
15:51 - circuit
15:51 - we just take the algebraic sum of all
15:53 - the resistances
15:55 - right so here
15:58 - it will be 20 plus 20 plus 20 plus 20
16:02 - and plus 10 which is equal to 90 ohms
16:05 - right
16:05 - now since we have this equivalent
16:06 - resistance to calculate the current
16:08 - flowing in the circuit we would use
16:10 - this formula i is equal to v by r right
16:14 - the only difference is instead of using
16:17 - r we will use
16:18 - r equivalent because we will be using
16:20 - the equivalent resistance in the circuit
16:21 - right that would be 9 upon 90 which is
16:24 - 0.1 amperes so now we know
16:28 - that 0.1 amperes is flowing in this
16:30 - circuit
16:32 - so to calculate individual voltages
16:34 - across the resistances
16:36 - what we can do we'll use the ohm's law
16:38 - once again
16:40 - but this time we will use this formula
16:42 - we need to calculate v is equal to i
16:44 - into r
16:45 - so i is 0.1 and r is 20.
16:48 - so 0.1 into 20 is 2 volts okay
16:51 - similarly this will also measure 2 volts
16:53 - this will also measure 2 volts this will
16:55 - also measure 2 volts
16:57 - and this one will be 1 volt because 0.1
17:00 - into 10
17:00 - is 1 right so now you notice that
17:03 - 2 plus 2 plus 2 plus 2 and plus 1
17:07 - is equal to 9 right as we saw earlier as
17:10 - well
17:10 - all the voltages also add up to the
17:12 - voltage of the battery which is 9 volt
17:15 - all right so this is about series
17:17 - circuit now we will look at
17:19 - the parallel circuits so the resistors
17:21 - are in parallel when one end
17:23 - of all the resistors are connected by a
17:25 - continuous wire of negligible resistance
17:27 - and similarly
17:27 - other ends are also connected to each
17:29 - other through a similar wire
17:31 - since all the resistances in parallel
17:33 - are connected directly
17:35 - to the battery you can say the voltage
17:37 - across all of them
17:38 - is equal right but unlike the resistors
17:40 - in series
17:41 - where there is just one path for current
17:43 - to flow in parallel circuits
17:45 - there are multiple paths for resistance
17:46 - to flow like in the circuit you can see
17:49 - current has two parts if the current
17:52 - flowing in the circuit is i
17:53 - then it will divide into two parts let's
17:54 - say i1 and i2
17:56 - if there were more resistances we would
17:58 - say like i3 and i4 etc
18:00 - and when that current flows it comes
18:02 - back and
18:03 - it adds up and becomes i again and if we
18:06 - wish to calculate the values of i1 and
18:08 - i2
18:08 - again we can use the ohm's law here
18:10 - right because the voltage
18:13 - across this resistors is equal to the
18:14 - battery's voltage
18:16 - and the value of resistor is also known
18:19 - so we can calculate i using ohm's law
18:22 - right
18:22 - you should remember that v1 and v2 will
18:25 - always be equal to
18:26 - v and i will be equal to
18:30 - i1 plus i2 right
18:33 - now we can also calculate the equivalent
18:35 - resistance
18:36 - this combination of resistors will offer
18:39 - in the circuit
18:40 - and to do that there is a very simple
18:42 - formula
18:44 - one upon req that is equivalent
18:46 - resistance is equal to
18:48 - 1 by r1 plus 1 by r2 plus 1 by r3
18:51 - and so on right so let us see one
18:54 - example
18:55 - and let us keep that diagram handy again
18:59 - right so what we need to do in this
19:01 - question is
19:02 - we need to find out the current flowing
19:04 - in this circuit
19:06 - and the individual current flowing in
19:09 - these resistances
19:10 - right so one approach can be we can find
19:13 - out the equivalent resistance first
19:15 - using the formula we just saw let us
19:17 - place the values inside it
19:21 - right 1 by req is equal to 1 by 1
19:24 - plus 1 by 2 plus 1 by 2.
19:28 - we have just replaced these values by
19:30 - the values of the resistors
19:32 - right so now we will take lcm
19:36 - and which turns out to be 4 by 2
19:39 - but please note that this is 1 by r
19:42 - equivalent
19:43 - all right so to calculate r equivalent
19:46 - we will take the reciprocal of this
19:48 - value which would turn out to be
19:52 - 0.5 ohms right so now we have
19:56 - the equivalent resistance of this
19:58 - circuit we can simply use
20:00 - the formula i is equal to v by r v is 3
20:03 - and r is 0.5
20:07 - so the answer would be 6 amperes right
20:10 - so 6 amperes will be flowing in this
20:12 - circuit
20:13 - now if we want to calculate the
20:16 - individual currents in these
20:17 - resistances what we will do is we will
20:20 - use
20:21 - this formula again because v is same
20:24 - and r is known right so in this resistor
20:28 - v is three and r is one so in this
20:31 - resistor three amperes will be flowing
20:34 - in this resistor
20:35 - three by two that means one point five
20:39 - would be flowing right and in this
20:42 - resistance as well
20:43 - 1.5 amperes would be flowing so now if
20:45 - we add up
20:46 - all these currents in these three
20:48 - resistances
20:49 - that would come out to be six so again
20:51 - we verified the things we just studied
20:53 - and i don't know if you noticed or not
20:55 - the equivalent resistance
20:56 - of 0.5 was even lesser than the lowest
20:59 - of the resistance is used
21:00 - right so this will always be the case
21:03 - the equivalent resistances
21:04 - in the parallel circuits will always
21:07 - come out to be
21:08 - lesser than the lowest value of the
21:09 - resistance in those combinations
21:12 - all right so this was about parallel
21:14 - circuits
21:15 - and now we will see a slightly more
21:17 - complicated circuit
21:18 - which involves series and parallel
21:21 - circuits both
21:22 - so here we have such a circuit where
21:25 - resistances
21:26 - are present in series as well and panel
21:28 - as well
21:29 - so now i will tell you how to find out
21:31 - unknown values
21:32 - in such kind of circuits right so first
21:35 - of all
21:36 - we need to work in sections of the
21:38 - circuit for example
21:40 - in this circuit i have taken up this
21:42 - section we can see that these two
21:43 - resistances
21:44 - r3 and r4 are in series right so using
21:48 - our regular
21:48 - resistances in series formula which is r
21:51 - equivalent is equal to r1 plus r2 plus
21:53 - r3 and so on
21:54 - right so here are two resistances so we
21:57 - have just taken some of those two
21:58 - resistances
21:59 - which is 10 ohm then in our mind we will
22:02 - think of it as
22:03 - one single resistor right which is in
22:05 - parallel with
22:06 - this resistance right so now we will use
22:09 - our parallel formula
22:11 - which is 1 by r equivalent is equal to 1
22:14 - by
22:14 - r1 plus 1 by r2 right
22:18 - so both of the resistances are of 10
22:20 - ohms so if you plug the values
22:22 - in this formula you will get 5 ohms you
22:24 - can try it on your own right
22:26 - then we will reduce that circuit in our
22:29 - mind only
22:30 - with 5 ohms as a resistance then this
22:33 - equivalent resistance
22:34 - is in series with 7 ohm resistor right
22:37 - again we will use our resistance in
22:40 - series formula
22:41 - so the equivalent resistance will turn
22:43 - out to be 12 ohms
22:45 - so now let's have our ohm's law formula
22:48 - handy
22:49 - right so what we can find out now is how
22:52 - much current is flowing in this circuit
22:54 - how we can do that we will use this
22:56 - formula i is equal to v by
22:58 - r where v is 24 and r is
23:01 - 12 so we will get 2 amperes
23:04 - right so now if we want to know voltages
23:07 - across
23:07 - each resistance and current flowing in
23:10 - each resistance
23:11 - we can work our way backwards now right
23:14 - so we know two amperes is flowing in
23:16 - this circuit so we can calculate the
23:18 - voltages across
23:19 - these two resistances right so first we
23:21 - will calculate
23:22 - across 7 ohm resistor so how will we do
23:24 - that we'll use v is equal to
23:27 - i into r i is 2 and r is 7
23:30 - so we will get 14 volts across this
23:33 - okay and here we will get
23:37 - 2 into 5 10 volts right so you can see
23:42 - 14 plus 10 is 24 we are satisfying the
23:44 - things which we have studied so far
23:47 - now we'll move one step back so we knew
23:50 - voltage across this resistance
23:51 - was 10 volts right so in this section
23:54 - also
23:55 - the voltage will be 10 volts so now
23:58 - since this is a parallel circuit in both
24:00 - of the resistances
24:02 - voltage will be 10 volts so now we can
24:04 - calculate
24:05 - current in this right by using this
24:08 - formula again
24:09 - right v is 10 and r is also 10
24:12 - so 1 ampere would be flowing inside it
24:15 - the answer would be same for this one as
24:16 - well
24:17 - right now if we take one step back again
24:20 - we'll have to calculate voltage across
24:22 - these two resistances how will we do
24:24 - that again we'll use this formula
24:26 - v is equal to i into r so current was 1
24:29 - ampere in this
24:30 - so in this as well it will be 1 ampere
24:33 - so we know
24:34 - 6 into 1 is 6 volts
24:37 - and across this one we'll have 4 volts
24:41 - using the same formula right so we have
24:44 - all the unknown values
24:45 - right now since there were so many
24:47 - values i can understand it must be a
24:49 - little difficult for some of you to
24:51 - visualize it
24:52 - so i have created a circuit to help you
24:54 - visualize a little
24:55 - right let's have a look at it so here is
24:58 - that visualization
24:59 - so you can see exactly similar circuit
25:01 - which we saw earlier
25:02 - and i have written all the values of
25:04 - current flowing in each resistance
25:06 - and now i will show you the voltages
25:08 - across each resistance
25:12 - let's keep this formula handy as always
25:15 - now i will show you voltage across each
25:17 - resistance
25:19 - it is 14 volts across 7 ohms 6 volts
25:22 - across 6 ohms
25:24 - 4 volts across 4 ohms and 10 volts
25:26 - across
25:27 - 10 ohms right so if you have understood
25:29 - this part
25:30 - i can say you have understood really
25:32 - important fundamental
25:34 - about using resistances in series and
25:36 - parallel but
25:37 - you may also find circuits like this
25:40 - okay
25:40 - where we have two batteries right in
25:43 - circuits like these
25:44 - you cannot simplify the circuits which
25:46 - we have seen so far
25:47 - so there are some advanced concepts such
25:49 - as kirchhoff's law
25:50 - okay which is used to calculate the
25:52 - unknown values in the circuit
25:54 - but that will go beyond the scope of our
25:56 - course right now so one last thing about
25:58 - resistances i want to tell you is
26:00 - identifying the resistance is based on
26:02 - the color bands
26:04 - let's have a look at that now
26:06 - resistances
26:07 - come with the four or five color bands
26:09 - denoting the value of resistance
26:11 - it will offer in the circuit
26:15 - so you see in this diagram there are
26:18 - four band
26:19 - resistors and there are five band
26:21 - resistors
26:22 - okay in a four band register the first
26:25 - band will tell you the first digit
26:28 - the second band will tell you the second
26:29 - digit
26:31 - the third band will tell you the number
26:33 - of zeros which you need to put after the
26:35 - first two digits
26:36 - and the fourth band tells the error
26:38 - percentage
26:39 - means it can be that much percentage
26:42 - above or below
26:43 - the stated value now see the first band
26:46 - in this case
26:47 - is yellow so it the first digit will be
26:50 - four the second band is violet so the
26:53 - second digit will be
26:54 - seven the third band is origin color
26:57 - so the multiplier will be one thousand
27:00 - so we get the value of
27:02 - forty seven thousand and the fourth band
27:05 - is
27:06 - gold so that means it will have a
27:09 - tolerance of plus minus
27:10 - five percent so the net value of this
27:13 - resistance is
27:13 - 47 000 ohms
27:17 - or you can say 47 kilo ohms with the
27:20 - tolerance of five percent
27:21 - now we see the five band code okay
27:24 - the first band tells the first digit the
27:26 - second man tells you the second digit
27:28 - the third bank tells you the third digit
27:30 - fourth band tells you the multiplier
27:32 - here
27:32 - and first bank tells you the tolerance
27:35 - we'll consider this example
27:37 - first band is orange and color so the
27:38 - first digit will be three
27:40 - second band is green so the value will
27:43 - be
27:44 - five the third band is black in color
27:49 - so the third value will be zero
27:52 - and fourth band is red so the multiplier
27:55 - will be
27:56 - hundred till now we get three five zero
28:00 - and double zero so this is 35 000
28:03 - and the last band is brown in color so
28:06 - one percent of tolerance so the net
28:09 - answer will be
28:10 - 35 kilo ohms with a tolerance of one
28:13 - percent
28:15 - you can refer to this chart whenever you
28:16 - need to find the value of your
28:18 - resistances
28:19 - and i understand this might be confusing
28:21 - at first but with practice
28:23 - you can understand this very easily in
28:26 - this section
28:27 - we will finally take a look at the main
28:29 - thing most of you must be already
28:31 - waiting for this section to come up
28:33 - so this blue colored thing which is
28:35 - present in your kit is the arduino board
28:38 - i will tell you what is it what it can
28:40 - do
28:41 - and how to start using it finally
28:44 - but before that i would like to tell you
28:46 - about some terms which you may
28:48 - or may not have heard about before
28:50 - starting this course
28:51 - so these terms are microprocessor
28:53 - microcontroller
28:54 - memory integrated circuits etc
28:59 - microprocessors are known as a brain of
29:01 - any computer
29:02 - they consist of a cpu which stands for
29:05 - central processing unit
29:07 - which is responsible for doing all the
29:08 - computations and calculations which we
29:10 - need to carry out
29:12 - they need additional peripherals like
29:13 - ram and rom in order to function
29:16 - example of a microprocessor is the cpu
29:19 - which is being used in your computer
29:20 - right now
29:22 - if you go and check the history of
29:23 - microprocessors you will see the
29:25 - microprocessors have come a long way
29:27 - after so many improvements in
29:29 - developments microprocessors
29:31 - and graphic processors are used where
29:33 - there is a need of heavy computational
29:35 - cycles
29:36 - like artificial intelligence deep
29:38 - learning self-driving cars
29:39 - and high-end robots our daily
29:42 - applications like playing games
29:44 - movies browsing internet also requires
29:46 - our microprocessors
29:49 - and then there are microcontrollers
29:52 - microcontrollers are integrated chips
29:54 - that are basically tiny computers but
29:56 - are powerful enough to do a lot many
29:58 - tasks
29:58 - like controlling motors pumps other
30:01 - appliances or they can send some sensor
30:03 - data to internet cloud
30:05 - control basic displays and even act as
30:07 - brains of some intermediate level robots
30:10 - applications are endless trust me the
30:12 - power requirements of such integrated
30:14 - chips is very low
30:15 - and you can even run these chips on
30:18 - batteries
30:19 - for days or even months they have all
30:22 - the peripherals like memory and flash
30:24 - storage
30:24 - built on the same chip
30:25 - [Music]
30:28 - if we compare microcontroller and
30:30 - microprocessor
30:31 - in terms of cost a microcontroller is
30:33 - far cheaper than a microprocessor
30:35 - however
30:36 - microcontroller cannot be used in place
30:38 - of a microprocessor
30:40 - and using a microprocessor is not
30:42 - advised in place of a microcontroller
30:44 - as it makes the application quite costly
30:48 - if we compare them in terms of speed if
30:50 - we say human brain is fast
30:52 - then microcontroller is faster and
30:54 - microprocessor is fastest
30:56 - but please note we are talking in a very
30:58 - general way this won't be applicable if
31:00 - you compare an old generation thing with
31:02 - a new generation thing
31:03 - as technology advances it won't make any
31:05 - sense to compare
31:06 - and also some exceptions are always
31:09 - there it is really possible that you
31:11 - or any human may be faster
31:13 - [Music]
31:15 - so do you have any guesses in which
31:17 - category or arduino board will fall
31:21 - if you said microcontroller then you are
31:24 - partially right
31:25 - an absolutely correct answer is that
31:27 - arduino is a circuit board
31:29 - which has a microcontroller on it which
31:31 - act as the heart of that board
31:35 - the arduino board given to you in your
31:37 - kit is arduino uno
31:38 - which uses microcontroller atmega328
31:42 - there are many more kinds of arduino
31:44 - boards available with other
31:45 - microcontrollers
31:46 - which may be superior or inferior to
31:48 - atmega328
31:50 - but arduino uno is just right for our
31:52 - applications
31:53 - you may want to pause the video here to
31:55 - have a look at all these
31:56 - boards and admire how beautifully they
31:59 - are made
32:04 - so arduino is basically a company in
32:06 - italy which made it really easy for
32:08 - people to use microcontrollers for their
32:10 - application
32:13 - the hardware and software of arduino is
32:15 - open source which means
32:16 - one can have access to the files and
32:18 - even modify them for their own work
32:21 - since it is open source many other
32:23 - companies take their design and
32:24 - manufacture their own versions of
32:26 - arduino
32:27 - so it is really easy to clone and modify
32:29 - the arduino board
32:30 - [Music]
32:32 - what makes arduino a beginner-friendly
32:34 - tool is their easy to use
32:36 - hardware and software it can be used
32:39 - even by people
32:40 - having no technical background
32:44 - earlier people would have to use very
32:46 - difficult assembly language to control
32:47 - their votes
32:49 - but it is not the case with arduino
32:52 - as you progress with the course you will
32:53 - see yourself with how easy and intuitive
32:56 - this tool is
32:58 - you will see that uploading the code is
33:00 - as simple as plugging a usb cable and
33:02 - clicking upload button
33:04 - in this video we will see the parts
33:06 - which make up the arduino board
33:10 - so this is the diagram of arduino board
33:12 - which shows the typical components which
33:14 - are placed on it
33:16 - so we will begin by the digital pins the
33:19 - pins which you see
33:20 - here which are numbered 0 to 13
33:23 - and some pins have a special symbol like
33:26 - this
33:26 - curvy symbol on in front of it which
33:28 - denotes pwm capability
33:30 - that means these pins support pwm other
33:33 - than that
33:33 - these pins take digital input from
33:36 - sensors and give digital output
33:38 - to some of the components all right so
33:41 - then we move to the built-in led
33:44 - which is shown by this led
33:48 - this led by default is connected to pin
33:50 - number 13. so whenever pin number 13
33:53 - goes high
33:54 - this led will turn on and when that pin
33:56 - goes low
33:57 - this led will turn off and then
34:01 - we will see the power led this is the
34:04 - power led
34:05 - if this led is turned on that means your
34:08 - arduino is plugged in
34:09 - that means it's turned on right now then
34:12 - we have
34:13 - the main component the atmega328 chip
34:17 - it controls all the main functions of
34:19 - this board
34:20 - whatever is happening on this board is
34:23 - due to
34:24 - this ship then we have
34:27 - analog pins we have six analog pins on
34:30 - this board
34:31 - numbered from a0 to a5
34:34 - we can connect any analog sensor on
34:36 - these pins
34:38 - then we have the power pins these are
34:41 - the power pins
34:42 - you can power any component using these
34:46 - pins but make sure that you don't your
34:49 - components are not drawing a lot of
34:50 - current
34:51 - basic sensors and basic you know
34:53 - breadboard circuits
34:54 - are fine with these pins
34:59 - then we see the power dc jack if you
35:02 - want to connect
35:03 - your arduino externally through a dc
35:05 - jack you can connect it
35:07 - through this jack the voltage input it
35:09 - can accept is 7 volts to
35:11 - 12 volts then we have tx and rx leds
35:16 - these are the tx and rx leds rx means
35:18 - receive tx means send
35:20 - transmit okay so whenever these leds are
35:23 - blinking that means
35:24 - cardinal board is either communicating
35:26 - with the computer
35:27 - or some other another arduino board
35:31 - then we have the usb jack you connect
35:34 - your arduino board with your computer
35:35 - using this jack
35:39 - then we have the reset button this
35:41 - button reloads the entire code which is
35:44 - running on the
35:45 - arduino board but please note that this
35:47 - button does not
35:48 - clears the memory of arduino
35:52 - here are few technical specifications of
35:54 - arduino uno
35:56 - by technical specifications i mean the
35:58 - information which you look
35:59 - while buying any item or a computer like
36:02 - in a computer you see how much disk
36:04 - space is there
36:04 - how much ram does it have or processor
36:06 - it has similarly
36:08 - arduino being a microcontroller board
36:10 - has some technical specifications
36:12 - like it has atmega328 as the main chip
36:17 - which does all the work it operates at 5
36:20 - volts
36:21 - the input voltage which it can accept is
36:23 - 5 to 12 volts
36:26 - although according to the data sheet of
36:28 - arduino
36:29 - the recommended voltage is 7 to 12 volts
36:32 - and the limits
36:33 - are 6 to 20 volts so i recommend that
36:36 - 5 to 12 volts is a good enough voltage
36:39 - to operate
36:40 - arduino with and then there are
36:43 - 14 digital pins out of which six are pwm
36:46 - capable
36:47 - don't worry about pwm right now but just
36:49 - think having pwm capability is a good
36:52 - thing
36:54 - then there are six analog pins which are
36:56 - used to connect analog sensors to the
36:58 - arduino
36:59 - you can understand that these pins are
37:01 - connected to arduino
37:03 - through a 10 bit adc an adc is
37:06 - an analog to digital converter we'll
37:08 - talk about adc
37:10 - in further lectures
37:13 - the i o pins are capable of supplying 40
37:16 - milliamperes of current
37:17 - so these pins cannot drive large
37:20 - appliances or the things which require
37:22 - more current like motors and it is not
37:24 - even recommended
37:25 - that you run motors through arduino but
37:28 - few leds and most sensors which we use
37:30 - in this course do not draw very large
37:32 - amount of current
37:33 - so these pins are just fine
37:36 - there is a 3.3 volt pin as well and the
37:39 - maximum current you can draw from it is
37:41 - 50 milliamperes
37:46 - and there is a flash memory of 32 kb
37:49 - which we use
37:50 - to store all the programs into it 32 kb
37:54 - must be seeming like a very less amount
37:56 - but trust me you can store lines
37:59 - of 1000 even 2000 lines of code in this
38:03 - and it won't even exceed 10 percent of
38:05 - the storage
38:06 - then it have sram of 2kb which is a
38:09 - volatile memory
38:10 - or more generally it is similar to ram
38:12 - on your computer
38:13 - again it would seem too less and i would
38:16 - repeat
38:17 - what i said for the flash memory that it
38:20 - is more than enough
38:21 - it also has 1 kb of eep rom which can
38:24 - store
38:25 - some variables even after you switch off
38:27 - the arduino
38:28 - clock speed is 16 megahertz clock speed
38:31 - is the speed that microprocessor
38:32 - executes each instruction
38:34 - one megahertz representing one million
38:36 - cycles per second
38:38 - i understand a lot of information in
38:40 - this video might have just bounced over
38:42 - your head
38:43 - and it's perfectly okay if you don't
38:44 - understand some portion of it
38:46 - i would just say don't lose your
38:48 - motivation and just stick with us
38:50 - and i promise you you will understand
38:52 - each and every part
38:53 - of it by the end of the course if not we
38:56 - are always here for help
38:58 - in this section i will tell you about
39:01 - arduino ide
39:02 - but before we jump into that first of
39:04 - all we need to understand what an ide
39:06 - is a text editor like a notepad
39:10 - along with the compiler is a bare
39:12 - minimum requirement to start
39:14 - coding but wait what is a compiler
39:17 - compiler is a special program that
39:19 - processes statements written in a
39:21 - programming language
39:22 - and turns them into a machine language
39:24 - which are basically zeros and ones which
39:26 - a computer can understand
39:28 - but unlike text editor an ide which
39:31 - stands for integrated development
39:32 - environment
39:33 - is a software tool which has a lot more
39:35 - functionality to make programming easier
39:37 - for the user
39:38 - it has a built-in text editor and
39:40 - compiler along with easy to use tools
39:43 - menus and buttons to compile
39:46 - run debug analyze
39:50 - and save the programs
39:53 - considering arduino they also have one
39:55 - official ide
39:56 - which has buttons to verify and upload
39:59 - the sketches they also have
40:00 - easy to use menus to select boards and
40:03 - ports
40:03 - throughout the course we will be using
40:05 - the official arduino ide
40:07 - and for that in the following sections
40:09 - we will be downloading
40:11 - and installing the official arduino ide
40:16 - now i will tell you how to install the
40:18 - official ide
40:19 - for that go to any browser and go to
40:22 - arduino dot cc then click on software
40:26 - tab
40:28 - you will find many options here we will
40:30 - go with the windows installer
40:34 - click on just download if you don't wish
40:36 - to donate anything
40:38 - donations like these help open source
40:40 - communities to fund themselves
40:44 - once the download completes
40:48 - we will click on it and when the
40:50 - installation starts
40:52 - click on i agree make sure that all
40:54 - these boxes
40:55 - are checked these are the essential
40:57 - drivers which are required
40:59 - for your computer to detect and
41:01 - communicate with the
41:02 - arduino board right we'll click on next
41:07 - then we will choose the destination
41:08 - folder i will go with the default one
41:11 - and click on install
41:15 - this process may take some time let's
41:18 - wait for it
41:19 - to finish
41:26 - in my screen it says completed but some
41:29 - people may get additional prompts to
41:31 - install those additional drivers
41:32 - all you need to do is just click on
41:34 - install on them as well
41:36 - and then once it is completed for you
41:39 - click on close and then you will find
41:41 - the arduino icon
41:42 - on your desktop then you just double
41:45 - click on it
41:47 - and here is your fully functional
41:49 - arduino ide
41:50 - window so now we will set up our
41:53 - computer for uploading our first basic
41:55 - sketch
41:56 - there is nothing complicated we need to
41:57 - do the first step is
42:00 - we need to plug in an arduino board with
42:02 - the usb cable given
42:04 - in the box and once you do that your
42:06 - computer will automatically detect that
42:08 - arduino has been plugged in
42:10 - and it will list it out on a specific
42:12 - serial port
42:13 - in windows it is known as a com port
42:16 - which you need to go
42:17 - and select using tools go to tools and
42:20 - then go to port
42:21 - and you will automatically see a com
42:23 - port here
42:24 - it is very likely that you see com3 if
42:27 - you have plugged your arduino for the
42:28 - very first time
42:30 - okay so you will see arduino genuine
42:33 - uno written over here if you're using
42:36 - mac
42:38 - then you will see something like this
42:40 - forward slash dev
42:41 - dot forward slash cu dot usb modem this
42:44 - is the port number
42:45 - and you will see arduino uno here
42:47 - instead of adding omega i have tested
42:48 - with arduino mega that's why it is
42:50 - showing it
42:51 - like that but you will see arduino uno
42:53 - right
42:54 - if you're using linux you will see
42:55 - serial port as
42:57 - power slash dev tty acm0 it is most
43:00 - likely will find it at
43:02 - at acm 0. after this step
43:05 - we are just ready to upload our first
43:06 - basic sketch
43:09 - so finally we will be testing our
43:10 - arduino boards and for that we will be
43:12 - using the built-in example sketches
43:17 - so in order to upload our first sketch
43:19 - we'll go to examples we'll go to basics
43:21 - and then we'll select the blink sketch
43:23 - this is the first sketch which will be
43:25 - uploading
43:26 - on our arduino board we'll go to tools
43:29 - we'll select our board as arduino uno
43:31 - and we'll select
43:32 - our port as com3 and
43:36 - then we will go to upload button we'll
43:38 - click on upload in order to upload the
43:40 - code
43:41 - there are more buttons like verify save
43:43 - open we will talk about these buttons
43:46 - in upcoming sections but now we'll click
43:48 - on upload
43:50 - it will first compile the sketch and
43:52 - then it will upload the code to the
43:54 - board
43:56 - after uploading you will see done
43:58 - uploading will appear
44:00 - in the messages done uploading right
44:04 - and you will see that led is blinking
44:06 - with this gap of one second
44:09 - is it blinking right if it is blinking
44:12 - then congratulations you have done your
44:14 - first example
44:22 - at this point the viewers without an
44:24 - arduino must be feeling a little stuck
44:27 - but please don't worry i've got you
44:29 - covered all you need to do
44:30 - is use an online simulator like
44:33 - autodesk tinkercad and for that you need
44:36 - to go to
44:39 - the website of tinkercad
44:42 - right this one
44:49 - and you need to create an account if you
44:51 - don't have it already
44:52 - you can choose the option relevant to
44:54 - you make an account
44:58 - and after creating your account you will
44:59 - see a screen like this
45:01 - all you need to do is click on circuits
45:03 - and create a new circuit
45:07 - at this window we need to search
45:11 - arduino uno r3
45:14 - and just drag it over here
45:18 - right so now you have your virtual
45:20 - arduino board
45:21 - it will just function exactly like the
45:24 - actual arduino board
45:25 - and whatever code i write in official id
45:28 - in the following videos
45:29 - you need to write that into this window
45:36 - right so you will have this window over
45:38 - here
45:39 - whatever code i am writing in the
45:41 - official id you just need to
45:42 - write that in this area okay so just as
45:46 - you saw
45:46 - few moments ago that we tested our
45:48 - arduino board
45:49 - so we will now test our arduino board
45:51 - over here
45:53 - right so this is the same code which we
45:56 - wrote over there
45:57 - only the comments are not here right so
46:00 - this is exactly the same code
46:02 - and what we need to do after that is
46:04 - start simulation
46:07 - okay so it will be plugged in and
46:10 - you know we can see the outcome of our
46:12 - code over here
46:13 - and in some portions of the video you
46:15 - will also see that i am
46:17 - printing out the outputs of some code on
46:19 - the serial monitor
46:20 - so the serial monitor in this simulator
46:23 - is this
46:24 - right so you will see whatever outputs
46:26 - i'm showing in the videos you can see
46:28 - them here
46:29 - okay so don't worry if you don't have an
46:31 - arduino at this point you can still
46:33 - follow along the video so before we move
46:36 - forward from this point
46:37 - having the knowledge of a few more
46:39 - things would be greatly beneficial
46:41 - things such as breadboard how to make
46:44 - connections in breadboard
46:45 - some safety instructions for the arduino
46:48 - and
46:48 - some basic terms like input output
46:51 - sensors analog
46:52 - digital bit and byte you may want to
46:55 - revisit this section as well
46:57 - if you find yourself forgetting about
46:58 - these concepts as we proceed
47:02 - all right so let's start with breadboard
47:05 - is this the first thought which came to
47:06 - your mind when you heard of breadboard
47:08 - well that's a perfectly genuine thought
47:12 - when i stepped in the field of
47:13 - electronics i myself had this thought
47:17 - but when i learned that the breadboard
47:19 - in electronics is a completely different
47:21 - thing
47:21 - i had a really big face pump moment
47:25 - let's discuss this in the comment
47:26 - section as to why it is called as
47:28 - breadboard
47:29 - or from where it got its name we will
47:31 - just talk
47:32 - about breadboard in terms of electronics
47:36 - breadboards are meant to make quick
47:38 - non-permanent connections between
47:40 - electronic components
47:42 - and they are covered with tiny socket
47:44 - holes which are
47:45 - connected in rows the breadboard
47:49 - itself is broken into four sections
47:51 - there are two inner sections full of
47:53 - short horizontal rows
47:54 - and two outer sections with long
47:56 - vertical rows
47:58 - if we remove the adhesive which is
47:59 - present on the back side of the
48:00 - breadboard we would see
48:02 - something like this a series of
48:05 - metal connections do you see that
48:08 - we'll discuss what this means in a few
48:11 - moments
48:12 - but before that i would like to show you
48:14 - the strip which is connected inside that
48:16 - it is a single strip which is taken out
48:19 - from that bright board and it would look
48:20 - like that
48:21 - so you see this entire metal piece
48:25 - so when we make connections on that
48:28 - you know it is internally connected
48:29 - automatically
48:32 - coming back to this if we consider
48:35 - this row corresponds to this
48:38 - all right so that means these points
48:42 - are connected among themselves
48:45 - automatically
48:47 - and like these rails are connected
48:50 - so these points are also connected from
48:53 - inside
48:54 - we'll discuss this in detail we'll also
48:56 - make circuits don't worry about that
48:59 - if you're wondering what kind of
49:01 - circuits which we can make on a
49:02 - breadboard
49:03 - i would like to tell you that you can
49:04 - also make your arduino uno
49:06 - on the breadboard and it would look like
49:08 - this now we will see
49:10 - how to use a breadboard we will also
49:12 - understand the connections
49:13 - in details all right
49:17 - so this is our breadboard okay can you
49:20 - see
49:21 - all these holes like this
49:24 - which are getting highlighted in blue
49:26 - right these are the holes
49:28 - which i was talking about in the
49:29 - previous video
49:31 - okay so i'll now show you how they are
49:32 - interconnected for example
49:35 - these points are interconnected the
49:37 - yellow ones all of these are
49:38 - interconnected
49:39 - within themselves right like these all
49:42 - these points
49:43 - are connected among themselves but
49:45 - please note
49:46 - that this point is not connected to this
49:48 - point internally
49:50 - this point is only connected to these
49:52 - points like can you see
49:54 - right like this all these points are
49:57 - interconnected
49:59 - all right so then we'll see these points
50:04 - these are the external points all of
50:07 - these points are interconnected
50:09 - like this right
50:12 - like this and like this in some
50:14 - breadboards there are connection break
50:16 - at this point so you will just see
50:20 - that the points are connected only till
50:23 - here
50:24 - and these points are connected till here
50:26 - but this point is not connected to this
50:28 - point
50:28 - in some breadboards but in most
50:30 - breadboards they are all connected
50:32 - like this can you see that okay
50:36 - so now i'll tell you if you want to
50:38 - connect
50:40 - some two points for example we'll take a
50:42 - wire
50:43 - and we'll join this so now
50:47 - these points are connected among
50:48 - themselves right
50:51 - no matter how many wires we join here
50:55 - these will still stay connected okay
51:00 - and what if i connect a wire here
51:03 - then all these points will get connected
51:05 - you see that
51:07 - right i think it is really interesting
51:09 - to see that how easy
51:11 - it makes for us to make connections on
51:13 - the breadboard
51:14 - right so now we'll see how to make a
51:16 - series connection
51:18 - right we'll take a resistance
51:21 - like this okay and we'll place it here
51:26 - okay now i will take another resistance
51:29 - and connect it here okay
51:32 - so now these resistances are in series
51:36 - now if i make want to make another
51:37 - resistance which i want to take in
51:39 - series
51:40 - i'll place them here
51:44 - all right now these three resistance are
51:46 - connected in series
51:48 - how for example these points were
51:51 - interconnected
51:52 - okay and so we connected our resistance
51:55 - here so that means they are in
51:57 - a continuous position now similarly
52:00 - here as well okay i would like to tell
52:04 - you that some people
52:05 - make a mistake and to make a series
52:07 - connection they would go like this
52:10 - they will place the resistance here
52:14 - instead of placing it here
52:17 - right this is a series connection but
52:20 - this is
52:21 - no connection at all because these
52:22 - points are not interconnected
52:24 - however if we join a wire like this
52:28 - okay so now these points are
52:29 - interconnected
52:31 - okay i hope i am making you myself clear
52:37 - now we will try to understand a parallel
52:38 - connection
52:40 - similarly we'll take resistance
52:43 - and we'll place it here now since
52:47 - in parallel connections all of the
52:49 - points are you know
52:50 - originating and ending at the same point
52:52 - and these points are interconnected
52:54 - so we'll take another resistance and
52:57 - place it here
52:58 - so these two resistance are in parallel
53:01 - now if you want to
53:02 - take a third resistance as well and
53:04 - we'll take it and place it here now
53:06 - these three resistances are
53:08 - in parallel okay now we want to make a
53:11 - connection
53:12 - in which there is a resistance in series
53:14 - and then there are two resistances in
53:16 - parallel
53:17 - we'll try to make that circuit
53:21 - this is one resistance okay and then
53:27 - if we make it like this
53:31 - like this
53:34 - okay and we take another resistance
53:39 - and we place it like this okay so what
53:42 - that is representing
53:43 - it is one resistance which is in series
53:46 - with this resistances which are in
53:49 - parallel among themselves
53:50 - and then there's another resistance
53:52 - which is in series with that
53:55 - okay okay it's all right if you don't
53:58 - understand what i'm trying to say right
53:59 - now
53:59 - we'll understand this with one more
54:01 - example
54:05 - so before i begin with my second example
54:07 - i would like to tell you
54:08 - a few more things like i told you
54:11 - in the previous video if we connect a
54:14 - wire like this
54:16 - the points become interconnected
54:19 - but if you take a resistance and connect
54:23 - it like this
54:25 - [Music]
54:27 - so these points are not connected to
54:29 - these points right because it is a
54:31 - resistance
54:33 - you see that in this case these points
54:36 - are interconnected
54:37 - but in the case of resistance these
54:39 - points are not interconnected
54:41 - now another point which i want you to
54:43 - notice every connected wire
54:45 - like this it won't make any sense
54:48 - as these points are already
54:50 - interconnected right
54:52 - so this wire will not make any
54:55 - difference
54:56 - so now another thing which i want you to
54:58 - notice
54:59 - if we take a resistance and if we place
55:02 - it like
55:03 - [Music]
55:04 - this
55:07 - like this then also
55:10 - it won't make any difference because as
55:12 - we all know the current always takes the
55:14 - least resistive path
55:16 - so connecting a resistance like this
55:17 - won't make any difference because the
55:19 - current will travel
55:20 - through the rails only this resistance
55:22 - will not add any value to the circuit
55:25 - okay but however if you connect a
55:28 - resistance like this
55:30 - then it would make some sense okay how
55:33 - it will make some sense we will see
55:35 - [Music]
55:36 - for example we can connect it like this
55:42 - and like this
55:47 - okay so this is a series connection now
55:49 - these two resistances are in series
55:53 - but yeah please note that these
55:55 - resistances
55:56 - [Music]
55:58 - are not in parallel
56:02 - [Music]
56:10 - but please note that these resistances
56:12 - are not in parallel
56:13 - because these points are not connected
56:16 - okay
56:16 - now we will begin with our second
56:18 - example in this example
56:20 - we will just connect an led with a push
56:22 - button and a battery
56:24 - okay so when we press the push button
56:27 - that led will
56:28 - blow so we will make a circuit on that
56:30 - so for that we'll take a push button
56:32 - circuit first of all
56:34 - okay this is a push button circuit i'll
56:36 - tell you about push button circuit
56:38 - that internally this terminal is
56:40 - connected to this terminal
56:41 - okay so automatically this rail will get
56:45 - connected to this rail
56:46 - okay like this
56:49 - and this terminal is connected to this
56:52 - terminal so these points will also get
56:56 - interconnected
57:01 - okay so when you press this button
57:04 - this terminal gets connected to this
57:06 - terminal
57:07 - okay so these points will get connected
57:09 - when you press
57:10 - the switch all right then we will take a
57:14 - battery
57:17 - let's take this battery this is a simple
57:20 - battery 3.7 volts
57:23 - let's place it here this has a positive
57:25 - terminal and a negative terminal
57:27 - we'll try to connect it on a rail
57:33 - let's make this wire as red color
57:35 - [Music]
57:37 - and the black wire as
57:46 - the black one okay in general
57:48 - electronics
57:49 - this is also a convention that the red
57:52 - wire represents positive terminal and
57:53 - the
57:54 - black wire represents the negative
57:55 - terminal okay so now
57:57 - these and this entire rail okay so now
58:00 - this entire rail
58:02 - is positive okay as we have connected
58:05 - the positive terminal of the battery
58:07 - here just see that
58:11 - and this terminal is negative this
58:14 - entire rail is negative
58:16 - okay so we will start by placing a
58:18 - resistor
58:20 - as we should always connect our
58:21 - resistance in series
58:23 - when using a led
58:27 - replace it like this okay
58:30 - so that means this point and this point
58:33 - are interconnected so this resistance is
58:35 - in series with this switch
58:37 - and then we'll take one led
58:41 - this is the led okay
58:45 - as we all know there is a positive end
58:47 - and the negative end
58:49 - of the led so this is the positive end
58:53 - and this is the negative end we have
58:55 - connected the negative end to the
58:56 - resistance
58:58 - okay to make the led glow we have to
59:00 - always connect the positive end
59:02 - of the led to the positive end of the
59:04 - battery
59:06 - okay so first of all what we'll do is
59:08 - we'll take a positive wire
59:09 - from here right as we know all know this
59:12 - entire rail is positive
59:13 - so from any point on this rail we can
59:15 - take
59:16 - positive line so we'll take a positive
59:18 - line from here
59:19 - and connect it here
59:23 - this is a general wire so we'll make it
59:25 - blue all right
59:27 - and then what we want is we need to
59:31 - complete the circuit like this
59:32 - we'll take a black wire from here and
59:35 - connect it here
59:37 - okay so this is our circuit
59:40 - completed whenever we press this switch
59:46 - this circuit will get completed the
59:48 - positive
59:49 - wire will go from here the current will
59:51 - flow from positive terminal like this
59:54 - it will flow from resistance and it will
59:55 - go from circuit and then
59:58 - to the negative end and back to the
60:00 - battery
60:01 - but whenever we release the switch the
60:03 - circuit will break and the led will stop
60:05 - glowing
60:06 - this was the very basic example of a led
60:08 - in a
60:09 - breadboard in this video we will discuss
60:12 - about
60:13 - some of the safety instructions which we
60:14 - need to follow while using our arduino
60:16 - board
60:16 - the first thing which you need to keep
60:18 - in your mind is you never have to
60:19 - connect
60:20 - any voltage of over 5 volts on any i o
60:23 - pin
60:23 - okay any i o pin means any input output
60:26 - pin
60:27 - be it the digital pins or the analog
60:29 - pins you just don't have to connect any
60:30 - voltage over 5 volts on those pins you
60:33 - can only use
60:34 - any voltage over 5 volts to power the
60:37 - arduino
60:37 - through v in pin and you cannot connect
60:40 - any pin
60:40 - to a voltage over 5 volts okay
60:44 - next important thing you need to notice
60:46 - you never have to connect
60:48 - a 5 volt pin to a ground pin this way
60:51 - you will short it down
60:52 - an arduino will turn off the next point
60:54 - is you have to take care of the polarity
60:57 - polarity means you cannot connect
60:59 - positive and negative terminals in
61:01 - opposite ways what i mean is you cannot
61:02 - connect a positive pin
61:04 - to a negative pin of some other
61:05 - component and vice versa if there is no
61:08 - polarity management circuit on the
61:09 - device which you are using it will
61:10 - simply damage the device one more point
61:13 - is you have to be careful while using
61:15 - external power in this course for all
61:17 - the project the usb power
61:19 - would be more than enough but still if
61:21 - you need any external power
61:22 - you can use it through dc jack or vn
61:25 - pins
61:26 - and in that case also please make sure
61:27 - you don't connect any voltage above 12
61:29 - volts
61:30 - although arduino can tolerate up to 20
61:32 - volts but still
61:33 - it i advise you that don't use above 12
61:35 - volts otherwise you will see
61:37 - unnecessary heating on the arduino board
61:39 - okay
61:40 - so these were the main safety
61:42 - instructions which you need to follow
61:43 - or you may damage your arduino and while
61:45 - doing our experiments
61:47 - i will also tell you about more safety
61:48 - instructions if they are required
61:50 - okay so now i will see you in the next
61:52 - video in this video
61:54 - i will talk about input and output and
61:56 - how to understand it with respect to
61:58 - arduino you may want to revisit this
62:00 - video when we study pin mode function
62:02 - it has been taught in arduino
62:04 - programming section so generally
62:05 - speaking
62:06 - input is something which goes inside
62:10 - an output is something which comes
62:11 - outside
62:13 - speaking technically input is some data
62:16 - or signal which goes into the system
62:18 - an output is some process information or
62:20 - signal which comes out of that system
62:22 - the system may be anything like in our
62:26 - case the system would mostly be arduino
62:28 - the sensors would be giving the data to
62:30 - the arduino an arduino would act on that
62:32 - data
62:33 - and give an output based on how you have
62:35 - programmed it
62:36 - please bear in mind that input and
62:38 - output is never absolute
62:41 - it is always relative to something as
62:43 - you may have been told in junior classes
62:45 - that input and output devices are fixed
62:47 - yes they are fixed but with the
62:49 - reference to the computer
62:52 - like a mouse is an input device to the
62:54 - computer but if we look in the mouse
62:56 - itself
62:57 - there would be several more devices like
62:59 - an optical reader
63:00 - which takes the movement of the mouse as
63:02 - input and gives its output
63:04 - to the chip inside which processes it
63:07 - and gives the cursor position as output
63:10 - similarly we have been told that a
63:12 - printer is an output device
63:14 - yes it is certainly an output device but
63:16 - with reference to the computer
63:18 - now if we see in a printer as well there
63:19 - is a main controller board which takes
63:21 - the input signal which is coming out
63:22 - from the computer and then that
63:25 - controller takes the decision
63:26 - that how to move the motors which colors
63:29 - to select
63:31 - in order to print the page i hope i am
63:33 - making some sense to you
63:36 - now if we see in reference to our course
63:39 - there are lot many things
63:40 - and sensors which act as input devices
63:42 - for the arduino
63:43 - like these sensors which you can see on
63:45 - the screen but wait what are sensors
63:48 - like humans have five senses which help
63:50 - us get aware of our surroundings and act
63:52 - accordingly
63:54 - similarly in electronics sensors help
63:56 - the controller to take decisions
63:58 - and give output based on the
64:00 - environmental data which is given by
64:02 - them
64:03 - sensors tell something to the controller
64:05 - by changing its voltage
64:06 - a change in voltage is read by the
64:08 - controller like we see in this image
64:11 - there is an autonomous car which has n
64:13 - number of sensors placed on it which are
64:14 - telling it about the other cars
64:16 - battery level fuel level humidity level
64:19 - etc
64:21 - now i will briefly discuss about these
64:23 - sensors which you see on the screen
64:24 - we will also discuss these sensors in
64:26 - detail when we use these particular
64:28 - sensors first of all we see is a
64:30 - rotatory potentiometer
64:32 - this device would change the resistance
64:34 - it offers if we rotate the knob
64:36 - clockwise or anti-clockwise
64:39 - then we have a momentary push button
64:40 - switch when we press the switch it will
64:42 - close the circuit when we
64:44 - release the switch it will open the
64:45 - circuit then we have a force sensing
64:47 - resistor
64:48 - this resistor changes its resistance
64:50 - based on the force applied on it
64:54 - then we have a light dependent resistor
64:56 - this resistance change its resistance
64:58 - based on the light falling on it then we
65:02 - have a triple axis accelerometer
65:04 - usually we see accelerometers in phones
65:07 - and gaming devices
65:08 - okay the basic purpose of the
65:10 - accelerometer is to get the orientation
65:12 - of the object
65:13 - on which it is placed then we have a
65:16 - joystick
65:17 - joystick is nothing but a basic input
65:19 - controller you must have seen it on
65:21 - on the gaming consoles then we have a
65:24 - microphone or a sound sensor
65:26 - it will capture the environmental sound
65:28 - and noises
65:29 - we may want to record them or take some
65:31 - decisions based on that
65:34 - then we have a touch sensor it will just
65:36 - see if someone is touching it or not
65:38 - then we have a rotary encoder
65:40 - this sensor senses the rotation
65:42 - basically for example
65:44 - you can attach this rotary encoder to a
65:45 - motor shaft and we can see the
65:47 - rotational speed of that motor
65:49 - how many rotations it have taken or you
65:51 - must have seen a rotary encoder in
65:53 - our volume knobs in your music systems
65:55 - and we have an ultrasonic distance
65:57 - sensor
65:57 - it uses ultrasonic waves like in a sonar
66:00 - to tell the distance between
66:01 - the sensor and the object in front of it
66:04 - then we have a temperature sensor as the
66:06 - name suggests it will tell the
66:07 - temperature around it
66:08 - we have a temperature and humidity
66:10 - sensor it tells humidity as well along
66:12 - with the temperature
66:13 - then we have an infrared sensor this is
66:16 - basically an obstacle detection sensor
66:19 - it can tell if an object is there in
66:20 - front of it or not
66:23 - then we also have output devices
66:26 - output devices are those devices that
66:28 - can convert the output
66:30 - given by the arduino to some human
66:32 - readable form
66:33 - right for example i'll tell you there is
66:35 - an led which is known as light emitting
66:37 - diode it will basically
66:39 - just glow if any pin on arduino is set
66:42 - to high
66:43 - and we have an rgb led this is a special
66:46 - led
66:46 - it has all the colors uh red green and
66:48 - blue leds and it can form
66:50 - n number of colors and we have a buzzer
66:53 - it will make some sound
66:54 - if high voltage is given to it it will
66:56 - make some sound then we have a
66:57 - loudspeaker
66:58 - like this general speaker which you have
67:00 - seen in your mobiles and your laptops
67:02 - which you know
67:03 - you play music through and we have an
67:06 - oled display
67:08 - it is a full-fledged display you can
67:10 - just click graphics on it we have lcd
67:12 - display this is liquid crystal display
67:13 - you can
67:14 - display characters on it okay for
67:16 - example some value of a sensor or
67:18 - someone's name
67:19 - etc the seven segment display consists
67:21 - of seven leds
67:22 - arranged in a rectangular fashion as
67:24 - shown
67:25 - it is used to display numbers on it
67:28 - for example if we want to display seven
67:30 - so we will highlight this one this one
67:32 - and this one
67:33 - so we will see that seven is appearing
67:35 - if we want to show zero
67:37 - then we will highlight these ones
67:40 - okay and if you want to display eight we
67:42 - will highlight all of them and it will
67:44 - look like it is coming on we have a dot
67:46 - matrix display dot matrix display is an
67:48 - array of multiple leds okay we can show
67:52 - even characters on it
67:53 - you must have seen a dot matrix display
67:55 - in delhi mid to display
67:56 - or even you know scrolling displays you
67:58 - must have seen in front of some shops
68:01 - which display the shop's name so that is
68:04 - a dot matrix display then we have a dc
68:06 - motor it basically
68:08 - moves clockwise or anti-clockwise if it
68:10 - is given some voltage across it then we
68:12 - have servo motor so
68:13 - this is a special kind of motor we can
68:15 - stop it at specific angles then we have
68:17 - a stepper motor a stepper motor is just
68:19 - like a dc motor
68:21 - but you know the entire rotation is
68:23 - divided into equal steps
68:25 - so like servo motor we can also stop it
68:27 - at specific angles and
68:29 - even lift heavier loads we can drive
68:30 - heavier loads using a stepper motor so
68:32 - to conclude this video i would like to
68:34 - say
68:34 - since we know about input and output
68:36 - properly now we can easily understand
68:39 - how arduino interacts with the
68:40 - environment and we can make some
68:42 - meaningful projects after knowing this
68:44 - see you in the next video in this video
68:47 - we will talk about analog and digital so
68:49 - to begin with
68:50 - i would like to tell you that our world
68:52 - is full of analog information
68:54 - like the colors we see fragrances we
68:56 - smell flavors we taste
68:57 - sounds we hear temperature we feel all
69:00 - these
69:01 - have just endless number of values there
69:03 - can be millions of colors
69:04 - smells flavors sounds etc this was in a
69:07 - very general sense
69:09 - now if we see in the terms of
69:10 - electronics something which is analog
69:12 - can have infinite number of values let's
69:15 - say your wall clock
69:17 - it can show endless number of time
69:18 - intervals though
69:20 - they are not marked on it but yet it
69:22 - holds the capability
69:23 - to tell you even smaller fractions of
69:25 - time while digital is something
69:27 - with discrete or limited number of
69:29 - values like a digital clock
69:32 - that clock can show you limited number
69:34 - of digits let's say it's 2 pm
69:36 - or 10 minutes past 2 pm depending on the
69:39 - precision of that clock
69:40 - it may still show you seconds but it is
69:42 - still limited to
69:43 - some values only so before we move
69:45 - further we also need to understand one
69:47 - more term
69:48 - called as signal signals are used to
69:50 - convey some information to someone
69:52 - like these road signs are passing on
69:54 - some information to us
69:56 - like that we need to stop or we cannot
69:57 - park here etc
69:59 - similarly when we speak we generate a
70:01 - signal and that signal contains the
70:03 - information which we want to pass on to
70:05 - the listener
70:06 - like i'm speaking right now i'm
70:07 - generating an audio signal which you can
70:09 - see on this screen
70:10 - this is the audio signal which i have
70:12 - generated with my
70:13 - voice okay
70:18 - so this signal passes through my mouth
70:20 - through air and to your ear
70:22 - and you make some sense out of it okay
70:24 - this audio signal is analog in nature
70:27 - because there are infinite number of
70:28 - values which are changing
70:30 - okay in electronics signals are some
70:33 - time varying quantities which convey
70:35 - some sort of information
70:37 - usually that time varying quantity is
70:39 - voltage
70:40 - that means with time the voltage changes
70:44 - okay or sometimes it is also current
70:47 - but usually it is voltage then those
70:49 - time varying signals are passed between
70:51 - the devices in order to send and receive
70:53 - information
70:53 - which might be video audio or some sort
70:56 - of encoded data
70:57 - usually signals are transmitted through
70:59 - wires but they can also be passed
71:02 - through
71:02 - air wirelessly okay so there is an
71:04 - entire field of study
71:06 - which is based just on signals like
71:09 - digital signal processing
71:10 - signals and systems there are some
71:12 - entire subjects based on signals only
71:15 - okay but for the scope of this course we
71:17 - will just tell you the required
71:18 - information
71:19 - so now there are two types of signals
71:22 - one is analog signal and one is
71:23 - digital signal like we just saw that our
71:26 - sound is a type of analog signal
71:28 - similarly there can be other analog
71:30 - signals as well
71:32 - typically an analog signal would look
71:34 - like this that means we have plotted
71:36 - time on the x-axis and voltage on the
71:38 - y-axis so with time
71:40 - the voltage is increasing then
71:41 - decreasing then going into negative part
71:43 - then increasing this is an analog signal
71:46 - it is not necessary that it stays
71:48 - this smooth it can be little messy as
71:51 - well
71:51 - like this this is also an analog signal
71:54 - okay and then there is a digital signal
71:57 - in digital signals
71:58 - there are only two discrete values
72:00 - either it is on or either it is
72:02 - off where 5 volts represents on and 0
72:05 - volts represent off so you can see
72:06 - with time here it is on it is off on off
72:09 - on
72:10 - off on and off right now the sensors
72:14 - and the sensors which we use in our
72:15 - course will either give
72:17 - analog signal or either digital signal
72:20 - and we have to use arduino to read
72:22 - those signals okay we will see an
72:24 - example
72:25 - let's say we have a gaming console here
72:27 - this is the joystick
72:28 - this is a device which would give some
72:30 - analog signal
72:32 - and these are the buttons and these
72:34 - devices will give some digital
72:35 - information so this game machine can be
72:37 - programmed to read this
72:39 - state of the joystick for example we can
72:41 - make a character move
72:42 - forward when the joystick is moved
72:45 - forward we can also control the moving
72:46 - speed of that character for example
72:49 - if we make the joystick move a little
72:50 - forward then it will move slow
72:52 - and if we move it a little more ahead
72:54 - then it will move faster
72:56 - but this cannot be the case with the
72:58 - digital button we can just press the
73:00 - switch
73:00 - and tell the character to move forward
73:01 - we cannot decide the speed we can only
73:03 - set
73:04 - one speed there or we can program it to
73:06 - move forward
73:07 - fast based on some time okay but we
73:09 - cannot input
73:10 - the speed through buttons right so this
73:12 - joystick is sending some
73:14 - analog signal into the computer or the
73:16 - controller which is placed inside this
73:18 - gaming machine and these buttons
73:19 - are sending some digital information
73:21 - like either they are pressed or not
73:24 - they are on or off okay but this is a
73:26 - digital signal
73:27 - i'll give you one more example we have
73:30 - potentiometer here
73:32 - and we can move it as a knob
73:35 - and we have infinite number of values
73:36 - here we have a switch which is either on
73:39 - or off
73:40 - this represents analog and this
73:42 - represents digital
73:43 - so whenever we use analog sensor or
73:45 - component we will use
73:47 - analog pins of the arduino and we use
73:49 - digital pins
73:50 - for digital sensors or components okay i
73:53 - have given more insights on this topic
73:55 - in analog read and digital read video in
73:56 - programming section once you reach there
73:58 - and watch those videos as well
74:00 - it will be crystal clear to you and if
74:01 - not you can just comment down below or
74:03 - send us a message
74:04 - in this video we will talk about bit and
74:06 - buy so basically what is
74:08 - bit bit is the smallest storage or
74:10 - memory size which can store a value of
74:12 - either zero
74:13 - or either one this box represents a bit
74:16 - here
74:17 - okay similarly if eight bits are
74:19 - combined then it forms
74:20 - a byte okay so we can say eight bits is
74:23 - equal to
74:24 - one byte so one byte can store zero
74:27 - as the smallest number why because in
74:30 - that case
74:31 - all the eight boxes or all the eight
74:34 - bits
74:34 - are holding zero inside it as i told you
74:37 - it can either store zero
74:38 - or one okay so each box
74:42 - has a multiplier and we take the value
74:45 - from this box
74:46 - and we multiply it with this box okay
74:49 - and calculate the value here and in the
74:52 - end we take sum of
74:53 - all the values so here what will happen
74:56 - 0 multiplied by 2 to the power
74:58 - 0 2 to the power 0 is 1 0 into 0 is 0
75:01 - 0 into this is 0 0 into anything is 0
75:04 - similarly in all the boxes
75:06 - we'll get 0 so hence the smallest value
75:08 - will be
75:09 - 0 and when will be the maximum value
75:12 - if all the boxes are 1 right so here we
75:16 - will get
75:16 - 1 into 2 to the power 0 that is 1
75:20 - and 2 to the power 1 is 2 here we'll get
75:22 - 2
75:23 - here we will get 4 here we will get 8
75:25 - here it will be
75:26 - 16 here it will be 32 64 and 128
75:30 - now if you take a sum of all these value
75:32 - you can calculate it on your own we will
75:33 - get
75:34 - 255. now in case if we want to store a
75:36 - value greater than 255
75:38 - so now in that case we will have to take
75:40 - one more bit
75:42 - aside this so it will become 9 bit
75:45 - so the 9 bits can store 511 values
75:49 - and what if we have to store a bigger
75:51 - number than that then we will add
75:52 - another bit here as well and it will
75:54 - become 10 bits so 10 bits will be able
75:57 - to store
75:57 - a value till 1 0 2 3. so now what you
76:00 - have to keep in mind is
76:01 - you will be needing this information
76:02 - whenever i say 8 bits 10 bits 12 bits in
76:05 - the course
76:06 - so we can only store values up to the
76:07 - upper limit of that space
76:09 - okay so this information will be
76:11 - sufficient for you to carry on the
76:12 - course
76:13 - but yeah if you want to know more about
76:15 - binary math you can just google
76:17 - binary maths and you will get really
76:19 - good links from wikipedia and other
76:20 - websites
76:21 - and you can just read them if you face
76:23 - any problem you can always comment down
76:24 - below
76:25 - and we will get back to you in this
76:27 - section i would cover all the essential
76:29 - programming concepts that you would need
76:30 - to get working and make projects with
76:32 - arduino i would like to tell you that
76:34 - programming is a game of practice
76:36 - the more you practice the more you get
76:38 - better at that so i would cover all the
76:40 - essential topics to get you started and
76:42 - i will also tell you about concepts as
76:43 - we progress ahead
76:45 - so let's get started before we know
76:46 - about arduino programming we need to
76:48 - understand what programming is
76:50 - programming is something which we do to
76:51 - tell a computer or a controller what to
76:53 - do
76:54 - computers don't understand the language
76:56 - which humans use to communicate with
76:58 - each other
76:58 - computers only understand the zeros and
77:01 - ones so by programming we tell it
77:03 - what to do in our language and a
77:05 - compiler or an interpreter converts that
77:07 - into a language which computer
77:08 - understands
77:09 - and the computer finally acts on it so
77:12 - there are many programming languages
77:13 - over there
77:14 - like c c plus plus c sharp python java
77:17 - etc all of them have their own benefits
77:20 - and drawback the language which we use
77:21 - to program the arduino is a mixture of c
77:23 - and c
77:24 - plus plus which arduino makers call as
77:26 - wiring
77:27 - the best part of this arduino language
77:28 - is that it is uniform across all
77:30 - platforms
77:31 - that means it won't matter if you use
77:33 - windows mac or linux the output of the
77:35 - code would be the same
77:37 - so in the next video we will start to
77:39 - look at arduino programming in a bit
77:40 - more detail
77:41 - so let's start by opening up our arduino
77:43 - ide
77:45 - once it opens you would see this window
77:48 - all right and we see void setup and void
77:52 - loop is written over here
77:53 - let's discuss whatever we see on the
77:55 - screen the first line which we see is
77:57 - white setup right it says void
78:01 - then setup then a pair of brackets
78:04 - then a curly bracket then we have two
78:06 - forward slashes then it says put your
78:08 - setup code here to run once
78:10 - and then we have another curly bracket
78:12 - so what we have done here is
78:14 - we have declared a mandatory function
78:16 - known as setup
78:17 - and this is how you declare functions in
78:19 - arduino then we have a curly bracket in
78:21 - most programming languages
78:22 - these curly brackets indicate a block of
78:24 - code this left curly bracket means the
78:26 - start of the block
78:28 - and this right bracket shows the end of
78:30 - the block
78:31 - whatever code which goes inside this
78:32 - block belongs to this function
78:34 - the arduino id would help you recognize
78:36 - the blocks of codes
78:37 - when you click on these brackets for
78:39 - example when you click here
78:41 - it would highlight this bracket
78:42 - automatically that means
78:44 - this is the start of your function and
78:45 - this is the end of your function
78:47 - whenever you click here then it would
78:48 - highlight the ending can you see that
78:51 - all right then we see these two forward
78:54 - slashes
78:54 - these forward slashes mean a single line
78:56 - command whenever we write a comment
78:58 - compiler entirely ignores whatever is
79:00 - written after that
79:01 - so coming back to void setup this
79:04 - mandatory function contains
79:05 - all the lines of code which we want
79:07 - arduino to run once when it is turned on
79:09 - or when we press reset button
79:11 - we'll talk more on this in coming
79:12 - lectures similarly there is void loop
79:14 - in this section we write all the code
79:16 - which we want arduino to run
79:18 - all the time repeatedly that means
79:20 - whatever is written in this section
79:22 - would run until the arduino is switched
79:24 - off the void loop
79:25 - runs after void setup so in the next
79:27 - lecture we would see the blink led
79:29 - example
79:30 - which we used to test our arduino in a
79:32 - little more detail we will understand
79:34 - each part of that code
79:35 - so see you in the next lecture so till
79:38 - now we have understood that the two
79:39 - functions void setup and void loop
79:42 - are the bare minimum requirement to run
79:44 - our code successfully
79:45 - why are they mandatory i will just show
79:46 - you in a moment i am removing these
79:48 - functions
79:50 - and i'm hitting compile the compiler has
79:52 - passed us with errors
79:55 - just read them undefined reference to
79:56 - set up undefined reference to loop
79:59 - that means it is expecting that we must
80:00 - define these functions now i will
80:02 - bring back these functions now i'll hit
80:05 - compile once again
80:06 - now the compiler has successfully
80:08 - compiled the code so with that we can
80:10 - say arduino ids compiler
80:12 - expects these two functions like some
80:13 - other programming languages expect the
80:15 - main function
80:16 - without that we won't be able to run the
80:18 - code we would get an error as you saw so
80:20 - now we will see some more concepts in
80:22 - the blink led experiment
80:24 - so for that we'll go to files
80:27 - examples basics and then blink
80:32 - all right so this is our blink example
80:34 - this is that same code which you used
80:36 - to test your arduino so we see a huge
80:38 - chunk of lines here
80:39 - this is a block of multi-line comments
80:42 - like we saw a single line comment in the
80:43 - previous video we start a multi-line
80:45 - comment by a forward slash followed by a
80:47 - star
80:48 - and then we write whatever we want and
80:50 - then we end it
80:51 - by a star followed by a forward slash so
80:53 - anything which is written in between is
80:54 - ignored by the compiler you may ask then
80:56 - why do we write comment the answer is
80:58 - the comments help us to document the
81:00 - code and they also help the other
81:02 - readers of the code to understand what
81:04 - is done by the author of the code
81:05 - comments also help the author himself
81:07 - to recall what he did when he sees his
81:09 - code at the latest date
81:11 - since comments are totally ignored by
81:12 - the compiler not writing them won't make
81:14 - any difference
81:15 - for example if i remove this comment
81:18 - and compile the code it will still
81:20 - compile and with the comments also it
81:23 - will run just like that
81:24 - since these comments don't serve any
81:26 - technical purpose in the code
81:27 - most developers develop a habit of not
81:30 - writing that comment which is certainly
81:32 - not a good practice it is always advised
81:34 - to write comments for the reasons which
81:36 - i have already told so now
81:37 - i will tell you about the white spaces
81:39 - and case sensitivity the spaces which
81:41 - you see here
81:42 - here here etc like here
81:46 - here won't make any difference as the
81:48 - compiler would ignore them like the
81:50 - comments now what i mean to say by this
81:52 - is that we can add as many spaces
81:56 - as we want wherever we want
81:59 - and the compiler won't say anything to
82:02 - us
82:03 - it will still successfully compile the
82:05 - code
82:07 - like this all right but what we can't do
82:10 - is we can't add spaces in between
82:12 - like this otherwise you will get an
82:14 - error if you compile now
82:16 - just see that how many errors we have
82:18 - got so now you will ask what's the
82:19 - purpose of white spaces white spaces
82:21 - basically help us
82:22 - indent the code it makes it easier for
82:25 - us to identify the blocks of code
82:27 - it also makes the code look beautiful
82:29 - for example
82:31 - if i write something like this
82:36 - what do you think this code looks better
82:39 - or this code looks better obviously this
82:41 - one
82:43 - all right so proper indentation is
82:45 - important
82:46 - now coming to case sensitivity arduino
82:48 - language is case sensitive what i mean
82:50 - by that is
82:51 - the small character would come as small
82:53 - and the capital character would come as
82:54 - capital
82:55 - you can't interchange that for example
82:57 - this void cannot be written as
83:00 - this it will give an error
83:03 - white does not name a type right in this
83:06 - pin mode you see we cannot write
83:08 - pin mode as the spin mode
83:12 - right then also it will give an error
83:17 - so same goes for everything what you see
83:19 - here like this high
83:21 - cannot be written as high
83:26 - or anything for that matter you have to
83:27 - write it exactly like
83:30 - this don't worry if you find it too
83:34 - difficult to remember you will get a
83:35 - hang of it very soon remember what i
83:37 - told about programming
83:38 - it is the game of practice it is very
83:42 - common to mess up so the arduino ide has
83:44 - built-in provision to help us with that
83:46 - what i mean to say by that is if you
83:48 - ever mess up the casing by mistake
83:50 - you would see that this is no more
83:52 - coming in orange color
83:54 - right now it is coming back in orange
83:56 - color
83:57 - same goes here so if you ever see that
84:00 - these critical words are not showing up
84:02 - in color form you can guess that you
84:03 - have made a mistake now let's see what
84:05 - is done here in void setup
84:07 - it says pin mode led built-in
84:11 - output this pin mode is a built-in
84:13 - function which configures the specified
84:15 - pin to behave either as an input or an
84:17 - output
84:18 - this input and output is in reference to
84:20 - the arduino if something is going into
84:22 - the arduino through that pin
84:23 - we would configure it as input or if
84:26 - something is coming out of arduino
84:27 - through that pin
84:28 - it will be output in our case the
84:30 - built-in led would need some sort of
84:32 - output from arduino
84:33 - so we will use output so if we see this
84:36 - line
84:36 - in a little more detail we have written
84:39 - pin mode then there is an open bracket
84:41 - then we have written led built in then
84:43 - there is a comma then there is output
84:45 - then there is bracket close and there is
84:47 - a semicolon
84:49 - i won't be surprised if you have not
84:51 - noticed this semicolon till now
84:53 - i won't be surprised because it is very
84:55 - very common to forget this semicolon
84:57 - this semicolon
84:58 - marks the end of a statement that means
85:00 - we are telling the compiler we are done
85:02 - with the statement
85:03 - we have finished one line if we remove
85:05 - the semicolon
85:06 - we would get an error you see expected
85:10 - semicolon before this
85:12 - so back to that what this line means is
85:15 - we have called
85:16 - a built-in function called pin mode
85:18 - which has two arguments
85:20 - the first argument is the pin number
85:22 - which we want to configure
85:24 - and the second argument tells the
85:26 - configuration which we wanted to act as
85:28 - this built-in led is connected to pin
85:30 - number 13 of arduino so we are telling
85:32 - arduino to set the configuration of pin
85:34 - number 13
85:35 - as output okay this is what this line is
85:37 - doing
85:39 - also note that this line is written
85:41 - inside the block of void setup
85:43 - can you see that right one more thing
85:46 - which i would like you to note is
85:48 - this led built in the compiler is
85:50 - automatically replacing this led built
85:52 - in
85:52 - with pin number 13. also note that the
85:54 - compiler is not changing the led
85:56 - built-in to 13
85:57 - magically it has been fed somewhere else
86:00 - in the arduino libraries
86:01 - we will talk about libraries in coming
86:03 - lectures but what i want to say right
86:05 - now is
86:06 - this is equivalent to this for those
86:09 - people who felt a little uncomfortable
86:11 - when i said
86:12 - we are calling a function here which has
86:14 - two arguments
86:15 - i just want all of those people to know
86:17 - that we will talk about functions
86:19 - calling functions arguments of the
86:21 - functions in a lecture
86:22 - in which we talk about creating custom
86:25 - functions then you will be able to
86:26 - relate what i said here exactly
86:28 - but for now just understand we use pin
86:31 - mode function
86:32 - like this we will have to use it
86:34 - whenever we have to configure a pin
86:36 - and using this inside setup means that
86:38 - we want this function to run
86:40 - once whenever we turn on the arduino or
86:43 - reset our arduino
86:44 - all right so now we will see what we
86:46 - have done in void loop
86:48 - the first thing which we see is digital
86:50 - right when it is led built in
86:52 - then we have high okay so the digital
86:56 - right
86:56 - is an inbuilt function which is used to
86:58 - manipulate the digital pins
87:00 - and we can also manipulate analog pins
87:02 - using digital write if the pin is
87:03 - declared as output
87:04 - in setup using pin mode digital write
87:07 - will write a value of 5 volt if we use
87:09 - high and to 0 if we use low but do make
87:13 - sure that you have declared the pin as
87:14 - output
87:15 - otherwise you may see unexpected results
87:17 - then after this line we have
87:18 - delay the value of 1000 in that as the
87:21 - name suggests
87:22 - the function would pause the code here
87:24 - for a specified amount of time
87:26 - in our case it is 1000 milliseconds
87:28 - which is one second
87:29 - whenever we use delay the entire state
87:31 - of arduino is preserved and nothing
87:33 - happens during that time
87:34 - then we have another digital write which
87:36 - would write low
87:38 - to the led built in that means the led
87:40 - will turn off here the led will turn on
87:42 - here it will turn off and this another
87:44 - delay will keep it off
87:45 - for one second and this entire process
87:47 - would keep on repeating unless we turn
87:49 - off the arduino as this is inside
87:51 - white loop so if we change the value of
87:52 - this delay to 500
87:55 - we would see the change in blinking
87:57 - pattern i would like you to try changing
87:59 - the value to your desired value
88:01 - and comment down below if you were able
88:02 - to see the change now i would like to
88:04 - tell you
88:05 - that you can also store this delay value
88:07 - into an imaginary container known as a
88:10 - variable we can do that by
88:11 - writing int my delay
88:14 - value is equal to 100.
88:18 - you can also choose some other name over
88:20 - here there are some rules to deciding
88:22 - the variable name and you would
88:23 - gradually get to know those rules
88:25 - as we progress along the course so now
88:28 - we can take this value
88:29 - and replace it here
88:33 - so now while the arduino is looping on
88:35 - this code it will take
88:36 - my delay as 100 instead of some other
88:39 - value what benefit do we have to use
88:41 - this
88:42 - we can change our value to any other
88:45 - value
88:46 - like this or this
88:50 - if we need to change the value instead
88:52 - of changing here
88:54 - twice and making our code error prone
88:58 - we can just change the value here
89:01 - it will save our time and also make our
89:03 - code less prone to errors
89:05 - we can also make our own variable to
89:07 - define led pin
89:09 - and we would do that by hint
89:12 - led pin is equal to 13
89:16 - and now we will take this led pin and we
89:18 - will replace it here
89:25 - right so this code will work exactly
89:27 - like the earlier code and it would work
89:29 - flawlessly
89:30 - the benefit of using our own pin is that
89:32 - we can change the pin which we want to
89:34 - use
89:34 - later for example now i have decided to
89:37 - use pin number
89:38 - two instead of pin number 30. so instead
89:39 - of changing the pin number
89:41 - from 13 to 2 everywhere i can just
89:43 - change it to 2 here
89:45 - so now automatically the compiler will
89:47 - pick the value of 2
89:49 - of led pin and replace them here now
89:51 - some of you must have noticed the way
89:52 - how i am writing led pin
89:54 - like small ln and capital p what's the
89:56 - reason behind that
89:58 - now since we cannot keep spaces between
90:01 - our variable names
90:02 - and led and pin are two different names
90:04 - so the compiler will throw an error
90:06 - and some people came up with the
90:07 - solution that to name variables like
90:10 - this
90:10 - we can keep the first character of the
90:12 - second word capital in order to
90:14 - differentiate
90:15 - so now our eyes are able to
90:16 - differentiate between led and pin
90:18 - properly
90:19 - and this technique is known as camel
90:20 - casing if i have to use more than two
90:22 - words
90:23 - what i can do is like this
90:29 - so now my eyes are able to read my led
90:31 - pin as three different words
90:33 - instead of one word but for the compiler
90:35 - it is just the one word
90:36 - and now some of you must be wondering
90:38 - what is int why we have declared it here
90:41 - right so in the next video we'll talk
90:43 - about this int
90:44 - and the other data types variables and
90:47 - more about
90:48 - variable scope see you in the next video
90:52 - so now we will discuss about variables
90:54 - what exactly are variables
90:56 - variables are nothing but they are kind
90:58 - of a virtual containers
90:59 - which is used by a compiler and we store
91:01 - some values in those containers
91:03 - there are different kinds of data which
91:04 - we can hold in different kinds of
91:06 - container
91:06 - for example at your home you store sugar
91:09 - in some kind of specific container you
91:11 - store
91:11 - tea in the tea container oil in the oil
91:13 - container similarly in programming as
91:15 - well
91:16 - we have some sort of containers and
91:18 - those can store some sort of specific
91:20 - data
91:21 - the variables are available in different
91:23 - sizes and we will be talking about just
91:25 - the default variables which are used in
91:27 - the arduino programming
91:28 - the thing to note here is the bigger the
91:30 - container the bigger the value it can
91:31 - store
91:32 - the first kind of data type which we
91:33 - will see is int if you can recall
91:36 - we used in in the previous video when we
91:38 - declared our led pins and our own
91:40 - delay values right so int is basically a
91:43 - container which can hold
91:44 - integer values and i hope you're aware
91:46 - what integers are
91:47 - if not i will just quickly tell you that
91:49 - the number line is there the whole
91:50 - numbers from
91:51 - negative infinity to positive infinity
91:54 - are all
91:54 - integers which you can see here in this
91:57 - video like minus 4 minus 3 minus 2
92:00 - 0 1 2 3 4. the numbers greater than 0
92:03 - are positive integers and
92:04 - the numbers less than 0 are negative
92:06 - integers the default integer which we
92:08 - use in arduino programming
92:10 - has a range of minus 32 768
92:14 - to positive 32 767 right what this means
92:18 - is the size of integer
92:20 - can hold these many values if you try to
92:22 - store value
92:23 - beyond this range the values will
92:24 - overflow now i will tell you
92:26 - how to declare an integer in programming
92:28 - language
92:29 - first of all we write int then we name
92:32 - the variable
92:32 - like in this case the name of the
92:34 - variable is value and then we assign a
92:36 - value to it for example
92:38 - we have assigned a value of 5 here right
92:40 - and then a semicolon
92:42 - we can also assign it like this we write
92:44 - int then value
92:46 - and we do not initialize it with any
92:47 - value if we do not initialize any value
92:50 - the default value is zero i'm going to
92:52 - say is if you do not initialize the
92:53 - variable the default value which it
92:55 - holds is
92:56 - 0. we will see more about integers in a
92:58 - moment so before i can demonstrate how
93:00 - int exactly works in the code i need you
93:03 - to understand
93:04 - these three critical functions first one
93:06 - of them is serial.begin
93:08 - bracket 9600 bracket close basically
93:12 - this function enables the serial
93:13 - communication between arduino
93:16 - and the computer what serial
93:18 - communication is
93:19 - and what these functions are we will
93:21 - talk in detail
93:22 - in coming lectures but for now just
93:24 - understand we
93:25 - have to write this statement whenever we
93:27 - want any communication to happen between
93:29 - the arduino
93:30 - and the computer then there is
93:31 - serial.print bracket
93:33 - semicolon right we use this function
93:36 - whenever we want to print something on
93:38 - the serial monitor
93:39 - we will see serial monitor in a moment
93:41 - and then we have serial.println
93:43 - the difference between serial.print and
93:45 - serial.println is that serial.println
93:47 - just
93:47 - adds an additional line after printing
93:50 - whatever is
93:51 - ours to print now without any further
93:52 - delay we'll just see
93:54 - how integer works so now let's start
93:56 - afresh
93:57 - by learning about integers let me open a
93:59 - new file
94:02 - all right so i'm declaring my first ever
94:05 - integer above void setup
94:07 - like this end my
94:10 - variable is equal to 5
94:14 - it is similar to something which we saw
94:16 - in the presentation when i told you
94:18 - about integers
94:19 - now to see the value of my variable i
94:21 - will start
94:22 - serial communication with my computer
94:25 - like this
94:25 - and now to see the value i will print
94:29 - the value serial dot println
94:34 - my variable so now i'll upload the code
94:39 - it's done uploading and now i will see
94:40 - the serial monitor
94:43 - so you see it has printed the value of 5
94:46 - that means the value of my variable is 5
94:48 - as we have declared
94:51 - similarly when i said if we don't
94:53 - initialize it
94:54 - the value is 0. we'll upload the code
94:58 - and see it again
94:58 - let me name the file first
95:04 - right if now we have not declared it so
95:07 - now we will see the value
95:10 - it says zero so now i will be telling
95:13 - you about how we can
95:14 - modify our variables for example
95:17 - the first thing which we can do is we
95:20 - will take our variable
95:21 - and add 2 to it
95:24 - so first operator which you see is plus
95:27 - these are arithmetic operators and we
95:29 - will be discussing more about these
95:31 - shortly now if you print our variable
95:34 - serial dot println
95:38 - my variable
95:42 - right so the answer would be 2.
95:47 - so the value of my variable initially
95:49 - was 0 and now we have added 2 to it
95:51 - so we have 2 here now for example if we
95:54 - had initiated it
95:56 - with 5 so now we will get
95:59 - 7 right okay
96:03 - as expected now the variable value is 7
96:06 - right so now we will manipulate it
96:09 - by subtracting 2 from it
96:13 - now again we will get 5. let me tell you
96:15 - that shortcut to open the serial monitor
96:16 - is
96:17 - this button and then we will print it
96:25 - right 5 7 and 5 i hope i am making some
96:28 - sense
96:29 - similarly there is a multiplication
96:31 - operator and a division operator
96:33 - what we can do is let's say
96:37 - my variable is equal to my variable
96:41 - into 5 let's say now we will print my
96:44 - variable
96:47 - so what will we get in guesses
96:51 - we'll get 25 right so 5 was the value of
96:54 - my variable and we multiplied it by 5 so
96:56 - we have 25 so now let's divide
96:59 - my variable by 25 divide by
97:03 - 25 what will we get one right
97:16 - right we got one now the important thing
97:19 - which i want you to notice
97:20 - the integer variable can only hold
97:23 - integers it cannot hold
97:25 - fractions for example i'll tell you let
97:28 - me delete all this code
97:30 - for example if my variable was 3 right
97:33 - and what if we divide my variable
97:37 - by 2 mathematically
97:40 - the answer should be 1.5 but since
97:44 - our integer variable can't hold decimal
97:46 - values so can you guess what will it
97:47 - print now
97:48 - it will print one why
97:52 - because it can only hold integer part of
97:54 - any decimal the answer was
97:56 - 1.5 but it will pick only the integer
97:59 - value
97:59 - so if you want decimal values as well we
98:02 - will use float and we will soon learn
98:03 - about float
98:05 - now there is another interesting
98:07 - operator known as modulo
98:09 - it will give us the remainder after
98:11 - division
98:13 - let's say my variable is 6 okay
98:18 - and i want to get the value of the
98:21 - remainder we will say
98:22 - my variable
98:25 - equal to my variable modulo
98:28 - the symbol of modulo is percentage sign
98:31 - if we divide 6 by
98:33 - 2 so it will completely divide by 2
98:36 - right so the remainder will be
98:38 - 0. so if we print my variable we should
98:40 - get a value of 0
98:42 - right as expected
98:46 - if we divide six by three
98:49 - then also we'll get a remainder of zero
98:55 - but if we divide six by four we get a
98:58 - remainder of
98:59 - two right we will get two here now
99:02 - as expected now can you guess what if we
99:05 - divided by
99:06 - five what remainder will be
99:09 - we'll get one right as expected
99:13 - so these were the main arithmetic
99:16 - operators which we can use
99:17 - to modify our variables now for example
99:21 - we have more than one variables in our
99:23 - code
99:24 - my second variable
99:29 - and the value of that is 5. now what we
99:32 - can do is
99:39 - now let's see what will we get my
99:40 - variable plus
99:45 - my second variable right
99:48 - so can you guess what will we get we'll
99:51 - get 11.
99:54 - right as expected and what if we
99:58 - subtract it
100:03 - are we correct absolutely similarly we
100:06 - can also multiply
100:09 - what should we get 6 multiplied by 5 is
100:12 - 30 right what another thing which we can
100:16 - do is we can store
100:18 - these values here our results are not
100:21 - getting stored
100:22 - here they are just being displayed what
100:25 - if we want to store it
100:26 - we can take another variable my third
100:30 - variable
100:31 - and let's not initialize it okay so what
100:34 - we can do is
100:37 - let's take my third variable
100:41 - okay and let's store the value
100:44 - of my variable
100:48 - plus my second value
100:52 - and let's print the third variable
100:56 - we should get 11 here exactly
101:00 - so similarly we can do whatever we want
101:02 - with the variables
101:04 - but the most important thing which i
101:05 - want you to notice is before
101:07 - using the variable we have to declare it
101:10 - for example
101:12 - if we do not declare my third variable
101:16 - okay and try to do something with it
101:20 - the compiler will throw us an error my
101:22 - third variable was not declared in this
101:23 - scope
101:25 - all right we'll discuss about scope in
101:27 - coming videos
101:28 - just wait for some time you also need to
101:30 - note that
101:31 - you have to declare the variable before
101:33 - using it right
101:34 - you cannot do this as well for example
101:37 - you
101:38 - try to declare your third variable here
101:42 - right then also you will get an error
101:45 - you have to declare it before using it
101:47 - you cannot declare it after using it
101:49 - right
101:50 - the last important operator which you
101:52 - need to know to be comfortable with the
101:54 - course
101:54 - is the increment and the decrement
101:56 - operator there are two types of each
101:59 - one is post increment and pre-increment
102:02 - and post decrement and pre-decrement
102:04 - all right the purpose of increment
102:06 - operator is to increase the value of
102:08 - variable by one
102:09 - and the purpose of decrement operator is
102:12 - to decrease the value of our variable by
102:14 - 1. i'll show you this by an example we
102:17 - have
102:18 - my variable and the value of my variable
102:20 - is 6. so now
102:22 - if i take my variable and do
102:25 - plus plus this plus plus is post
102:28 - increment operator okay and now if i
102:30 - print my variable
102:32 - you will see that we will get 7
102:37 - right so now if i use
102:41 - pre-increment operator then also
102:44 - we'll get the value of 7 see
102:48 - so now you may ask what is the
102:49 - difference between post increment and
102:51 - pre-increment
102:52 - well there is actually a difference and
102:54 - you will get to know that difference
102:56 - when we use
102:57 - this operator in some expression for
102:59 - example
103:00 - let's see it here
103:04 - if i increment the value of my variable
103:06 - like this like you see in serial println
103:09 - then we will get value of 6
103:15 - right as you can see and the reason
103:18 - behind this is
103:19 - in a post increment operator the value
103:21 - is first used in the expression
103:24 - and then it is incremented
103:27 - now if i
103:30 - use a pre increment operator then we
103:33 - will see we get
103:34 - 7. so by this we can understand
103:39 - by pre-increment operator the value is
103:41 - first incremented and then used in the
103:43 - expression
103:44 - similarly there is a decrement operator
103:47 - if i do
103:50 - my variable minus minus
103:55 - will get 5 because my variable was
103:59 - originally 6
104:00 - so we decremented it by 1 so hence we
104:02 - get 5.
104:03 - i hope this concept was clear to you
104:05 - this concept will be used multiple times
104:07 - during our course so if you have any
104:09 - questions you can comment down below
104:10 - and in the next video we will look at
104:13 - the float data type
104:14 - so now we will look at the float data
104:16 - type this data type is capable of
104:19 - holding
104:19 - decimal places as well like we saw in
104:22 - the integer it cannot hold decimals
104:24 - the float can hold decimals as well and
104:26 - the default float which we use
104:28 - in arduino programming is precise up to
104:30 - 7 decimal places
104:32 - let me explain you in a better way like
104:34 - for example
104:35 - the number you see here is a real number
104:37 - it is 863.267
104:41 - right so in integer if we try to store
104:44 - this
104:45 - that would store only 863. it will just
104:48 - ignore
104:49 - 0.267 so if you want to use
104:52 - 0.267 as well in our memory so we will
104:54 - use
104:55 - a float data type so how do we declare
104:57 - that
104:58 - we write float then space then the name
105:01 - of that float
105:02 - variable in our case it is value equals
105:05 - to
105:06 - 5.6 or some other value which you want
105:08 - then a semicolon
105:10 - you can also start a float uninitialized
105:13 - like we have done here so let's now see
105:15 - the demonstration of how float is used
105:17 - in a programming we will declare the
105:19 - variable
105:20 - my float variable is equal to
105:24 - 7.8 for example
105:28 - let's see right we can see the value
105:32 - of 7.8 now let's see what happens if we
105:36 - try to
105:37 - store 7.8
105:41 - in an int variable
105:54 - as i told you in the presentation we'll
105:56 - get seven
105:58 - right can you see the difference now now
105:59 - we will just quickly see
106:01 - the limitation which we had while using
106:03 - int variable
106:04 - that while dividing we could not store
106:06 - the decimal part
106:07 - so we will see if we can store that in
106:09 - float variable or not
106:11 - let's see it quickly i'll take my float
106:13 - variable
106:18 - and i'll divide it by
106:22 - 2 okay and we'll see the my float
106:25 - variable then
106:26 - let's comment this statement
106:31 - all right 7.8 divided by 2 is
106:34 - 3.9 we can use all the operators which
106:36 - we used in the int variable like plus
106:38 - minus divide multiply
106:40 - increment decrement and floats as well
106:43 - okay
106:44 - so you can try that on your own and
106:46 - comment down below if you face any
106:47 - problem
106:48 - so now we will take a look at the bool
106:50 - or boolean data type
106:53 - they can be used interchangeably right
106:55 - but we prefer
106:56 - to use bool so the pool data type
106:59 - holds one of the two values true or
107:02 - false
107:03 - that means if something is true or if
107:06 - something is
107:07 - false for example we can declare a
107:09 - boolean variable
107:10 - by writing pool then the name of the
107:13 - boolean variable
107:15 - in our case it is is tall equals to
107:18 - true or false we'll take another example
107:22 - bool is fit is equal to false semicolon
107:26 - so this way we can declare a boolean
107:29 - variable but i want you to note is
107:31 - that one high or true are considered
107:34 - same
107:34 - by the id also 0 low
107:37 - and false are also considered same by id
107:40 - by id i mean
107:41 - the arduino ide right and anything other
107:43 - than 0
107:44 - is also considered true by the id we'll
107:46 - look at
107:47 - what exactly this means in the coding
107:50 - now let's understand
107:51 - the boolean variable in the coding we
107:53 - will initialize it by
107:54 - writing bool we will then name it and
107:57 - initialize the value of
107:58 - say one as i told you
108:02 - one high
108:05 - or true all these three hold
108:08 - the same meaning and similarly zero
108:12 - low and false
108:15 - all hold the same meaning if we try to
108:18 - print the variable
108:19 - let's see what happens it will print
108:23 - zero right because false is zero if we
108:26 - use
108:27 - low then also it will print zero same
108:29 - goes for true
108:31 - if i use true here it will print one
108:34 - and the other thing which i told you if
108:37 - you use anything other than
108:38 - 0 that would evaluate to 1 let's see
108:41 - that also for example i used 78
108:43 - let's see what happens it still gave 1
108:48 - okay so that means bool can either store
108:50 - 0 or 1
108:51 - that's all and what's the purpose of
108:53 - boolean operator
108:54 - we check if something is true in the
108:56 - code we'll see
108:58 - examples while doing our experiments
109:00 - shortly i would like to tell you
109:01 - if we want to check some condition is
109:03 - true or false or we can initialize our
109:05 - condition as well if something is true
109:07 - then only we have to do certain tasks
109:10 - you will understand more about
109:11 - boolean data type when we progress in
109:13 - the course like when we study about
109:15 - conditionals or when we study logical
109:17 - operators or when we study
109:19 - the comparison operators we will now
109:21 - move on to another data type which is
109:23 - known as
109:23 - byte the next data type which we have is
109:26 - byte
109:27 - so as the name suggests it is a byte
109:29 - long data type
109:30 - it can store up to eight bits of data so
109:34 - as we all know eight bits equals to one
109:36 - byte okay
109:37 - so a byte is just like an integer but
109:39 - the only difference is
109:40 - the range is 0 to 255. so if you're sure
109:43 - that your
109:44 - variable is not going to exceed 255 you
109:46 - can always use a byte type
109:48 - data type so using a byte data type will
109:51 - save your
109:52 - arduino memory so we will now see how to
109:54 - declare a byte
109:56 - we will write byte space name of the
109:59 - variable
110:00 - equals to and the value which we want to
110:01 - add in that then a semicolon
110:03 - we can also declare it without
110:05 - initializing the variable and in that
110:06 - case
110:07 - the default value it will store is 0
110:10 - just like integer
110:11 - so let's just quickly declare our byte
110:18 - and let's print it
110:26 - right so now we will look at our next
110:29 - data type
110:30 - which is char which is a short for
110:32 - character
110:33 - as the name suggests it can hold a
110:35 - single character
110:37 - any character present on the keyboard
110:38 - for that matter including all the
110:40 - symbols like comma
110:41 - question mark numbers like 1 2 3
110:43 - characters like abc
110:45 - small caps everything let's see how we
110:47 - declare a character
110:50 - we write char space name of the variable
110:53 - equals to and the character which we
110:54 - want to use
110:56 - and that is enclosed in single inverted
110:58 - commas and then
110:59 - a semicolon we can also declare our
111:01 - character like this
111:03 - as we have seen it many times already
111:05 - the thing to note about characters is
111:07 - that it is still stored as a number what
111:09 - i mean by that
111:10 - is there is a full ascii table each
111:13 - character
111:14 - on the keyboard corresponds to a number
111:16 - for example you can see
111:17 - a capital a is 65 and a small a is
111:22 - 97 right similarly you can see the
111:24 - entire table it contains
111:25 - all the characters which are present on
111:27 - the keyboard and each character
111:29 - has its own number so we'll look at this
111:31 - in a bit more detail
111:32 - using our coding all right so we will
111:34 - declare a character
111:37 - care my care
111:40 - is equal to right
111:46 - now we will print it right
111:50 - we get an a now if i write 65
111:54 - which is the ascii value of capital a
111:58 - you can refer ascii table to verify then
112:00 - also it will print a
112:04 - and let's have a look right it printed a
112:08 - now still these are numbers that means
112:10 - it should be possible
112:11 - for us to perform some arithmetic on
112:13 - that for example
112:15 - if i take a here and add 1 here
112:19 - right so what should we get we should
112:22 - get 66
112:23 - as expected why because the value of a
112:26 - was 65 and it added 1 to that
112:29 - so we get 66 right a char data type
112:32 - occupies one byte in the memory
112:34 - okay so i hope you understood the char
112:36 - data type i can understand if you got
112:38 - a bit confused with the character
112:40 - arithmetic don't worry about that right
112:42 - now
112:43 - this information is enough to start our
112:45 - projects
112:46 - so now we have discussed all the
112:47 - important data types like end
112:49 - float char bool byte and you have also
112:52 - learned
112:52 - when to use which type of data type so
112:55 - i'm pretty sure that you won't face any
112:56 - issues
112:57 - while performing your experiments
112:59 - although there are more data types like
113:01 - arrays and strings which are slightly
113:02 - more complicated than data types which
113:04 - we have already discussed
113:05 - and they would also involve the usage of
113:07 - loops so we will cover them after
113:09 - discussing loops
113:10 - as that would make it easier for you to
113:12 - understand for now we will move on to
113:14 - our next topic
113:15 - which is variable scope and qualifiers
113:18 - see you in the next video
113:19 - now since we are familiar with the data
113:21 - types and what variables are
113:23 - we can easily understand what is
113:24 - variable scope and qualifiers
113:26 - so let's start by understanding what is
113:28 - scope in many programming languages
113:30 - including arduino's programming language
113:33 - it matters where you have declared your
113:35 - variable
113:36 - speaking of which we have two kinds of
113:38 - variables global variables and
113:40 - local variables a global variable is the
113:42 - one which can be seen by
113:44 - every function in the program while
113:46 - local variables are only visible to the
113:48 - function
113:48 - in which they are declared in the
113:50 - arduino environment any variable
113:52 - declared outside of a function example
113:54 - void setup or void loop or any other
113:56 - custom function
113:57 - is a global variable so let's start by
113:59 - understanding that in a proper manner
114:01 - so what positions would qualify for
114:03 - writing a global variable
114:05 - the first position which we see is just
114:07 - above white setup
114:08 - the place where my cursor is blinking
114:10 - right now for example i write
114:11 - int myvariable
114:14 - is equal to 6. so in this case my
114:18 - variable
114:19 - is a global variable
114:22 - as i told the global variable is
114:24 - accessible in all the functions
114:26 - let's see that by printing my variable
114:28 - in void setup
114:29 - right it will print here as well it will
114:33 - print
114:34 - in void loop as well let's make an
114:36 - identifier
114:37 - so that we can identify in which
114:39 - function it got printed
114:41 - serial.println printing in
114:45 - setup all right and let's differentiate
114:48 - printing in blue all right
114:52 - let's have a delay here because it will
114:54 - print very fast otherwise
114:57 - okay let's see that now
115:00 - right printing in setup and printing in
115:03 - loop
115:04 - it is printing again and again because
115:06 - we have written that in loop
115:08 - as we already know loop function will
115:10 - run until and unless we turn off the
115:12 - arduino so that means
115:13 - my variable could be accessed by white
115:15 - setup as well as
115:16 - while loop that means this is a global
115:18 - variable
115:19 - now we will see a local variable instead
115:22 - of declaring it above
115:24 - void setup let's declare it in void
115:26 - setup
115:27 - so now let's try to compile this we
115:29 - should get an error
115:30 - why because my variable was not declared
115:32 - in the scope it is saying
115:33 - in void loop you did not declare my
115:35 - variable so i don't know what my
115:37 - variable is so let's comment out this
115:39 - line
115:39 - now it will compile okay it compiles
115:41 - successfully and it will just print
115:43 - in setup once right
115:46 - if we declare my variable
115:50 - in void loop and just uncomment this
115:53 - line
115:54 - now we'll get an error in white setup
115:56 - because it was declared in void loop but
115:58 - it was not declared in void setup
116:00 - you see in void setup my variable was
116:02 - not declared in the scope
116:04 - now let's see a consolidated example of
116:06 - using global and local variables
116:08 - together
116:10 - the variable which i declare here is in
116:12 - my global
116:14 - variable is equal to 789 so let's
116:18 - print it here and let's also
116:22 - print it here okay this one is
116:25 - accessible to
116:25 - both white setup and while loop let's
116:27 - declare a local variable here
116:29 - and my local variable
116:32 - is equal to 852. so this is a local
116:37 - variable and it will be accessible only
116:39 - to white setup
116:40 - now let's try to print this
116:44 - my local variable note that we can use
116:46 - same names
116:47 - if we are using a different scope for a
116:49 - variable for example we can use
116:51 - my local variable in void loop as well
116:53 - and we can give it a different value
116:55 - 1 2 3 for example and let's
116:59 - print this as well so what should be the
117:02 - expected result when we print my global
117:04 - variable
117:05 - it should print 789 and when we print my
117:07 - local variable when the code is running
117:09 - in void setup
117:10 - it should print 852 and when it is
117:12 - running in while loop it should print
117:14 - one two three
117:14 - so let's upload this code
117:20 - is that as expected let's see printing
117:23 - in setup it printed my global variable
117:25 - which is 789 and my local variable which
117:28 - is
117:28 - 852 right now in printing in loop
117:32 - it printed my global variable 789 and my
117:35 - local variable which was
117:36 - 123. so i hope you are clear with the
117:38 - scope of the variable
117:40 - when programs start to get larger and
117:42 - more complex local variables are useful
117:44 - way to ensure
117:45 - that only one function has access to its
117:47 - own variables
117:48 - this prevents programming errors when
117:50 - one function modifies the variables used
117:52 - by other functions
117:53 - this concept will get clearer to you as
117:55 - we progress in the course
117:57 - so now we will look at qualifiers
117:59 - qualifiers basically define
118:00 - additional behavior to our variables
118:03 - there are two main kinds of qualifiers
118:05 - one is constant and one is static the
118:07 - constant qualifier is declared by using
118:10 - const keyword it is a variable qualifier
118:13 - that modifies the behavior of the
118:14 - variable
118:15 - making a variable read-only this means
118:18 - the variable can be used just as any
118:20 - other variable of its type
118:21 - but its value cannot be changed you will
118:23 - get a compiler error if you try to alter
118:25 - a value to a constant variable
118:27 - we will just see by an example we will
118:29 - declare our variable
118:30 - constant int my variable
118:34 - is equal to 5. now my variable is a
118:36 - constant integer you cannot add anything
118:39 - to it you cannot subtract anything to it
118:41 - you just can't alter it
118:42 - now let's try to alter it let's see what
118:46 - happens
118:50 - we got an error assignment of a read
118:52 - only variable my variable
118:54 - however you can use constant variables
118:56 - for doing the math
118:58 - for example i take another variable here
119:03 - is equal to my variable into
119:06 - 5 right
119:10 - since this is not possible we'll remove
119:11 - it we'll try to
119:13 - print the value of my second variable
119:22 - right so can you guess what will we get
119:26 - we got 25 right because my variable was
119:28 - 5 and we multiplied it by 5 so we got
119:30 - 25.
119:31 - so you may wonder what purpose do
119:33 - constant variables
119:34 - serve in the code well we can use
119:36 - constant variables wherever we don't
119:38 - want our variables to change their value
119:40 - for example there are constants like pi
119:43 - which is 3.14
119:44 - and we can have our arduino pins as
119:47 - constants like if we don't want to
119:48 - change them in the code
119:50 - i would also like to tell you that there
119:51 - is an alternative in c
119:53 - plus plus language to define our
119:55 - constant variables
119:56 - which is hash defined as define is a
119:59 - useful c plus plus component that allows
120:01 - the programmer to give a name to a
120:03 - constant value
120:04 - before the program is compiled define
120:06 - constants in arduino don't take up any
120:08 - program memory space on the chip
120:10 - the compiler will replace the references
120:12 - to these constants with the defined
120:13 - value at the compile time
120:15 - so let's see this by an example we start
120:17 - by writing hash
120:19 - define then the name of the variable
120:22 - which you want
120:23 - let's say pi okay and the value of that
120:27 - variable which you want it can be
120:28 - anything for that matter it can be an
120:30 - integer it can be a float it can be a
120:32 - character
120:33 - so let's say the value of pi is 3.14
120:37 - right also note that we don't terminate
120:40 - the defined lines
120:41 - by a semicolon we just write this so
120:43 - whenever we use
120:44 - pi in our code the compiler will replace
120:47 - the value which is written next to it
120:49 - there the compiler won't care if it
120:50 - makes any sense or not you have to make
120:52 - sure that it makes sense
120:53 - okay so now let's declare another
120:56 - variable
120:56 - of float type and let's name it area
121:00 - of circle okay
121:03 - and let's do the math pi into
121:07 - r square let's say r is 5 so
121:12 - right and now let's print the area of
121:14 - circle
121:18 - right let's upload it we see
121:22 - it has automatically picked up the value
121:24 - of pi from here and
121:26 - it has done the math and it is giving
121:27 - the answer to us right
121:29 - as hash defined doesn't use any memory
121:31 - in the arduino it is really tempting to
121:33 - use hash define
121:34 - but it certainly has some downsides the
121:36 - compiler will replace
121:38 - all the references to pi in the code and
121:40 - you will start facing problems
121:42 - so it is recommended that you avoid
121:44 - using hash define so use constant int
121:46 - in place of hash define unless you are
121:48 - falling short of memory
121:50 - so in the next video we'll talk about
121:51 - the static qualifier
121:53 - see you in the next video so we will
121:55 - discuss about static qualifier in this
121:57 - video
121:58 - let me just quickly clean up this mess
122:00 - first because it's looking so
122:02 - confusing so just observe what's
122:04 - happening let's declare a variable here
122:07 - int xyz is equals to
122:11 - zero let's increment it here and let's
122:15 - print it let's see what happens
122:26 - can you see that we initialized it by
122:28 - zero we incremented by one and then we
122:30 - printed the value so when the loop
122:32 - started again
122:33 - the value would be incremented to two
122:35 - let me stop this auto scroll
122:37 - the value will increment to two then
122:40 - three then four and five
122:41 - and six and then so on okay it will keep
122:44 - running
122:44 - until i stop it
122:47 - so in this case we have declared xyz as
122:50 - a global variable but i would like to
122:52 - tell you that it is not a good practice
122:53 - to declare many global variables
122:55 - so we should try that we use local
122:57 - variables as much as possible
122:59 - so let's try to use it as a local
123:01 - variable we will remove it from here
123:04 - and we will declare it here right we
123:08 - declared index y
123:09 - equal to zero then x y z plus one
123:12 - then we will increment it by one and
123:14 - then we will print it okay
123:16 - let's see what difference will it create
123:22 - can you explain why is this happening
123:25 - okay we initialize it by zero we
123:27 - incremented it
123:28 - we printed it okay and then
123:32 - it was again initialized to zero then
123:34 - again it was
123:35 - incremented by one and then printed so
123:37 - it will keep on printing one
123:38 - unless i stop this loop so now we are in
123:41 - a trouble
123:42 - if we declare it in loop then it would
123:44 - reset every time the loop is called
123:45 - and it is recommended that we don't use
123:48 - global variables that much so what is
123:50 - the solution
123:51 - the solution is that we use a static
123:54 - qualifier
123:56 - to do that we will just add static in
123:58 - front of
124:00 - our variable what this will do is this
124:02 - will just initialize it by zero
124:04 - and it will not reset it to zero every
124:06 - time the loop is called
124:07 - let's see if it solves our problem
124:12 - yup it did solve our problem so using a
124:14 - static data qualifier is a good way to
124:16 - preserve
124:17 - the data of our variables between the
124:18 - function call i hope it was clear to you
124:21 - please comment down if you have any
124:22 - questions see you in the next video
124:24 - in this video we will look at the
124:26 - comparison operators
124:27 - comparison operators are basically some
124:29 - operators which would tell you if
124:31 - something which you're trying to compare
124:33 - is true or not they would return a
124:34 - boolean value of either true
124:36 - or false so we have about five or six
124:38 - comparison operators we will just look
124:40 - at them
124:40 - in a moment the first operator which we
124:42 - have is a lesson operator and is
124:44 - represented by
124:45 - a less than symbol then we have a
124:47 - greater than operator
124:48 - then we have less than equal to then we
124:51 - have
124:52 - greater than equal to then we have equal
124:54 - to equal to and then
124:55 - we have not equal right so we have a
124:58 - total of
124:59 - six comparison operators we will just
125:01 - look at them what they exactly mean
125:04 - let me comment this out first uh let's
125:06 - have our variables
125:07 - end variable one right
125:11 - let's say it is seven and we have int
125:14 - variable two and it is eight
125:18 - let's try to compare them variable one
125:22 - less than variable two as i told you
125:25 - this operator returns something
125:27 - which is true or false so what will
125:29 - happen here is since variable one
125:31 - is less than variable 2 right so it will
125:34 - print
125:35 - 1. let's see
125:40 - so now let's do one thing let us make
125:42 - this variable 1
125:43 - as 9. now we should get 0 because this
125:46 - statement will become false
125:47 - right as we expected so now can you
125:50 - guess if i make variable 1 as 8
125:52 - what will happen let's see
125:55 - this should return 0 yes why because 8
125:58 - is not less than 8 okay it is equal to 8
126:01 - but it is not less than 8.
126:03 - so we'll talk about this condition very
126:05 - soon okay now we will have
126:07 - the greater than operator let's replace
126:09 - this right and change the variable
126:11 - to 9 back okay so what do you think it
126:14 - should return it should return true
126:15 - because
126:16 - variable 1 is greater than variable 2 of
126:17 - course i hope you understood these two
126:19 - operators
126:20 - then we have less than equal to we use
126:23 - it like
126:24 - this a less than symbol and equal to
126:25 - symbol this is a less than equal to
126:28 - operator what this does is it will
126:30 - return true
126:31 - if the value on the left side is lesser
126:34 - than
126:34 - the value on the right side or it is
126:37 - equal to the value on
126:38 - right side you got my point so
126:40 - previously when i made
126:42 - variable 1 equal to eight and variable
126:43 - two also eight it returned
126:45 - zero but in this case it will return one
126:48 - because eight is equal to
126:49 - eight so let's try that
126:53 - right so similarly a greater than equal
126:56 - to sign
126:57 - also works like this you can experiment
126:59 - this on your own
127:00 - then we'll look at the equal to equal to
127:02 - sign equal to equal to sign means
127:04 - it will compare if some values are equal
127:07 - or not
127:08 - it will return true only and only if a
127:10 - value is exactly equal
127:12 - in our case we will get one because our
127:13 - value are eight and eight
127:16 - we got one if i make it nine for example
127:19 - we should get zero
127:23 - then we have a not equal to operator we
127:26 - use it like
127:27 - we take an exclamation mark and then i
127:29 - equal to symbol
127:30 - this operator will tell you false only
127:33 - if the two values are equal
127:35 - okay in all the other cases you will get
127:38 - a 1 not equals 2 right if some value is
127:41 - equal to some other value it will say it
127:43 - is
127:43 - false because that is equal but if you
127:45 - take any value
127:46 - in our case for example variable 1 is 9
127:48 - and variable 2 is 8 we should get
127:51 - a 1 because that is true
127:54 - right so we have covered all the
127:57 - operators and how they work so you may
127:59 - be wondering now what is the use of
128:01 - these operators
128:02 - in programming well these operators will
128:04 - help you compare the values for example
128:06 - you make a project in which you have to
128:08 - compare the values of the sensors so you
128:10 - may have to use these operators
128:12 - right and when you use these operators
128:14 - you will get some
128:15 - decision making capability in your code
128:17 - i would like you to note
128:18 - one important thing about the equal to
128:20 - operator many people make a mistake
128:22 - while using the equal to operator
128:24 - they use 1 equal to sign instead of 2
128:26 - equal to signs while 1 equal to sign
128:28 - is the assignment operator that means
128:30 - you are assigning a value to a variable
128:32 - like in this case we have assigned a
128:34 - value of 9 to variable 1
128:36 - we have used one equal to sign okay and
128:39 - when we use
128:40 - double equals to that means we are
128:42 - trying to compare something
128:44 - so to avoid making mistakes i really
128:46 - recommend that you double check
128:47 - the operator which you have used i will
128:49 - talk about this once more
128:50 - in the control structures when we study
128:52 - about the if conditional block
128:55 - and in the next video we will learn
128:56 - about the logical operators
128:58 - in this video we will look at logical
129:00 - operators the concept of logical
129:02 - operators is very simple we use logical
129:04 - operators
129:04 - whenever we want to take decisions in
129:06 - the code each operand
129:08 - is applied to some condition which may
129:10 - be either true or false
129:12 - we'll just see that in a moment so
129:13 - basically there are three logical
129:15 - operators
129:15 - and operator or operator and a not
129:18 - operator
129:19 - so let's see how it works in coding so
129:21 - the and operator
129:22 - the and operator is represented by two
129:25 - ampersand signs
129:27 - these signs can you see that then we
129:28 - have or operator and which is
129:30 - represented by
129:31 - two straight lines we'll find this
129:33 - symbol just above your
129:34 - enter key and then we have a not
129:37 - operator
129:37 - it is an exclamation mark that's all
129:41 - so let's see the and operator so the and
129:43 - operator expects that all the conditions
129:45 - which
129:46 - we are using in it are true in order to
129:48 - return a true
129:49 - these operators also return a boolean
129:51 - value of either true or false
129:53 - they also operate on boolean values
129:56 - which is either true or false like i
129:57 - told you
129:58 - they work on some conditions please hold
130:01 - on as i further clarify this
130:02 - let's start with the and operator let me
130:05 - just open the cl monitor so that we can
130:07 - understand it side by side
130:09 - the first thing which we have written is
130:10 - the lessons about and operator
130:12 - it is printed exactly as we have written
130:15 - it
130:17 - okay then it is true and true is true
130:19 - and true is written like this
130:20 - okay then we have written true which is
130:23 - the boolean value
130:24 - then the operator and operator and then
130:27 - another
130:28 - boolean value which is again true the
130:30 - true and true
130:31 - returns a true and both of the two
130:33 - conditions are true
130:35 - then the answer is true for all the
130:37 - other conditions it is
130:38 - false for example true and false is
130:41 - false
130:42 - false and true is false false and false
130:45 - is also false
130:46 - so whenever we use it to take decisions
130:48 - we tell the compiler
130:50 - you have to proceed only if both the
130:52 - conditions are true
130:53 - okay if they're false you don't have to
130:55 - proceed okay i hope it is clear
130:57 - if it is not clear don't worry we will
130:58 - just understand while we write our main
131:00 - programs
131:01 - then we have printed some empty lines so
131:03 - that we can have a space over here then
131:05 - we will see
131:05 - the or operator this is the or operator
131:08 - it is printing the lessons about
131:10 - our operator with the or operator even
131:13 - if one condition is true
131:15 - then the resultant will be true it will
131:17 - be false only if
131:18 - all the conditions are false for example
131:21 - we can see
131:22 - true and true is true true and false is
131:25 - also true false and true is also true
131:27 - false and false is false right then
131:29 - again we have printed some lines
131:31 - so that we can see the gap here then we
131:33 - will see the not operator the not
131:34 - operator basically just reverses the
131:36 - value of the boolean for example
131:38 - the not of true is we have used the
131:41 - operator here
131:42 - and the not of true is false as you can
131:44 - see it's zero then the not of false is
131:46 - true
131:47 - right it has just reversed the values it
131:50 - is very useful when we write our
131:51 - conditional blocks
131:52 - which we will see shortly all right so
131:54 - let me just
131:55 - make some changes so that you can
131:57 - connect it with the comparison operators
131:59 - which we used earlier
132:00 - okay so instead of straight away writing
132:01 - true here let's take
132:03 - 5 greater than 3 which is true right and
132:06 - instead of writing true here
132:07 - we can say seven is less than eight
132:11 - okay both the conditions are true hence
132:13 - we will also get
132:15 - true right then also we got true
132:18 - because both the conditions were true if
132:21 - we make one condition false
132:23 - let's say here 8 is less than
132:26 - 5 which is false right so true and false
132:29 - is
132:30 - false let's see that
132:33 - right this is giving false we'll just
132:36 - quickly look at
132:37 - our condition let's say both the
132:40 - conditions are false
132:41 - let's make false conditions 5 is less
132:44 - than
132:45 - 2 which is false 4 is greater than
132:49 - 9 which is also false so we should get
132:52 - 0
132:55 - right which is this line false and false
132:58 - is
132:59 - 0. i can understand it can be a bit
133:01 - confusing for some people but i can
133:03 - assure you that
133:04 - once you start writing the codes on your
133:06 - own you won't face any problem
133:08 - while using these operators and even if
133:10 - you still have some problem we are
133:11 - always there to help you
133:12 - you can always comment down in the
133:14 - comment sections so see you in the next
133:16 - video
133:16 - we will now look at control structures
133:18 - so basically till now we have seen
133:20 - that the code is executed line by line
133:22 - that means the lines of codes are
133:24 - executed in the order
133:26 - in which we have written them for
133:27 - example we have written some code to
133:28 - perform action one then we have written
133:30 - some code to perform
133:31 - action two then in that case the action
133:33 - one will happen before
133:34 - action two when the action do completes
133:36 - then the action three will take place so
133:38 - similarly there is a controlled flow of
133:40 - code where we can decide which parts of
133:42 - the code we want to execute based on
133:44 - some conditions we start our code
133:46 - and then there is a condition that
133:47 - condition can be anything for that
133:48 - matter
133:49 - and based on that condition if it is
133:51 - true or false we can take some other
133:52 - actions
133:53 - let's say we have a switch we'll check
133:56 - if switch is pressed then we want to
133:57 - take some action
133:58 - if it is not pressed we want some other
134:00 - action to take place and the flow of
134:01 - code will depend on that condition
134:03 - either it will go this way either it
134:05 - will go this way and after completing
134:06 - that task it will
134:08 - jump back to the main code execute the
134:09 - lines which are present in the main code
134:11 - and then
134:11 - it will exit so the first control
134:13 - structure which we will study is
134:15 - the if statement we will understand
134:17 - about if statement and we will see how
134:18 - to use if conditions in our code in the
134:20 - next video
134:21 - so let us see the if condition whenever
134:23 - we write an if statement we write a
134:25 - condition
134:26 - along with that let's say we are trying
134:28 - to use a if block
134:29 - will take a condition which we want
134:31 - should be true if it is true
134:32 - then whatever we write in the if block
134:34 - will execute and then
134:35 - it will move on to the statement which
134:37 - is written just after if statement okay
134:39 - and it will execute that as well
134:40 - and then it will exit but if in case it
134:43 - is false
134:44 - then it will entirely ignore whatever is
134:46 - written inside the if block and it will
134:48 - straight away jump to
134:49 - the code which is written after if
134:50 - statement it will execute that
134:52 - and then it will exit let us quickly
134:54 - look at the syntax of if statement
134:56 - let's see this is our code we have
134:57 - written some statements we write
134:59 - if then we start a bracket we write our
135:02 - condition
135:03 - let's say something greater than
135:04 - something or if something is true
135:06 - if something is false if something is
135:08 - not true anything for that matter i will
135:10 - put a condition in this bracket then we
135:12 - close the bracket and then we open up
135:14 - the curly bracket
135:15 - then we write all the statements which
135:16 - we want to execute then we close the
135:18 - bracket and then we move on to
135:20 - write more statements in our code so
135:22 - this is the syntax of if statement
135:24 - so let us try this in our coding so we
135:26 - have an example here
135:27 - we'll write cl dot begin 9600 here so
135:29 - that we can communicate with the
135:30 - computer so we will write the first
135:32 - statement serial.println
135:34 - this line should print irrespective of
135:36 - anything and yes this line will print
135:38 - irrespective of anything
135:39 - then we will write if true serial dot
135:42 - println
135:43 - this line should print
135:46 - only if the condition
135:50 - is true please note that we don't use a
135:52 - semicolon here
135:53 - let's write another statement
135:56 - if false serial.print
136:00 - ln this statement will not print
136:03 - as the condition is false it is over
136:06 - and then again we'll write one line
136:08 - which should execute
136:10 - irrespective of anything let's say this
136:12 - only this line
136:13 - should also print irrespective of
136:15 - anything
136:16 - so let's upload this code and see what
136:19 - happens
136:22 - so we see this line should print
136:24 - irrespective of anything this line
136:25 - should print only if the condition is
136:27 - true this line should also print
136:28 - irrespective of anything
136:30 - did you know that when the condition was
136:32 - false the block did not execute
136:34 - let me do one more thing let's see a
136:36 - block of code
136:38 - executing let's print one more line here
136:40 - the second line
136:41 - right so now this line should also print
136:43 - there
136:45 - the second line because it was the part
136:47 - of this if block so whatever is written
136:49 - inside this block
136:50 - it will execute no matter what once the
136:52 - condition is true but of course
136:54 - writing true and false exactly like this
136:56 - does not make any sense right so we have
136:58 - to
136:58 - build our conditions let's say if 5 is
137:01 - greater than 3
137:03 - then this should execute we'll see the
137:05 - same result because this evaluates to
137:07 - true
137:07 - right so basically we should keep in
137:09 - mind that a boolean
137:10 - value should come inside this okay in
137:13 - this bracket there should be a boolean
137:15 - value
137:15 - then only it would be able to take some
137:17 - decision based on that boolean value so
137:19 - now we can complicate the condition as
137:21 - well
137:21 - like for example and 2 greater than 5
137:25 - but this is false right like we saw in
137:27 - the and operator
137:28 - both the conditions should be true in
137:29 - order to return true
137:31 - right but this is true and this is false
137:33 - so we'll now see that this block of code
137:35 - will also not execute
137:37 - let's see right as expected
137:41 - this line should print irrespective of
137:42 - anything this line will print anyway
137:44 - this line will also print anyway so now
137:47 - let's try to print this line
137:49 - we'll make this condition true 2 is less
137:52 - than
137:52 - 5 or 5 is less than 2. this condition is
137:55 - true because
137:56 - one of the condition is true right 2 is
137:58 - less than 5 that is true but 5 is not
138:00 - less than 2
138:01 - this is false but in the or condition
138:03 - one statement has to be true to get the
138:04 - resultant as true
138:06 - so this line should print now let's see
138:10 - yep so we were able to print this line
138:12 - because we made the condition true
138:14 - okay so when we will be making our
138:16 - projects what kind of conditions will we
138:18 - use we will be using conditions like
138:20 - the sensor value on the left hand side
138:21 - should be greater than the sensor value
138:23 - on the right hand side
138:24 - then these things should happen so i
138:26 - think you were able to relate with this
138:27 - thing
138:28 - okay now i will tell you another thing
138:30 - for example i took a bool
138:31 - many people do mistake in this so let's
138:33 - start by taking a bool
138:35 - my bowl is equal to false so now what i
138:39 - want to do is
138:40 - i want to print these lines only if my
138:43 - bool
138:43 - is true so i'm comparing it if it is
138:46 - true then only
138:47 - it should print but this is not true
138:48 - right because the value of my bool was
138:50 - false so that's why the resultant was
138:52 - false
138:53 - so hence the lines present in this if
138:55 - block will not execute
138:56 - now if we write false then it will
138:59 - execute because it is actually false
139:03 - so we can see these lines got printed so
139:06 - now i'll talk about the mistake which
139:07 - people do
139:08 - what they will do is they will use one
139:10 - equal to sign instead of
139:11 - two signs so what will happen is the
139:13 - compiler will assign
139:14 - a value of true to my bool and the
139:18 - resultant
139:18 - value of my bool will become one okay
139:22 - and this block of code will execute
139:25 - right so the expression which we write
139:29 - in the if condition
139:30 - is executed first and then the value of
139:32 - that thing is taken into consideration
139:35 - if it is true or false
139:37 - okay in our case my bool was assigned a
139:39 - value of true
139:40 - and then the value of my bool was used
139:42 - please take care you use
139:44 - double equals to if you want to compare
139:46 - the values
139:47 - now we can do nesting of ifs as well
139:50 - what nesting means like this is our if
139:53 - block
139:53 - we can write more if blocks inside are
139:56 - the parent if block
139:58 - let's say we write another if if true
140:00 - serial dot
140:01 - print this is nested
140:04 - if right we can write another if inside
140:07 - that if
140:08 - false serial.println
140:11 - this is another line which will not
140:16 - execute so this was nesting of if this
140:19 - is the parent if this is a child if and
140:21 - this is
140:22 - a further child of this if right we can
140:24 - see like this
140:25 - this is the flow this bracket closes
140:27 - here and this bracket closes here
140:29 - for example in any case the parent if is
140:32 - false
140:33 - then all the child lifts will never
140:35 - execute please keep that in mind
140:37 - i hope you understood this point i'm
140:39 - pretty sure that you will be able to
140:40 - understand it in a better way when you
140:42 - perform your experiments
140:43 - so in the next video we'll look at the
140:45 - else statement
140:46 - see you in the next video now we will
140:48 - try to understand the else statement
140:50 - first of all let us look at the flow of
140:52 - the code
140:52 - we always write an else statement
140:54 - preceded by an if statement
140:56 - let's have a look at the flow of code
140:58 - when we use an else block
140:59 - there's an entry of code there is an if
141:01 - condition if that is true
141:03 - the body inside the if block is executed
141:05 - the body inside
141:06 - the else block is entirely ignored then
141:08 - it moves on to code after if statement
141:10 - after executing that code it would exit
141:12 - in case if it is false it will
141:14 - straightaway go to
141:15 - else block and it will execute the code
141:17 - which is present inside the else block
141:18 - and it will ignore the code which is
141:20 - present inside
141:21 - the if block after executing the else
141:22 - block it will go to the main code the
141:24 - code which is written after the
141:26 - if statement it will execute that and it
141:28 - will exit before looking at the syntax
141:30 - of else block let us compare it with
141:32 - just the if block so this was the if
141:34 - statement
141:35 - in if statement if the condition was
141:36 - true it would execute the body inside
141:38 - the if block then it will go to the main
141:40 - code
141:40 - execute that and then it will exit so
141:43 - when we use just the if condition
141:44 - without else that means we don't define
141:47 - what we want to happen if the condition
141:49 - which we have specified
141:50 - is false if it is false it will entirely
141:52 - ignore the if body and it will jump to
141:54 - the main code
141:55 - but in else we define what we want to
141:57 - happen if something is false so that we
141:59 - write in the else block so now let us
142:00 - look at the syntax of else block we
142:02 - start by writing if
142:04 - we specify the condition we open the
142:06 - bracket we write our actions here if the
142:08 - condition one is true
142:09 - then we close the bracket and then we
142:11 - write else
142:12 - if if we have more than one conditions
142:14 - for example if you want different sound
142:16 - levels of an alarm
142:17 - based on the temperature ranges for
142:19 - example at a lower temperature an alarm
142:21 - would ring slowly
142:22 - and at another condition let's say
142:25 - another range it will ring a bit louder
142:27 - and if it exceeds something then we want
142:30 - it to
142:30 - ring at the maximum intensity okay so
142:32 - these things can be controlled
142:34 - by if and else blocks okay after writing
142:36 - else if we write condition two if that
142:38 - condition is true think
142:40 - b will happen okay and then finally we
142:42 - write an else
142:43 - if none of the conditions is true then
142:45 - the else block will execute
142:46 - the thing which you need to notice here
142:47 - is if the condition one is true it will
142:49 - execute
142:50 - the thing a and it will straight away
142:52 - jump to the main code after this
142:54 - the control won't go in else if it will
142:56 - go in else if only if the condition one
142:58 - was false for example the code was
143:00 - running here
143:01 - it found that condition one was false so
143:02 - it will jump and check if condition 2 is
143:05 - true or false
143:06 - if it is true then it will do the thing
143:08 - b if it is also false
143:10 - then it will go to else block and do the
143:12 - thing c we will just understand this
143:14 - with the coding example so here we have
143:16 - example
143:17 - for understanding the else statement
143:19 - let's do this we'll write if true
143:20 - serial dot print ln my first statement
143:24 - so you can see the compiler has
143:26 - automatically considered this bracket
143:28 - which was originally for void setup
143:30 - for the if block okay we have to make
143:32 - sure we are using our brackets correctly
143:34 - now after closing the if block we will
143:35 - write
143:35 - else serial dot println my
143:38 - else statement all right so now we will
143:42 - close
143:43 - the white setup bracket now let us
143:44 - upload this code okay
143:46 - so my first statement got printed
143:48 - because my initial if condition was true
143:50 - and it will ignore the else block now
143:52 - let's make it false
143:54 - now we will see that statement written
143:55 - in the else block will print let's have
143:57 - a look
143:58 - my statement okay we can do the nesting
144:01 - in if else statements as well
144:02 - like we saw in the if video like i can
144:04 - start another if here
144:06 - if some other condition will write
144:08 - another task here so we can use
144:10 - endless if and else and the nesting of
144:12 - them as well by now you must be feeling
144:14 - a little bored by just printing the
144:15 - statements here and there and not doing
144:16 - any real things so in the next video i
144:18 - will show you
144:19 - a small simulation by using if and else
144:22 - blocks
144:22 - so see you in the next video so before i
144:25 - show you that fl
144:26 - simulation i would like to show you this
144:28 - comic
144:30 - just have a look at this comic for like
144:32 - 5-10 seconds
144:35 - and if you get the joke in this comic i
144:38 - can say that you have pretty much
144:40 - understood
144:40 - the concepts which we have discussed so
144:42 - far
144:43 - okay don't worry if you could not
144:45 - understand this once you finish the part
144:47 - where i'm teaching
144:48 - about functions i'm sure you will be
144:51 - able to understand it really well
144:53 - so just in case if you could not
144:54 - understand this i would say that please
144:57 - complete that section
144:58 - and then come back to this comic again
145:00 - and
145:01 - i'm pretty sure that you will have a
145:03 - good laugh
145:04 - okay so now let's move on to that
145:07 - simulation i was talking about
145:10 - so as i told you that i will show you a
145:11 - simulation of fns blocks in the previous
145:14 - video so i will just show you
145:16 - that simulation on the left hand side of
145:17 - the screen you can see a circuit diagram
145:19 - and on the right hand side of the screen
145:20 - you can see the code which i have used
145:22 - to make this simulation the simulation
145:24 - tool which you see on the left is
145:25 - autodesk tinkercad
145:27 - you can do a google search about it if
145:28 - you want to know more about this i'll
145:30 - help you in the comment section if you
145:31 - face any problem with this
145:32 - every one of you must have performed the
145:34 - blink example and i have very clearly
145:36 - explained you the functions which we
145:37 - used in that like pin mode digital write
145:40 - and delay so i will assume that you will
145:41 - not face any problem
145:42 - understanding this code so let's begin i
145:44 - have declared temperature as the global
145:46 - variable and initialize it with 0. in
145:48 - the void setup i have written
145:49 - pin number 678 as output as i want to
145:52 - connect our led to those pins
145:54 - so in the loop section i've started with
145:56 - if i'm trying to tell the compiler
145:58 - if the value of the temperature is less
145:59 - than 50 and is also greater than 10
146:02 - that means it lies between 10 to 50. so
146:05 - i want to
146:06 - perform this action please note the
146:08 - values of 50 and 10 are not
146:10 - inclusive as we have not used the equal
146:12 - to sign if you want to include those
146:14 - values you will have to use an equal to
146:16 - sign
146:16 - as well you must be remembering less
146:18 - than equal to operator and greater than
146:19 - equal to operator right
146:20 - you can always revisit the videos if you
146:22 - have any confusion so coming back to
146:23 - this i've simply written the code to
146:25 - blink the led which is connected to pin
146:27 - number six pin number six is this one
146:29 - that means this led is connected to pin
146:31 - number six also note that all the leds
146:33 - which are connected here
146:34 - are connected to a common ground which
146:36 - we have connected like this then we have
146:37 - written
146:38 - else if that means if the previous if
146:40 - was not true then check this condition
146:42 - if temperature is greater than 50
146:44 - and temperature is less than 70. that
146:46 - means the temperature range is
146:48 - 51 to 69. so if this condition is true
146:50 - then we want to blink the led connected
146:52 - to pin number seven
146:53 - which is this one pin number seven this
146:55 - and then finally we have written else if
146:57 - none of the conditions is true
146:58 - then do this thing which is blink the
147:01 - led which is connected to pin number
147:03 - eight which is this led so let's say
147:05 - we have temperature is equal to zero
147:07 - currently we have hard coded this
147:09 - temperature
147:09 - but in your projects you may have some
147:11 - sensors like lm-35
147:13 - or dht 11 which will return you the real
147:15 - time temperature of your room and
147:17 - code will act accordingly but just to
147:19 - test these conditions will be taking
147:20 - some arbitrary values
147:22 - so let's see in which condition will
147:24 - this zero fall okay
147:25 - if temperature is less than 50 or
147:27 - greater than 10 but it is not relying in
147:29 - this condition
147:30 - then it is greater than 50 and less than
147:31 - 70
147:33 - so this is also false so ultimately the
147:35 - else code should run so let me start the
147:37 - simulation right you can see
147:38 - else statement was being executed that
147:40 - means this led is blinking so now
147:42 - let's change the value from 0 to 52. so
147:45 - can you guess what will happen
147:46 - for the value of 52 okay let's see the
147:49 - value of 52
147:50 - is less than 50 which is false so
147:52 - ultimately this condition will be
147:54 - discarded
147:54 - it will check this one then so the
147:56 - temperature is greater than 50 yes
147:58 - temperature is less than 70 yes so this
148:00 - condition is true
148:01 - so hence the led connected to pin number
148:03 - 7 should start blinking
148:05 - so let's start the simulation so led
148:08 - connected to pin number 7
148:09 - has started blinking pin number seven
148:13 - okay so let's change the temperature
148:14 - value to 25 so now this condition will
148:17 - get true so let's start the simulation
148:19 - right so this led is blinking so one
148:21 - small homework for you guys is you have
148:22 - to comment down below what will happen
148:24 - if i select the value of 100 we can take
148:27 - a pause of 5 seconds
148:28 - and just go and comment down below after
148:30 - then come back and see the results
148:33 - so led which is connected to pin number
148:35 - 8 is blinking
148:36 - why so because 100 will not fall in any
148:39 - of the conditions so the compiler will
148:40 - execute
148:41 - the else statement one interesting thing
148:43 - which i want you to notice is
148:44 - that right now we have chosen arbitrary
148:47 - values but with the sensors you will get
148:49 - really changing values you may get the
148:51 - values which are changing so
148:52 - the arduino will act in the real time
148:54 - okay if you don't change the value and
148:56 - the sensor changes that value
148:57 - and we get different values from that
148:59 - sensor then the arduino will
149:00 - automatically check
149:02 - which condition is true right now and it
149:03 - will execute that statement
149:05 - and it happens really fast so with the
149:07 - real sensor you may see led which is
149:08 - currently blinking may change very
149:10 - quickly
149:10 - for example if you light up a candle
149:12 - near the sensor then the led which is
149:14 - blinking may change
149:15 - and then if you remove the candle then
149:17 - you may see that the other led may start
149:19 - blinking depending on the condition
149:20 - which is currently running
149:22 - so i hope you are clear with this if you
149:23 - still have any questions you can always
149:25 - comment down below or send a message to
149:27 - us
149:27 - so we will now take a look at loop
149:29 - structure which is another kind of a
149:31 - control structure
149:32 - in this kind of control structure we
149:33 - will basically learn how to write
149:35 - instructions in order to repeat
149:37 - certain tasks instead of writing code
149:39 - again and again for doing a certain task
149:40 - we can
149:41 - learn how to repeat that task again and
149:43 - again for example
149:44 - the void loop function which we use in
149:46 - arduino is a loop structure
149:48 - whatever we write in that repeats on its
149:50 - own but that is
149:51 - a default loop structure however you may
149:53 - need something
149:54 - to repeat itself in a loop as well so
149:57 - for that
149:57 - we have loop structures basically we
149:59 - have three kinds of loop structures
150:01 - one is for loop the second is while loop
150:04 - and then
150:05 - third is do while loop we will look at
150:07 - them one by one in their dedicated
150:08 - videos
150:09 - but before that let us see how it
150:11 - exactly works so we make the entry to
150:13 - the code then there is a condition based
150:15 - on which
150:16 - we take a decision if it is true then
150:18 - the certain action which we have defined
150:20 - will take place and then it will come
150:22 - back and check the condition again
150:24 - if it is still true then it will repeat
150:26 - the action and this will go on and on
150:28 - until this condition becomes false if it
150:31 - becomes false
150:32 - it will break out of that loop and
150:34 - perform the action 2 which is written
150:36 - after
150:36 - the definition of loop after performing
150:39 - that action
150:39 - it will exit so in the next video we
150:42 - will look at how exactly the first
150:43 - control structure
150:44 - which is for loop works we will see the
150:47 - syntax
150:48 - and we will see how it exactly works in
150:50 - the coding so see you in the next video
150:52 - so now let us begin with
150:54 - the for loop this is the first loop
150:56 - control structure which is very commonly
150:57 - used in computer programming
150:59 - first of all let us know about for loop
151:01 - this is an entry controlled loop
151:03 - what this means is the condition based
151:05 - on which the task will be executed is
151:07 - checked first
151:08 - if it is true then only those statements
151:10 - will be executed
151:12 - and we use for loop when we know how
151:13 - many times we need to run a loop
151:15 - so let us see the syntax of for loop
151:18 - first of all we write
151:19 - 4 then an open bracket then we
151:22 - initialize some variable here
151:23 - that variable will count how many times
151:26 - the loop has to run
151:27 - then we write the condition here that
151:29 - condition can be anything
151:30 - this condition mostly includes the
151:32 - variable which we have initialized then
151:34 - we update
151:35 - the variable which we have initialized
151:37 - we close the bracket
151:38 - then we start a curly bracket we write
151:41 - all the statements which you want to get
151:42 - executed
151:43 - then we write curly bracket let's see
151:45 - how it is used now let's say
151:47 - i tell you that you have to write your
151:48 - name 10 times on the serial monitor
151:51 - so what will you do serial dot print ln
151:54 - let's say my name is
151:55 - ashish so with your existing knowledge
151:58 - you will take this line
151:59 - you will write it 10 times and then you
152:01 - will upload it you'll check on see that
152:03 - monitor you can see it is getting
152:04 - printed 10 times so now if i tell you
152:06 - that you have to type it 100 times
152:08 - so would you be willing to write it
152:09 - hundred times i guess no
152:11 - and some of you may tell that we can
152:12 - write it in void loop instead
152:15 - but writing that in void loop would mean
152:17 - that it would keep printing ashish until
152:19 - and unless you turn off your arduino
152:20 - you won't be able to count if it has
152:22 - printed 100 times you can sit there and
152:24 - count that but that certainly doesn't
152:26 - make any sense so for that a for loop
152:28 - comes to a rescue
152:29 - let's see how we use it we write for we
152:31 - declare a variable
152:32 - int i for example is equal to 0 and we
152:35 - write a semicolon
152:36 - then we write a condition here for
152:39 - example how many times you wanted to run
152:41 - let's say
152:41 - i less than let's say we want to print
152:44 - my name
152:45 - 10 times so let we will write 10 here
152:47 - and we will update
152:48 - the condition i plus plus okay we'll now
152:51 - write serial dot
152:52 - print ln ashish and now we'll see what
152:56 - happens
153:00 - right we can see the arduino printed my
153:03 - name 10 times
153:04 - on the screen one two three four five
153:06 - six seven eight nine and ten
153:08 - okay we can also add multiple statements
153:11 - in this block
153:12 - let's say we can write hello world
153:16 - okay let's see what happens it will
153:18 - write ashish hello world ashish hello
153:20 - world yep as expected
153:22 - it has repeated all the things 10 times
153:24 - now what advantage do you have is
153:26 - now if someone tells you that you have
153:28 - to write it 20 times
153:29 - instead of 10 times so instead of
153:31 - copying pasting that code again
153:33 - you can just alter 20 here now it has
153:36 - written it 20 times
153:37 - now for example i want to use this
153:39 - declared integer i
153:41 - in my code serial dot print and then
153:45 - we can directly use this i here we can
153:48 - also perform arithmetics on that
153:50 - for example i can do i plus 2 i plus 5
153:53 - i minus 5 i divided by 2 anything for
153:55 - that matter
153:56 - but please note that the scope of this
153:57 - variable is just inside this block you
153:59 - cannot use this declared variable
154:01 - in other blocks even if you are using it
154:03 - in some for loop or some
154:04 - other function the scope of i will exist
154:07 - only in this
154:08 - block get my point let's see it will
154:10 - print 0 to
154:11 - 19 okay
154:15 - like 0 1 2 3 4 5
154:18 - 6 7 and 19. okay now let's
154:22 - understand how it was working all right
154:24 - so whenever we write a for loop
154:26 - the first step which happens is
154:28 - initialization this statement is
154:30 - executed only once when the loop is
154:32 - entered for the first time
154:34 - and after this the second step is it
154:36 - checks the condition
154:37 - this statement is probably the most
154:39 - important one it checks to verify
154:41 - whether or not certain expression
154:43 - evaluates to true if it is true then the
154:45 - loop execution continues
154:47 - then after that if the condition is true
154:49 - it would move on to execute the
154:51 - statements as the third step
154:52 - after executing the statements it will
154:54 - move on to
154:55 - the fourth step which is updating the
154:57 - variable it is typically used to
154:59 - increment or decrement
155:00 - some variable after the update the fifth
155:02 - step is to check the condition
155:04 - once again if that condition is true
155:06 - again it will come back to execute the
155:08 - statements once again then this step
155:09 - continues again and again until this
155:12 - condition becomes false the moment the
155:14 - condition becomes false
155:15 - it will come out of the loop and start
155:17 - executing something which is written
155:19 - after this loop now since you know this
155:20 - let us understand the code which we
155:22 - wrote earlier so now let us pay a closer
155:24 - attention to everything which we have
155:26 - written i've written for
155:27 - end i is equal to 0 then a semicolon and
155:30 - in the condition we have written
155:31 - i less than 20 that means i
155:35 - is acceptable till 19 okay
155:38 - and then we have written i plus plus you
155:40 - must be remembering that plus plus is
155:42 - used to increment a variable
155:43 - by one we have written serial.println
155:46 - bracket ashish that means
155:48 - when the value of i is 0 it will print
155:50 - aashish once then it will print
155:52 - hello world then it will print the value
155:54 - of i itself which is 0 right now then
155:56 - after executing this loop body
155:58 - it will increment the value by 1 and the
156:00 - value will become
156:01 - 1 okay when i is 1
156:05 - it will check if i is less than 20 which
156:07 - is true it will execute the body once
156:09 - again
156:09 - then the value of i will become 2 it is
156:12 - still less than 20 then again it will
156:14 - execute the body
156:15 - so it will continue till 19 but after
156:18 - executing it for the 19th
156:20 - time and when the value becomes 20 this
156:23 - condition will become false the moment
156:24 - it becomes false it will not execute
156:26 - these lines
156:27 - and it will exit out of the loop in case
156:30 - if we had written
156:31 - less than equal to 20 then the condition
156:33 - would have been true
156:34 - but it would have actually printed it
156:37 - for 21 times because it is starting from
156:40 - zero
156:41 - other thing which we can do is start it
156:42 - from one instead of zero
156:44 - it will be equivalent to this but
156:46 - usually it is recommended that we start
156:48 - from zero so after knowing this
156:50 - really easy trick i'm really wondering
156:52 - if you're wishing
156:53 - that you knew this trick before when
156:55 - your teacher gave your punishment so in
156:57 - the next video we will look at
156:58 - how to do nesting in for loops
157:02 - see you in the next video so like we saw
157:04 - next thing in fl's block we can do
157:06 - nesting in for loops as well for example
157:08 - if you want a printer pattern like this
157:10 - a series of stars there are five columns
157:13 - with five stars in each row let me just
157:15 - comment it so that it doesn't create
157:17 - problem in our code we can simply go
157:18 - ahead
157:20 - and write
157:31 - and we'll write serial dot println and
157:34 - we'll print five stars
157:35 - right so let's see what happens when we
157:37 - upload this
157:39 - oops we forgot to add a double quote
157:43 - so now again oh we forgot to write the
157:46 - name of
157:46 - variable and i let's see
157:50 - so it printed a lot of stars but now
157:53 - what if we want a pattern like this a
157:56 - staircase type of pattern
157:57 - let me comment that as well okay so how
157:59 - will we do that
158:00 - it's very simple we'll do nesting of for
158:02 - loops
158:03 - let's say for enti is equal to zero we
158:06 - want five rows
158:07 - okay so we will write five then i plus
158:10 - plus then we will write another for loop
158:12 - we will take another variable here and j
158:14 - is equal to
158:16 - zero and we'll write condition as j less
158:18 - than equal to
158:19 - i and then j plus plus okay and then
158:22 - we'll write serial dot
158:24 - print please don't will not write print
158:26 - ln here because we don't want
158:27 - it to print in next line so cl.print
158:31 - and just a single star
158:34 - and then once this for loops executes
158:39 - we'll print a new line dot println so
158:42 - let's see what happens here
158:44 - okay we got that pattern now i'll
158:47 - explain you how it worked actually
158:49 - we took our first for loop we
158:51 - initialized our integer i
158:52 - as 0 and we gave a condition i less than
158:55 - 5 that
158:56 - means it will not run when i exceeds 5
159:00 - okay or becomes 5 then we wrote another
159:02 - for loop and we took another variable j
159:04 - is equal to 0
159:05 - and j less than equal to i that means in
159:08 - first iteration the value of
159:10 - i was zero and the value of j was also
159:13 - zero okay so here j less than equal to i
159:16 - that means zero less than equal to zero
159:18 - this is true and then
159:19 - j plus plus so it will print a star okay
159:23 - then the value of j will increase and it
159:25 - will become
159:26 - 1 so now this statement will become
159:29 - false because j is 1 and i is still 0
159:32 - then it will
159:32 - exit out of this loop and then it will
159:35 - print a line
159:36 - then that means after printing one star
159:38 - it will print another line
159:40 - okay and then it will come back to this
159:42 - for loop now
159:44 - the value of i is 1 is still less than
159:47 - 5 okay and then it will come into this
159:49 - for loop
159:50 - so now the value of j is 0 and the value
159:52 - of i
159:53 - is 1 okay so 0 is less than
159:58 - equal to i it is true it will print
160:01 - a star then again and j will become
160:04 - 1 this condition is still true because 1
160:08 - is less than equal to
160:09 - 1 right so it will print another star
160:12 - next to
160:12 - the previous star so it will print 2
160:14 - stars let us see in the serial monitor
160:18 - right after printing this star it will
160:20 - print this star
160:21 - then the value of j will become 2 and
160:24 - then
160:25 - this condition will become false because
160:26 - i was still 1
160:28 - then it will exit out of that loop and
160:30 - print another line
160:31 - it will print another line here okay
160:34 - then i will become
160:35 - 2 then it will go back in this loop and
160:38 - it will execute
160:39 - the loop three times 0 1 and 2.
160:41 - similarly it will
160:42 - go until and unless this condition also
160:45 - becomes false
160:46 - okay so i can understand it must be
160:48 - really tricky right now
160:49 - if you just go back and listen to what i
160:51 - said once again you will understand that
160:53 - and in case you don't understand you can
160:55 - always drop a comment or message us
160:57 - so in the next video we will look at
160:58 - another kind of loop structure which is
161:00 - known as a while loop see you in the
161:02 - next video
161:03 - in this video we will look at while loop
161:05 - a while loop is also an entry controlled
161:07 - loop an
161:08 - entry control loop is a loop in which
161:09 - the condition is checked
161:11 - beforehand before executing the
161:13 - statements which are written in the
161:15 - loop body this is the same thing which i
161:16 - told you for the for loop
161:18 - all right but the difference between the
161:20 - while loop and a for loop is
161:21 - in for loop we know how many times we
161:23 - want to run the loop but in while loop
161:25 - we don't know how many times we want to
161:27 - run the loop it is based
161:28 - just on the condition if some condition
161:30 - is true the while loop will
161:32 - continue to run endlessly and the moment
161:34 - the condition becomes false
161:35 - the code control will move out of that
161:38 - while loop
161:38 - that condition can be based on some
161:40 - variable or some external conditions
161:43 - like some values given by the sensor
161:45 - let's say we are making a robot
161:47 - and we are using a distance sensor we
161:49 - can use a while loop or to move forward
161:51 - unless the distance is less than some
161:53 - quantity
161:54 - and we want to exit out of that by loop
161:56 - as soon as the distance
161:58 - gets lesser than that specified value so
162:00 - that the robot can avoid the collision
162:02 - from any obstacle in front of it right
162:04 - there can be many more while loop uses
162:06 - but we will begin with
162:07 - the basics we will use our traditional
162:09 - method of printing variables
162:10 - on the serial monitor so let's see that
162:13 - so we have our sketch here
162:14 - let's use a while loop to print a table
162:16 - of two
162:17 - let's say we'll start with an integer
162:20 - which we will use as a condition
162:21 - int multiple is equal to one
162:25 - let's start with 1 while multiple
162:28 - is less than equal to 10
162:32 - okay serial dot
162:35 - print ln multiple
162:40 - into two okay and let's increment the
162:44 - multiple
162:46 - all right let's see if we are able to
162:48 - print the table of two
162:50 - oops we forgot to write serial dot begin
162:52 - always write serial dot begin
162:54 - whenever you have to communicate with
162:56 - the computer let's upload that again
162:59 - right 2 4 6 8 10 12 until 20.
163:03 - this is a table of two now let's print a
163:05 - table of a complicated number
163:07 - let's say 73 yep this is a table of 73
163:12 - so now let me show you how a while loop
163:14 - can run endlessly if the condition is
163:16 - true
163:16 - let us just make it true directly this
163:19 - will become
163:20 - an endless loop right now it will not
163:21 - just print numbers from one to ten it it
163:23 - will just print
163:24 - them endlessly let's use the easy number
163:26 - so that we can verify
163:28 - it won't stop at all let's see
163:31 - look at the speed it is printing all the
163:33 - even numbers
163:35 - can you see that let's have a look 2 4 6
163:38 - 8 10 12
163:39 - 14 16 as you know there's no upper limit
163:42 - to the numbers so it will just go on
163:43 - endlessly
163:44 - until the limit of int expires
163:47 - so i have another example to show you
163:50 - how a statement controls
163:51 - a while loop how it prevents the while
163:53 - loop from running when it is false
163:55 - and how it initiates the while loop when
163:57 - it becomes true so in the white setup i
163:59 - have written serial.begin 9600 to
164:00 - initiate the communication and then i
164:02 - have void loop
164:03 - i have declared a static variable a test
164:05 - variable which is
164:06 - going to control our condition i have
164:08 - defined it as static because
164:10 - i don't want to reset the value of test
164:11 - variable with each run uh if you have
164:13 - any confusion regarding the static part
164:15 - you can check
164:15 - the dedicated video which we have made
164:17 - to explain the static qualifier for a
164:19 - data type
164:19 - now while loop we have started the while
164:22 - test condition greater than five
164:24 - that means right now the test variable
164:26 - is zero
164:27 - as we have not initialized it so zero is
164:29 - the default value so zero is greater
164:31 - than 5
164:32 - that means this is false so this
164:33 - statement should not execute okay but
164:35 - in the next line we have written
164:37 - variable plus that means we want to
164:39 - increment that variable
164:40 - the variable value will become 1 and it
164:42 - will print the value
164:43 - of the test variable then we are waiting
164:46 - for one second so that we can observe
164:48 - the changes which are happening and then
164:49 - again it will come here
164:51 - it will see while test variable greater
164:53 - than 5 that means it is still false
164:55 - because test variable's value
164:56 - is 1 right now and it is still false so
164:58 - it will still not go into
165:00 - this loop then it will become 3 then it
165:02 - will become 4 then it will become 5
165:03 - at 5 also this will not become true
165:05 - because we have not used the equal to
165:07 - sign
165:07 - and when it becomes 6 this condition
165:10 - will become true
165:10 - and this will start printing let's see
165:13 - that
165:15 - right one two three four
165:19 - five six and we are in the while loop
165:22 - now
165:22 - okay this while loop is repeating
165:24 - endlessly because we have not specified
165:26 - any exit condition
165:27 - and please note while this is in while
165:29 - loop these statements are not being
165:30 - executed
165:31 - the control of code is looping here only
165:34 - since this loop is looping infinitely
165:36 - we might want to use some break
165:38 - conditions we will learn about
165:40 - break and continue statements in coming
165:42 - videos but in the next video
165:44 - there is one more loop which is known as
165:45 - a do while loop we'll learn about
165:47 - do while loop in the next video we'll
165:49 - take a look at the last
165:51 - loop control structure which is the do
165:53 - while loop the first thing which i want
165:54 - to tell you about the do while loop is
165:56 - it is
165:56 - very very similar to the while loop it
165:59 - works exactly like the while loop but
166:00 - the only difference is
166:02 - it executes at least once and that is
166:04 - why it is the exit control loop
166:06 - in exit control loop the statements are
166:09 - first executed
166:10 - and then the condition is checked while
166:12 - in while loop first the condition was
166:13 - checked if the condition was true then
166:15 - the statements would execute
166:16 - in this first the statement block will
166:18 - execute and then it will check the
166:20 - condition
166:20 - if the condition is false it will exit
166:22 - out of the loop and not execute those
166:24 - statements further
166:25 - and if the condition is true it will go
166:27 - back and execute the statements once
166:29 - again
166:30 - if you look at the flow the first thing
166:31 - which happens is it executes the
166:33 - statement block then it checks the
166:34 - condition
166:35 - if it is true then it will go back
166:36 - otherwise it will come out of that loop
166:38 - a do while loop is also used when we
166:40 - don't know how many times an action has
166:42 - to be repeated but
166:43 - we are sure that it should run at least
166:45 - once in those cases
166:47 - we use a do while loop a do while loop
166:48 - is used where the statement has to
166:50 - execute once otherwise we won't be able
166:52 - to take decision for example we are
166:54 - expecting a user to give us some input
166:56 - and we want him to give
166:57 - a positive integer as an input but for
166:59 - example he is trying to give a negative
167:01 - input so we can write a do while loop
167:03 - while the user gives us the negative
167:04 - input
167:05 - keep telling him to give us the positive
167:07 - input and the moment he gives us the
167:09 - positive input
167:10 - will break out of that loop okay so let
167:12 - us see a basic example of using a
167:14 - do-while loop
167:15 - like we did earlier we printed a table
167:17 - of two
167:18 - we'll again print the table of two using
167:20 - a do-while loop instead of a while loop
167:22 - so let us see how we do that we have
167:24 - initialized a variable known as multiple
167:26 - and initialized it with
167:27 - one okay we'll write cl dot begin to
167:29 - start the communication with computer
167:31 - so we'll write do then the bracket open
167:34 - we'll write cl dot printenet multiple
167:36 - into two then bracket close and
167:38 - semicolon and then we will
167:39 - increment the multiple and then we will
167:42 - write while
167:43 - multiple is less than equal to ten that
167:45 - means this condition is true
167:46 - until the multiple becomes 10 the moment
167:50 - it becomes 11 this condition will become
167:52 - false and this
167:53 - statement will stop executing so we'll
167:55 - get a table of 2 here
167:56 - let us see what happens right so we got
167:58 - a table of 2
167:59 - 2 4 6 8 and then so on till 20.
168:02 - i have another example for do while loop
168:04 - so that we can understand how exactly it
168:06 - works
168:07 - so in the white setup we have written cl
168:08 - dot begin 9600 so that we can
168:10 - communicate with the computer in while
168:12 - loop i have initialized a static into
168:14 - variable which is known as test variable
168:16 - we have written do then we are writing
168:18 - cl.println this
168:20 - will print at least once because a do
168:22 - while loop will execute the statements
168:24 - at least once so ok we have written this
168:26 - statement
168:27 - and we have written a delay of 500
168:28 - milliseconds so that we can observe what
168:30 - is happening
168:31 - otherwise you know serial monitor prints
168:33 - things really fast so now we have
168:34 - written while
168:35 - test variable is greater than 5. while
168:37 - the test variable is less than 5
168:39 - this statement should not execute but it
168:41 - will
168:42 - execute at least once then we have
168:44 - written test variable plus plus that
168:46 - means we are incrementing the value of
168:48 - text variable
168:49 - here we are printing the value of test
168:51 - variable and we have given a delay of
168:52 - 500 milliseconds so that we can
168:54 - observe what is happening okay so now
168:56 - when we open the serial monitor
168:58 - what we will see is that this statement
169:00 - will execute once then the test variable
169:02 - will increment
169:04 - okay and then the value of test
169:06 - increment will print then it will go
169:07 - back
169:08 - into do while loop and print this
169:09 - statement once again
169:11 - because in do while loop it has to
169:13 - execute once at least
169:14 - then while it will check the condition
169:17 - it is false then it will come back here
169:18 - it will increment the variable and it
169:20 - will
169:21 - repeat till the test variable becomes
169:23 - greater than 5
169:24 - okay the moment it becomes greater than
169:26 - 5 so this do while loop will keep on
169:28 - repeating
169:29 - let's see how it happens let us upload
169:31 - the code first
169:33 - right this will get printed at least
169:35 - once and this is printing again and
169:37 - again
169:38 - but now just see the loop control didn't
169:40 - come out of this okay because this
169:41 - condition is true now it will go back
169:43 - again
169:44 - and execute the statement these
169:45 - statements are not being executed
169:47 - because
169:47 - it is still in do while loop so i hope
169:50 - you understood this
169:51 - do while loop so now i have a really
169:52 - interesting illustration
169:54 - which you can see on the screen to
169:55 - explain the difference between a while
169:56 - loop and a do while loop and i think it
169:58 - is a really good example
169:59 - to show the difference between the two
170:01 - every one of you must have seen
170:03 - the roadrunner show and we see this guy
170:06 - was using the while loop
170:07 - while this guy was using the two while
170:09 - loop let's discuss in the comments
170:11 - who was using these control loops in a
170:13 - proper manner
170:14 - if you remember i told you that we might
170:16 - have to break out of the loops based on
170:19 - certain conditions
170:20 - like for example in an endless loop we
170:22 - might need to do something
170:23 - to stop that loop so the break keyword
170:25 - is used to exit
170:27 - from a loop by bypassing the normal loop
170:30 - condition which we have specified
170:31 - let's see how we do that so this is the
170:33 - modified version
170:34 - of the code which we used to print the
170:36 - table of two okay
170:38 - this is the regular while loop which is
170:40 - running okay we are printing
170:41 - a table of two here and we are
170:43 - incrementing the multiple here
170:45 - but now we have specified a break
170:47 - condition okay
170:48 - like if multiple is equal to five then
170:51 - we will write breaking out of the loop
170:53 - now
170:53 - and we will break out of the loop by
170:55 - just using this keyword
170:57 - let's see what happens all right so we
171:00 - printed it
171:00 - till four two 4 6 and 8
171:04 - and then it breaked out of loop although
171:06 - it should have run till
171:07 - 10 it should have printed till 20. so if
171:09 - i comment this break condition
171:11 - and upload the code again so we got
171:15 - the entire table so this is the basic
171:17 - use of breaking out of the loop
171:19 - now let's see if we are inside an
171:21 - endless loop
171:22 - let's say while true this is an endless
171:25 - loop
171:26 - we are writing serial dot println
171:29 - endless loop okay
171:32 - and we will increment the multiple
171:35 - multiple
171:36 - plus plus okay let's say
171:39 - i want to exit after printing it 10
171:42 - times
171:43 - if multiple greater than
171:46 - 10. we'll just break out of it
171:50 - let's see what happens
171:54 - okay we forgot to close the white setup
171:58 - bracket
172:00 - right if we didn't use this break
172:03 - statement
172:04 - it would ultimately keep running
172:05 - endlessly let's see that
172:07 - quickly okay can you see that it's
172:10 - printing endlessly
172:11 - so i hope you understand we use a break
172:14 - statement wherever we want to
172:16 - break out of the loop so in the next
172:18 - video we will see the continue keyword
172:20 - and we will also compare the break and
172:22 - continue keywords
172:24 - like we saw in the break statement that
172:26 - whenever we use it
172:27 - code control instantly moves out of the
172:29 - loop entirely discarding all the
172:31 - remaining iterations of the loop
172:32 - right like we were trying to print
172:34 - numbers from 1 to 10 and when we used if
172:36 - our variable is equal to 5 then break
172:38 - out of the loop so it entirely skipped 6
172:40 - 7 8 9 10 but in some situations we might
172:42 - want to use the remaining iterations
172:45 - right so in that case the continue
172:47 - keyword helps us with that
172:48 - the continue statement skips the rest of
172:50 - the current iteration of the loop and it
172:52 - continues by checking the conditional
172:54 - expression of the loop and proceeding
172:56 - with the subsequent iterations
172:58 - that means it won't skip the rest of the
173:00 - iterations
173:01 - let us see how it works so we have void
173:03 - setup serial.begin 9600 as usual
173:05 - then we are writing for loop to print
173:08 - numbers from
173:09 - 0 to 10 right because we have
173:11 - initialized i with 0 and we have used
173:13 - less than equal to sign
173:14 - so that means both the ranges are
173:15 - inclusive so it will print 0 to 10 and
173:18 - then we are incrementing the
173:19 - variable now notice we have used if i is
173:22 - equal to 5 then continue whenever we use
173:24 - the continue keyword
173:25 - it would straight away take us to the
173:27 - condition pack and it would skip all the
173:29 - statements which are written after that
173:30 - so let us see what happens
173:34 - so we see 0 1 2 3 4 5 is missing
173:37 - and 6 7 8 9 and 10. so it skipped the
173:40 - iteration in which i was equal to
173:42 - 5 right but it did not skip the rest of
173:44 - the iteration if we had used the break
173:50 - keyword it would have skipped the rest
173:53 - of the iterations
173:54 - it stopped at 4 only let me switch back
173:57 - to continue here again and let me
173:59 - explain the difference between
174:00 - the break and continue statement let's
174:03 - say we write a statement here
174:05 - serial dot println end of our
174:08 - for loop this is the end of our for loop
174:11 - that means after
174:12 - our for loop completes this statement
174:14 - should print regardless of anything so
174:16 - when we use continue
174:17 - we'll see
174:20 - the loop was going 0 1 2 3 4 and when
174:24 - the value became 5
174:25 - it jumped back to check the condition
174:27 - okay
174:28 - so in this way it had to skip this
174:30 - statement it cannot
174:31 - execute the statement right so when it
174:33 - became six again then it will start
174:35 - printing it again can you see that
174:36 - and after completing the loop it came
174:39 - and printed this line
174:40 - when we use break
174:44 - then the control will directly come here
174:46 - whenever the break statement is
174:47 - encountered
174:48 - the code control goes directly out of
174:50 - the loop can you see that after printing
174:52 - 4
174:52 - it printed end of for loop so we may
174:54 - have different situations to use
174:56 - continue and break statement and we have
174:58 - to make sure we use them correctly
175:00 - so in the next video we will look at the
175:01 - last keyword
175:03 - which is return so see you in the next
175:04 - video the
175:06 - return keyboard the return keyword would
175:08 - probably the easiest thing
175:09 - to learn right now the only function of
175:11 - the return keyword is to terminate the
175:13 - function
175:14 - no matter what it doesn't take any
175:16 - conditions it doesn't take any
175:17 - limitations or anything whenever the
175:20 - code encounters the return keyword it
175:22 - would just
175:22 - terminate the function there are two
175:24 - ways to use a return
175:26 - we will be covering the first way to use
175:28 - the return keyword we will cover the
175:29 - second way in the coming videos
175:31 - let us see how we use it in one manner
175:35 - all right so i have this code written
175:36 - here okay in the white loop
175:38 - what i'm trying to do is i'm trying to
175:40 - print line one line two line three and
175:42 - line four
175:42 - okay and then i have a for loop which
175:44 - prints number from zero to
175:46 - nine right let's see if it is working
175:48 - properly
175:51 - yes it is working as expected line one
175:53 - nine two nine three nine four and zero
175:55 - to nine
175:55 - right so now i want that anything return
175:59 - beyond this point
176:00 - should not execute so i'll just write
176:02 - return so we'll see what happens
176:05 - it will just print line one and line two
176:07 - it will go back here and execute this
176:09 - lines only
176:10 - anything written after return will not
176:12 - execute
176:13 - okay now you may want to remove it from
176:15 - here
176:16 - and use it here right let's see what
176:19 - happens
176:24 - it will just print zero because when the
176:26 - value of i was zero
176:27 - it printed zero then it encountered
176:29 - return so it will just terminate this
176:31 - function
176:32 - and you see that it is not printing one
176:34 - two three four five six seven eight nine
176:35 - because return keyboard just terminates
176:37 - the function
176:39 - all right so now i will see you in the
176:41 - next video so the next topic in our
176:42 - course is
176:43 - switch case like if statements switch
176:45 - case controls the flow of programs by
176:47 - allowing us to specify different code
176:49 - that should be executed in various
176:51 - conditions
176:52 - in particular a switch statement
176:53 - compares the value of a variable
176:55 - to the value specified in the case
176:57 - statements when a case statement is
176:58 - found whose value
177:00 - matches that of the variable then the
177:01 - code in that case statement
177:03 - is executed so let us see the syntax of
177:05 - switch case first of all we write switch
177:07 - then our open bracket then we write the
177:09 - variable which has to be compared
177:11 - when we close the bracket then we start
177:12 - a curly bracket then we write
177:14 - case space label 1 where label 1 is
177:17 - the number which has to be compared to
177:19 - the variable okay then we write
177:21 - colon note that this is a colon not a
177:23 - semicolon
177:24 - okay then we write the statements all
177:26 - the statements which we want to be
177:27 - executed
177:28 - when label1 is equal to the variable we
177:30 - write those statements
177:31 - in this block then we write break
177:34 - semicolon
177:35 - then we write case another label then
177:38 - all the statements then we write break
177:40 - we can write as many labels we want in
177:42 - our code and the last statement which we
177:43 - write is default
177:44 - colon all the statements break when none
177:46 - of the labels is true then the default
177:48 - statement is executed
177:50 - if we don't write default and none of
177:51 - the statement is true then nothing will
177:53 - happen
177:53 - all right so now let us see the flow of
177:55 - code in switch case here is the switch
177:57 - conditional statement
177:58 - then it will see case one if it is true
178:01 - it will execute the statements written
178:02 - in that block if it is false
178:04 - it will check case 2. if it is true then
178:06 - it will execute the
178:07 - statement if it is false it will go to
178:09 - case 3
178:10 - okay and so on if none of these are true
178:13 - it will
178:13 - automatically jump to default and it
178:16 - will execute the default statements
178:18 - and after executing one of these
178:20 - statements the flow will go on to the
178:22 - statement which is written
178:23 - after the switch let's see in the coding
178:26 - right
178:26 - and the white setup we have written
178:27 - serial dot begin as usual then i'm
178:29 - writing int
178:30 - x is equal to 5 here x is the variable
178:33 - which we want to be
178:34 - compared okay then i'm writing switch
178:36 - then x here because i want
178:38 - x to be compared then i'm writing case 1
178:40 - colon
178:41 - serial dot println choice 1 break
178:43 - similarly i've written 6 cases now can
178:45 - you guess what statement will be printed
178:47 - here since
178:47 - x is equal to 5 my guess is choice 5
178:50 - should be printed
178:51 - because it is not equal to 1 it is not
178:53 - equal to 2 it is not equal to 3 and so
178:54 - on
178:55 - ok so let us see what happens
178:59 - right as expected it is printing choice
179:02 - five now if i change
179:03 - the value of x to let's say
179:06 - one so now choice one will be printed
179:10 - right now in case if we don't write
179:14 - break here
179:15 - the purpose of writing break here is
179:16 - that we want to exit as soon as one
179:18 - condition becomes true
179:20 - let's say if we don't write break here
179:22 - so it will continue to execute the
179:24 - statements
179:24 - since x is equal to 1 so now it should
179:26 - print choice one choice two and choice
179:29 - three
179:29 - okay because there's another break after
179:31 - choice three right choice one choice two
179:33 - choice three
179:34 - that's the purpose of break now let's
179:36 - see one more example without break
179:38 - let me use x is equal to 3
179:42 - then it will start from here will not
179:44 - use break here
179:47 - it should print choice 3 choice 4
179:50 - and choice 5.
179:54 - right as expected now the important
179:56 - thing which you need to notice is
179:57 - the variable which we use here and the
179:59 - labels which we use here
180:01 - should be of int or character type if
180:03 - you use float or if you use another
180:05 - array type
180:06 - it will just throw an error this switch
180:08 - case is a really handy tool if you want
180:10 - to write a lot of if else statements
180:12 - instead of that you can just write case
180:14 - 1 case 2 case 3.
180:15 - we can also specify ranges in case
180:17 - statements and how we do that
180:19 - let's say we want to take a range of 1
180:20 - to 10. we'll write 1
180:22 - we'll write three dots and then 10
180:26 - okay then let's say 11 space
180:30 - to 20 okay let's say
180:34 - 21 3 dots to 30
180:38 - then we write 31 space you have to write
180:40 - a space there okay
180:41 - if you don't write a space you will get
180:43 - an error so let's see these cases only
180:47 - let me write break again okay so now let
180:50 - us see
180:50 - three what will happen it will write
180:53 - choice 1
180:55 - right now for example if i take 35
180:58 - it should write choice 4
181:02 - right so i guess you got an idea how
181:05 - easy it is
181:06 - right instead of writing if in else we
181:08 - can use
181:10 - switch case so i hope you understood
181:11 - this topic so i'll see you in the next
181:13 - video
181:14 - so at this point we are in a position to
181:17 - study about the two remaining data types
181:20 - which are arrays and strings these two
181:23 - data types are also very commonly used
181:25 - in the projects which are made using
181:27 - arduino
181:29 - so in this video we will look at arrays
181:32 - an array is a variable which can store
181:34 - multiple values of same type
181:36 - let's say we have a compartment of a
181:37 - defined size which has multiple
181:39 - containers in it
181:41 - like this and those containers can store
181:43 - same kind of
181:44 - information let's see this by an example
181:46 - to declare an array
181:48 - we first write the type of data which we
181:50 - are going to store in it
181:52 - let's say int then we write the name of
181:54 - that array
181:55 - let's say my array okay and then we
181:58 - write
181:58 - a square bracket and we write a number
182:01 - inside it
182:02 - that number denotes the size of that
182:04 - array
182:05 - okay let's say five so when we write
182:07 - this the compiler will create a space in
182:09 - memory where you can store
182:11 - those five integers okay now let's store
182:14 - some values in this array to do that we
182:16 - write equal to
182:17 - then we write curly bracket and then we
182:20 - will write five
182:21 - values which we want to store in it
182:22 - let's say one two three
182:25 - four and five semicolon each value
182:28 - is separated using a comma and each
182:30 - value inside
182:31 - an array is known as element of array
182:34 - okay and each element has an address of
182:37 - its own
182:39 - that address is known as an array index
182:42 - that index starts from zero okay let me
182:45 - show that to you again
182:46 - let's say we have an array of size 10 so
182:48 - 0 is the first index and 9
182:50 - is the last index okay and the value
182:54 - which is present at that
182:55 - index is known as element let's see that
182:58 - again encoding so this is the zeroth
183:00 - element
183:00 - and this is the fourth element okay
183:04 - now let's try to access them how do we
183:06 - access them serial dot
183:08 - println my array
183:12 - and then the value which we want to use
183:14 - let's say
183:15 - 2 can you guess what will be printed
183:17 - here tell me
183:22 - 0 1 and 2 so 3 should be printed
183:26 - so 3 has been printed here for the first
183:28 - time users it must be really confusing
183:30 - that why it was started from 0. it is
183:32 - very simple
183:33 - because computer counts from 0. while
183:36 - humans are in a habit of counting from 1
183:38 - that's why we are finding it a little
183:40 - confusing now let's
183:41 - change the values which are present
183:43 - inside this we'll take bigger and
183:45 - complicated values
183:46 - let's say 745 74
183:49 - 259 85 and 421
183:52 - these are the random values which i have
183:54 - chosen now if we try to print the second
183:56 - element
183:56 - it will print 259 because 259 is present
184:00 - at
184:01 - second index okay while zero is this one
184:04 - first is this one second is this one
184:06 - third is this one and fourth is
184:08 - this one now we can alter these elements
184:11 - as well
184:12 - directly now let's say i want to change
184:14 - the value which is present at
184:15 - second index so we'll write my array
184:19 - 2 is equal to let's say
184:22 - 7 0 6 okay now the value of 259
184:26 - will be replaced by 706 let's see
184:30 - let's print that again now it should be
184:33 - printing
184:34 - 706 right we can alter any value for
184:37 - that matter
184:38 - we can do our regular calculations on
184:40 - array elements as well
184:41 - let's say i have one variable in
184:45 - my variable okay
184:48 - now let's say i want to add some
184:50 - elements and store that value in my
184:51 - variable
184:52 - i will write my array okay 0
184:56 - plus my array 1
184:59 - plus my array 2.
185:04 - okay so now my variable will be holding
185:08 - the sum of 7 45 74 and 249
185:12 - not 249 706 because we have altered it
185:15 - here
185:16 - so let's try and print my variable you
185:19 - can check on your calculators
185:20 - if the answer is correct or not
185:24 - so the sum of 745 74 and 706 is
185:27 - 15 25 1525 okay
185:31 - similarly we can also do multiplication
185:33 - subtraction division etcetera all the
185:35 - operators can be used here
185:36 - okay now we can also use elements of
185:39 - these arrays
185:39 - in for loops as well now let's use a for
185:42 - loop to print all the elements
185:44 - inside my array so how we will do that
185:46 - for
185:47 - int i is equal to 0
185:51 - i less than 5
185:54 - because size of my array is 5 then i
185:58 - plus plus okay so now what will we do is
186:01 - serial dot println my array then i
186:05 - okay so it should print all the elements
186:07 - which are present inside this array
186:09 - so it is here
186:12 - 745 74 706
186:16 - 85 and 421 right you can compare them
186:19 - here 745 74 706 because we updated the
186:23 - value here
186:24 - then we have 85 then we have 421 okay
186:28 - now can you tell me what will we do if
186:29 - you want to add 5
186:31 - to all the elements of my array
186:35 - okay so now let's say we'll write
186:38 - for
186:41 - i is equal to 0 i less than
186:45 - 5 then i plus plus will take my array
186:49 - i is equal to
186:52 - my array i write
186:55 - plus 5
186:58 - so now 5 will be added to all these
187:01 - elements
187:03 - so now 5 has been added so now let's
187:06 - print this again
187:09 - if we print this again so now we will
187:12 - see
187:12 - 5 has been added to all the elements
187:15 - let's see we are here it is printing
187:18 - from here right
187:19 - 745 plus 5 is 750 74 plus 5 is 79
187:22 - then 706 plus 5 is 7 11
187:26 - 85 plus 5 is 90 421 plus 5 is 426
187:30 - okay this way we have added five to all
187:32 - the elements now we can take
187:34 - some of all the elements in the array as
187:36 - well how will we do that
187:37 - let's say int sum is equal to zero we
187:40 - have initialized it by zero and for
187:42 - int i is equal to zero
187:46 - i less than five then i plus plus
187:50 - okay what will we write is sum is equal
187:53 - to
187:54 - sum plus my array
187:57 - i okay and after that we'll just print
188:02 - sum right it is printing 2 0
188:06 - 5 6. so you can check on your
188:07 - calculators if these values are
188:10 - summing up to 2 0 5 6 but just make sure
188:13 - you don't add these values you add
188:14 - the new values the new value was 750
188:18 - 79 7 11 90 and 426
188:22 - these were the new values these okay if
188:24 - you add these values you will get
188:25 - two zero five six so now we have learned
188:27 - about how to use arrays
188:29 - how to access the values in an array and
188:32 - how to manipulate those values
188:34 - what we saw till now in this video were
188:36 - one-dimensional arrays
188:38 - that means they just have one dimension
188:40 - now there can be
188:41 - multi-dimensional arrays as well like
188:43 - two-dimensional arrays three-dimensional
188:45 - arrays
188:46 - like you can see here this pink box
188:49 - is a two dimensional array
188:53 - it has rows as well it has columns as
188:55 - well
188:56 - okay and then we have three dimensional
188:58 - arrays as well
189:00 - like it has depth as well it has rows it
189:03 - has
189:03 - columns and it has depth as well
189:06 - multiple two dimensional arrays
189:08 - make three dimensional arrays i just
189:10 - give you one use case
189:12 - where two dimensional arrays are used
189:14 - for example we want to store
189:16 - the pixel data image pixel data of a
189:18 - black and white image
189:19 - okay so we use two dimensional arrays
189:23 - and let's say we have to store pixel uh
189:26 - image pixel data
189:27 - of a colored image which also has rgb
189:30 - values
189:31 - so we use a three dimensional array for
189:33 - that in this video we will talk about
189:35 - strings strings are basically a sequence
189:37 - of characters
189:39 - whatever we write or you can say
189:41 - whatever messages which we write in our
189:43 - code
189:43 - are all strings let us see in the code
189:46 - the easiest way to spot
189:48 - strings is that you will find them
189:49 - written inside double quotes
189:51 - for example serial dot println
189:54 - this is my string okay
189:57 - this is my string is the message which
189:59 - is going to be printed on the serial
190:00 - monitor
190:01 - but in itself this is my string is
190:04 - a string okay now technically speaking a
190:07 - string is nothing
190:08 - but an array of characters and as we
190:11 - have already studied
190:12 - arrays it would be really easy for you
190:14 - to understand so now to declare a string
190:16 - we write char in the name of the string
190:19 - which we want
190:20 - for example i have written str 2 then as
190:22 - we start
190:23 - an array by a square bracket and a
190:25 - number inside it we similarly write it
190:27 - for string as well now example
190:30 - i want to write ashish which has a s h i
190:34 - s h
190:34 - as characters in it okay and the number
190:37 - of characters in ashish are
190:38 - 6. okay so what we will do is we'll
190:41 - always take one additional number
190:43 - to declare our string because an ending
190:45 - to the string is denoted by a special
190:48 - character which is known as a null
190:49 - character
190:50 - okay the compiler automatically takes
190:52 - that into consideration when you write
190:54 - a string or when you declare a character
190:56 - array okay
190:57 - in this case compiler will see okay the
190:59 - person is trying to declare a character
191:01 - array
191:02 - which has these characters so it will
191:04 - automatically add a null character at
191:06 - the end so now when we print this line
191:08 - it will print ash ish on the serial
191:10 - monitor
191:12 - okay another way is to declare
191:15 - that null character explicitly for
191:17 - example i will write
191:18 - chart str3 then 7
191:22 - is equal to ash ish and then
191:25 - a null character this is the null
191:26 - character which is denoted by a
191:28 - backslash and a 0.
191:30 - this way the compiler identifies that
191:33 - okay
191:33 - this string has come to an end okay so
191:36 - it can differentiate between one or more
191:38 - strings
191:38 - without this character there will be
191:40 - problems the compiler may think that
191:42 - the another string which is coming after
191:44 - this string is a part of that same
191:46 - string there has to be some way
191:48 - to differentiate between different
191:49 - sentences okay so that's why we use
191:52 - a null character which is backslash zero
191:54 - another way to declare a string is
191:56 - we write char str4 which is the name of
191:59 - the string
192:00 - and then we write square brackets
192:02 - without a number inside it
192:04 - the compiler is smart enough to
192:05 - dynamically allot a number to this
192:08 - bracket it will see okay the user has
192:10 - written a string
192:11 - which has ash ish inside that it will
192:14 - automatically
192:15 - allot a memory of seven to this string
192:17 - because ashish has six characters in it
192:20 - and including a null character it will
192:21 - become seven okay we can also write
192:24 - it like this str five seven ashish
192:28 - simply in double quotes we don't have to
192:30 - work this much
192:31 - it is also okay if you take a larger
192:33 - memory for a smaller string
192:35 - but it is not okay to take a smaller
192:37 - size string let's say five
192:39 - for a longer okay now you will see it
192:41 - will only print five characters
192:43 - and then there is another way we will
192:45 - talk about it shortly but right now let
192:46 - me comment this out okay
192:48 - we'll just upload this code and we will
192:50 - see what we are getting
192:53 - all right so this is my string then it
192:56 - wrote ashish
192:57 - for this ashish for this ashish
193:00 - for this again
193:04 - and it printed it till here okay we
193:07 - forgot to write
193:08 - serial dot print ln
193:12 - for str
193:16 - right it just skipped the last character
193:19 - because we didn't give
193:20 - necessary memory to it so according to
193:23 - me
193:23 - this is the best way to start writing
193:25 - strings because obviously you do not
193:27 - know how many characters your string
193:28 - will contain and obviously you don't
193:29 - want to spend that time
193:31 - to count those characters right the
193:32 - compiler is smart enough to calculate
193:34 - the size
193:35 - for you okay now there is another way
193:39 - to write a string which is by using
193:42 - a string class okay here
193:46 - let me just comment this out this is
193:49 - a string class we are up calling a
193:51 - string class and we have named
193:53 - str7 inside it and we have just written
193:56 - whatever we want
193:57 - inside that let's say ashish and when we
194:00 - print this
194:01 - it will straightaway print this ok
194:03 - what's the benefit of using a class is
194:05 - that it is a built-in class first of all
194:07 - and it has a lot of functions inside it
194:09 - and those functions can be like we can
194:11 - compare a string
194:13 - okay easily we're just writing string
194:15 - name dot
194:16 - equals if it is equals it will return
194:18 - true and similarly there are many more
194:20 - built-in functions inside the string
194:22 - class for example i can tell you we can
194:24 - print a character
194:25 - at a particular sequence for example i
194:27 - wrote str
194:29 - and then serial dot println str can
194:32 - at 0 so it will print a because
194:35 - at 0 position a is present similarly
194:38 - there are many more functions
194:39 - like or starting with ending with and
194:42 - there is a function like we can convert
194:43 - the entire
194:44 - string which is written in lowercase to
194:46 - uppercase
194:47 - and vice versa uppercase to lowercase
194:49 - okay we can convert integers into string
194:51 - we can convert
194:53 - strings into integers okay so you may be
194:56 - needing all these functions
194:57 - while we perform our experiments strings
194:59 - are used to contain
195:00 - information messages or error messages
195:02 - or any
195:04 - logs okay we can store them inside
195:06 - strings
195:07 - and we can also display strings on our
195:09 - serial monitor on the lcd display
195:11 - or any kind of display okay we will now
195:14 - understand
195:15 - what are functions a function is a set
195:17 - of statements that take inputs
195:19 - and do some specific computation and
195:21 - produces some output
195:23 - the idea is to put some commonly or
195:25 - repeatedly done tasks
195:26 - together and make a function so that
195:28 - instead of writing the same code again
195:30 - and again for different inputs we can
195:32 - call the function
195:32 - we'll understand what i just said as we
195:34 - progress in the video so before anything
195:36 - else
195:37 - let us first understand how to identify
195:40 - a function
195:41 - in the code whenever we see something
195:42 - like this like void
195:44 - name and then there are brackets then
195:46 - there is a curly bracket then there are
195:48 - some statements written
195:49 - and then there is a curly bracket again
195:51 - this is the basic structure
195:52 - of a function okay where void is
195:55 - the return type that means we start
195:57 - writing a function by telling the
195:59 - compiler the return type of that
196:00 - function
196:01 - where void means that function will not
196:04 - return
196:04 - anything now instead of white here we
196:07 - can use
196:08 - int boolean or float or anything for
196:10 - that matter
196:11 - whatever we want to return from the
196:13 - function then we write
196:15 - the name of the function we can name it
196:17 - whatever we want like we saw
196:19 - digital write or pin mode they were the
196:22 - functions
196:23 - and the name of that function was pin
196:25 - mode and
196:26 - digital write and then in the bracket we
196:28 - write
196:29 - parameters or some people call them
196:32 - arguments
196:33 - if there are no parameters or arguments
196:35 - to the function we just keep this
196:36 - bracket
196:37 - empty or if there are parameters then we
196:39 - specify those parameters how do we
196:41 - specify the parameters we will see in
196:42 - the next video okay
196:44 - so i'll just basically tell you how do
196:45 - we call a function now like this
196:48 - in the blink example we called pin mode
196:51 - function
196:51 - to call a function we write the name of
196:53 - the function along with the
196:55 - parameters of that function in pin mode
196:58 - led built in comma output was the
197:00 - parameter of this function
197:02 - right similarly we have called digital
197:04 - right here and the parameters of that
197:06 - digital right was
197:07 - led built in comma i these are the two
197:10 - parameters of digital write
197:12 - so in the built-in libraries of arduino
197:14 - pin mode and digital write must be
197:16 - defined somewhere
197:17 - that's why arduino is able to understand
197:20 - what this exactly means
197:21 - otherwise it won't be able to understand
197:23 - right okay so it has made us
197:25 - really easy that arduino guys have
197:28 - defined this function somewhere
197:29 - for us okay and we just have to call it
197:32 - now let me tell you the benefits of
197:34 - using the functions
197:35 - the first biggest benefit of using the
197:37 - function is it helps us to reduce the
197:39 - code redundancy
197:41 - what that means is for example we want
197:42 - to do certain tasks so we may
197:44 - write the statements again and again
197:46 - again and again so that would make the
197:48 - code unnecessarily bigger
197:50 - so what we can do is we can make a
197:51 - function and we just call that function
197:53 - whenever we want to
197:54 - do that task you will understand this
197:56 - point better when we write our own
197:58 - functions
197:59 - then the functions make the code modular
198:02 - and reusable
198:03 - what that means is for example we are
198:04 - making a robot there must be thousands
198:06 - of lines to make the robot
198:08 - go forward so what we can do is we can
198:10 - make a function to make the robot go
198:12 - forward and we can use that function
198:13 - whenever
198:14 - we want to make robot go forward and you
198:17 - have written the code to make the robot
198:18 - go forward so now you are trying to make
198:20 - another robot
198:21 - so you can use that same code for the
198:23 - another robot as well
198:24 - so that means it became modular and it
198:26 - became reusable
198:28 - then the other advantage of using
198:29 - functions is edit provides abstraction
198:32 - and aids teamwork for example you're
198:34 - working in a team of four so one person
198:36 - can write the code for robot to go
198:37 - forward one person can write the code to
198:39 - go backward
198:40 - one person can write the code to move
198:42 - right and left and one can
198:44 - write the code to make the robot jump
198:46 - okay so once these functions are written
198:48 - so they can together be used as one code
198:51 - all right so these are the advantages of
198:53 - using a function
198:55 - now in the next video we will learn how
198:57 - to write our own functions
198:58 - so you will understand these points in a
199:00 - better manner so i'll see you in the
199:02 - next video
199:03 - so let us now create our very own
199:05 - function we will create a customized
199:07 - function
199:07 - to blink the led okay so let's do this
199:13 - after void loop we will write void
199:17 - let's say the name of our function is my
199:22 - blink function okay since there are no
199:25 - parameters in this we will leave the
199:27 - bracket empty now
199:32 - so let us just cut this code from here
199:36 - and paste this exactly like this in my
199:39 - blink function
199:41 - okay so now we have created
199:45 - a customized blink function now let's
199:48 - try to
199:49 - call this function in void loop
199:54 - right
199:58 - this way we have called our function in
200:00 - the void loop
200:01 - all right so when we upload this code on
200:03 - arduino you will see
200:04 - exactly the same results all right so
200:06 - let us see this
200:07 - so let us compare both the codes with
200:09 - the help of a simulator
200:12 - all right so we had this code right this
200:15 - is the same blink code
200:17 - let's see how it is working right as
200:20 - expected
200:25 - the led at pin number 13 is blinking
200:28 - right so now
200:29 - let us replace the code which we have
200:31 - just written
200:34 - we will just take it as it is
200:47 - right
200:52 - so now let's start the simulation
201:03 - so i hope you got my point about
201:06 - creating our own functions
201:08 - but now most of you must be wondering
201:10 - what's the point of making this
201:12 - right yeah i agree with you there is no
201:14 - point of making a function for this
201:16 - small task right but you will find it
201:19 - useful
201:21 - when you're writing really huge programs
201:23 - or you want to customize this thing
201:26 - i will show you a customization right
201:27 - now all right
201:31 - so now let's say you have more than one
201:34 - leds which you want to blink in a row
201:36 - okay so with your existing knowledge
201:38 - what would you have done
201:39 - you would have done it like this
201:45 - so you would have repeated these lines
201:48 - of codes
201:51 - and just replaced the pin numbers here
201:55 - right and then you would have declared
201:58 - these pins as output right but now what
202:01 - we can do is
202:02 - we can make a customized function let us
202:04 - do that
202:08 - we are here
202:17 - so let us now make a new function void
202:21 - my
202:25 - custom led right
202:28 - now what we will do is we'll specify
202:32 - a parameters in which we can tell the
202:34 - compiler
202:35 - led pin number so for that we will write
202:39 - int pin number
202:43 - okay so this function is going to accept
202:47 - one parameter which is pin number right
202:50 - so now let's do this
202:54 - we have this code okay
202:58 - so now instead of led built in we will
203:01 - write
203:02 - pin here okay so automatically whenever
203:05 - we call this function
203:07 - with the pin specified the compiler will
203:09 - replace
203:10 - this pin number with the specified pin
203:12 - number okay
203:13 - so let's do this
203:19 - let us just confirm what pins we have
203:21 - used
203:24 - we have used nine seven and two
203:28 - okay nine seven and two
203:33 - so let us say int led one is equal to
203:37 - nine
203:38 - hint led two is equal to
203:42 - seven and int led three
203:46 - is equal to two right
203:50 - so now we just have to declare all these
203:53 - pins as output
203:54 - led one okay
203:59 - see
204:04 - all right now we'll just replace them
204:08 - like this since we have declared them as
204:11 - output
204:12 - now what will be do is we'll just take
204:14 - this function
204:18 - okay we'll write my custom led with pin
204:21 - number
204:22 - led one okay
204:26 - then again we'll call this function with
204:29 - led 2 right and again we'll call this
204:33 - function
204:35 - and we'll just pass led 3 this time
204:39 - okay let's see if this compiles or not
204:46 - yes it compiles successfully now let us
204:48 - see the simulation of this code
204:55 - right so we have this code here
204:59 - let us start the simulation okay can you
205:03 - see that
205:06 - yep it's working perfectly
205:10 - first the led one which is connected to
205:12 - pin number nine is blinking
205:13 - and then the led connected to pin number
205:15 - seven is blinking then
205:16 - the led connected to pin number two is
205:18 - blinking so now let us see
205:21 - one more time what exactly happened here
205:23 - okay so with the pin mode we have
205:25 - declared all the leds
205:26 - led one two and three and i'm sure you
205:28 - know how to do this we have done this
205:30 - many times till now
205:31 - okay so now we have created a function
205:34 - void
205:35 - my custom led with a parameter of pin
205:39 - if you wanted more parameters here we'll
205:42 - just write comma
205:43 - and then end let's say
205:48 - parameter 2 right
205:51 - so this way we can specify endless
205:53 - number of parameters in our functions
205:56 - but since we don't need them we'll not
205:58 - use them
205:59 - okay then we have started to define
206:03 - what this function will do which is it
206:05 - will blink the led
206:07 - okay which led will it blink the led
206:09 - which we have passed as the parameter
206:12 - okay because we have used pin here for
206:14 - example if you had
206:15 - declared number here instead of pin
206:19 - then you would have used number here
206:21 - instead of pin
206:22 - got my point so now since we have
206:24 - finished declaring our function
206:25 - now we can use it successfully we'll
206:27 - just take this function
206:30 - and we will call it here with the
206:32 - parameter so now we have called it for
206:34 - the first time
206:35 - with led1 now what will happen the
206:38 - compiler will see
206:39 - okay a function has been used which is
206:42 - my custom led
206:43 - with the parameter led1 so it will see
206:45 - the value of led 1
206:46 - which is declared as 9 okay so it will
206:49 - call my custom led with 9
206:51 - so the control will go to my custom led
206:54 - with pin 9
206:55 - and it will execute it with pin 9. once
206:58 - it is done executing it will come back
207:00 - it will see it has been called again
207:02 - with another
207:03 - parameter which is led 2 and the value
207:06 - of led 2 is
207:07 - 7 this time so it will go back and
207:09 - execute the function again
207:11 - with the value of 7 all right so this is
207:14 - the basic concept of
207:15 - function customization okay so instead
207:18 - of writing this code again and again
207:20 - with changed
207:20 - pin numbers we can just do this so i
207:23 - think all of you can agree with what i'm
207:24 - saying right now
207:26 - right one more thing which needs
207:28 - emphasis is
207:29 - i've used void here like i told you we
207:32 - use void whenever our function
207:34 - is not returning us anything okay so by
207:36 - the time you must have realized
207:38 - void loop and void setup are two
207:41 - functions of their own
207:42 - they are the main functions which are
207:44 - used by the compiler we have discussed
207:46 - about this
207:47 - earlier as well so now let us try to
207:50 - make another kind of function
207:51 - we'll open a new file
207:55 - and we will start writing our function
207:57 - first of all let's write serial.begin
208:00 - this is the most crucial thing to start
208:03 - communication with the computer
208:04 - okay so now let us try to write a
208:07 - function which would return us something
208:09 - okay so let's say it will return us an
208:11 - integer
208:12 - so we'll write in earlier we wrote void
208:15 - because we didn't want
208:16 - it to return something to us if you're
208:18 - not able to understand what returning
208:20 - exactly means you will just see that in
208:21 - a moment
208:23 - so we'll write in let's say we want to
208:26 - repeatedly calculate
208:27 - sums of two numbers okay or let's say
208:31 - sum of three numbers
208:32 - so we'll write in sum
208:37 - okay int a comma int
208:40 - b comma int c
208:43 - okay where a b and c are the three
208:46 - numbers which we want to
208:47 - take some off all right so now we will
208:50 - write a curly bracket
208:51 - and then we will write return a
208:54 - plus b plus c okay
208:58 - so whenever we call this function we'll
209:00 - get a value of a
209:01 - plus b plus c let's see how we get it in
209:04 - white loop or void setup you can use
209:06 - this function
209:07 - anywhere you want let's say we'll use
209:09 - this in
209:10 - white loop okay let's say
209:14 - we write int let's call it d
209:18 - okay equals to sum
209:22 - of 7 comma 8
209:25 - comma 9 all right
209:29 - and let's print
209:34 - the value of d okay
209:46 - so what should it print the sum of 7 8
209:48 - and 9
209:51 - which is 24 right we can use it again as
209:54 - well
209:55 - with the different set of values let's
209:57 - say
209:59 - we'll make another function int e is
210:02 - equal to
210:03 - sum 1
210:06 - comma 2 comma 3
210:10 - let's print this
210:22 - we should get six right
210:27 - so we're getting six 24 and 6.
210:30 - it's repeating as we have used it in
210:32 - while loop so you don't have to worry
210:33 - about that
210:35 - okay one thing which i want to tell you
210:36 - is you can use this function like this
210:38 - as well
210:39 - serial dot println
210:43 - directly in serial print sum
210:46 - 4 comma 5 comma 6 right
210:52 - just make sure to close all the brackets
210:55 - here we have closed the bracket of the
210:56 - function
210:57 - sum here we have closed the bracket of
210:59 - serial.println
211:00 - okay so this is called as calling
211:03 - function inside a function
211:04 - this is a very useful thing which we can
211:06 - do in programming
211:08 - but first of all let us see the result
211:10 - if it is working or not
211:16 - right so we are getting 15 here because
211:19 - this function call here
211:21 - is printing its value okay
211:24 - now we can have more than one functions
211:27 - in our code now let us declare another
211:29 - function which would return
211:30 - a boolean value let's say bool
211:34 - um now we are making a function to check
211:37 - if a person is tall or not based on the
211:40 - height we
211:41 - enter as the parameter all right so
211:43 - let's name it
211:44 - is tall okay
211:48 - and int height
211:51 - okay so this function's name is
211:54 - install and the parameter is height
211:58 - okay so we'll write if
212:02 - height is greater than
212:05 - 100 return true
212:09 - okay
212:12 - or else return
212:15 - false okay so this function will just
212:17 - return true
212:18 - if the entered height is greater than
212:20 - 100 and if it is less than 100 it will
212:23 - say
212:23 - false okay so now you will see how handy
212:27 - it becomes
212:27 - when you have to check height of
212:29 - multiple people okay
212:31 - so now let's call this in white loop
212:39 - here we have while loop so let's say
212:42 - serial dot print ln
212:48 - is tall let's say
212:51 - 123 okay
212:56 - now let's just comment out the print
212:59 - statements so that they don't interfere
213:02 - okay this function is still being used
213:05 - in int d and e so you can say these
213:08 - functions are working simultaneously
213:10 - so we are just checking is tall or not
213:12 - okay
213:14 - let's see before i open the serial
213:17 - pointer
213:18 - you can guess your values
213:21 - right it's printing one because it has
213:23 - returned true
213:26 - so now let us take another value which
213:28 - is less than
213:29 - 100 serial dot println
213:34 - is tall
213:38 - 20. so now we should get
213:44 - false
213:48 - so it would be printing 1 0 1 0 because
213:50 - 1 is for
213:51 - install 123 and 0 is for
213:54 - install 20. so let us see that
213:57 - right 1 0 1 0 one zero one zero one zero
214:02 - okay so if you have to check height of
214:04 - multiple people
214:05 - instead of writing this code again and
214:06 - again for that specific height
214:08 - you can just call this function and
214:10 - enter the height so you can see how much
214:12 - work you have reduced for yourself
214:14 - right by writing the functions so this
214:16 - was all about
214:17 - writing a custom function there is no
214:19 - upper level to the complexity of the
214:21 - code which you write in your functions
214:23 - you can write endless number of lines in
214:24 - this function
214:26 - okay like i told you in the introductory
214:28 - video there may be a thousands of lines
214:30 - which are responsible for making
214:31 - robot go forward so in that case we can
214:34 - write
214:37 - void move
214:41 - robot forward and we can just define our
214:45 - parameters here
214:46 - and we can just write our statements
214:50 - like this right
214:54 - and this is our function this block of
214:57 - code won't make your robot go forward
214:59 - i'm just giving you an example of how do
215:01 - we write functions
215:02 - okay so whenever we call move robot
215:05 - forward
215:05 - in void setup or in void loop so the
215:07 - compiler will take this function
215:10 - and it will execute that alright so in
215:12 - the next video we will take a deeper
215:14 - look at
215:15 - some of the inbuilt functions which the
215:16 - arduino makers have made for us
215:18 - so see you in the next video now in this
215:20 - video we will talk about
215:22 - digital input and output what that means
215:24 - is we'll take a closer look at
215:26 - the functions which are made by the
215:27 - arduino makers to read or write
215:29 - any sort of digital data all right that
215:32 - data can be some sort of input given by
215:34 - external sensors and it can be some sort
215:37 - of output data which is given by arduino
215:39 - to other peripherals or components right
215:42 - so there are basically two functions
215:43 - which are digital read
215:45 - and digital right so let's take a look
215:47 - at digital right
215:48 - digital right is a function which we
215:50 - have seen multiple times
215:51 - before as well so can you recall what it
215:53 - used to do it used to
215:55 - write a state of low or high to a
215:58 - digital pin
215:58 - so we'll see digitalwrite is a function
216:01 - where digitalwrite is the name of that
216:03 - function
216:04 - all right and it has two parameters
216:06 - which are pin
216:07 - and state where pin is the pin number
216:09 - which we want to manipulate
216:10 - and the state is the value of either
216:13 - high or low
216:14 - where high means five volts and low
216:16 - means zero volts okay
216:17 - just make sure whenever we use digital
216:19 - write we have to declare
216:21 - that pin as output using pin mode all
216:23 - right and i have told you this earlier
216:25 - as well
216:25 - right next we will see digital read
216:29 - as the name suggests it will read the
216:31 - state of that pin
216:33 - okay so here digital read is the name of
216:35 - the function which we are calling
216:36 - and pin number is the parameter which we
216:38 - pass into it to read the state of that
216:40 - particular pin
216:42 - okay if it is high or low so we will now
216:44 - see a combined example of using digital
216:46 - read and digital write and how will we
216:48 - do that we will turn on one led
216:50 - if a switch is pressed okay so let's see
216:53 - how we do that
216:54 - so i have the circuit diagram here in
216:56 - which i have used a regular led
216:58 - with a resistance in series which you
217:00 - can see and here i have used
217:02 - a push button switch so before we move
217:03 - further let us first look at
217:05 - what a push button switch looks like
217:07 - from inside then only you will be able
217:09 - to understand it in a better manner
217:10 - so here is a push button switch all
217:12 - right which has four terminals out of
217:14 - which these two terminals are internally
217:16 - connected and these two terminals are
217:18 - internally connected as well
217:19 - okay so when we press the switch these
217:22 - two terminals
217:23 - get interconnected and these two
217:25 - terminals get interconnected when it is
217:26 - not pressed these two are
217:28 - not interconnected okay so let's get
217:29 - back to our example
217:31 - okay so the code is we have started with
217:33 - int button is equal to seven
217:35 - as we want to read the state of that
217:36 - button on a digital pin number
217:38 - seven all right in white setup i have
217:40 - declared pin mode led built in which is
217:42 - the led connected to pin number 13
217:44 - as output and using pin mode we have
217:46 - declared the button as
217:47 - input because button will be telling its
217:49 - state to the arduino hence it is used as
217:51 - input
217:52 - okay serial dot begin 9600 as usual then
217:55 - in void loop i have written
217:56 - serial.println
217:57 - digital read and bracket button so here
218:00 - i am asking it to print the state of the
218:02 - button
218:03 - either it is pressed or not in the
218:05 - circuit which we have used we will get
218:06 - one on pressing the switch and we will
218:08 - get zero when we do not press the switch
218:11 - all right so let us see that works when
218:13 - i'm pressing the switch
218:15 - i'm getting one here when i'm releasing
218:17 - the switch i'm getting zero here
218:18 - look at the serial monitor here right
218:20 - now i'm not pressing it so it's saying
218:22 - zero
218:23 - when i'm pressing it it's saying one
218:25 - okay so most of you must have also
218:26 - noticed the led which is connected on
218:28 - pin number 13.
218:29 - when i'm pressing the switch the led is
218:31 - getting turned on and when i'm releasing
218:32 - the switch
218:33 - oops it's not getting turned off why
218:36 - we'll see that in the moment probably
218:38 - there is some error in the
218:39 - code i've done this intentionally so
218:41 - that you can pay attention to that
218:43 - okay so here i have written if digital
218:45 - read button is equal to high
218:47 - then digital write led built in to high
218:50 - when i press the switch
218:51 - write a high state on pin number 13 but
218:53 - i have not written what to do
218:55 - if the button is not pressed so let us
218:57 - do that now we will write
218:58 - else digital right
219:03 - led built in low
219:06 - okay so now let us start this again
219:10 - there was an error the closing bracket
219:12 - to void loop was missing
219:13 - so let us start it again all right
219:17 - so when i press it the led turns on and
219:19 - when i release it
219:21 - the led turns off okay so you guys must
219:23 - be wondering
219:24 - what's the point of doing this we can
219:25 - use a simple series connection
219:27 - and we can turn on the led why are we
219:29 - using arduino in that i absolutely agree
219:31 - with you
219:32 - you can do that very easily using a
219:34 - series connection but what you have
219:35 - learned here is
219:36 - you have learned how to use the
219:38 - functions like digital read and digital
219:40 - write
219:41 - you will be able to implement this
219:42 - learning in further projects
219:44 - the experiments which you do all right
219:46 - so now let me just quickly explain you
219:47 - the circuit which we have made here as
219:49 - most of you must be facing
219:50 - difficulty in that all right so here is
219:53 - the switch
219:54 - i showed you the diagram previously
219:55 - right so these two terminals are
219:57 - interconnected
219:58 - automatically when i press the switch
220:00 - this terminal will get connected to this
220:01 - terminal
220:02 - okay so i have taken a wire and
220:04 - connected one terminal
220:06 - to 5 volts okay and then i have taken a
220:08 - resistor
220:09 - and i have connected it to ground so
220:11 - here we have made a series connection of
220:13 - a switch and a resistor
220:15 - like this and from this point as all
220:17 - these points are interconnected we can
220:19 - connect them anywhere
220:20 - so at this point we're reading the
220:21 - voltage which is present between
220:23 - this and this point okay so as we want
220:27 - to read the state we have connected it
220:28 - to the pin number seven so when we press
220:30 - the switch this
220:32 - line will get connected to this line and
220:34 - entire 5 volts will drop across
220:36 - this resistance okay so hence the
220:39 - arduino will read it as
220:40 - high state and when the switch is
220:41 - released this point will be connected to
220:44 - ground via resistor so it will be read
220:46 - as low
220:47 - okay so i hope you understood the basic
220:50 - idea
220:51 - let me try to clarify it even more
220:54 - so this is the equivalent circuit of the
220:56 - circuit which you saw earlier
220:57 - okay you can consider arduino's 5v pin
221:00 - connected to
221:01 - this switch this is a push button switch
221:03 - right similarly these terminals are
221:05 - connected
221:05 - and when we press the switch these two
221:07 - terminals will get interconnected
221:09 - okay so in the series we have used a
221:11 - resistance and we have connected one
221:13 - point of that resistor
221:14 - to ground okay and we are trying to read
221:17 - voltage from this point can you see that
221:19 - we have connected this point
221:21 - to arduino's pin number seven all right
221:24 - so this way we are able to read the
221:26 - state of a switch
221:28 - now what advantages can you have after
221:30 - reading a state of a switch
221:31 - you can trigger multiple actions like
221:33 - running a motor
221:34 - or sending some message right you can do
221:37 - anything for that matter
221:38 - so now you have learned about digital
221:40 - input and output and in the next video
221:42 - we'll look at other functions like
221:45 - analog read and analog write
221:46 - so see you in the next video in the
221:48 - digital input output video we saw that
221:50 - we can use a function called as digital
221:52 - read to read the state of a pin
221:54 - if it is high or if it is low that means
221:56 - we can just read the binary situation
221:59 - if it is on or either of that's all but
222:01 - while making our projects
222:02 - we may have situations in which we have
222:05 - to read
222:06 - not just those discrete values we may
222:09 - also have to read the continuous
222:10 - voltages so for that
222:12 - we have analog read this function can be
222:14 - used only on
222:15 - the analog pins which are numbered a0 to
222:18 - a5 right before seeing how it works
222:21 - we'll have a basic idea of
222:22 - analog information in the environment so
222:25 - just look at this flowchart we have
222:27 - the real world which is our environment
222:29 - at the top we have some sensor
222:31 - which is converting that physical
222:32 - parameter into an analog signal
222:35 - that physical parameter can be
222:36 - temperature some distance
222:38 - or humidity or anything for that matter
222:41 - that analog signal
222:42 - is then converted into digital signals
222:44 - by
222:45 - an analog to digital converter arduino
222:47 - has a built-in
222:48 - 10 bit adc the short for analog to
222:51 - digital converter is
222:52 - adc so whenever i say adc you can
222:54 - understand that i am saying analog to
222:56 - digital converter so that digital signal
222:58 - which is converted from
222:59 - analog signal that is used by arduino to
223:01 - make decisions
223:02 - our arduino board is capable of
223:04 - measuring voltage between 0 to
223:06 - 5 volts and this is the conversion scale
223:09 - what i mean by that is since the
223:10 - resolution
223:11 - of adc on the arduino board is 10 bits
223:14 - it can hold up to 1023 values okay
223:18 - so if we compare that if the arduino
223:20 - reads 0 volts so the corresponding adc
223:23 - value will be
223:24 - 0 and if it reads 5 volts the
223:26 - corresponding adc value will be 1023
223:30 - and we can use unitary method to find
223:32 - out values in between for
223:34 - example you can tell me what will 3.3
223:37 - volts
223:37 - mean i hope i don't have to explain you
223:39 - the unitary method right
223:41 - this is the scale if zero volt means
223:42 - zero and five volt means one zero two
223:45 - three so one volt will mean
223:46 - one zero two three divided by five so if
223:48 - you know the value of one volt you can
223:50 - find out value of
223:51 - any voltage so now many of you must be
223:53 - wondering from where this value of one
223:54 - zero two three came from so i'll quickly
223:56 - explain it to you we have a cupboard
223:58 - here
223:58 - which contains ten boxes and each box
224:01 - can contain a value of either zero or
224:03 - either
224:03 - one okay so this is the cupboard and
224:06 - these are the
224:07 - boxes individual boxes to find the value
224:09 - of the cupboard we take the value of
224:11 - each box and we multiply it with the
224:13 - multiplier the multiplier is this 2 to
224:15 - the power 0 is
224:16 - 1 2 to the power 1 is 2 2 to the power 2
224:20 - is
224:20 - 4 and similarly 2 to the power 9 is
224:23 - 512. so when we have values of all the
224:26 - boxes
224:26 - we take sum of all those values and we
224:28 - get the value of that
224:29 - entire cupboard so the maximum value
224:31 - which can be held by a cupboard in which
224:33 - all the boxes contain a value of one
224:35 - will be one zero two three how this box
224:38 - will evaluate to one
224:40 - why because two to the power zero is one
224:42 - and one multiplied by
224:43 - 1 is 1 okay so now the 2 to the power 1
224:46 - is
224:47 - 2 and we multiply 1 by this so we get 2.
224:50 - so we will be summing
224:51 - all the values from here to here like 5
224:53 - 12 256
224:54 - 128 64 32 16
224:58 - 8 4 2 and 1 when you sum all these
225:02 - values you will get 1 0 2 3 you can try
225:04 - it on your calculator right now
225:05 - so now let's take a look at analog read
225:07 - function this function is simply used by
225:09 - calling analog read
225:11 - with the parameter of pin number where
225:13 - pin number is a0 to
225:14 - a5 so whenever you call this analog read
225:16 - function it will return you the value at
225:18 - red on that
225:19 - pin so let's see how we use that so now
225:21 - i have used
225:22 - two one kilo ohm resistances in series
225:24 - can you see that so now i have connected
225:26 - it to
225:27 - 5 volts this point is connected to 5
225:29 - volts and this point is
225:31 - connected to ground so you can imagine a
225:33 - series circuit
225:34 - so now i want to read voltage across
225:37 - this resistance since both the
225:38 - resistances are equal
225:39 - the 5 volt will split equally on both
225:42 - the resistances
225:42 - so we should be getting 2.5 volts let us
225:45 - see that so in the code we have written
225:47 - serial.begin
225:48 - to start communication with the computer
225:50 - and then we have written serial.println
225:52 - bracket analog read a0 that means i want
225:55 - to read the voltage
225:56 - which is given at a0 so let's try this
225:59 - code so we are getting
226:00 - 511 which is nearly 2.5 volts
226:04 - we saw in that scale right so let's
226:05 - change the resistance and see what value
226:07 - do we get now
226:08 - let's make this value as 2 kilo ohms
226:11 - right so we got a change in value more
226:13 - the value of resistance more the voltage
226:15 - will drop across it
226:16 - we can see the value of voltage across
226:17 - this resistance is increasing if we make
226:19 - it too high
226:21 - it will increase it will also change if
226:23 - we change the value of this resistance
226:25 - let's say we make it 10. so now
226:26 - the voltage across this resistance will
226:28 - drop and hence we get a lower value
226:30 - now let's see this with a light
226:32 - dependent resistor this is a special
226:34 - kind of resistance which changes
226:35 - its resistance when light falls on it in
226:38 - most of the light dependent resistance
226:39 - the resistance will decrease
226:40 - if the light on it increases okay so
226:43 - let's try this
226:44 - replace this resistance with
226:48 - a light dependent resistor okay we'll
226:51 - connect this in series
226:56 - we'll take it here all right and we take
226:59 - this wire now you see
227:04 - this bar will represent the amount of
227:06 - light falling on it right i can control
227:08 - it like this
227:09 - so right now here it is total darkness
227:12 - and here it is very bright okay so when
227:15 - it is dark the resistance of this
227:17 - component is very high
227:18 - okay so the voltage which drops across
227:20 - this resistance will be very low
227:22 - you can see the value is very low right
227:24 - as soon as i increase the light on it
227:26 - you will see the value in the serial
227:28 - pointer is increasing
227:30 - can you see that because the resistance
227:31 - of this component is getting lower and
227:33 - and more voltage is dropping across the
227:35 - resistance
227:36 - okay now this is the principle of analog
227:38 - read now you can see how we can read the
227:40 - value of analog sensors using
227:42 - analog read all right so in the next
227:45 - video we will look at the another
227:46 - function which is known as
227:47 - analog right so see you in the next
227:50 - video in this video we'll take a look at
227:52 - analog write function which is another
227:54 - important built-in function
227:56 - of arduino all right so to begin with
227:58 - analog write i would firstly like to
228:00 - tell you that it has no relation with
228:02 - the analog pins or analog read function
228:05 - it is absolutely a different thing what
228:07 - exactly it is we will see
228:09 - shortly so to use analog write function
228:11 - we write analog write
228:13 - bracket pin number on which we want to
228:15 - use analog write
228:16 - and then we specify a value which ranges
228:18 - from 0 to 255.
228:20 - we close the bracket and use a semicolon
228:23 - right
228:24 - the important thing which we need to
228:25 - note is the pin numbers which we can use
228:27 - here
228:28 - are specific which are pin number 3 5
228:31 - 6 9 10 and 11 only okay
228:34 - while all of these pins except pin
228:37 - number five and six
228:38 - support a frequency of 490 hertz and pin
228:41 - number five and six support a frequency
228:43 - of
228:43 - 980hz we don't need to worry about this
228:45 - frequency right now
228:46 - i'll explain as we progress so before we
228:49 - dig deeper into this
228:50 - we need to understand a few terms like
228:52 - pwm
228:53 - pulse width and frequency and even
228:55 - before that we need to know what exactly
228:57 - this analog write function does
228:59 - the analog write function generates a
229:01 - square wave of a specified
229:03 - duty cycle on that specified pin the
229:06 - major purpose of using analog write is
229:08 - to control the brightness of led or to
229:10 - control the speed of a motor
229:12 - right the first thing which we need to
229:14 - see now is a square wave what a square
229:16 - wave is on the screen you can see
229:17 - a square wave is coming this is a square
229:19 - wave okay
229:21 - although this is a varying square wave
229:23 - now a square wave is nothing
229:25 - but a signal which has only two discrete
229:27 - values either on
229:28 - or off as you can see here it is on
229:31 - and here it is off and the time for
229:33 - which it is on
229:35 - and off is varying you can see here
229:37 - right i can understand it must be
229:39 - little difficult to comprehend but
229:40 - please stick with me okay so the next
229:43 - term is
229:43 - pulse width the amount of time for which
229:46 - a signal is on
229:47 - is known as pulse width for example in
229:49 - this wave
229:50 - this is the pulse width denoted by this
229:52 - arrow in this portion
229:54 - this is the pulse width denoted by this
229:56 - arrow in this portion
229:57 - this is the pulse width noted by this
230:00 - arrow
230:00 - all right the next term is duty cycle
230:04 - duty cycle is the fraction of period for
230:06 - which the signal was
230:08 - on right so we have five sections here
230:10 - with zero percent duty cycle twenty five
230:12 - percent due to cycle fifty percent duty
230:13 - cycle seventy five percent duty cycle
230:15 - and hundred percent duty cycle okay so
230:17 - in this section
230:18 - the voltage for entire time was zero
230:21 - okay
230:22 - so that means the duty cycle is zero
230:24 - percent
230:25 - in this section we have about one fourth
230:28 - of the time
230:29 - as on you can see that right for the one
230:31 - fourth time it is on
230:32 - and three fourth time it is off so that
230:34 - means the duty cycle is
230:36 - 25 in this section we have about
230:39 - half of the time as on time and half of
230:42 - the time as of
230:43 - time so here the duty cycle is 50
230:47 - similarly here the on time is 3 4
230:50 - hence the duty cycle is 75 and here
230:53 - for the entire duration of time the
230:55 - voltage was on hence
230:57 - the duty cycle was 100 okay now
231:00 - if we look in terms of arduino when we
231:02 - call analog write
231:04 - with a value of 0 it will give us 0
231:06 - percent duty cycle
231:07 - that means the signal will be off for
231:10 - the whole time
231:10 - if you write analog write 64 then it
231:12 - will give us a duty cycle of 25 percent
231:15 - if you write 191 it will give a value of
231:17 - 75 percent and 255 will give us a duty
231:20 - cycle of 100
231:21 - okay so now to summarize pulse width
231:24 - modulation
231:25 - or pwm is a technique for getting analog
231:27 - results
231:28 - with digital means digital control is
231:30 - used to create a square wave which is a
231:32 - signal
231:33 - switch between on and off all right and
231:36 - this
231:36 - on and off cycle takes place really fast
231:39 - and this on off pattern can simulate
231:40 - voltages in between
231:41 - full on and full off by changing the
231:44 - portion of the time the signal spends
231:46 - on versus the time that signal spins off
231:49 - all right so next thing which we need to
231:50 - look at
231:52 - is the pwm frequency okay
231:55 - let's see this is a wave which has a
231:58 - duty cycle of
231:59 - 50 that means half of the time the
232:01 - signal is on
232:02 - and half of the time signal is off
232:04 - changing the frequency of the signal
232:05 - will not change the duty cycle of the
232:07 - signal okay so let's say
232:09 - we have a signal of 50 duty cycle here
232:12 - and if we make the frequency to 400
232:14 - so the waves will become closer that
232:16 - means now it will turn
232:18 - on two times and turn off two times
232:20 - right you can see here
232:22 - on and off earlier it was on one time
232:26 - and off one time
232:28 - okay but you see the duty cycle is still
232:30 - 50 you're getting my point so you see
232:32 - the duty cycle of the signal has not
232:34 - changed
232:34 - because it was still on for the half of
232:36 - the time and off for half of the time
232:39 - even if i make it 600 it is still on for
232:42 - the half of the time
232:43 - and off for half of the time okay so i
232:45 - hope it was clear to you and if in case
232:47 - it was not clear to you
232:48 - we'll take an example and blink the led
232:51 - and change the brightness of the led
232:53 - all right and we will also monitor it
232:55 - along with a digital oscilloscope an
232:57 - oscilloscope
232:58 - is nothing but it is a device which is
233:00 - used to analyze the signals okay so
233:01 - let's see that so here what we have done
233:03 - is we have taken an led
233:05 - on pin number 10 and correspondingly we
233:07 - have connected these wires to an
233:08 - oscilloscope to see the signal so let us
233:10 - see the
233:11 - code first so you must have noticed that
233:13 - we have not written anything in void
233:14 - setup
233:15 - and we don't have to use pin mode
233:16 - whenever we want to use analog write
233:18 - function
233:19 - okay so now in void loop i have written
233:21 - analog write
233:22 - pin number 10 and a value of 50
233:26 - okay and then i have given a delay of
233:28 - one second then analog write 10 with the
233:30 - value of 100 then 150 then 200 and 255
233:33 - here we will get a duty cycle of 100
233:36 - okay so now let's see how it looks like
233:38 - pay attention to the wave which is
233:40 - coming on the oscilloscope
233:41 - and also note the brightness of this led
233:43 - i'm starting the simulation
233:44 - let's see can you see that the
233:50 - brightness of led
233:51 - is increasing gradually as the code
233:53 - progresses and it gets backs to 50
233:55 - and then it again increases also note
233:58 - the pulses which are coming in the
233:59 - oscilloscope so now we will see an
234:01 - example in which we are changing the
234:02 - brightness of led in steps of
234:04 - five we will also look at the pwm wave
234:06 - simultaneous
234:07 - let's look at the code first we have
234:09 - defined an led pin which is connected on
234:10 - pin number ten in white setup we don't
234:12 - have to do anything
234:13 - in void loop we have written four which
234:14 - is a for loop and we have defined a fade
234:16 - value
234:17 - in fade value is equal to 0 and you have
234:19 - to do this till
234:21 - the fade value is less than or equal to
234:22 - 255 okay
234:24 - and then we are incrementing the value
234:25 - of fade value by
234:27 - 5. this is an another compound operator
234:29 - you can say it is similar to writing
234:31 - fade value is equal to fade
234:34 - value plus 5 all right
234:37 - so now we have written analog write and
234:39 - we have written led pin here which is
234:41 - pin number 10
234:42 - with the fade value okay
234:45 - so how it will go it will write zero
234:47 - here then after the delay of 30
234:48 - milliseconds it will write five year
234:50 - then after a delay of 30 milliseconds it
234:52 - will write 10 here then 15 and 20
234:54 - and 25 and so on till 255. once this
234:57 - value
234:58 - becomes 260 you know in the last
235:00 - iteration the value will become 260
235:02 - so this condition will become false and
235:04 - it will exit this for loop and come
235:06 - inside
235:06 - this for loop in this for loop we have
235:08 - used fade value starting from 255
235:11 - and we have written a condition fade
235:12 - value greater than equal to zero
235:14 - that means you have to do this till the
235:17 - value is greater than
235:19 - or equal to zero okay then we have to
235:22 - use fade value minus equal to five
235:24 - and this is similar to writing yes you
235:26 - guys did right it is similar to writing
235:29 - okay so now it will start
235:32 - at 255. after a delay of 30 milliseconds
235:35 - it will write 250 and 245 then 240
235:38 - and 235 and so on till 0. in the last
235:41 - iteration
235:42 - when the value is 0 the value will
235:44 - become -5 and the condition will become
235:46 - false so this loop will exit and it will
235:49 - come back
235:50 - into this for loop and this will repeat
235:52 - endlessly till we turn off the arduino
235:54 - let's start the simulation note the
235:56 - brightness of the led and note the
235:58 - signal which is coming in the
235:59 - oscilloscope
236:00 - let's see okay
236:05 - it's interesting right the brightness of
236:08 - leds increasing
236:09 - from 0 to 55 and the pulse width is
236:12 - changing when it is 0
236:13 - you can see it is entirely off and when
236:17 - the duty cycle becomes 100 it becomes
236:19 - entirely on
236:20 - the pulse width is changing here so i
236:22 - hope you have understood this really
236:23 - well
236:24 - the last topic which we need to learn
236:25 - about before starting our experiments
236:27 - is the arduino libraries so libraries
236:30 - are a collection of code that makes it
236:32 - easier for you
236:33 - to connect to a sensor display or a
236:35 - module for example
236:36 - there is a built-in library to control a
236:38 - liquid crystal display
236:40 - that library makes it easier for us to
236:42 - talk to that display
236:43 - right for example you can see that
236:46 - library will control what character will
236:48 - come at what position
236:49 - apart from this library there are many
236:50 - more libraries which are available for
236:52 - download on internet
236:53 - and there are also built-in libraries
236:56 - for example
236:57 - the built-in libraries are these
236:59 - libraries which are already present in
237:01 - arduino id i'll just name a few like ap
237:04 - rom
237:04 - is used to read and write elements from
237:06 - the permanent storage
237:08 - a gsm library is used to connect gsm or
237:10 - gprs network with the gsm shield
237:13 - the liquid crystal library which you
237:14 - just saw controls the liquid crystal
237:16 - display which is used for reading and
237:17 - writing data on
237:18 - sd cards a server library will be used
237:20 - to control server motors similarly there
237:22 - are many more libraries which are
237:24 - already there on
237:25 - arduino the code which is written inside
237:27 - those libraries can be written by
237:28 - someone else
237:30 - or you can write the code on your own as
237:32 - well once we have the library in our
237:33 - arduino
237:34 - id it's very simple to use that library
237:36 - i'll just show you how
237:37 - so this is our code let's say we have to
237:39 - use liquid crystal library so we will
237:41 - write hash
237:43 - include liquid crystal dot
237:46 - h okay whenever we use this library
237:50 - we'll be able to use the functions which
237:51 - are written inside the liquid crystal
237:53 - library
237:54 - okay similarly if we have to include
237:57 - another library for sd cards we'll write
237:59 - sd dot
238:00 - h okay this will include the sd library
238:03 - in our code
238:04 - we'll be able to use all the functions
238:06 - which are written in sd library
238:08 - i would also like to tell you that the
238:09 - functions which we were using like
238:11 - digital write
238:12 - were also declared in some library i
238:14 - will just show you
238:15 - how it was written so there's a built-in
238:17 - code which is written inside
238:18 - wiring underscore digital dot c which is
238:21 - located at this location
238:23 - see program files arduino hardware
238:24 - arduino avr course
238:26 - arduino and then finally the file now if
238:29 - we see the declaration of
238:30 - digitalwrite we will see that this is
238:32 - how a digital write function is declared
238:35 - in that library
238:36 - okay you just see that void digitalwrite
238:39 - pin number and value okay where pin is
238:42 - the pin number and value is high or low
238:45 - it accepts two arguments right we sorted
238:47 - while calling this function
238:48 - so this is how the digital write is
238:51 - called we'll not get into
238:53 - details of this function as it may be
238:55 - very complicated for you to understand
238:58 - okay similarly digital read has been
238:59 - declared here this is a declaration of
239:01 - digital read
239:02 - similarly pin mode is also declared
239:06 - right so i hope you were clear with
239:08 - libraries
239:09 - and i hope you understand how using
239:11 - libraries saves a lot of our time
239:14 - okay so in the next video we will see
239:16 - how to add
239:17 - additional libraries in our arduino ide
239:20 - so see you in the
239:21 - next video so now let's see how do we
239:23 - install external libraries in our
239:25 - arduino ide there are basically two
239:28 - methods
239:28 - one is through the library manager and
239:31 - one is through
239:32 - adding external zip files okay let's
239:34 - look at
239:35 - the library manager first we will go to
239:38 - sketch
239:40 - include libraries then manage libraries
239:44 - it will open the library manager this is
239:46 - the library manager
239:48 - it will update all the libraries which
239:50 - are already there
239:51 - in their database and it will show us
239:53 - the list of available libraries for us
239:55 - you can see there are a lot of libraries
239:57 - already there
239:58 - right these are all the libraries which
240:01 - are present
240:02 - in their database right now so let's say
240:05 - we need a library for dht 11
240:07 - which is a sensor which captures
240:09 - temperature and humidity of our
240:11 - environment
240:12 - so we will write dht11 here and it will
240:15 - search all the libraries
240:16 - which are available for dht 11 by
240:18 - different authors
240:20 - so let's say this is a very reliable
240:21 - library by adafruit
240:24 - which i've already installed okay so
240:27 - just in case you have not installed it
240:29 - already you will get
240:31 - install here you can select the version
240:33 - here which version you want to install
240:35 - usually this is the latest one and then
240:37 - you just click on install
240:38 - and it will install the library in your
240:40 - id okay
240:42 - once it is installed we can use it in a
240:44 - regular manner
240:45 - hash include
240:49 - dht dot h
240:54 - okay if this dht library was not
240:56 - installed in my id
240:58 - it would not appear in this orange color
241:00 - okay
241:01 - let's take an arbitrary name include
241:04 - ashish dot
241:05 - h since there is no library named ashi
241:07 - so this ashish is not coming in
241:09 - orange color although this is not a very
241:11 - hard and fast rule you might not get
241:13 - orange color in some libraries but it is
241:16 - a really
241:17 - good indication that you're working in a
241:19 - right direction
241:20 - okay so now let us look at the other way
241:23 - which is adding them
241:24 - manually let's say again we want a
241:26 - library
241:27 - for our dht11 sensor we will write dht
241:31 - 11 library
241:35 - for arduino usually
241:38 - libraries are available on github you
241:41 - may also find zip files on some other
241:43 - websites
241:44 - but github is usually preferred as you
241:46 - would get the latest version of the
241:47 - library from there so again adafruit has
241:49 - hosted their library on github
241:51 - so let's click on that and then we'll go
241:54 - to clone or download
241:56 - we'll click download zip
242:00 - and it will start downloading it you
242:02 - have to see where you have downloaded it
242:04 - you have to go to sketch include library
242:07 - then add
242:08 - dot zip library in my case i downloaded
242:11 - it
242:11 - in my h drive so it is here we'll click
242:14 - on this
242:14 - and just click on open in my case it was
242:17 - already installed so it gave me a
242:18 - warning a library name dht sensor
242:20 - library master already exists
242:22 - okay but in your case it will say the
242:24 - library has been successfully installed
242:26 - so these are the basic two ways in which
242:28 - we add libraries
242:29 - at this point i can really say that you
242:31 - have reached a milestone
242:33 - and you are in a position to dig deeper
242:36 - as you have so many tools under your
242:37 - belt now
242:38 - we have covered the foundations of
242:40 - electronics then we covered
242:42 - what is an arduino board and then we
242:43 - discussed what is inside arduino
242:45 - we covered the difference between the
242:46 - microcontroller and microprocessor
242:48 - then we saw the arduino ide how it works
242:51 - and how we use it
242:53 - we also saw an online simulator which
242:55 - can be used if someone doesn't have an
242:56 - arduino right now
242:57 - then we saw how to use a breadboard then
243:00 - some topics like
243:01 - input output analog digital etc and then
243:04 - we started
243:05 - arduino programming and i tried to cover
243:07 - all the essential topics which are
243:09 - required
243:10 - for you to start your own projects from
243:12 - this point you can try making
243:14 - various led patterns you can try to work
243:17 - with
243:18 - a seven segment display which can be
243:19 - used to display different digits on it
243:23 - then you can try to interface sensors
243:24 - like ultrasonic sensor
243:26 - or ir sensor and try to read their
243:28 - values using the built-in functions
243:30 - which we have studied already
243:32 - then you can try to control the motion
243:33 - and speed of a dc motor
243:35 - then i recommend you to try using a
243:37 - servo motor after this
243:39 - you will be in a position to make robots
243:40 - like a line falling reward
243:42 - a robot which is capable of following
243:45 - light lines over a dark background
243:47 - or vice versa
243:50 - you can also make obstacle of winning
243:51 - robots
243:53 - then you can make remote control cars
243:55 - like this and once you get comfortable
243:57 - with this
243:57 - you can also make complicated robots
243:59 - like a hexa port
244:01 - like this which has several servo motors
244:04 - used in it
244:04 - right which is moving forward you can
244:07 - also check out some posts at my
244:08 - instagram
244:09 - ashish underscore things and check out
244:12 - some of my other projects as well
244:13 - so i hope that you found this course
244:15 - really useful to begin your journey with
244:18 - arduino
244:18 - thank you so much for your time and have
244:20 - a nice day ahead

Cleaned transcript:

arduino is an open source electronics platform based on easy to use hardware and software this course from ashish will teach you everything you need to know to start creating your own electronics with arduino and you don't even have to have any hardware to follow along hello everyone thank you for joining this arduino course for beginners this course is created for people who have no or very little prior experience in electronics and programming so in this course i'm going to help you get started with your arduino adventures and by the end of the course we will have some basic knowledge of the most common hardware components such as breadboard resistor led etc and their usage in electronic circuits you will also be able to write arduino programs on your own this course is built in such a way that it would cover things which absolute beginners face while understanding the code written by other creators while creating this course i've kept in my mind what problems i had faced when i started my own journey with arduino and made it like a course which i wished i had watched before starting anything at all if you don't have an arduino and other components with you right now you can still follow along the course and get one later to perform your experiments which you have in your mind so let's get started this section will be a quick overview to practical electronics and some of the most common electronics components that we will be using throughout the course with the arduino you can always revisit this section if you find any term confusing or you need to understand something again so let us start with electricity i'm pretty sure that you all must have heard of this term at least once in your lifetime if not let me tell you that electricity has played a major role in letting you watch this video on your computer or your laptop electricity is a type of energy that can be built up in one place or flow from one place to another when electricity gathers in one place it is known as static electricity and electricity when moves from one place to another is called current electricity have you felt a sudden painful jolt when you brush someone's arm or crackling sounds when you take off your sweaters or have you tried to attract paper bits by a comb all this happens due to static charges that were accumulated at a place believe it or not even the lightning that happens in the sky happens due to static electricity so why does this happen everything in this universe is made up of atoms which are made up of protons and electrons protons are positively charged and electrons are negatively charged in an atom generally the number of protons and electrons are equal hence the electric state of atom is neutral but when some atoms lose their electrons they become positively charged and when some atoms gain electrons they become negatively charged the short learning which i want you to take from this lesson is that similar charges repel and opposite charges attract each other as shown in this diagram static electricity is a very deep topic and has a separate study called as electrostatics which will go beyond the scope of this course the other reason i told you about static electricity is that the static electric charges in our hands may damage your electronic components sometimes so just make sure you keep your stuff on hard and solid surfaces and keep your components back in the antistatic packets which you got along with the components current electricity is the form of electricity which makes all of our electronic gadgets work this form of electricity exists when charges are able to constantly flow as opposed to static electricity where charges gather and remain at rest current electricity is dynamic charges are always on the move we will be focusing on this form of electricity throughout the rest of our course so in the next video we will talk about voltage which is one of the most important concepts for the existence of this current electricity so i will see you in the next video in this video we will learn about voltage voltage is a force that makes electrons move through a wire it is measured in volts and the symbol is v okay voltage is also called as electromotive force or emf which drives the electrons inside a wire voltage was named after a scientist called alessandro volta so now technically speaking the voltage is a difference in electric potential between two points for example the difference between the positive and the negative terminal of a battery let's say this battery is of 5 volts so the potential at this point can be 5 volts and the potential at this point can be 0 volts so the potential difference is 5 volts okay it can also be 10 volts here and 5 volts here resulting into a difference of 5 volts it can also be 0 here and minus 5 here then also the difference will be 5 volt so this battery provides some force on electrons so that they can move inside a wire like this you can see these electrons are moving inside a wire and and this bulb is glowing now let us understand voltage by a water analogy this is a water tank and the pressure at the end of the hose can represent voltage the water in the tank represents charge more the water in the tank the higher is the charge and more is the pressure at the end of the hose we can think of this tank as a battery a place where we can store certain amount of energy and then release it if we drain our tank a certain amount the pressure created at the end of the hose also goes down right what i mean to say is we can think of this as a decrease in voltage like when the flashlights which use batteries glow dimmer as the batteries run down and then there is also a decrease in amount of water that will flow through this hose less pressure means less water is flowing so we can consider this flowing water as current which we will discuss in the next video in this video we will learn about current on a very basic note the rate of flow of charge is known as current when electrons move from a negative terminal to positive terminal of a battery they give rise to current the unit of current is amperes and the direction in which the current flows is is the opposite to the direction of electrons what that means is if electrons are moving in this direction then the current will move in this direction all right so now on a more technical note current is the amount of electric charge that flows when one coulomb of charge moves past somewhere in one second and that current is one ampere coulomb is the measuring unit of charge all right and to measure the current at any point we can use an ammeter we can also understand the flow of current by water analogy let's say this is a tank filled with water and this water is flowing due to potential energy of water which we learned is called as voltage in the previous video so here the size of hose is acting as resistance a bigger size hose offers less resistance and the smaller size hose offers more resistance so the path which has lower resistance more current can flow through that path and the path which offers more resistance less current can flow through that path okay so here since the voltage is equal and resistance is lower in this case the water flowing here will be more and the water flowing here will be less okay so this has given rise to another term called as resistance and we will learn about resistance in next video but before that i would like to tell you that there are two types of current one is direct current and one is alternating current in dc current the flow of electrons stay in the same direction and the voltage stays steady with the time as you can see from the graph while in ac the flow of electrons change and the voltage does not stay steady with time that also you can see from the graph don't worry if you could not understand all this at this moment at this point you only need to understand that the current which you see in your home that is the current which drives your fans and other appliances like air conditioners televisions etc is known as ac current and the current which you get from the batteries or specific power supplies is dc or direct current the current you get from your laptop or computer's usb port is also dc current and for our course we will be dealing with the dc current only if you have understood just this part you are good to go so i will see you in the next video now we will take a look at resistance the electrical resistance of any component is a measure of difficulty of passing an electric current through that substance with more resistance in a circuit less electricity will flow through the circuit based on this term resistance there is an electrical component known as a resistor a resistor is a device which limits the flow of a current in a circuit we may need resistor inner circuits where we need to drive leds which require limited amount of current so that we can prevent it from burning off right now if we see the resistance with the water analogy we can see this is a pipe and this is one another pipe the water can flow easily through this pipe because it offers less resistance the flowing water can be synonymous to flowing current okay and when there is more resistance less current will pass through it one important thing which you would like to know is that the current always takes the least resistive path for example if you offer two parts for current to flow it will try to flow from the least resistive path out of them okay so in the next video we will study the relation between current voltage and resistance and in upcoming videos we will also learn how to identify the value of the resistor the value of the resistor is measured in ohms more the value of resistor more the resistance it will offer in the circuit so now i will see you in the next video so till now i'm sure that you all must have inferred that somehow all these terms are interconnected if you have then you are absolutely correct there is a law known as ohm's law which tells the correlation of these terms a german physicist george simon ohm stated that the electric current flowing through a metallic wire is directly proportional to the potential difference across it provided temperature remains the same that means like i said earlier more the force more the current so potential difference is the force here which we talked about earlier so mathematically we get voltage v is equal to the product of resistance r and current a or i for that matter if any one of them is unknown we can find out by doing the math there's an easy way to find that out there is a triangle known as ohm's law triangle we just hide the unknown quantity and we get the answer for example if we hide v so i and r looks in a multiplication position so v is equal to i multiplied by r if we have to find resistance we will cover up r then v and i appear in a division like position so r is equal to v divided by i then we have i as unknown quantity then we can do i is equal to v by r based on the similar reason this interesting image shows that if we consider voltage current and resistance as people how would they behave the voltage would keep pushing the current and resistance would create difficulty for it to pass isn't it funny so now let's see how do we use ohm's law to calculate the unknown values in a circuit this is a circuit and this is a very basic circuit right and here is the resistance of value 600 ohms and this is the circuit representation of a resistance which is a zigzag line right here we have a battery which measures 12 volts and this is the connecting wire so can you figure out how much current is flowing in the circuit right now we will use ohm's law to find out okay so here what quantity is unknown i which is current right so we will be using i is equal to v by r so we'll do 12 upon 600 which would be 0.02 amperes okay so now if we change the value of our resistance and make it 6 ohms instead of 600 so can you tell me the new value we just need to do 12 by 6 now which would turn out to be 2 amperes all right so did you observe that if we reduce the resistance in a circuit the current flowing in the circuit increased earlier it was 0.02 amperes and now it is 2 amperes right now if we change the voltage of the battery as well let's say 24 so now the current flowing will be 4 amperes right so we increase the voltage and reduce the resistance so the overall current flowing in the circuit was 4 amperes so i guess you must be able to see the relation between voltage resistance and the current flowing in the circuit one thing you need to learn about using resistances in a circuit is that there are multiple ways we can use resistances like we can use them in series we can use them in parallel so now i will show you how to use resistances in series and parallel if i give you a general idea about resistances in series in parallel i would say in a series circuit the output current of the first resistor flows into the second resistor and into the third resistor therefore the current is the same in each resistor while in parallel all the resistors are connected to each other in a manner shown here right all the ends are connected to each other like this so now we will look at series circuit in a bit more detail so if we look at the circuit here we can see that three resistances r1 r2 and r3 are connected in series across a battery of a certain voltage okay we don't know what voltage is that right now but let's say that voltage is v right so now since there is just one path for current to flow in this circuit the value of current flowing in the circuit would be same let's say it would be equal to i okay so due to that in a series circuit the voltage drop across each resistor would be different and interestingly the sum of v1 v2 and v3 that is the voltage across each resistor will be equal to the voltage of the battery right let's say if the voltage of the battery is 12 volts okay so the voltages which we will get across these resistances would add up to 12 and from this circuit we can create an equivalent circuit like this where where the equivalent resistance is the algebraic sum of all the resistances which we have used so let us now see an example where you can apply this learning right so here we have a circuit with five resistances connected in series and which are connected across a battery which measures 9 volts so what we need to do is we need to find the equivalent resistance the current flowing in this circuit and individual voltages across each resistance right let's have our diagram handy with ourself which we use to remember the ohm's law so let us first calculate the equivalent resistance as i told you to calculate the equivalent resistance in a series circuit we just take the algebraic sum of all the resistances right so here it will be 20 plus 20 plus 20 plus 20 and plus 10 which is equal to 90 ohms right now since we have this equivalent resistance to calculate the current flowing in the circuit we would use this formula i is equal to v by r right the only difference is instead of using r we will use r equivalent because we will be using the equivalent resistance in the circuit right that would be 9 upon 90 which is 0.1 amperes so now we know that 0.1 amperes is flowing in this circuit so to calculate individual voltages across the resistances what we can do we'll use the ohm's law once again but this time we will use this formula we need to calculate v is equal to i into r so i is 0.1 and r is 20. so 0.1 into 20 is 2 volts okay similarly this will also measure 2 volts this will also measure 2 volts this will also measure 2 volts and this one will be 1 volt because 0.1 into 10 is 1 right so now you notice that 2 plus 2 plus 2 plus 2 and plus 1 is equal to 9 right as we saw earlier as well all the voltages also add up to the voltage of the battery which is 9 volt all right so this is about series circuit now we will look at the parallel circuits so the resistors are in parallel when one end of all the resistors are connected by a continuous wire of negligible resistance and similarly other ends are also connected to each other through a similar wire since all the resistances in parallel are connected directly to the battery you can say the voltage across all of them is equal right but unlike the resistors in series where there is just one path for current to flow in parallel circuits there are multiple paths for resistance to flow like in the circuit you can see current has two parts if the current flowing in the circuit is i then it will divide into two parts let's say i1 and i2 if there were more resistances we would say like i3 and i4 etc and when that current flows it comes back and it adds up and becomes i again and if we wish to calculate the values of i1 and i2 again we can use the ohm's law here right because the voltage across this resistors is equal to the battery's voltage and the value of resistor is also known so we can calculate i using ohm's law right you should remember that v1 and v2 will always be equal to v and i will be equal to i1 plus i2 right now we can also calculate the equivalent resistance this combination of resistors will offer in the circuit and to do that there is a very simple formula one upon req that is equivalent resistance is equal to 1 by r1 plus 1 by r2 plus 1 by r3 and so on right so let us see one example and let us keep that diagram handy again right so what we need to do in this question is we need to find out the current flowing in this circuit and the individual current flowing in these resistances right so one approach can be we can find out the equivalent resistance first using the formula we just saw let us place the values inside it right 1 by req is equal to 1 by 1 plus 1 by 2 plus 1 by 2. we have just replaced these values by the values of the resistors right so now we will take lcm and which turns out to be 4 by 2 but please note that this is 1 by r equivalent all right so to calculate r equivalent we will take the reciprocal of this value which would turn out to be 0.5 ohms right so now we have the equivalent resistance of this circuit we can simply use the formula i is equal to v by r v is 3 and r is 0.5 so the answer would be 6 amperes right so 6 amperes will be flowing in this circuit now if we want to calculate the individual currents in these resistances what we will do is we will use this formula again because v is same and r is known right so in this resistor v is three and r is one so in this resistor three amperes will be flowing in this resistor three by two that means one point five would be flowing right and in this resistance as well 1.5 amperes would be flowing so now if we add up all these currents in these three resistances that would come out to be six so again we verified the things we just studied and i don't know if you noticed or not the equivalent resistance of 0.5 was even lesser than the lowest of the resistance is used right so this will always be the case the equivalent resistances in the parallel circuits will always come out to be lesser than the lowest value of the resistance in those combinations all right so this was about parallel circuits and now we will see a slightly more complicated circuit which involves series and parallel circuits both so here we have such a circuit where resistances are present in series as well and panel as well so now i will tell you how to find out unknown values in such kind of circuits right so first of all we need to work in sections of the circuit for example in this circuit i have taken up this section we can see that these two resistances r3 and r4 are in series right so using our regular resistances in series formula which is r equivalent is equal to r1 plus r2 plus r3 and so on right so here are two resistances so we have just taken some of those two resistances which is 10 ohm then in our mind we will think of it as one single resistor right which is in parallel with this resistance right so now we will use our parallel formula which is 1 by r equivalent is equal to 1 by r1 plus 1 by r2 right so both of the resistances are of 10 ohms so if you plug the values in this formula you will get 5 ohms you can try it on your own right then we will reduce that circuit in our mind only with 5 ohms as a resistance then this equivalent resistance is in series with 7 ohm resistor right again we will use our resistance in series formula so the equivalent resistance will turn out to be 12 ohms so now let's have our ohm's law formula handy right so what we can find out now is how much current is flowing in this circuit how we can do that we will use this formula i is equal to v by r where v is 24 and r is 12 so we will get 2 amperes right so now if we want to know voltages across each resistance and current flowing in each resistance we can work our way backwards now right so we know two amperes is flowing in this circuit so we can calculate the voltages across these two resistances right so first we will calculate across 7 ohm resistor so how will we do that we'll use v is equal to i into r i is 2 and r is 7 so we will get 14 volts across this okay and here we will get 2 into 5 10 volts right so you can see 14 plus 10 is 24 we are satisfying the things which we have studied so far now we'll move one step back so we knew voltage across this resistance was 10 volts right so in this section also the voltage will be 10 volts so now since this is a parallel circuit in both of the resistances voltage will be 10 volts so now we can calculate current in this right by using this formula again right v is 10 and r is also 10 so 1 ampere would be flowing inside it the answer would be same for this one as well right now if we take one step back again we'll have to calculate voltage across these two resistances how will we do that again we'll use this formula v is equal to i into r so current was 1 ampere in this so in this as well it will be 1 ampere so we know 6 into 1 is 6 volts and across this one we'll have 4 volts using the same formula right so we have all the unknown values right now since there were so many values i can understand it must be a little difficult for some of you to visualize it so i have created a circuit to help you visualize a little right let's have a look at it so here is that visualization so you can see exactly similar circuit which we saw earlier and i have written all the values of current flowing in each resistance and now i will show you the voltages across each resistance let's keep this formula handy as always now i will show you voltage across each resistance it is 14 volts across 7 ohms 6 volts across 6 ohms 4 volts across 4 ohms and 10 volts across 10 ohms right so if you have understood this part i can say you have understood really important fundamental about using resistances in series and parallel but you may also find circuits like this okay where we have two batteries right in circuits like these you cannot simplify the circuits which we have seen so far so there are some advanced concepts such as kirchhoff's law okay which is used to calculate the unknown values in the circuit but that will go beyond the scope of our course right now so one last thing about resistances i want to tell you is identifying the resistance is based on the color bands let's have a look at that now resistances come with the four or five color bands denoting the value of resistance it will offer in the circuit so you see in this diagram there are four band resistors and there are five band resistors okay in a four band register the first band will tell you the first digit the second band will tell you the second digit the third band will tell you the number of zeros which you need to put after the first two digits and the fourth band tells the error percentage means it can be that much percentage above or below the stated value now see the first band in this case is yellow so it the first digit will be four the second band is violet so the second digit will be seven the third band is origin color so the multiplier will be one thousand so we get the value of forty seven thousand and the fourth band is gold so that means it will have a tolerance of plus minus five percent so the net value of this resistance is 47 000 ohms or you can say 47 kilo ohms with the tolerance of five percent now we see the five band code okay the first band tells the first digit the second man tells you the second digit the third bank tells you the third digit fourth band tells you the multiplier here and first bank tells you the tolerance we'll consider this example first band is orange and color so the first digit will be three second band is green so the value will be five the third band is black in color so the third value will be zero and fourth band is red so the multiplier will be hundred till now we get three five zero and double zero so this is 35 000 and the last band is brown in color so one percent of tolerance so the net answer will be 35 kilo ohms with a tolerance of one percent you can refer to this chart whenever you need to find the value of your resistances and i understand this might be confusing at first but with practice you can understand this very easily in this section we will finally take a look at the main thing most of you must be already waiting for this section to come up so this blue colored thing which is present in your kit is the arduino board i will tell you what is it what it can do and how to start using it finally but before that i would like to tell you about some terms which you may or may not have heard about before starting this course so these terms are microprocessor microcontroller memory integrated circuits etc microprocessors are known as a brain of any computer they consist of a cpu which stands for central processing unit which is responsible for doing all the computations and calculations which we need to carry out they need additional peripherals like ram and rom in order to function example of a microprocessor is the cpu which is being used in your computer right now if you go and check the history of microprocessors you will see the microprocessors have come a long way after so many improvements in developments microprocessors and graphic processors are used where there is a need of heavy computational cycles like artificial intelligence deep learning selfdriving cars and highend robots our daily applications like playing games movies browsing internet also requires our microprocessors and then there are microcontrollers microcontrollers are integrated chips that are basically tiny computers but are powerful enough to do a lot many tasks like controlling motors pumps other appliances or they can send some sensor data to internet cloud control basic displays and even act as brains of some intermediate level robots applications are endless trust me the power requirements of such integrated chips is very low and you can even run these chips on batteries for days or even months they have all the peripherals like memory and flash storage built on the same chip if we compare microcontroller and microprocessor in terms of cost a microcontroller is far cheaper than a microprocessor however microcontroller cannot be used in place of a microprocessor and using a microprocessor is not advised in place of a microcontroller as it makes the application quite costly if we compare them in terms of speed if we say human brain is fast then microcontroller is faster and microprocessor is fastest but please note we are talking in a very general way this won't be applicable if you compare an old generation thing with a new generation thing as technology advances it won't make any sense to compare and also some exceptions are always there it is really possible that you or any human may be faster so do you have any guesses in which category or arduino board will fall if you said microcontroller then you are partially right an absolutely correct answer is that arduino is a circuit board which has a microcontroller on it which act as the heart of that board the arduino board given to you in your kit is arduino uno which uses microcontroller atmega328 there are many more kinds of arduino boards available with other microcontrollers which may be superior or inferior to atmega328 but arduino uno is just right for our applications you may want to pause the video here to have a look at all these boards and admire how beautifully they are made so arduino is basically a company in italy which made it really easy for people to use microcontrollers for their application the hardware and software of arduino is open source which means one can have access to the files and even modify them for their own work since it is open source many other companies take their design and manufacture their own versions of arduino so it is really easy to clone and modify the arduino board what makes arduino a beginnerfriendly tool is their easy to use hardware and software it can be used even by people having no technical background earlier people would have to use very difficult assembly language to control their votes but it is not the case with arduino as you progress with the course you will see yourself with how easy and intuitive this tool is you will see that uploading the code is as simple as plugging a usb cable and clicking upload button in this video we will see the parts which make up the arduino board so this is the diagram of arduino board which shows the typical components which are placed on it so we will begin by the digital pins the pins which you see here which are numbered 0 to 13 and some pins have a special symbol like this curvy symbol on in front of it which denotes pwm capability that means these pins support pwm other than that these pins take digital input from sensors and give digital output to some of the components all right so then we move to the builtin led which is shown by this led this led by default is connected to pin number 13. so whenever pin number 13 goes high this led will turn on and when that pin goes low this led will turn off and then we will see the power led this is the power led if this led is turned on that means your arduino is plugged in that means it's turned on right now then we have the main component the atmega328 chip it controls all the main functions of this board whatever is happening on this board is due to this ship then we have analog pins we have six analog pins on this board numbered from a0 to a5 we can connect any analog sensor on these pins then we have the power pins these are the power pins you can power any component using these pins but make sure that you don't your components are not drawing a lot of current basic sensors and basic you know breadboard circuits are fine with these pins then we see the power dc jack if you want to connect your arduino externally through a dc jack you can connect it through this jack the voltage input it can accept is 7 volts to 12 volts then we have tx and rx leds these are the tx and rx leds rx means receive tx means send transmit okay so whenever these leds are blinking that means cardinal board is either communicating with the computer or some other another arduino board then we have the usb jack you connect your arduino board with your computer using this jack then we have the reset button this button reloads the entire code which is running on the arduino board but please note that this button does not clears the memory of arduino here are few technical specifications of arduino uno by technical specifications i mean the information which you look while buying any item or a computer like in a computer you see how much disk space is there how much ram does it have or processor it has similarly arduino being a microcontroller board has some technical specifications like it has atmega328 as the main chip which does all the work it operates at 5 volts the input voltage which it can accept is 5 to 12 volts although according to the data sheet of arduino the recommended voltage is 7 to 12 volts and the limits are 6 to 20 volts so i recommend that 5 to 12 volts is a good enough voltage to operate arduino with and then there are 14 digital pins out of which six are pwm capable don't worry about pwm right now but just think having pwm capability is a good thing then there are six analog pins which are used to connect analog sensors to the arduino you can understand that these pins are connected to arduino through a 10 bit adc an adc is an analog to digital converter we'll talk about adc in further lectures the i o pins are capable of supplying 40 milliamperes of current so these pins cannot drive large appliances or the things which require more current like motors and it is not even recommended that you run motors through arduino but few leds and most sensors which we use in this course do not draw very large amount of current so these pins are just fine there is a 3.3 volt pin as well and the maximum current you can draw from it is 50 milliamperes and there is a flash memory of 32 kb which we use to store all the programs into it 32 kb must be seeming like a very less amount but trust me you can store lines of 1000 even 2000 lines of code in this and it won't even exceed 10 percent of the storage then it have sram of 2kb which is a volatile memory or more generally it is similar to ram on your computer again it would seem too less and i would repeat what i said for the flash memory that it is more than enough it also has 1 kb of eep rom which can store some variables even after you switch off the arduino clock speed is 16 megahertz clock speed is the speed that microprocessor executes each instruction one megahertz representing one million cycles per second i understand a lot of information in this video might have just bounced over your head and it's perfectly okay if you don't understand some portion of it i would just say don't lose your motivation and just stick with us and i promise you you will understand each and every part of it by the end of the course if not we are always here for help in this section i will tell you about arduino ide but before we jump into that first of all we need to understand what an ide is a text editor like a notepad along with the compiler is a bare minimum requirement to start coding but wait what is a compiler compiler is a special program that processes statements written in a programming language and turns them into a machine language which are basically zeros and ones which a computer can understand but unlike text editor an ide which stands for integrated development environment is a software tool which has a lot more functionality to make programming easier for the user it has a builtin text editor and compiler along with easy to use tools menus and buttons to compile run debug analyze and save the programs considering arduino they also have one official ide which has buttons to verify and upload the sketches they also have easy to use menus to select boards and ports throughout the course we will be using the official arduino ide and for that in the following sections we will be downloading and installing the official arduino ide now i will tell you how to install the official ide for that go to any browser and go to arduino dot cc then click on software tab you will find many options here we will go with the windows installer click on just download if you don't wish to donate anything donations like these help open source communities to fund themselves once the download completes we will click on it and when the installation starts click on i agree make sure that all these boxes are checked these are the essential drivers which are required for your computer to detect and communicate with the arduino board right we'll click on next then we will choose the destination folder i will go with the default one and click on install this process may take some time let's wait for it to finish in my screen it says completed but some people may get additional prompts to install those additional drivers all you need to do is just click on install on them as well and then once it is completed for you click on close and then you will find the arduino icon on your desktop then you just double click on it and here is your fully functional arduino ide window so now we will set up our computer for uploading our first basic sketch there is nothing complicated we need to do the first step is we need to plug in an arduino board with the usb cable given in the box and once you do that your computer will automatically detect that arduino has been plugged in and it will list it out on a specific serial port in windows it is known as a com port which you need to go and select using tools go to tools and then go to port and you will automatically see a com port here it is very likely that you see com3 if you have plugged your arduino for the very first time okay so you will see arduino genuine uno written over here if you're using mac then you will see something like this forward slash dev dot forward slash cu dot usb modem this is the port number and you will see arduino uno here instead of adding omega i have tested with arduino mega that's why it is showing it like that but you will see arduino uno right if you're using linux you will see serial port as power slash dev tty acm0 it is most likely will find it at at acm 0. after this step we are just ready to upload our first basic sketch so finally we will be testing our arduino boards and for that we will be using the builtin example sketches so in order to upload our first sketch we'll go to examples we'll go to basics and then we'll select the blink sketch this is the first sketch which will be uploading on our arduino board we'll go to tools we'll select our board as arduino uno and we'll select our port as com3 and then we will go to upload button we'll click on upload in order to upload the code there are more buttons like verify save open we will talk about these buttons in upcoming sections but now we'll click on upload it will first compile the sketch and then it will upload the code to the board after uploading you will see done uploading will appear in the messages done uploading right and you will see that led is blinking with this gap of one second is it blinking right if it is blinking then congratulations you have done your first example at this point the viewers without an arduino must be feeling a little stuck but please don't worry i've got you covered all you need to do is use an online simulator like autodesk tinkercad and for that you need to go to the website of tinkercad right this one and you need to create an account if you don't have it already you can choose the option relevant to you make an account and after creating your account you will see a screen like this all you need to do is click on circuits and create a new circuit at this window we need to search arduino uno r3 and just drag it over here right so now you have your virtual arduino board it will just function exactly like the actual arduino board and whatever code i write in official id in the following videos you need to write that into this window right so you will have this window over here whatever code i am writing in the official id you just need to write that in this area okay so just as you saw few moments ago that we tested our arduino board so we will now test our arduino board over here right so this is the same code which we wrote over there only the comments are not here right so this is exactly the same code and what we need to do after that is start simulation okay so it will be plugged in and you know we can see the outcome of our code over here and in some portions of the video you will also see that i am printing out the outputs of some code on the serial monitor so the serial monitor in this simulator is this right so you will see whatever outputs i'm showing in the videos you can see them here okay so don't worry if you don't have an arduino at this point you can still follow along the video so before we move forward from this point having the knowledge of a few more things would be greatly beneficial things such as breadboard how to make connections in breadboard some safety instructions for the arduino and some basic terms like input output sensors analog digital bit and byte you may want to revisit this section as well if you find yourself forgetting about these concepts as we proceed all right so let's start with breadboard is this the first thought which came to your mind when you heard of breadboard well that's a perfectly genuine thought when i stepped in the field of electronics i myself had this thought but when i learned that the breadboard in electronics is a completely different thing i had a really big face pump moment let's discuss this in the comment section as to why it is called as breadboard or from where it got its name we will just talk about breadboard in terms of electronics breadboards are meant to make quick nonpermanent connections between electronic components and they are covered with tiny socket holes which are connected in rows the breadboard itself is broken into four sections there are two inner sections full of short horizontal rows and two outer sections with long vertical rows if we remove the adhesive which is present on the back side of the breadboard we would see something like this a series of metal connections do you see that we'll discuss what this means in a few moments but before that i would like to show you the strip which is connected inside that it is a single strip which is taken out from that bright board and it would look like that so you see this entire metal piece so when we make connections on that you know it is internally connected automatically coming back to this if we consider this row corresponds to this all right so that means these points are connected among themselves automatically and like these rails are connected so these points are also connected from inside we'll discuss this in detail we'll also make circuits don't worry about that if you're wondering what kind of circuits which we can make on a breadboard i would like to tell you that you can also make your arduino uno on the breadboard and it would look like this now we will see how to use a breadboard we will also understand the connections in details all right so this is our breadboard okay can you see all these holes like this which are getting highlighted in blue right these are the holes which i was talking about in the previous video okay so i'll now show you how they are interconnected for example these points are interconnected the yellow ones all of these are interconnected within themselves right like these all these points are connected among themselves but please note that this point is not connected to this point internally this point is only connected to these points like can you see right like this all these points are interconnected all right so then we'll see these points these are the external points all of these points are interconnected like this right like this and like this in some breadboards there are connection break at this point so you will just see that the points are connected only till here and these points are connected till here but this point is not connected to this point in some breadboards but in most breadboards they are all connected like this can you see that okay so now i'll tell you if you want to connect some two points for example we'll take a wire and we'll join this so now these points are connected among themselves right no matter how many wires we join here these will still stay connected okay and what if i connect a wire here then all these points will get connected you see that right i think it is really interesting to see that how easy it makes for us to make connections on the breadboard right so now we'll see how to make a series connection right we'll take a resistance like this okay and we'll place it here okay now i will take another resistance and connect it here okay so now these resistances are in series now if i make want to make another resistance which i want to take in series i'll place them here all right now these three resistance are connected in series how for example these points were interconnected okay and so we connected our resistance here so that means they are in a continuous position now similarly here as well okay i would like to tell you that some people make a mistake and to make a series connection they would go like this they will place the resistance here instead of placing it here right this is a series connection but this is no connection at all because these points are not interconnected however if we join a wire like this okay so now these points are interconnected okay i hope i am making you myself clear now we will try to understand a parallel connection similarly we'll take resistance and we'll place it here now since in parallel connections all of the points are you know originating and ending at the same point and these points are interconnected so we'll take another resistance and place it here so these two resistance are in parallel now if you want to take a third resistance as well and we'll take it and place it here now these three resistances are in parallel okay now we want to make a connection in which there is a resistance in series and then there are two resistances in parallel we'll try to make that circuit this is one resistance okay and then if we make it like this like this okay and we take another resistance and we place it like this okay so what that is representing it is one resistance which is in series with this resistances which are in parallel among themselves and then there's another resistance which is in series with that okay okay it's all right if you don't understand what i'm trying to say right now we'll understand this with one more example so before i begin with my second example i would like to tell you a few more things like i told you in the previous video if we connect a wire like this the points become interconnected but if you take a resistance and connect it like this so these points are not connected to these points right because it is a resistance you see that in this case these points are interconnected but in the case of resistance these points are not interconnected now another point which i want you to notice every connected wire like this it won't make any sense as these points are already interconnected right so this wire will not make any difference so now another thing which i want you to notice if we take a resistance and if we place it like this like this then also it won't make any difference because as we all know the current always takes the least resistive path so connecting a resistance like this won't make any difference because the current will travel through the rails only this resistance will not add any value to the circuit okay but however if you connect a resistance like this then it would make some sense okay how it will make some sense we will see for example we can connect it like this and like this okay so this is a series connection now these two resistances are in series but yeah please note that these resistances are not in parallel but please note that these resistances are not in parallel because these points are not connected okay now we will begin with our second example in this example we will just connect an led with a push button and a battery okay so when we press the push button that led will blow so we will make a circuit on that so for that we'll take a push button circuit first of all okay this is a push button circuit i'll tell you about push button circuit that internally this terminal is connected to this terminal okay so automatically this rail will get connected to this rail okay like this and this terminal is connected to this terminal so these points will also get interconnected okay so when you press this button this terminal gets connected to this terminal okay so these points will get connected when you press the switch all right then we will take a battery let's take this battery this is a simple battery 3.7 volts let's place it here this has a positive terminal and a negative terminal we'll try to connect it on a rail let's make this wire as red color and the black wire as the black one okay in general electronics this is also a convention that the red wire represents positive terminal and the black wire represents the negative terminal okay so now these and this entire rail okay so now this entire rail is positive okay as we have connected the positive terminal of the battery here just see that and this terminal is negative this entire rail is negative okay so we will start by placing a resistor as we should always connect our resistance in series when using a led replace it like this okay so that means this point and this point are interconnected so this resistance is in series with this switch and then we'll take one led this is the led okay as we all know there is a positive end and the negative end of the led so this is the positive end and this is the negative end we have connected the negative end to the resistance okay to make the led glow we have to always connect the positive end of the led to the positive end of the battery okay so first of all what we'll do is we'll take a positive wire from here right as we know all know this entire rail is positive so from any point on this rail we can take positive line so we'll take a positive line from here and connect it here this is a general wire so we'll make it blue all right and then what we want is we need to complete the circuit like this we'll take a black wire from here and connect it here okay so this is our circuit completed whenever we press this switch this circuit will get completed the positive wire will go from here the current will flow from positive terminal like this it will flow from resistance and it will go from circuit and then to the negative end and back to the battery but whenever we release the switch the circuit will break and the led will stop glowing this was the very basic example of a led in a breadboard in this video we will discuss about some of the safety instructions which we need to follow while using our arduino board the first thing which you need to keep in your mind is you never have to connect any voltage of over 5 volts on any i o pin okay any i o pin means any input output pin be it the digital pins or the analog pins you just don't have to connect any voltage over 5 volts on those pins you can only use any voltage over 5 volts to power the arduino through v in pin and you cannot connect any pin to a voltage over 5 volts okay next important thing you need to notice you never have to connect a 5 volt pin to a ground pin this way you will short it down an arduino will turn off the next point is you have to take care of the polarity polarity means you cannot connect positive and negative terminals in opposite ways what i mean is you cannot connect a positive pin to a negative pin of some other component and vice versa if there is no polarity management circuit on the device which you are using it will simply damage the device one more point is you have to be careful while using external power in this course for all the project the usb power would be more than enough but still if you need any external power you can use it through dc jack or vn pins and in that case also please make sure you don't connect any voltage above 12 volts although arduino can tolerate up to 20 volts but still it i advise you that don't use above 12 volts otherwise you will see unnecessary heating on the arduino board okay so these were the main safety instructions which you need to follow or you may damage your arduino and while doing our experiments i will also tell you about more safety instructions if they are required okay so now i will see you in the next video in this video i will talk about input and output and how to understand it with respect to arduino you may want to revisit this video when we study pin mode function it has been taught in arduino programming section so generally speaking input is something which goes inside an output is something which comes outside speaking technically input is some data or signal which goes into the system an output is some process information or signal which comes out of that system the system may be anything like in our case the system would mostly be arduino the sensors would be giving the data to the arduino an arduino would act on that data and give an output based on how you have programmed it please bear in mind that input and output is never absolute it is always relative to something as you may have been told in junior classes that input and output devices are fixed yes they are fixed but with the reference to the computer like a mouse is an input device to the computer but if we look in the mouse itself there would be several more devices like an optical reader which takes the movement of the mouse as input and gives its output to the chip inside which processes it and gives the cursor position as output similarly we have been told that a printer is an output device yes it is certainly an output device but with reference to the computer now if we see in a printer as well there is a main controller board which takes the input signal which is coming out from the computer and then that controller takes the decision that how to move the motors which colors to select in order to print the page i hope i am making some sense to you now if we see in reference to our course there are lot many things and sensors which act as input devices for the arduino like these sensors which you can see on the screen but wait what are sensors like humans have five senses which help us get aware of our surroundings and act accordingly similarly in electronics sensors help the controller to take decisions and give output based on the environmental data which is given by them sensors tell something to the controller by changing its voltage a change in voltage is read by the controller like we see in this image there is an autonomous car which has n number of sensors placed on it which are telling it about the other cars battery level fuel level humidity level etc now i will briefly discuss about these sensors which you see on the screen we will also discuss these sensors in detail when we use these particular sensors first of all we see is a rotatory potentiometer this device would change the resistance it offers if we rotate the knob clockwise or anticlockwise then we have a momentary push button switch when we press the switch it will close the circuit when we release the switch it will open the circuit then we have a force sensing resistor this resistor changes its resistance based on the force applied on it then we have a light dependent resistor this resistance change its resistance based on the light falling on it then we have a triple axis accelerometer usually we see accelerometers in phones and gaming devices okay the basic purpose of the accelerometer is to get the orientation of the object on which it is placed then we have a joystick joystick is nothing but a basic input controller you must have seen it on on the gaming consoles then we have a microphone or a sound sensor it will capture the environmental sound and noises we may want to record them or take some decisions based on that then we have a touch sensor it will just see if someone is touching it or not then we have a rotary encoder this sensor senses the rotation basically for example you can attach this rotary encoder to a motor shaft and we can see the rotational speed of that motor how many rotations it have taken or you must have seen a rotary encoder in our volume knobs in your music systems and we have an ultrasonic distance sensor it uses ultrasonic waves like in a sonar to tell the distance between the sensor and the object in front of it then we have a temperature sensor as the name suggests it will tell the temperature around it we have a temperature and humidity sensor it tells humidity as well along with the temperature then we have an infrared sensor this is basically an obstacle detection sensor it can tell if an object is there in front of it or not then we also have output devices output devices are those devices that can convert the output given by the arduino to some human readable form right for example i'll tell you there is an led which is known as light emitting diode it will basically just glow if any pin on arduino is set to high and we have an rgb led this is a special led it has all the colors uh red green and blue leds and it can form n number of colors and we have a buzzer it will make some sound if high voltage is given to it it will make some sound then we have a loudspeaker like this general speaker which you have seen in your mobiles and your laptops which you know you play music through and we have an oled display it is a fullfledged display you can just click graphics on it we have lcd display this is liquid crystal display you can display characters on it okay for example some value of a sensor or someone's name etc the seven segment display consists of seven leds arranged in a rectangular fashion as shown it is used to display numbers on it for example if we want to display seven so we will highlight this one this one and this one so we will see that seven is appearing if we want to show zero then we will highlight these ones okay and if you want to display eight we will highlight all of them and it will look like it is coming on we have a dot matrix display dot matrix display is an array of multiple leds okay we can show even characters on it you must have seen a dot matrix display in delhi mid to display or even you know scrolling displays you must have seen in front of some shops which display the shop's name so that is a dot matrix display then we have a dc motor it basically moves clockwise or anticlockwise if it is given some voltage across it then we have servo motor so this is a special kind of motor we can stop it at specific angles then we have a stepper motor a stepper motor is just like a dc motor but you know the entire rotation is divided into equal steps so like servo motor we can also stop it at specific angles and even lift heavier loads we can drive heavier loads using a stepper motor so to conclude this video i would like to say since we know about input and output properly now we can easily understand how arduino interacts with the environment and we can make some meaningful projects after knowing this see you in the next video in this video we will talk about analog and digital so to begin with i would like to tell you that our world is full of analog information like the colors we see fragrances we smell flavors we taste sounds we hear temperature we feel all these have just endless number of values there can be millions of colors smells flavors sounds etc this was in a very general sense now if we see in the terms of electronics something which is analog can have infinite number of values let's say your wall clock it can show endless number of time intervals though they are not marked on it but yet it holds the capability to tell you even smaller fractions of time while digital is something with discrete or limited number of values like a digital clock that clock can show you limited number of digits let's say it's 2 pm or 10 minutes past 2 pm depending on the precision of that clock it may still show you seconds but it is still limited to some values only so before we move further we also need to understand one more term called as signal signals are used to convey some information to someone like these road signs are passing on some information to us like that we need to stop or we cannot park here etc similarly when we speak we generate a signal and that signal contains the information which we want to pass on to the listener like i'm speaking right now i'm generating an audio signal which you can see on this screen this is the audio signal which i have generated with my voice okay so this signal passes through my mouth through air and to your ear and you make some sense out of it okay this audio signal is analog in nature because there are infinite number of values which are changing okay in electronics signals are some time varying quantities which convey some sort of information usually that time varying quantity is voltage that means with time the voltage changes okay or sometimes it is also current but usually it is voltage then those time varying signals are passed between the devices in order to send and receive information which might be video audio or some sort of encoded data usually signals are transmitted through wires but they can also be passed through air wirelessly okay so there is an entire field of study which is based just on signals like digital signal processing signals and systems there are some entire subjects based on signals only okay but for the scope of this course we will just tell you the required information so now there are two types of signals one is analog signal and one is digital signal like we just saw that our sound is a type of analog signal similarly there can be other analog signals as well typically an analog signal would look like this that means we have plotted time on the xaxis and voltage on the yaxis so with time the voltage is increasing then decreasing then going into negative part then increasing this is an analog signal it is not necessary that it stays this smooth it can be little messy as well like this this is also an analog signal okay and then there is a digital signal in digital signals there are only two discrete values either it is on or either it is off where 5 volts represents on and 0 volts represent off so you can see with time here it is on it is off on off on off on and off right now the sensors and the sensors which we use in our course will either give analog signal or either digital signal and we have to use arduino to read those signals okay we will see an example let's say we have a gaming console here this is the joystick this is a device which would give some analog signal and these are the buttons and these devices will give some digital information so this game machine can be programmed to read this state of the joystick for example we can make a character move forward when the joystick is moved forward we can also control the moving speed of that character for example if we make the joystick move a little forward then it will move slow and if we move it a little more ahead then it will move faster but this cannot be the case with the digital button we can just press the switch and tell the character to move forward we cannot decide the speed we can only set one speed there or we can program it to move forward fast based on some time okay but we cannot input the speed through buttons right so this joystick is sending some analog signal into the computer or the controller which is placed inside this gaming machine and these buttons are sending some digital information like either they are pressed or not they are on or off okay but this is a digital signal i'll give you one more example we have potentiometer here and we can move it as a knob and we have infinite number of values here we have a switch which is either on or off this represents analog and this represents digital so whenever we use analog sensor or component we will use analog pins of the arduino and we use digital pins for digital sensors or components okay i have given more insights on this topic in analog read and digital read video in programming section once you reach there and watch those videos as well it will be crystal clear to you and if not you can just comment down below or send us a message in this video we will talk about bit and buy so basically what is bit bit is the smallest storage or memory size which can store a value of either zero or either one this box represents a bit here okay similarly if eight bits are combined then it forms a byte okay so we can say eight bits is equal to one byte so one byte can store zero as the smallest number why because in that case all the eight boxes or all the eight bits are holding zero inside it as i told you it can either store zero or one okay so each box has a multiplier and we take the value from this box and we multiply it with this box okay and calculate the value here and in the end we take sum of all the values so here what will happen 0 multiplied by 2 to the power 0 2 to the power 0 is 1 0 into 0 is 0 0 into this is 0 0 into anything is 0 similarly in all the boxes we'll get 0 so hence the smallest value will be 0 and when will be the maximum value if all the boxes are 1 right so here we will get 1 into 2 to the power 0 that is 1 and 2 to the power 1 is 2 here we'll get 2 here we will get 4 here we will get 8 here it will be 16 here it will be 32 64 and 128 now if you take a sum of all these value you can calculate it on your own we will get 255. now in case if we want to store a value greater than 255 so now in that case we will have to take one more bit aside this so it will become 9 bit so the 9 bits can store 511 values and what if we have to store a bigger number than that then we will add another bit here as well and it will become 10 bits so 10 bits will be able to store a value till 1 0 2 3. so now what you have to keep in mind is you will be needing this information whenever i say 8 bits 10 bits 12 bits in the course so we can only store values up to the upper limit of that space okay so this information will be sufficient for you to carry on the course but yeah if you want to know more about binary math you can just google binary maths and you will get really good links from wikipedia and other websites and you can just read them if you face any problem you can always comment down below and we will get back to you in this section i would cover all the essential programming concepts that you would need to get working and make projects with arduino i would like to tell you that programming is a game of practice the more you practice the more you get better at that so i would cover all the essential topics to get you started and i will also tell you about concepts as we progress ahead so let's get started before we know about arduino programming we need to understand what programming is programming is something which we do to tell a computer or a controller what to do computers don't understand the language which humans use to communicate with each other computers only understand the zeros and ones so by programming we tell it what to do in our language and a compiler or an interpreter converts that into a language which computer understands and the computer finally acts on it so there are many programming languages over there like c c plus plus c sharp python java etc all of them have their own benefits and drawback the language which we use to program the arduino is a mixture of c and c plus plus which arduino makers call as wiring the best part of this arduino language is that it is uniform across all platforms that means it won't matter if you use windows mac or linux the output of the code would be the same so in the next video we will start to look at arduino programming in a bit more detail so let's start by opening up our arduino ide once it opens you would see this window all right and we see void setup and void loop is written over here let's discuss whatever we see on the screen the first line which we see is white setup right it says void then setup then a pair of brackets then a curly bracket then we have two forward slashes then it says put your setup code here to run once and then we have another curly bracket so what we have done here is we have declared a mandatory function known as setup and this is how you declare functions in arduino then we have a curly bracket in most programming languages these curly brackets indicate a block of code this left curly bracket means the start of the block and this right bracket shows the end of the block whatever code which goes inside this block belongs to this function the arduino id would help you recognize the blocks of codes when you click on these brackets for example when you click here it would highlight this bracket automatically that means this is the start of your function and this is the end of your function whenever you click here then it would highlight the ending can you see that all right then we see these two forward slashes these forward slashes mean a single line command whenever we write a comment compiler entirely ignores whatever is written after that so coming back to void setup this mandatory function contains all the lines of code which we want arduino to run once when it is turned on or when we press reset button we'll talk more on this in coming lectures similarly there is void loop in this section we write all the code which we want arduino to run all the time repeatedly that means whatever is written in this section would run until the arduino is switched off the void loop runs after void setup so in the next lecture we would see the blink led example which we used to test our arduino in a little more detail we will understand each part of that code so see you in the next lecture so till now we have understood that the two functions void setup and void loop are the bare minimum requirement to run our code successfully why are they mandatory i will just show you in a moment i am removing these functions and i'm hitting compile the compiler has passed us with errors just read them undefined reference to set up undefined reference to loop that means it is expecting that we must define these functions now i will bring back these functions now i'll hit compile once again now the compiler has successfully compiled the code so with that we can say arduino ids compiler expects these two functions like some other programming languages expect the main function without that we won't be able to run the code we would get an error as you saw so now we will see some more concepts in the blink led experiment so for that we'll go to files examples basics and then blink all right so this is our blink example this is that same code which you used to test your arduino so we see a huge chunk of lines here this is a block of multiline comments like we saw a single line comment in the previous video we start a multiline comment by a forward slash followed by a star and then we write whatever we want and then we end it by a star followed by a forward slash so anything which is written in between is ignored by the compiler you may ask then why do we write comment the answer is the comments help us to document the code and they also help the other readers of the code to understand what is done by the author of the code comments also help the author himself to recall what he did when he sees his code at the latest date since comments are totally ignored by the compiler not writing them won't make any difference for example if i remove this comment and compile the code it will still compile and with the comments also it will run just like that since these comments don't serve any technical purpose in the code most developers develop a habit of not writing that comment which is certainly not a good practice it is always advised to write comments for the reasons which i have already told so now i will tell you about the white spaces and case sensitivity the spaces which you see here here here etc like here here won't make any difference as the compiler would ignore them like the comments now what i mean to say by this is that we can add as many spaces as we want wherever we want and the compiler won't say anything to us it will still successfully compile the code like this all right but what we can't do is we can't add spaces in between like this otherwise you will get an error if you compile now just see that how many errors we have got so now you will ask what's the purpose of white spaces white spaces basically help us indent the code it makes it easier for us to identify the blocks of code it also makes the code look beautiful for example if i write something like this what do you think this code looks better or this code looks better obviously this one all right so proper indentation is important now coming to case sensitivity arduino language is case sensitive what i mean by that is the small character would come as small and the capital character would come as capital you can't interchange that for example this void cannot be written as this it will give an error white does not name a type right in this pin mode you see we cannot write pin mode as the spin mode right then also it will give an error so same goes for everything what you see here like this high cannot be written as high or anything for that matter you have to write it exactly like this don't worry if you find it too difficult to remember you will get a hang of it very soon remember what i told about programming it is the game of practice it is very common to mess up so the arduino ide has builtin provision to help us with that what i mean to say by that is if you ever mess up the casing by mistake you would see that this is no more coming in orange color right now it is coming back in orange color same goes here so if you ever see that these critical words are not showing up in color form you can guess that you have made a mistake now let's see what is done here in void setup it says pin mode led builtin output this pin mode is a builtin function which configures the specified pin to behave either as an input or an output this input and output is in reference to the arduino if something is going into the arduino through that pin we would configure it as input or if something is coming out of arduino through that pin it will be output in our case the builtin led would need some sort of output from arduino so we will use output so if we see this line in a little more detail we have written pin mode then there is an open bracket then we have written led built in then there is a comma then there is output then there is bracket close and there is a semicolon i won't be surprised if you have not noticed this semicolon till now i won't be surprised because it is very very common to forget this semicolon this semicolon marks the end of a statement that means we are telling the compiler we are done with the statement we have finished one line if we remove the semicolon we would get an error you see expected semicolon before this so back to that what this line means is we have called a builtin function called pin mode which has two arguments the first argument is the pin number which we want to configure and the second argument tells the configuration which we wanted to act as this builtin led is connected to pin number 13 of arduino so we are telling arduino to set the configuration of pin number 13 as output okay this is what this line is doing also note that this line is written inside the block of void setup can you see that right one more thing which i would like you to note is this led built in the compiler is automatically replacing this led built in with pin number 13. also note that the compiler is not changing the led builtin to 13 magically it has been fed somewhere else in the arduino libraries we will talk about libraries in coming lectures but what i want to say right now is this is equivalent to this for those people who felt a little uncomfortable when i said we are calling a function here which has two arguments i just want all of those people to know that we will talk about functions calling functions arguments of the functions in a lecture in which we talk about creating custom functions then you will be able to relate what i said here exactly but for now just understand we use pin mode function like this we will have to use it whenever we have to configure a pin and using this inside setup means that we want this function to run once whenever we turn on the arduino or reset our arduino all right so now we will see what we have done in void loop the first thing which we see is digital right when it is led built in then we have high okay so the digital right is an inbuilt function which is used to manipulate the digital pins and we can also manipulate analog pins using digital write if the pin is declared as output in setup using pin mode digital write will write a value of 5 volt if we use high and to 0 if we use low but do make sure that you have declared the pin as output otherwise you may see unexpected results then after this line we have delay the value of 1000 in that as the name suggests the function would pause the code here for a specified amount of time in our case it is 1000 milliseconds which is one second whenever we use delay the entire state of arduino is preserved and nothing happens during that time then we have another digital write which would write low to the led built in that means the led will turn off here the led will turn on here it will turn off and this another delay will keep it off for one second and this entire process would keep on repeating unless we turn off the arduino as this is inside white loop so if we change the value of this delay to 500 we would see the change in blinking pattern i would like you to try changing the value to your desired value and comment down below if you were able to see the change now i would like to tell you that you can also store this delay value into an imaginary container known as a variable we can do that by writing int my delay value is equal to 100. you can also choose some other name over here there are some rules to deciding the variable name and you would gradually get to know those rules as we progress along the course so now we can take this value and replace it here so now while the arduino is looping on this code it will take my delay as 100 instead of some other value what benefit do we have to use this we can change our value to any other value like this or this if we need to change the value instead of changing here twice and making our code error prone we can just change the value here it will save our time and also make our code less prone to errors we can also make our own variable to define led pin and we would do that by hint led pin is equal to 13 and now we will take this led pin and we will replace it here right so this code will work exactly like the earlier code and it would work flawlessly the benefit of using our own pin is that we can change the pin which we want to use later for example now i have decided to use pin number two instead of pin number 30. so instead of changing the pin number from 13 to 2 everywhere i can just change it to 2 here so now automatically the compiler will pick the value of 2 of led pin and replace them here now some of you must have noticed the way how i am writing led pin like small ln and capital p what's the reason behind that now since we cannot keep spaces between our variable names and led and pin are two different names so the compiler will throw an error and some people came up with the solution that to name variables like this we can keep the first character of the second word capital in order to differentiate so now our eyes are able to differentiate between led and pin properly and this technique is known as camel casing if i have to use more than two words what i can do is like this so now my eyes are able to read my led pin as three different words instead of one word but for the compiler it is just the one word and now some of you must be wondering what is int why we have declared it here right so in the next video we'll talk about this int and the other data types variables and more about variable scope see you in the next video so now we will discuss about variables what exactly are variables variables are nothing but they are kind of a virtual containers which is used by a compiler and we store some values in those containers there are different kinds of data which we can hold in different kinds of container for example at your home you store sugar in some kind of specific container you store tea in the tea container oil in the oil container similarly in programming as well we have some sort of containers and those can store some sort of specific data the variables are available in different sizes and we will be talking about just the default variables which are used in the arduino programming the thing to note here is the bigger the container the bigger the value it can store the first kind of data type which we will see is int if you can recall we used in in the previous video when we declared our led pins and our own delay values right so int is basically a container which can hold integer values and i hope you're aware what integers are if not i will just quickly tell you that the number line is there the whole numbers from negative infinity to positive infinity are all integers which you can see here in this video like minus 4 minus 3 minus 2 0 1 2 3 4. the numbers greater than 0 are positive integers and the numbers less than 0 are negative integers the default integer which we use in arduino programming has a range of minus 32 768 to positive 32 767 right what this means is the size of integer can hold these many values if you try to store value beyond this range the values will overflow now i will tell you how to declare an integer in programming language first of all we write int then we name the variable like in this case the name of the variable is value and then we assign a value to it for example we have assigned a value of 5 here right and then a semicolon we can also assign it like this we write int then value and we do not initialize it with any value if we do not initialize any value the default value is zero i'm going to say is if you do not initialize the variable the default value which it holds is 0. we will see more about integers in a moment so before i can demonstrate how int exactly works in the code i need you to understand these three critical functions first one of them is serial.begin bracket 9600 bracket close basically this function enables the serial communication between arduino and the computer what serial communication is and what these functions are we will talk in detail in coming lectures but for now just understand we have to write this statement whenever we want any communication to happen between the arduino and the computer then there is serial.print bracket semicolon right we use this function whenever we want to print something on the serial monitor we will see serial monitor in a moment and then we have serial.println the difference between serial.print and serial.println is that serial.println just adds an additional line after printing whatever is ours to print now without any further delay we'll just see how integer works so now let's start afresh by learning about integers let me open a new file all right so i'm declaring my first ever integer above void setup like this end my variable is equal to 5 it is similar to something which we saw in the presentation when i told you about integers now to see the value of my variable i will start serial communication with my computer like this and now to see the value i will print the value serial dot println my variable so now i'll upload the code it's done uploading and now i will see the serial monitor so you see it has printed the value of 5 that means the value of my variable is 5 as we have declared similarly when i said if we don't initialize it the value is 0. we'll upload the code and see it again let me name the file first right if now we have not declared it so now we will see the value it says zero so now i will be telling you about how we can modify our variables for example the first thing which we can do is we will take our variable and add 2 to it so first operator which you see is plus these are arithmetic operators and we will be discussing more about these shortly now if you print our variable serial dot println my variable right so the answer would be 2. so the value of my variable initially was 0 and now we have added 2 to it so we have 2 here now for example if we had initiated it with 5 so now we will get 7 right okay as expected now the variable value is 7 right so now we will manipulate it by subtracting 2 from it now again we will get 5. let me tell you that shortcut to open the serial monitor is this button and then we will print it right 5 7 and 5 i hope i am making some sense similarly there is a multiplication operator and a division operator what we can do is let's say my variable is equal to my variable into 5 let's say now we will print my variable so what will we get in guesses we'll get 25 right so 5 was the value of my variable and we multiplied it by 5 so we have 25 so now let's divide my variable by 25 divide by 25 what will we get one right right we got one now the important thing which i want you to notice the integer variable can only hold integers it cannot hold fractions for example i'll tell you let me delete all this code for example if my variable was 3 right and what if we divide my variable by 2 mathematically the answer should be 1.5 but since our integer variable can't hold decimal values so can you guess what will it print now it will print one why because it can only hold integer part of any decimal the answer was 1.5 but it will pick only the integer value so if you want decimal values as well we will use float and we will soon learn about float now there is another interesting operator known as modulo it will give us the remainder after division let's say my variable is 6 okay and i want to get the value of the remainder we will say my variable equal to my variable modulo the symbol of modulo is percentage sign if we divide 6 by 2 so it will completely divide by 2 right so the remainder will be 0. so if we print my variable we should get a value of 0 right as expected if we divide six by three then also we'll get a remainder of zero but if we divide six by four we get a remainder of two right we will get two here now as expected now can you guess what if we divided by five what remainder will be we'll get one right as expected so these were the main arithmetic operators which we can use to modify our variables now for example we have more than one variables in our code my second variable and the value of that is 5. now what we can do is now let's see what will we get my variable plus my second variable right so can you guess what will we get we'll get 11. right as expected and what if we subtract it are we correct absolutely similarly we can also multiply what should we get 6 multiplied by 5 is 30 right what another thing which we can do is we can store these values here our results are not getting stored here they are just being displayed what if we want to store it we can take another variable my third variable and let's not initialize it okay so what we can do is let's take my third variable okay and let's store the value of my variable plus my second value and let's print the third variable we should get 11 here exactly so similarly we can do whatever we want with the variables but the most important thing which i want you to notice is before using the variable we have to declare it for example if we do not declare my third variable okay and try to do something with it the compiler will throw us an error my third variable was not declared in this scope all right we'll discuss about scope in coming videos just wait for some time you also need to note that you have to declare the variable before using it right you cannot do this as well for example you try to declare your third variable here right then also you will get an error you have to declare it before using it you cannot declare it after using it right the last important operator which you need to know to be comfortable with the course is the increment and the decrement operator there are two types of each one is post increment and preincrement and post decrement and predecrement all right the purpose of increment operator is to increase the value of variable by one and the purpose of decrement operator is to decrease the value of our variable by 1. i'll show you this by an example we have my variable and the value of my variable is 6. so now if i take my variable and do plus plus this plus plus is post increment operator okay and now if i print my variable you will see that we will get 7 right so now if i use preincrement operator then also we'll get the value of 7 see so now you may ask what is the difference between post increment and preincrement well there is actually a difference and you will get to know that difference when we use this operator in some expression for example let's see it here if i increment the value of my variable like this like you see in serial println then we will get value of 6 right as you can see and the reason behind this is in a post increment operator the value is first used in the expression and then it is incremented now if i use a pre increment operator then we will see we get 7. so by this we can understand by preincrement operator the value is first incremented and then used in the expression similarly there is a decrement operator if i do my variable minus minus will get 5 because my variable was originally 6 so we decremented it by 1 so hence we get 5. i hope this concept was clear to you this concept will be used multiple times during our course so if you have any questions you can comment down below and in the next video we will look at the float data type so now we will look at the float data type this data type is capable of holding decimal places as well like we saw in the integer it cannot hold decimals the float can hold decimals as well and the default float which we use in arduino programming is precise up to 7 decimal places let me explain you in a better way like for example the number you see here is a real number it is 863.267 right so in integer if we try to store this that would store only 863. it will just ignore 0.267 so if you want to use 0.267 as well in our memory so we will use a float data type so how do we declare that we write float then space then the name of that float variable in our case it is value equals to 5.6 or some other value which you want then a semicolon you can also start a float uninitialized like we have done here so let's now see the demonstration of how float is used in a programming we will declare the variable my float variable is equal to 7.8 for example let's see right we can see the value of 7.8 now let's see what happens if we try to store 7.8 in an int variable as i told you in the presentation we'll get seven right can you see the difference now now we will just quickly see the limitation which we had while using int variable that while dividing we could not store the decimal part so we will see if we can store that in float variable or not let's see it quickly i'll take my float variable and i'll divide it by 2 okay and we'll see the my float variable then let's comment this statement all right 7.8 divided by 2 is 3.9 we can use all the operators which we used in the int variable like plus minus divide multiply increment decrement and floats as well okay so you can try that on your own and comment down below if you face any problem so now we will take a look at the bool or boolean data type they can be used interchangeably right but we prefer to use bool so the pool data type holds one of the two values true or false that means if something is true or if something is false for example we can declare a boolean variable by writing pool then the name of the boolean variable in our case it is is tall equals to true or false we'll take another example bool is fit is equal to false semicolon so this way we can declare a boolean variable but i want you to note is that one high or true are considered same by the id also 0 low and false are also considered same by id by id i mean the arduino ide right and anything other than 0 is also considered true by the id we'll look at what exactly this means in the coding now let's understand the boolean variable in the coding we will initialize it by writing bool we will then name it and initialize the value of say one as i told you one high or true all these three hold the same meaning and similarly zero low and false all hold the same meaning if we try to print the variable let's see what happens it will print zero right because false is zero if we use low then also it will print zero same goes for true if i use true here it will print one and the other thing which i told you if you use anything other than 0 that would evaluate to 1 let's see that also for example i used 78 let's see what happens it still gave 1 okay so that means bool can either store 0 or 1 that's all and what's the purpose of boolean operator we check if something is true in the code we'll see examples while doing our experiments shortly i would like to tell you if we want to check some condition is true or false or we can initialize our condition as well if something is true then only we have to do certain tasks you will understand more about boolean data type when we progress in the course like when we study about conditionals or when we study logical operators or when we study the comparison operators we will now move on to another data type which is known as byte the next data type which we have is byte so as the name suggests it is a byte long data type it can store up to eight bits of data so as we all know eight bits equals to one byte okay so a byte is just like an integer but the only difference is the range is 0 to 255. so if you're sure that your variable is not going to exceed 255 you can always use a byte type data type so using a byte data type will save your arduino memory so we will now see how to declare a byte we will write byte space name of the variable equals to and the value which we want to add in that then a semicolon we can also declare it without initializing the variable and in that case the default value it will store is 0 just like integer so let's just quickly declare our byte and let's print it right so now we will look at our next data type which is char which is a short for character as the name suggests it can hold a single character any character present on the keyboard for that matter including all the symbols like comma question mark numbers like 1 2 3 characters like abc small caps everything let's see how we declare a character we write char space name of the variable equals to and the character which we want to use and that is enclosed in single inverted commas and then a semicolon we can also declare our character like this as we have seen it many times already the thing to note about characters is that it is still stored as a number what i mean by that is there is a full ascii table each character on the keyboard corresponds to a number for example you can see a capital a is 65 and a small a is 97 right similarly you can see the entire table it contains all the characters which are present on the keyboard and each character has its own number so we'll look at this in a bit more detail using our coding all right so we will declare a character care my care is equal to right now we will print it right we get an a now if i write 65 which is the ascii value of capital a you can refer ascii table to verify then also it will print a and let's have a look right it printed a now still these are numbers that means it should be possible for us to perform some arithmetic on that for example if i take a here and add 1 here right so what should we get we should get 66 as expected why because the value of a was 65 and it added 1 to that so we get 66 right a char data type occupies one byte in the memory okay so i hope you understood the char data type i can understand if you got a bit confused with the character arithmetic don't worry about that right now this information is enough to start our projects so now we have discussed all the important data types like end float char bool byte and you have also learned when to use which type of data type so i'm pretty sure that you won't face any issues while performing your experiments although there are more data types like arrays and strings which are slightly more complicated than data types which we have already discussed and they would also involve the usage of loops so we will cover them after discussing loops as that would make it easier for you to understand for now we will move on to our next topic which is variable scope and qualifiers see you in the next video now since we are familiar with the data types and what variables are we can easily understand what is variable scope and qualifiers so let's start by understanding what is scope in many programming languages including arduino's programming language it matters where you have declared your variable speaking of which we have two kinds of variables global variables and local variables a global variable is the one which can be seen by every function in the program while local variables are only visible to the function in which they are declared in the arduino environment any variable declared outside of a function example void setup or void loop or any other custom function is a global variable so let's start by understanding that in a proper manner so what positions would qualify for writing a global variable the first position which we see is just above white setup the place where my cursor is blinking right now for example i write int myvariable is equal to 6. so in this case my variable is a global variable as i told the global variable is accessible in all the functions let's see that by printing my variable in void setup right it will print here as well it will print in void loop as well let's make an identifier so that we can identify in which function it got printed serial.println printing in setup all right and let's differentiate printing in blue all right let's have a delay here because it will print very fast otherwise okay let's see that now right printing in setup and printing in loop it is printing again and again because we have written that in loop as we already know loop function will run until and unless we turn off the arduino so that means my variable could be accessed by white setup as well as while loop that means this is a global variable now we will see a local variable instead of declaring it above void setup let's declare it in void setup so now let's try to compile this we should get an error why because my variable was not declared in the scope it is saying in void loop you did not declare my variable so i don't know what my variable is so let's comment out this line now it will compile okay it compiles successfully and it will just print in setup once right if we declare my variable in void loop and just uncomment this line now we'll get an error in white setup because it was declared in void loop but it was not declared in void setup you see in void setup my variable was not declared in the scope now let's see a consolidated example of using global and local variables together the variable which i declare here is in my global variable is equal to 789 so let's print it here and let's also print it here okay this one is accessible to both white setup and while loop let's declare a local variable here and my local variable is equal to 852. so this is a local variable and it will be accessible only to white setup now let's try to print this my local variable note that we can use same names if we are using a different scope for a variable for example we can use my local variable in void loop as well and we can give it a different value 1 2 3 for example and let's print this as well so what should be the expected result when we print my global variable it should print 789 and when we print my local variable when the code is running in void setup it should print 852 and when it is running in while loop it should print one two three so let's upload this code is that as expected let's see printing in setup it printed my global variable which is 789 and my local variable which is 852 right now in printing in loop it printed my global variable 789 and my local variable which was 123. so i hope you are clear with the scope of the variable when programs start to get larger and more complex local variables are useful way to ensure that only one function has access to its own variables this prevents programming errors when one function modifies the variables used by other functions this concept will get clearer to you as we progress in the course so now we will look at qualifiers qualifiers basically define additional behavior to our variables there are two main kinds of qualifiers one is constant and one is static the constant qualifier is declared by using const keyword it is a variable qualifier that modifies the behavior of the variable making a variable readonly this means the variable can be used just as any other variable of its type but its value cannot be changed you will get a compiler error if you try to alter a value to a constant variable we will just see by an example we will declare our variable constant int my variable is equal to 5. now my variable is a constant integer you cannot add anything to it you cannot subtract anything to it you just can't alter it now let's try to alter it let's see what happens we got an error assignment of a read only variable my variable however you can use constant variables for doing the math for example i take another variable here is equal to my variable into 5 right since this is not possible we'll remove it we'll try to print the value of my second variable right so can you guess what will we get we got 25 right because my variable was 5 and we multiplied it by 5 so we got 25. so you may wonder what purpose do constant variables serve in the code well we can use constant variables wherever we don't want our variables to change their value for example there are constants like pi which is 3.14 and we can have our arduino pins as constants like if we don't want to change them in the code i would also like to tell you that there is an alternative in c plus plus language to define our constant variables which is hash defined as define is a useful c plus plus component that allows the programmer to give a name to a constant value before the program is compiled define constants in arduino don't take up any program memory space on the chip the compiler will replace the references to these constants with the defined value at the compile time so let's see this by an example we start by writing hash define then the name of the variable which you want let's say pi okay and the value of that variable which you want it can be anything for that matter it can be an integer it can be a float it can be a character so let's say the value of pi is 3.14 right also note that we don't terminate the defined lines by a semicolon we just write this so whenever we use pi in our code the compiler will replace the value which is written next to it there the compiler won't care if it makes any sense or not you have to make sure that it makes sense okay so now let's declare another variable of float type and let's name it area of circle okay and let's do the math pi into r square let's say r is 5 so right and now let's print the area of circle right let's upload it we see it has automatically picked up the value of pi from here and it has done the math and it is giving the answer to us right as hash defined doesn't use any memory in the arduino it is really tempting to use hash define but it certainly has some downsides the compiler will replace all the references to pi in the code and you will start facing problems so it is recommended that you avoid using hash define so use constant int in place of hash define unless you are falling short of memory so in the next video we'll talk about the static qualifier see you in the next video so we will discuss about static qualifier in this video let me just quickly clean up this mess first because it's looking so confusing so just observe what's happening let's declare a variable here int xyz is equals to zero let's increment it here and let's print it let's see what happens can you see that we initialized it by zero we incremented by one and then we printed the value so when the loop started again the value would be incremented to two let me stop this auto scroll the value will increment to two then three then four and five and six and then so on okay it will keep running until i stop it so in this case we have declared xyz as a global variable but i would like to tell you that it is not a good practice to declare many global variables so we should try that we use local variables as much as possible so let's try to use it as a local variable we will remove it from here and we will declare it here right we declared index y equal to zero then x y z plus one then we will increment it by one and then we will print it okay let's see what difference will it create can you explain why is this happening okay we initialize it by zero we incremented it we printed it okay and then it was again initialized to zero then again it was incremented by one and then printed so it will keep on printing one unless i stop this loop so now we are in a trouble if we declare it in loop then it would reset every time the loop is called and it is recommended that we don't use global variables that much so what is the solution the solution is that we use a static qualifier to do that we will just add static in front of our variable what this will do is this will just initialize it by zero and it will not reset it to zero every time the loop is called let's see if it solves our problem yup it did solve our problem so using a static data qualifier is a good way to preserve the data of our variables between the function call i hope it was clear to you please comment down if you have any questions see you in the next video in this video we will look at the comparison operators comparison operators are basically some operators which would tell you if something which you're trying to compare is true or not they would return a boolean value of either true or false so we have about five or six comparison operators we will just look at them in a moment the first operator which we have is a lesson operator and is represented by a less than symbol then we have a greater than operator then we have less than equal to then we have greater than equal to then we have equal to equal to and then we have not equal right so we have a total of six comparison operators we will just look at them what they exactly mean let me comment this out first uh let's have our variables end variable one right let's say it is seven and we have int variable two and it is eight let's try to compare them variable one less than variable two as i told you this operator returns something which is true or false so what will happen here is since variable one is less than variable 2 right so it will print 1. let's see so now let's do one thing let us make this variable 1 as 9. now we should get 0 because this statement will become false right as we expected so now can you guess if i make variable 1 as 8 what will happen let's see this should return 0 yes why because 8 is not less than 8 okay it is equal to 8 but it is not less than 8. so we'll talk about this condition very soon okay now we will have the greater than operator let's replace this right and change the variable to 9 back okay so what do you think it should return it should return true because variable 1 is greater than variable 2 of course i hope you understood these two operators then we have less than equal to we use it like this a less than symbol and equal to symbol this is a less than equal to operator what this does is it will return true if the value on the left side is lesser than the value on the right side or it is equal to the value on right side you got my point so previously when i made variable 1 equal to eight and variable two also eight it returned zero but in this case it will return one because eight is equal to eight so let's try that right so similarly a greater than equal to sign also works like this you can experiment this on your own then we'll look at the equal to equal to sign equal to equal to sign means it will compare if some values are equal or not it will return true only and only if a value is exactly equal in our case we will get one because our value are eight and eight we got one if i make it nine for example we should get zero then we have a not equal to operator we use it like we take an exclamation mark and then i equal to symbol this operator will tell you false only if the two values are equal okay in all the other cases you will get a 1 not equals 2 right if some value is equal to some other value it will say it is false because that is equal but if you take any value in our case for example variable 1 is 9 and variable 2 is 8 we should get a 1 because that is true right so we have covered all the operators and how they work so you may be wondering now what is the use of these operators in programming well these operators will help you compare the values for example you make a project in which you have to compare the values of the sensors so you may have to use these operators right and when you use these operators you will get some decision making capability in your code i would like you to note one important thing about the equal to operator many people make a mistake while using the equal to operator they use 1 equal to sign instead of 2 equal to signs while 1 equal to sign is the assignment operator that means you are assigning a value to a variable like in this case we have assigned a value of 9 to variable 1 we have used one equal to sign okay and when we use double equals to that means we are trying to compare something so to avoid making mistakes i really recommend that you double check the operator which you have used i will talk about this once more in the control structures when we study about the if conditional block and in the next video we will learn about the logical operators in this video we will look at logical operators the concept of logical operators is very simple we use logical operators whenever we want to take decisions in the code each operand is applied to some condition which may be either true or false we'll just see that in a moment so basically there are three logical operators and operator or operator and a not operator so let's see how it works in coding so the and operator the and operator is represented by two ampersand signs these signs can you see that then we have or operator and which is represented by two straight lines we'll find this symbol just above your enter key and then we have a not operator it is an exclamation mark that's all so let's see the and operator so the and operator expects that all the conditions which we are using in it are true in order to return a true these operators also return a boolean value of either true or false they also operate on boolean values which is either true or false like i told you they work on some conditions please hold on as i further clarify this let's start with the and operator let me just open the cl monitor so that we can understand it side by side the first thing which we have written is the lessons about and operator it is printed exactly as we have written it okay then it is true and true is true and true is written like this okay then we have written true which is the boolean value then the operator and operator and then another boolean value which is again true the true and true returns a true and both of the two conditions are true then the answer is true for all the other conditions it is false for example true and false is false false and true is false false and false is also false so whenever we use it to take decisions we tell the compiler you have to proceed only if both the conditions are true okay if they're false you don't have to proceed okay i hope it is clear if it is not clear don't worry we will just understand while we write our main programs then we have printed some empty lines so that we can have a space over here then we will see the or operator this is the or operator it is printing the lessons about our operator with the or operator even if one condition is true then the resultant will be true it will be false only if all the conditions are false for example we can see true and true is true true and false is also true false and true is also true false and false is false right then again we have printed some lines so that we can see the gap here then we will see the not operator the not operator basically just reverses the value of the boolean for example the not of true is we have used the operator here and the not of true is false as you can see it's zero then the not of false is true right it has just reversed the values it is very useful when we write our conditional blocks which we will see shortly all right so let me just make some changes so that you can connect it with the comparison operators which we used earlier okay so instead of straight away writing true here let's take 5 greater than 3 which is true right and instead of writing true here we can say seven is less than eight okay both the conditions are true hence we will also get true right then also we got true because both the conditions were true if we make one condition false let's say here 8 is less than 5 which is false right so true and false is false let's see that right this is giving false we'll just quickly look at our condition let's say both the conditions are false let's make false conditions 5 is less than 2 which is false 4 is greater than 9 which is also false so we should get 0 right which is this line false and false is 0. i can understand it can be a bit confusing for some people but i can assure you that once you start writing the codes on your own you won't face any problem while using these operators and even if you still have some problem we are always there to help you you can always comment down in the comment sections so see you in the next video we will now look at control structures so basically till now we have seen that the code is executed line by line that means the lines of codes are executed in the order in which we have written them for example we have written some code to perform action one then we have written some code to perform action two then in that case the action one will happen before action two when the action do completes then the action three will take place so similarly there is a controlled flow of code where we can decide which parts of the code we want to execute based on some conditions we start our code and then there is a condition that condition can be anything for that matter and based on that condition if it is true or false we can take some other actions let's say we have a switch we'll check if switch is pressed then we want to take some action if it is not pressed we want some other action to take place and the flow of code will depend on that condition either it will go this way either it will go this way and after completing that task it will jump back to the main code execute the lines which are present in the main code and then it will exit so the first control structure which we will study is the if statement we will understand about if statement and we will see how to use if conditions in our code in the next video so let us see the if condition whenever we write an if statement we write a condition along with that let's say we are trying to use a if block will take a condition which we want should be true if it is true then whatever we write in the if block will execute and then it will move on to the statement which is written just after if statement okay and it will execute that as well and then it will exit but if in case it is false then it will entirely ignore whatever is written inside the if block and it will straight away jump to the code which is written after if statement it will execute that and then it will exit let us quickly look at the syntax of if statement let's see this is our code we have written some statements we write if then we start a bracket we write our condition let's say something greater than something or if something is true if something is false if something is not true anything for that matter i will put a condition in this bracket then we close the bracket and then we open up the curly bracket then we write all the statements which we want to execute then we close the bracket and then we move on to write more statements in our code so this is the syntax of if statement so let us try this in our coding so we have an example here we'll write cl dot begin 9600 here so that we can communicate with the computer so we will write the first statement serial.println this line should print irrespective of anything and yes this line will print irrespective of anything then we will write if true serial dot println this line should print only if the condition is true please note that we don't use a semicolon here let's write another statement if false serial.print ln this statement will not print as the condition is false it is over and then again we'll write one line which should execute irrespective of anything let's say this only this line should also print irrespective of anything so let's upload this code and see what happens so we see this line should print irrespective of anything this line should print only if the condition is true this line should also print irrespective of anything did you know that when the condition was false the block did not execute let me do one more thing let's see a block of code executing let's print one more line here the second line right so now this line should also print there the second line because it was the part of this if block so whatever is written inside this block it will execute no matter what once the condition is true but of course writing true and false exactly like this does not make any sense right so we have to build our conditions let's say if 5 is greater than 3 then this should execute we'll see the same result because this evaluates to true right so basically we should keep in mind that a boolean value should come inside this okay in this bracket there should be a boolean value then only it would be able to take some decision based on that boolean value so now we can complicate the condition as well like for example and 2 greater than 5 but this is false right like we saw in the and operator both the conditions should be true in order to return true right but this is true and this is false so we'll now see that this block of code will also not execute let's see right as expected this line should print irrespective of anything this line will print anyway this line will also print anyway so now let's try to print this line we'll make this condition true 2 is less than 5 or 5 is less than 2. this condition is true because one of the condition is true right 2 is less than 5 that is true but 5 is not less than 2 this is false but in the or condition one statement has to be true to get the resultant as true so this line should print now let's see yep so we were able to print this line because we made the condition true okay so when we will be making our projects what kind of conditions will we use we will be using conditions like the sensor value on the left hand side should be greater than the sensor value on the right hand side then these things should happen so i think you were able to relate with this thing okay now i will tell you another thing for example i took a bool many people do mistake in this so let's start by taking a bool my bowl is equal to false so now what i want to do is i want to print these lines only if my bool is true so i'm comparing it if it is true then only it should print but this is not true right because the value of my bool was false so that's why the resultant was false so hence the lines present in this if block will not execute now if we write false then it will execute because it is actually false so we can see these lines got printed so now i'll talk about the mistake which people do what they will do is they will use one equal to sign instead of two signs so what will happen is the compiler will assign a value of true to my bool and the resultant value of my bool will become one okay and this block of code will execute right so the expression which we write in the if condition is executed first and then the value of that thing is taken into consideration if it is true or false okay in our case my bool was assigned a value of true and then the value of my bool was used please take care you use double equals to if you want to compare the values now we can do nesting of ifs as well what nesting means like this is our if block we can write more if blocks inside are the parent if block let's say we write another if if true serial dot print this is nested if right we can write another if inside that if false serial.println this is another line which will not execute so this was nesting of if this is the parent if this is a child if and this is a further child of this if right we can see like this this is the flow this bracket closes here and this bracket closes here for example in any case the parent if is false then all the child lifts will never execute please keep that in mind i hope you understood this point i'm pretty sure that you will be able to understand it in a better way when you perform your experiments so in the next video we'll look at the else statement see you in the next video now we will try to understand the else statement first of all let us look at the flow of the code we always write an else statement preceded by an if statement let's have a look at the flow of code when we use an else block there's an entry of code there is an if condition if that is true the body inside the if block is executed the body inside the else block is entirely ignored then it moves on to code after if statement after executing that code it would exit in case if it is false it will straightaway go to else block and it will execute the code which is present inside the else block and it will ignore the code which is present inside the if block after executing the else block it will go to the main code the code which is written after the if statement it will execute that and it will exit before looking at the syntax of else block let us compare it with just the if block so this was the if statement in if statement if the condition was true it would execute the body inside the if block then it will go to the main code execute that and then it will exit so when we use just the if condition without else that means we don't define what we want to happen if the condition which we have specified is false if it is false it will entirely ignore the if body and it will jump to the main code but in else we define what we want to happen if something is false so that we write in the else block so now let us look at the syntax of else block we start by writing if we specify the condition we open the bracket we write our actions here if the condition one is true then we close the bracket and then we write else if if we have more than one conditions for example if you want different sound levels of an alarm based on the temperature ranges for example at a lower temperature an alarm would ring slowly and at another condition let's say another range it will ring a bit louder and if it exceeds something then we want it to ring at the maximum intensity okay so these things can be controlled by if and else blocks okay after writing else if we write condition two if that condition is true think b will happen okay and then finally we write an else if none of the conditions is true then the else block will execute the thing which you need to notice here is if the condition one is true it will execute the thing a and it will straight away jump to the main code after this the control won't go in else if it will go in else if only if the condition one was false for example the code was running here it found that condition one was false so it will jump and check if condition 2 is true or false if it is true then it will do the thing b if it is also false then it will go to else block and do the thing c we will just understand this with the coding example so here we have example for understanding the else statement let's do this we'll write if true serial dot print ln my first statement so you can see the compiler has automatically considered this bracket which was originally for void setup for the if block okay we have to make sure we are using our brackets correctly now after closing the if block we will write else serial dot println my else statement all right so now we will close the white setup bracket now let us upload this code okay so my first statement got printed because my initial if condition was true and it will ignore the else block now let's make it false now we will see that statement written in the else block will print let's have a look my statement okay we can do the nesting in if else statements as well like we saw in the if video like i can start another if here if some other condition will write another task here so we can use endless if and else and the nesting of them as well by now you must be feeling a little bored by just printing the statements here and there and not doing any real things so in the next video i will show you a small simulation by using if and else blocks so see you in the next video so before i show you that fl simulation i would like to show you this comic just have a look at this comic for like 510 seconds and if you get the joke in this comic i can say that you have pretty much understood the concepts which we have discussed so far okay don't worry if you could not understand this once you finish the part where i'm teaching about functions i'm sure you will be able to understand it really well so just in case if you could not understand this i would say that please complete that section and then come back to this comic again and i'm pretty sure that you will have a good laugh okay so now let's move on to that simulation i was talking about so as i told you that i will show you a simulation of fns blocks in the previous video so i will just show you that simulation on the left hand side of the screen you can see a circuit diagram and on the right hand side of the screen you can see the code which i have used to make this simulation the simulation tool which you see on the left is autodesk tinkercad you can do a google search about it if you want to know more about this i'll help you in the comment section if you face any problem with this every one of you must have performed the blink example and i have very clearly explained you the functions which we used in that like pin mode digital write and delay so i will assume that you will not face any problem understanding this code so let's begin i have declared temperature as the global variable and initialize it with 0. in the void setup i have written pin number 678 as output as i want to connect our led to those pins so in the loop section i've started with if i'm trying to tell the compiler if the value of the temperature is less than 50 and is also greater than 10 that means it lies between 10 to 50. so i want to perform this action please note the values of 50 and 10 are not inclusive as we have not used the equal to sign if you want to include those values you will have to use an equal to sign as well you must be remembering less than equal to operator and greater than equal to operator right you can always revisit the videos if you have any confusion so coming back to this i've simply written the code to blink the led which is connected to pin number six pin number six is this one that means this led is connected to pin number six also note that all the leds which are connected here are connected to a common ground which we have connected like this then we have written else if that means if the previous if was not true then check this condition if temperature is greater than 50 and temperature is less than 70. that means the temperature range is 51 to 69. so if this condition is true then we want to blink the led connected to pin number seven which is this one pin number seven this and then finally we have written else if none of the conditions is true then do this thing which is blink the led which is connected to pin number eight which is this led so let's say we have temperature is equal to zero currently we have hard coded this temperature but in your projects you may have some sensors like lm35 or dht 11 which will return you the real time temperature of your room and code will act accordingly but just to test these conditions will be taking some arbitrary values so let's see in which condition will this zero fall okay if temperature is less than 50 or greater than 10 but it is not relying in this condition then it is greater than 50 and less than 70 so this is also false so ultimately the else code should run so let me start the simulation right you can see else statement was being executed that means this led is blinking so now let's change the value from 0 to 52. so can you guess what will happen for the value of 52 okay let's see the value of 52 is less than 50 which is false so ultimately this condition will be discarded it will check this one then so the temperature is greater than 50 yes temperature is less than 70 yes so this condition is true so hence the led connected to pin number 7 should start blinking so let's start the simulation so led connected to pin number 7 has started blinking pin number seven okay so let's change the temperature value to 25 so now this condition will get true so let's start the simulation right so this led is blinking so one small homework for you guys is you have to comment down below what will happen if i select the value of 100 we can take a pause of 5 seconds and just go and comment down below after then come back and see the results so led which is connected to pin number 8 is blinking why so because 100 will not fall in any of the conditions so the compiler will execute the else statement one interesting thing which i want you to notice is that right now we have chosen arbitrary values but with the sensors you will get really changing values you may get the values which are changing so the arduino will act in the real time okay if you don't change the value and the sensor changes that value and we get different values from that sensor then the arduino will automatically check which condition is true right now and it will execute that statement and it happens really fast so with the real sensor you may see led which is currently blinking may change very quickly for example if you light up a candle near the sensor then the led which is blinking may change and then if you remove the candle then you may see that the other led may start blinking depending on the condition which is currently running so i hope you are clear with this if you still have any questions you can always comment down below or send a message to us so we will now take a look at loop structure which is another kind of a control structure in this kind of control structure we will basically learn how to write instructions in order to repeat certain tasks instead of writing code again and again for doing a certain task we can learn how to repeat that task again and again for example the void loop function which we use in arduino is a loop structure whatever we write in that repeats on its own but that is a default loop structure however you may need something to repeat itself in a loop as well so for that we have loop structures basically we have three kinds of loop structures one is for loop the second is while loop and then third is do while loop we will look at them one by one in their dedicated videos but before that let us see how it exactly works so we make the entry to the code then there is a condition based on which we take a decision if it is true then the certain action which we have defined will take place and then it will come back and check the condition again if it is still true then it will repeat the action and this will go on and on until this condition becomes false if it becomes false it will break out of that loop and perform the action 2 which is written after the definition of loop after performing that action it will exit so in the next video we will look at how exactly the first control structure which is for loop works we will see the syntax and we will see how it exactly works in the coding so see you in the next video so now let us begin with the for loop this is the first loop control structure which is very commonly used in computer programming first of all let us know about for loop this is an entry controlled loop what this means is the condition based on which the task will be executed is checked first if it is true then only those statements will be executed and we use for loop when we know how many times we need to run a loop so let us see the syntax of for loop first of all we write 4 then an open bracket then we initialize some variable here that variable will count how many times the loop has to run then we write the condition here that condition can be anything this condition mostly includes the variable which we have initialized then we update the variable which we have initialized we close the bracket then we start a curly bracket we write all the statements which you want to get executed then we write curly bracket let's see how it is used now let's say i tell you that you have to write your name 10 times on the serial monitor so what will you do serial dot print ln let's say my name is ashish so with your existing knowledge you will take this line you will write it 10 times and then you will upload it you'll check on see that monitor you can see it is getting printed 10 times so now if i tell you that you have to type it 100 times so would you be willing to write it hundred times i guess no and some of you may tell that we can write it in void loop instead but writing that in void loop would mean that it would keep printing ashish until and unless you turn off your arduino you won't be able to count if it has printed 100 times you can sit there and count that but that certainly doesn't make any sense so for that a for loop comes to a rescue let's see how we use it we write for we declare a variable int i for example is equal to 0 and we write a semicolon then we write a condition here for example how many times you wanted to run let's say i less than let's say we want to print my name 10 times so let we will write 10 here and we will update the condition i plus plus okay we'll now write serial dot print ln ashish and now we'll see what happens right we can see the arduino printed my name 10 times on the screen one two three four five six seven eight nine and ten okay we can also add multiple statements in this block let's say we can write hello world okay let's see what happens it will write ashish hello world ashish hello world yep as expected it has repeated all the things 10 times now what advantage do you have is now if someone tells you that you have to write it 20 times instead of 10 times so instead of copying pasting that code again you can just alter 20 here now it has written it 20 times now for example i want to use this declared integer i in my code serial dot print and then we can directly use this i here we can also perform arithmetics on that for example i can do i plus 2 i plus 5 i minus 5 i divided by 2 anything for that matter but please note that the scope of this variable is just inside this block you cannot use this declared variable in other blocks even if you are using it in some for loop or some other function the scope of i will exist only in this block get my point let's see it will print 0 to 19 okay like 0 1 2 3 4 5 6 7 and 19. okay now let's understand how it was working all right so whenever we write a for loop the first step which happens is initialization this statement is executed only once when the loop is entered for the first time and after this the second step is it checks the condition this statement is probably the most important one it checks to verify whether or not certain expression evaluates to true if it is true then the loop execution continues then after that if the condition is true it would move on to execute the statements as the third step after executing the statements it will move on to the fourth step which is updating the variable it is typically used to increment or decrement some variable after the update the fifth step is to check the condition once again if that condition is true again it will come back to execute the statements once again then this step continues again and again until this condition becomes false the moment the condition becomes false it will come out of the loop and start executing something which is written after this loop now since you know this let us understand the code which we wrote earlier so now let us pay a closer attention to everything which we have written i've written for end i is equal to 0 then a semicolon and in the condition we have written i less than 20 that means i is acceptable till 19 okay and then we have written i plus plus you must be remembering that plus plus is used to increment a variable by one we have written serial.println bracket ashish that means when the value of i is 0 it will print aashish once then it will print hello world then it will print the value of i itself which is 0 right now then after executing this loop body it will increment the value by 1 and the value will become 1 okay when i is 1 it will check if i is less than 20 which is true it will execute the body once again then the value of i will become 2 it is still less than 20 then again it will execute the body so it will continue till 19 but after executing it for the 19th time and when the value becomes 20 this condition will become false the moment it becomes false it will not execute these lines and it will exit out of the loop in case if we had written less than equal to 20 then the condition would have been true but it would have actually printed it for 21 times because it is starting from zero other thing which we can do is start it from one instead of zero it will be equivalent to this but usually it is recommended that we start from zero so after knowing this really easy trick i'm really wondering if you're wishing that you knew this trick before when your teacher gave your punishment so in the next video we will look at how to do nesting in for loops see you in the next video so like we saw next thing in fl's block we can do nesting in for loops as well for example if you want a printer pattern like this a series of stars there are five columns with five stars in each row let me just comment it so that it doesn't create problem in our code we can simply go ahead and write and we'll write serial dot println and we'll print five stars right so let's see what happens when we upload this oops we forgot to add a double quote so now again oh we forgot to write the name of variable and i let's see so it printed a lot of stars but now what if we want a pattern like this a staircase type of pattern let me comment that as well okay so how will we do that it's very simple we'll do nesting of for loops let's say for enti is equal to zero we want five rows okay so we will write five then i plus plus then we will write another for loop we will take another variable here and j is equal to zero and we'll write condition as j less than equal to i and then j plus plus okay and then we'll write serial dot print please don't will not write print ln here because we don't want it to print in next line so cl.print and just a single star and then once this for loops executes we'll print a new line dot println so let's see what happens here okay we got that pattern now i'll explain you how it worked actually we took our first for loop we initialized our integer i as 0 and we gave a condition i less than 5 that means it will not run when i exceeds 5 okay or becomes 5 then we wrote another for loop and we took another variable j is equal to 0 and j less than equal to i that means in first iteration the value of i was zero and the value of j was also zero okay so here j less than equal to i that means zero less than equal to zero this is true and then j plus plus so it will print a star okay then the value of j will increase and it will become 1 so now this statement will become false because j is 1 and i is still 0 then it will exit out of this loop and then it will print a line then that means after printing one star it will print another line okay and then it will come back to this for loop now the value of i is 1 is still less than 5 okay and then it will come into this for loop so now the value of j is 0 and the value of i is 1 okay so 0 is less than equal to i it is true it will print a star then again and j will become 1 this condition is still true because 1 is less than equal to 1 right so it will print another star next to the previous star so it will print 2 stars let us see in the serial monitor right after printing this star it will print this star then the value of j will become 2 and then this condition will become false because i was still 1 then it will exit out of that loop and print another line it will print another line here okay then i will become 2 then it will go back in this loop and it will execute the loop three times 0 1 and 2. similarly it will go until and unless this condition also becomes false okay so i can understand it must be really tricky right now if you just go back and listen to what i said once again you will understand that and in case you don't understand you can always drop a comment or message us so in the next video we will look at another kind of loop structure which is known as a while loop see you in the next video in this video we will look at while loop a while loop is also an entry controlled loop an entry control loop is a loop in which the condition is checked beforehand before executing the statements which are written in the loop body this is the same thing which i told you for the for loop all right but the difference between the while loop and a for loop is in for loop we know how many times we want to run the loop but in while loop we don't know how many times we want to run the loop it is based just on the condition if some condition is true the while loop will continue to run endlessly and the moment the condition becomes false the code control will move out of that while loop that condition can be based on some variable or some external conditions like some values given by the sensor let's say we are making a robot and we are using a distance sensor we can use a while loop or to move forward unless the distance is less than some quantity and we want to exit out of that by loop as soon as the distance gets lesser than that specified value so that the robot can avoid the collision from any obstacle in front of it right there can be many more while loop uses but we will begin with the basics we will use our traditional method of printing variables on the serial monitor so let's see that so we have our sketch here let's use a while loop to print a table of two let's say we'll start with an integer which we will use as a condition int multiple is equal to one let's start with 1 while multiple is less than equal to 10 okay serial dot print ln multiple into two okay and let's increment the multiple all right let's see if we are able to print the table of two oops we forgot to write serial dot begin always write serial dot begin whenever you have to communicate with the computer let's upload that again right 2 4 6 8 10 12 until 20. this is a table of two now let's print a table of a complicated number let's say 73 yep this is a table of 73 so now let me show you how a while loop can run endlessly if the condition is true let us just make it true directly this will become an endless loop right now it will not just print numbers from one to ten it it will just print them endlessly let's use the easy number so that we can verify it won't stop at all let's see look at the speed it is printing all the even numbers can you see that let's have a look 2 4 6 8 10 12 14 16 as you know there's no upper limit to the numbers so it will just go on endlessly until the limit of int expires so i have another example to show you how a statement controls a while loop how it prevents the while loop from running when it is false and how it initiates the while loop when it becomes true so in the white setup i have written serial.begin 9600 to initiate the communication and then i have void loop i have declared a static variable a test variable which is going to control our condition i have defined it as static because i don't want to reset the value of test variable with each run uh if you have any confusion regarding the static part you can check the dedicated video which we have made to explain the static qualifier for a data type now while loop we have started the while test condition greater than five that means right now the test variable is zero as we have not initialized it so zero is the default value so zero is greater than 5 that means this is false so this statement should not execute okay but in the next line we have written variable plus that means we want to increment that variable the variable value will become 1 and it will print the value of the test variable then we are waiting for one second so that we can observe the changes which are happening and then again it will come here it will see while test variable greater than 5 that means it is still false because test variable's value is 1 right now and it is still false so it will still not go into this loop then it will become 3 then it will become 4 then it will become 5 at 5 also this will not become true because we have not used the equal to sign and when it becomes 6 this condition will become true and this will start printing let's see that right one two three four five six and we are in the while loop now okay this while loop is repeating endlessly because we have not specified any exit condition and please note while this is in while loop these statements are not being executed the control of code is looping here only since this loop is looping infinitely we might want to use some break conditions we will learn about break and continue statements in coming videos but in the next video there is one more loop which is known as a do while loop we'll learn about do while loop in the next video we'll take a look at the last loop control structure which is the do while loop the first thing which i want to tell you about the do while loop is it is very very similar to the while loop it works exactly like the while loop but the only difference is it executes at least once and that is why it is the exit control loop in exit control loop the statements are first executed and then the condition is checked while in while loop first the condition was checked if the condition was true then the statements would execute in this first the statement block will execute and then it will check the condition if the condition is false it will exit out of the loop and not execute those statements further and if the condition is true it will go back and execute the statements once again if you look at the flow the first thing which happens is it executes the statement block then it checks the condition if it is true then it will go back otherwise it will come out of that loop a do while loop is also used when we don't know how many times an action has to be repeated but we are sure that it should run at least once in those cases we use a do while loop a do while loop is used where the statement has to execute once otherwise we won't be able to take decision for example we are expecting a user to give us some input and we want him to give a positive integer as an input but for example he is trying to give a negative input so we can write a do while loop while the user gives us the negative input keep telling him to give us the positive input and the moment he gives us the positive input will break out of that loop okay so let us see a basic example of using a dowhile loop like we did earlier we printed a table of two we'll again print the table of two using a dowhile loop instead of a while loop so let us see how we do that we have initialized a variable known as multiple and initialized it with one okay we'll write cl dot begin to start the communication with computer so we'll write do then the bracket open we'll write cl dot printenet multiple into two then bracket close and semicolon and then we will increment the multiple and then we will write while multiple is less than equal to ten that means this condition is true until the multiple becomes 10 the moment it becomes 11 this condition will become false and this statement will stop executing so we'll get a table of 2 here let us see what happens right so we got a table of 2 2 4 6 8 and then so on till 20. i have another example for do while loop so that we can understand how exactly it works so in the white setup we have written cl dot begin 9600 so that we can communicate with the computer in while loop i have initialized a static into variable which is known as test variable we have written do then we are writing cl.println this will print at least once because a do while loop will execute the statements at least once so ok we have written this statement and we have written a delay of 500 milliseconds so that we can observe what is happening otherwise you know serial monitor prints things really fast so now we have written while test variable is greater than 5. while the test variable is less than 5 this statement should not execute but it will execute at least once then we have written test variable plus plus that means we are incrementing the value of text variable here we are printing the value of test variable and we have given a delay of 500 milliseconds so that we can observe what is happening okay so now when we open the serial monitor what we will see is that this statement will execute once then the test variable will increment okay and then the value of test increment will print then it will go back into do while loop and print this statement once again because in do while loop it has to execute once at least then while it will check the condition it is false then it will come back here it will increment the variable and it will repeat till the test variable becomes greater than 5 okay the moment it becomes greater than 5 so this do while loop will keep on repeating let's see how it happens let us upload the code first right this will get printed at least once and this is printing again and again but now just see the loop control didn't come out of this okay because this condition is true now it will go back again and execute the statement these statements are not being executed because it is still in do while loop so i hope you understood this do while loop so now i have a really interesting illustration which you can see on the screen to explain the difference between a while loop and a do while loop and i think it is a really good example to show the difference between the two every one of you must have seen the roadrunner show and we see this guy was using the while loop while this guy was using the two while loop let's discuss in the comments who was using these control loops in a proper manner if you remember i told you that we might have to break out of the loops based on certain conditions like for example in an endless loop we might need to do something to stop that loop so the break keyword is used to exit from a loop by bypassing the normal loop condition which we have specified let's see how we do that so this is the modified version of the code which we used to print the table of two okay this is the regular while loop which is running okay we are printing a table of two here and we are incrementing the multiple here but now we have specified a break condition okay like if multiple is equal to five then we will write breaking out of the loop now and we will break out of the loop by just using this keyword let's see what happens all right so we printed it till four two 4 6 and 8 and then it breaked out of loop although it should have run till 10 it should have printed till 20. so if i comment this break condition and upload the code again so we got the entire table so this is the basic use of breaking out of the loop now let's see if we are inside an endless loop let's say while true this is an endless loop we are writing serial dot println endless loop okay and we will increment the multiple multiple plus plus okay let's say i want to exit after printing it 10 times if multiple greater than 10. we'll just break out of it let's see what happens okay we forgot to close the white setup bracket right if we didn't use this break statement it would ultimately keep running endlessly let's see that quickly okay can you see that it's printing endlessly so i hope you understand we use a break statement wherever we want to break out of the loop so in the next video we will see the continue keyword and we will also compare the break and continue keywords like we saw in the break statement that whenever we use it code control instantly moves out of the loop entirely discarding all the remaining iterations of the loop right like we were trying to print numbers from 1 to 10 and when we used if our variable is equal to 5 then break out of the loop so it entirely skipped 6 7 8 9 10 but in some situations we might want to use the remaining iterations right so in that case the continue keyword helps us with that the continue statement skips the rest of the current iteration of the loop and it continues by checking the conditional expression of the loop and proceeding with the subsequent iterations that means it won't skip the rest of the iterations let us see how it works so we have void setup serial.begin 9600 as usual then we are writing for loop to print numbers from 0 to 10 right because we have initialized i with 0 and we have used less than equal to sign so that means both the ranges are inclusive so it will print 0 to 10 and then we are incrementing the variable now notice we have used if i is equal to 5 then continue whenever we use the continue keyword it would straight away take us to the condition pack and it would skip all the statements which are written after that so let us see what happens so we see 0 1 2 3 4 5 is missing and 6 7 8 9 and 10. so it skipped the iteration in which i was equal to 5 right but it did not skip the rest of the iteration if we had used the break keyword it would have skipped the rest of the iterations it stopped at 4 only let me switch back to continue here again and let me explain the difference between the break and continue statement let's say we write a statement here serial dot println end of our for loop this is the end of our for loop that means after our for loop completes this statement should print regardless of anything so when we use continue we'll see the loop was going 0 1 2 3 4 and when the value became 5 it jumped back to check the condition okay so in this way it had to skip this statement it cannot execute the statement right so when it became six again then it will start printing it again can you see that and after completing the loop it came and printed this line when we use break then the control will directly come here whenever the break statement is encountered the code control goes directly out of the loop can you see that after printing 4 it printed end of for loop so we may have different situations to use continue and break statement and we have to make sure we use them correctly so in the next video we will look at the last keyword which is return so see you in the next video the return keyboard the return keyword would probably the easiest thing to learn right now the only function of the return keyword is to terminate the function no matter what it doesn't take any conditions it doesn't take any limitations or anything whenever the code encounters the return keyword it would just terminate the function there are two ways to use a return we will be covering the first way to use the return keyword we will cover the second way in the coming videos let us see how we use it in one manner all right so i have this code written here okay in the white loop what i'm trying to do is i'm trying to print line one line two line three and line four okay and then i have a for loop which prints number from zero to nine right let's see if it is working properly yes it is working as expected line one nine two nine three nine four and zero to nine right so now i want that anything return beyond this point should not execute so i'll just write return so we'll see what happens it will just print line one and line two it will go back here and execute this lines only anything written after return will not execute okay now you may want to remove it from here and use it here right let's see what happens it will just print zero because when the value of i was zero it printed zero then it encountered return so it will just terminate this function and you see that it is not printing one two three four five six seven eight nine because return keyboard just terminates the function all right so now i will see you in the next video so the next topic in our course is switch case like if statements switch case controls the flow of programs by allowing us to specify different code that should be executed in various conditions in particular a switch statement compares the value of a variable to the value specified in the case statements when a case statement is found whose value matches that of the variable then the code in that case statement is executed so let us see the syntax of switch case first of all we write switch then our open bracket then we write the variable which has to be compared when we close the bracket then we start a curly bracket then we write case space label 1 where label 1 is the number which has to be compared to the variable okay then we write colon note that this is a colon not a semicolon okay then we write the statements all the statements which we want to be executed when label1 is equal to the variable we write those statements in this block then we write break semicolon then we write case another label then all the statements then we write break we can write as many labels we want in our code and the last statement which we write is default colon all the statements break when none of the labels is true then the default statement is executed if we don't write default and none of the statement is true then nothing will happen all right so now let us see the flow of code in switch case here is the switch conditional statement then it will see case one if it is true it will execute the statements written in that block if it is false it will check case 2. if it is true then it will execute the statement if it is false it will go to case 3 okay and so on if none of these are true it will automatically jump to default and it will execute the default statements and after executing one of these statements the flow will go on to the statement which is written after the switch let's see in the coding right and the white setup we have written serial dot begin as usual then i'm writing int x is equal to 5 here x is the variable which we want to be compared okay then i'm writing switch then x here because i want x to be compared then i'm writing case 1 colon serial dot println choice 1 break similarly i've written 6 cases now can you guess what statement will be printed here since x is equal to 5 my guess is choice 5 should be printed because it is not equal to 1 it is not equal to 2 it is not equal to 3 and so on ok so let us see what happens right as expected it is printing choice five now if i change the value of x to let's say one so now choice one will be printed right now in case if we don't write break here the purpose of writing break here is that we want to exit as soon as one condition becomes true let's say if we don't write break here so it will continue to execute the statements since x is equal to 1 so now it should print choice one choice two and choice three okay because there's another break after choice three right choice one choice two choice three that's the purpose of break now let's see one more example without break let me use x is equal to 3 then it will start from here will not use break here it should print choice 3 choice 4 and choice 5. right as expected now the important thing which you need to notice is the variable which we use here and the labels which we use here should be of int or character type if you use float or if you use another array type it will just throw an error this switch case is a really handy tool if you want to write a lot of if else statements instead of that you can just write case 1 case 2 case 3. we can also specify ranges in case statements and how we do that let's say we want to take a range of 1 to 10. we'll write 1 we'll write three dots and then 10 okay then let's say 11 space to 20 okay let's say 21 3 dots to 30 then we write 31 space you have to write a space there okay if you don't write a space you will get an error so let's see these cases only let me write break again okay so now let us see three what will happen it will write choice 1 right now for example if i take 35 it should write choice 4 right so i guess you got an idea how easy it is right instead of writing if in else we can use switch case so i hope you understood this topic so i'll see you in the next video so at this point we are in a position to study about the two remaining data types which are arrays and strings these two data types are also very commonly used in the projects which are made using arduino so in this video we will look at arrays an array is a variable which can store multiple values of same type let's say we have a compartment of a defined size which has multiple containers in it like this and those containers can store same kind of information let's see this by an example to declare an array we first write the type of data which we are going to store in it let's say int then we write the name of that array let's say my array okay and then we write a square bracket and we write a number inside it that number denotes the size of that array okay let's say five so when we write this the compiler will create a space in memory where you can store those five integers okay now let's store some values in this array to do that we write equal to then we write curly bracket and then we will write five values which we want to store in it let's say one two three four and five semicolon each value is separated using a comma and each value inside an array is known as element of array okay and each element has an address of its own that address is known as an array index that index starts from zero okay let me show that to you again let's say we have an array of size 10 so 0 is the first index and 9 is the last index okay and the value which is present at that index is known as element let's see that again encoding so this is the zeroth element and this is the fourth element okay now let's try to access them how do we access them serial dot println my array and then the value which we want to use let's say 2 can you guess what will be printed here tell me 0 1 and 2 so 3 should be printed so 3 has been printed here for the first time users it must be really confusing that why it was started from 0. it is very simple because computer counts from 0. while humans are in a habit of counting from 1 that's why we are finding it a little confusing now let's change the values which are present inside this we'll take bigger and complicated values let's say 745 74 259 85 and 421 these are the random values which i have chosen now if we try to print the second element it will print 259 because 259 is present at second index okay while zero is this one first is this one second is this one third is this one and fourth is this one now we can alter these elements as well directly now let's say i want to change the value which is present at second index so we'll write my array 2 is equal to let's say 7 0 6 okay now the value of 259 will be replaced by 706 let's see let's print that again now it should be printing 706 right we can alter any value for that matter we can do our regular calculations on array elements as well let's say i have one variable in my variable okay now let's say i want to add some elements and store that value in my variable i will write my array okay 0 plus my array 1 plus my array 2. okay so now my variable will be holding the sum of 7 45 74 and 249 not 249 706 because we have altered it here so let's try and print my variable you can check on your calculators if the answer is correct or not so the sum of 745 74 and 706 is 15 25 1525 okay similarly we can also do multiplication subtraction division etcetera all the operators can be used here okay now we can also use elements of these arrays in for loops as well now let's use a for loop to print all the elements inside my array so how we will do that for int i is equal to 0 i less than 5 because size of my array is 5 then i plus plus okay so now what will we do is serial dot println my array then i okay so it should print all the elements which are present inside this array so it is here 745 74 706 85 and 421 right you can compare them here 745 74 706 because we updated the value here then we have 85 then we have 421 okay now can you tell me what will we do if you want to add 5 to all the elements of my array okay so now let's say we'll write for i is equal to 0 i less than 5 then i plus plus will take my array i is equal to my array i write plus 5 so now 5 will be added to all these elements so now 5 has been added so now let's print this again if we print this again so now we will see 5 has been added to all the elements let's see we are here it is printing from here right 745 plus 5 is 750 74 plus 5 is 79 then 706 plus 5 is 7 11 85 plus 5 is 90 421 plus 5 is 426 okay this way we have added five to all the elements now we can take some of all the elements in the array as well how will we do that let's say int sum is equal to zero we have initialized it by zero and for int i is equal to zero i less than five then i plus plus okay what will we write is sum is equal to sum plus my array i okay and after that we'll just print sum right it is printing 2 0 5 6. so you can check on your calculators if these values are summing up to 2 0 5 6 but just make sure you don't add these values you add the new values the new value was 750 79 7 11 90 and 426 these were the new values these okay if you add these values you will get two zero five six so now we have learned about how to use arrays how to access the values in an array and how to manipulate those values what we saw till now in this video were onedimensional arrays that means they just have one dimension now there can be multidimensional arrays as well like twodimensional arrays threedimensional arrays like you can see here this pink box is a two dimensional array it has rows as well it has columns as well okay and then we have three dimensional arrays as well like it has depth as well it has rows it has columns and it has depth as well multiple two dimensional arrays make three dimensional arrays i just give you one use case where two dimensional arrays are used for example we want to store the pixel data image pixel data of a black and white image okay so we use two dimensional arrays and let's say we have to store pixel uh image pixel data of a colored image which also has rgb values so we use a three dimensional array for that in this video we will talk about strings strings are basically a sequence of characters whatever we write or you can say whatever messages which we write in our code are all strings let us see in the code the easiest way to spot strings is that you will find them written inside double quotes for example serial dot println this is my string okay this is my string is the message which is going to be printed on the serial monitor but in itself this is my string is a string okay now technically speaking a string is nothing but an array of characters and as we have already studied arrays it would be really easy for you to understand so now to declare a string we write char in the name of the string which we want for example i have written str 2 then as we start an array by a square bracket and a number inside it we similarly write it for string as well now example i want to write ashish which has a s h i s h as characters in it okay and the number of characters in ashish are 6. okay so what we will do is we'll always take one additional number to declare our string because an ending to the string is denoted by a special character which is known as a null character okay the compiler automatically takes that into consideration when you write a string or when you declare a character array okay in this case compiler will see okay the person is trying to declare a character array which has these characters so it will automatically add a null character at the end so now when we print this line it will print ash ish on the serial monitor okay another way is to declare that null character explicitly for example i will write chart str3 then 7 is equal to ash ish and then a null character this is the null character which is denoted by a backslash and a 0. this way the compiler identifies that okay this string has come to an end okay so it can differentiate between one or more strings without this character there will be problems the compiler may think that the another string which is coming after this string is a part of that same string there has to be some way to differentiate between different sentences okay so that's why we use a null character which is backslash zero another way to declare a string is we write char str4 which is the name of the string and then we write square brackets without a number inside it the compiler is smart enough to dynamically allot a number to this bracket it will see okay the user has written a string which has ash ish inside that it will automatically allot a memory of seven to this string because ashish has six characters in it and including a null character it will become seven okay we can also write it like this str five seven ashish simply in double quotes we don't have to work this much it is also okay if you take a larger memory for a smaller string but it is not okay to take a smaller size string let's say five for a longer okay now you will see it will only print five characters and then there is another way we will talk about it shortly but right now let me comment this out okay we'll just upload this code and we will see what we are getting all right so this is my string then it wrote ashish for this ashish for this ashish for this again and it printed it till here okay we forgot to write serial dot print ln for str right it just skipped the last character because we didn't give necessary memory to it so according to me this is the best way to start writing strings because obviously you do not know how many characters your string will contain and obviously you don't want to spend that time to count those characters right the compiler is smart enough to calculate the size for you okay now there is another way to write a string which is by using a string class okay here let me just comment this out this is a string class we are up calling a string class and we have named str7 inside it and we have just written whatever we want inside that let's say ashish and when we print this it will straightaway print this ok what's the benefit of using a class is that it is a builtin class first of all and it has a lot of functions inside it and those functions can be like we can compare a string okay easily we're just writing string name dot equals if it is equals it will return true and similarly there are many more builtin functions inside the string class for example i can tell you we can print a character at a particular sequence for example i wrote str and then serial dot println str can at 0 so it will print a because at 0 position a is present similarly there are many more functions like or starting with ending with and there is a function like we can convert the entire string which is written in lowercase to uppercase and vice versa uppercase to lowercase okay we can convert integers into string we can convert strings into integers okay so you may be needing all these functions while we perform our experiments strings are used to contain information messages or error messages or any logs okay we can store them inside strings and we can also display strings on our serial monitor on the lcd display or any kind of display okay we will now understand what are functions a function is a set of statements that take inputs and do some specific computation and produces some output the idea is to put some commonly or repeatedly done tasks together and make a function so that instead of writing the same code again and again for different inputs we can call the function we'll understand what i just said as we progress in the video so before anything else let us first understand how to identify a function in the code whenever we see something like this like void name and then there are brackets then there is a curly bracket then there are some statements written and then there is a curly bracket again this is the basic structure of a function okay where void is the return type that means we start writing a function by telling the compiler the return type of that function where void means that function will not return anything now instead of white here we can use int boolean or float or anything for that matter whatever we want to return from the function then we write the name of the function we can name it whatever we want like we saw digital write or pin mode they were the functions and the name of that function was pin mode and digital write and then in the bracket we write parameters or some people call them arguments if there are no parameters or arguments to the function we just keep this bracket empty or if there are parameters then we specify those parameters how do we specify the parameters we will see in the next video okay so i'll just basically tell you how do we call a function now like this in the blink example we called pin mode function to call a function we write the name of the function along with the parameters of that function in pin mode led built in comma output was the parameter of this function right similarly we have called digital right here and the parameters of that digital right was led built in comma i these are the two parameters of digital write so in the builtin libraries of arduino pin mode and digital write must be defined somewhere that's why arduino is able to understand what this exactly means otherwise it won't be able to understand right okay so it has made us really easy that arduino guys have defined this function somewhere for us okay and we just have to call it now let me tell you the benefits of using the functions the first biggest benefit of using the function is it helps us to reduce the code redundancy what that means is for example we want to do certain tasks so we may write the statements again and again again and again so that would make the code unnecessarily bigger so what we can do is we can make a function and we just call that function whenever we want to do that task you will understand this point better when we write our own functions then the functions make the code modular and reusable what that means is for example we are making a robot there must be thousands of lines to make the robot go forward so what we can do is we can make a function to make the robot go forward and we can use that function whenever we want to make robot go forward and you have written the code to make the robot go forward so now you are trying to make another robot so you can use that same code for the another robot as well so that means it became modular and it became reusable then the other advantage of using functions is edit provides abstraction and aids teamwork for example you're working in a team of four so one person can write the code for robot to go forward one person can write the code to go backward one person can write the code to move right and left and one can write the code to make the robot jump okay so once these functions are written so they can together be used as one code all right so these are the advantages of using a function now in the next video we will learn how to write our own functions so you will understand these points in a better manner so i'll see you in the next video so let us now create our very own function we will create a customized function to blink the led okay so let's do this after void loop we will write void let's say the name of our function is my blink function okay since there are no parameters in this we will leave the bracket empty now so let us just cut this code from here and paste this exactly like this in my blink function okay so now we have created a customized blink function now let's try to call this function in void loop right this way we have called our function in the void loop all right so when we upload this code on arduino you will see exactly the same results all right so let us see this so let us compare both the codes with the help of a simulator all right so we had this code right this is the same blink code let's see how it is working right as expected the led at pin number 13 is blinking right so now let us replace the code which we have just written we will just take it as it is right so now let's start the simulation so i hope you got my point about creating our own functions but now most of you must be wondering what's the point of making this right yeah i agree with you there is no point of making a function for this small task right but you will find it useful when you're writing really huge programs or you want to customize this thing i will show you a customization right now all right so now let's say you have more than one leds which you want to blink in a row okay so with your existing knowledge what would you have done you would have done it like this so you would have repeated these lines of codes and just replaced the pin numbers here right and then you would have declared these pins as output right but now what we can do is we can make a customized function let us do that we are here so let us now make a new function void my custom led right now what we will do is we'll specify a parameters in which we can tell the compiler led pin number so for that we will write int pin number okay so this function is going to accept one parameter which is pin number right so now let's do this we have this code okay so now instead of led built in we will write pin here okay so automatically whenever we call this function with the pin specified the compiler will replace this pin number with the specified pin number okay so let's do this let us just confirm what pins we have used we have used nine seven and two okay nine seven and two so let us say int led one is equal to nine hint led two is equal to seven and int led three is equal to two right so now we just have to declare all these pins as output led one okay see all right now we'll just replace them like this since we have declared them as output now what will be do is we'll just take this function okay we'll write my custom led with pin number led one okay then again we'll call this function with led 2 right and again we'll call this function and we'll just pass led 3 this time okay let's see if this compiles or not yes it compiles successfully now let us see the simulation of this code right so we have this code here let us start the simulation okay can you see that yep it's working perfectly first the led one which is connected to pin number nine is blinking and then the led connected to pin number seven is blinking then the led connected to pin number two is blinking so now let us see one more time what exactly happened here okay so with the pin mode we have declared all the leds led one two and three and i'm sure you know how to do this we have done this many times till now okay so now we have created a function void my custom led with a parameter of pin if you wanted more parameters here we'll just write comma and then end let's say parameter 2 right so this way we can specify endless number of parameters in our functions but since we don't need them we'll not use them okay then we have started to define what this function will do which is it will blink the led okay which led will it blink the led which we have passed as the parameter okay because we have used pin here for example if you had declared number here instead of pin then you would have used number here instead of pin got my point so now since we have finished declaring our function now we can use it successfully we'll just take this function and we will call it here with the parameter so now we have called it for the first time with led1 now what will happen the compiler will see okay a function has been used which is my custom led with the parameter led1 so it will see the value of led 1 which is declared as 9 okay so it will call my custom led with 9 so the control will go to my custom led with pin 9 and it will execute it with pin 9. once it is done executing it will come back it will see it has been called again with another parameter which is led 2 and the value of led 2 is 7 this time so it will go back and execute the function again with the value of 7 all right so this is the basic concept of function customization okay so instead of writing this code again and again with changed pin numbers we can just do this so i think all of you can agree with what i'm saying right now right one more thing which needs emphasis is i've used void here like i told you we use void whenever our function is not returning us anything okay so by the time you must have realized void loop and void setup are two functions of their own they are the main functions which are used by the compiler we have discussed about this earlier as well so now let us try to make another kind of function we'll open a new file and we will start writing our function first of all let's write serial.begin this is the most crucial thing to start communication with the computer okay so now let us try to write a function which would return us something okay so let's say it will return us an integer so we'll write in earlier we wrote void because we didn't want it to return something to us if you're not able to understand what returning exactly means you will just see that in a moment so we'll write in let's say we want to repeatedly calculate sums of two numbers okay or let's say sum of three numbers so we'll write in sum okay int a comma int b comma int c okay where a b and c are the three numbers which we want to take some off all right so now we will write a curly bracket and then we will write return a plus b plus c okay so whenever we call this function we'll get a value of a plus b plus c let's see how we get it in white loop or void setup you can use this function anywhere you want let's say we'll use this in white loop okay let's say we write int let's call it d okay equals to sum of 7 comma 8 comma 9 all right and let's print the value of d okay so what should it print the sum of 7 8 and 9 which is 24 right we can use it again as well with the different set of values let's say we'll make another function int e is equal to sum 1 comma 2 comma 3 let's print this we should get six right so we're getting six 24 and 6. it's repeating as we have used it in while loop so you don't have to worry about that okay one thing which i want to tell you is you can use this function like this as well serial dot println directly in serial print sum 4 comma 5 comma 6 right just make sure to close all the brackets here we have closed the bracket of the function sum here we have closed the bracket of serial.println okay so this is called as calling function inside a function this is a very useful thing which we can do in programming but first of all let us see the result if it is working or not right so we are getting 15 here because this function call here is printing its value okay now we can have more than one functions in our code now let us declare another function which would return a boolean value let's say bool um now we are making a function to check if a person is tall or not based on the height we enter as the parameter all right so let's name it is tall okay and int height okay so this function's name is install and the parameter is height okay so we'll write if height is greater than 100 return true okay or else return false okay so this function will just return true if the entered height is greater than 100 and if it is less than 100 it will say false okay so now you will see how handy it becomes when you have to check height of multiple people okay so now let's call this in white loop here we have while loop so let's say serial dot print ln is tall let's say 123 okay now let's just comment out the print statements so that they don't interfere okay this function is still being used in int d and e so you can say these functions are working simultaneously so we are just checking is tall or not okay let's see before i open the serial pointer you can guess your values right it's printing one because it has returned true so now let us take another value which is less than 100 serial dot println is tall 20. so now we should get false so it would be printing 1 0 1 0 because 1 is for install 123 and 0 is for install 20. so let us see that right 1 0 1 0 one zero one zero one zero okay so if you have to check height of multiple people instead of writing this code again and again for that specific height you can just call this function and enter the height so you can see how much work you have reduced for yourself right by writing the functions so this was all about writing a custom function there is no upper level to the complexity of the code which you write in your functions you can write endless number of lines in this function okay like i told you in the introductory video there may be a thousands of lines which are responsible for making robot go forward so in that case we can write void move robot forward and we can just define our parameters here and we can just write our statements like this right and this is our function this block of code won't make your robot go forward i'm just giving you an example of how do we write functions okay so whenever we call move robot forward in void setup or in void loop so the compiler will take this function and it will execute that alright so in the next video we will take a deeper look at some of the inbuilt functions which the arduino makers have made for us so see you in the next video now in this video we will talk about digital input and output what that means is we'll take a closer look at the functions which are made by the arduino makers to read or write any sort of digital data all right that data can be some sort of input given by external sensors and it can be some sort of output data which is given by arduino to other peripherals or components right so there are basically two functions which are digital read and digital right so let's take a look at digital right digital right is a function which we have seen multiple times before as well so can you recall what it used to do it used to write a state of low or high to a digital pin so we'll see digitalwrite is a function where digitalwrite is the name of that function all right and it has two parameters which are pin and state where pin is the pin number which we want to manipulate and the state is the value of either high or low where high means five volts and low means zero volts okay just make sure whenever we use digital write we have to declare that pin as output using pin mode all right and i have told you this earlier as well right next we will see digital read as the name suggests it will read the state of that pin okay so here digital read is the name of the function which we are calling and pin number is the parameter which we pass into it to read the state of that particular pin okay if it is high or low so we will now see a combined example of using digital read and digital write and how will we do that we will turn on one led if a switch is pressed okay so let's see how we do that so i have the circuit diagram here in which i have used a regular led with a resistance in series which you can see and here i have used a push button switch so before we move further let us first look at what a push button switch looks like from inside then only you will be able to understand it in a better manner so here is a push button switch all right which has four terminals out of which these two terminals are internally connected and these two terminals are internally connected as well okay so when we press the switch these two terminals get interconnected and these two terminals get interconnected when it is not pressed these two are not interconnected okay so let's get back to our example okay so the code is we have started with int button is equal to seven as we want to read the state of that button on a digital pin number seven all right in white setup i have declared pin mode led built in which is the led connected to pin number 13 as output and using pin mode we have declared the button as input because button will be telling its state to the arduino hence it is used as input okay serial dot begin 9600 as usual then in void loop i have written serial.println digital read and bracket button so here i am asking it to print the state of the button either it is pressed or not in the circuit which we have used we will get one on pressing the switch and we will get zero when we do not press the switch all right so let us see that works when i'm pressing the switch i'm getting one here when i'm releasing the switch i'm getting zero here look at the serial monitor here right now i'm not pressing it so it's saying zero when i'm pressing it it's saying one okay so most of you must have also noticed the led which is connected on pin number 13. when i'm pressing the switch the led is getting turned on and when i'm releasing the switch oops it's not getting turned off why we'll see that in the moment probably there is some error in the code i've done this intentionally so that you can pay attention to that okay so here i have written if digital read button is equal to high then digital write led built in to high when i press the switch write a high state on pin number 13 but i have not written what to do if the button is not pressed so let us do that now we will write else digital right led built in low okay so now let us start this again there was an error the closing bracket to void loop was missing so let us start it again all right so when i press it the led turns on and when i release it the led turns off okay so you guys must be wondering what's the point of doing this we can use a simple series connection and we can turn on the led why are we using arduino in that i absolutely agree with you you can do that very easily using a series connection but what you have learned here is you have learned how to use the functions like digital read and digital write you will be able to implement this learning in further projects the experiments which you do all right so now let me just quickly explain you the circuit which we have made here as most of you must be facing difficulty in that all right so here is the switch i showed you the diagram previously right so these two terminals are interconnected automatically when i press the switch this terminal will get connected to this terminal okay so i have taken a wire and connected one terminal to 5 volts okay and then i have taken a resistor and i have connected it to ground so here we have made a series connection of a switch and a resistor like this and from this point as all these points are interconnected we can connect them anywhere so at this point we're reading the voltage which is present between this and this point okay so as we want to read the state we have connected it to the pin number seven so when we press the switch this line will get connected to this line and entire 5 volts will drop across this resistance okay so hence the arduino will read it as high state and when the switch is released this point will be connected to ground via resistor so it will be read as low okay so i hope you understood the basic idea let me try to clarify it even more so this is the equivalent circuit of the circuit which you saw earlier okay you can consider arduino's 5v pin connected to this switch this is a push button switch right similarly these terminals are connected and when we press the switch these two terminals will get interconnected okay so in the series we have used a resistance and we have connected one point of that resistor to ground okay and we are trying to read voltage from this point can you see that we have connected this point to arduino's pin number seven all right so this way we are able to read the state of a switch now what advantages can you have after reading a state of a switch you can trigger multiple actions like running a motor or sending some message right you can do anything for that matter so now you have learned about digital input and output and in the next video we'll look at other functions like analog read and analog write so see you in the next video in the digital input output video we saw that we can use a function called as digital read to read the state of a pin if it is high or if it is low that means we can just read the binary situation if it is on or either of that's all but while making our projects we may have situations in which we have to read not just those discrete values we may also have to read the continuous voltages so for that we have analog read this function can be used only on the analog pins which are numbered a0 to a5 right before seeing how it works we'll have a basic idea of analog information in the environment so just look at this flowchart we have the real world which is our environment at the top we have some sensor which is converting that physical parameter into an analog signal that physical parameter can be temperature some distance or humidity or anything for that matter that analog signal is then converted into digital signals by an analog to digital converter arduino has a builtin 10 bit adc the short for analog to digital converter is adc so whenever i say adc you can understand that i am saying analog to digital converter so that digital signal which is converted from analog signal that is used by arduino to make decisions our arduino board is capable of measuring voltage between 0 to 5 volts and this is the conversion scale what i mean by that is since the resolution of adc on the arduino board is 10 bits it can hold up to 1023 values okay so if we compare that if the arduino reads 0 volts so the corresponding adc value will be 0 and if it reads 5 volts the corresponding adc value will be 1023 and we can use unitary method to find out values in between for example you can tell me what will 3.3 volts mean i hope i don't have to explain you the unitary method right this is the scale if zero volt means zero and five volt means one zero two three so one volt will mean one zero two three divided by five so if you know the value of one volt you can find out value of any voltage so now many of you must be wondering from where this value of one zero two three came from so i'll quickly explain it to you we have a cupboard here which contains ten boxes and each box can contain a value of either zero or either one okay so this is the cupboard and these are the boxes individual boxes to find the value of the cupboard we take the value of each box and we multiply it with the multiplier the multiplier is this 2 to the power 0 is 1 2 to the power 1 is 2 2 to the power 2 is 4 and similarly 2 to the power 9 is 512. so when we have values of all the boxes we take sum of all those values and we get the value of that entire cupboard so the maximum value which can be held by a cupboard in which all the boxes contain a value of one will be one zero two three how this box will evaluate to one why because two to the power zero is one and one multiplied by 1 is 1 okay so now the 2 to the power 1 is 2 and we multiply 1 by this so we get 2. so we will be summing all the values from here to here like 5 12 256 128 64 32 16 8 4 2 and 1 when you sum all these values you will get 1 0 2 3 you can try it on your calculator right now so now let's take a look at analog read function this function is simply used by calling analog read with the parameter of pin number where pin number is a0 to a5 so whenever you call this analog read function it will return you the value at red on that pin so let's see how we use that so now i have used two one kilo ohm resistances in series can you see that so now i have connected it to 5 volts this point is connected to 5 volts and this point is connected to ground so you can imagine a series circuit so now i want to read voltage across this resistance since both the resistances are equal the 5 volt will split equally on both the resistances so we should be getting 2.5 volts let us see that so in the code we have written serial.begin to start communication with the computer and then we have written serial.println bracket analog read a0 that means i want to read the voltage which is given at a0 so let's try this code so we are getting 511 which is nearly 2.5 volts we saw in that scale right so let's change the resistance and see what value do we get now let's make this value as 2 kilo ohms right so we got a change in value more the value of resistance more the voltage will drop across it we can see the value of voltage across this resistance is increasing if we make it too high it will increase it will also change if we change the value of this resistance let's say we make it 10. so now the voltage across this resistance will drop and hence we get a lower value now let's see this with a light dependent resistor this is a special kind of resistance which changes its resistance when light falls on it in most of the light dependent resistance the resistance will decrease if the light on it increases okay so let's try this replace this resistance with a light dependent resistor okay we'll connect this in series we'll take it here all right and we take this wire now you see this bar will represent the amount of light falling on it right i can control it like this so right now here it is total darkness and here it is very bright okay so when it is dark the resistance of this component is very high okay so the voltage which drops across this resistance will be very low you can see the value is very low right as soon as i increase the light on it you will see the value in the serial pointer is increasing can you see that because the resistance of this component is getting lower and and more voltage is dropping across the resistance okay now this is the principle of analog read now you can see how we can read the value of analog sensors using analog read all right so in the next video we will look at the another function which is known as analog right so see you in the next video in this video we'll take a look at analog write function which is another important builtin function of arduino all right so to begin with analog write i would firstly like to tell you that it has no relation with the analog pins or analog read function it is absolutely a different thing what exactly it is we will see shortly so to use analog write function we write analog write bracket pin number on which we want to use analog write and then we specify a value which ranges from 0 to 255. we close the bracket and use a semicolon right the important thing which we need to note is the pin numbers which we can use here are specific which are pin number 3 5 6 9 10 and 11 only okay while all of these pins except pin number five and six support a frequency of 490 hertz and pin number five and six support a frequency of 980hz we don't need to worry about this frequency right now i'll explain as we progress so before we dig deeper into this we need to understand a few terms like pwm pulse width and frequency and even before that we need to know what exactly this analog write function does the analog write function generates a square wave of a specified duty cycle on that specified pin the major purpose of using analog write is to control the brightness of led or to control the speed of a motor right the first thing which we need to see now is a square wave what a square wave is on the screen you can see a square wave is coming this is a square wave okay although this is a varying square wave now a square wave is nothing but a signal which has only two discrete values either on or off as you can see here it is on and here it is off and the time for which it is on and off is varying you can see here right i can understand it must be little difficult to comprehend but please stick with me okay so the next term is pulse width the amount of time for which a signal is on is known as pulse width for example in this wave this is the pulse width denoted by this arrow in this portion this is the pulse width denoted by this arrow in this portion this is the pulse width noted by this arrow all right the next term is duty cycle duty cycle is the fraction of period for which the signal was on right so we have five sections here with zero percent duty cycle twenty five percent due to cycle fifty percent duty cycle seventy five percent duty cycle and hundred percent duty cycle okay so in this section the voltage for entire time was zero okay so that means the duty cycle is zero percent in this section we have about one fourth of the time as on you can see that right for the one fourth time it is on and three fourth time it is off so that means the duty cycle is 25 in this section we have about half of the time as on time and half of the time as of time so here the duty cycle is 50 similarly here the on time is 3 4 hence the duty cycle is 75 and here for the entire duration of time the voltage was on hence the duty cycle was 100 okay now if we look in terms of arduino when we call analog write with a value of 0 it will give us 0 percent duty cycle that means the signal will be off for the whole time if you write analog write 64 then it will give us a duty cycle of 25 percent if you write 191 it will give a value of 75 percent and 255 will give us a duty cycle of 100 okay so now to summarize pulse width modulation or pwm is a technique for getting analog results with digital means digital control is used to create a square wave which is a signal switch between on and off all right and this on and off cycle takes place really fast and this on off pattern can simulate voltages in between full on and full off by changing the portion of the time the signal spends on versus the time that signal spins off all right so next thing which we need to look at is the pwm frequency okay let's see this is a wave which has a duty cycle of 50 that means half of the time the signal is on and half of the time signal is off changing the frequency of the signal will not change the duty cycle of the signal okay so let's say we have a signal of 50 duty cycle here and if we make the frequency to 400 so the waves will become closer that means now it will turn on two times and turn off two times right you can see here on and off earlier it was on one time and off one time okay but you see the duty cycle is still 50 you're getting my point so you see the duty cycle of the signal has not changed because it was still on for the half of the time and off for half of the time even if i make it 600 it is still on for the half of the time and off for half of the time okay so i hope it was clear to you and if in case it was not clear to you we'll take an example and blink the led and change the brightness of the led all right and we will also monitor it along with a digital oscilloscope an oscilloscope is nothing but it is a device which is used to analyze the signals okay so let's see that so here what we have done is we have taken an led on pin number 10 and correspondingly we have connected these wires to an oscilloscope to see the signal so let us see the code first so you must have noticed that we have not written anything in void setup and we don't have to use pin mode whenever we want to use analog write function okay so now in void loop i have written analog write pin number 10 and a value of 50 okay and then i have given a delay of one second then analog write 10 with the value of 100 then 150 then 200 and 255 here we will get a duty cycle of 100 okay so now let's see how it looks like pay attention to the wave which is coming on the oscilloscope and also note the brightness of this led i'm starting the simulation let's see can you see that the brightness of led is increasing gradually as the code progresses and it gets backs to 50 and then it again increases also note the pulses which are coming in the oscilloscope so now we will see an example in which we are changing the brightness of led in steps of five we will also look at the pwm wave simultaneous let's look at the code first we have defined an led pin which is connected on pin number ten in white setup we don't have to do anything in void loop we have written four which is a for loop and we have defined a fade value in fade value is equal to 0 and you have to do this till the fade value is less than or equal to 255 okay and then we are incrementing the value of fade value by 5. this is an another compound operator you can say it is similar to writing fade value is equal to fade value plus 5 all right so now we have written analog write and we have written led pin here which is pin number 10 with the fade value okay so how it will go it will write zero here then after the delay of 30 milliseconds it will write five year then after a delay of 30 milliseconds it will write 10 here then 15 and 20 and 25 and so on till 255. once this value becomes 260 you know in the last iteration the value will become 260 so this condition will become false and it will exit this for loop and come inside this for loop in this for loop we have used fade value starting from 255 and we have written a condition fade value greater than equal to zero that means you have to do this till the value is greater than or equal to zero okay then we have to use fade value minus equal to five and this is similar to writing yes you guys did right it is similar to writing okay so now it will start at 255. after a delay of 30 milliseconds it will write 250 and 245 then 240 and 235 and so on till 0. in the last iteration when the value is 0 the value will become 5 and the condition will become false so this loop will exit and it will come back into this for loop and this will repeat endlessly till we turn off the arduino let's start the simulation note the brightness of the led and note the signal which is coming in the oscilloscope let's see okay it's interesting right the brightness of leds increasing from 0 to 55 and the pulse width is changing when it is 0 you can see it is entirely off and when the duty cycle becomes 100 it becomes entirely on the pulse width is changing here so i hope you have understood this really well the last topic which we need to learn about before starting our experiments is the arduino libraries so libraries are a collection of code that makes it easier for you to connect to a sensor display or a module for example there is a builtin library to control a liquid crystal display that library makes it easier for us to talk to that display right for example you can see that library will control what character will come at what position apart from this library there are many more libraries which are available for download on internet and there are also builtin libraries for example the builtin libraries are these libraries which are already present in arduino id i'll just name a few like ap rom is used to read and write elements from the permanent storage a gsm library is used to connect gsm or gprs network with the gsm shield the liquid crystal library which you just saw controls the liquid crystal display which is used for reading and writing data on sd cards a server library will be used to control server motors similarly there are many more libraries which are already there on arduino the code which is written inside those libraries can be written by someone else or you can write the code on your own as well once we have the library in our arduino id it's very simple to use that library i'll just show you how so this is our code let's say we have to use liquid crystal library so we will write hash include liquid crystal dot h okay whenever we use this library we'll be able to use the functions which are written inside the liquid crystal library okay similarly if we have to include another library for sd cards we'll write sd dot h okay this will include the sd library in our code we'll be able to use all the functions which are written in sd library i would also like to tell you that the functions which we were using like digital write were also declared in some library i will just show you how it was written so there's a builtin code which is written inside wiring underscore digital dot c which is located at this location see program files arduino hardware arduino avr course arduino and then finally the file now if we see the declaration of digitalwrite we will see that this is how a digital write function is declared in that library okay you just see that void digitalwrite pin number and value okay where pin is the pin number and value is high or low it accepts two arguments right we sorted while calling this function so this is how the digital write is called we'll not get into details of this function as it may be very complicated for you to understand okay similarly digital read has been declared here this is a declaration of digital read similarly pin mode is also declared right so i hope you were clear with libraries and i hope you understand how using libraries saves a lot of our time okay so in the next video we will see how to add additional libraries in our arduino ide so see you in the next video so now let's see how do we install external libraries in our arduino ide there are basically two methods one is through the library manager and one is through adding external zip files okay let's look at the library manager first we will go to sketch include libraries then manage libraries it will open the library manager this is the library manager it will update all the libraries which are already there in their database and it will show us the list of available libraries for us you can see there are a lot of libraries already there right these are all the libraries which are present in their database right now so let's say we need a library for dht 11 which is a sensor which captures temperature and humidity of our environment so we will write dht11 here and it will search all the libraries which are available for dht 11 by different authors so let's say this is a very reliable library by adafruit which i've already installed okay so just in case you have not installed it already you will get install here you can select the version here which version you want to install usually this is the latest one and then you just click on install and it will install the library in your id okay once it is installed we can use it in a regular manner hash include dht dot h okay if this dht library was not installed in my id it would not appear in this orange color okay let's take an arbitrary name include ashish dot h since there is no library named ashi so this ashish is not coming in orange color although this is not a very hard and fast rule you might not get orange color in some libraries but it is a really good indication that you're working in a right direction okay so now let us look at the other way which is adding them manually let's say again we want a library for our dht11 sensor we will write dht 11 library for arduino usually libraries are available on github you may also find zip files on some other websites but github is usually preferred as you would get the latest version of the library from there so again adafruit has hosted their library on github so let's click on that and then we'll go to clone or download we'll click download zip and it will start downloading it you have to see where you have downloaded it you have to go to sketch include library then add dot zip library in my case i downloaded it in my h drive so it is here we'll click on this and just click on open in my case it was already installed so it gave me a warning a library name dht sensor library master already exists okay but in your case it will say the library has been successfully installed so these are the basic two ways in which we add libraries at this point i can really say that you have reached a milestone and you are in a position to dig deeper as you have so many tools under your belt now we have covered the foundations of electronics then we covered what is an arduino board and then we discussed what is inside arduino we covered the difference between the microcontroller and microprocessor then we saw the arduino ide how it works and how we use it we also saw an online simulator which can be used if someone doesn't have an arduino right now then we saw how to use a breadboard then some topics like input output analog digital etc and then we started arduino programming and i tried to cover all the essential topics which are required for you to start your own projects from this point you can try making various led patterns you can try to work with a seven segment display which can be used to display different digits on it then you can try to interface sensors like ultrasonic sensor or ir sensor and try to read their values using the builtin functions which we have studied already then you can try to control the motion and speed of a dc motor then i recommend you to try using a servo motor after this you will be in a position to make robots like a line falling reward a robot which is capable of following light lines over a dark background or vice versa you can also make obstacle of winning robots then you can make remote control cars like this and once you get comfortable with this you can also make complicated robots like a hexa port like this which has several servo motors used in it right which is moving forward you can also check out some posts at my instagram ashish underscore things and check out some of my other projects as well so i hope that you found this course really useful to begin your journey with arduino thank you so much for your time and have a nice day ahead
