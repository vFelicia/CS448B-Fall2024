With timestamps:

00:00 - so my introduction i haven't given you
00:02 - my introduction today i'm
00:04 - a first timer actually at free code camp
00:07 - and um already giving a talk um
00:10 - how good is that
00:11 - and i'm gonna talk about devops it's not
00:14 - really coding i won't show much code but
00:16 - i want to show you something or talk
00:19 - about the culture of devops a little bit
00:21 - and i see
00:22 - many developers in
00:24 - every day
00:26 - and i don't see many companies that get
00:28 - devops right and
00:30 - it's
00:31 - very a very important topic and i think
00:34 - everybody should know something about it
00:38 - first thank you
00:39 - thanks we accelerate i think it's
00:42 - really great because um
00:44 - we are starting to do more and more
00:46 - meetups here in this uh place and i
00:48 - think it's um
00:50 - good to have we accelerate here and
00:52 - giving us the opportunity to to enjoy
00:55 - this venue
00:57 - um just a few links
01:00 - i'll probably put the slides online
01:02 - and
01:05 - i like to do
01:07 - things and references first because
01:09 - otherwise nobody will
01:11 - see them anymore in in afterwards
01:14 - uh introduction who am i i'm a software
01:17 - developer for 10 years i'm not really a
01:19 - starter and
01:22 - currently my favorite language is golang
01:25 - i do a lot of pearl
01:27 - and i do typescript
01:30 - mostly because i have to i'm not too
01:32 - good at it
01:34 - and i
01:35 - started off as a cis admin some what 15
01:39 - years ago i thought about it
01:41 - yesterday
01:42 - when i wrote my slides and was cis admin
01:45 - at the university of economics in
01:47 - austria and so i had some 20 000 users
01:52 - we had to
01:53 - administer and you
01:54 - guessed uh probably there wasn't much
01:57 - manual intervention possible doing that
02:00 - so we had to do a lot of coding um so i
02:02 - switched
02:03 - to becoming a software developer
02:07 - when i actually
02:09 - quit the university
02:11 - and
02:13 - i'm quite an expert at causing and
02:14 - fixing disasters um causing is easy but
02:18 - it doesn't happen as much anymore
02:22 - and fixing is
02:23 - okay it takes some time and experience
02:26 - but i'm pretty relaxed
02:28 - with the situations i get dumped into
02:30 - my name is klaus ita
02:32 - forgot to say that
02:34 - [Music]
02:35 - usually i have a nick somewhat combined
02:37 - with cokie
02:39 - cookie is very
02:40 - quickly taken in all the
02:43 - public websites so
02:45 - look for
02:46 - derivatives of that
02:48 - that's my twitter handle it's easy to
02:50 - remember
02:51 - and um
02:53 - sorry for the layout because my slides
02:55 - got messed up when i arrived here um
02:57 - they were all written in markdown and i
02:59 - should have some plugin that
03:02 - does them to html converts them to html
03:05 - but something happened so i had to
03:07 - rewrite some macro in my editor to just
03:10 - quickly make html from my slides so for
03:13 - that they are pretty beautiful
03:14 - and i'm a total dope at css so please
03:18 - just get used to those slides and they
03:21 - won't get prettier than that
03:24 - some buzzwords
03:26 - not important just
03:28 - some
03:29 - get the feeling
03:30 - if you have any questions just ask them
03:33 - okay i don't like
03:36 - having all the questions afterwards
03:38 - because maybe you don't remember and you
03:40 - might have it's good to have everyone
03:42 - all the questions at the end because we
03:43 - don't have a microphone for the okay
03:46 - okay sorry no questions
03:48 - hate you no questions
03:50 - uh devops um
03:52 - the initial setting um
03:54 - how how did we find that devops or how
03:57 - was it
03:58 - incubated or whatever uh there was this
04:01 - admins and there were developers and and
04:03 - there were business requirements and
04:05 - sales people and each of those silos
04:08 - actually hated each other um or i think
04:10 - they still do more or less but um
04:14 - something um
04:16 - is happening so
04:18 - um the two sides that were the most
04:21 - opposed sides were the scissor admins
04:23 - and the developers and and i'm both so
04:26 - it's easy for me to
04:28 - to tell you this um
04:30 - it gave me hard times uh quite often
04:32 - sorry for the small
04:34 - uh funds but that's my css skills okay
04:38 - um so
04:39 - then
04:40 - there's a
04:41 - there's a conflict in says admin and
04:43 - development as a developer you always
04:45 - check for the latest library and you
04:47 - always want to have the latest and
04:48 - greatest tools and try this and try try
04:51 - that some ai or whatever and um as a
04:54 - says admin you usually
04:56 - are
04:57 - being paid for sitting in the back room
04:59 - and just keeping everything stable and
05:01 - as soon as something moves a little bit
05:03 - you just bash it down so it doesn't move
05:06 - anymore and so
05:09 - those two groups are somewhat uh not in
05:13 - sync
05:14 - and
05:15 - someone someday
05:17 - just said well you know um we could work
05:20 - together and um
05:22 - at the time i was in
05:24 - at that university i told you about um
05:28 - there was
05:30 - i think that there was the seed of
05:32 - devops coming up that there were
05:34 - configuration engines um starting to get
05:37 - bigger and bigger
05:38 - and
05:40 - um it was the very early
05:42 - i think puppet wasn't no puppet what
05:44 - there was no puppet at that time
05:46 - but there was cf engine at the time and
05:49 - and people started scripting
05:51 - infrastructure
05:52 - and and people stopped actually doing
05:54 - things manually um the bad thing is i
05:57 - still see
05:59 - a lot of people manually intervening
06:02 - with their computers
06:03 - and
06:04 - the what are the goals of
06:07 - devops um we just want to keep a
06:09 - constant flow through the technology
06:12 - um
06:13 - value stream so so what does that mean
06:16 - it's
06:16 - um in the old days you always had
06:20 - infrastructure and you had development
06:23 - and those two didn't work well together
06:26 - and
06:26 - especially in bigger companies
06:29 - there was software development and
06:31 - software development cycles where
06:33 - months or years long
06:35 - and
06:36 - then there was an integration phase
06:38 - and that handed over the software
06:40 - project to the
06:42 - ops people which are system
06:44 - administrators and they tried to figure
06:46 - out how to actually get a project
06:48 - working
06:50 - and running and stably running and
06:54 - that
06:55 - pushed the launch date of every product
06:58 - further and further away and i still see
07:01 - that in many startup companies now also
07:04 - i mean people are developing
07:05 - and developing and then there's release
07:07 - day and they find out oh
07:09 - we never thought about infrastructure
07:11 - where we actually want to run the
07:13 - project but it
07:14 - works on my machine
07:17 - i see that quite a lot and
07:20 - it's
07:21 - it's a lot of about culture to actually
07:24 - put together all the team
07:26 - and make everybody participate from from
07:28 - the team so it's not only developers or
07:31 - this admins but it's also the marketing
07:33 - people it's the icon designers it's the
07:36 - i don't know css people are those
07:38 - developers yeah let's say and it's the
07:41 - sales people that mustn't sell things
07:43 - that
07:45 - that can't be developed or everybody
07:47 - needs to be in a team and this is a bit
07:50 - what devops is about um also
07:53 - the the thing i explained before day
07:56 - zero day one day two day end
07:59 - the product has to run all the time
08:01 - and
08:04 - yeah um basically work together in all
08:06 - um
08:07 - all phases of its life
08:10 - devops is about culture automation
08:13 - lean measurement and sharing these are
08:15 - the key
08:16 - points of
08:17 - um
08:18 - of devops
08:21 - let's go through them
08:22 - culture is um something i see
08:27 - a lot in in technology is
08:30 - there's that boss and and the boss
08:33 - shouts at everybody
08:34 - and
08:35 - um
08:36 - this is
08:38 - this won't i mean this this leads to
08:40 - results in short term but people leave
08:42 - and people join companies people leave
08:45 - managers and it doesn't really lead to a
08:48 - good team and and to a good work
08:50 - experience
08:51 - and what we really want to impose is
08:54 - get blame-free learning experiment
08:57 - and experimentation
08:59 - uh framework so
09:01 - we all make mistakes we make a lot of
09:03 - mistakes probably but the only
09:05 - difference be
09:06 - between a
09:08 - well
09:08 - established developer or devops guy or
09:11 - whatever and and the beginner is the
09:14 - number of mistakes they have made
09:17 - that that's the only difference
09:19 - and
09:21 - yeah this means we really um
09:25 - we do have volatile in environment so
09:27 - anything we do changes all the time and
09:31 - because we do experiment everybody is
09:32 - allowed to experiment everybody's
09:34 - allowed to bring in new technologies
09:37 - we change everything all the time
09:40 - but still
09:42 - we managed to reduce risk i'll explain
09:45 - that later how we managed to work that
09:47 - out
09:48 - we tried to
09:49 - have no more silos and which is actually
09:52 - fun because we start
09:54 - actually talking to people there were
09:55 - some people who came here to to talk to
09:58 - others
10:00 - this is true for every company
10:02 - the developers can start talking to
10:04 - marketing people and this admins can
10:07 - start talking to sales people and
10:10 - actually this is an interesting thought
10:12 - that
10:13 - should be
10:15 - should be a baseline in every company
10:16 - anyway
10:18 - we all share the responsibility for our
10:20 - finished product
10:22 - we all
10:25 - earned the money that the company earns
10:27 - and we all have to bring in money and
10:29 - we're all important for the company so
10:32 - of course we share responsibility and
10:35 - it's important that everybody knows that
10:37 - everybody is
10:39 - responsible for having the product out
10:42 - and
10:42 - autonomous teams is just
10:46 - because we share responsibility we are
10:48 - able to actually decide things on our
10:51 - own we don't need to ask the boss all
10:53 - the time
10:55 - automation um
10:58 - there's a i think on the first slide i
11:00 - had those thank you uh
11:03 - things
11:04 - um there's a book it's um
11:06 - it's a long book and it gets a bit
11:09 - boring after a while but it's the sre
11:11 - book of
11:12 - by google i don't know if you know site
11:14 - reliability engineering and um but they
11:18 - have
11:19 - amazing chapters that are really good
11:22 - and one of them is about uh automation
11:25 - and toil especially and i like the term
11:29 - it's it's um it was created in google i
11:32 - think
11:33 - and
11:34 - it means that anything you do and
11:36 - anything you do more than once
11:39 - that can be automated must be automated
11:42 - and
11:43 - this is one of the really basic thoughts
11:46 - in
11:47 - devops
11:49 - so
11:50 - whatever
11:51 - can be triggered by whatever metrics
11:54 - needs to be automatically
11:56 - automatically solved because otherwise
11:59 - what you might see you have many many
12:01 - busy people that do the same thing over
12:04 - and over and again and this is the worst
12:06 - that can happen
12:07 - okay
12:09 - so anything that's manual repetitive and
12:12 - automatable
12:14 - tactically important for our company
12:17 - has no value at all
12:19 - that's very important you know the the
12:21 - web server that
12:22 - needs to be restarted because whatever
12:25 - we have bad code and and we have mem
12:28 - leaks or whatever and the sysadmin goes
12:30 - to
12:31 - and look logs into that web server ssh
12:34 - is in there and and just
12:36 - types in nginx restart
12:39 - that's a waste of time you can automate
12:41 - that yeah you can just
12:43 - watch memory and just
12:45 - kill that thingy
12:47 - and
12:49 - and it'll have the same effect it's not
12:51 - a solution it's not a long-term solution
12:53 - but it it will uh take away work from
12:56 - the cis admin who can then develop a
12:59 - better solution and probably reduce man
13:01 - leaks
13:02 - okay
13:02 - and
13:05 - doing this removing toil all the time
13:08 - is a huge resource saver and
13:10 - um imagine i mean at google the sre
13:13 - teams
13:14 - they are not allowed they are not even
13:16 - allowed to do more than 50
13:19 - toil in their their work time
13:22 - which is i mean think of your scissor
13:24 - admins what they do all the time
13:26 - um
13:27 - least of them are actually living that
13:31 - um
13:32 - well there is the term
13:34 - lean eliminate waste
13:36 - amplify learning decide as late as
13:38 - possible deliver as fast as possible
13:41 - that's all the
13:42 - the
13:43 - uh um
13:44 - i mean
13:46 - i hope you you live by those standards
13:48 - now and empower the team build integrity
13:52 - and see the whole see that all is i
13:54 - think the only
13:55 - thing i really have to explain more um
13:59 - even as
14:00 - a developer or says admin or whatever
14:03 - person or in whatever topic you are in
14:06 - just see what the goal is and and always
14:09 - know
14:10 - what is my company doing and what are we
14:12 - actually trying to
14:14 - get out to our customer it's very
14:15 - important to to see that all the time is
14:18 - what i am doing
14:20 - currently important
14:22 - for my customers does it
14:24 - actually give value to the customer
14:27 - um
14:29 - instrumentation anything
14:32 - and this gets forgotten by most i don't
14:34 - know how many startups are here and i
14:37 - just saw
14:38 - some
14:39 - everybody who who's making new products
14:41 - and many people have started new
14:44 - products
14:45 - and they forget about measurements and
14:48 - instrumentation
14:49 - and this should be one of the core
14:52 - built-ins in every product that you
14:55 - create um
14:58 - if you don't instrument everything you
15:00 - do
15:00 - and if you don't have graphs for every
15:03 - whatever
15:05 - information you
15:06 - you generate in your software you will
15:09 - fail at devops
15:11 - because if you can't measure things and
15:13 - if you can't analyze things you can't
15:15 - react
15:16 - and of course a human being can react
15:19 - and i have a very good feeling about who
15:22 - i don't know i think the system is in a
15:26 - bad state and i have to do something
15:28 - but if you don't have numbers to prove
15:30 - and if you don't have numbers to analyze
15:33 - you can't
15:34 - automate these things
15:36 - here you see a graph from
15:38 - this is something
15:40 - actually a marketing guy
15:42 - created yeah these graphs
15:44 - um we we are generating all the the
15:47 - information and the marketing guy just
15:49 - clicks together it's some health
15:51 - whatever
15:52 - tool and and they can just see okay how
15:56 - do the numbers perform did we i don't
15:58 - know we had some release and numbers
16:00 - went down and then other releases and we
16:02 - tried to to get the release uh see the
16:04 - numbers up again and
16:06 - just just to show you that anything we
16:08 - do and whatever
16:10 - whatever this is a registration verify
16:13 - verification profile setup so so people
16:16 - that try to register
16:18 - um verify their prof profile and then
16:23 - or change data in the their profile
16:26 - which is important in this project
16:29 - we just measure what they do
16:33 - so
16:34 - we have the i i call it the devops
16:37 - pretzel and if you go to devops meetups
16:40 - nowadays uh you see this pretzel all the
16:43 - time and i just wanted to show it to you
16:46 - um it's it's a never-ending cycle of
16:49 - okay you release a product
16:51 - you configure it you monitor monitoring
16:54 - okay
16:56 - you plan for the next release you build
16:58 - you you create you check the numbers
17:01 - again from monitoring you package it
17:04 - release it and so on and so on and on
17:06 - and that cycle goes forever
17:08 - and
17:09 - now the testimony
17:11 - i'm a developer okay devops is
17:17 - something that
17:18 - should actually
17:20 - um
17:21 - impact the whole company
17:23 - and i don't know
17:25 - much about how marketing people feel
17:27 - about it i mean i know that they work in
17:29 - my team together with me and and
17:32 - we have a good relationship but i don't
17:34 - know
17:35 - what they
17:36 - feel about the whole devops movement
17:39 - um
17:40 - so what i can only talk about is how
17:43 - software development goes software
17:45 - operations and how we execute it okay i
17:48 - don't really care about the finance
17:50 - department
17:52 - so much okay
17:54 - how do we live it um
17:56 - we use git
17:58 - or whatever revision controls system you
18:02 - you're using do whatever you want but i
18:04 - mean i think everybody uses git um if
18:07 - you're not and i've i've seen that
18:10 - recently in the last two years actually
18:12 - companies not using it
18:15 - start using it use
18:17 - some integration service everybody knows
18:19 - what an integration service is
18:22 - it's an automated tool that takes your
18:24 - product and puts it into production it
18:28 - must be automated don't have someone say
18:31 - okay should we release today
18:33 - maybe you talk about releasing today but
18:36 - it must be automated
18:38 - the whole integration and releasing
18:42 - process must be
18:43 - such a non-op
18:45 - that you do it all the time you did all
18:48 - all the time
18:49 - and
18:51 - use build tools so
18:54 - however you try to make your final
18:57 - product i don't know if you do
18:59 - web design you probably have some grunt
19:01 - or webpack or whatever running
19:04 - automate that
19:06 - you can have it running
19:08 - but if it needs any parameters
19:10 - script that
19:11 - at least
19:13 - um we have build tools built into
19:16 - the git chain so if i get pushed then
19:19 - the product gets built and
19:22 - released
19:23 - um
19:25 - i would recommend i mean this is not an
19:27 - official statement i'd recommend
19:30 - um
19:31 - you use a cloud
19:33 - it doesn't matter if you have your own
19:35 - cloud if you have
19:36 - i don't know a service center and 2000
19:39 - servers and just run your cloud find
19:41 - that that's fine but the concept of
19:42 - cloud um
19:44 - must be implemented so so probably if
19:47 - you're in smaller companies use
19:49 - i don't know aws google something like
19:51 - that
19:53 - use provisioning tools for everything
19:56 - you
19:57 - don't start naming servers or anything
19:59 - like that
20:01 - the
20:04 - a i'll come to that later and and see
20:08 - your hardware
20:09 - as
20:10 - software okay
20:12 - so
20:13 - don't
20:15 - don't
20:16 - name
20:17 - your hardware don't don't know your
20:19 - hardware anymore abstract it
20:22 - make it software okay
20:26 - continuous integration
20:29 - there's a great article by martin fowler
20:31 - about it martin fowler you all know
20:33 - martin fowler he's
20:36 - i i don't know an and i can in
20:39 - i.t i'd say um he writes articles all of
20:41 - them are like uh
20:44 - 15 pages
20:45 - long
20:46 - and and quite
20:48 - quite a read but um
20:50 - always
20:51 - well
20:52 - well thought of and and well designed
20:55 - and and
20:56 - he's
20:57 - look him up martin fowler and read all
20:59 - his articles um it'll take you a month
21:02 - or so but it's worth it
21:05 - and
21:05 - he says about
21:07 - continuous integration
21:10 - what's the base point check out mainline
21:12 - main line is the master branch yeah
21:15 - develop a quick feature and i mean we
21:17 - even have tools for
21:19 - um if we have an issue or ticket
21:22 - that we want to work on that actually
21:24 - creates a branch named like that ticket
21:27 - so everybody who works on that same
21:30 - issue
21:31 - creates the same branch name so we can
21:33 - share and and interact with that
21:36 - build test and merge
21:38 - fully automated
21:39 - very often
21:41 - and always know your code is running and
21:45 - failing or broken builds don't make it
21:47 - to mainline so we have all that
21:48 - automated except for the coding part we
21:51 - need to do that
21:52 - unfortunately and we push into the repo
21:56 - everything gets built um i don't need to
21:59 - type to build and merge and whatever um
22:02 - it all gets done by tooling
22:04 - and after a minute i get an email if the
22:08 - build fails other or pop up on my screen
22:11 - actually
22:12 - and otherwise
22:15 - my changes get merged into mainline and
22:18 - are in the staging
22:21 - staging environment
22:25 - continuous delivery
22:27 - deliver all the time so what i've done
22:30 - before i coded i merged it into mainline
22:33 - and now
22:34 - it's about delivery and
22:38 - every successful merge you see gets into
22:41 - that staging environment so that we have
22:43 - a web page that has a total clone of
22:46 - everything we do we can have multiple
22:48 - clones also but but
22:50 - staging is the most important preview it
22:53 - runs against
22:55 - a real clone of the actual data
22:59 - and
23:02 - we have buttons for
23:03 - for creative review
23:05 - promote to production or rollback so
23:07 - there's no manual intervention with
23:10 - anything we do actually so whatev and
23:13 - these buttons can be pressed by a
23:15 - marketing guy
23:17 - and this is very important that it's not
23:19 - always the developers that decide okay
23:21 - we can go online no if if all the tests
23:24 - pass
23:25 - and if the product looks fine to the
23:26 - marketing guys they are the ones that
23:28 - wanted to feature of course they press
23:30 - the button to to actually release that
23:32 - feature
23:34 - if they don't press it i press it
23:36 - yeah anybody can
23:38 - and
23:39 - so this is
23:41 - standard deployments
23:44 - each of those what's that vertical lines
23:48 - are a deployment and
23:50 - that's standard for us that we actually
23:53 - deploy all the time and then you watch i
23:55 - don't know something happens or it
23:58 - doesn't happen and and so we always mark
24:00 - everything that's the instrumentation
24:02 - part i talked about
24:04 - you need to know okay we had this code
24:06 - running and it had this impact on our
24:09 - customers so
24:11 - maybe we need to change something or
24:13 - maybe that was a good change and let's
24:15 - party
24:16 - um by deploying so often we keep
24:20 - things unstable
24:22 - but
24:22 - we reduce risk if we deploy only once a
24:25 - month or only once a year or a half year
24:29 - then the deployment gets really tough
24:31 - and now we just deploy and everything is
24:33 - fine
24:34 - unless you do disaster deployment like i
24:37 - did last week where i blacked out for
24:40 - half an hour i think the whole product
24:42 - but that was
24:43 - very special it didn't happen
24:46 - for years
24:48 - actually
24:49 - because usually we have that but this is
24:51 - also the experience nobody shouted at me
24:54 - when that happened
24:56 - we just
24:58 - found out okay what was the problem and
25:00 - how do we fix it and how do we prevent
25:02 - it from happening the next time it was
25:05 - my mistake i did something wrong
25:08 - but how can we prevent it in the future
25:11 - and
25:12 - so what we want is that we actually have
25:14 - the queue
25:15 - and
25:16 - it's running the pipeline is running and
25:18 - it says okay sorry i can't continue
25:20 - something something happened i don't
25:22 - know what happened here but whatever
25:25 - and we are safe we have
25:28 - way too many features to test them all
25:30 - um we've been working on this product i
25:33 - didn't i think for nine years or
25:35 - something and it's just too many
25:37 - features
25:38 - and
25:40 - sometimes we have long workflows so we
25:42 - gather information and we export it to
25:44 - different clients and and and we improve
25:47 - the data we recycle it and there's so
25:49 - many workflows
25:51 - they take a while and and they need to
25:53 - take a while and and we have
25:55 - different performances you just can't
25:57 - test everything um
26:00 - and
26:00 - but we do have alerts for every core
26:02 - business case so whatever happens we
26:05 - know so we see we act we know okay and
26:08 - and if we if we see we have a problem
26:12 - and we don't have measurements yet we
26:14 - act so we introduce measurements
26:17 - instrumentation for that problem and in
26:19 - the future we have something automated
26:21 - for it
26:22 - and we have many alerts that shouldn't
26:25 - trigger okay and
26:28 - um
26:29 - we always know exactly when which
26:31 - version of code was online so we have
26:33 - our stats and we can always say okay at
26:35 - that point in time
26:37 - we had this revision running very
26:39 - important i see that a lot that people
26:42 - don't know they just go to service to
26:44 - get pull so that they think they're
26:46 - advanced because they use git
26:48 - they do get pull server restart have no
26:51 - idea what happens
26:53 - and
26:54 - um
26:56 - yeah we have much better things to do
26:57 - than testing our code manually so i
26:59 - don't want to browse our website all the
27:01 - time and
27:03 - and then we have products that i don't
27:05 - even want to touch too much because
27:07 - i don't know i just don't like them and
27:09 - it's good to have that automated and we
27:12 - need to detect errors as fast as
27:14 - possible and stop them from passing
27:15 - along the value stream so even when i
27:18 - blacked out
27:19 - last week
27:20 - i knew it within seconds and that's very
27:23 - important and that you know so you can
27:25 - act quickly and
27:28 - and fix things
27:30 - this is still marked on syntax
27:32 - um be very disciplined so if you want to
27:36 - do that
27:38 - you and the whole team must be very
27:39 - disciplined
27:41 - we we do
27:42 - we create strict 12-factor apps
27:46 - we don't ever do quick fixes even if i
27:48 - know okay i could just log in and change
27:51 - that line in nginx and and fix some i
27:54 - don't know proxy path or something and
27:56 - it would work
27:57 - we don't do it um
28:00 - we create the fix we patch
28:03 - we commit we release
28:05 - and that always has to be this way
28:07 - and
28:09 - if
28:10 - a broken commit
28:13 - exists in
28:15 - in your tool chain
28:18 - that's the most important bug to fix
28:20 - because as soon as you let your tools
28:22 - down
28:23 - and you start to work around the tools
28:26 - and manually install things
28:28 - the whole system breaks yeah always use
28:31 - tools
28:32 - and
28:34 - if you can't do it you can script it
28:36 - that that's my philosophy whatever you
28:38 - do
28:39 - it is scriptable it might be hard it
28:42 - might be hard the first time it gets
28:43 - easier and easier
28:45 - okay
28:47 - and very important is learn all the time
28:50 - i read books all the time i read
28:53 - articles all the time
28:55 - there's not a single day i don't learn
28:58 - something and i could say that for my
29:01 - whole team
29:02 - nobody nobody ever
29:05 - lays down and says okay i know enough
29:09 - just doesn't happen
29:10 - and communicate a lot i mean it's easy
29:13 - for us
29:14 - we're with less than a two pizza team i
29:17 - eat one pizza and
29:20 - no way more than that
29:23 - but it's easy for us to communicate
29:25 - otherwise
29:26 - we are also not in danger to have the
29:28 - silos because we are very close together
29:30 - we are still in one office which is in
29:33 - one floor so it's not um
29:36 - not a big
29:37 - i don't know like unico whatever over
29:40 - there we have huge buildings and and
29:43 - it's hard to communicate so for us
29:45 - really communication is easy
29:48 - um i want to talk about failures things
29:51 - that did not work
29:53 - i've worked at multiple companies with
29:55 - multiple companies i've
29:58 - seen things fail i failed i failed with
30:01 - my team i saw
30:03 - teams fail after investing hundreds of
30:06 - thousands of euro into devops
30:08 - what doesn't work
30:10 - being half committed doesn't work okay
30:12 - either you do it or you don't do it
30:16 - halfway costs a lot of money
30:20 - ansible or script deployments on pet
30:23 - servers everybody knows what the pet
30:24 - server is it's one way you know the host
30:27 - name
30:28 - it's a server you like
30:30 - and
30:32 - never have a server you like
30:34 - okay um
30:37 - wiki playbooks for deployments and
30:39 - upgrades i see that a lot people think
30:42 - they're so smart because they have
30:43 - everything written down in in wiki and
30:45 - they copy and paste every line and then
30:47 - create a new project oh we are got a new
30:49 - customer and creating new customer takes
30:52 - a quarter of an hour i don't know three
30:55 - hours i don't know copy paste all the
30:57 - lines from wiki i mean just script that
31:00 - or make
31:01 - make a microservice that creates a new
31:03 - customer
31:06 - strongly wired services doesn't know it
31:08 - doesn't never work i mean we've
31:11 - fully
31:12 - migrated to microservice environments
31:16 - and initially the first migration
31:18 - started with um service a knows exactly
31:22 - about service b and we can talk to each
31:24 - other no it's like pet servers it's just
31:26 - pet software
31:27 - um
31:30 - what didn't work using kvm then or vm
31:34 - where
31:35 - in
31:36 - in our deployments so for the software
31:38 - we were trying to deploy it those
31:40 - virtualization technologies work very
31:43 - well to abstract hardware but they don't
31:46 - work well to abstract software
31:50 - for infrastructure
31:53 - yes but not for the
31:55 - deployed product itself
31:58 - delegating core services
32:00 - um
32:01 - sorry to say whoever outsourcing
32:03 - companies here um
32:06 - the
32:07 - i don't know dns hosting all these core
32:10 - things that
32:11 - are needed for your product you must do
32:13 - all that in-house
32:16 - outsourcing software development didn't
32:18 - work for us nobody can
32:20 - outsource a philosophy and it's the main
32:23 - thing you do if you if you do software
32:26 - and
32:26 - every company does software nowadays and
32:29 - every
32:30 - company
32:31 - mainly does i.t
32:33 - nowadays different aspects of it but
32:35 - everybody needs it you can't outsource
32:38 - it
32:39 - outsourcing scissor admins very bad idea
32:44 - taking responsibility away from people
32:47 - we tried that with people who didn't
32:49 - want to devop
32:50 - and who didn't want to work in that
32:53 - strategy so we said okay you just fix
32:56 - that little issue and then you commit it
32:57 - and we cover for the rest um doesn't
33:00 - work
33:02 - you unfortunately have to get rid of
33:04 - those people
33:07 - multiple git repositories didn't work
33:10 - for us
33:12 - we have
33:13 - a lot of i don't know that
33:16 - that company has
33:18 - seven seven hundred
33:21 - makes of of
33:22 - source code and
33:24 - we have it all in
33:26 - in one repo and it's fine with git
33:29 - nobody cares and if you have multiple
33:32 - repositories you have to work with git
33:34 - sub modules and stuff doesn't work so
33:36 - well
33:37 - just use one monorepo and
33:41 - we do that
33:42 - everything you do
33:44 - must always be code
33:47 - and
33:48 - all truth
33:49 - lies in the repo so if i die today
33:53 - doesn't really matter because i mean
33:56 - i wouldn't care
33:58 - and
33:59 - and
34:00 - otherwise anything i've done
34:02 - even
34:03 - my talk which i just rewrote isn't git
34:09 - anything not committed has no value at
34:11 - all because it can just be gone
34:14 - or broken or what i don't know you can't
34:17 - find it anymore
34:18 - um especially in case you run into a bus
34:23 - and or you get hacked because we've got
34:25 - that hacked server
34:27 - i want to see
34:29 - or you want to change your
34:30 - infrastructure
34:32 - which is the most important point i mean
34:34 - that happens frequently or frequently
34:36 - every few years you want to switch from
34:38 - one provider to another one
34:40 - if you don't have
34:41 - domain
34:42 - or anything
34:44 - actually everything script
34:46 - scripted you won't be able to make that
34:49 - move if you have to manually set up
34:51 - infrastructure won't work
34:54 - and thanks very much
34:56 - questions
34:59 - [Applause]

Cleaned transcript:

so my introduction i haven't given you my introduction today i'm a first timer actually at free code camp and um already giving a talk um how good is that and i'm gonna talk about devops it's not really coding i won't show much code but i want to show you something or talk about the culture of devops a little bit and i see many developers in every day and i don't see many companies that get devops right and it's very a very important topic and i think everybody should know something about it first thank you thanks we accelerate i think it's really great because um we are starting to do more and more meetups here in this uh place and i think it's um good to have we accelerate here and giving us the opportunity to to enjoy this venue um just a few links i'll probably put the slides online and i like to do things and references first because otherwise nobody will see them anymore in in afterwards uh introduction who am i i'm a software developer for 10 years i'm not really a starter and currently my favorite language is golang i do a lot of pearl and i do typescript mostly because i have to i'm not too good at it and i started off as a cis admin some what 15 years ago i thought about it yesterday when i wrote my slides and was cis admin at the university of economics in austria and so i had some 20 000 users we had to administer and you guessed uh probably there wasn't much manual intervention possible doing that so we had to do a lot of coding um so i switched to becoming a software developer when i actually quit the university and i'm quite an expert at causing and fixing disasters um causing is easy but it doesn't happen as much anymore and fixing is okay it takes some time and experience but i'm pretty relaxed with the situations i get dumped into my name is klaus ita forgot to say that usually i have a nick somewhat combined with cokie cookie is very quickly taken in all the public websites so look for derivatives of that that's my twitter handle it's easy to remember and um sorry for the layout because my slides got messed up when i arrived here um they were all written in markdown and i should have some plugin that does them to html converts them to html but something happened so i had to rewrite some macro in my editor to just quickly make html from my slides so for that they are pretty beautiful and i'm a total dope at css so please just get used to those slides and they won't get prettier than that some buzzwords not important just some get the feeling if you have any questions just ask them okay i don't like having all the questions afterwards because maybe you don't remember and you might have it's good to have everyone all the questions at the end because we don't have a microphone for the okay okay sorry no questions hate you no questions uh devops um the initial setting um how how did we find that devops or how was it incubated or whatever uh there was this admins and there were developers and and there were business requirements and sales people and each of those silos actually hated each other um or i think they still do more or less but um something um is happening so um the two sides that were the most opposed sides were the scissor admins and the developers and and i'm both so it's easy for me to to tell you this um it gave me hard times uh quite often sorry for the small uh funds but that's my css skills okay um so then there's a there's a conflict in says admin and development as a developer you always check for the latest library and you always want to have the latest and greatest tools and try this and try try that some ai or whatever and um as a says admin you usually are being paid for sitting in the back room and just keeping everything stable and as soon as something moves a little bit you just bash it down so it doesn't move anymore and so those two groups are somewhat uh not in sync and someone someday just said well you know um we could work together and um at the time i was in at that university i told you about um there was i think that there was the seed of devops coming up that there were configuration engines um starting to get bigger and bigger and um it was the very early i think puppet wasn't no puppet what there was no puppet at that time but there was cf engine at the time and and people started scripting infrastructure and and people stopped actually doing things manually um the bad thing is i still see a lot of people manually intervening with their computers and the what are the goals of devops um we just want to keep a constant flow through the technology um value stream so so what does that mean it's um in the old days you always had infrastructure and you had development and those two didn't work well together and especially in bigger companies there was software development and software development cycles where months or years long and then there was an integration phase and that handed over the software project to the ops people which are system administrators and they tried to figure out how to actually get a project working and running and stably running and that pushed the launch date of every product further and further away and i still see that in many startup companies now also i mean people are developing and developing and then there's release day and they find out oh we never thought about infrastructure where we actually want to run the project but it works on my machine i see that quite a lot and it's it's a lot of about culture to actually put together all the team and make everybody participate from from the team so it's not only developers or this admins but it's also the marketing people it's the icon designers it's the i don't know css people are those developers yeah let's say and it's the sales people that mustn't sell things that that can't be developed or everybody needs to be in a team and this is a bit what devops is about um also the the thing i explained before day zero day one day two day end the product has to run all the time and yeah um basically work together in all um all phases of its life devops is about culture automation lean measurement and sharing these are the key points of um of devops let's go through them culture is um something i see a lot in in technology is there's that boss and and the boss shouts at everybody and um this is this won't i mean this this leads to results in short term but people leave and people join companies people leave managers and it doesn't really lead to a good team and and to a good work experience and what we really want to impose is get blamefree learning experiment and experimentation uh framework so we all make mistakes we make a lot of mistakes probably but the only difference be between a well established developer or devops guy or whatever and and the beginner is the number of mistakes they have made that that's the only difference and yeah this means we really um we do have volatile in environment so anything we do changes all the time and because we do experiment everybody is allowed to experiment everybody's allowed to bring in new technologies we change everything all the time but still we managed to reduce risk i'll explain that later how we managed to work that out we tried to have no more silos and which is actually fun because we start actually talking to people there were some people who came here to to talk to others this is true for every company the developers can start talking to marketing people and this admins can start talking to sales people and actually this is an interesting thought that should be should be a baseline in every company anyway we all share the responsibility for our finished product we all earned the money that the company earns and we all have to bring in money and we're all important for the company so of course we share responsibility and it's important that everybody knows that everybody is responsible for having the product out and autonomous teams is just because we share responsibility we are able to actually decide things on our own we don't need to ask the boss all the time automation um there's a i think on the first slide i had those thank you uh things um there's a book it's um it's a long book and it gets a bit boring after a while but it's the sre book of by google i don't know if you know site reliability engineering and um but they have amazing chapters that are really good and one of them is about uh automation and toil especially and i like the term it's it's um it was created in google i think and it means that anything you do and anything you do more than once that can be automated must be automated and this is one of the really basic thoughts in devops so whatever can be triggered by whatever metrics needs to be automatically automatically solved because otherwise what you might see you have many many busy people that do the same thing over and over and again and this is the worst that can happen okay so anything that's manual repetitive and automatable tactically important for our company has no value at all that's very important you know the the web server that needs to be restarted because whatever we have bad code and and we have mem leaks or whatever and the sysadmin goes to and look logs into that web server ssh is in there and and just types in nginx restart that's a waste of time you can automate that yeah you can just watch memory and just kill that thingy and and it'll have the same effect it's not a solution it's not a longterm solution but it it will uh take away work from the cis admin who can then develop a better solution and probably reduce man leaks okay and doing this removing toil all the time is a huge resource saver and um imagine i mean at google the sre teams they are not allowed they are not even allowed to do more than 50 toil in their their work time which is i mean think of your scissor admins what they do all the time um least of them are actually living that um well there is the term lean eliminate waste amplify learning decide as late as possible deliver as fast as possible that's all the the uh um i mean i hope you you live by those standards now and empower the team build integrity and see the whole see that all is i think the only thing i really have to explain more um even as a developer or says admin or whatever person or in whatever topic you are in just see what the goal is and and always know what is my company doing and what are we actually trying to get out to our customer it's very important to to see that all the time is what i am doing currently important for my customers does it actually give value to the customer um instrumentation anything and this gets forgotten by most i don't know how many startups are here and i just saw some everybody who who's making new products and many people have started new products and they forget about measurements and instrumentation and this should be one of the core builtins in every product that you create um if you don't instrument everything you do and if you don't have graphs for every whatever information you you generate in your software you will fail at devops because if you can't measure things and if you can't analyze things you can't react and of course a human being can react and i have a very good feeling about who i don't know i think the system is in a bad state and i have to do something but if you don't have numbers to prove and if you don't have numbers to analyze you can't automate these things here you see a graph from this is something actually a marketing guy created yeah these graphs um we we are generating all the the information and the marketing guy just clicks together it's some health whatever tool and and they can just see okay how do the numbers perform did we i don't know we had some release and numbers went down and then other releases and we tried to to get the release uh see the numbers up again and just just to show you that anything we do and whatever whatever this is a registration verify verification profile setup so so people that try to register um verify their prof profile and then or change data in the their profile which is important in this project we just measure what they do so we have the i i call it the devops pretzel and if you go to devops meetups nowadays uh you see this pretzel all the time and i just wanted to show it to you um it's it's a neverending cycle of okay you release a product you configure it you monitor monitoring okay you plan for the next release you build you you create you check the numbers again from monitoring you package it release it and so on and so on and on and that cycle goes forever and now the testimony i'm a developer okay devops is something that should actually um impact the whole company and i don't know much about how marketing people feel about it i mean i know that they work in my team together with me and and we have a good relationship but i don't know what they feel about the whole devops movement um so what i can only talk about is how software development goes software operations and how we execute it okay i don't really care about the finance department so much okay how do we live it um we use git or whatever revision controls system you you're using do whatever you want but i mean i think everybody uses git um if you're not and i've i've seen that recently in the last two years actually companies not using it start using it use some integration service everybody knows what an integration service is it's an automated tool that takes your product and puts it into production it must be automated don't have someone say okay should we release today maybe you talk about releasing today but it must be automated the whole integration and releasing process must be such a nonop that you do it all the time you did all all the time and use build tools so however you try to make your final product i don't know if you do web design you probably have some grunt or webpack or whatever running automate that you can have it running but if it needs any parameters script that at least um we have build tools built into the git chain so if i get pushed then the product gets built and released um i would recommend i mean this is not an official statement i'd recommend um you use a cloud it doesn't matter if you have your own cloud if you have i don't know a service center and 2000 servers and just run your cloud find that that's fine but the concept of cloud um must be implemented so so probably if you're in smaller companies use i don't know aws google something like that use provisioning tools for everything you don't start naming servers or anything like that the a i'll come to that later and and see your hardware as software okay so don't don't name your hardware don't don't know your hardware anymore abstract it make it software okay continuous integration there's a great article by martin fowler about it martin fowler you all know martin fowler he's i i don't know an and i can in i.t i'd say um he writes articles all of them are like uh 15 pages long and and quite quite a read but um always well well thought of and and well designed and and he's look him up martin fowler and read all his articles um it'll take you a month or so but it's worth it and he says about continuous integration what's the base point check out mainline main line is the master branch yeah develop a quick feature and i mean we even have tools for um if we have an issue or ticket that we want to work on that actually creates a branch named like that ticket so everybody who works on that same issue creates the same branch name so we can share and and interact with that build test and merge fully automated very often and always know your code is running and failing or broken builds don't make it to mainline so we have all that automated except for the coding part we need to do that unfortunately and we push into the repo everything gets built um i don't need to type to build and merge and whatever um it all gets done by tooling and after a minute i get an email if the build fails other or pop up on my screen actually and otherwise my changes get merged into mainline and are in the staging staging environment continuous delivery deliver all the time so what i've done before i coded i merged it into mainline and now it's about delivery and every successful merge you see gets into that staging environment so that we have a web page that has a total clone of everything we do we can have multiple clones also but but staging is the most important preview it runs against a real clone of the actual data and we have buttons for for creative review promote to production or rollback so there's no manual intervention with anything we do actually so whatev and these buttons can be pressed by a marketing guy and this is very important that it's not always the developers that decide okay we can go online no if if all the tests pass and if the product looks fine to the marketing guys they are the ones that wanted to feature of course they press the button to to actually release that feature if they don't press it i press it yeah anybody can and so this is standard deployments each of those what's that vertical lines are a deployment and that's standard for us that we actually deploy all the time and then you watch i don't know something happens or it doesn't happen and and so we always mark everything that's the instrumentation part i talked about you need to know okay we had this code running and it had this impact on our customers so maybe we need to change something or maybe that was a good change and let's party um by deploying so often we keep things unstable but we reduce risk if we deploy only once a month or only once a year or a half year then the deployment gets really tough and now we just deploy and everything is fine unless you do disaster deployment like i did last week where i blacked out for half an hour i think the whole product but that was very special it didn't happen for years actually because usually we have that but this is also the experience nobody shouted at me when that happened we just found out okay what was the problem and how do we fix it and how do we prevent it from happening the next time it was my mistake i did something wrong but how can we prevent it in the future and so what we want is that we actually have the queue and it's running the pipeline is running and it says okay sorry i can't continue something something happened i don't know what happened here but whatever and we are safe we have way too many features to test them all um we've been working on this product i didn't i think for nine years or something and it's just too many features and sometimes we have long workflows so we gather information and we export it to different clients and and and we improve the data we recycle it and there's so many workflows they take a while and and they need to take a while and and we have different performances you just can't test everything um and but we do have alerts for every core business case so whatever happens we know so we see we act we know okay and and if we if we see we have a problem and we don't have measurements yet we act so we introduce measurements instrumentation for that problem and in the future we have something automated for it and we have many alerts that shouldn't trigger okay and um we always know exactly when which version of code was online so we have our stats and we can always say okay at that point in time we had this revision running very important i see that a lot that people don't know they just go to service to get pull so that they think they're advanced because they use git they do get pull server restart have no idea what happens and um yeah we have much better things to do than testing our code manually so i don't want to browse our website all the time and and then we have products that i don't even want to touch too much because i don't know i just don't like them and it's good to have that automated and we need to detect errors as fast as possible and stop them from passing along the value stream so even when i blacked out last week i knew it within seconds and that's very important and that you know so you can act quickly and and fix things this is still marked on syntax um be very disciplined so if you want to do that you and the whole team must be very disciplined we we do we create strict 12factor apps we don't ever do quick fixes even if i know okay i could just log in and change that line in nginx and and fix some i don't know proxy path or something and it would work we don't do it um we create the fix we patch we commit we release and that always has to be this way and if a broken commit exists in in your tool chain that's the most important bug to fix because as soon as you let your tools down and you start to work around the tools and manually install things the whole system breaks yeah always use tools and if you can't do it you can script it that that's my philosophy whatever you do it is scriptable it might be hard it might be hard the first time it gets easier and easier okay and very important is learn all the time i read books all the time i read articles all the time there's not a single day i don't learn something and i could say that for my whole team nobody nobody ever lays down and says okay i know enough just doesn't happen and communicate a lot i mean it's easy for us we're with less than a two pizza team i eat one pizza and no way more than that but it's easy for us to communicate otherwise we are also not in danger to have the silos because we are very close together we are still in one office which is in one floor so it's not um not a big i don't know like unico whatever over there we have huge buildings and and it's hard to communicate so for us really communication is easy um i want to talk about failures things that did not work i've worked at multiple companies with multiple companies i've seen things fail i failed i failed with my team i saw teams fail after investing hundreds of thousands of euro into devops what doesn't work being half committed doesn't work okay either you do it or you don't do it halfway costs a lot of money ansible or script deployments on pet servers everybody knows what the pet server is it's one way you know the host name it's a server you like and never have a server you like okay um wiki playbooks for deployments and upgrades i see that a lot people think they're so smart because they have everything written down in in wiki and they copy and paste every line and then create a new project oh we are got a new customer and creating new customer takes a quarter of an hour i don't know three hours i don't know copy paste all the lines from wiki i mean just script that or make make a microservice that creates a new customer strongly wired services doesn't know it doesn't never work i mean we've fully migrated to microservice environments and initially the first migration started with um service a knows exactly about service b and we can talk to each other no it's like pet servers it's just pet software um what didn't work using kvm then or vm where in in our deployments so for the software we were trying to deploy it those virtualization technologies work very well to abstract hardware but they don't work well to abstract software for infrastructure yes but not for the deployed product itself delegating core services um sorry to say whoever outsourcing companies here um the i don't know dns hosting all these core things that are needed for your product you must do all that inhouse outsourcing software development didn't work for us nobody can outsource a philosophy and it's the main thing you do if you if you do software and every company does software nowadays and every company mainly does i.t nowadays different aspects of it but everybody needs it you can't outsource it outsourcing scissor admins very bad idea taking responsibility away from people we tried that with people who didn't want to devop and who didn't want to work in that strategy so we said okay you just fix that little issue and then you commit it and we cover for the rest um doesn't work you unfortunately have to get rid of those people multiple git repositories didn't work for us we have a lot of i don't know that that company has seven seven hundred makes of of source code and we have it all in in one repo and it's fine with git nobody cares and if you have multiple repositories you have to work with git sub modules and stuff doesn't work so well just use one monorepo and we do that everything you do must always be code and all truth lies in the repo so if i die today doesn't really matter because i mean i wouldn't care and and otherwise anything i've done even my talk which i just rewrote isn't git anything not committed has no value at all because it can just be gone or broken or what i don't know you can't find it anymore um especially in case you run into a bus and or you get hacked because we've got that hacked server i want to see or you want to change your infrastructure which is the most important point i mean that happens frequently or frequently every few years you want to switch from one provider to another one if you don't have domain or anything actually everything script scripted you won't be able to make that move if you have to manually set up infrastructure won't work and thanks very much questions
