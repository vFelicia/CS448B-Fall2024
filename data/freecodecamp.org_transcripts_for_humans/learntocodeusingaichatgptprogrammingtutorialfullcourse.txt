With timestamps:

00:00 - learn how to get AI to do the coding for
00:02 - you in this course you will use chat GPT
00:05 - to build interactive database powered
00:08 - projects you'll learn how to write
00:10 - effective prompts and debug and refine
00:12 - your code with the help of Ai No coding
00:16 - experience needed Gil Hernandez teaches
00:19 - this course imagine waking up tomorrow
00:21 - as a web developer what would you want
00:23 - to build it turns out that with AI tools
00:26 - like CPT you're already a developer
00:28 - regardless of your experience
00:30 - if you know how to work with them
00:32 - welcome to a different kind of coding
00:34 - course that's less about the intricacies
00:36 - of coding and more about building
00:38 - experimenting and realizing your ideas
00:41 - even without coding knowhow it's your
00:43 - fast lane towards getting the coding
00:44 - superpower in this course you'll use
00:46 - HTML CSS and JavaScript the building
00:49 - blocks of the web along with chat gbt an
00:52 - AI model developed by open Ai and you'll
00:55 - even get to work with a tool powered by
00:57 - Google called Firebase to add a database
00:59 - to projects but we won't Deep dive into
01:01 - the technicalities of these languages
01:03 - and tools or cover the basic concepts
01:06 - this course is your shortcut to
01:07 - prototyping and building cool projects
01:09 - with ai's assistance without worrying
01:11 - about all the tedious foundational stuff
01:13 - the focus is helping turn you from a
01:15 - encoder into a capable Problem Solver Ai
01:18 - and tools like chat gbt aren't just here
01:20 - to provide coding answers they can be a
01:22 - part of your creative process helping
01:24 - you brainstorm ideas reinforce your
01:26 - newly learned skills and even enhance
01:28 - existing code by the of this course
01:30 - you'll have a collection of fun
01:31 - interactive and database powered mini
01:33 - projects that you've built with the help
01:35 - of chat gbt let's have a look at all the
01:37 - cool stuff you'll build in the first
01:38 - section of the course you'll start to
01:40 - unlock the potential of AI by building
01:42 - and deploying your first projects using
01:44 - chubbt you'll start by building what's
01:46 - called a hero section for a fictitious
01:49 - product it's an essential part of any
01:50 - website or landing page then you'll
01:52 - create a subscription form for a service
01:55 - called Barker box after that you'll take
01:57 - things up a notch by building an
01:58 - interactive invitation that allows
02:00 - guests to RSVP to an event then you'll
02:02 - build a fun raffle app where users enter
02:04 - their names into a cake raffle then it
02:06 - picks a random winner and you'll turn up
02:08 - the volume on your building skills
02:10 - literally by creating an interactive
02:12 - drum kit app that plays real drum sounds
02:15 - in section two you'll build Next Level
02:17 - projects from your own version of the
02:19 - classic wacka game to an interactive
02:21 - project slideshow and a personal
02:23 - homepage to Showcase all your projects
02:25 - you'll even get to build a mobile
02:26 - friendly smart home interface and a
02:28 - Chrome browser extension that saves and
02:30 - stores shopping wish list items and
02:32 - section three is a big one it's all
02:35 - about building database powered apps
02:36 - with Firebase first you'll connect the
02:38 - event invite project from section one to
02:41 - a Firebase database then you'll work on
02:43 - a compliment generator app to spread
02:45 - Delight as well as an app called lunch
02:47 - vote to help you and colleagues decide
02:49 - on lunch spots and an app called Road
02:51 - wallet to manage group expenses while
02:53 - traveling by the end you'll have gained
02:56 - the confidence to keep building and
02:57 - turning your ideas into more functional
03:00 - prototypes and full-fledged applications
03:02 - regardless of your coding knowledge plus
03:05 - you'll learn how to deploy your projects
03:06 - with a service called netlify and share
03:08 - your awesome work and even transform
03:10 - projects into Mobile friendly apps that
03:12 - users can install on their devices and
03:14 - conveniently launch from their home
03:15 - screen and your teacher for this course
03:17 - is me gil Hernandez I'm a teacher at
03:19 - scrimba and I can't wait to start this
03:21 - journey and help you unlock your inner
03:23 - Builder before we start I encourage you
03:25 - to head over to Discord and let the
03:27 - scrimba community know that you're
03:28 - starting the course in the today I will
03:30 - Channel you can click on this image to
03:32 - jump right into the Channel all right so
03:34 - join me in the next lesson where you'll
03:36 - begin coding and building in a whole new
03:38 - light with AI and chat gbt see you
03:43 - there imagine waking up tomorrow as a
03:46 - web developer what would you want to
03:47 - build it turns out that with AI tools
03:50 - like chat gbt you're already a developer
03:52 - regardless of your experience if you
03:54 - know how to work with them welcome to a
03:56 - different kind of coding course that's
03:58 - less about the intricacies of coding and
04:01 - more about creating experimenting and
04:03 - realizing your ideas even without coding
04:06 - knowhow and this course will use HTML
04:08 - CSS and JavaScript the building blocks
04:11 - of the web along with chat GPT an AI
04:14 - model developed by open AI but we won't
04:17 - Deep dive into the technicalities of
04:19 - these languages or cover every basic
04:21 - concept instead we'll focus on helping
04:23 - you prototype and build projects with
04:25 - ai's assistance turning you from a
04:27 - non-coders into a capable Problem Solver
04:30 - Ai and tools like chat GPT aren't just
04:33 - here to provide coding answers they can
04:35 - be a part of your creative process
04:37 - helping you brainstorm ideas and
04:39 - reinforce your newly learned skills by
04:42 - the end of this course you'll have a
04:43 - collection of many projects you've built
04:45 - with the help of chat gbt and more
04:47 - importantly you'll have gained the
04:49 - confidence to keep creating and turning
04:51 - your ideas into actual functional
04:53 - prototypes regardless of your coding
04:55 - knowledge plus you'll learn how to
04:57 - deploy your projects with a service
04:58 - called net Y and share your awesome work
05:01 - your teacher for this course is me gil
05:03 - Hernandez I'm a teacher at scrimba and I
05:05 - can't wait to start this journey and
05:07 - help you unlock your inner Builder
05:09 - before we begin I encourage you to head
05:11 - over to Discord and let the scrimba
05:13 - community know that you're starting the
05:15 - course in the today I will Channel click
05:17 - on this image here to jump right into
05:19 - the Channel all right so join me in the
05:21 - next lesson where you will begin coding
05:22 - and building in a whole new light with
05:24 - AI and chat TBT I'll see you
05:28 - there
05:30 - let's explore how AI specifically chat
05:32 - GPT can help you yes even non-coders to
05:36 - build amazing products you see in recent
05:38 - years artificial intelligence has
05:40 - transformed from science fiction to a
05:43 - real world tool that people from all
05:45 - walks of life can use but AI isn't just
05:48 - about robots and self-driving cars it's
05:51 - about augmenting our capabilities and
05:53 - making tasks easier which opens up a
05:56 - world of possibilities chubbt is what's
05:59 - called a a generative AI program which
06:01 - means that it can create new and
06:03 - original content based on the data it's
06:06 - been trained on as a result chat GPT can
06:08 - assist with everything from writing
06:10 - jokes recipes songs and poems and serve
06:13 - as your intelligent coding assistant now
06:16 - let's get more specific how exactly can
06:18 - an AI tool like chat gbt help us with
06:20 - coding projects well here's the thing
06:23 - coding at its core is about problem
06:25 - solving and chat TBT is designed to be a
06:28 - stellar problem solver for instance it
06:31 - can help you break down large
06:32 - intimidating projects into manageable
06:35 - tasks you simply describe your project
06:37 - to chat GPT and it can generate basic
06:39 - steps for getting started and even lay
06:42 - out a road map for you to follow then it
06:44 - can suggest potential Solutions and
06:46 - provide code Snippets that you can use
06:48 - directly or modify to suit your needs
06:50 - now if you're a non- coder this might
06:52 - seem like a daunting Prospect but don't
06:54 - worry chat GPT can guide you through the
06:56 - basics of HTML CSS and JavaScript using
06:59 - simple and understandable language and
07:02 - remember if you need help understanding
07:04 - something chat GPT is right there to
07:06 - help explain tricky Concepts or offer
07:09 - hints and AI or chat PT in particular is
07:12 - not here to replace developers rather
07:15 - it's here to empower Builders like you
07:18 - and augment your creativity and problem
07:20 - solving abilities so I hope that you're
07:22 - excited about the potential of AI and
07:24 - chat GPT in building your projects let's
07:26 - keep it going by accessing and using
07:28 - chat GPT to explore some
07:33 - code if you're already set up with chat
07:35 - TBT feel free to skip this if not let me
07:38 - take a moment to walk you through
07:39 - signing up and accessing chat gbt chat
07:41 - gbt was developed by the open AI
07:44 - research lab so to use chat GPT you'll
07:46 - need to create an open AI account on
07:49 - open.com it's free and quick to do you
07:51 - can click right on this image to go to
07:53 - the site once you're on the open AI
07:55 - website click the sign up button and
07:57 - enter your email and a a desired
07:59 - password to begin setting up your
08:01 - account you'll then need to quickly
08:03 - verify your email address name and phone
08:05 - number for security reasons after that
08:07 - you should be all signed up and set up
08:09 - with an open AI account to access chat
08:12 - GPT click on your user Avatar in the top
08:15 - right corner and select visit chat GPT
08:18 - from the drop down menu or click right
08:20 - on this image to visit chat.
08:22 - open.com once there you can see some
08:25 - onscreen instructions and examples of
08:27 - how to interact with chat upbt and learn
08:30 - more about its capabilities and
08:32 - limitations after you've accessed chat
08:34 - GPT I want you to explore it type a
08:36 - sentence or a question in the chat
08:38 - interface and see how chat GPT responds
08:41 - you'll be surprised at how
08:43 - conversational and informative the AI
08:45 - model can be now while we are going to
08:47 - be using it for coding assistance chat
08:49 - GPT is not exclusively designed for
08:52 - coding it's a general purpose language
08:55 - model that's been trained on a large
08:58 - variety of content from the internet
09:00 - including many examples of code although
09:03 - it doesn't understand code in the same
09:05 - way a human developer does it can
09:08 - generate code based on the patterns and
09:09 - structures it has learned during its
09:11 - training all right now that you're all
09:13 - set up with chat TBT we'll take a
09:15 - highlevel tour of the basics of HTML and
09:18 - CSS and get you ready to start
09:23 - building let's spend some time talking
09:25 - about the first two essential tools
09:26 - you'll need in your Web building toolbox
09:29 - HTML and CSS HTML or hypertext markup
09:33 - language and CSS which is short for
09:36 - cascading stylesheets are like the bread
09:38 - and butter of web development they both
09:40 - work together to help create the
09:42 - websites and apps we visit every day and
09:44 - understanding the basics of both will
09:46 - help you get the most out of this course
09:48 - one of my favorite analogies for these
09:50 - that we use at scrimba is to imagine
09:52 - building a car think of HTML as the
09:55 - blueprint for a car laying out all the
09:58 - key structural components like the frame
10:00 - steering wheel seats tires and so on it
10:04 - defines the car's essential parts and
10:06 - how they fit together to make the car we
10:09 - still want the car to look good and be
10:11 - comfortable so that's where CSS comes in
10:13 - think of CSS as like the exterior design
10:17 - and interior Furnishings of the car like
10:20 - the paint job the style and comfort of
10:22 - the seats the layout of the dashboard
10:24 - and any of the presentational or styling
10:26 - aspects that make the car not just
10:29 - functional but visually appealing and
10:31 - Driver friendly too in a web development
10:34 - context HTML gives structure to our web
10:37 - content determining where paragraphs
10:39 - headings images and links go and CSS
10:42 - adds the style choosing colors fonts and
10:45 - layout options together HTML and CSS
10:48 - help create a well structured and
10:50 - aesthetically pleasing site or app so
10:53 - now let's see how chat GPT can help us
10:55 - in this process first let's ask it to
10:58 - generate the a basic HTML structure for
11:00 - a web page to do that I've written a
11:02 - prompt here for the AI in the file
11:04 - prompts MD as you'll learn prompts are
11:07 - essentially the instructions we feed
11:09 - into the AI and it's our way of
11:10 - communicating what we want the AI to do
11:13 - in this case I want it to generate the
11:15 - basic HTML structure for a web page so
11:18 - I'll copy this prompt and paste it into
11:21 - chat gbt's message input field submit it
11:24 - and chat GPT returns HTML code that you
11:27 - can copy and paste into your text editor
11:29 - you include your Project's HTML code in
11:32 - a file with the HTML extension like
11:36 - index.html so I'll click copy code to
11:39 - copy all of this HTML code and replace
11:42 - everything that's currently in
11:44 - index.html with this new code so these
11:48 - are some of the basic HTML tags which
11:50 - are used to define the structure and
11:52 - elements of a web page an opening tag
11:54 - like this marks the beginning of an
11:57 - element and the closing cling tag marks
12:00 - the end now don't worry about what these
12:02 - meta tags it gave us mean right now
12:04 - they're just there to help with
12:05 - character encoding and how the web page
12:07 - gets displayed and this body element is
12:10 - where we place the main content of the
12:12 - web page such as text images links
12:15 - paragraphs and other elements in this
12:17 - case we have an H1 heading and a
12:19 - paragraph So any content placed inside
12:22 - this body element is what we see in the
12:24 - web browser here in the scrim you can
12:26 - click the Run button to view the web
12:28 - page in the mini browser so cool there
12:30 - we see welcome to my web page and then
12:32 - some content below it all right now
12:34 - let's make this HTML and Page look good
12:37 - we'll use this second promp here to ask
12:40 - jbt to add some basic CSS to this page
12:43 - so I'll copy this promp and feed it into
12:46 - chat gbt and now I get back the HTML
12:49 - with a style block added that includes
12:52 - the CSS styles for the web page so I'll
12:55 - copy this new HTML code and replace B
12:59 - everything inside
13:01 - index.html with this code and good
13:03 - notice how the CSS sort of transforms
13:05 - our barebones HTML page into something
13:08 - more visually engaging and there are a
13:10 - few ways to apply CSS styles to your
13:13 - HTML you can include the CSS Styles
13:15 - directly within your HTML file like this
13:19 - however this can make your HTML
13:21 - excessively large and messy so it's
13:23 - better to include the HTML and CSS in
13:26 - separate files that's what you'll do in
13:28 - most of your projects so what I'll do is
13:31 - ask the AI to place the HTML and CSS in
13:35 - separate files using this prompt which
13:37 - I'll paste into chat
13:39 - GPT and there we go we get the code for
13:42 - index.html and styles.css so first I'll
13:46 - once again copy this HTML code and
13:48 - replace everything that's in index.html
13:51 - with this new code and you include your
13:54 - CSS Styles in a file with a CSS
13:57 - extension like styles . CSS so I'll copy
14:00 - the new code for styles.css then replace
14:03 - what's currently in styles.css with this
14:06 - new code and as you can see the page
14:08 - still looks the same the difference is
14:10 - that now the HTML and CSS are placed in
14:12 - separate files and that's being done
14:15 - here via the link tag which is what
14:17 - connects the HTML file to the CSS file
14:20 - it's a whole lot easier to manage and
14:23 - organize your HTML and CSS this way all
14:26 - right so if you have a look at the CSS
14:27 - you'll see what are called selectors
14:30 - that Target or select specific HTML
14:32 - elements and apply styles to them for
14:34 - example this selects the body element
14:37 - this here selects the H1 element using
14:41 - the H1 tag and then the P tag or
14:44 - paragraph element is selected here okay
14:48 - so now it's your turn I want you to play
14:50 - around with the HTML and CSS code here
14:53 - in this scrim change the text or add
14:56 - more text in the HTML for example
14:59 - welcome to Gill's web page or alter the
15:03 - colors in the CSS for example I can make
15:05 - this heading Red by simply typing red
15:08 - here as the color value and we see this
15:11 - main heading change to red or try
15:13 - changing any of the other CSS properties
15:16 - to see how they affect the page and if
15:18 - the cart analogy from earlier didn't
15:20 - really make things stick for you or you
15:22 - want to make HTML and CSS more relatable
15:25 - to you think of a scenario or a hobby
15:27 - you enjoy for instance if you like to
15:29 - cook imagine how an analogy relating to
15:32 - cooking would help you understand HTML
15:34 - and CSS better using a prompt like this
15:38 - I'm interested in learning HTML and CSS
15:41 - with an analogy related to cooking I'll
15:44 - submit that to chat GPT and the output
15:47 - suggests thinking of HTML as the list of
15:49 - ingredients in the step-by-step
15:51 - instructions in a recipe and that CSS is
15:54 - like the seasoning and presentation of a
15:57 - dish and then it expands upon this
15:59 - analogy to paint a more Vivid picture
16:02 - and one of the objectives of this course
16:04 - is for you to be able to ask the AI for
16:06 - explanations on specific parts of the
16:08 - code you don't understand so throughout
16:10 - this course I want you to ask chat GPT
16:13 - questions or to provide you with more
16:15 - details about any of the code or
16:17 - concepts you're curious about or don't
16:20 - quite understand yet you'll find that as
16:22 - you progress you'll start understanding
16:24 - how different HTML tags and CSS Styles
16:27 - come together to form a web page and how
16:30 - they fit in with JavaScript which is
16:32 - another essential building block of web
16:34 - development and chat gbt will be there
16:37 - every step of the way assisting you and
16:39 - guiding you in building your projects so
16:41 - congrats you've just written your first
16:43 - lines of HTML and CSS code and now I'll
16:47 - leave you with a challenge to have you
16:48 - spend some time tinkering with HTML and
16:51 - CSS I'll paste the challenge here as a
16:53 - comment in
16:55 - index.html first I'd like you to add a
16:57 - second level heading to the page using
17:00 - an H2 element and then add a paragraph
17:03 - below the new heading and I'd also like
17:06 - you to increase the text size of both
17:09 - headings I've also included a stretch
17:11 - goal which is to display a picture on
17:13 - the page this could be a photo of you or
17:16 - any image you'd like you can add an
17:18 - image to the scrim by simply dragging
17:20 - your image right into the Explorer
17:22 - sidebar here and don't hesitate to ask
17:24 - chat GPT for help or ask it any
17:26 - questions about HTML and CF s I'll see
17:29 - you in the next Grim where you will
17:30 - build your first
17:34 - project all right you've gotten an
17:36 - overview of HTML and CSS so how can we
17:39 - start using AI tools to simplify the
17:41 - process of building projects with HTML
17:44 - and CSS well you're about to find out so
17:47 - let's get our feet wet and start by
17:48 - creating one of the most commonly used
17:50 - elements on any website or app a login
17:53 - button more specifically a login with
17:55 - Twitter button which you've likely seen
17:57 - before we'll Leverage The Power of our
17:59 - AI companion chat GPT to guide us
18:02 - through this process you will work with
18:04 - HTML to structure the button and then
18:07 - CSS to make the button look visually
18:09 - appealing and interactive so that it
18:11 - looks like this so let's Jump Right In
18:13 - and ask chat gbt to help us out to kick
18:16 - things off I have provided two files
18:18 - index.html and styles.css which you
18:21 - started to learn about in the previous
18:23 - lesson and in the file prompts MD I've
18:26 - added the first prompt I'll use to build
18:28 - build this login button so in this
18:30 - prompt I'm assigning the AI a role I'm
18:32 - saying you are Developer GPT an
18:35 - assistant that helps write code for
18:37 - people who don't have coding experience
18:39 - and then I'm describing the task which
18:41 - is to create the HTML and CSS files for
18:44 - a rounded button resembling the Twitter
18:47 - login button and I requested making the
18:49 - code easy to understand for non-coders
18:52 - and to avoid using any complex CSS
18:54 - layout features I also mentioned more
18:57 - specific requir requirements like using
18:59 - basic CSS properties to horizontally
19:02 - Center the button and to add some space
19:04 - above it for visual separation and
19:06 - finally I want chat GPT to document each
19:09 - CSS property with a short code comment
19:12 - overall this prompt provides clear
19:14 - instructions for the task at hand which
19:16 - is something you should keep in mind
19:17 - when prompting an AI like chat GPT so
19:20 - what I'll do is copy this prompt then
19:23 - head over to chat GPT and paste it into
19:26 - the message input field send it then
19:28 - kick back and await the requested code
19:30 - so here's the generated HTML and CSS and
19:33 - below it chat GPT provides an
19:35 - explanation of the code so feel free to
19:38 - pause for a bit and read through these
19:39 - details if you'd like to know more about
19:41 - the HTML and CSS in the HTML file you'll
19:45 - see common HTML elements like a div and
19:48 - a button and these class attributes as
19:51 - you'll see are for the CSS styling and
19:53 - inside the button there is some text
19:55 - that says login with Twitter so I'll
19:57 - copy Cy this HTML code snippet from chat
20:00 - gbt then replace all the code in
20:03 - index.html with the new code click the
20:06 - Run button and good now you should be
20:08 - able to view the button in the mini
20:09 - browser displaying the text login with
20:11 - Twitter all right next I'll copy the CSS
20:14 - snippet from chat gbt and paste it into
20:17 - styles.css so this CSS targets or
20:21 - selects the container and rounded button
20:25 - class names defined in our HTML then
20:28 - using CSS properties like text align
20:31 - background color color and Border it
20:34 - gives the button a distinctive look
20:36 - which does in fact resemble the Twitter
20:38 - login button awesome and chbt was even
20:41 - intelligent enough to determine which
20:43 - color to apply to the button to make it
20:45 - match the Twitter brand and notice that
20:47 - next to each CSS property is a comment
20:50 - generated by chat gbt to help us better
20:53 - understand what the CSS is doing and if
20:56 - you pause for a moment and review this
20:57 - code you might be surprised by how much
20:59 - you might be able to understand many CSS
21:02 - properties are intuitively named almost
21:05 - like they're written in plain English so
21:07 - take for example background color it
21:09 - does precisely what it says it sets the
21:12 - background color similarly the color
21:14 - property defines the text colors and
21:17 - other properties such as border padding
21:20 - and font size follow a similar pattern
21:23 - and together these properties Define the
21:25 - look and feel of our button and if if
21:28 - you start to Tinker with some of these
21:29 - properties you'll learn a bit more about
21:32 - what they do and how they affect the
21:33 - appearance of the button for instance if
21:35 - you change this first padding value to
21:38 - 0er pixels or 50 pixels you might
21:41 - realize that this property controls the
21:44 - spacing inside the button or that the
21:46 - margin top property controls the space
21:48 - outside and above the button and a
21:51 - property like font size sets the size of
21:53 - the text and so on Okay so we've created
21:57 - our button but but we won't stop here
21:59 - because now I have a challenge for you I
22:01 - want you to experiment more with the
22:03 - HTML and CSS and transform this button
22:06 - into a login with GitHub Button as a
22:09 - developer you will likely interact with
22:11 - a button like this quite a bit you might
22:13 - immediately notice some of the
22:14 - differences between this button and the
22:17 - Twitter login button for example the
22:19 - GitHub button has a different background
22:21 - color the borders are not rounded and
22:23 - the button text is also different so
22:26 - I'll add the steps to this challenge
22:28 - here at the top of styles.css this
22:31 - challenge will require you to modify two
22:34 - lines of code in the CSS file and one
22:37 - line of code in the HTML file and I've
22:39 - also included the color code for the
22:41 - background of the GitHub button which is
22:43 - this value here so think about the
22:45 - changes you need to make and go for it
22:48 - and remember if you get stuck or need
22:49 - guidance chat GPT is here to help I'll
22:52 - meet you back soon to go over the
22:53 - challenge
22:56 - together all right hopefully you've
22:59 - updated your button to look like this
23:01 - now let's go over the challenge together
23:03 - first I need to turn the button into a
23:06 - login with GitHub button which tells me
23:09 - that I need to update the text between
23:11 - the button tags here in the HTML file so
23:14 - I'll replace Twitter with GitHub and
23:17 - there we go the button now displays
23:19 - login with GitHub good next I need to
23:22 - update the CSS to make the button look
23:24 - more like this and notice how this color
23:28 - code that starts with a hash symbol
23:30 - looks a bit like two of the values being
23:32 - used here in the CSS for the rounded
23:35 - button so I'll copy this color code and
23:38 - let's see what happens if I update the
23:40 - value of the color property to the new
23:44 - color value well it looks like this just
23:46 - updates the text color but I want the
23:48 - text to remain white so I'll undo that
23:51 - and just above I see that this line here
23:54 - controls the background color so I'll
23:57 - replace this color value with the new
23:59 - color and yep that looks exactly like
24:02 - what I'm going for finally the login
24:04 - with GitHub button has square corners
24:07 - instead of rounded Corners so let's see
24:10 - how to update that in styles.css looking
24:12 - at the comments I see that this border
24:15 - radius property rounds the corners of
24:18 - the button now currently it's set to 20
24:21 - PX or pixels so I'm assuming that
24:23 - setting this to a smaller value will
24:25 - make the corners appear less rounded so
24:28 - I'll try 10 pixels and that's looking
24:31 - closer to square corners so how about
24:33 - bringing the value down to0 pixels and
24:36 - yes that does the trick all right so now
24:39 - we have a simple yet functional and
24:41 - styled login button that you can start
24:43 - to use in your projects finally when you
24:46 - hover over a button or click on it it's
24:49 - common for the button to be interactive
24:51 - and respond in some way currently it's
24:54 - not doing that so let's ask chat GPT to
24:57 - suggest CSS to add hover and click
25:00 - effects to update the button's
25:01 - appearance when it's hovered or clicked
25:04 - for that I'll use this prompt here it
25:07 - instructs it to generate the necessary
25:09 - CSS for adding hover and click effects
25:12 - on the button and I need to let chat GPT
25:14 - know that the button now has a
25:16 - background color set to this value and I
25:19 - want to make its background color
25:21 - brighter when hovered over or clicked
25:24 - and to add a comment next to each CSS
25:26 - property so I'll copy this prompt paste
25:29 - it into chat GPT and good I get back the
25:32 - CSS code for the hover and click effects
25:35 - which you'll notice that they will be
25:36 - implemented using colon hover for when
25:39 - the mouse is over the button and colon
25:41 - active for when the button is being
25:43 - clicked so I'll just copy the new CSS
25:46 - toward the bottom then paste it into
25:49 - styles.css
25:50 - and let's test it in the mini browser
25:53 - when I hover over the button I see that
25:55 - the background color changes to a
25:57 - grayish color color and clicking on it
25:59 - makes it darker great this not only
26:01 - makes the button more engaging but it
26:03 - also improves the user experience by
26:06 - providing visual feedback all right so
26:08 - that about wraps up building our login
26:10 - with Twitter and GitHub buttons and
26:13 - remember while chat GPT does provide an
26:16 - excellent starting point I do want you
26:18 - to keep tweaking and modifying this code
26:20 - to view how each property or value you
26:23 - change affects the look of the button
26:25 - and I'm sure that you still might have a
26:27 - lot of questions about what some of this
26:29 - code is doing and that's perfectly okay
26:32 - so what I want you to do is take a
26:34 - moment to ask chat GPT about any code
26:37 - that appears confusing or that you want
26:39 - to learn more about for example what's
26:42 - the purpose of the hash symbol and color
26:45 - values or what does colon hover and
26:48 - active mean to help you ask these
26:50 - questions I'll provide a prompt here
26:52 - that asks chat GPT hey can you explain
26:55 - what the hash symbol and colon hover and
26:57 - an active mean in the following CSS code
27:00 - followed by the CSS code snippet to
27:02 - evaluate so great job building your very
27:05 - first project with AI I'll see you in
27:07 - the next Grim where we'll go over some
27:09 - of the basics of
27:13 - prompting all right AI coders let's see
27:16 - some of these prompting techniques in
27:18 - action now we're going to design and
27:19 - build an essential part of any website
27:21 - or landing page the hero section this is
27:24 - the first thing your visitors might see
27:26 - so making a good impression is important
27:29 - with the help of our AI tool chat upbt
27:31 - we'll create a vibrant hero section
27:33 - using HTML and CSS so let's Dive Right
27:36 - In I've already included HTML and CSS
27:40 - files for the project as well as an
27:42 - image we'll use in our page named chair.
27:45 - PNG first we're going to generate the
27:48 - HTML and CSS of the hero section so
27:51 - let's turn to chat gbt for some
27:52 - assistance in the file prompts MD I've
27:55 - set up the first prompt to work with
27:57 - with it's an instruction-based prompt
27:59 - with specific steps to help us reach the
28:01 - desired outcome it clearly explains the
28:04 - desired output which is the HTML and CSS
28:08 - for a hoverchair website's hero section
28:11 - and then it provides some context about
28:13 - the product and it describes exactly
28:16 - what it should contain a main heading
28:18 - subheading short description paragraph
28:20 - and a call to action link styled as a
28:22 - button it also outlines some guidelines
28:24 - for the code like making the code easy
28:26 - to understand stand for non-coders and
28:29 - avoiding the use of complex CSS features
28:31 - and it even provides some aesthetic
28:33 - guidelines like to use an elegant and
28:36 - neutral color palette with a focus on
28:38 - earthy tones and subdued Hues and as
28:41 - usual I want it to document the CSS with
28:44 - code comments and as a reminder of the
28:46 - overall goal and purpose of the task it
28:49 - states that the final result should be
28:52 - an engaging and Visually appealing hero
28:54 - section that effectively showcases the
28:56 - hoverchair brand so I'll just copy and
28:59 - paste this prompt into chat
29:02 - GPT and it generates the HTML and CSS
29:05 - code to set up the hero section so first
29:08 - I'll copy the HTML code and paste it
29:11 - into
29:13 - index.html looking at the HTML structure
29:15 - I see that it consists of a header
29:18 - element and nested inside it is a hero
29:22 - heading subheading and description just
29:24 - like we asked for and an acre element or
29:27 - link that's going to be styled to look
29:30 - like a button with this class name and
29:32 - here in the mini browser we see the hero
29:34 - section taking shape so next let's apply
29:37 - some styles to the page using the CSS
29:40 - chat GPT gave us I'll click to copy this
29:42 - code then paste it into styles.css and
29:47 - wonderful the hero section is starting
29:49 - to look much better with the CSS applied
29:52 - so now how about a challenge I'll paste
29:55 - the steps for you here in styles. CSS so
29:58 - for this challenge I'd like you to
30:01 - increase the size of the learn more
30:04 - button text because it's looking a bit
30:06 - too small and we do want to draw more
30:08 - attention to it so users can click on it
30:10 - and hopefully purchase the amazing hover
30:13 - chair then I want you to add a little
30:15 - more color to the Page by changing the
30:17 - text color of the subheading which is
30:20 - this element here to the color value
30:23 - provided here so give it a shot and I'll
30:26 - catch up with you when you're done to go
30:27 - over it
30:31 - together okay hopefully you got that so
30:34 - first to increase the size of the button
30:37 - text I see that the button is this
30:40 - element here with the class name ca-
30:43 - button so in the CSS I'll find that
30:46 - class name which is this CSS rule here
30:49 - and you've learned that the font size
30:51 - property is what controls the size of
30:53 - text so to make the font size larger
30:56 - I'll set it to to a value such as 24
31:00 - pixels and that looks much better to me
31:03 - you can see the difference here when I
31:04 - set it back to 18 pixels then 24 pixels
31:07 - or maybe make it larger such as 26
31:10 - pixels all right next I'll change the
31:12 - color of the subheading to this value
31:15 - here so I'll copy it and in the HTML I
31:18 - see that the subheading has the class
31:21 - hero- subheading so I'll scroll down and
31:24 - find that class name right here and I
31:26 - see that the color property is set to
31:29 - this color value so I'll update it with
31:31 - the new color and see what that looks
31:33 - like and awesome that did it I really
31:36 - like how the page is looking so if you
31:38 - got this well done now another detail I
31:41 - might add is to increase the line height
31:44 - or the space between the lines of text
31:46 - here in the hero description for that
31:48 - I'll use the CSS line height property
31:52 - here in the hero description Rule and
31:54 - I'll open up the line height a bit more
31:56 - by setting it to a value like
31:59 - 1.4 and to me that looks much better and
32:02 - easier to read all right now let's add
32:05 - another important element to our hero
32:08 - section an image in our project files we
32:10 - have an image named chair. PNG that I
32:13 - want to place above the hero heading
32:16 - naturally we'll ask chat GPT to do that
32:19 - but this time I'll use a more direct
32:21 - prompt by asking the AI to update the
32:25 - HTML and CSS by adding a small rounded
32:28 - image named chair. PNG above the hero
32:30 - heading and to add some depth and
32:33 - highlight the image I also want to apply
32:35 - a soft Shadow behind the image so I'll
32:38 - paste this into chat
32:40 - GPT and good here's the updated HTML
32:44 - with an image tag that points to the
32:46 - image in our project named chair. PNG
32:49 - and displays it on the page I'll test
32:51 - how it looks by adding only the new
32:53 - image tag to my HTML just above the hero
32:57 - heading like this and okay that's
33:00 - working but the image is huge so now
33:03 - let's make it smaller and rounded by
33:05 - applying the CSS the image element has
33:09 - the class name Logo so here in the css.
33:12 - logo selects and applies styles to that
33:15 - element so I'll just copy the new styles
33:17 - that get applied to the image and paste
33:20 - it in my CSS let's have a look at it now
33:24 - and excellent the product image makes a
33:26 - big big difference in our hero section
33:29 - and now the image has that nice rounded
33:31 - effect thanks to the CSS border radius
33:34 - property and the shadow gives the image
33:36 - a sense of depth and separation from the
33:39 - background so looking at the new CSS you
33:42 - might be wondering what this box Shadow
33:44 - property and rgba value are all about
33:48 - well as the comet describes it adds the
33:50 - soft Shadow to the image but I don't
33:52 - want you to just take my word for it if
33:54 - you want a deeper explanation take full
33:56 - full advantage of chat GPT and ask it to
34:00 - provide that for you along with anything
34:02 - else you might have questions about now
34:04 - the image is looking rather small so I
34:07 - think it might be best to make it larger
34:09 - I'll let you do that with a challenge so
34:12 - pause the scrim and use CSS to increase
34:16 - the size of the image the size you
34:18 - choose is up to
34:22 - you all right here we go hopefully you
34:24 - figured out that the width property is
34:26 - is what controls the size of the image
34:29 - so let's see I'll increase the width
34:31 - value here to something like 300 pixels
34:35 - and I think that's too big so I'll
34:37 - reduce it to 180 pixels and that looks
34:41 - better to me if you made it a different
34:43 - size that's perfectly fine finally I
34:46 - want this hero heading to stand out now
34:49 - one thing I can do is increase the text
34:51 - size using a larger font size value like
34:54 - 58 pixels and that looks better but I
34:58 - also want it to have a different font
35:00 - than the rest of the content on the page
35:03 - so Google offers a library of free web
35:05 - fonts called Google fonts that can be
35:07 - easily accessed and used in your
35:09 - projects you can see an example of it
35:11 - here and rubric is a Google font that I
35:15 - particularly like so I'm going to ask
35:16 - chat GPT to add the rubric font to my
35:19 - project and update the heading text I'll
35:22 - use a prompt that says please use HTML
35:25 - and CSS to set the hero headings font to
35:28 - the rubic Google font so I'll feed this
35:31 - prompt to chat
35:33 - gbt and it gives me back a link tag to
35:36 - include the rubic Google font in my
35:37 - project so I'll copy just this link tag
35:40 - in the new HTML and paste it in the head
35:44 - section of my
35:46 - HTML and I see that the new CSS has a
35:49 - font family property that sets the
35:51 - headings font to Rubik so I'll copy that
35:54 - and then paste it in the hero heading
35:59 - Rule and here you can see that the hero
36:01 - heading does in fact have a different
36:03 - font than the rest of the content now
36:05 - it's a very subtle difference but a nice
36:08 - Added Touch to the page all right and
36:12 - there you have it our website hero is
36:14 - complete so great work next we'll move
36:18 - on to our next project but before that I
36:20 - want you to play around with the hero
36:22 - section change the content colors fonts
36:26 - the buttons style make it your own and
36:28 - you can also replace the chair. PNG
36:31 - image with your own image by dragging
36:33 - the image into the Explorer sidebar then
36:36 - updating this Source attribute in the
36:38 - image tag to your image name I'll see
36:40 - you soon in the next
36:44 - lesson all right let's build something
36:47 - that you'll likely find useful a
36:49 - subscription form you've probably seen
36:51 - these on various websites and now we're
36:53 - going to build one for a subscription
36:55 - service called Barker box which you'll
36:58 - also be able to customize to your liking
37:00 - so let's get into it I have included the
37:02 - usual HTML and CSS files for this
37:04 - project as well as the image we'll use
37:07 - which is named dog. jpeg like in
37:10 - previous projects I want the AI to do a
37:13 - lot of the heavy lifting for me and
37:15 - generate most of the HTML and CSS I need
37:18 - to build this form so I'll kick things
37:20 - off using this task-based instructional
37:23 - prompt this prompt provides a specific
37:25 - set of instructions for for creating
37:27 - HTML and CSS files for a form offering a
37:31 - 15% discount to new subscribers of a
37:34 - product or service called Barker box
37:38 - which is a monthly subscription box that
37:40 - brings an assortment of unique playful
37:42 - and durable toys that dogs will love the
37:45 - prompt also outlines the steps to be
37:47 - followed including creating a headline
37:50 - adding a product description and
37:53 - building a registration form with an
37:55 - email input put and a submit button and
37:58 - it specifies the color and background
38:01 - properties to use and it also emphasizes
38:04 - making the code beginner friendly and to
38:06 - include code comments for better
38:08 - understanding so I'll copy and paste
38:11 - this prompt into chat gbt and I get back
38:14 - the HTML and CSS code so I'll copy the
38:17 - HTML code snippet and paste it into
38:21 - index.html and copy and paste the CSS
38:24 - into styles.css
38:26 - so in this code there might be some HTML
38:30 - elements and CSS properties you haven't
38:32 - seen before so let's spend a little time
38:35 - going through this code together first
38:37 - the HTML includes a form element to
38:40 - create the subscription form and inside
38:43 - the form are two common elements used
38:46 - with forms an input field and a button
38:49 - notice how the input field is of type
38:52 - email which means that the user is
38:54 - required to enter an email address
38:56 - address in the correct format it has an
38:58 - ID of email and the placeholder text
39:01 - enter your email and that's the text
39:05 - that gets displayed in the input field
39:07 - here when it's empty which gives the
39:09 - user an idea of what to type into it and
39:12 - this required attribute indicates that
39:14 - the user must provide an input before
39:16 - they can submit the form and the button
39:18 - element which you've worked with before
39:21 - is of type submit which means that when
39:23 - clicked it will submit the form data but
39:26 - this form won't be programmed to submit
39:28 - any data as that requires more
39:30 - programming and over in the CSS a lot of
39:34 - these properties should look familiar
39:36 - well all except for maybe display flex
39:40 - and flex Direction column so it looks
39:42 - like chat GPT generated CSS that uses a
39:45 - feature called flexbox to lay out the
39:47 - registration form flexbox gives you a
39:50 - more efficient way to layout align and
39:53 - distribute space among items in your
39:55 - layout and this this case the form
39:57 - elements are neatly aligned and laid out
39:59 - in a column in fact if you comment out
40:02 - or delete the CSS you can see what
40:04 - flexbox is doing without it they both
40:07 - shift onto the same row but with display
40:09 - flex and flex Direction column the text
40:12 - field and button appear neatly stacked
40:14 - on top of each other and this is really
40:16 - going to help us soon when adding a
40:17 - second input field now if anything still
40:20 - feels unclear don't hesitate to ask chat
40:23 - GPT questions or ask for a simpler
40:26 - explanation of HTML forms and CSS
40:30 - flexbox okay now that you're up to speed
40:32 - let's get into customizing this page
40:35 - first is just a simple content change
40:37 - that I want to make here in the heading
40:40 - I want to update the text to say
40:42 - subscribe and save 15% just to make the
40:46 - headline more descriptive and chat TBT
40:49 - generated CSS to make the form container
40:51 - adjust and resize according to the
40:53 - browser width which is great but it
40:55 - looks like the page needs some padding
40:58 - to create a little more visual
41:00 - separation between the edges of the
41:02 - container and the
41:03 - browser so I'll apply some left and
41:07 - right padding here in the body rule I'll
41:09 - replace this padding zero declaration
41:12 - with padding left and let's say 20
41:15 - pixels and below that padding right 20
41:19 - pixels that looks much better now we can
41:21 - clearly see the left and right edges of
41:23 - the form container even on narrow screen
41:26 - sizes and devices all right so I think
41:29 - that this description paragraph would
41:31 - look a little better and cleaner if it
41:33 - was left align with the form elements
41:36 - and I want to add another text field to
41:38 - the form that lets users type their name
41:41 - so how about you do that with a
41:42 - challenge in this challenge you will
41:45 - left align the text in the description
41:47 - paragraph and then in the form create a
41:50 - required name input field and here's a
41:53 - hint its type should be set to the value
41:56 - text so pause me now give that a go and
41:59 - I'll see you in a bit to go over this
42:03 - together all right hopefully that went
42:06 - well let's give it a go so first I will
42:08 - left align the text in the description
42:11 - paragraph that's being done here now
42:14 - currently I see that text align is set
42:16 - to the Value Center so let's see what
42:19 - happens if I change this from text align
42:22 - Center to text align left and yep that
42:26 - does what I want it to but it turns out
42:28 - that the value left is the default text
42:30 - align Direction so we can actually
42:32 - delete this line Al together and it
42:34 - works just like we want it to okay next
42:37 - is the name input field to do that I can
42:40 - just copy the code for the email input
42:42 - I'll copy it and paste a new input above
42:45 - it and in the challenge I mentioned that
42:48 - its type should be text currently it's
42:51 - email so I'll change this to text and
42:54 - the value email is specific typically
42:56 - used for email input fields to check
42:59 - that an email address is in the correct
43:01 - format but when you have an input field
43:03 - where users need to enter text such as
43:06 - their name you set its type to text I'll
43:08 - follow a similar pattern here by setting
43:11 - the ID to name and the placeholder text
43:15 - to enter your name and this is also
43:18 - going to be a required field and that's
43:20 - being set up here with the required
43:22 - attributes all right let's have a look
43:25 - I'll bring up my form click refresh and
43:28 - good the new input field appears stacked
43:31 - on top of the email field and that's
43:33 - again all being done with flexbox and if
43:35 - you click the submit button without
43:37 - entering your name since the field is
43:39 - set to be required you should also see a
43:41 - message that lets you know to fill out
43:43 - the field so hey if you got the steps
43:46 - for this challenge well done let's move
43:48 - on to the next challenge which I'll
43:50 - paste in here and this time I want you
43:52 - to display the dog. jpeg image image
43:56 - above the H1 element and to give the
43:59 - image the class featured image and when
44:02 - you display the image on the page you'll
44:04 - notice that it'll need some adjustments
44:06 - and that's okay we'll take that on after
44:08 - with CSS only worry about these two
44:10 - steps right now so go for it and I'll
44:13 - meet you back
44:15 - soon all right hopefully you were able
44:18 - to display the dog image you've worked
44:20 - with images in previous projects so
44:23 - let's take a moment to go over that here
44:26 - just above the H1 element I'll add the
44:28 - image using the image tag and to apply
44:31 - the class featured image I'll add a
44:34 - class attribute and between quotes write
44:36 - feature Das image let's not forget the
44:39 - closing bracket then to display the
44:41 - image on the page I need to add the
44:43 - source attribute and point to my image
44:46 - which is named dog. JPEG and one
44:49 - important attribute when working with
44:51 - embedded images is the alt attribute and
44:55 - what that does is is provide alternative
44:57 - text for an image for instance if the
44:59 - image source is broken the image can't
45:02 - be loaded or the user is using a screen
45:04 - reader the text you type in here is
45:06 - going to be displayed or read to the
45:08 - user the image itself is an illustration
45:10 - of a happy dog so for the alt text I'll
45:13 - write illustration of a happy dog if you
45:15 - figured out that you needed to include
45:17 - an ALT attribute fantastic as it's an
45:19 - important attribute when working with
45:21 - image elements now as I mentioned
45:23 - earlier the image appears way too large
45:26 - and out of place so now I want you to
45:29 - write CSS to adjust the size and shape
45:32 - of the image I'll add the steps for
45:35 - another challenge here in styles.css so
45:39 - this time I want you to style the image
45:41 - by selecting the class featured image
45:44 - and then making the image smaller so
45:46 - that it's about 100 pixels wide and I
45:49 - want you to apply rounded Corners to the
45:52 - image so think about what you need to do
45:54 - give it a go and I'll catch you in AIT
45:55 - bit to go over this challenge
46:00 - together all right hopefully that wasn't
46:02 - too bad and you were able to get through
46:04 - all or most of these steps now let's go
46:06 - over it together first I'll select the
46:09 - class featured image which is done using
46:11 - a period like this container selector
46:13 - here so I'll type dot featured image and
46:17 - then open up a set of curly brackets
46:20 - then to make the image smaller I'll use
46:21 - the width property and set it to 100
46:25 - pixels
46:26 - and I see that worked and to apply
46:28 - rounded Corners I can use the Border
46:31 - radius property like we're doing here so
46:33 - how about I just copy this line of code
46:36 - here and paste it in my featured image
46:38 - rule and that looks pretty good but I
46:41 - want the image to be perfectly rounded
46:43 - and the way you do that is by setting
46:45 - the Border radius value to
46:48 - 50% and now we get a perfectly rounded
46:51 - image if you didn't make your image
46:53 - perfectly rounded that's okay the next
46:56 - thing I want to do is horizontally
46:58 - Center align the image above the heading
47:00 - because it's looking a bit weird left
47:02 - align and centering would make the
47:04 - design more balanced so I'll try to do
47:06 - that here in the featured image rule
47:09 - let's see earlier we used the text align
47:12 - property to align the content so what if
47:15 - I set text align to Center well that
47:18 - didn't work like it did for the
47:20 - paragraph So instead how about just
47:22 - asking chat GPT to give me the code for
47:24 - that so I'll ask it this prompt here
47:28 - I'll say hey what's the simplest way to
47:29 - horizontally Center align this new
47:32 - featured image and below I provide a
47:34 - code snippet of the image and H1 so I'll
47:37 - submit this to chat GPT and it says that
47:40 - to horizontally Center the image you can
47:43 - use CSS by setting the display property
47:45 - of the image to block and applying the
47:47 - margin property with a value of zero
47:50 - Auto and I get the updated CSS for that
47:53 - so I'll just copy these two lines lines
47:55 - of code that used the display and margin
47:59 - properties to horizontally Center the
48:01 - image then paste it into the featured
48:03 - image rule and it looks like that did
48:06 - the trick good while we're here I also
48:08 - want to create more space between the
48:10 - heading and the image and I can do that
48:13 - with margins so for example I can add a
48:16 - margin bottom property and set it to 20
48:19 - pixels and the spacing here looks much
48:21 - better but here's a trick this is
48:23 - actually a margin shorthand property
48:26 - where the first value sets the top and
48:28 - bottom margin and the second value sets
48:31 - the left and right margin so if I set
48:33 - the first margin value to 20 pixels it
48:37 - looks and works the same and if I add a
48:39 - third value that controls the bottom
48:42 - margin so in this case I want the top
48:44 - margin to be 10 pixels the left and
48:47 - right margins to remain Auto to create
48:50 - that horizontal centering but I'll add a
48:52 - third value that controls the bottom
48:55 - margin Marin only and that opens up the
48:57 - spacing on both the top and bottom sides
49:00 - of the image all right finally how about
49:02 - applying a nice border to the rounded
49:05 - image that matches the color of the main
49:07 - heading and I want you to try something
49:09 - using chat GPT go ahead and open a new
49:11 - chat and feed it this directive prompt
49:15 - The Prompt for this challenge asks chat
49:17 - GPT to generate only the CSS needed to
49:20 - apply a 3 pixel border to this image
49:23 - using this color value here in this case
49:26 - chat GPT doesn't really need to know the
49:28 - context of your project this image code
49:31 - snippet should be all it needs to give
49:33 - you the necessary CSS so pause me now
49:36 - ask chat GPT and then add the new CSS to
49:39 - the
49:42 - project all right hopefully you were
49:44 - able to make that work I'll open up a
49:46 - new chat window then provide the prompt
49:48 - to chat GPT and I get back a CSS code
49:51 - snippet that applies a 3 pixel solid
49:53 - border to the image with the provid
49:55 - added color so I'll copy this line of
49:57 - code then paste it inside the featured
49:59 - image rule let's have a look the border
50:02 - is a nice Added Touch and it makes the
50:04 - image stand out a little bit more on the
50:06 - page all right so that about wraps up
50:08 - the subscription form project and I want
50:10 - you to take some time before you move on
50:12 - to ask chat GPT to explain anything that
50:15 - seems confusing or that you want to
50:17 - learn more about you've made lots of
50:20 - progress building with AI and HTML and
50:22 - CSS and up next we'll take a big step
50:25 - toward adding more power and
50:27 - interactivity to our projects with
50:32 - JavaScript you've learned a bit about
50:35 - HTML and CSS and used it to build some
50:38 - projects now it's time to learn another
50:40 - essential building block in web
50:41 - development JavaScript in this Grim
50:44 - you'll get an overview of what
50:45 - JavaScript is why it's important and how
50:48 - it fits into the larger picture of web
50:50 - development together with HTML and CSS
50:53 - think back to the HTML and CSS car
50:55 - analogy if HTML is like the structural
50:58 - building blocks of the car and CSS is
51:01 - the car's style look and feel then think
51:04 - of JavaScript as the part that powers
51:06 - the car's functionality like the car's
51:08 - engine and smart features without
51:10 - JavaScript our car might be
51:12 - aesthetically pleasing but it won't do
51:14 - much with JavaScript we breathe life and
51:17 - interactivity to the otherwise static
51:19 - structure and design for example the
51:21 - doors unlock when we approach the car
51:23 - the ignition starts with a button and
51:25 - the car moves when we push the
51:27 - accelerator all interactive all thanks
51:29 - to JavaScript in web development
51:32 - JavaScript is responsible for making
51:34 - websites and apps functional and
51:36 - interactive it enables us to respond to
51:38 - user actions like clicks or key presses
51:41 - manipulate content on the page and even
51:43 - communicate with servers to process
51:45 - store and retrieve data now you might be
51:47 - wondering how can I as a non-coders
51:50 - start using JavaScript well that's where
51:52 - our handy AI assistant comes in just
51:55 - like we did with HTML and CSS we can ask
51:57 - chat GPT to generate JavaScript code for
52:00 - us and help explain what it's doing
52:02 - let's say we want to implement a simple
52:04 - interaction we'd like a welcome message
52:06 - to appear when we click a button so
52:08 - let's ask chat GPT to create this
52:10 - JavaScript code for us I'll use this
52:12 - prompt which asks can you generate a
52:15 - basic HTML and JavaScript example where
52:17 - clicking a button logs a welcome message
52:20 - please add comments to help me
52:21 - understand the code I'll copy this
52:23 - prompt and paste it into chat
52:26 - and it Returns the HTML code which I'll
52:28 - copy and paste into
52:31 - index.html the HTML contains a button
52:34 - element with an ID of my button and in
52:37 - this case the pages JavaScript is placed
52:39 - directly in the HTML file within script
52:42 - tags the JavaScript gets a reference to
52:45 - the button element with the ID my button
52:48 - and assigns it to a variable named
52:50 - button using this special VAR keyword
52:53 - you can think of a variable as like like
52:55 - a container used to store information
52:57 - assigning the button element to this
53:00 - button variable makes it easier to work
53:02 - with a button and make things happen
53:04 - when it's clicked for example the code
53:06 - here pays close attention to our button
53:09 - using what's called an event listener so
53:11 - that anytime it's clicked something
53:14 - happens in our page or some
53:15 - functionality that we Define between
53:17 - these curly braces gets executed in this
53:20 - case it's logging the welcome message
53:23 - written here between quotes to the
53:25 - browser console and the browser console
53:27 - is a tool that's built into web browsers
53:29 - that allows you to run and test
53:31 - JavaScript code and display messages and
53:34 - console.log is what's used to display or
53:37 - log messages in the console in fact this
53:39 - scrim editor also has a built-in console
53:43 - that's this area here so I'll click the
53:45 - Run button to run this code and when I
53:47 - click the button in the mini browser the
53:49 - welcome message appears inside it good
53:52 - so now I have a quick challenge for you
53:54 - I'll includeed it here as a comment
53:56 - between the script tags and what I want
53:58 - you to do is display your name in this
54:01 - welcome message so it might say
54:03 - something like welcome Gil for example
54:06 - so pause me now and give that a
54:09 - try all right to display my name in The
54:12 - Welcome message I'll update the text
54:14 - that's passed into
54:16 - console.log the message is written
54:18 - inside quotes and any value or data you
54:22 - see in JavaScript written within single
54:24 - or double quotes is called a string So
54:26 - within the quotes I'll simply add
54:28 - welcome Gil I'll run the latest code
54:31 - click the button and I get the new
54:33 - message displaying my name so next how
54:36 - about we display this welcome message on
54:38 - the page instead of in the
54:40 - console so using this prompt I'll ask
54:43 - chat GPT to please update the code so
54:46 - that clicking the button displays a
54:47 - welcome message on the page so I'll
54:50 - paste this prompt into chat GPT and we
54:53 - get back the updated code and including
54:55 - an overview of the changes which you can
54:57 - read through I'll copy the new code
54:59 - snippet and replace everything in
55:02 - index.html with it and looking at the
55:04 - HTML I see that it now includes a div
55:07 - with an ID of message container to
55:10 - display our message and like it did with
55:12 - the button the JavaScript references the
55:14 - new message container div and assigns it
55:17 - to a variable named message container
55:20 - and this line uses the message container
55:22 - variable to update the text content of
55:25 - the container and display the welcome
55:28 - message so I'll click run to run my
55:30 - latest JavaScript and when I click the
55:32 - button I should see the message appear
55:34 - on the page and there it is good similar
55:37 - to how we've written HTML and CSS in
55:40 - separate files it's common to place your
55:42 - JavaScript in a separate file that uses
55:45 - the JS extension like script.js so let's
55:49 - do that I'll ask chat GPT to place the
55:52 - HTML in JavaScript in separate files
55:55 - files and to style the page with CSS so
55:58 - I'll feed this prompt into chat gbt and
56:00 - let it do its thing and I get back the
56:02 - code for HTML JavaScript and CSS files
56:06 - so I'll replace my HTML with this new
56:09 - HTML code snippet then copy the
56:11 - JavaScript code and paste it into my
56:15 - script.js file and if you're curious you
56:17 - link a Javascript file to your HTML
56:20 - using the script tag like so in this
56:23 - case it's pointing to script.js
56:25 - next I'll copy the CSS code into
56:28 - styles.css
56:30 - run all my latest code and that
56:33 - horizontally centures the button and
56:35 - makes it slightly larger I'll click the
56:37 - button and the welcome message appears
56:40 - all right so I have one more JavaScript
56:42 - challenge for you I want you to use a
56:44 - JavaScript variable to dynamically
56:47 - display your name in The Welcome message
56:49 - so your challenge is to create a
56:52 - variable named first name and a sign it
56:55 - your name and I'm going to update this
56:57 - line here so that it uses the first name
56:59 - variable you define to display your name
57:01 - in the message all right so take it away
57:04 - the scrim is all
57:08 - yours all right now let's go over the
57:10 - challenge together to create a variable
57:12 - named first name I'll use the VAR
57:14 - keyword followed by first name then type
57:17 - an equal sign to assign it my name
57:20 - between quotes or as a string and if you
57:23 - don't place this inside quotes the
57:25 - JavaScript interpreter will produce an
57:27 - error so as you can see here the red
57:29 - squiggly line lets you know that
57:31 - something is not quite right and in
57:33 - JavaScript semicolons are optionally
57:35 - used to Mark the end of a statement so I
57:37 - can type one here to be consistent with
57:39 - the rest of the code all right so now
57:41 - whatever I assigned to the first name
57:43 - variable should appear here so let's try
57:46 - it out I'll click the button and good
57:49 - the message says welcome Gil so if you
57:51 - did something similar nice work
57:53 - especially if this was your first time
57:55 - working with variables in JavaScript
57:58 - another way you might see variables
57:59 - written in JavaScript is using the
58:01 - keyword let which is easier to
58:04 - understand because if you read this out
58:06 - loud you might realize that we're just
58:08 - telling JavaScript to let first name
58:11 - equal or B Gill and you will see
58:14 - variables used a lot in JavaScript
58:16 - programming okay we've covered a lot in
58:18 - this lesson and if you still don't quite
58:21 - understand some things about this
58:22 - JavaScript code don't worry but but I
58:25 - really do want you to take full
58:26 - advantage of asking chat GPT to help you
58:29 - understand certain Concepts especially
58:31 - while building projects as you work more
58:34 - with these tools and continue to build
58:36 - your projects you'll start to recognize
58:38 - patterns and understand more about how
58:40 - HTML CSS and JavaScript work to help you
58:43 - out in the meantime I'll provide a
58:45 - prompt you can use to get a refresher or
58:47 - learn more about the basics of what we
58:49 - covered in this lesson so you can say to
58:51 - chat GPT hey I'm new to JavaScript
58:53 - please help me understand the basics of
58:56 - these Concepts and like in an earlier
58:58 - lesson when we covered the basics of
59:00 - HTML and CSS you can ask chat GPT to
59:04 - relate HTML CSS and JavaScript and how
59:07 - they work together to your own interests
59:10 - or Hobbies so here's a suggestion for
59:12 - how you might prompt chat GPT you can
59:14 - say I enjoy gardening how can I
59:16 - understand HTML CSS and JavaScript in
59:19 - the context of planting and maintaining
59:21 - a garden so explore some of these
59:23 - prompts and I'll see you in the next
59:24 - grim where we'll begin applying
59:25 - JavaScript to
59:29 - projects we are going to be throwing an
59:32 - epic event called GIF Gaya where guests
59:35 - dress up as their favorite gifts or
59:37 - memes we'll need to build an interactive
59:39 - invitation to allow guests to RSVP to
59:41 - the event we can do that using HTML CSS
59:45 - and JavaScript With a Little Help from
59:47 - chat gbt this is a bigger project so
59:49 - we're going to take it step by step
59:51 - using a series of role playing and
59:53 - instructional prompts where we guide the
59:56 - AI with specific steps to reach the
59:58 - desired outcome it's going to hopefully
60:00 - look something like this but first we
60:02 - need to work on creating the HTML
60:04 - structure of the event invite which
60:06 - might look like this I've set up the
60:08 - project with HTML CSS and JavaScript
60:11 - files the first step is to ask chat GPT
60:14 - to generate the HTML structure of our
60:17 - invitation and I've provided the prompt
60:19 - will use for that the prompt asks the AI
60:22 - to assume the role of a highly sought
60:24 - after designer and provides some context
60:27 - and objectives for the role to play then
60:30 - it provides Specific Instructions and
60:31 - details about what needs to be done
60:34 - which in this case is creating a vibrant
60:37 - festive RSVP page below it guides the AI
60:40 - on what elements the page should have
60:42 - such as an invitation header with a
60:44 - title a subheading showing the date an
60:47 - event description and a space to display
60:50 - a confirmation message then it instructs
60:53 - it to create an RS VP form with a
60:56 - required email field an attendance field
60:58 - and a submit button and we also wanted
61:01 - to link the HTML to a CSS and JavaScript
61:04 - file so I'll just feed this into cat GPT
61:08 - and it generates the HTML code outlining
61:10 - the basic structure of our page so I'll
61:12 - copy and paste this code into
61:15 - index.html and there might be some HTML
61:18 - tags here that you may not have seen
61:20 - before like Main and section these are
61:23 - known as semantic elements that help
61:26 - provide meaningful information about the
61:28 - content the main element describes the
61:30 - main content of the page and section
61:33 - defines specific sections in the page
61:36 - and we also have a select element which
61:39 - is commonly used in form elements to
61:40 - create a drop-down list of options in
61:43 - this case the user can select whether
61:45 - they are attending or not okay great now
61:48 - that we've established our structure we
61:50 - need to apply styling and that's where
61:53 - CSS comes in next I'll use this prompt
61:56 - to style the RSVP page it continues with
62:00 - the assumed role by instructing the AI
62:03 - to use its CSS skills to style the gift
62:05 - Gaya invitation so that it's easily
62:07 - viewable on mobile and desktop and I
62:09 - want the page to be visually engaging
62:11 - and fun as possible to match the event's
62:13 - Lively and playful spirit and the
62:15 - instruction to initially hide the
62:17 - confirmation message indicates a
62:19 - consideration for some JavaScript
62:21 - interactivity and I want CSS comments to
62:24 - help non-coders understand the code more
62:26 - easily so let's see what magic we can
62:29 - cook up with this prompt I'll copy and
62:31 - paste this CSS into styles.css and good
62:35 - our invite is taking shape and already
62:37 - looking more festive so let's have a
62:39 - look at the CSS we've got here I see CSS
62:42 - used to reset some of the default Styles
62:44 - applied to the browser then a lot of CSS
62:47 - properties that we've worked with
62:50 - before and remember how I asked the AI
62:53 - to initially hide the confirmation
62:55 - message on the page that's being done
62:57 - here with display none and soon we'll
63:00 - make it appear on the page dynamically
63:02 - using JavaScript when the form is
63:03 - submitted and then I see something
63:06 - different here under responsive Styles I
63:09 - asked the AI to make the page easily
63:11 - viewable on mobile and desktop so this
63:14 - at media syntax here is what's called a
63:18 - media query it lets us apply different
63:20 - styles to a page based on the width or
63:23 - size of the browser window or the device
63:25 - where the content is being viewed in
63:27 - this case Max with 600 pixels means that
63:30 - the CSS included Within These curly
63:32 - braces will get applied to our page only
63:35 - if the width of the browser is 600
63:38 - pixels or less so for example if I set
63:41 - the background color of this main
63:43 - element to Red notice how the red
63:46 - background does not appear when the
63:48 - browser is wide and only appears when I
63:51 - shrink its width down to 600 pixels or
63:54 - less
63:55 - less now here in the media query I see
63:57 - that the font size for most of the
63:59 - content is being updated so notice how
64:02 - some of the text size changes too for
64:04 - smaller
64:05 - screens all right now I want you to hack
64:08 - around and customize the page with a
64:11 - challenge I asked the AI for a vibrant
64:14 - and festive color scheme and this color
64:17 - scheme doesn't quite hit the mark I
64:19 - think so I want you to explore making
64:21 - the page more vibrant and festive using
64:24 - these two color values for example
64:27 - change the background color of the
64:28 - header and the button or the color of
64:31 - the headings and it looks like the
64:33 - spacing in the form needs some work too
64:35 - so I also want you to add more space
64:38 - between the input field select menu and
64:41 - submit button so pause me now and work
64:43 - through
64:46 - these okay now let's go over the
64:48 - challenge together to make the invite a
64:51 - little more vibrant I'll update the
64:52 - background color of the header to this
64:55 - color value here and the background
64:58 - color of the submit button to this
65:01 - second value so I'll scroll down to the
65:05 - CSS styling the button and replace the
65:08 - background color property with the new
65:10 - value and why not I'll also change the
65:12 - color of these headings here to match
65:14 - the color of the button those are these
65:17 - H3 tags here so in the CSS for the H3
65:21 - I'll add the color property and set it
65:23 - to that color value all right that is
65:25 - looking better to me finally there are a
65:27 - few ways I might update the space
65:29 - between the input select and submit
65:32 - button what I'll do is apply a bottom
65:34 - margin to the input field and the select
65:37 - menu and I can do that here in this CSS
65:39 - rule that targets both at once I'll add
65:43 - margin bottom 18
65:46 - pixels and that creates the spacing I
65:48 - need much better if you used a different
65:51 - approach than me that's completely fine
65:54 - all right now to add some life to this
65:56 - party we'll need JavaScript it will make
65:58 - our page interactive allowing the invite
66:01 - to respond and behave in specific ways
66:03 - based on user input so let's ask chat
66:05 - GPT to add some interaction to our page
66:08 - I have here another instructional prompt
66:10 - that gives the AI Specific Instructions
66:12 - to create JavaScript code to enhance the
66:16 - interactivity of the RSVP page then I
66:18 - provide clear tasks about the desired
66:21 - interaction which is to check if the
66:23 - user selected attending and then display
66:25 - a party emoji and a positive message if
66:27 - they are attending and I'm also being
66:29 - specific about where the message should
66:31 - appear in the confirmation message space
66:34 - and I requested adding brief comments to
66:36 - the JavaScript logic to make it more
66:38 - understandable for an encoder so let's
66:40 - feed this prompt to chat gbt and it
66:43 - generates the JavaScript I'll need which
66:45 - I'll copy and paste into
66:48 - script.js so let's go over this
66:50 - JavaScript first it gets the form and
66:52 - confirmation message elements and
66:54 - assigns them to variables and you may
66:56 - notice a new keyword const being used
66:58 - for the variables const is another
67:00 - common way to declare a variable in
67:02 - JavaScript unlike the lat and VAR
67:05 - keywords when you use const you're
67:07 - creating a variable that cannot be
67:09 - changed or reassigned once it has been
67:12 - set so in other words it's a constant
67:15 - value throughout your program then the
67:17 - code pays close attention to when a user
67:20 - submits the form and then runs all of
67:22 - this code each time it's submitted and
67:24 - this line here event prevent default is
67:27 - commonly used with forms to give you
67:29 - more control over the form submission
67:32 - and prevent the default browser Behavior
67:34 - associated with submitting forms then
67:36 - here we're getting the selected
67:38 - attendance value and assigning it to the
67:40 - variable attendance and this code here
67:42 - displays a confirmation message based on
67:45 - attendance selection it uses a common
67:47 - statement in JavaScript called an if
67:50 - statement that checks if the variable
67:52 - attendance or what the user selected is
67:55 - equal to the string yes if it's yes it
67:58 - sets the HTML content within the
68:00 - confirmation message div to display a
68:03 - celebratory message then it shows the
68:05 - confirmation on the Page by setting its
68:07 - display to block and it resets or clears
68:11 - the form here all right let's try it out
68:14 - I'll enter an email then select that I'm
68:17 - attending click submit and look at that
68:19 - we've got some interactivity on our page
68:22 - below we get the message partyon we look
68:24 - forward to seeing you at the gift Gaya
68:26 - good now I think that it would look
68:27 - better if the confirmation message
68:29 - appeared above the form so in
68:33 - index.html I'll move this confirmation
68:35 - message div above the RSVP form
68:39 - section I'll test it out and that looks
68:43 - much better now it does look like I need
68:44 - to add some space between the
68:46 - confirmation message and RSVP heading
68:48 - and I can do that with a bottom margin
68:50 - so here in the confirmation CSS let's
68:53 - say a margin bottom 20 pixels that looks
68:57 - good and then we no longer need to apply
68:59 - the bottom margin to the form so I'll
69:01 - just remove this entire form rule from
69:04 - the CSS great our gift Gaya invite is
69:07 - looking sharp up next we'll continue
69:09 - working on more interactivity with
69:14 - JavaScript it looks like chat gbt gave
69:16 - us the JavaScript code to display the
69:18 - confirmation message only if the user is
69:21 - attending notice how it displays a blank
69:23 - section if I select that I'm not
69:25 - attending well this was intentional
69:27 - because now I want you to work on
69:29 - displaying a different confirmation
69:31 - message if a user selects that they are
69:33 - not attending here's the challenge
69:36 - update the JavaScript below to display
69:39 - this message if the user selects the
69:41 - option sorry I can't make it use this
69:45 - code here as a reference for what you'll
69:47 - need to do and don't hesitate to ask
69:49 - chat GPT for help either so pause me now
69:52 - get coding and I'll show you my my
69:53 - solution when you're
69:57 - done all right if you got it to work
70:00 - well done there are a few ways you might
70:02 - have displayed the message to users not
70:03 - attending I did suggest using this if
70:06 - statement as a reference so you could
70:08 - have maybe copied this code block pasted
70:11 - a new one below and updated it to if
70:14 - attendance is equal to no then set
70:18 - confirmation message to this
70:20 - message and let's see I'll select sorry
70:23 - I can't make it and this works just like
70:26 - we needed to if you use this approach in
70:28 - your Solution that's great but there are
70:31 - other statements we can use with the if
70:33 - statement to create a conditional
70:35 - statement that performs different
70:37 - actions based on different conditions
70:39 - one of those is else if so here if the
70:43 - attendance value is yes then the program
70:46 - skips checking whether attendance is no
70:48 - and displays this message now if
70:51 - attendance is not yes then it checks if
70:54 - the attendance is equal to no then
70:56 - displays the proper message and I'll
70:59 - test it out here and you can see that it
71:01 - works in the exact same way assuming
71:03 - attendance can only be yes or no you
71:05 - could also write this using an if else
71:08 - statement like so so we can just have
71:10 - else without attendance is equal to no
71:13 - and this way if attendance is not yes
71:16 - then it must be no so this code should
71:19 - run either of these approaches is fine
71:21 - and if you'd like to learn more about
71:23 - JavaScript conditional statements I'll
71:24 - provide some prompts here that you can
71:26 - use with chat
71:28 - GPT now this is the GIF Gala after all
71:31 - so the last thing we'll work on is
71:33 - customizing the JavaScript to display a
71:36 - gif in the background based on what the
71:38 - user selects for attendance so with this
71:41 - prompt I'm instructing the AI to update
71:43 - the JavaScript and CSS to display this
71:46 - image as the page background if the user
71:49 - is attending and that the image should
71:51 - cover the entire background area of the
71:54 - body so I'll paste this into chat GPT
71:57 - and let's see what we get all right so
71:59 - I'll copy this JavaScript code and
72:01 - replace everything in script.js with
72:04 - this new JavaScript so it looks like
72:06 - this code is getting a reference to the
72:08 - body element and assigning it to the
72:10 - variable body and this line here sets
72:13 - the background image of the body element
72:15 - directly using the style. background
72:18 - image property and this URL function is
72:21 - what tells the browser to load the image
72:23 - file and use it as the background so
72:26 - when the user is attending or attendance
72:28 - is equal to Yes it sets the body
72:31 - elements background to the provided
72:33 - image URL and if the user is not
72:35 - attending or attendance is equal to no
72:38 - then the body's background image style
72:40 - gets sets To None to remove the
72:42 - background image and in the CSS code
72:44 - background size cover ensures that the
72:47 - image covers the entire background area
72:49 - of the body and background position
72:51 - center centers the image within the body
72:54 - so I'll copy these two properties then
72:56 - paste them in my body rule here in the
72:59 - CSS so let's test the latest changes
73:02 - I'll enter an email select yes I'll be
73:04 - there click submit and awesome we see
73:07 - the party gift displaying in the
73:08 - background now if you make the browser
73:10 - window taller you'll notice that the
73:13 - image is repeating itself here toward
73:16 - the bottom to fix this we can add a
73:19 - couple of CSS properties here in the
73:21 - body rule first I don't want the
73:22 - background image to repeat so I can use
73:25 - the background repeat property and set
73:27 - it to the value no repeat to prevent
73:29 - that then I'll add a height property and
73:32 - if I set the height value to 100 VH it
73:35 - means that I want it to take up 100% of
73:38 - the viewport height which is what VH
73:40 - means or the total height of the visible
73:43 - area in the browser so I'll refresh the
73:45 - mini browser try it out again enter my
73:47 - email select that I'm attending click
73:49 - submit and now I shouldn't see the party
73:52 - gift repeat heating or any empty spaces
73:55 - below it and I don't fantastic now don't
73:57 - we also want to display a different
73:59 - image if the user is not attending yeah
74:03 - I think that makes sense and I want you
74:05 - to work on that part for this last
74:07 - challenge so take a moment to update the
74:10 - JavaScript to display this GIF if the
74:13 - user is not attending pause me now and
74:16 - go for
74:19 - it all right hopefully you got the not
74:21 - attending gift to display so if the user
74:24 - selects not attending that means that
74:27 - the value of attendance is equal to no
74:30 - and currently that sets the background
74:32 - image to nun so I'll copy this URL
74:35 - function here and replace none with it
74:39 - and then Within These quotes I'll add
74:42 - the URL to this
74:45 - GIF and that should work I'll test it
74:47 - out enter an email select sorry I can't
74:51 - make it click submit and yes there is
74:54 - our sad GIF displaying in the background
74:58 - now I do want more of the background GIF
75:00 - to show through so I'll create a
75:02 - semi-transparent background for that
75:04 - I'll even ask chat GPT hey which CSS
75:06 - property creates a white
75:08 - semi-transparent background and here in
75:10 - the output I see that the CSS property
75:12 - that creates a white semi-transparent
75:14 - background is background color with this
75:17 - rgba value here this rgba color model
75:20 - lets you set an alpha value that
75:22 - determines the level of transparency for
75:24 - the color so I'll copy this background
75:26 - color property and I want the main
75:28 - element to be semi-transparent so I'll
75:30 - paste it here in the main Rule and
75:32 - here's the alpha value which is set to
75:35 - 0.5 which in this case means that the
75:37 - background will be 50% transparent I
75:40 - want it to be slightly less transparent
75:43 - so I'll set it to
75:45 - 0.75 which is going to allow some of the
75:48 - background to show through and that
75:49 - looks great let's test it with the
75:51 - attending GIF and and there you have it
75:54 - you've just built an event invitation
75:56 - page using HTML CSS and JavaScript all
76:00 - with help from chbt so nice work
76:03 - hopefully you picked up new coding
76:04 - skills along the way let's move on to
76:07 - our next
76:10 - project I don't know about you but in
76:12 - just about every office I've worked in
76:14 - cake is a big deal birthdays
76:17 - anniversaries Fridays there's always a
76:19 - reason for cake but there always seems
76:22 - to be that one person who ends up
76:24 - without a piece so we're going to fix
76:26 - that by building a cake raffle web app
76:28 - with the help of chat gbt and it might
76:30 - look something like this the raffle app
76:32 - will allow users to enter their names
76:35 - into a cake raffle then it will pick a
76:37 - random winner with a click of a draw
76:38 - Button as usual I've set up the project
76:41 - with an HTML CSS and JavaScript file and
76:45 - a prompts MD file for the AI prompts so
76:48 - let's start by sharing our idea with
76:50 - chat GPT through a conversational prompt
76:52 - this approach could give us a great
76:54 - starting point and allow us to shape the
76:56 - project and code in a more organic and
76:59 - less rigid way this prompt starts with a
77:02 - friendly greeting and presents the
77:03 - project idea it clearly mentions the
77:06 - Technologies to be used which is HTML
77:09 - CSS and JavaScript and describes the
77:12 - details about the desired functionality
77:14 - then it instructs the AI to outline the
77:17 - basic steps to get started so based on
77:19 - this prompt the AI should have a broad
77:22 - understanding of the projects objective
77:24 - which is a great way for us to Kickstart
77:25 - the project as it allows for more
77:27 - creativity and ideation so I'll copy
77:30 - this prompt and feed it into chat upbt
77:33 - and chat upbt practically generates some
77:35 - ideas and steps I can use as the basis
77:38 - for instructional prompts to help build
77:40 - my raffle app for instance steps 1 two
77:43 - and three outline the basic steps to
77:45 - follow for creating the HTML CSS and
77:48 - JavaScript interactivity these look good
77:50 - to me so let's go with these suggestions
77:52 - to set up the core HTML CSS and
77:54 - JavaScript for the app since we've
77:56 - established this collaborative two-way
77:59 - conversation with the AI I will reply to
78:02 - it with this instructional prompt this
78:05 - prompt instructs the AI to generate the
78:07 - project code for steps 1 through three
78:10 - of the suggested outline then it
78:12 - provides specific steps on how to
78:14 - structure the HTML and divide the app
78:16 - into different sections making the task
78:19 - clearer and easier to follow for the
78:22 - design it suggest just using a vibrant
78:24 - color scheme such as this value here and
78:27 - similar complimentary colors for the
78:29 - button States The Prompt also asks to
78:32 - make the code easy to understand even
78:34 - for non-coders and to add code comments
78:37 - in the CSS and JavaScript to help us
78:39 - understand and learn what it's doing so
78:41 - let's see what chat GPT will generate
78:43 - with this
78:45 - prompt and good it Returns the HTML CSS
78:48 - and JavaScript code for the app so first
78:51 - I'll copy and paste the HTML code code
78:53 - into my
78:54 - project then let's dress up the page
78:56 - with CSS I'll copy the CSS code and
78:59 - paste it into styles.css let's run the
79:03 - code and see what we've got so far good
79:06 - I like the direction so far and lastly
79:08 - we can't forget the most important
79:10 - ingredient JavaScript so I'll copy the
79:13 - JavaScript code and paste it into
79:17 - script.js so let's spend some time going
79:19 - over the JavaScript at the top we access
79:22 - all the relevant elements on the page
79:25 - that we want to interact with or display
79:27 - dynamically like the form input field
79:29 - and Button as well as the participant
79:32 - list and winner display container and it
79:35 - assigns them to variables now this line
79:37 - of code here declares a variable called
79:40 - participants and assigns it to an empty
79:43 - array a JavaScript array is a data
79:46 - structure that allows you to store
79:48 - multiple values in a single variable
79:50 - it's like having a collection of items
79:52 - in a list in this case it stores a list
79:54 - of the raffle participants and this code
79:57 - pays attention to when users submit the
79:59 - raffle form then all this functionality
80:02 - here gets executed on the page that's
80:05 - what this function keyword is for in
80:07 - JavaScript functions contain a block of
80:09 - code that performs a specific task or
80:12 - set of instructions in this case it's
80:14 - getting the entered name and assigning
80:16 - it to this name variable then it's
80:19 - adding or pushing the name into the
80:22 - participants array and below this line
80:25 - is displaying the name on the page
80:27 - inside the participants list now this
80:29 - syntax here that uses back tick places
80:32 - each name inside P tags to create a
80:36 - paragraph element and this dollar sign
80:38 - curly braces syntax dynamically inserts
80:41 - and displays a participant's name on the
80:43 - page it's called a template literal and
80:46 - the line below clears the name input
80:48 - field so all of that happens with just
80:51 - the form submission now just below is
80:54 - the functionality for the pages draw
80:56 - button the program listens for when the
80:59 - button is clicked then runs this block
81:02 - of code first it checks if there are
81:04 - names in the participants list or more
81:07 - than zero items in that array it runs
81:10 - this code to randomly select and display
81:13 - a raffle winner and emojis again using
81:15 - the special back TI and dollar sign
81:17 - curly braces syntax all right now let's
81:20 - try it out I'll enter some names like
81:24 - Gil then click the draw button and it
81:27 - displays the winner which is Bob
81:29 - congrats on your cake Bob refresh the
81:31 - page and everything clears so great with
81:34 - JavaScript our cake lottery app becomes
81:36 - a dynamic and interactive user
81:39 - experience now one thing I immediately
81:41 - noticed is the spacing problem between
81:43 - the input field and enter button so I'll
81:46 - fix that in the CSS I'll find the
81:48 - selector where we're styling the input
81:50 - element with the type text right here
81:53 - here and apply a bottom margin of let's
81:57 - say 16 pixels and there we go now while
82:01 - I'm here I also think that the label for
82:03 - the name input would look better if the
82:05 - text was bold so I'll update that here
82:08 - in the label rule with the font weight
82:11 - property and set it to the value bold
82:14 - and that looks much better to me all
82:16 - right next let's work on a JavaScript
82:18 - challenge I'll paste it here in
82:21 - script.js I want you to work on adding a
82:24 - reset button that clears the participant
82:27 - list and winner display the button
82:30 - should allow users to start a new round
82:32 - of the cake raffle and I've provided a
82:35 - hint saying that the number of items in
82:37 - the participants array or its length
82:39 - should be equal to zero then use this
82:42 - color value for the button background
82:43 - and this color for its hover State this
82:46 - is likely the toughest challenge you've
82:49 - worked on so far and if you have a look
82:50 - through the JavaScript you'll find some
82:52 - lines of code that might give you a hint
82:55 - of what you'll need to do for example
82:58 - these two lines here and as usual feel
83:01 - free to rely on chat GPT and ask it for
83:05 - suggestions so take it away you've got
83:07 - this and I'll catch up with you when
83:09 - you're done to go over it
83:13 - together all right hopefully you got
83:15 - through most of the challenge if you did
83:17 - amazing work now let's go over it
83:20 - together first I'll work on adding the
83:22 - reset button in the HTML to do that I
83:25 - can copy the existing draw button and
83:28 - paste it below then update this code so
83:30 - that the ID is reset dash button and
83:34 - that the text is reset and there's our
83:37 - reset button now it doesn't look like
83:39 - the other buttons yet and that's because
83:41 - we need to style it with CSS and I see
83:43 - that this CSS here is what's applying
83:46 - the styles to the submit and draw button
83:49 - it's selecting both at the same time so
83:52 - I'll also have this select the reset
83:54 - button by typing a comma and then the
83:57 - reset button ID and good now the reset
84:00 - button has the button Styles applied now
84:02 - we need to apply a different background
84:04 - color to the reset button so I'll create
84:06 - a separate CSS rule for that that
84:08 - targets the reset button ID and I'll use
84:12 - the background color property to apply
84:14 - the background color using this color
84:17 - value here which I'll just copy and
84:19 - paste into my CSS looking good and I
84:23 - also provided a color for the hover
84:25 - state so I'll copy that and in the CSS
84:28 - I'll style the reset buttons hover State
84:30 - similar to how it's styling the draw
84:32 - buttons hover state with reset dash
84:35 - button colon hover and then here I'll
84:39 - include background color and the color
84:41 - for the hover State let's try it out and
84:45 - now when you hover over the reset button
84:47 - you should see it change to a darker
84:49 - shade of blue and it does good all right
84:52 - let's move move on to the JavaScript
84:53 - next first I'll work on getting a
84:55 - reference to the reset button and
84:57 - assigning it to a variable I see
84:59 - something very similar being done here
85:01 - for the draw button so I'll just copy
85:03 - this line of code and update it so that
85:06 - the variable name is reset button and
85:09 - that it's getting the element with an ID
85:12 - of reset button and I mentioned looking
85:15 - through the JavaScript code and maybe
85:17 - finding some hints of what you'll need
85:19 - to do so I do see that this of code is
85:23 - what selects the random winner and
85:25 - displays the Winner's name on the page
85:27 - so I might be able to do something
85:29 - similar with the reset button so how
85:31 - about if I just copy this entire block
85:34 - of code or event listener paste it below
85:37 - and update this to reset button. Adent
85:41 - listener and when the reset button gets
85:43 - clicked I want to clear the participants
85:46 - list and the winner display area I don't
85:48 - need to check if there are participants
85:50 - and select a random winners so I can and
85:52 - delete this and I mentioned that this
85:54 - line of code might give you a hint it's
85:57 - what's setting the inner HTML of the
85:59 - winter display to the winner and emojis
86:02 - so how about if I copy this line of code
86:05 - and paste it inside the code for my
86:07 - reset button and instead of setting its
86:09 - inner HTML to a paragraph We want to
86:12 - clear it so instead I'll set it to an
86:14 - empty set of quotes and let's see what
86:17 - happens I'll type a name into the field
86:20 - select Tom as the winner then click the
86:22 - reset button and great the winter
86:24 - display area disappears from the page so
86:27 - now it looks like I need to clear the
86:28 - participants list looking through the
86:30 - code I do see the variable for
86:32 - participant list so I'll copy
86:34 - participant list. HTML and I'll follow
86:37 - the same pattern here set participants
86:39 - list. HTML to an empty set of quotes
86:43 - I'll add a couple names to the list
86:45 - select the winner congrats Tom now let's
86:48 - see what happens when we click reset
86:50 - awesome now both the winner and
86:52 - participant list are cleared now there
86:54 - is one more important thing that we need
86:55 - to do and if you did not think about or
86:57 - implement this part that's totally okay
87:00 - we need to ensure that our participants
87:02 - array is truly empty because notice that
87:05 - if you click draw it displays Gil as the
87:08 - winner click it again it displays
87:10 - treasure as the winner which is weird
87:12 - because Gil and treasure do not appear
87:14 - in the participants list well it turns
87:15 - out that they are still being stored in
87:18 - the participants array so we'll need to
87:20 - clear or empty the array and in the
87:23 - challenge steps I've provided a hint
87:25 - saying that the number of items in the
87:28 - participants array which is known as the
87:30 - array's length should be equal to zero
87:33 - and here in this if statement I'm seeing
87:35 - participants. length and length refers
87:38 - to the number of items or elements
87:41 - inside an array in this case the
87:43 - participants array so let's see what
87:45 - happens if we set the length to zero
87:48 - here in the event listener with
87:50 - participants. length equals
87:52 - 0 Let's test it out draw a winner
87:56 - congrats bear and I'll click reset that
87:59 - clears the page and clicking draw should
88:02 - not draw a new winner and it doesn't
88:05 - good which means that worked again this
88:07 - was a tough challenge so if you came up
88:09 - with a solution similar to mine well
88:12 - done next I'll quickly walk you through
88:15 - some visual enhancements we can apply to
88:17 - the page the first one is to adjust the
88:19 - layout of our buttons I think the page
88:21 - would look better if if the draw and
88:23 - reset buttons were on the same line like
88:26 - this there's different ways I might do
88:28 - that so what I'll do in the HTML is
88:30 - place them inside a div with the class
88:33 - name button group like
88:35 - so then I'll use a CSS layout technique
88:38 - you saw in an earlier lesson called
88:40 - flexbox to place both buttons on the
88:43 - same Row first I'll select the class
88:45 - button group and here I'll turn on the
88:48 - special Flex boox layout with display
88:51 - Flex and you can see what that did now I
88:53 - want to apply a gap or a space between
88:56 - the buttons and for that I'll use a CSS
88:59 - property intuitively named Gap and set
89:02 - it to 10 pixels and that's looking
89:04 - really good to me finally let's liveen
89:07 - up the page with a cake icon similar to
89:09 - Google web fonts Google offers a
89:12 - collection of icons called material
89:14 - icons that we can easily use in our
89:16 - projects so I'll ask chat GPT to give me
89:19 - the code for that using this prompt here
89:22 - please use Google material icons to add
89:24 - a cake icon inside the H1 I'll paste
89:27 - that into chat
89:29 - GPT and it returns two HTML Snippets for
89:32 - adding and displaying the icon first it
89:34 - looks like I need to add the Google
89:35 - material icon stylesheet to the HTML
89:39 - with this line of code so I'll copy that
89:41 - and paste it in the head section of my
89:45 - HTML and then I need to modify the H1 to
89:48 - include this I tag with the class
89:51 - material I icon so I'll copy just that
89:53 - line of code and replace this H1 in the
89:57 - header with the new code all right cool
90:00 - there's the cake icon next to the title
90:02 - and there we have it everyone a fully
90:05 - functional cake raffle app before moving
90:08 - on to the next project I'd like you to
90:10 - experiment with the HTML CSS and
90:13 - JavaScript and tweak the functionality
90:15 - to make this app truly yours for example
90:18 - change the theme to a movie ticket
90:20 - raffle a pizza raffle anything you'd
90:23 - like and I also want you to ask chat GPT
90:25 - about some of the things we've covered
90:27 - or anything that you still might be
90:28 - confused about as you've experienced
90:31 - coding with AI gives you Endless
90:33 - Possibilities it's like having your cake
90:35 - and eating it too you get to create
90:37 - amazing things and have a sweet time
90:39 - doing it so go ahead and Delight your
90:41 - friends and co-workers with a raffle
90:46 - app hi there you've taken some big
90:49 - strides in this course exploring the
90:51 - fasc F inting world of coding and
90:53 - building cool apps while leveraging
90:55 - generative AI tools like chat gbt you've
90:57 - had a taste of what it's like to create
90:59 - something from just an idea then watch
91:01 - that idea take shape even without formal
91:04 - coding skills now at this point you
91:06 - might feel like you've been thrown into
91:08 - the deep end and maybe worried that you
91:09 - don't understand everything and that
91:11 - you're dealing with code that seems more
91:13 - complex than you expected well rest
91:15 - assured that it is 100% normal to feel
91:19 - this way in fact for this course
91:21 - specifically this is intentional You
91:23 - Were Meant to punch above your weight in
91:25 - this course and work with code or take
91:27 - on challenges you don't fully understand
91:30 - or seem beyond your current skill level
91:32 - the goal all along has been to get you
91:34 - to Dive Right into building projects and
91:36 - solving problems without going the long
91:38 - way of learning most things from scratch
91:40 - beforehand or focusing on the code
91:42 - itself now if you feel like you need to
91:44 - get a firmer grasp or dive deeper into
91:47 - the technical details of coding and a
91:49 - lot of what you've been working with so
91:50 - far then script rmba front and developer
91:52 - career path is the perfect place to
91:55 - learn more and take that next step on
91:57 - your coding and building Journey we
91:59 - designed this curriculum to deepen your
92:01 - knowledge of HTML CSS JavaScript react
92:05 - and more with 13 modules filled with
92:08 - interactive coding challenges and over
92:10 - 15 real world projects that you will
92:13 - build yourself from scratch with the
92:15 - opportunity to get code reviews from the
92:17 - scrimba community if you'd like to check
92:19 - it out or join at any time visit the
92:21 - frontend developer career path on the
92:23 - scrimba site or click on this image to
92:25 - head over to it now I'll see you back
92:27 - soon to keep on
92:31 - building we are going to navigate an
92:33 - essential skill for any Builder and
92:36 - coder debugging and getting feedback to
92:38 - improve your code and we'll use chat gbt
92:41 - to help guide us through this we're
92:43 - going to use this real rewards project
92:46 - which is a simple page that gives you a
92:48 - 50% discount on movie tickets when you
92:50 - enter the promo code have to structure
92:53 - the page we have an H1 element and a
92:57 - paragraph element to display the final
92:59 - price then below a div with a ID app
93:01 - containing a form element where users
93:04 - can enter and submit their promo code
93:07 - over in the JavaScript we are first
93:09 - getting elements from the HTML like the
93:12 - promo code input field the paragraph
93:14 - displaying the final ticket price and
93:16 - the promo code form and assigning them
93:18 - to variables The Base ticket price is
93:20 - set to
93:22 - the script then displays this price in
93:24 - the final price element when the page
93:26 - loads and right below the function
93:29 - applyed discount calculates the final
93:31 - price based on the entered promo code if
93:34 - the promo code the user enters is equal
93:36 - to half then the discount rate is set to
93:39 - 0.5 or 50% otherwise it remains zero and
93:43 - no discount gets applied the function
93:46 - then calculates the final price by
93:47 - subtracting the discount from the base
93:50 - price and returns a final price and this
93:53 - code here runs when the user submits a
93:56 - promo code so when the form is submitted
93:59 - this code retrieves the entered promo
94:02 - code and calculates the final price by
94:05 - running or calling this apply discount
94:08 - function which is this code here and
94:11 - then it checks if the final price is
94:13 - less than the base price meaning a valid
94:16 - discount was applied then the script
94:18 - updates and displays the new price here
94:21 - otherwise if no valid discount was
94:24 - applied the script sets the placeholder
94:26 - text in the input field to display the
94:28 - message in valid promo code and this
94:31 - line here clears the input field I
94:33 - totally understand if there's code here
94:35 - that you don't quite get or that is
94:37 - still confusing to you I don't want you
94:39 - to feel like you need to understand
94:41 - everything in this Javascript file the
94:43 - purpose of this lesson is to help you
94:45 - get feedback improve and understand your
94:47 - code a little bit better with the help
94:49 - of chat gbt now this project is far from
94:53 - perfect or even production ready in fact
94:56 - when you first run it notice how we're
94:58 - getting a JavaScript error in the
95:00 - console so let's look at some ways we
95:02 - can debug and improve the JavaScript
95:04 - with the help of chubbt now debugging
95:07 - might sound a bit intimidating at first
95:09 - but it's just the process of identifying
95:11 - and removing errors or bugs from your
95:14 - code with chat gbt you can more easily
95:16 - troubleshoot these errors it can point
95:18 - out syntax and logic errors or even
95:21 - suggest better practices to prevent bugs
95:23 - in the future so here's an example of
95:26 - how you might prompt chat TBT for
95:27 - debugging you can provide a description
95:29 - of the issue paste your code into the
95:31 - chat and it will help identify possible
95:34 - problems so for example here I'm saying
95:36 - that I'm having an issue running my
95:38 - JavaScript code and then I'm providing
95:40 - the airor message I'm getting which is
95:42 - the message that appears in the console
95:44 - and then I say please help me understand
95:46 - what's wrong so I'll submit this prompt
95:48 - to chat GPT and here I see that this
95:51 - typically occurs when you're attempting
95:52 - to manipulate an element that doesn't
95:54 - exist or hasn't been properly accessed
95:57 - and then I see more instructions here
95:59 - for example ensure that your JavaScript
96:01 - code is running after the HTML document
96:03 - has finished loading ah so here I see
96:05 - that you can achieve this by placing
96:06 - your JavaScript code at the bottom of
96:08 - the HTML file just before the closing
96:10 - body tag looking at the HTML I see that
96:13 - the script tag is in the head tag so
96:15 - that is indeed what's causing the
96:17 - problem so I'll move my script tag just
96:20 - above the closing body tag like so and
96:23 - when I run the code I see that the air
96:25 - no longer appears in the console great
96:28 - testing the form now I see that I'm not
96:31 - able to submit a promo code notice how
96:33 - clicking the apply discount button
96:35 - immediately refreshes the page
96:37 - preventing a discount to be applied as
96:39 - expected so I'll turn to chat GPT with
96:42 - this prompt which says I'm having issues
96:44 - with my JavaScript code submitting the
96:47 - promo form refreshes the page and does
96:49 - not run the following code as a expected
96:52 - in this case I'm placing the code to
96:53 - evaluate within triple back ticks to
96:55 - visually separate the code from the
96:57 - surrounding text and indicate that it
96:59 - should be treated as code this can also
97:02 - make it easier for human readers to
97:04 - identify the code improving the overall
97:06 - readability of the prompt and for the AI
97:09 - itself it might help separate our
97:11 - instructions from the context you might
97:14 - also see this done with hash symbols or
97:16 - quotes for example now in many cases you
97:19 - don't even need to place your code with
97:21 - than quotes hash symbols or back ticks
97:23 - chat gbt is likely to figure it out so
97:26 - I'll copy this prompt and paste it into
97:29 - chat GPT and it looks like the
97:31 - JavaScript is missing a method to
97:34 - prevent the default form submission
97:36 - behavior and that's this method here
97:38 - event.prevent default so let me add that
97:41 - line of code here in my promo form event
97:45 - listener right at the top like this this
97:48 - ensures that the default form submission
97:50 - behavior is is cancelled so now when I
97:53 - enter a promo code and submit the form
97:56 - the JavaScript code runs without
97:57 - refreshing the page allowing the promo
97:59 - code to be applied and display the final
98:01 - price but testing it again it looks like
98:04 - the discount gets applied to the base
98:06 - price no matter what text or promo code
98:10 - you enter so I'm going to challenge you
98:12 - to debug and fix this with the help of
98:14 - chat GPT the challenge is to use chat
98:18 - GPT to debug the apply discount function
98:21 - so I want you to head over to chat GPT
98:23 - and provide it with this prompt and
98:26 - include the code to debug within the
98:28 - hash symbols then evaluate chat gpt's
98:30 - response and fix the code using what it
98:32 - suggests so pause me now and give this a
98:39 - go okay hopefully you got it to work
98:41 - I'll give it a go by including my apply
98:44 - discount function here within the hash
98:46 - symbols then copying this prompt and
98:49 - feeding it to chbt
98:51 - and here I see that the issue is in the
98:54 - conditional statement it looks like
98:56 - instead of a comparison operator which
98:58 - is this triple equal sign I'm using the
99:01 - assignment operator or only an equal
99:03 - sign to compare the user code with the
99:06 - string half and this is what's leading
99:08 - to the incorrect behavior and then to
99:10 - fix the problem I need to change the
99:12 - assignment operator to the equality
99:15 - operator and I see an example of that
99:17 - here in the updated code all right this
99:19 - doesn't seem too bad so over in the
99:21 - JavaScript I'll update this line here to
99:24 - if user code triple equal sign half
99:28 - using the triple equals for comparison
99:30 - ensures that the value of user code is
99:33 - compared to the string half and if they
99:36 - are strictly equal then the discount
99:39 - rate will be set to 0.5 or 50% otherwise
99:42 - it remains zero or no discount gets
99:45 - applied I'll test it out I see that the
99:47 - Base ticket price is $50 now I'll enter
99:50 - the promo code have and all caps click
99:53 - apply discount and great the final
99:55 - ticket price is indeed 50% off or $25 so
99:59 - now the code seems to be working as
100:01 - expected all right once your code runs
100:04 - without errors you might want to make it
100:06 - more efficient or readable and this is
100:09 - where chat GPT truly shines with its
100:12 - ability to generate code you can ask
100:14 - chat GPT for more efficient modern and
100:17 - elegant Solutions or different
100:19 - approaches to a problem a prompt you can
100:21 - use for code Improvement might look like
100:24 - this it says that this JavaScript code
100:27 - works as expected but I think it could
100:29 - be made more efficient and modern please
100:31 - provide a more streamlined and upto-date
100:34 - version of this code then I'll paste all
100:37 - of my JavaScript code here and chat gbt
100:39 - will evaluate it and give me some
100:43 - suggestions all right so here I see that
100:45 - it suggests replacing the VAR keyword
100:48 - with const which can help avoid
100:50 - accidental reassignments and bugs in the
100:52 - code and it simplified the applied
100:54 - discount function using a conditional
100:57 - turn area operator to assign the
100:59 - discount rate based on the user code
101:01 - that's this code here which is another
101:03 - more concise way to write an IFL
101:06 - statement and I see that it also
101:08 - suggested using Arrow functions which is
101:10 - another way to write functions using a
101:12 - shorter syntax so the JavaScript does
101:15 - seem more efficient with modern features
101:18 - that can help prevent bugs in the future
101:21 - and I could use this code and push my
101:23 - project live but I think I'll ask for
101:25 - more feedback on my original code as
101:27 - with any learning and building process
101:29 - feedback is key and AIS like chat GPT
101:33 - can provide that too with its immense
101:35 - knowledge of coding conventions and
101:37 - standards chat gbt can give you valuable
101:40 - feedback on your code structure syntax
101:42 - and even style so this time we're going
101:44 - to take advantage of the role playing
101:46 - prompting approach to request feedback
101:49 - I'm telling chat chbt you are a senior
101:52 - developer reviewing my JavaScript code
101:54 - before I ship it to production please
101:56 - provide feedback on how I can improve
101:58 - this code make it more maintainable and
102:00 - handle cases where a user enters the
102:03 - promo code in lowercase because notice
102:05 - that if you enter the promo code half in
102:07 - all lowercase the discount doesn't get
102:10 - applied but I think that users should
102:11 - still get the discount even if they type
102:13 - the promo code in all lowercase so my
102:16 - senior developer here is going to help
102:18 - me out with that below I'll paste all my
102:20 - JavaScript
102:22 - code then submit this prompt to chat GPT
102:25 - and here I see a lot of valuable
102:27 - feedback and suggestions for example it
102:30 - suggests using descriptive variable
102:31 - names to convey their purpose and
102:34 - meaning better and to convert the base
102:36 - price value to a numeric value versus a
102:39 - string and that's going to help prevent
102:41 - calculation errors then to handle cases
102:44 - where a user enters the promo code in
102:46 - all lowercase it says that I can convert
102:48 - the user code to uppercase and compare
102:51 - it to an all uppercase version of the
102:52 - promo code this two uppercase method
102:55 - converts text to all uppercase letters
102:58 - this looks good to me so I'll copy this
103:00 - new JavaScript code snippet and replace
103:03 - all the code in my script.js file with
103:06 - this new JavaScript overall I think that
103:09 - this feedback makes the code more
103:11 - functional organized and maintainable
103:13 - for example I even see that it suggested
103:15 - moving the logic for applying the
103:17 - discount and determining the final price
103:20 - into two separate functions and then
103:22 - only referencing or running the handle
103:25 - form submission function here when the
103:27 - form gets submitted which makes the code
103:29 - easier to understand and maintain I'll
103:32 - run all this latest code and test it out
103:34 - the ticket price is $50 I'll type half
103:37 - in all lowercase and good the discount
103:39 - gets applied so now the final price is
103:42 - $25 and if I enter an invalid code such
103:45 - as test I get the message invalid promo
103:48 - code awesome now don't worry if you're
103:51 - still confused about or don't understand
103:53 - a lot of this code like always spend
103:55 - some time asking chat upbt to give you
103:58 - more details about anything you like to
104:00 - learn more about remember coding isn't
104:02 - always about making things work it's an
104:04 - iterative process so it's perfectly okay
104:06 - and normal to encounter bugs and
104:09 - problems in your code it's all part of
104:11 - the journey and with tools like chubbt
104:14 - by your side you'll be well equipped to
104:16 - tackle these challenges
104:19 - headon
104:21 - all right let's get ready to turn up the
104:23 - volume on our coding skills and build a
104:25 - drum kit web app with the guidance of
104:27 - chat upbt as usual HTML will form the
104:31 - structure of our drum kit CSS will give
104:33 - it a Sleek look and JavaScript will add
104:36 - exciting interactive elements and play
104:38 - real drum sounds so grab your virtual
104:40 - drumsticks and let's hit it the project
104:43 - contains the usual HTML CSS and
104:46 - JavaScript files and this time I've
104:47 - included a folder named sounds that
104:50 - contains several audio files in the wave
104:52 - format we are going to take this step by
104:55 - step so first we'll ask the AI to
104:58 - Kickstart this project let's see how we
105:00 - can code a button that when clicked
105:02 - triggers a kick drum sound I'll use this
105:05 - instructional prompt that provides a
105:07 - clear task for the AI to build a simple
105:10 - drumkit app using HTML CSS and
105:13 - JavaScript and I want to start with only
105:15 - one button that when clicked should play
105:17 - a drum sound and the button should
105:19 - appear centered on screen below I've
105:22 - provided some context about the sound
105:23 - file like its name and location and I've
105:26 - learned that HTML has a handy audio tag
105:29 - which is used to embed and load sound
105:31 - files in your page so I'm asking it to
105:33 - use the audio element for the sound file
105:35 - and as usual I want code comments to
105:37 - help me understand each part of the code
105:40 - so I'll paste this prompt into chat gbt
105:43 - and let's check out its response okay
105:45 - first it suggests the project directory
105:48 - structure which we've already set up
105:49 - just like this
105:51 - and here's the HTML which I'll copy and
105:53 - paste into my project I see that it has
105:56 - a container div with a kick button
105:58 - inside it and below is the audio element
106:01 - to preload the kick. wve sound file so
106:05 - let's add the CSS next which I see is
106:07 - using that special flexbox layout
106:09 - feature you've seen before to Center the
106:11 - button on the page so I'll add this CSS
106:14 - to my project and finally copy the
106:17 - JavaScript and paste it into script.js
106:21 - the JavaScript gets the kick button
106:23 - element and assigns it to the const
106:25 - variable kick button then it gets the
106:27 - kick sounds audio element and stores it
106:30 - in the variable kick sound then below
106:32 - the code pays close attention to when
106:34 - the kick button gets clicked so when the
106:36 - user clicks it it runs this code to play
106:39 - the kick sound in JavaScript this play
106:41 - method is used to start playing media
106:44 - like audio and kick sound. current time
106:47 - equals 0 makes the audio start playing
106:49 - from the beginning all right so let's
106:51 - get to the moment you've been waiting
106:52 - for and try it out I'll click on the
106:54 - kick
106:56 - button and great the kick sound plays
106:59 - before we get to adding more drum sounds
107:01 - I want you to give your drum app a title
107:04 - so here's your challenge come up with a
107:06 - cool name for your drumkit app and
107:09 - display it in a heading and then Center
107:11 - the heading on the page with CSS so
107:14 - pause me now and give that a
107:18 - go all right here we go I'll add an H1
107:21 - element here to create my pages main
107:24 - heading and I'll give my drum kit app a
107:26 - cool name like Groove kit there we go
107:29 - now to center it on the page I'll select
107:32 - the H1 here in the CSS and set its
107:35 - textalign property to Center and while
107:38 - I'm here I'll adjust the CSS for the
107:39 - container so that there isn't as much of
107:42 - a gap between the heading and the button
107:44 - I'll get rid of this align items and
107:47 - height properties since we don't really
107:48 - need them and then how about giving the
107:50 - container a top margin of 30 pixels that
107:54 - looks much better all right let's move
107:57 - on to your next challenge we are going
107:59 - to expand our drum kit your challenge is
108:03 - to create a new button for the ride drum
108:06 - sound you'll need to write the button
108:08 - tag the audio tag and the JavaScript
108:11 - code to make it play when clicked and be
108:13 - sure to use the existing HTML and
108:15 - JavaScript code as a reference so pause
108:17 - me now and work on this challenge
108:22 - all right if you were able to add and
108:23 - play The Ride drum sound great work now
108:26 - let's work on it together first to add
108:28 - the right button and play The Ride sound
108:31 - I can follow the same pattern use for
108:32 - the kick button and sound I'll copy this
108:35 - kick button and paste a new button
108:38 - element below then update the ID to ride
108:42 - and the button text to ride and then
108:44 - I'll copy the audio element for the kick
108:47 - sound and update this ID to ride Das
108:51 - sound and I want the source to point to
108:53 - the file ride. wve all right that should
108:57 - be it for the HTML now let's move on to
108:59 - the JavaScript first I'll retrieve the
109:02 - ride button element and assign it to a
109:04 - variable so I'll copy the line for the
109:06 - kick button and update the variable name
109:09 - here to ride button which will select
109:11 - the element with the ID
109:14 - ride and I'll get the ride sound element
109:18 - in the same way I'll update this
109:21 - variable name to ride sound and get the
109:24 - element with the ID r- sound finally to
109:27 - play the right sound when the right
109:29 - button is clicked I'll copy this code
109:32 - block here paste it below and then
109:35 - update this code block so that it pays
109:37 - attention to the ride button and when
109:40 - the ride button is clicked I want to
109:42 - play the ride sound so I'll change this
109:45 - here to rid sound. current time equals 0
109:48 - and then to actually play play it I'll
109:50 - update this to rid sound. playay all
109:53 - right let's give it a
109:59 - try all right cool now we're able to
110:01 - play both the kick and ride sounds we
110:03 - are making good progress so now we'll
110:06 - ask the AI to make our drum kit more
110:08 - interactive I wanted to play drum sounds
110:11 - using my keyboard and not just with
110:13 - button clicks for example pressing the a
110:16 - key on my keyboard plays the kick sound
110:18 - and the S key the right sound so next
110:21 - I'll prompt the AI to extend the drum
110:24 - kit app by triggering the kick sound
110:26 - when the a keyboard key is pressed so
110:29 - let's start with that and see what chat
110:31 - GPT comes up with all right so it gives
110:33 - me the modified JavaScript and I'll only
110:36 - copy this new code block at the bottom
110:39 - and add it to my Javascript file so now
110:43 - the JavaScript program is paying
110:45 - attention to or listening for key
110:47 - presses on the page this code is saying
110:49 - when a key is pressed down anywhere on
110:51 - the page do the following actions in
110:53 - this case it uses an if statement to
110:55 - check which key was pressed so if the
110:57 - Pressed key is a then it plays the kick
111:01 - sound so now I can press my a key to
111:03 - play the kick
111:06 - sound next how about you work on
111:09 - updating this JavaScript to play The
111:11 - Ride sound file whenever the S key is
111:14 - pressed so pause me now and go for
111:18 - it
111:20 - all right here we go to play the right
111:22 - sound when the S key is pressed I'll
111:25 - copy this if statement paste a new one
111:27 - below and I'll update this to else if so
111:31 - if the Pressed key is s it's going to
111:34 - play the ride sound so I'll update this
111:38 - to rid sound. current time equals 0 and
111:41 - rid sound. playay I'll test it
111:47 - out and good that worked let's keep the
111:50 - Beats
111:51 - coming so your challenge is to complete
111:54 - the drum kit app by adding the button
111:57 - and audio elements for the snare Tom and
111:59 - high hat sounds you'll also need to
112:01 - update the JavaScript so that clicking
112:03 - each button will play the corresponding
112:05 - sound and then play each sound when
112:07 - pressing a specific key and the keys to
112:09 - press are up to you so take your time
112:11 - with this and I'll meet you back up when
112:12 - you're done to go over
112:17 - it okay hopefully you got all your drum
112:19 - sounds to play and even jammed out for a
112:21 - bit now let's work through these I don't
112:23 - want you to have to watch me type every
112:25 - button audio tag and JavaScript code so
112:28 - I'll paste all the remaining button and
112:29 - audio elements here in the HTML we have
112:33 - our button elements and now the audio
112:35 - tags then in the JavaScript I'll paste
112:37 - in the variables for the buttons and
112:40 - then the three audio elements next I'll
112:43 - paste the event listeners for the three
112:45 - buttons right
112:47 - here and finally the else if statements
112:50 - for each key press and notice how the
112:53 - buttons overflow their containers and
112:55 - we're not able to view them all at once
112:58 - on the page I can fix this with CSS by
113:01 - wrapping the buttons onto new lines
113:03 - whenever there's not enough space for
113:05 - the buttons to all fit on one or even
113:07 - two lines here in the container rule so
113:09 - I'll wrap them with the flex wrap
113:12 - property which is also a special flexbox
113:14 - property then set the value to wrap and
113:17 - I also want to space them out by adding
113:19 - a gap between each so I'll use the Gap
113:22 - property and set a 20 pixel Gap all
113:25 - right much better now the buttons are
113:26 - all nicely spaced out and we can see
113:28 - them all at once on the screen they even
113:30 - stack and display as a column on narrow
113:32 - screens now I'll test my latest changes
113:35 - with a quick jam
113:41 - session hopefully you enjoyed that it
113:44 - seems like everything is working great
113:46 - now while building this project we
113:48 - duplicated a lot of code for example the
113:51 - JavaScript that plays a specific drum
113:53 - sound when its corresponding button is
113:56 - clicked and the code for playing sounds
113:58 - when a key is pressed and we're not
114:00 - worried too much about duplicate code
114:01 - right now while learning to build
114:03 - projects but repetitive code like this
114:05 - can often be replaced with more
114:07 - efficient and maintainable code so the
114:10 - last step you might do is ask chat GPT
114:12 - for help updating your code so that it's
114:15 - more concise readable and maintainable
114:17 - with a prompt like this you can say
114:19 - please update this JavaScript code so
114:21 - that it's more concise and maintainable
114:23 - and then include your JavaScript code
114:26 - here and this will likely generate new
114:28 - code that might seem a bit too complex
114:30 - and difficult to understand right now so
114:33 - let's not worry about that and stick
114:34 - with our original code all right so
114:36 - you've just built a drumkit app with
114:39 - interactive elements connected them to
114:41 - sounds and made the interface respond to
114:43 - both mouse and keyboard inputs I think
114:45 - now is a great time to show this off to
114:48 - friends and colleagues you can also
114:49 - customize the CSS and even add different
114:52 - sounds to your app such as the Boom Clap
114:55 - and open hat files included in the
114:56 - sounds folder and one last thing why
114:59 - don't programmers like nature because it
115:01 - has too many
115:04 - bugs and with that I'll show myself out
115:06 - our work here is done let's move
115:10 - on we've been creating some cool
115:13 - projects using HTML CSS and JavaScript
115:16 - with chat gbt so now it's time to
115:18 - Showcase these to the world world I'm
115:20 - going to introduce you to a remarkably
115:22 - simple way to deploy and share your
115:24 - projects using a service called netlify
115:26 - so let's Jump Right In First up let me
115:29 - show you how to download the code from a
115:30 - scrim onto your computer first click on
115:33 - the gear icon in the bottom right corner
115:35 - of your scrim then click download as zip
115:38 - and that's going to download a zip file
115:40 - to your computer unzip the file and
115:43 - you'll see your project files inside a
115:44 - folder in the folder you might see some
115:46 - new unfamiliar files like readme MD
115:50 - package.json and another named V.C
115:53 - config.js go ahead and delete those
115:55 - files because you're not going to need
115:57 - them I also suggest renaming your
115:59 - project folder to help you keep track of
116:00 - it and now you're ready to deploy your
116:03 - project with netlify netlify is simple
116:05 - to use even for non-coders and perfect
116:08 - for our needs it offers free hosting for
116:10 - personal projects which makes it a great
116:12 - choice and we'll focus on netfi drag and
116:15 - drop feature so head over to netlify.com
116:17 - or click on this image to visit the site
116:20 - and create a free account you can simply
116:22 - use your email to sign up or if you
116:24 - happen to have an account with a service
116:26 - or platform like GitHub or gitlab you
116:29 - can use it to sign up with your account
116:31 - all set up you can deploy your first
116:33 - site in minutes and you'll be amazed at
116:35 - how simple this is on your netlify
116:37 - dashboard you'll see a section titled
116:40 - sites then under the add new site
116:42 - dropdown select deploy manually and
116:45 - here's where the magic of dragon drop
116:47 - comes into play you take your project
116:49 - folder then drag and drop it right into
116:52 - this area where it says drag and drop
116:54 - your site output folder here and that's
116:57 - it no complex configurations no code
117:00 - just drag and drop netlify will do its
117:02 - thing and your site will be live on the
117:04 - web within moments you'll see that
117:06 - netlify provides you with a unique URL
117:08 - where you or anyone can access your site
117:11 - click on it and you'll see your project
117:12 - live on the web and from here sharing
117:14 - your project is as easy as sharing this
117:17 - URL that netlify provides so now what
117:19 - happens when you want to make changes to
117:21 - your project after it's been deployed
117:23 - well netfi makes this easy too after
117:25 - making changes to your project you only
117:28 - need to drag and drop the updated
117:29 - project folder onto the netlify
117:31 - dashboard here under deploys and netlify
117:34 - will automatically update your site with
117:36 - the new changes the URL for your project
117:38 - stays the same so there's no need to
117:40 - reshare a new link so just remember that
117:42 - every time you make a change in your
117:44 - local project files you'll need to
117:46 - re-upload the entire project folder to
117:48 - netlify to ensure that your live site
117:51 - stays in sync with a project on your
117:52 - computer and there you have it deploying
117:55 - and sharing your projects is pretty much
117:57 - a breeze with netlify so don't hesitate
117:59 - to get your work out there in fact how
118:01 - about you share a project you built in
118:03 - this course with peers by posting the
118:05 - project link on the today I did Discord
118:08 - Channel clicking on this image will take
118:10 - you right to that channel remember
118:12 - building is only half the fun sharing
118:14 - your Creations is where the magic truly
118:18 - happens
118:20 - and just like that we've reached the end
118:21 - of this section where we started to
118:24 - bridge the gap between learning to code
118:26 - and building tangible projects with HTML
118:29 - CSS and JavaScript all while unlocking
118:32 - the potential of AI so nice work we
118:35 - kicked it off with the basics and some
118:37 - simple elements but before we knew it we
118:39 - were building functional interactive
118:41 - projects while learning how to frame
118:43 - effective prompts and debug and refine
118:45 - our code with the help of AI so with the
118:47 - skills and AI know how you've now got
118:49 - under your belt you're well equipped to
118:52 - tackle bigger more complex projects
118:54 - you've come a long way and the exciting
118:56 - part is that this is still just the
118:58 - beginning this course is a living
119:00 - iterative project much like the evolving
119:03 - field of AI itself I'll be adding more
119:05 - sections to the course featuring new
119:07 - more complex projects that will allow
119:09 - you to stretch your newly acquired
119:11 - skills even further so I'd really
119:13 - appreciate sharing your thoughts
119:15 - feedback and suggestions about this
119:17 - course and any ideas for projects you'd
119:20 - like to build in the future sections of
119:22 - this course clicking on this image right
119:23 - here will take you directly to a quick
119:25 - feedback form in the meantime I hope you
119:27 - continue to explore and build with AI so
119:30 - I'll see you back soon and we look
119:31 - forward to checking out your projects
119:33 - happy
119:36 - building hello again brilliant Builders
119:39 - we've spent some time together building
119:41 - wonderful projects and dipping our toes
119:43 - into the world of HTML CSS and
119:45 - JavaScript all with the help of AI but
119:47 - we're just getting started in this
119:49 - section we'll be transforming Next Level
119:52 - project ideas into reality all while
119:54 - keeping the building and learning
119:55 - process fun and interactive remember
119:58 - that the goal is to help you build
119:59 - projects with the magic of AI while not
120:01 - getting lost in the weeds of
120:02 - technicalities so let's take a peek at
120:04 - what's in store for you first you'll
120:06 - build your own version of the classic
120:08 - whack-a-mole game it's called face bomp
120:10 - and it will surely put a smile on
120:11 - everyone's face then you'll build an
120:13 - interactive project slideshow perfect
120:15 - for a personal portfolio website
120:18 - following that we'll put together a
120:19 - personal homepage where you'll showcase
120:21 - all your fantastic AI assisted projects
120:24 - and tell the world a little about
120:26 - yourself and your skills and that's just
120:28 - the beginning we are also diving into
120:30 - building Chrome extensions you'll create
120:32 - a shopping wishlist extension called
120:34 - Snap stash you'll also design and build
120:37 - a Smart Home Mobile interface and even
120:39 - learn how to transform it into a mobile
120:41 - friendly app that users can launch from
120:43 - their devices home screen and to make
120:45 - storing and sharing your projects easier
120:47 - I'll guide you through adding your
120:48 - project s to a platform called GitHub
120:51 - finally to wrap up this section I'll
120:53 - teach you how to use GitHub and netlify
120:55 - together to automate how you deploy your
120:57 - project updates like the previous
120:59 - section of this course you may at times
121:01 - feel like you're in unfamiliar territory
121:03 - and worry that you're not understanding
121:05 - everything that's going on in the code
121:07 - but rest assured that this is
121:08 - intentional as I've mentioned before
121:11 - this course encourages you to stretch
121:13 - beyond your comfort zone diving into
121:15 - code or challenges that might seem
121:17 - Advanced for your current skill set we
121:18 - want you to Dive Right into building
121:20 - cool stuff without going the long way of
121:21 - learning everything from scratch with AI
121:24 - at your side you can quickly get off the
121:26 - ground with plain conversational English
121:28 - and then gradually become more technical
121:30 - as you put together simple apps so let's
121:32 - launch right into this section to
121:34 - continue exploring the power of AI and
121:36 - keep on building before you do take a
121:38 - moment to let your scribo colleagues
121:40 - know that you're starting this section
121:41 - in the today I will Discord Channel
121:43 - click on this image to jump right into
121:45 - the
121:47 - channel every ever heard of or played
121:50 - the game whack-a-mole well we're about
121:51 - to build a version of the game with a
121:53 - personal spin calling it face bump we'll
121:56 - kick off this section by recreating this
121:58 - classic tactile game into a digital
122:00 - experience using HTML CSS and JavaScript
122:04 - so the idea is pretty straightforward
122:06 - instead of moles we're using photos
122:09 - maybe even one of you or your friends
122:11 - and the challenge is to catch and bump
122:14 - the photo every time it appears just
122:16 - like in the classic game the game will
122:18 - even include a timer a score display and
122:21 - images that pop in and out at random and
122:23 - to speed up the process we'll get some
122:25 - help from chat GPT let's kick things off
122:28 - with a prompt here to help create the
122:30 - structure of the game in the prompt I
122:32 - provide a brief description of the game
122:35 - and the type of code I'll need for it I
122:38 - initially want to display the game's
122:39 - title a start button a score display and
122:42 - a timer and the game will display a
122:44 - final message to the player when it ends
122:47 - so I'm requesting a placeholder element
122:49 - for the message and finally keeping with
122:51 - the wack-a-mole style I'd like a game
122:53 - board with six holes where the images
122:55 - will pop in and out of I even provided
122:58 - the image file name which is
123:00 - photo.png all right now I'll copy and
123:02 - paste this prompt into chat gbt and
123:05 - let's see what we get back and here's
123:08 - the HTML for our game so I'll copy the
123:11 - code and paste it into
123:13 - index.html and good it looks like it has
123:15 - all the elements I requested the title
123:18 - start button a score display here I see
123:21 - a timer the message div and the game
123:24 - board with the image slots or holes and
123:27 - all six images point to
123:29 - photo.png which is this image here great
123:33 - all the images are displaying correctly
123:35 - now let's add some style to the
123:38 - game I'll use this next prompt which
123:41 - asks chbt to style the game using a
123:44 - bright blue theme with background
123:47 - gradients and complimentary Three Shades
123:49 - for the game controls and holes and I
123:51 - want the holes to be circular and the
123:54 - photos to have a popping in andout
123:55 - effect I'd also like to place the holes
123:57 - on a grid and Center each item inside
124:00 - its hole all right fingers crossed let's
124:03 - feed this prompt to chat gbt and see if
124:05 - it can work some magic for us okay I'll
124:08 - copy the CSS and paste it into
124:10 - styles.css and I can see that this is
124:14 - already starting to look good so let's
124:16 - go over the CSS here we have some styles
124:19 - that you've likely seen before for the
124:22 - body H1 the button and the score timer
124:25 - and game board elements as well as the
124:27 - holes where the images will pop in and
124:29 - out of now one thing that caught my eye
124:32 - is that it's using CSS grid to lay out
124:36 - the holes in the game board grid is a
124:39 - super powerful CSS layout system for
124:41 - placing items in rows and columns and I
124:44 - see that it's creating three columns
124:46 - here each 150 pixels wide using this
124:50 - repeat function and it's adding a 20
124:52 - pixel gap between each hole to space
124:55 - them out all right so chat gbt has given
124:58 - us a visually pleasing design for the
125:00 - most part I see the gradient background
125:04 - and a neat grid layout for our image
125:06 - slots so now let's spend some time
125:08 - customizing the design of the game so
125:11 - first up let's liveen up the Page by
125:14 - adding a winking face emoji to the title
125:17 - here in end
125:19 - index.html just like that there we go
125:23 - and I also want to make the button
125:24 - Corners rounded which I can do in
125:27 - styles.css here in the button rule using
125:30 - the Border radius property I'll set it
125:33 - to five pixels and that looks good I
125:37 - also feel like the score needs to stand
125:39 - out so let's make it larger by
125:41 - increasing its font size so here in the
125:45 - score rule I see that the font size is
125:47 - being set using the CSS REM unit which
125:51 - might be new to you rem stands for root
125:54 - M don't worry too much about it it's
125:56 - just a different more flexible and
125:58 - scalable way to set font sizes and other
126:01 - properties with CSS you can bump up the
126:03 - value and set it to two RAM for example
126:06 - and that would look good but we've been
126:08 - using pixel units this whole time so
126:10 - let's just stick with that here I'll set
126:12 - the font size of score to 32 pixels and
126:17 - I also want to update the mark margins
126:18 - for the score so that it has a top and
126:21 - bottom margin of 20 pixels so I'll
126:23 - replace the margin top property with
126:25 - just margin and as you've learned in
126:27 - previous projects with this shorthand
126:29 - the first value sets the top and bottom
126:31 - margin so we'll leave that as 20 pixels
126:34 - and the second value sets the left and
126:36 - right margins which I'll set to zero and
126:38 - while we're here let's also adjust the
126:40 - timer's font size so here in the timer
126:42 - rule I'll set the font size to a value
126:45 - like 24 pixels and let's create more
126:48 - space between the timer and the game
126:51 - board below it so I'll replace margin
126:53 - top with margin bottom 20 pixels a
126:57 - subtle change but this is looking much
126:59 - better to me and if you're curious
127:01 - before we move on I want you to pause me
127:03 - and ask chbt to explain the CSS REM unit
127:07 - in more detail go ahead I'll wait all
127:09 - right so now it looks like we'll need to
127:11 - adjust the images in the game board
127:13 - holes I'll have you make these changes
127:16 - with a
127:17 - challenge here here's what we'll need to
127:19 - do first let's make the game more
127:21 - challenging by making the image Target
127:23 - smaller because currently the images are
127:25 - as wide and as tall as the holes so I
127:28 - want you to resize them to be 55% of the
127:32 - width and height of their hole then
127:35 - you'll notice that the images are
127:37 - initially squared but they need to be
127:39 - circular you've done this before so go
127:41 - ahead and update the CSS to make the
127:43 - images perfectly rounded and here's an
127:46 - important adjustment you'll need to make
127:48 - all the images are currently visible by
127:50 - default but they all need to be
127:52 - initially hidden from view so notice in
127:55 - this CSS rule how this transform
127:58 - property uses a CSS scale function to
128:01 - scale or increase the size of an image
128:04 - inside an active hole to the value 1.1
128:08 - which is 100% of its size so I want you
128:11 - to think about how you might use this
128:13 - property here in the CSS rule that
128:16 - Styles an image within a whole element
128:18 - to to hide or scale them out of view so
128:21 - go ahead and pause the scrim now and
128:23 - work through this challenge I'll catch
128:24 - up with you soon to go over the solution
128:26 - you've got
128:29 - this all right hopefully you got that so
128:32 - first the images are currently 100% the
128:35 - width and height of their parent whole
128:38 - element so to resize the images to be
128:41 - 55% of the width and height of their
128:44 - hole I'll update the width property to
128:47 - 55% and the height property to
128:50 - 55% and there we go as I mentioned the
128:54 - images are initially squared so to make
128:57 - them perfectly rounded I'll use the
128:59 - Border radius property and set it to the
129:02 - value 50% which does in fact make them
129:06 - perfectly rounded within their hole
129:08 - awesome okay so now how do we set the
129:11 - initial scale of an image to make it
129:13 - invisible for that I'll use the
129:16 - transform property here in the whole
129:19 - image rule and like in here use the
129:23 - scale function to set the initial scale
129:25 - of the image to zero just like that so
129:28 - essentially the base style for the image
129:30 - inside a whole class makes it invisible
129:34 - as you can see here the images are gone
129:36 - but as you'll see later when the whole
129:38 - element also has an active class the
129:41 - image will enlarge smoothly to 110% of
129:45 - its size suggesting some sort of active
129:48 - State for the image which is when a
129:49 - player will be able to whack or face
129:52 - bump it and this transition property
129:54 - adds a smooth transition effect on the
129:57 - transform property so when the scale of
129:59 - the image changes it will animate over a
130:02 - duration of 0.2 seconds and ease in Out
130:06 - means that the animation starts and ends
130:09 - slowly and speeds up in the middle so if
130:11 - you've successfully worked through these
130:13 - steps and came up with a similar
130:14 - solution nice work and now the real fun
130:17 - begins with JavaScript we'll make the
130:20 - images pop in and out from their hole
130:22 - keep track of the score and manage the
130:24 - countdown timer so I'll add a third
130:27 - prompt that instructs chat gbt to
130:29 - implement these desired features with
130:31 - JavaScript to create that whacka effect
130:34 - the images should appear and then
130:36 - disappear into their holes and I want it
130:39 - to happen at random intervals to make
130:41 - the game interesting when a player
130:43 - clicks on an image the player score
130:45 - should increase by one and will create a
130:47 - 30 second countdown timer which starts
130:50 - immediately after clicking the start
130:52 - button then the game should end when the
130:54 - timer reaches zero also when the game
130:57 - ends I want to display a fun and witty
131:00 - message based on the player score and
131:02 - let users easily Play Again by clicking
131:05 - the start button and as always I'd like
131:07 - code comments to help me understand the
131:09 - JavaScript logic all right so here you
131:13 - go chat GPT do your thing and let's see
131:16 - what chat GPT came up with by copying
131:18 - the JavaScript code and pasting it into
131:22 - script.js it looks like this is quite a
131:24 - bit of code so let's have a look at the
131:26 - top I see that it's selecting elements
131:28 - from the HTML like the start button the
131:30 - score display the timer the message
131:32 - display and the holes and then I see
131:35 - some variables holding information like
131:37 - the current score the desired time for
131:40 - the timer whether the game started as
131:42 - well as the current time in the
131:44 - countdown and this function here
131:46 - generates a random time interval to
131:49 - display the images using a desired Min
131:52 - and max value and it looks like the code
131:54 - below is used to display the images in
131:56 - the holes first it makes sure that no
131:58 - holes are active with visible images
132:01 - then it selects holes randomly for the
132:03 - images to pop in and out of and then it
132:05 - applies the active class we looked at
132:07 - earlier in the CSS which is this class
132:10 - here which gives the image the effect
132:12 - that it's popping out of the hole and
132:14 - here I see that the time intervals will
132:16 - be chosen randomly between 500 and, 1500
132:20 - milliseconds or between half a second
132:22 - and 1.5 seconds and then after the set
132:26 - random time it hides the image by
132:28 - removing the active class here and if
132:31 - the game is still playing or the
132:33 - countdown hasn't hit zero yet it
132:35 - continues the game by displaying the
132:37 - next image again and again until the
132:39 - time gets to zero all right and this
132:41 - function is the logic that starts the
132:44 - game and updates the countdown and
132:46 - current score it also stops the game
132:49 - when the time reaches zero and displays
132:52 - a message below is the event listener
132:55 - that starts the game when the player
132:57 - clicks the start button and then we have
133:00 - another event listener for clicking on
133:02 - the images and increasing the score and
133:05 - finally this function is what's used to
133:08 - return a fun message based on the score
133:10 - so if the score is equal to zero we get
133:13 - this message and players will get a
133:15 - different message if they score less
133:17 - than 10 less than 20 or 20 points or
133:21 - more all right that was a lot of code to
133:23 - go over and I completely understand if a
133:26 - lot of this seems a little bit confusing
133:28 - to you or very confusing for you right
133:30 - now it's totally normal so what I want
133:32 - you to do is pause me right now if you
133:34 - feel like you need to take a moment to
133:36 - ask chat gbt to explain any of the code
133:39 - that you don't quite understand or want
133:42 - to learn more about all right now let's
133:44 - see what we've got by testing the game
133:46 - I'll click Start game and then cool my
133:49 - pesky photo is popping up randomly which
133:52 - can be challenging at times I'll try to
133:54 - get as many face boms as
133:58 - possible after 30 seconds the game is
134:01 - over I scored 12 points so the message I
134:04 - get is you getting good at this cool now
134:07 - I did notice an issue with the countdown
134:09 - timer text here which we'll get to and
134:12 - fix shortly and I also just thought of a
134:14 - cool effect we can apply to the holes on
134:16 - the game board we can make the Shadows
134:19 - appear inside the holes instead of
134:21 - outside to give each hole the appearance
134:23 - of depth the Box Shadow property in CSS
134:26 - is what adds a shadow effect to an
134:29 - element so this property is applying a
134:31 - shadow to each hole and by adding the
134:34 - inset keyword at the start of the Box
134:36 - Shadow value like so effectively creates
134:38 - an inner Shadow which gives each hole an
134:42 - appearance of being indented into the
134:44 - page and it creates a subtle depth
134:46 - effect all right this is looking good
134:49 - and it seems like we're mostly set up
134:51 - with all the game
134:54 - mechanics let's keep it going by adding
134:57 - some enhancements to our face bump game
134:59 - first when a player hovers over an image
135:02 - with their Mouse I want the cursor to
135:04 - change to the usual pointer or hand icon
135:07 - to indicate the image is clickable or
135:10 - interactive we can do that pretty easily
135:13 - in the CSS here in the rule that selects
135:16 - an image that's inside an element with
135:18 - the class hole using the cursor property
135:22 - and setting it to the value pointer and
135:25 - now when we hover over an image we see
135:27 - the pointer as the cursor good all right
135:31 - next just for an Added Touch let's see
135:33 - how we can make the image display a
135:35 - bumped or whack effect when clicked I
135:38 - think applying a bright red border
135:40 - around it might do the trick so I'll ask
135:43 - chat GPT to help me with that using this
135:46 - prompt I'd like it to update the
135:48 - necessary code to apply a red border to
135:51 - an image only when clicked so let's feed
135:54 - this into chat
135:56 - gbt and I get back some new code it
135:59 - looks like we need to modify the event
136:01 - listener for clicking on images using
136:03 - this updated JavaScript code so I'll
136:05 - copy this code snippet then scroll down
136:08 - to the event listener for clicking on
136:10 - images right here and replace this
136:12 - entire code block with the new code so
136:16 - here I see that it adds the class
136:17 - clicked to a clicked image then removes
136:20 - it here after a delay of 300
136:24 - milliseconds chat GPT also gives me the
136:27 - CSS to apply the red border to an image
136:29 - with the class clicked so I'll copy this
136:32 - code snippet and paste it at the bottom
136:34 - of styles.css I think I'll customize it
136:37 - slightly I'll make the Border thicker by
136:40 - changing it to four pixels and making
136:42 - the color brighter with the value tomato
136:45 - which is my favorite CSS color now let's
136:48 - go ahead and test the latest changes
136:50 - I'll start the game and click on an
136:51 - image to bump it and there we have it a
136:54 - bright red borderer to enhance the
136:56 - player experience a simple yet effective
136:59 - way to add some feedback for the player
137:02 - all right so now how about some
137:04 - JavaScript challenges to enhance the
137:07 - interactivity of the game I'll include
137:09 - the first challenge here just above the
137:11 - function that starts the game so here in
137:14 - the start game function I want you to
137:16 - update the start button to display the
137:18 - text playing when a user clicks it to
137:21 - start the game and remember that you'll
137:22 - need to set the button text back to
137:24 - start game when the game ends so look
137:27 - closely at the code in this function as
137:29 - you'll find some hints on how to do this
137:31 - pause me now and give it a
137:35 - go all right hopefully you were able to
137:38 - make this happen now I'll show you one
137:40 - solution so here in the start game
137:42 - function I see some code being used to
137:45 - set the text content of an element like
137:48 - the score display and the time display I
137:50 - noticed that the start button is being
137:52 - referenced here so to update the start
137:56 - button text when the game starts I can
137:58 - write start button. text content and set
138:02 - it equal to the text playing dot dot dot
138:06 - all right let's try it out when I click
138:08 - the start button yes the text changes to
138:11 - playing good so now we need to change
138:13 - the button text back to start game when
138:16 - the game ends and this is the code that
138:19 - handles the game when the time is up so
138:21 - it seems like I can do something very
138:23 - similar here with start button. text
138:26 - content equals the string start
138:29 - game I'll test it out in fact to speed
138:32 - things up for us I'll change the
138:33 - countdown timer to be 5 Seconds instead
138:36 - of 30 seconds
138:38 - here and let's see I'll click Start game
138:42 - the button text changes to playing and
138:44 - then after 5 Seconds good it Chang
138:47 - changes back to start game next let's
138:50 - work on fixing the countdown timer
138:52 - you've probably noticed that it's
138:54 - repeating the words time left and
138:56 - seconds this shouldn't be too
138:58 - challenging to fix one way to fix this
139:01 - would be to update the time display
139:04 - variable to reference the div with the
139:07 - ID timer instead of only the span
139:10 - element with the ID time so back in the
139:12 - JavaScript we'll say get element by ID
139:16 - timer and then it should initially
139:18 - display time left followed by the time
139:21 - with this line here in fact I'd prefer
139:24 - if we don't display the word seconds so
139:26 - I'll get rid of that Al together and
139:28 - we'll display the same text and time
139:31 - during the countdown here in this line
139:33 - so I'll just make the same change here
139:36 - and let's also remove the word seconds
139:38 - from the
139:39 - HTML all right let's try it out I'll
139:41 - click Start game and there we go the
139:44 - countdown timer is looking much better
139:47 - and I think it would be better if we
139:49 - replace the time entirely with the final
139:52 - message once the countdown hits zero and
139:54 - the game ends so over in the JavaScript
139:57 - let's look for the code that ends the
139:58 - game when the time is up right here and
140:02 - then I can replace message display.
140:05 - textcontent with time display.
140:08 - textcontent equals The Returned message
140:12 - and now I can even delete the HTML for
140:14 - the message here which is the div with
140:16 - the ID message as well as the JavaScript
140:19 - variable for it which is this one here
140:21 - message
140:22 - display Let's test it out I'll click
140:25 - Start game the counter is still at 5
140:28 - seconds and when the game ends the time
140:31 - is replaced with the message great that
140:33 - looks much better next up no game is
140:36 - complete without cool sound effects so
140:38 - in our final challenge you're going to
140:40 - take this game to the next level by
140:42 - playing a sound effect each time the
140:44 - player whacks or bumps a face photo to
140:46 - gain a point I'll add the steps for this
140:48 - challenge here in
140:51 - script.js you'll notice that I've
140:53 - included some sound files here in the
140:55 - sounds folder so first I want you to
140:58 - embed this bump. wve sound file in the
141:02 - HTML and then you'll update the
141:03 - JavaScript to play the bump. wve sound
141:07 - each time a player clicks on a photo you
141:09 - did something very similar in the
141:11 - previous section of this course where we
141:13 - built the drumkit app so you can
141:15 - reference the code from that project if
141:17 - needed so pause me now and go for
141:22 - it all right hopefully that went well
141:24 - and that you were able to play the bump
141:26 - sound effect now let's go over one way
141:29 - to do it first I'll embed the bump. wve
141:32 - sound file here in
141:34 - index.html as we did in the drumkit
141:37 - project I'll use the audio element for
141:40 - that I'll give this audio element an ID
141:44 - of bump- sound and then I need to set
141:48 - the source to that wave file which is in
141:51 - the sounds folder so I'll say sounds
141:53 - slash bump. wve okay that's good to go
141:57 - if you got this part awesome next one
142:00 - very important step is that I need to
142:02 - select the audio element with the ID BMP
142:06 - sound here in the
142:07 - JavaScript so let me add a section here
142:09 - to indicate that this is where we select
142:11 - audio elements for sounds and then here
142:15 - I'll declare a new variable on name BM
142:18 - sound so I can say document. getet
142:22 - element by ID and specify the ID BMP Das
142:27 - sound all right now I need to head over
142:29 - to the event listener for clicking on
142:31 - images right here and as you've learned
142:34 - this block of code handles everything
142:36 - that happens when a player clicks on a
142:38 - photo like update the score and apply
142:41 - the red border this is where we'll also
142:43 - play the bump sound effect so first I'll
142:46 - reference the bump sound variable then
142:49 - call the current time property on it as
142:52 - we've done before and set it to zero
142:55 - which makes the audio start playing from
142:57 - the beginning and then below bump sound.
143:01 - playay is going to start playing the
143:03 - audio okay let's test it
143:08 - out and it works that is super cool so
143:12 - now how about playing a sound effect
143:14 - when the game ends even better we'll
143:16 - play a different sound based on how the
143:18 - player scored in the sounds folder I
143:21 - have two more sound files game and. wve
143:24 - and game and highwave so let's first
143:27 - embed these in
143:28 - index.html just like the bum sound in
143:31 - fact I'll just copy this audio element
143:34 - here paste the new one below and update
143:37 - the ID to end- sound and the source
143:41 - value to sounds SL
143:45 - gamewave and I'll do the same name for
143:47 - the high score sound update the ID to
143:50 - high- sound and the source to sounds
143:53 - slame and uncore
143:56 - highwave all right now I can select them
143:59 - with JavaScript and assign them to
144:01 - variables so that we can play The Sounds
144:03 - I'll copy this line here paste it below
144:06 - and update the variable name to end
144:09 - sound and this will get the element with
144:12 - the ID and- sound let's do the same for
144:16 - high sound
144:17 - I'll name this variable high sound and
144:20 - have it get the element with the ID high
144:23 - sound we know that the start game
144:25 - function handles all the functionality
144:28 - to start the game and display the score
144:30 - and countdown and we also work with this
144:33 - code block here which ends the game when
144:36 - the time is up or when time is equal to
144:38 - zero so first I'll play the end sound
144:41 - here and I can do that with end sound.
144:45 - playay Okay so let me test this I'll
144:48 - update the time to just 3
144:50 - seconds and here we
144:55 - go all right excellent that worked so
144:58 - now let's wrap up this epic game project
145:01 - with a challenge I'll add the challenge
145:03 - here in
145:06 - script.js I want you to update this code
145:09 - so that it plays the high sound remember
145:12 - that's this game _ wave file only if the
145:16 - player score is higher than nine
145:19 - otherwise play the regular end sound if
145:21 - the score is nine or less so pause me
145:24 - now and go for
145:27 - it all right hopefully you were able to
145:29 - make this work now let's go over how I
145:31 - might do it so first to play the high
145:34 - sound if the player score is greater
145:36 - than nine I can use a if statement to do
145:40 - that which we've done before so I'll
145:42 - replace n sound. playay with an if
145:45 - statement where we'll say if the value
145:49 - of score is greater than nine play the
145:53 - high sound with high sound. playay and
145:57 - then we'll use the L statement to play
146:00 - the end sound if the score is nine or
146:03 - less with end sound. playay if you
146:07 - figured this part out amazing job you
146:09 - should be super proud all right so now
146:12 - all that is left is to try it out I'll
146:15 - change the timer back to to 30 seconds
146:18 - and let's go for it okay here we go I'll
146:21 - start the
146:22 - game bump some photos oh this is pretty
146:26 - tricky oh it looks like I got the high
146:31 - score all right I scored more than nine
146:33 - points so I got the high score sound
146:36 - which is great now I'll quickly test the
146:38 - n Sound by scoring less than nine
146:44 - points and good our code works perfectly
146:48 - this was just for testing but if you'd
146:50 - like you can update the high score
146:52 - values here so for example in the get
146:54 - message function anything greater than
146:57 - 20 gives you this wow you're a face bomp
146:59 - Champion so let's update the code so
147:02 - that that high score sound plays when
147:04 - the player scores more than 20 points
147:07 - and you can set it to whatever score
147:08 - you'd like also another more concise way
147:11 - you might write this same expression is
147:13 - using javascript's Turner operator like
147:16 - this
147:17 - type score is greater than 20 followed
147:20 - by a question mark and if the score is
147:23 - greater than 20 the high sound will play
147:26 - with high sound. playay then type Aon
147:30 - and if the score is 20 or less we'll
147:33 - play the end sound with end sound.
147:36 - playay and this should work in the same
147:38 - exact way so wonderful you've just built
147:42 - face bump a fun and engaging game using
147:45 - HTML CSS and JavaScript we've covered a
147:49 - lot of ground here so be super super
147:52 - proud of yourself now before we head off
147:54 - to the next project remember that this
147:56 - is your foundation for this game you can
147:59 - expand upon face Bomb by introducing new
148:02 - features it's all up to you and I want
148:05 - you to take that next step by
148:07 - customizing the game and making it your
148:09 - own for example upload your own images
148:12 - for a more personalized experience it
148:14 - can be your photo or your friend's photo
148:17 - I also want you to update the game
148:19 - colors and maybe write some custom
148:21 - messages for when the game ends and
148:23 - don't forget to share your Solution by
148:25 - posting it in the today I did channel so
148:28 - that'll do it for this project amazing
148:30 - work let's keep
148:34 - building all right let's continue by
148:36 - building an interactive image slideshow
148:39 - that displays different project images
148:41 - and descriptions and it will be flexible
148:43 - so that you can add it to a website for
148:45 - example to let you users easily browse
148:48 - through projects you've built or
148:49 - anything you want to showcase and as
148:51 - usual we'll collaborate with chat GPT to
148:53 - make it happen using HTML CSS and
148:56 - JavaScript so get ready to Showcase your
148:59 - projects in style and let's get to it I
149:01 - already included HTML CSS and JavaScript
149:04 - files for the project along with three
149:07 - images for the slideshow which can be
149:09 - found here in the images folder so we'll
149:12 - Dive Right In and prompt chat gbt with
149:14 - our requirements we'll try to get most
149:17 - of the image slideshow built in one shot
149:19 - using this AI prompt The Prompt is quite
149:22 - clear and precise about what I need help
149:24 - with it mentions the kind of project I'm
149:26 - working on which is an interactive
149:28 - slideshow with do navigation and that
149:30 - the slideshow should display images and
149:32 - description for different projects it
149:34 - also mentions the language types HTML
149:36 - CSS and JavaScript followed by the
149:39 - specific functionality that it requires
149:41 - I've structured this prompt by splitting
149:43 - it up into multiple smaller tasks with
149:46 - both bullet points the bullet points in
149:47 - the prompt help provide a clear
149:49 - structure and make it easier for chat
149:52 - GPT to understand our project needs and
149:55 - hopefully generate code for each
149:57 - requirement for example I'm asking it to
150:00 - create a flexible HTML container for
150:02 - each project slide and I want to start
150:05 - by adding three projects to the slider
150:07 - including images headings and
150:09 - descriptions and the headings and
150:11 - descriptions should be overlaid above
150:14 - the images using a partially transparent
150:16 - back ground and then I want to implement
150:18 - a DOT navigation where each dot
150:21 - represents a project and Visually
150:23 - indicates the active slide users should
150:25 - be able to switch between slides using
150:27 - the dot navigation and I want a fade
150:30 - transition between each slide and as
150:33 - usual I'm asking for code comments and
150:35 - explanations to understand the solution
150:37 - better which as you've experienced with
150:39 - other projects is a great learning
150:41 - approach The Prompt seems to provide
150:43 - enough information to build a solution
150:46 - while the details of the images
150:48 - descriptions or Aesthetics like color
150:50 - scheme are not provided they aren't as
150:52 - crucial to create a functional image
150:55 - slideshow these can be easily customized
150:57 - later all right so I'll copy this prompt
151:00 - and paste it into chat gbt and let's see
151:03 - what chat gbt has in store for us okay
151:06 - we get back the HTML CSS and JavaScript
151:10 - code for our image slideshow complete
151:12 - with detailed comments explaining each
151:14 - part's functionality so first I'll copy
151:16 - the HTML code and paste it into
151:21 - index.html then I'll copy the CSS and
151:25 - paste all of it into styles.css
151:28 - and copy the JavaScript code and paste
151:32 - it into
151:34 - script.js all right now let's review the
151:36 - code in
151:38 - index.html we have a div element with
151:41 - the class slider and it wraps all the
151:44 - individual slides which get creat
151:46 - created with divs with the class slide
151:49 - each slide div contains an image and
151:52 - slide content displaying the project
151:54 - name and description and it seems like
151:57 - the sliders do navigation will be
151:58 - dynamically generated using JavaScript
152:01 - so there's a container element for the
152:02 - navigation here at the bottom with the
152:05 - class. navigation when I run the code it
152:08 - looks like we need to update the paths
152:10 - to the image files in our project
152:13 - they're showing up as broken images so
152:16 - why don't you take a moment to fix this
152:18 - here's a challenge I want you to update
152:20 - each image element to correctly point to
152:23 - the image source and remember the images
152:25 - are in this folder named images so pause
152:28 - me now and give that a
152:32 - go all right here we go now I'll update
152:35 - the paths to point to the images stored
152:37 - in my images folder here in an images
152:39 - Source attribute I need to specify the
152:42 - folder name which is images followed by
152:45 - a forward slash before the image name so
152:48 - for example this image element Source
152:50 - points to the project 1. JPEG file now
152:53 - I'll do the same for the other two
152:56 - images all right let's test the
152:58 - slideshow and good it seems like it's
153:00 - working as expected so nice work if you
153:03 - got that now we have a flexible HTML
153:06 - container for each project slide with
153:09 - responsive image resizing The Heading
153:12 - and descriptions fully overlay the
153:15 - images with a partially transparent
153:17 - background and the dot navigation allows
153:20 - us to switch between slides with a
153:22 - smooth fade transition effect so not bad
153:26 - at all on the first try but it looks
153:27 - like we need to make a few adjustments
153:29 - so let's walk through the rest of the
153:31 - code and customize the slideshow to our
153:34 - needs the CSS comments in styles.css
153:38 - help explain what each CSS rule is doing
153:42 - so for instance here it's resetting some
153:44 - default Styles then we have this CSS for
153:46 - the main slider container as well as all
153:49 - the individual slides with the class
153:52 - slide and it looks like this is setting
153:54 - the opacity of an active slide to one so
153:57 - that we can view it and it's styling the
154:00 - image within each slide as well as the
154:02 - content overlay and below are the styles
154:05 - for the dot navigation all right so the
154:08 - first thing I want to do is make sure
154:10 - that the image inside each slide takes
154:13 - up the full width and height of its
154:16 - containing element because notice if I
154:18 - shrink the browser window we see a gap
154:21 - or some empty space between the image
154:23 - and the dot navigation so let's fix this
154:26 - I'll scroll down to where we're styling
154:29 - the image within each slide right here
154:31 - now the image is already set to take up
154:33 - the full width of its containing element
154:36 - here with width set to 100% so to set
154:39 - the image inside each slide to also take
154:41 - up the full height of its containing
154:43 - element I'll update the height property
154:45 - here to 100% so now if it's container
154:49 - div with the class slide is resized the
154:53 - image will resize along with it always
154:56 - trying to fill the entire width and
154:58 - height of the parent slide div so notice
155:00 - that now we're not seeing that Gap below
155:02 - the image but now it seems like the
155:04 - aspect ratio of the image is a bit off
155:07 - notice how it looks distorted here at
155:09 - this width we can adjust that with a CSS
155:12 - property called object fit this property
155:15 - determines how the image should be
155:17 - resized to fit its container and the
155:20 - value cover ensures that the image will
155:23 - scale up or down so that it covers the
155:26 - entire area of its container without
155:28 - stretching or distorting the image
155:31 - notice how it crops the image in a way
155:33 - that preserves its aspect ratio and
155:35 - Central content so now it doesn't look
155:37 - distorted Perfect all right so next I'd
155:41 - like to pin the content area to the
155:44 - bottom of the slide
155:46 - that way it doesn't fully overlay the
155:49 - image so here in the slide content rule
155:53 - I'll change this top property set to
155:55 - zero to bottom zero and then remove the
155:59 - height set to 100% as well as this left
156:03 - position property set to zero all right
156:06 - that looks much better now we can see
156:07 - more of our project images I also think
156:10 - that the content background should be
156:12 - slightly less transparent so here I see
156:15 - where a semi-transparent background is
156:17 - being set so I'll update this alpha or
156:21 - transparency value here in the rgba
156:24 - color function to 75% by sending it to
156:27 - 75 and that looks much better to
156:31 - me now let's adjust the project name
156:34 - with CSS we'll increase the font size
156:37 - and add more visual space between the
156:39 - project name and description so at the
156:42 - top of styles.css I'll create a new rule
156:45 - that Target gets the H2 element on the
156:48 - page which remember is the project name
156:51 - in each
156:52 - slide and here I'll update the font size
156:55 - using the CSS font size property and set
156:58 - it to a larger value such as 26 pixels
157:02 - and to create that extra space I'll use
157:04 - a margin bottom property and set it to
157:06 - 12 pixels let's check it out and I think
157:10 - that looks much better all right now
157:12 - let's have a look at the JavaScript the
157:14 - comments are super helpful full in
157:16 - explaining each code block so here at
157:18 - the top I see that it's getting the
157:20 - required elements such as the slide
157:22 - Dives and the dot navigation container
157:25 - and this line of code initially sets the
157:26 - first slide and Dot as active and then
157:29 - we have the code to generate the dot
157:31 - navigation based on the number of slides
157:34 - so that's actually really cool because
157:36 - as we add more and more of these Slide
157:38 - divs the JavaScript is going to
157:41 - dynamically generate more dots for the
157:43 - navigation and it looks like this
157:45 - function here handles navigating to a
157:48 - specific Slide by first removing the
157:50 - active class from all slides and dots
157:53 - and then adding the active class to the
157:55 - selected slide and Dot now everything in
157:58 - the slideshow seems to be working great
158:01 - but I think it would be really neat and
158:02 - useful if the slideshow played
158:04 - automatically so let's ask chat gbt to
158:08 - implement an autoplay feature that
158:10 - automatically switches to the next slide
158:12 - every 5 Seconds I'll use this prompt
158:15 - here which says says please update the
158:16 - JavaScript code to automatically switch
158:19 - to the next slide every 5 Seconds I'll
158:22 - feed this prompt into chat
158:24 - gbt and let's see okay we get back new
158:28 - code for our Javascript file so what
158:30 - I'll do is copy all of this code and
158:32 - replace everything in script.js with the
158:35 - updated code just to be sure that I
158:37 - don't miss anything all right so let's
158:39 - check it out it looks like we have two
158:42 - new variables declared at the top
158:44 - current slide which is an initialized to
158:46 - zero and slide interval and now the
158:50 - navigate to slide function automatically
158:52 - Fades to the next slide every 5 Seconds
158:56 - this JavaScript line here uses the set
158:59 - interval function which is a built-in
159:01 - method in JavaScript that's used to
159:03 - execute a specific function or code
159:06 - snipp it repeatedly at fixed time
159:08 - intervals so in this case it calls the
159:10 - next slide function to navigate to the
159:13 - next slide every 500 m seconds which is
159:16 - equivalent to 5 Seconds awesome then
159:19 - here at the very bottom this line
159:21 - initially autop plays the slideshow when
159:23 - the page loads all right so let's test
159:25 - it out I'll run my code and excellent
159:28 - the slideshow plays by itself and then
159:30 - every 5 Seconds it updates to show the
159:32 - next slide perfect so fantastic you've
159:36 - created an impressive image slideshow
159:38 - you can use for your personal portfolio
159:41 - website and remember it doesn't end here
159:44 - I want you to customize iiz and enhance
159:47 - a slideshow to suit your personal style
159:49 - and project needs and make it truly your
159:51 - own so I'm going to leave you with a
159:54 - challenge here I want you to add more
159:57 - projects custom images descriptions and
160:01 - add links to your live projects I'll
160:03 - kick off the first slide here in the
160:04 - HTML by setting the project name to
160:07 - website hero and updating the
160:10 - description here in the paragraph
160:12 - element and I want you to keep this
160:14 - project handy because you're going to
160:16 - use it later in a bigger project so stay
160:19 - tuned and as always take a moment to ask
160:21 - chat gbt to explain any of the code that
160:25 - you don't quite understand or want to
160:27 - learn more about great work let's move
160:32 - on you are going to build your very own
160:35 - personal homepage where you'll introduce
160:37 - yourself to the world exhibit your
160:39 - skills and display your projects imagine
160:42 - a digital business card but more Dynamic
160:44 - and personal and the best part is that
160:46 - you will Implement and feature the
160:47 - project slideshow you built earlier on
160:49 - your homepage so let's get to it we'll
160:51 - kick it off by discussing the project
160:53 - with chat gbt and instructing it on our
160:55 - intentions to ensure we're on the same
160:57 - page then we'll follow it with a series
160:59 - of prompts for each section of the page
161:02 - this first prompt asks chat GPT for
161:04 - guidance in building a personal homepage
161:06 - using HTML and CSS it's a sort of broad
161:10 - level brief to give chat GPT a sense of
161:12 - the Project's nature and I also let it
161:14 - know that I'll only request specific
161:16 - code Snippets as we progress so there's
161:18 - no need to provide code until I
161:20 - explicitly ask for it and with this
161:22 - prompt chubbt should be ready to start
161:25 - so I'll copy and paste this prompt into
161:27 - chat gbt and good it looks like chat gbt
161:30 - is primed and ready to go so now let's
161:33 - ask it to provide a basic HTML structure
161:36 - with this prompt I'm giving chat gbt a
161:38 - road map for our hom Pages layout and
161:40 - overall the main building blocks of our
161:42 - page I'm asking it to help me design a
161:44 - basic struct structure for a personal
161:46 - homepage and that it should have the
161:48 - following sections a header a section
161:50 - for display my projects an about section
161:52 - and a section for displaying my skills
161:54 - as well as a footer and I wanted to add
161:56 - these sections as placeholders for now
161:59 - as we'll be coding them and filling them
162:00 - out step by step I'll feed this prompt
162:03 - to chat gbt and let it do its thing I
162:06 - get back some HTML so I'll copy this
162:08 - code and paste it into
162:10 - index.html and let's have a look it
162:13 - looks like the HTML structure is a big
162:15 - basic layout with placeholders for
162:17 - different sections like the header
162:19 - projects about skills and the footer
162:21 - just as requested great so now let's
162:24 - request the code for our page header in
162:26 - navigation with this prompt I want chat
162:29 - TBT to code an HTML header displaying my
162:32 - name Gil H and navigation links for the
162:35 - sections projects about and
162:39 - skills and I get back new HTML where it
162:42 - looks like the header section was
162:44 - updated so I'll copy the header element
162:47 - and replace the existing header element
162:50 - with the new code I see that the main
162:52 - heading or H1 was updated to display my
162:55 - name and then we have a nav element
162:57 - holding an unordered list which contains
163:00 - all the page links as list items I'll
163:03 - check out the latest code and see that
163:05 - so far everything is looking great next
163:08 - let's guide chat gbt to create the HTML
163:12 - for our about section this section
163:14 - should briefly in ruce who you are and
163:16 - some of your achievements by linking to
163:18 - a resume for example so I wanted to
163:21 - guide me to create the HTML for the
163:23 - about section it should include my
163:25 - picture a friendly introduction and a
163:27 - link to my resume so let's see what chat
163:29 - gbt can do with this prompt in the
163:32 - provided HTML code I do see that the
163:35 - about section was updated with the
163:37 - requested content fantastic I'll copy
163:40 - this new section and replace the section
163:43 - here in index.html with the new code
163:46 - code the about content contains an image
163:48 - element and it looks like I need to
163:50 - update the source attribute here to
163:52 - display my image which is located in the
163:55 - images folder and it's named photo. jpeg
163:58 - so here in the source attribute I'll
164:00 - change the path to images SL photo. JPEG
164:05 - and I'll update the alt attribute to
164:08 - gills picture and in the paragraphs
164:10 - below I see a friendly introduction
164:12 - about me as well as the placeholder link
164:15 - for for my resume which I'll leave as is
164:17 - for now all right let's keep going by
164:19 - asking chbt to develop the HTML for our
164:22 - skill section this area is where we
164:25 - might showcase our expertise and
164:27 - proficiency levels in specific topics
164:29 - for now we'll just list HTML CSS and
164:32 - JavaScript but you can update it to
164:33 - whatever you'd like the prompt says now
164:35 - let's code the HTML for my skill section
164:38 - and as mentioned we'll start with the
164:39 - skills HTML CSS and JavaScript and each
164:42 - skill should have a name and a
164:44 - description and I also want to display a
164:46 - progress bar representing my proficiency
164:49 - in each skill so let's see what magic
164:51 - chat gbt can cook up with this prompt
164:54 - all right I get back some new HTML and
164:57 - yes it looks like the skills section was
164:59 - updated with the requested skills so
165:01 - I'll copy just the skill section from
165:03 - the new code then paste it in
165:06 - index.html over the existing skill
165:08 - section so in our skill section we have
165:11 - the skills HTML CSS and JavaScript each
165:13 - has a short description about each skill
165:16 - as well as a progress bar to give us a
165:18 - visual representation of each strength
165:21 - and what's cool is that you'll be able
165:22 - to adjust the percentages by updating
165:24 - the width values in each of these style
165:26 - attributes all right let's keep it going
165:28 - by coding our footer the footer is going
165:32 - to tie everything together and provide a
165:35 - space for additional links with this
165:37 - prompt I'm instructing chat gbt to
165:39 - create the HTML for the page footer and
165:41 - that it should contain copyright
165:42 - information and links to my LinkedIn
165:45 - Twitter and Instagram profiles and to
165:47 - make the footer more interesting I want
165:49 - to use icon fonts to display a social
165:51 - media icon for each link I'll feed this
165:54 - prompt to chat
165:55 - gbt and let's see what we get good we
165:58 - get the updated HTML for the page footer
166:01 - and it looks like I first need to
166:02 - include the icon font Library which in
166:05 - this case is font awesome so I'll copy
166:08 - this link element and add it to the head
166:11 - section of my page just like that then
166:15 - and I'll grab the new footer code and
166:17 - add that to my page the footer contains
166:20 - all the essential information I
166:22 - requested providing links to LinkedIn
166:25 - Twitter and Instagram and below the
166:27 - copyright information let's have a look
166:29 - at it in the browser and good we see the
166:32 - icon fonts being displayed for each link
166:34 - which makes it easier for visitors to
166:36 - recognize the links I'll update this to
166:39 - Gil H and moving on it's time to add
166:42 - some style to our web page let's request
166:45 - CSS from chat gbt using this prompt so I
166:48 - wanted to design a simple modern CSS
166:50 - layout for my homepage I want a
166:53 - responsive layout that adjusts to
166:55 - different screen sizes using CSS media
166:57 - queries for the design I prefer a black
166:59 - and white color scheme and sansera fonts
167:02 - and I give it Specific Instructions to
167:04 - make my picture smaller and rounded and
167:07 - to add generous line height in visual
167:09 - space around the content so that it
167:11 - doesn't appear too cramped so I'll feed
167:13 - this to chat gbt and see what it returns
167:16 - all right I get back to New CSS so I'll
167:18 - copy the code and paste it into
167:20 - styles.css fingers crossed hopefully
167:23 - this looks good all right and look how
167:26 - our page has transformed not too bad it
167:29 - provides a responsive design which
167:32 - ensures a userfriendly experience
167:35 - regardless of the device used and the
167:38 - chosen color scheme and font give a
167:40 - modern professional feel and the skill
167:42 - section looks fantastic with the style
167:44 - progress bars with our site content
167:47 - elements in place our page is taking
167:49 - shape so now let's spend some time
167:51 - customizing the CSS so first I want to
167:54 - increase the font size of the titles or
167:57 - H2 elements for each of the sections and
168:00 - Center them on the page so inst
168:02 - styles.css I'll create a new rule that
168:04 - targets all the H2 elements and here
168:07 - I'll increase their font size to 30
168:10 - pixels and align them center with text
168:13 - align Center
168:15 - and that's looking better now I want to
168:17 - apply a generous margin between the
168:20 - heading and the content below it I can
168:23 - do that with the margin bottom property
168:25 - and let's say 20 pixels okay that's
168:29 - looking better the next thing I want to
168:30 - do is add some space between the
168:33 - paragraphs because notice how these two
168:35 - paragraphs are looking pretty cramped
168:37 - and I also want to open up the space
168:39 - between the skills description and the
168:41 - progress bar so back in the CSS I'll
168:44 - select the paragraph graphs or P tags
168:46 - and again with the margin bottom
168:48 - property increase the margins to 16
168:51 - pixels and that looks much better to me
168:54 - looking through the CSS I see that the
168:56 - about section has a padding value of 40
168:58 - pixels and it seems like it doesn't need
169:01 - to be that big so for now I'll just go
169:03 - ahead and get rid of this padding
169:05 - property and keeping with that change it
169:08 - seems like the skill section also has a
169:10 - padding value of 40 pixels which I don't
169:13 - think we need for now so I'll also get
169:15 - rid of this skills rule here but what I
169:18 - can do now is create some more space
169:21 - between each of the sections all at once
169:23 - in one CSS rule remember the main
169:25 - sections are contained within the
169:28 - section
169:29 - elements so I can Target the sections
169:32 - with CSS and then set their top and
169:35 - bottom margin value to 30 pixels and the
169:37 - left and right margins to zero and that
169:40 - applies consistent spacing across all
169:43 - the sections looking good another change
169:45 - I'll make in the header navigation is
169:47 - style the hover state of the links to
169:49 - give the user a visual indication that
169:51 - the link is being hovered remember we
169:53 - can do that using the hover pseudo class
169:56 - as we've done in previous projects so
169:58 - here in the CSS styles for the header
170:01 - links I can follow a similar pattern
170:04 - used here to style the navigation links
170:06 - on Hover with nav Li a colon hover in
170:11 - fact I can write it just like this
170:13 - without the Li and it will do the same
170:15 - thing when a user hovers over a link I
170:17 - want to display an underline link so
170:19 - I'll set the text decoration to
170:22 - underline and there we go our hover
170:24 - state is all set all right now comes
170:28 - your big challenge for this project and
170:30 - that is implementing the project
170:34 - slideshow after you built the slideshow
170:36 - project I mentioned to keep your project
170:38 - slideshow handy because you were going
170:40 - to use it on a larger project and now is
170:43 - that time I want you to add add your
170:45 - project slideshow to the homepage first
170:48 - you'll place the slideshows HTML here in
170:51 - the project section then add the
170:53 - slideshow CSS to the file slideshow. CSS
170:58 - and paste the JavaScript into
171:01 - script.js I've also included some images
171:03 - you can use here in the images folder
171:05 - but customize the code as needed to fit
171:07 - your slideshow so take your time with
171:10 - this and I'll catch you in the next
171:11 - scrim to go over it together you've got
171:13 - this
171:16 - all right this was a pretty big
171:18 - challenge so hopefully you were able to
171:19 - implement the project slideshow in your
171:21 - web page I'll bring in my project
171:23 - slideshow by first pasting the HTML to
171:26 - my slideshow here in the project section
171:29 - I'll replace this placeholder with my
171:32 - code notice how I've included the div
171:35 - with a class slider as well as the dot
171:37 - navigation next I'll paste my slideshow
171:40 - CSS in slideshow. CSS and bring all of
171:44 - my slideshows JavaScript into
171:47 - script.js hopefully you realize that you
171:49 - need to link your index.html file to
171:52 - slideshow. CSS so let's do that I'll
171:55 - copy one of these link elements in the
171:57 - head section of my page and update it so
172:00 - that it points to the file slideshow.
172:03 - CSS now we don't see our slideshow yet
172:06 - and that's because we need to point to
172:09 - script.js here at the bottom of our HTML
172:12 - file so just about the closing body tag
172:15 - I'll add script
172:17 - tags with a source attribute that points
172:20 - to the file
172:22 - script.js all right and now the
172:24 - slideshow is displaying on the web page
172:26 - perfect if you got this far into the
172:28 - challenge
172:29 - outstanding now let's spend a little
172:31 - time customizing the slideshows HTML and
172:34 - CSS so that it fits our web page
172:37 - better notice how the project titles are
172:39 - currently using H2 tags but looking at
172:42 - the site structure it appears that they
172:45 - would work better as third level or H3
172:48 - headings this would improve the overall
172:50 - hierarchy and accessibility of the page
172:52 - so we'll switch the H2 tags to H3
172:56 - tags this small change does make a
172:59 - difference in our content structure
173:01 - let's have a look at the slideshow CSS
173:04 - at the top it's using the universal
173:06 - selector or the asterisk and CSS which
173:09 - targets every element on the web page
173:11 - and it's setting its margin and padding
173:13 - to zero I don't think we need that in
173:15 - this file since styles.css is already
173:18 - handling some of this for us so I'll
173:20 - remove the margin and padding properties
173:22 - from this rule but I'll keep box sizing
173:25 - border box because the Box sizing
173:27 - property controls how the width and
173:29 - height of elements get calculated you
173:31 - see by default any extra padding or
173:34 - borders you add to an element will make
173:36 - it wider or taller than you might expect
173:38 - and it can throw off your layout so with
173:40 - box sizing set to border box any padding
173:42 - or border given to an element
173:44 - automatically gets included in the
173:46 - elements dimensions and it likely won't
173:48 - cause any strange or quirky behavior in
173:50 - your layouts so I'll keep this in now
173:52 - how about we round the borders of the
173:54 - slider using the Border radius property
173:56 - here in the slider rule 8 pixels sounds
173:59 - good to me we don't quite see the Border
174:02 - radius yet but we'll make some
174:04 - adjustments later which will make the
174:05 - slideshow appear much better on our page
174:08 - and now that we've updated our project
174:10 - titles to H3 elements let's style those
174:13 - here and slide show. CSS now we could
174:16 - Target all the H3 elements like this but
174:19 - since this CSS is specific to the slider
174:22 - we don't want it to override any
174:24 - potential Styles we write for the H3 in
174:26 - the styles.css file so what we can do is
174:29 - Select only the H3 elements that are in
174:31 - the div with the class slider with do
174:34 - slider a space followed by the H3
174:37 - selector and let's increase the font
174:39 - size of the project titles in the slider
174:42 - to 24 pixels I am noticing a bit of an
174:45 - extra Gap below the slideshow
174:47 - description displayed by the paragraph
174:49 - It's a bit nitpicky but we could remove
174:51 - the space by setting the margin of the P
174:54 - tag and the slider class to zero so I'll
174:57 - say slider P margin
175:01 - zero and good the space is gone and I
175:04 - like how that looks all right we are
175:06 - almost to the finish line now let's add
175:09 - what are referred to as containers to
175:11 - our site for better content structure
175:13 - containers will help give our sections a
175:15 - more uniform and censured look across
175:18 - different devices containers are also
175:20 - common across all Web projects for
175:23 - various reasons we'll use them to
175:25 - control the layout of content on the
175:27 - page particularly control the width
175:29 - alignment and positioning of our
175:31 - sections because notice how they're
175:32 - currently looking too wide stretching
175:35 - from one edge of the browser to the
175:37 - other so we can control the widths and
175:39 - improve the overall design of the page
175:41 - with containers and I'll have you
175:43 - implement the container ERS with a
175:45 - challenge which I'll paste here in
175:47 - prompts MD you'll interact with cat gbt
175:50 - by asking it to provide the code for
175:52 - creating containers for your site's
175:54 - content and I'll give you this prompt to
175:56 - help kick things off so what you'll need
175:58 - to do is head over to chat gbt and open
176:00 - a new chat then provide it with this
176:03 - prompt now chat GPT doesn't really need
176:05 - to know the full context of your project
176:08 - this HTML code snippet should be enough
176:10 - to give it the necessary information to
176:12 - provide you an example and CS says code
176:14 - snippet for adding containers around
176:16 - your project so you'll need to add the
176:18 - suggested CSS to the project and then
176:20 - update the HTML structure with
176:22 - containers for the projects about and
176:24 - skill sections only so go ahead and
176:26 - pause me now ask chbt and then add the
176:29 - new HTML and CSS to the
176:34 - project all right hopefully that went
176:36 - well now let's go over adding containers
176:38 - to the site together I'll start by
176:40 - copying this prompt and pasting it into
176:43 - chat gvt
176:45 - you may have gotten a different output
176:46 - but I see that I can create a container
176:48 - by defining the container class in my
176:50 - CSS and applying it to the appropriate
176:53 - section of my HTML code first I'll copy
176:56 - this container snippet and paste it into
176:58 - styles.css
177:01 - then it looks like I need to add the
177:04 - container class in the div with a class
177:07 - about content so I'll scroll down to my
177:09 - about section and here in the class
177:12 - attribute add the class container and
177:13 - make sure that both classes are
177:15 - separated by a space just like that
177:17 - looking at the container class the max
177:19 - width property applies a maximum width
177:22 - to the container and margin zero Auto
177:24 - Center aligns the container horizontally
177:27 - and then we're adding some padding for
177:29 - spacing I think a max withth value of
177:31 - 1200 pixels is too wide so I'll set it
177:34 - to a smaller value like 750 pixels and
177:37 - since we're applying 30 pixels of top
177:39 - and bottom margins to each section we
177:41 - don't need to add padding for spacing
177:43 - it's it's all being taken care of I'll
177:45 - check out the about section in the
177:47 - browser and notice that when I expand
177:50 - the browser the content does not get any
177:52 - wider than 750 pixels and I usually like
177:56 - to give containers a fluid width using a
177:59 - percentage value and this will really
178:01 - help with narrow screen sizes and small
178:03 - devices so now the container should keep
178:05 - the content at 90% the width of its
178:09 - parent and I like how that looks so
178:12 - let's move on and add containers to the
178:14 - skill section and our slideshow so first
178:18 - in the slider section we can do
178:20 - something similar here in this class
178:23 - attribute by including the container
178:26 - class and good notice how our slider is
178:29 - no longer taking up the full width of
178:31 - the page it now has width const
178:33 - strengths so it doesn't get any wider
178:35 - than 750 pixels but then it adjusts as
178:38 - needed when the browser resizes to a
178:40 - narrower size perfect finally let's take
178:43 - care of the the skill section for this
178:45 - we'll do something slightly different
178:48 - currently within the skill section
178:50 - there's no element that wraps all of the
178:52 - skills content so we'll need to create
178:54 - that with a div so inside the section at
178:57 - a div and give it the class container
179:01 - just like the other elements and this
179:03 - container div is going to wrap all of
179:05 - the skills content so just above the
179:07 - closing section tag I'll add a closing
179:10 - div tag then make sure to indent the
179:12 - content inside it and good wrapping the
179:14 - skills content within a container
179:16 - ensures that the content is horizontally
179:18 - centered and now it's consistent with
179:21 - all the other
179:22 - sections if you were able to add the
179:24 - containers to the web page and make it
179:26 - look similar to this fantastic job so
179:29 - finally now that we have all of our
179:31 - containers in place we can make the page
179:32 - more visually interesting for example
179:35 - let's make the about section Stand Out
179:37 - On the Page by applying a background
179:39 - color that stretches from one side of
179:41 - the browser to the other we'll do that
179:44 - in styles.css
179:46 - here in the about rule first I'll open
179:49 - up the space in the about element by
179:51 - applying 20 pixels of top and bottom
179:53 - padding and then we'll give it a
179:55 - background color using the background
179:57 - color property we'll set the background
179:59 - color to light gray using the value
180:02 - pound eded D Ed D and great that's
180:05 - exactly what I wanted notice how it adds
180:07 - a nice visual touch to the page and
180:10 - helps break up the
180:11 - content and it looks like I have some
180:13 - extra unnecessary CSS for the about
180:16 - section down here in the media query so
180:18 - I can delete this entire CSS rule since
180:21 - we're handling the padding for it and
180:22 - the base
180:24 - Styles all right fantastic our personal
180:27 - homepage is now complete it's quite
180:30 - amazing to see how working with an AI
180:32 - tool like chat gbt can turn a concept
180:34 - into a functioning web page now as a
180:37 - final challenge for you I want you to
180:39 - make this web page yours for example
180:42 - update the content and images and add a
180:44 - custom color scheme remember this is
180:46 - your personal web page so spend some
180:49 - time customizing it so that it reflects
180:51 - more of who you are and be sure to share
180:53 - your solution with the scrimba community
180:55 - in fact you can click on this image
180:57 - right here to head over to the today I
180:58 - did Discord Channel and share the link
181:01 - to your web page so again outstanding
181:03 - job and I'll see you back soon to build
181:05 - more cool
181:08 - projects we are taking a significant
181:11 - step forward by introducing you to get
181:13 - Hub where coders and Builders store and
181:16 - share their projects GitHub is like a
181:18 - library but for code that can be either
181:21 - public or private it serves as a
181:23 - platform for what we call Version
181:25 - Control allowing you to save your work
181:27 - at different stages and even roll back
181:29 - to a previous stage if needed and the
181:31 - best part is that it lets developers
181:33 - work together on the same project so
181:36 - whether you're working alone or as a
181:38 - team GitHub will be part of your
181:39 - building workflow we are going to take
181:42 - the personal homepage project you've
181:43 - built and put it up on GitHub setting up
181:46 - a GitHub account is pretty
181:47 - straightforward if you haven't already
181:49 - go to github.com or click right on this
181:52 - image to go there click the sign up
181:54 - button in the top right then enter your
181:56 - details and create a username for your
181:59 - account once you verify your email
182:01 - address you're all set all right so
182:04 - first to transfer your project from a
182:06 - scrim to a GitHub repository you'll need
182:08 - to download the code from the scrim onto
182:10 - your computer similar to how you did in
182:12 - the previous section of this course
182:14 - click on the gear icon in the bottom
182:16 - right corner of your scram then click
182:18 - download as zip and that's going to
182:21 - download a zip file to your computer
182:23 - unzip the file and you'll see your
182:24 - project files inside a folder now in the
182:26 - folder you might see some new unfamiliar
182:28 - files like package.json and another
182:31 - named V config.js go ahead and delete
182:34 - those files because you're not going to
182:36 - need them and I also suggest renaming
182:38 - your project folder to help you keep
182:39 - track of it and now you're ready to
182:41 - upload your project to GitHub the GitHub
182:44 - interface is quite userfriendly with
182:46 - your repositories easily accessible from
182:48 - the homepage so now let's create a
182:50 - GitHub repository often referred to as a
182:53 - repo a repo is like a project folder
182:56 - where all the files related to a
182:58 - particular project are stored to create
183:00 - a new repository click on the new button
183:02 - in the top right give your new repo a
183:04 - name like personal homepage then give it
183:07 - an optional description it's up to you
183:09 - whether to make it public or private and
183:11 - when you download a scrim it includes a
183:14 - readme file so in this case I won't
183:16 - initialize the repository with a readme
183:18 - file a readme.md file provides essential
183:22 - information about your project it
183:23 - typically includes a brief description
183:25 - of the project and instructions on how
183:28 - to use or contribute to it so I'll leave
183:30 - this unchecked then click create
183:33 - repository to finalize my settings after
183:35 - creating your new repository GitHub
183:37 - takes you to its quick setup page
183:39 - providing you instructions for adding
183:41 - files to your repository using various
183:44 - methods the drag and drop feature is
183:46 - best suited for those just getting
183:47 - started with GitHub and for small
183:49 - projects like this one so that's what
183:51 - we'll use click the link for uploading
183:53 - an existing file then open the folder on
183:55 - your computer that contains your project
183:57 - files select all the files you want to
183:59 - upload to your repository then drag
184:02 - those files and drop them onto the
184:04 - designated area that says drag files
184:06 - here to add them to your repository once
184:08 - the files are added you'll see a preview
184:10 - of the new files below okay after upload
184:13 - loing your file scroll down to the
184:14 - commit changes section here you can
184:17 - optionally add a brief description of
184:18 - the changes you made for example initial
184:20 - commit then click commit changes and
184:23 - this will commit the files to the
184:24 - repository on What's called the main
184:26 - branch and from here you might update
184:29 - your readme file for example by clicking
184:31 - this edit icon then you can set the main
184:34 - heading to my personal homepage with a
184:36 - short description below and remove
184:39 - certain parts not specific to this
184:40 - project and then commit the latest
184:42 - changes to the to the readme file and
184:45 - then from here if you make changes to
184:46 - your project and want to update the
184:48 - version on GitHub to ensure your repo is
184:50 - updated with the most recent version of
184:52 - your project simply click on the repo's
184:55 - add files button and choose upload files
184:58 - and just like earlier you can drag and
185:00 - drop the updated files here and GitHub
185:02 - will recognize these as changes to
185:04 - existing files and update them
185:06 - accordingly and there you have it your
185:08 - files up on GitHub now keep in mind that
185:10 - what we've just gone through is the
185:12 - simplest way to use GitHub in real world
185:15 - projects developers often use git a
185:17 - command line tool for more granular
185:20 - control over versioning and
185:21 - collaboration but you don't need to
185:23 - really worry about that right now
185:25 - however there are various courses and
185:27 - lessons on scrimba that you can review
185:29 - to learn more about working with GitHub
185:31 - for example this section here on setting
185:33 - up a local Dev environment and working
185:35 - with GitHub is a good place to start
185:38 - click on this image if you're curious
185:39 - about it and want to learn more but for
185:41 - now congrats you've successfully pushed
185:43 - your first project to
185:47 - GitHub we're going to blend technology
185:50 - and lifestyle to build a Smart Home
185:52 - Mobile interface that allows users to
185:54 - control various aspects of their smart
185:56 - home such as lighting temperature and
185:58 - even their favorite tunes and we'll do
186:00 - our best to give it a sleek and modern
186:02 - aesthetic touch and naturally chubbt
186:05 - will help us throughout this journey so
186:07 - let's Jump Right In this time we'll use
186:09 - several prompts to describe specific
186:11 - elements and functionalities we want in
186:13 - our interface instead of overwhelming
186:15 - chat GPT with a single complex request
186:18 - we'll ask it to help us incrementally
186:20 - hopefully that will make problem solving
186:22 - easier by breaking down complex tasks
186:25 - into manageable chunks and as Builders
186:28 - this approach allows us to clarify
186:30 - iterate and get more precise responses
186:33 - with each step so I'll kick things off
186:35 - with this prompt I'm letting chat gbt
186:37 - know that it's building a Smart Home
186:38 - Mobile interface using HTML CSS and
186:41 - JavaScript and that the interface should
186:43 - allow users to control various aspects
186:45 - of their smart home such as lighting
186:47 - temperature and music preferences to
186:49 - start I only wanted to create the HTML
186:52 - structure for the smart home interface
186:54 - I'd like it to include a header with the
186:56 - title and three main sections for
186:59 - lighting temperature and music and that
187:01 - each section should include buttons to
187:03 - control lighting temperature and music
187:05 - based on user preferences so let's see
187:07 - how chat gbt tackles this
187:10 - task all right it looks like chat gbt
187:13 - has given us some pretty fantastic HTML
187:15 - to work with now I'll start implementing
187:18 - the provided code by copying this code
187:20 - and pasting it into
187:24 - index.html in the HTML there's a header
187:26 - element containing the title and below a
187:29 - main element which holds three sections
187:32 - one for the lighting control another for
187:34 - the temperature control and a third
187:36 - section for the music Control good next
187:39 - to enhance the interface design and make
187:42 - it more in intive I want to use icon
187:44 - fonts to display light temperature and
187:47 - music icons next to each section heading
187:50 - and for the corresponding buttons I'll
187:52 - ask chat GPT to provide those using this
187:55 - prompt I'm saying hey chat GPT use icon
187:58 - fonts to display light temperature and
188:01 - music icons next to each section heading
188:03 - and for the corresponding buttons so
188:05 - I'll feed this prompt to chat gbt and
188:07 - let's see what we get it looks like it
188:10 - first provides a link to the font
188:12 - awesome Library so I'll copy it then
188:15 - paste it in the head section of
188:18 - index.html right here and then below it
188:21 - says that I need to modify the section
188:23 - headings and the buttons in the main
188:25 - section to include the icons so I'll
188:27 - copy this entire main snippet then
188:30 - replace my main element with the new
188:34 - code okay let's have a look and great
188:37 - now we see the icons display next to
188:39 - each heading as well as in the button
188:41 - controls now I think it's it's best to
188:43 - remove any unnecessary or redundant text
188:46 - in the user interface for example the
188:49 - word control in lighting control as well
188:52 - as the temperature and music Control
188:56 - sections also the word temperature in
188:58 - the increase and decrease buttons and
189:01 - I'll update the music control buttons to
189:03 - display only the text play pause and
189:08 - next and overall I think this looks much
189:11 - cleaner oh okay with the HTML and icon
189:14 - fonts in place let's apply CSS styles to
189:17 - the page with this third prompt I'll ask
189:19 - chat gbt to apply CSS styles to achieve
189:22 - a mobile friendly layout with a dark and
189:25 - Sleek design and then to use soft
189:27 - gradients shadows and the provided
189:30 - colors here for the backgrounds buttons
189:32 - and other elements hopefully chubbt can
189:35 - create an aesthetically pleasing design
189:37 - with the colors I provided so I'll feed
189:39 - this prompt to chachu BT and I get back
189:42 - the Cs CSS which I'll copy and paste
189:44 - into styles.css
189:47 - awesome I think chat GPT did a pretty
189:49 - good job on the first try so it seems
189:52 - like the smart home interface is really
189:54 - starting to take shape but there are a
189:57 - few minor adjustments we can make to
189:59 - improve the layout and I want you to
190:01 - work on those with a CSS
190:04 - challenge I'd like you to work on UI
190:07 - adjustments by first center aligning the
190:10 - content inside each section and adding
190:13 - more space around the content so that it
190:16 - looks more like this I'd also like you
190:19 - to adjust the space between the buttons
190:22 - notice how there's no space between the
190:24 - buttons when they each appear on their
190:26 - own line so you'll need to fix this in
190:28 - the challenge so pause me now work
190:31 - through these steps and I'll catch you
190:33 - soon to go over it
190:36 - together all right hopefully that wasn't
190:38 - too bad first I'll Center align the
190:41 - content inside each section using the
190:44 - text align property here and the section
190:46 - Rule and setting it to the Value Center
190:50 - and to add more spacing around the
190:52 - content in each section I'll increase
190:54 - the padding value currently it's 15
190:56 - pixels but I'll set it to a larger value
190:58 - such as 20 pixels next to adjust the
191:02 - space between the buttons I'll update
191:04 - the margin property here in the button
191:06 - rule currently there's only a 10 pixel
191:08 - margin applied to the right side of each
191:11 - button but I like to apply margin on all
191:13 - four sides of the button to prevent them
191:16 - from looking like this when each button
191:17 - is on its own line so what I'll do is
191:21 - replace margin right with the margin
191:24 - shorthand then apply a five pixel margin
191:27 - to all four sides of the button and that
191:30 - creates the spacing I'm looking for
191:31 - between the buttons much better now this
191:35 - media query at the bottom applies styles
191:37 - to the main section and button elements
191:40 - only when the browser or device is 600
191:43 - pixels or narrower I'll keep the main
191:45 - rule here but I'm good with the base
191:48 - padding of 20 pixels applied to each
191:50 - section and the base margins we just set
191:53 - to space out the buttons so I'll remove
191:56 - these two CSS rules from the media query
191:59 - if you got the control sections in your
192:01 - interface to look close to this nice
192:04 - work next up I'd like to enhance the
192:07 - lighting control by implementing a
192:09 - toggle switch instead of a button this
192:11 - will give our interface a more seamless
192:13 - and intuitive control mechanism so I'll
192:16 - use this fourth prompt to ask chat GPT
192:19 - to update the HTML and CSS to implement
192:23 - a toggle switch for the lighting control
192:25 - instead of a button and I want it to
192:27 - keep the switch color consistent with
192:29 - the rest of the interface so I'll pass
192:31 - the prompt on to chat GPT and I see it
192:35 - suggest that I replace the lighting
192:36 - control button with this label element
192:39 - so I'll copy this snippet and make the
192:41 - changes in my my lighting control
192:44 - section in this case this label element
192:47 - is being used to create a custom toggle
192:49 - switch using a checkbox an input element
192:52 - with a type of checkbox means it will
192:55 - display as a checkbox as you can see
192:57 - here in the lighting control section
193:00 - with the provided CSS we can make the
193:02 - checkbox and this span element with the
193:05 - class slider look like a toggle switch
193:07 - so here we have new CSS that selects the
193:09 - class switch as well as the input
193:11 - element and the span with the class
193:13 - slider so I'll copy this code snippet
193:16 - and add it to styles.css just above the
193:19 - media
193:21 - query all right perfect this creates the
193:24 - desired appearance of a toggle switch
193:26 - and notice how the toggle animation
193:28 - smoothly transitions the background and
193:30 - the position of the toggle Circle I see
193:33 - that's being done with this CSS here
193:36 - which apply CSS to the toggle switch
193:38 - slider only when a user clicks on it or
193:41 - when the checkbox is in a checked state
193:44 - it updates the background color and
193:46 - transforms its position using this
193:48 - special CSS translate X function this is
193:52 - what actually makes it move 26 pixels on
193:55 - the xais or from left to right so as you
193:59 - can see CSS is pretty awesome to be able
194:01 - to create effects like this right in
194:04 - your browser now it does look like we
194:06 - need to make the toggle switch wider for
194:09 - users here in the switch class I see
194:11 - that the width is currently set to 60
194:14 - pixels so let's try making it twice as
194:16 - wide by updating the width value to 120
194:20 - pixels and that looks really good now we
194:22 - need to adjust the position of the
194:24 - slider Circle when toggled on again
194:27 - that's being controlled here with the
194:30 - translate function it's set to 26 pixels
194:33 - so let's try doubling the value to 52
194:37 - pixels and that doesn't quite work we
194:40 - need to increase it by a little bit more
194:42 - more let's say 70 pixels we're almost
194:45 - there I'll try the value 85 pixels and
194:50 - yes that looks
194:52 - perfect all right so when the lights are
194:55 - toggled on the toggle switch's
194:58 - background should match the bright pink
195:00 - background of the buttons when hovered
195:02 - to better indicate an on state that's a
195:05 - quick
195:06 - change what I'll do is swap the
195:08 - background color of this slider class
195:11 - with the background color of the input
195:13 - or toggle switch when it's checked so
195:16 - I'll just cut this background color
195:17 - property out of this rule then paste it
195:20 - in the slider Rule and bring the initial
195:23 - background color property down to the
195:26 - input checked Rule and that should do it
195:29 - okay so when the lights are off the
195:31 - background color of the toggle switch
195:33 - matches the purple of the buttons and
195:35 - then when we turn the lights on it
195:38 - switches to the bright pink perfect next
195:41 - up I'd like to enhance the interactivity
195:43 - by adding a subtle glow effect behind a
195:45 - pressed or clicked button to provide
195:47 - visual feedback to the user I'm not
195:49 - feeling the bright orange background
195:51 - color that's applied to a button when
195:53 - clicked and I want you to work on that
195:55 - with this
195:57 - challenge you going to write your very
195:59 - own short prompt for chat gbt to provide
196:02 - the CSS for adding a soft glow effect
196:05 - behind a pressed or clicked button in
196:07 - the prompt I also recommend providing
196:09 - chat gbt with the CSS for your buttons
196:11 - so that it can more closely match its
196:13 - Aesthetics so pause me now write your
196:16 - prompt here and I'll meet you back soon
196:17 - to go over it
196:21 - together hey how it go hopefully you
196:23 - were able to write a prompt that
196:25 - successfully created the glow effect for
196:27 - pressed or clicked buttons I'll add my
196:30 - prompt here which says add a soft glow
196:32 - effect behind a pressed or clicked
196:34 - button remember I suggested providing
196:36 - chat gbt with the CSS for your buttons
196:39 - so I'll say here is the CSS for my
196:41 - button
196:43 - then paste the base styles for the
196:44 - button as well as the hover State Styles
196:47 - and I'll follow this up by saying that
196:49 - the glow should match the bright pink
196:51 - background of a hovered button chat gbt
196:54 - is pretty smart so it should be able to
196:56 - figure it out I'll copy and paste this
196:59 - into chat GPT and let's see it says that
197:02 - to add a soft glow effect behind a
197:04 - pressed or clicked button I can modify
197:06 - the CSS as follows it seems like the
197:09 - only thing I need to do is copy this box
197:11 - shadow property and add it to my button
197:15 - active CSS
197:17 - rule I'll test it out by clicking one of
197:20 - the buttons such as increase and cool I
197:23 - do see a soft pink glow behind the
197:26 - button although I'd like to make it
197:27 - stand out more so I'll adjust this Alpha
197:30 - transparency value to 80% by switching
197:33 - it
197:34 - to8 and that does look a little bit
197:37 - better now I do want to remove this
197:39 - orange background color when a button is
197:41 - clicked or pressed PR which is called
197:43 - the active state so I can do that by
197:45 - removing this background color property
197:48 - also to remove the default browser
197:50 - outline for a button in its active State
197:53 - we can use the outline property and set
197:56 - it to the value none now keep in mind
197:58 - that when removing the default outline
198:00 - for active buttons you should ensure
198:02 - there's some other clear visual
198:03 - indication when the button is clicked
198:05 - especially for accessibility reasons now
198:08 - we've added the background glow effect
198:09 - so I think it's safe to remove it and
198:12 - perfect the soft glow behind the buttons
198:14 - when clicked adds a nice visual touch to
198:17 - the
198:20 - interface next let's tackle temperature
198:23 - control here in the temperature section
198:25 - we'll update the code to display the
198:27 - temperature above the buttons initially
198:29 - at a comfortable 78° Fahrenheit allowing
198:32 - users to increase or decrease it by
198:35 - clicking the corresponding buttons this
198:38 - time I'll say hey chat PT please update
198:41 - the necessary code to to display the
198:42 - temperature at 78° F initially and to
198:46 - allow users to increase or decrease the
198:48 - temperature by clicking the
198:50 - corresponding buttons and I want it to
198:52 - style the temperature display
198:53 - accordingly with CSS so here you go chat
198:57 - GPT do your thing so I get back some
199:00 - HTML for updating the temperature
199:02 - control section it looks like I need to
199:04 - add this div with the class temperature
199:07 - display so I'll copy that and paste it
199:10 - just above my temperature control
199:12 - buttons I'll copy the CSS code to style
199:15 - the temperature
199:17 - display and add it to
199:19 - style.css and we get the JavaScript for
199:22 - the temperature control functionality
199:24 - I'll copy the code and paste it in
199:26 - script.js so here it's getting the
199:28 - temperature display element then setting
199:30 - the initial temperature value to 78 as
199:32 - requested it looks like this function
199:34 - updates the temperature display and this
199:37 - event handler increases the temperature
199:39 - when the increase button is clicked and
199:41 - this one decreases is the temperature
199:42 - value when the decrease button is
199:44 - clicked and then it's calling the update
199:46 - temperature display function here to
199:48 - initialize the temperature display on
199:49 - the page Let's test it out all right
199:52 - there's our temperature initially set to
199:54 - 78° fahr I'll click increase and good
199:57 - each time I click it the temperature
199:58 - increases by one and when I click
200:01 - decrease the temperature decreases by
200:03 - one the only thing I want to do is
200:06 - adjust the spacing around the
200:07 - temperature display and I can do that
200:10 - with margins here in the temperature
200:12 - display rule I see that there's only a
200:14 - top margin of 10 pixels but I can update
200:17 - this by changing it to margin 10 pixels
200:20 - top and bottom and then zero pixels left
200:22 - and right and that should do it yep
200:24 - finally let's work on the music Control
200:26 - section by implementing the play pause
200:29 - stop and next button functionality now
200:31 - we're not going to actually play music
200:33 - but we can simulate play music by
200:35 - displaying a random song name when the
200:37 - play button is clicked then clearing the
200:39 - song name when a stop button is clicked
200:42 - and clicking the next button will change
200:44 - the song to another random song as usual
200:47 - I'll ask chat GPT to provide the code
200:50 - for me with this prompt I'm asking it to
200:52 - update the code to implement the music
200:54 - Control section with play pause stop and
200:57 - next button functionality it should
200:59 - display a random funny song name when
201:01 - the play button is clicked and to make
201:03 - sure that the song changes when a user
201:05 - clicks the next button and it should
201:07 - Style the song text with CSS I'll copy
201:10 - and paste this into TBT and I get back
201:13 - the updated HTML code for the music
201:16 - Control section it looks like I need to
201:18 - add this div with a class song name then
201:20 - replace the play button and the stop
201:22 - button so I'll just go ahead and copy
201:24 - these elements here and make the
201:26 - necessary updates in the music Control
201:29 - section there we go I see the song name
201:32 - and then the play stop and next buttons
201:34 - now for the CSS I'll copy this new CSS
201:37 - code to style the div with a class song
201:40 - name and paste it in into
201:43 - style.css the text is slightly larger
201:45 - but it looks like I need to add similar
201:47 - spacing around the song text so just
201:49 - like with the temperature display I'll
201:51 - change margin top to margin 10 pixels
201:54 - top and bottom 0er pixels left and right
201:56 - all right that looks good and now the
201:58 - JavaScript I have new JavaScript code to
202:01 - handle the music control and random song
202:04 - names so I'll copy this JavaScript
202:06 - snippet and add it to script.js at the
202:10 - very top let's say below the temperature
202:13 - variable this line gets the song name
202:15 - display element and here we have our
202:17 - list of funny song names stored as
202:20 - string inside the funny song names array
202:24 - we have an is playing variable
202:26 - initialized to false and looks like it's
202:28 - tracking the current song index which is
202:30 - set to zero initially and this event
202:32 - listener here handles the play pause
202:35 - button when clicked if it's clicked
202:37 - while the song is playing it changes the
202:39 - play button to display pause otherwise
202:41 - it it changes the button to display play
202:44 - this event listener handles the stop
202:46 - button and then this one handles the
202:48 - next button by displaying a random song
202:51 - name and it seems like this function
202:53 - here is what's used to get a random song
202:55 - name all right let's test it out in the
202:58 - music Control section I'll click the
203:00 - play button and I see that the button
203:02 - text and icon switches to pause and I
203:05 - see a random song name Funky Chicken
203:07 - Dance nice when I click the stop button
203:10 - the song resets and the pause button
203:12 - switches back to play and clicking play
203:15 - displays another random song name and
203:17 - then clicking the next button switches
203:20 - the song names so it looks like the
203:22 - JavaScript functionality works perfectly
203:24 - so there isn't much work or
203:26 - customization left for us except for
203:29 - giving our smart home app a cooler name
203:31 - of course I'm not quite feeling the name
203:33 - smart home control in fact I'll even ask
203:35 - chat GPT for some name suggestions using
203:38 - this prompt help me name this smart home
203:41 - interface project Pro by suggesting
203:42 - clever product names so let's see what
203:45 - names we get
203:46 - back all right here I see names such as
203:49 - home Harmony domach Eco EAS Casa
203:53 - conductor and a few others out of these
203:55 - I'm liking the name home Harmony so I'll
203:58 - choose that one I'll update the title
204:00 - here to home
204:02 - Harmony and there we have it all right
204:05 - so that wraps up building our Smart Home
204:08 - Mobile interface with the help of chaty
204:10 - BT and as us ual I want you to customize
204:13 - this project and make it truly your own
204:15 - experiment with different colors and add
204:18 - additional features or sections like
204:20 - security water sprinkling or Appliance
204:23 - controls for example you can use the
204:25 - existing code and chat gbt to help guide
204:27 - you through it you might even try to
204:29 - rebuild the smart home interface all on
204:31 - your own using similar props and be sure
204:33 - to share your solution in the scrimba
204:35 - discords today I did channel so be super
204:38 - proud of all you've built so far and
204:40 - let's keep moving
204:44 - we are taking our Smart Home Mobile
204:46 - interface project to the next level by
204:48 - learning how to transform it into a
204:50 - truly mobile friendly app that users can
204:53 - install on their devices and
204:55 - conveniently launch from their home
204:56 - screen there are various ways we can
204:58 - achieve this but as usual I'll turn to
205:00 - chat GPT for some guidance on how to do
205:03 - this using this prompt I'm asking it to
205:06 - guide me through the necessary steps to
205:07 - make the smart home interface more
205:09 - mobile friendly by allowing users to add
205:11 - it to their devic's home screen for easy
205:14 - access I'm just picking up where the
205:16 - chat left off during the development of
205:18 - the smart home interface project so I'll
205:20 - paste The Prompt here and let's see what
205:22 - chat gbt suggests it looks like chat gbt
205:25 - provided some insightful instructions it
205:28 - says that we can achieve this by
205:29 - creating what's called a progressive web
205:31 - app or pwa in short a progressive web
205:35 - app is a web application that can
205:37 - deliver an applike experience to users
205:39 - by adding or installing it on the user's
205:42 - device without needing to go through an
205:43 - app store we're going to create a simple
205:46 - version of a progressive web app then
205:48 - below is a step-by-step guide on how to
205:50 - make the smart home interface mobile
205:52 - friendly and installable the first step
205:55 - is to ensure mobile responsiveness we
205:57 - built our interface to adapt and look
206:00 - good on various screen sizes and
206:02 - orientations in fact this metatag
206:04 - included in the head of the page make
206:06 - sure that the layout scales to fit the
206:09 - size of the device it's viewed on so
206:11 - we're all set there then it mentions
206:13 - that we need to add something called a
206:15 - web app manifest that sounds intense the
206:18 - purpose of this file is to include
206:20 - essential information about the app and
206:22 - how it should appear and work on a
206:24 - user's device and chat GPT gives us all
206:27 - the code we need to create it so I'll
206:29 - create a new file in my project and name
206:31 - it manifest.json
206:33 - then copy the provided code and paste it
206:37 - in my new file this code you see here is
206:39 - called Json which stands for JavaScript
206:42 - object notation and you might realize
206:45 - that it's very similar to JavaScript
206:47 - objects in terms of structure and syntax
206:51 - both Json and JavaScript objects share
206:53 - similar key value pair structures this
206:56 - Json code holds various properties to
206:58 - Define essential details like the app's
207:00 - name the start URL where it should open
207:03 - the display mode to determine how it
207:04 - appears on the device and the icons to
207:07 - display on the home screen so first I'll
207:09 - update the name and short name values to
207:12 - the name of my app which is called home
207:16 - Harmony now when a user decides to add
207:19 - your app to their home screen the device
207:21 - needs an icon to represent your app so
207:23 - the icons array lists the images that
207:25 - will appear on the home screen help
207:27 - users recognize our app at a glance and
207:30 - you'll often have a list of various icon
207:32 - sizes and formats ensuring the icon
207:34 - looks crisp and clear on different
207:36 - devices in this case we only have two
207:39 - listed one icon is one 92x 192 pixels
207:43 - which is a common size for many Android
207:45 - devices and the other is 512x 512 pixels
207:49 - which can be used for larger displays or
207:51 - higher resolution screens you don't need
207:54 - to worry about creating the icons
207:55 - because I've provided the two icons as
207:57 - PNG files in the icons folder this is
208:00 - what the home screen icon looks like I
208:02 - used a design tool called figma to
208:04 - create it if you're curious so now I
208:07 - just need to update the source values to
208:09 - point to my images I'll update the first
208:11 - one to icons SL ion-1 192x 192 and the
208:17 - Second Source to icons for/
208:20 - i-512 by 512 in the web app manifest
208:24 - file the start URL property specifies
208:26 - the URL where the app should start or
208:29 - open I'll set the value to a forward
208:31 - slash which typically represents the
208:33 - root or homepage of the app and the
208:36 - display property determines how the app
208:37 - should be displayed on a user's device
208:40 - setting the value to Standalone makes it
208:42 - appear and function like a standalone
208:44 - app without the browser's typical UI
208:47 - elements like the address bar or UI
208:49 - buttons which provides a more immersive
208:52 - and app-like experience the background
208:54 - color property defines a placeholder
208:56 - background color for the app to display
208:58 - immediately before the stylesheet loads
209:01 - in this case it's already set to the
209:03 - same dark purple color as the body
209:05 - background good now the theme color
209:07 - property sets the default theme color
209:09 - for various UI elements in the app like
209:12 - the title bar or
209:14 - toolbar let's set it to the lighter
209:16 - shade of purple used in the background
209:18 - gradients for each
209:21 - section and that should be it for the
209:23 - Manifest this file plays a significant
209:25 - role in giving our app the mobile app
209:28 - capabilities you can think of it as a
209:30 - blueprint that tells the device how our
209:32 - mobile app should behave and appear and
209:34 - chbt reminds us that we need to link our
209:37 - HTML file to the Manifest using this
209:39 - link tag so I'll copy it and paste it
209:42 - inside the head element this is what
209:44 - will let the browser know that the web
209:46 - app can be installed and displayed like
209:48 - a mobile app chat GPT also suggests some
209:51 - optional steps that we're not going to
209:52 - worry about for this project but you
209:54 - should test your app on various mobile
209:57 - devices and browsers to ensure that it
209:59 - looks and behaves as expected all right
210:02 - so here comes the part we've been
210:03 - waiting for to install the app on your
210:05 - device and launch it from a user's home
210:07 - screen you'll first need to deploy it or
210:10 - put it live on the web using a tool like
210:12 - netlify just like you learned in the
210:14 - previous section of this course if you
210:16 - need a refresher on how to do that click
210:18 - on this image to review the scrim on
210:20 - deploying and sharing your projects once
210:22 - your project is live on the web visit
210:25 - the live link on your phone or tablet
210:28 - for example most mobile browsers offer a
210:30 - manual way to add your web application
210:33 - to the devic's home screen for example
210:35 - in Safari on iOS you add your web app to
210:37 - your home screen by tapping the share
210:39 - button at the bottom of the browser
210:41 - browser then select add to home screen
210:44 - here you can see the home screen icon
210:46 - and you're able to customize the name if
210:48 - desired then tap add and that should add
210:51 - the app's name and icon to your home
210:52 - screen and clicking on the icon launches
210:55 - the app notice the purple colored
210:57 - toolbar at the top which we set with the
210:59 - theme color property here in the
211:01 - Manifest file and now you can start
211:03 - interacting with the smart home
211:04 - interface on your
211:06 - device so congrats this was a huge step
211:10 - in your building Journey you've
211:11 - successfully transformed your web app
211:13 - into a mobile app experience so give
211:16 - yourself a round of applause and be sure
211:19 - to share the link to your deployed
211:20 - project with friends and colleagues to
211:22 - show off what you've
211:26 - built this is a big step because now you
211:29 - are going to build a Chrome extension
211:31 - what is that well a Chrome extension is
211:33 - a small piece of software that enhances
211:35 - the browsing experience within the
211:36 - Chrome browser it often helps users be
211:39 - more efficient by tailoring Chrome's
211:40 - function fun ality towards individual
211:42 - needs and preferences these extensions
211:44 - range from simple tools like ad blockers
211:46 - note taking and password managers to
211:48 - more complex applications such as
211:50 - productivity boosters and project
211:52 - management if you visit the Chrome web
211:54 - store you can check out all the
211:55 - different types of Chrome extensions now
211:57 - building a Chrome extension might sound
211:59 - a little intimidating but worry not
212:01 - we're going to demystify the process
212:02 - together step by step with chubbt before
212:05 - we dive in let's review what we're
212:06 - building snap stash is a shopping wish
212:09 - list Chrome extension
212:11 - this extension will let users save the
212:13 - URL of their current browser tab to a
212:15 - shopping wish list the shopping list
212:17 - will display the saved items according
212:19 - to various categories such as pets books
212:22 - electronics and more and the best part
212:25 - is that the saved items persist even
212:27 - after closing or refreshing the browser
212:29 - and we'll use HTML CSS and JavaScript to
212:32 - build it once again we're building our
212:34 - extension incrementally by breaking down
212:37 - our tasks into several AI prompts and
212:39 - here is our first prompt it's designed
212:42 - to give chat gbt an overview of what
212:44 - we're trying to build a shopping list
212:45 - Chrome extension that uses HTML CSS and
212:48 - JavaScript that should let users save
212:50 - the URL of the current browser Tab and
212:52 - when a user opens the Chrome extension
212:54 - on a page with an item they like they
212:55 - should be able to select a category and
212:57 - then click a save button to add the tabs
213:00 - URL to a list displayed below and the
213:02 - list should display each item's link
213:04 - next to the selected category in this
213:06 - case the categories to select should be
213:08 - books clothes shoes Electronics pets and
213:10 - health so first I wanted to suggest a
213:12 - stepbystep guide to help me get started
213:15 - so let's see what chbt can do with this
213:17 - prompt okay it instructs us to create
213:20 - various files manifest.json pop up. HTML
213:23 - popup.js and
213:36 - popup.js
213:37 - manifest.json is at the heart of all
213:40 - Chrome extensions it defines the
213:42 - important properties of your extension
213:44 - just like the Manifest file we work with
213:45 - to turn web apps into Mobile friendly
213:47 - apps so first I'll set the name property
213:50 - to the extensions name snap stash now in
213:54 - this manifest we have properties
213:55 - different from those we worked with on a
213:57 - previous project for example we have a
213:59 - property for requesting and setting
214:01 - permissions in this case the extension
214:03 - will have permission to interact with
214:04 - the currently active browser Tab and the
214:07 - actions property sets certain browser
214:09 - actions like the default file to load
214:12 - and pop up when the user clicks to
214:13 - launch the extension in this case it's
214:16 - pop up. HTML it also sets the default
214:19 - icon that should appear in the Chrome
214:20 - toolbar it looks like we have three icon
214:23 - sizes listed here now for this project
214:25 - I'll only use the largest icon which is
214:28 - 128x 128 so I'll delete the other two
214:32 - and I've already included the icon here
214:34 - in the images folder this is what it
214:36 - should look like chat GPT gives us the
214:38 - basic setup here for Popup HTML so I'll
214:41 - copy the code and replace everything in
214:44 - my HTML with the new code the HTML
214:47 - defines the heading category selection
214:49 - the save button and the item list I'll
214:52 - make a quick change by updating the
214:54 - heading to the extension name snap stash
214:57 - and I'd also like to make a change to
214:58 - the select element displaying all the
215:00 - categories as option elements instead of
215:03 - displaying the text select a category
215:06 - here as a label I'd like this text to
215:08 - display by default as the first option
215:11 - of the select menu so how about you work
215:13 - on that so pause me now and take a
215:15 - moment to set the default select option
215:18 - to select a
215:22 - category all right hopefully you got
215:24 - that what I'll do is remove this label
215:26 - element entirely then inside the select
215:30 - element at the very top I'll add an
215:32 - option
215:33 - element I'll set its value attribute to
215:36 - an empty set of quotes and within that
215:40 - the text select a category and you'll
215:43 - often see these default options
215:44 - displayed with two dashes before and
215:47 - after the text like that so if you were
215:50 - able to create this option nice work in
215:53 - the mini browser we can see a preview of
215:54 - what it's looking like so far and next
215:57 - we'll apply some initial styles to the
215:59 - popup using this CSS I'll copy the CSS
216:02 - code and paste it into pop up. CSS now
216:06 - while I'm here I'll quickly update the
216:07 - CSS by making the body of the popup SL
216:10 - slly wider I'll change the width value
216:12 - to 300
216:14 - pixels finally let's add the JavaScript
216:17 - to popup.js
216:19 - so this JavaScript contains event
216:21 - listeners and actions that are typically
216:23 - used in the context of Chrome browser
216:25 - extensions this event listener ensures
216:27 - that the JavaScript will not run until
216:29 - the HTML is fully loaded then it's
216:32 - getting the three elements from pop up.
216:34 - HTML and assigning them to variables and
216:36 - with this code when the user selects a
216:39 - category for the item and and clicks the
216:41 - save button it first gets the selected
216:43 - category like books clothes and shoes
216:45 - and then this code here chrome. tabs.
216:48 - query is a special method provided by
216:51 - Chrome that's specific to Chrome
216:53 - extensions it's what lets you manipulate
216:55 - and interact with the currently active
216:57 - tab in the browser in this case it
216:59 - creates the HTML list item with the link
217:02 - and text to display in the item list all
217:05 - right so it looks like we have all the
217:06 - main components of our extension in
217:08 - place the next step is to load the EXT
217:10 - ition in Chrome and test it first you'll
217:12 - need to make sure that you download the
217:13 - code from your scram onto your computer
217:16 - exactly as you've done in previous
217:17 - projects after that open your Chrome
217:19 - browser and go to the URL
217:22 - chrome/ extensions it should look like
217:24 - this and once you're there be sure to
217:26 - enable developer mode by toggling the
217:29 - switch at the top right corner then
217:31 - click the load unpack button and select
217:33 - the folder on your computer containing
217:35 - the project files and make sure that the
217:37 - extension itself is enabled now now in
217:40 - your Chrome toolbar click the extensions
217:42 - icon in the top right and you should see
217:45 - your new extension icon in the list
217:47 - there it is snap stash click on it and
217:50 - the popup should appear from here you
217:51 - can visit a page with an item you like
217:53 - or wish to purchase select a category
217:56 - click save item and a link with the
217:58 - selected category will be added to the
218:00 - list and it looks like that worked
218:02 - awesome so it looks like this is a
218:04 - pretty solid foundation to build from
218:07 - and there are many improvements and
218:08 - enhancements we can make like displaying
218:10 - the items name instead of only the
218:12 - category also saving items permanently
218:15 - and removing items we'll do just that
218:17 - and more when we continue working on the
218:19 - Chrome extension in the next
218:24 - Grim okay we have our Chrome extensions
218:26 - basic structure and styles in place and
218:28 - tested that it works now let's build the
218:31 - rest of the extension first up I don't
218:33 - like how users only see the category
218:35 - name when they save an item to the list
218:37 - so let's update the extension by not
218:39 - only displaying the item name and
218:41 - category but also showing a preview of
218:44 - the item name before users select a
218:46 - category and save it and I want the
218:48 - content in the item list to persist even
218:50 - after the user refreshes or closes their
218:52 - browser that way they never lose their
218:54 - shopping list with each prompt we can
218:57 - essentially add a new layer to our
218:59 - Chrome extension so here in our second
219:01 - prompt we're letting C GPT know that the
219:03 - user should see a preview of the item
219:06 - name before selecting a category and
219:08 - saving it and that both the preview text
219:10 - item link should display an item's Name
219:12 - by accessing the current tab's title
219:14 - element which on most shopping sites is
219:17 - the name of the product that title text
219:19 - is often quite long so I want to
219:21 - truncate the item name to 50 characters
219:23 - Max and the saved items should display
219:26 - after closing or refreshing the browser
219:28 - this might involve permission updates in
219:30 - the Manifest so I'm instructing chat gbt
219:32 - to update the Manifest file as needed
219:35 - and as always add detailed comments
219:37 - explaining the JavaScript let's try this
219:39 - prompt out
219:42 - chat TBT says that I need to update the
219:44 - Manifest file to include new permissions
219:46 - and a background script to store and
219:48 - manage the saved items so I'll update
219:50 - the permissions property in my manifest
219:52 - and add the new background property the
219:54 - new storage permission grants the
219:56 - extension access to Chrome special
219:57 - service for storing and retrieving data
220:00 - like our shopping list and this new
220:01 - background property sets up a helpful
220:03 - script called a service worker which
220:05 - runs in the background and can do a lot
220:07 - of smart stuff like listen for various
220:09 - browser events and even handle tasks
220:12 - like permanently saving our items in the
220:13 - browser storage so the user never loses
220:15 - them in fact chat gbt even provides the
220:18 - code to this new background.js file so
220:21 - I'll need to create a new file in my
220:22 - project named
220:24 - background.js and paste this new code
220:27 - into
220:28 - it so this is the short script that's
220:30 - going to manage the storage of Saved
220:32 - items background.js will run in the
220:34 - background independently of the pages
220:36 - you're viewing and its purpose is to
220:38 - remember the items in the shopping list
220:41 - even when the browser is closed or if
220:43 - multiple windows of the extension are
220:45 - opened all right next to preview the
220:47 - shopping items we need to update
220:53 - popup.js
220:55 - Title and it looks like we need to make
220:57 - a pretty big update to the JavaScript
220:59 - logic in popup.js so I'll copy the code
221:02 - and replace everything that's currently
221:04 - in popup.js with the new
221:07 - code so this block of code is what
221:09 - updates the item preview based on the
221:11 - current tab's Title by accessing the
221:13 - Page's title and this is where the text
221:15 - length is being truncated to 50
221:17 - characters then the item preview text is
221:19 - being set here and it looks like the
221:22 - save button functionality was updated to
221:24 - save the selected item to storage
221:26 - chrome. storage. sync. getet and chrom
221:30 - storage. sync. set are special methods
221:32 - provided by Chrome to access its service
221:34 - for storing and retrieving data so here
221:37 - it's saving the item to storage and here
221:39 - it's upd dating the shopping list with
221:41 - the truncated item name then this block
221:44 - of code loads and displays all saved
221:46 - items from chrome
221:48 - storage all right good so it looks like
221:50 - the JavaScript is going to provide the
221:52 - functionality we need now from our
221:54 - initial test earlier it looks like the
221:56 - extension is not displaying the proper
221:58 - icon on the extensions page so I want
222:00 - you to troubleshoot this with the help
222:02 - of chat
222:03 - gbt so pause me and take a moment to
222:06 - interact with chubbt and ask it to help
222:08 - you display a 128x 128 icon for your
222:12 - Chrome extension on the extensions
222:17 - page all right hopefully chbt was able
222:19 - to help you out I'll just let cat TBT
222:22 - know that I built a Chrome extension and
222:24 - that it's not displaying the 128 x18
222:26 - icon I created for it on the extensions
222:29 - page and it says that I need to check my
222:31 - manifest file and ensure that I've
222:33 - correctly specify the path to the 128x
222:36 - 128 icon using this icons property okay
222:40 - I don't see that property in my manifest
222:42 - so let me add
222:43 - it I'll include it just below the action
222:46 - property okay it looks like we're ready
222:48 - to test the latest changes now we can't
222:51 - run and test our updates here in the
222:52 - scrim so make sure the project folder on
222:54 - your computer has all the latest updates
222:57 - then head back over to the Chrome
222:59 - extensions URL and click the refresh or
223:02 - reload button here in the extension and
223:04 - that will load all the latest file
223:06 - updates for the extension I immediately
223:08 - see the extensions icon that's a great
223:10 - sign and if I visit a products page I
223:12 - see the truncated preview of the item's
223:14 - name at the top good I'll test selecting
223:17 - a category and save the item to the list
223:20 - which displays the item name next to its
223:21 - category and now the saved items will
223:24 - remain intact across browsing sessions
223:26 - multiple windows and even after closing
223:29 - and reopening the browser perfect moving
223:32 - forward let's give users more control
223:34 - over their item list by letting them
223:36 - delete items I'll ask chat gbt to allow
223:39 - you users to delete items from the
223:41 - shopping list permanently and that each
223:43 - delete button should display a delete
223:45 - icon using an icon
223:50 - font okay first I need to include the
223:52 - font awesome Library CSS to display the
223:55 - delete icon in my popup HTML file there
223:59 - we go and then I need to modify the code
224:01 - in popup.js it looks like I have to
224:03 - update this entire block of code that
224:05 - loads and displays saved items from
224:08 - storage because now it includes the code
224:10 - to create delete buttons next to each
224:12 - item list and run the delete
224:14 - functionality when a user clicks delete
224:16 - so I'll copy this full code
224:19 - block then replace this block here with
224:22 - all the new
224:24 - code and below this code block I need to
224:27 - include this new delete item function
224:29 - which holds the logic to permanently
224:31 - delete a saved item from Storage so I'll
224:34 - grab this code snippet and add it here
224:36 - in popup.js
224:38 - and I even get new CSS to lay out the
224:41 - item container using flexbox and style
224:43 - the delete button so I'll copy the new
224:45 - CSS and add it to popup
224:48 - CSS and here I'll make some updates to
224:50 - the button's color I'll change the
224:52 - background color to a light gray and the
224:56 - color to a shade of black with the value
224:58 - pound 999 I also want to add a small gap
225:01 - between the item name and delete button
225:03 - in each item container so here in the
225:05 - item container rule I'll set the Gap
225:07 - property to 10 pixels
225:10 - before testing the extension again I'll
225:12 - update the color of the extension's name
225:14 - to a dark shade of blue here in the H1
225:17 - property like so I'll also select the
225:21 - item links and style them with a
225:22 - different color let's set it to a bright
225:25 - shade of blue with this value and
225:28 - increase the line height to 1.5 so that
225:31 - the text doesn't look too cramped I also
225:33 - want to add some base styles for the
225:35 - select menu and buttons first I'll
225:38 - select the button element and set its
225:40 - background color let's make it blue with
225:43 - this value I'll remove the button
225:45 - default borders by setting the Border
225:47 - property To None its text color to
225:51 - white make its font weight
225:54 - bold and set the user's cursor to the
225:57 - pointer when they interact with the
226:00 - button now I'll Target both the select
226:02 - element and the button in the same CSS
226:04 - rule just like that and here I'll apply
226:07 - some padding let's say 5 pixels top
226:09 - bottom and 10 pixels left and right and
226:12 - apply rounded Corners with the Border
226:14 - radius property I'll set it to four
226:16 - pixels and I'll also delete this group
226:18 - selector for the label select and button
226:21 - because I don't want to display them as
226:22 - block or on separate lines and the
226:24 - bottom margin will not be
226:26 - necessary okay to test all the latest
226:28 - updates make sure the project folder on
226:30 - your computer is up to date then in the
226:32 - Chrome extensions page click the reload
226:35 - icon visit a project page and launch the
226:37 - extension with these changes each item
226:39 - in the shopping list should have a
226:40 - delete button next to it displaying a
226:42 - trash can icon and they do awesome when
226:45 - a user clicks the delete button the
226:46 - corresponding item gets removed both
226:48 - from the UI and from Storage great the
226:52 - last feature I'd like to implement is to
226:54 - organize all saved items based on their
226:56 - category this would allow users to find
226:58 - items in their list easily so I'll ask
227:01 - chbt to display the saved item links as
227:04 - separate lists based on their category
227:06 - and to be sure that I don't miss
227:07 - anything I wanted to provide the fully
227:10 - updated code with detailed comments so
227:12 - let's see what CBT can do with this
227:15 - prompt the code in the Manifest
227:17 - background.js and
227:36 - popup.js file with this new code from
227:38 - chat gbt just to be sure that I don't
227:40 - miss anything it looks like this new
227:43 - block of JavaScript adds and saves an
227:45 - item to a specific list based on its
227:48 - category and here it uses what's called
227:50 - a loop in programming to create and
227:52 - display a separate heading and list for
227:55 - each category and please do take a
227:57 - moment to ask chat TPT to clarify any
227:59 - confusing code or concepts you've come
228:01 - across I really want you to get used to
228:04 - leaning on chat GPT for
228:05 - help before testing the latest changes I
228:08 - have some Java script challenges for you
228:11 - currently in the item preview text we
228:13 - see the word item in front of the name I
228:16 - think this is a bit unnecessary so I'd
228:18 - like you to look through the JavaScript
228:19 - code and find the code that generates
228:21 - the preview text and update it to remove
228:23 - the word item also the preview text
228:26 - should be cleared immediately after
228:28 - adding the item to its category list so
228:30 - I'll need you to update the JavaScript
228:32 - to clear the item preview after the user
228:35 - clicks the save button so pause me now
228:37 - and work through these
228:41 - all right hopefully that went well first
228:44 - this code here is what displays the item
228:47 - preview text I do see the word item here
228:50 - I just want to set the text content to
228:52 - the truncated title so I'll replace this
228:54 - by only referencing the value of
228:56 - truncated title like that next this
229:00 - event listener saves items to a category
229:03 - list when the user clicks the save
229:05 - button so I can clear the item preview
229:07 - text here with item preview. text
229:11 - content and set it equal to an empty
229:14 - string so if you got both of these
229:17 - fantastic finally let's wrap this up by
229:20 - customizing the layout of the Chrome
229:22 - extension first I'll select the main
229:24 - heading and the category heading all in
229:26 - the same Rule and set their color to
229:29 - this color value here that's in the H1
229:31 - rule to apply the same color to both and
229:35 - I also want to close up any extra
229:37 - default space that appears below the
229:39 - category or headings by setting the
229:40 - bottom margin of H2 elements to zero so
229:44 - now I want to enhance the select menu
229:46 - and button layout so I'll start by
229:49 - placing them inside a div with the class
229:53 - controls just like
229:55 - that and then I'll Target the controls
229:58 - class in my CSS and I want to display
230:01 - the controls div using flexbox with
230:04 - display Flex that way both the select
230:06 - element and button display on the same
230:08 - line all add a 10 pixel gap between them
230:12 - and create some visual space around the
230:14 - top and bottom sides with margins so
230:16 - first margin top let's say 15 pixels and
230:20 - I'll set margin bottom to 20
230:23 - pixels and since we're using flexbox I
230:26 - want the select menu to stretch and take
230:29 - up all available space within the
230:31 - controls container so I'll Target the
230:33 - select element and use a special flexbox
230:36 - property called flex and set it to one
230:38 - you'll see exactly how this works when
230:40 - we test the extension soon and finally I
230:43 - want to update the background color of
230:44 - the save button on Hover the button
230:47 - element is inside the div with the class
230:49 - controls so I can Target just this
230:51 - button with controls space button and
230:55 - then colon
230:57 - hover so on Hover we'll change the
230:59 - background color to a lighter shade of
231:01 - blue all right it's time to test our
231:04 - updates so again be sure the project
231:06 - folder on your computer has all the
231:08 - latest files then click the extensions
231:10 - reload button and visit a product page
231:13 - the updated select menu and button
231:15 - layout looks great notice how the select
231:17 - menu stretches to take up most of the
231:19 - available space and I see the preview
231:22 - text with the item name only and
231:24 - selecting a category then clicking save
231:27 - places the item in a category list and
231:30 - notice how the preview text gets cleared
231:32 - after saving an item great so it looks
231:35 - like we're done and let's not
231:37 - underestimate the scale of what we've
231:38 - accompl accomplished here you didn't
231:40 - just build a Chrome extension you
231:42 - created something that uses data
231:44 - persistence essentially setting up a
231:46 - mini database within the browser thanks
231:48 - to Chrome storage that is just
231:55 - wild let's take a moment to walk through
231:58 - how to automate your project deployment
232:00 - with GitHub and netfi this is an
232:02 - integral part of building and deploying
232:04 - projects and it's much simpler than it
232:06 - might initially seem as you know GitHub
232:08 - is your platform for Version Control and
232:11 - source code management and netlify
232:13 - allows you to host and deploy your
232:14 - projects now that you have some projects
232:16 - up on GitHub and your netlify account is
232:18 - set up I'll teach you how to combine
232:20 - them to automate your deployment process
232:22 - using the personal homepage project we
232:24 - built earlier in the section I've got my
232:26 - GitHub repo all set up and here we go to
232:29 - start head over to netlify.com and if
232:32 - you're not logged in go ahead and log in
232:33 - using your GitHub account once you're on
232:36 - nfi's main dashboard go to the site
232:38 - section and click add new site and
232:41 - select import an existing project then
232:44 - netlify asks which platform you want to
232:46 - deploy with click on deploy with GitHub
232:49 - having authorized netlify to access your
232:51 - GitHub repositories you'll be presented
232:53 - with a list of all your repositories and
232:56 - you can select the one you want to
232:57 - deploy if you don't immediately see it
232:59 - in the list you can search for it using
233:01 - this field click on the repository and
233:04 - then you'll be asked to set your
233:05 - deployment settings this includes
233:07 - specifying the branch to deploy which is
233:09 - usually main as well as any build
233:11 - commands and the publish directory now
233:13 - these build settings are for more
233:15 - complex sites and apps that require
233:17 - something called a build tool and a
233:19 - special publish directory we don't need
233:21 - to worry about any of these settings for
233:22 - the simple personal homepage so we can
233:25 - leave all of these optional Fields blank
233:27 - then click deploy personal homepage
233:29 - toward the bottom and netfi kicks off
233:32 - the process of deploying the site it
233:34 - will upload your files and give you a
233:36 - unique URL to your live site
233:40 - with this process netlify doesn't just
233:42 - deploy your project once it's always on
233:44 - the lookout for any changes you make in
233:46 - your GitHub repository from here on
233:49 - anytime you update your repository with
233:51 - changes to your project netlify will
233:53 - automatically update your live site this
233:56 - way you can be sure your live site
233:58 - always reflects the latest version of
234:00 - the code in your GitHub repo all right
234:03 - and that's all there is to automating
234:04 - the deployment process with GitHub and
234:06 - NFI you'll surely find it to be a
234:09 - valuable tool in your building and
234:10 - deployment
234:14 - workflow we've reached the end of this
234:16 - section and let me tell you you should
234:18 - be incredibly proud of your journey so
234:20 - far you've conquered more complex
234:22 - projects and challenges while further
234:24 - embracing the power of generative AI
234:27 - we've accomplished quite a bit together
234:28 - from building an interactive project
234:30 - slideshow to bringing the face bump game
234:32 - to life and building and launching your
234:35 - very own homepage and we had a ton of
234:37 - fun creating a mobile friendly Smart
234:38 - Home interface and even a Chrome
234:40 - extension so take a moment to Pat
234:42 - yourself on the back reflect on what
234:43 - you've built and learned so far and
234:45 - maybe even take a short break you've
234:46 - earned it now there's a lot more to
234:49 - explore in the world of AI coding as
234:51 - mentioned in the previous section I'll
234:52 - continue adding more sections to this
234:54 - course featuring new more complex
234:56 - projects and I would love it if you'd
234:58 - share your thoughts feedback and
234:59 - suggestions about this course and any
235:01 - ideas for projects you'd like to build
235:03 - in future sections clicking on this
235:04 - image will take you directly to the
235:06 - short feedback form so I'll see you back
235:08 - soon in and I look forward to hearing
235:10 - from you and checking out your projects
235:12 - happy
235:15 - building hey again awesome Builders so
235:17 - we've been on a pretty incredible
235:19 - journey exploring building projects with
235:22 - HTML CSS and JavaScript all with a touch
235:25 - of AI assistance and now in this section
235:28 - we're stepping into the fascinating
235:30 - world of Firebase a tool powered by
235:32 - Google to elevate your skills and build
235:35 - apps that save and manage data with
235:37 - Firebase you can quick connect your
235:39 - projects to a database to store and
235:41 - display the most upto-date information
235:44 - making it accessible to anyone any time
235:47 - so let's take a glimpse at the exciting
235:48 - projects that are in store for you we'll
235:50 - start by unraveling what Firebase is and
235:53 - why it's a game changer in app
235:55 - development then we'll walk through
235:57 - setting up Firebase your first step
235:59 - towards building Dynamic apps and we'll
236:01 - get Hands-On quickly by taking the
236:03 - interactive event invite project you
236:05 - built and hooking it up to a Firebase
236:07 - database using users will be able to add
236:10 - and save messages for attendees to read
236:12 - but that's just the beginning we've got
236:14 - a lot more in store after that you'll
236:16 - build an app called Kudos Delight that
236:18 - spreads Joy with random compliments
236:21 - harnessing realtime Firebase features
236:23 - you'll be able to add and save kudos to
236:26 - the database and randomly display them
236:28 - to anyone using the app then you'll
236:30 - create a fun pull app you can use with
236:32 - colleagues called lunch vote to help
236:34 - decide on lunch spots you'll get
236:36 - hands-on experience with creating a real
236:38 - time voting app and finally you'll
236:41 - develop an app called Road wallet that's
236:43 - perfect for Road Trippers to add manage
236:46 - and split expenses as we build these
236:49 - projects remember our goal Remains the
236:51 - Same to help you build amazing projects
236:53 - that persist data using AI assistance
236:56 - and not get overwhelmed by technical
236:59 - complexities we are here to push the
237:01 - boundaries of your comfort zone
237:02 - encouraging you to take challenges that
237:05 - might seem daunting at first this
237:07 - section is all about building and diving
237:09 - into app development with Firebase using
237:11 - AI as your guide and before we jump into
237:14 - the world of Firebase please do share
237:16 - your excitement let your scrimba
237:18 - colleagues know that you're starting
237:19 - this section in the today I will Discord
237:21 - Channel you can head over to the channel
237:23 - by clicking right on this image all
237:26 - right so if you're ready to ignite your
237:27 - projects with Firebase let's get started
237:30 - and keep on building
237:34 - together all right let's get going with
237:36 - adding Firebase into the mix fire
237:38 - Firebase is userfriendly for beginners
237:41 - yet powerful enough for advanced
237:43 - projects and it will be your gateway to
237:45 - creating database powered realtime
237:47 - projects by real time I mean
237:49 - applications that can store sync and
237:51 - display data between your users as soon
237:54 - as it's created or updated so first a
237:57 - little insight into Firebase Firebase is
237:59 - currently being developed and backed by
238:01 - Google and it provides a comprehensive
238:04 - Suite of tools designed to help you
238:06 - develop highquality apps and even games
238:09 - most developers use Firebase to build
238:11 - and handle what's referred to as the
238:13 - backend or server side of an app that's
238:15 - where all the data processing and
238:17 - storage happens essentially serving as
238:19 - the engine that powers the app's
238:21 - functionality Now setting up and
238:22 - maintaining a database can be a hassle
238:25 - as you'll experience the true beauty of
238:27 - Firebase lies in its Simplicity and
238:29 - power making app development accessible
238:31 - to everyone including those new to
238:33 - coding a standout feature of Firebase is
238:36 - its realtime database which which keeps
238:38 - data in sync across all users and
238:41 - devices whether web or mobile so this
238:43 - means that when you update data in the
238:45 - database like adding updating and
238:48 - removing items from a shopping list app
238:50 - for example all users connected to your
238:53 - app receive these updates instantly
238:55 - without the need for the user to reload
238:57 - the app so you'll find that this feature
238:59 - is particularly useful in scenarios like
239:02 - messaging online polls registration apps
239:05 - or collaborative tools where changes
239:06 - made by one user are instantly visible
239:09 - to all other users but why have me
239:11 - explain the details when you can ask
239:13 - chat gbt and learn more you can feed it
239:15 - a simple prompt like I'm just learning
239:17 - about Firebase can you explain how
239:19 - firebases real-time database Works in
239:21 - simple non-technical terms and how I can
239:23 - use it in a web application and with
239:25 - this prompt you should hopefully get a
239:27 - detailed yet simple explanation with
239:29 - practical examples of Firebase so here
239:31 - for instance it says that you can use
239:33 - Firebase as real-time database for data
239:35 - storage real-time updates
239:37 - synchronization AP access authentication
239:40 - and more okay so next up we'll get into
239:42 - setting up Firebase in a project and
239:44 - start using some
239:48 - features before we get building I'll
239:50 - quickly show you how to get set up with
239:52 - Firebase and create your very first
239:54 - database using firebases real-time
239:56 - database this will be your first big
239:58 - step towards building Dynamic real-time
240:00 - prototypes and apps make sure you have a
240:02 - Google account as it's required to use
240:04 - Firebase if you don't have one now is
240:06 - the perfect time to create it if you're
240:08 - ready first visit the Firebase website
240:10 - at firebase.com then click on get
240:13 - started from here you can create a new
240:15 - project by clicking on the create a
240:17 - project button give your project a name
240:19 - this can be anything related to your app
240:21 - or idea I'll name it first database then
240:24 - click continue it might ask you if you
240:27 - want to enable Google analytics for your
240:28 - Firebase project I'll choose not to
240:30 - enable it by toggling it off then click
240:33 - create project then after a little while
240:36 - boom you've got your Firebase project
240:38 - the Firebase console is where you can
240:40 - manage your apps monitor performance and
240:43 - access various Firebase features once
240:45 - here be sure to spend a moment exploring
240:48 - as there's quite a bit to discover now
240:50 - as I mentioned we're only going to be
240:52 - concerned with the realtime database so
240:54 - let's create our actual real-time
240:56 - database here in the Firebase console
240:58 - navigate to the realtime database
241:01 - section under the build menu once there
241:04 - click on create database first you'll
241:06 - need to set a location set for where
241:09 - your real-time database will be stored
241:11 - so go ahead and choose a location that's
241:12 - closest to you I'll stick with us
241:15 - Central 1 then click next then you're
241:17 - asked to set up some security rules for
241:19 - example do you want to allow other users
241:22 - read and write access to your database
241:24 - and you have some options here for
241:26 - instance you can start in what's called
241:27 - locked mode to make your data private by
241:30 - default but I'll go ahead and start in
241:31 - test mode which allows you to experiment
241:34 - more freely without strict security
241:36 - rules I'll click enable and and now the
241:38 - database is all set up the first thing
241:40 - you want to look for is this reference
241:42 - URL which is what you'll use to interact
241:44 - with your real-time database now
241:46 - connecting to Firebase and interacting
241:48 - with your database does take some
241:50 - initial configuration but no worries
241:52 - because we've got the setup covered for
241:54 - you scrimba offers a Firebase template
241:56 - you can use to build projects using
241:58 - Firebase including a basic Firebase
242:01 - configuration for your web app for now
242:03 - all you need to do is copy this
242:05 - reference URL here in your database then
242:08 - paste it as the value for this database
242:11 - URL property in the scrim so go ahead
242:13 - and replace what's there now with my
242:16 - database reference URL our database is
242:18 - currently empty so let's try adding some
242:20 - data to it the Firebase template
242:22 - provides a simple UI to kick things off
242:25 - for you for example if I type test data
242:28 - here in the text field then click push
242:30 - to DB it should push the text into my
242:33 - database now my test database has a
242:35 - reference called things as you can see
242:38 - here here in the Firebase configuration
242:39 - so any data I push to it will be stored
242:42 - under this reference named things okay
242:45 - so now we can see the things reference
242:47 - added to the database console and
242:49 - expanding it shows the submitted test
242:52 - data text fantastic all right let's add
242:54 - some more data the real-time database
242:56 - updates data synchronously or in real
242:59 - time so if I click on the plus icon next
243:01 - to the things reference name I can add a
243:04 - new entry for example I'll add a message
243:07 - key with the value you hello from
243:09 - Firebase then click add notice how that
243:12 - new data instantly appears here in the
243:15 - app all right and there you have it
243:16 - you're all set up with firebases
243:18 - real-time database up next we'll dive
243:20 - deeper into how to interact with your
243:22 - Firebase database using
243:26 - JavaScript we are going to start by
243:28 - integrating Firebase into a project and
243:31 - creating functionality to save and
243:33 - display messages all while using chbt to
243:36 - guide us through this process so let's
243:38 - Jump Right In this project should look
243:40 - familiar it's the interactive GIF Gayla
243:43 - invite you built in a previous section
243:45 - the only difference is that I've
243:46 - introduced a message input field that
243:48 - displays only if the user selects yes I
243:51 - will be there that way they can submit
243:53 - an optional fun message for all to view
243:56 - and that will be done with Firebase when
243:58 - users RSVP to the event and submit a
244:01 - message will'll save the message to the
244:03 - database then display all the messages
244:06 - here in a list the message list will
244:08 - update in real time highlighting
244:10 - firebases real-time database
244:12 - capabilities all right so I've got the
244:14 - initial Firebase config all set up once
244:16 - again this is using code from our
244:18 - Firebase scrim template if you're
244:19 - curious about it this is what's called
244:21 - an import statement in JavaScript and
244:24 - this Imports a function from the
244:25 - Firebase app Library named initialized
244:28 - app so we're able to use it from this
244:30 - file and this function is used to
244:32 - initialize the Firebase app with a given
244:34 - configuration and Below we are bringing
244:37 - in a few other functions options related
244:38 - to the Firebase real-time database like
244:40 - get database ref push and on value then
244:44 - here in the app settings object I'm
244:46 - defining the reference URL to my
244:48 - Firebase realtime database and the line
244:51 - below initializes the Firebase app with
244:54 - the configuration defined in app
244:56 - settings after initializing the app this
244:59 - line retrieves the database instance
245:01 - associated with the initialized Firebase
245:04 - app and this creates a reference to a
245:07 - specific p path in your database in this
245:09 - case the messages path as you learned in
245:12 - the previous scrim we can use this
245:13 - reference to read from or write to the
245:16 - database I went ahead and created a new
245:18 - project in my Firebase console named GIF
245:20 - Kayla just as we did in the previous
245:22 - scrim and set up a realtime database for
245:25 - it and this is my special URL to connect
245:28 - to the database please do the same if
245:30 - you'd like to build upon this invite
245:32 - project now I don't want anyone else to
245:34 - be able to access this and write to my
245:36 - database so I'll show you a way to hide
245:39 - this URL using what's called an
245:41 - environment variable on scrimba so I'll
245:43 - bring up the environment variable
245:44 - dialogue window on scrimba you can
245:46 - access it with a keyboard shortcut
245:48 - command shift e if you're on a Mac or
245:50 - windshift E for Windows and then create
245:53 - a new variable called GIF Gaya DB
245:56 - exactly as shown here then set its value
245:59 - to my Project's database URL click add
246:02 - variable and now I can access this URL
246:04 - from my scrio projects using process.
246:07 - EMV do the variable name so I can
246:10 - replace the database URL here with
246:13 - process.
246:15 - env.
246:17 - Gore Galore DB and that's going to work
246:21 - exactly the same way while keeping my
246:23 - URL hidden to learn more about
246:25 - environment variables on scrimba be sure
246:27 - to check out this blog post written by
246:28 - the scrimba team you can click right on
246:30 - this image to head over to the post all
246:32 - right now let's work with chat GPT to
246:34 - bring Firebase into our project there
246:36 - shouldn't be a whole lot we need to do
246:38 - so what I'll do is use this initial
246:40 - prompt here that asks chubbt to First
246:44 - evaluate my existing JavaScript code
246:46 - which I'll provide here between the back
246:48 - ticks then based on the code it needs to
246:51 - add the Firebase real-time database to
246:54 - this project it should save only the
246:57 - submitted messages to the database if
246:59 - the value of attendance is strictly
247:01 - equal to yes or if the user selects yes
247:04 - I'll be there and all of the latest
247:06 - messages data needs to appear as list
247:08 - items in the messages list which is this
247:11 - UL element here with the class messages
247:14 - and I also want chat GPT to add detailed
247:17 - comments to help me understand the new
247:18 - Firebase code all right so I'll copy
247:21 - this prompt and feed it to chat GPT with
247:24 - all of the code I have here in my
247:26 - script.js file and it looks like I get
247:29 - back all the code I need to add Firebase
247:31 - realtime database to my event invite
247:34 - project so let's quickly review this new
247:36 - code I see that we're bringing in a new
247:38 - function from Firebase push and it's
247:41 - using push here to save each message to
247:44 - the database only if the attendance
247:46 - value is equal to yes so that one line
247:50 - here should take care of saving the data
247:52 - then it gives me this code here to
247:54 - display the messages from the database
247:56 - on the page now since we're working with
247:58 - a real-time database we need to listen
248:01 - for any changes in the database so
248:03 - firebases onv Value method does just
248:06 - that it data and listens for changes
248:09 - each time a user submits the form with a
248:12 - message new data gets added to Firebase
248:15 - then this function gets called every
248:17 - time data is changed at the specified
248:19 - database reference so it fetches all the
248:21 - data so that we can display it and this
248:23 - code Loops through all the messages
248:25 - return from the database and adds them
248:27 - as list items inside our unordered list
248:31 - all right so I'll add this new code to
248:32 - my project by clicking copy code then
248:35 - replacing everything in script. JS with
248:38 - this new code and let's try it out I'll
248:41 - first add an email address for example
248:44 - Gil at
248:46 - scrimba then for attendance I'll select
248:48 - yes I'll be there that brings up the
248:50 - message input field and I'll add a
248:52 - message like I can't wait to see
248:55 - everyone then click submit I get the
248:58 - party on we look forward to seeing you
248:59 - at the GIF Gaya confirmation message
249:02 - then if I scroll down and click the show
249:04 - messages button yes I see the message I
249:07 - submitted I can't wait to see everyone
249:09 - Gil great all right let's test out a few
249:12 - more messages let's add test at
249:15 - test.com then select yes I'll be there
249:18 - and as the message I'll type bringing
249:20 - the most epic costume click submit then
249:24 - let's see great I see the new message
249:26 - added to my messages list I'll add one
249:29 - more message let's say I'm counting down
249:31 - the days click submit and good I see the
249:36 - message appear in the list list now if I
249:38 - have a look at my database in the
249:40 - Firebase console I can see all of the
249:42 - submitted messages under the messages
249:44 - reference awesome so now even when a
249:47 - user refreshes the app or closes the
249:50 - browser window then revisits it they'll
249:52 - still be able to see all of the messages
249:55 - on the page all right so you learn how
249:57 - to integrate Firebase into an existing
249:59 - project and these are pretty much the
250:01 - steps to follow for most projects you
250:03 - want to connect to the real-time
250:04 - database so nice work let's keep going
250:10 - all right now we're going to spread some
250:12 - positivity and Delight by building quite
250:14 - the unique web app a compliment
250:16 - generator you can use to brighten
250:18 - someone's day with a simple kind message
250:21 - and we'll use Firebase with chat gbt to
250:23 - make this happen our compliment
250:25 - generator is named Kudos delight and it
250:27 - will randomly select compliments or
250:29 - Kudos from a database and display them
250:31 - to users but that's not all users can
250:34 - also submit their own compliments making
250:36 - our generator a a constantly evolving
250:38 - pool of positivity so we'll get to do a
250:41 - little random data retrieval with
250:42 - Firebase which should be fun all right
250:44 - first if you want to run this project
250:46 - for yourself you'll need to create a new
250:48 - project in Firebase for the compliment
250:50 - generator project and set up a real-time
250:52 - database for it just like I've shown you
250:54 - in previous projects now I've done all
250:57 - that and saved my database URL as an
250:59 - environment variable on scrimba named
251:01 - Kudos DB just like this and I've also
251:04 - set up a simple yet inviting U bu for
251:08 - our compliment generator so you won't
251:09 - have to worry about the HTML styling and
251:12 - basic JavaScript functionality so let's
251:15 - quickly go over the HTML for the app as
251:17 - you can see here in the body I have a
251:19 - div with a class container and within
251:21 - that we have an H1 with the app's name
251:24 - and then a paragraph to display all the
251:26 - compliments and below the paragraph We
251:28 - have a button to fetch all the
251:30 - compliments from the database and then
251:32 - we have a toggle button that when
251:34 - clicked shows and hides the form to
251:37 - submit kudos to the
251:39 - database over in the JavaScript I have
251:42 - all the initial Firebase configuration
251:44 - as you've seen before with a reference
251:47 - named compliments then I'm selecting
251:50 - some page elements like the button
251:52 - compliment display and form elements and
251:54 - assigning them to variables and finally
251:57 - a toggle form event listener to show and
252:00 - hide the Kudo submission form and set
252:02 - the toggle button text based on whether
252:04 - the form is hidden or not so that's how
252:07 - changing the button text from add kudos
252:09 - to hide form for example and showing and
252:12 - hiding the form all right it's time to
252:14 - set up our Firebase project you should
252:17 - have created a new project in the
252:18 - Firebase console and set up the
252:20 - real-time database for it so I'm going
252:22 - to ask you to work on the first part of
252:24 - this on your own with a challenge we
252:27 - want to let users contribute kudos to
252:30 - the app via the form and the database so
252:33 - you are going to use the provided prompt
252:36 - to program the submission form to add
252:38 - new complement to the database let's
252:41 - have a look at the prompt here in
252:42 - prompt. MD this prompt lets the AI know
252:45 - that you'd like to build a compliment
252:47 - generator that randomly selects
252:49 - compliments from a Firebase real-time
252:50 - database and display them to users and
252:53 - first it needs to program the submission
252:55 - form to let users add new compliments to
252:57 - the database and that it should use your
252:59 - Firebase config and existing project
253:02 - code as a reference so you'll need to
253:04 - provide all of the code here in index.js
253:06 - between the triple back ticks we also
253:09 - want detailed comments added to the new
253:11 - code to help us understand it all right
253:13 - so give this challenge a go now and I'll
253:16 - catch up with you when you're done to go
253:17 - over this first part
253:21 - together okay hopefully you were able to
253:23 - do that now I'll give it a whirl keep in
253:25 - mind that the solution you got was most
253:27 - likely different than mine and that's
253:29 - totally fine as long as you got it to
253:30 - work in a similar way all right so I'll
253:33 - copy my prompt here and feed it to chat
253:36 - GPT T including all of my starter code
253:39 - from
253:41 - index.js all right good so I got back
253:43 - all of the code for adding new
253:45 - complements to the Firebase realtime
253:47 - database so what I'll do is copy this
253:49 - function to handle form submissions from
253:52 - the provided code snippit and paste it
253:54 - in
253:55 - index.js all right let's go over this
253:57 - new code so we have an event listener
253:59 - added to the compliment form to handle
254:02 - form submissions when the form is
254:04 - submitted we prevent the default form
254:07 - submission Behavior here with e. prevent
254:09 - default then we get the value from the
254:11 - input field and trim it this trim method
254:15 - cleans up the submission by removing any
254:17 - leading and trailing spaces tabs or line
254:20 - braks from the string if necessary then
254:22 - if there is a new complement or if the
254:25 - value of new complement is not an empty
254:27 - string it pushes the string to the
254:30 - Firebase database as a new complement
254:32 - and then after successful submission we
254:35 - clear the input Fe field then hide the
254:38 - submission form by setting its class to
254:40 - Hidden and then update the button text
254:43 - accordingly so in this case it's setting
254:45 - the button text to add
254:47 - Kudos finally in any case of Errors
254:49 - during the submission process an error
254:51 - message is logged to the console here in
254:53 - the catch method so this catches any
254:56 - errors then displays them in the console
254:58 - here with console. a all right I'll test
255:01 - this out by submitting a Kudo here let's
255:04 - say your jokes are truly hilarious
255:07 - then click submit and checking my
255:10 - database in the console does in fact
255:11 - show that my compliment was submitted
255:13 - great so there's officially some
255:15 - communication between my project and the
255:17 - database now this was just a test
255:19 - submission so I'll delete this from my
255:21 - Firebase database because soon I'll want
255:23 - to test what the app displays when there
255:25 - are no compliments in the
255:31 - database all right so now let's work on
255:33 - the most important part of our project
255:34 - fetching compliments from the Firebase
255:36 - database and displaying them on the page
255:39 - for that I'll add a new prompt here to
255:41 - my promptmd file this prompt asks the AI
255:45 - to write the functionality that gets the
255:47 - compliments data from Firebase then
255:48 - displays a random compliment to the user
255:50 - each time they click the generate
255:53 - button and you'll do this with a
255:55 - challenge I want you to use chubbt by
255:58 - feeding it this prompt to add the
256:01 - JavaScript to connect the generate
256:02 - button to Firebase retrieve the
256:04 - compliments and display one random
256:06 - compliment to the user so go ahead and
256:08 - work through this challenge now and when
256:10 - you're done join me back to go over it
256:15 - together all right hopefully you were
256:17 - able to make this happen now I'll give
256:19 - it a go I'll copy this prompt then paste
256:22 - it into chat gbt and good it looks like
256:25 - I get back the code snippet to fetch
256:27 - compliments from the Firebase database
256:29 - so I'll copy this new code and paste it
256:32 - here in
256:34 - index.js all right let's quickly go over
256:36 - it
256:37 - in this new code we're defining a new
256:39 - function called Fetch compliments that
256:41 - will fetch the complement or Kudos data
256:44 - from Firebase inside the function it's
256:46 - using a function from Firebase called
256:48 - get to retrieve data from the complement
256:51 - ref then if data exists we convert it
256:56 - into an array and select a random
256:58 - complement from the array so that's what
257:00 - all of this code here is doing and it's
257:03 - also updating the content of the
257:05 - complement display element on the page
257:07 - with the randomly selected compliment
257:09 - then we're saying else if no compliments
257:11 - exist then set the text content of the
257:14 - compliment display to no compliments
257:16 - available and just like the earlier code
257:18 - in case of any errors during the
257:20 - fetching process an airror message is
257:22 - logged to the console here with this
257:24 - catch method and there's also a click
257:27 - event listener for the generate button
257:29 - that calls the fetch compliments
257:31 - function when the button is clicked all
257:33 - right let's test it out I'll first try
257:36 - clicking the generate button without any
257:37 - Kudos in the database and it says no
257:40 - compliments available and that's correct
257:42 - this text is being generated with this
257:44 - line of code here so I'll make it more
257:47 - on brand and update it to say no Kudos
257:51 - available okay now I'll submit audo
257:54 - using the form again let's have it say
257:56 - your jokes are truly
257:57 - hilarious click submit now I'll try
258:01 - clicking generate a Kudo and great there
258:03 - it is I'll submit a few more to test the
258:06 - randomness
258:07 - I'll say you are smarter than my
258:09 - smartphone submit it then how about
258:12 - you're the human version of a high
258:15 - five submit that and one more your ideas
258:19 - are always so
258:21 - Innovative all right let's try
258:23 - generating random Kudos and perfect we
258:27 - are indeed starting to Generate random
258:29 - Kudos from our
258:32 - database the final thing I'll do is give
258:35 - the user some visual Fe feedback once
258:37 - they've submitted their Kudos and I'll
258:39 - use this prompt for
258:42 - that it says to add the necessary code
258:45 - to display a success message once the
258:47 - user submits a compliment to the
258:49 - database and that the message should
258:51 - disappear after 3 seconds all right so
258:54 - let me feed this prompt to chat PT and I
258:58 - get back the new code for displaying a
259:00 - success message when the user submits a
259:02 - compliment to the database so first it's
259:04 - selecting an HTML element with the the
259:06 - ID success message which will be used to
259:09 - display the success message so I'll copy
259:12 - this line from the code snippet and
259:14 - paste it in index.js where I'm selecting
259:16 - all of my page
259:18 - elements and Below it's defining a new
259:20 - function called show success message so
259:23 - I'll copy this function from the code
259:25 - snibbit and add it to my code here in
259:29 - index.js this function sets the display
259:32 - style property of the success message
259:34 - element to block to make it visible and
259:36 - it uses a function in JavaScript called
259:38 - set timeout to hide the success message
259:42 - after 3 seconds by setting the display
259:44 - style property to none and inside the
259:47 - form submission event listener after
259:50 - successfully adding a compliment to the
259:52 - database it's calling the show success
259:54 - message function to display the success
259:57 - message for 3 seconds so I'll copy this
259:59 - function call from the code snippet then
260:02 - add it to my compliment form event
260:04 - listener right here in this then method
260:07 - now I've already included a paragraph
260:09 - element in my HTML for the success text
260:12 - notice how it's initially hidden by
260:14 - setting an inline display style To None
260:18 - all right so all that's left is trying
260:19 - it out let's first check if generating
260:22 - audo still works and it does so now I'll
260:25 - try submitting a Kudo let's just say
260:27 - you're the coolest click submit and
260:31 - fantastic the success message displays
260:33 - for about 3 seconds then it disappears
260:36 - I'll add another Kudo for good measure
260:38 - let's say you have an amazing way with
260:42 - words all right
260:45 - perfect so congrats on building your
260:47 - very own compliment generator you've
260:49 - just built something that not only
260:51 - teaches you valuable coding skills but
260:53 - also has the power to spread positivity
260:56 - so be sure to share your Kudos Delight
260:58 - app on social media and with the scriba
261:00 - community to show the world what you've
261:02 - built using a
261:05 - database
261:07 - it's Friday afternoon atw workk and
261:09 - there you are again in that endless
261:11 - where should we eat for lunch debate
261:12 - with your co-workers it's a common
261:14 - dilemma in every workplace well it's
261:16 - time to say goodbye to all those lengthy
261:18 - discussions and indecisions because
261:20 - we're going to build something that's
261:21 - not only fun but also incredibly
261:23 - practical a lunch break poll app called
261:25 - lunch vote this app will not only make
261:28 - deciding where to go for lunch easier
261:29 - but also give you the opportunity to
261:31 - keep building realtime web apps once
261:33 - again we'll use Firebase for real-time
261:35 - data handling and chat gbt for any
261:37 - coding queries we might have in the
261:39 - lunch vote app users can add their
261:40 - favorite lunch spots to a list then the
261:42 - team can vote on where they'd like to go
261:44 - so we're going to focus on realtime vote
261:46 - tallying and allowing everyone to see
261:48 - the poll evolve as votes are cast so
261:50 - let's jump in and get started I've
261:52 - already set us up with our application
261:54 - main structure this is all chat gbt
261:57 - generated and if you're curious I fed
261:59 - chat gbt this prompt to create the
262:01 - initial HTML CSS and JavaScript code in
262:05 - the HTML we have a form with an input
262:08 - field for adding lunch places and a
262:10 - submit button and below a div for
262:13 - displaying the top lunch vote and a list
262:16 - for displaying each lunch place as usual
262:19 - in the JavaScript we have the initial
262:21 - Firebase configuration and I've created
262:23 - a reference to a specific location in
262:25 - the Firebase database named places and
262:28 - as usual that's creating using firebases
262:30 - ref method and Below we are prepared to
262:32 - interact with the web page by obtaining
262:34 - references to various elements like the
262:36 - form and input field and the elements
262:38 - that will be used for displaying and
262:39 - interacting with data from the Firebase
262:41 - database now we're only going to focus
262:43 - on the Firebase code in this project so
262:45 - first things first you'll need to set up
262:47 - a new Firebase project and create a
262:49 - real-time database I've already done
262:51 - that and stored the database URL in a
262:53 - scrimba environment variable named lunch
262:55 - vote DB so go ahead and do that now okay
262:59 - so with our front end ready it's time to
263:01 - integrate Firebase we'll need to include
263:03 - some JavaScript that will push new lunch
263:05 - places to fireb and fetch them for
263:07 - display most importantly we'll need to
263:09 - implement realtime vote tallying where
263:11 - vote counts update once they're clicked
263:14 - that way everyone can see the most
263:15 - popular choices as votes come
263:17 - in all right so I'll kick things off
263:20 - with this prompt that lets chat GPT know
263:22 - that I'm building an app called lunch
263:23 - vote to add lunch places display them
263:25 - and allow users to vote I want it to
263:27 - store each lunch place in Firebase and
263:30 - that users cast a vote by clicking on a
263:32 - lunch place the vote counts should
263:34 - update in real time using firebases real
263:36 - real time database and as usual I wanted
263:38 - to evaluate and use my Firebase
263:40 - configuration and existing project code
263:43 - as a reference to get started like
263:44 - before I'll include my JavaScript
263:46 - between the triple btics and naturally I
263:48 - wanted to add detailed comments to the
263:50 - new code to help me understand it all
263:52 - right so let's feed this to chat upbt
263:55 - now normally I've been using chat upbt
263:57 - 3.5 for our projects but I'll need to
263:59 - step up my game with chat GPT 4 why the
264:02 - change well GPT 3.5 has shown some
264:05 - compatibility issues with our project's
264:07 - needs according to its latest training
264:09 - data for Firebase specifically so in
264:11 - this case chat gp4 is more Adept at
264:14 - handling and parsing this code base and
264:16 - what we need for the lunch vote app all
264:18 - right so I'll add my prompt here and I
264:21 - get back a lot of new code and it's code
264:24 - that pushes a new lunch place to
264:25 - Firebase when the form is submitted then
264:28 - listens for changes in the Firebase
264:29 - database and updates the UI and it's
264:32 - implementing a voting mechanism there's
264:34 - quite a bit of code here so so I'll copy
264:36 - the entire JavaScript snippet and
264:39 - replace everything in my index.js file
264:41 - with the new
264:43 - code there we go so let's go over the
264:46 - new code when the user submits the form
264:49 - this event listener triggers and this if
264:52 - statement it pushes a new place with the
264:54 - name and an initial vote count of zero
264:57 - to Firebase then it clears the input
264:59 - field after submission we also have a
265:01 - real-time data listener firebases onv
265:04 - value function con constantly listens
265:06 - for changes in the places Firebase
265:09 - reference so whenever a change occurs
265:12 - like a new place is added or votes are
265:14 - updated it updates the UI and with this
265:17 - code when a user clicks on a list item
265:19 - or place it triggers a vote increment
265:22 - for that specific place in Firebase it's
265:24 - bringing in a new function from Firebase
265:26 - called update to increment the vote
265:28 - count and it looks like here the app
265:30 - tracks and updates which place has the
265:33 - highest vote and then this code displays
265:35 - the leading place on the page overall
265:38 - this code ensures that your apps UI is
265:40 - always in sync with your Firebase
265:42 - database in real time providing a
265:44 - dynamic and interactive user experience
265:47 - all right let's try it I'll add a lunch
265:50 - Place Like Big Kahuna Burger I hear
265:52 - they've got some tasty burgers and I'll
265:55 - add another
265:56 - place there we go all right I'll click
265:59 - to vote for Big Kahuna bger and good I
266:01 - see the vote count update to one and the
266:03 - leading Place update to bikun burer with
266:06 - one vote and if we have a look at our
266:08 - database we can see the data being
266:10 - stored under the places reference each
266:13 - place has a name and vote property and
266:15 - currently Big Kahuna Burger is set to
266:17 - one so it looks like our app is
266:19 - successfully updating and retrieving
266:20 - vote counts in Firebase instantly that
266:23 - way everyone can see the most popular
266:25 - choices as votes come in now currently
266:27 - it seems like anyone can vote as many
266:30 - times as they want for example I can
266:32 - keep clicking on a place and the vote
266:34 - count keeps going up so let's figure out
266:36 - how to allow users to vote only once and
266:39 - by that I mean let's have chat GPT
266:41 - figure this out for us so I'll use this
266:43 - prompt here that says add the code to
266:47 - allow a user only to vote once and that
266:49 - users should also be able to change
266:51 - their vote so I'll feed this prompt to
266:54 - chat gbt and in its reply it says that
266:57 - to implement the feature where a user
266:59 - can only vote once but can change their
267:01 - vote we need to track which place a user
267:04 - has voted for and that can be done by
267:06 - storing the user's vote in the local
267:08 - storage of the browser well that's
267:10 - pretty clever local storage is a browser
267:12 - feature that allows a site to store some
267:15 - data in the browser which it can use
267:17 - again and again when you revisit the
267:19 - site now it looks like quite a bit of
267:21 - code was updated so thankfully it gives
267:23 - me the entire JavaScript code to copy
267:26 - into my project so I'll copy everything
267:29 - by clicking copy code and then replacing
267:32 - everything in my index.js file with this
267:34 - new code okay let's go over the changes
267:38 - so here I'm seeing this new function
267:40 - named update user vote which uses the
267:43 - browser's local storage to remember the
267:46 - user's current vote this is a simple way
267:48 - to track votes without requiring user
267:50 - authentication for example and this
267:52 - function handles changing the user's
267:55 - vote it decreases the vote count for the
267:58 - previous Choice as we can see here in
268:00 - this if statement it looks like it's
268:02 - using firebases update function to
268:05 - update only the value of a place's vote
268:08 - property in the database so it's
268:09 - decreasing it here by one if the vote
268:12 - count is greater than
268:14 - zero now this code below increases the
268:17 - vote count for the new vote so it's also
268:20 - using firebases update function to
268:22 - increase the vote count here and it's
268:24 - updating it in the browser's local
268:26 - storage and it looks like there's also
268:29 - added Logic for the vote changing so
268:31 - here with this code when a user clicks
268:33 - on a list item it checks if the user is
268:35 - is changing their vote here in this if
268:37 - statement if so it updates the vote both
268:40 - in Firebase and in the local storage by
268:43 - running this update user vote function
268:45 - we just looked at all right looks like
268:48 - those are all the changes so let's test
268:50 - this first I'll reset the database by
268:53 - deleting all of the lunch places there
268:56 - we go I'll add a couple of new lunch
269:00 - places all right so now if I try voting
269:04 - I see that I can only vote vote for one
269:06 - place so I keep trying to vote for good
269:09 - burger by clicking on it but it doesn't
269:11 - allow me to increase the vote count now
269:13 - if I click to vote for The Other Place
269:15 - notice how my vote switches excellent in
269:18 - fact I have this app open right now in
269:19 - multiple browsers so if I vote on a
269:21 - lunch place you can see it update here
269:23 - in the app in real time so check it
269:26 - out hey it looks like Jack Rabbit Slims
269:29 - won they do have some pretty good $5
269:34 - milkshakes
269:36 - finally how about we add a feature where
269:38 - a user can delete the poll once a place
269:40 - has been chosen for that I'll use this
269:43 - prompt here that says add a delete poll
269:47 - button at the bottom which clears the
269:49 - database and resets the poll and to
269:52 - display the delete button only after a
269:54 - poll gets created all right so here you
269:57 - go chat GPT do your thing and here's all
270:01 - the new code so first I need to add this
270:04 - delete pull button to my HTML I'll go
270:06 - ahead and copy it then paste it in my
270:09 - HTML just below the places list notice
270:12 - how the button is initially hidden with
270:14 - its display property set To None next
270:17 - I'll modify my JavaScript to include the
270:19 - logic for showing the button handling
270:21 - the click event and resetting the poll
270:23 - I'll copy this line of code here that
270:25 - targets that delete button in my HTML
270:28 - and include the variable up here where
270:31 - I'm targeting all of my page elements
270:33 - right there and in the new JavaScript we
270:35 - have this reset poll function so I'll go
270:38 - ahead and copy that and add it to my
270:40 - code let's just paste it right here
270:43 - below my variables so when this delete
270:46 - pull button gets clicked we're going to
270:48 - call this function to clear the Firebase
270:51 - database where the polls are stored
270:53 - that's being done right here with this
270:55 - set method and then it's going to clear
270:58 - the leading Place display as well as the
271:00 - list of places and hide the delete
271:03 - button and it looks like we have a new
271:05 - if else statement we need to add to our
271:07 - on value function so I'll copy that from
271:09 - the code snippet then scroll down to my
271:12 - on value function where I'm listening
271:15 - for realtime updates from Firebase right
271:18 - here and I'll just paste in the new if
271:20 - else statement at the top remember onv
271:23 - value is a listener for the Firebase
271:25 - database it checks if any polls exist
271:28 - and updates the visibility of the delete
271:30 - button accordingly so for example this
271:32 - script here checks if there are any
271:34 - polls in the database base if poles are
271:36 - present it shows the delete button by
271:38 - setting its display style to block
271:41 - otherwise the button remains hidden with
271:42 - its display style set To None finally
271:45 - I'll copy this event listener here for
271:47 - the delete button and paste it in my
271:50 - code right at the bottom so when the
271:53 - delete button gets clicked it calls the
271:55 - reset pull function to reset the poll
271:59 - and remember that is this function here
272:01 - that we just added to our code okay so
272:04 - let's test this out once again I'll
272:06 - clear my database so I can see if the
272:08 - delete pull button gets hidden I just
272:11 - did that in my Firebase console and good
272:13 - I no longer see lunch places in the app
272:16 - so because my database is empty we are
272:17 - not seeing the delete poll button just
272:20 - yet but I'll add a place to start a
272:23 - poll and good the delete poll button
272:25 - appears I'll add a couple more
272:29 - places and there we go now to me the
272:32 - button feels a bit misaligned I want to
272:34 - align it Center on the page so I can
272:37 - quickly do that with a CSS adjustment
272:40 - this rule here is targeting the delete
272:42 - pull button and you've learned in
272:44 - previous projects that you can Center a
272:46 - line and element on the page using
272:48 - margin and the value auto so I'll
272:50 - replace this margin top property here
272:52 - with the margin shorthand and I'll keep
272:55 - the 20 pixels of top margin then I'll
272:57 - set the left and right margin values
272:59 - here to Auto and the bottom margin value
273:01 - to zero and there we go our button is
273:04 - now perfectly centered aligned I'll
273:06 - click to vote on a lunch place we see
273:08 - the vote count change and the leading
273:10 - Place change up top now clicking the
273:13 - delete poll button should delete the
273:15 - lunch places from the app so I'll try
273:17 - that and I get an error it says that set
273:21 - is not defined hm take a moment to have
273:24 - a look through index.js and see if you
273:26 - can figure out how to fix
273:30 - this okay so this fix shouldn't be too
273:32 - bad I see that the reference error is
273:35 - set is not defined so here in this reset
273:38 - pole function we are using firebases set
273:40 - function to reset the poll when the
273:43 - button gets clicked so I'll have a look
273:45 - at where we are importing the functions
273:47 - from Firebase and I do not see that
273:49 - we're importing the set function so
273:51 - presumably all I need to do here is
273:54 - include the set function and now I'll
273:57 - try clicking delete poll and great all
274:00 - the lunch places get deleted from the
274:02 - app so it looks like we're done here now
274:04 - I want you to pause me for a and take
274:05 - the time to add some places cast your
274:08 - votes and watch how the application
274:10 - responds in real
274:14 - time okay great so now maybe even think
274:16 - about ways to extend the app with more
274:20 - features for example what happens when
274:23 - there's a tie between two or more lunch
274:26 - places and congrats you've just built a
274:28 - realtime lunch break pull app showcasing
274:31 - the power of Firebase in creating
274:33 - Dynamic user interactive web apps so
274:35 - well done let's move on to our final
274:41 - project you're on a road trip with
274:43 - friends the journey is epic but tracking
274:45 - who paid for gas snacks and other stuff
274:48 - is turning into a chaotic mess sound
274:50 - familiar well it's time to bring Clarity
274:53 - and ease to your adventures we about to
274:55 - build the road Wallet app the ultimate
274:57 - solution for managing group travel
274:59 - expenses without the headaches Road
275:01 - wallet provides a realtime overview of
275:03 - expenses balances and settles the who
275:06 - paid for what debate instantly so here's
275:08 - what our app will feature Travelers will
275:11 - be able to log various expenses
275:13 - categorized into food gas accommodation
275:16 - sightseeing and more and you can add
275:18 - travelers to split costs and display
275:20 - each person's share you'll also be able
275:22 - to review your expenses here under
275:25 - expense history and here you can also
275:27 - easily delete expenses in case of errors
275:29 - or changes and the app will use the data
275:32 - from Firebase to do realtime
275:34 - calculations to to show how much each
275:36 - traveler owes in real time as expenses
275:38 - are added I've provided all of the
275:41 - starter code from the app which will
275:42 - take a look at in just a bit and here's
275:45 - what the road Wallet app is looking like
275:47 - so far I can click manage travelers to
275:50 - add travelers to the app and they get
275:53 - displayed below you can select an
275:56 - expense here from the category menu for
275:57 - example gas and set the amount to let's
276:01 - say $100 click at expense and see it
276:03 - listed under expense history I can add
276:06 - another expense like food and just say
276:09 - $200 for example and now our expense
276:13 - total is $300 and if we click manage
276:15 - Travelers we can see that both Gil and
276:18 - Tom each owe
276:20 - $150 now this isn't connected to
276:22 - Firebase just yet so if I refresh the
276:25 - app all my expenses and traveler data is
276:28 - reset so again to ensure seamless
276:30 - collaboration and real-time updates we
276:33 - are going to connect Road wallet to fire
276:35 - firebases real-time database with the
276:37 - help of chat gbt we're going to persist
276:39 - the expense in traveler data to Firebase
276:42 - so that when a traveler or expense gets
276:44 - added or updated the changes will be
276:46 - saved to the Firebase database in this
276:49 - project we're starting with more
276:51 - pre-written code than usual and like the
276:53 - previous project I use chat GPT to help
276:56 - me generate all of the code the goal in
276:58 - this Grim is to explore how chat gbt can
277:01 - effectively interact with modify and
277:03 - enhance a sub substantial existing
277:06 - codebase like ours so as usual in the
277:08 - JavaScript we have the initial Firebase
277:11 - configuration and here I have a
277:13 - reference to a specific location in the
277:15 - Firebase database named Road wallet I
277:19 - created a new project in Firebase and
277:21 - set up a real-time database for it and I
277:23 - saved the databases reference URL in a
277:25 - scrimba variable named Road wallet DB so
277:28 - go ahead and do that now if you want to
277:30 - work on this project all right so below
277:32 - we are retrieving all of the necessary
277:34 - elements for manipulation for example
277:37 - the expense form motor window buttons
277:39 - and more and then we have two arrays
277:41 - here to store expenses and traveler data
277:45 - and below that we have our event
277:46 - listeners that open and close the
277:48 - traveler modal window when the open or
277:51 - close button is clicked and this event
277:54 - listener here closes the modal window if
277:57 - the user clicks outside of it like so
278:01 - and here's the event listener for the
278:02 - expense form submission and the event
278:04 - listener for adding a traveler now below
278:07 - are all of the functions that handle
278:09 - logic such as managing expenses and
278:12 - traveler's data as well as keeping track
278:14 - of the total expenses amount and the
278:17 - amount owed by each traveler and
278:18 - displaying them in the app if needed I
278:21 - recommend that you pause me and take a
278:22 - moment to review this code before moving
278:26 - on okay so I'm going to use this prompt
278:30 - here to connect my app to Firebase The
278:32 - Prompt will let cat GPT know that I've
278:34 - buil built the front end for an app
278:36 - which does the following and it lists
278:38 - its features like logging travel
278:40 - expenses under categories adding
278:42 - travelers to split costs than displaying
278:44 - each person's share and the app will
278:46 - show how much each traveler owes in real
278:48 - time as expenses are added and it will
278:51 - list and delete expenses so we want chat
278:53 - gbt to write the code to store and
278:55 - manage the apps traveler and expense
278:57 - data using firebases realtime database
278:59 - and like we've done in previous projects
279:01 - I want chat GPT to use my Firebase
279:03 - configuration and existing project code
279:05 - as a reference to get started so I will
279:07 - be providing all of the code from
279:10 - index.js here between the triple back
279:12 - ticks and I want it to give me back the
279:14 - entire JavaScript code with detailed
279:17 - comments to help me understand it all
279:19 - right so let's paste this code into chat
279:21 - gbt including all of my code from
279:24 - index.js and once again I'm going to
279:26 - leverage the power and the latest
279:28 - knowledge and Firebase training data of
279:30 - chat GPT 4 for that it will be much more
279:33 - Adept at handling what we need need for
279:35 - Road wallet and it looks like I get back
279:38 - a lot of changes now to avoid any
279:40 - confusion with the new code or the
279:42 - possibility of leaving out code and
279:44 - breaking my app I'll ask chubbt to
279:47 - please give me the complete Javascript
279:49 - file because it looks like it's leaving
279:51 - out some of my existing code so this way
279:53 - I'll be able to just replace my existing
279:55 - code with all of the updated code all
279:58 - right there is the complete Javascript
279:59 - file with the Firebase integration so
280:02 - I'll copy it from chat gbt and then
280:04 - replace everything in index.js with this
280:07 - new
280:08 - code wow this is a lot of code so let's
280:12 - spend some time going over it the new
280:14 - code integrates firebases real-time
280:16 - database with my existing logic enabling
280:19 - the app to store and manage data in the
280:22 - real-time database and it also covers
280:24 - all the functionalities for adding
280:26 - deleting and displaying expenses and
280:28 - travelers in the new code it looks like
280:30 - we're bringing in some new functions
280:31 - from Firebase remove and set and we have
280:35 - some new references expenses ra and
280:38 - travelers RA are references to specific
280:41 - paths in the Firebase database where
280:43 - expenses and travelers data will be
280:46 - stored I also noticed that the handle
280:49 - new expense and handle new traveler
280:51 - functions now include logic to save new
280:53 - expenses and travelers to Firebase using
280:56 - the push and set methods as you can see
280:59 - here and these delete expense and remove
281:02 - traveler functions remove items from
281:04 - Firebase using their unique
281:07 - IDs and cool I see that it included on
281:10 - value listeners for expenses ra and
281:12 - travelers ref to automatically update
281:15 - our local expenses and travelers array
281:18 - when there's a change in the Firebase
281:20 - database and I see that the add expense
281:23 - to list and add traveler to list
281:26 - functions have been modified to include
281:29 - the unique ID of each traveler or
281:32 - expense which is necessary for deletion
281:35 - operations all right as usual if you
281:37 - have any questions about this code you
281:39 - can always ask the AI to explain the
281:42 - parts of the code that you don't quite
281:45 - understand yet and if that's a lot right
281:46 - now that's completely normal remember
281:49 - the focus here is to push the limits
281:51 - with all of the ways AI can contribute
281:54 - to our code and projects all right so
281:56 - let's test it out by adding some data
281:58 - and playing around with the features we
282:00 - also want to ensure that everything
282:01 - syncs perfectly with Firebase and that
282:03 - our calculations are accurate so first
282:05 - I'll click manage travelers to open up
282:08 - the motal window and add Travelers let's
282:10 - say Gil Tom raid and Bob that sounds
282:15 - like a fun road
282:17 - trip okay let's add some expenses first
282:20 - I'll select the food category and let's
282:22 - say $500 click add expense and there we
282:26 - go we see food listed in the expense
282:28 - history so if I click to manage The
282:31 - Travelers we see that each person owes
282:33 - $125 and that's correct okay let's add
282:36 - more expenses naturally we'll need to
282:38 - pay for gas so let's say
282:40 - 250 there we see gas in the expense
282:43 - history and each person now owes
282:47 - $187.50 all right let's see we'll need
282:50 - some accommodations so that'll be about
282:53 - $600 there we go and our traveler data
282:57 - updated accordingly good if I delete an
283:00 - expense let's say gas for example now
283:04 - each person owes
283:06 - $275 and if for some reason someone
283:08 - drops out like me and ooh now each
283:10 - person owes about
283:12 - $367 sorry about that all right now
283:15 - looking at the data in my Firebase
283:16 - console I can see all of the data saved
283:19 - under expenses and travelers for example
283:22 - but it looks like we might not need this
283:25 - amount Ed property in the database
283:27 - notice how they are all set to zero so
283:30 - it seems like the code is using the
283:31 - expenses data from the database to
283:34 - generate the amount owed by each person
283:36 - and that's completely fine for this
283:38 - first go at the app so since we don't
283:41 - need the amount owed property saved to
283:44 - the database we can remove the Firebase
283:47 - code here that is setting that
283:49 - property and that's being done here in
283:51 - the handle new traveler function so here
283:53 - in the set method we can remove the
283:56 - amount Ed property that way it's just
283:59 - setting or saving the new traveler name
284:02 - to Firebase and everything should work
284:04 - work exactly the same way and it does so
284:06 - I'm back in the road trip let's welcome
284:08 - pair to the road trip and good the
284:10 - amount owed still updates accordingly
284:12 - for each person I'll even delete some
284:15 - expenses and test that it also updates
284:17 - the amount owed for example say goodbye
284:19 - to food and it does let's say food is
284:22 - now
284:24 - $700 and that worked the total expenses
284:27 - is $1,300 and each person owes
284:30 - $260 all right so now I'll test
284:32 - refreshing the app enti IR L and all of
284:35 - my road wallet data should be present
284:38 - and it is fantastic hey so
284:41 - congratulations on building Road wallet
284:43 - you've navigated a complex codebase
284:45 - implemented realtime data handling and
284:48 - created a solution that makes travel
284:50 - easier and more enjoyable for everyone
284:52 - involved so what I want you to do now is
284:55 - think about how you might transform the
284:57 - app into a mobile friendly app that
284:59 - users can install on their device and
285:02 - conveniently launch from their home
285:03 - screen you learn how to do just that in
285:05 - the previous section so follow those
285:07 - steps to make it happen and be sure to
285:09 - share your app and show everyone what
285:11 - you've built I'll see you in the next
285:12 - scrim to wrap things
285:16 - up wow what a great ride this has been
285:19 - as we wrap up this section take a moment
285:21 - to reflect on your achievements you've
285:23 - not only embraced the power of Firebase
285:25 - but also built some pretty fantastic
285:27 - real-time datadriven applications you
285:30 - connected your interactive gift Gaya
285:32 - invitation to a realtime database to to
285:34 - save and display messages then ventured
285:36 - through the creation of the compliment
285:38 - generator spreading Joy with every click
285:41 - and we navigated the collaborative world
285:42 - of decision-making with the lunch vote
285:44 - app and tackled the Practical yet
285:46 - challenging Road Wallet app making every
285:48 - road trip more organized and fun these
285:51 - projects weren't just about coding they
285:53 - were about bringing ideas to life and
285:56 - solving real world problems with a
285:58 - database you've come a long way so it's
286:00 - time to give yourself a well-deserved
286:02 - pat on the back and treat yourself every
286:04 - line of code you wrote and every problem
286:06 - you solved has brought you one step
286:08 - closer to becoming a more proficient and
286:10 - confident Builder so keep experimenting
286:13 - keep building and most importantly keep
286:15 - enjoying every step of your building
286:17 - Journey thanks and happy building

Cleaned transcript:

learn how to get AI to do the coding for you in this course you will use chat GPT to build interactive database powered projects you'll learn how to write effective prompts and debug and refine your code with the help of Ai No coding experience needed Gil Hernandez teaches this course imagine waking up tomorrow as a web developer what would you want to build it turns out that with AI tools like CPT you're already a developer regardless of your experience if you know how to work with them welcome to a different kind of coding course that's less about the intricacies of coding and more about building experimenting and realizing your ideas even without coding knowhow it's your fast lane towards getting the coding superpower in this course you'll use HTML CSS and JavaScript the building blocks of the web along with chat gbt an AI model developed by open Ai and you'll even get to work with a tool powered by Google called Firebase to add a database to projects but we won't Deep dive into the technicalities of these languages and tools or cover the basic concepts this course is your shortcut to prototyping and building cool projects with ai's assistance without worrying about all the tedious foundational stuff the focus is helping turn you from a encoder into a capable Problem Solver Ai and tools like chat gbt aren't just here to provide coding answers they can be a part of your creative process helping you brainstorm ideas reinforce your newly learned skills and even enhance existing code by the of this course you'll have a collection of fun interactive and database powered mini projects that you've built with the help of chat gbt let's have a look at all the cool stuff you'll build in the first section of the course you'll start to unlock the potential of AI by building and deploying your first projects using chubbt you'll start by building what's called a hero section for a fictitious product it's an essential part of any website or landing page then you'll create a subscription form for a service called Barker box after that you'll take things up a notch by building an interactive invitation that allows guests to RSVP to an event then you'll build a fun raffle app where users enter their names into a cake raffle then it picks a random winner and you'll turn up the volume on your building skills literally by creating an interactive drum kit app that plays real drum sounds in section two you'll build Next Level projects from your own version of the classic wacka game to an interactive project slideshow and a personal homepage to Showcase all your projects you'll even get to build a mobile friendly smart home interface and a Chrome browser extension that saves and stores shopping wish list items and section three is a big one it's all about building database powered apps with Firebase first you'll connect the event invite project from section one to a Firebase database then you'll work on a compliment generator app to spread Delight as well as an app called lunch vote to help you and colleagues decide on lunch spots and an app called Road wallet to manage group expenses while traveling by the end you'll have gained the confidence to keep building and turning your ideas into more functional prototypes and fullfledged applications regardless of your coding knowledge plus you'll learn how to deploy your projects with a service called netlify and share your awesome work and even transform projects into Mobile friendly apps that users can install on their devices and conveniently launch from their home screen and your teacher for this course is me gil Hernandez I'm a teacher at scrimba and I can't wait to start this journey and help you unlock your inner Builder before we start I encourage you to head over to Discord and let the scrimba community know that you're starting the course in the today I will Channel you can click on this image to jump right into the Channel all right so join me in the next lesson where you'll begin coding and building in a whole new light with AI and chat gbt see you there imagine waking up tomorrow as a web developer what would you want to build it turns out that with AI tools like chat gbt you're already a developer regardless of your experience if you know how to work with them welcome to a different kind of coding course that's less about the intricacies of coding and more about creating experimenting and realizing your ideas even without coding knowhow and this course will use HTML CSS and JavaScript the building blocks of the web along with chat GPT an AI model developed by open AI but we won't Deep dive into the technicalities of these languages or cover every basic concept instead we'll focus on helping you prototype and build projects with ai's assistance turning you from a noncoders into a capable Problem Solver Ai and tools like chat GPT aren't just here to provide coding answers they can be a part of your creative process helping you brainstorm ideas and reinforce your newly learned skills by the end of this course you'll have a collection of many projects you've built with the help of chat gbt and more importantly you'll have gained the confidence to keep creating and turning your ideas into actual functional prototypes regardless of your coding knowledge plus you'll learn how to deploy your projects with a service called net Y and share your awesome work your teacher for this course is me gil Hernandez I'm a teacher at scrimba and I can't wait to start this journey and help you unlock your inner Builder before we begin I encourage you to head over to Discord and let the scrimba community know that you're starting the course in the today I will Channel click on this image here to jump right into the Channel all right so join me in the next lesson where you will begin coding and building in a whole new light with AI and chat TBT I'll see you there let's explore how AI specifically chat GPT can help you yes even noncoders to build amazing products you see in recent years artificial intelligence has transformed from science fiction to a real world tool that people from all walks of life can use but AI isn't just about robots and selfdriving cars it's about augmenting our capabilities and making tasks easier which opens up a world of possibilities chubbt is what's called a a generative AI program which means that it can create new and original content based on the data it's been trained on as a result chat GPT can assist with everything from writing jokes recipes songs and poems and serve as your intelligent coding assistant now let's get more specific how exactly can an AI tool like chat gbt help us with coding projects well here's the thing coding at its core is about problem solving and chat TBT is designed to be a stellar problem solver for instance it can help you break down large intimidating projects into manageable tasks you simply describe your project to chat GPT and it can generate basic steps for getting started and even lay out a road map for you to follow then it can suggest potential Solutions and provide code Snippets that you can use directly or modify to suit your needs now if you're a non coder this might seem like a daunting Prospect but don't worry chat GPT can guide you through the basics of HTML CSS and JavaScript using simple and understandable language and remember if you need help understanding something chat GPT is right there to help explain tricky Concepts or offer hints and AI or chat PT in particular is not here to replace developers rather it's here to empower Builders like you and augment your creativity and problem solving abilities so I hope that you're excited about the potential of AI and chat GPT in building your projects let's keep it going by accessing and using chat GPT to explore some code if you're already set up with chat TBT feel free to skip this if not let me take a moment to walk you through signing up and accessing chat gbt chat gbt was developed by the open AI research lab so to use chat GPT you'll need to create an open AI account on open.com it's free and quick to do you can click right on this image to go to the site once you're on the open AI website click the sign up button and enter your email and a a desired password to begin setting up your account you'll then need to quickly verify your email address name and phone number for security reasons after that you should be all signed up and set up with an open AI account to access chat GPT click on your user Avatar in the top right corner and select visit chat GPT from the drop down menu or click right on this image to visit chat. open.com once there you can see some onscreen instructions and examples of how to interact with chat upbt and learn more about its capabilities and limitations after you've accessed chat GPT I want you to explore it type a sentence or a question in the chat interface and see how chat GPT responds you'll be surprised at how conversational and informative the AI model can be now while we are going to be using it for coding assistance chat GPT is not exclusively designed for coding it's a general purpose language model that's been trained on a large variety of content from the internet including many examples of code although it doesn't understand code in the same way a human developer does it can generate code based on the patterns and structures it has learned during its training all right now that you're all set up with chat TBT we'll take a highlevel tour of the basics of HTML and CSS and get you ready to start building let's spend some time talking about the first two essential tools you'll need in your Web building toolbox HTML and CSS HTML or hypertext markup language and CSS which is short for cascading stylesheets are like the bread and butter of web development they both work together to help create the websites and apps we visit every day and understanding the basics of both will help you get the most out of this course one of my favorite analogies for these that we use at scrimba is to imagine building a car think of HTML as the blueprint for a car laying out all the key structural components like the frame steering wheel seats tires and so on it defines the car's essential parts and how they fit together to make the car we still want the car to look good and be comfortable so that's where CSS comes in think of CSS as like the exterior design and interior Furnishings of the car like the paint job the style and comfort of the seats the layout of the dashboard and any of the presentational or styling aspects that make the car not just functional but visually appealing and Driver friendly too in a web development context HTML gives structure to our web content determining where paragraphs headings images and links go and CSS adds the style choosing colors fonts and layout options together HTML and CSS help create a well structured and aesthetically pleasing site or app so now let's see how chat GPT can help us in this process first let's ask it to generate the a basic HTML structure for a web page to do that I've written a prompt here for the AI in the file prompts MD as you'll learn prompts are essentially the instructions we feed into the AI and it's our way of communicating what we want the AI to do in this case I want it to generate the basic HTML structure for a web page so I'll copy this prompt and paste it into chat gbt's message input field submit it and chat GPT returns HTML code that you can copy and paste into your text editor you include your Project's HTML code in a file with the HTML extension like index.html so I'll click copy code to copy all of this HTML code and replace everything that's currently in index.html with this new code so these are some of the basic HTML tags which are used to define the structure and elements of a web page an opening tag like this marks the beginning of an element and the closing cling tag marks the end now don't worry about what these meta tags it gave us mean right now they're just there to help with character encoding and how the web page gets displayed and this body element is where we place the main content of the web page such as text images links paragraphs and other elements in this case we have an H1 heading and a paragraph So any content placed inside this body element is what we see in the web browser here in the scrim you can click the Run button to view the web page in the mini browser so cool there we see welcome to my web page and then some content below it all right now let's make this HTML and Page look good we'll use this second promp here to ask jbt to add some basic CSS to this page so I'll copy this promp and feed it into chat gbt and now I get back the HTML with a style block added that includes the CSS styles for the web page so I'll copy this new HTML code and replace B everything inside index.html with this code and good notice how the CSS sort of transforms our barebones HTML page into something more visually engaging and there are a few ways to apply CSS styles to your HTML you can include the CSS Styles directly within your HTML file like this however this can make your HTML excessively large and messy so it's better to include the HTML and CSS in separate files that's what you'll do in most of your projects so what I'll do is ask the AI to place the HTML and CSS in separate files using this prompt which I'll paste into chat GPT and there we go we get the code for index.html and styles.css so first I'll once again copy this HTML code and replace everything that's in index.html with this new code and you include your CSS Styles in a file with a CSS extension like styles . CSS so I'll copy the new code for styles.css then replace what's currently in styles.css with this new code and as you can see the page still looks the same the difference is that now the HTML and CSS are placed in separate files and that's being done here via the link tag which is what connects the HTML file to the CSS file it's a whole lot easier to manage and organize your HTML and CSS this way all right so if you have a look at the CSS you'll see what are called selectors that Target or select specific HTML elements and apply styles to them for example this selects the body element this here selects the H1 element using the H1 tag and then the P tag or paragraph element is selected here okay so now it's your turn I want you to play around with the HTML and CSS code here in this scrim change the text or add more text in the HTML for example welcome to Gill's web page or alter the colors in the CSS for example I can make this heading Red by simply typing red here as the color value and we see this main heading change to red or try changing any of the other CSS properties to see how they affect the page and if the cart analogy from earlier didn't really make things stick for you or you want to make HTML and CSS more relatable to you think of a scenario or a hobby you enjoy for instance if you like to cook imagine how an analogy relating to cooking would help you understand HTML and CSS better using a prompt like this I'm interested in learning HTML and CSS with an analogy related to cooking I'll submit that to chat GPT and the output suggests thinking of HTML as the list of ingredients in the stepbystep instructions in a recipe and that CSS is like the seasoning and presentation of a dish and then it expands upon this analogy to paint a more Vivid picture and one of the objectives of this course is for you to be able to ask the AI for explanations on specific parts of the code you don't understand so throughout this course I want you to ask chat GPT questions or to provide you with more details about any of the code or concepts you're curious about or don't quite understand yet you'll find that as you progress you'll start understanding how different HTML tags and CSS Styles come together to form a web page and how they fit in with JavaScript which is another essential building block of web development and chat gbt will be there every step of the way assisting you and guiding you in building your projects so congrats you've just written your first lines of HTML and CSS code and now I'll leave you with a challenge to have you spend some time tinkering with HTML and CSS I'll paste the challenge here as a comment in index.html first I'd like you to add a second level heading to the page using an H2 element and then add a paragraph below the new heading and I'd also like you to increase the text size of both headings I've also included a stretch goal which is to display a picture on the page this could be a photo of you or any image you'd like you can add an image to the scrim by simply dragging your image right into the Explorer sidebar here and don't hesitate to ask chat GPT for help or ask it any questions about HTML and CF s I'll see you in the next Grim where you will build your first project all right you've gotten an overview of HTML and CSS so how can we start using AI tools to simplify the process of building projects with HTML and CSS well you're about to find out so let's get our feet wet and start by creating one of the most commonly used elements on any website or app a login button more specifically a login with Twitter button which you've likely seen before we'll Leverage The Power of our AI companion chat GPT to guide us through this process you will work with HTML to structure the button and then CSS to make the button look visually appealing and interactive so that it looks like this so let's Jump Right In and ask chat gbt to help us out to kick things off I have provided two files index.html and styles.css which you started to learn about in the previous lesson and in the file prompts MD I've added the first prompt I'll use to build build this login button so in this prompt I'm assigning the AI a role I'm saying you are Developer GPT an assistant that helps write code for people who don't have coding experience and then I'm describing the task which is to create the HTML and CSS files for a rounded button resembling the Twitter login button and I requested making the code easy to understand for noncoders and to avoid using any complex CSS layout features I also mentioned more specific requir requirements like using basic CSS properties to horizontally Center the button and to add some space above it for visual separation and finally I want chat GPT to document each CSS property with a short code comment overall this prompt provides clear instructions for the task at hand which is something you should keep in mind when prompting an AI like chat GPT so what I'll do is copy this prompt then head over to chat GPT and paste it into the message input field send it then kick back and await the requested code so here's the generated HTML and CSS and below it chat GPT provides an explanation of the code so feel free to pause for a bit and read through these details if you'd like to know more about the HTML and CSS in the HTML file you'll see common HTML elements like a div and a button and these class attributes as you'll see are for the CSS styling and inside the button there is some text that says login with Twitter so I'll copy Cy this HTML code snippet from chat gbt then replace all the code in index.html with the new code click the Run button and good now you should be able to view the button in the mini browser displaying the text login with Twitter all right next I'll copy the CSS snippet from chat gbt and paste it into styles.css so this CSS targets or selects the container and rounded button class names defined in our HTML then using CSS properties like text align background color color and Border it gives the button a distinctive look which does in fact resemble the Twitter login button awesome and chbt was even intelligent enough to determine which color to apply to the button to make it match the Twitter brand and notice that next to each CSS property is a comment generated by chat gbt to help us better understand what the CSS is doing and if you pause for a moment and review this code you might be surprised by how much you might be able to understand many CSS properties are intuitively named almost like they're written in plain English so take for example background color it does precisely what it says it sets the background color similarly the color property defines the text colors and other properties such as border padding and font size follow a similar pattern and together these properties Define the look and feel of our button and if if you start to Tinker with some of these properties you'll learn a bit more about what they do and how they affect the appearance of the button for instance if you change this first padding value to 0er pixels or 50 pixels you might realize that this property controls the spacing inside the button or that the margin top property controls the space outside and above the button and a property like font size sets the size of the text and so on Okay so we've created our button but but we won't stop here because now I have a challenge for you I want you to experiment more with the HTML and CSS and transform this button into a login with GitHub Button as a developer you will likely interact with a button like this quite a bit you might immediately notice some of the differences between this button and the Twitter login button for example the GitHub button has a different background color the borders are not rounded and the button text is also different so I'll add the steps to this challenge here at the top of styles.css this challenge will require you to modify two lines of code in the CSS file and one line of code in the HTML file and I've also included the color code for the background of the GitHub button which is this value here so think about the changes you need to make and go for it and remember if you get stuck or need guidance chat GPT is here to help I'll meet you back soon to go over the challenge together all right hopefully you've updated your button to look like this now let's go over the challenge together first I need to turn the button into a login with GitHub button which tells me that I need to update the text between the button tags here in the HTML file so I'll replace Twitter with GitHub and there we go the button now displays login with GitHub good next I need to update the CSS to make the button look more like this and notice how this color code that starts with a hash symbol looks a bit like two of the values being used here in the CSS for the rounded button so I'll copy this color code and let's see what happens if I update the value of the color property to the new color value well it looks like this just updates the text color but I want the text to remain white so I'll undo that and just above I see that this line here controls the background color so I'll replace this color value with the new color and yep that looks exactly like what I'm going for finally the login with GitHub button has square corners instead of rounded Corners so let's see how to update that in styles.css looking at the comments I see that this border radius property rounds the corners of the button now currently it's set to 20 PX or pixels so I'm assuming that setting this to a smaller value will make the corners appear less rounded so I'll try 10 pixels and that's looking closer to square corners so how about bringing the value down to0 pixels and yes that does the trick all right so now we have a simple yet functional and styled login button that you can start to use in your projects finally when you hover over a button or click on it it's common for the button to be interactive and respond in some way currently it's not doing that so let's ask chat GPT to suggest CSS to add hover and click effects to update the button's appearance when it's hovered or clicked for that I'll use this prompt here it instructs it to generate the necessary CSS for adding hover and click effects on the button and I need to let chat GPT know that the button now has a background color set to this value and I want to make its background color brighter when hovered over or clicked and to add a comment next to each CSS property so I'll copy this prompt paste it into chat GPT and good I get back the CSS code for the hover and click effects which you'll notice that they will be implemented using colon hover for when the mouse is over the button and colon active for when the button is being clicked so I'll just copy the new CSS toward the bottom then paste it into styles.css and let's test it in the mini browser when I hover over the button I see that the background color changes to a grayish color color and clicking on it makes it darker great this not only makes the button more engaging but it also improves the user experience by providing visual feedback all right so that about wraps up building our login with Twitter and GitHub buttons and remember while chat GPT does provide an excellent starting point I do want you to keep tweaking and modifying this code to view how each property or value you change affects the look of the button and I'm sure that you still might have a lot of questions about what some of this code is doing and that's perfectly okay so what I want you to do is take a moment to ask chat GPT about any code that appears confusing or that you want to learn more about for example what's the purpose of the hash symbol and color values or what does colon hover and active mean to help you ask these questions I'll provide a prompt here that asks chat GPT hey can you explain what the hash symbol and colon hover and an active mean in the following CSS code followed by the CSS code snippet to evaluate so great job building your very first project with AI I'll see you in the next Grim where we'll go over some of the basics of prompting all right AI coders let's see some of these prompting techniques in action now we're going to design and build an essential part of any website or landing page the hero section this is the first thing your visitors might see so making a good impression is important with the help of our AI tool chat upbt we'll create a vibrant hero section using HTML and CSS so let's Dive Right In I've already included HTML and CSS files for the project as well as an image we'll use in our page named chair. PNG first we're going to generate the HTML and CSS of the hero section so let's turn to chat gbt for some assistance in the file prompts MD I've set up the first prompt to work with with it's an instructionbased prompt with specific steps to help us reach the desired outcome it clearly explains the desired output which is the HTML and CSS for a hoverchair website's hero section and then it provides some context about the product and it describes exactly what it should contain a main heading subheading short description paragraph and a call to action link styled as a button it also outlines some guidelines for the code like making the code easy to understand stand for noncoders and avoiding the use of complex CSS features and it even provides some aesthetic guidelines like to use an elegant and neutral color palette with a focus on earthy tones and subdued Hues and as usual I want it to document the CSS with code comments and as a reminder of the overall goal and purpose of the task it states that the final result should be an engaging and Visually appealing hero section that effectively showcases the hoverchair brand so I'll just copy and paste this prompt into chat GPT and it generates the HTML and CSS code to set up the hero section so first I'll copy the HTML code and paste it into index.html looking at the HTML structure I see that it consists of a header element and nested inside it is a hero heading subheading and description just like we asked for and an acre element or link that's going to be styled to look like a button with this class name and here in the mini browser we see the hero section taking shape so next let's apply some styles to the page using the CSS chat GPT gave us I'll click to copy this code then paste it into styles.css and wonderful the hero section is starting to look much better with the CSS applied so now how about a challenge I'll paste the steps for you here in styles. CSS so for this challenge I'd like you to increase the size of the learn more button text because it's looking a bit too small and we do want to draw more attention to it so users can click on it and hopefully purchase the amazing hover chair then I want you to add a little more color to the Page by changing the text color of the subheading which is this element here to the color value provided here so give it a shot and I'll catch up with you when you're done to go over it together okay hopefully you got that so first to increase the size of the button text I see that the button is this element here with the class name ca button so in the CSS I'll find that class name which is this CSS rule here and you've learned that the font size property is what controls the size of text so to make the font size larger I'll set it to to a value such as 24 pixels and that looks much better to me you can see the difference here when I set it back to 18 pixels then 24 pixels or maybe make it larger such as 26 pixels all right next I'll change the color of the subheading to this value here so I'll copy it and in the HTML I see that the subheading has the class hero subheading so I'll scroll down and find that class name right here and I see that the color property is set to this color value so I'll update it with the new color and see what that looks like and awesome that did it I really like how the page is looking so if you got this well done now another detail I might add is to increase the line height or the space between the lines of text here in the hero description for that I'll use the CSS line height property here in the hero description Rule and I'll open up the line height a bit more by setting it to a value like 1.4 and to me that looks much better and easier to read all right now let's add another important element to our hero section an image in our project files we have an image named chair. PNG that I want to place above the hero heading naturally we'll ask chat GPT to do that but this time I'll use a more direct prompt by asking the AI to update the HTML and CSS by adding a small rounded image named chair. PNG above the hero heading and to add some depth and highlight the image I also want to apply a soft Shadow behind the image so I'll paste this into chat GPT and good here's the updated HTML with an image tag that points to the image in our project named chair. PNG and displays it on the page I'll test how it looks by adding only the new image tag to my HTML just above the hero heading like this and okay that's working but the image is huge so now let's make it smaller and rounded by applying the CSS the image element has the class name Logo so here in the css. logo selects and applies styles to that element so I'll just copy the new styles that get applied to the image and paste it in my CSS let's have a look at it now and excellent the product image makes a big big difference in our hero section and now the image has that nice rounded effect thanks to the CSS border radius property and the shadow gives the image a sense of depth and separation from the background so looking at the new CSS you might be wondering what this box Shadow property and rgba value are all about well as the comet describes it adds the soft Shadow to the image but I don't want you to just take my word for it if you want a deeper explanation take full full advantage of chat GPT and ask it to provide that for you along with anything else you might have questions about now the image is looking rather small so I think it might be best to make it larger I'll let you do that with a challenge so pause the scrim and use CSS to increase the size of the image the size you choose is up to you all right here we go hopefully you figured out that the width property is is what controls the size of the image so let's see I'll increase the width value here to something like 300 pixels and I think that's too big so I'll reduce it to 180 pixels and that looks better to me if you made it a different size that's perfectly fine finally I want this hero heading to stand out now one thing I can do is increase the text size using a larger font size value like 58 pixels and that looks better but I also want it to have a different font than the rest of the content on the page so Google offers a library of free web fonts called Google fonts that can be easily accessed and used in your projects you can see an example of it here and rubric is a Google font that I particularly like so I'm going to ask chat GPT to add the rubric font to my project and update the heading text I'll use a prompt that says please use HTML and CSS to set the hero headings font to the rubic Google font so I'll feed this prompt to chat gbt and it gives me back a link tag to include the rubic Google font in my project so I'll copy just this link tag in the new HTML and paste it in the head section of my HTML and I see that the new CSS has a font family property that sets the headings font to Rubik so I'll copy that and then paste it in the hero heading Rule and here you can see that the hero heading does in fact have a different font than the rest of the content now it's a very subtle difference but a nice Added Touch to the page all right and there you have it our website hero is complete so great work next we'll move on to our next project but before that I want you to play around with the hero section change the content colors fonts the buttons style make it your own and you can also replace the chair. PNG image with your own image by dragging the image into the Explorer sidebar then updating this Source attribute in the image tag to your image name I'll see you soon in the next lesson all right let's build something that you'll likely find useful a subscription form you've probably seen these on various websites and now we're going to build one for a subscription service called Barker box which you'll also be able to customize to your liking so let's get into it I have included the usual HTML and CSS files for this project as well as the image we'll use which is named dog. jpeg like in previous projects I want the AI to do a lot of the heavy lifting for me and generate most of the HTML and CSS I need to build this form so I'll kick things off using this taskbased instructional prompt this prompt provides a specific set of instructions for for creating HTML and CSS files for a form offering a 15% discount to new subscribers of a product or service called Barker box which is a monthly subscription box that brings an assortment of unique playful and durable toys that dogs will love the prompt also outlines the steps to be followed including creating a headline adding a product description and building a registration form with an email input put and a submit button and it specifies the color and background properties to use and it also emphasizes making the code beginner friendly and to include code comments for better understanding so I'll copy and paste this prompt into chat gbt and I get back the HTML and CSS code so I'll copy the HTML code snippet and paste it into index.html and copy and paste the CSS into styles.css so in this code there might be some HTML elements and CSS properties you haven't seen before so let's spend a little time going through this code together first the HTML includes a form element to create the subscription form and inside the form are two common elements used with forms an input field and a button notice how the input field is of type email which means that the user is required to enter an email address address in the correct format it has an ID of email and the placeholder text enter your email and that's the text that gets displayed in the input field here when it's empty which gives the user an idea of what to type into it and this required attribute indicates that the user must provide an input before they can submit the form and the button element which you've worked with before is of type submit which means that when clicked it will submit the form data but this form won't be programmed to submit any data as that requires more programming and over in the CSS a lot of these properties should look familiar well all except for maybe display flex and flex Direction column so it looks like chat GPT generated CSS that uses a feature called flexbox to lay out the registration form flexbox gives you a more efficient way to layout align and distribute space among items in your layout and this this case the form elements are neatly aligned and laid out in a column in fact if you comment out or delete the CSS you can see what flexbox is doing without it they both shift onto the same row but with display flex and flex Direction column the text field and button appear neatly stacked on top of each other and this is really going to help us soon when adding a second input field now if anything still feels unclear don't hesitate to ask chat GPT questions or ask for a simpler explanation of HTML forms and CSS flexbox okay now that you're up to speed let's get into customizing this page first is just a simple content change that I want to make here in the heading I want to update the text to say subscribe and save 15% just to make the headline more descriptive and chat TBT generated CSS to make the form container adjust and resize according to the browser width which is great but it looks like the page needs some padding to create a little more visual separation between the edges of the container and the browser so I'll apply some left and right padding here in the body rule I'll replace this padding zero declaration with padding left and let's say 20 pixels and below that padding right 20 pixels that looks much better now we can clearly see the left and right edges of the form container even on narrow screen sizes and devices all right so I think that this description paragraph would look a little better and cleaner if it was left align with the form elements and I want to add another text field to the form that lets users type their name so how about you do that with a challenge in this challenge you will left align the text in the description paragraph and then in the form create a required name input field and here's a hint its type should be set to the value text so pause me now give that a go and I'll see you in a bit to go over this together all right hopefully that went well let's give it a go so first I will left align the text in the description paragraph that's being done here now currently I see that text align is set to the Value Center so let's see what happens if I change this from text align Center to text align left and yep that does what I want it to but it turns out that the value left is the default text align Direction so we can actually delete this line Al together and it works just like we want it to okay next is the name input field to do that I can just copy the code for the email input I'll copy it and paste a new input above it and in the challenge I mentioned that its type should be text currently it's email so I'll change this to text and the value email is specific typically used for email input fields to check that an email address is in the correct format but when you have an input field where users need to enter text such as their name you set its type to text I'll follow a similar pattern here by setting the ID to name and the placeholder text to enter your name and this is also going to be a required field and that's being set up here with the required attributes all right let's have a look I'll bring up my form click refresh and good the new input field appears stacked on top of the email field and that's again all being done with flexbox and if you click the submit button without entering your name since the field is set to be required you should also see a message that lets you know to fill out the field so hey if you got the steps for this challenge well done let's move on to the next challenge which I'll paste in here and this time I want you to display the dog. jpeg image image above the H1 element and to give the image the class featured image and when you display the image on the page you'll notice that it'll need some adjustments and that's okay we'll take that on after with CSS only worry about these two steps right now so go for it and I'll meet you back soon all right hopefully you were able to display the dog image you've worked with images in previous projects so let's take a moment to go over that here just above the H1 element I'll add the image using the image tag and to apply the class featured image I'll add a class attribute and between quotes write feature Das image let's not forget the closing bracket then to display the image on the page I need to add the source attribute and point to my image which is named dog. JPEG and one important attribute when working with embedded images is the alt attribute and what that does is is provide alternative text for an image for instance if the image source is broken the image can't be loaded or the user is using a screen reader the text you type in here is going to be displayed or read to the user the image itself is an illustration of a happy dog so for the alt text I'll write illustration of a happy dog if you figured out that you needed to include an ALT attribute fantastic as it's an important attribute when working with image elements now as I mentioned earlier the image appears way too large and out of place so now I want you to write CSS to adjust the size and shape of the image I'll add the steps for another challenge here in styles.css so this time I want you to style the image by selecting the class featured image and then making the image smaller so that it's about 100 pixels wide and I want you to apply rounded Corners to the image so think about what you need to do give it a go and I'll catch you in AIT bit to go over this challenge together all right hopefully that wasn't too bad and you were able to get through all or most of these steps now let's go over it together first I'll select the class featured image which is done using a period like this container selector here so I'll type dot featured image and then open up a set of curly brackets then to make the image smaller I'll use the width property and set it to 100 pixels and I see that worked and to apply rounded Corners I can use the Border radius property like we're doing here so how about I just copy this line of code here and paste it in my featured image rule and that looks pretty good but I want the image to be perfectly rounded and the way you do that is by setting the Border radius value to 50% and now we get a perfectly rounded image if you didn't make your image perfectly rounded that's okay the next thing I want to do is horizontally Center align the image above the heading because it's looking a bit weird left align and centering would make the design more balanced so I'll try to do that here in the featured image rule let's see earlier we used the text align property to align the content so what if I set text align to Center well that didn't work like it did for the paragraph So instead how about just asking chat GPT to give me the code for that so I'll ask it this prompt here I'll say hey what's the simplest way to horizontally Center align this new featured image and below I provide a code snippet of the image and H1 so I'll submit this to chat GPT and it says that to horizontally Center the image you can use CSS by setting the display property of the image to block and applying the margin property with a value of zero Auto and I get the updated CSS for that so I'll just copy these two lines lines of code that used the display and margin properties to horizontally Center the image then paste it into the featured image rule and it looks like that did the trick good while we're here I also want to create more space between the heading and the image and I can do that with margins so for example I can add a margin bottom property and set it to 20 pixels and the spacing here looks much better but here's a trick this is actually a margin shorthand property where the first value sets the top and bottom margin and the second value sets the left and right margin so if I set the first margin value to 20 pixels it looks and works the same and if I add a third value that controls the bottom margin so in this case I want the top margin to be 10 pixels the left and right margins to remain Auto to create that horizontal centering but I'll add a third value that controls the bottom margin Marin only and that opens up the spacing on both the top and bottom sides of the image all right finally how about applying a nice border to the rounded image that matches the color of the main heading and I want you to try something using chat GPT go ahead and open a new chat and feed it this directive prompt The Prompt for this challenge asks chat GPT to generate only the CSS needed to apply a 3 pixel border to this image using this color value here in this case chat GPT doesn't really need to know the context of your project this image code snippet should be all it needs to give you the necessary CSS so pause me now ask chat GPT and then add the new CSS to the project all right hopefully you were able to make that work I'll open up a new chat window then provide the prompt to chat GPT and I get back a CSS code snippet that applies a 3 pixel solid border to the image with the provid added color so I'll copy this line of code then paste it inside the featured image rule let's have a look the border is a nice Added Touch and it makes the image stand out a little bit more on the page all right so that about wraps up the subscription form project and I want you to take some time before you move on to ask chat GPT to explain anything that seems confusing or that you want to learn more about you've made lots of progress building with AI and HTML and CSS and up next we'll take a big step toward adding more power and interactivity to our projects with JavaScript you've learned a bit about HTML and CSS and used it to build some projects now it's time to learn another essential building block in web development JavaScript in this Grim you'll get an overview of what JavaScript is why it's important and how it fits into the larger picture of web development together with HTML and CSS think back to the HTML and CSS car analogy if HTML is like the structural building blocks of the car and CSS is the car's style look and feel then think of JavaScript as the part that powers the car's functionality like the car's engine and smart features without JavaScript our car might be aesthetically pleasing but it won't do much with JavaScript we breathe life and interactivity to the otherwise static structure and design for example the doors unlock when we approach the car the ignition starts with a button and the car moves when we push the accelerator all interactive all thanks to JavaScript in web development JavaScript is responsible for making websites and apps functional and interactive it enables us to respond to user actions like clicks or key presses manipulate content on the page and even communicate with servers to process store and retrieve data now you might be wondering how can I as a noncoders start using JavaScript well that's where our handy AI assistant comes in just like we did with HTML and CSS we can ask chat GPT to generate JavaScript code for us and help explain what it's doing let's say we want to implement a simple interaction we'd like a welcome message to appear when we click a button so let's ask chat GPT to create this JavaScript code for us I'll use this prompt which asks can you generate a basic HTML and JavaScript example where clicking a button logs a welcome message please add comments to help me understand the code I'll copy this prompt and paste it into chat and it Returns the HTML code which I'll copy and paste into index.html the HTML contains a button element with an ID of my button and in this case the pages JavaScript is placed directly in the HTML file within script tags the JavaScript gets a reference to the button element with the ID my button and assigns it to a variable named button using this special VAR keyword you can think of a variable as like like a container used to store information assigning the button element to this button variable makes it easier to work with a button and make things happen when it's clicked for example the code here pays close attention to our button using what's called an event listener so that anytime it's clicked something happens in our page or some functionality that we Define between these curly braces gets executed in this case it's logging the welcome message written here between quotes to the browser console and the browser console is a tool that's built into web browsers that allows you to run and test JavaScript code and display messages and console.log is what's used to display or log messages in the console in fact this scrim editor also has a builtin console that's this area here so I'll click the Run button to run this code and when I click the button in the mini browser the welcome message appears inside it good so now I have a quick challenge for you I'll includeed it here as a comment between the script tags and what I want you to do is display your name in this welcome message so it might say something like welcome Gil for example so pause me now and give that a try all right to display my name in The Welcome message I'll update the text that's passed into console.log the message is written inside quotes and any value or data you see in JavaScript written within single or double quotes is called a string So within the quotes I'll simply add welcome Gil I'll run the latest code click the button and I get the new message displaying my name so next how about we display this welcome message on the page instead of in the console so using this prompt I'll ask chat GPT to please update the code so that clicking the button displays a welcome message on the page so I'll paste this prompt into chat GPT and we get back the updated code and including an overview of the changes which you can read through I'll copy the new code snippet and replace everything in index.html with it and looking at the HTML I see that it now includes a div with an ID of message container to display our message and like it did with the button the JavaScript references the new message container div and assigns it to a variable named message container and this line uses the message container variable to update the text content of the container and display the welcome message so I'll click run to run my latest JavaScript and when I click the button I should see the message appear on the page and there it is good similar to how we've written HTML and CSS in separate files it's common to place your JavaScript in a separate file that uses the JS extension like script.js so let's do that I'll ask chat GPT to place the HTML in JavaScript in separate files files and to style the page with CSS so I'll feed this prompt into chat gbt and let it do its thing and I get back the code for HTML JavaScript and CSS files so I'll replace my HTML with this new HTML code snippet then copy the JavaScript code and paste it into my script.js file and if you're curious you link a Javascript file to your HTML using the script tag like so in this case it's pointing to script.js next I'll copy the CSS code into styles.css run all my latest code and that horizontally centures the button and makes it slightly larger I'll click the button and the welcome message appears all right so I have one more JavaScript challenge for you I want you to use a JavaScript variable to dynamically display your name in The Welcome message so your challenge is to create a variable named first name and a sign it your name and I'm going to update this line here so that it uses the first name variable you define to display your name in the message all right so take it away the scrim is all yours all right now let's go over the challenge together to create a variable named first name I'll use the VAR keyword followed by first name then type an equal sign to assign it my name between quotes or as a string and if you don't place this inside quotes the JavaScript interpreter will produce an error so as you can see here the red squiggly line lets you know that something is not quite right and in JavaScript semicolons are optionally used to Mark the end of a statement so I can type one here to be consistent with the rest of the code all right so now whatever I assigned to the first name variable should appear here so let's try it out I'll click the button and good the message says welcome Gil so if you did something similar nice work especially if this was your first time working with variables in JavaScript another way you might see variables written in JavaScript is using the keyword let which is easier to understand because if you read this out loud you might realize that we're just telling JavaScript to let first name equal or B Gill and you will see variables used a lot in JavaScript programming okay we've covered a lot in this lesson and if you still don't quite understand some things about this JavaScript code don't worry but but I really do want you to take full advantage of asking chat GPT to help you understand certain Concepts especially while building projects as you work more with these tools and continue to build your projects you'll start to recognize patterns and understand more about how HTML CSS and JavaScript work to help you out in the meantime I'll provide a prompt you can use to get a refresher or learn more about the basics of what we covered in this lesson so you can say to chat GPT hey I'm new to JavaScript please help me understand the basics of these Concepts and like in an earlier lesson when we covered the basics of HTML and CSS you can ask chat GPT to relate HTML CSS and JavaScript and how they work together to your own interests or Hobbies so here's a suggestion for how you might prompt chat GPT you can say I enjoy gardening how can I understand HTML CSS and JavaScript in the context of planting and maintaining a garden so explore some of these prompts and I'll see you in the next grim where we'll begin applying JavaScript to projects we are going to be throwing an epic event called GIF Gaya where guests dress up as their favorite gifts or memes we'll need to build an interactive invitation to allow guests to RSVP to the event we can do that using HTML CSS and JavaScript With a Little Help from chat gbt this is a bigger project so we're going to take it step by step using a series of role playing and instructional prompts where we guide the AI with specific steps to reach the desired outcome it's going to hopefully look something like this but first we need to work on creating the HTML structure of the event invite which might look like this I've set up the project with HTML CSS and JavaScript files the first step is to ask chat GPT to generate the HTML structure of our invitation and I've provided the prompt will use for that the prompt asks the AI to assume the role of a highly sought after designer and provides some context and objectives for the role to play then it provides Specific Instructions and details about what needs to be done which in this case is creating a vibrant festive RSVP page below it guides the AI on what elements the page should have such as an invitation header with a title a subheading showing the date an event description and a space to display a confirmation message then it instructs it to create an RS VP form with a required email field an attendance field and a submit button and we also wanted to link the HTML to a CSS and JavaScript file so I'll just feed this into cat GPT and it generates the HTML code outlining the basic structure of our page so I'll copy and paste this code into index.html and there might be some HTML tags here that you may not have seen before like Main and section these are known as semantic elements that help provide meaningful information about the content the main element describes the main content of the page and section defines specific sections in the page and we also have a select element which is commonly used in form elements to create a dropdown list of options in this case the user can select whether they are attending or not okay great now that we've established our structure we need to apply styling and that's where CSS comes in next I'll use this prompt to style the RSVP page it continues with the assumed role by instructing the AI to use its CSS skills to style the gift Gaya invitation so that it's easily viewable on mobile and desktop and I want the page to be visually engaging and fun as possible to match the event's Lively and playful spirit and the instruction to initially hide the confirmation message indicates a consideration for some JavaScript interactivity and I want CSS comments to help noncoders understand the code more easily so let's see what magic we can cook up with this prompt I'll copy and paste this CSS into styles.css and good our invite is taking shape and already looking more festive so let's have a look at the CSS we've got here I see CSS used to reset some of the default Styles applied to the browser then a lot of CSS properties that we've worked with before and remember how I asked the AI to initially hide the confirmation message on the page that's being done here with display none and soon we'll make it appear on the page dynamically using JavaScript when the form is submitted and then I see something different here under responsive Styles I asked the AI to make the page easily viewable on mobile and desktop so this at media syntax here is what's called a media query it lets us apply different styles to a page based on the width or size of the browser window or the device where the content is being viewed in this case Max with 600 pixels means that the CSS included Within These curly braces will get applied to our page only if the width of the browser is 600 pixels or less so for example if I set the background color of this main element to Red notice how the red background does not appear when the browser is wide and only appears when I shrink its width down to 600 pixels or less less now here in the media query I see that the font size for most of the content is being updated so notice how some of the text size changes too for smaller screens all right now I want you to hack around and customize the page with a challenge I asked the AI for a vibrant and festive color scheme and this color scheme doesn't quite hit the mark I think so I want you to explore making the page more vibrant and festive using these two color values for example change the background color of the header and the button or the color of the headings and it looks like the spacing in the form needs some work too so I also want you to add more space between the input field select menu and submit button so pause me now and work through these okay now let's go over the challenge together to make the invite a little more vibrant I'll update the background color of the header to this color value here and the background color of the submit button to this second value so I'll scroll down to the CSS styling the button and replace the background color property with the new value and why not I'll also change the color of these headings here to match the color of the button those are these H3 tags here so in the CSS for the H3 I'll add the color property and set it to that color value all right that is looking better to me finally there are a few ways I might update the space between the input select and submit button what I'll do is apply a bottom margin to the input field and the select menu and I can do that here in this CSS rule that targets both at once I'll add margin bottom 18 pixels and that creates the spacing I need much better if you used a different approach than me that's completely fine all right now to add some life to this party we'll need JavaScript it will make our page interactive allowing the invite to respond and behave in specific ways based on user input so let's ask chat GPT to add some interaction to our page I have here another instructional prompt that gives the AI Specific Instructions to create JavaScript code to enhance the interactivity of the RSVP page then I provide clear tasks about the desired interaction which is to check if the user selected attending and then display a party emoji and a positive message if they are attending and I'm also being specific about where the message should appear in the confirmation message space and I requested adding brief comments to the JavaScript logic to make it more understandable for an encoder so let's feed this prompt to chat gbt and it generates the JavaScript I'll need which I'll copy and paste into script.js so let's go over this JavaScript first it gets the form and confirmation message elements and assigns them to variables and you may notice a new keyword const being used for the variables const is another common way to declare a variable in JavaScript unlike the lat and VAR keywords when you use const you're creating a variable that cannot be changed or reassigned once it has been set so in other words it's a constant value throughout your program then the code pays close attention to when a user submits the form and then runs all of this code each time it's submitted and this line here event prevent default is commonly used with forms to give you more control over the form submission and prevent the default browser Behavior associated with submitting forms then here we're getting the selected attendance value and assigning it to the variable attendance and this code here displays a confirmation message based on attendance selection it uses a common statement in JavaScript called an if statement that checks if the variable attendance or what the user selected is equal to the string yes if it's yes it sets the HTML content within the confirmation message div to display a celebratory message then it shows the confirmation on the Page by setting its display to block and it resets or clears the form here all right let's try it out I'll enter an email then select that I'm attending click submit and look at that we've got some interactivity on our page below we get the message partyon we look forward to seeing you at the gift Gaya good now I think that it would look better if the confirmation message appeared above the form so in index.html I'll move this confirmation message div above the RSVP form section I'll test it out and that looks much better now it does look like I need to add some space between the confirmation message and RSVP heading and I can do that with a bottom margin so here in the confirmation CSS let's say a margin bottom 20 pixels that looks good and then we no longer need to apply the bottom margin to the form so I'll just remove this entire form rule from the CSS great our gift Gaya invite is looking sharp up next we'll continue working on more interactivity with JavaScript it looks like chat gbt gave us the JavaScript code to display the confirmation message only if the user is attending notice how it displays a blank section if I select that I'm not attending well this was intentional because now I want you to work on displaying a different confirmation message if a user selects that they are not attending here's the challenge update the JavaScript below to display this message if the user selects the option sorry I can't make it use this code here as a reference for what you'll need to do and don't hesitate to ask chat GPT for help either so pause me now get coding and I'll show you my my solution when you're done all right if you got it to work well done there are a few ways you might have displayed the message to users not attending I did suggest using this if statement as a reference so you could have maybe copied this code block pasted a new one below and updated it to if attendance is equal to no then set confirmation message to this message and let's see I'll select sorry I can't make it and this works just like we needed to if you use this approach in your Solution that's great but there are other statements we can use with the if statement to create a conditional statement that performs different actions based on different conditions one of those is else if so here if the attendance value is yes then the program skips checking whether attendance is no and displays this message now if attendance is not yes then it checks if the attendance is equal to no then displays the proper message and I'll test it out here and you can see that it works in the exact same way assuming attendance can only be yes or no you could also write this using an if else statement like so so we can just have else without attendance is equal to no and this way if attendance is not yes then it must be no so this code should run either of these approaches is fine and if you'd like to learn more about JavaScript conditional statements I'll provide some prompts here that you can use with chat GPT now this is the GIF Gala after all so the last thing we'll work on is customizing the JavaScript to display a gif in the background based on what the user selects for attendance so with this prompt I'm instructing the AI to update the JavaScript and CSS to display this image as the page background if the user is attending and that the image should cover the entire background area of the body so I'll paste this into chat GPT and let's see what we get all right so I'll copy this JavaScript code and replace everything in script.js with this new JavaScript so it looks like this code is getting a reference to the body element and assigning it to the variable body and this line here sets the background image of the body element directly using the style. background image property and this URL function is what tells the browser to load the image file and use it as the background so when the user is attending or attendance is equal to Yes it sets the body elements background to the provided image URL and if the user is not attending or attendance is equal to no then the body's background image style gets sets To None to remove the background image and in the CSS code background size cover ensures that the image covers the entire background area of the body and background position center centers the image within the body so I'll copy these two properties then paste them in my body rule here in the CSS so let's test the latest changes I'll enter an email select yes I'll be there click submit and awesome we see the party gift displaying in the background now if you make the browser window taller you'll notice that the image is repeating itself here toward the bottom to fix this we can add a couple of CSS properties here in the body rule first I don't want the background image to repeat so I can use the background repeat property and set it to the value no repeat to prevent that then I'll add a height property and if I set the height value to 100 VH it means that I want it to take up 100% of the viewport height which is what VH means or the total height of the visible area in the browser so I'll refresh the mini browser try it out again enter my email select that I'm attending click submit and now I shouldn't see the party gift repeat heating or any empty spaces below it and I don't fantastic now don't we also want to display a different image if the user is not attending yeah I think that makes sense and I want you to work on that part for this last challenge so take a moment to update the JavaScript to display this GIF if the user is not attending pause me now and go for it all right hopefully you got the not attending gift to display so if the user selects not attending that means that the value of attendance is equal to no and currently that sets the background image to nun so I'll copy this URL function here and replace none with it and then Within These quotes I'll add the URL to this GIF and that should work I'll test it out enter an email select sorry I can't make it click submit and yes there is our sad GIF displaying in the background now I do want more of the background GIF to show through so I'll create a semitransparent background for that I'll even ask chat GPT hey which CSS property creates a white semitransparent background and here in the output I see that the CSS property that creates a white semitransparent background is background color with this rgba value here this rgba color model lets you set an alpha value that determines the level of transparency for the color so I'll copy this background color property and I want the main element to be semitransparent so I'll paste it here in the main Rule and here's the alpha value which is set to 0.5 which in this case means that the background will be 50% transparent I want it to be slightly less transparent so I'll set it to 0.75 which is going to allow some of the background to show through and that looks great let's test it with the attending GIF and and there you have it you've just built an event invitation page using HTML CSS and JavaScript all with help from chbt so nice work hopefully you picked up new coding skills along the way let's move on to our next project I don't know about you but in just about every office I've worked in cake is a big deal birthdays anniversaries Fridays there's always a reason for cake but there always seems to be that one person who ends up without a piece so we're going to fix that by building a cake raffle web app with the help of chat gbt and it might look something like this the raffle app will allow users to enter their names into a cake raffle then it will pick a random winner with a click of a draw Button as usual I've set up the project with an HTML CSS and JavaScript file and a prompts MD file for the AI prompts so let's start by sharing our idea with chat GPT through a conversational prompt this approach could give us a great starting point and allow us to shape the project and code in a more organic and less rigid way this prompt starts with a friendly greeting and presents the project idea it clearly mentions the Technologies to be used which is HTML CSS and JavaScript and describes the details about the desired functionality then it instructs the AI to outline the basic steps to get started so based on this prompt the AI should have a broad understanding of the projects objective which is a great way for us to Kickstart the project as it allows for more creativity and ideation so I'll copy this prompt and feed it into chat upbt and chat upbt practically generates some ideas and steps I can use as the basis for instructional prompts to help build my raffle app for instance steps 1 two and three outline the basic steps to follow for creating the HTML CSS and JavaScript interactivity these look good to me so let's go with these suggestions to set up the core HTML CSS and JavaScript for the app since we've established this collaborative twoway conversation with the AI I will reply to it with this instructional prompt this prompt instructs the AI to generate the project code for steps 1 through three of the suggested outline then it provides specific steps on how to structure the HTML and divide the app into different sections making the task clearer and easier to follow for the design it suggest just using a vibrant color scheme such as this value here and similar complimentary colors for the button States The Prompt also asks to make the code easy to understand even for noncoders and to add code comments in the CSS and JavaScript to help us understand and learn what it's doing so let's see what chat GPT will generate with this prompt and good it Returns the HTML CSS and JavaScript code for the app so first I'll copy and paste the HTML code code into my project then let's dress up the page with CSS I'll copy the CSS code and paste it into styles.css let's run the code and see what we've got so far good I like the direction so far and lastly we can't forget the most important ingredient JavaScript so I'll copy the JavaScript code and paste it into script.js so let's spend some time going over the JavaScript at the top we access all the relevant elements on the page that we want to interact with or display dynamically like the form input field and Button as well as the participant list and winner display container and it assigns them to variables now this line of code here declares a variable called participants and assigns it to an empty array a JavaScript array is a data structure that allows you to store multiple values in a single variable it's like having a collection of items in a list in this case it stores a list of the raffle participants and this code pays attention to when users submit the raffle form then all this functionality here gets executed on the page that's what this function keyword is for in JavaScript functions contain a block of code that performs a specific task or set of instructions in this case it's getting the entered name and assigning it to this name variable then it's adding or pushing the name into the participants array and below this line is displaying the name on the page inside the participants list now this syntax here that uses back tick places each name inside P tags to create a paragraph element and this dollar sign curly braces syntax dynamically inserts and displays a participant's name on the page it's called a template literal and the line below clears the name input field so all of that happens with just the form submission now just below is the functionality for the pages draw button the program listens for when the button is clicked then runs this block of code first it checks if there are names in the participants list or more than zero items in that array it runs this code to randomly select and display a raffle winner and emojis again using the special back TI and dollar sign curly braces syntax all right now let's try it out I'll enter some names like Gil then click the draw button and it displays the winner which is Bob congrats on your cake Bob refresh the page and everything clears so great with JavaScript our cake lottery app becomes a dynamic and interactive user experience now one thing I immediately noticed is the spacing problem between the input field and enter button so I'll fix that in the CSS I'll find the selector where we're styling the input element with the type text right here here and apply a bottom margin of let's say 16 pixels and there we go now while I'm here I also think that the label for the name input would look better if the text was bold so I'll update that here in the label rule with the font weight property and set it to the value bold and that looks much better to me all right next let's work on a JavaScript challenge I'll paste it here in script.js I want you to work on adding a reset button that clears the participant list and winner display the button should allow users to start a new round of the cake raffle and I've provided a hint saying that the number of items in the participants array or its length should be equal to zero then use this color value for the button background and this color for its hover State this is likely the toughest challenge you've worked on so far and if you have a look through the JavaScript you'll find some lines of code that might give you a hint of what you'll need to do for example these two lines here and as usual feel free to rely on chat GPT and ask it for suggestions so take it away you've got this and I'll catch up with you when you're done to go over it together all right hopefully you got through most of the challenge if you did amazing work now let's go over it together first I'll work on adding the reset button in the HTML to do that I can copy the existing draw button and paste it below then update this code so that the ID is reset dash button and that the text is reset and there's our reset button now it doesn't look like the other buttons yet and that's because we need to style it with CSS and I see that this CSS here is what's applying the styles to the submit and draw button it's selecting both at the same time so I'll also have this select the reset button by typing a comma and then the reset button ID and good now the reset button has the button Styles applied now we need to apply a different background color to the reset button so I'll create a separate CSS rule for that that targets the reset button ID and I'll use the background color property to apply the background color using this color value here which I'll just copy and paste into my CSS looking good and I also provided a color for the hover state so I'll copy that and in the CSS I'll style the reset buttons hover State similar to how it's styling the draw buttons hover state with reset dash button colon hover and then here I'll include background color and the color for the hover State let's try it out and now when you hover over the reset button you should see it change to a darker shade of blue and it does good all right let's move move on to the JavaScript next first I'll work on getting a reference to the reset button and assigning it to a variable I see something very similar being done here for the draw button so I'll just copy this line of code and update it so that the variable name is reset button and that it's getting the element with an ID of reset button and I mentioned looking through the JavaScript code and maybe finding some hints of what you'll need to do so I do see that this of code is what selects the random winner and displays the Winner's name on the page so I might be able to do something similar with the reset button so how about if I just copy this entire block of code or event listener paste it below and update this to reset button. Adent listener and when the reset button gets clicked I want to clear the participants list and the winner display area I don't need to check if there are participants and select a random winners so I can and delete this and I mentioned that this line of code might give you a hint it's what's setting the inner HTML of the winter display to the winner and emojis so how about if I copy this line of code and paste it inside the code for my reset button and instead of setting its inner HTML to a paragraph We want to clear it so instead I'll set it to an empty set of quotes and let's see what happens I'll type a name into the field select Tom as the winner then click the reset button and great the winter display area disappears from the page so now it looks like I need to clear the participants list looking through the code I do see the variable for participant list so I'll copy participant list. HTML and I'll follow the same pattern here set participants list. HTML to an empty set of quotes I'll add a couple names to the list select the winner congrats Tom now let's see what happens when we click reset awesome now both the winner and participant list are cleared now there is one more important thing that we need to do and if you did not think about or implement this part that's totally okay we need to ensure that our participants array is truly empty because notice that if you click draw it displays Gil as the winner click it again it displays treasure as the winner which is weird because Gil and treasure do not appear in the participants list well it turns out that they are still being stored in the participants array so we'll need to clear or empty the array and in the challenge steps I've provided a hint saying that the number of items in the participants array which is known as the array's length should be equal to zero and here in this if statement I'm seeing participants. length and length refers to the number of items or elements inside an array in this case the participants array so let's see what happens if we set the length to zero here in the event listener with participants. length equals 0 Let's test it out draw a winner congrats bear and I'll click reset that clears the page and clicking draw should not draw a new winner and it doesn't good which means that worked again this was a tough challenge so if you came up with a solution similar to mine well done next I'll quickly walk you through some visual enhancements we can apply to the page the first one is to adjust the layout of our buttons I think the page would look better if if the draw and reset buttons were on the same line like this there's different ways I might do that so what I'll do in the HTML is place them inside a div with the class name button group like so then I'll use a CSS layout technique you saw in an earlier lesson called flexbox to place both buttons on the same Row first I'll select the class button group and here I'll turn on the special Flex boox layout with display Flex and you can see what that did now I want to apply a gap or a space between the buttons and for that I'll use a CSS property intuitively named Gap and set it to 10 pixels and that's looking really good to me finally let's liveen up the page with a cake icon similar to Google web fonts Google offers a collection of icons called material icons that we can easily use in our projects so I'll ask chat GPT to give me the code for that using this prompt here please use Google material icons to add a cake icon inside the H1 I'll paste that into chat GPT and it returns two HTML Snippets for adding and displaying the icon first it looks like I need to add the Google material icon stylesheet to the HTML with this line of code so I'll copy that and paste it in the head section of my HTML and then I need to modify the H1 to include this I tag with the class material I icon so I'll copy just that line of code and replace this H1 in the header with the new code all right cool there's the cake icon next to the title and there we have it everyone a fully functional cake raffle app before moving on to the next project I'd like you to experiment with the HTML CSS and JavaScript and tweak the functionality to make this app truly yours for example change the theme to a movie ticket raffle a pizza raffle anything you'd like and I also want you to ask chat GPT about some of the things we've covered or anything that you still might be confused about as you've experienced coding with AI gives you Endless Possibilities it's like having your cake and eating it too you get to create amazing things and have a sweet time doing it so go ahead and Delight your friends and coworkers with a raffle app hi there you've taken some big strides in this course exploring the fasc F inting world of coding and building cool apps while leveraging generative AI tools like chat gbt you've had a taste of what it's like to create something from just an idea then watch that idea take shape even without formal coding skills now at this point you might feel like you've been thrown into the deep end and maybe worried that you don't understand everything and that you're dealing with code that seems more complex than you expected well rest assured that it is 100% normal to feel this way in fact for this course specifically this is intentional You Were Meant to punch above your weight in this course and work with code or take on challenges you don't fully understand or seem beyond your current skill level the goal all along has been to get you to Dive Right into building projects and solving problems without going the long way of learning most things from scratch beforehand or focusing on the code itself now if you feel like you need to get a firmer grasp or dive deeper into the technical details of coding and a lot of what you've been working with so far then script rmba front and developer career path is the perfect place to learn more and take that next step on your coding and building Journey we designed this curriculum to deepen your knowledge of HTML CSS JavaScript react and more with 13 modules filled with interactive coding challenges and over 15 real world projects that you will build yourself from scratch with the opportunity to get code reviews from the scrimba community if you'd like to check it out or join at any time visit the frontend developer career path on the scrimba site or click on this image to head over to it now I'll see you back soon to keep on building we are going to navigate an essential skill for any Builder and coder debugging and getting feedback to improve your code and we'll use chat gbt to help guide us through this we're going to use this real rewards project which is a simple page that gives you a 50% discount on movie tickets when you enter the promo code have to structure the page we have an H1 element and a paragraph element to display the final price then below a div with a ID app containing a form element where users can enter and submit their promo code over in the JavaScript we are first getting elements from the HTML like the promo code input field the paragraph displaying the final ticket price and the promo code form and assigning them to variables The Base ticket price is set to the script then displays this price in the final price element when the page loads and right below the function applyed discount calculates the final price based on the entered promo code if the promo code the user enters is equal to half then the discount rate is set to 0.5 or 50% otherwise it remains zero and no discount gets applied the function then calculates the final price by subtracting the discount from the base price and returns a final price and this code here runs when the user submits a promo code so when the form is submitted this code retrieves the entered promo code and calculates the final price by running or calling this apply discount function which is this code here and then it checks if the final price is less than the base price meaning a valid discount was applied then the script updates and displays the new price here otherwise if no valid discount was applied the script sets the placeholder text in the input field to display the message in valid promo code and this line here clears the input field I totally understand if there's code here that you don't quite get or that is still confusing to you I don't want you to feel like you need to understand everything in this Javascript file the purpose of this lesson is to help you get feedback improve and understand your code a little bit better with the help of chat gbt now this project is far from perfect or even production ready in fact when you first run it notice how we're getting a JavaScript error in the console so let's look at some ways we can debug and improve the JavaScript with the help of chubbt now debugging might sound a bit intimidating at first but it's just the process of identifying and removing errors or bugs from your code with chat gbt you can more easily troubleshoot these errors it can point out syntax and logic errors or even suggest better practices to prevent bugs in the future so here's an example of how you might prompt chat TBT for debugging you can provide a description of the issue paste your code into the chat and it will help identify possible problems so for example here I'm saying that I'm having an issue running my JavaScript code and then I'm providing the airor message I'm getting which is the message that appears in the console and then I say please help me understand what's wrong so I'll submit this prompt to chat GPT and here I see that this typically occurs when you're attempting to manipulate an element that doesn't exist or hasn't been properly accessed and then I see more instructions here for example ensure that your JavaScript code is running after the HTML document has finished loading ah so here I see that you can achieve this by placing your JavaScript code at the bottom of the HTML file just before the closing body tag looking at the HTML I see that the script tag is in the head tag so that is indeed what's causing the problem so I'll move my script tag just above the closing body tag like so and when I run the code I see that the air no longer appears in the console great testing the form now I see that I'm not able to submit a promo code notice how clicking the apply discount button immediately refreshes the page preventing a discount to be applied as expected so I'll turn to chat GPT with this prompt which says I'm having issues with my JavaScript code submitting the promo form refreshes the page and does not run the following code as a expected in this case I'm placing the code to evaluate within triple back ticks to visually separate the code from the surrounding text and indicate that it should be treated as code this can also make it easier for human readers to identify the code improving the overall readability of the prompt and for the AI itself it might help separate our instructions from the context you might also see this done with hash symbols or quotes for example now in many cases you don't even need to place your code with than quotes hash symbols or back ticks chat gbt is likely to figure it out so I'll copy this prompt and paste it into chat GPT and it looks like the JavaScript is missing a method to prevent the default form submission behavior and that's this method here event.prevent default so let me add that line of code here in my promo form event listener right at the top like this this ensures that the default form submission behavior is is cancelled so now when I enter a promo code and submit the form the JavaScript code runs without refreshing the page allowing the promo code to be applied and display the final price but testing it again it looks like the discount gets applied to the base price no matter what text or promo code you enter so I'm going to challenge you to debug and fix this with the help of chat GPT the challenge is to use chat GPT to debug the apply discount function so I want you to head over to chat GPT and provide it with this prompt and include the code to debug within the hash symbols then evaluate chat gpt's response and fix the code using what it suggests so pause me now and give this a go okay hopefully you got it to work I'll give it a go by including my apply discount function here within the hash symbols then copying this prompt and feeding it to chbt and here I see that the issue is in the conditional statement it looks like instead of a comparison operator which is this triple equal sign I'm using the assignment operator or only an equal sign to compare the user code with the string half and this is what's leading to the incorrect behavior and then to fix the problem I need to change the assignment operator to the equality operator and I see an example of that here in the updated code all right this doesn't seem too bad so over in the JavaScript I'll update this line here to if user code triple equal sign half using the triple equals for comparison ensures that the value of user code is compared to the string half and if they are strictly equal then the discount rate will be set to 0.5 or 50% otherwise it remains zero or no discount gets applied I'll test it out I see that the Base ticket price is $50 now I'll enter the promo code have and all caps click apply discount and great the final ticket price is indeed 50% off or $25 so now the code seems to be working as expected all right once your code runs without errors you might want to make it more efficient or readable and this is where chat GPT truly shines with its ability to generate code you can ask chat GPT for more efficient modern and elegant Solutions or different approaches to a problem a prompt you can use for code Improvement might look like this it says that this JavaScript code works as expected but I think it could be made more efficient and modern please provide a more streamlined and uptodate version of this code then I'll paste all of my JavaScript code here and chat gbt will evaluate it and give me some suggestions all right so here I see that it suggests replacing the VAR keyword with const which can help avoid accidental reassignments and bugs in the code and it simplified the applied discount function using a conditional turn area operator to assign the discount rate based on the user code that's this code here which is another more concise way to write an IFL statement and I see that it also suggested using Arrow functions which is another way to write functions using a shorter syntax so the JavaScript does seem more efficient with modern features that can help prevent bugs in the future and I could use this code and push my project live but I think I'll ask for more feedback on my original code as with any learning and building process feedback is key and AIS like chat GPT can provide that too with its immense knowledge of coding conventions and standards chat gbt can give you valuable feedback on your code structure syntax and even style so this time we're going to take advantage of the role playing prompting approach to request feedback I'm telling chat chbt you are a senior developer reviewing my JavaScript code before I ship it to production please provide feedback on how I can improve this code make it more maintainable and handle cases where a user enters the promo code in lowercase because notice that if you enter the promo code half in all lowercase the discount doesn't get applied but I think that users should still get the discount even if they type the promo code in all lowercase so my senior developer here is going to help me out with that below I'll paste all my JavaScript code then submit this prompt to chat GPT and here I see a lot of valuable feedback and suggestions for example it suggests using descriptive variable names to convey their purpose and meaning better and to convert the base price value to a numeric value versus a string and that's going to help prevent calculation errors then to handle cases where a user enters the promo code in all lowercase it says that I can convert the user code to uppercase and compare it to an all uppercase version of the promo code this two uppercase method converts text to all uppercase letters this looks good to me so I'll copy this new JavaScript code snippet and replace all the code in my script.js file with this new JavaScript overall I think that this feedback makes the code more functional organized and maintainable for example I even see that it suggested moving the logic for applying the discount and determining the final price into two separate functions and then only referencing or running the handle form submission function here when the form gets submitted which makes the code easier to understand and maintain I'll run all this latest code and test it out the ticket price is $50 I'll type half in all lowercase and good the discount gets applied so now the final price is $25 and if I enter an invalid code such as test I get the message invalid promo code awesome now don't worry if you're still confused about or don't understand a lot of this code like always spend some time asking chat upbt to give you more details about anything you like to learn more about remember coding isn't always about making things work it's an iterative process so it's perfectly okay and normal to encounter bugs and problems in your code it's all part of the journey and with tools like chubbt by your side you'll be well equipped to tackle these challenges headon all right let's get ready to turn up the volume on our coding skills and build a drum kit web app with the guidance of chat upbt as usual HTML will form the structure of our drum kit CSS will give it a Sleek look and JavaScript will add exciting interactive elements and play real drum sounds so grab your virtual drumsticks and let's hit it the project contains the usual HTML CSS and JavaScript files and this time I've included a folder named sounds that contains several audio files in the wave format we are going to take this step by step so first we'll ask the AI to Kickstart this project let's see how we can code a button that when clicked triggers a kick drum sound I'll use this instructional prompt that provides a clear task for the AI to build a simple drumkit app using HTML CSS and JavaScript and I want to start with only one button that when clicked should play a drum sound and the button should appear centered on screen below I've provided some context about the sound file like its name and location and I've learned that HTML has a handy audio tag which is used to embed and load sound files in your page so I'm asking it to use the audio element for the sound file and as usual I want code comments to help me understand each part of the code so I'll paste this prompt into chat gbt and let's check out its response okay first it suggests the project directory structure which we've already set up just like this and here's the HTML which I'll copy and paste into my project I see that it has a container div with a kick button inside it and below is the audio element to preload the kick. wve sound file so let's add the CSS next which I see is using that special flexbox layout feature you've seen before to Center the button on the page so I'll add this CSS to my project and finally copy the JavaScript and paste it into script.js the JavaScript gets the kick button element and assigns it to the const variable kick button then it gets the kick sounds audio element and stores it in the variable kick sound then below the code pays close attention to when the kick button gets clicked so when the user clicks it it runs this code to play the kick sound in JavaScript this play method is used to start playing media like audio and kick sound. current time equals 0 makes the audio start playing from the beginning all right so let's get to the moment you've been waiting for and try it out I'll click on the kick button and great the kick sound plays before we get to adding more drum sounds I want you to give your drum app a title so here's your challenge come up with a cool name for your drumkit app and display it in a heading and then Center the heading on the page with CSS so pause me now and give that a go all right here we go I'll add an H1 element here to create my pages main heading and I'll give my drum kit app a cool name like Groove kit there we go now to center it on the page I'll select the H1 here in the CSS and set its textalign property to Center and while I'm here I'll adjust the CSS for the container so that there isn't as much of a gap between the heading and the button I'll get rid of this align items and height properties since we don't really need them and then how about giving the container a top margin of 30 pixels that looks much better all right let's move on to your next challenge we are going to expand our drum kit your challenge is to create a new button for the ride drum sound you'll need to write the button tag the audio tag and the JavaScript code to make it play when clicked and be sure to use the existing HTML and JavaScript code as a reference so pause me now and work on this challenge all right if you were able to add and play The Ride drum sound great work now let's work on it together first to add the right button and play The Ride sound I can follow the same pattern use for the kick button and sound I'll copy this kick button and paste a new button element below then update the ID to ride and the button text to ride and then I'll copy the audio element for the kick sound and update this ID to ride Das sound and I want the source to point to the file ride. wve all right that should be it for the HTML now let's move on to the JavaScript first I'll retrieve the ride button element and assign it to a variable so I'll copy the line for the kick button and update the variable name here to ride button which will select the element with the ID ride and I'll get the ride sound element in the same way I'll update this variable name to ride sound and get the element with the ID r sound finally to play the right sound when the right button is clicked I'll copy this code block here paste it below and then update this code block so that it pays attention to the ride button and when the ride button is clicked I want to play the ride sound so I'll change this here to rid sound. current time equals 0 and then to actually play play it I'll update this to rid sound. playay all right let's give it a try all right cool now we're able to play both the kick and ride sounds we are making good progress so now we'll ask the AI to make our drum kit more interactive I wanted to play drum sounds using my keyboard and not just with button clicks for example pressing the a key on my keyboard plays the kick sound and the S key the right sound so next I'll prompt the AI to extend the drum kit app by triggering the kick sound when the a keyboard key is pressed so let's start with that and see what chat GPT comes up with all right so it gives me the modified JavaScript and I'll only copy this new code block at the bottom and add it to my Javascript file so now the JavaScript program is paying attention to or listening for key presses on the page this code is saying when a key is pressed down anywhere on the page do the following actions in this case it uses an if statement to check which key was pressed so if the Pressed key is a then it plays the kick sound so now I can press my a key to play the kick sound next how about you work on updating this JavaScript to play The Ride sound file whenever the S key is pressed so pause me now and go for it all right here we go to play the right sound when the S key is pressed I'll copy this if statement paste a new one below and I'll update this to else if so if the Pressed key is s it's going to play the ride sound so I'll update this to rid sound. current time equals 0 and rid sound. playay I'll test it out and good that worked let's keep the Beats coming so your challenge is to complete the drum kit app by adding the button and audio elements for the snare Tom and high hat sounds you'll also need to update the JavaScript so that clicking each button will play the corresponding sound and then play each sound when pressing a specific key and the keys to press are up to you so take your time with this and I'll meet you back up when you're done to go over it okay hopefully you got all your drum sounds to play and even jammed out for a bit now let's work through these I don't want you to have to watch me type every button audio tag and JavaScript code so I'll paste all the remaining button and audio elements here in the HTML we have our button elements and now the audio tags then in the JavaScript I'll paste in the variables for the buttons and then the three audio elements next I'll paste the event listeners for the three buttons right here and finally the else if statements for each key press and notice how the buttons overflow their containers and we're not able to view them all at once on the page I can fix this with CSS by wrapping the buttons onto new lines whenever there's not enough space for the buttons to all fit on one or even two lines here in the container rule so I'll wrap them with the flex wrap property which is also a special flexbox property then set the value to wrap and I also want to space them out by adding a gap between each so I'll use the Gap property and set a 20 pixel Gap all right much better now the buttons are all nicely spaced out and we can see them all at once on the screen they even stack and display as a column on narrow screens now I'll test my latest changes with a quick jam session hopefully you enjoyed that it seems like everything is working great now while building this project we duplicated a lot of code for example the JavaScript that plays a specific drum sound when its corresponding button is clicked and the code for playing sounds when a key is pressed and we're not worried too much about duplicate code right now while learning to build projects but repetitive code like this can often be replaced with more efficient and maintainable code so the last step you might do is ask chat GPT for help updating your code so that it's more concise readable and maintainable with a prompt like this you can say please update this JavaScript code so that it's more concise and maintainable and then include your JavaScript code here and this will likely generate new code that might seem a bit too complex and difficult to understand right now so let's not worry about that and stick with our original code all right so you've just built a drumkit app with interactive elements connected them to sounds and made the interface respond to both mouse and keyboard inputs I think now is a great time to show this off to friends and colleagues you can also customize the CSS and even add different sounds to your app such as the Boom Clap and open hat files included in the sounds folder and one last thing why don't programmers like nature because it has too many bugs and with that I'll show myself out our work here is done let's move on we've been creating some cool projects using HTML CSS and JavaScript with chat gbt so now it's time to Showcase these to the world world I'm going to introduce you to a remarkably simple way to deploy and share your projects using a service called netlify so let's Jump Right In First up let me show you how to download the code from a scrim onto your computer first click on the gear icon in the bottom right corner of your scrim then click download as zip and that's going to download a zip file to your computer unzip the file and you'll see your project files inside a folder in the folder you might see some new unfamiliar files like readme MD package.json and another named V.C config.js go ahead and delete those files because you're not going to need them I also suggest renaming your project folder to help you keep track of it and now you're ready to deploy your project with netlify netlify is simple to use even for noncoders and perfect for our needs it offers free hosting for personal projects which makes it a great choice and we'll focus on netfi drag and drop feature so head over to netlify.com or click on this image to visit the site and create a free account you can simply use your email to sign up or if you happen to have an account with a service or platform like GitHub or gitlab you can use it to sign up with your account all set up you can deploy your first site in minutes and you'll be amazed at how simple this is on your netlify dashboard you'll see a section titled sites then under the add new site dropdown select deploy manually and here's where the magic of dragon drop comes into play you take your project folder then drag and drop it right into this area where it says drag and drop your site output folder here and that's it no complex configurations no code just drag and drop netlify will do its thing and your site will be live on the web within moments you'll see that netlify provides you with a unique URL where you or anyone can access your site click on it and you'll see your project live on the web and from here sharing your project is as easy as sharing this URL that netlify provides so now what happens when you want to make changes to your project after it's been deployed well netfi makes this easy too after making changes to your project you only need to drag and drop the updated project folder onto the netlify dashboard here under deploys and netlify will automatically update your site with the new changes the URL for your project stays the same so there's no need to reshare a new link so just remember that every time you make a change in your local project files you'll need to reupload the entire project folder to netlify to ensure that your live site stays in sync with a project on your computer and there you have it deploying and sharing your projects is pretty much a breeze with netlify so don't hesitate to get your work out there in fact how about you share a project you built in this course with peers by posting the project link on the today I did Discord Channel clicking on this image will take you right to that channel remember building is only half the fun sharing your Creations is where the magic truly happens and just like that we've reached the end of this section where we started to bridge the gap between learning to code and building tangible projects with HTML CSS and JavaScript all while unlocking the potential of AI so nice work we kicked it off with the basics and some simple elements but before we knew it we were building functional interactive projects while learning how to frame effective prompts and debug and refine our code with the help of AI so with the skills and AI know how you've now got under your belt you're well equipped to tackle bigger more complex projects you've come a long way and the exciting part is that this is still just the beginning this course is a living iterative project much like the evolving field of AI itself I'll be adding more sections to the course featuring new more complex projects that will allow you to stretch your newly acquired skills even further so I'd really appreciate sharing your thoughts feedback and suggestions about this course and any ideas for projects you'd like to build in the future sections of this course clicking on this image right here will take you directly to a quick feedback form in the meantime I hope you continue to explore and build with AI so I'll see you back soon and we look forward to checking out your projects happy building hello again brilliant Builders we've spent some time together building wonderful projects and dipping our toes into the world of HTML CSS and JavaScript all with the help of AI but we're just getting started in this section we'll be transforming Next Level project ideas into reality all while keeping the building and learning process fun and interactive remember that the goal is to help you build projects with the magic of AI while not getting lost in the weeds of technicalities so let's take a peek at what's in store for you first you'll build your own version of the classic whackamole game it's called face bomp and it will surely put a smile on everyone's face then you'll build an interactive project slideshow perfect for a personal portfolio website following that we'll put together a personal homepage where you'll showcase all your fantastic AI assisted projects and tell the world a little about yourself and your skills and that's just the beginning we are also diving into building Chrome extensions you'll create a shopping wishlist extension called Snap stash you'll also design and build a Smart Home Mobile interface and even learn how to transform it into a mobile friendly app that users can launch from their devices home screen and to make storing and sharing your projects easier I'll guide you through adding your project s to a platform called GitHub finally to wrap up this section I'll teach you how to use GitHub and netlify together to automate how you deploy your project updates like the previous section of this course you may at times feel like you're in unfamiliar territory and worry that you're not understanding everything that's going on in the code but rest assured that this is intentional as I've mentioned before this course encourages you to stretch beyond your comfort zone diving into code or challenges that might seem Advanced for your current skill set we want you to Dive Right into building cool stuff without going the long way of learning everything from scratch with AI at your side you can quickly get off the ground with plain conversational English and then gradually become more technical as you put together simple apps so let's launch right into this section to continue exploring the power of AI and keep on building before you do take a moment to let your scribo colleagues know that you're starting this section in the today I will Discord Channel click on this image to jump right into the channel every ever heard of or played the game whackamole well we're about to build a version of the game with a personal spin calling it face bump we'll kick off this section by recreating this classic tactile game into a digital experience using HTML CSS and JavaScript so the idea is pretty straightforward instead of moles we're using photos maybe even one of you or your friends and the challenge is to catch and bump the photo every time it appears just like in the classic game the game will even include a timer a score display and images that pop in and out at random and to speed up the process we'll get some help from chat GPT let's kick things off with a prompt here to help create the structure of the game in the prompt I provide a brief description of the game and the type of code I'll need for it I initially want to display the game's title a start button a score display and a timer and the game will display a final message to the player when it ends so I'm requesting a placeholder element for the message and finally keeping with the wackamole style I'd like a game board with six holes where the images will pop in and out of I even provided the image file name which is photo.png all right now I'll copy and paste this prompt into chat gbt and let's see what we get back and here's the HTML for our game so I'll copy the code and paste it into index.html and good it looks like it has all the elements I requested the title start button a score display here I see a timer the message div and the game board with the image slots or holes and all six images point to photo.png which is this image here great all the images are displaying correctly now let's add some style to the game I'll use this next prompt which asks chbt to style the game using a bright blue theme with background gradients and complimentary Three Shades for the game controls and holes and I want the holes to be circular and the photos to have a popping in andout effect I'd also like to place the holes on a grid and Center each item inside its hole all right fingers crossed let's feed this prompt to chat gbt and see if it can work some magic for us okay I'll copy the CSS and paste it into styles.css and I can see that this is already starting to look good so let's go over the CSS here we have some styles that you've likely seen before for the body H1 the button and the score timer and game board elements as well as the holes where the images will pop in and out of now one thing that caught my eye is that it's using CSS grid to lay out the holes in the game board grid is a super powerful CSS layout system for placing items in rows and columns and I see that it's creating three columns here each 150 pixels wide using this repeat function and it's adding a 20 pixel gap between each hole to space them out all right so chat gbt has given us a visually pleasing design for the most part I see the gradient background and a neat grid layout for our image slots so now let's spend some time customizing the design of the game so first up let's liveen up the Page by adding a winking face emoji to the title here in end index.html just like that there we go and I also want to make the button Corners rounded which I can do in styles.css here in the button rule using the Border radius property I'll set it to five pixels and that looks good I also feel like the score needs to stand out so let's make it larger by increasing its font size so here in the score rule I see that the font size is being set using the CSS REM unit which might be new to you rem stands for root M don't worry too much about it it's just a different more flexible and scalable way to set font sizes and other properties with CSS you can bump up the value and set it to two RAM for example and that would look good but we've been using pixel units this whole time so let's just stick with that here I'll set the font size of score to 32 pixels and I also want to update the mark margins for the score so that it has a top and bottom margin of 20 pixels so I'll replace the margin top property with just margin and as you've learned in previous projects with this shorthand the first value sets the top and bottom margin so we'll leave that as 20 pixels and the second value sets the left and right margins which I'll set to zero and while we're here let's also adjust the timer's font size so here in the timer rule I'll set the font size to a value like 24 pixels and let's create more space between the timer and the game board below it so I'll replace margin top with margin bottom 20 pixels a subtle change but this is looking much better to me and if you're curious before we move on I want you to pause me and ask chbt to explain the CSS REM unit in more detail go ahead I'll wait all right so now it looks like we'll need to adjust the images in the game board holes I'll have you make these changes with a challenge here here's what we'll need to do first let's make the game more challenging by making the image Target smaller because currently the images are as wide and as tall as the holes so I want you to resize them to be 55% of the width and height of their hole then you'll notice that the images are initially squared but they need to be circular you've done this before so go ahead and update the CSS to make the images perfectly rounded and here's an important adjustment you'll need to make all the images are currently visible by default but they all need to be initially hidden from view so notice in this CSS rule how this transform property uses a CSS scale function to scale or increase the size of an image inside an active hole to the value 1.1 which is 100% of its size so I want you to think about how you might use this property here in the CSS rule that Styles an image within a whole element to to hide or scale them out of view so go ahead and pause the scrim now and work through this challenge I'll catch up with you soon to go over the solution you've got this all right hopefully you got that so first the images are currently 100% the width and height of their parent whole element so to resize the images to be 55% of the width and height of their hole I'll update the width property to 55% and the height property to 55% and there we go as I mentioned the images are initially squared so to make them perfectly rounded I'll use the Border radius property and set it to the value 50% which does in fact make them perfectly rounded within their hole awesome okay so now how do we set the initial scale of an image to make it invisible for that I'll use the transform property here in the whole image rule and like in here use the scale function to set the initial scale of the image to zero just like that so essentially the base style for the image inside a whole class makes it invisible as you can see here the images are gone but as you'll see later when the whole element also has an active class the image will enlarge smoothly to 110% of its size suggesting some sort of active State for the image which is when a player will be able to whack or face bump it and this transition property adds a smooth transition effect on the transform property so when the scale of the image changes it will animate over a duration of 0.2 seconds and ease in Out means that the animation starts and ends slowly and speeds up in the middle so if you've successfully worked through these steps and came up with a similar solution nice work and now the real fun begins with JavaScript we'll make the images pop in and out from their hole keep track of the score and manage the countdown timer so I'll add a third prompt that instructs chat gbt to implement these desired features with JavaScript to create that whacka effect the images should appear and then disappear into their holes and I want it to happen at random intervals to make the game interesting when a player clicks on an image the player score should increase by one and will create a 30 second countdown timer which starts immediately after clicking the start button then the game should end when the timer reaches zero also when the game ends I want to display a fun and witty message based on the player score and let users easily Play Again by clicking the start button and as always I'd like code comments to help me understand the JavaScript logic all right so here you go chat GPT do your thing and let's see what chat GPT came up with by copying the JavaScript code and pasting it into script.js it looks like this is quite a bit of code so let's have a look at the top I see that it's selecting elements from the HTML like the start button the score display the timer the message display and the holes and then I see some variables holding information like the current score the desired time for the timer whether the game started as well as the current time in the countdown and this function here generates a random time interval to display the images using a desired Min and max value and it looks like the code below is used to display the images in the holes first it makes sure that no holes are active with visible images then it selects holes randomly for the images to pop in and out of and then it applies the active class we looked at earlier in the CSS which is this class here which gives the image the effect that it's popping out of the hole and here I see that the time intervals will be chosen randomly between 500 and, 1500 milliseconds or between half a second and 1.5 seconds and then after the set random time it hides the image by removing the active class here and if the game is still playing or the countdown hasn't hit zero yet it continues the game by displaying the next image again and again until the time gets to zero all right and this function is the logic that starts the game and updates the countdown and current score it also stops the game when the time reaches zero and displays a message below is the event listener that starts the game when the player clicks the start button and then we have another event listener for clicking on the images and increasing the score and finally this function is what's used to return a fun message based on the score so if the score is equal to zero we get this message and players will get a different message if they score less than 10 less than 20 or 20 points or more all right that was a lot of code to go over and I completely understand if a lot of this seems a little bit confusing to you or very confusing for you right now it's totally normal so what I want you to do is pause me right now if you feel like you need to take a moment to ask chat gbt to explain any of the code that you don't quite understand or want to learn more about all right now let's see what we've got by testing the game I'll click Start game and then cool my pesky photo is popping up randomly which can be challenging at times I'll try to get as many face boms as possible after 30 seconds the game is over I scored 12 points so the message I get is you getting good at this cool now I did notice an issue with the countdown timer text here which we'll get to and fix shortly and I also just thought of a cool effect we can apply to the holes on the game board we can make the Shadows appear inside the holes instead of outside to give each hole the appearance of depth the Box Shadow property in CSS is what adds a shadow effect to an element so this property is applying a shadow to each hole and by adding the inset keyword at the start of the Box Shadow value like so effectively creates an inner Shadow which gives each hole an appearance of being indented into the page and it creates a subtle depth effect all right this is looking good and it seems like we're mostly set up with all the game mechanics let's keep it going by adding some enhancements to our face bump game first when a player hovers over an image with their Mouse I want the cursor to change to the usual pointer or hand icon to indicate the image is clickable or interactive we can do that pretty easily in the CSS here in the rule that selects an image that's inside an element with the class hole using the cursor property and setting it to the value pointer and now when we hover over an image we see the pointer as the cursor good all right next just for an Added Touch let's see how we can make the image display a bumped or whack effect when clicked I think applying a bright red border around it might do the trick so I'll ask chat GPT to help me with that using this prompt I'd like it to update the necessary code to apply a red border to an image only when clicked so let's feed this into chat gbt and I get back some new code it looks like we need to modify the event listener for clicking on images using this updated JavaScript code so I'll copy this code snippet then scroll down to the event listener for clicking on images right here and replace this entire code block with the new code so here I see that it adds the class clicked to a clicked image then removes it here after a delay of 300 milliseconds chat GPT also gives me the CSS to apply the red border to an image with the class clicked so I'll copy this code snippet and paste it at the bottom of styles.css I think I'll customize it slightly I'll make the Border thicker by changing it to four pixels and making the color brighter with the value tomato which is my favorite CSS color now let's go ahead and test the latest changes I'll start the game and click on an image to bump it and there we have it a bright red borderer to enhance the player experience a simple yet effective way to add some feedback for the player all right so now how about some JavaScript challenges to enhance the interactivity of the game I'll include the first challenge here just above the function that starts the game so here in the start game function I want you to update the start button to display the text playing when a user clicks it to start the game and remember that you'll need to set the button text back to start game when the game ends so look closely at the code in this function as you'll find some hints on how to do this pause me now and give it a go all right hopefully you were able to make this happen now I'll show you one solution so here in the start game function I see some code being used to set the text content of an element like the score display and the time display I noticed that the start button is being referenced here so to update the start button text when the game starts I can write start button. text content and set it equal to the text playing dot dot dot all right let's try it out when I click the start button yes the text changes to playing good so now we need to change the button text back to start game when the game ends and this is the code that handles the game when the time is up so it seems like I can do something very similar here with start button. text content equals the string start game I'll test it out in fact to speed things up for us I'll change the countdown timer to be 5 Seconds instead of 30 seconds here and let's see I'll click Start game the button text changes to playing and then after 5 Seconds good it Chang changes back to start game next let's work on fixing the countdown timer you've probably noticed that it's repeating the words time left and seconds this shouldn't be too challenging to fix one way to fix this would be to update the time display variable to reference the div with the ID timer instead of only the span element with the ID time so back in the JavaScript we'll say get element by ID timer and then it should initially display time left followed by the time with this line here in fact I'd prefer if we don't display the word seconds so I'll get rid of that Al together and we'll display the same text and time during the countdown here in this line so I'll just make the same change here and let's also remove the word seconds from the HTML all right let's try it out I'll click Start game and there we go the countdown timer is looking much better and I think it would be better if we replace the time entirely with the final message once the countdown hits zero and the game ends so over in the JavaScript let's look for the code that ends the game when the time is up right here and then I can replace message display. textcontent with time display. textcontent equals The Returned message and now I can even delete the HTML for the message here which is the div with the ID message as well as the JavaScript variable for it which is this one here message display Let's test it out I'll click Start game the counter is still at 5 seconds and when the game ends the time is replaced with the message great that looks much better next up no game is complete without cool sound effects so in our final challenge you're going to take this game to the next level by playing a sound effect each time the player whacks or bumps a face photo to gain a point I'll add the steps for this challenge here in script.js you'll notice that I've included some sound files here in the sounds folder so first I want you to embed this bump. wve sound file in the HTML and then you'll update the JavaScript to play the bump. wve sound each time a player clicks on a photo you did something very similar in the previous section of this course where we built the drumkit app so you can reference the code from that project if needed so pause me now and go for it all right hopefully that went well and that you were able to play the bump sound effect now let's go over one way to do it first I'll embed the bump. wve sound file here in index.html as we did in the drumkit project I'll use the audio element for that I'll give this audio element an ID of bump sound and then I need to set the source to that wave file which is in the sounds folder so I'll say sounds slash bump. wve okay that's good to go if you got this part awesome next one very important step is that I need to select the audio element with the ID BMP sound here in the JavaScript so let me add a section here to indicate that this is where we select audio elements for sounds and then here I'll declare a new variable on name BM sound so I can say document. getet element by ID and specify the ID BMP Das sound all right now I need to head over to the event listener for clicking on images right here and as you've learned this block of code handles everything that happens when a player clicks on a photo like update the score and apply the red border this is where we'll also play the bump sound effect so first I'll reference the bump sound variable then call the current time property on it as we've done before and set it to zero which makes the audio start playing from the beginning and then below bump sound. playay is going to start playing the audio okay let's test it out and it works that is super cool so now how about playing a sound effect when the game ends even better we'll play a different sound based on how the player scored in the sounds folder I have two more sound files game and. wve and game and highwave so let's first embed these in index.html just like the bum sound in fact I'll just copy this audio element here paste the new one below and update the ID to end sound and the source value to sounds SL gamewave and I'll do the same name for the high score sound update the ID to high sound and the source to sounds slame and uncore highwave all right now I can select them with JavaScript and assign them to variables so that we can play The Sounds I'll copy this line here paste it below and update the variable name to end sound and this will get the element with the ID and sound let's do the same for high sound I'll name this variable high sound and have it get the element with the ID high sound we know that the start game function handles all the functionality to start the game and display the score and countdown and we also work with this code block here which ends the game when the time is up or when time is equal to zero so first I'll play the end sound here and I can do that with end sound. playay Okay so let me test this I'll update the time to just 3 seconds and here we go all right excellent that worked so now let's wrap up this epic game project with a challenge I'll add the challenge here in script.js I want you to update this code so that it plays the high sound remember that's this game _ wave file only if the player score is higher than nine otherwise play the regular end sound if the score is nine or less so pause me now and go for it all right hopefully you were able to make this work now let's go over how I might do it so first to play the high sound if the player score is greater than nine I can use a if statement to do that which we've done before so I'll replace n sound. playay with an if statement where we'll say if the value of score is greater than nine play the high sound with high sound. playay and then we'll use the L statement to play the end sound if the score is nine or less with end sound. playay if you figured this part out amazing job you should be super proud all right so now all that is left is to try it out I'll change the timer back to to 30 seconds and let's go for it okay here we go I'll start the game bump some photos oh this is pretty tricky oh it looks like I got the high score all right I scored more than nine points so I got the high score sound which is great now I'll quickly test the n Sound by scoring less than nine points and good our code works perfectly this was just for testing but if you'd like you can update the high score values here so for example in the get message function anything greater than 20 gives you this wow you're a face bomp Champion so let's update the code so that that high score sound plays when the player scores more than 20 points and you can set it to whatever score you'd like also another more concise way you might write this same expression is using javascript's Turner operator like this type score is greater than 20 followed by a question mark and if the score is greater than 20 the high sound will play with high sound. playay then type Aon and if the score is 20 or less we'll play the end sound with end sound. playay and this should work in the same exact way so wonderful you've just built face bump a fun and engaging game using HTML CSS and JavaScript we've covered a lot of ground here so be super super proud of yourself now before we head off to the next project remember that this is your foundation for this game you can expand upon face Bomb by introducing new features it's all up to you and I want you to take that next step by customizing the game and making it your own for example upload your own images for a more personalized experience it can be your photo or your friend's photo I also want you to update the game colors and maybe write some custom messages for when the game ends and don't forget to share your Solution by posting it in the today I did channel so that'll do it for this project amazing work let's keep building all right let's continue by building an interactive image slideshow that displays different project images and descriptions and it will be flexible so that you can add it to a website for example to let you users easily browse through projects you've built or anything you want to showcase and as usual we'll collaborate with chat GPT to make it happen using HTML CSS and JavaScript so get ready to Showcase your projects in style and let's get to it I already included HTML CSS and JavaScript files for the project along with three images for the slideshow which can be found here in the images folder so we'll Dive Right In and prompt chat gbt with our requirements we'll try to get most of the image slideshow built in one shot using this AI prompt The Prompt is quite clear and precise about what I need help with it mentions the kind of project I'm working on which is an interactive slideshow with do navigation and that the slideshow should display images and description for different projects it also mentions the language types HTML CSS and JavaScript followed by the specific functionality that it requires I've structured this prompt by splitting it up into multiple smaller tasks with both bullet points the bullet points in the prompt help provide a clear structure and make it easier for chat GPT to understand our project needs and hopefully generate code for each requirement for example I'm asking it to create a flexible HTML container for each project slide and I want to start by adding three projects to the slider including images headings and descriptions and the headings and descriptions should be overlaid above the images using a partially transparent back ground and then I want to implement a DOT navigation where each dot represents a project and Visually indicates the active slide users should be able to switch between slides using the dot navigation and I want a fade transition between each slide and as usual I'm asking for code comments and explanations to understand the solution better which as you've experienced with other projects is a great learning approach The Prompt seems to provide enough information to build a solution while the details of the images descriptions or Aesthetics like color scheme are not provided they aren't as crucial to create a functional image slideshow these can be easily customized later all right so I'll copy this prompt and paste it into chat gbt and let's see what chat gbt has in store for us okay we get back the HTML CSS and JavaScript code for our image slideshow complete with detailed comments explaining each part's functionality so first I'll copy the HTML code and paste it into index.html then I'll copy the CSS and paste all of it into styles.css and copy the JavaScript code and paste it into script.js all right now let's review the code in index.html we have a div element with the class slider and it wraps all the individual slides which get creat created with divs with the class slide each slide div contains an image and slide content displaying the project name and description and it seems like the sliders do navigation will be dynamically generated using JavaScript so there's a container element for the navigation here at the bottom with the class. navigation when I run the code it looks like we need to update the paths to the image files in our project they're showing up as broken images so why don't you take a moment to fix this here's a challenge I want you to update each image element to correctly point to the image source and remember the images are in this folder named images so pause me now and give that a go all right here we go now I'll update the paths to point to the images stored in my images folder here in an images Source attribute I need to specify the folder name which is images followed by a forward slash before the image name so for example this image element Source points to the project 1. JPEG file now I'll do the same for the other two images all right let's test the slideshow and good it seems like it's working as expected so nice work if you got that now we have a flexible HTML container for each project slide with responsive image resizing The Heading and descriptions fully overlay the images with a partially transparent background and the dot navigation allows us to switch between slides with a smooth fade transition effect so not bad at all on the first try but it looks like we need to make a few adjustments so let's walk through the rest of the code and customize the slideshow to our needs the CSS comments in styles.css help explain what each CSS rule is doing so for instance here it's resetting some default Styles then we have this CSS for the main slider container as well as all the individual slides with the class slide and it looks like this is setting the opacity of an active slide to one so that we can view it and it's styling the image within each slide as well as the content overlay and below are the styles for the dot navigation all right so the first thing I want to do is make sure that the image inside each slide takes up the full width and height of its containing element because notice if I shrink the browser window we see a gap or some empty space between the image and the dot navigation so let's fix this I'll scroll down to where we're styling the image within each slide right here now the image is already set to take up the full width of its containing element here with width set to 100% so to set the image inside each slide to also take up the full height of its containing element I'll update the height property here to 100% so now if it's container div with the class slide is resized the image will resize along with it always trying to fill the entire width and height of the parent slide div so notice that now we're not seeing that Gap below the image but now it seems like the aspect ratio of the image is a bit off notice how it looks distorted here at this width we can adjust that with a CSS property called object fit this property determines how the image should be resized to fit its container and the value cover ensures that the image will scale up or down so that it covers the entire area of its container without stretching or distorting the image notice how it crops the image in a way that preserves its aspect ratio and Central content so now it doesn't look distorted Perfect all right so next I'd like to pin the content area to the bottom of the slide that way it doesn't fully overlay the image so here in the slide content rule I'll change this top property set to zero to bottom zero and then remove the height set to 100% as well as this left position property set to zero all right that looks much better now we can see more of our project images I also think that the content background should be slightly less transparent so here I see where a semitransparent background is being set so I'll update this alpha or transparency value here in the rgba color function to 75% by sending it to 75 and that looks much better to me now let's adjust the project name with CSS we'll increase the font size and add more visual space between the project name and description so at the top of styles.css I'll create a new rule that Target gets the H2 element on the page which remember is the project name in each slide and here I'll update the font size using the CSS font size property and set it to a larger value such as 26 pixels and to create that extra space I'll use a margin bottom property and set it to 12 pixels let's check it out and I think that looks much better all right now let's have a look at the JavaScript the comments are super helpful full in explaining each code block so here at the top I see that it's getting the required elements such as the slide Dives and the dot navigation container and this line of code initially sets the first slide and Dot as active and then we have the code to generate the dot navigation based on the number of slides so that's actually really cool because as we add more and more of these Slide divs the JavaScript is going to dynamically generate more dots for the navigation and it looks like this function here handles navigating to a specific Slide by first removing the active class from all slides and dots and then adding the active class to the selected slide and Dot now everything in the slideshow seems to be working great but I think it would be really neat and useful if the slideshow played automatically so let's ask chat gbt to implement an autoplay feature that automatically switches to the next slide every 5 Seconds I'll use this prompt here which says says please update the JavaScript code to automatically switch to the next slide every 5 Seconds I'll feed this prompt into chat gbt and let's see okay we get back new code for our Javascript file so what I'll do is copy all of this code and replace everything in script.js with the updated code just to be sure that I don't miss anything all right so let's check it out it looks like we have two new variables declared at the top current slide which is an initialized to zero and slide interval and now the navigate to slide function automatically Fades to the next slide every 5 Seconds this JavaScript line here uses the set interval function which is a builtin method in JavaScript that's used to execute a specific function or code snipp it repeatedly at fixed time intervals so in this case it calls the next slide function to navigate to the next slide every 500 m seconds which is equivalent to 5 Seconds awesome then here at the very bottom this line initially autop plays the slideshow when the page loads all right so let's test it out I'll run my code and excellent the slideshow plays by itself and then every 5 Seconds it updates to show the next slide perfect so fantastic you've created an impressive image slideshow you can use for your personal portfolio website and remember it doesn't end here I want you to customize iiz and enhance a slideshow to suit your personal style and project needs and make it truly your own so I'm going to leave you with a challenge here I want you to add more projects custom images descriptions and add links to your live projects I'll kick off the first slide here in the HTML by setting the project name to website hero and updating the description here in the paragraph element and I want you to keep this project handy because you're going to use it later in a bigger project so stay tuned and as always take a moment to ask chat gbt to explain any of the code that you don't quite understand or want to learn more about great work let's move on you are going to build your very own personal homepage where you'll introduce yourself to the world exhibit your skills and display your projects imagine a digital business card but more Dynamic and personal and the best part is that you will Implement and feature the project slideshow you built earlier on your homepage so let's get to it we'll kick it off by discussing the project with chat gbt and instructing it on our intentions to ensure we're on the same page then we'll follow it with a series of prompts for each section of the page this first prompt asks chat GPT for guidance in building a personal homepage using HTML and CSS it's a sort of broad level brief to give chat GPT a sense of the Project's nature and I also let it know that I'll only request specific code Snippets as we progress so there's no need to provide code until I explicitly ask for it and with this prompt chubbt should be ready to start so I'll copy and paste this prompt into chat gbt and good it looks like chat gbt is primed and ready to go so now let's ask it to provide a basic HTML structure with this prompt I'm giving chat gbt a road map for our hom Pages layout and overall the main building blocks of our page I'm asking it to help me design a basic struct structure for a personal homepage and that it should have the following sections a header a section for display my projects an about section and a section for displaying my skills as well as a footer and I wanted to add these sections as placeholders for now as we'll be coding them and filling them out step by step I'll feed this prompt to chat gbt and let it do its thing I get back some HTML so I'll copy this code and paste it into index.html and let's have a look it looks like the HTML structure is a big basic layout with placeholders for different sections like the header projects about skills and the footer just as requested great so now let's request the code for our page header in navigation with this prompt I want chat TBT to code an HTML header displaying my name Gil H and navigation links for the sections projects about and skills and I get back new HTML where it looks like the header section was updated so I'll copy the header element and replace the existing header element with the new code I see that the main heading or H1 was updated to display my name and then we have a nav element holding an unordered list which contains all the page links as list items I'll check out the latest code and see that so far everything is looking great next let's guide chat gbt to create the HTML for our about section this section should briefly in ruce who you are and some of your achievements by linking to a resume for example so I wanted to guide me to create the HTML for the about section it should include my picture a friendly introduction and a link to my resume so let's see what chat gbt can do with this prompt in the provided HTML code I do see that the about section was updated with the requested content fantastic I'll copy this new section and replace the section here in index.html with the new code code the about content contains an image element and it looks like I need to update the source attribute here to display my image which is located in the images folder and it's named photo. jpeg so here in the source attribute I'll change the path to images SL photo. JPEG and I'll update the alt attribute to gills picture and in the paragraphs below I see a friendly introduction about me as well as the placeholder link for for my resume which I'll leave as is for now all right let's keep going by asking chbt to develop the HTML for our skill section this area is where we might showcase our expertise and proficiency levels in specific topics for now we'll just list HTML CSS and JavaScript but you can update it to whatever you'd like the prompt says now let's code the HTML for my skill section and as mentioned we'll start with the skills HTML CSS and JavaScript and each skill should have a name and a description and I also want to display a progress bar representing my proficiency in each skill so let's see what magic chat gbt can cook up with this prompt all right I get back some new HTML and yes it looks like the skills section was updated with the requested skills so I'll copy just the skill section from the new code then paste it in index.html over the existing skill section so in our skill section we have the skills HTML CSS and JavaScript each has a short description about each skill as well as a progress bar to give us a visual representation of each strength and what's cool is that you'll be able to adjust the percentages by updating the width values in each of these style attributes all right let's keep it going by coding our footer the footer is going to tie everything together and provide a space for additional links with this prompt I'm instructing chat gbt to create the HTML for the page footer and that it should contain copyright information and links to my LinkedIn Twitter and Instagram profiles and to make the footer more interesting I want to use icon fonts to display a social media icon for each link I'll feed this prompt to chat gbt and let's see what we get good we get the updated HTML for the page footer and it looks like I first need to include the icon font Library which in this case is font awesome so I'll copy this link element and add it to the head section of my page just like that then and I'll grab the new footer code and add that to my page the footer contains all the essential information I requested providing links to LinkedIn Twitter and Instagram and below the copyright information let's have a look at it in the browser and good we see the icon fonts being displayed for each link which makes it easier for visitors to recognize the links I'll update this to Gil H and moving on it's time to add some style to our web page let's request CSS from chat gbt using this prompt so I wanted to design a simple modern CSS layout for my homepage I want a responsive layout that adjusts to different screen sizes using CSS media queries for the design I prefer a black and white color scheme and sansera fonts and I give it Specific Instructions to make my picture smaller and rounded and to add generous line height in visual space around the content so that it doesn't appear too cramped so I'll feed this to chat gbt and see what it returns all right I get back to New CSS so I'll copy the code and paste it into styles.css fingers crossed hopefully this looks good all right and look how our page has transformed not too bad it provides a responsive design which ensures a userfriendly experience regardless of the device used and the chosen color scheme and font give a modern professional feel and the skill section looks fantastic with the style progress bars with our site content elements in place our page is taking shape so now let's spend some time customizing the CSS so first I want to increase the font size of the titles or H2 elements for each of the sections and Center them on the page so inst styles.css I'll create a new rule that targets all the H2 elements and here I'll increase their font size to 30 pixels and align them center with text align Center and that's looking better now I want to apply a generous margin between the heading and the content below it I can do that with the margin bottom property and let's say 20 pixels okay that's looking better the next thing I want to do is add some space between the paragraphs because notice how these two paragraphs are looking pretty cramped and I also want to open up the space between the skills description and the progress bar so back in the CSS I'll select the paragraph graphs or P tags and again with the margin bottom property increase the margins to 16 pixels and that looks much better to me looking through the CSS I see that the about section has a padding value of 40 pixels and it seems like it doesn't need to be that big so for now I'll just go ahead and get rid of this padding property and keeping with that change it seems like the skill section also has a padding value of 40 pixels which I don't think we need for now so I'll also get rid of this skills rule here but what I can do now is create some more space between each of the sections all at once in one CSS rule remember the main sections are contained within the section elements so I can Target the sections with CSS and then set their top and bottom margin value to 30 pixels and the left and right margins to zero and that applies consistent spacing across all the sections looking good another change I'll make in the header navigation is style the hover state of the links to give the user a visual indication that the link is being hovered remember we can do that using the hover pseudo class as we've done in previous projects so here in the CSS styles for the header links I can follow a similar pattern used here to style the navigation links on Hover with nav Li a colon hover in fact I can write it just like this without the Li and it will do the same thing when a user hovers over a link I want to display an underline link so I'll set the text decoration to underline and there we go our hover state is all set all right now comes your big challenge for this project and that is implementing the project slideshow after you built the slideshow project I mentioned to keep your project slideshow handy because you were going to use it on a larger project and now is that time I want you to add add your project slideshow to the homepage first you'll place the slideshows HTML here in the project section then add the slideshow CSS to the file slideshow. CSS and paste the JavaScript into script.js I've also included some images you can use here in the images folder but customize the code as needed to fit your slideshow so take your time with this and I'll catch you in the next scrim to go over it together you've got this all right this was a pretty big challenge so hopefully you were able to implement the project slideshow in your web page I'll bring in my project slideshow by first pasting the HTML to my slideshow here in the project section I'll replace this placeholder with my code notice how I've included the div with a class slider as well as the dot navigation next I'll paste my slideshow CSS in slideshow. CSS and bring all of my slideshows JavaScript into script.js hopefully you realize that you need to link your index.html file to slideshow. CSS so let's do that I'll copy one of these link elements in the head section of my page and update it so that it points to the file slideshow. CSS now we don't see our slideshow yet and that's because we need to point to script.js here at the bottom of our HTML file so just about the closing body tag I'll add script tags with a source attribute that points to the file script.js all right and now the slideshow is displaying on the web page perfect if you got this far into the challenge outstanding now let's spend a little time customizing the slideshows HTML and CSS so that it fits our web page better notice how the project titles are currently using H2 tags but looking at the site structure it appears that they would work better as third level or H3 headings this would improve the overall hierarchy and accessibility of the page so we'll switch the H2 tags to H3 tags this small change does make a difference in our content structure let's have a look at the slideshow CSS at the top it's using the universal selector or the asterisk and CSS which targets every element on the web page and it's setting its margin and padding to zero I don't think we need that in this file since styles.css is already handling some of this for us so I'll remove the margin and padding properties from this rule but I'll keep box sizing border box because the Box sizing property controls how the width and height of elements get calculated you see by default any extra padding or borders you add to an element will make it wider or taller than you might expect and it can throw off your layout so with box sizing set to border box any padding or border given to an element automatically gets included in the elements dimensions and it likely won't cause any strange or quirky behavior in your layouts so I'll keep this in now how about we round the borders of the slider using the Border radius property here in the slider rule 8 pixels sounds good to me we don't quite see the Border radius yet but we'll make some adjustments later which will make the slideshow appear much better on our page and now that we've updated our project titles to H3 elements let's style those here and slide show. CSS now we could Target all the H3 elements like this but since this CSS is specific to the slider we don't want it to override any potential Styles we write for the H3 in the styles.css file so what we can do is Select only the H3 elements that are in the div with the class slider with do slider a space followed by the H3 selector and let's increase the font size of the project titles in the slider to 24 pixels I am noticing a bit of an extra Gap below the slideshow description displayed by the paragraph It's a bit nitpicky but we could remove the space by setting the margin of the P tag and the slider class to zero so I'll say slider P margin zero and good the space is gone and I like how that looks all right we are almost to the finish line now let's add what are referred to as containers to our site for better content structure containers will help give our sections a more uniform and censured look across different devices containers are also common across all Web projects for various reasons we'll use them to control the layout of content on the page particularly control the width alignment and positioning of our sections because notice how they're currently looking too wide stretching from one edge of the browser to the other so we can control the widths and improve the overall design of the page with containers and I'll have you implement the container ERS with a challenge which I'll paste here in prompts MD you'll interact with cat gbt by asking it to provide the code for creating containers for your site's content and I'll give you this prompt to help kick things off so what you'll need to do is head over to chat gbt and open a new chat then provide it with this prompt now chat GPT doesn't really need to know the full context of your project this HTML code snippet should be enough to give it the necessary information to provide you an example and CS says code snippet for adding containers around your project so you'll need to add the suggested CSS to the project and then update the HTML structure with containers for the projects about and skill sections only so go ahead and pause me now ask chbt and then add the new HTML and CSS to the project all right hopefully that went well now let's go over adding containers to the site together I'll start by copying this prompt and pasting it into chat gvt you may have gotten a different output but I see that I can create a container by defining the container class in my CSS and applying it to the appropriate section of my HTML code first I'll copy this container snippet and paste it into styles.css then it looks like I need to add the container class in the div with a class about content so I'll scroll down to my about section and here in the class attribute add the class container and make sure that both classes are separated by a space just like that looking at the container class the max width property applies a maximum width to the container and margin zero Auto Center aligns the container horizontally and then we're adding some padding for spacing I think a max withth value of 1200 pixels is too wide so I'll set it to a smaller value like 750 pixels and since we're applying 30 pixels of top and bottom margins to each section we don't need to add padding for spacing it's it's all being taken care of I'll check out the about section in the browser and notice that when I expand the browser the content does not get any wider than 750 pixels and I usually like to give containers a fluid width using a percentage value and this will really help with narrow screen sizes and small devices so now the container should keep the content at 90% the width of its parent and I like how that looks so let's move on and add containers to the skill section and our slideshow so first in the slider section we can do something similar here in this class attribute by including the container class and good notice how our slider is no longer taking up the full width of the page it now has width const strengths so it doesn't get any wider than 750 pixels but then it adjusts as needed when the browser resizes to a narrower size perfect finally let's take care of the the skill section for this we'll do something slightly different currently within the skill section there's no element that wraps all of the skills content so we'll need to create that with a div so inside the section at a div and give it the class container just like the other elements and this container div is going to wrap all of the skills content so just above the closing section tag I'll add a closing div tag then make sure to indent the content inside it and good wrapping the skills content within a container ensures that the content is horizontally centered and now it's consistent with all the other sections if you were able to add the containers to the web page and make it look similar to this fantastic job so finally now that we have all of our containers in place we can make the page more visually interesting for example let's make the about section Stand Out On the Page by applying a background color that stretches from one side of the browser to the other we'll do that in styles.css here in the about rule first I'll open up the space in the about element by applying 20 pixels of top and bottom padding and then we'll give it a background color using the background color property we'll set the background color to light gray using the value pound eded D Ed D and great that's exactly what I wanted notice how it adds a nice visual touch to the page and helps break up the content and it looks like I have some extra unnecessary CSS for the about section down here in the media query so I can delete this entire CSS rule since we're handling the padding for it and the base Styles all right fantastic our personal homepage is now complete it's quite amazing to see how working with an AI tool like chat gbt can turn a concept into a functioning web page now as a final challenge for you I want you to make this web page yours for example update the content and images and add a custom color scheme remember this is your personal web page so spend some time customizing it so that it reflects more of who you are and be sure to share your solution with the scrimba community in fact you can click on this image right here to head over to the today I did Discord Channel and share the link to your web page so again outstanding job and I'll see you back soon to build more cool projects we are taking a significant step forward by introducing you to get Hub where coders and Builders store and share their projects GitHub is like a library but for code that can be either public or private it serves as a platform for what we call Version Control allowing you to save your work at different stages and even roll back to a previous stage if needed and the best part is that it lets developers work together on the same project so whether you're working alone or as a team GitHub will be part of your building workflow we are going to take the personal homepage project you've built and put it up on GitHub setting up a GitHub account is pretty straightforward if you haven't already go to github.com or click right on this image to go there click the sign up button in the top right then enter your details and create a username for your account once you verify your email address you're all set all right so first to transfer your project from a scrim to a GitHub repository you'll need to download the code from the scrim onto your computer similar to how you did in the previous section of this course click on the gear icon in the bottom right corner of your scram then click download as zip and that's going to download a zip file to your computer unzip the file and you'll see your project files inside a folder now in the folder you might see some new unfamiliar files like package.json and another named V config.js go ahead and delete those files because you're not going to need them and I also suggest renaming your project folder to help you keep track of it and now you're ready to upload your project to GitHub the GitHub interface is quite userfriendly with your repositories easily accessible from the homepage so now let's create a GitHub repository often referred to as a repo a repo is like a project folder where all the files related to a particular project are stored to create a new repository click on the new button in the top right give your new repo a name like personal homepage then give it an optional description it's up to you whether to make it public or private and when you download a scrim it includes a readme file so in this case I won't initialize the repository with a readme file a readme.md file provides essential information about your project it typically includes a brief description of the project and instructions on how to use or contribute to it so I'll leave this unchecked then click create repository to finalize my settings after creating your new repository GitHub takes you to its quick setup page providing you instructions for adding files to your repository using various methods the drag and drop feature is best suited for those just getting started with GitHub and for small projects like this one so that's what we'll use click the link for uploading an existing file then open the folder on your computer that contains your project files select all the files you want to upload to your repository then drag those files and drop them onto the designated area that says drag files here to add them to your repository once the files are added you'll see a preview of the new files below okay after upload loing your file scroll down to the commit changes section here you can optionally add a brief description of the changes you made for example initial commit then click commit changes and this will commit the files to the repository on What's called the main branch and from here you might update your readme file for example by clicking this edit icon then you can set the main heading to my personal homepage with a short description below and remove certain parts not specific to this project and then commit the latest changes to the to the readme file and then from here if you make changes to your project and want to update the version on GitHub to ensure your repo is updated with the most recent version of your project simply click on the repo's add files button and choose upload files and just like earlier you can drag and drop the updated files here and GitHub will recognize these as changes to existing files and update them accordingly and there you have it your files up on GitHub now keep in mind that what we've just gone through is the simplest way to use GitHub in real world projects developers often use git a command line tool for more granular control over versioning and collaboration but you don't need to really worry about that right now however there are various courses and lessons on scrimba that you can review to learn more about working with GitHub for example this section here on setting up a local Dev environment and working with GitHub is a good place to start click on this image if you're curious about it and want to learn more but for now congrats you've successfully pushed your first project to GitHub we're going to blend technology and lifestyle to build a Smart Home Mobile interface that allows users to control various aspects of their smart home such as lighting temperature and even their favorite tunes and we'll do our best to give it a sleek and modern aesthetic touch and naturally chubbt will help us throughout this journey so let's Jump Right In this time we'll use several prompts to describe specific elements and functionalities we want in our interface instead of overwhelming chat GPT with a single complex request we'll ask it to help us incrementally hopefully that will make problem solving easier by breaking down complex tasks into manageable chunks and as Builders this approach allows us to clarify iterate and get more precise responses with each step so I'll kick things off with this prompt I'm letting chat gbt know that it's building a Smart Home Mobile interface using HTML CSS and JavaScript and that the interface should allow users to control various aspects of their smart home such as lighting temperature and music preferences to start I only wanted to create the HTML structure for the smart home interface I'd like it to include a header with the title and three main sections for lighting temperature and music and that each section should include buttons to control lighting temperature and music based on user preferences so let's see how chat gbt tackles this task all right it looks like chat gbt has given us some pretty fantastic HTML to work with now I'll start implementing the provided code by copying this code and pasting it into index.html in the HTML there's a header element containing the title and below a main element which holds three sections one for the lighting control another for the temperature control and a third section for the music Control good next to enhance the interface design and make it more in intive I want to use icon fonts to display light temperature and music icons next to each section heading and for the corresponding buttons I'll ask chat GPT to provide those using this prompt I'm saying hey chat GPT use icon fonts to display light temperature and music icons next to each section heading and for the corresponding buttons so I'll feed this prompt to chat gbt and let's see what we get it looks like it first provides a link to the font awesome Library so I'll copy it then paste it in the head section of index.html right here and then below it says that I need to modify the section headings and the buttons in the main section to include the icons so I'll copy this entire main snippet then replace my main element with the new code okay let's have a look and great now we see the icons display next to each heading as well as in the button controls now I think it's it's best to remove any unnecessary or redundant text in the user interface for example the word control in lighting control as well as the temperature and music Control sections also the word temperature in the increase and decrease buttons and I'll update the music control buttons to display only the text play pause and next and overall I think this looks much cleaner oh okay with the HTML and icon fonts in place let's apply CSS styles to the page with this third prompt I'll ask chat gbt to apply CSS styles to achieve a mobile friendly layout with a dark and Sleek design and then to use soft gradients shadows and the provided colors here for the backgrounds buttons and other elements hopefully chubbt can create an aesthetically pleasing design with the colors I provided so I'll feed this prompt to chachu BT and I get back the Cs CSS which I'll copy and paste into styles.css awesome I think chat GPT did a pretty good job on the first try so it seems like the smart home interface is really starting to take shape but there are a few minor adjustments we can make to improve the layout and I want you to work on those with a CSS challenge I'd like you to work on UI adjustments by first center aligning the content inside each section and adding more space around the content so that it looks more like this I'd also like you to adjust the space between the buttons notice how there's no space between the buttons when they each appear on their own line so you'll need to fix this in the challenge so pause me now work through these steps and I'll catch you soon to go over it together all right hopefully that wasn't too bad first I'll Center align the content inside each section using the text align property here and the section Rule and setting it to the Value Center and to add more spacing around the content in each section I'll increase the padding value currently it's 15 pixels but I'll set it to a larger value such as 20 pixels next to adjust the space between the buttons I'll update the margin property here in the button rule currently there's only a 10 pixel margin applied to the right side of each button but I like to apply margin on all four sides of the button to prevent them from looking like this when each button is on its own line so what I'll do is replace margin right with the margin shorthand then apply a five pixel margin to all four sides of the button and that creates the spacing I'm looking for between the buttons much better now this media query at the bottom applies styles to the main section and button elements only when the browser or device is 600 pixels or narrower I'll keep the main rule here but I'm good with the base padding of 20 pixels applied to each section and the base margins we just set to space out the buttons so I'll remove these two CSS rules from the media query if you got the control sections in your interface to look close to this nice work next up I'd like to enhance the lighting control by implementing a toggle switch instead of a button this will give our interface a more seamless and intuitive control mechanism so I'll use this fourth prompt to ask chat GPT to update the HTML and CSS to implement a toggle switch for the lighting control instead of a button and I want it to keep the switch color consistent with the rest of the interface so I'll pass the prompt on to chat GPT and I see it suggest that I replace the lighting control button with this label element so I'll copy this snippet and make the changes in my my lighting control section in this case this label element is being used to create a custom toggle switch using a checkbox an input element with a type of checkbox means it will display as a checkbox as you can see here in the lighting control section with the provided CSS we can make the checkbox and this span element with the class slider look like a toggle switch so here we have new CSS that selects the class switch as well as the input element and the span with the class slider so I'll copy this code snippet and add it to styles.css just above the media query all right perfect this creates the desired appearance of a toggle switch and notice how the toggle animation smoothly transitions the background and the position of the toggle Circle I see that's being done with this CSS here which apply CSS to the toggle switch slider only when a user clicks on it or when the checkbox is in a checked state it updates the background color and transforms its position using this special CSS translate X function this is what actually makes it move 26 pixels on the xais or from left to right so as you can see CSS is pretty awesome to be able to create effects like this right in your browser now it does look like we need to make the toggle switch wider for users here in the switch class I see that the width is currently set to 60 pixels so let's try making it twice as wide by updating the width value to 120 pixels and that looks really good now we need to adjust the position of the slider Circle when toggled on again that's being controlled here with the translate function it's set to 26 pixels so let's try doubling the value to 52 pixels and that doesn't quite work we need to increase it by a little bit more more let's say 70 pixels we're almost there I'll try the value 85 pixels and yes that looks perfect all right so when the lights are toggled on the toggle switch's background should match the bright pink background of the buttons when hovered to better indicate an on state that's a quick change what I'll do is swap the background color of this slider class with the background color of the input or toggle switch when it's checked so I'll just cut this background color property out of this rule then paste it in the slider Rule and bring the initial background color property down to the input checked Rule and that should do it okay so when the lights are off the background color of the toggle switch matches the purple of the buttons and then when we turn the lights on it switches to the bright pink perfect next up I'd like to enhance the interactivity by adding a subtle glow effect behind a pressed or clicked button to provide visual feedback to the user I'm not feeling the bright orange background color that's applied to a button when clicked and I want you to work on that with this challenge you going to write your very own short prompt for chat gbt to provide the CSS for adding a soft glow effect behind a pressed or clicked button in the prompt I also recommend providing chat gbt with the CSS for your buttons so that it can more closely match its Aesthetics so pause me now write your prompt here and I'll meet you back soon to go over it together hey how it go hopefully you were able to write a prompt that successfully created the glow effect for pressed or clicked buttons I'll add my prompt here which says add a soft glow effect behind a pressed or clicked button remember I suggested providing chat gbt with the CSS for your buttons so I'll say here is the CSS for my button then paste the base styles for the button as well as the hover State Styles and I'll follow this up by saying that the glow should match the bright pink background of a hovered button chat gbt is pretty smart so it should be able to figure it out I'll copy and paste this into chat GPT and let's see it says that to add a soft glow effect behind a pressed or clicked button I can modify the CSS as follows it seems like the only thing I need to do is copy this box shadow property and add it to my button active CSS rule I'll test it out by clicking one of the buttons such as increase and cool I do see a soft pink glow behind the button although I'd like to make it stand out more so I'll adjust this Alpha transparency value to 80% by switching it to8 and that does look a little bit better now I do want to remove this orange background color when a button is clicked or pressed PR which is called the active state so I can do that by removing this background color property also to remove the default browser outline for a button in its active State we can use the outline property and set it to the value none now keep in mind that when removing the default outline for active buttons you should ensure there's some other clear visual indication when the button is clicked especially for accessibility reasons now we've added the background glow effect so I think it's safe to remove it and perfect the soft glow behind the buttons when clicked adds a nice visual touch to the interface next let's tackle temperature control here in the temperature section we'll update the code to display the temperature above the buttons initially at a comfortable 78° Fahrenheit allowing users to increase or decrease it by clicking the corresponding buttons this time I'll say hey chat PT please update the necessary code to to display the temperature at 78° F initially and to allow users to increase or decrease the temperature by clicking the corresponding buttons and I want it to style the temperature display accordingly with CSS so here you go chat GPT do your thing so I get back some HTML for updating the temperature control section it looks like I need to add this div with the class temperature display so I'll copy that and paste it just above my temperature control buttons I'll copy the CSS code to style the temperature display and add it to style.css and we get the JavaScript for the temperature control functionality I'll copy the code and paste it in script.js so here it's getting the temperature display element then setting the initial temperature value to 78 as requested it looks like this function updates the temperature display and this event handler increases the temperature when the increase button is clicked and this one decreases is the temperature value when the decrease button is clicked and then it's calling the update temperature display function here to initialize the temperature display on the page Let's test it out all right there's our temperature initially set to 78° fahr I'll click increase and good each time I click it the temperature increases by one and when I click decrease the temperature decreases by one the only thing I want to do is adjust the spacing around the temperature display and I can do that with margins here in the temperature display rule I see that there's only a top margin of 10 pixels but I can update this by changing it to margin 10 pixels top and bottom and then zero pixels left and right and that should do it yep finally let's work on the music Control section by implementing the play pause stop and next button functionality now we're not going to actually play music but we can simulate play music by displaying a random song name when the play button is clicked then clearing the song name when a stop button is clicked and clicking the next button will change the song to another random song as usual I'll ask chat GPT to provide the code for me with this prompt I'm asking it to update the code to implement the music Control section with play pause stop and next button functionality it should display a random funny song name when the play button is clicked and to make sure that the song changes when a user clicks the next button and it should Style the song text with CSS I'll copy and paste this into TBT and I get back the updated HTML code for the music Control section it looks like I need to add this div with a class song name then replace the play button and the stop button so I'll just go ahead and copy these elements here and make the necessary updates in the music Control section there we go I see the song name and then the play stop and next buttons now for the CSS I'll copy this new CSS code to style the div with a class song name and paste it in into style.css the text is slightly larger but it looks like I need to add similar spacing around the song text so just like with the temperature display I'll change margin top to margin 10 pixels top and bottom 0er pixels left and right all right that looks good and now the JavaScript I have new JavaScript code to handle the music control and random song names so I'll copy this JavaScript snippet and add it to script.js at the very top let's say below the temperature variable this line gets the song name display element and here we have our list of funny song names stored as string inside the funny song names array we have an is playing variable initialized to false and looks like it's tracking the current song index which is set to zero initially and this event listener here handles the play pause button when clicked if it's clicked while the song is playing it changes the play button to display pause otherwise it it changes the button to display play this event listener handles the stop button and then this one handles the next button by displaying a random song name and it seems like this function here is what's used to get a random song name all right let's test it out in the music Control section I'll click the play button and I see that the button text and icon switches to pause and I see a random song name Funky Chicken Dance nice when I click the stop button the song resets and the pause button switches back to play and clicking play displays another random song name and then clicking the next button switches the song names so it looks like the JavaScript functionality works perfectly so there isn't much work or customization left for us except for giving our smart home app a cooler name of course I'm not quite feeling the name smart home control in fact I'll even ask chat GPT for some name suggestions using this prompt help me name this smart home interface project Pro by suggesting clever product names so let's see what names we get back all right here I see names such as home Harmony domach Eco EAS Casa conductor and a few others out of these I'm liking the name home Harmony so I'll choose that one I'll update the title here to home Harmony and there we have it all right so that wraps up building our Smart Home Mobile interface with the help of chaty BT and as us ual I want you to customize this project and make it truly your own experiment with different colors and add additional features or sections like security water sprinkling or Appliance controls for example you can use the existing code and chat gbt to help guide you through it you might even try to rebuild the smart home interface all on your own using similar props and be sure to share your solution in the scrimba discords today I did channel so be super proud of all you've built so far and let's keep moving we are taking our Smart Home Mobile interface project to the next level by learning how to transform it into a truly mobile friendly app that users can install on their devices and conveniently launch from their home screen there are various ways we can achieve this but as usual I'll turn to chat GPT for some guidance on how to do this using this prompt I'm asking it to guide me through the necessary steps to make the smart home interface more mobile friendly by allowing users to add it to their devic's home screen for easy access I'm just picking up where the chat left off during the development of the smart home interface project so I'll paste The Prompt here and let's see what chat gbt suggests it looks like chat gbt provided some insightful instructions it says that we can achieve this by creating what's called a progressive web app or pwa in short a progressive web app is a web application that can deliver an applike experience to users by adding or installing it on the user's device without needing to go through an app store we're going to create a simple version of a progressive web app then below is a stepbystep guide on how to make the smart home interface mobile friendly and installable the first step is to ensure mobile responsiveness we built our interface to adapt and look good on various screen sizes and orientations in fact this metatag included in the head of the page make sure that the layout scales to fit the size of the device it's viewed on so we're all set there then it mentions that we need to add something called a web app manifest that sounds intense the purpose of this file is to include essential information about the app and how it should appear and work on a user's device and chat GPT gives us all the code we need to create it so I'll create a new file in my project and name it manifest.json then copy the provided code and paste it in my new file this code you see here is called Json which stands for JavaScript object notation and you might realize that it's very similar to JavaScript objects in terms of structure and syntax both Json and JavaScript objects share similar key value pair structures this Json code holds various properties to Define essential details like the app's name the start URL where it should open the display mode to determine how it appears on the device and the icons to display on the home screen so first I'll update the name and short name values to the name of my app which is called home Harmony now when a user decides to add your app to their home screen the device needs an icon to represent your app so the icons array lists the images that will appear on the home screen help users recognize our app at a glance and you'll often have a list of various icon sizes and formats ensuring the icon looks crisp and clear on different devices in this case we only have two listed one icon is one 92x 192 pixels which is a common size for many Android devices and the other is 512x 512 pixels which can be used for larger displays or higher resolution screens you don't need to worry about creating the icons because I've provided the two icons as PNG files in the icons folder this is what the home screen icon looks like I used a design tool called figma to create it if you're curious so now I just need to update the source values to point to my images I'll update the first one to icons SL ion1 192x 192 and the Second Source to icons for/ i512 by 512 in the web app manifest file the start URL property specifies the URL where the app should start or open I'll set the value to a forward slash which typically represents the root or homepage of the app and the display property determines how the app should be displayed on a user's device setting the value to Standalone makes it appear and function like a standalone app without the browser's typical UI elements like the address bar or UI buttons which provides a more immersive and applike experience the background color property defines a placeholder background color for the app to display immediately before the stylesheet loads in this case it's already set to the same dark purple color as the body background good now the theme color property sets the default theme color for various UI elements in the app like the title bar or toolbar let's set it to the lighter shade of purple used in the background gradients for each section and that should be it for the Manifest this file plays a significant role in giving our app the mobile app capabilities you can think of it as a blueprint that tells the device how our mobile app should behave and appear and chbt reminds us that we need to link our HTML file to the Manifest using this link tag so I'll copy it and paste it inside the head element this is what will let the browser know that the web app can be installed and displayed like a mobile app chat GPT also suggests some optional steps that we're not going to worry about for this project but you should test your app on various mobile devices and browsers to ensure that it looks and behaves as expected all right so here comes the part we've been waiting for to install the app on your device and launch it from a user's home screen you'll first need to deploy it or put it live on the web using a tool like netlify just like you learned in the previous section of this course if you need a refresher on how to do that click on this image to review the scrim on deploying and sharing your projects once your project is live on the web visit the live link on your phone or tablet for example most mobile browsers offer a manual way to add your web application to the devic's home screen for example in Safari on iOS you add your web app to your home screen by tapping the share button at the bottom of the browser browser then select add to home screen here you can see the home screen icon and you're able to customize the name if desired then tap add and that should add the app's name and icon to your home screen and clicking on the icon launches the app notice the purple colored toolbar at the top which we set with the theme color property here in the Manifest file and now you can start interacting with the smart home interface on your device so congrats this was a huge step in your building Journey you've successfully transformed your web app into a mobile app experience so give yourself a round of applause and be sure to share the link to your deployed project with friends and colleagues to show off what you've built this is a big step because now you are going to build a Chrome extension what is that well a Chrome extension is a small piece of software that enhances the browsing experience within the Chrome browser it often helps users be more efficient by tailoring Chrome's function fun ality towards individual needs and preferences these extensions range from simple tools like ad blockers note taking and password managers to more complex applications such as productivity boosters and project management if you visit the Chrome web store you can check out all the different types of Chrome extensions now building a Chrome extension might sound a little intimidating but worry not we're going to demystify the process together step by step with chubbt before we dive in let's review what we're building snap stash is a shopping wish list Chrome extension this extension will let users save the URL of their current browser tab to a shopping wish list the shopping list will display the saved items according to various categories such as pets books electronics and more and the best part is that the saved items persist even after closing or refreshing the browser and we'll use HTML CSS and JavaScript to build it once again we're building our extension incrementally by breaking down our tasks into several AI prompts and here is our first prompt it's designed to give chat gbt an overview of what we're trying to build a shopping list Chrome extension that uses HTML CSS and JavaScript that should let users save the URL of the current browser Tab and when a user opens the Chrome extension on a page with an item they like they should be able to select a category and then click a save button to add the tabs URL to a list displayed below and the list should display each item's link next to the selected category in this case the categories to select should be books clothes shoes Electronics pets and health so first I wanted to suggest a stepbystep guide to help me get started so let's see what chbt can do with this prompt okay it instructs us to create various files manifest.json pop up. HTML popup.js and popup.js manifest.json is at the heart of all Chrome extensions it defines the important properties of your extension just like the Manifest file we work with to turn web apps into Mobile friendly apps so first I'll set the name property to the extensions name snap stash now in this manifest we have properties different from those we worked with on a previous project for example we have a property for requesting and setting permissions in this case the extension will have permission to interact with the currently active browser Tab and the actions property sets certain browser actions like the default file to load and pop up when the user clicks to launch the extension in this case it's pop up. HTML it also sets the default icon that should appear in the Chrome toolbar it looks like we have three icon sizes listed here now for this project I'll only use the largest icon which is 128x 128 so I'll delete the other two and I've already included the icon here in the images folder this is what it should look like chat GPT gives us the basic setup here for Popup HTML so I'll copy the code and replace everything in my HTML with the new code the HTML defines the heading category selection the save button and the item list I'll make a quick change by updating the heading to the extension name snap stash and I'd also like to make a change to the select element displaying all the categories as option elements instead of displaying the text select a category here as a label I'd like this text to display by default as the first option of the select menu so how about you work on that so pause me now and take a moment to set the default select option to select a category all right hopefully you got that what I'll do is remove this label element entirely then inside the select element at the very top I'll add an option element I'll set its value attribute to an empty set of quotes and within that the text select a category and you'll often see these default options displayed with two dashes before and after the text like that so if you were able to create this option nice work in the mini browser we can see a preview of what it's looking like so far and next we'll apply some initial styles to the popup using this CSS I'll copy the CSS code and paste it into pop up. CSS now while I'm here I'll quickly update the CSS by making the body of the popup SL slly wider I'll change the width value to 300 pixels finally let's add the JavaScript to popup.js so this JavaScript contains event listeners and actions that are typically used in the context of Chrome browser extensions this event listener ensures that the JavaScript will not run until the HTML is fully loaded then it's getting the three elements from pop up. HTML and assigning them to variables and with this code when the user selects a category for the item and and clicks the save button it first gets the selected category like books clothes and shoes and then this code here chrome. tabs. query is a special method provided by Chrome that's specific to Chrome extensions it's what lets you manipulate and interact with the currently active tab in the browser in this case it creates the HTML list item with the link and text to display in the item list all right so it looks like we have all the main components of our extension in place the next step is to load the EXT ition in Chrome and test it first you'll need to make sure that you download the code from your scram onto your computer exactly as you've done in previous projects after that open your Chrome browser and go to the URL chrome/ extensions it should look like this and once you're there be sure to enable developer mode by toggling the switch at the top right corner then click the load unpack button and select the folder on your computer containing the project files and make sure that the extension itself is enabled now now in your Chrome toolbar click the extensions icon in the top right and you should see your new extension icon in the list there it is snap stash click on it and the popup should appear from here you can visit a page with an item you like or wish to purchase select a category click save item and a link with the selected category will be added to the list and it looks like that worked awesome so it looks like this is a pretty solid foundation to build from and there are many improvements and enhancements we can make like displaying the items name instead of only the category also saving items permanently and removing items we'll do just that and more when we continue working on the Chrome extension in the next Grim okay we have our Chrome extensions basic structure and styles in place and tested that it works now let's build the rest of the extension first up I don't like how users only see the category name when they save an item to the list so let's update the extension by not only displaying the item name and category but also showing a preview of the item name before users select a category and save it and I want the content in the item list to persist even after the user refreshes or closes their browser that way they never lose their shopping list with each prompt we can essentially add a new layer to our Chrome extension so here in our second prompt we're letting C GPT know that the user should see a preview of the item name before selecting a category and saving it and that both the preview text item link should display an item's Name by accessing the current tab's title element which on most shopping sites is the name of the product that title text is often quite long so I want to truncate the item name to 50 characters Max and the saved items should display after closing or refreshing the browser this might involve permission updates in the Manifest so I'm instructing chat gbt to update the Manifest file as needed and as always add detailed comments explaining the JavaScript let's try this prompt out chat TBT says that I need to update the Manifest file to include new permissions and a background script to store and manage the saved items so I'll update the permissions property in my manifest and add the new background property the new storage permission grants the extension access to Chrome special service for storing and retrieving data like our shopping list and this new background property sets up a helpful script called a service worker which runs in the background and can do a lot of smart stuff like listen for various browser events and even handle tasks like permanently saving our items in the browser storage so the user never loses them in fact chat gbt even provides the code to this new background.js file so I'll need to create a new file in my project named background.js and paste this new code into it so this is the short script that's going to manage the storage of Saved items background.js will run in the background independently of the pages you're viewing and its purpose is to remember the items in the shopping list even when the browser is closed or if multiple windows of the extension are opened all right next to preview the shopping items we need to update popup.js Title and it looks like we need to make a pretty big update to the JavaScript logic in popup.js so I'll copy the code and replace everything that's currently in popup.js with the new code so this block of code is what updates the item preview based on the current tab's Title by accessing the Page's title and this is where the text length is being truncated to 50 characters then the item preview text is being set here and it looks like the save button functionality was updated to save the selected item to storage chrome. storage. sync. getet and chrom storage. sync. set are special methods provided by Chrome to access its service for storing and retrieving data so here it's saving the item to storage and here it's upd dating the shopping list with the truncated item name then this block of code loads and displays all saved items from chrome storage all right good so it looks like the JavaScript is going to provide the functionality we need now from our initial test earlier it looks like the extension is not displaying the proper icon on the extensions page so I want you to troubleshoot this with the help of chat gbt so pause me and take a moment to interact with chubbt and ask it to help you display a 128x 128 icon for your Chrome extension on the extensions page all right hopefully chbt was able to help you out I'll just let cat TBT know that I built a Chrome extension and that it's not displaying the 128 x18 icon I created for it on the extensions page and it says that I need to check my manifest file and ensure that I've correctly specify the path to the 128x 128 icon using this icons property okay I don't see that property in my manifest so let me add it I'll include it just below the action property okay it looks like we're ready to test the latest changes now we can't run and test our updates here in the scrim so make sure the project folder on your computer has all the latest updates then head back over to the Chrome extensions URL and click the refresh or reload button here in the extension and that will load all the latest file updates for the extension I immediately see the extensions icon that's a great sign and if I visit a products page I see the truncated preview of the item's name at the top good I'll test selecting a category and save the item to the list which displays the item name next to its category and now the saved items will remain intact across browsing sessions multiple windows and even after closing and reopening the browser perfect moving forward let's give users more control over their item list by letting them delete items I'll ask chat gbt to allow you users to delete items from the shopping list permanently and that each delete button should display a delete icon using an icon font okay first I need to include the font awesome Library CSS to display the delete icon in my popup HTML file there we go and then I need to modify the code in popup.js it looks like I have to update this entire block of code that loads and displays saved items from storage because now it includes the code to create delete buttons next to each item list and run the delete functionality when a user clicks delete so I'll copy this full code block then replace this block here with all the new code and below this code block I need to include this new delete item function which holds the logic to permanently delete a saved item from Storage so I'll grab this code snippet and add it here in popup.js and I even get new CSS to lay out the item container using flexbox and style the delete button so I'll copy the new CSS and add it to popup CSS and here I'll make some updates to the button's color I'll change the background color to a light gray and the color to a shade of black with the value pound 999 I also want to add a small gap between the item name and delete button in each item container so here in the item container rule I'll set the Gap property to 10 pixels before testing the extension again I'll update the color of the extension's name to a dark shade of blue here in the H1 property like so I'll also select the item links and style them with a different color let's set it to a bright shade of blue with this value and increase the line height to 1.5 so that the text doesn't look too cramped I also want to add some base styles for the select menu and buttons first I'll select the button element and set its background color let's make it blue with this value I'll remove the button default borders by setting the Border property To None its text color to white make its font weight bold and set the user's cursor to the pointer when they interact with the button now I'll Target both the select element and the button in the same CSS rule just like that and here I'll apply some padding let's say 5 pixels top bottom and 10 pixels left and right and apply rounded Corners with the Border radius property I'll set it to four pixels and I'll also delete this group selector for the label select and button because I don't want to display them as block or on separate lines and the bottom margin will not be necessary okay to test all the latest updates make sure the project folder on your computer is up to date then in the Chrome extensions page click the reload icon visit a project page and launch the extension with these changes each item in the shopping list should have a delete button next to it displaying a trash can icon and they do awesome when a user clicks the delete button the corresponding item gets removed both from the UI and from Storage great the last feature I'd like to implement is to organize all saved items based on their category this would allow users to find items in their list easily so I'll ask chbt to display the saved item links as separate lists based on their category and to be sure that I don't miss anything I wanted to provide the fully updated code with detailed comments so let's see what CBT can do with this prompt the code in the Manifest background.js and popup.js file with this new code from chat gbt just to be sure that I don't miss anything it looks like this new block of JavaScript adds and saves an item to a specific list based on its category and here it uses what's called a loop in programming to create and display a separate heading and list for each category and please do take a moment to ask chat TPT to clarify any confusing code or concepts you've come across I really want you to get used to leaning on chat GPT for help before testing the latest changes I have some Java script challenges for you currently in the item preview text we see the word item in front of the name I think this is a bit unnecessary so I'd like you to look through the JavaScript code and find the code that generates the preview text and update it to remove the word item also the preview text should be cleared immediately after adding the item to its category list so I'll need you to update the JavaScript to clear the item preview after the user clicks the save button so pause me now and work through these all right hopefully that went well first this code here is what displays the item preview text I do see the word item here I just want to set the text content to the truncated title so I'll replace this by only referencing the value of truncated title like that next this event listener saves items to a category list when the user clicks the save button so I can clear the item preview text here with item preview. text content and set it equal to an empty string so if you got both of these fantastic finally let's wrap this up by customizing the layout of the Chrome extension first I'll select the main heading and the category heading all in the same Rule and set their color to this color value here that's in the H1 rule to apply the same color to both and I also want to close up any extra default space that appears below the category or headings by setting the bottom margin of H2 elements to zero so now I want to enhance the select menu and button layout so I'll start by placing them inside a div with the class controls just like that and then I'll Target the controls class in my CSS and I want to display the controls div using flexbox with display Flex that way both the select element and button display on the same line all add a 10 pixel gap between them and create some visual space around the top and bottom sides with margins so first margin top let's say 15 pixels and I'll set margin bottom to 20 pixels and since we're using flexbox I want the select menu to stretch and take up all available space within the controls container so I'll Target the select element and use a special flexbox property called flex and set it to one you'll see exactly how this works when we test the extension soon and finally I want to update the background color of the save button on Hover the button element is inside the div with the class controls so I can Target just this button with controls space button and then colon hover so on Hover we'll change the background color to a lighter shade of blue all right it's time to test our updates so again be sure the project folder on your computer has all the latest files then click the extensions reload button and visit a product page the updated select menu and button layout looks great notice how the select menu stretches to take up most of the available space and I see the preview text with the item name only and selecting a category then clicking save places the item in a category list and notice how the preview text gets cleared after saving an item great so it looks like we're done and let's not underestimate the scale of what we've accompl accomplished here you didn't just build a Chrome extension you created something that uses data persistence essentially setting up a mini database within the browser thanks to Chrome storage that is just wild let's take a moment to walk through how to automate your project deployment with GitHub and netfi this is an integral part of building and deploying projects and it's much simpler than it might initially seem as you know GitHub is your platform for Version Control and source code management and netlify allows you to host and deploy your projects now that you have some projects up on GitHub and your netlify account is set up I'll teach you how to combine them to automate your deployment process using the personal homepage project we built earlier in the section I've got my GitHub repo all set up and here we go to start head over to netlify.com and if you're not logged in go ahead and log in using your GitHub account once you're on nfi's main dashboard go to the site section and click add new site and select import an existing project then netlify asks which platform you want to deploy with click on deploy with GitHub having authorized netlify to access your GitHub repositories you'll be presented with a list of all your repositories and you can select the one you want to deploy if you don't immediately see it in the list you can search for it using this field click on the repository and then you'll be asked to set your deployment settings this includes specifying the branch to deploy which is usually main as well as any build commands and the publish directory now these build settings are for more complex sites and apps that require something called a build tool and a special publish directory we don't need to worry about any of these settings for the simple personal homepage so we can leave all of these optional Fields blank then click deploy personal homepage toward the bottom and netfi kicks off the process of deploying the site it will upload your files and give you a unique URL to your live site with this process netlify doesn't just deploy your project once it's always on the lookout for any changes you make in your GitHub repository from here on anytime you update your repository with changes to your project netlify will automatically update your live site this way you can be sure your live site always reflects the latest version of the code in your GitHub repo all right and that's all there is to automating the deployment process with GitHub and NFI you'll surely find it to be a valuable tool in your building and deployment workflow we've reached the end of this section and let me tell you you should be incredibly proud of your journey so far you've conquered more complex projects and challenges while further embracing the power of generative AI we've accomplished quite a bit together from building an interactive project slideshow to bringing the face bump game to life and building and launching your very own homepage and we had a ton of fun creating a mobile friendly Smart Home interface and even a Chrome extension so take a moment to Pat yourself on the back reflect on what you've built and learned so far and maybe even take a short break you've earned it now there's a lot more to explore in the world of AI coding as mentioned in the previous section I'll continue adding more sections to this course featuring new more complex projects and I would love it if you'd share your thoughts feedback and suggestions about this course and any ideas for projects you'd like to build in future sections clicking on this image will take you directly to the short feedback form so I'll see you back soon in and I look forward to hearing from you and checking out your projects happy building hey again awesome Builders so we've been on a pretty incredible journey exploring building projects with HTML CSS and JavaScript all with a touch of AI assistance and now in this section we're stepping into the fascinating world of Firebase a tool powered by Google to elevate your skills and build apps that save and manage data with Firebase you can quick connect your projects to a database to store and display the most uptodate information making it accessible to anyone any time so let's take a glimpse at the exciting projects that are in store for you we'll start by unraveling what Firebase is and why it's a game changer in app development then we'll walk through setting up Firebase your first step towards building Dynamic apps and we'll get HandsOn quickly by taking the interactive event invite project you built and hooking it up to a Firebase database using users will be able to add and save messages for attendees to read but that's just the beginning we've got a lot more in store after that you'll build an app called Kudos Delight that spreads Joy with random compliments harnessing realtime Firebase features you'll be able to add and save kudos to the database and randomly display them to anyone using the app then you'll create a fun pull app you can use with colleagues called lunch vote to help decide on lunch spots you'll get handson experience with creating a real time voting app and finally you'll develop an app called Road wallet that's perfect for Road Trippers to add manage and split expenses as we build these projects remember our goal Remains the Same to help you build amazing projects that persist data using AI assistance and not get overwhelmed by technical complexities we are here to push the boundaries of your comfort zone encouraging you to take challenges that might seem daunting at first this section is all about building and diving into app development with Firebase using AI as your guide and before we jump into the world of Firebase please do share your excitement let your scrimba colleagues know that you're starting this section in the today I will Discord Channel you can head over to the channel by clicking right on this image all right so if you're ready to ignite your projects with Firebase let's get started and keep on building together all right let's get going with adding Firebase into the mix fire Firebase is userfriendly for beginners yet powerful enough for advanced projects and it will be your gateway to creating database powered realtime projects by real time I mean applications that can store sync and display data between your users as soon as it's created or updated so first a little insight into Firebase Firebase is currently being developed and backed by Google and it provides a comprehensive Suite of tools designed to help you develop highquality apps and even games most developers use Firebase to build and handle what's referred to as the backend or server side of an app that's where all the data processing and storage happens essentially serving as the engine that powers the app's functionality Now setting up and maintaining a database can be a hassle as you'll experience the true beauty of Firebase lies in its Simplicity and power making app development accessible to everyone including those new to coding a standout feature of Firebase is its realtime database which which keeps data in sync across all users and devices whether web or mobile so this means that when you update data in the database like adding updating and removing items from a shopping list app for example all users connected to your app receive these updates instantly without the need for the user to reload the app so you'll find that this feature is particularly useful in scenarios like messaging online polls registration apps or collaborative tools where changes made by one user are instantly visible to all other users but why have me explain the details when you can ask chat gbt and learn more you can feed it a simple prompt like I'm just learning about Firebase can you explain how firebases realtime database Works in simple nontechnical terms and how I can use it in a web application and with this prompt you should hopefully get a detailed yet simple explanation with practical examples of Firebase so here for instance it says that you can use Firebase as realtime database for data storage realtime updates synchronization AP access authentication and more okay so next up we'll get into setting up Firebase in a project and start using some features before we get building I'll quickly show you how to get set up with Firebase and create your very first database using firebases realtime database this will be your first big step towards building Dynamic realtime prototypes and apps make sure you have a Google account as it's required to use Firebase if you don't have one now is the perfect time to create it if you're ready first visit the Firebase website at firebase.com then click on get started from here you can create a new project by clicking on the create a project button give your project a name this can be anything related to your app or idea I'll name it first database then click continue it might ask you if you want to enable Google analytics for your Firebase project I'll choose not to enable it by toggling it off then click create project then after a little while boom you've got your Firebase project the Firebase console is where you can manage your apps monitor performance and access various Firebase features once here be sure to spend a moment exploring as there's quite a bit to discover now as I mentioned we're only going to be concerned with the realtime database so let's create our actual realtime database here in the Firebase console navigate to the realtime database section under the build menu once there click on create database first you'll need to set a location set for where your realtime database will be stored so go ahead and choose a location that's closest to you I'll stick with us Central 1 then click next then you're asked to set up some security rules for example do you want to allow other users read and write access to your database and you have some options here for instance you can start in what's called locked mode to make your data private by default but I'll go ahead and start in test mode which allows you to experiment more freely without strict security rules I'll click enable and and now the database is all set up the first thing you want to look for is this reference URL which is what you'll use to interact with your realtime database now connecting to Firebase and interacting with your database does take some initial configuration but no worries because we've got the setup covered for you scrimba offers a Firebase template you can use to build projects using Firebase including a basic Firebase configuration for your web app for now all you need to do is copy this reference URL here in your database then paste it as the value for this database URL property in the scrim so go ahead and replace what's there now with my database reference URL our database is currently empty so let's try adding some data to it the Firebase template provides a simple UI to kick things off for you for example if I type test data here in the text field then click push to DB it should push the text into my database now my test database has a reference called things as you can see here here in the Firebase configuration so any data I push to it will be stored under this reference named things okay so now we can see the things reference added to the database console and expanding it shows the submitted test data text fantastic all right let's add some more data the realtime database updates data synchronously or in real time so if I click on the plus icon next to the things reference name I can add a new entry for example I'll add a message key with the value you hello from Firebase then click add notice how that new data instantly appears here in the app all right and there you have it you're all set up with firebases realtime database up next we'll dive deeper into how to interact with your Firebase database using JavaScript we are going to start by integrating Firebase into a project and creating functionality to save and display messages all while using chbt to guide us through this process so let's Jump Right In this project should look familiar it's the interactive GIF Gayla invite you built in a previous section the only difference is that I've introduced a message input field that displays only if the user selects yes I will be there that way they can submit an optional fun message for all to view and that will be done with Firebase when users RSVP to the event and submit a message will'll save the message to the database then display all the messages here in a list the message list will update in real time highlighting firebases realtime database capabilities all right so I've got the initial Firebase config all set up once again this is using code from our Firebase scrim template if you're curious about it this is what's called an import statement in JavaScript and this Imports a function from the Firebase app Library named initialized app so we're able to use it from this file and this function is used to initialize the Firebase app with a given configuration and Below we are bringing in a few other functions options related to the Firebase realtime database like get database ref push and on value then here in the app settings object I'm defining the reference URL to my Firebase realtime database and the line below initializes the Firebase app with the configuration defined in app settings after initializing the app this line retrieves the database instance associated with the initialized Firebase app and this creates a reference to a specific p path in your database in this case the messages path as you learned in the previous scrim we can use this reference to read from or write to the database I went ahead and created a new project in my Firebase console named GIF Kayla just as we did in the previous scrim and set up a realtime database for it and this is my special URL to connect to the database please do the same if you'd like to build upon this invite project now I don't want anyone else to be able to access this and write to my database so I'll show you a way to hide this URL using what's called an environment variable on scrimba so I'll bring up the environment variable dialogue window on scrimba you can access it with a keyboard shortcut command shift e if you're on a Mac or windshift E for Windows and then create a new variable called GIF Gaya DB exactly as shown here then set its value to my Project's database URL click add variable and now I can access this URL from my scrio projects using process. EMV do the variable name so I can replace the database URL here with process. env. Gore Galore DB and that's going to work exactly the same way while keeping my URL hidden to learn more about environment variables on scrimba be sure to check out this blog post written by the scrimba team you can click right on this image to head over to the post all right now let's work with chat GPT to bring Firebase into our project there shouldn't be a whole lot we need to do so what I'll do is use this initial prompt here that asks chubbt to First evaluate my existing JavaScript code which I'll provide here between the back ticks then based on the code it needs to add the Firebase realtime database to this project it should save only the submitted messages to the database if the value of attendance is strictly equal to yes or if the user selects yes I'll be there and all of the latest messages data needs to appear as list items in the messages list which is this UL element here with the class messages and I also want chat GPT to add detailed comments to help me understand the new Firebase code all right so I'll copy this prompt and feed it to chat GPT with all of the code I have here in my script.js file and it looks like I get back all the code I need to add Firebase realtime database to my event invite project so let's quickly review this new code I see that we're bringing in a new function from Firebase push and it's using push here to save each message to the database only if the attendance value is equal to yes so that one line here should take care of saving the data then it gives me this code here to display the messages from the database on the page now since we're working with a realtime database we need to listen for any changes in the database so firebases onv Value method does just that it data and listens for changes each time a user submits the form with a message new data gets added to Firebase then this function gets called every time data is changed at the specified database reference so it fetches all the data so that we can display it and this code Loops through all the messages return from the database and adds them as list items inside our unordered list all right so I'll add this new code to my project by clicking copy code then replacing everything in script. JS with this new code and let's try it out I'll first add an email address for example Gil at scrimba then for attendance I'll select yes I'll be there that brings up the message input field and I'll add a message like I can't wait to see everyone then click submit I get the party on we look forward to seeing you at the GIF Gaya confirmation message then if I scroll down and click the show messages button yes I see the message I submitted I can't wait to see everyone Gil great all right let's test out a few more messages let's add test at test.com then select yes I'll be there and as the message I'll type bringing the most epic costume click submit then let's see great I see the new message added to my messages list I'll add one more message let's say I'm counting down the days click submit and good I see the message appear in the list list now if I have a look at my database in the Firebase console I can see all of the submitted messages under the messages reference awesome so now even when a user refreshes the app or closes the browser window then revisits it they'll still be able to see all of the messages on the page all right so you learn how to integrate Firebase into an existing project and these are pretty much the steps to follow for most projects you want to connect to the realtime database so nice work let's keep going all right now we're going to spread some positivity and Delight by building quite the unique web app a compliment generator you can use to brighten someone's day with a simple kind message and we'll use Firebase with chat gbt to make this happen our compliment generator is named Kudos delight and it will randomly select compliments or Kudos from a database and display them to users but that's not all users can also submit their own compliments making our generator a a constantly evolving pool of positivity so we'll get to do a little random data retrieval with Firebase which should be fun all right first if you want to run this project for yourself you'll need to create a new project in Firebase for the compliment generator project and set up a realtime database for it just like I've shown you in previous projects now I've done all that and saved my database URL as an environment variable on scrimba named Kudos DB just like this and I've also set up a simple yet inviting U bu for our compliment generator so you won't have to worry about the HTML styling and basic JavaScript functionality so let's quickly go over the HTML for the app as you can see here in the body I have a div with a class container and within that we have an H1 with the app's name and then a paragraph to display all the compliments and below the paragraph We have a button to fetch all the compliments from the database and then we have a toggle button that when clicked shows and hides the form to submit kudos to the database over in the JavaScript I have all the initial Firebase configuration as you've seen before with a reference named compliments then I'm selecting some page elements like the button compliment display and form elements and assigning them to variables and finally a toggle form event listener to show and hide the Kudo submission form and set the toggle button text based on whether the form is hidden or not so that's how changing the button text from add kudos to hide form for example and showing and hiding the form all right it's time to set up our Firebase project you should have created a new project in the Firebase console and set up the realtime database for it so I'm going to ask you to work on the first part of this on your own with a challenge we want to let users contribute kudos to the app via the form and the database so you are going to use the provided prompt to program the submission form to add new complement to the database let's have a look at the prompt here in prompt. MD this prompt lets the AI know that you'd like to build a compliment generator that randomly selects compliments from a Firebase realtime database and display them to users and first it needs to program the submission form to let users add new compliments to the database and that it should use your Firebase config and existing project code as a reference so you'll need to provide all of the code here in index.js between the triple back ticks we also want detailed comments added to the new code to help us understand it all right so give this challenge a go now and I'll catch up with you when you're done to go over this first part together okay hopefully you were able to do that now I'll give it a whirl keep in mind that the solution you got was most likely different than mine and that's totally fine as long as you got it to work in a similar way all right so I'll copy my prompt here and feed it to chat GPT T including all of my starter code from index.js all right good so I got back all of the code for adding new complements to the Firebase realtime database so what I'll do is copy this function to handle form submissions from the provided code snippit and paste it in index.js all right let's go over this new code so we have an event listener added to the compliment form to handle form submissions when the form is submitted we prevent the default form submission Behavior here with e. prevent default then we get the value from the input field and trim it this trim method cleans up the submission by removing any leading and trailing spaces tabs or line braks from the string if necessary then if there is a new complement or if the value of new complement is not an empty string it pushes the string to the Firebase database as a new complement and then after successful submission we clear the input Fe field then hide the submission form by setting its class to Hidden and then update the button text accordingly so in this case it's setting the button text to add Kudos finally in any case of Errors during the submission process an error message is logged to the console here in the catch method so this catches any errors then displays them in the console here with console. a all right I'll test this out by submitting a Kudo here let's say your jokes are truly hilarious then click submit and checking my database in the console does in fact show that my compliment was submitted great so there's officially some communication between my project and the database now this was just a test submission so I'll delete this from my Firebase database because soon I'll want to test what the app displays when there are no compliments in the database all right so now let's work on the most important part of our project fetching compliments from the Firebase database and displaying them on the page for that I'll add a new prompt here to my promptmd file this prompt asks the AI to write the functionality that gets the compliments data from Firebase then displays a random compliment to the user each time they click the generate button and you'll do this with a challenge I want you to use chubbt by feeding it this prompt to add the JavaScript to connect the generate button to Firebase retrieve the compliments and display one random compliment to the user so go ahead and work through this challenge now and when you're done join me back to go over it together all right hopefully you were able to make this happen now I'll give it a go I'll copy this prompt then paste it into chat gbt and good it looks like I get back the code snippet to fetch compliments from the Firebase database so I'll copy this new code and paste it here in index.js all right let's quickly go over it in this new code we're defining a new function called Fetch compliments that will fetch the complement or Kudos data from Firebase inside the function it's using a function from Firebase called get to retrieve data from the complement ref then if data exists we convert it into an array and select a random complement from the array so that's what all of this code here is doing and it's also updating the content of the complement display element on the page with the randomly selected compliment then we're saying else if no compliments exist then set the text content of the compliment display to no compliments available and just like the earlier code in case of any errors during the fetching process an airror message is logged to the console here with this catch method and there's also a click event listener for the generate button that calls the fetch compliments function when the button is clicked all right let's test it out I'll first try clicking the generate button without any Kudos in the database and it says no compliments available and that's correct this text is being generated with this line of code here so I'll make it more on brand and update it to say no Kudos available okay now I'll submit audo using the form again let's have it say your jokes are truly hilarious click submit now I'll try clicking generate a Kudo and great there it is I'll submit a few more to test the randomness I'll say you are smarter than my smartphone submit it then how about you're the human version of a high five submit that and one more your ideas are always so Innovative all right let's try generating random Kudos and perfect we are indeed starting to Generate random Kudos from our database the final thing I'll do is give the user some visual Fe feedback once they've submitted their Kudos and I'll use this prompt for that it says to add the necessary code to display a success message once the user submits a compliment to the database and that the message should disappear after 3 seconds all right so let me feed this prompt to chat PT and I get back the new code for displaying a success message when the user submits a compliment to the database so first it's selecting an HTML element with the the ID success message which will be used to display the success message so I'll copy this line from the code snippet and paste it in index.js where I'm selecting all of my page elements and Below it's defining a new function called show success message so I'll copy this function from the code snibbit and add it to my code here in index.js this function sets the display style property of the success message element to block to make it visible and it uses a function in JavaScript called set timeout to hide the success message after 3 seconds by setting the display style property to none and inside the form submission event listener after successfully adding a compliment to the database it's calling the show success message function to display the success message for 3 seconds so I'll copy this function call from the code snippet then add it to my compliment form event listener right here in this then method now I've already included a paragraph element in my HTML for the success text notice how it's initially hidden by setting an inline display style To None all right so all that's left is trying it out let's first check if generating audo still works and it does so now I'll try submitting a Kudo let's just say you're the coolest click submit and fantastic the success message displays for about 3 seconds then it disappears I'll add another Kudo for good measure let's say you have an amazing way with words all right perfect so congrats on building your very own compliment generator you've just built something that not only teaches you valuable coding skills but also has the power to spread positivity so be sure to share your Kudos Delight app on social media and with the scriba community to show the world what you've built using a database it's Friday afternoon atw workk and there you are again in that endless where should we eat for lunch debate with your coworkers it's a common dilemma in every workplace well it's time to say goodbye to all those lengthy discussions and indecisions because we're going to build something that's not only fun but also incredibly practical a lunch break poll app called lunch vote this app will not only make deciding where to go for lunch easier but also give you the opportunity to keep building realtime web apps once again we'll use Firebase for realtime data handling and chat gbt for any coding queries we might have in the lunch vote app users can add their favorite lunch spots to a list then the team can vote on where they'd like to go so we're going to focus on realtime vote tallying and allowing everyone to see the poll evolve as votes are cast so let's jump in and get started I've already set us up with our application main structure this is all chat gbt generated and if you're curious I fed chat gbt this prompt to create the initial HTML CSS and JavaScript code in the HTML we have a form with an input field for adding lunch places and a submit button and below a div for displaying the top lunch vote and a list for displaying each lunch place as usual in the JavaScript we have the initial Firebase configuration and I've created a reference to a specific location in the Firebase database named places and as usual that's creating using firebases ref method and Below we are prepared to interact with the web page by obtaining references to various elements like the form and input field and the elements that will be used for displaying and interacting with data from the Firebase database now we're only going to focus on the Firebase code in this project so first things first you'll need to set up a new Firebase project and create a realtime database I've already done that and stored the database URL in a scrimba environment variable named lunch vote DB so go ahead and do that now okay so with our front end ready it's time to integrate Firebase we'll need to include some JavaScript that will push new lunch places to fireb and fetch them for display most importantly we'll need to implement realtime vote tallying where vote counts update once they're clicked that way everyone can see the most popular choices as votes come in all right so I'll kick things off with this prompt that lets chat GPT know that I'm building an app called lunch vote to add lunch places display them and allow users to vote I want it to store each lunch place in Firebase and that users cast a vote by clicking on a lunch place the vote counts should update in real time using firebases real real time database and as usual I wanted to evaluate and use my Firebase configuration and existing project code as a reference to get started like before I'll include my JavaScript between the triple btics and naturally I wanted to add detailed comments to the new code to help me understand it all right so let's feed this to chat upbt now normally I've been using chat upbt 3.5 for our projects but I'll need to step up my game with chat GPT 4 why the change well GPT 3.5 has shown some compatibility issues with our project's needs according to its latest training data for Firebase specifically so in this case chat gp4 is more Adept at handling and parsing this code base and what we need for the lunch vote app all right so I'll add my prompt here and I get back a lot of new code and it's code that pushes a new lunch place to Firebase when the form is submitted then listens for changes in the Firebase database and updates the UI and it's implementing a voting mechanism there's quite a bit of code here so so I'll copy the entire JavaScript snippet and replace everything in my index.js file with the new code there we go so let's go over the new code when the user submits the form this event listener triggers and this if statement it pushes a new place with the name and an initial vote count of zero to Firebase then it clears the input field after submission we also have a realtime data listener firebases onv value function con constantly listens for changes in the places Firebase reference so whenever a change occurs like a new place is added or votes are updated it updates the UI and with this code when a user clicks on a list item or place it triggers a vote increment for that specific place in Firebase it's bringing in a new function from Firebase called update to increment the vote count and it looks like here the app tracks and updates which place has the highest vote and then this code displays the leading place on the page overall this code ensures that your apps UI is always in sync with your Firebase database in real time providing a dynamic and interactive user experience all right let's try it I'll add a lunch Place Like Big Kahuna Burger I hear they've got some tasty burgers and I'll add another place there we go all right I'll click to vote for Big Kahuna bger and good I see the vote count update to one and the leading Place update to bikun burer with one vote and if we have a look at our database we can see the data being stored under the places reference each place has a name and vote property and currently Big Kahuna Burger is set to one so it looks like our app is successfully updating and retrieving vote counts in Firebase instantly that way everyone can see the most popular choices as votes come in now currently it seems like anyone can vote as many times as they want for example I can keep clicking on a place and the vote count keeps going up so let's figure out how to allow users to vote only once and by that I mean let's have chat GPT figure this out for us so I'll use this prompt here that says add the code to allow a user only to vote once and that users should also be able to change their vote so I'll feed this prompt to chat gbt and in its reply it says that to implement the feature where a user can only vote once but can change their vote we need to track which place a user has voted for and that can be done by storing the user's vote in the local storage of the browser well that's pretty clever local storage is a browser feature that allows a site to store some data in the browser which it can use again and again when you revisit the site now it looks like quite a bit of code was updated so thankfully it gives me the entire JavaScript code to copy into my project so I'll copy everything by clicking copy code and then replacing everything in my index.js file with this new code okay let's go over the changes so here I'm seeing this new function named update user vote which uses the browser's local storage to remember the user's current vote this is a simple way to track votes without requiring user authentication for example and this function handles changing the user's vote it decreases the vote count for the previous Choice as we can see here in this if statement it looks like it's using firebases update function to update only the value of a place's vote property in the database so it's decreasing it here by one if the vote count is greater than zero now this code below increases the vote count for the new vote so it's also using firebases update function to increase the vote count here and it's updating it in the browser's local storage and it looks like there's also added Logic for the vote changing so here with this code when a user clicks on a list item it checks if the user is is changing their vote here in this if statement if so it updates the vote both in Firebase and in the local storage by running this update user vote function we just looked at all right looks like those are all the changes so let's test this first I'll reset the database by deleting all of the lunch places there we go I'll add a couple of new lunch places all right so now if I try voting I see that I can only vote vote for one place so I keep trying to vote for good burger by clicking on it but it doesn't allow me to increase the vote count now if I click to vote for The Other Place notice how my vote switches excellent in fact I have this app open right now in multiple browsers so if I vote on a lunch place you can see it update here in the app in real time so check it out hey it looks like Jack Rabbit Slims won they do have some pretty good $5 milkshakes finally how about we add a feature where a user can delete the poll once a place has been chosen for that I'll use this prompt here that says add a delete poll button at the bottom which clears the database and resets the poll and to display the delete button only after a poll gets created all right so here you go chat GPT do your thing and here's all the new code so first I need to add this delete pull button to my HTML I'll go ahead and copy it then paste it in my HTML just below the places list notice how the button is initially hidden with its display property set To None next I'll modify my JavaScript to include the logic for showing the button handling the click event and resetting the poll I'll copy this line of code here that targets that delete button in my HTML and include the variable up here where I'm targeting all of my page elements right there and in the new JavaScript we have this reset poll function so I'll go ahead and copy that and add it to my code let's just paste it right here below my variables so when this delete pull button gets clicked we're going to call this function to clear the Firebase database where the polls are stored that's being done right here with this set method and then it's going to clear the leading Place display as well as the list of places and hide the delete button and it looks like we have a new if else statement we need to add to our on value function so I'll copy that from the code snippet then scroll down to my on value function where I'm listening for realtime updates from Firebase right here and I'll just paste in the new if else statement at the top remember onv value is a listener for the Firebase database it checks if any polls exist and updates the visibility of the delete button accordingly so for example this script here checks if there are any polls in the database base if poles are present it shows the delete button by setting its display style to block otherwise the button remains hidden with its display style set To None finally I'll copy this event listener here for the delete button and paste it in my code right at the bottom so when the delete button gets clicked it calls the reset pull function to reset the poll and remember that is this function here that we just added to our code okay so let's test this out once again I'll clear my database so I can see if the delete pull button gets hidden I just did that in my Firebase console and good I no longer see lunch places in the app so because my database is empty we are not seeing the delete poll button just yet but I'll add a place to start a poll and good the delete poll button appears I'll add a couple more places and there we go now to me the button feels a bit misaligned I want to align it Center on the page so I can quickly do that with a CSS adjustment this rule here is targeting the delete pull button and you've learned in previous projects that you can Center a line and element on the page using margin and the value auto so I'll replace this margin top property here with the margin shorthand and I'll keep the 20 pixels of top margin then I'll set the left and right margin values here to Auto and the bottom margin value to zero and there we go our button is now perfectly centered aligned I'll click to vote on a lunch place we see the vote count change and the leading Place change up top now clicking the delete poll button should delete the lunch places from the app so I'll try that and I get an error it says that set is not defined hm take a moment to have a look through index.js and see if you can figure out how to fix this okay so this fix shouldn't be too bad I see that the reference error is set is not defined so here in this reset pole function we are using firebases set function to reset the poll when the button gets clicked so I'll have a look at where we are importing the functions from Firebase and I do not see that we're importing the set function so presumably all I need to do here is include the set function and now I'll try clicking delete poll and great all the lunch places get deleted from the app so it looks like we're done here now I want you to pause me for a and take the time to add some places cast your votes and watch how the application responds in real time okay great so now maybe even think about ways to extend the app with more features for example what happens when there's a tie between two or more lunch places and congrats you've just built a realtime lunch break pull app showcasing the power of Firebase in creating Dynamic user interactive web apps so well done let's move on to our final project you're on a road trip with friends the journey is epic but tracking who paid for gas snacks and other stuff is turning into a chaotic mess sound familiar well it's time to bring Clarity and ease to your adventures we about to build the road Wallet app the ultimate solution for managing group travel expenses without the headaches Road wallet provides a realtime overview of expenses balances and settles the who paid for what debate instantly so here's what our app will feature Travelers will be able to log various expenses categorized into food gas accommodation sightseeing and more and you can add travelers to split costs and display each person's share you'll also be able to review your expenses here under expense history and here you can also easily delete expenses in case of errors or changes and the app will use the data from Firebase to do realtime calculations to to show how much each traveler owes in real time as expenses are added I've provided all of the starter code from the app which will take a look at in just a bit and here's what the road Wallet app is looking like so far I can click manage travelers to add travelers to the app and they get displayed below you can select an expense here from the category menu for example gas and set the amount to let's say $100 click at expense and see it listed under expense history I can add another expense like food and just say $200 for example and now our expense total is $300 and if we click manage Travelers we can see that both Gil and Tom each owe $150 now this isn't connected to Firebase just yet so if I refresh the app all my expenses and traveler data is reset so again to ensure seamless collaboration and realtime updates we are going to connect Road wallet to fire firebases realtime database with the help of chat gbt we're going to persist the expense in traveler data to Firebase so that when a traveler or expense gets added or updated the changes will be saved to the Firebase database in this project we're starting with more prewritten code than usual and like the previous project I use chat GPT to help me generate all of the code the goal in this Grim is to explore how chat gbt can effectively interact with modify and enhance a sub substantial existing codebase like ours so as usual in the JavaScript we have the initial Firebase configuration and here I have a reference to a specific location in the Firebase database named Road wallet I created a new project in Firebase and set up a realtime database for it and I saved the databases reference URL in a scrimba variable named Road wallet DB so go ahead and do that now if you want to work on this project all right so below we are retrieving all of the necessary elements for manipulation for example the expense form motor window buttons and more and then we have two arrays here to store expenses and traveler data and below that we have our event listeners that open and close the traveler modal window when the open or close button is clicked and this event listener here closes the modal window if the user clicks outside of it like so and here's the event listener for the expense form submission and the event listener for adding a traveler now below are all of the functions that handle logic such as managing expenses and traveler's data as well as keeping track of the total expenses amount and the amount owed by each traveler and displaying them in the app if needed I recommend that you pause me and take a moment to review this code before moving on okay so I'm going to use this prompt here to connect my app to Firebase The Prompt will let cat GPT know that I've buil built the front end for an app which does the following and it lists its features like logging travel expenses under categories adding travelers to split costs than displaying each person's share and the app will show how much each traveler owes in real time as expenses are added and it will list and delete expenses so we want chat gbt to write the code to store and manage the apps traveler and expense data using firebases realtime database and like we've done in previous projects I want chat GPT to use my Firebase configuration and existing project code as a reference to get started so I will be providing all of the code from index.js here between the triple back ticks and I want it to give me back the entire JavaScript code with detailed comments to help me understand it all right so let's paste this code into chat gbt including all of my code from index.js and once again I'm going to leverage the power and the latest knowledge and Firebase training data of chat GPT 4 for that it will be much more Adept at handling what we need need for Road wallet and it looks like I get back a lot of changes now to avoid any confusion with the new code or the possibility of leaving out code and breaking my app I'll ask chubbt to please give me the complete Javascript file because it looks like it's leaving out some of my existing code so this way I'll be able to just replace my existing code with all of the updated code all right there is the complete Javascript file with the Firebase integration so I'll copy it from chat gbt and then replace everything in index.js with this new code wow this is a lot of code so let's spend some time going over it the new code integrates firebases realtime database with my existing logic enabling the app to store and manage data in the realtime database and it also covers all the functionalities for adding deleting and displaying expenses and travelers in the new code it looks like we're bringing in some new functions from Firebase remove and set and we have some new references expenses ra and travelers RA are references to specific paths in the Firebase database where expenses and travelers data will be stored I also noticed that the handle new expense and handle new traveler functions now include logic to save new expenses and travelers to Firebase using the push and set methods as you can see here and these delete expense and remove traveler functions remove items from Firebase using their unique IDs and cool I see that it included on value listeners for expenses ra and travelers ref to automatically update our local expenses and travelers array when there's a change in the Firebase database and I see that the add expense to list and add traveler to list functions have been modified to include the unique ID of each traveler or expense which is necessary for deletion operations all right as usual if you have any questions about this code you can always ask the AI to explain the parts of the code that you don't quite understand yet and if that's a lot right now that's completely normal remember the focus here is to push the limits with all of the ways AI can contribute to our code and projects all right so let's test it out by adding some data and playing around with the features we also want to ensure that everything syncs perfectly with Firebase and that our calculations are accurate so first I'll click manage travelers to open up the motal window and add Travelers let's say Gil Tom raid and Bob that sounds like a fun road trip okay let's add some expenses first I'll select the food category and let's say $500 click add expense and there we go we see food listed in the expense history so if I click to manage The Travelers we see that each person owes $125 and that's correct okay let's add more expenses naturally we'll need to pay for gas so let's say 250 there we see gas in the expense history and each person now owes $187.50 all right let's see we'll need some accommodations so that'll be about $600 there we go and our traveler data updated accordingly good if I delete an expense let's say gas for example now each person owes $275 and if for some reason someone drops out like me and ooh now each person owes about $367 sorry about that all right now looking at the data in my Firebase console I can see all of the data saved under expenses and travelers for example but it looks like we might not need this amount Ed property in the database notice how they are all set to zero so it seems like the code is using the expenses data from the database to generate the amount owed by each person and that's completely fine for this first go at the app so since we don't need the amount owed property saved to the database we can remove the Firebase code here that is setting that property and that's being done here in the handle new traveler function so here in the set method we can remove the amount Ed property that way it's just setting or saving the new traveler name to Firebase and everything should work work exactly the same way and it does so I'm back in the road trip let's welcome pair to the road trip and good the amount owed still updates accordingly for each person I'll even delete some expenses and test that it also updates the amount owed for example say goodbye to food and it does let's say food is now $700 and that worked the total expenses is $1,300 and each person owes $260 all right so now I'll test refreshing the app enti IR L and all of my road wallet data should be present and it is fantastic hey so congratulations on building Road wallet you've navigated a complex codebase implemented realtime data handling and created a solution that makes travel easier and more enjoyable for everyone involved so what I want you to do now is think about how you might transform the app into a mobile friendly app that users can install on their device and conveniently launch from their home screen you learn how to do just that in the previous section so follow those steps to make it happen and be sure to share your app and show everyone what you've built I'll see you in the next scrim to wrap things up wow what a great ride this has been as we wrap up this section take a moment to reflect on your achievements you've not only embraced the power of Firebase but also built some pretty fantastic realtime datadriven applications you connected your interactive gift Gaya invitation to a realtime database to to save and display messages then ventured through the creation of the compliment generator spreading Joy with every click and we navigated the collaborative world of decisionmaking with the lunch vote app and tackled the Practical yet challenging Road Wallet app making every road trip more organized and fun these projects weren't just about coding they were about bringing ideas to life and solving real world problems with a database you've come a long way so it's time to give yourself a welldeserved pat on the back and treat yourself every line of code you wrote and every problem you solved has brought you one step closer to becoming a more proficient and confident Builder so keep experimenting keep building and most importantly keep enjoying every step of your building Journey thanks and happy building
