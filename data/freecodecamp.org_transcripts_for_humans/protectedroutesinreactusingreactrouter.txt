With timestamps:

00:00 - hey this is nick karnick and you're
00:02 - watching practical examples in react
00:05 - today we're going to implement public
00:08 - and protected routes using react router
00:11 - let's dive into some code
00:14 - we're running a basic react application
00:16 - here via codesandbox.io
00:20 - all the react router components used in
00:22 - a web application should be imported
00:26 - from react router dom
00:28 - so let's go ahead and add that
00:30 - dependency to react router
00:33 - dom
00:36 - let's create a component called landing
00:39 - page
00:41 - we're going to return a react component
00:43 - here
00:44 - first we import react from react
00:47 - we're going to export
00:50 - landing page
00:52 - as a
00:53 - functional component
00:56 - let's return some markup here
00:59 - and i'm going to return
01:02 - landing page
01:05 - here
01:06 - when i save it's going to rearrange the
01:08 - the uh the markup
01:11 - all right going back to index we're
01:13 - going to import our landing page
01:19 - oops
01:20 - from
01:21 - landing page
01:23 - and
01:24 - let's
01:26 - let's
01:28 - load the landing page
01:31 - right here and notice that landing page
01:33 - prints right there
01:36 - all right next we're going to import
01:40 - browser router
01:43 - from
01:44 - react router dom
01:47 - browser router basically
01:50 - gives access to the history api and
01:53 - keeps the ui in sync with the url
01:56 - now we need to wrap our app component
01:59 - with browser router
02:02 - let's go ahead and do that all right
02:04 - everything still works as expected let's
02:06 - import route
02:08 - and switch
02:10 - from react router dom
02:12 - we're going to convert landing page to a
02:16 - route
02:17 - so let's remove landing page here we're
02:19 - going to create a route component and
02:22 - pass in landing page as a component
02:27 - reference to route
02:29 - so notice that landing page loads here
02:32 - anytime a route
02:33 - does not specify a path it will load a
02:36 - component
02:38 - regardless of what's in the url
02:40 - so let's make this load only when the
02:43 - path equals root
02:45 - or slash let's try going to slash app
02:49 - notice what happens
02:51 - landing page is still loading that's
02:53 - because it does a prefix match
02:56 - and so essentially it matches on slash
02:58 - here and still loads
03:00 - landing page what we need to do is
03:02 - specify the exact property so that it
03:05 - only loads
03:06 - when the route
03:08 - is the route in this case
03:10 - we're going to create
03:12 - a component called app layout
03:16 - which will load when we specify the app
03:20 - route
03:21 - first let's take care of returning a
03:22 - react component here so we're going to
03:25 - return react from sorry import react
03:27 - from react and then we're going to
03:29 - return or export
03:32 - a constant call app layout
03:36 - which is going to equal to a function
03:39 - and we're going to return some markup
03:41 - here
03:43 - let's call this app layout
03:48 - and let's see if it's going to reorder
03:50 - everything now let's go back to index
03:52 - and we're going to import
03:56 - aptly out
03:58 - from
03:59 - the app layout file
04:01 - and let's create another route here so
04:03 - if i copy and paste this notice that
04:07 - we'll get two instances of landing page
04:09 - i'm going to replace this with app
04:11 - layout
04:12 - and we only want apple layout to load
04:15 - when the path matches slash app
04:18 - so it disappears there now if i were to
04:21 - put an app
04:22 - it's going to load appley out if i were
04:25 - to remove app here and go back to the
04:27 - root it's going to show landing page
04:30 - now what if we wanted to protect
04:32 - components under the app route and only
04:34 - make them available to users who were
04:37 - authenticated
04:39 - before we can do this let's create a
04:42 - file called auth.js
04:45 - to track the login status
04:48 - this class
04:51 - will
04:51 - export an instance
04:54 - of the class
05:00 - so that we mimic the singleton pattern
05:04 - and internally we're going to create a
05:05 - constructor
05:07 - with a property called
05:09 - this dot authenticated
05:12 - and set that to false
05:14 - we'll create a login method
05:16 - which will set this.authenticated to
05:18 - true
05:20 - and let's also
05:22 - take any back
05:25 - simulating some asynchronous operation
05:27 - here going back to the server and
05:30 - coming back and when it's done it'll
05:32 - call
05:34 - back to the caller
05:37 - likewise let's do a logout call
05:39 - with a callback here this is going to
05:42 - set authenticated to false and we're
05:45 - going to call the callback
05:48 - and finally we're going to create an is
05:50 - authenticated
05:53 - method which is going to return the
05:55 - status of authenticated indicating if
05:58 - we're logged in or not
06:00 - in a real world scenario you would end
06:02 - up managing your authentication
06:05 - via an interface like this
06:08 - that provides some abstraction so
06:09 - essentially you could be loading stuff
06:11 - from your local storage
06:12 - or the server side or look at your
06:15 - cookie
06:17 - etc let's go to our landing page
06:20 - and create a button for
06:25 - logging in
06:29 - so let's create a button here i'm going
06:31 - to
06:32 - move this to an h1 tag
06:36 - and on click
06:39 - i would like to
06:46 - handle
06:48 - the callback right here
06:50 - let's reference auth
06:53 - from
06:55 - now this is all lowercase because we're
06:57 - expecting an instance of
06:59 - the auth object we're going to call in
07:02 - we're going to call auth.login
07:05 - with a callback method that gets
07:07 - triggered when login is successful we
07:09 - want to redirect the user to the app
07:12 - so we're going to use
07:15 - a property called history
07:19 - and push the app
07:21 - route to it
07:24 - this will
07:25 - tell react router to change the url to
07:28 - slash app and then redirect the
07:31 - the user to the app route so let's go
07:34 - ahead and click login
07:36 - and we have an error here
07:40 - that's because
07:41 - this is a functional component and props
07:44 - should be a parameter
07:47 - alright
07:48 - so let's try logging in again and notice
07:50 - that we go to app layout and the path
07:52 - changes to app
07:54 - although we're redirecting to app we're
07:56 - not checking if the user is actually
07:58 - logged in
08:00 - so going back to index js
08:03 - we're going to create a new component
08:05 - called protected route
08:14 - and
08:15 - this component
08:17 - is going to import from react
08:22 - is going to import react from react
08:24 - and then we're simply going to export
08:28 - a constant called protected route
08:33 - which is again a functional component
08:36 - and
08:38 - we are going to return
08:42 - a route
08:45 - uh we need to make sure to import route
08:48 - before we can use this from react router
08:50 - dom
08:51 - and we're going to pass in component as
08:53 - a prop here which we will destructure
08:56 - and call it component with a capital c
08:59 - and rest of the properties that are
09:01 - passed in will be destructured into rest
09:04 - we're going to pass in all the rest of
09:07 - the props into route
09:09 - followed by a render prop
09:12 - which is basically
09:14 - a property called render
09:17 - and the
09:19 - the value for it is
09:22 - a functional component
09:24 - and we have to return
09:26 - our component this function gets a few
09:29 - props passed to it
09:31 - in case we wanted to pass
09:33 - some properties from our route
09:35 - definition into component so we're going
09:38 - to pass those along
09:42 - and i've made that mistake here i need
09:44 - to enclose this in brackets since we're
09:47 - destructuring or restructuring this now
09:50 - when i save it's going to reorder
09:51 - everything now let's go back to
09:54 - index.js so far everything loads let's
09:57 - import our protected route
10:00 - from
10:03 - protected route
10:05 - and we're going to copy that and simply
10:08 - replace this route here for app
10:10 - so let's save it so it's going to
10:12 - restructure everything
10:14 - so far everything seems to work okay
10:17 - now all protected route is doing
10:21 - is it's
10:22 - returning
10:24 - a route
10:25 - with the component that's passed in
10:28 - in our case it's the app layout
10:31 - as a render prop we also need to check
10:34 - if the user is actually logged in so
10:36 - let's import
10:38 - auth
10:39 - from
10:40 - auth
10:42 - and inside of our function here we're
10:44 - going to check if user is authenticated
10:49 - and if that's the case we're going to
10:51 - return a component
10:53 - else
10:53 - we're going to
10:55 - redirect the user
10:57 - so we're going to return a redirect
10:59 - component so we need to import redirect
11:02 - from react router dom we're going to
11:06 - render a redirect component
11:10 - i'm sorry return a redirect component
11:12 - which will tell it to go to
11:17 - a specific path which is passed in as an
11:19 - object with a property called path name
11:23 - now this is available in the react
11:25 - router documentation
11:29 - we're also going to pass a state
11:33 - prop to it
11:34 - or a value for its state
11:37 - which tells it that
11:39 - we're coming in from
11:41 - whatever location
11:43 - we were trying to go to which will be
11:46 - passed in here
11:48 - through rest and then through props and
11:51 - finally
11:52 - down here
11:53 - let's implement a log out button in the
11:56 - app layout i'm going to start out by
11:59 - turning this into each one followed by
12:02 - adding a button
12:04 - component that's going to be called
12:06 - log out
12:09 - and on click
12:11 - we want to call
12:13 - auth.log out so let's import auth
12:17 - from the
12:19 - odd
12:20 - file
12:22 - and we're going to call auth.logout
12:26 - which also takes a callback and so
12:29 - when logout is successful we're going to
12:32 - call this
12:33 - dot props dot history
12:36 - dot push and tell it to go back to the
12:40 - the root
12:41 - now the
12:43 - reason history is available on props
12:46 - here
12:47 - is because we loaded it via
12:51 - a route
12:52 - so the route object
12:54 - or component passes in a prop called
12:57 - history down to
12:59 - landing page or to app layout remember
13:02 - protective route is still routed
13:03 - internally
13:04 - and that's why we have access to
13:07 - this dot props dot history
13:10 - if we had a separate component we had
13:12 - created here
13:14 - then it would not have access to history
13:16 - and in that case we would need to import
13:20 - with
13:21 - router
13:23 - from
13:26 - from react router dom and then use that
13:28 - as a higher order component
13:31 - let's go ahead and click log out
13:33 - and we have an error here and i've made
13:35 - the same mistake here that's not because
13:37 - i normally work with classes and for the
13:40 - purpose of this demo i had
13:42 - decided to use functional components so
13:45 - i click login and goes to app layout i
13:47 - click log out goes back to landing page
13:50 - now the reason we see protected react
13:51 - router printed is because in our
13:53 - index.js
13:55 - i am printing that here so we can remove
13:58 - that
13:59 - what happens if we were to go to some
14:01 - random url here if i click enter nothing
14:05 - loads
14:06 - so in that case
14:07 - you would want to define a route
14:10 - which
14:11 - would handle
14:14 - every other path that's not defined
14:17 - and
14:18 - we would
14:20 - basically render a 404 page in this
14:23 - so
14:24 - something like 404 not found
14:27 - right
14:28 - but
14:29 - when i
14:31 - load this oh i forgot to close this
14:33 - there
14:34 - so when i um
14:37 - when i go to a random route that's what
14:39 - happens but notice what i have what
14:40 - happens when i go back to the route
14:43 - right i still see 404 not found
14:45 - and the reason is because we
14:47 - imported this
14:50 - component called switch but we haven't
14:52 - used it yet it essentially acts like a
14:54 - switch statement so we just want to
14:56 - stick it
14:59 - uh up here
15:02 - in between
15:03 - oh sorry around the routes
15:05 - and it sort of acts like a
15:08 - switch statement
15:09 - where it will stop after the first route
15:12 - that matches
15:14 - notice that the 404 not found is gone
15:16 - it's still there if i type in some junk
15:18 - here we're going to get 404 not found
15:21 - and now going back here login still
15:23 - takes us to app layout logout will take
15:25 - us the landing page hope you enjoyed
15:27 - this video
15:28 - if you have any questions or comments
15:31 - write them below and subscribe to my
15:33 - channel to be notified of future videos
15:36 - thank you

Cleaned transcript:

hey this is nick karnick and you're watching practical examples in react today we're going to implement public and protected routes using react router let's dive into some code we're running a basic react application here via codesandbox.io all the react router components used in a web application should be imported from react router dom so let's go ahead and add that dependency to react router dom let's create a component called landing page we're going to return a react component here first we import react from react we're going to export landing page as a functional component let's return some markup here and i'm going to return landing page here when i save it's going to rearrange the the uh the markup all right going back to index we're going to import our landing page oops from landing page and let's let's load the landing page right here and notice that landing page prints right there all right next we're going to import browser router from react router dom browser router basically gives access to the history api and keeps the ui in sync with the url now we need to wrap our app component with browser router let's go ahead and do that all right everything still works as expected let's import route and switch from react router dom we're going to convert landing page to a route so let's remove landing page here we're going to create a route component and pass in landing page as a component reference to route so notice that landing page loads here anytime a route does not specify a path it will load a component regardless of what's in the url so let's make this load only when the path equals root or slash let's try going to slash app notice what happens landing page is still loading that's because it does a prefix match and so essentially it matches on slash here and still loads landing page what we need to do is specify the exact property so that it only loads when the route is the route in this case we're going to create a component called app layout which will load when we specify the app route first let's take care of returning a react component here so we're going to return react from sorry import react from react and then we're going to return or export a constant call app layout which is going to equal to a function and we're going to return some markup here let's call this app layout and let's see if it's going to reorder everything now let's go back to index and we're going to import aptly out from the app layout file and let's create another route here so if i copy and paste this notice that we'll get two instances of landing page i'm going to replace this with app layout and we only want apple layout to load when the path matches slash app so it disappears there now if i were to put an app it's going to load appley out if i were to remove app here and go back to the root it's going to show landing page now what if we wanted to protect components under the app route and only make them available to users who were authenticated before we can do this let's create a file called auth.js to track the login status this class will export an instance of the class so that we mimic the singleton pattern and internally we're going to create a constructor with a property called this dot authenticated and set that to false we'll create a login method which will set this.authenticated to true and let's also take any back simulating some asynchronous operation here going back to the server and coming back and when it's done it'll call back to the caller likewise let's do a logout call with a callback here this is going to set authenticated to false and we're going to call the callback and finally we're going to create an is authenticated method which is going to return the status of authenticated indicating if we're logged in or not in a real world scenario you would end up managing your authentication via an interface like this that provides some abstraction so essentially you could be loading stuff from your local storage or the server side or look at your cookie etc let's go to our landing page and create a button for logging in so let's create a button here i'm going to move this to an h1 tag and on click i would like to handle the callback right here let's reference auth from now this is all lowercase because we're expecting an instance of the auth object we're going to call in we're going to call auth.login with a callback method that gets triggered when login is successful we want to redirect the user to the app so we're going to use a property called history and push the app route to it this will tell react router to change the url to slash app and then redirect the the user to the app route so let's go ahead and click login and we have an error here that's because this is a functional component and props should be a parameter alright so let's try logging in again and notice that we go to app layout and the path changes to app although we're redirecting to app we're not checking if the user is actually logged in so going back to index js we're going to create a new component called protected route and this component is going to import from react is going to import react from react and then we're simply going to export a constant called protected route which is again a functional component and we are going to return a route uh we need to make sure to import route before we can use this from react router dom and we're going to pass in component as a prop here which we will destructure and call it component with a capital c and rest of the properties that are passed in will be destructured into rest we're going to pass in all the rest of the props into route followed by a render prop which is basically a property called render and the the value for it is a functional component and we have to return our component this function gets a few props passed to it in case we wanted to pass some properties from our route definition into component so we're going to pass those along and i've made that mistake here i need to enclose this in brackets since we're destructuring or restructuring this now when i save it's going to reorder everything now let's go back to index.js so far everything loads let's import our protected route from protected route and we're going to copy that and simply replace this route here for app so let's save it so it's going to restructure everything so far everything seems to work okay now all protected route is doing is it's returning a route with the component that's passed in in our case it's the app layout as a render prop we also need to check if the user is actually logged in so let's import auth from auth and inside of our function here we're going to check if user is authenticated and if that's the case we're going to return a component else we're going to redirect the user so we're going to return a redirect component so we need to import redirect from react router dom we're going to render a redirect component i'm sorry return a redirect component which will tell it to go to a specific path which is passed in as an object with a property called path name now this is available in the react router documentation we're also going to pass a state prop to it or a value for its state which tells it that we're coming in from whatever location we were trying to go to which will be passed in here through rest and then through props and finally down here let's implement a log out button in the app layout i'm going to start out by turning this into each one followed by adding a button component that's going to be called log out and on click we want to call auth.log out so let's import auth from the odd file and we're going to call auth.logout which also takes a callback and so when logout is successful we're going to call this dot props dot history dot push and tell it to go back to the the root now the reason history is available on props here is because we loaded it via a route so the route object or component passes in a prop called history down to landing page or to app layout remember protective route is still routed internally and that's why we have access to this dot props dot history if we had a separate component we had created here then it would not have access to history and in that case we would need to import with router from from react router dom and then use that as a higher order component let's go ahead and click log out and we have an error here and i've made the same mistake here that's not because i normally work with classes and for the purpose of this demo i had decided to use functional components so i click login and goes to app layout i click log out goes back to landing page now the reason we see protected react router printed is because in our index.js i am printing that here so we can remove that what happens if we were to go to some random url here if i click enter nothing loads so in that case you would want to define a route which would handle every other path that's not defined and we would basically render a 404 page in this so something like 404 not found right but when i load this oh i forgot to close this there so when i um when i go to a random route that's what happens but notice what i have what happens when i go back to the route right i still see 404 not found and the reason is because we imported this component called switch but we haven't used it yet it essentially acts like a switch statement so we just want to stick it uh up here in between oh sorry around the routes and it sort of acts like a switch statement where it will stop after the first route that matches notice that the 404 not found is gone it's still there if i type in some junk here we're going to get 404 not found and now going back here login still takes us to app layout logout will take us the landing page hope you enjoyed this video if you have any questions or comments write them below and subscribe to my channel to be notified of future videos thank you
