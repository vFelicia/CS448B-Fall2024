With timestamps:

00:00 - in this course you'll learn about a few
00:02 - different methods to deploy web
00:04 - applications coros magdi is a software
00:07 - engineer at Microsoft and he developed
00:09 - this course the first section of the
00:12 - course covers deploying using open-
00:14 - Source options the second section of the
00:17 - course covers step-by-step how to deploy
00:19 - using Microsoft Azure the steps to
00:22 - deploy are similar no matter which
00:24 - programming language or framework you
00:28 - use hello everyone want and welcome to
00:31 - this inps tutorial on deploying web
00:33 - applications my name is caros MBE I'm a
00:36 - software engineer and I'm also a big fan
00:38 - of Open Source today I'm thrilled to
00:41 - share my expertise with you in this
00:44 - course we'll explore deploying web
00:46 - applications using different
00:47 - Technologies and platforms we'll cover
00:50 - various types of applications and these
00:52 - steps we discuss can be applied to many
00:55 - others the Technologies I use in this
00:57 - video are just examples the plat forms
01:00 - support a wide range of programming
01:02 - languages and
01:03 - Frameworks the objective is to equip you
01:05 - with the knowledge to choose the most
01:07 - suitable deployment solution for your
01:09 - product let's begin the
01:12 - journey so let's deploy our first
01:15 - application the first app we have is
01:18 - called exams exams has two repositories
01:21 - the first one is the backend API and the
01:25 - second one is the front end so we're
01:29 - going to use render so let's search
01:34 - render um render allows us to deploy
01:37 - both the back end and the front end so
01:40 - let's get it
01:42 - started we're going to register um
01:47 - Coline your
01:50 - information your
01:54 - password and then you're going to
01:58 - receive a verification an
02:00 - email um you need
02:03 - to use that to activate your Bender
02:09 - account all right
02:13 - so now that I've activated my render
02:16 - account um give yourself a
02:20 - name and how you're going to use um
02:24 - render and
02:25 - everything um so the first thing we need
02:30 - to create is a postgressql database
02:34 - because exams uh back end uses POS SQL
02:39 - it depends on it so let's create a new
02:44 - POS SQL database we need to give it a
02:48 - unique name so
02:51 - my
02:53 - DB um DB name user optional um so one
02:58 - important thing here here is to choose
03:01 - the same region for the database and the
03:06 - backend web servers so I'm going to
03:09 - choose
03:11 - Frankfurt and uh I'm going to leave BOS
03:14 - kill version to6 I'm going to choose the
03:18 - free version um which is suitable for
03:22 - hobby projects so let's create the
03:28 - database all right
03:30 - um it's currently creating the database
03:34 - so let's create a
03:39 - new web service to deploy the back
03:44 - end next um so we're going to deploy a
03:48 - public G repository but if you need to
03:50 - deploy a private one you can connect
03:52 - your GitHub gitlab or bbox
03:55 - account so I'm going to just copy and
03:59 - paste paste the URL to the um backend
04:09 - API all right so it has detected that
04:13 - the app is using
04:15 - node and it has also uh set the region
04:20 - to
04:22 - Frankfurt uh which is the one that we
04:25 - use for the
04:27 - um for the date base is um it also has
04:32 - some you know like commands to configure
04:35 - for the build command we're going to use
04:38 - mpm install and we're also going to add
04:42 - mpm run DB generate because our app is
04:47 - using Prisma so we will need to generate
04:50 - the Prisma client uh we also need one
04:53 - more step which is MBM wrong build
04:55 - because the app is uh using types scrip
04:59 - so we need to transpile the files back
05:01 - to um JavaScript last thing we're going
05:05 - to use MBM start as the stor command
05:09 - we're also going to choose the free uh
05:12 - instance type and finally we have the
05:16 - environment variables so let's get back
05:19 - to the
05:21 - repository we have a DOT and example
05:25 - file this file has the uh
05:30 - necessary like environment variables for
05:32 - you to deploy your application so the
05:36 - first one is the port which is going to
05:38 - be uh set automatically by render uh so
05:42 - we don't really need to care about that
05:44 - the second one is the database URL so we
05:47 - need to add a database URL according to
05:54 - uh let's go to the
05:57 - dashboard according to the created
05:59 - database instance here we can um get the
06:05 - internal database URL I'm going to copy
06:08 - that and paste it here so I'm also going
06:13 - to add one more environment variable for
06:18 - the what else do we have we need a d JWT
06:22 - secret key
06:23 - so um I'm going
06:26 - to generate that it's going to give it
06:29 - random Val value so um random value here
06:35 - C the admin username so that we can use
06:37 - it for uh the admin is the one
06:41 - responsible for creating uh exams here
06:45 - in this app and we also need a password
06:48 - um so the admin
06:51 - password and I'm going to generate
06:54 - that um we don't really need to care
06:58 - about anything else so I'm going to skip
07:02 - the advanced
07:03 - section and um I believe we're good to
07:08 - go so let's create web
07:17 - service it's going to take a few moments
07:21 - to uh pull uh to clone your um app and
07:27 - then run the build command which we said
07:31 - to mpm install and then uh generate the
07:35 - Prisma client uh which is the DB
07:38 - generate that's what I've defined in the
07:40 - package Json and it's finally going to
07:44 - build uh using typescript so I believe
07:47 - that when successfully build successful
07:50 - it's currently deploying
08:05 - as you can see it says that your service
08:08 - is live um great so let's test
08:14 - that cool it says are you
08:17 - lost we for example we have an endpoint
08:20 - called questions you try to hit that it
08:22 - says token is needed great it's it's
08:25 - working um let's try to deploy the uh
08:31 - front end so this creat a new static
08:36 - site and I'm also going
08:39 - to paste in the repo
08:45 - URL
08:47 - and cool it it says that this is the
08:52 - build command mm install MBM R build but
08:56 - the publish directory is is T and and I
09:00 - believe we need to set an environment
09:03 - variable
09:05 - here um which is
09:11 - the yeah that's the the base URL for the
09:18 - um for the back end that we have so this
09:21 - is our back end this is the base URL
09:26 - let's copy that and based it or the uh
09:30 - front
09:31 - end cool
09:34 - um and we're good to go let's create our
09:37 - static
09:49 - site nice it is that your side is live
09:53 - which means that now we can visit our
09:57 - site right here
09:59 - and let's
10:02 - um check to see the network tab sending
10:06 - requests to our back
10:08 - end um so if we say like the name caros
10:12 - and age 10 store exam sends a request
10:18 - to the um let's
10:22 - see yeah exams uh. on
10:29 - uh back and right here um great which
10:35 - means that our front end and the back
10:38 - end are working as
10:41 - expected the second web application
10:43 - we're going to deploy is called my super
10:46 - awesome app you know naming things is
10:49 - the second hardest thing in computer
10:51 - science but anyway we also have two
10:54 - robot trees the back end API and the
10:58 - front
11:00 - so the backend API here is built using
11:03 - bun and
11:05 - fastify cool um let's see what services
11:10 - it uses according to the environment
11:13 - variable it has a port uh it uses mongod
11:17 - DB um also requires a JWT secret key
11:21 - email API key email from name email from
11:25 - address front end ways URI and
11:29 - image upload API keyy
11:32 - cool so let's start by creating our
11:38 - mongodb inance we're going to use a free
11:42 - service called mongodb
11:45 - Atlas you need to
11:54 - register create your Atlas account
12:06 - we going to receive a verification
12:14 - email now let's verify our
12:21 - email cool email successfully verified
12:24 - let's continue
12:33 - cool uh we need to answer a few
12:35 - questions like what's your primary goal
12:38 - how long have you been developing
12:39 - software with
12:50 - mongodb we need to choose the free
12:55 - instance
12:57 - and let's uncheck
12:59 - preload sample data
13:02 - set and then just create
13:12 - deployment cool so it says that um my
13:18 - current IP address has been added to
13:20 - enable local
13:22 - connectivity uh we can add another later
13:24 - in network access we also need to create
13:28 - a database user us first user will have
13:30 - Atlas admin
13:32 - permissions
13:34 - and we can you know like we can skip
13:37 - that and go to network
13:41 - access then add IB
13:45 - address and allow access from
13:50 - anywhere then let's go to database
13:53 - access add new database
13:57 - user they call it user one and auto
14:03 - generate secure password we need to
14:06 - keepy these so that's um copy the
14:11 - generated password and save it
14:20 - here all right and add buil and
14:24 - roll read and write to any
14:27 - database and and add
14:32 - user all right now let's get back to
14:39 - database
14:42 - connect and we
14:45 - drivers choose the um noj driver which
14:51 - is going to give us
14:53 - a connection string we need to copy that
14:58 - and save it as well
15:02 - we need to replace the uh
15:07 - password um section here with the
15:10 - password that we generated before and
15:14 - keep that to use it when we deploy our
15:17 - backend
15:20 - API all right so we're done here now
15:24 - let's get back to see what else do we
15:26 - need okay we need an email API key so go
15:31 - to mailor
15:33 - send.com and let's sign
15:45 - up
15:47 - cool we need to verify our email let's
15:53 - get the link
16:03 - great mail
16:04 - verification done we need to go to SM
16:08 - smtb
16:10 - relay and
16:13 - then we need
16:15 - to click
16:20 - manage mail or send has created a trial
16:24 - domain for you to use it to send emails
16:27 - so basically we're going to to need
16:29 - that for our email sending that's is
16:35 - that's the
16:39 - domain and we need to generate an API
16:44 - token let's give it a name uh my super
16:49 - awesome
16:51 - token and
16:53 - create copy the value keep it here and
17:00 - and what else do we need um so API key
17:05 - we have that um the address and
17:09 - everything okay we need the image blow
17:12 - API key
17:14 - so there is a service it's called image
17:19 - hippo um it's free you can create an
17:22 - account and
17:30 - after creating an account go to
17:34 - API and add an API key let's copy that
17:40 - and save
17:46 - it all
17:49 - right the only thing that we need here
17:52 - is the front end basri but in order to
17:55 - deploy the the front end we need a
17:58 - backend
17:59 - so we're going to deploy the back end
18:02 - and then deploy the front end and after
18:04 - we deploy the front end we're going to
18:05 - change the environment variables for our
18:08 - back end to add um our front and base
18:11 - URI which is used to send emails for
18:14 - user
18:15 - verification to deploy the back end
18:18 - we're going to use a service called
18:27 - Ki let's sign up
18:32 - I'm going to sign up with
18:41 - email great let's confirm our email
18:55 - address all right we need to give our
18:58 - organization and name and then
19:04 - continue let's continue you can skip
19:07 - that okay now let's create a web
19:13 - service we're going to use
19:16 - GitHub and we're going to enter our
19:19 - public GitHub
19:21 - repository
19:24 - link that's the one it's imported
19:29 - make sure to choose the free CPU
19:34 - and
19:37 - next
19:39 - okay now for the back end we have a
19:42 - Docker file this Docker file has the
19:46 - required configuration to create a
19:48 - Docker image uh which uses bun as you
19:51 - can see to run our back
19:56 - end so for the ER we're going to choose
20:00 - a Docker file
20:02 - configuration and for the environment
20:06 - variables we're going to bulk
20:10 - import and let's use our and example
20:20 - here let's remove the port definition
20:25 - for the mongod DBU we're going to use
20:27 - the link we have
20:30 - here copy and paste is
20:38 - here all right for the email API
20:41 - key this is the email API
20:49 - key from name that can be like literally
20:55 - anything and
20:59 - um the email from address we could say
21:03 - ABC at this
21:06 - domain um frontend Bas we're going to
21:09 - leave that for now and the image upload
21:12 - API key we're going to use the image
21:15 - upload API key that we got from image
21:19 - hio and let's save
21:23 - that cool we have everything here um
21:30 - great so
21:32 - let's
21:39 - deploy it's going to take a couple of
21:42 - minutes to build the docker container
21:45 - and start deployment
22:00 - so the build and deployment has
22:02 - completed successfully as you can see it
22:05 - says that the anistan is healthy and all
22:08 - health checks are
22:10 - passing which is great um now we need to
22:14 - get
22:15 - the base URL for our back end um your
22:20 - servic is almost ready skip that a few
22:25 - fres great it says that route gets is
22:29 - not found um so let's check the Articles
22:34 - endpoint it turns an Mt array cool now
22:39 - let's deploy the front end for the front
22:42 - end we're going to choose Cloud flare
22:44 - Pages which is a web service provided by
22:48 - Cloud flare so we need to
22:53 - register type in your email and password
23:05 - sign up
23:09 - now as usual we're going to get a
23:11 - verification
23:14 - email so let's verify our
23:24 - email great let's explore all products
23:30 - now go to workers and
23:35 - Pages click
23:37 - pages and connect to
23:41 - get let's connect
23:45 - GitHub now let's install and authorize
23:48 - Cloud flare pages to use our GitHub
23:54 - account I'm going to select the my super
23:56 - awesome app front content and let's
24:00 - begin this
24:01 - setup for the framework we choose
24:06 - spelt the build command is nbm run build
24:09 - but the build out directory is going to
24:11 - be this and for the environment
24:14 - variables we're going to add a
24:17 - variable for
24:20 - the um we have the do n example here it
24:26 - has one environment variable V API Bas
24:29 - URL so we're going to use
24:32 - that and the value is going to be the
24:37 - base URL from kib um where we deployed
24:41 - our backend
24:43 - API so let's save and
24:53 - deploy it's going to clone the rapo and
24:58 - then all the
24:59 - dependencies then it's going to
25:02 - build um the front end um so we have the
25:07 - desk folder here it's deploying success
25:12 - um it's very fast actually um so we have
25:17 - the URL here it might take a
25:21 - few um moments for the URL to be ready
25:25 - to view so you can wait a couple of
25:29 - minutes um then try
25:32 - again cool now we can use the um base
25:37 - URL for the front end to redeploy our
25:40 - back end again so let's get back to
25:44 - coib go to our super awesome
25:49 - API and go to
25:56 - settings environment varibles
26:00 - let's change our front end base
26:07 - URI to the one that we got from Cloud
26:11 - Player
26:13 - pages
26:14 - and let's build and deploy
26:28 - now let's try using the super awesome
26:31 - app it's very simple we can sign up
26:36 - here give
26:38 - it an
26:42 - email
26:43 - password and sign
26:46 - up okay so it says that a verification
26:49 - mail has been sent to your email address
26:52 - let's get that
26:55 - link and let's copy and paste the link
26:59 - here it says that the email has been
27:02 - verified successfully now let's log in I
27:07 - the
27:12 - email log in cool currently we don't
27:17 - have any articles so let's create a new
27:21 - article give it a title maybe hello for
27:26 - all this great uh
27:28 - you could give it an image which is
27:31 - optional but let's publish that for now
27:33 - article created can see the article here
27:36 - let's test
27:39 - the image thing uh this is an image why
27:45 - super awesome
27:47 - image um let's choose a
27:51 - file so I'm going to use that one and
27:55 - publish
27:59 - created and it loads the image
28:03 - so now we have everything deployed our
28:07 - back end our front end we have image
28:10 - uploads we have an email service that
28:13 - sends emails everything is breaking and
28:17 - during this tutorial I try to use free
28:20 - platforms that don't require credit
28:22 - cards or anything it's very easy to use
28:25 - very easy to sign up and register an
28:27 - account so feel free guys to use these
28:30 - services to deploy your hobby projects
28:33 - so they're not just some code sitting
28:36 - there of GitHub or gitlab or whatever
28:40 - hello guys in this video I'm going to
28:41 - show you how to deploy a full stack web
28:44 - application on an Azure virtual
28:48 - machine um let's get it started I'm
28:52 - going to create an Azure virtual
28:55 - machine and uh I'm going to give it a
28:59 - name maybe Hello
29:01 - World um choose the
29:06 - 22 um 04 LTS opp2 version and I'm going
29:12 - to stick to the standard b1s
29:15 - size um I'm going to generate a new key
29:21 - pair
29:23 - and um I'm going to also allow the http
29:28 - and
29:29 - https uh inbound
29:32 - traffic um let's sh you and
29:35 - create it's going to take a few seconds
29:40 - to like
29:42 - validate um your choices and
29:47 - then
29:49 - create let's download the private
29:53 - key okay let's save
29:57 - it all right so we have the hello
30:01 - worldcore
30:03 - key um as you can see that the
30:06 - deployment is in progress we have to
30:09 - refresh
30:11 - um you're going to see that it's uh
30:15 - creating the resources the network
30:18 - interface um the public IV address and
30:23 - it's currently creating the virtual
30:25 - machine so while that's loading
30:30 - let's change the
30:33 - permissions uh for the
30:36 - downloaded a Sit key which is called
30:38 - Hello World
30:42 - um all right let's go to the created
30:45 - resource the virtual machine and hit
30:51 - connect then select native
30:56 - s let's St P machine I don't know why
30:59 - it's
31:00 - stopped okay it's starting right
31:05 - now all
31:07 - right and we're going to need this
31:14 - command and
31:17 - let's change that one to use the
31:23 - downloaded s key hello
31:26 - world right
31:28 - let's H
31:30 - enter
31:33 - yes and cool we're good to
31:37 - go I'm going to use a
31:41 - REO uh called exams I've built that one
31:44 - before it's a symbol with application it
31:47 - has like an admin can create exams link
31:51 - questions to the exams students can uh
31:54 - answer the questions and the admin can
31:57 - see like the the results um so this is
32:00 - the back end API going to get clone at
32:05 - to the
32:07 - server and we're also going to need the
32:11 - front
32:12 - end um let's clone that one as well
32:18 - clone right cool um now let's go to the
32:26 - back end
32:28 - and the back end it uses nodejs
32:33 - and um we're going to need to install
32:36 - that on the server So currently we don't
32:39 - have node I'm going to use fnm which is
32:43 - a
32:44 - fast uh node version manager it's built
32:48 - in rest uh so that's why it's blazingly
32:53 - fast everything is built and rust these
32:55 - days so anyway it says that we need to
32:58 - ensure that curl and and onz are
33:02 - installed so let's make sure we have
33:06 - those curl
33:08 - unzip right unzip is not here let's go
33:12 - to install it great and then we can use
33:16 - this command to
33:20 - install
33:22 - right
33:24 - and great in order to apply the changes
33:28 - let's use this command so far right if
33:31 - know it's working let's me install the
33:35 - latest uh long-term support version of
33:38 - node Jazz which is currently node
33:40 - version 20 uh1
33:44 - 15.0 at the time of the recording okay
33:48 - great we have node let's mpm
33:51 - install and what else do we need we need
33:54 - to copy um the DOT the
33:59 - file we could have like another terminal
34:04 - here um so we could use both all right
34:09 - uh let's copy the M example to the end
34:14 - and then we need to MBM run we need to
34:18 - MBM run build first because that's a
34:23 - typescript project right so
34:26 - MBM uh
34:28 - uh Want
34:30 - Build
34:32 - and all right while that's working let's
34:36 - nbm run DB
34:40 - generate um okay yeah okay we need to CD
34:45 - into the my goodness what's wrong with
34:52 - that okay so we've installed everything
34:57 - right we need to first run de
35:00 - generate then we need to run nbm run
35:04 - build all
35:07 - right
35:09 - um so this
35:13 - project expects
35:18 - a poql
35:22 - database
35:23 - so we're going to spin up a
35:28 - Docker
35:29 - container um I'm going to ask some help
35:33 - from
35:34 - TBT
35:36 - um okay so Docker run hress ql
35:43 - opine um all
35:47 - right Docker
35:51 - run okay I'm going to use this
35:54 - command
35:56 - it's going
35:58 - to uh run a
36:02 - container on
36:04 - the I believe we need to with PS
36:09 - exposed we need to expose the pores yeah
36:13 - we need dashb
36:15 - command yeah the dashb
36:19 - argument
36:22 - okay um
36:25 - so I'm just going to
36:28 - ignore the name of the container and
36:32 - here we're passing an environment
36:34 - variable
36:35 - Poore password set to my secret
36:39 - password and when we hit enter okay we
36:42 - don't have Docker so let's stcker inst
36:48 - install uh we need to install on one
36:52 - two and what do we have here
36:56 - installation using App
37:00 - cool throw in these
37:03 - commands and then we need to install the
37:07 - darker
37:08 - packages all
37:17 - right sto the Tucker
37:21 - packages
37:25 - Co what El else do we
37:30 - need um lenux post
37:33 - install okay we need to create the
37:37 - docker group I believe that's already
37:39 - created for you we need to add the
37:41 - current user to the docker
37:43 - group right
38:01 - so we add current user and then we
38:07 - do that and let's try the docker on
38:16 - it where is the
38:18 - dock that's
38:23 - it all right so it's unable to find the
38:25 - image locally it's going to pull
38:29 - it
38:35 - and okay so we should have the EV draing
38:41 - great so what else do we
38:45 - need okay we need an admin username that
38:49 - to admin and let's
38:52 - stupid um and save quit reing them so
38:58 - that's
39:01 - um to get into the insert mode you hit I
39:06 - and then you type and after that you had
39:09 - Escape shift
39:12 - um then colon
39:16 - WQ all
39:18 - right um I believe we should be ready to
39:22 - mpm
39:26 - start H yeah okay forgot to fix the the
39:32 - one should
39:35 - po what about we go to
39:38 - Chad give me the
39:41 - uh connection string where the
39:49 - running here we go here's your
39:53 - name okay that's rest to place
39:58 - yeah okay that's right that's what I
40:00 - wanted
40:02 - um all right so let's least that one
40:08 - right here
40:12 - um let
40:14 - save what if we mm start
40:17 - again all right the migration done
40:21 - server is listening
40:23 - cool um so to run the server like in the
40:28 - background we could use a process
40:30 - manager like
40:32 - pm2 uh so
40:36 - pm2 um quick
40:40 - start okay install it
40:46 - little and
40:51 - then we could
41:26 - all right
41:28 - right pm2 it's working
41:33 - pm2 um what's the command
41:38 - for yeah pm2 s and
41:42 - PM like
41:44 - pm2 BM do have pm2 and
41:51 - BM um okay
41:53 - pm2 sort and PM sort is all right
41:59 - into
42:02 - LS right it's working
42:06 - and yeah cool um so if
42:11 - we curl
42:14 - like uh Local Host Port 5000 we get are
42:20 - you lost cool it's working great let's
42:25 - deploy the
42:28 - um the front end um like let's get it
42:32 - over running
42:35 - um exams front end try that here so we
42:40 - build uh stall
42:43 - first
42:45 - um
42:47 - then
42:49 - build
42:52 - cool great so we have a this folder
42:57 - all right so I'm going to use a whip
43:00 - server in order to serve the front end
43:04 - and the back end and I'm also going to
43:08 - link them to a
43:10 - domain uh but first let's try the
43:15 - um let's go with installing the web
43:18 - server I'm going to use
43:20 - caddy um which is a super fast uh and
43:26 - the most interesting thing is that it's
43:28 - super simple uh web
43:31 - server um so let's go to the
43:36 - documentation um get inst
43:40 - started yeah so install
43:43 - caddy um I'm going to follow these
43:49 - steps and
44:20 - okay so we have
44:23 - caddy and let me S do
44:27 - system CTL check the status of
44:33 - caddy all
44:35 - right it should be active and running to
44:39 - ensure that
44:42 - let's give me the m i address the of the
44:47 - virtual machine and yeah means caddy
44:51 - Works
44:55 - cool now
44:58 - that's
45:00 - um all right let me show you where caddy
45:06 - keeps the configuration it's uh under
45:09 - Etc
45:11 - caddy caddy
45:14 - file that's where
45:18 - uh like serves that's that's where the
45:21 - configuration
45:23 - so what I'm going to do now is that I'm
45:27 - going to link two domains to this uh
45:33 - running virtual machine so I'm going to
45:37 - use
45:42 - DNS that's free dn.
45:46 - afa.org let's sign
45:49 - up um end the
45:54 - information and
45:57 - uh get
45:59 - password
46:01 - information
46:04 - and
46:08 - um what's
46:11 - that
46:15 - uh I agree send the activation
46:20 - email all right
46:23 - um then I'm going to hide that from you
46:27 - here uh and I'm going
46:31 - to just get the
46:42 - URL for
46:47 - deactivation all
46:50 - right here we
46:54 - go and
46:59 - let's get
47:04 - back okay cool um let's add the
47:08 - subdomain and I'm going to use the manyi
47:13 - menu for option shared the main
47:17 - registry and I really like the simple
47:20 - ones like a for
47:22 - two and I'm going to set the destination
47:26 - to be
47:27 - with
47:28 - the public IP address of the virtual
47:32 - machine and I'm going to use
47:36 - api.
47:41 - exams
47:43 - and
47:45 - save all right I'm going to add one
47:49 - more
47:51 - to exams directly
47:58 - I can't
47:59 - see this
48:03 - one all
48:11 - right okay so I have these two
48:14 - subdomains pointing
48:16 - to um our virtual
48:19 - machine so in the caddy configuration
48:22 - I'm going to do a couple of things um
48:26 - first first of all let's move the
48:30 - um let's move the front end part under
48:35 - the um V so I'm going to
48:41 - create V www
48:45 - HTML uh directory and I'm going to move
48:51 - the exams front and rebel under that one
48:58 - right uh permission denied
49:02 - Soo and then I'm going
49:06 - to play with the configuration a little
49:11 - bit uh D file all right let's clear
49:16 - everything up and first of all I'm going
49:21 - to say that for the front end I'm going
49:24 - to use this domain and this is the
49:28 - configuration
49:31 - um give me
49:34 - the uh okay I'm going to use T app to be
49:39 - honest um give me caddy file
49:44 - config for the following
49:49 - um so for this one
49:52 - use
49:54 - uh the front and
49:58 - uh use the
50:00 - exams ront and
50:03 - under under
50:06 - what where is
50:09 - it
50:11 - under ww. HTML
50:15 - to serve the this
50:20 - folder um and Spa single page
50:24 - application
50:27 - and
50:29 - for
50:31 - the api.
50:34 - exam42 uh forward the
50:38 - traffic to Port
50:43 - 5,000 um let's
50:48 - see all
50:52 - right uh I'm not really sure about this
50:55 - I believe there is
50:57 - is like the Spa Port is missing Cy file
51:03 - spba
51:05 - um let me
51:09 - see because we need
51:14 - to yeah I believe that's it try files
51:19 - any path yeah I believe that's the
51:22 - messing
51:24 - part all right let's where is T that's
51:29 - it let's this
51:31 - configuration and use it
51:35 - here um going just paste and let's fix
51:41 - that to
51:43 - exams front end slist that's where the
51:48 - build files and I'm going to add the
51:51 - missing
51:52 - Port uh which is try
51:55 - files right
52:00 - and
52:04 - uh anyway um
52:07 - let's sud sudo system
52:11 - CTL uh reload
52:15 - caddy all right let's check the status
52:18 - of
52:19 - caddy it says that sered Keys indication
52:23 - served Keys indication it's
52:25 - automatically generating an https
52:29 - certificate um a TS certificate uh in
52:32 - order to enable https uh
52:35 - traffic okay certificate obtained
52:38 - successfully seems like everything is
52:40 - working now there's I believe there's
52:43 - like one more thing we need to do with
52:47 - the um let's go to for wwh HTML exams
52:53 - front end and there is an adult and file
52:57 - and we just need to fix that to Sams do
53:02 - uh that's
53:04 - me.
53:06 - f.2 and let's MBM run build
53:12 - again right it's
53:14 - building um let's reload
53:18 - caddy
53:20 - stus M load complete sub previous ER
53:25 - great let's may go to exams.
53:31 - i42 and
53:34 - voila let's ensure that
53:38 - the network so if we say like n Sage
53:44 - anything sign up
53:47 - cool
53:49 - um so that's going to https SL yeah API
53:54 - exams for it's it's working guys it's
53:58 - working um so let me illustrate real
54:02 - quick um what we have here so first we
54:12 - created and um Azure virtual machine all
54:19 - right and in this inside this Azure
54:22 - virtual machine we cloned two reos first
54:28 - is the exam's API it's running using pm2
54:34 - uh it's no
54:36 - Jaz and
54:40 - this we also clone one more thing which
54:44 - is the exams front end and uh we built
54:50 - the
54:51 - D directory um it's built in it's built
54:55 - I believe I'm not 100 sure 100% sure um
55:00 - and we
55:02 - also have a post grass ql container
55:07 - running Let's
55:09 - uh uh post
55:12 - grass K container running inside
55:17 - Docker and we
55:21 - have here we have caddy working as a
55:25 - whoops
55:26 - server um and caddy is redirecting the
55:31 - traffic to
55:34 - whatever uh any of those is like
55:38 - requested so if we have like an incoming
55:42 - traffic from a client and uh it's
55:47 - requesting uh API it's requesting exams
55:51 - uh f42 it's going to redirect that to
55:55 - the exams from and um and as as we
55:59 - already have here we have the
56:03 - configuration uh caddy caddy file um we
56:07 - have the configuration for the exams.
56:10 - f.2 uh it's using the the root it's it's
56:14 - just creating a file server it's just
56:15 - serving static files um thebuilt files
56:19 - here and
56:21 - um the tri files thing is for so for
56:26 - example if we like hit refresh here um
56:30 - we don't really have a file called exams
56:33 - it's it's redirecting everything to so
56:37 - whatever the pause coming here we're
56:39 - just redirecting that to the slash so
56:42 - that's what the tri files is doing and
56:45 - it's here saying that's uh basically a
56:48 - file server and for
56:53 - the right here for the uh a api.
56:57 - exams
56:59 - i42 it's going to redirect the traffic
57:04 - to the uh
57:06 - container uh not the container the
57:10 - um the the the back end that's running
57:13 - on Port uh 5,000 right
57:18 - here okay it's using pm2 as we already
57:23 - mentioned um so uh that's what it's
57:26 - doing it's foxing the traffic to Local
57:31 - Host uh Port
57:33 - 5000 and um the API is using the docker
57:38 - container the bql docker container
57:40 - that's shying locally and as you can see
57:44 - um everything is working as expected so
57:47 - uh thank you guys for watching and hope
57:50 - to see you next time goodbye

Cleaned transcript:

in this course you'll learn about a few different methods to deploy web applications coros magdi is a software engineer at Microsoft and he developed this course the first section of the course covers deploying using open Source options the second section of the course covers stepbystep how to deploy using Microsoft Azure the steps to deploy are similar no matter which programming language or framework you use hello everyone want and welcome to this inps tutorial on deploying web applications my name is caros MBE I'm a software engineer and I'm also a big fan of Open Source today I'm thrilled to share my expertise with you in this course we'll explore deploying web applications using different Technologies and platforms we'll cover various types of applications and these steps we discuss can be applied to many others the Technologies I use in this video are just examples the plat forms support a wide range of programming languages and Frameworks the objective is to equip you with the knowledge to choose the most suitable deployment solution for your product let's begin the journey so let's deploy our first application the first app we have is called exams exams has two repositories the first one is the backend API and the second one is the front end so we're going to use render so let's search render um render allows us to deploy both the back end and the front end so let's get it started we're going to register um Coline your information your password and then you're going to receive a verification an email um you need to use that to activate your Bender account all right so now that I've activated my render account um give yourself a name and how you're going to use um render and everything um so the first thing we need to create is a postgressql database because exams uh back end uses POS SQL it depends on it so let's create a new POS SQL database we need to give it a unique name so my DB um DB name user optional um so one important thing here here is to choose the same region for the database and the backend web servers so I'm going to choose Frankfurt and uh I'm going to leave BOS kill version to6 I'm going to choose the free version um which is suitable for hobby projects so let's create the database all right um it's currently creating the database so let's create a new web service to deploy the back end next um so we're going to deploy a public G repository but if you need to deploy a private one you can connect your GitHub gitlab or bbox account so I'm going to just copy and paste paste the URL to the um backend API all right so it has detected that the app is using node and it has also uh set the region to Frankfurt uh which is the one that we use for the um for the date base is um it also has some you know like commands to configure for the build command we're going to use mpm install and we're also going to add mpm run DB generate because our app is using Prisma so we will need to generate the Prisma client uh we also need one more step which is MBM wrong build because the app is uh using types scrip so we need to transpile the files back to um JavaScript last thing we're going to use MBM start as the stor command we're also going to choose the free uh instance type and finally we have the environment variables so let's get back to the repository we have a DOT and example file this file has the uh necessary like environment variables for you to deploy your application so the first one is the port which is going to be uh set automatically by render uh so we don't really need to care about that the second one is the database URL so we need to add a database URL according to uh let's go to the dashboard according to the created database instance here we can um get the internal database URL I'm going to copy that and paste it here so I'm also going to add one more environment variable for the what else do we have we need a d JWT secret key so um I'm going to generate that it's going to give it random Val value so um random value here C the admin username so that we can use it for uh the admin is the one responsible for creating uh exams here in this app and we also need a password um so the admin password and I'm going to generate that um we don't really need to care about anything else so I'm going to skip the advanced section and um I believe we're good to go so let's create web service it's going to take a few moments to uh pull uh to clone your um app and then run the build command which we said to mpm install and then uh generate the Prisma client uh which is the DB generate that's what I've defined in the package Json and it's finally going to build uh using typescript so I believe that when successfully build successful it's currently deploying as you can see it says that your service is live um great so let's test that cool it says are you lost we for example we have an endpoint called questions you try to hit that it says token is needed great it's it's working um let's try to deploy the uh front end so this creat a new static site and I'm also going to paste in the repo URL and cool it it says that this is the build command mm install MBM R build but the publish directory is is T and and I believe we need to set an environment variable here um which is the yeah that's the the base URL for the um for the back end that we have so this is our back end this is the base URL let's copy that and based it or the uh front end cool um and we're good to go let's create our static site nice it is that your side is live which means that now we can visit our site right here and let's um check to see the network tab sending requests to our back end um so if we say like the name caros and age 10 store exam sends a request to the um let's see yeah exams uh. on uh back and right here um great which means that our front end and the back end are working as expected the second web application we're going to deploy is called my super awesome app you know naming things is the second hardest thing in computer science but anyway we also have two robot trees the back end API and the front so the backend API here is built using bun and fastify cool um let's see what services it uses according to the environment variable it has a port uh it uses mongod DB um also requires a JWT secret key email API key email from name email from address front end ways URI and image upload API keyy cool so let's start by creating our mongodb inance we're going to use a free service called mongodb Atlas you need to register create your Atlas account we going to receive a verification email now let's verify our email cool email successfully verified let's continue cool uh we need to answer a few questions like what's your primary goal how long have you been developing software with mongodb we need to choose the free instance and let's uncheck preload sample data set and then just create deployment cool so it says that um my current IP address has been added to enable local connectivity uh we can add another later in network access we also need to create a database user us first user will have Atlas admin permissions and we can you know like we can skip that and go to network access then add IB address and allow access from anywhere then let's go to database access add new database user they call it user one and auto generate secure password we need to keepy these so that's um copy the generated password and save it here all right and add buil and roll read and write to any database and and add user all right now let's get back to database connect and we drivers choose the um noj driver which is going to give us a connection string we need to copy that and save it as well we need to replace the uh password um section here with the password that we generated before and keep that to use it when we deploy our backend API all right so we're done here now let's get back to see what else do we need okay we need an email API key so go to mailor send.com and let's sign up cool we need to verify our email let's get the link great mail verification done we need to go to SM smtb relay and then we need to click manage mail or send has created a trial domain for you to use it to send emails so basically we're going to to need that for our email sending that's is that's the domain and we need to generate an API token let's give it a name uh my super awesome token and create copy the value keep it here and and what else do we need um so API key we have that um the address and everything okay we need the image blow API key so there is a service it's called image hippo um it's free you can create an account and after creating an account go to API and add an API key let's copy that and save it all right the only thing that we need here is the front end basri but in order to deploy the the front end we need a backend so we're going to deploy the back end and then deploy the front end and after we deploy the front end we're going to change the environment variables for our back end to add um our front and base URI which is used to send emails for user verification to deploy the back end we're going to use a service called Ki let's sign up I'm going to sign up with email great let's confirm our email address all right we need to give our organization and name and then continue let's continue you can skip that okay now let's create a web service we're going to use GitHub and we're going to enter our public GitHub repository link that's the one it's imported make sure to choose the free CPU and next okay now for the back end we have a Docker file this Docker file has the required configuration to create a Docker image uh which uses bun as you can see to run our back end so for the ER we're going to choose a Docker file configuration and for the environment variables we're going to bulk import and let's use our and example here let's remove the port definition for the mongod DBU we're going to use the link we have here copy and paste is here all right for the email API key this is the email API key from name that can be like literally anything and um the email from address we could say ABC at this domain um frontend Bas we're going to leave that for now and the image upload API key we're going to use the image upload API key that we got from image hio and let's save that cool we have everything here um great so let's deploy it's going to take a couple of minutes to build the docker container and start deployment so the build and deployment has completed successfully as you can see it says that the anistan is healthy and all health checks are passing which is great um now we need to get the base URL for our back end um your servic is almost ready skip that a few fres great it says that route gets is not found um so let's check the Articles endpoint it turns an Mt array cool now let's deploy the front end for the front end we're going to choose Cloud flare Pages which is a web service provided by Cloud flare so we need to register type in your email and password sign up now as usual we're going to get a verification email so let's verify our email great let's explore all products now go to workers and Pages click pages and connect to get let's connect GitHub now let's install and authorize Cloud flare pages to use our GitHub account I'm going to select the my super awesome app front content and let's begin this setup for the framework we choose spelt the build command is nbm run build but the build out directory is going to be this and for the environment variables we're going to add a variable for the um we have the do n example here it has one environment variable V API Bas URL so we're going to use that and the value is going to be the base URL from kib um where we deployed our backend API so let's save and deploy it's going to clone the rapo and then all the dependencies then it's going to build um the front end um so we have the desk folder here it's deploying success um it's very fast actually um so we have the URL here it might take a few um moments for the URL to be ready to view so you can wait a couple of minutes um then try again cool now we can use the um base URL for the front end to redeploy our back end again so let's get back to coib go to our super awesome API and go to settings environment varibles let's change our front end base URI to the one that we got from Cloud Player pages and let's build and deploy now let's try using the super awesome app it's very simple we can sign up here give it an email password and sign up okay so it says that a verification mail has been sent to your email address let's get that link and let's copy and paste the link here it says that the email has been verified successfully now let's log in I the email log in cool currently we don't have any articles so let's create a new article give it a title maybe hello for all this great uh you could give it an image which is optional but let's publish that for now article created can see the article here let's test the image thing uh this is an image why super awesome image um let's choose a file so I'm going to use that one and publish created and it loads the image so now we have everything deployed our back end our front end we have image uploads we have an email service that sends emails everything is breaking and during this tutorial I try to use free platforms that don't require credit cards or anything it's very easy to use very easy to sign up and register an account so feel free guys to use these services to deploy your hobby projects so they're not just some code sitting there of GitHub or gitlab or whatever hello guys in this video I'm going to show you how to deploy a full stack web application on an Azure virtual machine um let's get it started I'm going to create an Azure virtual machine and uh I'm going to give it a name maybe Hello World um choose the 22 um 04 LTS opp2 version and I'm going to stick to the standard b1s size um I'm going to generate a new key pair and um I'm going to also allow the http and https uh inbound traffic um let's sh you and create it's going to take a few seconds to like validate um your choices and then create let's download the private key okay let's save it all right so we have the hello worldcore key um as you can see that the deployment is in progress we have to refresh um you're going to see that it's uh creating the resources the network interface um the public IV address and it's currently creating the virtual machine so while that's loading let's change the permissions uh for the downloaded a Sit key which is called Hello World um all right let's go to the created resource the virtual machine and hit connect then select native s let's St P machine I don't know why it's stopped okay it's starting right now all right and we're going to need this command and let's change that one to use the downloaded s key hello world right let's H enter yes and cool we're good to go I'm going to use a REO uh called exams I've built that one before it's a symbol with application it has like an admin can create exams link questions to the exams students can uh answer the questions and the admin can see like the the results um so this is the back end API going to get clone at to the server and we're also going to need the front end um let's clone that one as well clone right cool um now let's go to the back end and the back end it uses nodejs and um we're going to need to install that on the server So currently we don't have node I'm going to use fnm which is a fast uh node version manager it's built in rest uh so that's why it's blazingly fast everything is built and rust these days so anyway it says that we need to ensure that curl and and onz are installed so let's make sure we have those curl unzip right unzip is not here let's go to install it great and then we can use this command to install right and great in order to apply the changes let's use this command so far right if know it's working let's me install the latest uh longterm support version of node Jazz which is currently node version 20 uh1 15.0 at the time of the recording okay great we have node let's mpm install and what else do we need we need to copy um the DOT the file we could have like another terminal here um so we could use both all right uh let's copy the M example to the end and then we need to MBM run we need to MBM run build first because that's a typescript project right so MBM uh uh Want Build and all right while that's working let's nbm run DB generate um okay yeah okay we need to CD into the my goodness what's wrong with that okay so we've installed everything right we need to first run de generate then we need to run nbm run build all right um so this project expects a poql database so we're going to spin up a Docker container um I'm going to ask some help from TBT um okay so Docker run hress ql opine um all right Docker run okay I'm going to use this command it's going to uh run a container on the I believe we need to with PS exposed we need to expose the pores yeah we need dashb command yeah the dashb argument okay um so I'm just going to ignore the name of the container and here we're passing an environment variable Poore password set to my secret password and when we hit enter okay we don't have Docker so let's stcker inst install uh we need to install on one two and what do we have here installation using App cool throw in these commands and then we need to install the darker packages all right sto the Tucker packages Co what El else do we need um lenux post install okay we need to create the docker group I believe that's already created for you we need to add the current user to the docker group right so we add current user and then we do that and let's try the docker on it where is the dock that's it all right so it's unable to find the image locally it's going to pull it and okay so we should have the EV draing great so what else do we need okay we need an admin username that to admin and let's stupid um and save quit reing them so that's um to get into the insert mode you hit I and then you type and after that you had Escape shift um then colon WQ all right um I believe we should be ready to mpm start H yeah okay forgot to fix the the one should po what about we go to Chad give me the uh connection string where the running here we go here's your name okay that's rest to place yeah okay that's right that's what I wanted um all right so let's least that one right here um let save what if we mm start again all right the migration done server is listening cool um so to run the server like in the background we could use a process manager like pm2 uh so pm2 um quick start okay install it little and then we could all right right pm2 it's working pm2 um what's the command for yeah pm2 s and PM like pm2 BM do have pm2 and BM um okay pm2 sort and PM sort is all right into LS right it's working and yeah cool um so if we curl like uh Local Host Port 5000 we get are you lost cool it's working great let's deploy the um the front end um like let's get it over running um exams front end try that here so we build uh stall first um then build cool great so we have a this folder all right so I'm going to use a whip server in order to serve the front end and the back end and I'm also going to link them to a domain uh but first let's try the um let's go with installing the web server I'm going to use caddy um which is a super fast uh and the most interesting thing is that it's super simple uh web server um so let's go to the documentation um get inst started yeah so install caddy um I'm going to follow these steps and okay so we have caddy and let me S do system CTL check the status of caddy all right it should be active and running to ensure that let's give me the m i address the of the virtual machine and yeah means caddy Works cool now that's um all right let me show you where caddy keeps the configuration it's uh under Etc caddy caddy file that's where uh like serves that's that's where the configuration so what I'm going to do now is that I'm going to link two domains to this uh running virtual machine so I'm going to use DNS that's free dn. afa.org let's sign up um end the information and uh get password information and um what's that uh I agree send the activation email all right um then I'm going to hide that from you here uh and I'm going to just get the URL for deactivation all right here we go and let's get back okay cool um let's add the subdomain and I'm going to use the manyi menu for option shared the main registry and I really like the simple ones like a for two and I'm going to set the destination to be with the public IP address of the virtual machine and I'm going to use api. exams and save all right I'm going to add one more to exams directly I can't see this one all right okay so I have these two subdomains pointing to um our virtual machine so in the caddy configuration I'm going to do a couple of things um first first of all let's move the um let's move the front end part under the um V so I'm going to create V www HTML uh directory and I'm going to move the exams front and rebel under that one right uh permission denied Soo and then I'm going to play with the configuration a little bit uh D file all right let's clear everything up and first of all I'm going to say that for the front end I'm going to use this domain and this is the configuration um give me the uh okay I'm going to use T app to be honest um give me caddy file config for the following um so for this one use uh the front and uh use the exams ront and under under what where is it under ww. HTML to serve the this folder um and Spa single page application and for the api. exam42 uh forward the traffic to Port 5,000 um let's see all right uh I'm not really sure about this I believe there is is like the Spa Port is missing Cy file spba um let me see because we need to yeah I believe that's it try files any path yeah I believe that's the messing part all right let's where is T that's it let's this configuration and use it here um going just paste and let's fix that to exams front end slist that's where the build files and I'm going to add the missing Port uh which is try files right and uh anyway um let's sud sudo system CTL uh reload caddy all right let's check the status of caddy it says that sered Keys indication served Keys indication it's automatically generating an https certificate um a TS certificate uh in order to enable https uh traffic okay certificate obtained successfully seems like everything is working now there's I believe there's like one more thing we need to do with the um let's go to for wwh HTML exams front end and there is an adult and file and we just need to fix that to Sams do uh that's me. f.2 and let's MBM run build again right it's building um let's reload caddy stus M load complete sub previous ER great let's may go to exams. i42 and voila let's ensure that the network so if we say like n Sage anything sign up cool um so that's going to https SL yeah API exams for it's it's working guys it's working um so let me illustrate real quick um what we have here so first we created and um Azure virtual machine all right and in this inside this Azure virtual machine we cloned two reos first is the exam's API it's running using pm2 uh it's no Jaz and this we also clone one more thing which is the exams front end and uh we built the D directory um it's built in it's built I believe I'm not 100 sure 100% sure um and we also have a post grass ql container running Let's uh uh post grass K container running inside Docker and we have here we have caddy working as a whoops server um and caddy is redirecting the traffic to whatever uh any of those is like requested so if we have like an incoming traffic from a client and uh it's requesting uh API it's requesting exams uh f42 it's going to redirect that to the exams from and um and as as we already have here we have the configuration uh caddy caddy file um we have the configuration for the exams. f.2 uh it's using the the root it's it's just creating a file server it's just serving static files um thebuilt files here and um the tri files thing is for so for example if we like hit refresh here um we don't really have a file called exams it's it's redirecting everything to so whatever the pause coming here we're just redirecting that to the slash so that's what the tri files is doing and it's here saying that's uh basically a file server and for the right here for the uh a api. exams i42 it's going to redirect the traffic to the uh container uh not the container the um the the the back end that's running on Port uh 5,000 right here okay it's using pm2 as we already mentioned um so uh that's what it's doing it's foxing the traffic to Local Host uh Port 5000 and um the API is using the docker container the bql docker container that's shying locally and as you can see um everything is working as expected so uh thank you guys for watching and hope to see you next time goodbye
