With timestamps:

00:00 - [Music]
00:08 - all right we're all good thank you so
00:09 - much for coming and let's give a round
00:11 - of applause for sean
00:13 - thank you
00:17 - just so i can write down if you guys
00:19 - have any questions and i don't have an
00:20 - answer i want to be able to get back to
00:22 - you so um
00:24 - that could happen too and um i want this
00:26 - to be kind of informal if you have a
00:28 - question feel free to just interrupt me
00:30 - and shout it out or raise your hand or
00:32 - however you feel comfortable doing that
00:33 - and i'll see if i'm moving too fast or
00:35 - if i go past something you want to see
00:37 - how that worked um i'm willing to to go
00:39 - back and do it so
00:42 - hi i'm sean hornsby um
00:45 - this is an intro to web game development
00:47 - class class meetup
00:49 - talk presentation let's go there
00:52 - um who am i well i i've been talking to
00:54 - you guys and so a lot of you probably
00:55 - already know this i have only been doing
00:57 - this just under a year professionally um
01:00 - i went to a boot camp in orange county
01:03 - and got a job right after that working
01:04 - on uh developing a web app using the
01:07 - mirn stack so it's a express react
01:10 - and node
01:12 - and
01:13 - that's been fun it was a contract gig
01:15 - that sort of a startup that didn't get
01:17 - funding and we're still
01:19 - kind of trickling through there so i'm
01:20 - doing part-time work there um
01:23 - i am a hobbyist game developer
01:26 - that's that's who i am it's interesting
01:28 - in this context i also have uh
01:30 - four kids between the ages of three and
01:32 - seven
01:33 - so um
01:34 - i
01:35 - just that's just to let you know like
01:37 - you guys can do this i have a part-time
01:39 - job i have four kids and i'm still
01:41 - learning this stuff and and doing it and
01:43 - uh and i still have the brain power to
01:45 - do it which is actually pretty amazing i
01:47 - know if any of you have kids
01:49 - one or two or four you know what i mean
01:51 - it's pretty pretty nuts so
01:54 - we'll do a little overview of what to
01:56 - expect here
01:58 - the stuff we talked about this is the
02:00 - program interview we'll talk about why
02:02 - you would want to design games why you
02:04 - would want to spend time building games
02:06 - maybe time that you think if i'm a real
02:08 - developer this is this could be more
02:10 - productive learning redux or learning
02:13 - angular 4 or something else um
02:15 - so we'll cover that i chose inside the
02:18 - game development there's a there's a
02:19 - framework called phaser why did i choose
02:21 - phaser we'll talk about that and then
02:23 - how it all works and some of the uh
02:25 - accessories to that and at the end uh
02:27 - however much time we have left we'll do
02:29 - some q a so
02:31 - why should you spend time writing games
02:34 - or thinking about games well i think i
02:36 - laid it out here pretty well most of it
02:38 - is about fun
02:39 - it's fun to do these things it's fun to
02:41 - think about it i'm sure that we've all
02:43 - played games probably we all play games
02:45 - occasionally or more than occasionally
02:47 - we think about games when we're playing
02:48 - them and i could have done if this thing
02:50 - was different or i could design this
02:52 - game you know or i could have done
02:54 - something like that um
02:56 - that's that's a great piece of
02:58 - engagement you're engaged in writing
03:00 - your code uh if any of you have written
03:02 - like professional code
03:04 - working on business logic stuff it can
03:06 - get pretty
03:07 - taxing mentally it's not a lot of fun
03:10 - normally to think about like oh did i do
03:12 - this
03:13 - you know do these products filter into
03:15 - the right thing and get get treated and
03:17 - it's it's taxing but it's not always
03:19 - very exciting
03:21 - so um having some fun is a great way to
03:24 - keep from burning out too like it gives
03:26 - you even if you're just doing it
03:27 - occasionally it gives you some time to
03:30 - to de-stress and to think about
03:32 - writing code in a way that doesn't have
03:34 - to do with whatever your boss is telling
03:36 - you to do and and uh
03:38 - maybe six other people filtering down
03:40 - their demands too
03:42 - um
03:43 - and that the point i think on here that
03:44 - is is very important is that you're
03:46 - going to finish projects because they're
03:48 - fun to do and finishing projects is good
03:50 - for you emotionally mentally to have
03:52 - this finished thing it's also good for
03:53 - you professionally because it's
03:54 - something you can show other people um
03:57 - and you can and you will
03:59 - you will solve problems while you're
04:00 - writing games that other people will
04:02 - need to solve too and then you may end
04:04 - up
04:05 - blogging about it or speaking about it
04:08 - and people will start coming to you for
04:09 - answers in that way and that's that's a
04:11 - very rewarding thing also
04:14 - so when you're writing games in
04:16 - javascript there are probably three main
04:19 - ways you can go you can work from the
04:21 - ground up you can dig up the webgl specs
04:24 - or the for the canvas specs and you can
04:26 - write
04:27 - right there on the metal you can build
04:28 - your games
04:30 - it's it's doable it's maybe not as fun
04:33 - as it could be because there's a lot of
04:34 - grunt work there
04:36 - the other end of the spectrum is these
04:37 - fully built realized tool sets something
04:40 - like unity uh even game creator uh cocos
04:44 - 2d these are tool sets where you load
04:46 - them up they fire up they look like
04:47 - photoshop or some kind of
04:49 - program and you build your code you
04:51 - build your pieces in there you move your
04:53 - stuff around you do get to write some
04:55 - code but mostly there's a lot of
04:57 - overhead and learning the tool set and
04:59 - those are they're actually very powerful
05:01 - unity is an incredibly powerful tool set
05:03 - people build professional level games
05:05 - with those tool sets
05:07 - and that's a great thing
05:09 - but there is some ramp up if you just
05:11 - want to start writing
05:12 - and for me i like writing javascript so
05:14 - i want to write javascript i look for
05:16 - more of the framework in phaser is a
05:18 - framework so you end up it's it's easy
05:22 - to use you require it in or you actually
05:24 - stick it in as a script in your index uh
05:27 - file and then you can just start writing
05:29 - code you have a javascript file that you
05:31 - just start building in
05:33 - there's a ton of community support
05:34 - there's actually maybe too much
05:35 - community support at some point they
05:37 - decided they were going to hand it over
05:38 - to the community and so now there's the
05:41 - community edition and that's that's what
05:43 - i use uh it's the latest
05:45 - the documentation is a little messy but
05:48 - there's so much extra support around
05:50 - there that it doesn't matter that much
05:52 - you can find your way and then drill
05:53 - through the documentation kind of you
05:55 - learn what to look for and then you go
05:57 - look for in the docs
05:58 - there is on there on their site they
06:00 - have this
06:02 - all these tutorials about specific
06:04 - features of phaser that are great and
06:06 - there's even a couple of other sites
06:07 - that drill in even further
06:09 - and that's the uh so
06:11 - that the phaser ce the github is the
06:14 - library or the framework and then the
06:16 - docs are there too and these slides will
06:18 - be available later too so if you see
06:20 - something and you didn't get a chance to
06:21 - write it down or you don't feel like
06:23 - writing right now there's not a problem
06:24 - with that and i'm on slack so any
06:26 - questions i'll answer there too
06:29 - so now you've thought about why oh yeah
06:31 - sorry
06:38 - i think some of it is personal
06:40 - preference
06:41 - some of it is what you're trying to get
06:42 - out of it are you trying to write a
06:44 - unity if you were looking for a 3d like
06:46 - a wonderful 3d game even if it was like
06:48 - 3d isometric or something
06:50 - unity probably a better place to look
06:52 - than phaser phaser and where i've mainly
06:54 - focused is on two-dimensional games uh
06:57 - so you so if you're look it's really
06:59 - based on what you need out of it if
07:01 - you're looking to build something that
07:02 - you want to take to market and then
07:04 - maybe unity is a good place to start
07:05 - although phaser games are uh are are
07:09 - selling they're on
07:10 - native devices they're on the web so
07:14 - uh it comes down to your preference
07:16 - really you're gonna end up with a lot of
07:17 - the same results
07:19 - depending on how much work you put into
07:20 - it um i think
07:22 - some of those tool sets like unity do a
07:24 - lot of the heavy lifting but there is a
07:26 - learning curve to learning the tool so
07:28 - um
07:29 - i just chose phaser because it's quick
07:31 - it's easy to use i don't have to worry
07:33 - about like
07:34 - even learning how to use unity or
07:36 - teaching you how to use unity you can
07:38 - literally
07:39 - get phaser games going in like 10
07:41 - minutes probably even less if you if you
07:44 - have any experience with uh front-end
07:46 - development at all so
07:48 - so that's any other questions about that
07:51 - so we got why would you build games and
07:53 - what would you use to build them now
07:55 - what are you going to build
07:56 - so if you're right now you're sitting
07:57 - there thinking i got a game idea
07:59 - it's going to be great
08:01 - it probably looks something like this
08:04 - it's this huge maybe it doesn't even
08:06 - feel that complicated but i guarantee
08:08 - you it is a complicated piece of
08:09 - machinery that you're thinking about
08:11 - building so i need you to scale it down
08:13 - i want you to think smaller now you're
08:14 - thinking smaller
08:16 - that's a lot smaller but a lot smaller
08:18 - that's still too complicated for your
08:20 - first game especially but for engine and
08:22 - just learning how to do this stuff there
08:24 - are too many moving parts and i'm not
08:25 - actually sure why that x-wing has two
08:27 - pilots and two astromech units um
08:30 - so that's a little weird too but this is
08:32 - still too complicated uh
08:35 - you need to think
08:36 - simple
08:38 - that
08:38 - i think is obviously a millennium falcon
08:41 - but it is also obviously very simple
08:43 - it's probably 12 pieces there that's
08:45 - great that's where you want to start on
08:48 - your first game your first project
08:49 - you're learning phaser you're going to
08:51 - learn how to build a game
08:53 - if you get in over your head it's gonna
08:56 - leave a bad taste in your mouth you're
08:57 - gonna you're gonna get halfway through
08:59 - something and you're gonna get bogged
09:00 - down and you're gonna throw it all away
09:02 - and say i don't even want to do this
09:03 - again this is this is dumb um i'm dumb
09:06 - forget it i'm going to go back to
09:08 - whatever something else writing business
09:10 - logic
09:11 - even that might be more fun
09:15 - so
09:16 - then the nice thing too
09:17 - i mean i think depending on how old you
09:19 - are the games that you played as a kid
09:21 - are probably way different than the
09:23 - games i played as a kid
09:24 - who had like an atari 2600 or
09:27 - yeah nobody so
09:30 - so you so so there is this
09:32 - what i like about it is there's this big
09:34 - library of games that are already built
09:36 - and when you talk about like atari games
09:37 - they're already simple maybe your first
09:39 - game was halo 2
09:40 - um that's that's in the capital ship
09:43 - category you're not going to build even
09:45 - a clone or some version of halo 2. i
09:47 - grew up playing things like
09:49 - like pitfall and uh donkey kong and so
09:52 - those games are are reachable that's
09:54 - something you can do and i think if you
09:55 - look in that era of games you're going
09:57 - to find a lot of a lot of those already
09:58 - built
09:59 - that already have kind of they have the
10:01 - ui ux already to design players know how
10:03 - to how to do those things somebody
10:04 - thought about how to make that game
10:06 - accessible to people
10:08 - how what affordances are what what makes
10:10 - sense you don't have to worry about the
10:12 - game design you don't have to worry
10:13 - about
10:14 - any of that stuff you can just focus on
10:16 - writing the game that's already been
10:17 - designed and that's i think that's a
10:19 - great place to start i started with pong
10:21 - i feel like that it's a very simple game
10:23 - it's still
10:24 - literally some moving parts in there
10:26 - this is some stuff to do but it's it's
10:28 - simple enough to to get through
10:31 - and so
10:32 - let me break out of this now and i'll
10:34 - actually i'll actually fire up pong here
10:45 - there we go
10:50 - i should figure out what port i put that
10:52 - server on to
10:55 - 8002 all right
11:05 - so that's it this is pong
11:10 - and i'm on the left
11:12 - and the computer is slowly trying to
11:14 - catch up on the right
11:17 - um it means there's a lot running so it
11:19 - kind of bogs down a little bit
11:21 - this is pong and i think if you've ever
11:23 - seen pong it's a pretty good
11:24 - representation of it there are still
11:26 - choices you can make when you're
11:27 - designing this game
11:28 - uh
11:31 - so there we go we'll pause it we'll get
11:33 - back to the
11:35 - presentation a little bit but that's
11:36 - pong pong works
11:38 - um and
11:39 - and i'll show you how that was built um
11:42 - first though i'm going to cover a little
11:43 - bit
11:44 - of just the basics
11:47 - this is a basic phaser game right here
11:49 - this is all the code yes sir
11:53 - yeah
11:53 - i use uh vs code i've used adam as well
11:56 - i like them both i like vs code
11:59 - although this is probably an outdated
12:00 - opinion vs code has a built-in node
12:02 - debugger that i don't think atom does
12:05 - and at the time when i was using atom it
12:07 - didn't i like vs code has a built-in
12:09 - terminal also so i don't have to switch
12:10 - back and forth a lot i can just pop the
12:12 - terminal open um
12:15 - sublime is another popular choice it's
12:17 - it's not free but it is free i think
12:18 - they suggest you pay 80 bucks for it but
12:20 - you can use it forever without doing
12:22 - that
12:22 - um who is the webstorm is a great ide
12:26 - but it is
12:28 - it's an ide something like vs code or
12:30 - adam are our code editors they're
12:32 - lightweight they're they're very low
12:33 - feature simple to use if you if you're
12:36 - coming from something like like visual
12:37 - studio itself you might be more
12:39 - comfortable in like a webstorm has a lot
12:41 - of features but yeah i'd stick with vs
12:43 - code or adam
12:45 - so once you get your index set up and
12:47 - i'll i'll show you that too this is this
12:49 - is all that's required to start a phaser
12:50 - game
12:52 - you have
12:54 - const game equals new phaser game and
12:56 - then you have a width and a height for
12:58 - the window that you're going to build
13:00 - phaser auto just lets it select between
13:02 - if webgl if if webgl support is there
13:05 - it'll use webgl if not it'll drop down
13:07 - to canvas
13:08 - and then i use phaser as my div name
13:10 - that's where it inserts it into the into
13:12 - the web page if you don't um add
13:15 - anything there or on the web page it
13:16 - just pushes it into the body of the page
13:18 - which is okay at this level because
13:21 - there's not like a lot of other code
13:22 - going on my web page is literally just a
13:24 - head and then a script tag
13:27 - and then i just register a couple three
13:29 - functions preload create and update
13:32 - and those are the three i think you
13:34 - could probably get away with create an
13:35 - update but preload is important in its
13:36 - own right and then what happens when the
13:38 - game
13:39 - loads
13:40 - is it runs through the preload function
13:42 - once it runs to the create function once
13:45 - and then it starts hitting update every
13:46 - frame so about 60 times a second it runs
13:49 - through the entire uh update function
13:52 - and so
13:54 - let me show you the let me crack out of
13:55 - this and i'll show you the index file
13:56 - too because i don't think i included
13:57 - that in there
14:01 - this is what the html file looks like
14:05 - you guys all read that
14:06 - i hope because i don't know how to make
14:07 - it any bigger
14:10 - um
14:11 - it's this is the only two important
14:13 - parts well that's not true this is
14:16 - important
14:17 - this is where you require this is how
14:19 - you get phaser i use a content delivery
14:21 - network um i like that method
14:25 - and then there's the div that it's going
14:27 - to stick it in my phaser div
14:29 - and then i just have to tell it where my
14:31 - code is
14:35 - so
14:36 - that's how that works
14:42 - now that once you get past that like
14:44 - this guy right here this blank looking
14:46 - thing you have a couple things you have
14:48 - to think about
14:51 - how many of you like global variables
14:53 - variables in the global scope nobody
14:55 - that's the right answer but now we're
14:56 - now we're game developers so
14:59 - we need these semi-global variables
15:01 - they're they're actually pretty global
15:03 - they're going to be out there they're
15:04 - going to hold a lot of our fun of our
15:06 - stuff so that those separate functions
15:08 - can access them without having to pass
15:09 - back and forth all these all these
15:11 - objects
15:12 - so we're going to well i'll show you
15:13 - some globals we'll talk about that the
15:15 - preload and the create functions
15:18 - so this is um
15:19 - this is pong this is the top half of
15:23 - pong
15:23 - you can see
15:24 - the uh that con game in the top we just
15:27 - talked about all those let statements
15:29 - are my global variables um
15:33 - if if this was a year ago those would be
15:34 - var statements but this is es6
15:37 - i i like to use i like to stay away from
15:40 - var whenever possible i don't know if
15:41 - that distinction means anything to
15:42 - anybody at this point but um
15:45 - so that's that's if you're used to
15:46 - seeing var anywhere you see var or let
15:49 - or const it's essentially the same thing
15:51 - um for the for the sake of this
15:53 - conversation
15:55 - so i'm going to do things with these so
15:56 - i just i just declare them out there and
15:59 - then
16:00 - you'll see i start using them in create
16:01 - but in preload what preload does is
16:03 - while the game is going and if you're
16:05 - going to reuse
16:07 - assets it loads those assets and holds
16:09 - onto them so i have and these games
16:11 - these audio files
16:13 - it's loading in and it's giving them a
16:15 - name this p hit one is the name i can
16:17 - refer to that later and it's going out
16:19 - to there and it's it's pulling this
16:21 - association in there um
16:23 - and once you've done that and in some
16:25 - games you might not have if you don't
16:26 - have sprites if you're just using like
16:28 - building graphics and moving things in
16:30 - fact you can get away with pong without
16:31 - preload if you don't i didn't hear any
16:33 - sound the sound
16:35 - might just might not be coming through
16:37 - um
16:38 - but if you don't have files to load then
16:39 - it doesn't matter
16:40 - the next part is that create section and
16:43 - that's just that's just the top portion
16:45 - of create but what i'm building there is
16:46 - the player
16:48 - and so i have a i've already got it out
16:50 - there but i'm assigning it
16:52 - some phaser stuff here so game is given
16:54 - to me up here it's the phaser game and
16:56 - game has a bunch of methods and calls
16:59 - and at the simple level when you're when
17:00 - you're doing things you're going to add
17:01 - something in my case i'm not using
17:04 - sprites which i'll show you sprites a
17:05 - little bit later but there's not like
17:06 - complex graphics i'm just going to build
17:08 - a paddle you saw the paddle it's a white
17:10 - rectangle so here's what i do i i tell
17:12 - it where i'm going to put it
17:14 - and these are so this is just the width
17:16 - and the height or the x and the y
17:18 - coordinates of the origin of that
17:20 - whatever i'm going to build next and i
17:22 - moved it 40 pixels in
17:25 - and then
17:26 - halfway up the screen minus i know i'm
17:28 - going to make it 60 pixels so i just cut
17:30 - it in half so it's starting right in the
17:32 - center of the screen on the left
17:35 - and then i'm going to do a little fill
17:37 - and that's a hex um
17:38 - uh
17:39 - color code that's just white
17:41 - and then the next the one there is the
17:43 - opacity level it's fully opaque i'm not
17:45 - doing any any alpha type stuff i'm going
17:47 - to draw a rectangle
17:49 - that starts at the origin i gave it and
17:51 - it's going to be 10 wide and 10 pixels
17:55 - wide and 60 pixels long or tall
17:58 - and then the other fun thing when you
17:59 - start working with phasers you have some
18:01 - physics models they actually give you
18:03 - three physics models
18:04 - um
18:05 - this is like like your question about
18:07 - which which uh framework or tool set to
18:09 - use this is kind of the same which
18:11 - physics model to use it depends on what
18:13 - you're trying to do i'm doing something
18:15 - very arcadey so i'm going to use their
18:16 - very simple lightweight arcade physics
18:18 - engine this is what they recommend to
18:20 - use if you're going to if you're going
18:21 - to throw it onto like a mobile app or
18:23 - something because it's not doing any
18:24 - heavy lifting uh super complex stuff but
18:28 - it gives you a lot of fun things you can
18:30 - do once i've enabled the physics that
18:32 - player has a body
18:35 - and it has things like this collide
18:36 - world bounds and it has you can you can
18:38 - start giving in velocity and
18:40 - acceleration and all that kind of stuff
18:47 - so that's a good question you can
18:50 - kind of
18:51 - test these well it's going to be in the
18:53 - browser but the problem is if you're
18:55 - developing this locally and you're just
18:56 - using it as a file system so if you go
18:58 - in here uh
19:02 - if i go in here and i say well i don't
19:03 - need why would i need a server to run
19:05 - this i'll show you why when we um if we
19:08 - just open
19:09 - i have to get in there all the way let
19:10 - me
19:16 - if i open index.html
19:21 - which doesn't apparently exist if i go
19:23 - one too far i did
19:28 - it's trying to load a file it's trying
19:30 - to load three files but i'm in the file
19:32 - system instead of http and so i get
19:36 - a lot of problems these aren't the
19:37 - problems i expected to get i expected to
19:39 - get a cross-origin problem because
19:42 - when the browser tries to play in the
19:43 - file system it gets very specific about
19:45 - what it can do it can't go get other
19:47 - files it's it's the browser is getting
19:49 - in the way here so that's why i run a
19:51 - lightweight note like express server to
19:53 - host it so i can go to localhost and i
19:55 - don't run into the crossovers and stuff
19:57 - um
19:58 - once you have that going somewhere
19:59 - though if you if i wasn't testing on the
20:01 - file system you wouldn't need a server
20:03 - at all you could stick it on on you were
20:04 - saying you were using ingenix
20:07 - you could stick it up there like a
20:08 - static asset and it would run just fine
20:11 - [Music]
20:18 - it should so i haven't actually done any
20:21 - like native or mobile testing at all but
20:23 - something like pong should definitely
20:25 - work the i don't know how complex you
20:27 - can get and like optimizing your code to
20:29 - make it run better on a mobile device is
20:31 - certainly its own its own like field of
20:34 - stuff um i would say that that's
20:36 - somewhere you could just start jump in
20:38 - and test it um if you have a workflow
20:40 - that includes you know deploying it to
20:42 - mobile somehow then i would go for it
20:44 - and and see what you can do for sure
20:47 - that's a great question though um and my
20:49 - answer is i don't know
20:50 - i test i just just work on the web right
20:53 - now and um so yeah
21:01 - so yeah this is uh
21:04 - this is the preload
21:06 - flow so this is the whole flow of
21:08 - loading an asset and using the asset
21:10 - just to show you how it works that's the
21:12 - preload function we saw it's loading in
21:14 - these three audio files and aliasing
21:16 - aliasing them to these um names
21:19 - and then in my create
21:22 - section i create some
21:24 - um i have these paddle hit one and
21:27 - paddle hit two and that's where i tag
21:28 - him in there say when when we have
21:30 - paddle hit one it's gonna be that audio
21:32 - and it's pre-loaded so it doesn't have
21:34 - to load it at that point it's just just
21:35 - making an association
21:37 - and then for pong
21:38 - what i have here is this is when it hit
21:40 - when the ball hits the top or the bottom
21:42 - of the screen
21:43 - it makes a certain noise and i have it i
21:45 - have wall hit and then it has because
21:47 - it's an audio a phaser audio
21:50 - it has that play method and it should
21:51 - play the sound and i think if this was
21:53 - all hooked up right you might actually
21:54 - hear the sound maybe i had my sound
21:56 - turned off we can i'll try it again
21:59 - but that's the flow like that's preload
22:01 - create and update
22:03 - one piece of code going through that
22:04 - whole the whole thing
22:07 - so
22:08 - those are actually i think update is
22:10 - probably the most important part of the
22:12 - of the program this is where everything
22:14 - happens it's where all your logic is
22:15 - going to live it's where everything is
22:17 - going to is going to
22:19 - do anything interesting everything else
22:21 - is just set up your preload is just
22:23 - building the assets and then your create
22:25 - is just saying okay put the player here
22:26 - or put this thing here get the ball
22:28 - moving here but once the game starts
22:30 - running
22:31 - if if you didn't have anything in update
22:32 - it would just
22:33 - run itself to exhaustion and nothing
22:35 - would happen so update is where all the
22:37 - fun begins
22:38 - here is a slice of update
22:41 - for pong itself
22:43 - um those top two
22:45 - are things that are given to me by the
22:46 - by the physics uh model
22:48 - called overlap
22:50 - and so when the first two things you
22:52 - pass into that are two separate objects
22:54 - or groups of objects
22:56 - in my case they're just objects i have a
22:57 - ball object and a player object
22:59 - and then the third thing is a callback
23:01 - or a function that will run when that
23:02 - happens
23:04 - and
23:05 - i'll talk about overlap a little bit
23:06 - more a little bit later but you can see
23:09 - so this when update is called every 60th
23:12 - of a second
23:14 - this runs just runs through and it says
23:16 - okay well is the ball body
23:18 - is the ball
23:20 - at the top of the screen or the bottom
23:21 - of the screen then do this
23:23 - ballbody.velocity.y times equals minus
23:25 - one just reflects the y
23:28 - velocity it just changes direction so
23:30 - it's going up now it's going down
23:32 - the ball also has an x velocity which
23:34 - isn't touched by that so you'll just get
23:35 - a pure reflection across that
23:38 - and then
23:39 - phaser also gives you these cursor keys
23:41 - that you can simply use it gives you
23:44 - four the four common cursor keys um and
23:47 - here i'm just checking if the cursor if
23:49 - the up cursor i know it's very confusing
23:51 - cursor's up is down if the up cursor is
23:54 - being held down or is being pressed down
23:55 - while this update is running
23:57 - then you're going to move the player
23:58 - body up i give them give them a velocity
24:01 - of negative 250 so it's in the y-axis
24:04 - negative is up and positive is down and
24:06 - the x-axis negative is negative to the
24:08 - left and positive to the right so
24:13 - yes yes
24:27 - yeah this is so update is a loop and i
24:30 - think that sometimes that throws people
24:32 - a little bit maybe especially people
24:34 - coming from outside of front end
24:35 - development there i don't know is there
24:37 - if you're if you're writing a game in
24:38 - like java or or c plus plus i think you
24:41 - do this thing where you create a fake
24:42 - loop and you say wow one so it just runs
24:45 - it's this infinite loop that runs um we
24:47 - don't have to do that in javascript
24:48 - because
24:49 - it's event based already there's already
24:52 - a loop going and we're just tacking into
24:54 - that this does feel kind of like a
24:56 - flipped version of front-end loop
24:58 - development like instead of adding an
24:59 - event listener and then and then calling
25:01 - it there that registers something on the
25:03 - event loop we're just
25:05 - we're writing the loop itself so we're
25:06 - checking everything in here um
25:09 - and this is
25:10 - i mean they're simple enough that i left
25:12 - them there but you could even abstract
25:14 - this out a little bit there are places
25:15 - where i'll show you some other
25:16 - abstraction i could just say if this is
25:18 - happening call a method somewhere else
25:21 - and it would do the same type of thing
25:23 - um
25:24 - but
25:25 - i just stuck it right in there so yeah
25:27 - this update is a loop this is your event
25:29 - loop and what you're doing is checking
25:31 - for everything that could happen in that
25:32 - event
25:38 - if i put if i put like this piece of
25:40 - code somewhere else outside of update
25:42 - yeah it wouldn't um unless you called it
25:45 - from update somehow it wouldn't uh so
25:48 - you could abstract the whole whole class
25:50 - of this you could abstract out and say
25:51 - run this thing where you check all the
25:53 - cursor keys
25:55 - yeah yeah you need to at some point you
25:57 - need to initiate that in update that's
25:59 - kind of like it's kind of like ad event
26:00 - listener is right here instead of
26:03 - instead of on the thing that you're
26:04 - doing you're adding an event listener
26:06 - here you're saying
26:07 - you're going to get events so look for
26:09 - them
26:10 - yeah
26:11 - so that's the that's the update loop and
26:14 - it can get obviously it can get pretty
26:15 - complicated update is where
26:17 - almost all of your code is going to live
26:20 - depending on how
26:21 - crazy your game is or what you're doing
26:23 - you know you're going to want to somehow
26:25 - modularize that or abstract it out a
26:27 - little bit so it's easier to read the
26:28 - update loop you might have your code
26:30 - somewhere else so
26:33 - that's what i did with with overlap
26:35 - actually
26:36 - my function reflect lives outside of the
26:38 - update loop it's written under the
26:40 - update loop it's still part of the game
26:42 - it's still part of the phaser object um
26:44 - but it's its own function
26:46 - so i have like i have preload create
26:50 - update and then somewhere else i have
26:51 - reflect
26:53 - and so that's where that's what that's
26:55 - calling here is it's saying oh there's a
26:56 - function called reflect let me go get
26:58 - that and reflect
27:00 - when you call overlap it actually passes
27:02 - in as the first two parameters the first
27:04 - two things that you gave it so a ball
27:06 - and a player a ball and a computer
27:08 - player and i chose to call that player
27:10 - an actor because it can be either way
27:12 - this it's doing the same thing in this
27:14 - case it's doing the same thing no matter
27:15 - who it hits so i didn't need to write
27:17 - one for the player one for the computer
27:19 - player although at the very bottom i
27:21 - started to check because i thought you
27:22 - might maybe i'd play a different sound
27:24 - when the computer player hits it or
27:25 - maybe i would do something differently
27:27 - keep track of something
27:28 - but this is what happens is
27:31 - and this is all just code so the paddle
27:34 - is 60 pixels wide and the scent i wanted
27:37 - to i wanted to make it a kind of dynamic
27:39 - paddle so if you hit it um you know on
27:41 - one of the top or the bottom closer to
27:42 - the edges it gives it more velocity more
27:45 - up and down velocity so you can kind of
27:48 - affect how fast the ball is moving and
27:49 - try and
27:51 - get it moving fast enough that the
27:52 - computer player can't keep up with it
27:54 - so this is an example of pulling that
27:56 - code out
27:58 - because you could in theory
27:59 - if you write any javascript instead of
28:01 - writing reflect in there i could have
28:02 - just written a function right there in
28:04 - the in the overlap parameter set i could
28:06 - have just stuck a function in there and
28:08 - it would have looked really
28:09 - horrible and hard to read but this would
28:11 - have all been in there
28:13 - this way i can actually
28:14 - abstract it out and then reuse it
28:17 - in either case
28:19 - but that's a that's a simple a simple
28:21 - version of that
28:23 - but
28:31 - i think before we get to this maybe are
28:33 - there any questions about the update
28:34 - loop or about
28:36 - how any of that works so far i'm going
28:38 - to show more examples and talk about
28:40 - some more code
28:44 - it's it's it it's really dependent on
28:47 - the game itself but it should be close
28:49 - to 60 frames a second and there are ways
28:51 - to
28:52 - frame lock and to do some other things
28:54 - like to check see how that's progressing
28:56 - if it gets i mean i think running this
28:59 - and running all this stuff i think it
29:00 - was having a little trouble just keeping
29:01 - up the game the browser itself my
29:03 - computer um
29:05 - but
29:06 - you can generally count on being 60
29:08 - frames a second
29:12 - so yeah these are some of the the
29:13 - utilities mine at the top there is the
29:15 - phaser template that i use to start a
29:17 - phaser game it comes with um
29:19 - probably more stuff than you need to
29:21 - just get started but some stuff that i
29:22 - found helpful
29:23 - some gulp stuff
29:25 - and some browserify stuff
29:28 - and some testing stuff but um mainly
29:31 - what it comes with is that index file
29:32 - that's already set up to go and that
29:34 - blank phaser template and you just start
29:37 - writing code that way i have to keep
29:39 - doing it over and over again you can
29:40 - just get clone this as whatever you want
29:43 - and um and start going these are a
29:45 - couple of tools i use
29:47 - pixlr is an online image editor it's
29:49 - great it's really simple if you don't if
29:51 - you already have something like
29:52 - photoshop or for something
29:53 - installed you can use those
29:55 - i don't have those installed so whenever
29:56 - i need to like manipulate an image i
29:57 - just fire pixel.com and uh it'll pull
30:00 - images from a url or from the computer
30:03 - and and it's pretty robust although
30:05 - there are some things it's lacking uh
30:07 - piskel is an app that you can either i
30:10 - think you can run on the website but you
30:11 - can also install and it's a sprite
30:13 - creation tool so when you start doing
30:15 - animation you might want sprite
30:16 - animation it's a great free tool and
30:19 - bfxr
30:20 - is a weird name sound effects uh tool
30:24 - it's very simple to use and if you don't
30:26 - want to like have to worry about finding
30:27 - sound files or whatever it's it's cool
30:30 - you just kind of go in and say oh it has
30:31 - like explosion and it gives you a
30:32 - different kind of explosion
30:35 - and you can very easily save those files
30:37 - off and include them in your game just
30:38 - to give it a little bit more depth as
30:40 - you're unless you don't care if you
30:41 - don't care you don't need any of these
30:43 - you definitely don't need any of this up
30:44 - here to write phaser to program phaser
30:46 - games but i think they're nice
30:48 - so um
30:50 - this is a spot where we can talk about
30:53 - the tools that i use the tool chain if
30:55 - that's exciting to anybody we can i can
30:57 - show you some more code first or we can
30:59 - just talk about this are any of you are
31:01 - you guys familiar with any of these or
31:03 - any of these like weird familiar with it
31:07 - all right so express is um a server
31:10 - framework for node it just makes it a
31:13 - little bit easier to to get something
31:15 - flying um quickly and and i think i
31:18 - showed well i will show you now my um my
31:21 - express server for the game is very
31:23 - very simple
31:25 - it's 11 lines it's actually seven lines
31:27 - of real code
31:28 - um
31:29 - and all like i said all that does is get
31:31 - me off of the file system and get me to
31:32 - the local host so i can be on http and
31:35 - not have to run into cross origin stuff
31:37 - um and if you've ever
31:39 - worked with node or with express this
31:41 - might be familiar and if not it's pretty
31:43 - quick to explain
31:45 - express library you have to install with
31:48 - npm this is my you know my package it's
31:51 - my only dependency at this point because
31:53 - this is a different
31:54 - the other ones have more dependencies
31:56 - but um so you require express you
31:58 - require http um
32:01 - i'm actually sure
32:03 - yeah that's why because i use it to
32:04 - create server you can do this a little
32:06 - simpler but this is a still pretty
32:07 - simple
32:08 - make const app equals express that's the
32:11 - thing this express.static public is the
32:14 - only
32:15 - extraneous library code left in express
32:17 - these days express used to be very bulky
32:20 - it used to have all this stuff built in
32:22 - now if you want more things you have to
32:24 - you have to go out and get them but
32:25 - public or static is left and all that
32:27 - does is instead of having to write um
32:30 - endpoints or handlers for like when
32:32 - somebody comes to my website
32:35 - serve them this file serve them the
32:36 - index file static says look i have a
32:39 - folder somewhere in this case called
32:41 - public and in public you will find an
32:43 - index.html and anything else in public
32:46 - if index.html asks for it just give it
32:48 - to them so in the index.html you'll see
32:51 - i have
32:52 - this js bundle which is inside my public
32:56 - folder so
32:58 - when it hits the express server and it
33:00 - finds that path it just you don't have
33:01 - to write specific stuff for it
33:04 - you don't even have to understand how
33:05 - this express server works to use it
33:07 - um
33:08 - this is the only piece you'll probably
33:09 - want to know is what port it's on
33:11 - in this case it's 8002 because i'm
33:13 - running i have several games and i kept
33:15 - like i'd fire up node and it would say
33:18 - oh that port's in use and i think oh
33:19 - which what did i leave running so i
33:22 - started separating them so i can do that
33:23 - but you can put that on any port you
33:24 - want
33:25 - um and then when you go to the
33:28 - browser you just do localhost call in
33:31 - that port and that'll be the the server
33:33 - that's running there so that's the only
33:34 - piece of express code in there um
33:42 - yes yes yeah and it could be called
33:44 - anything you want public is a is kind of
33:46 - idiomatic it's the one that people use
33:48 - and in in i'll show you because as i was
33:51 - doing this i started evolving my process
33:53 - i actually started bundling um in a
33:56 - build folder instead of public so
34:02 - no i well it depends if you wanted them
34:04 - on the same webpage itself then you
34:06 - might you would have them in there
34:08 - somewhere
34:09 - for each project i have its own folder
34:11 - its own like top level folder
34:16 - yeah they all have their own yeah so
34:18 - like i'm in i'm in this pong folder uh
34:21 - you know in asteroids it's in an
34:23 - asteroids folder so they're each their
34:24 - own if you wanted to work on multiple
34:26 - games in just one server one index file
34:27 - you could you could certainly do it um i
34:29 - just separated them out to keep it easy
34:31 - to think about i guess
34:34 - so yeah that that was the express we
34:37 - also had
34:39 - so gulp is a is a build tool yes sir
34:53 - no so for if you're running as a server
34:55 - you would you would use either you have
34:57 - node or we were talking about too
34:59 - there's a there's a
35:01 - thing called nodemon which which is a
35:03 - kind of resilient node server so you
35:05 - just type node and then the the server
35:07 - name or the the file that express file's
35:10 - name i call them server.js by convention
35:11 - but so it would be node space server.js
35:14 - and that'll run that as its own little
35:16 - thing or nodemon or whatever
35:20 - node you'll need node on your computer
35:25 - you have to install it depending on what
35:26 - system you have i used brew i think to
35:28 - install in fact i use something called
35:30 - nvm which is the node version manager
35:32 - absolutely not necessary but pretty
35:35 - handy because if you start moving
35:37 - through versions
35:38 - i think node's on version 7 right now
35:40 - but some stuff still wants to live on
35:42 - version 6
35:43 - so
35:44 - if you want to take advantage of like
35:45 - some cutting edge stuff you might want
35:47 - to work some things in note 7 you might
35:49 - go all the way back to like node 0.10
35:51 - for whatever reason to work on something
35:54 - nvm is a great tool but yeah you'll
35:56 - you'll need to install node
36:02 - yeah it should run at the command line
36:03 - if it doesn't you'll need to get into
36:05 - your um like your whatever your terminal
36:09 - node
36:09 - yeah nodemon's a quick install npm uh
36:12 - install nodemon i install it globally so
36:14 - i can use it everywhere you can install
36:16 - it locally as well nodemon is a great
36:18 - tool uh
36:19 - so
36:20 - yeah so that's node express and that
36:22 - gets you out of the file system so that
36:24 - you can you can actually like play with
36:26 - this stuff locally and not have to be
36:27 - like oh i'm going to push this up and
36:28 - host it somewhere and then work on it
36:31 - and then so gulp is a tool a build tool
36:34 - that is used
36:36 - to
36:38 - i use it as a watcher mostly for my
36:40 - tests yes sir
36:45 - yeah i never learned grunt
36:47 - so that's why and then another question
36:49 - is why go up instead of webpack maybe
36:51 - webpack is the new the new thing um
36:54 - i think gulp is very simple i'll also in
36:56 - fact i'll show you my gulp file
37:02 - i have it i'll show you what i do with
37:03 - it because um i feel like asteroids is
37:06 - probably the newest one
37:08 - so my i all i use gold for to be honest
37:11 - with you is my running my tests
37:13 - and so this is a let me include this
37:15 - this is a gulp file
37:17 - um
37:19 - for for mocha tests and that's the only
37:21 - thing i use it for you there is a goal
37:23 - plug-in for browserify and i'll talk
37:24 - about why i use browserify in just a
37:26 - second too and that would probably be a
37:28 - smarter thing to do is get go up
37:29 - watching all of those and just doing it
37:31 - all the same time but i didn't i didn't
37:33 - like the setup on that plug-in so i just
37:35 - used something called watcherify which
37:37 - takes browserify and turns it into a
37:39 - watcher
37:40 - but this is gold so with golf you just
37:42 - define tasks and you will usually want a
37:44 - default task and your default task will
37:46 - run any other tasks you want to run
37:48 - whatever and the only real task i have
37:50 - is a moca task
37:51 - that pipes my code
37:54 - my specific test code through a through
37:56 - a mocha test runner
37:58 - and if you're not familiar with unit
38:00 - testing or don't care about unit testing
38:02 - it's not that important um
38:04 - i think that unit testing and test
38:05 - driven development is an incredibly
38:08 - great way to to develop because i think
38:10 - it prevents you from screwing stuff up
38:12 - too badly it helps you think about how
38:14 - you're going to build your code if
38:15 - you're using it as a test driven
38:17 - write your tests and as you're writing
38:19 - your tests you're actually building your
38:20 - logic you're building it that way
38:22 - instead of like getting really messy and
38:24 - building all your logic and then and
38:25 - then thinking about how to test it
38:26 - you're thinking like what do i want this
38:28 - one thing to do this one thing what's
38:30 - the one thing i want it to do okay now
38:32 - i'm going to write that code that does
38:33 - that and so this is just a simple way to
38:35 - get into tests i actually think this is
38:37 - another reason why you should write
38:39 - games because they're simple they're
38:41 - simple enough that you can write unit
38:43 - tests for them without worrying about
38:44 - like is this a unit is this like do i
38:47 - have time to do this if you're writing
38:49 - production code if you're coming into
38:51 - something maybe you're an existing code
38:52 - base and
38:54 - you might not have time to think about
38:55 - how to break that down into test driven
38:57 - stuff nobody may even want you to do it
38:59 - and so
39:00 - i do think it's important and i'm using
39:02 - games to teach me to be a better
39:04 - test-driven developer
39:06 - um
39:07 - but that's gulp in a nutshell and i can
39:09 - show you what that looks like
39:11 - um i'm gonna just run the mocha one
39:13 - because
39:14 - it will run but this is it i have some
39:16 - tests to do some things
39:18 - and the tests passed that's not exactly
39:20 - what i wanted to do
39:23 - so that's what happens when you run a
39:24 - mocha test
39:26 - it tells you did it work and so now what
39:28 - happens is if i go into that code and i
39:30 - change something and i save that file
39:32 - the test run again and it breaks i know
39:34 - right now man the last somewhere in the
39:36 - last 15 characters that i typed in there
39:38 - i broke my code it's not like a week
39:41 - from now or even an hour from now when i
39:43 - go
39:44 - fire up the browser and play the game
39:46 - and it's like why isn't when i turn left
39:48 - why is it turning right what did i do
39:50 - and then i have to go back and
39:51 - figure out what i screwed up this tells
39:53 - me right away that's one of the benefits
39:55 - of testing is it tells you immediately
39:59 - but that's gulp
40:00 - so browse verify
40:03 - in in node you have this concept up here
40:05 - you see the top this require is a node
40:08 - verb and it allows you to go get code
40:11 - from somewhere else and stick it in here
40:12 - like act like it actually exists even
40:14 - though it doesn't exist in this file it
40:16 - goes and gets it if you do this on
40:18 - browser facing code your browser will
40:20 - say i have no idea what require is i
40:23 - don't know what you're talking about and
40:25 - because i don't know what requires i
40:26 - have no idea what all these other files
40:27 - you're trying to use are although i
40:28 - don't think it'll get that far i think
40:29 - as soon as it hits require it'll just
40:31 - stop
40:33 - um
40:34 - there are
40:35 - lots of ways to modularize your code one
40:38 - of them involves just writing a bunch of
40:40 - script files script tags and saying well
40:43 - i know in the end i'm going to write my
40:45 - app.js but before that i have a module
40:47 - called math.js and another one called
40:50 - ship physics.js so you just start
40:52 - putting those in there that's okay that
40:54 - works but i think it's a lot easier to
40:56 - use browserify
40:59 - and i actually ended up writing it as a
41:01 - script
41:02 - so this is the piece of code right here
41:04 - and you install browserify either
41:07 - locally or globally again
41:09 - or both
41:10 - and then i'm telling it
41:12 - when the files in this
41:13 - first directory change
41:16 - output that bundle it up and output it
41:19 - into something i'm calling bundle.js and
41:20 - what that does is anytime it hits one of
41:21 - those requires it goes and finds that
41:23 - code and it sticks it in the bundle so
41:25 - there's no requires in my bundle there's
41:28 - just all my code
41:29 - and all that allows me to do is separate
41:31 - out things like
41:32 - you know i have my app
41:35 - and i also might have some utility files
41:37 - and the more the more code you can pull
41:39 - out of your app i think the easier it is
41:42 - to read your app
41:43 - because if your app file gets to be 15
41:45 - 000 lines long and you need to go dig in
41:46 - there and find something where do you go
41:50 - but if you know that it's in this like
41:51 - 100 line bundle somewhere well this 100
41:54 - line
41:55 - file somewhere that specifically has to
41:57 - do with turning the ship right
41:59 - then you can easily step through your
42:01 - code dig through your code and i think
42:03 - it keeps you more organized
42:05 - i i like i think i mean a lot of people
42:08 - i've heard
42:10 - your function shouldn't be more than a
42:11 - screen long i don't think your files
42:12 - should be much longer than that if you
42:14 - can avoid it in some cases you can't
42:16 - they shouldn't they shouldn't get so
42:18 - long that you have to scroll forever
42:20 - to find stuff and so
42:23 - you can you can start you can start
42:25 - pulling your code out putting it into
42:27 - separate files and then requiring it
42:28 - back in so that it you can you can use
42:31 - it in a very clean and concise way
42:33 - and like i said none of these things are
42:35 - required to do
42:36 - phasor code these are just code
42:38 - practices
42:56 - yeah i mean it all depends on how you
42:58 - pull it in and like what you're building
43:00 - as your as your um
43:03 - um
43:04 - utility so in this case i
43:06 - wrote this as a you were talking about
43:08 - patterns earlier this is a revealing
43:10 - module pattern so i have some stuff
43:12 - inside and this is i'm sorry if this is
43:14 - confusing this is es6 fat arrow notation
43:17 - um
43:19 - so it might read a little different than
43:21 - you might be used to if you're using
43:22 - something like this might
43:25 - more easily be called like function
43:27 - rotation correction
43:28 - and then have a parent
43:30 - for your parameters and then your
43:32 - brackets but that's the same essentially
43:34 - the same thing
43:36 - but you'll see i have rotation
43:37 - correction and degrees to radians and
43:39 - get heading in radians but all i export
43:42 - is get heading in radians so that keeps
43:45 - that keeps
43:46 - everything else hidden they're like
43:48 - private members of the java c plus plus
43:50 - guys in here those are private methods
43:53 - and getting into radians is like the
43:54 - only the only piece that i exposed
44:01 - now i i haven't looked at the code all
44:04 - the way down i it's not being exposed
44:07 - you couldn't call if you require this
44:09 - module in you couldn't say like let's
44:11 - just say we call the module utility
44:13 - you could the only thing you could say
44:14 - is utility dot get heading in radian
44:17 - and you would pass it um
44:19 - you would pass it an angle basically
44:22 - if you said utilities dot degrees to
44:25 - radians they would just say i don't know
44:26 - what you're talking about i don't have
44:28 - this would say that function does not
44:29 - exist
44:30 - yeah
44:31 - that's a way to keep it clean i'm not
44:32 - sure
44:33 - to be honest with you i'm not sure as
44:35 - far as scope goes or what
44:37 - if if there's um
44:39 - any upsides or downsides to that
44:42 - but we're also game developing so
44:44 - scope is a little bit hazy at this point
44:45 - anyways there's a lot of stuff already
44:47 - you know gonna be in your scope but that
44:49 - i guess the nice thing too is you can
44:50 - you can choose
44:52 - you're kind of name spacing it in a way
44:53 - but i'm calling it heading in radians so
44:56 - it's stuck in that
44:57 - now the funny thing about that
44:59 - code there is i actually figured out i
45:01 - didn't need to do that at all i found
45:03 - another way to do it
45:04 - but
45:06 - so i don't think it's actually been
45:06 - recalled in that code anywhere or else i
45:08 - would show it to you
45:10 - but that's just the other reason to pull
45:12 - those out into files to export things is
45:15 - if you're doing unit tests you need to
45:16 - be able to require those tests in your
45:18 - unit test so
45:20 - so like right here
45:22 - i have to require it in i have to pull
45:24 - it in so that i can call it and if you
45:26 - just bundle all that code into the main
45:28 - app then it can get kind of tricky to
45:30 - pull out like what exports you want so
45:32 - one of the reasons i pull code out into
45:34 - smaller pieces is so i can test it in
45:36 - smaller pieces
45:38 - but once again if you're if testing
45:39 - isn't important to you or something
45:40 - you're comfortable with it's not
45:42 - important it's not it's not important to
45:44 - game development in and of itself this
45:46 - is just kind of an aside these are
45:48 - things that i think are great to learn
45:50 - and i think game doing it in a field of
45:52 - game development makes it a little
45:53 - easier and more
45:59 - just fun things
46:04 - i think this is what
46:06 - what i take away from writing game code
46:10 - is that you're going to make mistakes
46:11 - whenever you write code you're going to
46:12 - make mistakes big mistakes small
46:14 - mistakes i wrote just in the three or
46:16 - four games that i wrote in the last few
46:18 - weeks i made a ton of mistakes and then
46:20 - i would come back and refactor them out
46:21 - or find them later
46:23 - but the good thing is you learn if you
46:24 - don't learn from the mistake itself you
46:26 - might learn from having written code you
46:27 - didn't need to write like all of that
46:30 - that angle correction stuff i didn't
46:31 - need it turns out i didn't need to write
46:32 - it but i wrote it i learned how to do it
46:34 - and now i understand trigonometry a
46:36 - little better than i did before which
46:38 - was fun because i thought i understood
46:40 - it pretty well and i spent about 45
46:41 - minutes thinking i knew what i was doing
46:43 - and it turns out
46:44 - it's been way too long since i had a
46:45 - trig class
46:48 - i think personal projects are a much
46:49 - better place to make mistakes than at
46:51 - work
46:52 - or or even
46:53 - for other people work um or in front of
46:56 - other people i think it's great if you
46:58 - can if you can learn from your mistakes
47:00 - in the privacy of your own ide um
47:03 - i think that makes
47:06 - just it's just a little easier and then
47:07 - you're not pissing off your boss or your
47:09 - clients or anybody else
47:11 - so it's a great outlet for making
47:13 - mistakes you can you can think like when
47:15 - you've done it i got my quota of
47:16 - mistakes for this week
47:18 - the more you write
47:20 - especially small projects there's going
47:22 - to be a lot of repetitive stuff that
47:24 - you're doing over and over again and so
47:26 - you're going to want to find this is
47:27 - something i think is important for every
47:29 - programmer is
47:30 - because i think generally programmers
47:32 - are very like immune to this pain they
47:33 - will do it over and over again they will
47:35 - type it out because it's worked it's
47:37 - always what they've done i think what
47:38 - you should do instead is find a way to
47:40 - not have to do that if you've done
47:41 - something twice
47:43 - figure out a way that the next time you
47:44 - won't have to do it you should never
47:46 - have to do it a third time that's why i
47:47 - made the phaser template because i was
47:49 - writing this code and i thought
47:50 - this is too much and then sometimes as
47:52 - it evolved i'd have to go back and think
47:54 - wait what did i do did i do that right
47:56 - or how did i do this now it's locked in
47:58 - somewhere and i can just bring that code
48:00 - down and start writing i don't have to
48:02 - think about the setup and the spool up
48:04 - and all this stuff that goes into like
48:06 - getting things ready that's done so
48:08 - that's great
48:09 - there are other things that you'll find
48:10 - that you might be doing a lot in your
48:12 - games you might be writing this maybe
48:14 - you're writing some similar games or
48:15 - maybe they're not even that similar but
48:16 - you're gonna find that there may be code
48:18 - that you write over and over again maybe
48:21 - it's subtle variations but code that
48:22 - you're using over and over again because
48:24 - it's a very base level piece of code
48:26 - man you should write that and you should
48:28 - bundle it up somewhere and you should
48:29 - put it somewhere that you can say i
48:31 - don't have to write that anymore i can
48:33 - if you want you can copy and paste it or
48:35 - i can just somehow
48:36 - require it in you can just pull it in
48:38 - it's now you're building your own
48:39 - library of functions and code and things
48:41 - that you're comfortable with
48:42 - i think that's great
48:44 - and that ties in with the last one where
48:46 - you're gonna see you're gonna know if
48:48 - you're writing
48:49 - games that only take a couple of days to
48:51 - go through and you're doing that three
48:53 - or four times a week or
48:54 - a month or whatever you're going to see
48:56 - those things are very frequent and are
48:58 - happening very often whereas if you're
49:00 - writing um when i was working on react
49:04 - this was in you know september the first
49:05 - two weeks of september last year is when
49:07 - i started this react project
49:09 - and i didn't have to start another react
49:11 - project until last month and it was like
49:13 - i had never done it before i had no idea
49:16 - what i was doing it was like wow i was
49:18 - looking at my startup why did i do
49:20 - things this way and do i need to do them
49:22 - this way and so
49:24 - that's when you have these long cycles
49:26 - it's hard to find those those things and
49:28 - encapsulate them and document them
49:31 - somehow you just think well i'm doing it
49:32 - and i'll do it and then the next time
49:34 - i'll remember but you won't you won't um
49:36 - and so if you're doing that
49:38 - a couple times a week or a few times a
49:40 - month you're gonna you're gonna get sick
49:42 - of it a lot quicker than if you're only
49:43 - doing it twice a year and you're going
49:45 - to figure out ways
49:46 - to make your code reusable i think
49:49 - that's a great that's a great thing
49:51 - those are important parts of being a
49:53 - programmer is reusable code
49:56 - and the more you do that
49:57 - especially as you start to think like
49:59 - well this works pretty much the same way
50:01 - but not exactly and then i'm using it a
50:03 - third time and it's slightly different
50:04 - you're going to figure out how to
50:05 - distill that
50:06 - that essential function down into a
50:09 - smaller piece of code that is extensible
50:11 - in some way um and that this is where
50:13 - i'm going to say like raw raw functional
50:15 - programming is is great if you can do
50:17 - that and you can start to compose your
50:18 - software you're going to find it's going
50:20 - to be a lot easier to do that stuff
50:22 - distill it down into small pieces that
50:23 - you can chain together and then when you
50:25 - need to chain it together in a different
50:26 - way you just take this piece out and put
50:27 - this other piece in and it works just
50:29 - how you want it to you don't have to
50:30 - reinvent the wheel every time you do it
50:32 - so
50:33 - um i think those are the those are the
50:34 - big things
50:36 - this is my
50:37 - inspirational
50:38 - quote the critical ingredient is getting
50:41 - off your butt and doing something it's
50:42 - as simple as that
50:43 - i don't know how many of you know who
50:44 - nolan bushnell is he is the co-founder
50:47 - of chuck e cheese
50:49 - he also started atari and wrote pong the
50:51 - first time so that's why it's up here
50:53 - but he did ko found chucky cheese um
50:56 - i think it's a great quote that's that's
50:58 - the truth do it and by doing it you're
51:00 - gonna learn to do it better or you're
51:02 - gonna learn you don't like to do it
51:03 - you'll move on to something else but if
51:04 - you just think about it i think we all
51:06 - do this i know i do this i think about
51:07 - wanting to do it wanting to learn
51:09 - something wanting to build something but
51:11 - i talk about thinking about it instead
51:13 - of doing it and then it doesn't get done
51:15 - let's do it
51:18 - um yeah
51:20 - so that's it
51:22 - this is me these are ways you can touch
51:24 - with me
51:25 - uh you can like go through my github if
51:27 - you want to see some examples of
51:29 - interesting code or not interesting code
51:31 - the phaser templates on there
51:33 - and
51:34 - that's my email address so yeah any
51:37 - questions or anything i didn't cover
51:39 - that you hoped i would cover
51:41 - we can look at more code running
51:43 - examples i don't know what time we're at
51:49 - skip uh
51:56 - [Music]

Cleaned transcript:

all right we're all good thank you so much for coming and let's give a round of applause for sean thank you just so i can write down if you guys have any questions and i don't have an answer i want to be able to get back to you so um that could happen too and um i want this to be kind of informal if you have a question feel free to just interrupt me and shout it out or raise your hand or however you feel comfortable doing that and i'll see if i'm moving too fast or if i go past something you want to see how that worked um i'm willing to to go back and do it so hi i'm sean hornsby um this is an intro to web game development class class meetup talk presentation let's go there um who am i well i i've been talking to you guys and so a lot of you probably already know this i have only been doing this just under a year professionally um i went to a boot camp in orange county and got a job right after that working on uh developing a web app using the mirn stack so it's a express react and node and that's been fun it was a contract gig that sort of a startup that didn't get funding and we're still kind of trickling through there so i'm doing parttime work there um i am a hobbyist game developer that's that's who i am it's interesting in this context i also have uh four kids between the ages of three and seven so um i just that's just to let you know like you guys can do this i have a parttime job i have four kids and i'm still learning this stuff and and doing it and uh and i still have the brain power to do it which is actually pretty amazing i know if any of you have kids one or two or four you know what i mean it's pretty pretty nuts so we'll do a little overview of what to expect here the stuff we talked about this is the program interview we'll talk about why you would want to design games why you would want to spend time building games maybe time that you think if i'm a real developer this is this could be more productive learning redux or learning angular 4 or something else um so we'll cover that i chose inside the game development there's a there's a framework called phaser why did i choose phaser we'll talk about that and then how it all works and some of the uh accessories to that and at the end uh however much time we have left we'll do some q a so why should you spend time writing games or thinking about games well i think i laid it out here pretty well most of it is about fun it's fun to do these things it's fun to think about it i'm sure that we've all played games probably we all play games occasionally or more than occasionally we think about games when we're playing them and i could have done if this thing was different or i could design this game you know or i could have done something like that um that's that's a great piece of engagement you're engaged in writing your code uh if any of you have written like professional code working on business logic stuff it can get pretty taxing mentally it's not a lot of fun normally to think about like oh did i do this you know do these products filter into the right thing and get get treated and it's it's taxing but it's not always very exciting so um having some fun is a great way to keep from burning out too like it gives you even if you're just doing it occasionally it gives you some time to to destress and to think about writing code in a way that doesn't have to do with whatever your boss is telling you to do and and uh maybe six other people filtering down their demands too um and that the point i think on here that is is very important is that you're going to finish projects because they're fun to do and finishing projects is good for you emotionally mentally to have this finished thing it's also good for you professionally because it's something you can show other people um and you can and you will you will solve problems while you're writing games that other people will need to solve too and then you may end up blogging about it or speaking about it and people will start coming to you for answers in that way and that's that's a very rewarding thing also so when you're writing games in javascript there are probably three main ways you can go you can work from the ground up you can dig up the webgl specs or the for the canvas specs and you can write right there on the metal you can build your games it's it's doable it's maybe not as fun as it could be because there's a lot of grunt work there the other end of the spectrum is these fully built realized tool sets something like unity uh even game creator uh cocos 2d these are tool sets where you load them up they fire up they look like photoshop or some kind of program and you build your code you build your pieces in there you move your stuff around you do get to write some code but mostly there's a lot of overhead and learning the tool set and those are they're actually very powerful unity is an incredibly powerful tool set people build professional level games with those tool sets and that's a great thing but there is some ramp up if you just want to start writing and for me i like writing javascript so i want to write javascript i look for more of the framework in phaser is a framework so you end up it's it's easy to use you require it in or you actually stick it in as a script in your index uh file and then you can just start writing code you have a javascript file that you just start building in there's a ton of community support there's actually maybe too much community support at some point they decided they were going to hand it over to the community and so now there's the community edition and that's that's what i use uh it's the latest the documentation is a little messy but there's so much extra support around there that it doesn't matter that much you can find your way and then drill through the documentation kind of you learn what to look for and then you go look for in the docs there is on there on their site they have this all these tutorials about specific features of phaser that are great and there's even a couple of other sites that drill in even further and that's the uh so that the phaser ce the github is the library or the framework and then the docs are there too and these slides will be available later too so if you see something and you didn't get a chance to write it down or you don't feel like writing right now there's not a problem with that and i'm on slack so any questions i'll answer there too so now you've thought about why oh yeah sorry i think some of it is personal preference some of it is what you're trying to get out of it are you trying to write a unity if you were looking for a 3d like a wonderful 3d game even if it was like 3d isometric or something unity probably a better place to look than phaser phaser and where i've mainly focused is on twodimensional games uh so you so if you're look it's really based on what you need out of it if you're looking to build something that you want to take to market and then maybe unity is a good place to start although phaser games are uh are are selling they're on native devices they're on the web so uh it comes down to your preference really you're gonna end up with a lot of the same results depending on how much work you put into it um i think some of those tool sets like unity do a lot of the heavy lifting but there is a learning curve to learning the tool so um i just chose phaser because it's quick it's easy to use i don't have to worry about like even learning how to use unity or teaching you how to use unity you can literally get phaser games going in like 10 minutes probably even less if you if you have any experience with uh frontend development at all so so that's any other questions about that so we got why would you build games and what would you use to build them now what are you going to build so if you're right now you're sitting there thinking i got a game idea it's going to be great it probably looks something like this it's this huge maybe it doesn't even feel that complicated but i guarantee you it is a complicated piece of machinery that you're thinking about building so i need you to scale it down i want you to think smaller now you're thinking smaller that's a lot smaller but a lot smaller that's still too complicated for your first game especially but for engine and just learning how to do this stuff there are too many moving parts and i'm not actually sure why that xwing has two pilots and two astromech units um so that's a little weird too but this is still too complicated uh you need to think simple that i think is obviously a millennium falcon but it is also obviously very simple it's probably 12 pieces there that's great that's where you want to start on your first game your first project you're learning phaser you're going to learn how to build a game if you get in over your head it's gonna leave a bad taste in your mouth you're gonna you're gonna get halfway through something and you're gonna get bogged down and you're gonna throw it all away and say i don't even want to do this again this is this is dumb um i'm dumb forget it i'm going to go back to whatever something else writing business logic even that might be more fun so then the nice thing too i mean i think depending on how old you are the games that you played as a kid are probably way different than the games i played as a kid who had like an atari 2600 or yeah nobody so so you so so there is this what i like about it is there's this big library of games that are already built and when you talk about like atari games they're already simple maybe your first game was halo 2 um that's that's in the capital ship category you're not going to build even a clone or some version of halo 2. i grew up playing things like like pitfall and uh donkey kong and so those games are are reachable that's something you can do and i think if you look in that era of games you're going to find a lot of a lot of those already built that already have kind of they have the ui ux already to design players know how to how to do those things somebody thought about how to make that game accessible to people how what affordances are what what makes sense you don't have to worry about the game design you don't have to worry about any of that stuff you can just focus on writing the game that's already been designed and that's i think that's a great place to start i started with pong i feel like that it's a very simple game it's still literally some moving parts in there this is some stuff to do but it's it's simple enough to to get through and so let me break out of this now and i'll actually i'll actually fire up pong here there we go i should figure out what port i put that server on to 8002 all right so that's it this is pong and i'm on the left and the computer is slowly trying to catch up on the right um it means there's a lot running so it kind of bogs down a little bit this is pong and i think if you've ever seen pong it's a pretty good representation of it there are still choices you can make when you're designing this game uh so there we go we'll pause it we'll get back to the presentation a little bit but that's pong pong works um and and i'll show you how that was built um first though i'm going to cover a little bit of just the basics this is a basic phaser game right here this is all the code yes sir yeah i use uh vs code i've used adam as well i like them both i like vs code although this is probably an outdated opinion vs code has a builtin node debugger that i don't think atom does and at the time when i was using atom it didn't i like vs code has a builtin terminal also so i don't have to switch back and forth a lot i can just pop the terminal open um sublime is another popular choice it's it's not free but it is free i think they suggest you pay 80 bucks for it but you can use it forever without doing that um who is the webstorm is a great ide but it is it's an ide something like vs code or adam are our code editors they're lightweight they're they're very low feature simple to use if you if you're coming from something like like visual studio itself you might be more comfortable in like a webstorm has a lot of features but yeah i'd stick with vs code or adam so once you get your index set up and i'll i'll show you that too this is this is all that's required to start a phaser game you have const game equals new phaser game and then you have a width and a height for the window that you're going to build phaser auto just lets it select between if webgl if if webgl support is there it'll use webgl if not it'll drop down to canvas and then i use phaser as my div name that's where it inserts it into the into the web page if you don't um add anything there or on the web page it just pushes it into the body of the page which is okay at this level because there's not like a lot of other code going on my web page is literally just a head and then a script tag and then i just register a couple three functions preload create and update and those are the three i think you could probably get away with create an update but preload is important in its own right and then what happens when the game loads is it runs through the preload function once it runs to the create function once and then it starts hitting update every frame so about 60 times a second it runs through the entire uh update function and so let me show you the let me crack out of this and i'll show you the index file too because i don't think i included that in there this is what the html file looks like you guys all read that i hope because i don't know how to make it any bigger um it's this is the only two important parts well that's not true this is important this is where you require this is how you get phaser i use a content delivery network um i like that method and then there's the div that it's going to stick it in my phaser div and then i just have to tell it where my code is so that's how that works now that once you get past that like this guy right here this blank looking thing you have a couple things you have to think about how many of you like global variables variables in the global scope nobody that's the right answer but now we're now we're game developers so we need these semiglobal variables they're they're actually pretty global they're going to be out there they're going to hold a lot of our fun of our stuff so that those separate functions can access them without having to pass back and forth all these all these objects so we're going to well i'll show you some globals we'll talk about that the preload and the create functions so this is um this is pong this is the top half of pong you can see the uh that con game in the top we just talked about all those let statements are my global variables um if if this was a year ago those would be var statements but this is es6 i i like to use i like to stay away from var whenever possible i don't know if that distinction means anything to anybody at this point but um so that's that's if you're used to seeing var anywhere you see var or let or const it's essentially the same thing um for the for the sake of this conversation so i'm going to do things with these so i just i just declare them out there and then you'll see i start using them in create but in preload what preload does is while the game is going and if you're going to reuse assets it loads those assets and holds onto them so i have and these games these audio files it's loading in and it's giving them a name this p hit one is the name i can refer to that later and it's going out to there and it's it's pulling this association in there um and once you've done that and in some games you might not have if you don't have sprites if you're just using like building graphics and moving things in fact you can get away with pong without preload if you don't i didn't hear any sound the sound might just might not be coming through um but if you don't have files to load then it doesn't matter the next part is that create section and that's just that's just the top portion of create but what i'm building there is the player and so i have a i've already got it out there but i'm assigning it some phaser stuff here so game is given to me up here it's the phaser game and game has a bunch of methods and calls and at the simple level when you're when you're doing things you're going to add something in my case i'm not using sprites which i'll show you sprites a little bit later but there's not like complex graphics i'm just going to build a paddle you saw the paddle it's a white rectangle so here's what i do i i tell it where i'm going to put it and these are so this is just the width and the height or the x and the y coordinates of the origin of that whatever i'm going to build next and i moved it 40 pixels in and then halfway up the screen minus i know i'm going to make it 60 pixels so i just cut it in half so it's starting right in the center of the screen on the left and then i'm going to do a little fill and that's a hex um uh color code that's just white and then the next the one there is the opacity level it's fully opaque i'm not doing any any alpha type stuff i'm going to draw a rectangle that starts at the origin i gave it and it's going to be 10 wide and 10 pixels wide and 60 pixels long or tall and then the other fun thing when you start working with phasers you have some physics models they actually give you three physics models um this is like like your question about which which uh framework or tool set to use this is kind of the same which physics model to use it depends on what you're trying to do i'm doing something very arcadey so i'm going to use their very simple lightweight arcade physics engine this is what they recommend to use if you're going to if you're going to throw it onto like a mobile app or something because it's not doing any heavy lifting uh super complex stuff but it gives you a lot of fun things you can do once i've enabled the physics that player has a body and it has things like this collide world bounds and it has you can you can start giving in velocity and acceleration and all that kind of stuff so that's a good question you can kind of test these well it's going to be in the browser but the problem is if you're developing this locally and you're just using it as a file system so if you go in here uh if i go in here and i say well i don't need why would i need a server to run this i'll show you why when we um if we just open i have to get in there all the way let me if i open index.html which doesn't apparently exist if i go one too far i did it's trying to load a file it's trying to load three files but i'm in the file system instead of http and so i get a lot of problems these aren't the problems i expected to get i expected to get a crossorigin problem because when the browser tries to play in the file system it gets very specific about what it can do it can't go get other files it's it's the browser is getting in the way here so that's why i run a lightweight note like express server to host it so i can go to localhost and i don't run into the crossovers and stuff um once you have that going somewhere though if you if i wasn't testing on the file system you wouldn't need a server at all you could stick it on on you were saying you were using ingenix you could stick it up there like a static asset and it would run just fine it should so i haven't actually done any like native or mobile testing at all but something like pong should definitely work the i don't know how complex you can get and like optimizing your code to make it run better on a mobile device is certainly its own its own like field of stuff um i would say that that's somewhere you could just start jump in and test it um if you have a workflow that includes you know deploying it to mobile somehow then i would go for it and and see what you can do for sure that's a great question though um and my answer is i don't know i test i just just work on the web right now and um so yeah so yeah this is uh this is the preload flow so this is the whole flow of loading an asset and using the asset just to show you how it works that's the preload function we saw it's loading in these three audio files and aliasing aliasing them to these um names and then in my create section i create some um i have these paddle hit one and paddle hit two and that's where i tag him in there say when when we have paddle hit one it's gonna be that audio and it's preloaded so it doesn't have to load it at that point it's just just making an association and then for pong what i have here is this is when it hit when the ball hits the top or the bottom of the screen it makes a certain noise and i have it i have wall hit and then it has because it's an audio a phaser audio it has that play method and it should play the sound and i think if this was all hooked up right you might actually hear the sound maybe i had my sound turned off we can i'll try it again but that's the flow like that's preload create and update one piece of code going through that whole the whole thing so those are actually i think update is probably the most important part of the of the program this is where everything happens it's where all your logic is going to live it's where everything is going to is going to do anything interesting everything else is just set up your preload is just building the assets and then your create is just saying okay put the player here or put this thing here get the ball moving here but once the game starts running if if you didn't have anything in update it would just run itself to exhaustion and nothing would happen so update is where all the fun begins here is a slice of update for pong itself um those top two are things that are given to me by the by the physics uh model called overlap and so when the first two things you pass into that are two separate objects or groups of objects in my case they're just objects i have a ball object and a player object and then the third thing is a callback or a function that will run when that happens and i'll talk about overlap a little bit more a little bit later but you can see so this when update is called every 60th of a second this runs just runs through and it says okay well is the ball body is the ball at the top of the screen or the bottom of the screen then do this ballbody.velocity.y times equals minus one just reflects the y velocity it just changes direction so it's going up now it's going down the ball also has an x velocity which isn't touched by that so you'll just get a pure reflection across that and then phaser also gives you these cursor keys that you can simply use it gives you four the four common cursor keys um and here i'm just checking if the cursor if the up cursor i know it's very confusing cursor's up is down if the up cursor is being held down or is being pressed down while this update is running then you're going to move the player body up i give them give them a velocity of negative 250 so it's in the yaxis negative is up and positive is down and the xaxis negative is negative to the left and positive to the right so yes yes yeah this is so update is a loop and i think that sometimes that throws people a little bit maybe especially people coming from outside of front end development there i don't know is there if you're if you're writing a game in like java or or c plus plus i think you do this thing where you create a fake loop and you say wow one so it just runs it's this infinite loop that runs um we don't have to do that in javascript because it's event based already there's already a loop going and we're just tacking into that this does feel kind of like a flipped version of frontend loop development like instead of adding an event listener and then and then calling it there that registers something on the event loop we're just we're writing the loop itself so we're checking everything in here um and this is i mean they're simple enough that i left them there but you could even abstract this out a little bit there are places where i'll show you some other abstraction i could just say if this is happening call a method somewhere else and it would do the same type of thing um but i just stuck it right in there so yeah this update is a loop this is your event loop and what you're doing is checking for everything that could happen in that event if i put if i put like this piece of code somewhere else outside of update yeah it wouldn't um unless you called it from update somehow it wouldn't uh so you could abstract the whole whole class of this you could abstract out and say run this thing where you check all the cursor keys yeah yeah you need to at some point you need to initiate that in update that's kind of like it's kind of like ad event listener is right here instead of instead of on the thing that you're doing you're adding an event listener here you're saying you're going to get events so look for them yeah so that's the that's the update loop and it can get obviously it can get pretty complicated update is where almost all of your code is going to live depending on how crazy your game is or what you're doing you know you're going to want to somehow modularize that or abstract it out a little bit so it's easier to read the update loop you might have your code somewhere else so that's what i did with with overlap actually my function reflect lives outside of the update loop it's written under the update loop it's still part of the game it's still part of the phaser object um but it's its own function so i have like i have preload create update and then somewhere else i have reflect and so that's where that's what that's calling here is it's saying oh there's a function called reflect let me go get that and reflect when you call overlap it actually passes in as the first two parameters the first two things that you gave it so a ball and a player a ball and a computer player and i chose to call that player an actor because it can be either way this it's doing the same thing in this case it's doing the same thing no matter who it hits so i didn't need to write one for the player one for the computer player although at the very bottom i started to check because i thought you might maybe i'd play a different sound when the computer player hits it or maybe i would do something differently keep track of something but this is what happens is and this is all just code so the paddle is 60 pixels wide and the scent i wanted to i wanted to make it a kind of dynamic paddle so if you hit it um you know on one of the top or the bottom closer to the edges it gives it more velocity more up and down velocity so you can kind of affect how fast the ball is moving and try and get it moving fast enough that the computer player can't keep up with it so this is an example of pulling that code out because you could in theory if you write any javascript instead of writing reflect in there i could have just written a function right there in the in the overlap parameter set i could have just stuck a function in there and it would have looked really horrible and hard to read but this would have all been in there this way i can actually abstract it out and then reuse it in either case but that's a that's a simple a simple version of that but i think before we get to this maybe are there any questions about the update loop or about how any of that works so far i'm going to show more examples and talk about some more code it's it's it it's really dependent on the game itself but it should be close to 60 frames a second and there are ways to frame lock and to do some other things like to check see how that's progressing if it gets i mean i think running this and running all this stuff i think it was having a little trouble just keeping up the game the browser itself my computer um but you can generally count on being 60 frames a second so yeah these are some of the the utilities mine at the top there is the phaser template that i use to start a phaser game it comes with um probably more stuff than you need to just get started but some stuff that i found helpful some gulp stuff and some browserify stuff and some testing stuff but um mainly what it comes with is that index file that's already set up to go and that blank phaser template and you just start writing code that way i have to keep doing it over and over again you can just get clone this as whatever you want and um and start going these are a couple of tools i use pixlr is an online image editor it's great it's really simple if you don't if you already have something like photoshop or for something installed you can use those i don't have those installed so whenever i need to like manipulate an image i just fire pixel.com and uh it'll pull images from a url or from the computer and and it's pretty robust although there are some things it's lacking uh piskel is an app that you can either i think you can run on the website but you can also install and it's a sprite creation tool so when you start doing animation you might want sprite animation it's a great free tool and bfxr is a weird name sound effects uh tool it's very simple to use and if you don't want to like have to worry about finding sound files or whatever it's it's cool you just kind of go in and say oh it has like explosion and it gives you a different kind of explosion and you can very easily save those files off and include them in your game just to give it a little bit more depth as you're unless you don't care if you don't care you don't need any of these you definitely don't need any of this up here to write phaser to program phaser games but i think they're nice so um this is a spot where we can talk about the tools that i use the tool chain if that's exciting to anybody we can i can show you some more code first or we can just talk about this are any of you are you guys familiar with any of these or any of these like weird familiar with it all right so express is um a server framework for node it just makes it a little bit easier to to get something flying um quickly and and i think i showed well i will show you now my um my express server for the game is very very simple it's 11 lines it's actually seven lines of real code um and all like i said all that does is get me off of the file system and get me to the local host so i can be on http and not have to run into cross origin stuff um and if you've ever worked with node or with express this might be familiar and if not it's pretty quick to explain express library you have to install with npm this is my you know my package it's my only dependency at this point because this is a different the other ones have more dependencies but um so you require express you require http um i'm actually sure yeah that's why because i use it to create server you can do this a little simpler but this is a still pretty simple make const app equals express that's the thing this express.static public is the only extraneous library code left in express these days express used to be very bulky it used to have all this stuff built in now if you want more things you have to you have to go out and get them but public or static is left and all that does is instead of having to write um endpoints or handlers for like when somebody comes to my website serve them this file serve them the index file static says look i have a folder somewhere in this case called public and in public you will find an index.html and anything else in public if index.html asks for it just give it to them so in the index.html you'll see i have this js bundle which is inside my public folder so when it hits the express server and it finds that path it just you don't have to write specific stuff for it you don't even have to understand how this express server works to use it um this is the only piece you'll probably want to know is what port it's on in this case it's 8002 because i'm running i have several games and i kept like i'd fire up node and it would say oh that port's in use and i think oh which what did i leave running so i started separating them so i can do that but you can put that on any port you want um and then when you go to the browser you just do localhost call in that port and that'll be the the server that's running there so that's the only piece of express code in there um yes yes yeah and it could be called anything you want public is a is kind of idiomatic it's the one that people use and in in i'll show you because as i was doing this i started evolving my process i actually started bundling um in a build folder instead of public so no i well it depends if you wanted them on the same webpage itself then you might you would have them in there somewhere for each project i have its own folder its own like top level folder yeah they all have their own yeah so like i'm in i'm in this pong folder uh you know in asteroids it's in an asteroids folder so they're each their own if you wanted to work on multiple games in just one server one index file you could you could certainly do it um i just separated them out to keep it easy to think about i guess so yeah that that was the express we also had so gulp is a is a build tool yes sir no so for if you're running as a server you would you would use either you have node or we were talking about too there's a there's a thing called nodemon which which is a kind of resilient node server so you just type node and then the the server name or the the file that express file's name i call them server.js by convention but so it would be node space server.js and that'll run that as its own little thing or nodemon or whatever node you'll need node on your computer you have to install it depending on what system you have i used brew i think to install in fact i use something called nvm which is the node version manager absolutely not necessary but pretty handy because if you start moving through versions i think node's on version 7 right now but some stuff still wants to live on version 6 so if you want to take advantage of like some cutting edge stuff you might want to work some things in note 7 you might go all the way back to like node 0.10 for whatever reason to work on something nvm is a great tool but yeah you'll you'll need to install node yeah it should run at the command line if it doesn't you'll need to get into your um like your whatever your terminal node yeah nodemon's a quick install npm uh install nodemon i install it globally so i can use it everywhere you can install it locally as well nodemon is a great tool uh so yeah so that's node express and that gets you out of the file system so that you can you can actually like play with this stuff locally and not have to be like oh i'm going to push this up and host it somewhere and then work on it and then so gulp is a tool a build tool that is used to i use it as a watcher mostly for my tests yes sir yeah i never learned grunt so that's why and then another question is why go up instead of webpack maybe webpack is the new the new thing um i think gulp is very simple i'll also in fact i'll show you my gulp file i have it i'll show you what i do with it because um i feel like asteroids is probably the newest one so my i all i use gold for to be honest with you is my running my tests and so this is a let me include this this is a gulp file um for for mocha tests and that's the only thing i use it for you there is a goal plugin for browserify and i'll talk about why i use browserify in just a second too and that would probably be a smarter thing to do is get go up watching all of those and just doing it all the same time but i didn't i didn't like the setup on that plugin so i just used something called watcherify which takes browserify and turns it into a watcher but this is gold so with golf you just define tasks and you will usually want a default task and your default task will run any other tasks you want to run whatever and the only real task i have is a moca task that pipes my code my specific test code through a through a mocha test runner and if you're not familiar with unit testing or don't care about unit testing it's not that important um i think that unit testing and test driven development is an incredibly great way to to develop because i think it prevents you from screwing stuff up too badly it helps you think about how you're going to build your code if you're using it as a test driven write your tests and as you're writing your tests you're actually building your logic you're building it that way instead of like getting really messy and building all your logic and then and then thinking about how to test it you're thinking like what do i want this one thing to do this one thing what's the one thing i want it to do okay now i'm going to write that code that does that and so this is just a simple way to get into tests i actually think this is another reason why you should write games because they're simple they're simple enough that you can write unit tests for them without worrying about like is this a unit is this like do i have time to do this if you're writing production code if you're coming into something maybe you're an existing code base and you might not have time to think about how to break that down into test driven stuff nobody may even want you to do it and so i do think it's important and i'm using games to teach me to be a better testdriven developer um but that's gulp in a nutshell and i can show you what that looks like um i'm gonna just run the mocha one because it will run but this is it i have some tests to do some things and the tests passed that's not exactly what i wanted to do so that's what happens when you run a mocha test it tells you did it work and so now what happens is if i go into that code and i change something and i save that file the test run again and it breaks i know right now man the last somewhere in the last 15 characters that i typed in there i broke my code it's not like a week from now or even an hour from now when i go fire up the browser and play the game and it's like why isn't when i turn left why is it turning right what did i do and then i have to go back and figure out what i screwed up this tells me right away that's one of the benefits of testing is it tells you immediately but that's gulp so browse verify in in node you have this concept up here you see the top this require is a node verb and it allows you to go get code from somewhere else and stick it in here like act like it actually exists even though it doesn't exist in this file it goes and gets it if you do this on browser facing code your browser will say i have no idea what require is i don't know what you're talking about and because i don't know what requires i have no idea what all these other files you're trying to use are although i don't think it'll get that far i think as soon as it hits require it'll just stop um there are lots of ways to modularize your code one of them involves just writing a bunch of script files script tags and saying well i know in the end i'm going to write my app.js but before that i have a module called math.js and another one called ship physics.js so you just start putting those in there that's okay that works but i think it's a lot easier to use browserify and i actually ended up writing it as a script so this is the piece of code right here and you install browserify either locally or globally again or both and then i'm telling it when the files in this first directory change output that bundle it up and output it into something i'm calling bundle.js and what that does is anytime it hits one of those requires it goes and finds that code and it sticks it in the bundle so there's no requires in my bundle there's just all my code and all that allows me to do is separate out things like you know i have my app and i also might have some utility files and the more the more code you can pull out of your app i think the easier it is to read your app because if your app file gets to be 15 000 lines long and you need to go dig in there and find something where do you go but if you know that it's in this like 100 line bundle somewhere well this 100 line file somewhere that specifically has to do with turning the ship right then you can easily step through your code dig through your code and i think it keeps you more organized i i like i think i mean a lot of people i've heard your function shouldn't be more than a screen long i don't think your files should be much longer than that if you can avoid it in some cases you can't they shouldn't they shouldn't get so long that you have to scroll forever to find stuff and so you can you can start you can start pulling your code out putting it into separate files and then requiring it back in so that it you can you can use it in a very clean and concise way and like i said none of these things are required to do phasor code these are just code practices yeah i mean it all depends on how you pull it in and like what you're building as your as your um um utility so in this case i wrote this as a you were talking about patterns earlier this is a revealing module pattern so i have some stuff inside and this is i'm sorry if this is confusing this is es6 fat arrow notation um so it might read a little different than you might be used to if you're using something like this might more easily be called like function rotation correction and then have a parent for your parameters and then your brackets but that's the same essentially the same thing but you'll see i have rotation correction and degrees to radians and get heading in radians but all i export is get heading in radians so that keeps that keeps everything else hidden they're like private members of the java c plus plus guys in here those are private methods and getting into radians is like the only the only piece that i exposed now i i haven't looked at the code all the way down i it's not being exposed you couldn't call if you require this module in you couldn't say like let's just say we call the module utility you could the only thing you could say is utility dot get heading in radian and you would pass it um you would pass it an angle basically if you said utilities dot degrees to radians they would just say i don't know what you're talking about i don't have this would say that function does not exist yeah that's a way to keep it clean i'm not sure to be honest with you i'm not sure as far as scope goes or what if if there's um any upsides or downsides to that but we're also game developing so scope is a little bit hazy at this point anyways there's a lot of stuff already you know gonna be in your scope but that i guess the nice thing too is you can you can choose you're kind of name spacing it in a way but i'm calling it heading in radians so it's stuck in that now the funny thing about that code there is i actually figured out i didn't need to do that at all i found another way to do it but so i don't think it's actually been recalled in that code anywhere or else i would show it to you but that's just the other reason to pull those out into files to export things is if you're doing unit tests you need to be able to require those tests in your unit test so so like right here i have to require it in i have to pull it in so that i can call it and if you just bundle all that code into the main app then it can get kind of tricky to pull out like what exports you want so one of the reasons i pull code out into smaller pieces is so i can test it in smaller pieces but once again if you're if testing isn't important to you or something you're comfortable with it's not important it's not it's not important to game development in and of itself this is just kind of an aside these are things that i think are great to learn and i think game doing it in a field of game development makes it a little easier and more just fun things i think this is what what i take away from writing game code is that you're going to make mistakes whenever you write code you're going to make mistakes big mistakes small mistakes i wrote just in the three or four games that i wrote in the last few weeks i made a ton of mistakes and then i would come back and refactor them out or find them later but the good thing is you learn if you don't learn from the mistake itself you might learn from having written code you didn't need to write like all of that that angle correction stuff i didn't need it turns out i didn't need to write it but i wrote it i learned how to do it and now i understand trigonometry a little better than i did before which was fun because i thought i understood it pretty well and i spent about 45 minutes thinking i knew what i was doing and it turns out it's been way too long since i had a trig class i think personal projects are a much better place to make mistakes than at work or or even for other people work um or in front of other people i think it's great if you can if you can learn from your mistakes in the privacy of your own ide um i think that makes just it's just a little easier and then you're not pissing off your boss or your clients or anybody else so it's a great outlet for making mistakes you can you can think like when you've done it i got my quota of mistakes for this week the more you write especially small projects there's going to be a lot of repetitive stuff that you're doing over and over again and so you're going to want to find this is something i think is important for every programmer is because i think generally programmers are very like immune to this pain they will do it over and over again they will type it out because it's worked it's always what they've done i think what you should do instead is find a way to not have to do that if you've done something twice figure out a way that the next time you won't have to do it you should never have to do it a third time that's why i made the phaser template because i was writing this code and i thought this is too much and then sometimes as it evolved i'd have to go back and think wait what did i do did i do that right or how did i do this now it's locked in somewhere and i can just bring that code down and start writing i don't have to think about the setup and the spool up and all this stuff that goes into like getting things ready that's done so that's great there are other things that you'll find that you might be doing a lot in your games you might be writing this maybe you're writing some similar games or maybe they're not even that similar but you're gonna find that there may be code that you write over and over again maybe it's subtle variations but code that you're using over and over again because it's a very base level piece of code man you should write that and you should bundle it up somewhere and you should put it somewhere that you can say i don't have to write that anymore i can if you want you can copy and paste it or i can just somehow require it in you can just pull it in it's now you're building your own library of functions and code and things that you're comfortable with i think that's great and that ties in with the last one where you're gonna see you're gonna know if you're writing games that only take a couple of days to go through and you're doing that three or four times a week or a month or whatever you're going to see those things are very frequent and are happening very often whereas if you're writing um when i was working on react this was in you know september the first two weeks of september last year is when i started this react project and i didn't have to start another react project until last month and it was like i had never done it before i had no idea what i was doing it was like wow i was looking at my startup why did i do things this way and do i need to do them this way and so that's when you have these long cycles it's hard to find those those things and encapsulate them and document them somehow you just think well i'm doing it and i'll do it and then the next time i'll remember but you won't you won't um and so if you're doing that a couple times a week or a few times a month you're gonna you're gonna get sick of it a lot quicker than if you're only doing it twice a year and you're going to figure out ways to make your code reusable i think that's a great that's a great thing those are important parts of being a programmer is reusable code and the more you do that especially as you start to think like well this works pretty much the same way but not exactly and then i'm using it a third time and it's slightly different you're going to figure out how to distill that that essential function down into a smaller piece of code that is extensible in some way um and that this is where i'm going to say like raw raw functional programming is is great if you can do that and you can start to compose your software you're going to find it's going to be a lot easier to do that stuff distill it down into small pieces that you can chain together and then when you need to chain it together in a different way you just take this piece out and put this other piece in and it works just how you want it to you don't have to reinvent the wheel every time you do it so um i think those are the those are the big things this is my inspirational quote the critical ingredient is getting off your butt and doing something it's as simple as that i don't know how many of you know who nolan bushnell is he is the cofounder of chuck e cheese he also started atari and wrote pong the first time so that's why it's up here but he did ko found chucky cheese um i think it's a great quote that's that's the truth do it and by doing it you're gonna learn to do it better or you're gonna learn you don't like to do it you'll move on to something else but if you just think about it i think we all do this i know i do this i think about wanting to do it wanting to learn something wanting to build something but i talk about thinking about it instead of doing it and then it doesn't get done let's do it um yeah so that's it this is me these are ways you can touch with me uh you can like go through my github if you want to see some examples of interesting code or not interesting code the phaser templates on there and that's my email address so yeah any questions or anything i didn't cover that you hoped i would cover we can look at more code running examples i don't know what time we're at skip uh
