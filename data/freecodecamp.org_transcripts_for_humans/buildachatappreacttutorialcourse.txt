With timestamps:

00:05 - hey and welcome to this course where i'm
00:06 - going to teach you how to build a chat
00:08 - application using react js and the chat
00:10 - kit api
00:12 - i'll teach you this through 17
00:14 - interactive screen
00:15 - and by interactive i mean that you as
00:18 - the viewer at any given time can pause
00:21 - the screencast jump into the code and
00:23 - change it
00:24 - you can then see how your changes
00:26 - affects the output so i'll encourage you
00:29 - to do that whenever you're confused so
00:31 - that you make sure that you understand
00:32 - the relation between the code and what's
00:35 - being displayed on the page
00:37 - and i'm also going to give you five
00:39 - challenges throughout the course where
00:41 - you'll for example be asked to finish up
00:43 - my code in order to reach a certain goal
00:46 - however if you don't manage to solve the
00:47 - challenge don't worry i'm going to show
00:50 - you the solution as well
00:51 - so by the end of this course you'll be
00:53 - comfortable using react.js you'll
00:55 - understand how to handle data how to
00:57 - structure projects event handlers
01:00 - hooking up with apis and a lot more
01:03 - secondly you'll also get to know chat
01:05 - kit which is a super nice api for
01:07 - creating chat applications it's
01:09 - basically an api which gives you the
01:11 - power to build whatever kind of chat app
01:13 - you want without having to set up all
01:15 - the infrastructure and hassle that's
01:17 - involved with real-time chat
01:18 - applications so by the end of this
01:20 - course you'll actually have built this
01:22 - chat application here
01:23 - it's a chat app with multiple rooms
01:25 - which you can switch through this menu
01:27 - on the left hand side here you can also
01:29 - create rooms and thanks to chat kit it's
01:31 - as fast as any other chat application
01:33 - out there
01:34 - and towards the end of the course when
01:37 - you've understood how the entire
01:38 - repository works you're going to get
01:40 - your own copy of this chat room through
01:43 - cloning the repository and save it to
01:45 - your profile and as a bonus i want you
01:47 - to have your own personalized chat
01:49 - application
01:50 - not necessarily just the same as this
01:52 - one so we're going to go through how to
01:54 - use css variables and css grid to
01:57 - personalize the application through
01:59 - easily changing the theme of the app and
02:01 - also to shuffle around on the different
02:04 - components and both of these things are
02:07 - super simple to do using css variables
02:09 - and css grid and there are also two hot
02:11 - new technologies of modern browsers that
02:14 - needs to be in the tool belt of a
02:15 - front-end developer in 2018
02:18 - and once you've personalized your chat
02:20 - app i'm also going to point you to
02:22 - further resources where you can expand
02:23 - upon and build more complex features
02:25 - into the app
02:27 - finally who am i my name is peer i'm a
02:29 - front-end developer online instructor
02:31 - and also one of the co-founders of
02:33 - scrimba which is the interactive coding
02:35 - screencast tool you're looking at right
02:37 - now
02:38 - but without further ado let's get
02:40 - started on the first lecture of the
02:41 - course
02:47 - hey in this lecture we're going to have
02:49 - a look at the component architecture of
02:51 - our app because in react everything is
02:54 - based around components and before you
02:56 - start coding your app you should break
02:58 - the ui into components and it's a good
03:00 - idea to actually do it visually like
03:02 - i've done here using paint or preview or
03:05 - something like that to just draw colored
03:07 - rectangles around your components and
03:09 - the way you break your ui into this is
03:12 - by starting at the top so here the
03:14 - parent component the common ancestor for
03:16 - all other components is the one in red
03:19 - hair that's normally called app or main
03:22 - or something like that and it basically
03:23 - contains our entire application and then
03:26 - you ask yourself
03:27 - which direct children does this
03:29 - component have in our case it makes
03:31 - sense to have four direct children so
03:34 - there's the list of rooms on the left
03:36 - hand side here there's the chat area
03:38 - itself
03:40 - there's the form where you enter chat
03:42 - messages and there's also the form where
03:44 - you create new rooms so the app
03:46 - component has four direct children the
03:49 - green blue brown and orange one
03:52 - and then you want to ask yourself again
03:54 - which children does these components
03:56 - have
03:57 - and this is just a form doesn't really
03:59 - have any children same with this one
04:01 - however the message list component the
04:04 - blue one has a list of messages inside
04:07 - of it and it's totally reasonable to
04:09 - turn them into their own components so
04:11 - each of the messages is a component
04:13 - itself and you could actually also make
04:15 - the case that this room list component
04:18 - should have children as well because it
04:20 - has a list of rooms here and you can
04:22 - even extract this title here in a
04:24 - component
04:25 - it's basically not written in stone and
04:28 - the reason i've turned each of the
04:29 - messages into components though not
04:32 - turned each of these into components is
04:34 - basically just to show you that it's up
04:36 - to you and both things work though in
04:38 - general the more complex your app
04:40 - becomes the more you should split it up
04:42 - and a good rule of thumb is the
04:44 - principle of single responsibility you
04:47 - want your component to do one thing and
04:49 - one thing only so if you have huge
04:50 - components which does a lot of things
04:52 - you should consider breaking them up
04:54 - into multiple components
04:56 - so in the next lecture we'll look at how
04:59 - these components turn into actual code
05:01 - as we'll walk through the repository so
05:04 - i'll see you there
05:10 - hey in this lecture we're going to have
05:12 - a look at the code base architecture so
05:14 - you can build a mental model of how this
05:15 - repository works before we start coding
05:18 - we have the fully functional app here
05:20 - right now so don't worry if a lot of
05:22 - this looks scary to you because at the
05:25 - end of the course it won't
05:26 - let's start like we did when we looked
05:28 - at the component on a conceptual level
05:30 - which was at the root level meaning the
05:33 - red rectangle here the component which
05:35 - is the ancestor of all the other
05:37 - components
05:38 - and that is the
05:40 - app component
05:42 - as you can see it lies in the root
05:44 - directory app.js and this is also our
05:48 - biggest component
05:50 - this is where all the magic happens in
05:52 - these various methods here
05:54 - which will later on go through step by
05:56 - step
05:57 - for now though i want to have a look at
05:58 - the render method
06:00 - because here you can see that this
06:02 - component renders out four other
06:04 - components and they just happen to be
06:06 - the components which were direct
06:08 - children of the red one so the green
06:11 - blue orange and brown
06:13 - which was the room list message list new
06:16 - room form and send message form
06:19 - the reason we have access to these here
06:21 - is because we have imported them up here
06:24 - as you can see they have been imported
06:26 - from a component folder
06:28 - that is one you can see right here if we
06:31 - open it up we'll see five components
06:34 - here's the message component for example
06:36 - that is the one
06:38 - which is not a direct child of the app
06:41 - component but a direct child of the
06:43 - message list component the blue one here
06:46 - so let's have a look at the message list
06:49 - go down to the render method and it is
06:52 - indeed returning the message component
06:55 - meaning that the message component is a
06:56 - child of the message list component
07:00 - so hopefully now you're starting to
07:01 - build an understanding of how this
07:03 - architecture here translates into react
07:06 - code
07:08 - we can also have a look at the new room
07:09 - form
07:11 - and the room list
07:13 - and the send message form and as you
07:15 - might notice
07:16 - all of these components are much smaller
07:20 - than the app component and that is a
07:22 - very conscious choice because we want
07:24 - the app component to be a so-called
07:26 - smart component meaning it handles all
07:28 - the logic it takes care of talking with
07:31 - the chat kit api as you can see we've
07:33 - imported the chat kit sdk up here and it
07:36 - also takes care of handling all the data
07:38 - that's done in the state here which
07:40 - you'll learn a lot about in a few
07:41 - lectures
07:42 - so this is the brains of our application
07:45 - whereas the child components like this
07:47 - message here is in contrast actually
07:50 - pretty stupid they only take whatever
07:52 - data they get from their parent and
07:54 - render it out
07:56 - some of them also have some event
07:57 - handlers for
07:59 - handling input from the users for
08:01 - example the send message form
08:04 - this one down here but of course needs
08:07 - to accept user input however it doesn't
08:10 - do any logic of the data it just takes
08:12 - the data and sends it off and of course
08:14 - doesn't take care of talking with the
08:16 - api nope all of that is done in the app
08:18 - component
08:20 - and this separation is a best practice
08:22 - if you want as many of your components
08:24 - to be as stupid as possible while
08:26 - gathering the brains at one place higher
08:28 - up in the hierarchy as it's much harder
08:30 - to maintain an app if the logic is
08:32 - spread across tons of components so as
08:35 - much as you can try to have one or few
08:38 - smart components and the rest of the
08:40 - components as stupid as possible
08:43 - so let's have a look at the other files
08:46 - let's start with the index.html for
08:48 - example it is ridiculously simple it has
08:51 - a link to the css
08:53 - it also has a div with an id of root
08:57 - more on that in a minute
08:58 - plus it's also linking to the bundle of
09:01 - all of our javascript which is
09:03 - index.pack.js
09:05 - and this pack here is because scrimba is
09:07 - using webpack under the hood so it needs
09:09 - to refer to
09:10 - index.pac.js instead of index.js which
09:13 - is the one you can see
09:15 - here
09:15 - and this is where we're connecting our
09:18 - react app with the index.html file
09:22 - because as you can see
09:24 - we're importing the app app.js
09:27 - just the
09:28 - root component
09:30 - we're saying react dom
09:32 - dot render this app in the element with
09:36 - the id of root so we're taking our
09:38 - entire application which exists in app
09:41 - as that's the common ancestor for all of
09:43 - our components and shoving it into the
09:45 - dom
09:46 - which is exactly
09:48 - here then we have the styles and
09:52 - style.css and
09:54 - we're not going to go through the basic
09:56 - css in this course as i'm assuming that
09:58 - you know basic css however we're going
10:00 - to look at both css variables and css
10:04 - grid as that is two super cool new
10:06 - modules in the css spec which will allow
10:09 - you to build your own version of this
10:11 - chat app which is customized exactly how
10:14 - you want it
10:15 - now you can say goodbye to all of this
10:16 - beautiful code and the next time you see
10:18 - it you'll actually understand it as you
10:20 - will have coded it yourself or at least
10:23 - together with me
10:25 - and in the next screencast we'll
10:26 - actually start doing that so stay tuned
10:29 - and i'll see you there
10:35 - hey and welcome to the first lecture
10:37 - where we'll actually jump into the code
10:39 - and start building so now i'm in the
10:41 - app.js file and as you can see the app
10:44 - component is significantly simpler than
10:46 - it used to be
10:48 - i've removed all the logic so all that
10:50 - we're left with is the render method
10:52 - which here returns the four children of
10:55 - the app component that results in a
10:58 - significantly simpler ui each of the
11:00 - components are simply rendering out its
11:03 - respective name
11:04 - now we're going to start by building out
11:06 - this message list component here and it
11:09 - can be found down here so what we want
11:10 - to do of course is render out a list of
11:13 - messages
11:14 - down here
11:15 - so we need to remove this help text and
11:18 - write some jsx but first we need data
11:22 - and we're not going to hook up with the
11:23 - chat kit api just yet
11:25 - so i'm going to paste in some dummy data
11:27 - basically an array contains three
11:30 - objects
11:31 - and each of the objects contains a
11:33 - sender id property and a text property
11:35 - and this is a simplified version of the
11:37 - data we'll get from chat kit later on
11:39 - now in order to render this stuff out on
11:41 - the page you have to first escape out of
11:44 - the jsx syntax because we can't just
11:46 - write javascript inside of jsx we have
11:48 - to use curly brackets in order to embed
11:51 - javascript expressions inside of jsx so
11:54 - inside of here we can do
11:56 - dummydata.map
11:58 - we're going to fetch out the object
12:00 - itself which we're calling message and
12:02 - we also need the index
12:04 - using a fat arrow function and for each
12:07 - of the items we're going to return
12:09 - a
12:10 - div tag
12:12 - now we're in jsx land again so we need
12:15 - to move over to javascript lan so we'll
12:17 - do curly brackets again and let's just
12:19 - start by rendering out message
12:22 - dot
12:23 - text we run this
12:25 - as you can see we're rendering out the
12:27 - messages
12:29 - brilliant so now i want to give you your
12:31 - very first challenge i want you to
12:34 - render out the sender id in addition to
12:37 - the text
12:38 - so pause this screencast right now
12:40 - jump into the code and change it so that
12:43 - it renders out the sender id as well
12:45 - and if you don't manage to do it then
12:47 - just resume back to this screencast and
12:49 - i'll show you how to do it okay so go
12:50 - ahead and do that right now
12:53 - okay so i hope you managed to solve this
12:56 - task let's see how it's done
12:58 - so i'm suspecting that some of you might
13:00 - have been tempted to simply add
13:02 - another div tag here do message dot
13:06 - sender
13:07 - id and if you try to do that you see now
13:10 - if we run the code we're getting an
13:12 - error
13:13 - react is basically saying that adjacent
13:15 - jsx elements must be wrapped in an
13:17 - enclosing tag which means you can't
13:20 - simply render out two jsx elements
13:23 - besides each other like this you have to
13:25 - wrap them in an enclosing tag and you
13:27 - can actually do it if you use an array
13:30 - so that's a feature
13:31 - react added in version 16 but we're
13:34 - going to use the enclosing tag so what
13:36 - we want to do is
13:38 - wrap both of these
13:39 - in another div
13:41 - like that you run it
13:43 - it works
13:45 - beautiful
13:46 - now i want to add
13:48 - all the classes in order to apply some
13:50 - styling
13:56 - let's run it again
13:58 - oh it looks beautiful
14:00 - however we're getting another message in
14:02 - the console and it's saying that each
14:05 - child in an array or iterator should
14:07 - have a unique key prop so
14:10 - what we need to do is give this item
14:12 - here key prop like this
14:15 - and this is why i wanted to fetch out
14:16 - the index as well because we can use the
14:18 - index as the key if we run this again
14:21 - it works and we're not getting the
14:23 - warning now it's actually not
14:25 - recommended to use the index as the key
14:27 - it's rather recommended to use a unique
14:30 - id and using the index is kind of seen
14:32 - as a last resort solution because the
14:34 - reason we're doing this is so that react
14:37 - properly can identify these dynamically
14:39 - created children from each other
14:42 - so that if you start adding removing
14:44 - replacing and shuffling around these
14:47 - items react knows 100 how to separate
14:50 - the items from each other based upon
14:52 - their id but since we're not going to
14:53 - change the order of our items right now
14:56 - we can use the index for this dummy
14:58 - example
14:59 - however in the next screencast we're
15:01 - actually going to fetch real data from
15:04 - the chat kit api and swap this index out
15:06 - with a more stable solution so we're
15:08 - actually progressing pretty quickly now
15:09 - so stay tuned for the next lecture as
15:11 - it'll be packed with interesting
15:12 - learnings
15:18 - hey let's have a look at how we can get
15:20 - started with the chat kit api so chat
15:22 - kit is built by pusher which you can
15:24 - find on pusher.com they have a really
15:26 - nice collection of several dpis which
15:29 - help you create collaboration and
15:31 - communication features in your apps the
15:33 - one we're going to use is called chat
15:34 - kit and it's probably the easiest way to
15:37 - implement chat in your app it's in
15:39 - public beta and it's free while it's in
15:41 - public beta and they'll always have a
15:43 - generous free plan so you don't have to
15:44 - worry about suddenly having to pay
15:47 - now in order to get started you need to
15:49 - sign in or create an account and then
15:51 - you'll take into the dashboard we can
15:53 - see an overview over the instances you
15:55 - have for their various apis and if you
15:58 - click this instances here under chat kit
16:00 - you'll see your instances the one we're
16:02 - going to use for this course is called
16:03 - scrimba chat kit course when you head
16:05 - into that one you'll get to an overview
16:07 - page where you have all the keys tokens
16:10 - and stuff like that which you need in
16:12 - order to connect with chat kit and you
16:14 - can also create users and rooms here
16:17 - manually for when you're playing around
16:18 - with it and experimenting in the next
16:21 - screencast we're going to connect our
16:22 - app with my chat kit instance and i'm
16:25 - also going to challenge you to connect
16:26 - our app to your chat kit instance as you
16:29 - should have your own instance and i
16:31 - should have mine so i'm looking forward
16:33 - to see you there
16:39 - hey in this lecture we're finally going
16:41 - to connect with the chat kit api so that
16:43 - we can fetch out the messages from a
16:45 - given room
16:46 - now the first thing we need in order to
16:48 - do that is the chat kit sdk
16:51 - as you can see under dependencies here
16:53 - i've installed the sdk i've done that
16:55 - using npm but i could easily also have
16:57 - simply linked to the source from the
16:59 - html because they have cdns in which you
17:02 - can just point a script tag to and then
17:04 - easily fetch out the sdk that way as
17:06 - well
17:07 - however we're going to use npm
17:09 - and the way we get a hold of the sdk is
17:11 - by doing import
17:12 - chat kit from
17:15 - virtual trackit
17:17 - then there's a question how do we hook
17:18 - up a react component with an api
17:22 - and the way you want to do that
17:24 - is through using a life cycle method
17:26 - called component bid mount
17:30 - and it's triggered directly after the
17:33 - render method has been invoked
17:35 - so here we'll create a chat manager
17:39 - and we'll use the chat kit dot
17:42 - chat manager to create that and inside
17:44 - of here you to specify a few parameters
17:46 - first we need our instance locator to
17:49 - tell trackit which instance we want to
17:51 - connect with and that is the one we
17:53 - created here it's called scrimba chat
17:55 - kit course and here you can see that
17:57 - we're getting an instance locator now
17:59 - i've copied this one to the config.js
18:02 - file
18:04 - here it is and i'm exporting this one
18:06 - along with another one which we'll look
18:07 - at in a minute
18:09 - so i'll simply do
18:11 - import
18:12 - i'll just copy these two
18:16 - from
18:17 - config like that
18:19 - now i can do instance
18:22 - locator instance locator like that
18:25 - and actually as the key and the variable
18:28 - which is holding the value meaning the
18:29 - instance locator string is called the
18:31 - same i can actually omit this one here
18:34 - and use do like this and we also need to
18:36 - specify a user id because chat kit needs
18:39 - to know which user we're connecting with
18:41 - this instance
18:42 - and as you can see down here in the
18:45 - dashboard i've created a user manually
18:48 - here so we're going to use that one user
18:50 - id or bargain
18:53 - finally there's the token provider which
18:56 - we'll create using new chat kit
18:59 - token
19:01 - provider
19:02 - like that and here we need to pass in a
19:04 - url
19:06 - and that url is the one
19:08 - we're getting if we scroll down to test
19:10 - token provider here you can see your
19:12 - test token provider endpoint and this is
19:14 - only for testing purposes what you'd
19:16 - rather have in production here is an
19:18 - endpoint which you have created for
19:20 - example using node and there you would
19:22 - authenticate the user which you could do
19:24 - using the trapkit server sdk you also
19:27 - might want to do some other stuff
19:29 - perhaps talk with your own database and
19:30 - however for testing purposes we're just
19:32 - going to use this test token provider
19:34 - here in order to authenticate ourselves
19:36 - so i've copied it again in the config
19:39 - file
19:40 - and exported it as the token url so i'm
19:42 - just going to paste in the token url
19:44 - like this
19:45 - and now we have a chat manager properly
19:48 - set up
19:49 - meaning we can use it to do chat
19:51 - manager.connect
19:54 - that'll return a promise
19:56 - and when that promise is resolved we get
19:58 - access to the current user
20:01 - and the current user object contains a
20:03 - bunch of methods for interacting with
20:05 - the api so the current user is our
20:08 - interface for talking with the chat kit
20:10 - api we can start off by doing current
20:13 - user dot
20:14 - subscribe to room like that
20:18 - in this object we need to specify of
20:19 - course which room we want to subscribe
20:21 - to
20:22 - using the room id and
20:24 - as you can see in the interface here if
20:26 - we scroll a bit up
20:27 - i've created a room called random here
20:30 - and i can interact with this room
20:31 - programmatically using this identifier
20:33 - here so i'll copy that one and
20:36 - paste it in here then we need to provide
20:38 - it with at least one hook we have a
20:40 - hooks property here and the most
20:42 - important hook which basically is an
20:44 - event listener is called on new message
20:48 - that listens for new messages
20:50 - and when we're building a cat room we
20:52 - want to be notified every time a new
20:53 - message has been emitted in the chat
20:55 - room so here
20:57 - message i'm using a fat arrow function
20:59 - and i'm just going to console log out
21:02 - the message dot text now let's run this
21:06 - code
21:08 - and as you can see in the console we're
21:09 - logging out three messages hey how's it
21:11 - going great how about you good to hear
21:14 - i'm great as well
21:15 - and that is indeed the messages i've
21:17 - already pre-created in this room
21:20 - now if this room contained tons of
21:22 - messages we could have considered adding
21:24 - a
21:25 - message limit for example 10 messages
21:28 - that means the chat kit would only fetch
21:30 - out the 10 latest messages and you could
21:32 - set that to up to 100. however by
21:34 - default it's 20 and i think that's a
21:36 - suitable number which means we can
21:38 - actually omit this so i'm going to
21:39 - remove it but i want you to be aware
21:42 - that you can control that one thing you
21:44 - might be a little bit confused over now
21:46 - is that chatkit gave us the same data as
21:49 - we had in our dummy data however
21:52 - now we are actually indeed fetching it
21:55 - from chat kit
21:56 - and in order for you to really
21:58 - internalize this what i want you to do
22:01 - now is actually to fetch messages from
22:04 - your own instance and your own chat room
22:07 - and these keys that you obtain here will
22:09 - be the basis for the chat application
22:11 - you'll create later on so i basically
22:14 - want you to swap out the following
22:16 - values
22:18 - the room id
22:21 - the user id also the token url and
22:25 - instance locator
22:26 - however they're located in the
22:28 - config.js file
22:30 - so i'll add comment here and here swap
22:34 - out this one and this one
22:36 - and the way you do that is by first
22:39 - heading over to pusher.com chat kit and
22:41 - either scroll down to the signup area or
22:43 - click the sign up button here and you
22:45 - can actually click this slide to get to
22:48 - pusher.com chat kit
22:50 - once you've created an account you're
22:52 - taken to the dashboard and there you're
22:54 - going to click the create button and
22:56 - i'll create your very own chat kit
22:58 - instance which you'll give a name and
23:01 - once you've done that you're taken to
23:02 - the overview over your instance
23:05 - and the first key you're going to copy
23:07 - is this instance locator so click the
23:10 - copy icon right here and then head to
23:14 - config.js
23:15 - and swap it out right here
23:18 - then you want to scroll a bit down
23:20 - to the test token provider and here you
23:23 - need to check this box in order to
23:25 - enable the test token provider endpoint
23:27 - and you won't actually see it at all
23:30 - until you've checked this box so do that
23:33 - and then hit the copy icon go back to
23:36 - the code and swap it out here then
23:39 - scroll a bit up again enter username
23:42 - here hit create
23:44 - and then head over to app.js paste in
23:47 - your username here once you've created a
23:49 - user you'll be able to create a room
23:52 - give it a name and hit create and then
23:54 - this little alert box will pop up with
23:57 - the room identifier which you'll copy
23:59 - and paste in right here and then finally
24:02 - i want you to enter a message into this
24:04 - field here and hit send because that'll
24:06 - send the message manually to your chat
24:09 - room and it's important to understand
24:11 - that you won't be able to do this on my
24:13 - instance because only i have access to
24:16 - my instance dashboard and if you are to
24:18 - create a chat application you need your
24:20 - own instance you can't continue using my
24:23 - instance locator as it's through the
24:26 - instance you create rooms and i reckon
24:28 - you want your own rooms in your chat by
24:30 - the end of this and not share rooms with
24:32 - mine
24:33 - so go ahead and do all this now
24:35 - and when you run this code you should
24:38 - see the message you have entered in here
24:40 - appear in the console and then note down
24:43 - these
24:45 - which are fetching
24:47 - as we're going to use them later on as
24:49 - the basis of your very own chat app so
24:52 - good luck with this and i'll see you in
24:54 - the next screencast
25:00 - hey there
25:02 - now we've managed to fetch data from the
25:04 - chat kit api and log it out
25:06 - so that's good however what we want to
25:08 - do is actually take this data the
25:11 - messages store it in our component and
25:15 - then pass it down to the message list
25:18 - which is the component that's going to
25:20 - render this data out
25:21 - so
25:22 - we need to do something else than simply
25:24 - logging it out and specifically we need
25:26 - to add a state to this app component and
25:30 - state is one of two main ways of
25:32 - handling data and react the other one is
25:34 - called props and you'll be introduced
25:36 - that in a minute and throughout these
25:39 - introductions you might feel a bit
25:40 - confused at times in terms of what the
25:43 - difference is between state and props i
25:45 - at least was in the beginning and i
25:47 - found that the only way to really
25:48 - internalize this is to just see a lot of
25:50 - examples and write code yourself so i
25:52 - think as we move along it'll be clearer
25:54 - and clearer for you when it's suitable
25:56 - to use state and when it's suitable to
25:58 - use props but in short state is private
26:01 - for a component
26:02 - so
26:03 - our state which we're going to create
26:05 - now will only be state for the app
26:08 - component here and it's also possible to
26:10 - change the state from the component
26:12 - itself however props is not private it's
26:15 - shared between components and the
26:17 - component to have props can't change
26:19 - them directly themselves has to go
26:22 - through some kind of state change higher
26:24 - up in the hierarchy now this probably
26:26 - sounds very theoretical so let's
26:28 - actually just get started so you'll see
26:30 - it in action first thing we need to
26:32 - create is a constructor method
26:35 - the constructor is the very first method
26:37 - that is called in the life cycle of
26:40 - react components and it's actually a
26:42 - special method of es6 classes and it
26:45 - allows you to interact with the this
26:47 - keyword which points to the instance of
26:49 - this class however before we interact
26:52 - with this we have to call super and what
26:54 - super does is call the constructor
26:57 - function of the class
26:59 - which this class has been extended upon
27:02 - so that is the react dot component class
27:06 - so when we're calling super we're
27:07 - calling the constructor function in the
27:10 - react.component class
27:12 - and that sets stuff up for us so that we
27:15 - can start interacting with the state
27:18 - so we'll do this dot state
27:21 - and set that as an object what we're
27:24 - going to do here is we're going to store
27:26 - the messages
27:28 - in the state
27:29 - and we'll initialize it as an empty
27:31 - array what we now can do is for every
27:34 - new message we get from chat kit we'll
27:37 - do this dot set state and inside of this
27:41 - object we're describing how we want our
27:44 - new state to look like so we want the
27:46 - messages to change and what we want to
27:49 - do is actually add this latest message
27:52 - to the end of the this start state dot
27:55 - messages array
27:57 - so we'll use es6 and do this dot state
28:00 - dot mess address and then add the latest
28:03 - message at the end of this new array and
28:07 - you might be a little confused what
28:09 - these three dots here are that's called
28:11 - the spread operator that allows you to
28:14 - expand
28:16 - this.messages array to rather fit into
28:19 - the array we're creating here so you can
28:21 - look at it as if we're taking the
28:23 - this.messages
28:25 - which is encapsulated in two square
28:27 - brackets like here so if we didn't have
28:30 - the
28:31 - these three dots
28:33 - it would be like this they would just
28:35 - take up one item in this new ray
28:38 - but now with the three dots we're rather
28:41 - expanding it so that they forget about
28:44 - their old square brackets and just fit
28:47 - into this new array instead
28:49 - so this array is expanded to fill the
28:52 - brackets of this array definition rather
28:56 - than its old definition
28:59 - and this here basically creates a whole
29:01 - new array which contains no reference to
29:04 - the previous objects here as this is a
29:06 - new copy of this dot state dot messages
29:10 - with the latest message concatenated at
29:12 - the end
29:13 - and you might now ask so why didn't we
29:16 - just do like this
29:18 - list.messages.push
29:22 - message and that's because this push
29:24 - method would actually modify the
29:27 - original array so we'd modify the state
29:30 - using dot push you should never do that
29:32 - the only way you should modify the state
29:35 - is through this dot set state meaning
29:37 - that we need to copy
29:40 - this.state.messages and expand it into
29:42 - our new array while adding the latest
29:44 - message at the end
29:47 - so
29:48 - now that we have messages in our state
29:50 - and it's being updated as new messages
29:53 - comes along
29:54 - let's try and render out
29:57 - this. messages
30:01 - we run the code
30:03 - and there we can see that this.messages
30:06 - is being filled up with objects as
30:08 - they're added to the state in this on
30:10 - new message book let's remove this one
30:13 - here and this one here
30:15 - now what we want to do is pass this data
30:18 - down to message list and we're going to
30:20 - do that through props and the way you
30:22 - give a component props is through giving
30:24 - it what looks like an html attribute
30:27 - let's do messages equals
30:30 - then we have to escape out of the jsx
30:32 - again because there we're going to add a
30:33 - javascript array and it's of course this
30:36 - dot state dot messages
30:39 - now we can head over to the message list
30:42 - and let's try to swap the dummy data out
30:45 - with this
30:46 - dot
30:47 - crops dot
30:49 - mess address and run this code
30:52 - and as you can see we're getting the
30:55 - exact same data that we had and this
30:57 - does not come from the dummy data
30:59 - actually we can remove this one
31:02 - we can render it again and we're now
31:04 - fetching real data from the chat kit api
31:07 - and displaying it in our app the way it
31:08 - happens just to go through that quickly
31:10 - is whenever chat kit registers a new
31:12 - message in this chat room this event
31:14 - handler is triggered we're doing this
31:16 - dot set state taking the previous
31:19 - list.messages and concatenating it with
31:22 - the latest message so that this array
31:25 - here is updated and then when we render
31:27 - the message list component we pass along
31:29 - the messages by giving it a prop called
31:32 - messages giving it the value of
31:33 - this.messages
31:35 - the way react works is that every time
31:38 - this data here changes it'll trigger a
31:41 - re-render and the data will be passed
31:44 - down to the message list that'll trigger
31:46 - a re-render of message list and here
31:48 - we're simply mapping through that data
31:51 - this dot props dot messages remember now
31:54 - it's props it's not state because the
31:56 - state is private and can only live up in
31:59 - the app component and when you pass it
32:01 - down to components like this it is
32:03 - turned into props so we do this.props up
32:05 - messages map through it and just render
32:08 - it out as we did with the dummy data so
32:11 - we're moving along really fast here we
32:12 - already have an app which talks to the
32:15 - chat kit api that's pretty cool now in
32:17 - the next lecture we're going to turn
32:19 - this here into its own component namely
32:22 - the message component
32:29 - hey in this lecture we're going to
32:30 - finish up the message component here
32:33 - because as you remember when we broke
32:34 - down our ui into components we wanted
32:37 - each of the messages to be their own
32:39 - component as well and here i have the
32:42 - setup for that component however it just
32:44 - contains an empty div so what we need to
32:47 - do is
32:48 - move some of the content from here and
32:51 - into the message.js file
32:54 - or actually let's start by importing the
32:56 - message component into the message list
32:58 - file
33:02 - like that now actually render it out
33:04 - through doing
33:05 - a message like that so we're gonna
33:09 - replace this here with this component
33:12 - here
33:12 - and then
33:14 - fix up this component so that it renders
33:16 - out the stuff we want
33:18 - so the first thing we need is to move
33:20 - this key here over to the message and we
33:23 - also need to pass down some data we
33:26 - basically want the sender id and the
33:28 - text and now i'm actually going to call
33:31 - the sender id here for user name because
33:34 - i think it makes more sense to call a
33:36 - username
33:38 - message.sender id
33:40 - because a message component in itself
33:42 - should take a username prop and a text
33:45 - prop and it shouldn't care that here in
33:48 - the underlying data that's powering the
33:50 - message that it's called a sender id i
33:52 - think semantically it makes sense to
33:54 - call it a username whereas the text drop
33:59 - can easily be called text which is what
34:01 - it's also called in the data so this is
34:04 - the new stuff this is the old stuff
34:06 - let's now copy these two divs here and
34:10 - delete the whole thing
34:12 - and then go into message.js
34:16 - like that however
34:18 - now we're referring to message here and
34:21 - that center id that's wrong
34:23 - here we need to refer to
34:25 - this.crops.username
34:27 - and this.props.txt
34:30 - so let's run the code and as you can see
34:33 - it still works
34:35 - so now we've actually passed data down
34:38 - two steps
34:39 - starting from the app component where
34:41 - the data lived as state passed it down
34:44 - to the message list component as a
34:46 - messages prop in the message list we got
34:49 - access to the messages through this dot
34:51 - props dot messages we looped through it
34:54 - and then we passed some of that data
34:56 - namely the sender id and the text
34:59 - down to the message component as two
35:01 - different props username and text so in
35:03 - the message component we're doing
35:06 - this.props.username and this.props.txt
35:09 - now this is a really nice little
35:11 - component it's very stupid the only
35:14 - thing it knows is that it's supposed to
35:16 - render out a username and some text but
35:18 - it doesn't do anything else which is
35:20 - great according to the principle of
35:22 - single responsibility so what i want you
35:24 - to do now actually is to turn this into
35:27 - a so-called functional component because
35:30 - when a component doesn't have state or
35:33 - any life cycle methods or any other
35:35 - methods you can actually make it even
35:37 - simpler than a class can turn it into a
35:39 - function and given that functional
35:40 - components have so many constraints
35:42 - they're less prone to bugs and a lot of
35:45 - people prefer them over class components
35:47 - so go ahead and
35:49 - check out the documentation
35:52 - right here this link where functional
35:54 - components are described and try to
35:56 - change this to a functional component
35:58 - and once you've done it or given up
36:00 - resume back to the screencast then i'll
36:01 - show you how to do it as well so go
36:03 - ahead and do that right now
36:07 - okay hopefully you managed the task
36:09 - let's now see how we can turn this into
36:11 - a functional component gonna remove the
36:13 - class keyword and we're not gonna extend
36:15 - upon the react.component class
36:18 - we're just going to do good old function
36:21 - syntax and this is a function it can't
36:24 - have a render method so we're going to
36:26 - remove the render method as well
36:28 - and basically just return the jsx
36:31 - directly and the final thing we just
36:33 - need is the props which is the argument
36:36 - of the function
36:38 - that means that we don't refer to
36:40 - this.props.username we have to do
36:42 - props.username and props.txt there's
36:45 - actually no this inside of this function
36:48 - this is undefined so let's run this
36:51 - and boom it works
36:53 - so now you're really starting to get a
36:55 - lot of tools in your react.js toolbelt
36:57 - and in the next lecture you're going to
36:59 - learn about event handlers so stay tuned
37:02 - and i'll see you there
37:08 - hey in this lecture we're going to build
37:10 - out this send message form component
37:13 - that is the one which you can see down
37:15 - here
37:16 - so that's where you can write your
37:18 - messages as you can see we have the
37:20 - basic setup here already it's just a
37:22 - form with a class name and an input
37:24 - field which has a placeholder and it's
37:26 - of type text of course
37:28 - let's change this placeholder to
37:30 - something like
37:33 - enter like that it's a bit more
37:36 - descriptive okay so the thing with form
37:39 - elements is that they kind of keep their
37:42 - own internal state based upon the user
37:44 - input because
37:46 - when i type something in here the
37:48 - element needs to keep track of what i've
37:50 - typed in however as you know from
37:52 - learning about state in react we usually
37:54 - want to keep the internal state in well
37:56 - this dot state and if we rather control
38:00 - the content of an element like this in
38:02 - the components state we get a single
38:05 - source of truth and our application
38:08 - becomes less prone to bugs so let's take
38:10 - whatever the user inputs into this input
38:12 - field and shove it into the state of the
38:15 - send message form component
38:17 - what we'll then do is that we'll use the
38:19 - on
38:20 - change event handler
38:22 - this one basically says that whenever
38:24 - this input field changes whenever the
38:27 - value of it changes fire off whatever
38:29 - function we specify inside of these
38:32 - curly brackets let's do this dot handle
38:35 - change in here so this one is listening
38:38 - for changes in the input field and it's
38:41 - invoking this method whenever a change
38:43 - is fired however handle change hasn't
38:45 - been defined yet so we'll need to define
38:48 - it
38:50 - like this here we get access to the
38:52 - event and let's just log out e dot
38:56 - target dot value like that run the code
39:02 - as you can see it's now logging out
39:04 - whatever we type into the input field so
39:06 - now we only need to take this value here
39:09 - and add it to the component state and as
39:11 - you hopefully remember we need to create
39:13 - a constructor method in order to
39:15 - initialize the state
39:18 - like that and we need to call super then
39:20 - we can do this.state equals an object
39:24 - and it'll have one key called message
39:26 - like that and we'll initialize it as an
39:28 - empty string to begin with now let's see
39:31 - if we can update the state in this
39:32 - handle change method move this dot set
39:35 - state
39:37 - message and we'll set that to the e dot
39:40 - target dot value we run the code
39:43 - try to input something
39:45 - we're getting an error
39:46 - cannot set property set state of
39:48 - undefined and that is because the this
39:51 - keyword is undefined inside of this
39:54 - method it's not bound to the component
39:56 - instance which is up here in the
39:58 - constructor and that ties back to how
40:00 - javascript itself works and the way to
40:03 - solve this is through in the constructor
40:05 - do this dot handle change equals this
40:09 - dots handle change and then bind this
40:12 - which we do have access to in the
40:15 - constructor to this dot handle change
40:17 - method so now if we run the code
40:20 - try to input stuff
40:22 - hello we're not getting an error we can
40:25 - actually instead of controlling out that
40:28 - one here
40:29 - let's rather do this.message
40:33 - down here run the code
40:36 - and write that yo and we can see that we
40:39 - now in the render method have access to
40:41 - the state
40:42 - so what we'll do now might seem a bit
40:45 - weird but we'll actually set the value
40:48 - of the input field
40:51 - to this start state dot message
40:55 - now what this does is that we are
40:57 - controlling the value in the input field
41:00 - programmatically so that it can only be
41:03 - whatever we have in the state at any
41:05 - given time so if we run it now it
41:09 - works well
41:10 - however what's happening here is that
41:12 - when the on change event listener is
41:14 - triggered we invoke the handle change
41:17 - method it updates the state
41:20 - and then react triggers a re-render in
41:23 - which the value which is passed in to
41:26 - the input field here has been changed
41:28 - and thus it's updated in the ui so it's
41:32 - going through the state before your
41:34 - keystroke turns into a change in the
41:36 - user interface like that
41:38 - so now we have what's called a
41:41 - controlled component we're controlling
41:43 - how it works we don't have any duplicate
41:45 - state and where the input field keeps
41:48 - track of its state and the component
41:50 - keeps track of its state and we don't
41:52 - have to hope for the two states to match
41:54 - we know that they will always match
41:56 - so the next thing we need to do is hook
41:59 - an unsubmit event listener onto the form
42:02 - so that when they hit enter
42:04 - we'll take the message and send it off
42:06 - or we'll at least in this lecture
42:08 - prepare the sending off and then in the
42:10 - next lecture we'll see how we can send
42:11 - it off to chat kit the way we'll do this
42:14 - is very similar to what we did
42:16 - previously we'll do on
42:18 - submit as that's the event listener for
42:22 - forms and we'll do this dot handle
42:24 - submit then
42:26 - handle submit create that one here here
42:30 - we first want to
42:32 - prevent default
42:35 - and
42:36 - then we want to
42:37 - send off
42:39 - message somehow and we of course need to
42:42 - bind this method to
42:44 - this as well
42:48 - like that so that we in this handle
42:51 - submit event handler get access
42:54 - to
42:56 - this.message as that's the message we're
42:58 - gonna send off
43:00 - so let's remove this one
43:03 - run the code
43:06 - hello
43:07 - submit and there we logged out from this
43:10 - place right here now finally i want to
43:13 - point out that the on submit and on
43:16 - change are event listeners provided by
43:18 - react and they are wrappers on top of
43:21 - the native event listeners which you
43:23 - write without the capital c and s
43:26 - however this dot handle change and let's
43:28 - not handle submit could have been called
43:30 - whatever we want could have done for
43:31 - example handle form
43:33 - handle
43:34 - form
43:36 - run the code
43:38 - oops then i also have to fix this one
43:41 - like that run the code
43:44 - and submit and it works
43:46 - so these names are created by me which
43:49 - on submit and unchange needs to be
43:51 - called exactly that
43:52 - let's go back to handle submit
43:55 - i like to have the event listeners and
43:57 - event handlers
43:58 - resemble each other though only with
44:01 - swapping out on with handle as i think
44:04 - that's a good practice which makes the
44:06 - code readable and understandable
44:08 - so in the next lecture we're going to
44:10 - learn how to take our messages send them
44:12 - off to the chat kit servers so that the
44:14 - message is broadcasted to everybody who
44:17 - is a part of this chat room so i'm
44:19 - looking forward to see you there
44:25 - hey let's now learn how we can take our
44:27 - messages and send them off to track it
44:30 - we have set up the send message form so
44:32 - that we're ready to do that down here
44:34 - but we gotta change the app.js a little
44:36 - bit as well because as you might
44:38 - remember the interaction with the chat
44:40 - kit api
44:41 - happens through this current user object
44:44 - and that's one which we got access to in
44:46 - the component and mount method as we get
44:48 - access to it after we get connected with
44:50 - the chat manager however it's only
44:53 - available inside of this scope right
44:54 - here and that's not good we want it to
44:57 - be available to the entire component
44:59 - instance because we're going to do
45:02 - currentuser.sendmessage in order to send
45:03 - messages so in order to do that we have
45:06 - to do a couple of things
45:07 - first we gotta do this dot
45:10 - current user
45:11 - equals to current user so we're taking
45:14 - the current user and simply hooking it
45:16 - on to the component itself and
45:19 - by doing that we can for example create
45:21 - a new method
45:22 - send message
45:24 - we'll simply do this not current user
45:27 - dot
45:28 - send message like that
45:30 - that's of course only possible since we
45:32 - did this here
45:34 - and actually for the sake of consistency
45:36 - let's also do
45:38 - this.currentuser.subscribedroom here
45:40 - however you probably know what we need
45:42 - to do in order to enable the send
45:44 - message method to have access to this
45:46 - keyword we of course have to bind it
45:51 - so now we have access to this inside of
45:53 - send message that enables us to get the
45:56 - current user object and call the send
45:59 - message method and inside of that we're
46:01 - going to specify two things that is the
46:04 - text we want to send
46:06 - like
46:07 - this and we'll get that as an argument
46:10 - of the send message function and we're
46:12 - also going to specify the room id and
46:15 - for now i'm just going to hard code that
46:17 - in and as you probably remember es6
46:20 - allows us to omit this one here when the
46:23 - key and the variable that holds the
46:25 - value are identical so you can do like
46:28 - this
46:29 - and now comes a concept which i
46:31 - struggled understanding and i know that
46:33 - a lot of people find it hard to wrap
46:35 - their heads around because as you've
46:36 - experienced here
46:38 - when we've sent the messages down as a
46:40 - prop to message list data flows in one
46:43 - direction in react from parent that's
46:46 - the app.js to child which are these here
46:49 - however now we're in a position where we
46:51 - somehow need to get the data from down
46:54 - in the message form that being the data
46:56 - we're storing in the state here and we
46:58 - need to send that up to the app.js
47:01 - component because that's the one that
47:03 - will send this data off to chat kit so
47:06 - this is called the inverse data flow in
47:09 - react and there's a couple of ways of
47:11 - looking at this conceptually either that
47:13 - we're sending a method down or that
47:15 - we're reaching up from child to parent
47:18 - in order to trigger a method so what
47:20 - we'll do is we'll take this send message
47:22 - and send it down
47:24 - message as a prop is not send message
47:28 - like that now send message form will get
47:31 - access to this method which again has
47:34 - access to this dot current user.send
47:36 - message in the send message form down
47:38 - here we'll do this dot ops dot send
47:42 - message
47:43 - passing in this dot state dot
47:47 - message because remember restoring the
47:49 - message
47:50 - in the state so you can either look at
47:52 - it as if we're down here in the send
47:55 - message form or kind of reaching our
47:57 - hand up to
47:59 - this method here or you can look at it
48:01 - on a conceptual level that app.js is
48:04 - passing down this method so that send
48:07 - message form can borrow it but either
48:09 - way the data kind of flows the wrong way
48:12 - from child to parent so that's why they
48:15 - call it inverse data flow okay let's try
48:17 - it out
48:20 - are you watching the game
48:23 - tonight
48:24 - enter
48:25 - oops room id
48:26 - also type
48:29 - oops spelling mistake i've written rude
48:31 - id
48:33 - room id
48:34 - let's try it again run the code again
48:37 - and hit enter
48:39 - boom
48:40 - that worked we now send the message off
48:42 - to chat kit via this dot current user
48:44 - not send message and then since we are
48:47 - listening for new messages here and
48:49 - setting the state adding the latest
48:51 - message to the state here that state got
48:54 - updated which again triggered a
48:56 - re-render so that this message list also
48:59 - got re-rendered
49:00 - and it results in four messages being
49:02 - displayed in the chat instead of
49:04 - adjusting three a final thing i want to
49:05 - do in the send message form is that once
49:08 - we've sent it we want to clean up the
49:09 - input field so we'll do this dot set
49:12 - state
49:14 - message
49:15 - and turn that into an empty string again
49:17 - now if we run it
49:20 - i hope so
49:23 - like that the input field is
49:25 - automatically blanked out after the
49:26 - message has been sent
49:28 - so we're starting to get a really cool
49:30 - chat application here the next step now
49:32 - is to start creating the room list and
49:34 - also enable you to create new rooms so
49:37 - i'll see you in the next lecture
49:44 - in this lecture we're going to fetch out
49:46 - all the rooms in our chat kit instance
49:48 - and then display them in this room list
49:50 - component here
49:52 - which you can see the skeleton for right
49:55 - here so as you know all communication
49:57 - with the api happens in the app
49:59 - component or only smart component and it
50:01 - happens through the this dot current
50:04 - user object so what we'll do is
50:07 - this
50:08 - dot current user dot
50:11 - get drainable rooms like that that
50:14 - returns a promise
50:16 - and when that promise has been resolved
50:18 - we get access to the
50:20 - drainable rooms like that
50:23 - what we then want to do is add these
50:25 - drainable rooms to the state
50:27 - we'll do this dot set state
50:30 - joinable rooms like that however
50:33 - drainable rooms aren't the only rooms in
50:35 - this chat kit instance
50:37 - they are just the rooms that we haven't
50:40 - joined yet that this
50:42 - user here hasn't joined yet though in
50:45 - our instance there might be other rooms
50:47 - as well namely rooms that this user has
50:50 - joined
50:51 - and they are available in this dot
50:54 - current user.rooms so let's add them to
50:56 - the state as well we'll call it join
50:58 - rooms
51:00 - and we'll find them in this dot
51:02 - current user
51:04 - dot rooms and now that we're setting
51:07 - these in state you also have to
51:08 - initialize them
51:10 - joinable rooms
51:13 - joined
51:14 - rooms
51:15 - like that
51:16 - now i also want to add a couple of cache
51:18 - statements here
51:24 - that
51:26 - and
51:27 - down here
51:30 - on connecting we now have multiple
51:33 - promises in this method and if any of
51:35 - them fail we're going to get a hint of
51:37 - what's going on and this
51:39 - componented mount is starting to get
51:41 - pretty massive so we're going to
51:43 - refactor it a little bit later on if you
51:45 - find it to be a bit confusing a bit
51:47 - bit too massive don't worry we'll clean
51:49 - it up afterwards for now though let's
51:51 - see if we're able to send these rooms
51:53 - down to the room list component so what
51:56 - we'll do is we'll give the room list
51:57 - component a prop called rooms
52:02 - in it we'll use the spread operator to
52:05 - combine the two arrays of this dot
52:07 - state that joinable rooms with
52:13 - this.join rooms like that now in the
52:16 - room list
52:17 - we can
52:19 - log out
52:20 - this stop scrops dot rooms
52:24 - run the code and see that we're indeed
52:26 - logging out
52:27 - after a few renders an array filled with
52:30 - objects which probably is our rooms
52:33 - so now we need to render the rooms right
52:35 - here and to do that we're going to do
52:37 - the exact same thing we did with the
52:38 - messages
52:40 - this dot props dot rooms dot math we get
52:43 - access to the room in the callback
52:45 - function where we're going to return
52:48 - list item
52:50 - just wrapping around an anchor tag which
52:53 - goes to nowhere but which contains room
52:56 - dot name and as we're using list items
52:59 - here we need to add an unordered list
53:02 - just wrapping these
53:04 - and i also want to have
53:07 - an h3 which says your rooms we also need
53:10 - to give this list item a key as you know
53:13 - we use room dot id and for styling
53:16 - purposes we'll give it a class name of
53:19 - room like that so let's try to run the
53:22 - code
53:25 - beautiful we're now rendering out a list
53:27 - of all the rooms we have in our chat kit
53:29 - instance this is both the ones i have
53:31 - joined and the ones i can join and it
53:34 - looks really nice actually so in the
53:36 - next lecture we'll look at how to join a
53:39 - specific room display the messages from
53:41 - that room and also send messages to that
53:44 - room so you can jump in between rooms
53:47 - and chat as much as you'd like so we're
53:49 - actually starting to approach a fully
53:51 - functional chat app
53:57 - hey in this lecture we're going to learn
53:59 - how to subscribe to specific rooms so
54:02 - that we can click on them and start
54:03 - chatting in them and to do that we need
54:05 - to work a little bit with all the code
54:07 - we've added to
54:09 - mount because now we're just
54:10 - automatically subscribing to this
54:13 - specific room when the component mounts
54:15 - that's why we get these messages here by
54:18 - default but what we want to do is that
54:20 - when you enter into the app you
54:21 - shouldn't automatically subscribe to a
54:23 - room you should make a conscious choice
54:25 - of clicking on the room you want to
54:27 - subscribe to so the first thing we need
54:29 - to do is remove this subscribe to room
54:32 - method this piece of code here
54:35 - and create
54:37 - a
54:38 - subscribe to
54:40 - room method paste that in there
54:43 - now let's just call this from here to
54:47 - see that it works
54:48 - and of course as always we need to
54:50 - remember to bind this
54:54 - like that
54:55 - like that
54:57 - let's run the code as you can see we're
54:59 - automatically subscribing to that room
55:02 - so our method works
55:05 - now what i also want to do is pull out
55:07 - this one here and turn that into its own
55:09 - method as well
55:10 - call it
55:11 - get rooms
55:16 - and then also replace this code with
55:17 - this subject
55:19 - that
55:21 - and of course
55:25 - bind it
55:27 - so now we have a much more manageable
55:30 - component and mount method and what we
55:32 - want to do is enable the user to click a
55:34 - room and thus subscribe to it so we need
55:36 - to pass down the subscribe to room
55:39 - method down to the room list so
55:42 - subscribe to room equals this dot
55:46 - subscribe to room now let's make this a
55:49 - bit more readable like that and inside
55:52 - the room list when you click on this
55:54 - anchor tag here
55:56 - on click
55:59 - this stop props not subscribe to
56:03 - room and then pass in the room dot
56:07 - id
56:08 - so
56:09 - here we're using an anonymous function
56:11 - to wrap this function call here because
56:14 - if we were to do like
56:17 - this this here would be called
56:19 - immediately when this component renders
56:21 - so we only want to call it on the click
56:24 - event
56:25 - so on a quick event this anonymous
56:27 - function gets invoked which again
56:29 - invokes this one and we actually don't
56:32 - need those two curly brackets there
56:35 - so let's also
56:37 - readable i like to
56:39 - add them to multiple lines if i have
56:41 - more than one attribute or prop on these
56:44 - jsx elements
56:46 - and we can do like that
56:48 - now
56:49 - this.props.subscribe to room we'll call
56:52 - subscribe to room up here then we also
56:55 - need to pass in the room id as we pass
56:59 - that along and just replace this one
57:01 - with the room id and now we should be
57:03 - able to subscribe to rooms through
57:06 - clicking on
57:08 - these items here meaning we'll actually
57:11 - remove this first subscribe to room
57:15 - from the componented mount we now want
57:18 - to enable the user to do that instead of
57:20 - doing it automatically so we'll run the
57:22 - code
57:23 - and click on nfl and as you can see we
57:26 - got messages from that chat room
57:28 - beautiful
57:29 - now if we head into welcome as well
57:32 - we'll see that we have a buggy
57:35 - so the welcome messages was placed after
57:37 - the nfl messages that's not good that's
57:40 - because when we subscribe to a room and
57:42 - we get our own new message event
57:44 - listener we're simply just continuing to
57:46 - append new messages to the state
57:48 - so what we need to do before we
57:51 - subscribe to room is clean up the state
57:57 - set the messages to an empty array again
58:00 - now if we run it
58:02 - into nfl
58:04 - oops
58:06 - this.messages is not a function of
58:08 - course i have to do this.setstate
58:12 - like that
58:13 - well
58:15 - welcome yes
58:16 - now it works
58:18 - what we now need to do
58:20 - is to make sure that we keep the
58:22 - joinable rooms and joined rooms properly
58:25 - updated because the list you can see
58:28 - here contains both the rooms you have
58:30 - joined and the rooms you can join
58:33 - and they look for this app completely
58:36 - similar regardless of whether or not you
58:38 - have joined it and the thing is when you
58:40 - subscribe to a room that means when
58:42 - you're listening for messages and
58:44 - displaying them here you're
58:45 - automatically joining it as well
58:48 - so if there's a room that i haven't
58:49 - joined yet let's say for example this
58:51 - nba room and i joined that then
58:54 - these two joinable rooms and joined
58:56 - rooms should change one room from the
58:59 - joinable rooms should be extracted and
59:01 - put into the joined rooms array so after
59:04 - i've subscribed to a room we actually
59:07 - need to call this get drainable rooms
59:08 - again
59:10 - and update the state in case one of the
59:13 - rooms are due switch array so here this
59:16 - subscribe to room returns a promise
59:19 - then then we get access to the room and
59:21 - there we'll simply do this dot get rooms
59:25 - like that
59:27 - let's also add a catch here
59:34 - like that and now we should be keeping
59:37 - track of the rooms correctly
59:39 - what we then need to do is to make sure
59:41 - that we can send messages to the correct
59:43 - room
59:44 - because right now when we're triggering
59:46 - the send message we're just hard coding
59:48 - in that we're sending a message to this
59:51 - specific room and that of course doesn't
59:53 - work and the answer to that is also to
59:55 - be found in this callback function here
59:58 - because what we then can do is we can do
60:00 - this dot set state
60:02 - and we can keep track of which room
60:04 - we're currently at by doing
60:06 - room id and setting it to the room dot
60:09 - ib
60:10 - now we need to add this to the state
60:12 - when we're initializing it as well room
60:14 - id let's just initialize it as null
60:17 - and when we send a message just this dot
60:20 - state dot
60:22 - room id
60:24 - so let's try this oh i haven't joined
60:26 - any rooms yet because we haven't called
60:28 - subscribe to room
60:30 - if i click nfl for example oh reference
60:32 - error error isn't defined
60:35 - let's see
60:37 - oh i had three r's here
60:39 - we run it again
60:41 - i click nfl
60:44 - there is not defined
60:47 - yet again
60:49 - oops i did a weird mistake here i didn't
60:52 - wrap this in the console log
60:56 - now let's try it
60:59 - nfl and i'm getting the messages
61:02 - yes
61:04 - and yes i'm able to chat in that room as
61:07 - well let's try the premier league one
61:11 - totally
61:13 - it works brilliant so now i can change
61:16 - jump around to any room i want and chat
61:19 - with the people in the room
61:20 - championship random nba general so this
61:25 - is really cool however there are two
61:28 - more things we need to fix in order to
61:30 - make our room list component complete
61:32 - namely making sure that these rooms are
61:35 - always displayed in the order we want
61:37 - them to be displayed in and that we're
61:39 - highlighting which room you're currently
61:40 - at so in the next screencast we'll fix
61:43 - both those things
61:50 - hey in this lecture we're gonna fix a
61:51 - couple of things in our room list
61:53 - component and the first one being that
61:55 - if i now paste in a new username here
61:57 - which hasn't joined any rooms yet
62:00 - however it has been created on this
62:02 - instance in the chat kit web interface
62:04 - so it is a part of this instance though
62:06 - it hasn't joined any rooms what will
62:08 - happen is that when i run the code
62:11 - and i try to join any rooms
62:15 - you can see that
62:16 - the rooms seem to shuffle around
62:19 - that's not a good user experience
62:21 - and it's because rooms jump from being
62:24 - joinable rooms to being joined rooms
62:27 - and namely happens in this dot set state
62:30 - here when we have fetched out the
62:32 - joinable rooms after the user has joined
62:35 - the room and
62:37 - this.currentuser.rooms is by the way
62:39 - updated automatically but the point
62:41 - being that an object has jumped from
62:45 - here to here and thus the order of this
62:49 - dot props dot rooms down in room list
62:52 - which we are mapping through here has
62:54 - changed so
62:56 - the order in the user interface will
62:58 - change and the way to solve this is to
63:00 - create an ordered array up here
63:04 - called order rules equals
63:06 - this dot props dot rules and we'll use a
63:09 - spread operator since we're now going to
63:12 - sort this array and we're going to pass
63:15 - it a compare function
63:17 - which takes two arguments and here we're
63:20 - allowed to tell this algorithm how we
63:22 - wanted to sort our new array
63:26 - we're going to sort it by id
63:28 - the way it works is that if this returns
63:30 - a negative number then a will be seen as
63:33 - less than b according to our sort
63:35 - function or if we return a positive
63:37 - number then a will be seen on as greater
63:39 - than b and it'll sort it accordingly so
63:42 - now it should sort our rooms in
63:44 - ascending order based upon their ids
63:47 - and we need to create a new array as
63:49 - sort would indeed modify the original
63:52 - array and you should never modify props
63:55 - so then we'll take the ordered rooms and
63:58 - swap this out here
64:00 - we'll run the code
64:04 - now let's try joining
64:07 - seems to be working really good
64:10 - they don't jump around cool
64:12 - so now you only have one more thing left
64:15 - and that is to highlight which room
64:17 - you're currently at
64:19 - because right now we don't really know
64:21 - which room we're at
64:22 - let's click welcome and what we want to
64:25 - happen is for this item here to glow up
64:28 - a little or to change color
64:30 - the way we do that is we're going to
64:32 - give this list item class of active
64:36 - if this
64:38 - item which is rendered also is the
64:41 - same as the
64:43 - room id meaning that it's the one we're
64:45 - chatting in at that point of time what
64:47 - we'll do is we need to pass down
64:50 - room id
64:52 - from this.room
64:55 - id
64:56 - then we'll go back to room list and here
64:59 - const active
65:01 - and if this that crops that room id
65:06 - equals to room dot id then we're going
65:09 - to return active
65:11 - otherwise return
65:13 - an empty string
65:15 - and
65:16 - we'll now do
65:18 - here just very easily
65:21 - concatenate those two strings together
65:23 - so if it's looping through the current
65:26 - active room then it'll give an active
65:28 - class to this list item here
65:31 - let's run the code
65:33 - we hit the welcome room and boom it's
65:36 - now white as we have styled it in the
65:38 - css so that the list item should be
65:40 - white if it has the class of active
65:43 - so that was it i hope you learned
65:44 - something and i'll see you in the next
65:46 - lecture
65:52 - hey in this lecture i'm going to show
65:54 - you a trick for automatically scrolling
65:56 - down to the bottom when new messages
65:58 - appear like for example this um right my
66:02 - name is pear
66:04 - hitting enter
66:06 - nothing apparently happened however if i
66:08 - scroll down oh there was the message and
66:11 - i sent it as jane smith so rather my
66:15 - no my name is jane send it again
66:20 - didn't seem to appear but it actually
66:21 - has appeared
66:23 - so we need to automatically jump down
66:26 - let's go in here actually and
66:28 - move this back to her morgan that's me
66:32 - and the way we solve this is through
66:35 - adding the component did update
66:39 - method now this is yet another of the
66:41 - life cycle methods in react and it's
66:43 - called directly after a component has
66:46 - been updated so this is a nice time for
66:49 - scrolling down if you want to do that
66:51 - and first we need to grab hold of the
66:53 - message list component itself dom node
66:56 - basically so do const node
66:58 - and we'll use method of the react dom
67:01 - library
67:02 - dom and we need to import that
67:05 - react dom from react um like that
67:10 - find dom node and pass in this and what
67:14 - we're then going to do is set the node
67:16 - dot
67:17 - scroll top
67:19 - equal to node dot scroll height
67:22 - so the scroll prop is how far we've
67:25 - scrolled down and the scroll height is
67:27 - how long our entire
67:29 - scrollable element is so when we're
67:31 - setting the scroll top to equal the
67:34 - scroll height we're actually scrolling
67:35 - as far down as possible as we can and
67:38 - the scroll height is actually measured
67:39 - from the top so it can't actually be as
67:42 - far from the top as the entire height
67:45 - but that doesn't matter this will
67:47 - basically scroll the window all the way
67:48 - to the bottom so let's run the code join
67:51 - the room
67:52 - now we are scrolling to the bottom
67:54 - if we try to write my name is pair
67:58 - we'll scroll down however there are
68:01 - certain situations where we don't want
68:03 - this action to trigger for example let's
68:05 - say i'm reading through all the messages
68:08 - up here and then suddenly a new message
68:10 - appears at the bottom
68:12 - now what i'm going to do now i'm
68:13 - actually going to head into another
68:14 - window which you can't see here at
68:16 - scrimba and then i'm going to write a
68:18 - message from that client so i've
68:20 - connected from that client as well so
68:22 - just sit tight
68:25 - i'm going to write
68:29 - another message
68:30 - and send it and boom suddenly this was
68:33 - sent from another client another browser
68:34 - basically which i couldn't show you via
68:36 - scrimba but it was a little bit annoying
68:38 - that when i was reading messages up here
68:41 - suddenly i got pulled down to the bottom
68:43 - so what we want to do is check if i'm
68:45 - also somewhere near the bottom and in
68:49 - such case we'll jump down if i'm far up
68:51 - here we'll just keep appending messages
68:54 - down below and i'll actually have to
68:55 - scroll down to see them
68:57 - and perfect place for doing this is
68:59 - component will update
69:02 - and that is triggered right before the
69:04 - component has been updated and here we
69:06 - can check where i am in the scroll
69:08 - position
69:09 - so first we need to grab hold of the
69:11 - node here as well and we'll do
69:14 - this that
69:15 - should scroll
69:17 - to bottom
69:19 - and if our node scroll top that's how
69:22 - far we've scrolled down and our
69:25 - node.client height that's the
69:28 - height of our window here so now if we
69:32 - scroll down 20 pixels or something now
69:35 - our scroll top is 20
69:38 - and our client height is this entire
69:40 - window and it's maybe
69:42 - 350 pixels so let's say that this in
69:45 - total is 370 pixels if that is greater
69:49 - than or equal
69:50 - to the no dot
69:52 - scroll height
69:54 - is the entire element meaning that we
69:58 - are actually at the bottom since how far
70:00 - we have scrolled down
70:02 - plus the height of this window here
70:05 - equals the entire box
70:08 - or more than or equal that's just in
70:11 - case we by some reason managed to scroll
70:13 - further down
70:14 - then
70:15 - we should scroll to bottom so we'll do
70:17 - here if
70:18 - this dot scroll to bottom
70:21 - then we're going to do this
70:26 - now let's run the code
70:29 - now we're in the welcome room
70:32 - hey
70:33 - boom we're scroll down but if we
70:36 - now scroll a bit up and we write yo
70:39 - ah
70:40 - it actually worked we didn't auto scroll
70:43 - and finally i want to give a little
70:44 - buffer so in case we're down here we're
70:46 - almost at the bottom
70:48 - we still want it to jump down
70:50 - so we'll do that by adding plus 100 here
70:54 - and now
70:56 - therefore
70:58 - almost at the bottom
71:00 - at the bottom
71:02 - it worked as well
71:03 - really nice so now we're starting to get
71:05 - a chat application which actually has a
71:08 - good user experience so then the final
71:10 - feature is to make this new room form
71:12 - work and after we've done that we're
71:15 - done with all the javascript and i'm
71:17 - going to show you how to modify this
71:19 - chat room so that you can create your
71:21 - very own chat room both in terms of
71:23 - layout and theme so you basically can
71:26 - start chatting with your friends with
71:27 - your homemade chat application so it
71:30 - seems i'll be holding my promise i gave
71:31 - you in the beginning that you will end
71:33 - up with your very own custom personal
71:36 - chat application at the end of this
71:37 - course
71:38 - so i'm looking forward to see you in the
71:40 - next screencast i'll see you there
71:47 - hey in this lecture we're going to build
71:49 - out the new room form component which
71:51 - basically allows you to type in the name
71:53 - for a room and then it'll pop up here
71:55 - and you can start chatting in that room
71:57 - and people who are part of this chat kit
71:59 - instance can also join that room and
72:00 - chat with you and they can of course
72:02 - also create rooms so this will be very
72:05 - similar to how we did the
72:07 - send message form so i'm going to go
72:09 - quickly through how we'll build out the
72:11 - new room form
72:13 - as you remember we prefer to create
72:15 - controlled components so we're going to
72:16 - give this one an on
72:19 - change handler and i'm going to trigger
72:21 - this dot handle
72:23 - change
72:24 - which is a method we'll write here
72:27 - in it we'll do this dot set state
72:30 - and
72:31 - set the room name
72:33 - to e dot target dot value
72:36 - now
72:37 - we cannot work with state without doing
72:39 - super in the contractor
72:41 - like that
72:43 - super and also initialize the state
72:47 - to
72:48 - room name we call an empty string
72:51 - next up we need an on submit event
72:54 - listener on the form we'll do this dot
72:56 - handle
72:57 - submit and there
73:00 - we'll simply
73:02 - first prevent default
73:06 - and then we'll tell the app component
73:08 - that we want to create a new room and
73:09 - the way to do that as you remember
73:12 - is to pass down a method from the app
73:14 - component down to the child component so
73:18 - create room like that
73:21 - not write any code here
73:24 - yet let's just pass this down
73:29 - create room so that we have the
73:31 - architecture
73:32 - and
73:33 - also we need to remember
73:35 - to bind this
73:39 - that and that
73:42 - now in this
73:45 - room form we'll do this dot props dot
73:48 - create
73:49 - room passing in the name which we have
73:52 - in this state dot
73:54 - room name
73:56 - so now
73:57 - let's
73:59 - in the app component room name
74:02 - do a logging
74:04 - of the room name
74:06 - just to see if we can make it work
74:09 - i think
74:11 - oops cannot read properly set state of
74:13 - undefined what have i done
74:15 - it has to be down in the new room form
74:18 - this dot
74:19 - of course i forgot to
74:22 - bind this
74:23 - in our two event handlers
74:25 - that's how it is to code sometimes
74:28 - a lot of things to remember
74:30 - and we'll copy this and
74:34 - handle submit like that we'll run it
74:37 - again
74:38 - and
74:39 - my new room like that hit enter and boom
74:43 - room name my new room so we are able to
74:46 - connect the two components and pass down
74:49 - the method for creating new rooms so now
74:51 - the final thing to do is to just
74:54 - create a new room
74:56 - do that through yet again use this dot
75:00 - current user and it has a method called
75:03 - create group in it we'll pass in
75:06 - the name of the room
75:08 - room
75:08 - name what we actually can do now we can
75:10 - rather call this for name and omit this
75:13 - one here and it returns a promise
75:16 - and when that promise resolves we get
75:19 - access to the room and what we're going
75:21 - to do here is subscribe to that room
75:24 - because i think that's a good user
75:26 - experience when you create a room we
75:28 - instantly jump into it and luckily as we
75:30 - have extracted the subscribe to room
75:33 - functionality in a method of itself
75:35 - we'll just do this dot subscribe to room
75:39 - passing in the room dot id and let's
75:42 - also add a cache here
75:44 - if we get an error we're going to
75:45 - console log out or with create
75:50 - room
75:51 - log out the error
75:52 - now let's run the code
75:54 - and let's say that i'm a huge fan of the
75:57 - world cup
75:58 - let's
75:59 - like that and there we have a whole new
76:02 - room called world cup
76:04 - who'll win i'll ask
76:07 - and i can chat in that room and now i'm
76:09 - actually going to go to another tab you
76:10 - won't be able to see that but i'll log
76:12 - in as another user in this chat room and
76:15 - then i'll send a message
76:21 - brazil that's what i sent and that
76:22 - popped up here immediately so this chat
76:25 - works however finally we need to empty
76:28 - this input field once we've submitted it
76:31 - and we know of course how to do that
76:32 - it's super simple this dot
76:35 - start set state
76:37 - room name
76:39 - like that
76:41 - all right
76:43 - champions
76:45 - league
76:48 - and it didn't get
76:55 - oh
76:57 - so i noticed that i in my rush
77:00 - had made a mistake because i've actually
77:02 - forgotten to
77:04 - set the value here explicitly
77:07 - meaning
77:08 - but i haven't done like this this.room
77:12 - name
77:12 - this wasn't a fully controlled component
77:16 - as we only sent the state from this
77:18 - input field
77:19 - to the component state we didn't go full
77:23 - circle and set the value based upon the
77:26 - state as well so that was an error on my
77:27 - side and it can serve you as an example
77:30 - of when you're trying to do something
77:32 - quickly when you think you know easily
77:34 - how it's done because you've done it
77:35 - before because i had done it in the send
77:37 - message form before then i was in such a
77:39 - hurry that i forgot this
77:42 - and there's a lot of things to remember
77:43 - when you're coding and it's not a good
77:45 - idea to think that you have everything
77:46 - under control you've got to pay
77:47 - attention to the details and double
77:49 - check so that you can find those small
77:51 - little things you've forgotten to do but
77:53 - which opens up the app for bugs
77:55 - so let's try it out
77:58 - we'll write
78:00 - gold for example
78:01 - submit it
78:02 - and boom as you can see there it is
78:05 - while the new room form has been cleared
78:07 - out now finally i want to change this to
78:10 - create a room like that
78:13 - so now we're almost finished with all
78:15 - the javascript of this course just think
78:17 - there's one last thing we should do and
78:19 - that is before you have joined the room
78:22 - it should say join a room here and if we
78:25 - try to input something and try to send a
78:27 - message to the chat kit api we'll get an
78:29 - error because we haven't defined which
78:31 - room we're sending that message to so to
78:33 - fix this we'll first head over to the
78:36 - message list
78:37 - and here in the render method we want to
78:40 - check if we actually have chosen the
78:42 - room so then we need to pass down the
78:45 - room id
78:48 - like this
78:52 - and
78:56 - if
78:58 - this dot props that room id
79:01 - here i'm checking if this.props.room id
79:04 - is a full c value so not a truthy value
79:07 - then render this stuff out
79:10 - here or return this stuff here
79:13 - return
79:15 - and this is just the div wrapper and
79:17 - i've created another div which has a
79:19 - left arrow and the text join the room in
79:22 - it and then we'll just close this off so
79:25 - like that let's try and run it
79:28 - nice you get this join the room when you
79:30 - join room it disappears and then in
79:32 - order to disable the input field before
79:35 - we have joined the room i'm going to
79:37 - have to head down to send message form
79:39 - and the way we disable an input field is
79:41 - by giving it an attribute called
79:43 - disabled
79:45 - and if it's true it'll be disabled so
79:47 - what we'll send down here from app is
79:49 - actually a prop called disabled
79:52 - and we'll give it the opposite value of
79:55 - this dot state dot room id
79:58 - because if the room id is null
80:01 - then
80:02 - this will evaluate to true
80:04 - meaning this disabled will be true
80:07 - and this that drops without disabled
80:10 - will be true so let's try this
80:14 - now just join the room and i can't enter
80:17 - anything into this input field
80:19 - if i join championship for example
80:23 - i can
80:24 - brilliant
80:26 - so that was actually the last piece of
80:28 - javascript we needed to add to our app
80:30 - in the next lecture we're going to start
80:33 - modifying the chat room using css
80:36 - variables in css grid so that you can
80:38 - create your very own personalized chat
80:41 - application which is just the way you
80:43 - like it
80:49 - hey as we now have built out all the
80:51 - features of our chat app it's time for
80:53 - you to get your own copy of the code so
80:55 - that in the next couple of screencasts
80:57 - when i'll show you how to customize the
80:59 - layout of the app you'll be able to do
81:01 - that on your very own copy and not using
81:04 - my code and i'm going to explain you
81:06 - this through using slides so the first
81:09 - thing you want to do
81:10 - is click the settings icon here at the
81:13 - top of the left sidebar that'll open up
81:15 - this menu and click on the clone
81:17 - workspace
81:19 - that'll open up a modal i want you to
81:21 - select a playground and then give it a
81:23 - title
81:24 - and hit the confirm button
81:26 - and then you'll be taken to your very
81:28 - own scrimba playground and you might
81:31 - have to sign in if you haven't done
81:33 - already as this will be saved to your
81:35 - profile you'll see your avatar here in
81:37 - the top right corner
81:38 - and you can also find this playground
81:40 - from your own profile and then the next
81:42 - step is to connect this playground
81:45 - to your own chat kit instance and if you
81:48 - followed along in screencast number six
81:50 - where you obtained your own instance
81:52 - locator key test token provider and
81:54 - username you can just paste those in to
81:56 - the project right now however if you
81:58 - didn't do that i'm going to revisit how
82:01 - to do exactly that so first head over to
82:03 - chat kit you can click this slide to get
82:06 - to the page
82:07 - sign up and then you're taken to the
82:09 - chat kit dashboard
82:11 - here you want to click the create button
82:14 - which then opens up this modal where
82:16 - you'll give your instance a name
82:18 - hit the create button and then you're
82:20 - taken to the overview of your chat kit
82:22 - instance and when you create an app you
82:25 - always want your own instance you don't
82:26 - want to share instances with anybody
82:28 - else as it's in the instances that you
82:30 - create rooms and you want full control
82:32 - over your own rooms so copy this
82:34 - instance locator here you can click the
82:36 - copy icon and then paste it into the
82:41 - second line in the config.js
82:44 - so swap it out here
82:46 - and then
82:47 - you scroll a bit down you see test token
82:50 - provider
82:51 - there you must check this enabled box in
82:54 - order to see your test token provider
82:57 - endpoint so this box will be unchecked
82:59 - and you need to check it and then
83:01 - click this icon to copy your test token
83:04 - provider endpoint and then paste it in
83:07 - right here
83:09 - we've done that scroll a bit up to the
83:12 - instance inspector and then create your
83:15 - own user
83:16 - hit create and also create a room and
83:19 - hit the create button you'll see this
83:21 - room input field once you create a user
83:24 - as you need to create a user first in
83:26 - order to create a room
83:27 - then paste your username
83:30 - right in here and with those few easy
83:33 - steps you have the setup you need in
83:35 - order to customize your very own chat
83:37 - app via css grid and css variables
83:39 - throughout the next two lectures so i'll
83:41 - see you there
83:47 - hey in this lecture i'm going to teach
83:48 - you about css grid and how we're using
83:51 - css grid to lay out the different
83:54 - components and how you very easily can
83:57 - swap around on these and turn this chat
84:00 - application into exactly the type of
84:02 - application you want layout wise
84:06 - so here is our code for creating the
84:09 - grid
84:10 - refers to display grid
84:13 - we're setting the height to 100
84:15 - and we're then defining some columns and
84:17 - some rows and then template areas before
84:21 - we jump into exactly what these mean
84:24 - let's see what it does actually because
84:27 - what then happens is that css splits the
84:30 - entire div which is the
84:33 - app div here which wraps our entire
84:35 - application it splits it into columns
84:38 - and rows and basically turns it into a
84:40 - grid
84:41 - as you can see we have six columns and
84:43 - six rows and the reason we have that is
84:46 - because here we've said in grid template
84:48 - columns that we want
84:50 - to repeat six times one fraction unit
84:54 - and fraction unit basically means that
84:56 - we want each of the columns to be
84:58 - equally wide i'm explaining fraction
85:00 - units more in detail in my css grid
85:03 - course here on scrimba which you also
85:05 - can check out but for now just look at
85:06 - this as it's giving each of the columns
85:09 - one unit each unless though one of the
85:11 - columns require more space which this
85:14 - one here does because the content of it
85:17 - forces it to be wider than the sixth of
85:20 - the width so then it captures a little
85:22 - bit more space and the remaining columns
85:25 - take up one fraction unit each and now
85:28 - there's only five fraction units left so
85:30 - they take up a fifth of the remaining
85:32 - space and i'm doing almost the same with
85:35 - rows
85:36 - though here i'm not using the repeat
85:38 - function where i'm saying six times one
85:40 - fraction unit i'm doing it manually i'm
85:43 - saying one two three four five fraction
85:45 - units and then the last row should be 60
85:48 - pixels tall so why is that well that's
85:50 - because i want this input row here to be
85:53 - 60 pixels tall regardless of the height
85:56 - of the chat app itself
85:58 - because if it was only a 6 of the width
86:02 - then when i did like this wouldn't be
86:03 - enough room to enter text
86:05 - be tiny so i want to have a fixed height
86:08 - so we've defined that we want six
86:10 - columns and six rows then we end up with
86:13 - this huge grid here and what we then can
86:15 - do is use grid template areas what we're
86:19 - doing here is we're creating six strings
86:22 - each representing a row and each
86:25 - character separated by a space
86:28 - in these strings represents a cell
86:31 - so when you see them like this these
86:34 - cells here represent
86:36 - a column so this is basically a visual
86:38 - representation of this grid here
86:42 - and now comes the interesting part
86:45 - the characters here are representations
86:47 - of the components because we have given
86:50 - for example the new room form component
86:52 - the grid area property of n meaning that
86:55 - it will fill up the n area in this
86:59 - visual representation meaning it'll take
87:01 - the spot down in the lower left corner
87:05 - and indeed that is where our new room
87:07 - form is located and of course this new
87:10 - room form if we head into new room form
87:12 - js it is the class name we have given it
87:16 - and room list is the r and we have said
87:19 - that we want it to occupy everything
87:22 - above the new room form which as you can
87:25 - see in the example is exactly why this
87:26 - is doing and here is the message list
87:29 - component and here is the form component
87:32 - itself i just call that an f i probably
87:34 - should call that an s since that starts
87:37 - an s to be consistent but anyway we can
87:40 - actually
87:41 - change that right now
87:44 - and rather do s like that
87:46 - so now
87:47 - here's the brilliant thing let's say
87:49 - that i want the send message form
87:51 - component to take up this space here as
87:54 - well then i'll just paste it in and boom
87:56 - as you could see now the send message
87:59 - form became much taller
88:01 - it doesn't look very well though so i'll
88:04 - revert it what is cool is for example
88:07 - let's say we perhaps want this entire
88:10 - column here to be on the right hand side
88:12 - instead i'm going to take this here
88:16 - i'm going to cut it out
88:18 - and
88:19 - move over here and paste it in
88:22 - and now suddenly we have a ui which yeah
88:25 - works
88:26 - and perhaps i want to have the new room
88:29 - form top instead of at the bottom then
88:31 - i'll just do like this instead now i can
88:34 - create rooms up here and here's my rooms
88:36 - and here is the chatting area
88:39 - so as you can see it's really easy to
88:41 - basically play around and create the
88:43 - layout you want so now
88:45 - i want you in your fork which you've
88:47 - already created from the instructions of
88:49 - the previous cast create your own layout
88:52 - which is not like this one or try to
88:54 - experiment with the layout and find one
88:57 - you like
88:58 - just shuffle around on the items until
89:00 - you're pleased with your layout and then
89:02 - in the next lecture we're going to
89:04 - change the theme as well meaning the
89:07 - colors of the application
89:09 - so i'll see you there
89:15 - hey in this lecture we're going to have
89:16 - a look at css variables which i'm using
89:19 - to set the colors for the chat room
89:21 - and if you haven't seen css variables
89:24 - before they work like this
89:25 - so first you need to define the scope of
89:28 - your variables here we're selecting the
89:31 - root tag which selects the root element
89:34 - and in our case that is the html element
89:36 - itself so that means that these apply
89:40 - for our entire application the syntax
89:42 - for them is
89:43 - dash dash variable name and then
89:46 - variable value
89:47 - now what you then can do is use this
89:50 - main color inside of the root element in
89:53 - the dom
89:54 - so let's scroll a bit down and here you
89:56 - can see that i'm using for the rooms
89:58 - list
89:59 - the main color as the background color
90:02 - and the syntax is var then the
90:04 - parentheses and then the variables name
90:07 - and you have to use the var and you have
90:09 - to use two dashes and as you can see in
90:12 - the app i'm using this color not only as
90:14 - the background here in the room list but
90:16 - also in the background the messages
90:18 - themselves
90:19 - so what's so cool is that i now can
90:21 - change this to for example red and boom
90:25 - it changed in both places
90:29 - and just have a look at my variable
90:30 - names here we have main color secondary
90:33 - color main text color secondary text
90:35 - color send message form so this is
90:38 - actually super powerful because now you
90:40 - can change the entire theme for the app
90:43 - just by changing these values here as
90:45 - most of these are used multiple places
90:47 - throughout the app so what i'm going to
90:49 - do now actually is paste in another
90:51 - dollar let i found online
90:54 - like that
90:55 - now i'm just overriding this one i
90:58 - should probably be explicit about that
91:00 - and take it completely away but now my
91:02 - app is really really nice and pink
91:05 - that's just through adding these five
91:07 - variables and since they are used all
91:09 - over the place
91:11 - here and here and here and here it
91:15 - completely changes the feeling of the
91:17 - app
91:18 - so what i want you to do now is go
91:20 - online and find color palette you like
91:23 - try and swap out these here so that you
91:25 - get a chat app which really matters you
91:27 - as a person
91:28 - however don't do it in this
91:30 - i think you should do it in the fork
91:32 - where you've also perhaps changed around
91:34 - on the layout a little bit what you then
91:36 - will end up with is something truly
91:38 - unique
91:39 - for example let's say that you also
91:45 - i've done this
91:47 - and what you have here is a clap which
91:49 - is really different than the one we've
91:51 - been coding on throughout this course at
91:53 - least it looks really different even
91:55 - though the underlying architecture is
91:57 - similar let's go ahead and do that and
91:59 - i'll see you in the final lecture of
92:01 - this course where i'm going to talk
92:02 - about how you can even further expand
92:05 - upon your chat app
92:12 - so you have finished the course so give
92:14 - yourself a pat on the back because most
92:16 - people who start online courses never
92:18 - finish them so this is a really good job
92:20 - of you you've taken time to invest in
92:22 - your skills in a way that most certainly
92:24 - is going to pay off
92:25 - and now you can jump on to other
92:27 - challenges or if you want to you can
92:29 - also further expand upon your chat app
92:32 - and here i have a couple of closing
92:34 - challenges or stretch goals or call them
92:36 - whatever you want it's voluntarily
92:38 - something you should do if you want to
92:40 - continue diving into how to create
92:41 - awesome chat applications
92:43 - because what would really enhance the
92:45 - user experience of this app is if you
92:47 - added an online user's component meaning
92:50 - displaying which users are online in a
92:52 - room at any given time
92:54 - and also typing indicators to see if
92:56 - someone else are typing in that room
92:59 - and i'm going to point you towards how
93:00 - to solve these they'll not give you the
93:02 - entire solution
93:04 - for the online users
93:05 - you'll find the information you need
93:09 - in the
93:10 - this dot current user so let's log out
93:14 - desktop current
93:16 - user
93:17 - dot
93:18 - rooms
93:20 - let's pick a room for example the one at
93:22 - index three
93:23 - then do user ids
93:26 - we run this
93:28 - as you can see that logged out a long
93:30 - list of usernames
93:32 - james black james white jane doe jane
93:35 - red as you can understand i'm not that
93:37 - creative and coming up with new names
93:40 - however you could take this
93:42 - and display it for example creating a
93:44 - component
93:45 - above the chat room here or maybe you
93:47 - want to merge it together with this
93:49 - stuff here and somehow show user avatars
93:52 - below the room if you want to do that
93:54 - there's a really nice service called ui
93:57 - avatars
93:58 - which allows you to generate avatars
94:00 - from initials
94:02 - and then there's the typing indicators
94:04 - and you can check out the docs on room
94:06 - subscription hooks
94:08 - just click this image and you'll be
94:09 - navigated to it in another tab and the
94:12 - ones that are relevant here are the on
94:14 - user started typing and on user stop
94:17 - typing
94:18 - and they are to be added
94:20 - as hooks here
94:23 - so you'll do on user started typing then
94:27 - you'll get access to the user
94:29 - and here you can render out users
94:33 - and as you know should probably create a
94:36 - new component for this but i'll stop
94:38 - giving hints here because now it's your
94:40 - turn so if you want to try to solve
94:42 - these challenges and no matter what you
94:44 - do i wish you good luck with your
94:46 - further coding
94:48 - thank you

Cleaned transcript:

hey and welcome to this course where i'm going to teach you how to build a chat application using react js and the chat kit api i'll teach you this through 17 interactive screen and by interactive i mean that you as the viewer at any given time can pause the screencast jump into the code and change it you can then see how your changes affects the output so i'll encourage you to do that whenever you're confused so that you make sure that you understand the relation between the code and what's being displayed on the page and i'm also going to give you five challenges throughout the course where you'll for example be asked to finish up my code in order to reach a certain goal however if you don't manage to solve the challenge don't worry i'm going to show you the solution as well so by the end of this course you'll be comfortable using react.js you'll understand how to handle data how to structure projects event handlers hooking up with apis and a lot more secondly you'll also get to know chat kit which is a super nice api for creating chat applications it's basically an api which gives you the power to build whatever kind of chat app you want without having to set up all the infrastructure and hassle that's involved with realtime chat applications so by the end of this course you'll actually have built this chat application here it's a chat app with multiple rooms which you can switch through this menu on the left hand side here you can also create rooms and thanks to chat kit it's as fast as any other chat application out there and towards the end of the course when you've understood how the entire repository works you're going to get your own copy of this chat room through cloning the repository and save it to your profile and as a bonus i want you to have your own personalized chat application not necessarily just the same as this one so we're going to go through how to use css variables and css grid to personalize the application through easily changing the theme of the app and also to shuffle around on the different components and both of these things are super simple to do using css variables and css grid and there are also two hot new technologies of modern browsers that needs to be in the tool belt of a frontend developer in 2018 and once you've personalized your chat app i'm also going to point you to further resources where you can expand upon and build more complex features into the app finally who am i my name is peer i'm a frontend developer online instructor and also one of the cofounders of scrimba which is the interactive coding screencast tool you're looking at right now but without further ado let's get started on the first lecture of the course hey in this lecture we're going to have a look at the component architecture of our app because in react everything is based around components and before you start coding your app you should break the ui into components and it's a good idea to actually do it visually like i've done here using paint or preview or something like that to just draw colored rectangles around your components and the way you break your ui into this is by starting at the top so here the parent component the common ancestor for all other components is the one in red hair that's normally called app or main or something like that and it basically contains our entire application and then you ask yourself which direct children does this component have in our case it makes sense to have four direct children so there's the list of rooms on the left hand side here there's the chat area itself there's the form where you enter chat messages and there's also the form where you create new rooms so the app component has four direct children the green blue brown and orange one and then you want to ask yourself again which children does these components have and this is just a form doesn't really have any children same with this one however the message list component the blue one has a list of messages inside of it and it's totally reasonable to turn them into their own components so each of the messages is a component itself and you could actually also make the case that this room list component should have children as well because it has a list of rooms here and you can even extract this title here in a component it's basically not written in stone and the reason i've turned each of the messages into components though not turned each of these into components is basically just to show you that it's up to you and both things work though in general the more complex your app becomes the more you should split it up and a good rule of thumb is the principle of single responsibility you want your component to do one thing and one thing only so if you have huge components which does a lot of things you should consider breaking them up into multiple components so in the next lecture we'll look at how these components turn into actual code as we'll walk through the repository so i'll see you there hey in this lecture we're going to have a look at the code base architecture so you can build a mental model of how this repository works before we start coding we have the fully functional app here right now so don't worry if a lot of this looks scary to you because at the end of the course it won't let's start like we did when we looked at the component on a conceptual level which was at the root level meaning the red rectangle here the component which is the ancestor of all the other components and that is the app component as you can see it lies in the root directory app.js and this is also our biggest component this is where all the magic happens in these various methods here which will later on go through step by step for now though i want to have a look at the render method because here you can see that this component renders out four other components and they just happen to be the components which were direct children of the red one so the green blue orange and brown which was the room list message list new room form and send message form the reason we have access to these here is because we have imported them up here as you can see they have been imported from a component folder that is one you can see right here if we open it up we'll see five components here's the message component for example that is the one which is not a direct child of the app component but a direct child of the message list component the blue one here so let's have a look at the message list go down to the render method and it is indeed returning the message component meaning that the message component is a child of the message list component so hopefully now you're starting to build an understanding of how this architecture here translates into react code we can also have a look at the new room form and the room list and the send message form and as you might notice all of these components are much smaller than the app component and that is a very conscious choice because we want the app component to be a socalled smart component meaning it handles all the logic it takes care of talking with the chat kit api as you can see we've imported the chat kit sdk up here and it also takes care of handling all the data that's done in the state here which you'll learn a lot about in a few lectures so this is the brains of our application whereas the child components like this message here is in contrast actually pretty stupid they only take whatever data they get from their parent and render it out some of them also have some event handlers for handling input from the users for example the send message form this one down here but of course needs to accept user input however it doesn't do any logic of the data it just takes the data and sends it off and of course doesn't take care of talking with the api nope all of that is done in the app component and this separation is a best practice if you want as many of your components to be as stupid as possible while gathering the brains at one place higher up in the hierarchy as it's much harder to maintain an app if the logic is spread across tons of components so as much as you can try to have one or few smart components and the rest of the components as stupid as possible so let's have a look at the other files let's start with the index.html for example it is ridiculously simple it has a link to the css it also has a div with an id of root more on that in a minute plus it's also linking to the bundle of all of our javascript which is index.pack.js and this pack here is because scrimba is using webpack under the hood so it needs to refer to index.pac.js instead of index.js which is the one you can see here and this is where we're connecting our react app with the index.html file because as you can see we're importing the app app.js just the root component we're saying react dom dot render this app in the element with the id of root so we're taking our entire application which exists in app as that's the common ancestor for all of our components and shoving it into the dom which is exactly here then we have the styles and style.css and we're not going to go through the basic css in this course as i'm assuming that you know basic css however we're going to look at both css variables and css grid as that is two super cool new modules in the css spec which will allow you to build your own version of this chat app which is customized exactly how you want it now you can say goodbye to all of this beautiful code and the next time you see it you'll actually understand it as you will have coded it yourself or at least together with me and in the next screencast we'll actually start doing that so stay tuned and i'll see you there hey and welcome to the first lecture where we'll actually jump into the code and start building so now i'm in the app.js file and as you can see the app component is significantly simpler than it used to be i've removed all the logic so all that we're left with is the render method which here returns the four children of the app component that results in a significantly simpler ui each of the components are simply rendering out its respective name now we're going to start by building out this message list component here and it can be found down here so what we want to do of course is render out a list of messages down here so we need to remove this help text and write some jsx but first we need data and we're not going to hook up with the chat kit api just yet so i'm going to paste in some dummy data basically an array contains three objects and each of the objects contains a sender id property and a text property and this is a simplified version of the data we'll get from chat kit later on now in order to render this stuff out on the page you have to first escape out of the jsx syntax because we can't just write javascript inside of jsx we have to use curly brackets in order to embed javascript expressions inside of jsx so inside of here we can do dummydata.map we're going to fetch out the object itself which we're calling message and we also need the index using a fat arrow function and for each of the items we're going to return a div tag now we're in jsx land again so we need to move over to javascript lan so we'll do curly brackets again and let's just start by rendering out message dot text we run this as you can see we're rendering out the messages brilliant so now i want to give you your very first challenge i want you to render out the sender id in addition to the text so pause this screencast right now jump into the code and change it so that it renders out the sender id as well and if you don't manage to do it then just resume back to this screencast and i'll show you how to do it okay so go ahead and do that right now okay so i hope you managed to solve this task let's see how it's done so i'm suspecting that some of you might have been tempted to simply add another div tag here do message dot sender id and if you try to do that you see now if we run the code we're getting an error react is basically saying that adjacent jsx elements must be wrapped in an enclosing tag which means you can't simply render out two jsx elements besides each other like this you have to wrap them in an enclosing tag and you can actually do it if you use an array so that's a feature react added in version 16 but we're going to use the enclosing tag so what we want to do is wrap both of these in another div like that you run it it works beautiful now i want to add all the classes in order to apply some styling let's run it again oh it looks beautiful however we're getting another message in the console and it's saying that each child in an array or iterator should have a unique key prop so what we need to do is give this item here key prop like this and this is why i wanted to fetch out the index as well because we can use the index as the key if we run this again it works and we're not getting the warning now it's actually not recommended to use the index as the key it's rather recommended to use a unique id and using the index is kind of seen as a last resort solution because the reason we're doing this is so that react properly can identify these dynamically created children from each other so that if you start adding removing replacing and shuffling around these items react knows 100 how to separate the items from each other based upon their id but since we're not going to change the order of our items right now we can use the index for this dummy example however in the next screencast we're actually going to fetch real data from the chat kit api and swap this index out with a more stable solution so we're actually progressing pretty quickly now so stay tuned for the next lecture as it'll be packed with interesting learnings hey let's have a look at how we can get started with the chat kit api so chat kit is built by pusher which you can find on pusher.com they have a really nice collection of several dpis which help you create collaboration and communication features in your apps the one we're going to use is called chat kit and it's probably the easiest way to implement chat in your app it's in public beta and it's free while it's in public beta and they'll always have a generous free plan so you don't have to worry about suddenly having to pay now in order to get started you need to sign in or create an account and then you'll take into the dashboard we can see an overview over the instances you have for their various apis and if you click this instances here under chat kit you'll see your instances the one we're going to use for this course is called scrimba chat kit course when you head into that one you'll get to an overview page where you have all the keys tokens and stuff like that which you need in order to connect with chat kit and you can also create users and rooms here manually for when you're playing around with it and experimenting in the next screencast we're going to connect our app with my chat kit instance and i'm also going to challenge you to connect our app to your chat kit instance as you should have your own instance and i should have mine so i'm looking forward to see you there hey in this lecture we're finally going to connect with the chat kit api so that we can fetch out the messages from a given room now the first thing we need in order to do that is the chat kit sdk as you can see under dependencies here i've installed the sdk i've done that using npm but i could easily also have simply linked to the source from the html because they have cdns in which you can just point a script tag to and then easily fetch out the sdk that way as well however we're going to use npm and the way we get a hold of the sdk is by doing import chat kit from virtual trackit then there's a question how do we hook up a react component with an api and the way you want to do that is through using a life cycle method called component bid mount and it's triggered directly after the render method has been invoked so here we'll create a chat manager and we'll use the chat kit dot chat manager to create that and inside of here you to specify a few parameters first we need our instance locator to tell trackit which instance we want to connect with and that is the one we created here it's called scrimba chat kit course and here you can see that we're getting an instance locator now i've copied this one to the config.js file here it is and i'm exporting this one along with another one which we'll look at in a minute so i'll simply do import i'll just copy these two from config like that now i can do instance locator instance locator like that and actually as the key and the variable which is holding the value meaning the instance locator string is called the same i can actually omit this one here and use do like this and we also need to specify a user id because chat kit needs to know which user we're connecting with this instance and as you can see down here in the dashboard i've created a user manually here so we're going to use that one user id or bargain finally there's the token provider which we'll create using new chat kit token provider like that and here we need to pass in a url and that url is the one we're getting if we scroll down to test token provider here you can see your test token provider endpoint and this is only for testing purposes what you'd rather have in production here is an endpoint which you have created for example using node and there you would authenticate the user which you could do using the trapkit server sdk you also might want to do some other stuff perhaps talk with your own database and however for testing purposes we're just going to use this test token provider here in order to authenticate ourselves so i've copied it again in the config file and exported it as the token url so i'm just going to paste in the token url like this and now we have a chat manager properly set up meaning we can use it to do chat manager.connect that'll return a promise and when that promise is resolved we get access to the current user and the current user object contains a bunch of methods for interacting with the api so the current user is our interface for talking with the chat kit api we can start off by doing current user dot subscribe to room like that in this object we need to specify of course which room we want to subscribe to using the room id and as you can see in the interface here if we scroll a bit up i've created a room called random here and i can interact with this room programmatically using this identifier here so i'll copy that one and paste it in here then we need to provide it with at least one hook we have a hooks property here and the most important hook which basically is an event listener is called on new message that listens for new messages and when we're building a cat room we want to be notified every time a new message has been emitted in the chat room so here message i'm using a fat arrow function and i'm just going to console log out the message dot text now let's run this code and as you can see in the console we're logging out three messages hey how's it going great how about you good to hear i'm great as well and that is indeed the messages i've already precreated in this room now if this room contained tons of messages we could have considered adding a message limit for example 10 messages that means the chat kit would only fetch out the 10 latest messages and you could set that to up to 100. however by default it's 20 and i think that's a suitable number which means we can actually omit this so i'm going to remove it but i want you to be aware that you can control that one thing you might be a little bit confused over now is that chatkit gave us the same data as we had in our dummy data however now we are actually indeed fetching it from chat kit and in order for you to really internalize this what i want you to do now is actually to fetch messages from your own instance and your own chat room and these keys that you obtain here will be the basis for the chat application you'll create later on so i basically want you to swap out the following values the room id the user id also the token url and instance locator however they're located in the config.js file so i'll add comment here and here swap out this one and this one and the way you do that is by first heading over to pusher.com chat kit and either scroll down to the signup area or click the sign up button here and you can actually click this slide to get to pusher.com chat kit once you've created an account you're taken to the dashboard and there you're going to click the create button and i'll create your very own chat kit instance which you'll give a name and once you've done that you're taken to the overview over your instance and the first key you're going to copy is this instance locator so click the copy icon right here and then head to config.js and swap it out right here then you want to scroll a bit down to the test token provider and here you need to check this box in order to enable the test token provider endpoint and you won't actually see it at all until you've checked this box so do that and then hit the copy icon go back to the code and swap it out here then scroll a bit up again enter username here hit create and then head over to app.js paste in your username here once you've created a user you'll be able to create a room give it a name and hit create and then this little alert box will pop up with the room identifier which you'll copy and paste in right here and then finally i want you to enter a message into this field here and hit send because that'll send the message manually to your chat room and it's important to understand that you won't be able to do this on my instance because only i have access to my instance dashboard and if you are to create a chat application you need your own instance you can't continue using my instance locator as it's through the instance you create rooms and i reckon you want your own rooms in your chat by the end of this and not share rooms with mine so go ahead and do all this now and when you run this code you should see the message you have entered in here appear in the console and then note down these which are fetching as we're going to use them later on as the basis of your very own chat app so good luck with this and i'll see you in the next screencast hey there now we've managed to fetch data from the chat kit api and log it out so that's good however what we want to do is actually take this data the messages store it in our component and then pass it down to the message list which is the component that's going to render this data out so we need to do something else than simply logging it out and specifically we need to add a state to this app component and state is one of two main ways of handling data and react the other one is called props and you'll be introduced that in a minute and throughout these introductions you might feel a bit confused at times in terms of what the difference is between state and props i at least was in the beginning and i found that the only way to really internalize this is to just see a lot of examples and write code yourself so i think as we move along it'll be clearer and clearer for you when it's suitable to use state and when it's suitable to use props but in short state is private for a component so our state which we're going to create now will only be state for the app component here and it's also possible to change the state from the component itself however props is not private it's shared between components and the component to have props can't change them directly themselves has to go through some kind of state change higher up in the hierarchy now this probably sounds very theoretical so let's actually just get started so you'll see it in action first thing we need to create is a constructor method the constructor is the very first method that is called in the life cycle of react components and it's actually a special method of es6 classes and it allows you to interact with the this keyword which points to the instance of this class however before we interact with this we have to call super and what super does is call the constructor function of the class which this class has been extended upon so that is the react dot component class so when we're calling super we're calling the constructor function in the react.component class and that sets stuff up for us so that we can start interacting with the state so we'll do this dot state and set that as an object what we're going to do here is we're going to store the messages in the state and we'll initialize it as an empty array what we now can do is for every new message we get from chat kit we'll do this dot set state and inside of this object we're describing how we want our new state to look like so we want the messages to change and what we want to do is actually add this latest message to the end of the this start state dot messages array so we'll use es6 and do this dot state dot mess address and then add the latest message at the end of this new array and you might be a little confused what these three dots here are that's called the spread operator that allows you to expand this.messages array to rather fit into the array we're creating here so you can look at it as if we're taking the this.messages which is encapsulated in two square brackets like here so if we didn't have the these three dots it would be like this they would just take up one item in this new ray but now with the three dots we're rather expanding it so that they forget about their old square brackets and just fit into this new array instead so this array is expanded to fill the brackets of this array definition rather than its old definition and this here basically creates a whole new array which contains no reference to the previous objects here as this is a new copy of this dot state dot messages with the latest message concatenated at the end and you might now ask so why didn't we just do like this list.messages.push message and that's because this push method would actually modify the original array so we'd modify the state using dot push you should never do that the only way you should modify the state is through this dot set state meaning that we need to copy this.state.messages and expand it into our new array while adding the latest message at the end so now that we have messages in our state and it's being updated as new messages comes along let's try and render out this. messages we run the code and there we can see that this.messages is being filled up with objects as they're added to the state in this on new message book let's remove this one here and this one here now what we want to do is pass this data down to message list and we're going to do that through props and the way you give a component props is through giving it what looks like an html attribute let's do messages equals then we have to escape out of the jsx again because there we're going to add a javascript array and it's of course this dot state dot messages now we can head over to the message list and let's try to swap the dummy data out with this dot crops dot mess address and run this code and as you can see we're getting the exact same data that we had and this does not come from the dummy data actually we can remove this one we can render it again and we're now fetching real data from the chat kit api and displaying it in our app the way it happens just to go through that quickly is whenever chat kit registers a new message in this chat room this event handler is triggered we're doing this dot set state taking the previous list.messages and concatenating it with the latest message so that this array here is updated and then when we render the message list component we pass along the messages by giving it a prop called messages giving it the value of this.messages the way react works is that every time this data here changes it'll trigger a rerender and the data will be passed down to the message list that'll trigger a rerender of message list and here we're simply mapping through that data this dot props dot messages remember now it's props it's not state because the state is private and can only live up in the app component and when you pass it down to components like this it is turned into props so we do this.props up messages map through it and just render it out as we did with the dummy data so we're moving along really fast here we already have an app which talks to the chat kit api that's pretty cool now in the next lecture we're going to turn this here into its own component namely the message component hey in this lecture we're going to finish up the message component here because as you remember when we broke down our ui into components we wanted each of the messages to be their own component as well and here i have the setup for that component however it just contains an empty div so what we need to do is move some of the content from here and into the message.js file or actually let's start by importing the message component into the message list file like that now actually render it out through doing a message like that so we're gonna replace this here with this component here and then fix up this component so that it renders out the stuff we want so the first thing we need is to move this key here over to the message and we also need to pass down some data we basically want the sender id and the text and now i'm actually going to call the sender id here for user name because i think it makes more sense to call a username message.sender id because a message component in itself should take a username prop and a text prop and it shouldn't care that here in the underlying data that's powering the message that it's called a sender id i think semantically it makes sense to call it a username whereas the text drop can easily be called text which is what it's also called in the data so this is the new stuff this is the old stuff let's now copy these two divs here and delete the whole thing and then go into message.js like that however now we're referring to message here and that center id that's wrong here we need to refer to this.crops.username and this.props.txt so let's run the code and as you can see it still works so now we've actually passed data down two steps starting from the app component where the data lived as state passed it down to the message list component as a messages prop in the message list we got access to the messages through this dot props dot messages we looped through it and then we passed some of that data namely the sender id and the text down to the message component as two different props username and text so in the message component we're doing this.props.username and this.props.txt now this is a really nice little component it's very stupid the only thing it knows is that it's supposed to render out a username and some text but it doesn't do anything else which is great according to the principle of single responsibility so what i want you to do now actually is to turn this into a socalled functional component because when a component doesn't have state or any life cycle methods or any other methods you can actually make it even simpler than a class can turn it into a function and given that functional components have so many constraints they're less prone to bugs and a lot of people prefer them over class components so go ahead and check out the documentation right here this link where functional components are described and try to change this to a functional component and once you've done it or given up resume back to the screencast then i'll show you how to do it as well so go ahead and do that right now okay hopefully you managed the task let's now see how we can turn this into a functional component gonna remove the class keyword and we're not gonna extend upon the react.component class we're just going to do good old function syntax and this is a function it can't have a render method so we're going to remove the render method as well and basically just return the jsx directly and the final thing we just need is the props which is the argument of the function that means that we don't refer to this.props.username we have to do props.username and props.txt there's actually no this inside of this function this is undefined so let's run this and boom it works so now you're really starting to get a lot of tools in your react.js toolbelt and in the next lecture you're going to learn about event handlers so stay tuned and i'll see you there hey in this lecture we're going to build out this send message form component that is the one which you can see down here so that's where you can write your messages as you can see we have the basic setup here already it's just a form with a class name and an input field which has a placeholder and it's of type text of course let's change this placeholder to something like enter like that it's a bit more descriptive okay so the thing with form elements is that they kind of keep their own internal state based upon the user input because when i type something in here the element needs to keep track of what i've typed in however as you know from learning about state in react we usually want to keep the internal state in well this dot state and if we rather control the content of an element like this in the components state we get a single source of truth and our application becomes less prone to bugs so let's take whatever the user inputs into this input field and shove it into the state of the send message form component what we'll then do is that we'll use the on change event handler this one basically says that whenever this input field changes whenever the value of it changes fire off whatever function we specify inside of these curly brackets let's do this dot handle change in here so this one is listening for changes in the input field and it's invoking this method whenever a change is fired however handle change hasn't been defined yet so we'll need to define it like this here we get access to the event and let's just log out e dot target dot value like that run the code as you can see it's now logging out whatever we type into the input field so now we only need to take this value here and add it to the component state and as you hopefully remember we need to create a constructor method in order to initialize the state like that and we need to call super then we can do this.state equals an object and it'll have one key called message like that and we'll initialize it as an empty string to begin with now let's see if we can update the state in this handle change method move this dot set state message and we'll set that to the e dot target dot value we run the code try to input something we're getting an error cannot set property set state of undefined and that is because the this keyword is undefined inside of this method it's not bound to the component instance which is up here in the constructor and that ties back to how javascript itself works and the way to solve this is through in the constructor do this dot handle change equals this dots handle change and then bind this which we do have access to in the constructor to this dot handle change method so now if we run the code try to input stuff hello we're not getting an error we can actually instead of controlling out that one here let's rather do this.message down here run the code and write that yo and we can see that we now in the render method have access to the state so what we'll do now might seem a bit weird but we'll actually set the value of the input field to this start state dot message now what this does is that we are controlling the value in the input field programmatically so that it can only be whatever we have in the state at any given time so if we run it now it works well however what's happening here is that when the on change event listener is triggered we invoke the handle change method it updates the state and then react triggers a rerender in which the value which is passed in to the input field here has been changed and thus it's updated in the ui so it's going through the state before your keystroke turns into a change in the user interface like that so now we have what's called a controlled component we're controlling how it works we don't have any duplicate state and where the input field keeps track of its state and the component keeps track of its state and we don't have to hope for the two states to match we know that they will always match so the next thing we need to do is hook an unsubmit event listener onto the form so that when they hit enter we'll take the message and send it off or we'll at least in this lecture prepare the sending off and then in the next lecture we'll see how we can send it off to chat kit the way we'll do this is very similar to what we did previously we'll do on submit as that's the event listener for forms and we'll do this dot handle submit then handle submit create that one here here we first want to prevent default and then we want to send off message somehow and we of course need to bind this method to this as well like that so that we in this handle submit event handler get access to this.message as that's the message we're gonna send off so let's remove this one run the code hello submit and there we logged out from this place right here now finally i want to point out that the on submit and on change are event listeners provided by react and they are wrappers on top of the native event listeners which you write without the capital c and s however this dot handle change and let's not handle submit could have been called whatever we want could have done for example handle form handle form run the code oops then i also have to fix this one like that run the code and submit and it works so these names are created by me which on submit and unchange needs to be called exactly that let's go back to handle submit i like to have the event listeners and event handlers resemble each other though only with swapping out on with handle as i think that's a good practice which makes the code readable and understandable so in the next lecture we're going to learn how to take our messages send them off to the chat kit servers so that the message is broadcasted to everybody who is a part of this chat room so i'm looking forward to see you there hey let's now learn how we can take our messages and send them off to track it we have set up the send message form so that we're ready to do that down here but we gotta change the app.js a little bit as well because as you might remember the interaction with the chat kit api happens through this current user object and that's one which we got access to in the component and mount method as we get access to it after we get connected with the chat manager however it's only available inside of this scope right here and that's not good we want it to be available to the entire component instance because we're going to do currentuser.sendmessage in order to send messages so in order to do that we have to do a couple of things first we gotta do this dot current user equals to current user so we're taking the current user and simply hooking it on to the component itself and by doing that we can for example create a new method send message we'll simply do this not current user dot send message like that that's of course only possible since we did this here and actually for the sake of consistency let's also do this.currentuser.subscribedroom here however you probably know what we need to do in order to enable the send message method to have access to this keyword we of course have to bind it so now we have access to this inside of send message that enables us to get the current user object and call the send message method and inside of that we're going to specify two things that is the text we want to send like this and we'll get that as an argument of the send message function and we're also going to specify the room id and for now i'm just going to hard code that in and as you probably remember es6 allows us to omit this one here when the key and the variable that holds the value are identical so you can do like this and now comes a concept which i struggled understanding and i know that a lot of people find it hard to wrap their heads around because as you've experienced here when we've sent the messages down as a prop to message list data flows in one direction in react from parent that's the app.js to child which are these here however now we're in a position where we somehow need to get the data from down in the message form that being the data we're storing in the state here and we need to send that up to the app.js component because that's the one that will send this data off to chat kit so this is called the inverse data flow in react and there's a couple of ways of looking at this conceptually either that we're sending a method down or that we're reaching up from child to parent in order to trigger a method so what we'll do is we'll take this send message and send it down message as a prop is not send message like that now send message form will get access to this method which again has access to this dot current user.send message in the send message form down here we'll do this dot ops dot send message passing in this dot state dot message because remember restoring the message in the state so you can either look at it as if we're down here in the send message form or kind of reaching our hand up to this method here or you can look at it on a conceptual level that app.js is passing down this method so that send message form can borrow it but either way the data kind of flows the wrong way from child to parent so that's why they call it inverse data flow okay let's try it out are you watching the game tonight enter oops room id also type oops spelling mistake i've written rude id room id let's try it again run the code again and hit enter boom that worked we now send the message off to chat kit via this dot current user not send message and then since we are listening for new messages here and setting the state adding the latest message to the state here that state got updated which again triggered a rerender so that this message list also got rerendered and it results in four messages being displayed in the chat instead of adjusting three a final thing i want to do in the send message form is that once we've sent it we want to clean up the input field so we'll do this dot set state message and turn that into an empty string again now if we run it i hope so like that the input field is automatically blanked out after the message has been sent so we're starting to get a really cool chat application here the next step now is to start creating the room list and also enable you to create new rooms so i'll see you in the next lecture in this lecture we're going to fetch out all the rooms in our chat kit instance and then display them in this room list component here which you can see the skeleton for right here so as you know all communication with the api happens in the app component or only smart component and it happens through the this dot current user object so what we'll do is this dot current user dot get drainable rooms like that that returns a promise and when that promise has been resolved we get access to the drainable rooms like that what we then want to do is add these drainable rooms to the state we'll do this dot set state joinable rooms like that however drainable rooms aren't the only rooms in this chat kit instance they are just the rooms that we haven't joined yet that this user here hasn't joined yet though in our instance there might be other rooms as well namely rooms that this user has joined and they are available in this dot current user.rooms so let's add them to the state as well we'll call it join rooms and we'll find them in this dot current user dot rooms and now that we're setting these in state you also have to initialize them joinable rooms joined rooms like that now i also want to add a couple of cache statements here that and down here on connecting we now have multiple promises in this method and if any of them fail we're going to get a hint of what's going on and this componented mount is starting to get pretty massive so we're going to refactor it a little bit later on if you find it to be a bit confusing a bit bit too massive don't worry we'll clean it up afterwards for now though let's see if we're able to send these rooms down to the room list component so what we'll do is we'll give the room list component a prop called rooms in it we'll use the spread operator to combine the two arrays of this dot state that joinable rooms with this.join rooms like that now in the room list we can log out this stop scrops dot rooms run the code and see that we're indeed logging out after a few renders an array filled with objects which probably is our rooms so now we need to render the rooms right here and to do that we're going to do the exact same thing we did with the messages this dot props dot rooms dot math we get access to the room in the callback function where we're going to return list item just wrapping around an anchor tag which goes to nowhere but which contains room dot name and as we're using list items here we need to add an unordered list just wrapping these and i also want to have an h3 which says your rooms we also need to give this list item a key as you know we use room dot id and for styling purposes we'll give it a class name of room like that so let's try to run the code beautiful we're now rendering out a list of all the rooms we have in our chat kit instance this is both the ones i have joined and the ones i can join and it looks really nice actually so in the next lecture we'll look at how to join a specific room display the messages from that room and also send messages to that room so you can jump in between rooms and chat as much as you'd like so we're actually starting to approach a fully functional chat app hey in this lecture we're going to learn how to subscribe to specific rooms so that we can click on them and start chatting in them and to do that we need to work a little bit with all the code we've added to mount because now we're just automatically subscribing to this specific room when the component mounts that's why we get these messages here by default but what we want to do is that when you enter into the app you shouldn't automatically subscribe to a room you should make a conscious choice of clicking on the room you want to subscribe to so the first thing we need to do is remove this subscribe to room method this piece of code here and create a subscribe to room method paste that in there now let's just call this from here to see that it works and of course as always we need to remember to bind this like that like that let's run the code as you can see we're automatically subscribing to that room so our method works now what i also want to do is pull out this one here and turn that into its own method as well call it get rooms and then also replace this code with this subject that and of course bind it so now we have a much more manageable component and mount method and what we want to do is enable the user to click a room and thus subscribe to it so we need to pass down the subscribe to room method down to the room list so subscribe to room equals this dot subscribe to room now let's make this a bit more readable like that and inside the room list when you click on this anchor tag here on click this stop props not subscribe to room and then pass in the room dot id so here we're using an anonymous function to wrap this function call here because if we were to do like this this here would be called immediately when this component renders so we only want to call it on the click event so on a quick event this anonymous function gets invoked which again invokes this one and we actually don't need those two curly brackets there so let's also readable i like to add them to multiple lines if i have more than one attribute or prop on these jsx elements and we can do like that now this.props.subscribe to room we'll call subscribe to room up here then we also need to pass in the room id as we pass that along and just replace this one with the room id and now we should be able to subscribe to rooms through clicking on these items here meaning we'll actually remove this first subscribe to room from the componented mount we now want to enable the user to do that instead of doing it automatically so we'll run the code and click on nfl and as you can see we got messages from that chat room beautiful now if we head into welcome as well we'll see that we have a buggy so the welcome messages was placed after the nfl messages that's not good that's because when we subscribe to a room and we get our own new message event listener we're simply just continuing to append new messages to the state so what we need to do before we subscribe to room is clean up the state set the messages to an empty array again now if we run it into nfl oops this.messages is not a function of course i have to do this.setstate like that well welcome yes now it works what we now need to do is to make sure that we keep the joinable rooms and joined rooms properly updated because the list you can see here contains both the rooms you have joined and the rooms you can join and they look for this app completely similar regardless of whether or not you have joined it and the thing is when you subscribe to a room that means when you're listening for messages and displaying them here you're automatically joining it as well so if there's a room that i haven't joined yet let's say for example this nba room and i joined that then these two joinable rooms and joined rooms should change one room from the joinable rooms should be extracted and put into the joined rooms array so after i've subscribed to a room we actually need to call this get drainable rooms again and update the state in case one of the rooms are due switch array so here this subscribe to room returns a promise then then we get access to the room and there we'll simply do this dot get rooms like that let's also add a catch here like that and now we should be keeping track of the rooms correctly what we then need to do is to make sure that we can send messages to the correct room because right now when we're triggering the send message we're just hard coding in that we're sending a message to this specific room and that of course doesn't work and the answer to that is also to be found in this callback function here because what we then can do is we can do this dot set state and we can keep track of which room we're currently at by doing room id and setting it to the room dot ib now we need to add this to the state when we're initializing it as well room id let's just initialize it as null and when we send a message just this dot state dot room id so let's try this oh i haven't joined any rooms yet because we haven't called subscribe to room if i click nfl for example oh reference error error isn't defined let's see oh i had three r's here we run it again i click nfl there is not defined yet again oops i did a weird mistake here i didn't wrap this in the console log now let's try it nfl and i'm getting the messages yes and yes i'm able to chat in that room as well let's try the premier league one totally it works brilliant so now i can change jump around to any room i want and chat with the people in the room championship random nba general so this is really cool however there are two more things we need to fix in order to make our room list component complete namely making sure that these rooms are always displayed in the order we want them to be displayed in and that we're highlighting which room you're currently at so in the next screencast we'll fix both those things hey in this lecture we're gonna fix a couple of things in our room list component and the first one being that if i now paste in a new username here which hasn't joined any rooms yet however it has been created on this instance in the chat kit web interface so it is a part of this instance though it hasn't joined any rooms what will happen is that when i run the code and i try to join any rooms you can see that the rooms seem to shuffle around that's not a good user experience and it's because rooms jump from being joinable rooms to being joined rooms and namely happens in this dot set state here when we have fetched out the joinable rooms after the user has joined the room and this.currentuser.rooms is by the way updated automatically but the point being that an object has jumped from here to here and thus the order of this dot props dot rooms down in room list which we are mapping through here has changed so the order in the user interface will change and the way to solve this is to create an ordered array up here called order rules equals this dot props dot rules and we'll use a spread operator since we're now going to sort this array and we're going to pass it a compare function which takes two arguments and here we're allowed to tell this algorithm how we wanted to sort our new array we're going to sort it by id the way it works is that if this returns a negative number then a will be seen as less than b according to our sort function or if we return a positive number then a will be seen on as greater than b and it'll sort it accordingly so now it should sort our rooms in ascending order based upon their ids and we need to create a new array as sort would indeed modify the original array and you should never modify props so then we'll take the ordered rooms and swap this out here we'll run the code now let's try joining seems to be working really good they don't jump around cool so now you only have one more thing left and that is to highlight which room you're currently at because right now we don't really know which room we're at let's click welcome and what we want to happen is for this item here to glow up a little or to change color the way we do that is we're going to give this list item class of active if this item which is rendered also is the same as the room id meaning that it's the one we're chatting in at that point of time what we'll do is we need to pass down room id from this.room id then we'll go back to room list and here const active and if this that crops that room id equals to room dot id then we're going to return active otherwise return an empty string and we'll now do here just very easily concatenate those two strings together so if it's looping through the current active room then it'll give an active class to this list item here let's run the code we hit the welcome room and boom it's now white as we have styled it in the css so that the list item should be white if it has the class of active so that was it i hope you learned something and i'll see you in the next lecture hey in this lecture i'm going to show you a trick for automatically scrolling down to the bottom when new messages appear like for example this um right my name is pear hitting enter nothing apparently happened however if i scroll down oh there was the message and i sent it as jane smith so rather my no my name is jane send it again didn't seem to appear but it actually has appeared so we need to automatically jump down let's go in here actually and move this back to her morgan that's me and the way we solve this is through adding the component did update method now this is yet another of the life cycle methods in react and it's called directly after a component has been updated so this is a nice time for scrolling down if you want to do that and first we need to grab hold of the message list component itself dom node basically so do const node and we'll use method of the react dom library dom and we need to import that react dom from react um like that find dom node and pass in this and what we're then going to do is set the node dot scroll top equal to node dot scroll height so the scroll prop is how far we've scrolled down and the scroll height is how long our entire scrollable element is so when we're setting the scroll top to equal the scroll height we're actually scrolling as far down as possible as we can and the scroll height is actually measured from the top so it can't actually be as far from the top as the entire height but that doesn't matter this will basically scroll the window all the way to the bottom so let's run the code join the room now we are scrolling to the bottom if we try to write my name is pair we'll scroll down however there are certain situations where we don't want this action to trigger for example let's say i'm reading through all the messages up here and then suddenly a new message appears at the bottom now what i'm going to do now i'm actually going to head into another window which you can't see here at scrimba and then i'm going to write a message from that client so i've connected from that client as well so just sit tight i'm going to write another message and send it and boom suddenly this was sent from another client another browser basically which i couldn't show you via scrimba but it was a little bit annoying that when i was reading messages up here suddenly i got pulled down to the bottom so what we want to do is check if i'm also somewhere near the bottom and in such case we'll jump down if i'm far up here we'll just keep appending messages down below and i'll actually have to scroll down to see them and perfect place for doing this is component will update and that is triggered right before the component has been updated and here we can check where i am in the scroll position so first we need to grab hold of the node here as well and we'll do this that should scroll to bottom and if our node scroll top that's how far we've scrolled down and our node.client height that's the height of our window here so now if we scroll down 20 pixels or something now our scroll top is 20 and our client height is this entire window and it's maybe 350 pixels so let's say that this in total is 370 pixels if that is greater than or equal to the no dot scroll height is the entire element meaning that we are actually at the bottom since how far we have scrolled down plus the height of this window here equals the entire box or more than or equal that's just in case we by some reason managed to scroll further down then we should scroll to bottom so we'll do here if this dot scroll to bottom then we're going to do this now let's run the code now we're in the welcome room hey boom we're scroll down but if we now scroll a bit up and we write yo ah it actually worked we didn't auto scroll and finally i want to give a little buffer so in case we're down here we're almost at the bottom we still want it to jump down so we'll do that by adding plus 100 here and now therefore almost at the bottom at the bottom it worked as well really nice so now we're starting to get a chat application which actually has a good user experience so then the final feature is to make this new room form work and after we've done that we're done with all the javascript and i'm going to show you how to modify this chat room so that you can create your very own chat room both in terms of layout and theme so you basically can start chatting with your friends with your homemade chat application so it seems i'll be holding my promise i gave you in the beginning that you will end up with your very own custom personal chat application at the end of this course so i'm looking forward to see you in the next screencast i'll see you there hey in this lecture we're going to build out the new room form component which basically allows you to type in the name for a room and then it'll pop up here and you can start chatting in that room and people who are part of this chat kit instance can also join that room and chat with you and they can of course also create rooms so this will be very similar to how we did the send message form so i'm going to go quickly through how we'll build out the new room form as you remember we prefer to create controlled components so we're going to give this one an on change handler and i'm going to trigger this dot handle change which is a method we'll write here in it we'll do this dot set state and set the room name to e dot target dot value now we cannot work with state without doing super in the contractor like that super and also initialize the state to room name we call an empty string next up we need an on submit event listener on the form we'll do this dot handle submit and there we'll simply first prevent default and then we'll tell the app component that we want to create a new room and the way to do that as you remember is to pass down a method from the app component down to the child component so create room like that not write any code here yet let's just pass this down create room so that we have the architecture and also we need to remember to bind this that and that now in this room form we'll do this dot props dot create room passing in the name which we have in this state dot room name so now let's in the app component room name do a logging of the room name just to see if we can make it work i think oops cannot read properly set state of undefined what have i done it has to be down in the new room form this dot of course i forgot to bind this in our two event handlers that's how it is to code sometimes a lot of things to remember and we'll copy this and handle submit like that we'll run it again and my new room like that hit enter and boom room name my new room so we are able to connect the two components and pass down the method for creating new rooms so now the final thing to do is to just create a new room do that through yet again use this dot current user and it has a method called create group in it we'll pass in the name of the room room name what we actually can do now we can rather call this for name and omit this one here and it returns a promise and when that promise resolves we get access to the room and what we're going to do here is subscribe to that room because i think that's a good user experience when you create a room we instantly jump into it and luckily as we have extracted the subscribe to room functionality in a method of itself we'll just do this dot subscribe to room passing in the room dot id and let's also add a cache here if we get an error we're going to console log out or with create room log out the error now let's run the code and let's say that i'm a huge fan of the world cup let's like that and there we have a whole new room called world cup who'll win i'll ask and i can chat in that room and now i'm actually going to go to another tab you won't be able to see that but i'll log in as another user in this chat room and then i'll send a message brazil that's what i sent and that popped up here immediately so this chat works however finally we need to empty this input field once we've submitted it and we know of course how to do that it's super simple this dot start set state room name like that all right champions league and it didn't get oh so i noticed that i in my rush had made a mistake because i've actually forgotten to set the value here explicitly meaning but i haven't done like this this.room name this wasn't a fully controlled component as we only sent the state from this input field to the component state we didn't go full circle and set the value based upon the state as well so that was an error on my side and it can serve you as an example of when you're trying to do something quickly when you think you know easily how it's done because you've done it before because i had done it in the send message form before then i was in such a hurry that i forgot this and there's a lot of things to remember when you're coding and it's not a good idea to think that you have everything under control you've got to pay attention to the details and double check so that you can find those small little things you've forgotten to do but which opens up the app for bugs so let's try it out we'll write gold for example submit it and boom as you can see there it is while the new room form has been cleared out now finally i want to change this to create a room like that so now we're almost finished with all the javascript of this course just think there's one last thing we should do and that is before you have joined the room it should say join a room here and if we try to input something and try to send a message to the chat kit api we'll get an error because we haven't defined which room we're sending that message to so to fix this we'll first head over to the message list and here in the render method we want to check if we actually have chosen the room so then we need to pass down the room id like this and if this dot props that room id here i'm checking if this.props.room id is a full c value so not a truthy value then render this stuff out here or return this stuff here return and this is just the div wrapper and i've created another div which has a left arrow and the text join the room in it and then we'll just close this off so like that let's try and run it nice you get this join the room when you join room it disappears and then in order to disable the input field before we have joined the room i'm going to have to head down to send message form and the way we disable an input field is by giving it an attribute called disabled and if it's true it'll be disabled so what we'll send down here from app is actually a prop called disabled and we'll give it the opposite value of this dot state dot room id because if the room id is null then this will evaluate to true meaning this disabled will be true and this that drops without disabled will be true so let's try this now just join the room and i can't enter anything into this input field if i join championship for example i can brilliant so that was actually the last piece of javascript we needed to add to our app in the next lecture we're going to start modifying the chat room using css variables in css grid so that you can create your very own personalized chat application which is just the way you like it hey as we now have built out all the features of our chat app it's time for you to get your own copy of the code so that in the next couple of screencasts when i'll show you how to customize the layout of the app you'll be able to do that on your very own copy and not using my code and i'm going to explain you this through using slides so the first thing you want to do is click the settings icon here at the top of the left sidebar that'll open up this menu and click on the clone workspace that'll open up a modal i want you to select a playground and then give it a title and hit the confirm button and then you'll be taken to your very own scrimba playground and you might have to sign in if you haven't done already as this will be saved to your profile you'll see your avatar here in the top right corner and you can also find this playground from your own profile and then the next step is to connect this playground to your own chat kit instance and if you followed along in screencast number six where you obtained your own instance locator key test token provider and username you can just paste those in to the project right now however if you didn't do that i'm going to revisit how to do exactly that so first head over to chat kit you can click this slide to get to the page sign up and then you're taken to the chat kit dashboard here you want to click the create button which then opens up this modal where you'll give your instance a name hit the create button and then you're taken to the overview of your chat kit instance and when you create an app you always want your own instance you don't want to share instances with anybody else as it's in the instances that you create rooms and you want full control over your own rooms so copy this instance locator here you can click the copy icon and then paste it into the second line in the config.js so swap it out here and then you scroll a bit down you see test token provider there you must check this enabled box in order to see your test token provider endpoint so this box will be unchecked and you need to check it and then click this icon to copy your test token provider endpoint and then paste it in right here we've done that scroll a bit up to the instance inspector and then create your own user hit create and also create a room and hit the create button you'll see this room input field once you create a user as you need to create a user first in order to create a room then paste your username right in here and with those few easy steps you have the setup you need in order to customize your very own chat app via css grid and css variables throughout the next two lectures so i'll see you there hey in this lecture i'm going to teach you about css grid and how we're using css grid to lay out the different components and how you very easily can swap around on these and turn this chat application into exactly the type of application you want layout wise so here is our code for creating the grid refers to display grid we're setting the height to 100 and we're then defining some columns and some rows and then template areas before we jump into exactly what these mean let's see what it does actually because what then happens is that css splits the entire div which is the app div here which wraps our entire application it splits it into columns and rows and basically turns it into a grid as you can see we have six columns and six rows and the reason we have that is because here we've said in grid template columns that we want to repeat six times one fraction unit and fraction unit basically means that we want each of the columns to be equally wide i'm explaining fraction units more in detail in my css grid course here on scrimba which you also can check out but for now just look at this as it's giving each of the columns one unit each unless though one of the columns require more space which this one here does because the content of it forces it to be wider than the sixth of the width so then it captures a little bit more space and the remaining columns take up one fraction unit each and now there's only five fraction units left so they take up a fifth of the remaining space and i'm doing almost the same with rows though here i'm not using the repeat function where i'm saying six times one fraction unit i'm doing it manually i'm saying one two three four five fraction units and then the last row should be 60 pixels tall so why is that well that's because i want this input row here to be 60 pixels tall regardless of the height of the chat app itself because if it was only a 6 of the width then when i did like this wouldn't be enough room to enter text be tiny so i want to have a fixed height so we've defined that we want six columns and six rows then we end up with this huge grid here and what we then can do is use grid template areas what we're doing here is we're creating six strings each representing a row and each character separated by a space in these strings represents a cell so when you see them like this these cells here represent a column so this is basically a visual representation of this grid here and now comes the interesting part the characters here are representations of the components because we have given for example the new room form component the grid area property of n meaning that it will fill up the n area in this visual representation meaning it'll take the spot down in the lower left corner and indeed that is where our new room form is located and of course this new room form if we head into new room form js it is the class name we have given it and room list is the r and we have said that we want it to occupy everything above the new room form which as you can see in the example is exactly why this is doing and here is the message list component and here is the form component itself i just call that an f i probably should call that an s since that starts an s to be consistent but anyway we can actually change that right now and rather do s like that so now here's the brilliant thing let's say that i want the send message form component to take up this space here as well then i'll just paste it in and boom as you could see now the send message form became much taller it doesn't look very well though so i'll revert it what is cool is for example let's say we perhaps want this entire column here to be on the right hand side instead i'm going to take this here i'm going to cut it out and move over here and paste it in and now suddenly we have a ui which yeah works and perhaps i want to have the new room form top instead of at the bottom then i'll just do like this instead now i can create rooms up here and here's my rooms and here is the chatting area so as you can see it's really easy to basically play around and create the layout you want so now i want you in your fork which you've already created from the instructions of the previous cast create your own layout which is not like this one or try to experiment with the layout and find one you like just shuffle around on the items until you're pleased with your layout and then in the next lecture we're going to change the theme as well meaning the colors of the application so i'll see you there hey in this lecture we're going to have a look at css variables which i'm using to set the colors for the chat room and if you haven't seen css variables before they work like this so first you need to define the scope of your variables here we're selecting the root tag which selects the root element and in our case that is the html element itself so that means that these apply for our entire application the syntax for them is dash dash variable name and then variable value now what you then can do is use this main color inside of the root element in the dom so let's scroll a bit down and here you can see that i'm using for the rooms list the main color as the background color and the syntax is var then the parentheses and then the variables name and you have to use the var and you have to use two dashes and as you can see in the app i'm using this color not only as the background here in the room list but also in the background the messages themselves so what's so cool is that i now can change this to for example red and boom it changed in both places and just have a look at my variable names here we have main color secondary color main text color secondary text color send message form so this is actually super powerful because now you can change the entire theme for the app just by changing these values here as most of these are used multiple places throughout the app so what i'm going to do now actually is paste in another dollar let i found online like that now i'm just overriding this one i should probably be explicit about that and take it completely away but now my app is really really nice and pink that's just through adding these five variables and since they are used all over the place here and here and here and here it completely changes the feeling of the app so what i want you to do now is go online and find color palette you like try and swap out these here so that you get a chat app which really matters you as a person however don't do it in this i think you should do it in the fork where you've also perhaps changed around on the layout a little bit what you then will end up with is something truly unique for example let's say that you also i've done this and what you have here is a clap which is really different than the one we've been coding on throughout this course at least it looks really different even though the underlying architecture is similar let's go ahead and do that and i'll see you in the final lecture of this course where i'm going to talk about how you can even further expand upon your chat app so you have finished the course so give yourself a pat on the back because most people who start online courses never finish them so this is a really good job of you you've taken time to invest in your skills in a way that most certainly is going to pay off and now you can jump on to other challenges or if you want to you can also further expand upon your chat app and here i have a couple of closing challenges or stretch goals or call them whatever you want it's voluntarily something you should do if you want to continue diving into how to create awesome chat applications because what would really enhance the user experience of this app is if you added an online user's component meaning displaying which users are online in a room at any given time and also typing indicators to see if someone else are typing in that room and i'm going to point you towards how to solve these they'll not give you the entire solution for the online users you'll find the information you need in the this dot current user so let's log out desktop current user dot rooms let's pick a room for example the one at index three then do user ids we run this as you can see that logged out a long list of usernames james black james white jane doe jane red as you can understand i'm not that creative and coming up with new names however you could take this and display it for example creating a component above the chat room here or maybe you want to merge it together with this stuff here and somehow show user avatars below the room if you want to do that there's a really nice service called ui avatars which allows you to generate avatars from initials and then there's the typing indicators and you can check out the docs on room subscription hooks just click this image and you'll be navigated to it in another tab and the ones that are relevant here are the on user started typing and on user stop typing and they are to be added as hooks here so you'll do on user started typing then you'll get access to the user and here you can render out users and as you know should probably create a new component for this but i'll stop giving hints here because now it's your turn so if you want to try to solve these challenges and no matter what you do i wish you good luck with your further coding thank you
