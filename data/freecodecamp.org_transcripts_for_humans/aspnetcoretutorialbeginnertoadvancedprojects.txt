With timestamps:

00:00 - Master asp.net core by building three
00:02 - projects from scratch you'll start with
00:04 - a simple full stack project and work
00:07 - your way up to an advanced project this
00:10 - course will teach you everything you
00:11 - need to know to create your own projects
00:14 - in asp.net core MVC Allan from Koda
00:18 - future created this course hi there
00:20 - everyone this is silen in this video
00:22 - we're going to see how to create three
00:24 - different asp.net core MVC projects with
00:27 - different levels of difficulty and with
00:30 - different
00:31 - functionalities in each project you'll
00:33 - learn something new starting with a
00:35 - simple full stock project by creating a
00:38 - food menu web app then we will create a
00:41 - Google Docs clone where we will
00:43 - integrate user authentication in our
00:46 - project and lastly we will build the web
00:49 - app to accept online payments so let's
00:52 - get
00:53 - started I will start with a brief
00:55 - explanation of the asp.net core MVC
00:58 - structure just so that you understand
01:00 - how our projects are structured firstly
01:03 - we have models which are C classes where
01:06 - we need to define properties the models
01:09 - that we create represent the table in
01:11 - the database and the properties are The
01:13 - Columns of our
01:14 - tables then the connection string is the
01:17 - link from the C code to the physical
01:20 - database it contains the address where
01:23 - the database is located and how to
01:25 - authenticate to the database service we
01:28 - store the connection stream Str in a
01:30 - file called app settings.
01:32 - Json the context is a class that acts as
01:36 - a middleman it has C methods that you
01:39 - can call to ask the database to do
01:41 - something useful like add a record or
01:44 - return all rows in a table we use this
01:47 - methods and interact with the context in
01:49 - a file called controller where we handle
01:52 - the user
01:53 - requests the context itself relies on
01:56 - the connection string in app settings.
01:58 - Json to a physically Loc the database
02:00 - file and it also makes changes to the
02:03 - database Tables by connecting the models
02:06 - with the
02:07 - database the database itself is the
02:09 - place where all the tables are stored
02:12 - which contain all the data of the
02:13 - application that you want to store in
02:15 - them there are then the view Pages where
02:18 - we write all the front end side of the
02:20 - application or in other words what is
02:22 - displayed in the browser When We R the
02:25 - application The View Pages interact with
02:28 - the context in order to paste the data
02:30 - from the database into the pages and
02:33 - afterwards they display everything that
02:35 - is written in them to the browser in
02:38 - this first project we'll create the food
02:39 - menu web application the main purpose of
02:42 - it is to store data in the database and
02:45 - to be able to display them dynamically
02:47 - in the
02:48 - application so let's first create a new
02:55 - project we will select the
02:58 - MVC template
03:04 - and let's give it a name like
03:06 - [Music]
03:11 - menu just leave this all by
03:20 - default okay to begin with let's go to
03:24 - the package
03:26 - manager and let's install the three two
03:31 - or three things that we need for every
03:33 - project that we
03:34 - make so the first thing is Entity
03:37 - framework
03:50 - core then we need the Entity framework
03:54 - core
03:58 - tools
04:06 - and we need something from the SQL
04:09 - Server there are some commands here that
04:12 - we use to migrate our data to the
04:21 - database so as you can see we have these
04:24 - three things
04:25 - installed now we are ready to go let's
04:28 - go to the models and create a model
04:41 - first okay so adding a class I'm going
04:44 - to be naming
04:50 - this like
04:58 - menu
05:05 - okay first we need to create some
05:07 - properties here the first one is the int
05:19 - ID we need the
05:28 - name so we're going to be needing an
05:31 - image URL for the URL of the foods in
05:36 - the
05:36 - menu in order to put a picture
05:40 - there
05:46 - and and we need the
05:49 - double variable property for the
05:58 - price okay let's add the new class now
06:03 - for the ingredients of the foods in the
06:08 - [Music]
06:13 - menual we need an INT property in ID
06:17 - property and the name for the
06:21 - ingredient okay so it it would make more
06:23 - sense to rename this so to to make put a
06:28 - name like dishes or
06:30 - something rather than
06:34 - menu and then we're going to be creating
06:37 - a another model in order to connect the
06:40 - dish with the
06:42 - ingredient because one dish can have
06:45 - multiple ingredients and one ingredient
06:47 - could have would be part of many
06:51 - dishes so like we'll name
06:54 - this like this helper model dish
06:58 - ingredient
07:09 - we need a an ID for the first for the
07:13 - Dish Dish
07:18 - ID of course the property of type dish
07:22 - we'll name this
07:24 - dish the same thing goes for the
07:27 - ingredient model so an ingred gent
07:35 - ID and then down below an
07:39 - ingredient
07:49 - property so now we need to go to both
07:52 - the dish and
07:54 - ingredient models and connect them to
07:57 - the dish ingredient help per
08:01 - model so we need the list of dish
08:10 - ingredients I've name renamed
08:13 - this had the typing error
08:27 - then we'll name this dish
08:33 - ingredients and this had to be a
08:49 - list we'll make this
08:51 - nullable and we can just copy this down
08:54 - and paste it in the
08:56 - ingredient model as well
09:09 - okay so now we need need to add a folder
09:12 - for
09:13 - the context first we need to we usually
09:18 - store the context in a data folder so
09:21 - let's just create
09:22 - [Music]
09:28 - one
09:30 - and we can then add a context class in
09:37 - it you can name this something
09:41 - like menu context or
09:44 - [Music]
09:58 - something
10:04 - so firstly we need uh menu context
10:24 - Constructor the menu context class has
10:27 - to inh the DB
10:34 - context right there
10:38 - and okay so the Constructor takes a deep
10:44 - context argument
10:55 - there let's just import a few things
10:58 - here firstly
11:11 - so this here was DB context
11:28 - options
11:34 - so everything that I'm writing here is
11:36 - just
11:38 - the by default what we need in every
11:41 - context so really don't need to learn
11:48 - it next we we need a a model
11:54 - creating
11:56 - method here so we see this was cre
11:59 - cre
12:04 - itself and first we need to specify here
12:07 - the relation between the dish model and
12:10 - the ingredient
12:14 - model so we need to specify here
12:17 - basically that they are both many to
12:20 - many Rel have a they both have a many to
12:23 - many relationship with each
12:28 - other
12:35 - so first we need to specify the keys
12:38 - that we have written in the dish
12:40 - ingredient helper
12:54 - model so the first one was the dish ID
12:58 - which connected the model to the dish
13:00 - model and then the ingredient
13:23 - ID so then we need to specify the
13:26 - relationship of the dish and the
13:28 - ingredients with the dish ingredient
13:31 - model so firstly we WR
13:35 - here for the dish
13:50 - model so basically what we are doing
13:52 - here is that we are saying that the one
13:54 - dish is connected to many dish
13:56 - ingredients and we specify the forign
13:59 - key which is the dish
14:13 - ID okay then copy this down and do the
14:16 - exact same thing for the ingredient
14:20 - model we just need to change a few
14:22 - things
14:25 - here so one ingredient is connected to
14:29 - any dish
14:30 - ingredients and we specify the foreign
14:32 - key
14:42 - also so we need to connect we need to
14:45 - create two DB set instances for each
14:50 - model that we
14:58 - created
15:16 - so one for the dish model and we'll name
15:20 - dishes one for the ingredient
15:26 - model we'll name it ingredients
15:34 - and one more for the dish
15:57 - ingredient
16:00 - okay so what's left for us to do now is
16:02 - we have created successfully the models
16:05 - but we need
16:06 - to we need to add some data in
16:12 - it and to add first some data for in
16:16 - order to create just
16:17 - one dish item in our application
16:23 - so iting here that the dish has some
16:27 - data
16:38 - so we're giving it an ID of
16:47 - one and we'll name it something
16:51 - like I don't know for this video I'm
16:53 - just going to make it the menu of out of
16:57 - pizzas so like
16:59 - [Music]
17:17 - Margarita I'm setting the price to
17:22 - 750 and for the image URL we can just go
17:28 - to Google
17:40 - so just pick a
17:42 - photo and we'll copy
17:48 - the okay this one's fine we'll copy the
17:51 - image address
17:54 - there and we'll paste it
17:57 - here it's this long string
18:00 - [Music]
18:05 - here and then we we can add some
18:08 - ingredients to it to the
18:27 - database
18:40 - so the first ingredient we give it an
18:42 - idea of one
18:45 - and a name of something
18:49 - like tomato sauce or
18:57 - something
18:59 - we're going copy this and we'll make
19:02 - another
19:04 - one that we need for the margarita pizza
19:07 - so we'll change the ID to to and we'll
19:11 - name it m or
19:14 - something so these are the two things
19:16 - that make a margarita
19:23 - pizza and the last thing is we should
19:26 - connect the first model the margarita
19:29 - pizza with the two ingredients with the
19:31 - ingredients
19:32 - model
19:39 - so so in the dish ingredient model we
19:42 - are basically just going to specify the
19:44 - ID of the dish model and the ID of the
19:49 - ingredient
19:51 - model so new
19:57 - ingredient
19:59 - the dish ID was one and the ingredient
20:03 - ID so the first ingredient had the ID of
20:06 - one we can do the same thing for the
20:10 - second
20:19 - ingredient okay so this id1 ingredient
20:23 - did2 and I think everything is set for
20:26 - the
20:27 - database everything looks
20:31 - okay just looking if I forgot something
20:34 - but okay so now we need to connect the
20:37 - project to the
20:39 - database the SQL Server database we'll
20:41 - just go to there to server Explorer and
20:44 - create a new SQL
20:47 - database we need the server name firstly
20:51 - so let's just open up SQL Server
20:54 - management
20:57 - Studio
21:01 - okay so here's the server
21:04 - name and I'm just copying it
21:06 - [Music]
21:10 - down I'm pasting it here then we just
21:13 - need to give a name to the
21:22 - database menu database or
21:26 - something the database was created and
21:28 - here in the property window here we need
21:31 - to copy down the connection
21:33 - string and then go to app settings
21:38 - adjacent we need to create a connection
21:41 - string so firstly connection strings
21:45 - equals so we'll give it a name to the
21:47 - connection string I usually make it this
21:50 - like default connection
21:53 - string but it doesn't
21:55 - [Music]
21:57 - matter
22:08 - and then we just paste down here the
22:11 - connection string that we
22:13 - copied we need just to add the
22:15 - encryption of false because we're not
22:18 - authenticating with the database with a
22:20 - password or
22:24 - something the last thing is we need to
22:27 - go to program. CF yes and we need to add
22:29 - a service
22:31 - here and I have this copi
22:34 - down somewhere it's a long line but
22:38 - basically we just need
22:40 - to basically what we do here is just put
22:43 - the context name there and we put the
22:46 - connection string name also with the
22:49 - name so the default connection string
22:51 - name and basically what we're doing is
22:54 - just
22:56 - connecting the context to with the
22:59 - connection
23:00 - string so it can connect them to the
23:04 - database we just need to import here the
23:07 - data because the context there was not
23:11 - known let's first run the
23:15 - project and then we we need to add the
23:27 - migrations
23:29 - so we need to give it a name like
23:32 - initial migration or
23:45 - something so we hit enter
23:49 - and the migration was created we just
23:51 - need to update the database so the
23:53 - changes can be
23:57 - saved okay I
24:00 - [Music]
24:02 - forgotten the syntax there was
24:07 - wrong I needed a
24:16 - dash uh when I store when I enter
24:20 - this encrypt in the connection string
24:24 - this this shouldn't be a colon it should
24:27 - be an equal sign
24:28 - [Music]
24:30 - actually just changed it
24:32 - [Music]
24:37 - there just update the database one more
24:40 - [Music]
24:48 - time okay so now we just need to add the
24:53 - controller I'll just name it something
24:57 - like
24:59 - usually the controller has the name of
25:01 - the model but I name it manual as the
25:05 - name of the
25:11 - application I'm just importing a few
25:13 - things so
25:15 - the data
25:19 - folder in order to connect to the to the
25:22 - context and the models as well we need
25:27 - there so we just have first an
25:31 - index function
25:38 - there so let just go to the
25:50 - Views so uh we're making a folder called
25:54 - menu and inside it we can add a CL a
25:57 - view page
26:00 - we'll just leave it as that
26:18 - index so at the top we're importing a
26:22 - list the list of the
26:25 - model of the dish model
26:30 - so
26:31 - menu.
26:35 - models that
26:44 - this here we can name the view data
26:48 - title so the title of the tab to be like
26:57 - index
27:03 - or make new
27:17 - index so first let's add the div with
27:21 - the class of container for some paddings
27:24 - and
27:27 - margins
27:35 - inside we need to make another div with
27:39 - the class
27:40 - [Music]
27:42 - Arrow so that we can input the elements
27:45 - in a
27:46 - row and now we need a for each
27:54 - Loop to look through uh the elements in
27:58 - the the list that we are
28:00 - important so we'll just make it V
28:05 - VAR
28:09 - item in
28:10 - [Music]
28:24 - model and here we can just start
28:26 - inputting the data that we want to show
28:28 - in it
28:30 - so firstly we'll make another div with
28:33 - the class of column six which basically
28:36 - in bootstrap means that whenever we
28:39 - input some a div in a row and we give it
28:43 - the column six so it takes six out of 12
28:50 - imaginary columns in a boot step
28:53 - row so this div will take just half of
28:56 - the
28:57 - row
29:01 - and then we can input the item
29:04 - [Music]
29:12 - name the item
29:16 - image
29:18 - URL and the
29:27 - price
29:32 - okay let's make it a header for the name
29:34 - so it's a little bit bigger and in
29:37 - bold can just run the project firstly to
29:40 - see what we are
29:56 - doing okay so we forgot to make the
30:01 - index function so here we The View has
30:04 - to return a
30:07 - model so okay and firstly we need to add
30:11 - the we need to import the context there
30:15 - we need the variable firstly for the
30:17 - context the menu
30:20 - context we'll just name it index uh
30:23 - context and then we need
30:26 - um we need a Constructor with for the
30:31 - context and there we give it
30:35 - the the context variable will give it
30:38 - the
30:45 - context okay so this is a asyn weight
30:49 - meth function so we need to change
30:51 - little bit the name of the function so
30:53 - async
30:55 - task and then in the view we can await
31:00 - the context that
31:04 - dish that
31:11 - dishes and to list ASN method basically
31:15 - just lists all the elements in the
31:19 - context okay so this has to work now we
31:22 - need to see in the index
31:26 - page we need to see our data
31:29 - [Music]
31:33 - now okay so it works but we have made
31:36 - some we need
31:39 - to make some changes here so firstly the
31:44 - image URL has to be inside an image
31:50 - tag in the source attribute inside
31:56 - it
32:11 - so inside a style attribute we need to
32:14 - specify the width of the image I'll just
32:16 - make it like
32:21 - 75% or
32:22 - [Music]
32:26 - 70%
32:30 - and we can add a class to each div
32:32 - element in order to place them in the in
32:36 - the center of their
32:39 - div
32:43 - so if you can open up the
32:45 - bootstrap documentation for the placing
32:49 - of the
32:50 - elements we need to First make the div
32:53 - deflex or like a flex
32:56 - box and we can then right justify
32:58 - content Center so this basically just
33:02 - makes the div's a flex box and then puts
33:05 - the element in the center of the main
33:08 - div and we copy this down to each div
33:11 - that we have
33:13 - here and we could format the price a
33:15 - little bit so it takes two two string
33:18 - and two which basically means two places
33:21 - after the
33:22 - [Music]
33:26 - comma and just stand the projects one
33:29 - more time and
33:30 - see if all this data looks
33:37 - better okay so this looks
33:39 - [Music]
33:40 - fine it had to take half of the row and
33:43 - it's in the center of it so this looks
33:46 - okay but we need also to add
33:51 - some we need so now for each item we
33:53 - need to add The Details
33:56 - page so we can just go to the controller
33:59 - one more time and we can add a a details
34:04 - function
34:04 - [Music]
34:08 - there this is also going to be an a
34:10 - sing8 function
34:26 - so so the details function here takes an
34:30 - INT
34:48 - ID will I
34:51 - just have a variable called called it
34:54 - something a dish and we'll take from the
34:59 - loop through the context of dishes for
35:02 - the element with the ID of the ID of the
35:05 - model that we have in the
35:08 - argument so this is pretty much the
35:10 - syntax to do it so the X so the element.
35:14 - ID in a database has to have the ID of
35:17 - the element in the
35:18 - [Music]
35:26 - argument
35:29 - so now in The
35:31 - Details page we also need to include
35:34 - there the
35:37 - ingredients so in the index page we
35:40 - didn't need to show all the data so we
35:42 - didn't show the uh ingredients of the
35:45 - dish but now in the when you open up the
35:48 - details page we need to include there
35:50 - the ingredients so firstly we'll just
35:53 - write
35:56 - include
36:00 - include the uh dish
36:12 - ingredient and then also include the
36:23 - ingredients so we are specifying here
36:26 - the connection of the dish with the dish
36:27 - ingredients helper model and then with
36:30 - the ingredient
36:32 - model then we can just return the
36:37 - view it's good also to have a an if
36:41 - close here in case the dish is
36:46 - null and just return not found
36:53 - page so now we need to go to the view
36:57 - pages and we need to add a details view
37:11 - page nameit
37:21 - details so now here on top we need to
37:24 - import just a model not a list of models
37:26 - because it's just One Singular model
37:28 - that we are we have in the details
37:30 - page so model menu that
37:34 - models that
37:40 - dish going put a title of the tab here
37:45 - in the view data
37:56 - variable
38:06 - of course we need the container div to
38:09 - give it some
38:26 - stylings
38:35 - then we need just to put each element in
38:38 - the center
38:40 - also so we don't need the
38:43 - column div because we just have One
38:46 - Singular
38:46 - [Music]
38:51 - element so firstly the title of the
38:55 - model and here the syntax is the a
38:57 - little bit different so we just put
39:00 - model. name so different to
39:03 - the case when we have a list of models
39:07 - imported
39:10 - so and just go to the index view page
39:14 - and just copy something down because
39:16 - these are pretty much the
39:17 - [Music]
39:26 - same
39:39 - so we need to change here also model
39:42 - that image
39:51 - URL okay let's just set the width to 50%
39:54 - because it's it's a whole row here it's
39:56 - just one
40:02 - item and down here
40:13 - also so here we need
40:16 - the we need to add the
40:19 - ingredients which we did not have in the
40:21 - index page so we'll just make a a list
40:26 - here
40:30 - make the for each Loop to Loop through
40:34 - each each item's ingredient so item
40:40 - in
40:41 - model. Dish ingredient I
40:45 - think dish
40:47 - ingredients and here we can make some
40:51 - ordered list some
40:56 - lists
41:01 - just input item
41:04 - that ingredient.
41:11 - name so this has to work seems fine oh
41:15 - we got we got to add a button here in
41:18 - the index page so that people can so the
41:22 - user can go to The Details page then
41:26 - so
41:29 - we just need to add another
41:33 - div and inside of it we need to input an
41:36 - anchor
41:43 - tag so we can specify the
41:47 - action is pretty much the name of the
41:49 - function in the
41:54 - controller and we need to specify the
41:57 - out ID or the ID that the function
42:00 - details
42:01 - takes so this is item.
42:13 - ID and just some styling we add a class
42:17 - of button and button info is the color
42:21 - it's like a light blue
42:26 - color
42:35 - okay the button is too small because we
42:37 - didn't input any name in the button so
42:41 - inside the anchor tags we can make Right
42:44 - View
42:45 - dish so this looks fine and here we have
42:48 - the details page which needs some
42:52 - styling the
42:54 - ingredients should be listed as a
42:59 - list so I've written down it should be a
43:03 - list not a not i
43:07 - l there and we can add here another
43:10 - button to in order so the user can
43:15 - redirect to the index
43:25 - page just add an anchor tag with a class
43:27 - of button and button
43:29 - [Music]
43:34 - info and the action is index it doesn't
43:38 - take any parameter any argument
43:42 - so and the name of the button back to
43:46 - the
43:46 - [Music]
43:52 - menu so the list should be ordered
43:56 - now should be presented as a regular
44:01 - list okay so it looks better and we have
44:04 - the button to go back to the
44:06 - menu so this is great but we can add
44:11 - some more data to the to our application
44:14 - and the easiest way to do it instead of
44:17 - going to the to the context is to open
44:21 - the database in the SQL management
44:26 - Studio
44:28 - and to open each model so it would take
44:32 - a lot of time if we did this in the
44:33 - context by adding the data to the models
44:35 - there so we can just open the tables
44:38 - from the SQL Server
44:43 - Studio okay and so we can write this
44:45 - manually here we can write the names I
44:48 - I'm just adding a couple more dishes
44:54 - here we're going to write the names here
44:58 - I'm just making a pepper only like
45:00 - because I'm doing
45:01 - this yeah I'm doing it with pizzas only
45:04 - so just give the
45:08 - price and we have to find an image of a
45:12 - pepperoni
45:20 - pizza let's
45:24 - see I'm just taking this one so copy
45:28 - image
45:29 - address and we can input here the
45:33 - URL okay let's just hit enter
45:39 - here okay so let's just add another one
45:43 - like
45:45 - [Music]
45:47 - vegetarian just find an image for
45:55 - it
46:07 - okay so let's inut here the
46:10 - URL and just put the price in
46:18 - it like
46:25 - nine
46:27 - so just hit the
46:29 - enter it is
46:31 - saved so I'm leaving it with this let's
46:34 - just go now to the
46:36 - ingredients
46:39 - table so I edit top 200 rows no this is
46:43 - the dish ingredients table let's just go
46:46 - first to the ingredients table to add
46:47 - some ingredients for the two more to to
46:51 - the two pizzas that we made we just make
46:54 - like
46:55 - pepperon
46:57 - a couple edges would be
46:59 - [Music]
47:00 - okay like paprika and mushrooms okay I'm
47:05 - just leaving it with
47:07 - that so now just need to go to the dish
47:10 - ingredients to connect this to each
47:11 - other so to connect the second
47:15 - dish with
47:17 - the third ingredient which was
47:20 - [Music]
47:25 - pepperoni
47:28 - wait it needs to be connected to
47:30 - the first and second actually but yeah
47:34 - just connect them to the three first
47:37 - ones which was I think sauce and
47:42 - mozzarella
47:45 - yes okay so let's just connect the third
47:48 - one to
47:50 - the to
47:52 - the just to the paprika and mushrooms
47:55 - ingredients
47:58 - so just around the
48:02 - project okay you can see the data is
48:04 - store is displayed out dynamically here
48:08 - so we have the two
48:10 - pizzas which all have the uh details
48:14 - Pages created we can see in the URL
48:16 - above that the index is displayed there
48:21 - so another thing that we can do here is
48:23 - just to edit a little bit the layer out
48:27 - page so let's just remove
48:31 - the home and
48:34 - privacy navigation
48:43 - items and what we can add here we can
48:46 - add uh we can add a search bar button to
48:50 - filter through the data and I've handled
48:53 - this in previous video how to add the
48:55 - search bar but in this one I'm just
48:58 - going style it a little bit better so it
49:00 - looks looks nicer so inside the
49:04 - navigation item here or we just need to
49:06 - add the
49:09 - form the action needs to be redirected
49:12 - to the controller named to the index not
49:16 - to the menu
49:22 - controller and yes the action is
49:25 - index and the method when we filter
49:30 - data was
49:34 - get so right now here just need to add
49:37 - an input
49:39 - firstly okay so just one
49:50 - tag so I add some styling to it to make
49:53 - it a little bit different from the
49:54 - previous video so
49:59 - I'll give the width of a width of 80%
50:03 - and the submit button is going to be an
50:07 - icon will make it like 20% so we'll
50:11 - float this to the left
50:13 - side which basically means
50:16 - that the input is and the button then
50:19 - will be both Flo it to the left side so
50:21 - they are in in one single
50:24 - line and the Border radius we'll just
50:27 - give a corner to the we'll just make it
50:30 - a corner to the top
50:34 - left to the top left search
50:37 - bar we'll just make it a little bit
50:39 - around it and we I say like 20
50:45 - pixels and to the top to the
50:49 - bottom to the bottom left
50:52 - radius so here we we're just making it a
50:55 - little bit around it on the
50:59 - sides I make the background
51:03 - [Music]
51:15 - transparent this was it for the styling
51:17 - now just the type of the input has to be
51:20 - text we need a name for the input so we
51:24 - can take it and handle it in the
51:27 - controller then so the name search
51:32 - string and a styling of what you can
51:36 - edit of or make it as a form control
51:39 - which looks better so it'll give it the
51:40 - class of it so this was it for the input
51:43 - now for the button in this time I'm
51:45 - going to make I'm going to store an icon
51:48 - in it so I'm going to
51:51 - CDN awesome font awesome this is just a
51:55 - website where okay first we need to
51:57 - import import it library and they have
51:59 - some nice icons there so just first we
52:03 - need to import the library here in the
52:04 - header in the layout page just copy
52:07 - paste it there and then down here when
52:11 - we when we make a button we can add an
52:15 - icon in in the middle of inside the
52:18 - button text we can add the
52:21 - icon so first Just For The Styling we'll
52:23 - make this 20% and we'll float this to to
52:26 - the left as well so both the input and
52:29 - the button are in one single
52:38 - line so we I I don't want any border for
52:42 - it so it looks a little bit
52:48 - nicer I'll give it a background of
52:50 - transparent as
52:55 - well
52:58 - I'll give the height of 40
53:07 - pixels this is it for the styling and
53:09 - the type of the button has to be
53:11 - submit and inside the button now here is
53:14 - the icon that we can import from the
53:17 - font aome website which have some nice
53:20 - icons
53:22 - there so we just need to add an i an
53:27 - icon and have a class the
53:32 - search for the search icon so this is
53:36 - the website where we can go font.com
53:40 - icons so here you can go and find any
53:43 - icon that you want and you can import
53:45 - the icons mine I searched for
53:50 - before and it has a class of fa fa
53:55 - search
53:58 - I'm just going to save the project
54:00 - firstly to just see what I'm doing
54:23 - here okay so you can see this nice
54:26 - search bar here we going see the search
54:29 - icon there it just needs to be a little
54:31 - bit more in the middle so in the list
54:35 - above we can add The Styling margin of
54:38 - Auto which basically means that it's
54:42 - equally distance from the left side and
54:45 - from the right side so this has to be
54:48 - now in the
54:54 - middle in the middle of the pce so this
54:56 - looks very good I think as a search bar
54:59 - this is actually pretty nice we just
55:02 - need to handle now the functionality of
55:04 - the search bar which I said that we pre
55:07 - previously did that in a previous video
55:09 - but I'm just showing it here also so
55:12 - we'll just go to the controller to the
55:23 - index So In This Very iable we'll just
55:27 - make a link
55:28 - query so we're just looking through the
55:32 - context uh so the information in the
55:35 - database will looping through the
55:37 - context of
55:55 - dishes
55:56 - [Music]
56:01 - this is just a syntax that you usually
56:02 - do it and in the we need an argument the
56:05 - search string which was the name of the
56:07 - input in the form that we had and now we
56:10 - can make an if close if the search
56:14 - string is not null or
56:25 - empty
56:27 - okay so we need to we'll take the dish
56:30 - variable
56:31 - here and we'll or the dishes it's better
56:35 - it sounds
56:37 - better we'll just make this Lambda
56:39 - expression that you usually do in this
56:44 - case to find specific data in the
56:47 - database
56:48 - so we searching by the name of the
56:55 - dish
57:01 - here we can return the view we can
57:02 - substitute here the context add dishes
57:05 - with ADD dishes and we can copy this and
57:09 - paste it down here
57:12 - also so in case the search string is not
57:15 - null it goes to the view in the if
57:21 - Clause okay the functionality should
57:23 - work fine now we can just try it here
57:27 - when this loads so just write pepper on
57:31 - here or just pep and it shows down
57:36 - here in this second project we're going
57:39 - to make an online text editor kind of
57:41 - like Google Docs where you can create an
57:43 - account and then create your documents
57:46 - edit and format them and then you can
57:48 - print those documents so even if you log
57:51 - into a different device you can access
57:53 - your documents modify them or print them
57:57 - we're are going to import a library from
57:59 - an online text editor in order to get
58:01 - all the commments that we need to format
58:04 - our text so let's just
58:07 - begin so let's just create firstly an
58:10 - empty
58:12 - project let's just select an MVC
58:19 - template and let's just give it a name
58:22 - like
58:23 - text
58:25 - editor
58:26 - click on next and in the authentication
58:30 - type we select individual
58:34 - accounts now let's just wait for the
58:37 - project to
58:40 - load the first thing we want to do is to
58:45 - create a
58:50 - model we're adding a class in the models
58:54 - folder and we will uh name it DOC or
58:57 - document for the documents that we will
58:59 - create in this
59:07 - application so firstly we will need an
59:10 - in ID
59:21 - property we'll need a title of type
59:25 - string
59:28 - next we'll also need a property for the
59:32 - content of the
59:35 - document and the last thing that we need
59:37 - we need to connect our documents to to a
59:41 - user so firstly we'll need to the user
59:46 - ID
59:48 - property and next we need to specify the
59:52 - foreign key so the foreign key is the
59:55 - user ID
59:57 - and this user ID is connected to our
60:01 - identity user model that is
60:04 - created when we firstly created a
60:08 - project when we typed authentication
60:10 - type to be as individual
60:12 - accounts and now we can just make these
60:16 - two properties
60:21 - knowable and we can write on top of the
60:25 - user ID property we can write there we
60:28 - can put it as required so that a
60:32 - document cannot exist without its user
60:35 - so if we it happens for us to delete the
60:39 - user this makes the documents of it of
60:42 - the user to be deleted as
60:46 - well now we just need to go to the
60:50 - context and there we can we need to
60:52 - specify the DB set instance for the
60:55 - model that we
60:56 - created we will name it
61:00 - docs and we need to import the models on
61:03 - top of the
61:11 - page so let's go to
61:14 - program.cs and here we can see the
61:17 - services that were injected when we
61:20 - created the project so we can see here
61:23 - that the context is connected to the
61:26 - connection string and we also
61:30 - see here that we have the service for
61:33 - the identity
61:35 - users which we here we need to specify
61:38 - here the confirmed account require
61:41 - confirmed account to false so that when
61:44 - we uh register a user with an account we
61:48 - don't need a confirmation for that
61:51 - account it will just be
61:54 - created now we are just going to create
61:57 - the database for our project let me open
62:00 - the SQL Server
62:07 - Studio okay so here need to copy the
62:10 - server name
62:15 - here I'm going to paste it here and then
62:18 - I'm just putting a name for our
62:20 - database which I just make it text
62:23 - editor
62:24 - data
62:28 - so we have created a database in the SQL
62:30 - Server studio and here in the window
62:33 - below we can copy the connection
62:36 - string and just go to app settings. Json
62:40 - the default connection string that was
62:42 - put here when we created the project
62:45 - let's just substitute it
62:47 - here and I'm also going to need to
62:49 - specify the encrypt to false here
62:52 - because when we connect to the database
62:55 - with we don't have a password for the
62:57 - database or some kind of
63:00 - encryption and all that is left to do
63:02 - right now is just adding the migrations
63:04 - to the
63:06 - database so I'm going to package manager
63:11 - console and down here just add migration
63:15 - and a name for the
63:24 - migration build
63:27 - succeeded now we just need to update the
63:30 - database as
63:47 - usual okay everything seems
63:50 - okay just going to go to the controllers
63:52 - and I'm going to add the One controller
63:55 - we need for this
63:57 - project I'm making it with
64:00 - views so there will be views outo
64:04 - generated and the crowd operations as
64:07 - well I'm going to just specify here the
64:08 - model class and the
64:11 - context the name I'm going to leave it
64:13 - as docs
64:20 - controller so our controller is created
64:23 - with the actions or the methods
64:26 - we actually are not going to need the
64:28 - details action here and the view page as
64:32 - well because just like in Google Docs
64:35 - for example when you click on a document
64:38 - you go to an edit link so you just go to
64:41 - a link being able to to edit
64:49 - it okay we're not going to need this
64:52 - line here in the edit method
65:03 - so what I'm going to do here in the edit
65:05 - and in the delete method I'm going to
65:07 - make it so only the user that has
65:10 - created the document can be able to edit
65:15 - or delete
65:16 - it so this is something we've seen in
65:18 - the previous tutorials as well so if we
65:21 - write this line here so if the document.
65:23 - user ID is not equal to
65:27 - the to the user that is uh currently
65:31 - logged in the application then we're
65:34 - we're going to return a not found page
65:36 - so user. find first
65:40 - value and in Brackets we're going to
65:43 - specify the claim types
65:46 - that name identifier which just
65:49 - basically just gets the usern the user
65:53 - ID for the user that is currently loged
65:55 - loed
65:56 - in and what I'm going to do is I'm going
65:58 - to copy this and I'm going to put it in
66:00 - the delete method as well so that only
66:05 - the users that have the user that create
66:08 - the document can be able to delete it or
66:11 - to edit
66:13 - that because if we leave it by default
66:16 - just like that if the user has the link
66:19 - it can go and edit or delete somebody
66:21 - else's
66:24 - document
66:26 - so I'm just running the project firstly
66:28 - just to
66:29 - see what we've got there and so that I
66:33 - can just register a user firstly so that
66:36 - I can start working because I'm going to
66:39 - need to connect each document that we
66:41 - create with a specific
66:48 - user so I'm just going to register a
66:50 - user
66:54 - here I usually use the Sean email I
66:59 - don't know
67:03 - why and just giving it the password
67:11 - Here below as well
67:16 - and so we are logged in as shown
67:19 - here you can just go to the docs link
67:22 - which takes us to the controller to the
67:25 - index index view of the controller and
67:27 - now let's just keep working with the
67:36 - methods okay so firstly I'm just going
67:38 - to make uh put the authorized tag on top
67:42 - of the class so that no I'm going to
67:45 - need to import here the
67:48 - authorization on top of the of the page
67:52 - and so this just makes it so only the
67:54 - users that are of authenticated can
67:56 - access this
67:57 - controller and let me just start with a
68:00 - method first I don't need this line
68:06 - here so I'll start with the create
68:08 - method I'm just going to go to the
68:10 - create view page next because this is
68:16 - okay so what I'm going to do
68:20 - here I'm going to delete a few labels
68:23 - because I think it looks better
68:26 - on the
68:28 - page and if you also know Google docs
68:32 - for example you just don't have a label
68:35 - for the content or for the text you just
68:37 - have a place to put them I'm just giving
68:40 - the title a value of Untitled
68:43 - document which basically just so when
68:47 - you don't put a name to your document it
68:49 - just print it as Untitled
68:54 - document
68:56 - removing the label down
69:05 - here and actually to get the user we
69:08 - just need an input firstly of type
69:11 - hidden so the user don't see the user
69:17 - ID TCH here has to be user
69:22 - ID and the way we can get the user ID of
69:26 - the current logged in view user we just
69:29 - need to import the asp.net identity on
69:34 - top of the
69:39 - page so
69:41 - microsoft. asp.net
69:44 - core.
69:45 - identity and we also need to inject here
69:48 - the user
69:51 - manager we've seen this before in the
69:53 - previous videos
69:58 - it takes an identity user as a
70:08 - parameter and then I'm just giving it a
70:10 - name
70:15 - here so I'm just taking the user that is
70:18 - currently logged in the application and
70:21 - doing it by typing user
70:23 - manager. get user ID of the current
70:30 - user and what we're going to do now here
70:33 - we're going to just fix the
70:36 - input the input is going to be a text
70:39 - area
70:42 - actually so for the for the content of
70:46 - the document we're going to need the
70:48 - text area
70:51 - tag with the asp4 attribute T content to
70:56 - connect it to the content and now we're
70:59 - going to need to open up
71:04 - Google we're going to find an online
71:07 - text editor
71:08 - online which this one that I'm taking
71:11 - here is tiny MCE which allows you to
71:17 - import the
71:19 - [Music]
71:21 - application so I'm copying this text
71:24 - here
71:26 - what what this basically makes allows
71:29 - you it allows you to have some way in
71:33 - your text area to edit your your text
71:38 - I'm going to the layout page to put them
71:41 - in the
71:43 - head
71:45 - text and here we can
71:49 - see here the no API key that we have
71:52 - that we have here which which basically
71:56 - is just like a free way to use this
71:58 - library but we could also register in
72:01 - the application and take an API key here
72:04 - this application has this page that we
72:08 - visit visit it has
72:11 - various packages for different
72:13 - things for different different plans and
72:16 - here just making a DOT here to separate
72:21 - this lines and as we can see there are
72:23 - different plugins to this
72:27 - Library here in the text area we just
72:29 - need to write the ID of
72:35 - tiny and if we try to view the create
72:38 - page now in the
72:40 - browser we will see that in our text
72:42 - area there will be
72:44 - [Music]
72:45 - some comments that allow us to edit our
72:49 - text just like in a word or in Google
72:54 - Docs as we can see we have
72:57 - some so we have this warning here
73:01 - because as we can see in the page of
73:04 - this tiny MCE there are different plans
73:08 - here we could sign up for a free plan
73:10 - and take the API key but I'm just not
73:14 - doing it because so that the tutorial
73:16 - don't take
73:18 - long Different Page different websites
73:21 - have different kind of
73:24 - plans
73:31 - so in The Styling I'm going to make the
73:35 - width to be a bit
73:42 - bigger I'm make it like 60 view of the
73:46 - view width and the height to be like 80
73:50 - of the view
73:53 - height not I could do here is I could
73:56 - also put a link for our delete
74:10 - button you just need to specify the
74:13 - action to be the
74:15 - delete the text here to be delete or
74:24 - something
74:25 - and we need to specify the aspr out ID
74:28 - for the ID of the model that we want to
74:32 - uh Delete which is going to be the at
74:35 - model.
74:39 - ID and I'm just giving you the class of
74:42 - button and button danger to make it like
74:44 - a red button which what usually the
74:47 - delete buttons look
74:51 - like I'm just giving it a margin of two
74:59 - and down in the back to this link I'm
75:01 - going to give it a class to look like a
75:03 - button and button and button info which
75:06 - is a light blue color I'm just running
75:09 - the application to see how this looks
75:11 - [Music]
75:14 - like okay I've got an error here because
75:16 - we have no model created yet no document
75:20 - and it cannot take us to the route that
75:23 - we specified for the delete button so
75:25 - I'm just going to need to comment this
75:27 - out for the
75:29 - moment and if I run the application we
75:31 - should see our other changes that we did
75:34 - so as we can see
75:36 - the okay we have the the uh the section
75:42 - for the content is a bit
75:44 - bigger I could give here the this
75:46 - pattern also a bit of the margin on top
75:50 - set it to
75:53 - three I'm just going to delete this
75:56 - headers here both because I think it
75:59 - looks better without
76:03 - them so in the docs controller now we
76:06 - can
76:08 - just I'm going to see the post method
76:10 - for the create it looks good I just
76:12 - don't need here
76:19 - this okay I'm just going to the edit now
76:23 - to the edit view page
76:25 - I'm deleting this headers
76:28 - this headers on
76:33 - top okay I'm deleting a few labels as
76:42 - well see so the content has to be a text
76:53 - area
76:56 - so this is similar to the one that we
76:57 - had in our create page so I'm just I
77:00 - just copied
77:04 - that so I'm going to need to fix the way
77:08 - we take the user ID as
77:12 - well so this got to be an input
77:18 - tag of type hidden so that we don't see
77:21 - the
77:22 - user the user ID
77:25 - and this will be connected to the user
77:32 - ID okay I can change the back to
77:35 - list anchor here as
77:39 - Welling it like a light blue color with
77:42 - a bit of margin on
77:47 - top let me run the
77:49 - [Music]
77:52 - application actually I need to create
77:54 - first let document so that we can see
77:56 - what we do on in our edit
78:03 - page just something about technology I
78:06 - don't
78:10 - know just an example so I'm copying this
78:15 - down I'm pasting it
78:18 - here I'm going to delete this warning
78:22 - that appears often here I'm just going
78:24 - to make a bit of changes to the text so
78:28 - that we can see that the exact changes
78:31 - that we make are Sav then
78:34 - later okay I'm just making
78:36 - [Music]
78:38 - them I know you can play around with the
78:40 - tools you have here it's just like
78:46 - word I make the font
78:49 - [Music]
78:51 - larger so we just have different things
78:54 - here here different menus that we can
78:56 - work
79:00 - with Okay so we haven't actually fix the
79:03 - index view but I'm going to do it
79:08 - later can just go to the edit link of
79:11 - the with the ID of
79:17 - one okay as we can see
79:20 - that's so the text is just the way we
79:25 - created
79:26 - it with our modifications that we did to
79:30 - it okay so actually we could change a
79:33 - few things so this delete link that I
79:36 - had before here it wouldn't make make
79:38 - sense to put it in a create
79:41 - page and of course you can put it in an
79:44 - edit page but I don't know why I put it
79:47 - there before so I'm just pasting it here
79:51 - uncomment this and this are out now can
79:55 - be
79:58 - accessible let me just run
80:08 - this I'm just going to
80:12 - put these two inputs these two buttons
80:15 - inside the form group so they are
80:19 - aligned better and giving it a margin to
80:22 - the left so they are in in the same
80:30 - line so fix the create and the edit View
80:34 - and methods now we're going to need to
80:35 - fix the index
80:39 - View and just going to delete this whole
80:42 - table
80:46 - thing I'm going to create a big button
80:48 - to enter a blank to create a blank
80:52 - document so I'm putting this in inside a
80:55 - div firstly this
81:03 - anchor so inside the anchor I'm going to
81:06 - put a plus sign so I'm going to make the
81:10 - div uh Flex box I'm making the content
81:14 - to be
81:15 - centered horizontally and vertically
81:19 - with with these two boot boot STP
81:23 - glasses
81:25 - so the line items makes it centered uh
81:29 - in the vertical
81:35 - direction as for the styling I'm going
81:37 - to put the width to something
81:41 - like 50
81:44 - pixels and the height
81:47 - to to 20 to 200
81:53 - pixels
81:57 - so I'm giving it a background color
82:02 - of of like light
82:11 - gray and for the font size of the plus
82:14 - sign that I'm going to make
82:17 - later I'm giving it the size of 100
82:23 - pixels and here in this anchor tag I'm
82:26 - going to write the plus sign and because
82:29 - the anchors are usually uh blue and
82:32 - underlined I'm just going to set here
82:34 - the text decoration to none so that it
82:38 - won't be
82:39 - underlined and I'm just going to need to
82:41 - specify the color so that the anchor is
82:44 - not blue which is by default blue It Is
82:48 - by default blue let me just turn around
82:51 - this firstly and we should just be able
82:53 - to see
82:56 - a button to to have a blank document so
83:01 - that's what I wanted to see so if we
83:03 - click on it we can go to the create
83:07 - page as you can see
83:11 - now and what I'm going to do I'm going
83:13 - to add the
83:14 - span below it so it says the name so
83:19 - like blank document and when we will
83:21 - create our own documents we'll make it
83:23 - will dis play there the title of the
83:26 - document so just like blank
83:29 - document and I'm putting there I'm
83:32 - making it bold so in the stylings I'm
83:34 - just making the font way to
83:46 - bold okay now I'm going to
83:49 - need okay so I firstly just write an HR
83:53 - tag so it's just a big
83:56 - underline so it separates the create new
83:59 - document to the other documents so I'm
84:03 - going to need a loop here a for each
84:05 - Loop for each VAR item in the
84:11 - model so the Sops through each document
84:15 - model that we store in the database and
84:18 - for each document
84:21 - firstly we I'm just copying what we did
84:24 - here above for a bit of
84:27 - structure
84:29 - and of course I'm going to change a few
84:32 - things so the color I'm going to make it
84:34 - like light
84:40 - blue and the action is going to be edit
84:44 - and the ASP out ID is going to be the ID
84:47 - of that model of the
84:53 - document so at item.
84:57 - ID and inside here I'm just going to
85:00 - need to add an I I think to add an text
85:04 - Emoji which I'm going to find in the
85:07 - internet so just like a paper emoji or
85:23 - something
85:28 - so let's just see this one I'll try to
85:31 - copy this it looks okay actually then
85:35 - putting it here I'll put it
85:39 - here okay I need to add the span for the
85:42 - title of the
85:44 - document so I'm going to make the style
85:48 - to the font way to bold as
85:51 - well and I'm going to take then thec
85:54 - uh the documents title this is basically
85:57 - just like you know in word when you have
86:00 - Word documents in your desktop you see
86:02 - the word logo and just the title of your
86:05 - document that's that's just the idea of
86:18 - it okay so and then I'm going to need to
86:21 - to make all of this in a column in a div
86:26 - in a colum in a class with a
86:30 - column with a column class and I'm going
86:33 - to set it
86:34 - to I'm going to set it to two so if you
86:38 - this is a bootstrap class that takes two
86:41 - out of 12
86:43 - imaginary boot strap lines so in a line
86:48 - we're going to be able to fit six
86:51 - different objects and outside the loop
86:55 - I'm going to put this column class class
86:59 - Dives inside the row class
87:03 - div so basically each arow is going to
87:05 - take six six
87:19 - documents okay if we reload
87:22 - this we're going to able to see just one
87:25 - because we created only one
87:33 - document
87:35 - that's what we actually did before so
87:39 - this works now and as I said this a line
87:43 - could take up to six
87:49 - documents let me just create a new one
87:52 - I'll name it something else
87:55 - asp.net I don't
87:56 - [Music]
88:01 - know Cod the
88:11 - future okay so I'm out of ideas I'm just
88:14 - typing something whatever so that we can
88:17 - see how the next document will be showed
88:21 - and there we can see the title of the
88:22 - document and and the same image for the
88:27 - icon when we click on it we see our
88:30 - document just the way we edited
88:33 - it with our comments to
88:40 - edit okay so if we go to program.cs I'm
88:44 - just going to change the default
88:45 - controller to the documents controller
88:48 - to the docs controller so each time we
88:51 - run the application we go directly to
88:53 - the docs
89:00 - controller you're in the layout I'm just
89:02 - going to delete that privacy
89:05 - Tab and I could just specify here the
89:08 - Home tab to be connected to the
89:12 - documents
89:13 - [Music]
89:19 - controller so I can connect the text
89:22 - editor icon of the apption to the docs
89:25 - controller and the Home
89:38 - tab so now what this else left for us to
89:41 - do is that we can change the index
89:44 - method so it only loads up the documents
89:48 - that each user makes so if I log in as a
89:52 - user I'm going to see only my documents
89:55 - and if another user logs into the
89:57 - application he will see nothing if he
90:00 - has created
90:01 - nothing or it's the documents that the
90:04 - user has
90:05 - created I'm just changing this lines a
90:08 - bit
90:10 - here so what I'm going to do here I'm
90:13 - going to Loop through with this I'm
90:16 - going to Loop through the context.
90:19 - docs with this link query
90:22 - lines that we have talked
90:25 - before so this just Loops through the
90:28 - context of documents in the
90:31 - database and then in this variable that
90:35 - we had above we're going to specify so
90:39 - we're going to take only the documents
90:42 - that are of a specific user so that
90:49 - where so here we will take the documents
90:53 - that
90:54 - the their user ID is equal to the ID of
90:58 - the user that is currently logged into
91:01 - the
91:05 - application so with this line user. find
91:09 - first value of the claim
91:16 - types that name identifier here we are
91:19 - just taking the ID of the currently
91:21 - logged in user and we will just take the
91:27 - documents that are of that specific
91:33 - user so I'm running here the application
91:35 - and we should not see any changes to the
91:38 - index
91:39 - method but how are we going to be able
91:42 - to see the changes is if we create the
91:44 - new user now we can register we log out
91:48 - first we can register with another user
91:52 - firstly just like name I know Billy
91:56 - Billy and uh when we firstly log in the
92:00 - application we we will see nothing we
92:02 - will see only the option to create a new
92:05 - blank
92:07 - document and then if we create another
92:09 - document we will see only the documents
92:11 - that are created by
92:22 - Billy so I'm just going to try to create
92:25 - a new document
92:26 - here and this could be a useful
92:30 - application because if you log in the
92:35 - application from different computers you
92:37 - could be able to see your documents that
92:40 - you have worked
92:41 - on and Al so download them which we will
92:45 - see a bit later as we can see we have
92:48 - here the document that we created by
92:51 - Builder and I think I'm just just going
92:54 - to try and test the delete button here
92:56 - because I forgot to do until
93:00 - now so I just going to change a bit the
93:02 - user interface because it's a little
93:04 - messed
93:13 - up so I don't need the user ID to be
93:21 - displayed and that's for the content I
93:24 - could display it again in a text area
93:30 - tag I just copy this from the edit view
93:41 - page and I think that's okay I'm just
93:44 - not going to try to fix a lot of things
93:46 - here it doesn't really
93:50 - matter you can just play around with it
93:52 - so
93:56 - okay so we see exactly the content of
93:58 - the document that we will
94:02 - delete and if we try to delete it it
94:05 - will be
94:11 - gone okay
94:14 - so I'm just going to log into the Shan
94:18 - account one more time we had the two
94:20 - documents that we saw before and what
94:23 - I'm going to show you now is what I was
94:24 - talking about before so we can we have
94:27 - an
94:28 - option in our comments
94:31 - to modify the word the words the text
94:35 - that we input here so we have an option
94:38 - under files print and we can actually
94:42 - print our
94:45 - documents this could be an real
94:47 - application so just like Google
94:49 - Docs you can okay I'm just putting here
94:53 - a file name you can just open up the the
94:56 - application from different computers and
94:58 - you can print out your files there so
95:02 - I'm just going to see okay we have here
95:04 - the shown document was printed as a
95:08 - PDF and here we see what we wrote before
95:11 - so this was it for this video this was
95:14 - how you could create an online text
95:16 - editor in asp.net core in this third
95:20 - project we're going to see how we can
95:22 - use check to accept payment in our
95:24 - asp.net core project all we're going to
95:26 - need is a strap account and we will see
95:28 - from the documentation all the steps we
95:30 - need to take to integrate stripe in our
95:32 - project which is pretty simple by the
95:34 - way next we'll create a small e-commerce
95:36 - application by creating a few products
95:39 - in our stripe account and in our
95:40 - database as well and we will implement
95:43 - this payment functionality to the
95:44 - application it is really not that
95:47 - complicated so just make sure to keep on
95:50 - watching so the first thing we want to
95:52 - do is go to strip.com
95:56 - just enter that on Google here we are on
96:00 - strip.com
96:01 - what we will do now is actually you will
96:05 - have I'm logged in here you just need to
96:08 - you see uh an option to sign up it's a
96:11 - pretty straightforward process but since
96:13 - I'm logged in I can see this dashboard
96:15 - here I'm just going
96:19 - there okay so I'm logged in with my
96:22 - stripe account
96:25 - and what we're going to need here is
96:27 - we're need this secret key here I'm just
96:30 - going to go and find my API
96:33 - [Music]
96:36 - key and here we have our publishable key
96:39 - and our secret key the secret key is
96:40 - actually the one that we're going to
96:41 - need to so that we can make the request
96:44 - to the strip for the checkout session
96:48 - and what we're also going to need from
96:50 - this stra from our strip account we're
96:53 - going to need to to go to our
96:56 - products let's see our product catalog
96:58 - all products and here is where we
97:00 - actually specify each program each
97:02 - product that we want to have in our
97:05 - e-commerce application so basically each
97:08 - product you have you will have to create
97:10 - here and then when the user wants to pay
97:13 - for it we make a request to our stripe
97:15 - to stripe so that the price of the
97:19 - product will be specified here this is
97:21 - actually the most secure way to do it
97:24 - and so that the user don't so that the
97:27 - price is not so to say written in the
97:30 - client
97:31 - site that's actually the um the
97:35 - recommended way of doing it here I have
97:38 - two products that I have created here
97:41 - actually so just this Jordan t-shirt
97:45 - here we see here the name the
97:48 - description and this is the API ID or
97:51 - for the or the price ID that we will
97:53 - actually
97:54 - use to create the checkout session
97:56 - actually I've given a price here like
98:00 - $25 and I'm going to create another
98:02 - product so that you see how we do it so
98:05 - just add a product
98:08 - [Music]
98:10 - here okay I'm I don't know what can I
98:13 - have like a
98:16 - watch I don't
98:18 - know
98:22 - something okay
98:24 - also I'm leaving it here I'm actually
98:27 - going to need to I'm going to need to
98:29 - download this image to my
98:31 - computer so save
98:33 - as here our M
98:39 - watch okay it's
98:44 - here okay let's go back to the product
98:48 - catalog like our
98:50 - money watch description
98:54 - man watch 223 and I'm going to upload
98:58 - the image
99:00 - here this
99:05 - here wait for it to download I'm giving
99:08 - here the password of my
99:13 - [Music]
99:14 - account okay it's downloaded and we're
99:17 - going to make the price to be to be paid
99:19 - for this watch uh one off and the amount
99:22 - to be paid for let's set it to I don't
99:24 - know how much it cost like
99:27 - 150 let's make it dollars and add
99:31 - [Music]
99:35 - product and as we can see our product
99:38 - was also here created what we're going
99:40 - to need to do now is let's just go to
99:43 - strap docks strap
99:49 - documentation and here let me just go to
99:52 - payments here we will actually get the
99:54 - code to create our payment to accept
99:56 - online payments let's just click
99:59 - here and strap basically just gives us
100:02 - all the documentation we need basically
100:04 - it's a very simple process here we have
100:07 - a server. CS class with basically the
100:11 - main method here is this
100:14 - one uh this create method here and we
100:18 - have also three HTML HTML files for the
100:22 - checkout
100:23 - and one for the success when the payment
100:26 - is successful and the other one when the
100:29 - payment is not successful so what we're
100:32 - going to do now is just go to how I'm
100:35 - going to do it is I'm going to create a
100:37 - new project in Visual
100:39 - [Music]
100:41 - Studio let me just search for
100:45 - [Music]
100:46 - MVC okay is the net core where is
100:50 - MVC here
100:54 - and I give a name to the project like
100:57 - strip web
100:59 - app click on
101:03 - next I'm leaving it everything as it
101:07 - [Music]
101:12 - is just waiting from for the project to
101:15 - load and the first thing I'm going to do
101:18 - here actually is I'm going to go to app
101:20 - settings. Json where I'm going to store
101:22 - firstly secret key our API key in our
101:25 - stripe
101:26 - account so let me just go
101:31 - to just write here
101:40 - stripe then secret key that's the key
101:43 - we're going to need actually just inside
101:45 - parenthesis inside double quotation
101:50 - [Music]
101:51 - marks here we'll just input our secret
101:55 - key let me just go to
101:59 - our strip account here I don't know
102:02 - where they
102:04 - were API
102:07 - Keys okay this is the key we're going to
102:10 - use okay just click on it to copy it I'm
102:14 - just going to the project once again and
102:17 - I'm pasting it
102:18 - [Music]
102:21 - here that should be
102:24 - fine okay now I'm just going to go to
102:26 - program.cs to actually store it to
102:29 - access
102:30 - it and we can see it here also in the
102:33 - documentation somewhere actually in the
102:36 - server
102:39 - class this is actually the
102:45 - way to specify our secret key but we're
102:48 - also actually going to access it via our
102:52 - app setting adjacent because that's the
102:54 - more secure way to do it to access these
102:56 - kind of secret
102:58 - keys and actually here because my
103:01 - account is actually logged in with my
103:03 - strap account this is actually the
103:05 - actual key that I'm going to need
103:07 - because strap basically has connected my
103:10 - API key with this documentation here
103:12 - anyways I'm just going to the project
103:15 - once again let me
103:18 - just where was it written
103:22 - here
103:23 - just written before user outing so I'm
103:25 - just going to do the same thing I'm just
103:28 - going to write it here
103:30 - basically so here stripe configuration.
103:33 - API key and here we actually access it
103:36 - from the app settings. Json
103:38 - [Music]
103:42 - file so we WR builder.
103:47 - [Music]
103:49 - configuration that get section
103:57 - here from
103:58 - [Music]
104:02 - stripe we get this secret
104:07 - [Music]
104:08 - key here we just need to write
104:14 - get
104:17 - string and that is it that's how we
104:20 - access our API key and actually here we
104:22 - have error because we need to actually
104:26 - install st.net inside our dependencies
104:29 - so just go here to manage nugat
104:36 - packages just right here strap.
104:40 - [Music]
104:41 - net and install
104:44 - [Music]
104:46 - it okay so it's installed already if we
104:49 - go back
104:52 - here let me just click on it
104:54 - again and we'll just write here using
104:57 - strap on
104:58 - top and everything is okay now so what
105:01 - I'm going to do next is I'm going to
105:03 - actually create a
105:06 - controller add
105:09 - controller an empty
105:13 - [Music]
105:16 - controller and I'll just name it payment
105:18 - control
105:21 - controller
105:26 - okay so here first we have an index view
105:28 - page and this is actually where we will
105:32 - store the checkout. HTML page that we
105:35 - saw in the documentation but firstly let
105:37 - me just create a folder here for the
105:41 - payment
105:44 - controller I'm naming it
105:46 - payment and here I'm going to add the
105:48 - view
105:51 - page view page an index view
105:55 - page I'm leaving the name as it
106:00 - is and actually I'm going to delete this
106:02 - here and what I'm going to store there
106:04 - is what we have in our checkout. HTML
106:07 - page so basically this
106:20 - here so basically here's the code where
106:22 - we we have just a product there and the
106:24 - option to go to the checkout page and
106:29 - the form here just redirect us to this
106:32 - to the method that we will see will
106:35 - store in the controller actually so
106:38 - let's just go back to the
106:40 - controller and just so that we have it
106:43 - we will I just also just create this
106:45 - success. HTML page and the cancel. HTML
106:48 - page the success. HTML page is the page
106:51 - where we be direct it after the payment
106:55 - was successful and the cancel. HTML page
106:58 - is the opposite the page will be
107:00 - redirected if the payment doesn't go
107:03 - through so I'm just writing th those now
107:06 - so that we'll get them out of our way so
107:09 - I'm just having two other methods like
107:12 - this just naming them
107:16 - success and
107:19 - [Music]
107:21 - cancel
107:25 - actually I'm just adding two more view
107:27 - Pages
107:29 - [Music]
107:43 - here we
107:45 - [Music]
107:50 - cancel so in the success page I copied
107:53 - the code actually no I didn't copy
107:57 - it just click on it to copy
108:00 - [Music]
108:04 - it here's the success page basically we
108:07 - appreciate your business if you have any
108:09 - questions please email and there's like
108:12 - a default email there and in the cancel.
108:16 - HTML I'm just copying this here so
108:19 - forgot to add something to your card sh
108:21 - around and come back to or
108:23 - something check out
108:26 - [Music]
108:29 - canceled and yes what we'll do now is go
108:32 - to our payment controller and we will
108:34 - actually write
108:36 - the most important actually the most
108:39 - important part of the project the
108:42 - code the code that the method that we
108:44 - actually have
108:46 - [Music]
108:48 - here yeah just this post method create
108:51 - method here
108:53 - where is basically all the most
108:55 - important part of the code I'm just
108:57 - copying this
109:02 - here just storing it here after the
109:05 - index
109:07 - method so we have a post method create
109:10 - checkout session I'm just changing the
109:12 - name just and here we actually what we
109:15 - do here is we specify domain the domain
109:18 - here action may be false let me just see
109:21 - what our domain is
109:26 - okay so this is actually our domain so
109:29 - I'm just copying
109:30 - this and I'm pasting it
109:33 - [Music]
109:36 - here just like that and then well here
109:40 - we actually see that some let me just
109:43 - make it a bit bigger so here we actually
109:47 - are specifying some session create
109:49 - options which basically are the options
109:52 - that will pass to our to our checkout
109:56 - session that we will
109:58 - create and here inside of it we actually
110:01 - specifying these line items basically
110:03 - these line items are the products that
110:06 - the customer will actually pay here we
110:09 - see here the price we specify the price
110:12 - of it and actually the quantity of the
110:15 - products and down below the mode is set
110:18 - to payment which basically is means a
110:21 - onetime payment we could do actually
110:23 - also
110:24 - subscriptions in strap and we have here
110:27 - the success URL specified and the cancel
110:30 - URL so basically here I'm just going to
110:33 - need
110:35 - to to actually access this in our
110:38 - project this success. HTML page let me
110:41 - just
110:42 - see the
110:45 - outout okay so this actually the route
110:49 - so after the domain
110:51 - name just just need to write payment and
110:56 - success payment SL
111:00 - success and the same thing goes for the
111:03 - cancel
111:05 - page and yeah basically this is it and
111:09 - yeah here above we see here that we this
111:13 - is the place where we give the price ID
111:16 - the price ID is what what we had here
111:18 - when we created our products then just
111:22 - go back to the products so all these
111:24 - products had like a price ID here and
111:28 - this is actually the place where we
111:30 - specify it so let me
111:34 - just go
111:36 - back if we copy
111:39 - [Music]
111:41 - this it's the place where we specify the
111:44 - price of the product that's actually the
111:46 - recommended way strap payments are done
111:49 - and if we go back to the documentation
111:51 - actually if we had the option here
111:54 - to define the product to sell and we
111:58 - choose here we see all our products that
112:00 - we have since this stri documentation
112:02 - page is connected to our uh to our
112:06 - account if we right here click here on
112:08 - the armman watch we see the price is
112:11 - taken automatically
112:14 - actually and yeah just go back here we
112:17 - can actually do it as an example just
112:19 - put the price there manually and where
112:23 - we left it here below the session
112:25 - service was created and the options that
112:27 - we created above were passed to it and
112:30 - then here is basically just the the page
112:34 - will be redirected to the session that
112:36 - URL to another page and here is the
112:38 - status code of 303 which is basically
112:41 - just a redirection status HTTP status
112:45 - code and actually let me just so that we
112:48 - test this out as it
112:50 - is we just go back to index page and
112:54 - here we actually need
112:56 - to change the action the action was
113:00 - create
113:01 - [Music]
113:03 - session create checkout I think I named
113:08 - it create
113:10 - checkout let me use this
113:14 - [Music]
113:16 - ASP action
113:19 - tags and let us just run the pro just
113:23 - for us to see
113:24 - [Music]
113:31 - it okay so here this is our index page
113:34 - this is what we had in our documentation
113:37 - basically this we have an image like a
113:40 - title the price and actually the
113:41 - checkout will redirect us to the
113:43 - checkout page for our our manual watch
113:47 - actually for our the product that we
113:48 - created but this is just visually just
113:51 - for now if I click on on
113:53 - checkout
113:55 - here will be redirected to the stripe
113:58 - checkout page here we see the product
114:00 - that we have since the checkout session
114:03 - took our price ID we have the title of
114:07 - it the price the photo everything and
114:10 - let me just make an example here we can
114:12 - use like an email address what like
114:14 - whatever here in the card information
114:17 - we'll use a test card which is like 42
114:20 - 42 you can find this in the
114:21 - documentation as well just only four
114:25 - tools and we just give a date here some
114:28 - date in the future just one uh a code
114:32 - just the numbers here the name of the
114:35 - card holder here just the country and
114:38 - all just complete this and if you click
114:41 - on
114:46 - pay the payment should be successful we
114:49 - see this success page we appreciate your
114:51 - business if you have any question please
114:52 - email orders example.com and basically
114:56 - what was done here as I explained it
114:58 - before just after we clicked on the this
115:01 - checkout button here we were redirected
115:03 - to our method here the domain was
115:06 - specified the options for the item that
115:08 - we wanted to buy which were here we saw
115:11 - that we specified the price ID and the
115:13 - quantity we let it to one and basically
115:16 - this session this checkout session was
115:18 - created with the options and we were
115:21 - redirected to that checkout page this
115:24 - was it this not basically too much
115:26 - complicated if you just follow each line
115:29 - if you just read each line actually and
115:31 - if you read the documentation and if we
115:33 - can actually
115:36 - verify how
115:38 - we that the payment went through if we
115:40 - go to our
115:41 - stripe to our payments to our stripe
115:45 - account to payments we'll see all
115:47 - payments
115:49 - here and actually we see here this is
115:52 - the time 1:23 p.m. the customer was
115:55 - James this was the product that was
115:58 - bought and we see this amount was
116:01 - successfully paid so what we're going to
116:03 - do right now is actually I'm going to
116:06 - create some products products that we
116:08 - store here I'm going to create them in
116:09 - our I'm going to store them in our
116:11 - database as well so that we can uh we
116:14 - can make the page actually look more
116:17 - functional so I'm just going to store
116:19 - some products in the database and I'm
116:20 - going to display each one of them those
116:23 - uh in our project and then we'll when
116:25 - when the client wants to pay for
116:27 - something we'll take that price ID make
116:30 - the request to stripe and the payment
116:33 - will be accordingly so let's just go
116:35 - back to our project here I'm going to
116:37 - actually need to create a model for our
116:40 - products or
116:41 - items like add a class
116:46 - here we can just name it products or
116:50 - items like item
116:52 - [Music]
116:58 - first I'm going to need an ID for
117:01 - those then a name for the product for
117:03 - the
117:04 - [Music]
117:06 - item public
117:09 - string actually an image URL would be
117:13 - needed so basically when the project
117:16 - loads will store each of our products in
117:19 - the from the database to the first page
117:22 - and then uh we'll pass here the product
117:25 - uh the price ID as well so that when as
117:29 - I said when a user clicks on it to buy
117:33 - it we make the request to the strip with
117:36 - that price
117:40 - ID string price
117:45 - [Music]
117:49 - ID so this is um our item
117:56 - model now I'm just going to need to as
117:59 - you know we're going to need to create
118:00 - the data folder to create a
118:06 - context as we do in our MVC projects
118:09 - like a data
118:10 - [Music]
118:12 - folder and then a context I'm adding a
118:15 - class
118:15 - [Music]
118:19 - here I'm naming it like m MVC context or
118:26 - [Music]
118:29 - something this will actually need to
118:31 - inherit the DB
118:33 - [Music]
118:36 - context and we'll see a problem here
118:38 - actually because we'll need
118:41 - to install a microsoft. Entity framework
118:45 - core actually I'm just going to go to
118:47 - dependencies manage new get packages and
118:49 - I'm going to also install some
118:50 - dependencies for us to make the
118:52 - migrations to the database but firstly
118:56 - so Entity
118:58 - [Music]
119:03 - framework this microsoft. Entity
119:05 - framework
119:07 - [Music]
119:09 - core this installed now just I'm using
119:13 - something else we're going to need
119:15 - something else the Microsoft Entity
119:17 - framework card. tools we can see here
119:20 - that we have some commments from it to
119:22 - add
119:23 - migrations and update the database which
119:26 - we're going to need after we create our
119:28 - model so installing this as
119:30 - [Music]
119:32 - well
119:35 - accept Okay this is also installed now
119:38 - just right here SQL
119:41 - Server the dependency we're going to
119:44 - need as well since we
119:46 - are uh we are storing the information in
119:48 - our SQL Server
119:51 - database
119:53 - okay everything was installed let's go
119:54 - back to our context here we should
119:57 - actually see that if we import something
119:59 - here using uh Entity framework
120:03 - card this is now okay here I'm going to
120:07 - need to write the Constructor for
120:12 - context as
120:15 - usual and here we're going to give it
120:17 - some parameters DB
120:20 - context option
120:23 - [Music]
120:25 - MVC
120:29 - context options this is what we usually
120:32 - do when create our contacts in MVC
120:34 - applications it's not that I remember
120:37 - this actually you can find this in the
120:39 - documentation this will
120:42 - [Music]
120:44 - also inherit some base
120:48 - [Music]
120:50 - options
120:52 - this was it for the Constructor and down
120:54 - below we just also need to specify our
120:56 - DB
120:58 - set instances so the instance for the
121:02 - model that we
121:03 - created so an item I'm naming it
121:07 - [Music]
121:09 - items and I'm just going to need to
121:12 - import the models I think yes on top of
121:15 - the page that was it for now uh what I'm
121:18 - going to do now is just we need to
121:20 - create a database
121:22 - this for project just go to view test
121:26 - Explorer I think
121:29 - no just go to
121:31 - view server
121:35 - Explorer you're just going to need to
121:37 - create a new SQL Server
121:40 - database we need the server name so I'm
121:43 - just going to open up the SQL Server
121:46 - management
121:48 - Studio to get that server name
121:52 - [Music]
121:54 - okay so I'm just copying
121:56 - [Music]
122:02 - this just give a name to the database
122:06 - stripe
122:08 - web
122:10 - data the name of our
122:14 - [Music]
122:20 - project just click on this to get
122:24 - the properties to get the connection
122:28 - string just copying this and I'm going
122:31 - to app settings at Json to store
122:35 - this connection string okay so just
122:40 - write here connection
122:43 - [Music]
122:49 - strings I'll give a name to the
122:51 - connection string usually what I do is
122:53 - just like right here default
122:57 - connection
122:59 - string and then we'll pass here inside
123:02 - double quotation marks the
123:05 - address the so to say the name of the
123:10 - database the connection
123:12 - string here I'm also going to need to
123:15 - write to set
123:18 - encryption to
123:20 - false just because we don't need a
123:23 - password to access the
123:26 - database and this should be basically it
123:29 - now what's left to do now we created the
123:32 - model then we created that instance
123:34 - inside the context we wrote created the
123:37 - database and stored the connection
123:39 - string in app settings. Json now we just
123:42 - going need to go to program.
123:46 - Cs and add one more service
123:50 - here Builder
123:53 - do
123:55 - services do
124:01 - add so basically we're adding here a
124:04 - service for the context so after the
124:07 - models instances were stored in the
124:09 - context then the uh context just
124:13 - basically so to say connects it with the
124:15 - database and here you write that
124:19 - properties of the database
124:22 - so here we write the of the context was
124:27 - MVC
124:28 - [Music]
124:35 - context we need to use the the that data
124:40 - folder for this to be
124:43 - known here I'm just passing it some
124:46 - [Music]
124:50 - options
124:52 - [Music]
124:55 - options.
124:57 - [Music]
124:59 - use SQL
125:03 - server and here we'll pass the address
125:07 - of the the actually the connection
125:10 - string so to access the connection
125:12 - string we write Builder
125:14 - do
125:16 - [Music]
125:19 - configuration thatg
125:24 - connection
125:27 - string side here the name of the
125:29 - connection string which was
125:32 - default connection
125:38 - string okay we're almost done now what
125:41 - we going to need to do is just go
125:44 - to
125:46 - tools and go to nugget nugget package
125:50 - manager go to package manager console so
125:52 - that we will add the model that we
125:55 - created to the database so just
125:57 - basically add Mig
126:02 - migration so actually I'm just going to
126:04 - need
126:05 - to cut this here and just paste it here
126:10 - actually down
126:12 - below that's where it should be and then
126:15 - just going back to adding the
126:17 - migration I'm giving it the name like
126:20 - initial
126:21 - [Music]
126:31 - migration okay imigration was Ed just we
126:35 - just need now
126:37 - to update the
126:40 - [Music]
126:46 - [Music]
126:48 - database okay everything was stored in
126:50 - the database let we created so now what
126:52 - I'm going to do I'm just going to go to
126:54 - the to our database here and add some
127:00 - products there manually then we'll also
127:03 - just need to handle the the way we
127:05 - display them so just go to databases
127:08 - here name of our database was strap web
127:12 - app
127:14 - data go to
127:17 - tables
127:19 - here you'll just addit top 200
127:24 - rows okay so what I'm going to do here
127:27 - is just go back to our
127:31 - [Music]
127:35 - products okay so firstly for the
127:37 - watch I'm just going to take the name
127:40 - the
127:42 - description I don't know if I need the
127:44 - description so just the title
127:47 - there the
127:49 - name the image URL
127:51 - we can just go back
127:53 - [Music]
127:55 - here just
127:57 - copy copy image address I
128:02 - think just store it
128:05 - [Music]
128:07 - here and
128:11 - next just copy this price
128:15 - ID store this here as well this is our
128:19 - first product I'm actually going to
128:22 - take the other one that I had
128:27 - there this
128:29 - Jordan
128:30 - shirt so just Jordan t-shirt I'll take
128:33 - the price ID
128:36 - here I know where I've taken it actually
128:39 - the
128:41 - photo so
128:44 - Jordan
128:47 - t-shirt for the image URL I'm actually
128:50 - going to find another one since I don't
128:51 - no where I took
128:53 - it T-shirt
128:58 - [Music]
129:07 - image probably one of these I
129:12 - think seems
129:15 - similar copying the image
129:19 - address storing it here
129:22 - now the price ID as
129:32 - [Music]
129:40 - well I'm just adding a third one I don't
129:44 - know if I had the product
129:46 - here I think I had a product
129:50 - here without an actual image actually
129:53 - but yeah I'm just taking that
129:57 - ID summer
130:01 - [Music]
130:03 - t-shirt and just find an image for it as
130:07 - [Music]
130:20 - well
130:24 - [Music]
130:30 - and the price ID is what I'm also going
130:33 - to need so we have stored three products
130:36 - in our database now let me just go back
130:38 - to the project and we will just take
130:42 - them from the database so we'll go to
130:45 - the controller actually firstly and I'm
130:47 - going to need to have
130:50 - a we're going to need to declare
130:52 - Constructor here to take that
130:54 - information from the context so firstly
130:57 - I need a variable to store the context
131:00 - so like a private read
131:03 - only MVC
131:07 - context I name it underline
131:10 - context as
131:13 - [Music]
131:17 - usual we'll need to import this folder
131:20 - here that has the
131:23 - context here we declare the
131:30 - [Music]
131:42 - Constructor so basically we're taking
131:44 - the context inside this Constructor and
131:47 - we're passing it to our
131:49 - variable so now we we need to access it
131:52 - here in our index page so
131:55 - basically just I'll make this an
131:57 - asynchronous
131:59 - method so we'll write here async
132:03 - [Music]
132:09 - [Music]
132:12 - task and here when we return the view we
132:16 - actually going to await the context so
132:20 - await underline
132:23 - context
132:26 - dot
132:28 - items
132:32 - do to
132:35 - [Music]
132:39 - list I
132:42 - think just need to remove this underline
132:49 - here need to use Microsoft Entity
132:52 - framework Corde here on top of the page
132:55 - and we'll have no errors anymore so the
132:58 - last thing we going to do is go to the
133:01 - index.html we're actually going to
133:03 - remove everything that we had here by
133:06 - default and here on top of the page
133:08 - we're taking the item
133:12 - model so add
133:15 - model
133:20 - iable
133:21 - [Music]
133:30 - name of the project do
133:33 - modeles
133:35 - do
133:38 - item here I'll have a container
133:42 - [Music]
133:47 - div to give it some styling
133:53 - some margins and
133:59 - padding then I'm going to have another
134:01 - div with the class of
134:05 - [Music]
134:07 - row this is basically just some
134:09 - bootstrap class uh styling with these
134:11 - classes if you know
134:14 - bootstrap and then inside each
134:17 - row I'm just taking a loop here a for
134:20 - each Loop
134:25 - we looping through each item in the
134:30 - [Music]
134:36 - model I have another class of
134:41 - column I have another div with the
134:44 - column
134:46 - [Music]
134:48 - class and inside of it
134:52 - we're also going to need another div
134:54 - where we'll store the
134:56 - [Music]
135:08 - form we making so here we're storing
135:11 - basically each element each item and
135:13 - we'll make them to be Center the title
135:16 - and the and the button actually
135:19 - everything that's inside the item that
135:21 - an item
135:23 - has so I'm using this deflex to make it
135:27 - a flex
135:29 - box
135:31 - justify
135:33 - content
135:36 - Center and just give it a bit of
135:40 - styling setting the position to
135:44 - [Music]
135:49 - relatives actually will specify the
135:53 - action method where as with this ASP
135:56 - action tags where the form will be
135:59 - submitted so to this
136:01 - create checkout
136:04 - method and the method will be
136:07 - [Music]
136:15 - post so firstly we have an input
136:19 - here
136:21 - of type
136:22 - [Music]
136:27 - hidden Name
136:30 - [Music]
136:39 - ID and this will take the
136:43 - item that ID that we take from the
136:48 - [Music]
136:49 - model this would be a single
136:53 - tag next we want the
136:58 - image so I'm taking an image
137:01 - [Music]
137:03 - tag the name of it will
137:06 - [Music]
137:10 - be image URL so that we can bind this in
137:15 - the method that we submitt it
137:19 - to this s
137:21 - course here we'll just write the image
137:28 - URL item
137:30 - do image
137:32 - URL and we'll also give it some styling
137:36 - set the width to
137:41 - be 70% so it's not too
137:48 - big and this will actually also be a
137:51 - single
137:54 - tag I will put the title inside an H6
138:00 - [Music]
138:02 - tag name actually the name of the how we
138:07 - stored it name or okay it's the name not
138:10 - title it name will
138:13 - be
138:15 - name it's a big
138:18 - and and about this
138:21 - [Music]
138:25 - link let's give it the
138:32 - position of
138:36 - [Music]
138:37 - absolute I'll make it to be from the
138:41 - top 40% far
138:46 - [Music]
138:49 - away
138:52 - [Music]
138:54 - here inside the text we'll store
138:56 - actually the
138:59 - item that
139:01 - [Music]
139:03 - name I'm going to need another input to
139:05 - be invisible which will be the price ID
139:09 - since we don't want the user to see it
139:12 - so the name will be price
139:16 - ID and the value will be item. price ID
139:24 - and at the end just need an input for
139:27 - the
139:29 - bottom so
139:31 - [Music]
139:34 - input give the class
139:39 - of
139:41 - button
139:45 - button
139:47 - [Music]
139:49 - dark of type
139:52 - [Music]
140:01 - submit and the value what we want to be
140:03 - displayed in the button will be check
140:06 - [Music]
140:09 - out for the
140:12 - styling we want the button to be we'll
140:15 - give it a position of
140:19 - absolute so that we can place it so to
140:22 - say from the
140:24 - top
140:26 - 60% so it is a bit
140:30 - uh below what we had here the image
140:39 - [Music]
140:45 - title okay this is a single tag as well
140:48 - so this is the styling this is SE to you
140:51 - but just the way I want to do it let me
140:55 - just okay so I will go to program.cs and
140:58 - put the default controller to be payment
141:01 - so that each time I run the application
141:03 - will be redirected to that
141:08 - page then I just run to
141:12 - [Music]
141:18 - check okay so we see here
141:21 - we have the first
141:24 - image the second one and the third
141:29 - one and I style them a bit different
141:32 - actually but what did I do wrongly here
141:36 - in the second
141:37 - [Music]
141:39 - image the Jordan t-shirt is not
141:43 - displayed let me just I think probably
141:46 - just got the
141:49 - false
141:53 - [Music]
141:56 - URL copy image
141:58 - [Music]
142:05 - address just turn on the program one
142:08 - more
142:08 - [Music]
142:16 - time so probably it's not updated yet
142:19 - what we inputed to the database but
142:21 - anyway I'm just going to play around
142:23 - also now I think I'll see it a bit later
142:25 - I'll play around bit with the styling so
142:28 - it looks
142:29 - better so just something small I'll give
142:34 - here a class of
142:37 - item so that I can access it in the
142:40 - style. CSS file and then I'm going to
142:44 - want to give a CL class also to the
142:48 - title
142:49 - here to the header so
142:55 - class item
142:58 - title and to the button as
143:01 - well
143:05 - item button okay so if I what did I do
143:10 - here if I go to this www
143:15 - root to CSS folder side.
143:19 - CSS
143:22 - so I'll make the
143:26 - [Music]
143:32 - item
143:34 - and item
143:36 - button so I'm accessing these two
143:42 - items I'll set the
143:46 - opacity
143:48 - to basically the display to zero so at
143:52 - first we won't see the title and the
143:54 - button but as soon as we will hover over
143:58 - them with the mouse we will see them
144:00 - just a bit of feature I actually want to
144:02 - play around with CSS in each project I
144:05 - make but it doesn't really matter just
144:07 - for the aesthetic part of
144:10 - it do
144:15 - [Music]
144:19 - item
144:21 - [Music]
144:23 - so we want so as long as soon as we
144:25 - hover over the item so the whole div we
144:30 - want to access
144:32 - this item
144:36 - title and the same
144:39 - [Music]
144:41 - thing is for the item button so as soon
144:45 - as we over over the item we will access
144:49 - this to
144:51 - the title and the
144:54 - button and you will change the opacity
144:58 - to
144:59 - [Music]
145:03 - be
145:05 - [Music]
145:08 - 0.4 let me just turn on the program
145:11 - [Music]
145:13 - again we'll wait for it to
145:18 - load okay so we see that that okay not
145:21 - exactly what I wanted let me see what I
145:24 - did wrong here okay so actually I wanted
145:26 - to set the opacity of of this to one
145:29 - when I hover over the item I actually
145:32 - wanted to make the image itself a bit
145:35 - disappear so item
145:42 - [Music]
145:44 - hover
145:46 - item
145:49 - image
145:56 - okay I don't know if I give a class to
145:58 - the image
146:00 - actually image image
146:03 - image class of no
146:07 - idea item
146:10 - [Music]
146:15 - image I want to make the opacity of the
146:18 - image to be
146:22 - [Music]
146:25 - 0.4 and
146:27 - yeah this should actually do it now okay
146:30 - so that's actually what all I want to do
146:32 - so here as soon as we hover over it we
146:35 - can see the button and the title and the
146:38 - background is a bit blurred or so that's
146:41 - it I will fix it a bit
146:44 - later I think maybe if I just refresh
146:47 - the database it should work but yeah
146:49 - anyway I'm just going over to the index
146:52 - to the payment method actually
146:55 - here and the last thing I'm going to
146:58 - need to do here is to take from the
147:03 - form the product here we'll use this
147:10 - bind tag
147:13 - here we bind the
147:15 - [Music]
147:19 - ID the
147:21 - name the image
147:24 - URL and
147:28 - the price ID to the model to the
147:34 - method here so we are we'll specify here
147:37 - that we're taking an
147:41 - item I'll name it
147:43 - item actually after the square
147:48 - bracket here
147:50 - [Music]
147:52 - and we will take it in our method and
147:55 - here we'll specify we'll take the price
147:58 - ID so
148:00 - basically just need to write here this
148:04 - to access this price ID with this string
148:08 - interpolation so inside uh curly braces
148:12 - I'm just need to access item
148:15 - do price ID and each time that we click
148:20 - on an item we should get make create the
148:24 - checkout session with the specific price
148:26 - ID and we should be redirected to this
148:29 - stripe checkout session for this
148:31 - specific product so if I run the project
148:34 - one last time
148:37 - here I actually just refresh the
148:39 - database I don't know what the problem
148:40 - was with the second image but now it
148:43 - seems to work and here we have our items
148:47 - and if I check click check out on the
148:48 - first one for example
148:51 - we should be redirected to the checkout
148:55 - session for this specific
148:58 - item we see here the name the price and
149:02 - the item also then just go back here
149:07 - click on the third
149:08 - [Music]
149:11 - one should be redirected to this one
149:15 - which I haven't created with an image in
149:17 - my uh stripe count let just check this
149:21 - second one as
149:23 - well so we should be redirected to the
149:26 - second product that we created actually
149:28 - for this one for $25 I'm just trying
149:32 - this one last
149:34 - time it's 42
149:37 - 42 42 42
149:40 - 42 Just some name and some data a date
149:44 - in the future just a number here the
149:46 - name click on
149:49 - pay
149:51 - and the payment should also be
149:52 - successful as we can see thanks so much
149:54 - for watching I mean I know this took a
149:56 - bit longer than I thought it would but I
149:59 - hope you didn't I didn't like uh you
150:01 - didn't get messed up in the way and I
150:04 - hope you understood a few things don't
150:06 - forget to subscribe or like the video if
150:08 - you haven't done already and I will see
150:11 - you guys in the next video

Cleaned transcript:

Master asp.net core by building three projects from scratch you'll start with a simple full stack project and work your way up to an advanced project this course will teach you everything you need to know to create your own projects in asp.net core MVC Allan from Koda future created this course hi there everyone this is silen in this video we're going to see how to create three different asp.net core MVC projects with different levels of difficulty and with different functionalities in each project you'll learn something new starting with a simple full stock project by creating a food menu web app then we will create a Google Docs clone where we will integrate user authentication in our project and lastly we will build the web app to accept online payments so let's get started I will start with a brief explanation of the asp.net core MVC structure just so that you understand how our projects are structured firstly we have models which are C classes where we need to define properties the models that we create represent the table in the database and the properties are The Columns of our tables then the connection string is the link from the C code to the physical database it contains the address where the database is located and how to authenticate to the database service we store the connection stream Str in a file called app settings. Json the context is a class that acts as a middleman it has C methods that you can call to ask the database to do something useful like add a record or return all rows in a table we use this methods and interact with the context in a file called controller where we handle the user requests the context itself relies on the connection string in app settings. Json to a physically Loc the database file and it also makes changes to the database Tables by connecting the models with the database the database itself is the place where all the tables are stored which contain all the data of the application that you want to store in them there are then the view Pages where we write all the front end side of the application or in other words what is displayed in the browser When We R the application The View Pages interact with the context in order to paste the data from the database into the pages and afterwards they display everything that is written in them to the browser in this first project we'll create the food menu web application the main purpose of it is to store data in the database and to be able to display them dynamically in the application so let's first create a new project we will select the MVC template and let's give it a name like menu just leave this all by default okay to begin with let's go to the package manager and let's install the three two or three things that we need for every project that we make so the first thing is Entity framework core then we need the Entity framework core tools and we need something from the SQL Server there are some commands here that we use to migrate our data to the database so as you can see we have these three things installed now we are ready to go let's go to the models and create a model first okay so adding a class I'm going to be naming this like menu okay first we need to create some properties here the first one is the int ID we need the name so we're going to be needing an image URL for the URL of the foods in the menu in order to put a picture there and and we need the double variable property for the price okay let's add the new class now for the ingredients of the foods in the menual we need an INT property in ID property and the name for the ingredient okay so it it would make more sense to rename this so to to make put a name like dishes or something rather than menu and then we're going to be creating a another model in order to connect the dish with the ingredient because one dish can have multiple ingredients and one ingredient could have would be part of many dishes so like we'll name this like this helper model dish ingredient we need a an ID for the first for the Dish Dish ID of course the property of type dish we'll name this dish the same thing goes for the ingredient model so an ingred gent ID and then down below an ingredient property so now we need to go to both the dish and ingredient models and connect them to the dish ingredient help per model so we need the list of dish ingredients I've name renamed this had the typing error then we'll name this dish ingredients and this had to be a list we'll make this nullable and we can just copy this down and paste it in the ingredient model as well okay so now we need need to add a folder for the context first we need to we usually store the context in a data folder so let's just create one and we can then add a context class in it you can name this something like menu context or something so firstly we need uh menu context Constructor the menu context class has to inh the DB context right there and okay so the Constructor takes a deep context argument there let's just import a few things here firstly so this here was DB context options so everything that I'm writing here is just the by default what we need in every context so really don't need to learn it next we we need a a model creating method here so we see this was cre cre itself and first we need to specify here the relation between the dish model and the ingredient model so we need to specify here basically that they are both many to many Rel have a they both have a many to many relationship with each other so first we need to specify the keys that we have written in the dish ingredient helper model so the first one was the dish ID which connected the model to the dish model and then the ingredient ID so then we need to specify the relationship of the dish and the ingredients with the dish ingredient model so firstly we WR here for the dish model so basically what we are doing here is that we are saying that the one dish is connected to many dish ingredients and we specify the forign key which is the dish ID okay then copy this down and do the exact same thing for the ingredient model we just need to change a few things here so one ingredient is connected to any dish ingredients and we specify the foreign key also so we need to connect we need to create two DB set instances for each model that we created so one for the dish model and we'll name dishes one for the ingredient model we'll name it ingredients and one more for the dish ingredient okay so what's left for us to do now is we have created successfully the models but we need to we need to add some data in it and to add first some data for in order to create just one dish item in our application so iting here that the dish has some data so we're giving it an ID of one and we'll name it something like I don't know for this video I'm just going to make it the menu of out of pizzas so like Margarita I'm setting the price to 750 and for the image URL we can just go to Google so just pick a photo and we'll copy the okay this one's fine we'll copy the image address there and we'll paste it here it's this long string here and then we we can add some ingredients to it to the database so the first ingredient we give it an idea of one and a name of something like tomato sauce or something we're going copy this and we'll make another one that we need for the margarita pizza so we'll change the ID to to and we'll name it m or something so these are the two things that make a margarita pizza and the last thing is we should connect the first model the margarita pizza with the two ingredients with the ingredients model so so in the dish ingredient model we are basically just going to specify the ID of the dish model and the ID of the ingredient model so new ingredient the dish ID was one and the ingredient ID so the first ingredient had the ID of one we can do the same thing for the second ingredient okay so this id1 ingredient did2 and I think everything is set for the database everything looks okay just looking if I forgot something but okay so now we need to connect the project to the database the SQL Server database we'll just go to there to server Explorer and create a new SQL database we need the server name firstly so let's just open up SQL Server management Studio okay so here's the server name and I'm just copying it down I'm pasting it here then we just need to give a name to the database menu database or something the database was created and here in the property window here we need to copy down the connection string and then go to app settings adjacent we need to create a connection string so firstly connection strings equals so we'll give it a name to the connection string I usually make it this like default connection string but it doesn't matter and then we just paste down here the connection string that we copied we need just to add the encryption of false because we're not authenticating with the database with a password or something the last thing is we need to go to program. CF yes and we need to add a service here and I have this copi down somewhere it's a long line but basically we just need to basically what we do here is just put the context name there and we put the connection string name also with the name so the default connection string name and basically what we're doing is just connecting the context to with the connection string so it can connect them to the database we just need to import here the data because the context there was not known let's first run the project and then we we need to add the migrations so we need to give it a name like initial migration or something so we hit enter and the migration was created we just need to update the database so the changes can be saved okay I forgotten the syntax there was wrong I needed a dash uh when I store when I enter this encrypt in the connection string this this shouldn't be a colon it should be an equal sign actually just changed it there just update the database one more time okay so now we just need to add the controller I'll just name it something like usually the controller has the name of the model but I name it manual as the name of the application I'm just importing a few things so the data folder in order to connect to the to the context and the models as well we need there so we just have first an index function there so let just go to the Views so uh we're making a folder called menu and inside it we can add a CL a view page we'll just leave it as that index so at the top we're importing a list the list of the model of the dish model so menu. models that this here we can name the view data title so the title of the tab to be like index or make new index so first let's add the div with the class of container for some paddings and margins inside we need to make another div with the class Arrow so that we can input the elements in a row and now we need a for each Loop to look through uh the elements in the the list that we are important so we'll just make it V VAR item in model and here we can just start inputting the data that we want to show in it so firstly we'll make another div with the class of column six which basically in bootstrap means that whenever we input some a div in a row and we give it the column six so it takes six out of 12 imaginary columns in a boot step row so this div will take just half of the row and then we can input the item name the item image URL and the price okay let's make it a header for the name so it's a little bit bigger and in bold can just run the project firstly to see what we are doing okay so we forgot to make the index function so here we The View has to return a model so okay and firstly we need to add the we need to import the context there we need the variable firstly for the context the menu context we'll just name it index uh context and then we need um we need a Constructor with for the context and there we give it the the context variable will give it the context okay so this is a asyn weight meth function so we need to change little bit the name of the function so async task and then in the view we can await the context that dish that dishes and to list ASN method basically just lists all the elements in the context okay so this has to work now we need to see in the index page we need to see our data now okay so it works but we have made some we need to make some changes here so firstly the image URL has to be inside an image tag in the source attribute inside it so inside a style attribute we need to specify the width of the image I'll just make it like 75% or 70% and we can add a class to each div element in order to place them in the in the center of their div so if you can open up the bootstrap documentation for the placing of the elements we need to First make the div deflex or like a flex box and we can then right justify content Center so this basically just makes the div's a flex box and then puts the element in the center of the main div and we copy this down to each div that we have here and we could format the price a little bit so it takes two two string and two which basically means two places after the comma and just stand the projects one more time and see if all this data looks better okay so this looks fine it had to take half of the row and it's in the center of it so this looks okay but we need also to add some we need so now for each item we need to add The Details page so we can just go to the controller one more time and we can add a a details function there this is also going to be an a sing8 function so so the details function here takes an INT ID will I just have a variable called called it something a dish and we'll take from the loop through the context of dishes for the element with the ID of the ID of the model that we have in the argument so this is pretty much the syntax to do it so the X so the element. ID in a database has to have the ID of the element in the argument so now in The Details page we also need to include there the ingredients so in the index page we didn't need to show all the data so we didn't show the uh ingredients of the dish but now in the when you open up the details page we need to include there the ingredients so firstly we'll just write include include the uh dish ingredient and then also include the ingredients so we are specifying here the connection of the dish with the dish ingredients helper model and then with the ingredient model then we can just return the view it's good also to have a an if close here in case the dish is null and just return not found page so now we need to go to the view pages and we need to add a details view page nameit details so now here on top we need to import just a model not a list of models because it's just One Singular model that we are we have in the details page so model menu that models that dish going put a title of the tab here in the view data variable of course we need the container div to give it some stylings then we need just to put each element in the center also so we don't need the column div because we just have One Singular element so firstly the title of the model and here the syntax is the a little bit different so we just put model. name so different to the case when we have a list of models imported so and just go to the index view page and just copy something down because these are pretty much the same so we need to change here also model that image URL okay let's just set the width to 50% because it's it's a whole row here it's just one item and down here also so here we need the we need to add the ingredients which we did not have in the index page so we'll just make a a list here make the for each Loop to Loop through each each item's ingredient so item in model. Dish ingredient I think dish ingredients and here we can make some ordered list some lists just input item that ingredient. name so this has to work seems fine oh we got we got to add a button here in the index page so that people can so the user can go to The Details page then so we just need to add another div and inside of it we need to input an anchor tag so we can specify the action is pretty much the name of the function in the controller and we need to specify the out ID or the ID that the function details takes so this is item. ID and just some styling we add a class of button and button info is the color it's like a light blue color okay the button is too small because we didn't input any name in the button so inside the anchor tags we can make Right View dish so this looks fine and here we have the details page which needs some styling the ingredients should be listed as a list so I've written down it should be a list not a not i l there and we can add here another button to in order so the user can redirect to the index page just add an anchor tag with a class of button and button info and the action is index it doesn't take any parameter any argument so and the name of the button back to the menu so the list should be ordered now should be presented as a regular list okay so it looks better and we have the button to go back to the menu so this is great but we can add some more data to the to our application and the easiest way to do it instead of going to the to the context is to open the database in the SQL management Studio and to open each model so it would take a lot of time if we did this in the context by adding the data to the models there so we can just open the tables from the SQL Server Studio okay and so we can write this manually here we can write the names I I'm just adding a couple more dishes here we're going to write the names here I'm just making a pepper only like because I'm doing this yeah I'm doing it with pizzas only so just give the price and we have to find an image of a pepperoni pizza let's see I'm just taking this one so copy image address and we can input here the URL okay let's just hit enter here okay so let's just add another one like vegetarian just find an image for it okay so let's inut here the URL and just put the price in it like nine so just hit the enter it is saved so I'm leaving it with this let's just go now to the ingredients table so I edit top 200 rows no this is the dish ingredients table let's just go first to the ingredients table to add some ingredients for the two more to to the two pizzas that we made we just make like pepperon a couple edges would be okay like paprika and mushrooms okay I'm just leaving it with that so now just need to go to the dish ingredients to connect this to each other so to connect the second dish with the third ingredient which was pepperoni wait it needs to be connected to the first and second actually but yeah just connect them to the three first ones which was I think sauce and mozzarella yes okay so let's just connect the third one to the to the just to the paprika and mushrooms ingredients so just around the project okay you can see the data is store is displayed out dynamically here so we have the two pizzas which all have the uh details Pages created we can see in the URL above that the index is displayed there so another thing that we can do here is just to edit a little bit the layer out page so let's just remove the home and privacy navigation items and what we can add here we can add uh we can add a search bar button to filter through the data and I've handled this in previous video how to add the search bar but in this one I'm just going style it a little bit better so it looks looks nicer so inside the navigation item here or we just need to add the form the action needs to be redirected to the controller named to the index not to the menu controller and yes the action is index and the method when we filter data was get so right now here just need to add an input firstly okay so just one tag so I add some styling to it to make it a little bit different from the previous video so I'll give the width of a width of 80% and the submit button is going to be an icon will make it like 20% so we'll float this to the left side which basically means that the input is and the button then will be both Flo it to the left side so they are in in one single line and the Border radius we'll just give a corner to the we'll just make it a corner to the top left to the top left search bar we'll just make it a little bit around it and we I say like 20 pixels and to the top to the bottom to the bottom left radius so here we we're just making it a little bit around it on the sides I make the background transparent this was it for the styling now just the type of the input has to be text we need a name for the input so we can take it and handle it in the controller then so the name search string and a styling of what you can edit of or make it as a form control which looks better so it'll give it the class of it so this was it for the input now for the button in this time I'm going to make I'm going to store an icon in it so I'm going to CDN awesome font awesome this is just a website where okay first we need to import import it library and they have some nice icons there so just first we need to import the library here in the header in the layout page just copy paste it there and then down here when we when we make a button we can add an icon in in the middle of inside the button text we can add the icon so first Just For The Styling we'll make this 20% and we'll float this to to the left as well so both the input and the button are in one single line so we I I don't want any border for it so it looks a little bit nicer I'll give it a background of transparent as well I'll give the height of 40 pixels this is it for the styling and the type of the button has to be submit and inside the button now here is the icon that we can import from the font aome website which have some nice icons there so we just need to add an i an icon and have a class the search for the search icon so this is the website where we can go font.com icons so here you can go and find any icon that you want and you can import the icons mine I searched for before and it has a class of fa fa search I'm just going to save the project firstly to just see what I'm doing here okay so you can see this nice search bar here we going see the search icon there it just needs to be a little bit more in the middle so in the list above we can add The Styling margin of Auto which basically means that it's equally distance from the left side and from the right side so this has to be now in the middle in the middle of the pce so this looks very good I think as a search bar this is actually pretty nice we just need to handle now the functionality of the search bar which I said that we pre previously did that in a previous video but I'm just showing it here also so we'll just go to the controller to the index So In This Very iable we'll just make a link query so we're just looking through the context uh so the information in the database will looping through the context of dishes this is just a syntax that you usually do it and in the we need an argument the search string which was the name of the input in the form that we had and now we can make an if close if the search string is not null or empty okay so we need to we'll take the dish variable here and we'll or the dishes it's better it sounds better we'll just make this Lambda expression that you usually do in this case to find specific data in the database so we searching by the name of the dish here we can return the view we can substitute here the context add dishes with ADD dishes and we can copy this and paste it down here also so in case the search string is not null it goes to the view in the if Clause okay the functionality should work fine now we can just try it here when this loads so just write pepper on here or just pep and it shows down here in this second project we're going to make an online text editor kind of like Google Docs where you can create an account and then create your documents edit and format them and then you can print those documents so even if you log into a different device you can access your documents modify them or print them we're are going to import a library from an online text editor in order to get all the commments that we need to format our text so let's just begin so let's just create firstly an empty project let's just select an MVC template and let's just give it a name like text editor click on next and in the authentication type we select individual accounts now let's just wait for the project to load the first thing we want to do is to create a model we're adding a class in the models folder and we will uh name it DOC or document for the documents that we will create in this application so firstly we will need an in ID property we'll need a title of type string next we'll also need a property for the content of the document and the last thing that we need we need to connect our documents to to a user so firstly we'll need to the user ID property and next we need to specify the foreign key so the foreign key is the user ID and this user ID is connected to our identity user model that is created when we firstly created a project when we typed authentication type to be as individual accounts and now we can just make these two properties knowable and we can write on top of the user ID property we can write there we can put it as required so that a document cannot exist without its user so if we it happens for us to delete the user this makes the documents of it of the user to be deleted as well now we just need to go to the context and there we can we need to specify the DB set instance for the model that we created we will name it docs and we need to import the models on top of the page so let's go to program.cs and here we can see the services that were injected when we created the project so we can see here that the context is connected to the connection string and we also see here that we have the service for the identity users which we here we need to specify here the confirmed account require confirmed account to false so that when we uh register a user with an account we don't need a confirmation for that account it will just be created now we are just going to create the database for our project let me open the SQL Server Studio okay so here need to copy the server name here I'm going to paste it here and then I'm just putting a name for our database which I just make it text editor data so we have created a database in the SQL Server studio and here in the window below we can copy the connection string and just go to app settings. Json the default connection string that was put here when we created the project let's just substitute it here and I'm also going to need to specify the encrypt to false here because when we connect to the database with we don't have a password for the database or some kind of encryption and all that is left to do right now is just adding the migrations to the database so I'm going to package manager console and down here just add migration and a name for the migration build succeeded now we just need to update the database as usual okay everything seems okay just going to go to the controllers and I'm going to add the One controller we need for this project I'm making it with views so there will be views outo generated and the crowd operations as well I'm going to just specify here the model class and the context the name I'm going to leave it as docs controller so our controller is created with the actions or the methods we actually are not going to need the details action here and the view page as well because just like in Google Docs for example when you click on a document you go to an edit link so you just go to a link being able to to edit it okay we're not going to need this line here in the edit method so what I'm going to do here in the edit and in the delete method I'm going to make it so only the user that has created the document can be able to edit or delete it so this is something we've seen in the previous tutorials as well so if we write this line here so if the document. user ID is not equal to the to the user that is uh currently logged in the application then we're we're going to return a not found page so user. find first value and in Brackets we're going to specify the claim types that name identifier which just basically just gets the usern the user ID for the user that is currently loged loed in and what I'm going to do is I'm going to copy this and I'm going to put it in the delete method as well so that only the users that have the user that create the document can be able to delete it or to edit that because if we leave it by default just like that if the user has the link it can go and edit or delete somebody else's document so I'm just running the project firstly just to see what we've got there and so that I can just register a user firstly so that I can start working because I'm going to need to connect each document that we create with a specific user so I'm just going to register a user here I usually use the Sean email I don't know why and just giving it the password Here below as well and so we are logged in as shown here you can just go to the docs link which takes us to the controller to the index index view of the controller and now let's just keep working with the methods okay so firstly I'm just going to make uh put the authorized tag on top of the class so that no I'm going to need to import here the authorization on top of the of the page and so this just makes it so only the users that are of authenticated can access this controller and let me just start with a method first I don't need this line here so I'll start with the create method I'm just going to go to the create view page next because this is okay so what I'm going to do here I'm going to delete a few labels because I think it looks better on the page and if you also know Google docs for example you just don't have a label for the content or for the text you just have a place to put them I'm just giving the title a value of Untitled document which basically just so when you don't put a name to your document it just print it as Untitled document removing the label down here and actually to get the user we just need an input firstly of type hidden so the user don't see the user ID TCH here has to be user ID and the way we can get the user ID of the current logged in view user we just need to import the asp.net identity on top of the page so microsoft. asp.net core. identity and we also need to inject here the user manager we've seen this before in the previous videos it takes an identity user as a parameter and then I'm just giving it a name here so I'm just taking the user that is currently logged in the application and doing it by typing user manager. get user ID of the current user and what we're going to do now here we're going to just fix the input the input is going to be a text area actually so for the for the content of the document we're going to need the text area tag with the asp4 attribute T content to connect it to the content and now we're going to need to open up Google we're going to find an online text editor online which this one that I'm taking here is tiny MCE which allows you to import the application so I'm copying this text here what what this basically makes allows you it allows you to have some way in your text area to edit your your text I'm going to the layout page to put them in the head text and here we can see here the no API key that we have that we have here which which basically is just like a free way to use this library but we could also register in the application and take an API key here this application has this page that we visit visit it has various packages for different things for different different plans and here just making a DOT here to separate this lines and as we can see there are different plugins to this Library here in the text area we just need to write the ID of tiny and if we try to view the create page now in the browser we will see that in our text area there will be some comments that allow us to edit our text just like in a word or in Google Docs as we can see we have some so we have this warning here because as we can see in the page of this tiny MCE there are different plans here we could sign up for a free plan and take the API key but I'm just not doing it because so that the tutorial don't take long Different Page different websites have different kind of plans so in The Styling I'm going to make the width to be a bit bigger I'm make it like 60 view of the view width and the height to be like 80 of the view height not I could do here is I could also put a link for our delete button you just need to specify the action to be the delete the text here to be delete or something and we need to specify the aspr out ID for the ID of the model that we want to uh Delete which is going to be the at model. ID and I'm just giving you the class of button and button danger to make it like a red button which what usually the delete buttons look like I'm just giving it a margin of two and down in the back to this link I'm going to give it a class to look like a button and button and button info which is a light blue color I'm just running the application to see how this looks like okay I've got an error here because we have no model created yet no document and it cannot take us to the route that we specified for the delete button so I'm just going to need to comment this out for the moment and if I run the application we should see our other changes that we did so as we can see the okay we have the the uh the section for the content is a bit bigger I could give here the this pattern also a bit of the margin on top set it to three I'm just going to delete this headers here both because I think it looks better without them so in the docs controller now we can just I'm going to see the post method for the create it looks good I just don't need here this okay I'm just going to the edit now to the edit view page I'm deleting this headers this headers on top okay I'm deleting a few labels as well see so the content has to be a text area so this is similar to the one that we had in our create page so I'm just I just copied that so I'm going to need to fix the way we take the user ID as well so this got to be an input tag of type hidden so that we don't see the user the user ID and this will be connected to the user ID okay I can change the back to list anchor here as Welling it like a light blue color with a bit of margin on top let me run the application actually I need to create first let document so that we can see what we do on in our edit page just something about technology I don't know just an example so I'm copying this down I'm pasting it here I'm going to delete this warning that appears often here I'm just going to make a bit of changes to the text so that we can see that the exact changes that we make are Sav then later okay I'm just making them I know you can play around with the tools you have here it's just like word I make the font larger so we just have different things here here different menus that we can work with Okay so we haven't actually fix the index view but I'm going to do it later can just go to the edit link of the with the ID of one okay as we can see that's so the text is just the way we created it with our modifications that we did to it okay so actually we could change a few things so this delete link that I had before here it wouldn't make make sense to put it in a create page and of course you can put it in an edit page but I don't know why I put it there before so I'm just pasting it here uncomment this and this are out now can be accessible let me just run this I'm just going to put these two inputs these two buttons inside the form group so they are aligned better and giving it a margin to the left so they are in in the same line so fix the create and the edit View and methods now we're going to need to fix the index View and just going to delete this whole table thing I'm going to create a big button to enter a blank to create a blank document so I'm putting this in inside a div firstly this anchor so inside the anchor I'm going to put a plus sign so I'm going to make the div uh Flex box I'm making the content to be centered horizontally and vertically with with these two boot boot STP glasses so the line items makes it centered uh in the vertical direction as for the styling I'm going to put the width to something like 50 pixels and the height to to 20 to 200 pixels so I'm giving it a background color of of like light gray and for the font size of the plus sign that I'm going to make later I'm giving it the size of 100 pixels and here in this anchor tag I'm going to write the plus sign and because the anchors are usually uh blue and underlined I'm just going to set here the text decoration to none so that it won't be underlined and I'm just going to need to specify the color so that the anchor is not blue which is by default blue It Is by default blue let me just turn around this firstly and we should just be able to see a button to to have a blank document so that's what I wanted to see so if we click on it we can go to the create page as you can see now and what I'm going to do I'm going to add the span below it so it says the name so like blank document and when we will create our own documents we'll make it will dis play there the title of the document so just like blank document and I'm putting there I'm making it bold so in the stylings I'm just making the font way to bold okay now I'm going to need okay so I firstly just write an HR tag so it's just a big underline so it separates the create new document to the other documents so I'm going to need a loop here a for each Loop for each VAR item in the model so the Sops through each document model that we store in the database and for each document firstly we I'm just copying what we did here above for a bit of structure and of course I'm going to change a few things so the color I'm going to make it like light blue and the action is going to be edit and the ASP out ID is going to be the ID of that model of the document so at item. ID and inside here I'm just going to need to add an I I think to add an text Emoji which I'm going to find in the internet so just like a paper emoji or something so let's just see this one I'll try to copy this it looks okay actually then putting it here I'll put it here okay I need to add the span for the title of the document so I'm going to make the style to the font way to bold as well and I'm going to take then thec uh the documents title this is basically just like you know in word when you have Word documents in your desktop you see the word logo and just the title of your document that's that's just the idea of it okay so and then I'm going to need to to make all of this in a column in a div in a colum in a class with a column with a column class and I'm going to set it to I'm going to set it to two so if you this is a bootstrap class that takes two out of 12 imaginary boot strap lines so in a line we're going to be able to fit six different objects and outside the loop I'm going to put this column class class Dives inside the row class div so basically each arow is going to take six six documents okay if we reload this we're going to able to see just one because we created only one document that's what we actually did before so this works now and as I said this a line could take up to six documents let me just create a new one I'll name it something else asp.net I don't know Cod the future okay so I'm out of ideas I'm just typing something whatever so that we can see how the next document will be showed and there we can see the title of the document and and the same image for the icon when we click on it we see our document just the way we edited it with our comments to edit okay so if we go to program.cs I'm just going to change the default controller to the documents controller to the docs controller so each time we run the application we go directly to the docs controller you're in the layout I'm just going to delete that privacy Tab and I could just specify here the Home tab to be connected to the documents controller so I can connect the text editor icon of the apption to the docs controller and the Home tab so now what this else left for us to do is that we can change the index method so it only loads up the documents that each user makes so if I log in as a user I'm going to see only my documents and if another user logs into the application he will see nothing if he has created nothing or it's the documents that the user has created I'm just changing this lines a bit here so what I'm going to do here I'm going to Loop through with this I'm going to Loop through the context. docs with this link query lines that we have talked before so this just Loops through the context of documents in the database and then in this variable that we had above we're going to specify so we're going to take only the documents that are of a specific user so that where so here we will take the documents that the their user ID is equal to the ID of the user that is currently logged into the application so with this line user. find first value of the claim types that name identifier here we are just taking the ID of the currently logged in user and we will just take the documents that are of that specific user so I'm running here the application and we should not see any changes to the index method but how are we going to be able to see the changes is if we create the new user now we can register we log out first we can register with another user firstly just like name I know Billy Billy and uh when we firstly log in the application we we will see nothing we will see only the option to create a new blank document and then if we create another document we will see only the documents that are created by Billy so I'm just going to try to create a new document here and this could be a useful application because if you log in the application from different computers you could be able to see your documents that you have worked on and Al so download them which we will see a bit later as we can see we have here the document that we created by Builder and I think I'm just just going to try and test the delete button here because I forgot to do until now so I just going to change a bit the user interface because it's a little messed up so I don't need the user ID to be displayed and that's for the content I could display it again in a text area tag I just copy this from the edit view page and I think that's okay I'm just not going to try to fix a lot of things here it doesn't really matter you can just play around with it so okay so we see exactly the content of the document that we will delete and if we try to delete it it will be gone okay so I'm just going to log into the Shan account one more time we had the two documents that we saw before and what I'm going to show you now is what I was talking about before so we can we have an option in our comments to modify the word the words the text that we input here so we have an option under files print and we can actually print our documents this could be an real application so just like Google Docs you can okay I'm just putting here a file name you can just open up the the application from different computers and you can print out your files there so I'm just going to see okay we have here the shown document was printed as a PDF and here we see what we wrote before so this was it for this video this was how you could create an online text editor in asp.net core in this third project we're going to see how we can use check to accept payment in our asp.net core project all we're going to need is a strap account and we will see from the documentation all the steps we need to take to integrate stripe in our project which is pretty simple by the way next we'll create a small ecommerce application by creating a few products in our stripe account and in our database as well and we will implement this payment functionality to the application it is really not that complicated so just make sure to keep on watching so the first thing we want to do is go to strip.com just enter that on Google here we are on strip.com what we will do now is actually you will have I'm logged in here you just need to you see uh an option to sign up it's a pretty straightforward process but since I'm logged in I can see this dashboard here I'm just going there okay so I'm logged in with my stripe account and what we're going to need here is we're need this secret key here I'm just going to go and find my API key and here we have our publishable key and our secret key the secret key is actually the one that we're going to need to so that we can make the request to the strip for the checkout session and what we're also going to need from this stra from our strip account we're going to need to to go to our products let's see our product catalog all products and here is where we actually specify each program each product that we want to have in our ecommerce application so basically each product you have you will have to create here and then when the user wants to pay for it we make a request to our stripe to stripe so that the price of the product will be specified here this is actually the most secure way to do it and so that the user don't so that the price is not so to say written in the client site that's actually the um the recommended way of doing it here I have two products that I have created here actually so just this Jordan tshirt here we see here the name the description and this is the API ID or for the or the price ID that we will actually use to create the checkout session actually I've given a price here like $25 and I'm going to create another product so that you see how we do it so just add a product here okay I'm I don't know what can I have like a watch I don't know something okay also I'm leaving it here I'm actually going to need to I'm going to need to download this image to my computer so save as here our M watch okay it's here okay let's go back to the product catalog like our money watch description man watch 223 and I'm going to upload the image here this here wait for it to download I'm giving here the password of my account okay it's downloaded and we're going to make the price to be to be paid for this watch uh one off and the amount to be paid for let's set it to I don't know how much it cost like 150 let's make it dollars and add product and as we can see our product was also here created what we're going to need to do now is let's just go to strap docks strap documentation and here let me just go to payments here we will actually get the code to create our payment to accept online payments let's just click here and strap basically just gives us all the documentation we need basically it's a very simple process here we have a server. CS class with basically the main method here is this one uh this create method here and we have also three HTML HTML files for the checkout and one for the success when the payment is successful and the other one when the payment is not successful so what we're going to do now is just go to how I'm going to do it is I'm going to create a new project in Visual Studio let me just search for MVC okay is the net core where is MVC here and I give a name to the project like strip web app click on next I'm leaving it everything as it is just waiting from for the project to load and the first thing I'm going to do here actually is I'm going to go to app settings. Json where I'm going to store firstly secret key our API key in our stripe account so let me just go to just write here stripe then secret key that's the key we're going to need actually just inside parenthesis inside double quotation marks here we'll just input our secret key let me just go to our strip account here I don't know where they were API Keys okay this is the key we're going to use okay just click on it to copy it I'm just going to the project once again and I'm pasting it here that should be fine okay now I'm just going to go to program.cs to actually store it to access it and we can see it here also in the documentation somewhere actually in the server class this is actually the way to specify our secret key but we're also actually going to access it via our app setting adjacent because that's the more secure way to do it to access these kind of secret keys and actually here because my account is actually logged in with my strap account this is actually the actual key that I'm going to need because strap basically has connected my API key with this documentation here anyways I'm just going to the project once again let me just where was it written here just written before user outing so I'm just going to do the same thing I'm just going to write it here basically so here stripe configuration. API key and here we actually access it from the app settings. Json file so we WR builder. configuration that get section here from stripe we get this secret key here we just need to write get string and that is it that's how we access our API key and actually here we have error because we need to actually install st.net inside our dependencies so just go here to manage nugat packages just right here strap. net and install it okay so it's installed already if we go back here let me just click on it again and we'll just write here using strap on top and everything is okay now so what I'm going to do next is I'm going to actually create a controller add controller an empty controller and I'll just name it payment control controller okay so here first we have an index view page and this is actually where we will store the checkout. HTML page that we saw in the documentation but firstly let me just create a folder here for the payment controller I'm naming it payment and here I'm going to add the view page view page an index view page I'm leaving the name as it is and actually I'm going to delete this here and what I'm going to store there is what we have in our checkout. HTML page so basically this here so basically here's the code where we we have just a product there and the option to go to the checkout page and the form here just redirect us to this to the method that we will see will store in the controller actually so let's just go back to the controller and just so that we have it we will I just also just create this success. HTML page and the cancel. HTML page the success. HTML page is the page where we be direct it after the payment was successful and the cancel. HTML page is the opposite the page will be redirected if the payment doesn't go through so I'm just writing th those now so that we'll get them out of our way so I'm just having two other methods like this just naming them success and cancel actually I'm just adding two more view Pages here we cancel so in the success page I copied the code actually no I didn't copy it just click on it to copy it here's the success page basically we appreciate your business if you have any questions please email and there's like a default email there and in the cancel. HTML I'm just copying this here so forgot to add something to your card sh around and come back to or something check out canceled and yes what we'll do now is go to our payment controller and we will actually write the most important actually the most important part of the project the code the code that the method that we actually have here yeah just this post method create method here where is basically all the most important part of the code I'm just copying this here just storing it here after the index method so we have a post method create checkout session I'm just changing the name just and here we actually what we do here is we specify domain the domain here action may be false let me just see what our domain is okay so this is actually our domain so I'm just copying this and I'm pasting it here just like that and then well here we actually see that some let me just make it a bit bigger so here we actually are specifying some session create options which basically are the options that will pass to our to our checkout session that we will create and here inside of it we actually specifying these line items basically these line items are the products that the customer will actually pay here we see here the price we specify the price of it and actually the quantity of the products and down below the mode is set to payment which basically is means a onetime payment we could do actually also subscriptions in strap and we have here the success URL specified and the cancel URL so basically here I'm just going to need to to actually access this in our project this success. HTML page let me just see the outout okay so this actually the route so after the domain name just just need to write payment and success payment SL success and the same thing goes for the cancel page and yeah basically this is it and yeah here above we see here that we this is the place where we give the price ID the price ID is what what we had here when we created our products then just go back to the products so all these products had like a price ID here and this is actually the place where we specify it so let me just go back if we copy this it's the place where we specify the price of the product that's actually the recommended way strap payments are done and if we go back to the documentation actually if we had the option here to define the product to sell and we choose here we see all our products that we have since this stri documentation page is connected to our uh to our account if we right here click here on the armman watch we see the price is taken automatically actually and yeah just go back here we can actually do it as an example just put the price there manually and where we left it here below the session service was created and the options that we created above were passed to it and then here is basically just the the page will be redirected to the session that URL to another page and here is the status code of 303 which is basically just a redirection status HTTP status code and actually let me just so that we test this out as it is we just go back to index page and here we actually need to change the action the action was create session create checkout I think I named it create checkout let me use this ASP action tags and let us just run the pro just for us to see it okay so here this is our index page this is what we had in our documentation basically this we have an image like a title the price and actually the checkout will redirect us to the checkout page for our our manual watch actually for our the product that we created but this is just visually just for now if I click on on checkout here will be redirected to the stripe checkout page here we see the product that we have since the checkout session took our price ID we have the title of it the price the photo everything and let me just make an example here we can use like an email address what like whatever here in the card information we'll use a test card which is like 42 42 you can find this in the documentation as well just only four tools and we just give a date here some date in the future just one uh a code just the numbers here the name of the card holder here just the country and all just complete this and if you click on pay the payment should be successful we see this success page we appreciate your business if you have any question please email orders example.com and basically what was done here as I explained it before just after we clicked on the this checkout button here we were redirected to our method here the domain was specified the options for the item that we wanted to buy which were here we saw that we specified the price ID and the quantity we let it to one and basically this session this checkout session was created with the options and we were redirected to that checkout page this was it this not basically too much complicated if you just follow each line if you just read each line actually and if you read the documentation and if we can actually verify how we that the payment went through if we go to our stripe to our payments to our stripe account to payments we'll see all payments here and actually we see here this is the time 123 p.m. the customer was James this was the product that was bought and we see this amount was successfully paid so what we're going to do right now is actually I'm going to create some products products that we store here I'm going to create them in our I'm going to store them in our database as well so that we can uh we can make the page actually look more functional so I'm just going to store some products in the database and I'm going to display each one of them those uh in our project and then we'll when when the client wants to pay for something we'll take that price ID make the request to stripe and the payment will be accordingly so let's just go back to our project here I'm going to actually need to create a model for our products or items like add a class here we can just name it products or items like item first I'm going to need an ID for those then a name for the product for the item public string actually an image URL would be needed so basically when the project loads will store each of our products in the from the database to the first page and then uh we'll pass here the product uh the price ID as well so that when as I said when a user clicks on it to buy it we make the request to the strip with that price ID string price ID so this is um our item model now I'm just going to need to as you know we're going to need to create the data folder to create a context as we do in our MVC projects like a data folder and then a context I'm adding a class here I'm naming it like m MVC context or something this will actually need to inherit the DB context and we'll see a problem here actually because we'll need to install a microsoft. Entity framework core actually I'm just going to go to dependencies manage new get packages and I'm going to also install some dependencies for us to make the migrations to the database but firstly so Entity framework this microsoft. Entity framework core this installed now just I'm using something else we're going to need something else the Microsoft Entity framework card. tools we can see here that we have some commments from it to add migrations and update the database which we're going to need after we create our model so installing this as well accept Okay this is also installed now just right here SQL Server the dependency we're going to need as well since we are uh we are storing the information in our SQL Server database okay everything was installed let's go back to our context here we should actually see that if we import something here using uh Entity framework card this is now okay here I'm going to need to write the Constructor for context as usual and here we're going to give it some parameters DB context option MVC context options this is what we usually do when create our contacts in MVC applications it's not that I remember this actually you can find this in the documentation this will also inherit some base options this was it for the Constructor and down below we just also need to specify our DB set instances so the instance for the model that we created so an item I'm naming it items and I'm just going to need to import the models I think yes on top of the page that was it for now uh what I'm going to do now is just we need to create a database this for project just go to view test Explorer I think no just go to view server Explorer you're just going to need to create a new SQL Server database we need the server name so I'm just going to open up the SQL Server management Studio to get that server name okay so I'm just copying this just give a name to the database stripe web data the name of our project just click on this to get the properties to get the connection string just copying this and I'm going to app settings at Json to store this connection string okay so just write here connection strings I'll give a name to the connection string usually what I do is just like right here default connection string and then we'll pass here inside double quotation marks the address the so to say the name of the database the connection string here I'm also going to need to write to set encryption to false just because we don't need a password to access the database and this should be basically it now what's left to do now we created the model then we created that instance inside the context we wrote created the database and stored the connection string in app settings. Json now we just going need to go to program. Cs and add one more service here Builder do services do add so basically we're adding here a service for the context so after the models instances were stored in the context then the uh context just basically so to say connects it with the database and here you write that properties of the database so here we write the of the context was MVC context we need to use the the that data folder for this to be known here I'm just passing it some options options. use SQL server and here we'll pass the address of the the actually the connection string so to access the connection string we write Builder do configuration thatg connection string side here the name of the connection string which was default connection string okay we're almost done now what we going to need to do is just go to tools and go to nugget nugget package manager go to package manager console so that we will add the model that we created to the database so just basically add Mig migration so actually I'm just going to need to cut this here and just paste it here actually down below that's where it should be and then just going back to adding the migration I'm giving it the name like initial migration okay imigration was Ed just we just need now to update the database okay everything was stored in the database let we created so now what I'm going to do I'm just going to go to the to our database here and add some products there manually then we'll also just need to handle the the way we display them so just go to databases here name of our database was strap web app data go to tables here you'll just addit top 200 rows okay so what I'm going to do here is just go back to our products okay so firstly for the watch I'm just going to take the name the description I don't know if I need the description so just the title there the name the image URL we can just go back here just copy copy image address I think just store it here and next just copy this price ID store this here as well this is our first product I'm actually going to take the other one that I had there this Jordan shirt so just Jordan tshirt I'll take the price ID here I know where I've taken it actually the photo so Jordan tshirt for the image URL I'm actually going to find another one since I don't no where I took it Tshirt image probably one of these I think seems similar copying the image address storing it here now the price ID as well I'm just adding a third one I don't know if I had the product here I think I had a product here without an actual image actually but yeah I'm just taking that ID summer tshirt and just find an image for it as well and the price ID is what I'm also going to need so we have stored three products in our database now let me just go back to the project and we will just take them from the database so we'll go to the controller actually firstly and I'm going to need to have a we're going to need to declare Constructor here to take that information from the context so firstly I need a variable to store the context so like a private read only MVC context I name it underline context as usual we'll need to import this folder here that has the context here we declare the Constructor so basically we're taking the context inside this Constructor and we're passing it to our variable so now we we need to access it here in our index page so basically just I'll make this an asynchronous method so we'll write here async task and here when we return the view we actually going to await the context so await underline context dot items do to list I think just need to remove this underline here need to use Microsoft Entity framework Corde here on top of the page and we'll have no errors anymore so the last thing we going to do is go to the index.html we're actually going to remove everything that we had here by default and here on top of the page we're taking the item model so add model iable name of the project do modeles do item here I'll have a container div to give it some styling some margins and padding then I'm going to have another div with the class of row this is basically just some bootstrap class uh styling with these classes if you know bootstrap and then inside each row I'm just taking a loop here a for each Loop we looping through each item in the model I have another class of column I have another div with the column class and inside of it we're also going to need another div where we'll store the form we making so here we're storing basically each element each item and we'll make them to be Center the title and the and the button actually everything that's inside the item that an item has so I'm using this deflex to make it a flex box justify content Center and just give it a bit of styling setting the position to relatives actually will specify the action method where as with this ASP action tags where the form will be submitted so to this create checkout method and the method will be post so firstly we have an input here of type hidden Name ID and this will take the item that ID that we take from the model this would be a single tag next we want the image so I'm taking an image tag the name of it will be image URL so that we can bind this in the method that we submitt it to this s course here we'll just write the image URL item do image URL and we'll also give it some styling set the width to be 70% so it's not too big and this will actually also be a single tag I will put the title inside an H6 tag name actually the name of the how we stored it name or okay it's the name not title it name will be name it's a big and and about this link let's give it the position of absolute I'll make it to be from the top 40% far away here inside the text we'll store actually the item that name I'm going to need another input to be invisible which will be the price ID since we don't want the user to see it so the name will be price ID and the value will be item. price ID and at the end just need an input for the bottom so input give the class of button button dark of type submit and the value what we want to be displayed in the button will be check out for the styling we want the button to be we'll give it a position of absolute so that we can place it so to say from the top 60% so it is a bit uh below what we had here the image title okay this is a single tag as well so this is the styling this is SE to you but just the way I want to do it let me just okay so I will go to program.cs and put the default controller to be payment so that each time I run the application will be redirected to that page then I just run to check okay so we see here we have the first image the second one and the third one and I style them a bit different actually but what did I do wrongly here in the second image the Jordan tshirt is not displayed let me just I think probably just got the false URL copy image address just turn on the program one more time so probably it's not updated yet what we inputed to the database but anyway I'm just going to play around also now I think I'll see it a bit later I'll play around bit with the styling so it looks better so just something small I'll give here a class of item so that I can access it in the style. CSS file and then I'm going to want to give a CL class also to the title here to the header so class item title and to the button as well item button okay so if I what did I do here if I go to this www root to CSS folder side. CSS so I'll make the item and item button so I'm accessing these two items I'll set the opacity to basically the display to zero so at first we won't see the title and the button but as soon as we will hover over them with the mouse we will see them just a bit of feature I actually want to play around with CSS in each project I make but it doesn't really matter just for the aesthetic part of it do item so we want so as long as soon as we hover over the item so the whole div we want to access this item title and the same thing is for the item button so as soon as we over over the item we will access this to the title and the button and you will change the opacity to be 0.4 let me just turn on the program again we'll wait for it to load okay so we see that that okay not exactly what I wanted let me see what I did wrong here okay so actually I wanted to set the opacity of of this to one when I hover over the item I actually wanted to make the image itself a bit disappear so item hover item image okay I don't know if I give a class to the image actually image image image class of no idea item image I want to make the opacity of the image to be 0.4 and yeah this should actually do it now okay so that's actually what all I want to do so here as soon as we hover over it we can see the button and the title and the background is a bit blurred or so that's it I will fix it a bit later I think maybe if I just refresh the database it should work but yeah anyway I'm just going over to the index to the payment method actually here and the last thing I'm going to need to do here is to take from the form the product here we'll use this bind tag here we bind the ID the name the image URL and the price ID to the model to the method here so we are we'll specify here that we're taking an item I'll name it item actually after the square bracket here and we will take it in our method and here we'll specify we'll take the price ID so basically just need to write here this to access this price ID with this string interpolation so inside uh curly braces I'm just need to access item do price ID and each time that we click on an item we should get make create the checkout session with the specific price ID and we should be redirected to this stripe checkout session for this specific product so if I run the project one last time here I actually just refresh the database I don't know what the problem was with the second image but now it seems to work and here we have our items and if I check click check out on the first one for example we should be redirected to the checkout session for this specific item we see here the name the price and the item also then just go back here click on the third one should be redirected to this one which I haven't created with an image in my uh stripe count let just check this second one as well so we should be redirected to the second product that we created actually for this one for $25 I'm just trying this one last time it's 42 42 42 42 42 Just some name and some data a date in the future just a number here the name click on pay and the payment should also be successful as we can see thanks so much for watching I mean I know this took a bit longer than I thought it would but I hope you didn't I didn't like uh you didn't get messed up in the way and I hope you understood a few things don't forget to subscribe or like the video if you haven't done already and I will see you guys in the next video
