With timestamps:

00:00 - hey coders i'm cody seibert and welcome
00:02 - to another tutorial where i'm going to
00:03 - show you how to build a calculator app
00:05 - using vue.js
00:07 - so to start off let's just go ahead and
00:08 - show you what we're building so i'm just
00:10 - going to load up the mac calculator
00:12 - which has a kind of a grid
00:14 - i guess this is like a four by five grid
00:16 - that has buttons you have different
00:17 - operands and operators and of course you
00:19 - have a display section up here so that's
00:21 - what we're going to try to emulate
00:23 - and i don't know if it's going to work
00:24 - 100 as this app does but
00:26 - we're going to try to get close so
00:28 - moving on i'm kind of going to skip the
00:30 - setup
00:31 - i basically use vcli to set up
00:34 - this project here and what we're going
00:35 - to do is just kind of modify what's
00:37 - already there to build out our
00:39 - calculator app so to start off let's go
00:41 - into the app.view file
00:43 - let's just go ahead and clean some of
00:44 - this up so that we only display our
00:46 - calculator so i'm going to get rid of
00:47 - this image
00:49 - and i'm also going to get rid of this
00:51 - hello world but instead of just deleting
00:53 - it i'm just going to go ahead and rename
00:54 - it to calculator
00:56 - and then anywhere i'm importing it just
00:57 - change that the calculator
01:01 - so i'll save that that's going to crash
01:02 - because obviously we haven't created the
01:04 - calculator component so if i go back to
01:05 - my components folder i'm just going to
01:07 - rename hello world to calculator
01:12 - open that up and just go ahead and gut
01:14 - basically everything we have so we can
01:16 - start fresh
01:18 - and just to verify that this is working
01:19 - i'll leave a little hello world message
01:21 - in here and save that
01:24 - go ahead and gut the styles gut the
01:26 - source
01:28 - save that and we are good to go at this
01:30 - point
01:32 - we don't need to touch any of the other
01:33 - files that i that i'm aware of
01:35 - so let's go ahead and talk about what we
01:37 - need to do we go back and look at that
01:40 - calculator it has a kind of a grid
01:42 - structure so i'm thinking about using
01:44 - css grid to kind of replicate that
01:46 - so let's go up here
01:48 - let's remove that and let's just call
01:49 - this
01:50 - calculator
01:52 - then inside our styles
01:54 - i'm going to define a new calculator
01:56 - class
01:59 - which we can use css grid so i'm going
02:01 - to say grid
02:02 - template columns
02:04 - i'm going to say there's going to be
02:05 - four columns and i'm going to repeat
02:06 - them
02:08 - with equal
02:10 - width right so this is a way to do like
02:12 - percentages so each one has the same
02:14 - equal percentage of each other
02:18 - and then for the rows this will kind of
02:19 - make sense in a second when we visualize
02:21 - it for the rows i'm just going to give
02:22 - it a grid auto rows
02:26 - and that's going to put some spacing
02:28 - automatically between all of our rows so
02:30 - each one should at least be 50 in height
02:32 - i'm going to save this
02:34 - what this is going to do is basically
02:36 - any child element of our calculator
02:39 - component is going to be put into a
02:41 - 4 by
02:42 - infinity
02:44 - grid
02:46 - so to show that i'll just say span
02:48 - hello
02:53 - paste that a couple times
02:58 - in fact i think it might need that he
02:59 - divs let's see
03:04 - in fact i think i forgot to say display
03:06 - is
03:08 - grid
03:09 - okay so
03:11 - definitely don't forget that line 19
03:12 - display grid that tells the component
03:14 - that it needs to be a grid css grid so
03:17 - if you notice here as i keep pasting new
03:18 - components
03:20 - we're getting a four column by infinity
03:22 - amount of rows grid so that's kind of a
03:24 - step in the right direction and what do
03:25 - we need for our calculator
03:28 - well first of all we needed a
03:30 - display i'm going to say class display
03:35 - and i'll just type in some random number
03:37 - here
03:39 - and what we need to do is we need to
03:41 - make this display span the entire top
03:44 - four columns so if we go down at the
03:46 - bottom of the style
03:47 - and say display
03:50 - we can specify how many columns that
03:53 - display should take up so i can say grid
03:55 - column i want to start at column one and
03:58 - i want it to end
03:59 - after column four so if i save this
04:02 - that displays will take up the entire
04:04 - first row and kind of
04:06 - demonstrate that a little bit better i'm
04:08 - going to say make it red
04:10 - just so we can visualize right
04:15 - and then let's just go ahead and make
04:17 - the font a little bit larger for all
04:18 - these so i'm going to say font size of
04:20 - 40 pixels just to make it a little bit
04:21 - easier to read
04:23 - so at this point we can start
04:24 - implementing the rest so let's look and
04:26 - see what we need we need
04:27 - a row that has ac plus minus percent
04:30 - and a
04:32 - divide
04:33 - icon
04:35 - so here i'll just get rid of this
04:39 - and i'll say
04:40 - clear
04:42 - i'll do plus
04:43 - minus
04:45 - uh i think it was percent and then we
04:47 - have a divide
04:48 - let's paste in here so if i say that
04:51 - we kind of have our first row ready to
04:53 - go and now for the second row seven
04:56 - eight nine times i'll do the same thing
04:58 - seven
05:00 - eight
05:03 - nine and then i'll just put an x for
05:05 - times so say that let's just go ahead
05:07 - and continue four five six minus
05:10 - four five six
05:16 - minus and then we're gonna need
05:18 - four more
05:20 - three
05:22 - sorry there's gonna be one two three i
05:23 - believe one two
05:26 - three plus
05:30 - and finally we have a zero dot and
05:32 - equals so i'll just do that zero dot
05:36 - equals
05:38 - so one thing we'll notice is that the
05:40 - zero
05:42 - i forgot to add a plus so let me just do
05:44 - that
05:46 - but we need the zero to take up two
05:48 - columns right
05:49 - so how do we do that before we use that
05:51 - grid hyphen column
05:54 - class so what we can do here is just say
05:57 - sorry on the zero
06:00 - i'm going to say class 0 and then down
06:01 - in the style i'm going to say
06:03 - 0
06:04 - is a grid column
06:06 - of one comma or one slash three
06:09 - which will give it two columns in this
06:12 - and now since all of these are kind of
06:14 - like buttons
06:16 - let's just go ahead and give it a class
06:18 - button for all these obviously i could
06:20 - just give them buttons
06:22 - just to keep it simple though i'm just
06:23 - going to give it class equals button
06:29 - go ahead and fix that zero
06:33 - go down here and i'll make a new button
06:34 - style so bpn
06:37 - background color
06:41 - it's equal to i know ee for now
06:45 - order one pixel solid
06:49 - all right so we're making
06:51 - a little bit of progress
06:53 - so going back to the calculator notice
06:55 - that
06:56 - this whole row here or column i mean
06:59 - has kind of like an orange text for the
07:02 - or orange color in the background
07:04 - so what i'm going to do here is to find
07:06 - a new class called operator
07:09 - i'll give it a background color orange
07:11 - and then a text color of white
07:15 - and then for any of my operators so that
07:17 - includes divide i'm going to give it a
07:19 - class operator
07:21 - times minus
07:24 - plus and equals
07:26 - i'll save that and now we have
07:28 - the correct coloring for these operators
07:31 - let's just go back one more time and
07:32 - look to see if we're missing anything
07:36 - yeah so at this point it seems pretty
07:37 - good i mean we could probably spend
07:40 - hours just messing around with the
07:42 - styles to make sure it looks good
07:45 - so now that we have a decent layout
07:47 - going and of course let's just get rid
07:49 - of this red
07:50 - make that something else
07:54 - all right so it looks a little bit
07:56 - better
07:57 - border i'm still being kind of nitpicky
07:59 - here the border's a little
08:02 - there we go
08:07 - of course if you don't want the the
08:08 - columns to be so large what you could do
08:11 - is just set a width to our calculator
08:15 - so i'll give it a width like 400 pixels
08:18 - and then a margin
08:20 - zero auto to make it centered here
08:22 - okay so our calculator is looking a
08:24 - little bit more like this calculator
08:26 - here i'm not going to spend too much
08:27 - time making it look exactly as is
08:30 - like i don't need to text to line this
08:32 - right or whatnot
08:33 - but anyway the next fun steps is we need
08:35 - to declare
08:36 - the logic and the bindings to our
08:38 - different buttons and display
08:41 - the first thing i see here is we could
08:43 - probably abstract this into a view
08:46 - data property here so let's go to our
08:49 - view component and declare a data
08:51 - function which returns
08:53 - something that has a display or a
08:55 - current
08:57 - set equal to an empty string
08:59 - and then up here i'm going to just
09:00 - interpolate that here and say current so
09:02 - it's going to render whatever the
09:03 - current data value is so for instance if
09:06 - i say one two three that's going to
09:08 - render out one two three or if i type
09:10 - hello world
09:11 - that's gonna type out the string
09:14 - but for now we're gonna keep that blank
09:15 - and then we're just gonna fall back
09:17 - on a zero if it's not defined
09:20 - and then we can kind of just go through
09:21 - these buttons and one by one add
09:23 - whatever functionality we need to it
09:26 - so to start off let's just do a click
09:28 - callback
09:29 - on the clear button and we're going to
09:31 - call a function called clear
09:34 - and to define functions on your view
09:35 - component
09:36 - and notice that this is a view component
09:39 - all you need to do is add a methods
09:41 - attribute
09:42 - and then define the method that you want
09:44 - so i'm going to say clear as a method
09:46 - and what's going to do it's going to
09:48 - reset current back to the empty string
09:50 - here
09:51 - so if we were to have something typed in
09:53 - there and we clicked on the c notice
09:55 - that it goes back to zero
10:00 - so moving right along let's go ahead and
10:01 - try to implement
10:03 - the next method which is sign
10:05 - so again i'm just going to add a
10:08 - click listener to this and call a sign
10:10 - method
10:12 - and then i'm going to go and implement
10:14 - that sign method here
10:15 - so what do we want to do when the user
10:17 - clicks plus or minus basically we just
10:19 - want to append a minus in front of here
10:21 - if it doesn't already exist or if it
10:23 - does exist we just go ahead and remove
10:24 - it so one way to do that is we could
10:26 - just say this dot current is equal to
10:30 - this.current.care
10:33 - this is going to be a ternary operator
10:34 - where we just check
10:36 - if the first character is equal to
10:39 - a minus
10:40 - then we're going to return
10:43 - that string
10:44 - without that first character otherwise
10:47 - we're going to return that string with a
10:52 - minus sign appended to it
10:56 - so now if we were to go and type in
10:59 - notice that this just goes and that's
11:01 - probably something we should try to fix
11:03 - but um
11:04 - if we assume that we actually have a
11:05 - number here like one two three four
11:09 - oops put on the wrong thing so one two
11:11 - three four if i save that
11:13 - notice that the plus or minus is now
11:15 - adding to it now
11:17 - oh cool so we might have to come back
11:18 - and just change that up a little bit i
11:20 - think for now we can move along to the
11:22 - percentage
11:24 - so let me add a new called new one
11:26 - called
11:27 - sorry let me add a new click callback
11:29 - called percent
11:31 - and down here to the methods same idea
11:33 - we're just going to add a callback
11:34 - function and what we're going to do here
11:35 - is basically just divide whatever number
11:37 - it is by a hundred so this
11:39 - current is equal
11:40 - to the string of
11:43 - ours float this dot current divided by
11:46 - 100.
11:47 - all right so just take the current
11:48 - string value
11:50 - make it a float divide it by 100 and
11:51 - then cast it back to a string here
11:54 - so to kind of show that let's just make
11:55 - current equal to like 600
11:59 - and then if i click on that percentage
12:01 - notice that it becomes six
12:04 - i click it again it should become zero
12:06 - point or zero point zero six okay so
12:08 - that is working fine awesome um
12:12 - at this point you should kind of see how
12:13 - easy it is to like
12:15 - write out your functionality your
12:16 - calculator has a particular state and
12:18 - we're modifying the state as we click
12:20 - the different methods here
12:22 - all right so let's move along to the
12:25 - different numbers at this point i think
12:27 - we'll leave the operators um
12:29 - for once we have the numbers implemented
12:32 - so the implement the numbers basically
12:34 - we need to think what do we need to do
12:36 - every time we click on one of these we
12:37 - just need to append to the end of this
12:40 - string right
12:41 - so that should be pretty straightforward
12:43 - let's make a method called append
12:48 - and that's going to take a number as an
12:49 - argument and what we're going to do is
12:50 - we're going to say this dot current
12:52 - is equal to this dot current
12:56 - plus
12:57 - number
12:59 - and in fact i don't like doing plus here
13:01 - because we're kind of doing string
13:02 - concatenation so i'm going to do this
13:04 - dot current
13:06 - concatenated with
13:08 - number so it's more explicit that we're
13:10 - just joining two strings together
13:13 - so now we can actually use this method
13:15 - we just created if we go up to here
13:17 - and for any time we have a number
13:20 - i'm just going to go ahead and use that
13:22 - click callback
13:24 - i'm going to say at click is equal to
13:26 - append
13:27 - and then for each one let's just go
13:29 - ahead and put in the string that we want
13:31 - to append
13:32 - so seven
13:34 - eight
13:35 - nine
13:36 - four
13:38 - five
13:39 - six
13:41 - one
13:42 - two
13:44 - all right save that
13:46 - and i forgot to do zero so let me just
13:48 - go and add zero here
13:54 - let's see so does this work
14:00 - seems like it so let's just go ahead and
14:01 - add everything one two three four five
14:04 - six seven eight nine add a zero
14:07 - works fine um
14:13 - not sure if that's proper but we won't
14:15 - worry about that right now
14:18 - all right so moving along
14:20 - last thing we have for the operands is
14:22 - this dot
14:25 - so let's just do another click call back
14:26 - and call it dot
14:29 - so it's going to call a function called
14:30 - dot and let's of course make sure we
14:32 - define a function down here called dot
14:35 - what we're going to do is very similar
14:37 - to append but we only want to append the
14:39 - dot if it doesn't already exist
14:41 - so i'm going to say this dot current
14:45 - if sorry if this dot current dot index
14:48 - of
14:49 - the dot
14:51 - is not equal to
14:53 - negative 1
14:55 - then we don't need to append it
14:57 - in fact i'm just going to say make sure
14:58 - that the dot doesn't exist and if it
15:00 - doesn't exist
15:02 - we can just say
15:04 - this dot append and then
15:06 - append the dot
15:08 - and that's basically just going to call
15:10 - this method here with the period
15:13 - so let me save this
15:14 - type in some numbers type in a dot
15:17 - click some more numbers try dotting
15:19 - again and notice that it doesn't append
15:21 - it anymore
15:22 - all right we're making some really good
15:23 - progress now to the more difficult part
15:26 - of building a calculator app
15:28 - which is the operators so for each of
15:30 - these operators
15:32 - we want to call a different kind of
15:34 - click callback
15:36 - so for this one i'm going to say
15:38 - divide
15:41 - for times i'm just going to say times
15:45 - i'll say minus
15:48 - and then for this one i'll say add
15:53 - so for those four
15:55 - operators let's go ahead and declare
15:56 - those four methods
15:58 - so divide
16:01 - times
16:03 - minus
16:04 - and then we have plus or i think we call
16:07 - it add
16:09 - let me check what do we call it
16:12 - yeah we call it add
16:14 - so what we might want to do is when the
16:16 - user clicks on one of those four
16:18 - operators we want to kind of set inside
16:20 - of our internal component state
16:22 - what our operator is going to be when we
16:24 - click the equal button so up here
16:27 - i'm going to make a new data called
16:29 - operator
16:30 - and i'll set it to null for now
16:33 - and basically whenever we click one of
16:34 - these we're just going to define the
16:36 - operator
16:37 - as a new callback function so
16:40 - for each of these it's going to take a a
16:42 - and b and it's going to return some type
16:44 - of math that is happening between those
16:46 - two so in this case divide will be this
16:50 - and then for the other ones we're simply
16:51 - just going to change what the operator
16:53 - is doing so this one will be a times b
16:55 - this one will be a minus b
16:59 - and this one will be a plus b
17:03 - so i'll save that and as we click these
17:04 - things our operator is going to change
17:06 - depending on the last thing that we
17:07 - clicked
17:10 - the last step is how do we actually use
17:12 - these right basically we can't use it
17:14 - until we
17:16 - click the equal button
17:18 - so let's go over here and add a click
17:20 - call back to equal
17:22 - and make another function and this will
17:24 - all make sense when we tie it together
17:25 - in just a second
17:27 - so basically when the user types in a
17:29 - number like 200 we click add we know
17:31 - that the operator is going to be set to
17:33 - the add operator
17:34 - and then when we type a new
17:37 - number
17:39 - we need to kind of keep track of that
17:41 - previous and current number so notice if
17:43 - i were to type a number now it's just
17:45 - appending to the current
17:46 - so some additional logic we need to do
17:48 - is i'm going to say
17:49 - make another one called previous
17:54 - which is set to null
17:56 - and then i also want to add a boolean
17:57 - called operator clicked which is going
18:00 - to be false
18:01 - so anytime we click one of these
18:02 - operators we just basically want to do
18:05 - operator clicked
18:08 - is equal to true
18:11 - and then we want to set the previous
18:12 - equal to the current
18:21 - and i could probably abstract this into
18:22 - a helper function since it's very very
18:24 - similar logic between all these
18:26 - so let's kind of do that
18:32 - i'm going to say set previous as a
18:33 - function
18:34 - which is going to just run those two
18:36 - commands
18:38 - and i'm going to call
18:41 - set previous
18:44 - after all these right so
18:47 - it's not set previous
18:51 - all right so let's try that now so if we
18:52 - click on 200 we click plus
18:55 - we click 200 again
18:57 - notice that that is not working just yet
18:59 - and that is because
19:02 - we forgot
19:04 - to
19:04 - clear out
19:08 - the current right
19:11 - so basically
19:12 - after we've clicked operator clicked
19:14 - we need to check to see if we've clicked
19:16 - an operator when we call that a pin
19:18 - method
19:19 - so over here what i can do is just say
19:21 - if this dot operator clicked is true
19:26 - we need to say this dot
19:28 - current
19:29 - is equal to an empty string
19:31 - and then this operator clicked is equal
19:33 - to false to kind of set it back to that
19:34 - empty state
19:39 - and of course we can just continuously
19:41 - append to the current after we set it
19:43 - equal to empty string
19:45 - let's try this again we need to say one
19:48 - plus two
19:51 - and notice that previous is one and
19:53 - current is set to two here
19:56 - now the last step is when we click equal
19:58 - we want to
19:59 - run that operator against the previous
20:01 - and the current
20:04 - so what i can say is
20:06 - this dot current is equal to
20:09 - this.operator
20:11 - this dot current and this dot previous
20:15 - basically take the current value
20:17 - and run the operator against the
20:18 - previous value
20:22 - this is not going to work because this
20:23 - is a string and this is a string so what
20:25 - we need to do first is
20:27 - parse that to a float
20:34 - and then make sure we cast it to a
20:36 - string here
20:41 - so let's try that out and see what
20:43 - happens
20:44 - in fact we probably want to reset
20:45 - previous um after we've done that so i'm
20:48 - gonna set that back to null here
20:53 - all right so let's try out some of this
20:54 - stuff so i'll do like 1 plus 2
20:57 - equals 3 plus 5
20:59 - should equal 8
21:01 - eight should equal zero
21:03 - times five should equal zero
21:06 - plus ten
21:08 - times five is fifty
21:10 - divided by four
21:12 - is point zero eight times one
21:15 - gives us that negate it
21:17 - add eight get back to zero
21:20 - um
21:22 - let's say 90 let me clear it and go to
21:24 - 90 percent
21:27 - times 100 should be
21:29 - or sorry it should be 90.
21:32 - um negate that and add 10 to get
21:36 - negative 80.
21:37 - so our calculator is pretty much working
21:39 - i think there's like a bug or two like
21:41 - for instance if you do
21:42 - if you're at zero you do plus or minus
21:44 - that's kind of like a little bug
21:46 - and then also like i think normal
21:49 - calculators as you keep pressing the
21:51 - operators it's gonna like
21:53 - run your equal
21:55 - but i'm not gonna dive into kind of
21:57 - fixing those i just wanted to kind of
21:58 - show you a really quick overview
22:00 - building out a calculator app using
22:02 - vue.js
22:03 - and honestly it didn't take any time at
22:04 - all it's pretty straightforward
22:07 - if you want to try to fix those bugs
22:08 - feel free to do so on my git repo and
22:11 - post a pull request
22:14 - but for now i think this is a
22:16 - a good ending point for this tutorial so
22:18 - if you have any questions or comments or
22:19 - concerns feel free to leave some in the
22:22 - comment section below
22:23 - and if you have any recommendations of
22:25 - future little like mini projects that i
22:27 - could try to build
22:28 - um again leave me a comment or send me a
22:31 - tweet on twitter well so that about
22:33 - wraps it up thanks for watching and
22:34 - happy coding

Cleaned transcript:

hey coders i'm cody seibert and welcome to another tutorial where i'm going to show you how to build a calculator app using vue.js so to start off let's just go ahead and show you what we're building so i'm just going to load up the mac calculator which has a kind of a grid i guess this is like a four by five grid that has buttons you have different operands and operators and of course you have a display section up here so that's what we're going to try to emulate and i don't know if it's going to work 100 as this app does but we're going to try to get close so moving on i'm kind of going to skip the setup i basically use vcli to set up this project here and what we're going to do is just kind of modify what's already there to build out our calculator app so to start off let's go into the app.view file let's just go ahead and clean some of this up so that we only display our calculator so i'm going to get rid of this image and i'm also going to get rid of this hello world but instead of just deleting it i'm just going to go ahead and rename it to calculator and then anywhere i'm importing it just change that the calculator so i'll save that that's going to crash because obviously we haven't created the calculator component so if i go back to my components folder i'm just going to rename hello world to calculator open that up and just go ahead and gut basically everything we have so we can start fresh and just to verify that this is working i'll leave a little hello world message in here and save that go ahead and gut the styles gut the source save that and we are good to go at this point we don't need to touch any of the other files that i that i'm aware of so let's go ahead and talk about what we need to do we go back and look at that calculator it has a kind of a grid structure so i'm thinking about using css grid to kind of replicate that so let's go up here let's remove that and let's just call this calculator then inside our styles i'm going to define a new calculator class which we can use css grid so i'm going to say grid template columns i'm going to say there's going to be four columns and i'm going to repeat them with equal width right so this is a way to do like percentages so each one has the same equal percentage of each other and then for the rows this will kind of make sense in a second when we visualize it for the rows i'm just going to give it a grid auto rows and that's going to put some spacing automatically between all of our rows so each one should at least be 50 in height i'm going to save this what this is going to do is basically any child element of our calculator component is going to be put into a 4 by infinity grid so to show that i'll just say span hello paste that a couple times in fact i think it might need that he divs let's see in fact i think i forgot to say display is grid okay so definitely don't forget that line 19 display grid that tells the component that it needs to be a grid css grid so if you notice here as i keep pasting new components we're getting a four column by infinity amount of rows grid so that's kind of a step in the right direction and what do we need for our calculator well first of all we needed a display i'm going to say class display and i'll just type in some random number here and what we need to do is we need to make this display span the entire top four columns so if we go down at the bottom of the style and say display we can specify how many columns that display should take up so i can say grid column i want to start at column one and i want it to end after column four so if i save this that displays will take up the entire first row and kind of demonstrate that a little bit better i'm going to say make it red just so we can visualize right and then let's just go ahead and make the font a little bit larger for all these so i'm going to say font size of 40 pixels just to make it a little bit easier to read so at this point we can start implementing the rest so let's look and see what we need we need a row that has ac plus minus percent and a divide icon so here i'll just get rid of this and i'll say clear i'll do plus minus uh i think it was percent and then we have a divide let's paste in here so if i say that we kind of have our first row ready to go and now for the second row seven eight nine times i'll do the same thing seven eight nine and then i'll just put an x for times so say that let's just go ahead and continue four five six minus four five six minus and then we're gonna need four more three sorry there's gonna be one two three i believe one two three plus and finally we have a zero dot and equals so i'll just do that zero dot equals so one thing we'll notice is that the zero i forgot to add a plus so let me just do that but we need the zero to take up two columns right so how do we do that before we use that grid hyphen column class so what we can do here is just say sorry on the zero i'm going to say class 0 and then down in the style i'm going to say 0 is a grid column of one comma or one slash three which will give it two columns in this and now since all of these are kind of like buttons let's just go ahead and give it a class button for all these obviously i could just give them buttons just to keep it simple though i'm just going to give it class equals button go ahead and fix that zero go down here and i'll make a new button style so bpn background color it's equal to i know ee for now order one pixel solid all right so we're making a little bit of progress so going back to the calculator notice that this whole row here or column i mean has kind of like an orange text for the or orange color in the background so what i'm going to do here is to find a new class called operator i'll give it a background color orange and then a text color of white and then for any of my operators so that includes divide i'm going to give it a class operator times minus plus and equals i'll save that and now we have the correct coloring for these operators let's just go back one more time and look to see if we're missing anything yeah so at this point it seems pretty good i mean we could probably spend hours just messing around with the styles to make sure it looks good so now that we have a decent layout going and of course let's just get rid of this red make that something else all right so it looks a little bit better border i'm still being kind of nitpicky here the border's a little there we go of course if you don't want the the columns to be so large what you could do is just set a width to our calculator so i'll give it a width like 400 pixels and then a margin zero auto to make it centered here okay so our calculator is looking a little bit more like this calculator here i'm not going to spend too much time making it look exactly as is like i don't need to text to line this right or whatnot but anyway the next fun steps is we need to declare the logic and the bindings to our different buttons and display the first thing i see here is we could probably abstract this into a view data property here so let's go to our view component and declare a data function which returns something that has a display or a current set equal to an empty string and then up here i'm going to just interpolate that here and say current so it's going to render whatever the current data value is so for instance if i say one two three that's going to render out one two three or if i type hello world that's gonna type out the string but for now we're gonna keep that blank and then we're just gonna fall back on a zero if it's not defined and then we can kind of just go through these buttons and one by one add whatever functionality we need to it so to start off let's just do a click callback on the clear button and we're going to call a function called clear and to define functions on your view component and notice that this is a view component all you need to do is add a methods attribute and then define the method that you want so i'm going to say clear as a method and what's going to do it's going to reset current back to the empty string here so if we were to have something typed in there and we clicked on the c notice that it goes back to zero so moving right along let's go ahead and try to implement the next method which is sign so again i'm just going to add a click listener to this and call a sign method and then i'm going to go and implement that sign method here so what do we want to do when the user clicks plus or minus basically we just want to append a minus in front of here if it doesn't already exist or if it does exist we just go ahead and remove it so one way to do that is we could just say this dot current is equal to this.current.care this is going to be a ternary operator where we just check if the first character is equal to a minus then we're going to return that string without that first character otherwise we're going to return that string with a minus sign appended to it so now if we were to go and type in notice that this just goes and that's probably something we should try to fix but um if we assume that we actually have a number here like one two three four oops put on the wrong thing so one two three four if i save that notice that the plus or minus is now adding to it now oh cool so we might have to come back and just change that up a little bit i think for now we can move along to the percentage so let me add a new called new one called sorry let me add a new click callback called percent and down here to the methods same idea we're just going to add a callback function and what we're going to do here is basically just divide whatever number it is by a hundred so this current is equal to the string of ours float this dot current divided by 100. all right so just take the current string value make it a float divide it by 100 and then cast it back to a string here so to kind of show that let's just make current equal to like 600 and then if i click on that percentage notice that it becomes six i click it again it should become zero point or zero point zero six okay so that is working fine awesome um at this point you should kind of see how easy it is to like write out your functionality your calculator has a particular state and we're modifying the state as we click the different methods here all right so let's move along to the different numbers at this point i think we'll leave the operators um for once we have the numbers implemented so the implement the numbers basically we need to think what do we need to do every time we click on one of these we just need to append to the end of this string right so that should be pretty straightforward let's make a method called append and that's going to take a number as an argument and what we're going to do is we're going to say this dot current is equal to this dot current plus number and in fact i don't like doing plus here because we're kind of doing string concatenation so i'm going to do this dot current concatenated with number so it's more explicit that we're just joining two strings together so now we can actually use this method we just created if we go up to here and for any time we have a number i'm just going to go ahead and use that click callback i'm going to say at click is equal to append and then for each one let's just go ahead and put in the string that we want to append so seven eight nine four five six one two all right save that and i forgot to do zero so let me just go and add zero here let's see so does this work seems like it so let's just go ahead and add everything one two three four five six seven eight nine add a zero works fine um not sure if that's proper but we won't worry about that right now all right so moving along last thing we have for the operands is this dot so let's just do another click call back and call it dot so it's going to call a function called dot and let's of course make sure we define a function down here called dot what we're going to do is very similar to append but we only want to append the dot if it doesn't already exist so i'm going to say this dot current if sorry if this dot current dot index of the dot is not equal to negative 1 then we don't need to append it in fact i'm just going to say make sure that the dot doesn't exist and if it doesn't exist we can just say this dot append and then append the dot and that's basically just going to call this method here with the period so let me save this type in some numbers type in a dot click some more numbers try dotting again and notice that it doesn't append it anymore all right we're making some really good progress now to the more difficult part of building a calculator app which is the operators so for each of these operators we want to call a different kind of click callback so for this one i'm going to say divide for times i'm just going to say times i'll say minus and then for this one i'll say add so for those four operators let's go ahead and declare those four methods so divide times minus and then we have plus or i think we call it add let me check what do we call it yeah we call it add so what we might want to do is when the user clicks on one of those four operators we want to kind of set inside of our internal component state what our operator is going to be when we click the equal button so up here i'm going to make a new data called operator and i'll set it to null for now and basically whenever we click one of these we're just going to define the operator as a new callback function so for each of these it's going to take a a and b and it's going to return some type of math that is happening between those two so in this case divide will be this and then for the other ones we're simply just going to change what the operator is doing so this one will be a times b this one will be a minus b and this one will be a plus b so i'll save that and as we click these things our operator is going to change depending on the last thing that we clicked the last step is how do we actually use these right basically we can't use it until we click the equal button so let's go over here and add a click call back to equal and make another function and this will all make sense when we tie it together in just a second so basically when the user types in a number like 200 we click add we know that the operator is going to be set to the add operator and then when we type a new number we need to kind of keep track of that previous and current number so notice if i were to type a number now it's just appending to the current so some additional logic we need to do is i'm going to say make another one called previous which is set to null and then i also want to add a boolean called operator clicked which is going to be false so anytime we click one of these operators we just basically want to do operator clicked is equal to true and then we want to set the previous equal to the current and i could probably abstract this into a helper function since it's very very similar logic between all these so let's kind of do that i'm going to say set previous as a function which is going to just run those two commands and i'm going to call set previous after all these right so it's not set previous all right so let's try that now so if we click on 200 we click plus we click 200 again notice that that is not working just yet and that is because we forgot to clear out the current right so basically after we've clicked operator clicked we need to check to see if we've clicked an operator when we call that a pin method so over here what i can do is just say if this dot operator clicked is true we need to say this dot current is equal to an empty string and then this operator clicked is equal to false to kind of set it back to that empty state and of course we can just continuously append to the current after we set it equal to empty string let's try this again we need to say one plus two and notice that previous is one and current is set to two here now the last step is when we click equal we want to run that operator against the previous and the current so what i can say is this dot current is equal to this.operator this dot current and this dot previous basically take the current value and run the operator against the previous value this is not going to work because this is a string and this is a string so what we need to do first is parse that to a float and then make sure we cast it to a string here so let's try that out and see what happens in fact we probably want to reset previous um after we've done that so i'm gonna set that back to null here all right so let's try out some of this stuff so i'll do like 1 plus 2 equals 3 plus 5 should equal 8 eight should equal zero times five should equal zero plus ten times five is fifty divided by four is point zero eight times one gives us that negate it add eight get back to zero um let's say 90 let me clear it and go to 90 percent times 100 should be or sorry it should be 90. um negate that and add 10 to get negative 80. so our calculator is pretty much working i think there's like a bug or two like for instance if you do if you're at zero you do plus or minus that's kind of like a little bug and then also like i think normal calculators as you keep pressing the operators it's gonna like run your equal but i'm not gonna dive into kind of fixing those i just wanted to kind of show you a really quick overview building out a calculator app using vue.js and honestly it didn't take any time at all it's pretty straightforward if you want to try to fix those bugs feel free to do so on my git repo and post a pull request but for now i think this is a a good ending point for this tutorial so if you have any questions or comments or concerns feel free to leave some in the comment section below and if you have any recommendations of future little like mini projects that i could try to build um again leave me a comment or send me a tweet on twitter well so that about wraps it up thanks for watching and happy coding
