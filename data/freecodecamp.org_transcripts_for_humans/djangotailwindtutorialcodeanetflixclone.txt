With timestamps:

00:00 - In this course from Oliver Otchere you will
improve your Django and Tailwind CSS skills
00:05 - by creating a Netflix clone. You learn how
to recreate the design of netflix and implement
00:12 - some simple functionality. Hello wonderful
people. It's a OtchereDev, I decided that
00:17 - Why shouldn't I create a Django clone of Netflix?
So I did that. You will know what Netflix
00:25 - is. So this is Netflix the original website.
It says unlimited movies, unlimited TV shows
00:33 - and more. So it allows you to watch movies
and TV shows. Okay, online. So this is the
00:40 - original website of Netflix. And this is my
version of Netflix. Let me switch to that
00:46 - So you can see from here that I'm running
on localhost. Local localhost port 8000. So
00:54 - okay, so this is it. This is my version of
Netflix, you see this, it's almost like they
01:01 - say, I needed a good record, it did well,
so it has the sign-in, the authentication
01:09 - system, the authentication system baked in.
Okay, my PC is a little bit slow. So you guys
01:20 - should pardon me. So I'm going to log in.
Okay, then provide my password. Login. Okay,
01:37 - so you see, when you log in into if you have
used Netflix before, you'll be asked to choose
01:42 - a profile. And because I've already tested
it, that's how it is so many profiles. So
01:48 - you can add a new profile by going to this
clicking on this button, it's going to send
01:52 - you to a page where you can create a new profile,
which is displays, but I don't want to create
01:56 - a new profile. So I just go back and choose
any of the profile. So the profile, you have
02:03 - two types of profile there. And I can watch
all videos and one profile for only kids.
02:09 - Okay, so I just use this. Okay, so you see,
this is the homepage. Alright, can see. So
02:19 - I just have to because I can't compete with
Netflix. So let me click on a movie. And it's
02:28 - going to take me to the detail page of the
movie. So I clicked on Viking. So this is
02:32 - the Detail page of I can see give me some
description about the movie. Now just some,
02:41 - some placeholder text. And if I want to watch
the movie, this is the button here, I click
02:45 - here, it sends me to the page where the movie
is going to be shown just like how Netflix
02:53 - assets and this is it. Let me play. Okay,
it's, as you can see, right, it's playing
03:04 - but the image that I use is just I just use
some placeholder image, video. So it's, it
03:11 - shows nothing, but the one that we'll be demoing
here, you would use some shots, fake video,
03:16 - so you can see this thing just popped out.
Okay, so this is basically what you're going
03:23 - to build, you can expand upon it add payment
is of no lifting at any add on the payment
03:29 - system and the magic behind that flavor that
I can't do anything about. So this is basically
03:37 - what we are going to do, we're going to build
our own version of Netflix using jungle them
03:44 - with the best framework ever. So guys, let's
jump into it. And let's do this the now. Okay
03:52 - guys, so let's jump into the video and let's
create our own version of Netflix. So before
03:59 - we jump into the video, I because I'm a wonderful
person and I want this thing to be as simple
04:05 - and as understandable as it can be. I went
ahead and was created my starter file so that
04:13 - we just cut off some unnecessary parts something
that you already know about. Sorry. So this
04:21 - is the repo I'm going to leave the link to
the repo in the description below so that
04:27 - you can have access to this repo. So when
it comes to the reporting, there are two branches.
04:33 - The main branch is going to contain the completed
projects. And when you switch or when you
04:38 - switch the branches. It says the select over
here you can choose the starter file here
04:48 - at a startup branch here sorry, when you choose
it. It's the startup branch contains everything
04:54 - about the continuous data data first neither
for these projects, okay? So just switch there,
05:04 - then go to code, then you can clone it, or
you can download as a profit and just open
05:11 - it up inside your favorite text editor or
code editor. I'm going to use Visual Studio
05:18 - code. Okay, so let me close this stuff to
be no worries again. Alright, so this is the
05:26 - repo for the project. It has two branches,
the starter branch and the main branch. The
05:32 - main branch is for the completed projects.
And the starter branch is for the brand that
05:39 - contains all the Stata files, okay. So we
can meet you come here, you clone it, I have
05:47 - some templates are for providing some templates
and some static files, which are the images
05:51 - that we are going to use. Okay. So when you
click on it, you're going to see this something
05:58 - like this. Sorry, I'm feeling like this. You
have a normal Django project that has been
06:05 - generated with Django does admin start project
and I gave it a name? Django Netflix. Okay,
06:12 - so inside the Stata files to add a static
file footer, you see some images and some
06:19 - styles or CSS or via which was generated with
tailwind CSS, so I've pitched a tailwind CSS
06:26 - file. So this is x. And inside there? Was
it in the templates, you have some a couple
06:37 - of templates that has been created for you
already. And I usually I used I used a tailwind
06:44 - CSS as usual, my favorite CSS framework. Okay.
So this is it. So this is, let me let me talk
06:55 - about the changes that I've made in the fall
that were generated by the Django design.
07:00 - So I changed just two files, the settings.py
file and the URLs up UI file right here. So
07:08 - inside a settings.py file, I changed I added
this inside of there, so the templates, or
07:16 - the directories or the templates, either the
directory for this template folder over here.
07:23 - And when you scroll down, you see I've done
some magical ways that we'll be able to use
07:30 - our static files or be able to hold our static
files. So either the static routes, the media
07:38 - routes, the media URL, and the static files,
this okay. So because we are going to use
07:47 - a development server, we are we have to find
a way of saving our media files and an our
07:55 - static files. So I added the static, either
this line of Codea, which allows us to save
08:03 - our static and media files whilst we are still
in development. Okay. All right. So these
08:09 - are just the changes that I've made in the
fog that were generated by the Django dash
08:17 - admin. Alright. So let's continue. Let's get
into the action of the project. Okay. So the
08:24 - first thing I want to do is you're going to
create a new app. Okay, you are going to create
08:29 - a new app, we are going to call it scorso
Python stats. No, sorry. Python managed up
08:40 - Pui. Oh, what is wrong? My head they get?
Why did your pui start up was the name of
08:55 - one score the score will get an error somewhere.
Okay, no error today, escalate this. Okay,
09:07 - so we have created our Oh, our new app over
here. So let's close it. ls move up. And he
09:15 - said our installed apps. Let's add iterates
is aapko. Right is one. And the next thing
09:33 - I want to do is you want to add a URL up Wi
Fi here so that we will be able to some way
09:40 - of make our URLs modular based on the apps
itself. Instead of having all your big directly
09:50 - inside the main your pure iPhone, okay. All
right. So, let's add a new file here. Call
10:01 - it URLs Pui. Alright, so inside the ui.py
file, we are going to first import path. Okay,
10:10 - then the next thing we are going to do is
also have a URL, the URL pattern list. Okay,
10:17 - so first import. So I thought I'm writing
Java scripts. So from Django, dot URLs, import
10:35 - path Oh, sorry, no dispatch, yes. This way,
then we are going to have an app name because
10:54 - we are going to use a namespace inside our
main URL. So App Name is going to be close
11:02 - to core. Then you have the URL, path and list.
Alright, this is it. We are done with this
11:21 - for the meantime, let's close it. And inside
the main urls.py file, this one here, the
11:28 - one that was generated by Django does admin
and the other one that you cloned, you're
11:34 - going to add, you're going to include Dauda
URLs. So path, and we are going to give it
11:47 - to the routes. The routes, Route, okay. So
you're going to give it an include. And you're
11:58 - going to pass it core dot URLs. You with a
namespace, you can see I getting some error.
12:11 - So you have to import include namespace. The
namespace is going to be close to core. Alright,
12:19 - so let's import this include include can be
imported from Django dot URLs. All right,
12:27 - like this. So you can't say if it's now you're
done, okay, so it's basically done with this.
12:38 - Okay, you're not done with it. So, since you
are done with this thing, the next thing I
12:43 - want us to look at is our models, okay? So
inside the course, the core folder, open the
12:52 - model the PI file. Alright. Okay, so first,
you're going to start by creating our own
13:07 - custom design, because we just want to extend
it a little bit by just adding just one shoe
13:15 - to it. Okay, so we don't want to change the
authentication system, or anything. It's not
13:23 - anything special. So we are just going to
use the abstract instead of the abstract basis,
13:31 - which allows us to create a fully fledged
or fully flexible custom user by just going
13:39 - to use the abstract user, okay, which just
allows us to just extend the thoughts of the
13:45 - user which Django provides to us okay. So
from Django dot contrib dot dot dot models.
14:05 - Import abstracts. I always put so this the
wrong abstracts abstract like this, okay.
14:21 - So let's go ahead and create our coastal visa
class. I was quite impressed on visa. Don't
14:30 - get confused with them. And you're going to
hate from the abstract. Sorry, was Autolite
14:39 - change is so abstract is like this. Alright,
so the only thing that you're trying to add
14:50 - is trying to give it a profile filled. Alright.
So of profiles and is going to be a many not
14:59 - a minor. Many to manifold Sorry, sorry sorry
guys sorry. Since my brain is on some overload,
15:13 - so models, DODDS may need to be ready for
what was going on many too many for just like
15:29 - this and this is going to be to the profile
profile profiles table okay, they are going
15:47 - to have Nol equals true and blank equals shoe
like this alright. So, this is it, this is
16:02 - it. Okay. So, we are done with our ESA The
next thing I want to do or look into is the
16:11 - profile the profile, the profile model, okay,
so plus profile and we are going to inherit
16:24 - from models dot model Oh, sorry. Alright.
Alright, so, the profile is going to have
16:41 - a name, alright, so a profile supposed to
have a name, the profile is going to be the
16:48 - Netflix profile, okay? The one that usually
creates, too, you can use to watch a movie,
16:56 - if you are familiar, Netflix, you're supposed
to know that shuffled. So we are going to
17:01 - use a character food and is going to have
a max length of two to five or key, it's going
17:13 - to be required. So So and the next one is
going to be an age limit. So we know whether
17:22 - it's for kids, or as for or so you show them
the appropriate content. Okay. All right.
17:30 - What's all this was this Alright, sorry, guys.
So that was going to be a mother, it's also
17:36 - going to be a models dot char field want to
have the max length of them going to be choices.
18:00 - I'm going to be age and our school choice.
And that's called choices. So let's go and
18:09 - create the choices still choices are up here
see a 
18:19 - choices going to be caused to a tupple or
a tuple then we're going to have to two food
18:35 - in it. Okay, so one is going to be for all
and the other is going to be so the first
18:45 - one is the one that is going to be saved to
the database. And this is the one the one
18:49 - which is going to be displayed to a user.
Okay. The next one is going to be kits and
18:59 - kits. Alright. So there's what's going to
be used here and an STI we want here as a
19:09 - UU ID for this profile. So we are going to
use our models dot u u ID field. Alright,
19:18 - I are going to set a default for it. Which
is going to be equals to u u ID dots. So let's
19:33 - first import the UID a UID module from Django,
eight from Python, sorry, and put your ID
19:43 - Okay, so you ID and there is a version called
UI default. Okay, this one here, I like the
19:56 - fork. Alright, so you're done with the profile
model. So the UID is going to allow us be
20:02 - able to request for a particular module or
is going to make it that how do I put it,
20:10 - differentiate between it. Okay, so class,
the next thing I'm going to board is the movie
20:16 - class or the movie model. going to show you
guys four models that model then a movie actually
20:29 - has a title. So let me clean this one day.
It's not a name. So title, then it's going
20:39 - to be a models dot char field. max length
is going to be equal to two, five. The next
20:55 - thing I want to have is a description of the
movie. So it's going to be models dot char
21:06 - field, or no, sorry, we can store the description
that we are going to use a text area, a text
21:18 - word, sorry, what did I just spell? text text
that tests this vote. Okay, we're going to
21:29 - set in the blank equals true. And na equals
true. Alright, you're supposed to be capital,
21:42 - you're not writing JavaScript. This is the
most interesting language and the best framework
21:51 - ever. created when we created food today,
that is going to be models that date, time
22:02 - thought are going to add an auto. Now add
because you so this is going to add the date,
22:17 - the time and the date and time that the movie
The movie class was created to the store,
22:26 - okay? So we don't need to go and find out
or put in a time ourselves, right? It will
22:33 - be added for us automatically. Right? So then
so now we want to add or the next food we
22:36 - want to add is the UU ID field. So that is
also going to make the movie said we're gonna
22:45 - have to differentiate between the movies Okay,
so models.ui default Okay, so now we are also
22:57 - going to get down to a default, which is going
to be equal to u ID dot u u ID for alright.
23:12 - And the next thing that we want to do is add
the type of movie where our editor sees now
23:18 - movie or it's just just a single movie. Okay,
so as far as I didn't actually want to add
23:25 - this part, but it's it makes sense. You can
have a Netflix with just only was single movies.
23:33 - You have to have seasonal movies too. Okay.
Alright, so it makes sense. Safford No, Safford
23:42 - and the max length this is going to be Ted
and you're going to use choices going to be
23:55 - close to movie and I score choices Alright,
so let's create the movie choices over here
24:18 - over here then you're going to have one sees
now like this alright. And sees now sorry
24:34 - sees now but I suppose Oliver Come on, come
on. Alright, so the next one is going to be
24:45 - was was the name single thing go and you're
gonna be seeing go alright, So, you're down
25:01 - to the movie choices. So you're supposed to
be choices this way that we, alright. The
25:14 - lesson I want to add, as was the name, the
video is to put out a video file or video.
25:23 - So, let me let me explain to you the database
setup. So you have a movie, a movie, a movie
25:33 - thought, a movie table that is going to hold
all the movies that are inside the database.
25:39 - And inside a movie table, a particular instance
are going to have videos, the video can be
25:46 - just one video, if it is a single, it's a
single movie, or a single type of movie, but
25:53 - it can hold many instances of the movie. What
was the name? many instances of the movie
26:04 - model? Okay, so if it's a seasonal movie,
so in a seasonal movie, you have a lot of
26:10 - movies that are linked to that particular
movie, but if the single movie just has one
26:15 - movie, okay, I hope it's clear. Right? Then
so we are going to have videos which is going
26:24 - to be a models that many to many, many to
many many to many thought and this is going
26:40 - to be related to the video filled. Right.
Okay, then the next thing that is going to
26:53 - be s is going to be you want a flyer or a
poster for it. So we're going to call it a
27:01 - flyer. So it's going to be a models dot image
vote and I'm going to choose that it should
27:13 - be uploaded to upload to where should we upload
it to flyers? Yes. Alright. And we are going
27:27 - to the every movie is supposed to have an
age limit so that we'll be able to know which
27:31 - kind of movie to show to each age limit. Okay.
So it's going to be also going to be equals
27:39 - two models dot char filled and the maxlend
this is the this is going to be 10 and the
27:57 - choice is going to be choices. Sir choices,
which is the age choices. Alright, okay, okay,
28:12 - I hope you guys are following me. Alright.
So this is it, you're done with the movie,
28:20 - the movie model. So let's jump into the video
model where we are going to hold our individual
28:28 - video or movie file, right? So that is also
going to be models dot model. So is going
28:44 - to have a name, it can have a title. So let's
say it's an it's a seasonal movie, to the
28:49 - seasonal movie can have a title that particular
video instance can have a title let's see
28:55 - episode one, episode two episode three. But
in the in the case of a single video, then
29:01 - given it the single video instance the title
doesn't make sense. Okay, they are going to
29:07 - make it a models dot char field you're going
to make it max length of two to five blank
29:21 - equals true. Black equals true So that's those
scissor movies or the single movies can escape
29:32 - this field without passing it any value and
gnarly costs true. Alright, then the next
29:44 - thing that we need is the most important and
the file the video file itself so the data
29:50 - is going to be a muddles dots. file filled
Okay, so this is it, and you're going to choose
30:05 - an upload, upload to when to upload it to
movies. Alright. Okay, so guys, we are done
30:19 - with our database setup. So this is the model
that we are going to use for this projects.
30:25 - Right? So this is this one here, video, movie
profile and Acosta visa model. Okay, so save
30:35 - it up, save it up. Okay, so this is the models
done completed. All righty, let's jump into
30:45 - the views. Okay, so let's start writing some
views and see the magic that we are putting
30:53 - together. Alright. So in this, this series,
the series in this today are going to use
31:01 - the class based approach. Okay, so let's first
import from Django dot views. Import view.
31:13 - Alright, let's try this. Okay, let me clear
away this. This Hanoi COVID I was having to
31:28 - record it back again. Oh, I miss you guys,
i to the first thing I want to do is you're
31:35 - going to create an index page, or let's say
the homepage. So let's create a view that
31:44 - is going to handle that. So we're going to
call it hope. As you you are home. There is
31:51 - no way by home, no way like home. So it's
going to inherit from the view. Alright, let's
32:04 - go on. So Zadar creates a sorry, He now gets
is going to just handle get into taking itself
32:13 - taking requests, and taking some arcs and
quarks, right. Then, when, when I get requests
32:30 - made to this view here you want to retain
Aranda. Okay, once you return a Render, Render
32:42 - has to return requests first, then the templates
that we are sending back so inside when you
32:51 - check the template folder, from the static
file, a starter file that you cloned, you're
32:57 - going to see this index dot HTML file here.
That is our homepage. Alright. So HTML, so
33:03 - I was excited to hear mistakes index dot HTML.
Alright. So this is our simple homepage, right?
33:19 - So let's, what do I want us to do? Let's add
it to our urls.pi file. So that we'll be able
33:27 - to preview it, not this year, the PI file
is closed. And let's open the URL is a py
33:38 - file inside the core. The core was it in the
core folder or the core directory. Alright.
33:47 - So path, we're going to pass in path. And
we're going to give it the root directory.
33:57 - And we're going to use the home dots as you
because it's a class b Sorry, it's supposed
34:06 - to be a capital H. From the US view alright,
I this so let's import in home from views
34:31 - from the views. Import home. Alright. So save
it up. And now let's start our server and
34:49 - see the errors I have made. By third. Monday's
the poi rants Okay Oh It seems you have started
34:58 - making mistakes already so inside the model
the Pew if I made a mistake somewhere on line
35:17 - 25 Instead of charcoal I said shot shot what
is wrong with this boy I'm sure you guys got
35:27 - that already so let's save it and wait for
this server to restart for us our error again
35:38 - what's wrong with it here in Hawaii Keith
Otto change related what's going on what's
35:55 - going on okay costume User Model okay so I
know why this is begin to fuck up so inside
36:13 - because you're using the abstract is I supposed
to provide it inside provide a custom inside
36:19 - inside the settings that URLs far right so
when you go down go to the bottom part so
36:32 - let me add some few comments or settings I
know you know I can't spell so you're going
36:45 - to add an OT EUSA model and this is going
to be a reference to core dots Costco costume
37:01 - costume is right like this and said hard not
has no effects. So sorry guys. I always made
37:11 - this mistake so let's take out this now it
can just be blank but knowledge needed for
37:17 - many to many field Okay, so save it's then
come here and save this one too. Let's go
37:40 - down and see what is going whether you are
still alive who who I am getting some errors
37:49 - having said before, what is the what is this?
Okay, so I think I know where there is a one
38:03 - way road. So let me clear the terminal phase.
And first, let me make some migration Python
38:10 - manage py make migrations. If I get an error,
I'm going back to school. So Python managed
38:31 - py migrate. I think this is what's going to
solve our problem Okay, now let's run our
38:49 - server again Python managed or py runs server.
Server. I was confused that I ran an NPM script
39:05 - that vitae UI. Okay, so you can see our problems
are solved. Okay, so now let's go and see
39:13 - whether the view created is working. And you
open a new tab over here. So localhost you
39:21 - can see I am a level of view. So port 888
is already open. So let's see GT 1000. Let's
39:36 - open it up. Let's see what happened. Ki n
vi, we have a disaster. So you have the templates
39:46 - by you can see the styling is not coming through
and the images to or not coming through. So
39:51 - we have a horrible one over here. Okay, so,
before we do that, let's let's, let's make
39:58 - some changes. So you can see inside a folder,
the terminal down here, it's making some GET
40:04 - request to some asset files. It is not having
access to it. Okay. And I know what with our
40:12 - Eric, I see it made a request to get estado
CSS, which does not exist at where the directory
40:22 - died looking for its ads. So let's solve that
issue. So, inside that was the name the the
40:36 - templates directory, I went to create a new
file, I went to quality base dot HTML. Alright.
40:44 - Let me change this then. Okay, no worries.
Alright, then you can change this then let's,
41:03 - let's make some small changes over here. So
you can change this to Netflix. And you're
41:11 - going to add a block over here I want to call
a title. Okay, so let's put some data over
41:30 - here. Alright, then, the next thing that we
need to add is our, our CSS. So link going
41:44 - to our CSS. So our CSS is inside the static
was in a static directory over here. So we
41:52 - have to find a way of bringing our static
files here and seven, eight. Okay, so first,
41:57 - you're going to load in your root, our static
okay. Alright, so let's use our static over
42:07 - here. Alright, so this is our static and so
now you'll be able to have access to our style,
42:19 - the CSS, which is inside the static directory.
Alright. Then the next thing that we need
42:25 - is what do we need again? Okay, so we are
going to have another block called orders.
42:33 - So that's if there are any order lines that
are particular to the page you're visiting,
42:38 - it will be rendered over here. Alright. Okay,
I think that's make sense. Then the next thing
42:45 - that we need is we need what do we need? What
do we need? Okay? So create another block
42:59 - called Content. Content, that is where our
call our content are going to go. Alright.
43:10 - So this is it. I hope this makes sense. Alright.
Okay. So now that we have our base, HTML done,
43:21 - it's, it's good. Let's say what do we need,
we don't need anything again. So now let's
43:29 - open our index dot HTML file. And we're going
to make some small changes to it so that it's
43:35 - be able to use this basic HTML file we have
used and the URL and be able to utilize our
43:43 - style dot CSS. Alright, so I'm going to clear
this path. Clear the top part here. And first,
44:00 - you're going to extend extends this dot HTML.
Alright. Then the next thing that we need
44:07 - to add is we want to load in our static should
I be able to use it okay. Alright, so this
44:22 - is the title. So let's add our title to it.
Okay, so another block is called a block the
44:31 - block a score title, so we can call this a
passing in home. So to show Netflix dash home,
44:44 - okay, so we can take of this. So, the other
link that I was talking about is this particular
44:52 - link here. This link is to some icon directory.
It's from Alcon ionic On icons, I don't know
45:01 - how to pronounce it, but it's not all their
pages that are using it. So we are going to
45:05 - use a block to render a four, deuce page damnit,
it's okay. So we are going to store it inside
45:13 - that for this or this block we're going to
move this tent up alright. And you're going
45:26 - to move this whole thing here. This move this
whole thing, this class here, carrots and
45:34 - bring it to this one over here the base dot
HTML file let's save it then go back then
45:53 - we can take off this word is to tax and please
the whole contents of the whole contents of
46:07 - the file or Yeah, of the file inside the contents
contents block All right, so let me copy,
46:23 - move the whole path down Go 
Go Go Go Go down. Go down go down. My laptop
46:40 - is a little bit slow. So please forgive me
guys. Stay attached now. Okay, so we can end
46:54 - here. So I the footer part and let's move
it up. Okay, so when you're done, we can clear
47:02 - this thing off these two ones these two tasks.
Okay, so let's save it. And now let's go back
47:10 - and when refresh and see what is going to
work we have any errors. Okay, so you can
47:18 - see you have Netflix homes. I see that home
is now popping up. Alright, so you can see
47:29 - you have Mr. stylin back again. With our stylists,
what can they gain but we have a problem.
47:39 - The problem is that our images are not showing
they're supposed to be an image here than
47:43 - an image here. But they are not showing I
don't know why. But I know why. Because we
47:51 - are referencing them directly from the folder
and they are not there. So you have to find
47:58 - a way of loading them from our static okay.
So when you screw up the images file, you're
48:05 - going to start from this place this year the
static so let's take all the assets here.
48:14 - Then they're all inside a static file so static
this alright then go down click on this parts
48:30 - sorry then let's copy this spots make it static
alright so the I seem there are two or three
49:00 - more down there let's do that quickly. So
when you scroll down this there's this one
49:08 - there's another one there's another one down
there too. So let's take on just take over
49:13 - the static and fun day and if you're using
VS code it makes it even easier okay just
49:24 - highlight this year and type static to this
disease makes it very simple COVID A static
49:41 - assets again alright, this liquid loves what
I guess the kidspot Yes, this one The last
50:04 - part was the name static, what they do Okay,
so let's save it now let's well let's refresh
50:24 - and see what is going to work okay, let's
give it a few seconds so what happened is
50:36 - okay, so you can see our images are now in
you see we have our face but almost done.
50:44 - The face is almost done guys if you are new
to the channel please subscribe to the channel
50:49 - if you are if you are new if you are old please
like the video share with your friends coming
50:55 - to the session in the comment section below
is really going to help me Okay, explain so
51:00 - for three out right Okay, so this is it. So
you can see our images are now coming in,
51:10 - we have our homepage of Netflix, dawn on it.
So let's jump let's let's go on. So when you
51:18 - look inside when you go to all the templates
that you see that you'll be using the nav
51:23 - bar almost in order in order this one in all
the templates so it's it's makes sense that
51:32 - we made this a pashya then we import it in
all we include it in all of our files. Okay,
51:40 - so let me cut this part off. And inside the
templates here, we are going to create a new
51:47 - directory called partials. And inside the
partials directory are going to create a new
52:00 - file called Nava dot HTML. And inside it's
the navbar that I copied or I caught I would
52:12 - paste over here. No changes directs the same
thing. The only thing that we need to do is
52:19 - we have to load in static Alright, that will
be able to have access to it. So static is
52:25 - loaded for each and individual templates.
Alright, so each templates handles its own
52:31 - static So load let's save it then let's close
it. You can come back and make some changes
52:50 - later on. Okay, so now let's include it over
here 
53:00 - let's include it I went to include Pasha house
slash Naga. Sorry Nava dot HTML. Alright.
53:11 - This, this the some space so it stops. Okay.
Now let's go back and refresh and see whether
53:26 - there are any changes. So this is the original
one without us copying anything now we should
53:36 - refresh. Same thing, no different weights
less weight a little bit. The same thing,
53:47 - no difference. No changes. Okay. All right.
Hope you guys are following. Okay, so the
53:54 - next thing that I want us to do is, let's
talk about the authentication part of things.
53:58 - Okay, the authentication. So, in this video,
we are going to use all mighty all or so Django.
54:07 - We are going to Django all auth to handle
our authentication if you don't know what
54:11 - all is this is all OT. So all OT is an authentication
package that makes authentication in Django,
54:19 - very simple and very, like the standard it's,
it's, it meets the standards of authentication,
54:28 - okay. So it gives you access to social authentication
and normal authentication to as well. So you
54:36 - just pip install Django or OT, or this is
the documentation. I'm going to link leave
54:42 - the link inside the description below. Okay.
All right, guys. So please do a pip install
54:49 - of Django or if you have not done it. I've
already done that. So I'm not going to go
54:57 - through that step again. And now we're going
to To add some changes to the template file,
55:03 - they need you to have this Django templates,
contest processor dot A dot request. It's
55:11 - already inside ours already. So if you scroll
up this is it. Maybe I've made some changes
55:21 - to it, so, but it's needed. So it's already
there. It was provided by the Django does
55:29 - admin generator. Alright. And then so now
we need so this thing, this thing over here.
55:36 - So let's copy this over here. Copy this, go
back. This hire live my life. Okay. So, if
55:47 - you read the comments, I want to know what
each what each individual import does, alright,
56:06 - pick up this one too. Alright. Then the next
thing that we need to do is sorry. We need
56:17 - to add or the name inside our static files,
you need to add these two things, these are
56:26 - essential and the down one based on the social
or today you want to use. Alright. Let me
56:34 - close. Let me let me minimize this one down
here. Okay. So let's scroll up. Scroll up.
56:50 - Let's go to installed apps installed up. So
we'll leave a comment here. Okay, third party.
57:01 - Party apps. Going Live, it's down here. Oh,
it's didn't copy. Sorry, guys. Let's go and
57:12 - copy the copy, go back. Paste it again. Alright,
so now you have added it. It seems it left
57:29 - with some one or two stuff and you're done
with it. So you need to add a site ID equals
57:36 - to one. And inside that you are the Pew IFA,
you add this one. Right, this part. Alright,
57:44 - so I'm going to copy down a path. And we just
go and type in the site's ID into it. So sites
58:02 - underscore id go to one. And when you go into
you go into that root URL, the Pew IFA. are
58:14 - going to add the URL file, the path that I
copied, okay. My face, I need to either come
58:27 - over here before, then we'll save that. And
let's go back to our settings or py file again.
58:39 - Alright, so you're going to make some changes
to us our authentication, so all odds provide
58:50 - us with some, some configuration that we can
make to make authentication so simple and
58:58 - lovely. Things are making the source for all
odds. Right? So the first thing I'm going
59:04 - to add is the authentication method. So the
authentication method allows us to choose
59:12 - which way are you Sasha logging in? They should
log in with their email, or they should log
59:20 - in with their username or either username
or email. Right. So So accounts authentication
59:28 - methought and in this our app, or in this
project, you're going to use email I don't
59:39 - think was the name Netflix's ever waited for
them to log in. So you just want to be sorry,
59:46 - supposed to be an email. Not email, email.
All right. All right. So then so now we need
59:58 - to do is Then you want to make email? a required
field. So email accounts, email accounts email
60:08 - required. Required required what? How do you
spell it? Okay. Required, we're going to set
60:24 - it through. So you guys, the Python tool,
not the other programming language to write.
60:39 - Then you're going to set accounts, authentication
accounts, email verification, sorry, account
60:47 - email verification once set it to non string
on, not Python, okay, and the last two things
61:04 - that we need to add is account. User Name
required. So that is going to, though all
61:20 - auto added to require username when a new
besides registration or not anyone to set
61:26 - it to fall because we don't want users to
pass in email their usernames when they are
61:34 - registering. Alright, then the last thing
that I want us to do is now related to all
61:39 - Autobots, it's related to Django itself which
is the login sorry login with the log a new
61:55 - redirect URL that went to pay me to slash
for the meantime Alright, OCR is goes to sentences
62:12 - in profile accounts for something like that.
But I want to put you to slash Alright, so
62:20 - with this done, let's see what our service
to our life okay, let me scroll down and see
62:29 - what these other disaster Yeah. Okay, okay.
Okay. So it's saying that you need Okay, so
62:36 - when you look at the Earth's documentation
down here, it's asking for this required this
62:47 - 10 year so the two already has been added
to our install our by the Django crate up
62:52 - by we need to add this sites, whatever the
contract sites, right, so scroll up. Let's
63:04 - add it was added to it and save it. Let's
see what ACR server is restarting again. Let's
63:11 - see where it's going to work. Okay, so you
can see it's working but we have some migration
63:15 - that we need to make as soon as possible.
So let's add our server clear the terminal
63:24 - by manage the poi migrate Okay, so it's going
to migrate quickly then we continue with our
63:36 - lifestyle a few seconds more so now less on
our survey pui pui around server sorry okay
63:59 - guys. Alright, so now that we have your data
in this so let's refresh Sorry, sorry let's
64:18 - refresh Okay, so now let's go to our login
path. You can see you have no even added any
64:27 - routes but you can go to our login you have
a fully login place which you can log in log
64:33 - out and all that stuff so account slash login.
Let's click there. So you can see we have
64:40 - a login here you can go to sign up you can
go to I saw some Forgot Password certain way.
64:49 - Like it is good to sign in a kid. You can
go to sign in Forgot Password, and you can
64:58 - reset. See to all gives us all these functionalities
baked in. Okay, so the first thing I want
65:06 - to do is first you want to change this sign
in and sign up was how do I put templates
65:15 - or how it looks to Cody and you can let our
users uses. Okay? So first thing, we're going
65:22 - to override these templates, the templates
for the sign in and sign up. Alright. Okay,
65:28 - so what are we going to do, they're going
to vary the temperature. Okay, so to provide
65:34 - all US templates, the first thing that you
have to do is that inside your templates directory,
65:41 - you're going to create a new folder. Sorry,
not a new file, my bad a new folder or a new
65:56 - directory and quality account. And he said
accounts if you want to overwrite template
66:04 - templates for logging, I want to create a
new template and call it login. If you want
66:08 - to override the template for sign up, you're
going to create a new template and call it
66:12 - sign up. So for us we are going to move this
our templates login into this directory over
66:21 - here. Alright, so now let's go back again.
So as far as this was the login page, but
66:29 - I'm going to get a quite a while but still,
it's it's what the explanation so so now you
66:34 - can see we have a new login and this is it
using my because yeah, but ya know, you see
66:41 - what they, they base the HTML, that's why
it's not looking beautiful at all. Okay, so
66:48 - let's make it beautiful. Let's make it beautiful.
So let me close this terminal open the the
66:57 - templates up and let's make some changes to
it. Alright. Okay guys, so we are going to
67:05 - make some changes to our our templates so
just like we did for the home view you're
67:11 - going to clear the spots let's clear this
one off or waiver us so first you're going
67:20 - to extend extend this path and with this you're
going to go back one directory then go into
67:32 - get the base dot HTML file because base your
HTML files not directly inside the accounts
67:38 - for us we are going back there I can have
access to ACA The next thing you're going
67:43 - to have is the block the block title by Dale
in here is going to be login so we can clear
68:02 - off this one here is two tents over here we're
going to have another block code or this Okay,
68:23 - let's move this script up into the block like
this. Okay, so we're going to do is you're
68:30 - going to surround the main content or the
the content inside the body tag in a block
68:38 - content block content tag okay. So content
so content or what am I spelling alright if
68:51 - you can't hire me at that place, please contact
me oh guys. Well let's place is a very it's
69:14 - what did I fries, I really enjoy the application.
Okay, so this is it. So let's go back and
69:25 - refresh and see whether you're going to have
some something. So let's refresh. I hope we
69:34 - don't get any error. Give it a few seconds,
a few seconds. Okay, so you can see you have
69:45 - some pain going on. First, our logo is not
coming in and we are supposed to have some
69:52 - background image. It's also coming in. So
let's go and fix that. So I told you that
69:56 - we are going to use our navbar So we can include
it also here. So let's take our to this now
70:03 - back, then let's include it include it's going
to go backwards, then go into our past years,
70:19 - slash navbar dot HTML. No, it's this. Okay,
so the next thing I need is this thing here.
70:35 - The background image, let's change this to
reference from our static so this copy of
70:45 - static like this. Alright, so it seemed us
or our you need is our law, we need all we
70:54 - need. Let's refresh it again, and see whether
you get an error, I knew you're going to get
71:03 - an error because you didn't load in our static.
Let's go back. So let's load in static Okay,
71:14 - with that done, let's go back and refresh
the flesh. Okay, since we didn't get any error
71:29 - again in ways it's Fula, you can see our was
in it. And now it's showing here, and our
71:47 - background imagery showing the beautiful beautiful.
As you can see, I did a good work with the
71:56 - stylet. Okay, guys. So one thing that you
have to take into consideration is that the
72:05 - names here should match the name and idea
for the individual inputs should match the
72:12 - one which would have been provided for you
if you're using the original templates provided
72:17 - by was in all odds. Okay, so here, we need
to make here login. So the name is supposed
72:32 - to be sorry. It's supposed to be a was login
and ID login. Okay. Sorry, I should have done
72:47 - this earlier on. Okay, let's see, what's the
lesson that I want us to check is this where
72:55 - we are going to render our error messages
if there's any errors with the email in which
73:05 - the authentication credential has been provided,
okay. Okay, guys, so for us to be able to
73:14 - enter the arrows here. I'm going to paste
in some code shortly. So this is it. So let's
73:22 - just take out this static static error that
I provided just to so I stopped with a styling.
73:30 - Okay, so I think the code I pasted was from
here to here. Okay. So let's, so this is going
73:41 - to check if the form has arrows. If it has
an arrow, it's going to create this div, and
73:45 - it is going to render their forms dots, non
filled arrows. Okay. This is it. Alright.
73:53 - So, the next thing that I want us to do is
let's say a person is on the homepage, or
73:57 - let's say is watching a particular movie and
want to go to the login, I want us to the
74:03 - user to be redirected back to the please are
they where they logged in from? Okay. The
74:10 - loading forms, they are going to add in some
snippet of code to us Whoa, inside the form.
74:18 - Let me pull it over here below this. So I
have it already copied to my clipboard. So
74:27 - this is it. I think that's it. paste it over
here. This is this. Okay. So let me scoot
74:40 - over here. elektrobit, soy, KC composites
and enter in Destin, so it redirects the person
74:44 - back to where they clicked the logged in from
alright. So civets. Let's go back and test
74:53 - it again. Alright, so let's try. Let's try
logging in. So let me see my favorites, you
75:16 - know? Okay, so we can see nothing happen,
it is because of something that I know about.
75:35 - I'm guilty about it. So inside the form on
the form tag, you're supposed to specify which
75:41 - method that we want to use. So at the meantime
it is using get, which is not the right way.
75:50 - So it's supposed to be the method is supposed
to be set to post. Right? So let's go back
76:00 - and refresh again. Let's click on this then
from there, refresh. And I know you're going
76:10 - to get that error. So let me not because make
that error phase. So inside Django for us
76:16 - to submit a form is supposed to have a CSRF
token, okay, for security reasons. So we are
76:23 - going to add a CSRF token to it. We are going
to get an error. Let me refresh again. Alright.
76:34 - So admin. And the super strong password admin.
Let's post let's let's log in and see what
76:49 - is going to happen what is going on what is
going on? You can see, now we have an error.
77:03 - This is a dynamic error that is coming in
from the back end says the email or password
77:07 - he specified is not correct. Okay, so something
is going on over there. So the next thing
77:14 - let's go and work on the sign up as well to
kind of sign up. So the first thing that I
77:18 - want us to change is basically before we go
and continue that, I want us to route this
77:29 - link to the signup page. Okay, so let's add
a URL here. So as a URL, URL and is going
77:41 - to go to sign up, sign up. This L sign up
we will be serious. Okay. This is it. This
77:58 - is it. Now let's go back and refresh. Let's
refresh it again. It saying it does not exist.
78:09 - What is this? Okay, let's go back. Let's go
back. Sign up. Excuse me. Okay, guys, so it's
78:25 - apparently supposed to be account underscore
sign up. Right? There it's okay, so no errors,
78:40 - errors, no errors, no errors, images also
coming in so you can see when you open it
78:47 - and I send into account slash, whatever, whatever.
So let's click on let's see what I see we
78:53 - are now on our sign up. Now. Let's go back
on the signup templates in Alright, so inside
78:59 - this the same thing that we did for the login,
they're supposed to have a file that is called
79:03 - sign up inside this account file over here.
So they've been a wonderful person and the
79:10 - official Django Papa, I am moving this for
that I further provided for inside this data
79:17 - file inside this account folder. Alright so
now let's go refresh it and see whether I
79:26 - want to get take note of what you're seeing
here is going to be different because mine
79:32 - is also going to be cloudy. Okay, so I see
my into my hustle logo and other stuff over
79:38 - here. So let's, let's go and make some changes
to it so that he uses the base your HTML file
79:44 - and that assets fast. Alright. So let's take
out the spots Let's stand This so you have
80:02 - to move back that are actually based HTML
then the next thing is less load in our static
80:17 - before we make any error is not as big as
the Lord yes God wants to play it's my brain
80:33 - Okay the next thing we need is the block the
title and the title is going to be oh shit
80:49 - nada Okay, going to be not saying sign up
sign up right day the next thing I need is
81:03 - another block that is going to be called block
on block or this let's move this into it as
81:18 - they call this parts 
what are we going to call it we've got the
81:33 - price blockquote there let's move over this
thing insert like this allistic of this to
82:01 - here. Alright, so the next thing that we need
to add as the background is bigger than the
82:08 - stick of this assets areas for reference this
fall was static Alright, the next thing that
82:21 - we need to add as I want us to change this
redirect CSI sends us to the sign at the login
82:34 - page. Okay, you're under sign up so you have
to go back to the login. So you are to go
82:44 - to Accounts underscore login save it now let's
go back and refresh Okay, so can see have
83:10 - something now you have something here. Okay,
but now it's no less important. Sorry, I forgot
83:18 - about that. Let's take all this then and included
include our navbar from the partial include
83:27 - partials. So supposed to be a string first
you have to move back partials slash nav bar
83:49 - dot HTML save it go back refresh wait for
a few seconds a few seconds what that is it's
84:10 - so our sign up page also can be very fully
Beautiful, beautiful. Or so one or two changes
84:19 - then we are almost done at this place. So
just as the other one here is the names and
84:25 - this one should be the same. So here is supposed
to be password one the name suppose the password
84:33 - one ID password one, something like that.
Yes, I think this is to do the right one.
84:43 - And you also want to Renda was the name our
our arrows, okay, arrows, instead of having
84:57 - a statically typed over here. whereas it,
this is it and we take it out and the code
85:08 - that I pasted in from the previous code, I'm
going to paste it again. Same thing so you
85:20 - can pause it and type it in. Okay. All right.
Then the final thing is the redirect the redirect
85:31 - and then alright. The Okay, let's put it let's
put it here. Let me get it for my PC over
85:48 - here. Scoot over here. You can see scroll
scroll. Righty righty. So I think that is
85:59 - all that is that I wanted as far as that is
concerned. All right. So and the last thing
86:10 - the last bit obviously the last thing let's
add our CSRF token using a form so CSRF token
86:22 - let's change this method from get to post
to method is going to be post alright so now
86:36 - let's refresh Alright, so you can see this
beautiful Tenova so let's try log in and see
86:53 - where they are going to get any errors. So
that is my second favorite password in though
87:06 - let's click on log in they're going to be
errors a few seconds small and wonderfully
87:22 - we didn't get any errors okay, because you're
not supposed to be rendering this error server
87:28 - here because this is the signup form it's
not giving us was the name the non fraud errors
87:36 - it is giving us a field errors Okay, so you
have to use those ones okay. So instead of
87:43 - using this one over here, let's take out or
this one today sorry about that guys. Use
87:49 - this one instead. Let me push this thing backwards
a little or some you will Alright, it is the
87:56 - arrow they are going to use so let's refresh
the illustrate again I'm using a very short
88:13 - sponsor sir we get an arrow to test whether
their functionality is working okay, so you
88:22 - can see now that there is a camiseta password
is very is too short, it must contain whatever
88:42 - whatever. So yes, you can see it's working
so let's create a pass let's create a new
88:50 - account let's use a better password so let's
see tests 1234 super strong password test
88:58 - 1234 Key Let's load a sign up and see whether
it's gonna work can't see the password to
89:15 - is very common. So which was what I was going
to say again? Okay, let's let's cisgendered
89:21 - up I'm going to use color cast as my password
though I don't think it's going to camo kill
89:30 - artists. And it's also above it's Kyla test.
Let's log in and see a sign up and she's gonna
89:41 - work. Okay, so you can see we are successfully
signed up. Then you have also been redirected
89:47 - to our what's the name? The login homepage,
alright. Okay, so you can see there's it So
90:00 - let's go back. And inside our navbar dot HTML
file, I want us to do some quick changes,
90:07 - some PHP code changes, alright. So you're
going to add another button. But we want to
90:18 - show sign in if the person is not logged in
and sign out if the person is already logged
90:24 - in. So if request.user.is authenticated and
not made out over here with an error so the.is
90:50 - supposed to be just simple. That is authenticated,
they want to show this one over here 
91:10 - or else you want to show another one that
is similar to this one by one to log out,
91:28 - so sign out instead that change it, logout.
So if a user is logged in, we want to show
91:39 - logout. That's the other way around. So let's
move this one down Alright, so now let's refresh
91:58 - and see whether it's gonna work. So you can
see because you have signed in, sign up and
92:09 - sign us in, that's why you're seeing the logged
in. Okay, so let's work on the Logout functionality
92:15 - quickly. Okay, okay, so for us to handle the
logout, you have to send a push your cache
92:24 - to the back end, which is going to handle
that for us to make a post request, we also
92:31 - need a form. Even though all AWS provides
a way of signing out on a get request, which
92:39 - will just make a request to the endpoints
and to send a person out, it is not advisable
92:45 - to sign out a user using a get request. You
can find more about it inside Django documentation.
92:53 - Okay, so get request is not made to make changes
on a resource on the server. But a post request
93:03 - is supposed to do that. So it's more advisable
to use a post request. So first, you're going
93:07 - to create a form over here. For me the method
of post the action is going to be handled
93:17 - by self Okay, so I'm going to have your posts
and you're going to move this button inside
93:35 - it okay now we're going to change the type
Okay, the type is already solved mistoria
93:51 - by the type. So they're going to change the
action, the action, the action, good action.
94:01 - And I want to pass it the URL to account account
underscore logout. Okay. So, guys, you need
94:24 - to change this. Make it small. Sorry, sorry,
sorry, sorry about this. This way. Alright.
94:32 - Make sense? Then need to provide a CSRF token
because you're using a formos jiankou Cry
94:43 - CSRF token. I think that is it. Let's save
it. Then go back. Let's refresh it. See whether
95:00 - we're going to have any arrows. Okay? So let's
log out what's happened? You see we are logged
95:26 - out. So we can sign in again. Alright, so
the Logout functionality is working. So guys,
95:34 - you're almost done with the authentication
part of this project. Let's click OK. So let's
95:39 - make this thing go to the world in the sign
up page, which is it makes more sense. So
95:49 - down here, the button that goes to we're going
to wrap it with an h ref dot points two points
96:06 - to the URL of the login is going to be account
underscore login Okay, so let's move this
96:22 - whole PWA towards, let's say, let's go back
then refresh, refreshing. Okay, so give it
96:39 - a few seconds. My computer doesn't blows up.
Guess click on it. Let's see where it says
96:49 - us. And voila sends us to login. So we can
log in and see whether it's going to work.
97:01 - The account that I recreated was was the name
B b.com. And the password was killer test.
97:14 - Let's see whether I wanted to get logged in.
Okay, so it seems we have logged in, you're
97:25 - able to log in successfully. No errors now.
Okay, so you can see our logout button over
97:33 - there. Okay, for some reason, since my was
the fonts are not working, because there's
97:43 - not a font I used let me fix that in them
check why that's okay, guys. So I think I
97:52 - know why that why the fonts are no working.
I know looking grades. So inside the base
97:58 - dot HTML file. By its without guy, this guy.
You need to add one class today to this thing
98:09 - here. Add font and a score. A font does primary.
The primary Yes, fonts, just font that's primary.
98:24 - And also below the block here. Add in the
scripts. This small JavaScript. I don't want
98:30 - to scare anyone. So this module received you're
going to need it later. Okay, so just put
98:42 - it in for the meantime. Okay, let's save it.
Let's go back and refresh and see whether
98:48 - it's going to look a little bit nicer and
close out there. All that flex on page okay,
98:59 - I have a weird What's this? Okay, so now that's
loaded in the fonts and it looks more beautiful.
99:15 - Beautiful, beautiful. Nice one. Nice one.
Okay. So the next thing I want to do work
99:23 - on as the profile page, or yes, the, the,
the view that is going to show us our profiles.
99:32 - Alright. So let's go back to Visual Studio
code. Okay, guys, so let's jump into the views
99:40 - and right. The view for our was their profile
page. Okay, so we can close this base html
99:48 - index dot HTML to kind of go sign up and log
log into Congo down Sign up Okay, so now let's
100:17 - go back to our views py file so, I'm going
to create another view so we're going to call
100:37 - this class class, the class profile list with
us where we are going to list our profiles.
100:47 - So it's going to say heritage heritage view
Sorry, sorry guys, then the next thing we
101:03 - need to get is the the Deaf gets defined our
gets method. So self with digging, so for
101:13 - quests, arcs, and quarks. Then the next thing
I want to get is the profiles. So profiles,
101:37 - the profiles of that our our current user,
okay, ie serratus, assessing the, the current
101:47 - the profile page so so you're going to get
it from the request dot user dot profiles
101:57 - that is the folder we just added to our custom
user then because it since it's a many to
102:02 - many field, we can call that dot all on its
we get all the fields, or the A profiles and
102:09 - you're going to return render render of our
requests and was the name their templates
102:29 - name is going to be profile less dot HTML.
So when you check the templates, which you
102:38 - cloned, you see a profile as it's okay, now
we're going to pass some contexts arguments
102:46 - along so, we are going to pass a contest called
profiles. So profiles are my What am I spell
102:55 - if you can spell profiles, okay. I wish it
was JavaScript where you just type profiles
103:03 - that are going to do the magic for you. So,
yeah, referencing this profile, okay. So,
103:10 - this is it, this is the view that is going
to give us our profile list. But the problem
103:15 - is that if a person that is no sign in try
to assess this this endpoint or this view,
103:24 - we are going to get an error because that
person is going to be an anonymous user. And
103:28 - anonymous user instance does not have this
profile instance on its profiles instance
103:34 - or the post profile photos on it sorry guys,
okay. So we have to protect this routes. So
103:42 - we have to make it open to only sign in users
are logged in users okay. So from Django sorry,
103:56 - supposed to be Django Django dot contrib contrib
dot decorators want to import the login required?
104:20 - So with the login required decorator alright.
Okay, so since you are using a class based
104:30 - view, we can't directly decorate this this
view. So, we are going to use the method created
104:40 - to this to decorate the dispatch. The dispatch
method, okay. So I'm going to pull down to
104:52 - from Django dot contrib a dot util sorry.
utils dot decorators imports method okay with
105:09 - a decorator like this 
105:28 - I essentially want to decrease the dispatch
are going to place a decorator here so the
105:36 - art symbol you're going to use method the
Creator right and the creator is the login
105:51 - the Creator login required decorator and the
name of the method I want to create is the
106:04 - dispatch sheet so the service now we should
provide a path or route for this view so let's
106:18 - go to our urls.py file inside the core directory
then let's import profile list they go to
106:35 - patch and they are going to provide it this
sorry profile oh what's wrong? Okay. Then
107:03 - I'm going to provide a profile less dots as
you Okay, hope you guys are following then
107:20 - the name they're going to give us too far
and our score list Okay, so see every day
107:31 - I leave right I guess so there's no arrow
or there's an arrow for this there's no highlighted
107:39 - and that is a vital alive key the server is
still alive let's go to the endpoint and see
107:47 - whether it's going to work slash profile and
you can see we are logged in okay slash profile
108:07 - and you can see we have some 10 bucks it's
not looking great so let's let's work on that
108:17 - template quickly. So let's go to profile list
profile list no one is going to very simple
108:28 - quick quick quick quick. Since you have seen
it already it is going to extend 
108:40 - be stored HTML or another block a block title
once a goddess prefer a stick of this one
109:06 - see goddess block content smooth this whole
thing go down go down there's no discretion
109:31 - move this thing up. Okay, let's take these
two then let's take our this nav bar and include
109:52 - include the one form partials slash nav By
now go to HTML. Okay, save it. Then let's
110:07 - go back and refresh. See what happens. Okay,
okay, so you can see you have something going
110:17 - on over here. Something going on. Beautiful,
beautiful, beautiful. Alright. So this once
110:25 - this there's a static depth, I want to take
those loose ones off and are going to look
110:31 - over the ones that we are going to break.
Okay? Let's stick is this just going to live
110:44 - just one okay this one alright, thank you
I went to run a for loop okay. So for for
111:02 - profile 
in profiles this 
111:19 - okay write this and you want to make this
10 on each on a tag. Okay, so now we'll be
111:36 - able to, for the meantime, I want to make
it a hash for the meantime. Okay. So when
111:43 - you click on the diff, it's going to send
us to is going to allow us to use that particular
111:52 - profile. Okay. Right. So I want you to add
in this template or this small HTML inside
111:59 - this div. Yeah. This thing over here, so we
get the profile name, then it slides itself,
112:07 - we just have just one letter, and below a
to replace the was the name. The profile name,
112:17 - the profile name. So we have like if it's
the profile name is altered, they are going
112:22 - to have a capital or a big one and below 80
are going to have a trade there below it.
112:27 - Okay, so let's add this few plus flex Fluss
dash call. That's going to be with Flex column
112:36 - and justify the center align center right
center, right this right? And save it. Let's
112:59 - go back again. Let's refresh what you're going
to see you want to like it? Because there
113:06 - won't be anything over here. Okay, yes, because
our user doesn't have any profile yet. That's
113:11 - why it's not showing anything currently. Alright.
So let's go back. So we are going to log out
113:22 - over here and see what's going to happen whether
you're going to see this page or it's going
113:25 - to pick out from this page she's picked us
back to the login page, or T. Okay, that's
113:37 - nice. So let's try since you are logged us,
let's try going to the profile profile page
113:46 - again. profile like this should I go into
the route again. And because we need to log
113:57 - in before we need to be logged in or the name
to be logged in before you have access to
114:06 - that page or the view. It has brought us to
the login page. Okay, so let's log in and
114:11 - see whether we can go there now be okay, this
person, killer, killer test voila, we are
114:34 - redirected to our page our homepage alright.
So the next thing I want to hit on is creating
114:46 - a new profile so that if a user comes in has
no profile that him or her can go to the profile
114:55 - page. Okay. But before we do that, I want
us to Add some changes to the view. So, to
115:03 - the home view, so if a user is logged in already,
you want that person not to see the index
115:09 - page, but whenever he tries to access the
home pages, you send him to the profile page.
115:14 - Okay? Now it makes more sense because what
is already on the homepage is not is not something
115:22 - that's should be shown to someone that is
already logged in. Alright. So if request,
115:30 - the user is authenticated. Thank you I supposed
to request not request then you're going to
115:51 - return a redirect. Okay, so I'm going to click
on it. She's going to auto import redirects,
116:02 - redirects for me, okay. So you have to add
it to your imports. Okay, so you want to be
116:13 - redirected to call hyphen is no hyphens semi
colon trufa Refer underscore list. Okay, so
116:27 - this year I'm using reverse reverse URL. Okay,
so let's save it and since you are logged
116:40 - in user let's try accessing the homepage as
to accessing the homepage which is less fees
116:50 - Okay, since you have some crazy errors down
what's what's wrong? Oh, sorry, it's supposed
117:10 - to be 1000 So you guys got stats. Let's try
refreshing. Since you are logged in see it
117:18 - redirects us to the profile page. Beautiful
beautiful beautiful. Alright guys, so let's
117:27 - go and work on the profile creates Okay guys,
so let's create let's work on their profile
117:38 - creates view so let's go down so it's always
going to be class for for grades Okay, is
117:56 - going to inherit from view Okay, so you're
going to have a get method now we're going
118:09 - to take in solve requests they can add some
cracks okay then inside the get request, you
118:35 - want to return a form that form is going to
help us create the profile here. So let's
118:43 - say I want to have let's just leave a comment
form for adding no for creating creating a
118:58 - profile write the lecture 10 render everything
or enough to render the request and retain
119:15 - the the profile creates HTML Alright, so let's
save it there let's go and add it to the URL
119:35 - so first, let's import it in lesson 45 grids
so yeah, supposed to be a capital. Okay. fuckwits
120:02 - like this they are going to use a pack when
to send it to Foofa slash greets slash then
120:19 - you're going to the profile create greet.as
view was set like this you so the name is
120:41 - going to be five grids as you just guessed
Alright, Alrighty, so let's go and test it
120:56 - out let's check let's first check rasa life
our key is to arrive there's been tested out
121:06 - profile slash greets it saw so you can see
we have something over here so you have to
121:16 - get an edit our our was what the code our
templates so templates right where this profile
121:24 - create screw this terminado so first you're
going to do the usual stuff let's pick our
121:38 - distance distance stance base dot HTML then
we need another blog title I'm going to call
122:11 - it live that test proofer greets supposed
to be capita profile as looks nice let's take
122:28 - our this the stocks they call this one two.
Okay. Then I have another block here called
122:40 - block content contents Alright, so let's grab
everything inside 
122:59 - it inside a section, the last section of this
last two talks send it into the block content
123:10 - take out these two. Okay so now we have to
take out this now didn't include our our naff
123:23 - Pasha last year last Naga HTML okay now civets
is going through okay, something is coming
123:48 - through since you're supposed to be an image
behind it. Okay, does my screen look thing
123:57 - that I supposed to look I feel like there's
supposed to be an image behind it. So let's
124:04 - just add an image. This is image as a background
file. Okay. So let's first load static 
124:18 - in the section here, let's add an inline style
that is going to take an aboveground. Now
124:32 - down to its image that is going to be a URL
to static and you're going to use background
124:57 - or go Under gap let me check your static files
so I've done this beforehand my laptop is
125:12 - freaking slow background underscore Netflix
dot jpg lists dot jpg, jpg Okay and here let's
125:34 - add the classes lead at BG dash Koga. Alright,
let's refresh and see how you want to look
125:53 - like alright, this one looks more beautiful.
Nice it's a nice one. Okay, so the next thing
126:05 - you're going to do is you're going to work
on the form on the form that you're going
126:09 - to use to create the the profile okay so inside
our, our core directory, create a new file
126:25 - call from the UI from the poi Alright alright,
so yeah, we're going to import one or two
126:43 - stuff so from Django not Django. What did
I saw Django that forms Oh, this forms import
127:06 - model form alright and we are going to import
our model to the form dot model imports profile
127:24 - that's what you're going to use scores Yeah,
supposed to be dot models Okay, so you're
127:34 - going to create a class called profile for
if I can spell to follow through a file Form
127:52 - which is going to inherit from the models
the model form I guess, then we're going to
128:06 - give it a class meta sorry. Sorry about this
combined thing is supposed to be class meta.
128:20 - And below are going to specify the model with
a transfer method model is going to be equal
128:27 - to the profile model that we just brought
in. Then you are going to specify an exclude
128:36 - Okay, now the folder should be excluded and
the folder we want to exclude is the UU ID
128:45 - field surah the UID is generated dynamically
from the back end alright. Don't worry about
128:53 - that. You don't have to worry about that.
Okay. So now we are done with our the form
128:59 - for creating our profile. So let's import
it in and use it here inside our view Okay,
129:11 - so first let's import it in from was the name
from dot forms import profile form and proof
129:38 - of imports profile form Okay, so now we have
our profile form here. So the next thing I
129:52 - want to do is we want to use our profile form.
So from I'm going to create an instance of
130:01 - form of that profile form. So, profile form
then instantiate it. And I'm going to pass
130:11 - it along a path along inside as a contest
argument, right Alright, I hope it makes sense.
130:33 - Alright. So this is it. This is our formula.
So this one is just the gets Metro so it doesn't
130:40 - make any doesn't make much changes, most of
the functionality is going to be inside the
130:46 - POST method. Okay, so let's save it. And as
we make some changes inside our creates templates.
130:55 - So you're supposed to have two fields, one,
which is going to be a select and the other
131:02 - which is going to be so an input for the input
for is going to take in the name. So here
131:10 - is supposed to be just name, a profile name.
So the name here, you see I've been changing
131:22 - the name and the ID name. So the name here
should correspond to the field name, the name
131:27 - that was given to the phone, and the ID should
be ID underscore the full name, you get it.
131:34 - Alright, so here is going to be ID underscore
name like this, and here is going to be ID
131:42 - underscore age limits. If you check the model
you'll see that that's how they are called
131:45 - age limits, H underscore limits this is going
to be ah underscore limits right this right,
132:14 - this is it's okay, now let's add our method
today to the form which is going to be a post
132:29 - there let's add our CSRF token. Right, this
is it, this is it. Okay, we are going so let's
132:40 - we can close this thing here. Let's close
it down, then the form there let's go back
132:48 - to our view again. So with a get method we
are we are done with it, you don't have anything
132:54 - to do with it. So the next one we're going
to focus on is now the posts method. We're
133:02 - going to have a def post which is going to
take in so requests and acts and quacks. Axiom
133:24 - cracks, then you're going to create the form
instance again, another form instance of the
133:38 - profile, not mine oh sorry. So far form. But
this time around, you're going to take in
133:50 - the request POST request dot post, or none.
This is going to help I'll get to the data
134:06 - that has been posted from the front end here.
So that is going to be stored is that a request
134:11 - dot post or none? All right. That means if
there is nothing inside it, that's what is
134:16 - going to be done right or if there is nothing
like a post, there is no post right. So first
134:24 - I want to check if the form is valid. If the
form is valid form underscore valid. If I
134:36 - spell valid then if it is valid, we want to
watch less first sprint, the sprint form dots,
134:48 - clean data that is going to give us the values
of the form or right from the screen data
134:58 - When you're done, you want to return a render,
as usual. So Django cried today return a render
135:10 - or a redirect, you have to return a response
does what I want to see an empty, you have
135:19 - to return a response. So our response is going
to be a render, you're basically going to
135:26 - do the same thing as this. Let me just copy
it to save some time by this so save it. Let's
135:41 - go back to the form. And let's refresh this
thing. So let's pass it in in Lesbos, ultra
135:59 - def. In the maturity level, want it to be
all, then let's send a post. Okay, so the
136:10 - post has been done, let's go and check inside
our terminal whether the values were so you
136:16 - can see the values came in, this is it. So
the form was valid, and it's printed Declan
136:23 - data, so you can see the name here and the
age limit here as for? Okay, so since we have
136:28 - those values, we can now go ahead and create
a profile now. Okay, so instead of just printing,
136:35 - it's let me just comment, so you have it.
So you can go to Profile. So I'm going to
136:46 - create a new profile instance. Okay. So I
will just auto import it. So you can see that
136:53 - imported up here for me. Okay, so you have
to import it in, if you're not using Visual
136:58 - Studio code. So you don't have to Tao auto
import feature, then you're going to do objects,
137:06 - objects, dots grids. And you are going to
spread the value that you're going to get
137:14 - from the the value that you're going to get
from the clean data. Okay, so let's copy this
137:25 - in here. Let's just start with let's not,
let's not be lazy. So we are going to spread
137:31 - it so because the dictionary used to asterisk
creates so supposed to be theory, this theory.
137:45 - So instead of the so what's the we do not
theory, okay, just to get through. So we're
137:52 - going to spread for four dots clean I need
to go back to some spelling school or something
138:03 - like that, um, does clean data like this,
all right. But you're going to store the provided
138:11 - is going to be created inside a variable called
profile. Okay, so when we have this profile
138:27 - like this, that has been created for us. So
if it's, it's able to successfully create
138:34 - the profile, then we want to watch redirects
the, the ESA to the place where they're going
138:43 - to choose they're going to choose what login
to their profile, okay? So if profiles are
138:50 - checking if their profile was created, and
just not known, if prefer are going to return
139:02 - a redirect so in redirects anonymous organisasi
I suppose redirect them to the place that
139:10 - you watch the movie streets, but because you
have not yet created it, you're going to first
139:15 - redirect them to the profile page, where you
choose your profile okay. So profile. So what
139:29 - was the way I read it in them is call us in
reverse you are also proof profound as for
139:40 - list, okay. So this way I read it in them
too. But one thing that we skipped it was
139:49 - that before somebody will be able to go to
the place where they created a profile that
139:53 - person is supposed to log in. So we are going
to do the same thing as we did for the profile
139:58 - list. We are going to protect our out like
this, else, if a user that has no sign in
140:07 - comes into creates a new profile, there will
be danger. There'll be a big problem. Okay,
140:15 - so now the profile has been created. Now the
profile has been created here any redirection
140:22 - if the profile has been created, but this
profile is created, and it is not associated
140:27 - with any new site. So for us to be able to
associate it with the ESA, we are going to
140:32 - get inside here, before we do the redirects,
you're going to get to the request dot user.
140:41 - Then we check the profiles we get to the profiles
here. Then we add to rate because the men
140:53 - too many filled us at add, okay, we're going
to add def profile to it. Or else it will
141:01 - just be a disclaimer to not be related to
the user. Okay. Editor, it's beautiful. There
141:11 - now you can save it when tested out. Okay,
so it seems everything is fine and preference.
141:23 - So first, let's refresh the decision or key.
So what let's create for Archer def, like
141:37 - this, and the maturity is also that a con
this submits, let's see what's going to happen.
141:48 - Okay, so you see I've been brought to our
homepage, go to the profile place profile
141:58 - page where we can select a profile by since
you have some weird styling. Let's fix that
142:04 - quickly. It looks too ugly. Okay, so where
did he go wrong? So so so so so justify saying
142:25 - that airline Center is a Texan TNC what is
going to happen? I don't know why that's happening.
142:36 - But we'll find out very soon. Okay, so that
was it. So just add a text center. To here
142:50 - then is going to work then look beautiful
now. So at first there were no too far here.
142:55 - But now you can see there's a profile here.
So now let's we are going to work on clicking
143:00 - on the profile and it's sending us to the
to the watch view, okay, where we can select
143:08 - a movie and watch it okay. Okay, guys, so
now you're able to create profiles and now
143:15 - display them here. But we left out to Encinia
we didn't link up the URL that helps us to
143:22 - create the profile to this button here. So
let's do that quickly. So inside a profile
143:28 - list, HTML dot HTML come into this div Yeah,
then let's surround the bottom which I'm Uncle
143:38 - and Uncle frog not as willing to have this
as some space in between it and let's move
143:53 - the button into it this movie then, let's
use our URL so I think it is cool. Dots. Pay
144:14 - column creates a profile create sorry guys.
Profile underscore creates. Okay, so let's
144:27 - save it. Let's go back and refresh. Okay,
so let's refresh. Okay, so now since there's
144:47 - something wrong somewhere, looking so that's
nice that it's working. Okay, okay, so it's
144:53 - working. It's working. It's working perfectly.
So let's go back So you're done with the profile
145:02 - listeria. So now what you want to do is that
when a user comes to this profile list and
145:07 - he or she chooses a profile I should send
them to the page that is going to list all
145:14 - the movie for them to choose the movie in
which rich they want to watch OK, so let's
145:19 - work on that. So that one is going to be our
movie list. It's going to be like a movie
145:24 - list view or something like that. Okay. So
let's go let's jump into our views or py file
145:31 - close this to here is to false them please
this one to get a basically data so you can
145:49 - move to the bottom and 
create create our new class based views so
146:06 - we are going to call it our plus or not or
this sorry guys supposed to be at last class
146:20 - watch Oh, supposed to be a copy probably better
be okay. And you're going to inherit the view
146:35 - then we're going to define a get a delegate
a get method and we're taking self requests
146:48 - will be taking profile ID that is going to
be the ID of the profile that was created.
146:57 - Okay, all the profile was selected, okay?
To be right. Okay, then the next thing that
147:06 - you want is axiom quarks, okay. Okay, alright.
So now and then what you're going to do within
147:24 - a nested and nested Okay, so spudding for
that. So we are going to try going to use
147:31 - a try catch statement right Alright, so let's
get into this so I said try catch try SF State
147:53 - rates, JavaScript has flooded my brain. So
they're going to try and get the profile,
147:58 - the profile, which is the profile ID that
was provided, okay. So don't use profile dot
148:09 - objects dot states. So, we are using a try
accept cards because if this profile does
148:20 - not exist, it is going to true does not exist
error. So that's why using the track try accept
148:28 - block so that we'll be able to handle the
arrows will okay. So we are going to get into
148:35 - the UU ID Okay, the UID is going to correspond
to our profile. Id like this. Okay, cool.
148:46 - So now we have our our profile okay, you have
our profile. So what you want to do is you
148:55 - want to gather all the movies from the database
alright. So to be movies What am I spelling
149:06 - My computer is freaking slow movie begins
gets paid Sorry About Us guys. Okay, what's
149:23 - happening? Okay guys, so supposed to be movies.
So as you can see the shutter I'm going to
149:30 - just to to come out with this video. Okay,
so please, if you're new to the channel, please
149:36 - kindly subscribe to the channel. If you aren't
already subscribed, please. Like the video
149:43 - key, please. I really cherish it. Okay, so
we are going to FOTA the movies that already
149:50 - exists inside the database. And I want to
filter with the age limit, so that we don't
149:57 - provide if the accounts or the profile is
A kid's profile, we don't send it out movies,
150:04 - okay? So we are going to filter with the,
the order name, the profile, age limits, okay,
150:13 - so we're going to get it from the profile.
So if you remember, the proofer has age limits
150:19 - on it. And we are going to use the one to
pass filter. So we are going to get the age
150:24 - underscore limits. Right this then, when you're
done, we're going to do check for one thing,
150:39 - that if Okay, so now we have a profile, but
we don't know whether the profile belongs
150:46 - to the particular user that is currently assessing
it. So we want to check if their profile is
150:53 - inside the Karen, she says are the abuser
that is assessing now, that page list of profiles,
150:59 - okay, so we are going to check that. So say
if profile not in request, dot user dots to
151:11 - file files, that's all okay. If it is not
in it, then we want to cause every redirect
151:29 - was a redirect and you're going to send a
redirect to I'm going to send a redirect to
151:43 - call what's a colon fufa underscore list?
That is where the list of profiles are at
151:54 - okay. But if it is in its or willing to return
a render that has our request sorry, guys
152:16 - requests request and pass is going to use
the movie list templates that's already made
152:28 - prepared for you. And you're going to pass
along it's us it's with a contest with a contest
152:47 - dictionary, which is going to have our movies
Okay. All right. Movies, what it means to
153:03 - have so hence you're going to reference these
movies over here. Alright. So, but if there's
153:16 - an error or let's see, if you are not able
to find a profile which is the probable error
153:22 - that can that can happen. So, profile the
profile model has this does not exist does
153:35 - not exist error on it. So we can use now another
exception, okay? Does Not Exist does not exist.
153:46 - So, if it does not exist, we also want to
do the same thing as this one to a 10 day
154:03 - insert to the profile, the profile list Alright,
so, let's save it up. Then. Let's go back.
154:21 - SQL Server store still running. Alright. Alright,
it's still alive. So now you have our view
154:30 - here. So let's add it to our our urls py file
Okay, so it's going to be a path that is going
154:50 - to have watch and it's going to take in a
string, not as output form, underscore ID.
155:02 - Okay, so the act that you provided for the
view should correspond to the name that you
155:12 - provide over here, okay? So I call its profile
ID, that's why it's, it's being called profile
155:17 - IDs over here. Okay, so when you're going
to use the watch when to the watch, you're
155:36 - going to call that as you on the model of
on the view, you're going to give it a name
155:44 - of watch. Okay, so you have to import it here
as yours, you're going to land in an arrow
155:55 - watch okay so we can save it up. But before
we go and test it out, there's one thing that
156:16 - we missed out, you're supposed to protect
the view from for only logged in users alone.
156:24 - So I'm going to copy this, this decorator
over here 
156:34 - copy this, then send it down this laptop of
buy his way yet. That's what I have to out
156:51 - to make the video. So you guys still. So let's
save it up. And let's go and check it out.
156:58 - But there's no way of us sending this profile
or linking this profile to the view that we
157:07 - just created. So let's go and make some slight
changes inside the profile list, VA templates.
157:15 - So ways that profile is templates to far less
than the guy okay, so the change that I want
157:34 - us to make is I'm going to add a URL here,
that is going to redirect us to the profile
157:40 - page to the watch page. Okay. So let's add
a URL here. It is going to use or call on
157:55 - watch and are going to pass 
158:09 - the profile ID as the profile.uu ID. Okay,
the profile here is the current profile, we
158:17 - are looping over the currents of data we have
from this profile he profiles list. Okay.
158:25 - I hope it's clear. So let's save it up. And
let's go back and refresh. Okay, so now when
158:39 - you open this No, so you can see. Now we have
a watch. If you look down here, let's let's
158:46 - just click on it and go to that page. So now
you can see now you are able to be redirected
158:52 - to a new page by seeing if you have an arrow
takes in one argument, whatever, whatever
159:00 - whatever. So it seems you made an arrow somewhere.
So what happened? So let's take our URL. It's
159:14 - called profile ID profile underscore ID. So
let's check our view. So that does the what
159:19 - I was talking about. It's from there always
from now please. spoofer underscore ID so
159:28 - happened says or takes one positional argument
or two was given. Give it give it the two
159:48 - I'm ready to begin to get paid Well, where
did this error coming from? I know my not
160:18 - gonna become incredibly slow. I can't even
check, check, check, check, check, check.
160:30 - Oh, my bad. Sorry about that. I'm sure you
guys got that. I'm supposed to instantiate
160:38 - it so now let's refresh this thing again.
Okay, so now you can see, we have some templates
160:54 - in arrows over here. So let's it's working
just the template has to be fixed. Okay, so
161:01 - let's go into the what's the profile as you're
done with the profile is started down Okay,
161:10 - guys, so open up the movie less than plates.
So I think it is to be a good idea if we work
161:21 - on the template for the three last ones left
is going to be the movie detail, the movie
161:26 - list and the show movie. Okay, that's us.
Let's work on those three, then we'll get
161:33 - back into our view again. It's not supposed
to keep longer than that. So we'll finish
161:40 - that quickly Okay, so this is a show movie.
So let's start with the show movie. Let's
161:55 - start by taking out the distance of tickets
it's now let's stand at a stand base dot HTML
162:18 - they are going to have another blog below
that is going to be called Title we're going
162:38 - to have movie this okay so you can take out
this one these two over here then you're going
162:59 - to have another block we're going to call
this or this I are going to move in this too
163:18 - is to interrupt alright the last thing we're
going to do is the block content okay. So,
163:35 - now we can take away was this can take away
this parts the inclusion of the navbar so
163:52 - from the navbar to the head like this and
take away the bottom parts as to tax they
164:02 - are going to move the main into their contents
the blog content and are going to include
164:17 - include the navbar. Route from partials dot
navbar dot HTML Let me save it. Okay. So I
164:43 - think we are done with the show, show movie.
So you can close down under if you can, you
164:50 - can even do it quickly yourself but I just
want to do it quickly so that we just take
164:57 - our houses or you just view it now views and
focusing on better stuff. Okay, so let's delete
165:09 - this I'm going to extend this that is HTML
okay, then the next thing we need is a blog
165:26 - title the same is your stuff 
going to placing detail page a stick of this
165:45 - tool over here 
another block let's call it all this winter
166:08 - move for this scripts dive into it alright
the final thing I'm going to have is the block
166:23 - contents and the nav bar. So let's lay the
nav bar away with today head tag and whatever
166:31 - whatever the body tag okay I'm going to have
a block content Okay, so we are going to move
166:53 - everything inside this let me This is all
I want let's move it into it Alright, so everything
167:07 - we need to Destin has been already copied
and added to our base html file so we don't
167:14 - even need to again come close it can delete
it right the nice one so yeah dammit I want
167:25 - to close its bow you'll be making some changes
when we get there so don't worry no worry
167:33 - about those ones those changes so change okay,
it is right after this video VGA Oh guys,
167:44 - so the last changes you need to make so let's
delete this one extend these with HTML no
168:08 - then you're going to have another block that's
going to be called Title we're going to our
168:24 - minutes enjoy Netflix enjoy Netflix alright
this let me get away this leg and let's have
168:45 - a block or this 
this tennis distressful? Alright, I think
169:08 - we are almost done. So let's get away. This
one here. We're done. navbar. And let's be
169:19 - include the navbar here. I don't think so.
Okay, as I thought as much I should include
169:28 - the navbar inside the video. So let's include
its face so include partials. Supposed to
169:42 - be a string partials start navbar with HTML
okay, I guess we're done issue. The sixth
169:58 - element. Let me just confirm Something from
the show movie Okay, so this PowerShell is
170:10 - supposed to be a string it's supposed to be
a string before we land in another era. Okay,
170:23 - so let's continue with the movie list trying
to move as fast as I can as long as I can.
170:33 - So you're gonna have another block called
content the block 
170:51 - content okay let's close or minimize this
main tag move everything into the block content
171:09 - nice one a way this to tax that we expand
it again because you're going to make some
171:22 - magic in here. Alright so now let's save it
then go back and refresh and see whether we're
171:29 - going to have our pitch working we're going
to learn in an arrow Okay, so you can see
171:38 - stuff are coming through but we are not getting
an image or image here. So I had a static
171:45 - image over there so let's figure out who am
I so it's going to be a background image okay,
172:02 - this is it. So, first let's take away the
assets this up static around this. So, we
172:14 - need to load in our static file alright. So,
so, we need to load in our static file right
172:32 - up here. So load static static like this.
Then can go back and refresh and see whether
172:50 - magic will happen or not. Like I see the navbar
is also not appearing if you forget to include
172:57 - it what is happening and you face again what
on earth is happening and we check my console
173:24 - sure the file doesn't exist or something like
that. I forgot to add those files to it. Okay,
173:40 - so sorry about that. But I don't know why
they not by snowshoeing Oh, you forgot to
173:48 - include the number. Okay, I thought as much
so let's include the nav bar nav bar HTML.
174:10 - So you can save it, then you have to do what's
the image that is not there. So I'm going
174:25 - to free this recording. Then add the image
image to the static file. After you guys as
174:30 - you can see, I've added the image to it. So
when you check the complete project, you're
174:36 - going to find this image added to it. Okay.
So let me close that one. And let's go back,
174:46 - refresh and see whether you're going to get
this as you want it. She's fresh Okay, so
175:07 - now we have this div I have some styling issue
since this styling is no common shoe. So I
175:15 - think I know what the error is where the error
is coming from. So that particular button
175:22 - which is display went to Iran is a star is
in lifestyle in lifestyle. So there's going
175:31 - to be a color of black. Okay, guys the only
one that needs it, okay? Yes. So let's say
175:48 - we're okay. This is going to be our last refresh
before we continue what you are going to continue
175:56 - Okay, so now you can see everything popping
up nicely. So this is we are going to list
176:09 - our movies. So we take the movies from our,
from our back end, then we are going to lesson
176:15 - two over here. Okay. Okay, guys. So let's
do that. What are we going to do? We're going
176:26 - to look over the movies, okay, so the movies
are rendered with this, this devil over here.
176:31 - So you're going to get away or the DIS below
and you're going to live all you want just
176:37 - one there is you're going to use a for loop
to provide it oh, sorry, sorry. So delete
177:04 - all of them and leave this particular one,
the one that has the image and it's okay,
177:08 - the one that has the image in it. So you're
gonna take this off I'm leaving the one with
177:17 - the image because it has some styling that
I need. Okay, so just delete those ones without
177:25 - the image. Alright. So we're going to run
a for loop on it so it's going to be a for
177:41 - loop. Join the for loop, the house movie,
movie 
177:59 - in movies. And with each movie, I'm going
to create an anchor tag so that we'll be able
178:03 - to move to the detail page of a particular
movie, okay. So for me tables, leave it as
178:13 - hash. Then I want to wrap it around this.
This, this div over here, okay? So if you
178:29 - quite remember, each movie has a flyer. So
the flyer is what you're going to place inside
178:36 - the div, right? So here, we are going to render
out our image or the flyer. For us to rent
179:07 - out a flyer going to a movie, dots flyer.
And we want the URL for that particular flyer.
179:17 - Okay? Not URL URL. Okay. So this is it, we
save it. Now let's go back and refresh. See
179:28 - what's going to happen a few seconds more
or so. So we scroll down. And voila, we have
179:42 - no movies so there's nothing rendering here.
So what I'm going to be the I'm going to pause
179:46 - the video, then create a super account then
go into the Django database, the Django admin,
179:53 - then add some one or two movies to the to
the back end. Okay. So it's not so anything
180:01 - huge that's why I'm trying to make it let's
get it together I don't want you guys to miss
180:07 - out anything my son is actually running loose
I wanted to do it of upside but he does it
180:18 - together so that you have a full full view
of everything happening okay so we are going
180:26 - to create a super user okay we are going to
do that with Python manage pui creates super
180:41 - user okay I'm going to give its use only Archer
Dave you with something simple my brain is
180:59 - static II II II ii.com admin the password
is admin processes when going to be admin
181:12 - Yes Okay, so now this place and I let's go
and use our Django admin localhost 8000 Plus
181:47 - admin so now let's log in. So, when to go
a at a Let's go the password is admin oh okay,
182:11 - so it's logged in. So what we want to do is
wonderful, we want to add movies but you have
182:21 - not added the the movie database to our our
admin Okay, so let's do that. So let's go
182:31 - into core we're going to add our modules to
the admin so the in the admin.py file is going
182:37 - to run with a few alpha I totally forgot for
what about those steps. So from ruts models
182:45 - imports imports was the name of the model
movie. Then also import profile and last but
183:16 - not the least Cornerstone Christo Musa and
I totally forgot about this video alright
183:27 - so we're going to add it to add admin so admin
dot site dot register going to have movie
183:39 - copy down change the stance I want to move
further my laughter is lay down oh was this
184:00 - so is going to be profile see what it also
it's doing with me to be a video in here Chris
184:18 - Donnie, sir. Alright, I think we are good
to go now. Right? So now let's go back to
184:33 - admin and give it a refresh again. Okay, so
now you can see those things over here. So,
184:49 - first, you're going to create a video. The
video is going to be linked to a movie so
184:54 - it's totally cool. Just follow along first
beta video we are not going to give it any
185:04 - title I are going to choose some dummy short
videos that I downloaded from YouTube so what
185:10 - did I call them I placed them somewhere where
did I place this is short short short short
185:29 - video this guy okay to see let's see what
our particular movie instance then now go
185:44 - to the movies the video is does that account
split your movie instance that fly list the
186:01 - F list this put some dummy with laughter so
it's going to be a single movie and I'm going
186:14 - to choose one then I'm going to use the F
list a limit is all so the service now we
186:45 - have a single movie installed inside our database.
So let's go and refresh it. Let's refresh
186:51 - our homepage again so we can see now we have
nothing there. Let's refresh it again Okay,
187:00 - since you have a problem, let's log out you
guys are previous our previous user sorry
187:11 - about that guys the 
images are huge. So it's it's makes it slow
187:29 - to render. So it was using Kojo as khwaja.com.
Killer just last login, you want to go through
187:44 - the process of creating another profile again.
So okay, so now you have your profile. So
187:50 - let's use it Okay, so as you can see, I have
a movie down here. Okay, so we have a movida
188:02 - here. I seem to have some error with our image.
So let's check that one out it's probably
188:18 - some shark refreshing it again. Well, why
is it's either not working. So let's just
188:36 - change. Let's inspect this Okay, guys, so
it seems I found the arrow it's from here.
188:48 - It's not supposed to be movies supposed to
be movie. Okay. Let's save it. Go back. Let's
189:00 - refresh this thing again. Okay, so you can
see the images come into over here. Okay.
189:12 - So now we have broken this down movie. So
we need to now make a detail page. Okay, so
189:19 - now you can also expand upon this. I did it
myself. I've already done but I want to leave
189:26 - it as a challenge for you guys, where you're
going to send a single video that is going
189:31 - to be a showcase. That's going to be the showcase
movie. Okay. So I want to extract just one
189:39 - movie from here from the filtered movies yet.
Now we're going to use this as your Showcase
189:43 - movie. Instead of using the static. The static
showcase movie over here. I won't use that
189:52 - one as a showcase movie. So try that one out.
Let me know your solutions down there inside
189:58 - the comment section below. Okay, did it for
myself. And it was very simple. So I believe
190:03 - you guys can do that. So the next thing that
we're going to work upon is the Detail page
190:08 - that when a user clicks on this, this movie
should send into the detail page where he
190:13 - or she is going to see all the details about
this particular movie. And then you can click
190:20 - upon it to go and watch it, okay. So let's
jump back into Visual Studio code. And go
190:31 - into our views, okay, as usual. Okay, so let's
create the movie detail page. So, let's go
190:44 - down let's create a new class called Show
Movie. Do assuming this, the capital is going
191:09 - to inherit from the view. Okay, so the next
thing we're going to do is you're going to
191:18 - define a get method going to take itself taking
request and taking the movie ID the underscore
191:31 - ID and the last thing is going to take in
the x x and quarks, alright. Okay, so what
191:51 - you're going to choose, you're going to try
and get the movie The movie ID a movie with
191:57 - a movie ID okay. So we're going to use a try
except block so that we don't get any error
192:06 - arrow. So let's clear this thing off when
you try straight in a movie variable, you're
192:20 - going to get a movie dot objects objects dot
gets where the UID t go to movie underscore
192:38 - ID right the next thing that we want to do
is that if the movie exists then you want
192:49 - to return a render so try to explore return
within a render have requests and are going
193:03 - to serve iterate today movie detail dot HTML
pa templates now going to pass along the contest
193:28 - visionary so I'm going to pass along the movie
The movie that we had right? But you want
193:58 - to check for exception exception. The only
other scenario we have to check is there if
194:04 - the movie does not exist, okay. So if the
movie does not exist, let's clear this assertion
194:10 - from day and use the movie. de Deus does not
exist. Okay, if it doesn't resort to what
194:22 - you want, you do want to return a redirect
to the profile page. Okay. So the profile
194:29 - is speech okay. So it then retain a redirect
to reverse URL to profile underscore list
194:44 - like this. Okay. So now we have our view done.
So let's add it to our url.py file. Okay,
194:58 - so Chara you Wi Fi, what you are going to
do is you're going to first import show movie.
195:06 - detail. Okay, so you're going to use it inside
are going to create a new party. And are you
195:19 - always going to be slash movie slash detail?
Slash I went to thicken a dynamic value which
195:32 - is going to be power movie ID Okay, and close
it out with an NS lash. Okay, so we are going
195:47 - to use a show movie do you feel like I spoke
my detail? Okay, they are going to the door
196:01 - as you on it. And let's give it a name. Okay,
and it's going to be called Show underscore
196:15 - debts a short version of show detail. Let's
skip the list running. Alright, let's save
196:23 - it. Okay, so now we have that working. But
where we want to use it actually is inside
196:30 - the home was the name the home where the movies
are listed, so that when the user click on
196:38 - this one, I decided to take it to the was
the name, the Detail page of this particular
196:47 - movie, okay, so let's add it this other URL
to this one to the movie list speech. So where
196:56 - we are returning this hash, this h ref hash,
you're going to use we're going to use a URL
197:06 - instead of the hustle, I want to return a
URL here. So they are going to go to core
197:16 - core, the show underscore debts, they're going
to provide their movie ID okay. All the underscore
197:27 - id going to be equal to movie.uu Id Alright.
So let's save it Alright, so now let's refresh
197:46 - this thing again. Now let's go over this.
So now you can see it is sending us to the
197:53 - Ito value. Let's click on it and see where
it will send us to. Okay, so now it sends
198:00 - us a detail page. But the details there are
static data. So we need to make it dynamic
198:08 - so that it uses the one for the particular
movie that we just chose. Okay, so let's go
198:14 - into we can close this one over the movie
data list and open up the movie detail templates.
198:22 - So, so open up show movie detail and let me
expand my so that you see everything okay,
198:30 - so an open show movie detail a their movie
ditto templates The first thing I want to
198:37 - change is the beat this thing over here I
want to change I uses the movie title. So
198:44 - because you are sending in a context with
the name of it, you can get from it the title
198:50 - Alright, the next scenario you want to change
is this thing over here I won't use the movie
199:03 - detail that was provided you're going to get
some weird stuff. movie description was it
199:16 - was hard to spot description okay. And I just
want to make some changes here let's or this
199:29 - way is this a way to adjust this. Oh. Let's
add an in an inline style here so now we can
199:39 - see the button. Just it's not showing for
the entire let's just add a color of luck
199:45 - to it so little become black. Right? Rather
move to is my laptop Vitiate ESCO it'll come
199:58 - back to where it's supposed to be. Let's kick
it. Okay. So you're making it into inline
200:14 - style block the color the test block. Okay,
so here we are using dynamic data, we're going
200:22 - to just take everything off we are going to
render our movie description over here too
200:36 - via underscore description. So this pathway,
it's on the image or the header part, you
200:52 - can slice the detail and just take like maybe
50 characters or 100 characters or less, depending
200:59 - on your preference so that you don't jam up
the front. The first page this page is math.
201:06 - So I just show some, a little bit of a summary
to it. Okay, then show all the details below,
201:14 - inside the URL description below. Okay, the
next thing I want to do is the image the background.
201:21 - Okay. So this time around, you're not getting
this from access, access, as I said as assets,
201:28 - or from static sorry, from static this area,
I went to use a media URL. Okay. So we're
201:37 - going to grab this one and it is going to
be that flyer. URL. So it's going to be movie
201:49 - dot flyer. That URL okay so you see that up
there now let's go back and refresh this thing
202:04 - Okay, so you can see the flyer is in the description
is also in but something that's wrong wrong
202:19 - some way I think I spelled something wrong
and the styling too is off so let's less I
202:26 - think that's fine I know where the error is
coming from so the style and religion I need
202:32 - to do is just take over this then justify
end from the session I want to select you
202:43 - address for description war movie dot description
are we are the scripts Oh no. We don't description
203:07 - is it and he said I he made the same mistake
away as a description over here, so let's
203:21 - save it. Go back and try it for the fourth
time I see what I was gonna work alright,
203:36 - so it seems that there's no description for
the movie, and yet. I thought there was a
203:43 - description. That's let me check that quickly.
Okay. Okay, guys. So I've actually confirmed
203:49 - it, it seems there when we're making the spelling
for the model, we made a mistake, install
203:55 - the description will I omitted the T. So you
can correct that make migration and migrate,
204:05 - then you have everything but I'm just going
to just use it like that. Just take off the
204:12 - T sites work. So you can just correct it out
on your end. Okay. I'll have to have to do
204:23 - want to talk to you guys. Let's refresh. So
you can see now the description is not coming
204:32 - through this. It's any of the other ones over
here. So I just noticed one thing I tried
204:39 - to log out over here. Let's see. And I had
this red arrow it actually did log out. Wow.
204:51 - Okay, maybe I don't know why. But when I tried
to log that I had a CSRF error. Okay, So you
205:00 - can see, you know, the description is coming
through, so you can make it better. We have
205:06 - already wasted a lot of time, so I can't go
about making description and other stuff.
205:13 - So the styling and everything has been done
for you just have to place in more detail.
205:18 - More objects inside. The admin just creates
more instances, okay. But there's one thing
205:25 - I want to help you do that, which is if there
is the movie is a seasonal movie, we have
205:33 - to display you see when it is you're watching
a Netflix movie, and you go to the detail
205:37 - page, and then it's a seasonal movie, they
show you the episodes, and you can choose
205:42 - which Episode Are you want to watch. That's
what I want us to do. I'm going to copy in
205:47 - some code and I'm going to explain why I'm
not actually going to actually going to create
205:52 - a seasonal movie. So that we experimented
with it, okay, but we did my best to make
205:59 - it clay, dry able to understand it. So, scroll
down a little bit outside the session. Okay.
206:08 - So above the description over here. When you
paste in some code, you can pause it and type
206:16 - it in. Okay, so let me paste it in. Okay,
so this is it. So first, I'm checking the
206:27 - movie type to see whether it is equal to CS
now. So if it is season, I'm going to create
206:32 - a div here. And I'm going to display an age
to say episodes, and I'm going to loop over
206:40 - the the movies inside the the movies inside
all the videos that has been linked to that
206:52 - movie. The movie instance. Okay, so a movie
is linked to a video instance. Okay, so let's
206:57 - say a particular a particular episode that
has been linked to a main main main movie,
207:06 - okay. So I'm going to loop over it, then I'm
going to first get the gets what gets the
207:13 - for loop counter, which is provided to us
by Django. And I'm going to get the movies
207:19 - episode title. Okay. So then I display all
that, then you can see I am making some HDF
207:27 - over here. So you let me take, I'm going to
live it for the meantime. I'm making some
207:37 - URL over here, which is going to call play,
we have not yet created it. There then I'm
207:44 - adding the movie ID here. And I am adding
what an epi the API is going to be help us
207:52 - get to the particular episode that was clicked
on. So we'll be able to show the user the
207:58 - particular episode that they clicked on and
not the first movie, okay. So this is it.
208:06 - So you can just type in this code, it will
become more clear if you fasted yourself.
208:11 - Okay. So that is it. Okay, so, what you're
going to do next is you're going to click
208:20 - create the page that is going to show us the
movie itself. Okay? So then click on the play
208:26 - button display button over here. Be able to
know which be able to play the movie to us
208:36 - okay. So let's go back into our views where's
my view? Where's my Okay, so I've opened up
208:44 - my view and first the before we begin that
I want us to protect this router let's just
208:50 - copy this method over here copy this then
place it on top of this one slowly adjust
209:01 - the greeting at the login required decorator
then let's move down Okay, so we're going
209:16 - to create a new class the class is also going
to be protected and is going to be called
209:30 - class. Show sure movie tool is going to show
the movie and he's going to hear it from view
209:38 - and you're going to have a death forget that
takes himself. They can request takes in a
209:52 - movie ID B underscore ID and when to take
in X axiom quarks okay. Then you're going
210:08 - to try and get the movie so we're going to
study the movie instance. And we're going
210:18 - to get the movie dot objects dot get objects
object dot get I'm going to go with a UU ID
210:35 - and it's going to be cost to the movie underscore
id okay then you're going to be 10 We're going
210:57 - to illustrate this we movie we're going to
reassign the movie constant or the movie variable
211:11 - to movie the value movie does videos in the
movie snap editor but I see what's going on
211:27 - with our video videos dot value okay. So we
are going to get some sort of a list okay.
211:37 - We are going to return it return a render
of request we are going to retain the templates
212:00 - show movie dot HTML All right, then we're
going to add the contest a contest this Narita
212:20 - is going to have your movie this movie this
way so I movie this way okay you're right
212:45 - okay so now you're going to have an exception
you're going to check for movie dots does
212:56 - not exist if he does not exist you guys know
I guess what do you want to do want to return
213:18 - a redirect redirect to pour proof underscore
list Okay, so this is it so we are done with
213:45 - this bat so let's save it our let's win other
than this view to our our URLs so first let's
213:58 - import it in then let's create a path for
it. So we are going to give me a pact are
214:13 - going to call that particular path play. And
also not play the movie nice play slash for
214:25 - gospel movie will also this will be slash
please slash STR which is going to be via
214:47 - that score ID. Okay, let's get out of it.
Then movie.us View Show movie.us You We're
215:01 - going to call it the name is going to be play.
Alright. So let's save it up. And now the
215:18 - next thing I want to do is we want to use
this URL inside the show movie. So that when
215:24 - a user clicks on their button play inside
it is take them to this home page, bring them
215:30 - to this page, okay, or this route. So let's
go into our movie detail page and what you're
215:43 - going to do is you're going to wrap around
this button, an anchor tag so down Kota is
215:56 - going to have a URL that is going to point
to play also called let's play call column
216:16 - play this causation and namespace So, you're
going to have your movie ID going to be equal
216:34 - to movie.uu Id Okay then let's move in this
button is all button over here save it up.
217:00 - And as you go to the field page now says refresh
will be don't get in here. Okay, so now we
217:18 - have in Euro so this thing now can take us
to the page. Let's click on it. Okay, so we
217:24 - have an error as beautiful as said doesn't
have value, probably Shula value, no probably
217:35 - doesn't have value, it's supposed to be values.
So let's change this thing over here and let's
217:52 - refresh this Okay, now I see. Okay, so supposed
to be slash. So let's go into our show movie
218:10 - instead of it's been movie dots. Now. Pastures
dots now by supposed to be pasture slash this
218:30 - way now, let's refresh again. Okay, so now
you can see, we have our page showing where
218:52 - the movie is now. It's not, it's not being
played. Okay? That's sad. No, Netflix, Netflix,
218:59 - that's a movie. That's bad. So let's go into
our, our templates once again. So this is
219:07 - where we are going to be the magic happens.
So instead of showing this static, a movie
219:15 - that is rendering from some asset and which
is not working, so clearly, let's take it
219:26 - off let's take this whole thing off. Alright.
So we are going to using some JavaScript Okay.
219:36 - So first thing I want to do is I want to pass
the value that is going to be sent from the
219:43 - front end is going to be in a form of A is
going to be sent from the back end. Or the
219:49 - view is going to be in the form of a list.
So we want to pass it then send it to Surah
219:56 - Damascus be able to have access to it with
So the best way to do it is to use the JSON.
220:04 - The script JSON script tag, okay? So the name
of it is going to be movie now using the JSON
220:18 - scripts Okay, so JSON scripts are going to
give it a name. I'm going to call it movie
220:35 - underscore data. Okay? So beneath this mean,
I'm going to paste in some JavaScript that
220:52 - I'm going to go to, and explain it for you
guys. Okay. So okay, so this is a JAVA script
221:01 - over here. So this is it. This is basically
it's all together within was going to see
221:18 - Oh, god. Okay, so this is everything so. So
first I am getting, I'm selecting this video
221:29 - tag here, then I am passing this data that
has that I've sent from the from the view
221:36 - here, which is in the form of a list, then
I'm grabbing it over here. So I'll do it.
221:42 - Okay. So when I'm done, I am creating a new
URL, which the location dot ref, which is
221:51 - the current URL that we are on, then I try
to get out a parameter. The parameter is called
221:59 - epi. So when you check the movie detail, when
I added this, let me show it to use, it becomes
222:08 - a little bit clearer. When I added this block
of code that was looping over the movie. So
222:19 - in case it's a seasonal movie, it's going
to have an epi at the end. Will you tell us
222:24 - which particular episode they use or want
to watch? Okay, so that's what the EPI is
222:31 - for is like for episode, okay. So that's what
I'm trying to grab from the URL. Okay. So,
222:42 - try to grab that from the URL. But if it does
not have an API, then it means that the person
222:52 - is trying to watch a single movie. So we make
the video parameter, what is zero. So if it's
222:59 - as the API then settings to the API, okay,
and this is passing to an integer. So whatever
223:06 - is going to come out is going to be an integer,
okay? Then, we try to select the video fodder
223:12 - you want to watch. So the listener is going
to come out of here is going to provide a
223:18 - link to give us a list of video files. Okay?
So the video file is going to be in order.
223:25 - So episode, if it's a seasonal movie, episode
one is going to be first episode two is going
223:29 - to be second three in that order. Okay, so
we get to that particular episode, then we
223:37 - get to the file, the file is going to give
us a URL. Okay, the file is going to give
223:43 - us a URL, then we just made the path to that
URL with this thing over here. This, this
223:53 - our root URL, which is pointing to our media
files, okay, I hope I didn't confuse anyone.
224:00 - Okay. So this is how you're doing it. So let's
save it. And let's go back and refresh Okay,
224:17 - so since you have some arrow somewhere like
ECCS, you can pass what about about the sun?
224:25 - So I think I know where the arrow is coming
from. So so instead of 
224:40 - inside the view.py file here instead of sending
the movie, we are going to send a list. We're
224:57 - going to wrap it around a list Okay? So make
it a list instead of a query, to query whatever
225:11 - I'd have talking about. So let's save it's
going to be able to pass it to Jason. So let's
225:26 - refresh. Okay, so now you can see this time
around, we have a video showing up. So we
225:34 - can play the video. Some VH yet very simple
short video that I downloaded from somewhere.
225:43 - Okay, so we can see everything is working.
Now we can play a video. So let's, let's go
225:54 - back you can can't go back. Okay, so when
you go back, then you click this thing over
226:01 - here, play. Once you send us to the page where
the movie is supposed to play, then voila,
226:09 - we can go ahead and play our movie. Okay,
so guys, this is basically the end of the

Cleaned transcript:

In this course from Oliver Otchere you will improve your Django and Tailwind CSS skills by creating a Netflix clone. You learn how to recreate the design of netflix and implement some simple functionality. Hello wonderful people. It's a OtchereDev, I decided that Why shouldn't I create a Django clone of Netflix? So I did that. You will know what Netflix is. So this is Netflix the original website. It says unlimited movies, unlimited TV shows and more. So it allows you to watch movies and TV shows. Okay, online. So this is the original website of Netflix. And this is my version of Netflix. Let me switch to that So you can see from here that I'm running on localhost. Local localhost port 8000. So okay, so this is it. This is my version of Netflix, you see this, it's almost like they say, I needed a good record, it did well, so it has the signin, the authentication system, the authentication system baked in. Okay, my PC is a little bit slow. So you guys should pardon me. So I'm going to log in. Okay, then provide my password. Login. Okay, so you see, when you log in into if you have used Netflix before, you'll be asked to choose a profile. And because I've already tested it, that's how it is so many profiles. So you can add a new profile by going to this clicking on this button, it's going to send you to a page where you can create a new profile, which is displays, but I don't want to create a new profile. So I just go back and choose any of the profile. So the profile, you have two types of profile there. And I can watch all videos and one profile for only kids. Okay, so I just use this. Okay, so you see, this is the homepage. Alright, can see. So I just have to because I can't compete with Netflix. So let me click on a movie. And it's going to take me to the detail page of the movie. So I clicked on Viking. So this is the Detail page of I can see give me some description about the movie. Now just some, some placeholder text. And if I want to watch the movie, this is the button here, I click here, it sends me to the page where the movie is going to be shown just like how Netflix assets and this is it. Let me play. Okay, it's, as you can see, right, it's playing but the image that I use is just I just use some placeholder image, video. So it's, it shows nothing, but the one that we'll be demoing here, you would use some shots, fake video, so you can see this thing just popped out. Okay, so this is basically what you're going to build, you can expand upon it add payment is of no lifting at any add on the payment system and the magic behind that flavor that I can't do anything about. So this is basically what we are going to do, we're going to build our own version of Netflix using jungle them with the best framework ever. So guys, let's jump into it. And let's do this the now. Okay guys, so let's jump into the video and let's create our own version of Netflix. So before we jump into the video, I because I'm a wonderful person and I want this thing to be as simple and as understandable as it can be. I went ahead and was created my starter file so that we just cut off some unnecessary parts something that you already know about. Sorry. So this is the repo I'm going to leave the link to the repo in the description below so that you can have access to this repo. So when it comes to the reporting, there are two branches. The main branch is going to contain the completed projects. And when you switch or when you switch the branches. It says the select over here you can choose the starter file here at a startup branch here sorry, when you choose it. It's the startup branch contains everything about the continuous data data first neither for these projects, okay? So just switch there, then go to code, then you can clone it, or you can download as a profit and just open it up inside your favorite text editor or code editor. I'm going to use Visual Studio code. Okay, so let me close this stuff to be no worries again. Alright, so this is the repo for the project. It has two branches, the starter branch and the main branch. The main branch is for the completed projects. And the starter branch is for the brand that contains all the Stata files, okay. So we can meet you come here, you clone it, I have some templates are for providing some templates and some static files, which are the images that we are going to use. Okay. So when you click on it, you're going to see this something like this. Sorry, I'm feeling like this. You have a normal Django project that has been generated with Django does admin start project and I gave it a name? Django Netflix. Okay, so inside the Stata files to add a static file footer, you see some images and some styles or CSS or via which was generated with tailwind CSS, so I've pitched a tailwind CSS file. So this is x. And inside there? Was it in the templates, you have some a couple of templates that has been created for you already. And I usually I used I used a tailwind CSS as usual, my favorite CSS framework. Okay. So this is it. So this is, let me let me talk about the changes that I've made in the fall that were generated by the Django design. So I changed just two files, the settings.py file and the URLs up UI file right here. So inside a settings.py file, I changed I added this inside of there, so the templates, or the directories or the templates, either the directory for this template folder over here. And when you scroll down, you see I've done some magical ways that we'll be able to use our static files or be able to hold our static files. So either the static routes, the media routes, the media URL, and the static files, this okay. So because we are going to use a development server, we are we have to find a way of saving our media files and an our static files. So I added the static, either this line of Codea, which allows us to save our static and media files whilst we are still in development. Okay. All right. So these are just the changes that I've made in the fog that were generated by the Django dash admin. Alright. So let's continue. Let's get into the action of the project. Okay. So the first thing I want to do is you're going to create a new app. Okay, you are going to create a new app, we are going to call it scorso Python stats. No, sorry. Python managed up Pui. Oh, what is wrong? My head they get? Why did your pui start up was the name of one score the score will get an error somewhere. Okay, no error today, escalate this. Okay, so we have created our Oh, our new app over here. So let's close it. ls move up. And he said our installed apps. Let's add iterates is aapko. Right is one. And the next thing I want to do is you want to add a URL up Wi Fi here so that we will be able to some way of make our URLs modular based on the apps itself. Instead of having all your big directly inside the main your pure iPhone, okay. All right. So, let's add a new file here. Call it URLs Pui. Alright, so inside the ui.py file, we are going to first import path. Okay, then the next thing we are going to do is also have a URL, the URL pattern list. Okay, so first import. So I thought I'm writing Java scripts. So from Django, dot URLs, import path Oh, sorry, no dispatch, yes. This way, then we are going to have an app name because we are going to use a namespace inside our main URL. So App Name is going to be close to core. Then you have the URL, path and list. Alright, this is it. We are done with this for the meantime, let's close it. And inside the main urls.py file, this one here, the one that was generated by Django does admin and the other one that you cloned, you're going to add, you're going to include Dauda URLs. So path, and we are going to give it to the routes. The routes, Route, okay. So you're going to give it an include. And you're going to pass it core dot URLs. You with a namespace, you can see I getting some error. So you have to import include namespace. The namespace is going to be close to core. Alright, so let's import this include include can be imported from Django dot URLs. All right, like this. So you can't say if it's now you're done, okay, so it's basically done with this. Okay, you're not done with it. So, since you are done with this thing, the next thing I want us to look at is our models, okay? So inside the course, the core folder, open the model the PI file. Alright. Okay, so first, you're going to start by creating our own custom design, because we just want to extend it a little bit by just adding just one shoe to it. Okay, so we don't want to change the authentication system, or anything. It's not anything special. So we are just going to use the abstract instead of the abstract basis, which allows us to create a fully fledged or fully flexible custom user by just going to use the abstract user, okay, which just allows us to just extend the thoughts of the user which Django provides to us okay. So from Django dot contrib dot dot dot models. Import abstracts. I always put so this the wrong abstracts abstract like this, okay. So let's go ahead and create our coastal visa class. I was quite impressed on visa. Don't get confused with them. And you're going to hate from the abstract. Sorry, was Autolite change is so abstract is like this. Alright, so the only thing that you're trying to add is trying to give it a profile filled. Alright. So of profiles and is going to be a many not a minor. Many to manifold Sorry, sorry sorry guys sorry. Since my brain is on some overload, so models, DODDS may need to be ready for what was going on many too many for just like this and this is going to be to the profile profile profiles table okay, they are going to have Nol equals true and blank equals shoe like this alright. So, this is it, this is it. Okay. So, we are done with our ESA The next thing I want to do or look into is the profile the profile, the profile model, okay, so plus profile and we are going to inherit from models dot model Oh, sorry. Alright. Alright, so, the profile is going to have a name, alright, so a profile supposed to have a name, the profile is going to be the Netflix profile, okay? The one that usually creates, too, you can use to watch a movie, if you are familiar, Netflix, you're supposed to know that shuffled. So we are going to use a character food and is going to have a max length of two to five or key, it's going to be required. So So and the next one is going to be an age limit. So we know whether it's for kids, or as for or so you show them the appropriate content. Okay. All right. What's all this was this Alright, sorry, guys. So that was going to be a mother, it's also going to be a models dot char field want to have the max length of them going to be choices. I'm going to be age and our school choice. And that's called choices. So let's go and create the choices still choices are up here see a choices going to be caused to a tupple or a tuple then we're going to have to two food in it. Okay, so one is going to be for all and the other is going to be so the first one is the one that is going to be saved to the database. And this is the one the one which is going to be displayed to a user. Okay. The next one is going to be kits and kits. Alright. So there's what's going to be used here and an STI we want here as a UU ID for this profile. So we are going to use our models dot u u ID field. Alright, I are going to set a default for it. Which is going to be equals to u u ID dots. So let's first import the UID a UID module from Django, eight from Python, sorry, and put your ID Okay, so you ID and there is a version called UI default. Okay, this one here, I like the fork. Alright, so you're done with the profile model. So the UID is going to allow us be able to request for a particular module or is going to make it that how do I put it, differentiate between it. Okay, so class, the next thing I'm going to board is the movie class or the movie model. going to show you guys four models that model then a movie actually has a title. So let me clean this one day. It's not a name. So title, then it's going to be a models dot char field. max length is going to be equal to two, five. The next thing I want to have is a description of the movie. So it's going to be models dot char field, or no, sorry, we can store the description that we are going to use a text area, a text word, sorry, what did I just spell? text text that tests this vote. Okay, we're going to set in the blank equals true. And na equals true. Alright, you're supposed to be capital, you're not writing JavaScript. This is the most interesting language and the best framework ever. created when we created food today, that is going to be models that date, time thought are going to add an auto. Now add because you so this is going to add the date, the time and the date and time that the movie The movie class was created to the store, okay? So we don't need to go and find out or put in a time ourselves, right? It will be added for us automatically. Right? So then so now we want to add or the next food we want to add is the UU ID field. So that is also going to make the movie said we're gonna have to differentiate between the movies Okay, so models.ui default Okay, so now we are also going to get down to a default, which is going to be equal to u ID dot u u ID for alright. And the next thing that we want to do is add the type of movie where our editor sees now movie or it's just just a single movie. Okay, so as far as I didn't actually want to add this part, but it's it makes sense. You can have a Netflix with just only was single movies. You have to have seasonal movies too. Okay. Alright, so it makes sense. Safford No, Safford and the max length this is going to be Ted and you're going to use choices going to be close to movie and I score choices Alright, so let's create the movie choices over here over here then you're going to have one sees now like this alright. And sees now sorry sees now but I suppose Oliver Come on, come on. Alright, so the next one is going to be was was the name single thing go and you're gonna be seeing go alright, So, you're down to the movie choices. So you're supposed to be choices this way that we, alright. The lesson I want to add, as was the name, the video is to put out a video file or video. So, let me let me explain to you the database setup. So you have a movie, a movie, a movie thought, a movie table that is going to hold all the movies that are inside the database. And inside a movie table, a particular instance are going to have videos, the video can be just one video, if it is a single, it's a single movie, or a single type of movie, but it can hold many instances of the movie. What was the name? many instances of the movie model? Okay, so if it's a seasonal movie, so in a seasonal movie, you have a lot of movies that are linked to that particular movie, but if the single movie just has one movie, okay, I hope it's clear. Right? Then so we are going to have videos which is going to be a models that many to many, many to many many to many thought and this is going to be related to the video filled. Right. Okay, then the next thing that is going to be s is going to be you want a flyer or a poster for it. So we're going to call it a flyer. So it's going to be a models dot image vote and I'm going to choose that it should be uploaded to upload to where should we upload it to flyers? Yes. Alright. And we are going to the every movie is supposed to have an age limit so that we'll be able to know which kind of movie to show to each age limit. Okay. So it's going to be also going to be equals two models dot char filled and the maxlend this is the this is going to be 10 and the choice is going to be choices. Sir choices, which is the age choices. Alright, okay, okay, I hope you guys are following me. Alright. So this is it, you're done with the movie, the movie model. So let's jump into the video model where we are going to hold our individual video or movie file, right? So that is also going to be models dot model. So is going to have a name, it can have a title. So let's say it's an it's a seasonal movie, to the seasonal movie can have a title that particular video instance can have a title let's see episode one, episode two episode three. But in the in the case of a single video, then given it the single video instance the title doesn't make sense. Okay, they are going to make it a models dot char field you're going to make it max length of two to five blank equals true. Black equals true So that's those scissor movies or the single movies can escape this field without passing it any value and gnarly costs true. Alright, then the next thing that we need is the most important and the file the video file itself so the data is going to be a muddles dots. file filled Okay, so this is it, and you're going to choose an upload, upload to when to upload it to movies. Alright. Okay, so guys, we are done with our database setup. So this is the model that we are going to use for this projects. Right? So this is this one here, video, movie profile and Acosta visa model. Okay, so save it up, save it up. Okay, so this is the models done completed. All righty, let's jump into the views. Okay, so let's start writing some views and see the magic that we are putting together. Alright. So in this, this series, the series in this today are going to use the class based approach. Okay, so let's first import from Django dot views. Import view. Alright, let's try this. Okay, let me clear away this. This Hanoi COVID I was having to record it back again. Oh, I miss you guys, i to the first thing I want to do is you're going to create an index page, or let's say the homepage. So let's create a view that is going to handle that. So we're going to call it hope. As you you are home. There is no way by home, no way like home. So it's going to inherit from the view. Alright, let's go on. So Zadar creates a sorry, He now gets is going to just handle get into taking itself taking requests, and taking some arcs and quarks, right. Then, when, when I get requests made to this view here you want to retain Aranda. Okay, once you return a Render, Render has to return requests first, then the templates that we are sending back so inside when you check the template folder, from the static file, a starter file that you cloned, you're going to see this index dot HTML file here. That is our homepage. Alright. So HTML, so I was excited to hear mistakes index dot HTML. Alright. So this is our simple homepage, right? So let's, what do I want us to do? Let's add it to our urls.pi file. So that we'll be able to preview it, not this year, the PI file is closed. And let's open the URL is a py file inside the core. The core was it in the core folder or the core directory. Alright. So path, we're going to pass in path. And we're going to give it the root directory. And we're going to use the home dots as you because it's a class b Sorry, it's supposed to be a capital H. From the US view alright, I this so let's import in home from views from the views. Import home. Alright. So save it up. And now let's start our server and see the errors I have made. By third. Monday's the poi rants Okay Oh It seems you have started making mistakes already so inside the model the Pew if I made a mistake somewhere on line 25 Instead of charcoal I said shot shot what is wrong with this boy I'm sure you guys got that already so let's save it and wait for this server to restart for us our error again what's wrong with it here in Hawaii Keith Otto change related what's going on what's going on okay costume User Model okay so I know why this is begin to fuck up so inside because you're using the abstract is I supposed to provide it inside provide a custom inside inside the settings that URLs far right so when you go down go to the bottom part so let me add some few comments or settings I know you know I can't spell so you're going to add an OT EUSA model and this is going to be a reference to core dots Costco costume costume is right like this and said hard not has no effects. So sorry guys. I always made this mistake so let's take out this now it can just be blank but knowledge needed for many to many field Okay, so save it's then come here and save this one too. Let's go down and see what is going whether you are still alive who who I am getting some errors having said before, what is the what is this? Okay, so I think I know where there is a one way road. So let me clear the terminal phase. And first, let me make some migration Python manage py make migrations. If I get an error, I'm going back to school. So Python managed py migrate. I think this is what's going to solve our problem Okay, now let's run our server again Python managed or py runs server. Server. I was confused that I ran an NPM script that vitae UI. Okay, so you can see our problems are solved. Okay, so now let's go and see whether the view created is working. And you open a new tab over here. So localhost you can see I am a level of view. So port 888 is already open. So let's see GT 1000. Let's open it up. Let's see what happened. Ki n vi, we have a disaster. So you have the templates by you can see the styling is not coming through and the images to or not coming through. So we have a horrible one over here. Okay, so, before we do that, let's let's, let's make some changes. So you can see inside a folder, the terminal down here, it's making some GET request to some asset files. It is not having access to it. Okay. And I know what with our Eric, I see it made a request to get estado CSS, which does not exist at where the directory died looking for its ads. So let's solve that issue. So, inside that was the name the the templates directory, I went to create a new file, I went to quality base dot HTML. Alright. Let me change this then. Okay, no worries. Alright, then you can change this then let's, let's make some small changes over here. So you can change this to Netflix. And you're going to add a block over here I want to call a title. Okay, so let's put some data over here. Alright, then, the next thing that we need to add is our, our CSS. So link going to our CSS. So our CSS is inside the static was in a static directory over here. So we have to find a way of bringing our static files here and seven, eight. Okay, so first, you're going to load in your root, our static okay. Alright, so let's use our static over here. Alright, so this is our static and so now you'll be able to have access to our style, the CSS, which is inside the static directory. Alright. Then the next thing that we need is what do we need again? Okay, so we are going to have another block called orders. So that's if there are any order lines that are particular to the page you're visiting, it will be rendered over here. Alright. Okay, I think that's make sense. Then the next thing that we need is we need what do we need? What do we need? Okay? So create another block called Content. Content, that is where our call our content are going to go. Alright. So this is it. I hope this makes sense. Alright. Okay. So now that we have our base, HTML done, it's, it's good. Let's say what do we need, we don't need anything again. So now let's open our index dot HTML file. And we're going to make some small changes to it so that it's be able to use this basic HTML file we have used and the URL and be able to utilize our style dot CSS. Alright, so I'm going to clear this path. Clear the top part here. And first, you're going to extend extends this dot HTML. Alright. Then the next thing that we need to add is we want to load in our static should I be able to use it okay. Alright, so this is the title. So let's add our title to it. Okay, so another block is called a block the block a score title, so we can call this a passing in home. So to show Netflix dash home, okay, so we can take of this. So, the other link that I was talking about is this particular link here. This link is to some icon directory. It's from Alcon ionic On icons, I don't know how to pronounce it, but it's not all their pages that are using it. So we are going to use a block to render a four, deuce page damnit, it's okay. So we are going to store it inside that for this or this block we're going to move this tent up alright. And you're going to move this whole thing here. This move this whole thing, this class here, carrots and bring it to this one over here the base dot HTML file let's save it then go back then we can take off this word is to tax and please the whole contents of the whole contents of the file or Yeah, of the file inside the contents contents block All right, so let me copy, move the whole path down Go Go Go Go Go down. Go down go down. My laptop is a little bit slow. So please forgive me guys. Stay attached now. Okay, so we can end here. So I the footer part and let's move it up. Okay, so when you're done, we can clear this thing off these two ones these two tasks. Okay, so let's save it. And now let's go back and when refresh and see what is going to work we have any errors. Okay, so you can see you have Netflix homes. I see that home is now popping up. Alright, so you can see you have Mr. stylin back again. With our stylists, what can they gain but we have a problem. The problem is that our images are not showing they're supposed to be an image here than an image here. But they are not showing I don't know why. But I know why. Because we are referencing them directly from the folder and they are not there. So you have to find a way of loading them from our static okay. So when you screw up the images file, you're going to start from this place this year the static so let's take all the assets here. Then they're all inside a static file so static this alright then go down click on this parts sorry then let's copy this spots make it static alright so the I seem there are two or three more down there let's do that quickly. So when you scroll down this there's this one there's another one there's another one down there too. So let's take on just take over the static and fun day and if you're using VS code it makes it even easier okay just highlight this year and type static to this disease makes it very simple COVID A static assets again alright, this liquid loves what I guess the kidspot Yes, this one The last part was the name static, what they do Okay, so let's save it now let's well let's refresh and see what is going to work okay, let's give it a few seconds so what happened is okay, so you can see our images are now in you see we have our face but almost done. The face is almost done guys if you are new to the channel please subscribe to the channel if you are if you are new if you are old please like the video share with your friends coming to the session in the comment section below is really going to help me Okay, explain so for three out right Okay, so this is it. So you can see our images are now coming in, we have our homepage of Netflix, dawn on it. So let's jump let's let's go on. So when you look inside when you go to all the templates that you see that you'll be using the nav bar almost in order in order this one in all the templates so it's it's makes sense that we made this a pashya then we import it in all we include it in all of our files. Okay, so let me cut this part off. And inside the templates here, we are going to create a new directory called partials. And inside the partials directory are going to create a new file called Nava dot HTML. And inside it's the navbar that I copied or I caught I would paste over here. No changes directs the same thing. The only thing that we need to do is we have to load in static Alright, that will be able to have access to it. So static is loaded for each and individual templates. Alright, so each templates handles its own static So load let's save it then let's close it. You can come back and make some changes later on. Okay, so now let's include it over here let's include it I went to include Pasha house slash Naga. Sorry Nava dot HTML. Alright. This, this the some space so it stops. Okay. Now let's go back and refresh and see whether there are any changes. So this is the original one without us copying anything now we should refresh. Same thing, no different weights less weight a little bit. The same thing, no difference. No changes. Okay. All right. Hope you guys are following. Okay, so the next thing that I want us to do is, let's talk about the authentication part of things. Okay, the authentication. So, in this video, we are going to use all mighty all or so Django. We are going to Django all auth to handle our authentication if you don't know what all is this is all OT. So all OT is an authentication package that makes authentication in Django, very simple and very, like the standard it's, it's, it meets the standards of authentication, okay. So it gives you access to social authentication and normal authentication to as well. So you just pip install Django or OT, or this is the documentation. I'm going to link leave the link inside the description below. Okay. All right, guys. So please do a pip install of Django or if you have not done it. I've already done that. So I'm not going to go through that step again. And now we're going to To add some changes to the template file, they need you to have this Django templates, contest processor dot A dot request. It's already inside ours already. So if you scroll up this is it. Maybe I've made some changes to it, so, but it's needed. So it's already there. It was provided by the Django does admin generator. Alright. And then so now we need so this thing, this thing over here. So let's copy this over here. Copy this, go back. This hire live my life. Okay. So, if you read the comments, I want to know what each what each individual import does, alright, pick up this one too. Alright. Then the next thing that we need to do is sorry. We need to add or the name inside our static files, you need to add these two things, these are essential and the down one based on the social or today you want to use. Alright. Let me close. Let me let me minimize this one down here. Okay. So let's scroll up. Scroll up. Let's go to installed apps installed up. So we'll leave a comment here. Okay, third party. Party apps. Going Live, it's down here. Oh, it's didn't copy. Sorry, guys. Let's go and copy the copy, go back. Paste it again. Alright, so now you have added it. It seems it left with some one or two stuff and you're done with it. So you need to add a site ID equals to one. And inside that you are the Pew IFA, you add this one. Right, this part. Alright, so I'm going to copy down a path. And we just go and type in the site's ID into it. So sites underscore id go to one. And when you go into you go into that root URL, the Pew IFA. are going to add the URL file, the path that I copied, okay. My face, I need to either come over here before, then we'll save that. And let's go back to our settings or py file again. Alright, so you're going to make some changes to us our authentication, so all odds provide us with some, some configuration that we can make to make authentication so simple and lovely. Things are making the source for all odds. Right? So the first thing I'm going to add is the authentication method. So the authentication method allows us to choose which way are you Sasha logging in? They should log in with their email, or they should log in with their username or either username or email. Right. So So accounts authentication methought and in this our app, or in this project, you're going to use email I don't think was the name Netflix's ever waited for them to log in. So you just want to be sorry, supposed to be an email. Not email, email. All right. All right. So then so now we need to do is Then you want to make email? a required field. So email accounts, email accounts email required. Required required what? How do you spell it? Okay. Required, we're going to set it through. So you guys, the Python tool, not the other programming language to write. Then you're going to set accounts, authentication accounts, email verification, sorry, account email verification once set it to non string on, not Python, okay, and the last two things that we need to add is account. User Name required. So that is going to, though all auto added to require username when a new besides registration or not anyone to set it to fall because we don't want users to pass in email their usernames when they are registering. Alright, then the last thing that I want us to do is now related to all Autobots, it's related to Django itself which is the login sorry login with the log a new redirect URL that went to pay me to slash for the meantime Alright, OCR is goes to sentences in profile accounts for something like that. But I want to put you to slash Alright, so with this done, let's see what our service to our life okay, let me scroll down and see what these other disaster Yeah. Okay, okay. Okay. So it's saying that you need Okay, so when you look at the Earth's documentation down here, it's asking for this required this 10 year so the two already has been added to our install our by the Django crate up by we need to add this sites, whatever the contract sites, right, so scroll up. Let's add it was added to it and save it. Let's see what ACR server is restarting again. Let's see where it's going to work. Okay, so you can see it's working but we have some migration that we need to make as soon as possible. So let's add our server clear the terminal by manage the poi migrate Okay, so it's going to migrate quickly then we continue with our lifestyle a few seconds more so now less on our survey pui pui around server sorry okay guys. Alright, so now that we have your data in this so let's refresh Sorry, sorry let's refresh Okay, so now let's go to our login path. You can see you have no even added any routes but you can go to our login you have a fully login place which you can log in log out and all that stuff so account slash login. Let's click there. So you can see we have a login here you can go to sign up you can go to I saw some Forgot Password certain way. Like it is good to sign in a kid. You can go to sign in Forgot Password, and you can reset. See to all gives us all these functionalities baked in. Okay, so the first thing I want to do is first you want to change this sign in and sign up was how do I put templates or how it looks to Cody and you can let our users uses. Okay? So first thing, we're going to override these templates, the templates for the sign in and sign up. Alright. Okay, so what are we going to do, they're going to vary the temperature. Okay, so to provide all US templates, the first thing that you have to do is that inside your templates directory, you're going to create a new folder. Sorry, not a new file, my bad a new folder or a new directory and quality account. And he said accounts if you want to overwrite template templates for logging, I want to create a new template and call it login. If you want to override the template for sign up, you're going to create a new template and call it sign up. So for us we are going to move this our templates login into this directory over here. Alright, so now let's go back again. So as far as this was the login page, but I'm going to get a quite a while but still, it's it's what the explanation so so now you can see we have a new login and this is it using my because yeah, but ya know, you see what they, they base the HTML, that's why it's not looking beautiful at all. Okay, so let's make it beautiful. Let's make it beautiful. So let me close this terminal open the the templates up and let's make some changes to it. Alright. Okay guys, so we are going to make some changes to our our templates so just like we did for the home view you're going to clear the spots let's clear this one off or waiver us so first you're going to extend extend this path and with this you're going to go back one directory then go into get the base dot HTML file because base your HTML files not directly inside the accounts for us we are going back there I can have access to ACA The next thing you're going to have is the block the block title by Dale in here is going to be login so we can clear off this one here is two tents over here we're going to have another block code or this Okay, let's move this script up into the block like this. Okay, so we're going to do is you're going to surround the main content or the the content inside the body tag in a block content block content tag okay. So content so content or what am I spelling alright if you can't hire me at that place, please contact me oh guys. Well let's place is a very it's what did I fries, I really enjoy the application. Okay, so this is it. So let's go back and refresh and see whether you're going to have some something. So let's refresh. I hope we don't get any error. Give it a few seconds, a few seconds. Okay, so you can see you have some pain going on. First, our logo is not coming in and we are supposed to have some background image. It's also coming in. So let's go and fix that. So I told you that we are going to use our navbar So we can include it also here. So let's take our to this now back, then let's include it include it's going to go backwards, then go into our past years, slash navbar dot HTML. No, it's this. Okay, so the next thing I need is this thing here. The background image, let's change this to reference from our static so this copy of static like this. Alright, so it seemed us or our you need is our law, we need all we need. Let's refresh it again, and see whether you get an error, I knew you're going to get an error because you didn't load in our static. Let's go back. So let's load in static Okay, with that done, let's go back and refresh the flesh. Okay, since we didn't get any error again in ways it's Fula, you can see our was in it. And now it's showing here, and our background imagery showing the beautiful beautiful. As you can see, I did a good work with the stylet. Okay, guys. So one thing that you have to take into consideration is that the names here should match the name and idea for the individual inputs should match the one which would have been provided for you if you're using the original templates provided by was in all odds. Okay, so here, we need to make here login. So the name is supposed to be sorry. It's supposed to be a was login and ID login. Okay. Sorry, I should have done this earlier on. Okay, let's see, what's the lesson that I want us to check is this where we are going to render our error messages if there's any errors with the email in which the authentication credential has been provided, okay. Okay, guys, so for us to be able to enter the arrows here. I'm going to paste in some code shortly. So this is it. So let's just take out this static static error that I provided just to so I stopped with a styling. Okay, so I think the code I pasted was from here to here. Okay. So let's, so this is going to check if the form has arrows. If it has an arrow, it's going to create this div, and it is going to render their forms dots, non filled arrows. Okay. This is it. Alright. So, the next thing that I want us to do is let's say a person is on the homepage, or let's say is watching a particular movie and want to go to the login, I want us to the user to be redirected back to the please are they where they logged in from? Okay. The loading forms, they are going to add in some snippet of code to us Whoa, inside the form. Let me pull it over here below this. So I have it already copied to my clipboard. So this is it. I think that's it. paste it over here. This is this. Okay. So let me scoot over here. elektrobit, soy, KC composites and enter in Destin, so it redirects the person back to where they clicked the logged in from alright. So civets. Let's go back and test it again. Alright, so let's try. Let's try logging in. So let me see my favorites, you know? Okay, so we can see nothing happen, it is because of something that I know about. I'm guilty about it. So inside the form on the form tag, you're supposed to specify which method that we want to use. So at the meantime it is using get, which is not the right way. So it's supposed to be the method is supposed to be set to post. Right? So let's go back and refresh again. Let's click on this then from there, refresh. And I know you're going to get that error. So let me not because make that error phase. So inside Django for us to submit a form is supposed to have a CSRF token, okay, for security reasons. So we are going to add a CSRF token to it. We are going to get an error. Let me refresh again. Alright. So admin. And the super strong password admin. Let's post let's let's log in and see what is going to happen what is going on what is going on? You can see, now we have an error. This is a dynamic error that is coming in from the back end says the email or password he specified is not correct. Okay, so something is going on over there. So the next thing let's go and work on the sign up as well to kind of sign up. So the first thing that I want us to change is basically before we go and continue that, I want us to route this link to the signup page. Okay, so let's add a URL here. So as a URL, URL and is going to go to sign up, sign up. This L sign up we will be serious. Okay. This is it. This is it. Now let's go back and refresh. Let's refresh it again. It saying it does not exist. What is this? Okay, let's go back. Let's go back. Sign up. Excuse me. Okay, guys, so it's apparently supposed to be account underscore sign up. Right? There it's okay, so no errors, errors, no errors, no errors, images also coming in so you can see when you open it and I send into account slash, whatever, whatever. So let's click on let's see what I see we are now on our sign up. Now. Let's go back on the signup templates in Alright, so inside this the same thing that we did for the login, they're supposed to have a file that is called sign up inside this account file over here. So they've been a wonderful person and the official Django Papa, I am moving this for that I further provided for inside this data file inside this account folder. Alright so now let's go refresh it and see whether I want to get take note of what you're seeing here is going to be different because mine is also going to be cloudy. Okay, so I see my into my hustle logo and other stuff over here. So let's, let's go and make some changes to it so that he uses the base your HTML file and that assets fast. Alright. So let's take out the spots Let's stand This so you have to move back that are actually based HTML then the next thing is less load in our static before we make any error is not as big as the Lord yes God wants to play it's my brain Okay the next thing we need is the block the title and the title is going to be oh shit nada Okay, going to be not saying sign up sign up right day the next thing I need is another block that is going to be called block on block or this let's move this into it as they call this parts what are we going to call it we've got the price blockquote there let's move over this thing insert like this allistic of this to here. Alright, so the next thing that we need to add as the background is bigger than the stick of this assets areas for reference this fall was static Alright, the next thing that we need to add as I want us to change this redirect CSI sends us to the sign at the login page. Okay, you're under sign up so you have to go back to the login. So you are to go to Accounts underscore login save it now let's go back and refresh Okay, so can see have something now you have something here. Okay, but now it's no less important. Sorry, I forgot about that. Let's take all this then and included include our navbar from the partial include partials. So supposed to be a string first you have to move back partials slash nav bar dot HTML save it go back refresh wait for a few seconds a few seconds what that is it's so our sign up page also can be very fully Beautiful, beautiful. Or so one or two changes then we are almost done at this place. So just as the other one here is the names and this one should be the same. So here is supposed to be password one the name suppose the password one ID password one, something like that. Yes, I think this is to do the right one. And you also want to Renda was the name our our arrows, okay, arrows, instead of having a statically typed over here. whereas it, this is it and we take it out and the code that I pasted in from the previous code, I'm going to paste it again. Same thing so you can pause it and type it in. Okay. All right. Then the final thing is the redirect the redirect and then alright. The Okay, let's put it let's put it here. Let me get it for my PC over here. Scoot over here. You can see scroll scroll. Righty righty. So I think that is all that is that I wanted as far as that is concerned. All right. So and the last thing the last bit obviously the last thing let's add our CSRF token using a form so CSRF token let's change this method from get to post to method is going to be post alright so now let's refresh Alright, so you can see this beautiful Tenova so let's try log in and see where they are going to get any errors. So that is my second favorite password in though let's click on log in they're going to be errors a few seconds small and wonderfully we didn't get any errors okay, because you're not supposed to be rendering this error server here because this is the signup form it's not giving us was the name the non fraud errors it is giving us a field errors Okay, so you have to use those ones okay. So instead of using this one over here, let's take out or this one today sorry about that guys. Use this one instead. Let me push this thing backwards a little or some you will Alright, it is the arrow they are going to use so let's refresh the illustrate again I'm using a very short sponsor sir we get an arrow to test whether their functionality is working okay, so you can see now that there is a camiseta password is very is too short, it must contain whatever whatever. So yes, you can see it's working so let's create a pass let's create a new account let's use a better password so let's see tests 1234 super strong password test 1234 Key Let's load a sign up and see whether it's gonna work can't see the password to is very common. So which was what I was going to say again? Okay, let's let's cisgendered up I'm going to use color cast as my password though I don't think it's going to camo kill artists. And it's also above it's Kyla test. Let's log in and see a sign up and she's gonna work. Okay, so you can see we are successfully signed up. Then you have also been redirected to our what's the name? The login homepage, alright. Okay, so you can see there's it So let's go back. And inside our navbar dot HTML file, I want us to do some quick changes, some PHP code changes, alright. So you're going to add another button. But we want to show sign in if the person is not logged in and sign out if the person is already logged in. So if request.user.is authenticated and not made out over here with an error so the.is supposed to be just simple. That is authenticated, they want to show this one over here or else you want to show another one that is similar to this one by one to log out, so sign out instead that change it, logout. So if a user is logged in, we want to show logout. That's the other way around. So let's move this one down Alright, so now let's refresh and see whether it's gonna work. So you can see because you have signed in, sign up and sign us in, that's why you're seeing the logged in. Okay, so let's work on the Logout functionality quickly. Okay, okay, so for us to handle the logout, you have to send a push your cache to the back end, which is going to handle that for us to make a post request, we also need a form. Even though all AWS provides a way of signing out on a get request, which will just make a request to the endpoints and to send a person out, it is not advisable to sign out a user using a get request. You can find more about it inside Django documentation. Okay, so get request is not made to make changes on a resource on the server. But a post request is supposed to do that. So it's more advisable to use a post request. So first, you're going to create a form over here. For me the method of post the action is going to be handled by self Okay, so I'm going to have your posts and you're going to move this button inside it okay now we're going to change the type Okay, the type is already solved mistoria by the type. So they're going to change the action, the action, the action, good action. And I want to pass it the URL to account account underscore logout. Okay. So, guys, you need to change this. Make it small. Sorry, sorry, sorry, sorry about this. This way. Alright. Make sense? Then need to provide a CSRF token because you're using a formos jiankou Cry CSRF token. I think that is it. Let's save it. Then go back. Let's refresh it. See whether we're going to have any arrows. Okay? So let's log out what's happened? You see we are logged out. So we can sign in again. Alright, so the Logout functionality is working. So guys, you're almost done with the authentication part of this project. Let's click OK. So let's make this thing go to the world in the sign up page, which is it makes more sense. So down here, the button that goes to we're going to wrap it with an h ref dot points two points to the URL of the login is going to be account underscore login Okay, so let's move this whole PWA towards, let's say, let's go back then refresh, refreshing. Okay, so give it a few seconds. My computer doesn't blows up. Guess click on it. Let's see where it says us. And voila sends us to login. So we can log in and see whether it's going to work. The account that I recreated was was the name B b.com. And the password was killer test. Let's see whether I wanted to get logged in. Okay, so it seems we have logged in, you're able to log in successfully. No errors now. Okay, so you can see our logout button over there. Okay, for some reason, since my was the fonts are not working, because there's not a font I used let me fix that in them check why that's okay, guys. So I think I know why that why the fonts are no working. I know looking grades. So inside the base dot HTML file. By its without guy, this guy. You need to add one class today to this thing here. Add font and a score. A font does primary. The primary Yes, fonts, just font that's primary. And also below the block here. Add in the scripts. This small JavaScript. I don't want to scare anyone. So this module received you're going to need it later. Okay, so just put it in for the meantime. Okay, let's save it. Let's go back and refresh and see whether it's going to look a little bit nicer and close out there. All that flex on page okay, I have a weird What's this? Okay, so now that's loaded in the fonts and it looks more beautiful. Beautiful, beautiful. Nice one. Nice one. Okay. So the next thing I want to do work on as the profile page, or yes, the, the, the view that is going to show us our profiles. Alright. So let's go back to Visual Studio code. Okay, guys, so let's jump into the views and right. The view for our was their profile page. Okay, so we can close this base html index dot HTML to kind of go sign up and log log into Congo down Sign up Okay, so now let's go back to our views py file so, I'm going to create another view so we're going to call this class class, the class profile list with us where we are going to list our profiles. So it's going to say heritage heritage view Sorry, sorry guys, then the next thing we need to get is the the Deaf gets defined our gets method. So self with digging, so for quests, arcs, and quarks. Then the next thing I want to get is the profiles. So profiles, the profiles of that our our current user, okay, ie serratus, assessing the, the current the profile page so so you're going to get it from the request dot user dot profiles that is the folder we just added to our custom user then because it since it's a many to many field, we can call that dot all on its we get all the fields, or the A profiles and you're going to return render render of our requests and was the name their templates name is going to be profile less dot HTML. So when you check the templates, which you cloned, you see a profile as it's okay, now we're going to pass some contexts arguments along so, we are going to pass a contest called profiles. So profiles are my What am I spell if you can spell profiles, okay. I wish it was JavaScript where you just type profiles that are going to do the magic for you. So, yeah, referencing this profile, okay. So, this is it, this is the view that is going to give us our profile list. But the problem is that if a person that is no sign in try to assess this this endpoint or this view, we are going to get an error because that person is going to be an anonymous user. And anonymous user instance does not have this profile instance on its profiles instance or the post profile photos on it sorry guys, okay. So we have to protect this routes. So we have to make it open to only sign in users are logged in users okay. So from Django sorry, supposed to be Django Django dot contrib contrib dot decorators want to import the login required? So with the login required decorator alright. Okay, so since you are using a class based view, we can't directly decorate this this view. So, we are going to use the method created to this to decorate the dispatch. The dispatch method, okay. So I'm going to pull down to from Django dot contrib a dot util sorry. utils dot decorators imports method okay with a decorator like this I essentially want to decrease the dispatch are going to place a decorator here so the art symbol you're going to use method the Creator right and the creator is the login the Creator login required decorator and the name of the method I want to create is the dispatch sheet so the service now we should provide a path or route for this view so let's go to our urls.py file inside the core directory then let's import profile list they go to patch and they are going to provide it this sorry profile oh what's wrong? Okay. Then I'm going to provide a profile less dots as you Okay, hope you guys are following then the name they're going to give us too far and our score list Okay, so see every day I leave right I guess so there's no arrow or there's an arrow for this there's no highlighted and that is a vital alive key the server is still alive let's go to the endpoint and see whether it's going to work slash profile and you can see we are logged in okay slash profile and you can see we have some 10 bucks it's not looking great so let's let's work on that template quickly. So let's go to profile list profile list no one is going to very simple quick quick quick quick. Since you have seen it already it is going to extend be stored HTML or another block a block title once a goddess prefer a stick of this one see goddess block content smooth this whole thing go down go down there's no discretion move this thing up. Okay, let's take these two then let's take our this nav bar and include include the one form partials slash nav By now go to HTML. Okay, save it. Then let's go back and refresh. See what happens. Okay, okay, so you can see you have something going on over here. Something going on. Beautiful, beautiful, beautiful. Alright. So this once this there's a static depth, I want to take those loose ones off and are going to look over the ones that we are going to break. Okay? Let's stick is this just going to live just one okay this one alright, thank you I went to run a for loop okay. So for for profile in profiles this okay write this and you want to make this 10 on each on a tag. Okay, so now we'll be able to, for the meantime, I want to make it a hash for the meantime. Okay. So when you click on the diff, it's going to send us to is going to allow us to use that particular profile. Okay. Right. So I want you to add in this template or this small HTML inside this div. Yeah. This thing over here, so we get the profile name, then it slides itself, we just have just one letter, and below a to replace the was the name. The profile name, the profile name. So we have like if it's the profile name is altered, they are going to have a capital or a big one and below 80 are going to have a trade there below it. Okay, so let's add this few plus flex Fluss dash call. That's going to be with Flex column and justify the center align center right center, right this right? And save it. Let's go back again. Let's refresh what you're going to see you want to like it? Because there won't be anything over here. Okay, yes, because our user doesn't have any profile yet. That's why it's not showing anything currently. Alright. So let's go back. So we are going to log out over here and see what's going to happen whether you're going to see this page or it's going to pick out from this page she's picked us back to the login page, or T. Okay, that's nice. So let's try since you are logged us, let's try going to the profile profile page again. profile like this should I go into the route again. And because we need to log in before we need to be logged in or the name to be logged in before you have access to that page or the view. It has brought us to the login page. Okay, so let's log in and see whether we can go there now be okay, this person, killer, killer test voila, we are redirected to our page our homepage alright. So the next thing I want to hit on is creating a new profile so that if a user comes in has no profile that him or her can go to the profile page. Okay. But before we do that, I want us to Add some changes to the view. So, to the home view, so if a user is logged in already, you want that person not to see the index page, but whenever he tries to access the home pages, you send him to the profile page. Okay? Now it makes more sense because what is already on the homepage is not is not something that's should be shown to someone that is already logged in. Alright. So if request, the user is authenticated. Thank you I supposed to request not request then you're going to return a redirect. Okay, so I'm going to click on it. She's going to auto import redirects, redirects for me, okay. So you have to add it to your imports. Okay, so you want to be redirected to call hyphen is no hyphens semi colon trufa Refer underscore list. Okay, so this year I'm using reverse reverse URL. Okay, so let's save it and since you are logged in user let's try accessing the homepage as to accessing the homepage which is less fees Okay, since you have some crazy errors down what's what's wrong? Oh, sorry, it's supposed to be 1000 So you guys got stats. Let's try refreshing. Since you are logged in see it redirects us to the profile page. Beautiful beautiful beautiful. Alright guys, so let's go and work on the profile creates Okay guys, so let's create let's work on their profile creates view so let's go down so it's always going to be class for for grades Okay, is going to inherit from view Okay, so you're going to have a get method now we're going to take in solve requests they can add some cracks okay then inside the get request, you want to return a form that form is going to help us create the profile here. So let's say I want to have let's just leave a comment form for adding no for creating creating a profile write the lecture 10 render everything or enough to render the request and retain the the profile creates HTML Alright, so let's save it there let's go and add it to the URL so first, let's import it in lesson 45 grids so yeah, supposed to be a capital. Okay. fuckwits like this they are going to use a pack when to send it to Foofa slash greets slash then you're going to the profile create greet.as view was set like this you so the name is going to be five grids as you just guessed Alright, Alrighty, so let's go and test it out let's check let's first check rasa life our key is to arrive there's been tested out profile slash greets it saw so you can see we have something over here so you have to get an edit our our was what the code our templates so templates right where this profile create screw this terminado so first you're going to do the usual stuff let's pick our distance distance stance base dot HTML then we need another blog title I'm going to call it live that test proofer greets supposed to be capita profile as looks nice let's take our this the stocks they call this one two. Okay. Then I have another block here called block content contents Alright, so let's grab everything inside it inside a section, the last section of this last two talks send it into the block content take out these two. Okay so now we have to take out this now didn't include our our naff Pasha last year last Naga HTML okay now civets is going through okay, something is coming through since you're supposed to be an image behind it. Okay, does my screen look thing that I supposed to look I feel like there's supposed to be an image behind it. So let's just add an image. This is image as a background file. Okay. So let's first load static in the section here, let's add an inline style that is going to take an aboveground. Now down to its image that is going to be a URL to static and you're going to use background or go Under gap let me check your static files so I've done this beforehand my laptop is freaking slow background underscore Netflix dot jpg lists dot jpg, jpg Okay and here let's add the classes lead at BG dash Koga. Alright, let's refresh and see how you want to look like alright, this one looks more beautiful. Nice it's a nice one. Okay, so the next thing you're going to do is you're going to work on the form on the form that you're going to use to create the the profile okay so inside our, our core directory, create a new file call from the UI from the poi Alright alright, so yeah, we're going to import one or two stuff so from Django not Django. What did I saw Django that forms Oh, this forms import model form alright and we are going to import our model to the form dot model imports profile that's what you're going to use scores Yeah, supposed to be dot models Okay, so you're going to create a class called profile for if I can spell to follow through a file Form which is going to inherit from the models the model form I guess, then we're going to give it a class meta sorry. Sorry about this combined thing is supposed to be class meta. And below are going to specify the model with a transfer method model is going to be equal to the profile model that we just brought in. Then you are going to specify an exclude Okay, now the folder should be excluded and the folder we want to exclude is the UU ID field surah the UID is generated dynamically from the back end alright. Don't worry about that. You don't have to worry about that. Okay. So now we are done with our the form for creating our profile. So let's import it in and use it here inside our view Okay, so first let's import it in from was the name from dot forms import profile form and proof of imports profile form Okay, so now we have our profile form here. So the next thing I want to do is we want to use our profile form. So from I'm going to create an instance of form of that profile form. So, profile form then instantiate it. And I'm going to pass it along a path along inside as a contest argument, right Alright, I hope it makes sense. Alright. So this is it. This is our formula. So this one is just the gets Metro so it doesn't make any doesn't make much changes, most of the functionality is going to be inside the POST method. Okay, so let's save it. And as we make some changes inside our creates templates. So you're supposed to have two fields, one, which is going to be a select and the other which is going to be so an input for the input for is going to take in the name. So here is supposed to be just name, a profile name. So the name here, you see I've been changing the name and the ID name. So the name here should correspond to the field name, the name that was given to the phone, and the ID should be ID underscore the full name, you get it. Alright, so here is going to be ID underscore name like this, and here is going to be ID underscore age limits. If you check the model you'll see that that's how they are called age limits, H underscore limits this is going to be ah underscore limits right this right, this is it's okay, now let's add our method today to the form which is going to be a post there let's add our CSRF token. Right, this is it, this is it. Okay, we are going so let's we can close this thing here. Let's close it down, then the form there let's go back to our view again. So with a get method we are we are done with it, you don't have anything to do with it. So the next one we're going to focus on is now the posts method. We're going to have a def post which is going to take in so requests and acts and quacks. Axiom cracks, then you're going to create the form instance again, another form instance of the profile, not mine oh sorry. So far form. But this time around, you're going to take in the request POST request dot post, or none. This is going to help I'll get to the data that has been posted from the front end here. So that is going to be stored is that a request dot post or none? All right. That means if there is nothing inside it, that's what is going to be done right or if there is nothing like a post, there is no post right. So first I want to check if the form is valid. If the form is valid form underscore valid. If I spell valid then if it is valid, we want to watch less first sprint, the sprint form dots, clean data that is going to give us the values of the form or right from the screen data When you're done, you want to return a render, as usual. So Django cried today return a render or a redirect, you have to return a response does what I want to see an empty, you have to return a response. So our response is going to be a render, you're basically going to do the same thing as this. Let me just copy it to save some time by this so save it. Let's go back to the form. And let's refresh this thing. So let's pass it in in Lesbos, ultra def. In the maturity level, want it to be all, then let's send a post. Okay, so the post has been done, let's go and check inside our terminal whether the values were so you can see the values came in, this is it. So the form was valid, and it's printed Declan data, so you can see the name here and the age limit here as for? Okay, so since we have those values, we can now go ahead and create a profile now. Okay, so instead of just printing, it's let me just comment, so you have it. So you can go to Profile. So I'm going to create a new profile instance. Okay. So I will just auto import it. So you can see that imported up here for me. Okay, so you have to import it in, if you're not using Visual Studio code. So you don't have to Tao auto import feature, then you're going to do objects, objects, dots grids. And you are going to spread the value that you're going to get from the the value that you're going to get from the clean data. Okay, so let's copy this in here. Let's just start with let's not, let's not be lazy. So we are going to spread it so because the dictionary used to asterisk creates so supposed to be theory, this theory. So instead of the so what's the we do not theory, okay, just to get through. So we're going to spread for four dots clean I need to go back to some spelling school or something like that, um, does clean data like this, all right. But you're going to store the provided is going to be created inside a variable called profile. Okay, so when we have this profile like this, that has been created for us. So if it's, it's able to successfully create the profile, then we want to watch redirects the, the ESA to the place where they're going to choose they're going to choose what login to their profile, okay? So if profiles are checking if their profile was created, and just not known, if prefer are going to return a redirect so in redirects anonymous organisasi I suppose redirect them to the place that you watch the movie streets, but because you have not yet created it, you're going to first redirect them to the profile page, where you choose your profile okay. So profile. So what was the way I read it in them is call us in reverse you are also proof profound as for list, okay. So this way I read it in them too. But one thing that we skipped it was that before somebody will be able to go to the place where they created a profile that person is supposed to log in. So we are going to do the same thing as we did for the profile list. We are going to protect our out like this, else, if a user that has no sign in comes into creates a new profile, there will be danger. There'll be a big problem. Okay, so now the profile has been created. Now the profile has been created here any redirection if the profile has been created, but this profile is created, and it is not associated with any new site. So for us to be able to associate it with the ESA, we are going to get inside here, before we do the redirects, you're going to get to the request dot user. Then we check the profiles we get to the profiles here. Then we add to rate because the men too many filled us at add, okay, we're going to add def profile to it. Or else it will just be a disclaimer to not be related to the user. Okay. Editor, it's beautiful. There now you can save it when tested out. Okay, so it seems everything is fine and preference. So first, let's refresh the decision or key. So what let's create for Archer def, like this, and the maturity is also that a con this submits, let's see what's going to happen. Okay, so you see I've been brought to our homepage, go to the profile place profile page where we can select a profile by since you have some weird styling. Let's fix that quickly. It looks too ugly. Okay, so where did he go wrong? So so so so so justify saying that airline Center is a Texan TNC what is going to happen? I don't know why that's happening. But we'll find out very soon. Okay, so that was it. So just add a text center. To here then is going to work then look beautiful now. So at first there were no too far here. But now you can see there's a profile here. So now let's we are going to work on clicking on the profile and it's sending us to the to the watch view, okay, where we can select a movie and watch it okay. Okay, guys, so now you're able to create profiles and now display them here. But we left out to Encinia we didn't link up the URL that helps us to create the profile to this button here. So let's do that quickly. So inside a profile list, HTML dot HTML come into this div Yeah, then let's surround the bottom which I'm Uncle and Uncle frog not as willing to have this as some space in between it and let's move the button into it this movie then, let's use our URL so I think it is cool. Dots. Pay column creates a profile create sorry guys. Profile underscore creates. Okay, so let's save it. Let's go back and refresh. Okay, so let's refresh. Okay, so now since there's something wrong somewhere, looking so that's nice that it's working. Okay, okay, so it's working. It's working. It's working perfectly. So let's go back So you're done with the profile listeria. So now what you want to do is that when a user comes to this profile list and he or she chooses a profile I should send them to the page that is going to list all the movie for them to choose the movie in which rich they want to watch OK, so let's work on that. So that one is going to be our movie list. It's going to be like a movie list view or something like that. Okay. So let's go let's jump into our views or py file close this to here is to false them please this one to get a basically data so you can move to the bottom and create create our new class based views so we are going to call it our plus or not or this sorry guys supposed to be at last class watch Oh, supposed to be a copy probably better be okay. And you're going to inherit the view then we're going to define a get a delegate a get method and we're taking self requests will be taking profile ID that is going to be the ID of the profile that was created. Okay, all the profile was selected, okay? To be right. Okay, then the next thing that you want is axiom quarks, okay. Okay, alright. So now and then what you're going to do within a nested and nested Okay, so spudding for that. So we are going to try going to use a try catch statement right Alright, so let's get into this so I said try catch try SF State rates, JavaScript has flooded my brain. So they're going to try and get the profile, the profile, which is the profile ID that was provided, okay. So don't use profile dot objects dot states. So, we are using a try accept cards because if this profile does not exist, it is going to true does not exist error. So that's why using the track try accept block so that we'll be able to handle the arrows will okay. So we are going to get into the UU ID Okay, the UID is going to correspond to our profile. Id like this. Okay, cool. So now we have our our profile okay, you have our profile. So what you want to do is you want to gather all the movies from the database alright. So to be movies What am I spelling My computer is freaking slow movie begins gets paid Sorry About Us guys. Okay, what's happening? Okay guys, so supposed to be movies. So as you can see the shutter I'm going to just to to come out with this video. Okay, so please, if you're new to the channel, please kindly subscribe to the channel. If you aren't already subscribed, please. Like the video key, please. I really cherish it. Okay, so we are going to FOTA the movies that already exists inside the database. And I want to filter with the age limit, so that we don't provide if the accounts or the profile is A kid's profile, we don't send it out movies, okay? So we are going to filter with the, the order name, the profile, age limits, okay, so we're going to get it from the profile. So if you remember, the proofer has age limits on it. And we are going to use the one to pass filter. So we are going to get the age underscore limits. Right this then, when you're done, we're going to do check for one thing, that if Okay, so now we have a profile, but we don't know whether the profile belongs to the particular user that is currently assessing it. So we want to check if their profile is inside the Karen, she says are the abuser that is assessing now, that page list of profiles, okay, so we are going to check that. So say if profile not in request, dot user dots to file files, that's all okay. If it is not in it, then we want to cause every redirect was a redirect and you're going to send a redirect to I'm going to send a redirect to call what's a colon fufa underscore list? That is where the list of profiles are at okay. But if it is in its or willing to return a render that has our request sorry, guys requests request and pass is going to use the movie list templates that's already made prepared for you. And you're going to pass along it's us it's with a contest with a contest dictionary, which is going to have our movies Okay. All right. Movies, what it means to have so hence you're going to reference these movies over here. Alright. So, but if there's an error or let's see, if you are not able to find a profile which is the probable error that can that can happen. So, profile the profile model has this does not exist does not exist error on it. So we can use now another exception, okay? Does Not Exist does not exist. So, if it does not exist, we also want to do the same thing as this one to a 10 day insert to the profile, the profile list Alright, so, let's save it up. Then. Let's go back. SQL Server store still running. Alright. Alright, it's still alive. So now you have our view here. So let's add it to our our urls py file Okay, so it's going to be a path that is going to have watch and it's going to take in a string, not as output form, underscore ID. Okay, so the act that you provided for the view should correspond to the name that you provide over here, okay? So I call its profile ID, that's why it's, it's being called profile IDs over here. Okay, so when you're going to use the watch when to the watch, you're going to call that as you on the model of on the view, you're going to give it a name of watch. Okay, so you have to import it here as yours, you're going to land in an arrow watch okay so we can save it up. But before we go and test it out, there's one thing that we missed out, you're supposed to protect the view from for only logged in users alone. So I'm going to copy this, this decorator over here copy this, then send it down this laptop of buy his way yet. That's what I have to out to make the video. So you guys still. So let's save it up. And let's go and check it out. But there's no way of us sending this profile or linking this profile to the view that we just created. So let's go and make some slight changes inside the profile list, VA templates. So ways that profile is templates to far less than the guy okay, so the change that I want us to make is I'm going to add a URL here, that is going to redirect us to the profile page to the watch page. Okay. So let's add a URL here. It is going to use or call on watch and are going to pass the profile ID as the profile.uu ID. Okay, the profile here is the current profile, we are looping over the currents of data we have from this profile he profiles list. Okay. I hope it's clear. So let's save it up. And let's go back and refresh. Okay, so now when you open this No, so you can see. Now we have a watch. If you look down here, let's let's just click on it and go to that page. So now you can see now you are able to be redirected to a new page by seeing if you have an arrow takes in one argument, whatever, whatever whatever. So it seems you made an arrow somewhere. So what happened? So let's take our URL. It's called profile ID profile underscore ID. So let's check our view. So that does the what I was talking about. It's from there always from now please. spoofer underscore ID so happened says or takes one positional argument or two was given. Give it give it the two I'm ready to begin to get paid Well, where did this error coming from? I know my not gonna become incredibly slow. I can't even check, check, check, check, check, check. Oh, my bad. Sorry about that. I'm sure you guys got that. I'm supposed to instantiate it so now let's refresh this thing again. Okay, so now you can see, we have some templates in arrows over here. So let's it's working just the template has to be fixed. Okay, so let's go into the what's the profile as you're done with the profile is started down Okay, guys, so open up the movie less than plates. So I think it is to be a good idea if we work on the template for the three last ones left is going to be the movie detail, the movie list and the show movie. Okay, that's us. Let's work on those three, then we'll get back into our view again. It's not supposed to keep longer than that. So we'll finish that quickly Okay, so this is a show movie. So let's start with the show movie. Let's start by taking out the distance of tickets it's now let's stand at a stand base dot HTML they are going to have another blog below that is going to be called Title we're going to have movie this okay so you can take out this one these two over here then you're going to have another block we're going to call this or this I are going to move in this too is to interrupt alright the last thing we're going to do is the block content okay. So, now we can take away was this can take away this parts the inclusion of the navbar so from the navbar to the head like this and take away the bottom parts as to tax they are going to move the main into their contents the blog content and are going to include include the navbar. Route from partials dot navbar dot HTML Let me save it. Okay. So I think we are done with the show, show movie. So you can close down under if you can, you can even do it quickly yourself but I just want to do it quickly so that we just take our houses or you just view it now views and focusing on better stuff. Okay, so let's delete this I'm going to extend this that is HTML okay, then the next thing we need is a blog title the same is your stuff going to placing detail page a stick of this tool over here another block let's call it all this winter move for this scripts dive into it alright the final thing I'm going to have is the block contents and the nav bar. So let's lay the nav bar away with today head tag and whatever whatever the body tag okay I'm going to have a block content Okay, so we are going to move everything inside this let me This is all I want let's move it into it Alright, so everything we need to Destin has been already copied and added to our base html file so we don't even need to again come close it can delete it right the nice one so yeah dammit I want to close its bow you'll be making some changes when we get there so don't worry no worry about those ones those changes so change okay, it is right after this video VGA Oh guys, so the last changes you need to make so let's delete this one extend these with HTML no then you're going to have another block that's going to be called Title we're going to our minutes enjoy Netflix enjoy Netflix alright this let me get away this leg and let's have a block or this this tennis distressful? Alright, I think we are almost done. So let's get away. This one here. We're done. navbar. And let's be include the navbar here. I don't think so. Okay, as I thought as much I should include the navbar inside the video. So let's include its face so include partials. Supposed to be a string partials start navbar with HTML okay, I guess we're done issue. The sixth element. Let me just confirm Something from the show movie Okay, so this PowerShell is supposed to be a string it's supposed to be a string before we land in another era. Okay, so let's continue with the movie list trying to move as fast as I can as long as I can. So you're gonna have another block called content the block content okay let's close or minimize this main tag move everything into the block content nice one a way this to tax that we expand it again because you're going to make some magic in here. Alright so now let's save it then go back and refresh and see whether we're going to have our pitch working we're going to learn in an arrow Okay, so you can see stuff are coming through but we are not getting an image or image here. So I had a static image over there so let's figure out who am I so it's going to be a background image okay, this is it. So, first let's take away the assets this up static around this. So, we need to load in our static file alright. So, so, we need to load in our static file right up here. So load static static like this. Then can go back and refresh and see whether magic will happen or not. Like I see the navbar is also not appearing if you forget to include it what is happening and you face again what on earth is happening and we check my console sure the file doesn't exist or something like that. I forgot to add those files to it. Okay, so sorry about that. But I don't know why they not by snowshoeing Oh, you forgot to include the number. Okay, I thought as much so let's include the nav bar nav bar HTML. So you can save it, then you have to do what's the image that is not there. So I'm going to free this recording. Then add the image image to the static file. After you guys as you can see, I've added the image to it. So when you check the complete project, you're going to find this image added to it. Okay. So let me close that one. And let's go back, refresh and see whether you're going to get this as you want it. She's fresh Okay, so now we have this div I have some styling issue since this styling is no common shoe. So I think I know what the error is where the error is coming from. So that particular button which is display went to Iran is a star is in lifestyle in lifestyle. So there's going to be a color of black. Okay, guys the only one that needs it, okay? Yes. So let's say we're okay. This is going to be our last refresh before we continue what you are going to continue Okay, so now you can see everything popping up nicely. So this is we are going to list our movies. So we take the movies from our, from our back end, then we are going to lesson two over here. Okay. Okay, guys. So let's do that. What are we going to do? We're going to look over the movies, okay, so the movies are rendered with this, this devil over here. So you're going to get away or the DIS below and you're going to live all you want just one there is you're going to use a for loop to provide it oh, sorry, sorry. So delete all of them and leave this particular one, the one that has the image and it's okay, the one that has the image in it. So you're gonna take this off I'm leaving the one with the image because it has some styling that I need. Okay, so just delete those ones without the image. Alright. So we're going to run a for loop on it so it's going to be a for loop. Join the for loop, the house movie, movie in movies. And with each movie, I'm going to create an anchor tag so that we'll be able to move to the detail page of a particular movie, okay. So for me tables, leave it as hash. Then I want to wrap it around this. This, this div over here, okay? So if you quite remember, each movie has a flyer. So the flyer is what you're going to place inside the div, right? So here, we are going to render out our image or the flyer. For us to rent out a flyer going to a movie, dots flyer. And we want the URL for that particular flyer. Okay? Not URL URL. Okay. So this is it, we save it. Now let's go back and refresh. See what's going to happen a few seconds more or so. So we scroll down. And voila, we have no movies so there's nothing rendering here. So what I'm going to be the I'm going to pause the video, then create a super account then go into the Django database, the Django admin, then add some one or two movies to the to the back end. Okay. So it's not so anything huge that's why I'm trying to make it let's get it together I don't want you guys to miss out anything my son is actually running loose I wanted to do it of upside but he does it together so that you have a full full view of everything happening okay so we are going to create a super user okay we are going to do that with Python manage pui creates super user okay I'm going to give its use only Archer Dave you with something simple my brain is static II II II ii.com admin the password is admin processes when going to be admin Yes Okay, so now this place and I let's go and use our Django admin localhost 8000 Plus admin so now let's log in. So, when to go a at a Let's go the password is admin oh okay, so it's logged in. So what we want to do is wonderful, we want to add movies but you have not added the the movie database to our our admin Okay, so let's do that. So let's go into core we're going to add our modules to the admin so the in the admin.py file is going to run with a few alpha I totally forgot for what about those steps. So from ruts models imports imports was the name of the model movie. Then also import profile and last but not the least Cornerstone Christo Musa and I totally forgot about this video alright so we're going to add it to add admin so admin dot site dot register going to have movie copy down change the stance I want to move further my laughter is lay down oh was this so is going to be profile see what it also it's doing with me to be a video in here Chris Donnie, sir. Alright, I think we are good to go now. Right? So now let's go back to admin and give it a refresh again. Okay, so now you can see those things over here. So, first, you're going to create a video. The video is going to be linked to a movie so it's totally cool. Just follow along first beta video we are not going to give it any title I are going to choose some dummy short videos that I downloaded from YouTube so what did I call them I placed them somewhere where did I place this is short short short short video this guy okay to see let's see what our particular movie instance then now go to the movies the video is does that account split your movie instance that fly list the F list this put some dummy with laughter so it's going to be a single movie and I'm going to choose one then I'm going to use the F list a limit is all so the service now we have a single movie installed inside our database. So let's go and refresh it. Let's refresh our homepage again so we can see now we have nothing there. Let's refresh it again Okay, since you have a problem, let's log out you guys are previous our previous user sorry about that guys the images are huge. So it's it's makes it slow to render. So it was using Kojo as khwaja.com. Killer just last login, you want to go through the process of creating another profile again. So okay, so now you have your profile. So let's use it Okay, so as you can see, I have a movie down here. Okay, so we have a movida here. I seem to have some error with our image. So let's check that one out it's probably some shark refreshing it again. Well, why is it's either not working. So let's just change. Let's inspect this Okay, guys, so it seems I found the arrow it's from here. It's not supposed to be movies supposed to be movie. Okay. Let's save it. Go back. Let's refresh this thing again. Okay, so you can see the images come into over here. Okay. So now we have broken this down movie. So we need to now make a detail page. Okay, so now you can also expand upon this. I did it myself. I've already done but I want to leave it as a challenge for you guys, where you're going to send a single video that is going to be a showcase. That's going to be the showcase movie. Okay. So I want to extract just one movie from here from the filtered movies yet. Now we're going to use this as your Showcase movie. Instead of using the static. The static showcase movie over here. I won't use that one as a showcase movie. So try that one out. Let me know your solutions down there inside the comment section below. Okay, did it for myself. And it was very simple. So I believe you guys can do that. So the next thing that we're going to work upon is the Detail page that when a user clicks on this, this movie should send into the detail page where he or she is going to see all the details about this particular movie. And then you can click upon it to go and watch it, okay. So let's jump back into Visual Studio code. And go into our views, okay, as usual. Okay, so let's create the movie detail page. So, let's go down let's create a new class called Show Movie. Do assuming this, the capital is going to inherit from the view. Okay, so the next thing we're going to do is you're going to define a get method going to take itself taking request and taking the movie ID the underscore ID and the last thing is going to take in the x x and quarks, alright. Okay, so what you're going to choose, you're going to try and get the movie The movie ID a movie with a movie ID okay. So we're going to use a try except block so that we don't get any error arrow. So let's clear this thing off when you try straight in a movie variable, you're going to get a movie dot objects objects dot gets where the UID t go to movie underscore ID right the next thing that we want to do is that if the movie exists then you want to return a render so try to explore return within a render have requests and are going to serve iterate today movie detail dot HTML pa templates now going to pass along the contest visionary so I'm going to pass along the movie The movie that we had right? But you want to check for exception exception. The only other scenario we have to check is there if the movie does not exist, okay. So if the movie does not exist, let's clear this assertion from day and use the movie. de Deus does not exist. Okay, if it doesn't resort to what you want, you do want to return a redirect to the profile page. Okay. So the profile is speech okay. So it then retain a redirect to reverse URL to profile underscore list like this. Okay. So now we have our view done. So let's add it to our url.py file. Okay, so Chara you Wi Fi, what you are going to do is you're going to first import show movie. detail. Okay, so you're going to use it inside are going to create a new party. And are you always going to be slash movie slash detail? Slash I went to thicken a dynamic value which is going to be power movie ID Okay, and close it out with an NS lash. Okay, so we are going to use a show movie do you feel like I spoke my detail? Okay, they are going to the door as you on it. And let's give it a name. Okay, and it's going to be called Show underscore debts a short version of show detail. Let's skip the list running. Alright, let's save it. Okay, so now we have that working. But where we want to use it actually is inside the home was the name the home where the movies are listed, so that when the user click on this one, I decided to take it to the was the name, the Detail page of this particular movie, okay, so let's add it this other URL to this one to the movie list speech. So where we are returning this hash, this h ref hash, you're going to use we're going to use a URL instead of the hustle, I want to return a URL here. So they are going to go to core core, the show underscore debts, they're going to provide their movie ID okay. All the underscore id going to be equal to movie.uu Id Alright. So let's save it Alright, so now let's refresh this thing again. Now let's go over this. So now you can see it is sending us to the Ito value. Let's click on it and see where it will send us to. Okay, so now it sends us a detail page. But the details there are static data. So we need to make it dynamic so that it uses the one for the particular movie that we just chose. Okay, so let's go into we can close this one over the movie data list and open up the movie detail templates. So, so open up show movie detail and let me expand my so that you see everything okay, so an open show movie detail a their movie ditto templates The first thing I want to change is the beat this thing over here I want to change I uses the movie title. So because you are sending in a context with the name of it, you can get from it the title Alright, the next scenario you want to change is this thing over here I won't use the movie detail that was provided you're going to get some weird stuff. movie description was it was hard to spot description okay. And I just want to make some changes here let's or this way is this a way to adjust this. Oh. Let's add an in an inline style here so now we can see the button. Just it's not showing for the entire let's just add a color of luck to it so little become black. Right? Rather move to is my laptop Vitiate ESCO it'll come back to where it's supposed to be. Let's kick it. Okay. So you're making it into inline style block the color the test block. Okay, so here we are using dynamic data, we're going to just take everything off we are going to render our movie description over here too via underscore description. So this pathway, it's on the image or the header part, you can slice the detail and just take like maybe 50 characters or 100 characters or less, depending on your preference so that you don't jam up the front. The first page this page is math. So I just show some, a little bit of a summary to it. Okay, then show all the details below, inside the URL description below. Okay, the next thing I want to do is the image the background. Okay. So this time around, you're not getting this from access, access, as I said as assets, or from static sorry, from static this area, I went to use a media URL. Okay. So we're going to grab this one and it is going to be that flyer. URL. So it's going to be movie dot flyer. That URL okay so you see that up there now let's go back and refresh this thing Okay, so you can see the flyer is in the description is also in but something that's wrong wrong some way I think I spelled something wrong and the styling too is off so let's less I think that's fine I know where the error is coming from so the style and religion I need to do is just take over this then justify end from the session I want to select you address for description war movie dot description are we are the scripts Oh no. We don't description is it and he said I he made the same mistake away as a description over here, so let's save it. Go back and try it for the fourth time I see what I was gonna work alright, so it seems that there's no description for the movie, and yet. I thought there was a description. That's let me check that quickly. Okay. Okay, guys. So I've actually confirmed it, it seems there when we're making the spelling for the model, we made a mistake, install the description will I omitted the T. So you can correct that make migration and migrate, then you have everything but I'm just going to just use it like that. Just take off the T sites work. So you can just correct it out on your end. Okay. I'll have to have to do want to talk to you guys. Let's refresh. So you can see now the description is not coming through this. It's any of the other ones over here. So I just noticed one thing I tried to log out over here. Let's see. And I had this red arrow it actually did log out. Wow. Okay, maybe I don't know why. But when I tried to log that I had a CSRF error. Okay, So you can see, you know, the description is coming through, so you can make it better. We have already wasted a lot of time, so I can't go about making description and other stuff. So the styling and everything has been done for you just have to place in more detail. More objects inside. The admin just creates more instances, okay. But there's one thing I want to help you do that, which is if there is the movie is a seasonal movie, we have to display you see when it is you're watching a Netflix movie, and you go to the detail page, and then it's a seasonal movie, they show you the episodes, and you can choose which Episode Are you want to watch. That's what I want us to do. I'm going to copy in some code and I'm going to explain why I'm not actually going to actually going to create a seasonal movie. So that we experimented with it, okay, but we did my best to make it clay, dry able to understand it. So, scroll down a little bit outside the session. Okay. So above the description over here. When you paste in some code, you can pause it and type it in. Okay, so let me paste it in. Okay, so this is it. So first, I'm checking the movie type to see whether it is equal to CS now. So if it is season, I'm going to create a div here. And I'm going to display an age to say episodes, and I'm going to loop over the the movies inside the the movies inside all the videos that has been linked to that movie. The movie instance. Okay, so a movie is linked to a video instance. Okay, so let's say a particular a particular episode that has been linked to a main main main movie, okay. So I'm going to loop over it, then I'm going to first get the gets what gets the for loop counter, which is provided to us by Django. And I'm going to get the movies episode title. Okay. So then I display all that, then you can see I am making some HDF over here. So you let me take, I'm going to live it for the meantime. I'm making some URL over here, which is going to call play, we have not yet created it. There then I'm adding the movie ID here. And I am adding what an epi the API is going to be help us get to the particular episode that was clicked on. So we'll be able to show the user the particular episode that they clicked on and not the first movie, okay. So this is it. So you can just type in this code, it will become more clear if you fasted yourself. Okay. So that is it. Okay, so, what you're going to do next is you're going to click create the page that is going to show us the movie itself. Okay? So then click on the play button display button over here. Be able to know which be able to play the movie to us okay. So let's go back into our views where's my view? Where's my Okay, so I've opened up my view and first the before we begin that I want us to protect this router let's just copy this method over here copy this then place it on top of this one slowly adjust the greeting at the login required decorator then let's move down Okay, so we're going to create a new class the class is also going to be protected and is going to be called class. Show sure movie tool is going to show the movie and he's going to hear it from view and you're going to have a death forget that takes himself. They can request takes in a movie ID B underscore ID and when to take in X axiom quarks okay. Then you're going to try and get the movie so we're going to study the movie instance. And we're going to get the movie dot objects dot get objects object dot get I'm going to go with a UU ID and it's going to be cost to the movie underscore id okay then you're going to be 10 We're going to illustrate this we movie we're going to reassign the movie constant or the movie variable to movie the value movie does videos in the movie snap editor but I see what's going on with our video videos dot value okay. So we are going to get some sort of a list okay. We are going to return it return a render of request we are going to retain the templates show movie dot HTML All right, then we're going to add the contest a contest this Narita is going to have your movie this movie this way so I movie this way okay you're right okay so now you're going to have an exception you're going to check for movie dots does not exist if he does not exist you guys know I guess what do you want to do want to return a redirect redirect to pour proof underscore list Okay, so this is it so we are done with this bat so let's save it our let's win other than this view to our our URLs so first let's import it in then let's create a path for it. So we are going to give me a pact are going to call that particular path play. And also not play the movie nice play slash for gospel movie will also this will be slash please slash STR which is going to be via that score ID. Okay, let's get out of it. Then movie.us View Show movie.us You We're going to call it the name is going to be play. Alright. So let's save it up. And now the next thing I want to do is we want to use this URL inside the show movie. So that when a user clicks on their button play inside it is take them to this home page, bring them to this page, okay, or this route. So let's go into our movie detail page and what you're going to do is you're going to wrap around this button, an anchor tag so down Kota is going to have a URL that is going to point to play also called let's play call column play this causation and namespace So, you're going to have your movie ID going to be equal to movie.uu Id Okay then let's move in this button is all button over here save it up. And as you go to the field page now says refresh will be don't get in here. Okay, so now we have in Euro so this thing now can take us to the page. Let's click on it. Okay, so we have an error as beautiful as said doesn't have value, probably Shula value, no probably doesn't have value, it's supposed to be values. So let's change this thing over here and let's refresh this Okay, now I see. Okay, so supposed to be slash. So let's go into our show movie instead of it's been movie dots. Now. Pastures dots now by supposed to be pasture slash this way now, let's refresh again. Okay, so now you can see, we have our page showing where the movie is now. It's not, it's not being played. Okay? That's sad. No, Netflix, Netflix, that's a movie. That's bad. So let's go into our, our templates once again. So this is where we are going to be the magic happens. So instead of showing this static, a movie that is rendering from some asset and which is not working, so clearly, let's take it off let's take this whole thing off. Alright. So we are going to using some JavaScript Okay. So first thing I want to do is I want to pass the value that is going to be sent from the front end is going to be in a form of A is going to be sent from the back end. Or the view is going to be in the form of a list. So we want to pass it then send it to Surah Damascus be able to have access to it with So the best way to do it is to use the JSON. The script JSON script tag, okay? So the name of it is going to be movie now using the JSON scripts Okay, so JSON scripts are going to give it a name. I'm going to call it movie underscore data. Okay? So beneath this mean, I'm going to paste in some JavaScript that I'm going to go to, and explain it for you guys. Okay. So okay, so this is a JAVA script over here. So this is it. This is basically it's all together within was going to see Oh, god. Okay, so this is everything so. So first I am getting, I'm selecting this video tag here, then I am passing this data that has that I've sent from the from the view here, which is in the form of a list, then I'm grabbing it over here. So I'll do it. Okay. So when I'm done, I am creating a new URL, which the location dot ref, which is the current URL that we are on, then I try to get out a parameter. The parameter is called epi. So when you check the movie detail, when I added this, let me show it to use, it becomes a little bit clearer. When I added this block of code that was looping over the movie. So in case it's a seasonal movie, it's going to have an epi at the end. Will you tell us which particular episode they use or want to watch? Okay, so that's what the EPI is for is like for episode, okay. So that's what I'm trying to grab from the URL. Okay. So, try to grab that from the URL. But if it does not have an API, then it means that the person is trying to watch a single movie. So we make the video parameter, what is zero. So if it's as the API then settings to the API, okay, and this is passing to an integer. So whatever is going to come out is going to be an integer, okay? Then, we try to select the video fodder you want to watch. So the listener is going to come out of here is going to provide a link to give us a list of video files. Okay? So the video file is going to be in order. So episode, if it's a seasonal movie, episode one is going to be first episode two is going to be second three in that order. Okay, so we get to that particular episode, then we get to the file, the file is going to give us a URL. Okay, the file is going to give us a URL, then we just made the path to that URL with this thing over here. This, this our root URL, which is pointing to our media files, okay, I hope I didn't confuse anyone. Okay. So this is how you're doing it. So let's save it. And let's go back and refresh Okay, so since you have some arrow somewhere like ECCS, you can pass what about about the sun? So I think I know where the arrow is coming from. So so instead of inside the view.py file here instead of sending the movie, we are going to send a list. We're going to wrap it around a list Okay? So make it a list instead of a query, to query whatever I'd have talking about. So let's save it's going to be able to pass it to Jason. So let's refresh. Okay, so now you can see this time around, we have a video showing up. So we can play the video. Some VH yet very simple short video that I downloaded from somewhere. Okay, so we can see everything is working. Now we can play a video. So let's, let's go back you can can't go back. Okay, so when you go back, then you click this thing over here, play. Once you send us to the page where the movie is supposed to play, then voila, we can go ahead and play our movie. Okay, so guys, this is basically the end of the
