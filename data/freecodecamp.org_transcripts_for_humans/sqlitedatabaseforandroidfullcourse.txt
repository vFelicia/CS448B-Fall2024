With timestamps:

00:00 - hi we're about ready to start on a
00:02 - tutorial that will show you how to use
00:04 - sqlite which is android's database
00:07 - system used for local
00:09 - [Music]
00:14 - storage name is chad slutter i'm a
00:17 - professor of computer science and
00:18 - software development at grand canyon
00:20 - university in phoenix i'm really glad to
00:23 - be here at free code camp and provide
00:25 - another resource for you i endorse free
00:28 - code camp i've used it in my classroom
00:30 - i've used it personally it's a great way
00:33 - to become smarter in many things so the
00:36 - goal of my career is to make you a
00:38 - software developer and free codecamp is
00:40 - a great resource so let's get started
00:42 - here with the next lesson
00:44 - so we're going to create an application
00:46 - that will demonstrate everything you
00:47 - need to know about sql lite
00:49 - so first of all let's ask yourself when
00:51 - you're designing an app where would you
00:53 - save your data so you're collecting
00:56 - names you're collecting products you're
00:58 - collecting locations whatever it is that
01:00 - you're collecting you want to be able to
01:02 - save it somewhere so your first choice
01:04 - might be locally you could save things
01:06 - to a text file on a local directory or
01:10 - in the sd card or as we're going to show
01:12 - you in this tutorial how to save to the
01:14 - sql lite database you could also think
01:17 - about saving your data online or maybe a
01:20 - hybrid of the two options
01:22 - so you could work with api services
01:25 - which are third-party opened
01:28 - access to let companies use their data
01:31 - and you can even buy or build your own
01:33 - api services if you want to save your
01:35 - data you can also set up a sql server
01:38 - that runs online and you can run sql
01:41 - commands against it or you might use
01:43 - some of the online instant service
01:46 - databases such as google's firebase or
01:49 - microsoft or something from mongodb
01:52 - which is all these things that are nosql
01:54 - databases so there's lots of options so
01:56 - if you're building an app and you want
01:58 - to save your data you're probably going
02:01 - to come across this type of data which
02:03 - is json data so json works well with
02:06 - text files it works with api services
02:09 - it's for transferring between different
02:11 - platforms now we're going to be working
02:13 - with a local sql database so we'll be
02:15 - writing sql statements that look
02:17 - something like this you could also think
02:19 - about using firebase or something along
02:21 - the lines that has a nosql
02:24 - structure and so your data can take many
02:26 - forms and there are different advantages
02:28 - to choosing each
02:30 - so here's some advice on why you would
02:33 - save your data to a local instead of a
02:35 - online service so local database would
02:38 - give you the fastest performance that
02:40 - you can get so it's nice to have your
02:43 - data online but it's also nice to be
02:45 - really quick so an offline cache or an
02:48 - offline collection of data keeps your
02:51 - app working even if you're out of cell
02:53 - phone service a local storage can be
02:56 - maybe just a subset of the entire
02:58 - collection of data that you need so i
03:00 - think that maybe a good example of this
03:02 - is google maps i've noticed that when
03:04 - i'm out of cell service sometimes i can
03:07 - still search for certain regions of the
03:09 - country and others i can't because
03:11 - there's a local storage on the device so
03:14 - if you build your app to have some local
03:16 - storage your users can somehow
03:18 - get by even if they're out of cell phone
03:21 - range
03:21 - now also if you're trying to do any auto
03:24 - complete you know when you type in a
03:26 - search term and their suggestions given
03:28 - to you that's a database lookup and so
03:31 - if you're looking up databases that are
03:33 - local it's fast if you rely on a remote
03:37 - service to do all your lookups it's not
03:39 - fast it's a bad idea so use autocomplete
03:43 - for local databases
03:44 - also if you think about cloud storage
03:46 - there's obviously advantages to cloud
03:49 - first of all every device and every user
03:51 - experience is going to have the same
03:53 - data so if you update a record in your
03:55 - app that is saving to the cloud
03:57 - the next time they log into a website
03:59 - for the same app they'll have the most
04:01 - recent copy of what they did so sqlite
04:04 - is a database that is something like you
04:06 - would expect in microsoft access it's a
04:09 - single file it's a text file that's
04:11 - encoded in some binary format it's not a
04:15 - large scale thing it's meant for one
04:17 - user and so all things are simplified so
04:22 - sqlite is embedded
04:24 - there's no installation required you
04:26 - don't have to go ask for any new
04:27 - libraries it's part of the android
04:29 - system
04:30 - it's something called acid compliant
04:32 - which simply means that if something
04:35 - goes wrong during the middle of a
04:37 - transaction you won't corrupt your data
04:39 - if you want to see more about acid
04:41 - databases and the compliance about
04:43 - having
04:44 - different rollbacks i have a tutorial on
04:46 - that in a different series
04:48 - now if you want to if you think about
04:50 - the size of your database it's very
04:52 - light so it will run quickly and all the
04:54 - methods must remember to close off their
04:57 - connections to the database so
04:59 - we don't lock up the
05:01 - database for other applications
05:04 - now you can also do read-only queries
05:07 - and not have to worry about having
05:09 - simultaneous access to it
05:11 - so there are ways to manage sqlite and
05:13 - you're going to see in the tutorial that
05:15 - we're about to begin
05:16 - is that we initially create these tables
05:19 - and databases in the application itself
05:23 - so you don't have to go and launch some
05:24 - third-party tool like my sequel
05:26 - workbench or anything you're supposed to
05:28 - be able to code this in the application
05:30 - so the first time the user uses the
05:32 - application the tables are automatically
05:35 - generated and so no setup required by
05:38 - the user now there are other tools that
05:40 - we'll take a look at that will let you
05:42 - peek in and modify the database if you
05:45 - need to and so that would be like sql
05:47 - workbench but they're not required
05:50 - now the data types that you can put into
05:52 - a sqlite database are pretty limited
05:54 - first of all you can have a null value
05:56 - you can put in integers which are
05:58 - automatically scaled so that the numbers
06:01 - are
06:01 - appropriate to the number of bits that
06:04 - you need to represent them now a real
06:06 - number is like for a decimal or a
06:08 - floating point so you can save them as a
06:10 - real type text covers almost everything
06:13 - so long text short text they're all text
06:16 - and then also something called a blob so
06:18 - don't even bother with blobs i wouldn't
06:20 - put them in your database just if you
06:22 - have big things like jpegs or movie
06:24 - files save them in a directory and then
06:27 - put the text of that link into your
06:30 - database so your database remains small
06:33 - and you can get to those files in a
06:35 - folder
06:36 - now let's talk about a specific sql lite
06:38 - library in some of the class methods
06:41 - that we're going to use so we're going
06:43 - to create instances of the sqlite
06:44 - database and the sentence will look just
06:47 - like this in the code where it says get
06:49 - writable database then we're going to
06:51 - use the sql helper and this is just in
06:54 - another video that's ahead that will
06:56 - create the database automatically the
06:58 - first time that it's required so you'll
07:00 - be seeing that in just a few minutes
07:02 - so one of the methods that we're going
07:04 - to see is called the open or create
07:05 - database it will open an existing
07:08 - database or if that has not been created
07:10 - yet will automatically make it for you
07:12 - and so this is what the code will look
07:14 - like so we will create a database
07:16 - instance and then we will create this
07:18 - method where it says hey
07:20 - go ahead and create customers.db and all
07:23 - the work is done for you
07:24 - also when we create tables we will have
07:27 - another function just like you'd expect
07:29 - in a sql statement where we create a
07:31 - table mention all of its properties and
07:33 - then execute that table afterwards with
07:36 - a query string execute
07:38 - also a concept that you're going to see
07:39 - come up is called the cursor so a cursor
07:42 - is pretty much a result set so when you
07:44 - get a list of items back from a search
07:47 - query you're going to have a cursor
07:50 - which is going to be something that you
07:51 - can iterate through and go line by line
07:54 - and then print them to the screen or
07:56 - assign them to some other value and so
07:58 - we'll be using the cursor inside of a
08:00 - while loop
08:02 - also we're going to work with something
08:04 - called
08:05 - content values
08:07 - so content values is kind of an odd
08:09 - thing if you haven't seen it before it's
08:11 - like an associative array or a hash map
08:14 - where you can put some key value in in
08:18 - pairs so like in the example here if i
08:20 - want to put 1 for the student id and
08:23 - jeff for the name and grade 9
08:25 - you just do it like this and then when
08:27 - you insert it into the database it says
08:29 - hey i can automatically see the column
08:31 - name associated with its value so
08:33 - content values is something we'll be
08:35 - seeing soon
08:36 - so here's what the app is going to look
08:37 - like when we're done you can see if i
08:39 - choose view all i get everybody if i add
08:42 - somebody
08:43 - let's try jeff he's age 7 and he is an
08:46 - active customer it says i have
08:48 - successfully added him and he shows up
08:50 - in the list as person number 12. if i
08:53 - click him it deletes him and so if
08:55 - you're interested in this sqlite
08:57 - database continue on we're going to show
08:59 - you how to do it step by
09:06 - step hi let's create an application in
09:09 - android studio that uses the sqlite
09:12 - database to save our data on a local
09:16 - database
09:17 - [Music]
09:25 - so you can see the app that we're going
09:27 - to make is on the screen here if i put
09:29 - in a name and an age of somebody and
09:32 - then i push the add button you can see
09:34 - that it adds it to the list
09:36 - also in the background there is a sql
09:38 - database that's running and so the point
09:40 - of this tutorial is for you to be able
09:42 - to set up a database on your android
09:45 - device query it and delete things from
09:47 - it and so in this first video
09:50 - we're going to go through the setup
09:51 - we'll set the layout and we'll to all
09:54 - the buttons in the list view and
09:55 - everything and then in
09:57 - following videos we're going to set up
09:59 - the classes that will manage the data
10:02 - and especially we're going to work with
10:03 - the database so let's get started now
10:06 - with the part where we add the layout to
10:09 - the application
10:10 - so this is what the layout's going to
10:12 - look like when we're done you can see
10:14 - i've got a couple of edit texts i've got
10:16 - a switch a couple of buttons and a list
10:18 - view and here's all the items that we're
10:20 - going to create so if you're really good
10:22 - with working with layouts you can
10:24 - probably skip to the next video and do
10:26 - this one on your own however if you'd
10:28 - like to have some help on how these
10:30 - buttons are all arranged we'll get
10:32 - started right now
10:34 - so we're going to get started with the
10:35 - application let's launch android studio
10:38 - you can see that i'm working on version
10:40 - 353 i'm going to start a new project
10:43 - let's choose empty activity and next
10:45 - let's name this thing sql demo
10:48 - i think i have to name mine as version 3
10:50 - because i've done this several times the
10:52 - language i'll choose is java and i'm
10:54 - going to choose the minimum api level as
10:57 - 14. i believe somewhere along the line
10:59 - we will have to bump this maybe to 19
11:02 - because of the database features but 19
11:05 - will come when it needs to be i'm going
11:07 - to uncheck this that says use android x
11:09 - artifacts and then i'm ready to go for
11:12 - finish
11:14 - looks like the app is all ready to go
11:16 - so i'm going to take you through the
11:17 - part where we put all the buttons on the
11:19 - screen and arrange them in the right
11:20 - places so let's get rid of hello world
11:23 - i'll select it and press delete
11:25 - and i'm going to expand to get some
11:27 - space to work with and start dragging my
11:29 - items out onto the screen
11:32 - first thing i need to do is put plain
11:33 - text on the top of the window here so
11:36 - let's drag out the item then it's going
11:37 - to give me name
11:39 - so i'm going to set the anchor points to
11:41 - the edge of the screen
11:42 - to the left side of the screen and to
11:44 - the right side of the screen so this is
11:47 - all how you work with a constrained
11:49 - layout so the constraints are like
11:51 - springs that pull the items to the sides
11:54 - let's give it a little bit of a top
11:56 - margin so i'll put in 8 pixels so it's
11:58 - not quite at the edge of the screen
11:59 - and for the width i'm going to set it to
12:02 - match constraint which will make the
12:04 - entire screen
12:05 - looks to me like we could use a padding
12:07 - of 8 on each side all right so that's
12:11 - going to be the name where we put in the
12:12 - name of the person
12:14 - it's a good practice to change the id
12:16 - names so that they're more descriptive
12:19 - so this one is going to be called et
12:21 - underscore name
12:23 - now down in the text area i'm going to
12:25 - delete the part that says name and
12:27 - change it to the part in hint
12:30 - so i'm going to put in the word name now
12:32 - i can't put in the word name because
12:33 - it's already been defined here as app
12:35 - name so what i'm going to do instead is
12:38 - i'm going to put in here customer name
12:41 - which is its own string
12:43 - as i hover here you can see that there
12:45 - is a warning that says
12:47 - hard coding is not a good idea you
12:49 - should use string resources
12:52 - so instead of typing in customer name
12:55 - here i'm going to cut it out
12:57 - and i'm going to the end where it says
12:59 - here pick a resource
13:01 - so the resources are a centrally located
13:04 - spot where you can put your strings so
13:06 - i'm going to add a new string value and
13:08 - i'm going to call it customer name
13:11 - and the value is customer name with a
13:13 - space and let's choose ok
13:17 - now the same result in the end shows
13:19 - customer name here but the reason why
13:21 - you use string references is because if
13:23 - you have to change the language of your
13:25 - application all the strings are found in
13:28 - one location so if you go look under the
13:30 - resources values and strings
13:33 - you will see the new guy called customer
13:35 - name has just been added
13:37 - so that's the strings
13:40 - all right so we better keep moving here
13:41 - i want to put in the next item down
13:43 - which is for the customer's age so i'm
13:45 - going to select a number attribute here
13:50 - it's the same kind of a text edit but
13:52 - it's going to be a number so let's see
13:55 - it says what do you want your constraint
13:57 - to be i'm going to set it to the top to
13:59 - the bottom of the name there we go and
14:02 - then i'll anchor this to the front and
14:04 - to the back
14:06 - i will change the width to match the
14:08 - constraints
14:09 - and for the hint so i'm going to use the
14:11 - word age
14:13 - and once again i'm going to select a
14:15 - resource
14:17 - and we'll call it customer
14:19 - age and i'll put in the word age
14:23 - okay i'm going to set the margins again
14:26 - let's go 8 around the edges
14:29 - so the point of this is that i want to
14:31 - use several data types for my database
14:34 - so this is going to be a string
14:36 - age is going to be an integer and we
14:39 - need to have a boolean so let's go into
14:41 - the buttons area and i'm going to select
14:43 - one of these now you could use a check
14:45 - box i'm going to use a switch
14:48 - so let's drag a switch out and anchor
14:50 - them into place
14:52 - so now i got my switch anchored let's go
14:54 - find the text property instead of saying
14:56 - switch i'm going to put in here active
14:58 - customer
15:00 - actually i don't want to just hard code
15:01 - it again i'm going to choose a resource
15:03 - and click add a new resource
15:06 - and call it active customer
15:09 - okay i can't put in spaces in my
15:12 - resource names
15:14 - next i need a couple of buttons so just
15:16 - the standard button and the other
15:19 - standard button
15:21 - i'm going to link these as well
15:23 - so the first button is going to fall
15:25 - underneath of the active customer
15:28 - and let's give him 8 pixels of buffer
15:32 - now the second button we want to be on
15:34 - the same level as here so i could anchor
15:36 - him to the active customer or i could
15:38 - anchor him to the top of the first
15:40 - button
15:42 - now i'd like to spread these out so
15:43 - let's do the button
15:45 - here to go to this edge
15:47 - let's do the right button to the right
15:49 - edge
15:50 - now this gets tricky i want to make
15:52 - these equidistant from each other so i'm
15:54 - going to tell it to anchor to this
15:57 - button over here
15:59 - and then for this guy i want to anchor
16:01 - to the left button and it never seems to
16:04 - work for me
16:05 - nope doesn't work so what i have to do
16:07 - is i go into the text area and do it
16:09 - manually and i want to set this
16:12 - as a new constraint so i'm in the xml
16:15 - code and i'm going to type in constraint
16:18 - and i'm going to put in the word start
16:20 - so the start is like the the left side
16:22 - of the button so the start is going to
16:25 - be matched to the end of another control
16:27 - which is button one
16:29 - and so now you can see they balance out
16:31 - so they're kind of in the middle of the
16:33 - page
16:34 - all right so we got the buttons on the
16:35 - screen we got them centered now i need
16:38 - to change some uh the ids so let's go
16:41 - into the edit text first of all this is
16:43 - called edit text 4 and i'm going to
16:45 - change it to e t h
16:48 - and just set that and say yes i'm going
16:50 - to change it
16:51 - now for the switch let's change him to
16:53 - be called
16:54 - sw for a prefix and then we'll put in
16:57 - the word active
17:01 - now for the buttons here i'm going to
17:03 - change them as well so btn is my prefix
17:05 - that i like
17:06 - i'm going to call this thing view all
17:10 - and for the text i'm going to change it
17:12 - to be
17:14 - view all
17:18 - the other button let's change from
17:19 - button to
17:20 - to be called btn
17:22 - add
17:28 - and let's change the text to add
17:31 - all right the last thing i want to put
17:32 - in here is a list view so i'm going to
17:35 - use the legacy items and call list view
17:38 - now list view is considered legacy
17:41 - because there's a new improved version
17:43 - of a list view this one's a lot simpler
17:45 - to work with so for our simple tutorial
17:47 - we're going to work with a simple list
17:49 - view the one that you probably should be
17:51 - using instead of a list view is called
17:53 - this
17:55 - recycler view the recycler view is more
17:57 - efficient it runs faster let's do the
17:59 - constraints i'm going to attach this one
18:01 - to the bottom of the button
18:04 - and to the left side of the screen
18:06 - to the right side of the screen
18:08 - and to the bottom so it doesn't really
18:10 - look like i'm creating constraints but
18:12 - if i go look in the text view i should
18:15 - see some constraints here and i do not
18:17 - have an end
18:18 - so i want to choose constraint end to
18:21 - the end of
18:22 - and i'm going to choose the parent all
18:24 - right it looks like i have all the
18:25 - controls on the screen one thing that i
18:27 - would like to do is give this thing an
18:29 - id so let's go and call it l view and
18:32 - we'll call it customer list
18:35 - and we've got ourselves the complete
18:37 - process let's run the app and see if it
18:38 - works
18:39 - hooray it looks like everything ran so
18:42 - it looks like i'm able to put in some
18:43 - numbers here
18:44 - and then i'm able to click the buttons
18:47 - even though nothing happens we're ready
18:49 - to go on to the next part hey welcome
18:51 - this is part two of a video series for
18:53 - making a sql light database on an
18:55 - android app so in the previous video we
18:58 - created the layout in this video we're
19:00 - going to create the model that will be
19:01 - the data for our application
19:05 - [Music]
19:12 - hey so i'm glad you stuck around for
19:13 - part two here we're going to create a
19:15 - model which is a class that will hold
19:17 - values of a customer so let's go into
19:20 - the area where we have the java code you
19:22 - can see that main activity is already
19:24 - here and we're going to add something to
19:26 - it to join it so let's do a right click
19:28 - new and a java class now a java class is
19:31 - just going to hold the data for our
19:33 - object so we're going to create the
19:35 - class we'll call it customer model
19:39 - so let's think of three things that we
19:40 - could add to our customers we could give
19:42 - them a name an age and a boolean value
19:45 - called is active and so these three
19:48 - things will demonstrate the database
19:50 - fairly well different types of data even
19:52 - though it's not a very complex object
19:56 - also think of an item that's missing so
19:58 - name age and activity that seems to be
20:00 - about right how about the id number so
20:03 - there's a debate should you keep your id
20:05 - number as part of the class or just
20:07 - ignore it and use it as the database i
20:09 - recommend that you have it as part of
20:11 - the class
20:12 - so at the top i'm going to also add
20:14 - private int
20:15 - id and so this object has four
20:18 - properties
20:19 - usually the next thing that i create in
20:21 - a class is its constructor and so i'm
20:24 - going to make two of them let's do a
20:26 - right click in the text and choose
20:28 - generate
20:30 - i'm going to select constructor
20:32 - and select all of the properties
20:34 - and click ok
20:36 - so this is standard programming with
20:38 - java and any object-oriented language so
20:41 - a constructor is called whenever a new
20:43 - customer comes into being so when he
20:45 - pops into view we have to tell it what
20:48 - his id name is what his actual string
20:50 - name is what his age is and if he's an
20:53 - active or inactive customer and so all
20:56 - of those are four parameters that we put
20:58 - into the constructor
20:59 - sometimes an application requires a
21:03 - non-parameterized constructor and so i'm
21:06 - going to just create one and leave it
21:08 - blank i'm not sure if we'll use it or
21:09 - not but it's here just in case
21:11 - the last thing that we'll need for this
21:13 - class is for the getters and setters so
21:16 - once again we will right click choose
21:18 - generate getters and setters and i'll
21:20 - select all of the properties so all four
21:23 - of them and click ok so if you count
21:25 - these you should see that there are four
21:27 - getters and four
21:29 - so there's one more thing i'd like to
21:31 - add is the two string method the two
21:33 - string method is necessary if we're
21:35 - going to print this and so sometimes we
21:37 - print it in the log sometimes we create
21:39 - it in a message on the pop-up sometimes
21:41 - we put it in a list but tostring will
21:44 - take all of these properties and put
21:46 - them together into a single string
21:48 - since the tostring method is very common
21:50 - it's part of the menu that you can
21:52 - generate automatically so right click in
21:54 - the text choose generate
21:56 - select tostring and all of the
21:59 - properties now when our two string
22:01 - method is all put together it will
22:03 - create a whole string that says customer
22:05 - model id equals name equals age equals
22:07 - is active equals and then a close curly
22:10 - so that will work for now we'll probably
22:12 - come back and modify this later because
22:14 - it will be kind of a long string and
22:16 - we'll want to make it shorter
22:18 - so now we're ready to make the program
22:19 - that will actually make this application
22:21 - run
22:22 - so we've had to set up a
22:24 - layout and now we've had this class so
22:26 - you got to wait for the next video and
22:27 - to see how we're actually going to
22:29 - generate a database and make this data
22:31 - save to it
22:34 - hey welcome again in this video we're
22:36 - going to continue our application that
22:38 - demonstrates the sql lite database in
22:41 - android studio
22:43 - [Music]
22:51 - hey thanks for sticking around in this
22:53 - video we're going to create the actual
22:55 - listeners for each button click and so
22:58 - in the previous videos we created a
23:00 - couple of buttons here and we're going
23:02 - to wire those up to the actual code in
23:05 - main activity so when you start an
23:07 - application main activity is rather
23:09 - empty and so now we have to start
23:11 - telling it what the buttons are and
23:13 - who's going to be clicking
23:15 - so the first thing that i usually do
23:17 - when i start an application is make a
23:20 - reference to all of the buttons and
23:22 - other controls that are on the layout
23:24 - and so these are called member variables
23:26 - of the class they're at the very top and
23:28 - they'll be accessible through all of the
23:30 - other methods in this
23:33 - module
23:35 - so i'm going to put in a reference to
23:37 - every control that we created so first
23:40 - of all there were two buttons there was
23:41 - button add and button view all so if i
23:44 - need to import something because the red
23:46 - text is there i press alt and return or
23:49 - alt enter
23:50 - then i want to put in the edit text we
23:52 - had two of them one for the age and one
23:55 - for the name
23:56 - also the switch this is the toggle
23:58 - switch that will tell us if it is an
24:00 - active user or not and so sw is the
24:03 - prefix that i used for here now the list
24:06 - view is also has to be imported along
24:08 - with the switch so at the end here you
24:10 - should have to import by pressing alt
24:13 - enter on each of these
24:15 - now you don't have to use the same name
24:17 - for the variable as you do for the
24:19 - layout however it's much more sensical
24:22 - it's it's easier to follow if you do
24:25 - now i made a mistake already i promised
24:27 - you that these were class variables
24:28 - member variables and i stuck them inside
24:31 - of the uncreate method this is a problem
24:33 - that you might do as well if you leave
24:35 - them here they will not be accessible
24:37 - throughout the page so i'm going to cut
24:39 - them out
24:40 - and move them up here on line 11 or 12.
24:45 - so right in here
24:47 - so this is where they're defined and now
24:49 - they're going to be assigned a value
24:51 - here on the uncreate method so remember
24:53 - oncreate starts the application that's
24:56 - the first thing that it comes to
24:58 - and so now when we create this
25:00 - application we need to give these
25:01 - variables a value
25:04 - so for each of the variables that i
25:05 - created up above i'm going to go find
25:08 - their actual value that's been assigned
25:10 - by the computer so we're using find by
25:12 - id as the method name and we're looking
25:16 - in r which is the resource folder and
25:18 - then we follow it with id and then the
25:21 - name that is located in the resource
25:23 - so as i go through here you notice that
25:25 - the
25:26 - variable name probably matches the name
25:29 - that i selected in the layout it looks
25:32 - to me like i will have one difference
25:34 - here with activecustomer in the layout i
25:36 - just called it switch active but
25:40 - it'll still work even though the
25:41 - matching variables aren't exactly
25:43 - spelled the same
25:45 - the next part of the logic that i
25:47 - usually program is the listeners so the
25:49 - click listeners for each button
25:52 - so there are multiple ways you can set a
25:53 - click listener i prefer this method here
25:56 - which is self-contained there's no
25:58 - references outside of the file that
26:00 - you're looking at right here
26:02 - so an unclick listener for one button
26:05 - works just fine this way
26:07 - so just to test out things i'm going to
26:09 - set in a toast message for each of these
26:11 - so i'll just have a text appear on the
26:13 - screen to make sure that everything is
26:15 - set correctly and there are no errors
26:19 - all right it looks like the
26:20 - application's up and running i click on
26:22 - button and it says the view all button
26:24 - here i click on add
26:26 - and the add button is working so looks
26:29 - like the button click listeners are
26:30 - working however why did i just put the
26:32 - word button on here shouldn't this have
26:34 - said something else let's go change that
26:37 - so i'm going back into main activity
26:39 - here and choose view all
26:41 - and why did the text not show up let's
26:44 - go look at the xml file
26:47 - and let's see what it says for text here
26:49 - sure enough i look in the xml and it
26:51 - says button here even though it shows
26:54 - view all on the layout some strange
26:56 - things happen i have no idea why it says
26:58 - that so i'm going to put in here view
26:59 - all
27:00 - and
27:02 - save it
27:03 - and run it again
27:05 - okay so this time for some reason the
27:07 - view all button is working properly
27:10 - so now instead of just printing a toast
27:12 - to the screen let's actually create a
27:14 - customer object and then print the toast
27:16 - to the screen
27:18 - all right so i'm going to create a new
27:19 - customer reference so the customer model
27:22 - is the class that we just created
27:24 - earlier and now i'm going to create a
27:25 - new instance of it so i'm going to
27:28 - generate a new customer using the
27:30 - constructor now as i go through the
27:32 - constructor fields i'm going to choose
27:34 - the values that correspond to each
27:36 - property of the customer for instance
27:38 - the id number i have no idea what number
27:41 - it's going to be so let's just put
27:42 - negative 1 for a default value that can
27:45 - be changed later now i'm going to have a
27:47 - string for the name so i'm going to snag
27:50 - that from the entry form where it says
27:52 - et name and i'll get the text and for
27:55 - some reason you have to convert it from
27:56 - text to a string so go through that
27:59 - whole process three items to get a
28:00 - string
28:02 - next i want to grab the age so that
28:04 - comes from the et age field and then
28:06 - finally the switch that gives us the
28:08 - active customer status
28:11 - now this doesn't have a text item it
28:13 - does have an is checked so i'm going to
28:16 - select is checked as well
28:18 - when i'm all done here i have a list of
28:20 - properties but it's redlined so there's
28:23 - something wrong here and let's check it
28:25 - out so i hover over the red line and i
28:28 - see that my constructor does not match
28:31 - with the properties that i provided
28:33 - so it's lighting up the age
28:37 - you have provided a string to me well
28:39 - obviously age is an integer so we need
28:42 - to convert that and then uh let's go
28:45 - fix that one and the the last one seems
28:47 - to be okay where it says boolean boolean
28:49 - is what uh the switch generates is a is
28:52 - a true or false value so let's convert
28:54 - this thing here to a from a string to an
28:57 - integer
29:00 - so the class that you're looking for to
29:01 - do the conversion is called integer
29:03 - capital integer dot
29:05 - and there is a whole bunch of methods
29:07 - for managing integers the one that we're
29:09 - looking for is parse int and you can see
29:12 - that the parameter that expects is a
29:14 - string so this one will work fine so we
29:17 - will parse int
29:18 - and then i will surround the rest of it
29:20 - with parentheses
29:23 - now lastly instead of saying add button
29:26 - i'm going to put in here the value of
29:28 - our new guy so it's customer model and
29:30 - then i'm going to use the tostring
29:32 - method that was in there and let's see
29:34 - what shows up on the screen so let's run
29:36 - it now
29:38 - so here's the app i'm going to put in a
29:39 - customer name i'm going to call him
29:42 - how howard and then for his age let's
29:45 - see if i can get to age and let's click
29:47 - the add button finally
29:49 - and you can see down here the customer
29:51 - model shows up so let's hide the
29:53 - keyboard and try that again choose add
29:55 - so you can see it's generating howard
29:57 - age 34
29:59 - and active is false however what happens
30:03 - if i go into if i make a mistake here so
30:07 - for age i'm going to put the word
30:09 - i try to put in old can't type how about
30:12 - if i leave it blank and then choose add
30:14 - my application just crashed
30:18 - so i'm suspecting that the integer parse
30:20 - in didn't work because i gave it a blank
30:23 - let's try this again
30:25 - and let's check the errors before i
30:27 - click the ok button
30:31 - okay so the app is up and running i'm
30:33 - going down to logcat in the corner here
30:36 - and switch back to the
30:37 - emulator and now as i leave it blank i
30:40 - choose the word add
30:42 - and it says it keeps crashing you
30:45 - stopped it
30:46 - what happened that didn't work let's go
30:48 - scroll through and see if we can find an
30:50 - error
30:51 - so it does say that the error occurred
30:54 - here on for input string blank
30:57 - the process died on line 39. so i click
31:01 - here and line 39 comes up and sure
31:03 - enough integer
31:04 - died
31:05 - so i could do some checking i could do
31:08 - an if statement here
31:09 - i could say if and then i could check
31:11 - the contents of the string or i could
31:14 - try another one i'm going to try this
31:15 - it's literally called try and catch
31:18 - if you haven't seen this before it's
31:19 - kind of cool it's like an if statement
31:22 - so the try says i'm going to try
31:24 - everything in the brackets here so i'm
31:26 - going to try to create the customer
31:29 - if it works
31:31 - then i'm just going to continue on
31:34 - and do the toast
31:36 - so the catch requires a parameter here i
31:38 - think we have to put in parentheses and
31:40 - type in the word exception
31:42 - and e so it knows what the problem was
31:55 - let's paste in another toast and instead
31:57 - of putting the customer's name in here
31:59 - i'm going to say
32:00 - error creating customer
32:03 - and let's run it again
32:05 - okay so the app's up and running i try
32:08 - add and i get an error creating customer
32:10 - down here the app doesn't crash anymore
32:12 - it doesn't create the customer either so
32:14 - the
32:15 - the problem is that i need to prevent
32:18 - the user from damaging the application
32:20 - so there we go
32:22 - so in the next video we're going to
32:24 - actually create items and put them in a
32:27 - database we're finally getting to the
32:28 - database part so stick around and let's
32:31 - install a sqlite database and save these
32:34 - customers as we click the add button
32:37 - hi welcome to another in the series of
32:39 - our sql lite demo as you can see on the
32:41 - screen we are creating a list of
32:44 - customers and the data is saved in the
32:46 - database in this video we're going to
32:48 - actually get to the part of the database
32:50 - tutorial where we set up the database
32:53 - [Music]
33:02 - so when it comes to managing a sqlite
33:04 - database you do almost everything in the
33:06 - code so we can initially create the
33:09 - database in a statement in one of the
33:11 - methods of our android application so i
33:14 - know in many applications you create a
33:16 - database and an external tool such as
33:19 - mysql workbench or something similar but
33:21 - here in android we can do it right from
33:23 - the code
33:24 - now there are several management tools
33:26 - that are available outside of this like
33:29 - sql workbench but they're not necessary
33:32 - but we will look at them and see how
33:33 - they
33:34 - now we're going to include the library
33:36 - which is part of android and it is the
33:38 - sqlite library so there'll be two
33:41 - classes that we will be using here one
33:43 - is the sqlite database class which is
33:46 - the database itself
33:48 - so the second class is called the sqlite
33:50 - open helper and it will force us to use
33:53 - a couple of methods that will create and
33:55 - update the database the first time it's
33:57 - run or whenever the database itself
34:01 - design changes
34:02 - now we're also going to include a few
34:04 - things that will do the crud operations
34:06 - so we will have things like get all
34:08 - customers search for customers get one
34:10 - customer delete somebody insert one all
34:13 - of the crud operations that you would
34:15 - expect in a natural database
34:18 - now we're going to focus in on the on
34:20 - this video on the open create database
34:23 - so the first time we try to access the
34:25 - database this method will automatically
34:28 - trigger it will only happen once but
34:30 - when it does it will check to see if the
34:32 - database exists if there are no
34:34 - databases of this file name then it will
34:36 - create one for us and so we'll need this
34:38 - to be able to define the tables that
34:40 - we'll use in our database
34:42 - so it'll look like this we'll have a new
34:44 - database object and then we will use the
34:48 - open or create database method and you
34:51 - can see that we are going to use the
34:53 - string name of our table and then a few
34:56 - other parameters also when we work with
34:58 - any kind of operations in sqlite we're
35:01 - going to be using the
35:03 - execute sql statement and so we'll be
35:06 - writing sql strings and then executing
35:08 - through this method
35:10 - so here's an example we're going to
35:12 - create a table called customerstable
35:14 - provide the column names and then
35:16 - following that immediately will be the
35:18 - execute statement and so this should
35:20 - look familiar if you've done any kind of
35:22 - programming with databases in other
35:24 - languages and so we're trying to keep
35:26 - consistent with what you've learned in
35:27 - java and c-sharp and other tools
35:30 - okay so now let's return to android
35:32 - studio and implement the things that i
35:34 - just showed you in the slides so we are
35:37 - going to go to the java code and add a
35:40 - new class so let's do a right-click in
35:42 - the java folder add a java class i'm
35:45 - going to name mine as database helper
35:48 - now you can use your name you could call
35:50 - it database or dao object or something
35:53 - like that the point is this is going to
35:56 - be the class that handles all of the
35:57 - operations we're going to have to extend
36:00 - this as a super class to another object
36:02 - so we could either type it in here or
36:04 - wait just a second so i'm just going to
36:06 - wait for a second before i do that okay
36:09 - so here's our new class now the part
36:11 - where i said we're going to extend is
36:12 - right here so
36:14 - extends is the keyword so we're going to
36:17 - apply inheritance now for this new class
36:20 - it's called sql
36:22 - lite open helper and sure enough android
36:25 - suggested for me
36:27 - now sqlite open helper has some methods
36:30 - that must be implemented which is why we
36:32 - have this error now the red line it says
36:35 - it must be declared abstract or
36:38 - implement the methods so let's go ahead
36:40 - and look for the little red guy
36:44 - there it is the light bulb
36:45 - okay i'm going to choose implement
36:48 - methods
36:49 - and it says you must use these two
36:52 - methods if you're going to write this
36:54 - class if it extends from its parent and
36:56 - let's choose ok
36:58 - so now you can see that we are going to
37:00 - have to implement the method called
37:02 - uncreate and then we're also going to
37:04 - have to implement the method called
37:07 - onupgrade
37:08 - so you must start with the understanding
37:10 - that the uncreate method is going to be
37:13 - called the first time you try to access
37:15 - a database object and so inside of here
37:19 - there should be code that will generate
37:22 - a new table there should be create table
37:24 - forms in this kind of a sql statement
37:27 - the second method is going to be called
37:29 - whenever the version number of your
37:31 - database changes so let's say you have
37:33 - version one of your application it's out
37:35 - there in the world and there are five
37:37 - million users and they're working great
37:40 - and then you plop a new version on top
37:42 - of them and you say hey we've just added
37:44 - a new feature we can now add a few more
37:46 - columns to your tables or
37:48 - add a new table and instead of making
37:51 - their application crash because the
37:53 - tables don't line up with the forms we
37:55 - just have this on upgrade method and so
37:58 - on upgrade is triggered automatically it
38:00 - will automatically modify their schema
38:03 - for their database whenever it needs to
38:04 - be done and so this provides for forward
38:07 - compatibility or backward compil
38:10 - compatibility depends on how you look at
38:11 - it
38:12 - now we still have an error if you look
38:14 - up at the top you can see that that says
38:16 - we've got a problem it says a no default
38:20 - constructor is available
38:22 - now in usual times when you're
38:24 - programming a class it doesn't complain
38:26 - about a constructor being absent well
38:29 - this one is a problem because we have
38:32 - extended from a super or a from a parent
38:35 - class and so we have to implement a
38:38 - constructor that will satisfy his
38:40 - parameters
38:41 - so i'm going to switch over now to the
38:43 - documentation at android and look at sql
38:46 - lite open helper
38:48 - so if we scroll down here we can see
38:50 - that there are three different
38:52 - constructors that are available and we
38:54 - have to implement at least one of these
38:56 - so you can see that it requires that we
38:58 - provide a context so the context is a a
39:01 - reference to the application itself and
39:03 - we'll be able to compute that in just a
39:05 - second
39:06 - string name that refers to the name of
39:08 - the database that we're going to create
39:11 - this here thing called cursor factory
39:13 - we'll look down at the notes in just a
39:14 - minute to figure out what that is and
39:16 - then version which is going to be simply
39:18 - version one for the first time we make
39:20 - our database there's some other
39:22 - constructors but i think we're going to
39:23 - be working with the first guy
39:26 - so let's go and scroll down a bit and
39:28 - talk about the parameters
39:29 - so context is is used to help find your
39:33 - database uh the second is the name of
39:35 - the database is the string
39:37 - and then here it says a factory object
39:40 - used for creating cursors
39:43 - it says or null for the default
39:46 - so this value may be null well let's
39:48 - just leave it null then and see how that
39:50 - works and then finally the version
39:51 - number will start at version one so
39:53 - let's go ahead and implement this first
39:55 - constructor using our helper tools
40:00 - so if i hover over the sqlite open
40:03 - helper i get the little red light bulb
40:05 - i'm going to choose create a constructor
40:07 - matching super
40:08 - and you can see i extended this to the
40:11 - right to see the whole thing i'm going
40:13 - to pick the first constructor and click
40:16 - ok
40:17 - now we have four parameters provided
40:20 - here
40:21 - i would like to provide a string for
40:24 - each of these last three
40:27 - and then pass those up to the super so
40:30 - look how this works i'm just going to
40:32 - delete these last three
40:33 - and keep context around because i can
40:35 - get context from my application the
40:38 - other three i can just provide as
40:40 - hard-coded values so what's my database
40:43 - going to be called i'm just going to
40:44 - name it as customer
40:46 - and let's call it db
40:48 - so you can name any string you like for
40:49 - the file name now for the factory we we
40:52 - read in the documentation that that can
40:54 - be null and the version number can be
40:56 - one and so we are passing up to the
40:58 - parent or to the super the constructor
41:01 - for these four parameters and then we're
41:03 - going to require that the
41:06 - application give us the context and so
41:08 - we'll have to figure that out in a few
41:10 - minutes all right so that gives us the
41:12 - constructor for our new class
41:15 - in the next few videos we're going to
41:16 - create the database using the on create
41:19 - part and then we're also going to
41:21 - implement the on upgrade part so stick
41:24 - around for the next video where we're
41:25 - going to implement these two methods
41:28 - hey welcome back we're in the middle of
41:30 - a demo for a tutorial for creating a
41:33 - sequel light database in an android app
41:36 - and so in this video we're going to
41:38 - actually use some sql statements to
41:40 - create the tables that are going to
41:42 - store the data you see on the screen
41:44 - here
41:47 - [Music]
41:54 - all right so the goal here we're going
41:55 - to create is a table that will match the
41:58 - values of our form so our user model has
42:01 - a name an age and a boolean for active
42:04 - customer and so those are the three
42:06 - columns that we're going to have to
42:08 - create in the table
42:10 - now in the previous video that we were
42:11 - working on we started implementing this
42:15 - class called the database helper and so
42:17 - we created a constructor that will tell
42:19 - us what the database will be named and
42:21 - now we're here at the point where we
42:23 - have to use the uncreate method this
42:25 - method will be called the first time
42:28 - that this database is referenced and
42:30 - since it doesn't have any definition
42:32 - we're going to have to create the sql
42:34 - statements that will generate the tables
42:36 - in the sql light system
42:38 - so let's start off by defining a string
42:41 - the string is going to be called
42:43 - create table statement and for right now
42:46 - i'm going to leave it empty just so that
42:48 - we can save the sql statements for in
42:50 - the next few minutes
42:52 - and then to remind myself of what's
42:53 - coming next i'm going to type in the
42:55 - command
42:56 - db execute sql and then the statement
43:00 - string that i just defined so where did
43:03 - db come from well you can see that db
43:06 - comes from a parameter that i'm passing
43:08 - in here and so this pattern is going to
43:11 - hold true in many of the statements that
43:14 - we write here in the future so
43:16 - we need to now figure out what the
43:18 - statement is to create our new table
43:22 - all right so i'm going to go to my
43:24 - memory bank and type in what i know
43:26 - about sql statements
43:28 - so a create table statement is what
43:30 - we're going to work on so the name of my
43:33 - table i'm going to define as customer
43:35 - underscore table
43:37 - and then i'm going to define the first
43:39 - column as the primary key so let's call
43:41 - it id it's an integer we're going to
43:44 - specify it as a primary key and auto
43:47 - increment so this is pretty standard sql
43:49 - stuff if you don't know sql very well
43:51 - then look at some previous tutorials
43:53 - that i've created on working with sql
43:55 - databases
43:56 - so i'm going to stop here for a second
43:58 - and define some static variables i know
44:01 - for instance that the word customer
44:04 - table is going to be used often in my
44:07 - application and i don't want to have to
44:09 - retype it every time so i'm going to cut
44:11 - it out here and create a variable that i
44:13 - can refer to in future statements so
44:16 - let's uh let's highlight the customers
44:18 - table and i'm going to right click
44:21 - and i am going to
44:22 - refactor
44:24 - and look for extract
44:27 - and then i'm going to say i'm going to
44:29 - re extract this as a constant
44:33 - and so constant it's going to say what
44:35 - is the constant name
44:36 - and let's choose ok
44:39 - now look what it did
44:40 - it swapped out using some quotation
44:43 - marks that was handy and concatenating
44:46 - strings
44:47 - and now the value for my string customer
44:50 - table is defined at the top
44:54 - so now let's define the rest of the
44:56 - columns that i'm going to be using in
44:57 - the table
44:58 - so we'll have customer name customer age
45:01 - and their active state
45:03 - so let's take a look here if we can
45:05 - define some of these as a string as well
45:08 - so customer name i'm going to extract
45:11 - so let's go to
45:12 - free factor and choose extract as a
45:16 - constant
45:18 - so now i'm going to put attach the word
45:20 - column at the beginning of this name so
45:23 - it will create a static variable again
45:25 - called column customer name
45:28 - and we'll put it at the top
45:30 - so i'm also going to define the column
45:32 - names for the customer
45:34 - status such as his age and his active
45:37 - status or not and then finally we might
45:39 - as well add the column id as well as a
45:42 - as a constant and so by the time we're
45:45 - done here we will have a list of five
45:46 - different constants at the top of the
45:48 - page
45:49 - so at this point it looks a little bit
45:51 - tedious to redefine these constants at
45:53 - the top of the page but as soon as we
45:55 - start generating more methods below
45:57 - you'll see the advantage of having a
45:59 - constant instead of using the variable
46:01 - name each time now i should be able to
46:03 - go back into my main application and
46:05 - invoke this database helper let's make
46:08 - sure that i've typed everything
46:09 - correctly here because if i mess it up
46:11 - then well obviously we'll have problems
46:14 - so let's check to see create table make
46:16 - sure that you have spaces between the
46:19 - names so that this quotation mark and a
46:21 - space have a of a gap
46:23 - uh it doesn't need to have spaces here
46:26 - make sure that you have spaces between
46:27 - each of these
46:29 - make sure that you have no missing
46:30 - commas
46:35 - and make sure that all the data types
46:37 - are correct all right let's go back into
46:38 - the main activity now and this is where
46:40 - we're going to try to generate this so
46:43 - the place where i'm going to first
46:44 - access the database is when i create a
46:46 - new customer so the method called button
46:50 - add on click listener is where i'm going
46:52 - to go
46:53 - all right so we're going to now create a
46:55 - class a reference to that database
46:57 - helper so i'm going to use the standard
47:00 - java instance creation method so we have
47:03 - a type
47:04 - lowercase name for database helper and
47:07 - then a new instance so
47:09 - what do we have here we have some red
47:11 - stuff at the end it says your
47:14 - constructor for the database helper
47:16 - requires a parameter now just to remind
47:19 - you if you go back into database helper
47:21 - the constructor that we created said
47:23 - provide me the context to get to this uh
47:26 - to get to your application okay so i
47:28 - need to do that now
47:30 - so what do we put in here some kind of
47:32 - context
47:33 - well if you're like me in some java
47:35 - beginning you just say i've seen this
47:37 - before you put in the word this
47:39 - and you hope for the best
47:41 - but it doesn't work what's the matter
47:43 - with this
47:44 - so if you're having trouble with context
47:45 - and you can see another video that i
47:47 - created earlier that tries to explain
47:49 - the best of my ability what context is
47:52 - uh however you look at this one and it
47:54 - says
47:54 - the context that you're trying to send
47:57 - is a reference to the
47:59 - uh method called onclicklistener well
48:02 - the context is really a reference to the
48:04 - application so we want one level higher
48:06 - than that so there are two ways that i
48:08 - can think of that would get here we
48:10 - could first of all type in
48:11 - mainactivity.this
48:12 - that's the correct this that we're
48:14 - talking about and so we'll go with that
48:16 - one with the
48:17 - mainactivity.this
48:19 - so this is not doing anything yet except
48:22 - for making a reference to the new
48:24 - customer database
48:26 - all right so now we've got this sql
48:27 - table created now we need to be able to
48:30 - add some data to it and then we'll see
48:32 - if it actually saves correctly so in
48:34 - this same module in this class i'm going
48:36 - to create a new method that's going to
48:38 - add one item to the database so the
48:40 - method that i'm going to create is
48:42 - called add1 and it's going to expect to
48:45 - see a new customer model so we'll make
48:47 - that as a parameter and then for the
48:49 - default return value we'll make it a
48:51 - boolean and for this first iteration of
48:53 - the design i'm going to say that it
48:55 - always returns true but that will change
48:58 - depending on whether the successful
49:00 - insert was made or not so the first
49:02 - statement that we'll create is called
49:04 - sqlite database db equals
49:06 - and then i'm going to get it from this
49:09 - class so the database helper class
49:12 - and i'm going to choose get writable
49:15 - database now where did this come from
49:17 - did i code this anywhere no it came from
49:20 - the default properties that are
49:22 - available to the sqlite open helper so
49:25 - the class that i'm opening right now and
49:27 - extending has this property in it so
49:30 - this will get our one and only database
49:33 - that we're going to write to notice i
49:35 - have the get writable option and get a
49:38 - read option so if i'm going to insert
49:40 - data that means i'm writing to it next
49:43 - i'm going to create a object called
49:45 - content values or i'm going to shorten
49:47 - it to the letters cv
49:49 - now content values is a special class
49:52 - and it works like a associative array in
49:55 - the language php or a hashmap in other
49:58 - languages i can take pairs of values and
50:02 - associate with them this also looks like
50:04 - the
50:05 - intent in android studio when you
50:08 - when you try to put in a bundle or you
50:10 - try to put in values to pass from one to
50:13 - the other you have to specify
50:15 - a value name and then its actual
50:18 - contents
50:19 - so in the first case i'm going to
50:21 - associate the customer column name
50:24 - with the actual value of the parameter
50:26 - passed in which is called customer model
50:29 - so we're associating a column name with
50:32 - a value which is a string
50:34 - the next item i'm going to put in is the
50:36 - customer's age so we'll select the
50:38 - column name which is column customer age
50:41 - remember i'm using the static constant
50:44 - values from the top of the program here
50:46 - and then i'm going to get the property
50:48 - called get age we'll associate these two
50:50 - together and put it into the content
50:52 - values object
50:54 - lastly we'll get the is active property
50:57 - and we'll associate it with the proper
50:58 - column
50:59 - now you notice i didn't put in an id
51:03 - so the reason why i don't have to tell
51:05 - it what the id number is for this guy is
51:08 - because
51:09 - it is an auto increment column in the
51:11 - database it have if were it not an auto
51:14 - increment or a automatically created
51:17 - value then i would guess have to specify
51:19 - it in the content values
51:22 - the next command that i'm looking for is
51:23 - the insert command so i'm going to type
51:26 - in db and dot and you can see insert is
51:29 - one of the methods associated with the
51:30 - database so let's hover over the
51:32 - parentheses here to see what kind of
51:34 - method parameters we're looking for so
51:37 - you can see that it needs a table name
51:39 - something called a null column hack
51:42 - and the third which is the content
51:44 - values well two out of these three i can
51:47 - i can guess so the first one is the
51:49 - table name i have something called
51:51 - customer table so let's put in capital
51:54 - customer
51:55 - and choose customer table the second is
51:58 - called the null column hack we'll come
52:00 - back to that one in a second and then
52:02 - the third one is the content values
52:04 - which is cv
52:06 - now what is null column hack
52:08 - i don't know about you but null column
52:11 - hack sounds like it was designed wrong
52:13 - why are they hacking something let's go
52:15 - find out what they mean so sqlite
52:17 - database is the android docs that i'm
52:19 - looking at and let's do a control f on
52:21 - this page and i'm typing in null column
52:24 - so it looks like i'm coming to one of 20
52:27 - references on the page to the null
52:28 - column hack let's see if we can figure
52:30 - out what it is as i page through here it
52:33 - looks like null column hack is used on
52:35 - many of the operations in the database
52:38 - what's it do aha here we go we have some
52:40 - explanation
52:42 - string it is optional it may be null sql
52:45 - doesn't allow inserting of a completely
52:47 - empty row without naming at least one
52:50 - column
52:50 - it goes on to say
52:52 - if your provided values is empty no
52:55 - column names are known and an empty row
52:57 - cannot be
52:58 - inserted so it sounds to me like if
53:02 - you're trying to insert an empty row
53:03 - then you have to have a specific name
53:05 - here
53:06 - well i'm not inserting an empty row so
53:08 - i'm going to stick with this
53:10 - null option for right now otherwise i
53:12 - believe i would have to provide at least
53:14 - one column name so you could put in a
53:17 - column name or you could put null
53:20 - so since it will accept null i'm going
53:21 - to put in
53:22 - null here in the middle
53:24 - now i want to know if this was
53:25 - successful or not so let's go hover over
53:27 - the beginning
53:28 - and we should see a little light bulb
53:30 - appears that says introduce local
53:32 - variable let's see what that does
53:34 - so the return type from the insert will
53:37 - return a long so this means it's really
53:40 - a success variable so if i get a
53:42 - positive number it means it was
53:44 - successfully inserted or a negative
53:46 - number means it was a fail
53:48 - so i'll just simply put in an if
53:49 - statement to say if it was negative one
53:51 - will return false if it were a positive
53:53 - one then we'll give it a true all right
53:56 - so that gives us a full add one function
53:58 - now let's go back to our main method
54:00 - where we'll actually use this so i
54:02 - believe we left the code in this state
54:04 - before i started on this process here we
54:07 - created a customer model inside of the
54:09 - try catch actually what i want to do is
54:11 - create this definition before the try
54:15 - and so we'll just create it here as a
54:17 - null value then inside of the try we're
54:20 - going to assign it so we will create the
54:24 - assignment statement separate from the
54:26 - definition statement
54:28 - and then if it works we will have a
54:30 - successful customer model
54:33 - however let's talk about the next
54:35 - section if it fails let's make a
54:37 - customer again
54:38 - so let's say if this
54:40 - create person fails then we can provide
54:42 - some default values and that way the
54:44 - user knows that something went wrong so
54:46 - for the default values i'll give it as
54:48 - an id of negative one a name as error
54:51 - an age of zero and is an active member
54:54 - is false so this is arbitrary you can
54:56 - put anything in you want if the failure
54:59 - occurs finally near the bottom we can go
55:01 - and try the insert method so we will
55:04 - call on the database helper class we'll
55:07 - put a dot and we should see add one then
55:10 - we can provide as a parameter the
55:12 - customer model so will this work or not
55:15 - we can find out if we choose add and
55:18 - introduce to our local variable here
55:20 - which will give us some kind of a true
55:22 - false statement so let's let's call it
55:24 - things success
55:26 - i will make a toast now and it will
55:29 - indicate whether it was successfully
55:30 - inserted into the database so i should
55:32 - get a true or false
55:35 - now we can test this out
55:37 - alright so we got the app running here
55:38 - let's put in somebody
55:40 - put in mary age is 52
55:43 - active customer and ad
55:45 - it says here success is true well it
55:48 - must have gone into the database but how
55:50 - can we tell
55:51 - well let's go check out where that
55:53 - database is now fortunately in android
55:56 - studio there's a way to do that let's go
55:58 - click on android studio choose view tool
56:01 - windows
56:02 - and look for device file explorer this
56:05 - will let us look at all the files on
56:07 - folders on our computer or on our device
56:10 - so let's go and look at all these
56:11 - folders here now where could it be
56:14 - let me help you find it so the folder
56:16 - you're looking for is called data
56:18 - we're looking for another folder called
56:20 - data
56:21 - and then under there are all of the
56:24 - applications and services that are on
56:26 - your android phone most of them go with
56:28 - android itself so dot com
56:30 - android we can probably ignore all those
56:33 - and we scroll down a ways until we come
56:34 - to something that looks customized to me
56:37 - so sure enough there it is there's edu
56:39 - and shad sluter it looks like as what i
56:42 - created and inside of the folder called
56:44 - databases you see three files let's take
56:47 - all three of these and i'm going to save
56:50 - them so
56:52 - save as
56:53 - this allows me to execute a export so
56:56 - let's go to the desktop
56:58 - and choose open
57:00 - and that will save all three of these
57:01 - guys
57:02 - so now what are they going to look like
57:04 - if i try to just double click on
57:06 - customer db you can see i get total junk
57:09 - this is a binary file unreadable so not
57:13 - very useful however you can see down at
57:15 - the bottom of the screen i have two
57:16 - applications that are installed on my
57:18 - computer this one here is called db
57:21 - browser for sql lite and this one's
57:23 - called sqlite studio this is kind of
57:27 - like the my sequel workbench tool now
57:30 - the one that i like to use is called db
57:32 - browser for sqlite
57:34 - here's their website it's called
57:36 - sqlitebrowser.org
57:38 - it is very simple to use
57:41 - sqlite studio is also available
57:44 - apparently only for macintosh so let's
57:46 - try to open the database i'll click on
57:48 - open and i'll navigate to the desktop
57:50 - and you can see all three files that i
57:52 - just saved are here the one i'm looking
57:54 - for is customerdb this is the file that
57:57 - is the principal database file click on
58:00 - open and you can see that there's a
58:01 - browse to the structure and the data so
58:05 - you can see i've created a few users
58:06 - they've got their ages and their active
58:09 - customers are both set to zero so
58:11 - remember in sql lite zero is a boolean
58:13 - false and one is a true so you can see
58:16 - that i have data i can manipulate the
58:19 - data i can create new records just like
58:21 - you would in any other database
58:23 - management tool
58:24 - so the point here is just to say that i
58:26 - can look inside the data i know it's
58:29 - being created
58:30 - so that would pay take us to the point
58:32 - where we can insert data there's still a
58:35 - lot to do yet we need to be able to
58:36 - delete data we need to be able to show
58:39 - it to the user on a list in the
58:40 - application so we're getting closer but
58:43 - this is the point where we start
58:45 - creating sqlite databases so stick
58:48 - around and we'll show how to create this
58:50 - into a list for the user to see
58:54 - hey welcome to another part of our sql
58:56 - lite demo we're creating an android app
58:58 - that will save data to a local database
59:01 - and then you can view it on a list view
59:04 - so the point of this video that we're
59:06 - about to see is how to create this list
59:08 - view that you see in front of you and
59:10 - we've been able to add an item to the
59:12 - database but now we're going to display
59:14 - it
59:17 - [Music]
59:23 - all right thanks for sticking around
59:24 - we're going to create this list that you
59:26 - see here and pull the data from our
59:29 - database and update it every time we add
59:31 - a new record
59:32 - so to make this work we first of all
59:34 - have to start in the database helper
59:37 - and we have to create a method that will
59:39 - pull all items out of the database so
59:41 - the first thing we should do is define
59:43 - what the properties are going to be when
59:45 - it returns so since we're going to
59:47 - return a list of everybody we need to
59:49 - make that the function or the method
59:52 - return type so after i choose lists of
59:55 - customer model i can give it a name such
59:57 - as get everyone or select all or
60:00 - get all you can name this whatever you
60:02 - want but it does have to be specific so
60:04 - you know what it means
60:06 - now it looks like we have to import
60:07 - whatever a list is so let's press alt
60:09 - enter
60:10 - and now the list is happy
60:12 - so to generate the return list we're
60:15 - going to have to define it first so
60:17 - we'll create a item called return list
60:19 - it's defined as type
60:21 - customer model and then it works as an
60:25 - array list that should work really well
60:27 - then before i forget at the bottom of
60:28 - the list i will put in a return
60:30 - statement so it satisfies the
60:32 - requirements of my method so in between
60:34 - these two i have to generate a bunch of
60:36 - code that will get data from the
60:38 - database
60:39 - so the first item that we should do is
60:41 - create a sql statement that will do what
60:43 - we asked it for so this is a pretty
60:45 - simple one select star from
60:48 - the users table
60:50 - and the customers table really notice
60:52 - i'm using the defined constant called
60:54 - customer table
60:57 - so now i'm going to make a reference to
60:59 - the database that's active so we'll say
61:01 - the sqlite database db equals
61:04 - and then i'm going to type this dot and
61:07 - the first item that i choose is called
61:09 - get writable database now think twice
61:11 - about what you just chose here do i
61:13 - really need a writable database
61:16 - i'm just selecting here so i do not need
61:18 - a get writable what i could do is just
61:20 - type in readabledatabase now what's the
61:23 - difference
61:24 - so the difference is that whenever you
61:26 - open up a writable copy of the database
61:28 - the database is locked
61:30 - no other processes can update it
61:33 - and so it creates a bottleneck if you
61:36 - have a readable copy of the database
61:38 - many different processes can read from
61:40 - it since there's no changes being done
61:43 - so better to choose readable database
61:45 - even though writable in this case would
61:47 - probably work
61:49 - next i'm going to actually execute this
61:51 - query so i'm going to type in db dot
61:54 - and we have different choices we could
61:56 - do execute sql or something called the
61:59 - raw query now we're going to choose raw
62:00 - query because of a return type you can
62:03 - see up at the top that it says this
62:05 - return type is called a cursor so we're
62:08 - going to introduce the idea of a cursor
62:10 - in just a moment and see how it works
62:12 - but i'm going to choose raw query and
62:14 - then for the properties let's put in the
62:15 - query string that we just defined
62:19 - okay so now we got this query that's run
62:21 - what do we do with it
62:22 - well let's see let's go back to the
62:24 - database and let's hover over it the
62:27 - light bulb appears and it says introduce
62:30 - a local variable so the local variable
62:32 - is called a cursor so that's the return
62:35 - type of the
62:36 - raw query
62:37 - so a cursor in sqlite is the result set
62:42 - so just like in other database languages
62:44 - when you ask for a query you get back
62:46 - something called result or something
62:48 - similar to result a cursor is your
62:51 - results so it'll be a complex array of
62:54 - items and it'll be rows and rows of data
62:56 - if there are lots of people that were
62:58 - just selected so the cursor is your
63:01 - result set
63:02 - so i want to check to see if there was
63:04 - actually results brought back from the
63:06 - database did it succeed so that will be
63:08 - an if statement now i'm going to check
63:10 - to see if
63:12 - cursor dot
63:13 - and what is the method that i'm going to
63:15 - choose from
63:16 - you would think that it would be like a
63:18 - method called
63:20 - size of return or success what you want
63:23 - in this case is called move to first
63:26 - which means move to the first result in
63:28 - the result set now if this turns out to
63:31 - be a true or boolean true value that
63:34 - means that there were results so yes
63:36 - then we can continue to query through
63:37 - the list if there are no results then
63:40 - the else statement will take over and
63:42 - we'll do something different
63:44 - okay so i'm about ready to begin some
63:46 - coding here and i want to make sure i
63:48 - know what i'm going to do so i'll put
63:49 - comments so what i want to do next is if
63:52 - there are results i want to loop through
63:54 - the results
63:56 - and then i'm going to create a new
63:58 - customer result for each row a new
64:00 - customer object for each row and then
64:03 - when i create that object i'm going to
64:05 - insert it into the return list that was
64:07 - defined just a few lines up
64:09 - and then we'll be able to make this
64:11 - function succeed
64:13 - so next i'm going to do a a do while
64:16 - loop not something that we do all the
64:18 - time but this will work here so i'm
64:20 - going to do this method
64:23 - while we can move to the next line so
64:26 - we will finish this when as long as
64:29 - there's new lines
64:30 - all right so here's the pattern we're
64:32 - going to follow we're going to introduce
64:34 - a new local variable of the type that we
64:36 - expect to come from the database so the
64:38 - first item is a id number which is an
64:41 - integer
64:42 - and then we're going to get it from the
64:44 - cursor
64:45 - now i'm expecting an integer so i'm
64:48 - going to use the word get int now
64:50 - obviously if there is something in the
64:52 - database in this column that is not an
64:54 - integer the program will crash or it
64:57 - will not give us the right record
64:59 - so how do i know which position is the
65:02 - integer so i'll just use position 0
65:04 - because i know what the database table
65:06 - design looks like so the next item from
65:09 - the database is going to be the customer
65:11 - name so i'll define a local variable
65:13 - called customer name and snatch it from
65:16 - database at position 1. we'll do the
65:19 - same thing for the age
65:20 - now when i go to get the boolean
65:22 - variable for my is active or not i'm
65:25 - going to have a little problem as you
65:27 - can see i'm typing in boolean customer
65:30 - active equals so far so good but then
65:32 - when i try to get it from the database
65:34 - i'm going to say from position 3 i'm
65:36 - expecting a boolean
65:38 - now it doesn't even give me that option
65:40 - why not it's because in sql light there
65:43 - are no such things as booleans it just
65:45 - saves an integer of either 0 or value 1.
65:49 - so what i'm going to have to do is take
65:50 - that integer and then convert it into a
65:53 - boolean so wouldn't it be nice if i
65:55 - could just say getint and then assign it
65:58 - to the boolean well obviously as you can
66:00 - see i've typed here it doesn't work that
66:02 - way so it says you are requiring to
66:05 - assign a boolean value and you have
66:08 - provided me with an integer not going to
66:10 - work
66:11 - so i'm going to turn this into what's
66:13 - called a ternary operator and you can
66:15 - see here that it's asking some questions
66:17 - it's got a question mark and a true
66:19 - false
66:20 - but it's a mysterious syntax that's
66:22 - confusing especially if you're new to
66:24 - programming so what does this ternary
66:27 - operator do if if you understand this
66:29 - then skip ahead 60 seconds otherwise
66:31 - let's take a look at an example so i did
66:33 - a google search and tell me what a
66:35 - ternary operator is in java and i came
66:37 - to geeksforgree
66:39 - geeks4geeks it looks like
66:41 - so here's the process
66:43 - so a result variable is going to be
66:46 - given a question so this is like a true
66:49 - false statement
66:50 - and if this first question turns out to
66:53 - be true then we will assign the first
66:56 - value after the question mark if this
66:58 - results in a false then we'll give the
67:00 - second so it's like doing an if
67:02 - statement but it's in more compact form
67:05 - so here are two examples so we could say
67:08 - if expression1 then variable equals this
67:12 - this this code right here is the
67:14 - understandable if then else now if you
67:16 - want to do it in ternary operations you
67:19 - could do it like this you could have a
67:20 - result and then you could use the
67:22 - ternary so ternary is what i used here
67:25 - if you want to look it up some more go
67:26 - ahead but it's a short form of writing
67:29 - if-then-else statements
67:30 - all right back to here so i've got
67:32 - ourselves the
67:34 - three objects that are required to make
67:36 - a user
67:37 - on the next line i'm just simply going
67:38 - to create a new user object so of type
67:41 - customer
67:42 - and we are going to provide all four
67:45 - parameters in the constructor so we have
67:46 - the id the name the age and the is
67:49 - active
67:50 - next we should be able to put in the new
67:53 - customer into the list so we should
67:55 - provide the add function so down here in
67:58 - the if section i'm going to just put in
68:00 - some comments because really we don't
68:02 - have to do anything
68:03 - if there are no results from the
68:05 - database we will not add anything to the
68:07 - list now the list is still defined we
68:09 - defined it up here at the beginning in
68:11 - line 63 so it's an empty list so it
68:14 - won't be null but it will have no items
68:16 - in it but for just clarity sake i'm
68:19 - going to leave empty in this else
68:21 - section now one thing that you have to
68:23 - remember in sqlite is to always clean up
68:25 - after yourself so you've opened up a
68:28 - connection to the database uh let's
68:30 - close it so other people can use it so
68:32 - we're going to close the cursor with a
68:33 - close statement and we'll close the
68:35 - database with a closed statement too all
68:38 - right check out near the top we have an
68:39 - error still
68:40 - so when we created this raw query it
68:43 - says we provided the query string but it
68:46 - says there's something wrong here let's
68:48 - go check out the light bulb it says um
68:50 - nope that's not what i want uh i'm
68:52 - looking for the parameters that are
68:54 - missing so i don't know what i'm
68:56 - supposed to put in there
68:57 - let's go check out the documentation if
69:00 - all else fails look it up right
69:02 - so i'm coming back into the android docs
69:05 - and we see here sqlite database
69:08 - and let's do a control f and type in the
69:10 - word raw let's see raw query shows up on
69:12 - the page
69:14 - and what are we supposed to do with raw
69:15 - query so raw query returns a cursor well
69:18 - that's good to know it says we're
69:21 - expecting a sql string so a sql
69:23 - statement and something called selection
69:26 - args so what is selection args it says
69:29 - you may include question marks in the
69:31 - clause of the query which will replace
69:33 - by values from selection args okay so
69:36 - this is for working with prepared
69:37 - statements and we're not going to do
69:39 - that right now so i think we can just
69:41 - provide a null value here
69:47 - so the selection args are none
69:49 - okay or no
69:51 - so the view all button is where we're
69:53 - going to actually make this happen so
69:55 - let's quickly put in some code and then
69:57 - toast it to the screen the first thing
69:59 - we have to do is create a reference to
70:00 - our database so just like we did in the
70:03 - button add we create a database helper
70:05 - object and we'll set that up as
70:08 - a new instance now this should be as
70:10 - simple as creating a new list of type
70:13 - customer model
70:15 - and we can capture this from
70:17 - the database helper with a method called
70:19 - get everyone
70:21 - now for the toast i would like to simply
70:23 - toast out a really long string and so
70:26 - for the toast message i'm going to
70:27 - replace the string with everyone you can
70:30 - see that this isn't quite right so let's
70:32 - see if we can add a dot to string on it
70:35 - and it looks to me like that will work
70:37 - so let's see what happens i'm going to
70:39 - run this okay so i got the app up and
70:41 - running now before i click on ad i'm
70:43 - just going to choose the view all button
70:47 - well it certainly looks like i've locked
70:48 - up the database nothing is responding i
70:51 - can't make anything happen i've probably
70:54 - put the application into an infinite
70:56 - loop
70:57 - so let's kill the app let's click the
70:59 - little red square
71:00 - and see if we can figure out why
71:02 - so my guess is i'm going to the database
71:05 - helper to look at my loop here that i am
71:08 - doing on the database
71:10 - so the do while loop comes to mind as a
71:12 - possible problem
71:14 - so look here at the while loop it says
71:17 - i'm going to do this
71:19 - while i move to first
71:22 - well moving to the front of the list
71:23 - means that i'm always going to be doing
71:25 - the first record in the database
71:28 - so this isn't what i meant to type let's
71:30 - see what else there was there was move
71:32 - to
71:33 - next that's the one i want so that means
71:36 - proceed through the database one at a
71:38 - time not repeat the first one over and
71:41 - over let's try that again
71:45 - okay let's add a few people just to make
71:47 - sure that this works so we got jim and
71:49 - kim
71:50 - and let's go ahead and choose the view
71:52 - all button now so click here
71:55 - and i get a customer list it looks like
71:57 - it's working so if i choose add a few
71:59 - more times i get a few more kims let's
72:02 - go to view all
72:03 - and the list is getting bigger
72:05 - so it looks to me like we've got
72:06 - ourselves the database
72:08 - receiving information and the view all
72:10 - button is able to collect it back
72:13 - now in the next video we need to make
72:15 - this display a lot prettier instead of
72:17 - this toast message we're going to turn
72:19 - it into a list so up and down the page
72:22 - on the main activity we will see a
72:24 - scrollable list so hang on to the next
72:27 - video and we will do that
72:31 - hey welcome back we're at part six or
72:33 - seven by now on this sql demo we're
72:36 - going to add a new feature to the app
72:38 - right now in this button view all we
72:41 - will click it and then we will display
72:43 - all of the people in our list so that
72:46 - way it's not just some ugly toast
72:48 - message like we had in the previous
72:49 - video so that's coming right up
72:51 - [Music]
72:59 - all right so here's the current state of
73:01 - our app right now when i click view all
73:03 - i get this ugly toast message it tells
73:06 - me who's in the database but it doesn't
73:08 - display it in a form that the user can
73:09 - use very well so what we want to do is
73:11 - create a list adapter for this view and
73:14 - make it show up on the screen
73:16 - so i was working in the view all button
73:19 - just in the previous video and let's
73:21 - comment out the toast because that
73:23 - doesn't seem to be where we want to go
73:25 - so this section is more about android
73:27 - and how the components work rather than
73:30 - the database but it's very related what
73:32 - we need is called something called an
73:34 - arrayadapter so let's create an
73:35 - arrayadapter here
73:37 - and let's just call it the customer
73:40 - arrayadapter
73:43 - so to create the arrayadapter we're
73:44 - going to make a new instance of the
73:46 - object
73:47 - so the
73:48 - type is actually a list so
73:51 - the type of thing that we're looking for
73:53 - a list of is our customer model so i'll
73:55 - put that in the
73:57 - the angle brackets
73:58 - and then the first parameter in our
74:00 - creation is called the context so
74:03 - mainactivity.this is the context of our
74:06 - guy
74:07 - now the next part is a little odd we go
74:09 - to android
74:11 - dot r
74:12 - dot layout dot
74:14 - and i'm choosing simple list item one
74:18 - which is a predefined adapter that just
74:22 - gives a string one one per line this is
74:24 - the simplest array adapter that you can
74:26 - make in android and so if you want to
74:28 - see how to make more complex array
74:30 - adapters i have another tutorial for
74:31 - that that i'll leave as a suggestion
74:33 - above
74:34 - now the last item in the parameters is
74:36 - to have the list so what items do we
74:40 - want to show in our arrayadapter well we
74:42 - want to show everyone the the people
74:44 - that we just selected from the database
74:46 - now the the next item should be to
74:48 - associate this arrayadapter with the
74:51 - actual control on the screen and its
74:53 - name is lv underscore and we should be
74:56 - able to find the
74:57 - item called a customer list
75:00 - then we put inside here the arrayadapter
75:02 - that we just made
75:03 - so let's check it out to see what
75:05 - happens now when i click view all you
75:07 - can see that instead of showing a toast
75:10 - with a bunch of ugly stuff we have all
75:12 - of these people on the list now if i
75:14 - click view all again it seems to work
75:17 - let's go ahead and add another person
75:21 - i'll add richard and choose add
75:24 - and it says success is true
75:26 - where's richard i have to click the view
75:29 - all again and this time he shows up as
75:31 - customer number five
75:33 - so it seems a little awkward that every
75:35 - time i add a customer i have to click on
75:37 - view all to get the list we could
75:39 - probably fix the arrayadapter so that it
75:42 - works with more than just one button
75:44 - first of all let's take the arrayadapter
75:46 - and let's define it at the top of the
75:48 - page so we'll make it into a class
75:50 - member variable copy this
75:52 - and put it up here with the rest of the
75:55 - items at the top
75:59 - so the customer array adapter is here
76:02 - now when we come back down to here we
76:04 - don't want to redefine it we just want
76:06 - to reference it so we'll delete the
76:07 - definition
76:09 - as a matter of fact why don't we just
76:12 - take this entire list here copy this
76:15 - and include it into the uncreate method
76:19 - so the create method should be to show
76:21 - the customer list as soon as the app is
76:24 - opened
76:25 - not a bad idea
76:27 - there is one problem however as you look
76:29 - at the end of the line the word everyone
76:32 - is highlighted in red
76:34 - so everyone didn't get assigned
76:36 - automatically where did we create
76:38 - everyone well everyone was set right
76:40 - here in this
76:42 - adapter part
76:44 - so
76:45 - we're going to have to define everyone
76:47 - up here as well
76:49 - we could also take some of the values
76:51 - that are in here like the database guy
76:53 - let's copy him
76:55 - and let's define him up near the top
77:00 - so let's make him a class member
77:02 - variable
77:03 - and not not assign him anything right
77:05 - away
77:06 - but as soon as we launch the program we
77:09 - can take the database a helper and give
77:12 - it uh give it a new definition
77:15 - so now instead of everyone we can just
77:17 - come into here and type in database
77:19 - helper dot
77:21 - get everyone
77:22 - and that seems to work now let's come
77:24 - back down to here and we did split up
77:27 - these two into
77:29 - you know separate lines that could work
77:31 - but we could also just put in the
77:33 - everyone list inside of the parentheses
77:37 - and then eliminate the line above it
77:39 - so it's a little bit
77:41 - a little bit different but it seems to
77:43 - work just as well
77:45 - so now it appears that we can do the
77:46 - array adapter in two different locations
77:48 - so
77:49 - let's copy this code at the top here and
77:53 - let's insert it down into the buttons so
77:55 - after we have a successful idea that we
77:58 - created a new person we will update the
78:01 - arrayadapter here now there's another
78:03 - red flag that comes up i've copied and
78:06 - pasted this code in three different
78:07 - locations it's only two lines
78:10 - but why have two separate lines and all
78:12 - that code when we can make it into a
78:14 - single method so let's refactor again
78:17 - i'm going to highlight one of these
78:18 - sections here
78:20 - and let's see if we can refactor this
78:22 - and extract it
78:25 - so we want to extract it this time
78:27 - into a
78:29 - function or a method we'll call it so
78:31 - let's create a method
78:33 - so i'm going to name this something
78:35 - obvious like show customers on list view
78:38 - and choose refactor
78:40 - so it says hey this is you sure you want
78:42 - to do this i will accept it
78:44 - and let's say do you want to keep this
78:47 - yes i will replace it
78:48 - and replace it and so automatically you
78:51 - can see these three areas that have been
78:53 - highlighted
78:54 - and database helper is the parameter
78:56 - that goes into them so
78:58 - it looks to me like we've got ourselves
79:00 - a
79:01 - refactored function
79:03 - let's see if it works
79:07 - so sure enough i run the application and
79:09 - when as soon as it starts all of the
79:11 - users in the database come up let's put
79:13 - in somebody new
79:18 - let's put in k and choose add
79:20 - says there's a success well let's get
79:22 - this keyboard out of the way and sure
79:24 - enough k comes down here so if i choose
79:26 - view all it works or if i click on add
79:29 - and we get another version of k version
79:31 - 7 8 9 10. so now we have lots of people
79:34 - in my database and it appears that the
79:36 - list view automatically updates
79:39 - so now you might say well are we done
79:42 - well let's add another method to our
79:44 - function that will delete somebody so if
79:45 - i click on here
79:47 - on somebody's name
79:49 - i could show details about them
79:52 - in my case i'm choosing that that's
79:54 - going to be the delete function so maybe
79:56 - not the best as far as user experience
79:58 - but as far as making a simple tutorial
80:01 - deleting an item when you click on it
80:02 - will work fine so we'll do that in just
80:04 - a moment
80:07 - hey welcome to another part of our
80:09 - application on sql lite in this video
80:12 - we're going to create a delete function
80:13 - so if i were to select somebody such as
80:16 - jan
80:17 - and you'll see at the bottom of the page
80:19 - that says deleted and tells me who it
80:21 - was and the list is automatically
80:23 - updated so that's what we're going to do
80:24 - just ahead
80:27 - [Music]
80:34 - so if we're going to do some deleting we
80:35 - need to come in here to our database
80:38 - helper and do some functions
80:40 - so let's define quickly what this
80:42 - process will do
80:43 - so i'm going to set up the function as a
80:46 - boolean return type
80:47 - and if the customer model is found in
80:50 - the database then we will delete it and
80:53 - return a true statement if it is not
80:56 - found then we will set a false value to
80:58 - this return statement
81:01 - now i should also confess that what i'm
81:03 - showing you is one way of working with
81:05 - sql lite creating these methods such as
81:07 - delete one and get everyone and add one
81:12 - these are typical kind of database
81:15 - operations that you put into a dao like
81:17 - i'm doing here
81:18 - so a lot of tutorials in sql lite will
81:21 - have you do this code right in the main
81:24 - activity so you can do it the main
81:26 - activity and they've actually designed
81:28 - sqlite to work that way
81:30 - but as far as best practices go as
81:32 - separating the functions of your app
81:34 - it's good to have a dao that has all of
81:36 - the methods in it so this is kind of a
81:38 - personal preference of how i would code
81:41 - but there are other ways
81:43 - so the first statement that we need to
81:44 - get is the
81:46 - sql database and we want to get an
81:48 - instance of a writable database this
81:51 - one's writable because we're going to
81:52 - delete from it
81:55 - so now you rely on your sql knowledge
81:57 - and you write a statement to delete
81:59 - somebody so remember we're getting a
82:01 - parameter called customer model we want
82:04 - to delete anybody that has the same id
82:08 - number as his as this person so we'll do
82:10 - delete from and we use customer table
82:12 - where the custom or the column is equal
82:15 - to the column id
82:17 - and it's equal to the customer's id
82:20 - one other detail that might be worth
82:22 - mentioning is i create a delete one as
82:24 - an uppercase
82:25 - let's make it as a lowercase simply
82:27 - because in java most methods have a
82:30 - lowercase for their first letter
82:32 - so just like we did with the previous
82:34 - queries we're going to do a raw query
82:37 - we'll send it to query string and
82:38 - provide it with a null value for the
82:40 - parameters
82:42 - if i click on the little light bulb at
82:44 - the beginning you notice that it will
82:45 - return a cursor type and so we'll set
82:48 - what's called a new local variable as
82:50 - type cursor
82:52 - we'll check to see if we can move to the
82:54 - first item in the results so this seems
82:56 - a little strange are the result sets for
82:58 - a delete function yes there'll be one
83:01 - result probably because we matched one
83:03 - id number and so if we find that id
83:05 - number we should return it true
83:08 - now let's come back into our main
83:10 - activity and see if we can implement
83:11 - this delete1 function so where does this
83:14 - happen do we have a button click here or
83:16 - here
83:17 - we need a new function that will listen
83:20 - for a click
83:22 - so the method that you're looking for is
83:24 - called set on item click listener so an
83:27 - itemclicklistener is not the same as a
83:29 - click listener itemclicklistener will
83:31 - give you a number of which guy was
83:33 - clicked
83:35 - so there's a lot of code that was just
83:37 - given to us let's see if we can
83:39 - interpret it so on item click listener
83:41 - we are listening to first of all we have
83:44 - an object called the parent we have the
83:46 - view which is the list view and here is
83:48 - a key one called the position so the
83:51 - position is which item was clicked in
83:53 - the list
83:54 - we'll use that
83:56 - so what i'd like to do is get the
83:57 - customer that was just clicked so that
83:59 - way we can send it to the method to
84:01 - delete him
84:02 - so i'm going to name this guy clicked
84:05 - customers
84:06 - so what i need to type in is the parent
84:09 - so the parent of the listener is the
84:11 - list view
84:12 - and then there's a method that's looking
84:14 - at me in the face called get item at
84:17 - position
84:18 - so let's choose that one
84:20 - what position do you suppose was clicked
84:22 - well they gave it to us here it's called
84:23 - position on the previous line
84:26 - so that will tell me which person was
84:28 - just clicked or will it i haven't i have
84:31 - a red line what's the matter
84:33 - it says now that i have a conflict of
84:36 - data types
84:37 - so what's required is a customer model
84:40 - that's what i defined over here
84:42 - and what was sent back is just a generic
84:45 - object well i know that in a list you
84:47 - can put all kinds of different objects
84:49 - and i happen to put in customer models
84:52 - here so because i know that there are
84:53 - customer models in the list i can safely
84:56 - do a cast so i can put in parentheses
84:59 - here i could do it manually or let's see
85:02 - if they can do it for me uh
85:03 - automatically so let's see is there a
85:05 - suggestion for what to do to fix it
85:08 - the light bulb it says here cast let's
85:11 - try that cast 2
85:13 - and it does give me that so
85:14 - automatically it says we're going to
85:16 - cast it to a customer model so now we
85:19 - have who was clicked
85:22 - so now we want to go ahead and call the
85:24 - database helper function called delete
85:27 - one and we'll send it the clicked
85:29 - customer and then we'll also update the
85:31 - list view so we'll use the same function
85:33 - that was
85:34 - created a while ago called show
85:36 - customers on list view
85:38 - so that should work
85:40 - lastly it would be a courtesy to tell
85:42 - the user that since you clicked the list
85:44 - we just deleted the guy
85:46 - like i say not the best user experience
85:48 - but we should at least tell them what
85:49 - they did let's see there's an error it
85:51 - says uh i forgot you need to have the
85:53 - database helper sent along as a
85:55 - parameter so we'll put that in the
85:57 - parentheses
85:58 - and let's see if it works okay it looks
86:00 - like i've got the app up and running
86:02 - with all these different users i'm going
86:04 - to pick somebody that's pretty obvious
86:05 - like beth number two let's click her
86:08 - and it says here beth was deleted and
86:10 - sure enough we skipped from id to
86:13 - one to three let's delete some of the
86:15 - even ones there's a four a six an eight
86:18 - a ten
86:19 - and sure enough just the odd people are
86:21 - left all right so let's try to add
86:23 - somebody let's put beth back in so beth
86:25 - is now going to be 632 and she's not a
86:28 - customer and adder did it show it so she
86:31 - is now number 11. if i click 11 the
86:34 - delete function seems to be working all
86:36 - right so we've come to a point where
86:38 - we've got a functioning application we
86:41 - can add we can show everybody we can
86:43 - delete somebody what's missing well i
86:46 - think what's missing is a search
86:48 - function so
86:49 - if you want to take a challenge let's
86:51 - put in a new item and a new edit text
86:54 - view or we can say search phrase
86:57 - and then once you click search it will
86:59 - go to the database and get the people
87:02 - that match your search criteria
87:04 - and then update the list with a new list
87:07 - of customers not the entire list but
87:09 - just a partial list that matches the
87:11 - search results so i'll leave that to as
87:13 - a challenge because the videos have gone
87:15 - a long time now
87:17 - now before we end this tutorial it would
87:19 - also be fair to let you know of a
87:22 - library called room
87:24 - now in all frameworks there are things
87:27 - called orms which are object relational
87:30 - mappers
87:31 - and they make creating databases easy
87:34 - they create sql statements for you
87:37 - and they handle some other details that
87:39 - we're not even aware of at this point
87:41 - and so in android the library that you
87:44 - need is called room
87:47 - but i didn't teach you room at the
87:49 - beginning because as a good teacher i
87:51 - want to make sure you understand the
87:53 - fundamentals you need to understand how
87:55 - to read and write sql statements before
87:58 - you can understand how a tool like room
88:00 - can make your job easier
88:02 - but the next step then is if you're into
88:05 - a database system you should explore
88:07 - what room is and of course i have a
88:09 - tutorial for you on how to use
88:11 - room with android but that is another
88:14 - video so until then thank you for
88:16 - watching

Cleaned transcript:

hi we're about ready to start on a tutorial that will show you how to use sqlite which is android's database system used for local storage name is chad slutter i'm a professor of computer science and software development at grand canyon university in phoenix i'm really glad to be here at free code camp and provide another resource for you i endorse free code camp i've used it in my classroom i've used it personally it's a great way to become smarter in many things so the goal of my career is to make you a software developer and free codecamp is a great resource so let's get started here with the next lesson so we're going to create an application that will demonstrate everything you need to know about sql lite so first of all let's ask yourself when you're designing an app where would you save your data so you're collecting names you're collecting products you're collecting locations whatever it is that you're collecting you want to be able to save it somewhere so your first choice might be locally you could save things to a text file on a local directory or in the sd card or as we're going to show you in this tutorial how to save to the sql lite database you could also think about saving your data online or maybe a hybrid of the two options so you could work with api services which are thirdparty opened access to let companies use their data and you can even buy or build your own api services if you want to save your data you can also set up a sql server that runs online and you can run sql commands against it or you might use some of the online instant service databases such as google's firebase or microsoft or something from mongodb which is all these things that are nosql databases so there's lots of options so if you're building an app and you want to save your data you're probably going to come across this type of data which is json data so json works well with text files it works with api services it's for transferring between different platforms now we're going to be working with a local sql database so we'll be writing sql statements that look something like this you could also think about using firebase or something along the lines that has a nosql structure and so your data can take many forms and there are different advantages to choosing each so here's some advice on why you would save your data to a local instead of a online service so local database would give you the fastest performance that you can get so it's nice to have your data online but it's also nice to be really quick so an offline cache or an offline collection of data keeps your app working even if you're out of cell phone service a local storage can be maybe just a subset of the entire collection of data that you need so i think that maybe a good example of this is google maps i've noticed that when i'm out of cell service sometimes i can still search for certain regions of the country and others i can't because there's a local storage on the device so if you build your app to have some local storage your users can somehow get by even if they're out of cell phone range now also if you're trying to do any auto complete you know when you type in a search term and their suggestions given to you that's a database lookup and so if you're looking up databases that are local it's fast if you rely on a remote service to do all your lookups it's not fast it's a bad idea so use autocomplete for local databases also if you think about cloud storage there's obviously advantages to cloud first of all every device and every user experience is going to have the same data so if you update a record in your app that is saving to the cloud the next time they log into a website for the same app they'll have the most recent copy of what they did so sqlite is a database that is something like you would expect in microsoft access it's a single file it's a text file that's encoded in some binary format it's not a large scale thing it's meant for one user and so all things are simplified so sqlite is embedded there's no installation required you don't have to go ask for any new libraries it's part of the android system it's something called acid compliant which simply means that if something goes wrong during the middle of a transaction you won't corrupt your data if you want to see more about acid databases and the compliance about having different rollbacks i have a tutorial on that in a different series now if you want to if you think about the size of your database it's very light so it will run quickly and all the methods must remember to close off their connections to the database so we don't lock up the database for other applications now you can also do readonly queries and not have to worry about having simultaneous access to it so there are ways to manage sqlite and you're going to see in the tutorial that we're about to begin is that we initially create these tables and databases in the application itself so you don't have to go and launch some thirdparty tool like my sequel workbench or anything you're supposed to be able to code this in the application so the first time the user uses the application the tables are automatically generated and so no setup required by the user now there are other tools that we'll take a look at that will let you peek in and modify the database if you need to and so that would be like sql workbench but they're not required now the data types that you can put into a sqlite database are pretty limited first of all you can have a null value you can put in integers which are automatically scaled so that the numbers are appropriate to the number of bits that you need to represent them now a real number is like for a decimal or a floating point so you can save them as a real type text covers almost everything so long text short text they're all text and then also something called a blob so don't even bother with blobs i wouldn't put them in your database just if you have big things like jpegs or movie files save them in a directory and then put the text of that link into your database so your database remains small and you can get to those files in a folder now let's talk about a specific sql lite library in some of the class methods that we're going to use so we're going to create instances of the sqlite database and the sentence will look just like this in the code where it says get writable database then we're going to use the sql helper and this is just in another video that's ahead that will create the database automatically the first time that it's required so you'll be seeing that in just a few minutes so one of the methods that we're going to see is called the open or create database it will open an existing database or if that has not been created yet will automatically make it for you and so this is what the code will look like so we will create a database instance and then we will create this method where it says hey go ahead and create customers.db and all the work is done for you also when we create tables we will have another function just like you'd expect in a sql statement where we create a table mention all of its properties and then execute that table afterwards with a query string execute also a concept that you're going to see come up is called the cursor so a cursor is pretty much a result set so when you get a list of items back from a search query you're going to have a cursor which is going to be something that you can iterate through and go line by line and then print them to the screen or assign them to some other value and so we'll be using the cursor inside of a while loop also we're going to work with something called content values so content values is kind of an odd thing if you haven't seen it before it's like an associative array or a hash map where you can put some key value in in pairs so like in the example here if i want to put 1 for the student id and jeff for the name and grade 9 you just do it like this and then when you insert it into the database it says hey i can automatically see the column name associated with its value so content values is something we'll be seeing soon so here's what the app is going to look like when we're done you can see if i choose view all i get everybody if i add somebody let's try jeff he's age 7 and he is an active customer it says i have successfully added him and he shows up in the list as person number 12. if i click him it deletes him and so if you're interested in this sqlite database continue on we're going to show you how to do it step by step hi let's create an application in android studio that uses the sqlite database to save our data on a local database so you can see the app that we're going to make is on the screen here if i put in a name and an age of somebody and then i push the add button you can see that it adds it to the list also in the background there is a sql database that's running and so the point of this tutorial is for you to be able to set up a database on your android device query it and delete things from it and so in this first video we're going to go through the setup we'll set the layout and we'll to all the buttons in the list view and everything and then in following videos we're going to set up the classes that will manage the data and especially we're going to work with the database so let's get started now with the part where we add the layout to the application so this is what the layout's going to look like when we're done you can see i've got a couple of edit texts i've got a switch a couple of buttons and a list view and here's all the items that we're going to create so if you're really good with working with layouts you can probably skip to the next video and do this one on your own however if you'd like to have some help on how these buttons are all arranged we'll get started right now so we're going to get started with the application let's launch android studio you can see that i'm working on version 353 i'm going to start a new project let's choose empty activity and next let's name this thing sql demo i think i have to name mine as version 3 because i've done this several times the language i'll choose is java and i'm going to choose the minimum api level as 14. i believe somewhere along the line we will have to bump this maybe to 19 because of the database features but 19 will come when it needs to be i'm going to uncheck this that says use android x artifacts and then i'm ready to go for finish looks like the app is all ready to go so i'm going to take you through the part where we put all the buttons on the screen and arrange them in the right places so let's get rid of hello world i'll select it and press delete and i'm going to expand to get some space to work with and start dragging my items out onto the screen first thing i need to do is put plain text on the top of the window here so let's drag out the item then it's going to give me name so i'm going to set the anchor points to the edge of the screen to the left side of the screen and to the right side of the screen so this is all how you work with a constrained layout so the constraints are like springs that pull the items to the sides let's give it a little bit of a top margin so i'll put in 8 pixels so it's not quite at the edge of the screen and for the width i'm going to set it to match constraint which will make the entire screen looks to me like we could use a padding of 8 on each side all right so that's going to be the name where we put in the name of the person it's a good practice to change the id names so that they're more descriptive so this one is going to be called et underscore name now down in the text area i'm going to delete the part that says name and change it to the part in hint so i'm going to put in the word name now i can't put in the word name because it's already been defined here as app name so what i'm going to do instead is i'm going to put in here customer name which is its own string as i hover here you can see that there is a warning that says hard coding is not a good idea you should use string resources so instead of typing in customer name here i'm going to cut it out and i'm going to the end where it says here pick a resource so the resources are a centrally located spot where you can put your strings so i'm going to add a new string value and i'm going to call it customer name and the value is customer name with a space and let's choose ok now the same result in the end shows customer name here but the reason why you use string references is because if you have to change the language of your application all the strings are found in one location so if you go look under the resources values and strings you will see the new guy called customer name has just been added so that's the strings all right so we better keep moving here i want to put in the next item down which is for the customer's age so i'm going to select a number attribute here it's the same kind of a text edit but it's going to be a number so let's see it says what do you want your constraint to be i'm going to set it to the top to the bottom of the name there we go and then i'll anchor this to the front and to the back i will change the width to match the constraints and for the hint so i'm going to use the word age and once again i'm going to select a resource and we'll call it customer age and i'll put in the word age okay i'm going to set the margins again let's go 8 around the edges so the point of this is that i want to use several data types for my database so this is going to be a string age is going to be an integer and we need to have a boolean so let's go into the buttons area and i'm going to select one of these now you could use a check box i'm going to use a switch so let's drag a switch out and anchor them into place so now i got my switch anchored let's go find the text property instead of saying switch i'm going to put in here active customer actually i don't want to just hard code it again i'm going to choose a resource and click add a new resource and call it active customer okay i can't put in spaces in my resource names next i need a couple of buttons so just the standard button and the other standard button i'm going to link these as well so the first button is going to fall underneath of the active customer and let's give him 8 pixels of buffer now the second button we want to be on the same level as here so i could anchor him to the active customer or i could anchor him to the top of the first button now i'd like to spread these out so let's do the button here to go to this edge let's do the right button to the right edge now this gets tricky i want to make these equidistant from each other so i'm going to tell it to anchor to this button over here and then for this guy i want to anchor to the left button and it never seems to work for me nope doesn't work so what i have to do is i go into the text area and do it manually and i want to set this as a new constraint so i'm in the xml code and i'm going to type in constraint and i'm going to put in the word start so the start is like the the left side of the button so the start is going to be matched to the end of another control which is button one and so now you can see they balance out so they're kind of in the middle of the page all right so we got the buttons on the screen we got them centered now i need to change some uh the ids so let's go into the edit text first of all this is called edit text 4 and i'm going to change it to e t h and just set that and say yes i'm going to change it now for the switch let's change him to be called sw for a prefix and then we'll put in the word active now for the buttons here i'm going to change them as well so btn is my prefix that i like i'm going to call this thing view all and for the text i'm going to change it to be view all the other button let's change from button to to be called btn add and let's change the text to add all right the last thing i want to put in here is a list view so i'm going to use the legacy items and call list view now list view is considered legacy because there's a new improved version of a list view this one's a lot simpler to work with so for our simple tutorial we're going to work with a simple list view the one that you probably should be using instead of a list view is called this recycler view the recycler view is more efficient it runs faster let's do the constraints i'm going to attach this one to the bottom of the button and to the left side of the screen to the right side of the screen and to the bottom so it doesn't really look like i'm creating constraints but if i go look in the text view i should see some constraints here and i do not have an end so i want to choose constraint end to the end of and i'm going to choose the parent all right it looks like i have all the controls on the screen one thing that i would like to do is give this thing an id so let's go and call it l view and we'll call it customer list and we've got ourselves the complete process let's run the app and see if it works hooray it looks like everything ran so it looks like i'm able to put in some numbers here and then i'm able to click the buttons even though nothing happens we're ready to go on to the next part hey welcome this is part two of a video series for making a sql light database on an android app so in the previous video we created the layout in this video we're going to create the model that will be the data for our application hey so i'm glad you stuck around for part two here we're going to create a model which is a class that will hold values of a customer so let's go into the area where we have the java code you can see that main activity is already here and we're going to add something to it to join it so let's do a right click new and a java class now a java class is just going to hold the data for our object so we're going to create the class we'll call it customer model so let's think of three things that we could add to our customers we could give them a name an age and a boolean value called is active and so these three things will demonstrate the database fairly well different types of data even though it's not a very complex object also think of an item that's missing so name age and activity that seems to be about right how about the id number so there's a debate should you keep your id number as part of the class or just ignore it and use it as the database i recommend that you have it as part of the class so at the top i'm going to also add private int id and so this object has four properties usually the next thing that i create in a class is its constructor and so i'm going to make two of them let's do a right click in the text and choose generate i'm going to select constructor and select all of the properties and click ok so this is standard programming with java and any objectoriented language so a constructor is called whenever a new customer comes into being so when he pops into view we have to tell it what his id name is what his actual string name is what his age is and if he's an active or inactive customer and so all of those are four parameters that we put into the constructor sometimes an application requires a nonparameterized constructor and so i'm going to just create one and leave it blank i'm not sure if we'll use it or not but it's here just in case the last thing that we'll need for this class is for the getters and setters so once again we will right click choose generate getters and setters and i'll select all of the properties so all four of them and click ok so if you count these you should see that there are four getters and four so there's one more thing i'd like to add is the two string method the two string method is necessary if we're going to print this and so sometimes we print it in the log sometimes we create it in a message on the popup sometimes we put it in a list but tostring will take all of these properties and put them together into a single string since the tostring method is very common it's part of the menu that you can generate automatically so right click in the text choose generate select tostring and all of the properties now when our two string method is all put together it will create a whole string that says customer model id equals name equals age equals is active equals and then a close curly so that will work for now we'll probably come back and modify this later because it will be kind of a long string and we'll want to make it shorter so now we're ready to make the program that will actually make this application run so we've had to set up a layout and now we've had this class so you got to wait for the next video and to see how we're actually going to generate a database and make this data save to it hey welcome again in this video we're going to continue our application that demonstrates the sql lite database in android studio hey thanks for sticking around in this video we're going to create the actual listeners for each button click and so in the previous videos we created a couple of buttons here and we're going to wire those up to the actual code in main activity so when you start an application main activity is rather empty and so now we have to start telling it what the buttons are and who's going to be clicking so the first thing that i usually do when i start an application is make a reference to all of the buttons and other controls that are on the layout and so these are called member variables of the class they're at the very top and they'll be accessible through all of the other methods in this module so i'm going to put in a reference to every control that we created so first of all there were two buttons there was button add and button view all so if i need to import something because the red text is there i press alt and return or alt enter then i want to put in the edit text we had two of them one for the age and one for the name also the switch this is the toggle switch that will tell us if it is an active user or not and so sw is the prefix that i used for here now the list view is also has to be imported along with the switch so at the end here you should have to import by pressing alt enter on each of these now you don't have to use the same name for the variable as you do for the layout however it's much more sensical it's it's easier to follow if you do now i made a mistake already i promised you that these were class variables member variables and i stuck them inside of the uncreate method this is a problem that you might do as well if you leave them here they will not be accessible throughout the page so i'm going to cut them out and move them up here on line 11 or 12. so right in here so this is where they're defined and now they're going to be assigned a value here on the uncreate method so remember oncreate starts the application that's the first thing that it comes to and so now when we create this application we need to give these variables a value so for each of the variables that i created up above i'm going to go find their actual value that's been assigned by the computer so we're using find by id as the method name and we're looking in r which is the resource folder and then we follow it with id and then the name that is located in the resource so as i go through here you notice that the variable name probably matches the name that i selected in the layout it looks to me like i will have one difference here with activecustomer in the layout i just called it switch active but it'll still work even though the matching variables aren't exactly spelled the same the next part of the logic that i usually program is the listeners so the click listeners for each button so there are multiple ways you can set a click listener i prefer this method here which is selfcontained there's no references outside of the file that you're looking at right here so an unclick listener for one button works just fine this way so just to test out things i'm going to set in a toast message for each of these so i'll just have a text appear on the screen to make sure that everything is set correctly and there are no errors all right it looks like the application's up and running i click on button and it says the view all button here i click on add and the add button is working so looks like the button click listeners are working however why did i just put the word button on here shouldn't this have said something else let's go change that so i'm going back into main activity here and choose view all and why did the text not show up let's go look at the xml file and let's see what it says for text here sure enough i look in the xml and it says button here even though it shows view all on the layout some strange things happen i have no idea why it says that so i'm going to put in here view all and save it and run it again okay so this time for some reason the view all button is working properly so now instead of just printing a toast to the screen let's actually create a customer object and then print the toast to the screen all right so i'm going to create a new customer reference so the customer model is the class that we just created earlier and now i'm going to create a new instance of it so i'm going to generate a new customer using the constructor now as i go through the constructor fields i'm going to choose the values that correspond to each property of the customer for instance the id number i have no idea what number it's going to be so let's just put negative 1 for a default value that can be changed later now i'm going to have a string for the name so i'm going to snag that from the entry form where it says et name and i'll get the text and for some reason you have to convert it from text to a string so go through that whole process three items to get a string next i want to grab the age so that comes from the et age field and then finally the switch that gives us the active customer status now this doesn't have a text item it does have an is checked so i'm going to select is checked as well when i'm all done here i have a list of properties but it's redlined so there's something wrong here and let's check it out so i hover over the red line and i see that my constructor does not match with the properties that i provided so it's lighting up the age you have provided a string to me well obviously age is an integer so we need to convert that and then uh let's go fix that one and the the last one seems to be okay where it says boolean boolean is what uh the switch generates is a is a true or false value so let's convert this thing here to a from a string to an integer so the class that you're looking for to do the conversion is called integer capital integer dot and there is a whole bunch of methods for managing integers the one that we're looking for is parse int and you can see that the parameter that expects is a string so this one will work fine so we will parse int and then i will surround the rest of it with parentheses now lastly instead of saying add button i'm going to put in here the value of our new guy so it's customer model and then i'm going to use the tostring method that was in there and let's see what shows up on the screen so let's run it now so here's the app i'm going to put in a customer name i'm going to call him how howard and then for his age let's see if i can get to age and let's click the add button finally and you can see down here the customer model shows up so let's hide the keyboard and try that again choose add so you can see it's generating howard age 34 and active is false however what happens if i go into if i make a mistake here so for age i'm going to put the word i try to put in old can't type how about if i leave it blank and then choose add my application just crashed so i'm suspecting that the integer parse in didn't work because i gave it a blank let's try this again and let's check the errors before i click the ok button okay so the app is up and running i'm going down to logcat in the corner here and switch back to the emulator and now as i leave it blank i choose the word add and it says it keeps crashing you stopped it what happened that didn't work let's go scroll through and see if we can find an error so it does say that the error occurred here on for input string blank the process died on line 39. so i click here and line 39 comes up and sure enough integer died so i could do some checking i could do an if statement here i could say if and then i could check the contents of the string or i could try another one i'm going to try this it's literally called try and catch if you haven't seen this before it's kind of cool it's like an if statement so the try says i'm going to try everything in the brackets here so i'm going to try to create the customer if it works then i'm just going to continue on and do the toast so the catch requires a parameter here i think we have to put in parentheses and type in the word exception and e so it knows what the problem was let's paste in another toast and instead of putting the customer's name in here i'm going to say error creating customer and let's run it again okay so the app's up and running i try add and i get an error creating customer down here the app doesn't crash anymore it doesn't create the customer either so the the problem is that i need to prevent the user from damaging the application so there we go so in the next video we're going to actually create items and put them in a database we're finally getting to the database part so stick around and let's install a sqlite database and save these customers as we click the add button hi welcome to another in the series of our sql lite demo as you can see on the screen we are creating a list of customers and the data is saved in the database in this video we're going to actually get to the part of the database tutorial where we set up the database so when it comes to managing a sqlite database you do almost everything in the code so we can initially create the database in a statement in one of the methods of our android application so i know in many applications you create a database and an external tool such as mysql workbench or something similar but here in android we can do it right from the code now there are several management tools that are available outside of this like sql workbench but they're not necessary but we will look at them and see how they now we're going to include the library which is part of android and it is the sqlite library so there'll be two classes that we will be using here one is the sqlite database class which is the database itself so the second class is called the sqlite open helper and it will force us to use a couple of methods that will create and update the database the first time it's run or whenever the database itself design changes now we're also going to include a few things that will do the crud operations so we will have things like get all customers search for customers get one customer delete somebody insert one all of the crud operations that you would expect in a natural database now we're going to focus in on the on this video on the open create database so the first time we try to access the database this method will automatically trigger it will only happen once but when it does it will check to see if the database exists if there are no databases of this file name then it will create one for us and so we'll need this to be able to define the tables that we'll use in our database so it'll look like this we'll have a new database object and then we will use the open or create database method and you can see that we are going to use the string name of our table and then a few other parameters also when we work with any kind of operations in sqlite we're going to be using the execute sql statement and so we'll be writing sql strings and then executing through this method so here's an example we're going to create a table called customerstable provide the column names and then following that immediately will be the execute statement and so this should look familiar if you've done any kind of programming with databases in other languages and so we're trying to keep consistent with what you've learned in java and csharp and other tools okay so now let's return to android studio and implement the things that i just showed you in the slides so we are going to go to the java code and add a new class so let's do a rightclick in the java folder add a java class i'm going to name mine as database helper now you can use your name you could call it database or dao object or something like that the point is this is going to be the class that handles all of the operations we're going to have to extend this as a super class to another object so we could either type it in here or wait just a second so i'm just going to wait for a second before i do that okay so here's our new class now the part where i said we're going to extend is right here so extends is the keyword so we're going to apply inheritance now for this new class it's called sql lite open helper and sure enough android suggested for me now sqlite open helper has some methods that must be implemented which is why we have this error now the red line it says it must be declared abstract or implement the methods so let's go ahead and look for the little red guy there it is the light bulb okay i'm going to choose implement methods and it says you must use these two methods if you're going to write this class if it extends from its parent and let's choose ok so now you can see that we are going to have to implement the method called uncreate and then we're also going to have to implement the method called onupgrade so you must start with the understanding that the uncreate method is going to be called the first time you try to access a database object and so inside of here there should be code that will generate a new table there should be create table forms in this kind of a sql statement the second method is going to be called whenever the version number of your database changes so let's say you have version one of your application it's out there in the world and there are five million users and they're working great and then you plop a new version on top of them and you say hey we've just added a new feature we can now add a few more columns to your tables or add a new table and instead of making their application crash because the tables don't line up with the forms we just have this on upgrade method and so on upgrade is triggered automatically it will automatically modify their schema for their database whenever it needs to be done and so this provides for forward compatibility or backward compil compatibility depends on how you look at it now we still have an error if you look up at the top you can see that that says we've got a problem it says a no default constructor is available now in usual times when you're programming a class it doesn't complain about a constructor being absent well this one is a problem because we have extended from a super or a from a parent class and so we have to implement a constructor that will satisfy his parameters so i'm going to switch over now to the documentation at android and look at sql lite open helper so if we scroll down here we can see that there are three different constructors that are available and we have to implement at least one of these so you can see that it requires that we provide a context so the context is a a reference to the application itself and we'll be able to compute that in just a second string name that refers to the name of the database that we're going to create this here thing called cursor factory we'll look down at the notes in just a minute to figure out what that is and then version which is going to be simply version one for the first time we make our database there's some other constructors but i think we're going to be working with the first guy so let's go and scroll down a bit and talk about the parameters so context is is used to help find your database uh the second is the name of the database is the string and then here it says a factory object used for creating cursors it says or null for the default so this value may be null well let's just leave it null then and see how that works and then finally the version number will start at version one so let's go ahead and implement this first constructor using our helper tools so if i hover over the sqlite open helper i get the little red light bulb i'm going to choose create a constructor matching super and you can see i extended this to the right to see the whole thing i'm going to pick the first constructor and click ok now we have four parameters provided here i would like to provide a string for each of these last three and then pass those up to the super so look how this works i'm just going to delete these last three and keep context around because i can get context from my application the other three i can just provide as hardcoded values so what's my database going to be called i'm just going to name it as customer and let's call it db so you can name any string you like for the file name now for the factory we we read in the documentation that that can be null and the version number can be one and so we are passing up to the parent or to the super the constructor for these four parameters and then we're going to require that the application give us the context and so we'll have to figure that out in a few minutes all right so that gives us the constructor for our new class in the next few videos we're going to create the database using the on create part and then we're also going to implement the on upgrade part so stick around for the next video where we're going to implement these two methods hey welcome back we're in the middle of a demo for a tutorial for creating a sequel light database in an android app and so in this video we're going to actually use some sql statements to create the tables that are going to store the data you see on the screen here all right so the goal here we're going to create is a table that will match the values of our form so our user model has a name an age and a boolean for active customer and so those are the three columns that we're going to have to create in the table now in the previous video that we were working on we started implementing this class called the database helper and so we created a constructor that will tell us what the database will be named and now we're here at the point where we have to use the uncreate method this method will be called the first time that this database is referenced and since it doesn't have any definition we're going to have to create the sql statements that will generate the tables in the sql light system so let's start off by defining a string the string is going to be called create table statement and for right now i'm going to leave it empty just so that we can save the sql statements for in the next few minutes and then to remind myself of what's coming next i'm going to type in the command db execute sql and then the statement string that i just defined so where did db come from well you can see that db comes from a parameter that i'm passing in here and so this pattern is going to hold true in many of the statements that we write here in the future so we need to now figure out what the statement is to create our new table all right so i'm going to go to my memory bank and type in what i know about sql statements so a create table statement is what we're going to work on so the name of my table i'm going to define as customer underscore table and then i'm going to define the first column as the primary key so let's call it id it's an integer we're going to specify it as a primary key and auto increment so this is pretty standard sql stuff if you don't know sql very well then look at some previous tutorials that i've created on working with sql databases so i'm going to stop here for a second and define some static variables i know for instance that the word customer table is going to be used often in my application and i don't want to have to retype it every time so i'm going to cut it out here and create a variable that i can refer to in future statements so let's uh let's highlight the customers table and i'm going to right click and i am going to refactor and look for extract and then i'm going to say i'm going to re extract this as a constant and so constant it's going to say what is the constant name and let's choose ok now look what it did it swapped out using some quotation marks that was handy and concatenating strings and now the value for my string customer table is defined at the top so now let's define the rest of the columns that i'm going to be using in the table so we'll have customer name customer age and their active state so let's take a look here if we can define some of these as a string as well so customer name i'm going to extract so let's go to free factor and choose extract as a constant so now i'm going to put attach the word column at the beginning of this name so it will create a static variable again called column customer name and we'll put it at the top so i'm also going to define the column names for the customer status such as his age and his active status or not and then finally we might as well add the column id as well as a as a constant and so by the time we're done here we will have a list of five different constants at the top of the page so at this point it looks a little bit tedious to redefine these constants at the top of the page but as soon as we start generating more methods below you'll see the advantage of having a constant instead of using the variable name each time now i should be able to go back into my main application and invoke this database helper let's make sure that i've typed everything correctly here because if i mess it up then well obviously we'll have problems so let's check to see create table make sure that you have spaces between the names so that this quotation mark and a space have a of a gap uh it doesn't need to have spaces here make sure that you have spaces between each of these make sure that you have no missing commas and make sure that all the data types are correct all right let's go back into the main activity now and this is where we're going to try to generate this so the place where i'm going to first access the database is when i create a new customer so the method called button add on click listener is where i'm going to go all right so we're going to now create a class a reference to that database helper so i'm going to use the standard java instance creation method so we have a type lowercase name for database helper and then a new instance so what do we have here we have some red stuff at the end it says your constructor for the database helper requires a parameter now just to remind you if you go back into database helper the constructor that we created said provide me the context to get to this uh to get to your application okay so i need to do that now so what do we put in here some kind of context well if you're like me in some java beginning you just say i've seen this before you put in the word this and you hope for the best but it doesn't work what's the matter with this so if you're having trouble with context and you can see another video that i created earlier that tries to explain the best of my ability what context is uh however you look at this one and it says the context that you're trying to send is a reference to the uh method called onclicklistener well the context is really a reference to the application so we want one level higher than that so there are two ways that i can think of that would get here we could first of all type in mainactivity.this that's the correct this that we're talking about and so we'll go with that one with the mainactivity.this so this is not doing anything yet except for making a reference to the new customer database all right so now we've got this sql table created now we need to be able to add some data to it and then we'll see if it actually saves correctly so in this same module in this class i'm going to create a new method that's going to add one item to the database so the method that i'm going to create is called add1 and it's going to expect to see a new customer model so we'll make that as a parameter and then for the default return value we'll make it a boolean and for this first iteration of the design i'm going to say that it always returns true but that will change depending on whether the successful insert was made or not so the first statement that we'll create is called sqlite database db equals and then i'm going to get it from this class so the database helper class and i'm going to choose get writable database now where did this come from did i code this anywhere no it came from the default properties that are available to the sqlite open helper so the class that i'm opening right now and extending has this property in it so this will get our one and only database that we're going to write to notice i have the get writable option and get a read option so if i'm going to insert data that means i'm writing to it next i'm going to create a object called content values or i'm going to shorten it to the letters cv now content values is a special class and it works like a associative array in the language php or a hashmap in other languages i can take pairs of values and associate with them this also looks like the intent in android studio when you when you try to put in a bundle or you try to put in values to pass from one to the other you have to specify a value name and then its actual contents so in the first case i'm going to associate the customer column name with the actual value of the parameter passed in which is called customer model so we're associating a column name with a value which is a string the next item i'm going to put in is the customer's age so we'll select the column name which is column customer age remember i'm using the static constant values from the top of the program here and then i'm going to get the property called get age we'll associate these two together and put it into the content values object lastly we'll get the is active property and we'll associate it with the proper column now you notice i didn't put in an id so the reason why i don't have to tell it what the id number is for this guy is because it is an auto increment column in the database it have if were it not an auto increment or a automatically created value then i would guess have to specify it in the content values the next command that i'm looking for is the insert command so i'm going to type in db and dot and you can see insert is one of the methods associated with the database so let's hover over the parentheses here to see what kind of method parameters we're looking for so you can see that it needs a table name something called a null column hack and the third which is the content values well two out of these three i can i can guess so the first one is the table name i have something called customer table so let's put in capital customer and choose customer table the second is called the null column hack we'll come back to that one in a second and then the third one is the content values which is cv now what is null column hack i don't know about you but null column hack sounds like it was designed wrong why are they hacking something let's go find out what they mean so sqlite database is the android docs that i'm looking at and let's do a control f on this page and i'm typing in null column so it looks like i'm coming to one of 20 references on the page to the null column hack let's see if we can figure out what it is as i page through here it looks like null column hack is used on many of the operations in the database what's it do aha here we go we have some explanation string it is optional it may be null sql doesn't allow inserting of a completely empty row without naming at least one column it goes on to say if your provided values is empty no column names are known and an empty row cannot be inserted so it sounds to me like if you're trying to insert an empty row then you have to have a specific name here well i'm not inserting an empty row so i'm going to stick with this null option for right now otherwise i believe i would have to provide at least one column name so you could put in a column name or you could put null so since it will accept null i'm going to put in null here in the middle now i want to know if this was successful or not so let's go hover over the beginning and we should see a little light bulb appears that says introduce local variable let's see what that does so the return type from the insert will return a long so this means it's really a success variable so if i get a positive number it means it was successfully inserted or a negative number means it was a fail so i'll just simply put in an if statement to say if it was negative one will return false if it were a positive one then we'll give it a true all right so that gives us a full add one function now let's go back to our main method where we'll actually use this so i believe we left the code in this state before i started on this process here we created a customer model inside of the try catch actually what i want to do is create this definition before the try and so we'll just create it here as a null value then inside of the try we're going to assign it so we will create the assignment statement separate from the definition statement and then if it works we will have a successful customer model however let's talk about the next section if it fails let's make a customer again so let's say if this create person fails then we can provide some default values and that way the user knows that something went wrong so for the default values i'll give it as an id of negative one a name as error an age of zero and is an active member is false so this is arbitrary you can put anything in you want if the failure occurs finally near the bottom we can go and try the insert method so we will call on the database helper class we'll put a dot and we should see add one then we can provide as a parameter the customer model so will this work or not we can find out if we choose add and introduce to our local variable here which will give us some kind of a true false statement so let's let's call it things success i will make a toast now and it will indicate whether it was successfully inserted into the database so i should get a true or false now we can test this out alright so we got the app running here let's put in somebody put in mary age is 52 active customer and ad it says here success is true well it must have gone into the database but how can we tell well let's go check out where that database is now fortunately in android studio there's a way to do that let's go click on android studio choose view tool windows and look for device file explorer this will let us look at all the files on folders on our computer or on our device so let's go and look at all these folders here now where could it be let me help you find it so the folder you're looking for is called data we're looking for another folder called data and then under there are all of the applications and services that are on your android phone most of them go with android itself so dot com android we can probably ignore all those and we scroll down a ways until we come to something that looks customized to me so sure enough there it is there's edu and shad sluter it looks like as what i created and inside of the folder called databases you see three files let's take all three of these and i'm going to save them so save as this allows me to execute a export so let's go to the desktop and choose open and that will save all three of these guys so now what are they going to look like if i try to just double click on customer db you can see i get total junk this is a binary file unreadable so not very useful however you can see down at the bottom of the screen i have two applications that are installed on my computer this one here is called db browser for sql lite and this one's called sqlite studio this is kind of like the my sequel workbench tool now the one that i like to use is called db browser for sqlite here's their website it's called sqlitebrowser.org it is very simple to use sqlite studio is also available apparently only for macintosh so let's try to open the database i'll click on open and i'll navigate to the desktop and you can see all three files that i just saved are here the one i'm looking for is customerdb this is the file that is the principal database file click on open and you can see that there's a browse to the structure and the data so you can see i've created a few users they've got their ages and their active customers are both set to zero so remember in sql lite zero is a boolean false and one is a true so you can see that i have data i can manipulate the data i can create new records just like you would in any other database management tool so the point here is just to say that i can look inside the data i know it's being created so that would pay take us to the point where we can insert data there's still a lot to do yet we need to be able to delete data we need to be able to show it to the user on a list in the application so we're getting closer but this is the point where we start creating sqlite databases so stick around and we'll show how to create this into a list for the user to see hey welcome to another part of our sql lite demo we're creating an android app that will save data to a local database and then you can view it on a list view so the point of this video that we're about to see is how to create this list view that you see in front of you and we've been able to add an item to the database but now we're going to display it all right thanks for sticking around we're going to create this list that you see here and pull the data from our database and update it every time we add a new record so to make this work we first of all have to start in the database helper and we have to create a method that will pull all items out of the database so the first thing we should do is define what the properties are going to be when it returns so since we're going to return a list of everybody we need to make that the function or the method return type so after i choose lists of customer model i can give it a name such as get everyone or select all or get all you can name this whatever you want but it does have to be specific so you know what it means now it looks like we have to import whatever a list is so let's press alt enter and now the list is happy so to generate the return list we're going to have to define it first so we'll create a item called return list it's defined as type customer model and then it works as an array list that should work really well then before i forget at the bottom of the list i will put in a return statement so it satisfies the requirements of my method so in between these two i have to generate a bunch of code that will get data from the database so the first item that we should do is create a sql statement that will do what we asked it for so this is a pretty simple one select star from the users table and the customers table really notice i'm using the defined constant called customer table so now i'm going to make a reference to the database that's active so we'll say the sqlite database db equals and then i'm going to type this dot and the first item that i choose is called get writable database now think twice about what you just chose here do i really need a writable database i'm just selecting here so i do not need a get writable what i could do is just type in readabledatabase now what's the difference so the difference is that whenever you open up a writable copy of the database the database is locked no other processes can update it and so it creates a bottleneck if you have a readable copy of the database many different processes can read from it since there's no changes being done so better to choose readable database even though writable in this case would probably work next i'm going to actually execute this query so i'm going to type in db dot and we have different choices we could do execute sql or something called the raw query now we're going to choose raw query because of a return type you can see up at the top that it says this return type is called a cursor so we're going to introduce the idea of a cursor in just a moment and see how it works but i'm going to choose raw query and then for the properties let's put in the query string that we just defined okay so now we got this query that's run what do we do with it well let's see let's go back to the database and let's hover over it the light bulb appears and it says introduce a local variable so the local variable is called a cursor so that's the return type of the raw query so a cursor in sqlite is the result set so just like in other database languages when you ask for a query you get back something called result or something similar to result a cursor is your results so it'll be a complex array of items and it'll be rows and rows of data if there are lots of people that were just selected so the cursor is your result set so i want to check to see if there was actually results brought back from the database did it succeed so that will be an if statement now i'm going to check to see if cursor dot and what is the method that i'm going to choose from you would think that it would be like a method called size of return or success what you want in this case is called move to first which means move to the first result in the result set now if this turns out to be a true or boolean true value that means that there were results so yes then we can continue to query through the list if there are no results then the else statement will take over and we'll do something different okay so i'm about ready to begin some coding here and i want to make sure i know what i'm going to do so i'll put comments so what i want to do next is if there are results i want to loop through the results and then i'm going to create a new customer result for each row a new customer object for each row and then when i create that object i'm going to insert it into the return list that was defined just a few lines up and then we'll be able to make this function succeed so next i'm going to do a a do while loop not something that we do all the time but this will work here so i'm going to do this method while we can move to the next line so we will finish this when as long as there's new lines all right so here's the pattern we're going to follow we're going to introduce a new local variable of the type that we expect to come from the database so the first item is a id number which is an integer and then we're going to get it from the cursor now i'm expecting an integer so i'm going to use the word get int now obviously if there is something in the database in this column that is not an integer the program will crash or it will not give us the right record so how do i know which position is the integer so i'll just use position 0 because i know what the database table design looks like so the next item from the database is going to be the customer name so i'll define a local variable called customer name and snatch it from database at position 1. we'll do the same thing for the age now when i go to get the boolean variable for my is active or not i'm going to have a little problem as you can see i'm typing in boolean customer active equals so far so good but then when i try to get it from the database i'm going to say from position 3 i'm expecting a boolean now it doesn't even give me that option why not it's because in sql light there are no such things as booleans it just saves an integer of either 0 or value 1. so what i'm going to have to do is take that integer and then convert it into a boolean so wouldn't it be nice if i could just say getint and then assign it to the boolean well obviously as you can see i've typed here it doesn't work that way so it says you are requiring to assign a boolean value and you have provided me with an integer not going to work so i'm going to turn this into what's called a ternary operator and you can see here that it's asking some questions it's got a question mark and a true false but it's a mysterious syntax that's confusing especially if you're new to programming so what does this ternary operator do if if you understand this then skip ahead 60 seconds otherwise let's take a look at an example so i did a google search and tell me what a ternary operator is in java and i came to geeksforgree geeks4geeks it looks like so here's the process so a result variable is going to be given a question so this is like a true false statement and if this first question turns out to be true then we will assign the first value after the question mark if this results in a false then we'll give the second so it's like doing an if statement but it's in more compact form so here are two examples so we could say if expression1 then variable equals this this this code right here is the understandable if then else now if you want to do it in ternary operations you could do it like this you could have a result and then you could use the ternary so ternary is what i used here if you want to look it up some more go ahead but it's a short form of writing ifthenelse statements all right back to here so i've got ourselves the three objects that are required to make a user on the next line i'm just simply going to create a new user object so of type customer and we are going to provide all four parameters in the constructor so we have the id the name the age and the is active next we should be able to put in the new customer into the list so we should provide the add function so down here in the if section i'm going to just put in some comments because really we don't have to do anything if there are no results from the database we will not add anything to the list now the list is still defined we defined it up here at the beginning in line 63 so it's an empty list so it won't be null but it will have no items in it but for just clarity sake i'm going to leave empty in this else section now one thing that you have to remember in sqlite is to always clean up after yourself so you've opened up a connection to the database uh let's close it so other people can use it so we're going to close the cursor with a close statement and we'll close the database with a closed statement too all right check out near the top we have an error still so when we created this raw query it says we provided the query string but it says there's something wrong here let's go check out the light bulb it says um nope that's not what i want uh i'm looking for the parameters that are missing so i don't know what i'm supposed to put in there let's go check out the documentation if all else fails look it up right so i'm coming back into the android docs and we see here sqlite database and let's do a control f and type in the word raw let's see raw query shows up on the page and what are we supposed to do with raw query so raw query returns a cursor well that's good to know it says we're expecting a sql string so a sql statement and something called selection args so what is selection args it says you may include question marks in the clause of the query which will replace by values from selection args okay so this is for working with prepared statements and we're not going to do that right now so i think we can just provide a null value here so the selection args are none okay or no so the view all button is where we're going to actually make this happen so let's quickly put in some code and then toast it to the screen the first thing we have to do is create a reference to our database so just like we did in the button add we create a database helper object and we'll set that up as a new instance now this should be as simple as creating a new list of type customer model and we can capture this from the database helper with a method called get everyone now for the toast i would like to simply toast out a really long string and so for the toast message i'm going to replace the string with everyone you can see that this isn't quite right so let's see if we can add a dot to string on it and it looks to me like that will work so let's see what happens i'm going to run this okay so i got the app up and running now before i click on ad i'm just going to choose the view all button well it certainly looks like i've locked up the database nothing is responding i can't make anything happen i've probably put the application into an infinite loop so let's kill the app let's click the little red square and see if we can figure out why so my guess is i'm going to the database helper to look at my loop here that i am doing on the database so the do while loop comes to mind as a possible problem so look here at the while loop it says i'm going to do this while i move to first well moving to the front of the list means that i'm always going to be doing the first record in the database so this isn't what i meant to type let's see what else there was there was move to next that's the one i want so that means proceed through the database one at a time not repeat the first one over and over let's try that again okay let's add a few people just to make sure that this works so we got jim and kim and let's go ahead and choose the view all button now so click here and i get a customer list it looks like it's working so if i choose add a few more times i get a few more kims let's go to view all and the list is getting bigger so it looks to me like we've got ourselves the database receiving information and the view all button is able to collect it back now in the next video we need to make this display a lot prettier instead of this toast message we're going to turn it into a list so up and down the page on the main activity we will see a scrollable list so hang on to the next video and we will do that hey welcome back we're at part six or seven by now on this sql demo we're going to add a new feature to the app right now in this button view all we will click it and then we will display all of the people in our list so that way it's not just some ugly toast message like we had in the previous video so that's coming right up all right so here's the current state of our app right now when i click view all i get this ugly toast message it tells me who's in the database but it doesn't display it in a form that the user can use very well so what we want to do is create a list adapter for this view and make it show up on the screen so i was working in the view all button just in the previous video and let's comment out the toast because that doesn't seem to be where we want to go so this section is more about android and how the components work rather than the database but it's very related what we need is called something called an arrayadapter so let's create an arrayadapter here and let's just call it the customer arrayadapter so to create the arrayadapter we're going to make a new instance of the object so the type is actually a list so the type of thing that we're looking for a list of is our customer model so i'll put that in the the angle brackets and then the first parameter in our creation is called the context so mainactivity.this is the context of our guy now the next part is a little odd we go to android dot r dot layout dot and i'm choosing simple list item one which is a predefined adapter that just gives a string one one per line this is the simplest array adapter that you can make in android and so if you want to see how to make more complex array adapters i have another tutorial for that that i'll leave as a suggestion above now the last item in the parameters is to have the list so what items do we want to show in our arrayadapter well we want to show everyone the the people that we just selected from the database now the the next item should be to associate this arrayadapter with the actual control on the screen and its name is lv underscore and we should be able to find the item called a customer list then we put inside here the arrayadapter that we just made so let's check it out to see what happens now when i click view all you can see that instead of showing a toast with a bunch of ugly stuff we have all of these people on the list now if i click view all again it seems to work let's go ahead and add another person i'll add richard and choose add and it says success is true where's richard i have to click the view all again and this time he shows up as customer number five so it seems a little awkward that every time i add a customer i have to click on view all to get the list we could probably fix the arrayadapter so that it works with more than just one button first of all let's take the arrayadapter and let's define it at the top of the page so we'll make it into a class member variable copy this and put it up here with the rest of the items at the top so the customer array adapter is here now when we come back down to here we don't want to redefine it we just want to reference it so we'll delete the definition as a matter of fact why don't we just take this entire list here copy this and include it into the uncreate method so the create method should be to show the customer list as soon as the app is opened not a bad idea there is one problem however as you look at the end of the line the word everyone is highlighted in red so everyone didn't get assigned automatically where did we create everyone well everyone was set right here in this adapter part so we're going to have to define everyone up here as well we could also take some of the values that are in here like the database guy let's copy him and let's define him up near the top so let's make him a class member variable and not not assign him anything right away but as soon as we launch the program we can take the database a helper and give it uh give it a new definition so now instead of everyone we can just come into here and type in database helper dot get everyone and that seems to work now let's come back down to here and we did split up these two into you know separate lines that could work but we could also just put in the everyone list inside of the parentheses and then eliminate the line above it so it's a little bit a little bit different but it seems to work just as well so now it appears that we can do the array adapter in two different locations so let's copy this code at the top here and let's insert it down into the buttons so after we have a successful idea that we created a new person we will update the arrayadapter here now there's another red flag that comes up i've copied and pasted this code in three different locations it's only two lines but why have two separate lines and all that code when we can make it into a single method so let's refactor again i'm going to highlight one of these sections here and let's see if we can refactor this and extract it so we want to extract it this time into a function or a method we'll call it so let's create a method so i'm going to name this something obvious like show customers on list view and choose refactor so it says hey this is you sure you want to do this i will accept it and let's say do you want to keep this yes i will replace it and replace it and so automatically you can see these three areas that have been highlighted and database helper is the parameter that goes into them so it looks to me like we've got ourselves a refactored function let's see if it works so sure enough i run the application and when as soon as it starts all of the users in the database come up let's put in somebody new let's put in k and choose add says there's a success well let's get this keyboard out of the way and sure enough k comes down here so if i choose view all it works or if i click on add and we get another version of k version 7 8 9 10. so now we have lots of people in my database and it appears that the list view automatically updates so now you might say well are we done well let's add another method to our function that will delete somebody so if i click on here on somebody's name i could show details about them in my case i'm choosing that that's going to be the delete function so maybe not the best as far as user experience but as far as making a simple tutorial deleting an item when you click on it will work fine so we'll do that in just a moment hey welcome to another part of our application on sql lite in this video we're going to create a delete function so if i were to select somebody such as jan and you'll see at the bottom of the page that says deleted and tells me who it was and the list is automatically updated so that's what we're going to do just ahead so if we're going to do some deleting we need to come in here to our database helper and do some functions so let's define quickly what this process will do so i'm going to set up the function as a boolean return type and if the customer model is found in the database then we will delete it and return a true statement if it is not found then we will set a false value to this return statement now i should also confess that what i'm showing you is one way of working with sql lite creating these methods such as delete one and get everyone and add one these are typical kind of database operations that you put into a dao like i'm doing here so a lot of tutorials in sql lite will have you do this code right in the main activity so you can do it the main activity and they've actually designed sqlite to work that way but as far as best practices go as separating the functions of your app it's good to have a dao that has all of the methods in it so this is kind of a personal preference of how i would code but there are other ways so the first statement that we need to get is the sql database and we want to get an instance of a writable database this one's writable because we're going to delete from it so now you rely on your sql knowledge and you write a statement to delete somebody so remember we're getting a parameter called customer model we want to delete anybody that has the same id number as his as this person so we'll do delete from and we use customer table where the custom or the column is equal to the column id and it's equal to the customer's id one other detail that might be worth mentioning is i create a delete one as an uppercase let's make it as a lowercase simply because in java most methods have a lowercase for their first letter so just like we did with the previous queries we're going to do a raw query we'll send it to query string and provide it with a null value for the parameters if i click on the little light bulb at the beginning you notice that it will return a cursor type and so we'll set what's called a new local variable as type cursor we'll check to see if we can move to the first item in the results so this seems a little strange are the result sets for a delete function yes there'll be one result probably because we matched one id number and so if we find that id number we should return it true now let's come back into our main activity and see if we can implement this delete1 function so where does this happen do we have a button click here or here we need a new function that will listen for a click so the method that you're looking for is called set on item click listener so an itemclicklistener is not the same as a click listener itemclicklistener will give you a number of which guy was clicked so there's a lot of code that was just given to us let's see if we can interpret it so on item click listener we are listening to first of all we have an object called the parent we have the view which is the list view and here is a key one called the position so the position is which item was clicked in the list we'll use that so what i'd like to do is get the customer that was just clicked so that way we can send it to the method to delete him so i'm going to name this guy clicked customers so what i need to type in is the parent so the parent of the listener is the list view and then there's a method that's looking at me in the face called get item at position so let's choose that one what position do you suppose was clicked well they gave it to us here it's called position on the previous line so that will tell me which person was just clicked or will it i haven't i have a red line what's the matter it says now that i have a conflict of data types so what's required is a customer model that's what i defined over here and what was sent back is just a generic object well i know that in a list you can put all kinds of different objects and i happen to put in customer models here so because i know that there are customer models in the list i can safely do a cast so i can put in parentheses here i could do it manually or let's see if they can do it for me uh automatically so let's see is there a suggestion for what to do to fix it the light bulb it says here cast let's try that cast 2 and it does give me that so automatically it says we're going to cast it to a customer model so now we have who was clicked so now we want to go ahead and call the database helper function called delete one and we'll send it the clicked customer and then we'll also update the list view so we'll use the same function that was created a while ago called show customers on list view so that should work lastly it would be a courtesy to tell the user that since you clicked the list we just deleted the guy like i say not the best user experience but we should at least tell them what they did let's see there's an error it says uh i forgot you need to have the database helper sent along as a parameter so we'll put that in the parentheses and let's see if it works okay it looks like i've got the app up and running with all these different users i'm going to pick somebody that's pretty obvious like beth number two let's click her and it says here beth was deleted and sure enough we skipped from id to one to three let's delete some of the even ones there's a four a six an eight a ten and sure enough just the odd people are left all right so let's try to add somebody let's put beth back in so beth is now going to be 632 and she's not a customer and adder did it show it so she is now number 11. if i click 11 the delete function seems to be working all right so we've come to a point where we've got a functioning application we can add we can show everybody we can delete somebody what's missing well i think what's missing is a search function so if you want to take a challenge let's put in a new item and a new edit text view or we can say search phrase and then once you click search it will go to the database and get the people that match your search criteria and then update the list with a new list of customers not the entire list but just a partial list that matches the search results so i'll leave that to as a challenge because the videos have gone a long time now now before we end this tutorial it would also be fair to let you know of a library called room now in all frameworks there are things called orms which are object relational mappers and they make creating databases easy they create sql statements for you and they handle some other details that we're not even aware of at this point and so in android the library that you need is called room but i didn't teach you room at the beginning because as a good teacher i want to make sure you understand the fundamentals you need to understand how to read and write sql statements before you can understand how a tool like room can make your job easier but the next step then is if you're into a database system you should explore what room is and of course i have a tutorial for you on how to use room with android but that is another video so until then thank you for watching
