With timestamps:

00:00 - hello and welcome to this react tutorial
00:03 - where we're going to be looking at
00:04 - creating a
00:05 - application that calls the hacker news
00:08 - api
00:09 - so this is the application we're going
00:10 - to be creating
00:12 - it essentially loads in hacking new
00:14 - stories uh one by one there's 500 in the
00:18 - api
00:19 - the api will return as a list of story
00:22 - ids and then we're going to call another
00:24 - api route
00:25 - that will give us the stories
00:28 - we're going to be looking at infinite
00:30 - scrolling this so we can
00:32 - continuously scroll down and each time
00:34 - it does that we're going to hit the api
00:35 - again for another 20 or 30 stories
00:40 - and then what we're going to be looking
00:42 - at is
00:43 - we're going to be testing this with
00:44 - react testing library
00:46 - we're going to be using style components
00:48 - not too extensively but we're going to
00:50 - be using them just to show you how to
00:51 - get started with them
00:53 - um and we're going to be looking at
00:55 - things like memo in react so we're not
00:57 - having to recall
00:59 - well re-render the component each time
01:04 - on each particular
01:05 - scroll
01:08 - so in terms of
01:09 - this tutorial on you know what exposure
01:12 - to react you have to have
01:14 - i'd
01:15 - say that um
01:18 - you could come in this from a beginner
01:20 - standpoint and if you have a little bit
01:22 - of javascript experience and you have
01:25 - the ability and knowledge to call apis
01:27 - you you will follow this tutorial and do
01:30 - quite well
01:32 - i don't believe there's many necessary
01:33 - um
01:35 - other aspects that you're going to have
01:36 - to need
01:37 - essentially all this is is we're gonna
01:39 - have
01:40 - one component which is a story and we're
01:42 - gonna have a container for the entirety
01:44 - of the stories
01:46 - so
01:47 - let's begin uh and we're gonna start by
01:50 - just creating a create react app with
01:52 - hack and use tuts
01:54 - so i'm going to take this one a bit
01:55 - slower than my last one which was a
01:57 - todoist one
01:59 - even though that was a seven hour
02:00 - tutorial but
02:01 - this one's going to be focusing on more
02:03 - of the beginner aspects of react even
02:05 - though we are going to be throwing stuff
02:07 - in there like memo
02:09 - so if we just create a react up
02:12 - and that will take a few seconds we're
02:14 - using mpx here
02:17 - i basically just grabbed this off
02:19 - the
02:21 - github of create react up so if you run
02:24 - this line right here we'll get a react
02:26 - up ready to go
02:27 - and we can start modifying it and
02:29 - playing around adding components in
02:33 - the only aspects that may get into the
02:35 - intermediate aspect
02:37 - of
02:38 - javascript and
02:39 - and all on all that good stuff is
02:42 - the infinite scroll
02:44 - but i wouldn't worry too too much about
02:45 - that
02:47 - let's focus mainly on react here
02:50 - um so that should be done now so if we
02:53 - do
02:54 - our cd into this and it was hack and use
02:57 - tut
02:59 - and there we are and i'll open up and if
03:01 - you want to do this you can go into vs
03:03 - code and i think if you go to the
03:04 - settings so i think it's command shift p
03:07 - and then type path and it should add
03:09 - code to your path
03:12 - so here we are that's good
03:16 - um
03:17 - let's open this
03:20 - we'll start by doing a quick cleanup so
03:23 - generally what i do each time i get one
03:25 - of these i
03:27 - go in here we don't need to manifest
03:29 - um
03:30 - actually we can probably leave the
03:31 - manifest in there because we're going to
03:33 - be looking at stuff like um
03:35 - service workers and i'll explain those
03:36 - down the line don't need a description
03:39 - uh actually it's just
03:41 - the description
03:43 - let me make this bigger so you can see
03:44 - this
03:47 - hopefully that's a bit better
03:51 - and we'll say here
03:53 - we'll just put in some content so when
03:55 - you're searching google this description
03:57 - is in the little description descriptive
04:00 - box below the title so sir bringing you
04:03 - the finest news
04:06 - since 2019
04:09 - uh favicon
04:10 - don't need theme color we'll keep in
04:12 - there keep the description
04:14 - apple touch that's just the logo for the
04:16 - apple touch icon if you want to make it
04:18 - an application
04:19 - or change this to news reader
04:22 - and my thought process with this
04:24 - particular application is we're going to
04:26 - create it now in the aspects of you know
04:29 - the beginner showing you how again we
04:30 - into react giving you some nice little
04:33 - tips here and there like memo style
04:34 - components uh testing so you should get
04:37 - on your feet with react through this
04:38 - tutorial then the next one we're going
04:42 - to
04:43 - consolidate a bunch of apis
04:45 - so we'll get hacking usable maybe we'll
04:47 - get some stuff from the bbc other tech
04:49 - websites
04:50 - uh and then what we're going to do we're
04:52 - going to use graphql on the back end or
04:54 - just say
04:54 - there's middleware to call some services
04:57 - those services being api routes and then
04:59 - consolidate those and give us those new
05:02 - stories back to the front end
05:04 - um so that should be really nice to do
05:06 - and that's where we'll get into a bit
05:07 - more the intermediate
05:09 - aspects of
05:10 - react and graphql and we're going to be
05:14 - writing all our resolvers and everything
05:15 - else
05:16 - um
05:18 - without using anything like prisma
05:22 - so we've just
05:23 - got rid of those so we can start by
05:26 - doing a clean up in here so
05:30 - generally as uh if you followed my
05:32 - tutorials in the past you know that i'll
05:34 - come in here and uh i'll
05:36 - wipe out the majority of stuff
05:39 - so we'll just set
05:41 - export const
05:44 - bring that into an arrow function
05:49 - and then down here we'll just we don't
05:51 - need the return we can just
05:54 - get rid of that
05:57 - and say hello and we don't need to
05:59 - default export here
06:01 - because we've got an inline export here
06:04 - that should give us something to
06:07 - play with
06:09 - um
06:10 - let's get rid of
06:13 - index.css
06:16 - we don't need the logo number
06:19 - whilst we're here
06:21 - we can turn on the service worker
06:24 - don't worry too much about this at the
06:25 - moment but we'll i'll explain service
06:27 - workers as we uh
06:29 - get to that particular point remove this
06:34 - um
06:35 - and what i
06:36 - generally like to do i just instead of
06:38 - calling react dom here directly i like
06:41 - to just remove that and just say give me
06:43 - render
06:46 - and then we can get rid of uh
06:49 - we need to
06:50 - seeing as though this is no longer a
06:52 - default input we need to change this
06:54 - because if you remember in here we're
06:56 - now using a named export so we need to
06:59 - use an
06:59 - um named import here service workers
07:02 - fine there
07:04 - um one thing we have to do to turn the
07:06 - linter on go into your package.json
07:09 - [Music]
07:10 - and i generally just remove the es link
07:12 - config because i like to run the airbnb
07:14 - one
07:16 - so as you see it's now running give that
07:19 - sieve
07:23 - go in here just add
07:26 - a equals
07:27 - remove that there we are if you want to
07:30 - unregister we don't need that comment
07:33 - let's open up the sidebar
07:35 - so now
07:37 - uh let's have a look do we need to test
07:39 - not right now we can test that somewhere
07:41 - else
07:42 - um close down public we've got app.css
07:47 - don't need that either it's going to be
07:49 - using star components
07:51 - and there we are we've got a clean set
07:53 - up and
07:55 - next what we're going to do we'll start
07:57 - creating the scaffolding so things like
07:59 - the folders
08:00 - and this is a really important part of
08:02 - software development
08:04 - i want you to get in the into the uh
08:07 - the routine of creating these folders
08:09 - where you have separations of concerns
08:11 - so you have components folder containers
08:13 - folder hooks folder
08:16 - selectors mappers all this stuff that
08:18 - transforms your data and keeps it
08:20 - separate so it can live by itself
08:22 - um so i'll show you that right now
08:27 - okay so one thing i've just set up now
08:30 - is um
08:31 - well what i want to do
08:33 - let's just begin and start this and just
08:35 - make sure we've got something coming out
08:37 - generally you may see this issue where
08:39 - it's like
08:40 - telling it telling you about skip
08:42 - pre-flight check there is
08:45 - so if you do see that issue go ahead in
08:47 - here
08:49 - um
08:50 - and just create a new file
08:52 - dim put that in there
08:56 - and then if we go ahead and restart that
09:01 - we should to get the application
09:03 - starting
09:05 - let's see
09:09 - come on
09:11 - there we go perfect
09:14 - so let's begin by doing the scaffolding
09:17 - for the app so let's do components which
09:19 - is a folder or just house our components
09:22 - we will then have constants
09:25 - and generally this stuff is in uh most
09:28 - large applications um because you want
09:30 - separation of concerns so stuff can live
09:32 - by itself
09:34 - hooks we're going to need a services
09:36 - folder for the um
09:38 - api calls
09:41 - a styles folder for our styles
09:45 - uh utilities folder which will basically
09:47 - just house stuff that is kind of
09:49 - miscellaneous
09:51 - uh mappers
09:56 - selectors
09:59 - and that should be it for now uh even uh
10:03 - only containers let's do a containers
10:05 - folder
10:06 - so that should be good so let's begin
10:09 - like what do we need to uh you know
10:12 - start hitting the api
10:14 - well
10:16 - let's have a look so github
10:18 - um
10:19 - and then what we want to look for is
10:22 - the hacking news api
10:30 - so this is a hacking news api
10:33 - and it just gives you
10:34 - let's have a look
10:39 - these uh this is hacking news and we're
10:40 - just going to be calling this api
10:43 - and they've got this api here
10:45 - um
10:46 - we'd have to worry about all this
10:48 - particular stuff right now
10:50 - and uh
10:52 - if we click on one of these you can see
10:54 - that it returns to some json data with
10:56 - like the title the story the url
10:58 - but like i said we have to worry about
11:00 - um right at this moment
11:03 - what we want to worry about here is this
11:05 - new top and best stories so up to 500
11:08 - topper news stories are available at top
11:11 - stories news
11:12 - news stories and best stories we're
11:16 - going to be wanting to hit the new
11:18 - stories
11:19 - so
11:20 - we need some sort of service
11:23 - that can hit this new stories
11:26 - so as we can see it returns ids and
11:29 - these ids are story ids
11:31 - and what we want to do without these ids
11:33 - is get them back and it's going to give
11:35 - us 500 so we've got to be a bit careful
11:37 - in terms of how we're going to manage
11:39 - these api calls
11:40 - but what we want to do is we're going to
11:42 - get these 500 back
11:44 - and we want to render 20 or 30 of them
11:47 - per scroll
11:49 - so to begin with we're going to get the
11:51 - 500 stories from the api which is this
11:54 - so this is the url i'm going to be
11:56 - calling with axios
11:58 - and then say we got this one here
12:02 - 2906
12:04 - 62655
12:06 - we want to go ahead and it says for
12:08 - example a story lives here
12:11 - so if we change this item to
12:15 - this url you'll get all this data
12:17 - and that's pretty much all we're going
12:18 - to be doing so we're going to do two api
12:20 - calls um well two routes we'll be
12:23 - creating two service container routes
12:25 - and we're gonna be calling this api um
12:28 - for the stories because we only need to
12:30 - call this one this api route once
12:32 - because we only need all the new story
12:34 - ids in this case it's top stories but
12:36 - you can do that new stories
12:40 - and we'll get all the ids and make api
12:42 - calls to
12:43 - with these ids to get the story
12:46 - so that yeah that's pretty much it
12:47 - really um i guess what we need to do
12:50 - next is let's have a look
12:53 - we need to create a new tab in here
12:57 - a little bit bigger and what's going to
12:59 - do yarn add axios
13:01 - and axios is a nice little package it's
13:03 - not react specific
13:05 - but it's a nice package that allows us
13:07 - to do
13:08 - api calls and essentially it's it's just
13:11 - what fetch is doing
13:13 - but um people seem to prefer it i like
13:15 - the package
13:17 - uh you can have a look just do github
13:19 - actually austin has tons of useful
13:20 - methods in there
13:21 - so now we've got axios we can actually
13:23 - start making calls so if we go back in
13:25 - here
13:27 - i mentioned the services folder earlier
13:29 - let's create a file let's call it hn for
13:31 - i can use api.json api.json.json.js
13:35 - and we'll import axios
13:38 - from
13:39 - axios
13:41 - and then what i'll do
13:44 - we want to create some sort of base url
13:46 - that we're going to be hitting so if we
13:47 - do export const base url
13:50 - let's leave it empty for now
13:52 - and then we're going to do expert const
13:56 - new stories
13:58 - url
14:01 - and let's put that to an r
14:03 - and then what we're going to do we're
14:04 - going to do xbox cons story url
14:07 - and we'll build these up
14:09 - so for example i'm going to make these
14:11 - into 10 template strings
14:13 - um we want to include the base url here
14:19 - so base url
14:22 - and then what i imagine that one will be
14:24 - is new stories so you could switch this
14:27 - out if you if you wanted to not be a
14:30 - json and
14:32 - pretty much the same here base url
14:34 - and we're going to say i am slash so
14:36 - let's go get the base url
14:39 - so the base url is this here
14:44 - right up to there and you see i've got
14:45 - item there
14:47 - that corresponds
14:49 - with this one here so if i just paste
14:51 - that in here
14:53 - now this is saying this story url is
14:55 - saying
14:56 - this particular string lives in here
14:59 - and then item
15:01 - likewise with this one
15:04 - so now we can start creating a function
15:07 - that will
15:08 - get me a story so
15:11 - let's test this so actually you know
15:13 - what let's get the story of our story
15:15 - urls first or story ids
15:18 - so export cons because we're going to be
15:19 - using this through our application so we
15:21 - want to import it
15:23 - so say get story
15:26 - and that name is perfect something like
15:28 - that is exactly what you want and this
15:30 - is making some sort of side effect
15:33 - so when you think of stuff like image
15:35 - processing so if you're on twitter
15:38 - you upload an image on facebook and you
15:40 - can crop the photos
15:43 - it's quite heavy likewise with network
15:45 - calls which is what we're doing here
15:48 - um
15:49 - likewise with accessing the file system
15:52 - it's going to block say the rendering of
15:55 - the ui so we have to use async here
15:59 - and by saying async
16:01 - we're going to shove it onto something
16:03 - called the micro task queue i don't want
16:06 - to get too
16:07 - deep into exactly what the micro task
16:09 - queue is right now but i'll tell you how
16:11 - it works when we call this
16:13 - so
16:14 - if we do cons result and we're going to
16:16 - say
16:17 - await this response from axios
16:21 - and we're going to this is going to be a
16:22 - get
16:23 - and if you look at axios you've got all
16:24 - these um
16:26 - different methods so you can have delete
16:28 - get
16:29 - should be post patch
16:32 - put requests so there's all these
16:34 - methods but we're going to use get we're
16:35 - going to say go get me that data
16:38 - new stories url
16:40 - and what we're going to say then is
16:43 - once
16:44 - you've gone and got me this
16:46 - then
16:47 - get me
16:49 - the data and we're just going to call
16:51 - this data
16:52 - and once you have that data just return
16:55 - it
16:57 - um we don't need this actually
17:00 - so i've just said okay now you've got
17:02 - data pass me return me that data
17:05 - i'm gonna say return result
17:08 - and if i just go ahead now and go into
17:10 - app
17:12 - let's start
17:13 - bringing some things in here so we can
17:15 - test it so
17:17 - um yeah sorry not up uh let's close that
17:20 - down open this up
17:22 - actually you know what we can test we
17:24 - can test this directly and up it'll give
17:26 - us a good understanding of why we don't
17:27 - want it in app we just want app to call
17:29 - one container or one component and then
17:32 - go do all the business that you have to
17:34 - do in that particular file but right now
17:36 - let's just call in here
17:38 - so say
17:41 - return
17:44 - hello but in here we want to use
17:47 - something from react called
17:49 - use effect
17:52 - in addition we also want to use
17:54 - state
17:55 - so if i now just saying here
17:58 - um when this application you know gets
18:01 - mounted to the page as in you can see
18:04 - what's on
18:05 - the page
18:07 - we want to call our api
18:10 - immediately but we don't want to be
18:11 - blocking the ui so we still want we
18:14 - still want the ui to be interactive
18:16 - so what we're going to do to mitigate
18:18 - that issue is
18:19 - we're going to hold something in a value
18:22 - so we're going to say used
18:25 - and if you've not come across hooks in
18:26 - react just yet let's just say
18:29 - we want the story ids to be stored in
18:31 - this variable here so story ids and if i
18:33 - ever want to change
18:35 - story ids i'm going to have to use this
18:38 - one here so set story ids so you've got
18:41 - a value and you've got a setter which is
18:43 - essentially a function
18:45 - that you can
18:46 - pass
18:47 - data and we know this is coming back as
18:50 - an array
18:52 - because if i hit
18:56 - this here there's an example here you
18:57 - see the array
18:59 - but just for some sanity let's have a
19:00 - look there you are you got an array
19:03 - so i'm just going to say okay if nothing
19:04 - comes back or initialize
19:07 - this particular variable here story ids
19:10 - as soon as you this loads
19:12 - i want you to assign
19:14 - an empty array to it
19:17 - so for example if we don't have the data
19:19 - and we start looping over that
19:21 - and it's not an array we're going to get
19:23 - some sort of error and we don't want
19:24 - that so we're just going to say give me
19:26 - initialize that particular bit of data
19:29 - with an empty ray
19:32 - so just to recap we have a variable here
19:35 - that's going to be initialized to
19:38 - the empty array and if we ever want to
19:40 - change this we just call set story ids
19:43 - so this is where the magic comes in now
19:46 - so we've done the the work in this hack
19:49 - news api we've got this we're making a
19:51 - call out to the hack news api
19:53 - we're using axios so we want to call
19:56 - this in here and we can see that it's a
19:57 - named expert so we're going to have to
20:00 - use a named import to grab this from the
20:02 - hacking news api
20:04 - so let's go ahead and set imp
20:06 - and i'll say
20:08 - um what did i call this
20:10 - uh get story ids
20:13 - and we know we're gonna have to go
20:14 - outside the folder and we're gonna say
20:17 - go get me
20:19 - services
20:20 - uh let's just services
20:23 - um
20:25 - hn api serve that
20:29 - then we're gonna say
20:31 - use effect
20:33 - okay so this is where the big one comes
20:35 - in what exactly is use effect we've
20:37 - looked at use state where you can store
20:38 - values
20:39 - so like this is stored to this initial
20:42 - array to begin with but if somewhere in
20:44 - my render
20:45 - or somewhere in this use effect i want
20:47 - to update this value story ids i can
20:50 - call this and say
20:51 - um
20:53 - set story ids hello
20:56 - so there we are
20:58 - that will now be hello oops
21:00 - so let's just see what happens here so
21:02 - if i log out hello
21:05 - so if you want to call story ids you can
21:07 - just say story ids
21:10 - let's see what happens here
21:14 - cannot resolve
21:15 - i can use to module let's take a look
21:18 - what's going on
21:20 - uh services i can use api
21:24 - uh let's see
21:28 - services get story ids
21:30 - don't spell that right
21:33 - i did
21:36 - that seems right so let's have a look
21:39 - what's going on and this is what you're
21:40 - going to be running into so if you are
21:42 - a a new program and you you think these
21:45 - tutorials always go fine i see people
21:47 - programming
21:50 - um
21:50 - [Music]
21:52 - let me just get rid of that a second and
21:53 - you think you know how can the get
21:55 - through that so easily it's never the
21:57 - case uh stuff always goes wrong
21:59 - and i think it's best to keep somewhat
22:01 - of it in tutorials so set story ideas to
22:04 - hello
22:06 - so there we are we got hello there
22:09 - oh yeah so what happens if
22:12 - i wanted to change this so if i just get
22:15 - rid of this and i'll still you know
22:18 - uh
22:19 - print that out
22:21 - what do you think that's going to be
22:22 - it's just going to be an empty rear and
22:23 - you can let's have a look let's
22:25 - stringify this
22:29 - and there we are it's an empty rear
22:32 - so that allows us to have some sanity
22:34 - check so if i just bring back in
22:37 - import
22:39 - get story ids from
22:42 - services
22:44 - i can use api
22:47 - and then say for example
22:51 - i want to call this
22:53 - method now that we've put together we've
22:55 - done all the work in here i just want to
22:57 - call this now
22:59 - so i can just simply because it's a bit
23:00 - it's been imported up here i can just
23:02 - say
23:03 - guess story ids
23:07 - like sir but what we gotta do
23:10 - oops
23:10 - i'm putting that inside the uh
23:12 - well what say well that is just yet but
23:14 - i'll tell you in a second
23:16 - let's have a look bubble lord i cannot
23:18 - find
23:21 - services can't resolve services
23:24 - let's take a look
23:26 - so we've run into the same era as before
23:30 - so i'm thinking that it is well
23:34 - it's not very descriptive is it so we
23:36 - are doing expert const
23:39 - get story ids return result
23:42 - and we're getting that from
23:44 - the hack and use api
23:47 - so module not found cannot resolve
23:53 - in
23:55 - i can use tut
23:58 - so even though it's coming through here
24:00 - and it's all looking fine the module's
24:02 - fine
24:03 - so i don't know if this is a case of
24:08 - let me restart this
24:15 - start in
24:21 - it's taking its time
24:25 - that's fine so it works i don't know
24:27 - what the issue was there
24:29 - um so yeah we've got the story ids and
24:32 - uh if i let me log this out
24:35 - um because i want to make a few
24:37 - important notes about what's going on
24:39 - yeah so you see it says promise but you
24:41 - know i thought it was returning me my
24:43 - data you see the status is resolved the
24:46 - value and we've got a bunch of data in
24:48 - there from the api so there's 500 um ids
24:51 - in as you can see there
24:54 - but why is that happening
24:56 - well you see how we've stuck this async
24:59 - on here so any function that you stick
25:01 - in async on will always return a promise
25:04 - so now what we have to do we have to go
25:06 - back to app.js and say
25:08 - we can't just call this directly that
25:10 - like we just did then like a regular
25:12 - function we have to say okay once the
25:14 - data's there
25:16 - you see how it's giving me these options
25:18 - so it's saying attaches callbacks for
25:19 - the resolution and or rejection of the
25:22 - promise so i'm gonna say okay go get me
25:24 - those ids
25:26 - and then return me
25:28 - the result which will be a promise
25:31 - with the data held in there and we have
25:34 - to resolve that promise
25:36 - so we can say and to resolve it we can
25:38 - just say then
25:40 - and by saying then
25:42 - on this particular um
25:46 - return promise here because it's
25:48 - asynchronous remember it's asynchronous
25:51 - and the big no is like i just mentioned
25:53 - it always returns a promise
25:55 - so you say get story ids dot then i'm
25:58 - gonna say okay give me the data
26:01 - and this could be anything
26:02 - i could say
26:04 - lemons
26:05 - so once you have the lemons
26:08 - go ahead
26:11 - and set story ids and by calling set
26:15 - story ids here we're going to replace
26:18 - this
26:19 - empty initialized array
26:22 - with our 500 story ids
26:25 - how cool is that so let's take a look
26:28 - set story ids with lemons like i said
26:30 - you can call it anything
26:32 - well change it obviously but um you know
26:35 - boom what's going on here object not
26:37 - great that's perfect so when you do see
26:39 - this objects are not valid as react
26:41 - children we know it's well i know it's
26:44 - worked um
26:46 - and i'll show you why uh in a second and
26:49 - why that happens because you have to get
26:51 - used to reading these errors
26:53 - boom you see that so you initialize it
26:55 - you initialize it quick it's an empty
26:57 - rear
26:59 - and then it returns you all this data
27:03 - but you have some issues here right
27:05 - so this is saying it's giving me all the
27:08 - data back from axios and i don't want
27:09 - that
27:10 - so let me go back and say okay so we've
27:13 - got um
27:16 - well what we've got here we've got our
27:17 - lemons so we're getting the story ids
27:19 - and we're saying dot then
27:21 - now it's saying uh it will say here so
27:22 - on fulfills
27:25 - once you have the lemons uh you know you
27:28 - can return the lemons if you like
27:31 - but what i actually want to do
27:33 - you know i know the lemons are going to
27:34 - be there so i can just remove that so
27:37 - i'm going to say get me the story ids
27:40 - over here i'm going to call this i know
27:42 - it's asynchronous because i put
27:43 - asynchronous there thus being
27:45 - asynchronous it's going to always return
27:47 - me a promise
27:48 - and in there you'll have promised value
27:50 - which will
27:51 - be holding your data because we did it
27:53 - here
27:54 - we got the
27:56 - returned it
27:58 - once this is done go back so we're away
28:00 - in this context here so it's
28:03 - going to await this response then it's
28:05 - going to pop it into result
28:07 - and
28:08 - then we call it
28:10 - then we're going to say then give me the
28:12 - lemons set the story ids to lemons
28:15 - uh let's have a look what's going on
28:16 - here so uh
28:19 - we're getting all this data back so
28:22 - let me just take a quick look at this
28:25 - um
28:27 - you can inspect it so we've got all
28:29 - these story ids as you can see we've got
28:31 - 500 and they all we also get returned
28:34 - the uh the response and a few other
28:36 - things from the hacking news api but
28:38 - like i said we don't want those um
28:40 - basically what we want
28:42 - is a um
28:44 - a clean
28:45 - a clean array so let's have a look so
28:48 - we've got the result we're awaiting the
28:49 - result axios.get
28:51 - new story url then they're
28:54 - there
28:56 - so i don't know if you can see the error
28:57 - here what's not a particular error but
28:58 - it's kind of a clean up axios is re
29:01 - returning me something called data or
29:03 - i'm assigning it to data
29:05 - um oh in this case it actually is
29:07 - returning me dirty so you see there
29:10 - well i only want the data i don't want
29:11 - all this other stuff here like the
29:13 - content type
29:14 - the headers none of that none of that
29:16 - nonsense
29:17 - so a way to do this is i know that's
29:19 - called data because i just saw it in the
29:20 - console and i want to structure that out
29:23 - in a nice easy clean way to do this
29:27 - open up
29:28 - one of these one of these uh curly
29:30 - braces
29:31 - um i always forget the name then another
29:33 - curly brace or should i say bracket open
29:35 - up the bracket give it a curly brace
29:39 - and then you know basically what we've
29:41 - created is this
29:42 - and what that's saying is the structure
29:44 - me out data i only want data
29:48 - as in that particular value
29:50 - as you see now nice and clean and if you
29:53 - look into the the the uh dev tools
29:56 - all you've got in here is just all
29:58 - the um
30:01 - uh 500 top stories uh ids and if you
30:05 - call one of these you'll get the article
30:08 - not the article itself but you get like
30:09 - the title the link all that good stuff
30:11 - so let's go back
30:14 - so now we've got lemons and i've shown
30:15 - you you can call it anything let's
30:17 - replace that with data just so someone
30:18 - don't come in and think all right
30:20 - you know some some guy here is getting
30:22 - some lemons from a hacking news api
30:23 - which is a bit strange
30:25 - um so i want to just take a quick a a
30:28 - quick look now at um use effect and
30:31 - we'll start
30:32 - basically we'll start refactoring this
30:34 - putting it into its own container
30:37 - uh because this is far too hot the
30:39 - far too high up the reactory to be doing
30:42 - all this re-rendering if you leave
30:43 - something in app that has
30:45 - accessories re-rendering components down
30:47 - the line you don't be re-rendering 500
30:50 - components or all the components below
30:53 - so we're going to put it into something
30:54 - else um
30:57 - but now
30:58 - we've used effect you'll notice you've
31:00 - got this use effect function here
31:03 - that um return well it's saying okay
31:05 - i've got an anonymous function and go
31:07 - ahead and do this and people may be
31:09 - asking oh why haven't you got an async
31:10 - stuck on here because you know this is
31:13 - you know it's a network call well
31:15 - there's no reason to use an async here
31:17 - because what we're doing here is this is
31:18 - returning me a promise so it's still sat
31:21 - on this little queue called the micro
31:23 - task queue
31:24 - and uh once i resolve that it's going to
31:26 - get popped off that queue and get um
31:29 - whipped around the event loop and say
31:30 - okay put me back in and so there's no
31:32 - need to stick an async on there
31:36 - hopefully that makes sense because we've
31:37 - already done the async here we get
31:39 - return to promise all we've got to do
31:41 - then is just resolve it
31:43 - and that's what we've done there you can
31:45 - obviously put other stuff on there like
31:46 - um catch uh you could wrap this in a try
31:49 - catch or you could put an error on there
31:50 - whatever it may be but we're just using
31:52 - then we're just saying resolve this give
31:54 - me the data once data's here
31:56 - i'm gonna set it and that's it we're
31:58 - totally done with you that's it we're
31:59 - done
32:00 - uh but let's go back to this here so
32:04 - what are what is this empty array
32:05 - essentially in the shoe's effect like
32:07 - why is it just stuck around here can why
32:09 - can't it just be like this well this is
32:12 - a life cycle if if you were prior to you
32:15 - know uh hooks uh using react prior to
32:18 - hooks you'll know that you had life
32:20 - cycle methods in react and basically
32:22 - what this is saying it's saying okay
32:25 - uh
32:26 - when the component mounts
32:28 - uh do this
32:31 - um if i put in there um
32:35 - let's say for example we had a variable
32:37 - i was like story ids
32:40 - updated and what it just basically was
32:41 - true or false
32:43 - um we could keep a watch on this so i
32:45 - could put story ids updated in here
32:49 - and basically use effect will watch for
32:51 - this to change so if i passed
32:54 - maybe a set timeout so set timeout which
32:57 - i'd never do but um if i every 10
32:59 - seconds even though this is never
33:02 - accurate in terms of the reading of the
33:04 - seconds it's basically saying do this
33:06 - for a minimum of that amount of seconds
33:08 - so if you have two thousand milliseconds
33:10 - it's saying do this for a minimum of two
33:12 - thousand milliseconds
33:14 - but let's say for example in here every
33:15 - two thousand milliseconds
33:18 - i you know did story ids updated equal
33:21 - to true
33:22 - um and then i'd you know eventually kept
33:24 - switching it between true and false
33:26 - and this use effect will see that and
33:28 - then it will be like okay well this
33:30 - story id is updated has changed i need
33:33 - to rerun this again
33:35 - and when it reruns that it will do a
33:36 - re-render and you know potentially we
33:39 - could have new story id so we could get
33:40 - new stories so we could have a live feed
33:42 - of new stories so all that does is with
33:44 - an empty array it's just going to run
33:46 - just the ones you stick something in
33:48 - there
33:49 - and it's going to watch
33:51 - that particular
33:53 - variable and if that variable changes
33:55 - it's going to re-render so you can run
33:56 - into an infinite loop here if you're not
33:58 - careful and i'll show you why
34:01 - so uh while whilst this is happening
34:03 - i'll just uh
34:07 - use
34:08 - effect here so let's just watch how it
34:11 - works you know if you want to learn
34:12 - react just uh or any language well
34:15 - javascript merely dump a bunch of
34:17 - console.logs in there and just see
34:18 - what's going on in the dev tools
34:20 - uh so let's have a look console.log
34:23 - use effect here you see you just run the
34:25 - once
34:26 - great right
34:27 - okay now let's run into an infinite loop
34:29 - um because we love infinite loops so i'm
34:32 - gonna stick story ids in there so this
34:34 - is going to run
34:35 - and it's going to be like okay well i'm
34:37 - going to set the story ids with data
34:39 - oops i'm going to set the story ids with
34:41 - dare and this is watching story ids so
34:44 - it's like okay well story ids have just
34:46 - changed i need to re-render this
34:49 - and when it gets here again it's going
34:50 - to re-render well it's going to set the
34:52 - story ids once more up here
34:55 - and then this is going to be like oh
34:56 - well story ids have changed again
34:59 - i need to re redo this function and just
35:02 - keep going round and round and round
35:04 - because
35:05 - once this is resolved
35:08 - we're gonna basically say set the story
35:10 - ids
35:11 - the use effect is watching the story ids
35:13 - and it's gonna come back in here keep
35:15 - re-rendering and we'll show it uh i may
35:18 - crash my uh tab doing this but uh there
35:21 - you are look at that it's going crazy 25
35:23 - it's just re-rendering i think chrome
35:26 - should have stopped it no it doesn't i
35:27 - think firefox does though um so i need
35:30 - to check that out i'm gonna
35:31 - my laptop may set on fire
35:33 - um
35:35 - there we are
35:36 - perfect we're back to normal um yes
35:38 - knowing for not loops there but yeah
35:40 - that's how use effect works here's
35:41 - another way to
35:43 - what we're looking at later so we'll be
35:45 - looking at clean up
35:48 - and cleanup basically is when you want
35:50 - to just clean up anything some sort of
35:52 - subscription or something like a layout
35:55 - effects so if you're messing with the
35:57 - layout like a um
35:58 - you call in a scroller you don't want to
36:00 - be
36:01 - re-rendering um all the time and because
36:04 - there's implications to that but i'll
36:06 - explain why there but now now we've got
36:08 - the um
36:10 - uh story ids
36:13 - i want to refactor this out and say okay
36:15 - give me a container and i'm going to
36:17 - call this container
36:18 - oops not a new folder i want to call
36:20 - this container
36:22 - um
36:22 - what we're going to call it uh well
36:24 - let's just let's just do it in plain
36:26 - english it's a story's container let's
36:28 - just do stories container um
36:31 - i think i think that's as simple as you
36:33 - can get with that to be honest uh so
36:35 - let's grab this off here stories we're
36:38 - gonna need react um
36:43 - we've got to go up one more for that
36:46 - and we're going to need we're going to
36:47 - basically need this all right
36:49 - so if i just put this right back to
36:51 - normal um
36:54 - come on you can do this
36:57 - oops there we are that looks good to me
37:01 - uh we'll just bring that in oops just
37:03 - bring that in there
37:04 - that looks good rename this uh in here
37:07 - to uh star is container
37:10 - star is container
37:12 - um stringify looks good
37:16 - uh and then you know what i'm gonna
37:18 - render that story concerner
37:20 - stories container
37:23 - and where did we put it well we put it
37:24 - in containers
37:26 - um
37:27 - because it's next to it let's go
37:29 - stories container
37:31 - soon as though this is a component you
37:34 - know what render that component
37:38 - there we are
37:39 - perfect nice refactor
37:42 - um
37:44 - so now we have
37:46 - a
37:46 - our
37:48 - story storage container and we've got
37:51 - all the ids
37:52 - what we need to do now is create um well
37:55 - essentially we want to be able to pass
37:57 - an id up to the hack news api
38:01 - and
38:02 - we're going to be doing in here so let's
38:04 - do xbox const and instead of get story
38:07 - ids let's go set get story and this is
38:09 - an asynchronous function
38:11 - that takes in a story id
38:15 - and then we're going to say const result
38:19 - pretty much the same as before
38:21 - await axios
38:23 - dot get
38:25 - and we're going to give it a template
38:26 - string and we're going to say story url
38:29 - which is this here so we're going to say
38:31 - okay give me this
38:33 - and then just item for on on the end
38:36 - which is good
38:38 - and then we're going to say plus
38:40 - actually not plus i'm living in the old
38:42 - world of javascript here
38:44 - um let's just uh actually we could do a
38:47 - plus uh story id
38:49 - um there's other ways to do it template
38:51 - strings but we'll just we'll do that for
38:52 - now and said.json
38:54 - and then of course we have to resolve
38:56 - this so let's do dot then and you can
38:58 - see how the uh the intellisense is
39:01 - telling me you're gonna have to resolve
39:02 - this we'll do the same as we did before
39:05 - let's just structured data out of there
39:08 - and once we've got the data we're gonna
39:10 - say give me the dare
39:11 - return the data
39:13 - that's all we're doing and you know what
39:14 - we need to return this result
39:18 - because now this is a promise that gets
39:19 - returned we're going to have to
39:22 - you know let's test it um what we've got
39:24 - here it's called get star is
39:27 - um
39:29 - let's see
39:32 - we could actually just do
39:36 - uh we'll say if stories ids and story
39:39 - ids is
39:41 - dot length is greater than zero because
39:44 - firstly it's not going to be there
39:47 - actually let me just show you the
39:48 - implications of passing an id right up
39:50 - there
39:51 - let's grab this one
39:54 - um what do we expect it to be
39:59 - let's switch out that id
40:02 - so expect it to be
40:04 - i don't know what that is um
40:08 - but anyways let's pass it this idea
40:12 - uh so yeah we're passing it this id we
40:14 - can just actually pass it down like that
40:16 - and now let's resolve it
40:18 - um and always say console.log
40:22 - there looks good to me
40:27 - boom there it is
40:29 - there's the story
40:31 - and you see it matches up with this
40:34 - perfect
40:36 - so we know that works which is great so
40:38 - we've basically just built a service in
40:40 - here that can
40:42 - call um the hacking users api and that's
40:44 - all it is that's all that is for the api
40:48 - uh so pretty simple right really nice we
40:50 - can get data from elsewhere
40:52 - and uh we obviously have to build on top
40:54 - of this so
40:56 - at some point in time we're gonna have
40:57 - to build a uh a story
40:59 - so let's take a look now what else we
41:02 - can start working on we've got our story
41:04 - ids and we've also got our stories well
41:07 - we can get a story which is which is
41:09 - really good
41:11 - so let's go ahead and
41:14 - quickly take a look so if we just hop
41:16 - back
41:18 - um let's have a look
41:22 - we've got the story ids
41:24 - so
41:27 - let me see here um i guess what we want
41:31 - to do from this point
41:33 - uh let's see
41:36 - um
41:37 - we want to start building out the
41:40 - well the app's gone
41:42 - so what components let's create a
41:46 - story.js component
41:50 - and here import react
41:56 - and then let's go ahead and
41:59 - do expo
42:00 - const
42:02 - story
42:04 - and then we'll say
42:06 - return
42:07 - [Music]
42:12 - so let's see we've got the return um if
42:15 - we just dump something in here actually
42:17 - let's pull in
42:18 - um use the use effect
42:23 - let's see
42:24 - and then we'll do the standard stuff use
42:26 - effect we know how that works now what
42:30 - we do want is we want
42:33 - uh get story
42:36 - and in that get story we want to get
42:38 - from services and i can use api
42:42 - um
42:44 - let's see so story returns and we'll
42:46 - just say
42:49 - i am a story
42:52 - so look at this save that story
42:55 - container
42:58 - so in story container what we're going
42:59 - to be doing is we're going to be looping
43:01 - over these stories so we've got 500
43:03 - um
43:05 - so let's just uh loop over these and
43:07 - we'll do
43:09 - uh let's just
43:11 - story ids
43:14 - dart map
43:15 - and what's there for each story id so
43:17 - when we're mapping over
43:19 - it's going to give us a story id again
43:20 - this could be anything this could be
43:22 - lemon
43:23 - piece or whatever it may be but let's
43:25 - just call it story id because that makes
43:26 - sense
43:28 - and then we'll say give me
43:30 - what should we give me
43:32 - give me the story component
43:35 - let's import that
43:37 - and that's a story so it's a component
43:40 - and it's our story component
43:42 - and that lives in components
43:46 - and we're importing this as a named
43:48 - input because
43:49 - we exploit it as a
43:52 - named export so we have to do as a named
43:54 - input
43:56 - so let's have a look here so this
43:58 - let's pass story id as a prop
44:01 - so for every story component that gets
44:03 - rendered on the page
44:04 - we're going to pass the story id
44:07 - and this is one of those
44:10 - let's have a look i'm sorry i'm a story
44:12 - i'm a story cool
44:14 - but what this story id is gonna be if we
44:16 - just serve this and go back and pass
44:20 - this in here
44:22 - we can say story id let's just have a
44:25 - look what that story ideas
44:28 - there we are perfect so we get the story
44:30 - id and that means we can now use that
44:32 - story id to make a call
44:34 - over to the hacking news api again to
44:36 - get the story information back
44:38 - and if you're coming from two
44:40 - traditional backgrounds where you've got
44:42 - parameters and um or well arguments so
44:45 - you can pass an argument into story
44:47 - you would probably see something like
44:49 - this
44:51 - but seeing as though this is not a
44:52 - function well in some ways it's a
44:54 - functional component
44:56 - which it actually is
44:58 - but we cannot use the parameter as such
45:01 - we have to
45:02 - the structure that out
45:04 - like so by giving curly brackets and the
45:07 - reason for this is uh in react
45:11 - um
45:13 - so let's have a look so we get story
45:14 - ideas here story ideas come through
45:18 - um
45:19 - let's see
45:21 - what they were coming through
45:24 - ah okay so the story id is sir
45:28 - justin.stringify
45:33 - did i crush it because that's rendering
45:35 - now 500 components
45:37 - uh objects are not valid as react
45:39 - children object with key story id
45:42 - there we are
45:43 - so we've got the story ids but let's say
45:45 - for example sick we just call this props
45:48 - and we don't just structure anything out
45:50 - of there
45:51 - and i'll just remove this
45:54 - um and we'll do
45:56 - console.log not console.log i want to be
45:59 - able to see it on the page so i'll just
46:00 - say stringify props
46:04 - let's take a look
46:08 - there we are you see here so basically
46:09 - all we're doing is just structuring our
46:11 - story id which will give us this
46:15 - so let's put that back to normal
46:17 - and you'll see that pattern everywhere
46:19 - in react it's it basically saves you
46:21 - from having to do props dot
46:23 - story id which is uh
46:25 - quite long-winded
46:28 - um
46:29 - story id
46:32 - so now
46:33 - what we want to do is
46:36 - we want to make a call and seeing as
46:38 - though we've already built this get
46:40 - story
46:41 - we're just going to pretty much follow
46:42 - the same method we've done here where
46:44 - we're doing and get story ids
46:46 - and then place it into story ids but
46:48 - instead
46:49 - we're going to say ustear
46:52 - and within you state what we're going to
46:54 - do we're going to call this story
46:58 - let's do that once more used
47:00 - story
47:02 - set story and the initial story we're
47:05 - just going to say it's an empty object
47:07 - so within our use effect
47:11 - we can come down here
47:13 - and we can say get story from in here
47:18 - which will be this
47:21 - and then we can pass it the story id
47:23 - which is basically just this uh prop
47:25 - that gets passed down
47:27 - and then we'll resolve this asynchronous
47:29 - function and said data
47:31 - and sometimes on this api i've seen that
47:34 - the dot com with urls
47:36 - so i'm just going to say okay once we've
47:38 - got the data
47:40 - once it's been resolved and you know
47:41 - you've got the data in here i'm not just
47:43 - going to return it i'm going to say and
47:44 - and
47:46 - to make sure that we have a data.url and
47:49 - if we do have a data.url we're going to
47:51 - set story to data
47:55 - and that's pretty much it
47:57 - and you don't have to watch for a story
47:58 - id changing
48:00 - so in this case i'm just going to
48:01 - disable that eslint rule
48:05 - because the the fact of the matter is
48:07 - here is
48:08 - um this story id even even though it's
48:11 - uh
48:13 - it's kind of component based where we
48:14 - only need it once
48:16 - we need this story id once and that's
48:18 - pretty much it
48:19 - um we don't expect it to change maybe if
48:22 - there's comments on there
48:24 - um but in this case it's not but if
48:25 - there's comments on there we could watch
48:27 - the comments changing and then we'll
48:28 - recall the api to get updated comments
48:30 - for example but in this case we don't so
48:32 - we're not going to watch for anything
48:34 - we're just going to say
48:35 - as soon as this component mounts
48:38 - do
48:39 - this
48:40 - which gets the story and we pass it
48:42 - starter id
48:43 - then it gets
48:45 - resolves the the function gives us data
48:48 - and then we're going to do a check for
48:49 - the url and then if all is good at that
48:52 - point set the story
48:54 - um so now let's have a look so we should
48:58 - have a story
49:00 - so let's just
49:01 - json.stringify
49:04 - story and it won't be there immediately
49:08 - let's take a look it won't be there
49:10 - immediately
49:13 - but there you see them loading in
49:16 - perfect we've got an empty one here
49:18 - which we can resolve later by just
49:20 - making sure that
49:21 - uh we filter our empty ones
49:24 - and another one there we see how the
49:26 - stories come in
49:27 - and there's quite a lot of them
49:32 - there we go perfect
49:36 - so now we've jumped back in here we can
49:38 - start just building up this component so
49:40 - we can just say
49:42 - if there's a story so this will get rid
49:44 - of that you know empty object and well
49:47 - this bit will and story.url
49:50 - then go ahead and just say
49:53 - give it a p tag and just say story.
49:56 - story.title
49:58 - and we want to execute this as
50:00 - javascript we don't just want to give it
50:02 - some p tags so that's why i'm just
50:03 - wrapping in these curly braces
50:05 - story.title and we'll put this actually
50:08 - in
50:09 - href
50:10 - because we want the url
50:12 - so it says story.url
50:16 - and then from here or now we what else
50:19 - do we have um we have story.buy
50:22 - um
50:23 - so we can set
50:24 - by
50:26 - uh
50:27 - was it story.time
50:29 - we can come and fix that let it post it
50:31 - and we'll just say that i got posted
50:33 - time
50:34 - um
50:35 - i don't believe we have much more so we
50:38 - can just take a look at that right now
50:41 - um let's see
50:44 - let's see what we've done wrong oh
50:47 - always have to return something in the
50:48 - render so even in this case
50:51 - i'm just going to return null which is
50:52 - fine
50:54 - we said bye yeah there we are there
50:57 - and that's what we was looking for
50:58 - that's how simple is to make the api
51:00 - calls
51:02 - and we get this complaint in here so
51:04 - each child in the list must have a
51:05 - unique key prop so we can fix that by
51:07 - going into
51:09 - story.container because that's where
51:10 - it's coming from stories container
51:14 - grab this
51:15 - story id because we know that's never
51:17 - going to change
51:18 - and this is how react checks for updates
51:20 - as well to see what should be updated
51:24 - and in what particular position so if
51:26 - you look at reconciliation within react
51:28 - there's a good post on the react
51:30 - documentation about how reconciliation
51:32 - works and why the key prop is very
51:34 - valuable so if this is changing
51:38 - don't put it in the key so if you're
51:39 - using something like math.random it's a
51:42 - it's a bad thing to use because
51:44 - when it's looking for changes it's like
51:46 - oh the story id has changed even though
51:48 - probably the component data hasn't but
51:50 - it will re
51:51 - um
51:52 - refresh all the stuff in there and the
51:54 - positioning for example
51:56 - on a list could be wrong but
51:57 - nevertheless i don't digress into that
51:59 - just have a look
52:00 - as to how that works
52:02 - so we've got our stories now
52:05 - there's no null ones which is good
52:07 - uh we don't need to get story in here
52:09 - for the story container
52:11 - um
52:12 - [Music]
52:13 - let's have a look where we're at now we
52:15 - don't have any hooks mappers
52:17 - um one thing i do want to
52:20 - create is um
52:22 - something to handle what comes back from
52:25 - the api so
52:27 - if we just take a quick look as to
52:31 - so what's in
52:31 - just remove this quickly for one second
52:34 - and actually
52:37 - remove all that
52:40 - no
52:41 - nope
52:42 - uh json.stringify
52:44 - and we'll say story because it's instead
52:47 - now
52:49 - so i'm just logging out what's inside i
52:51 - just want to see
52:53 - what's in there
52:54 - and you see how we've got descendants we
52:56 - have
52:58 - whoops this is quite a lot you know
53:00 - we've got descendants okay let's just
53:01 - use this as a uh example type we don't
53:04 - care about the type we don't care about
53:05 - the descendants
53:07 - uh the score so we're going to get rid
53:09 - of that
53:10 - so when this comes back from here
53:13 - we don't want to do it at this
53:14 - particular level we'll do it in get
53:15 - story but
53:17 - let's take a look in get story
53:21 - and what we're going to do we want some
53:22 - sort of function
53:24 - that selects the fields
53:26 - nicely so we'll say select
53:29 - uh fields and we'll just wrap that
53:32 - and it's going to say okay well it's not
53:34 - defined
53:35 - okay i understand that so if we're going
53:37 - to utils
53:39 - we could just call this select
53:41 - fields.js
53:43 - now within selectfields.js let's just do
53:46 - export const
53:49 - and then we'll call this select fields
53:54 - and then we'll give it a function
53:56 - that the structures our id by url time
54:00 - title
54:02 - and then we'll say okay if this stuff's
54:04 - you know if it comes in and there's uh
54:07 - there's an occurrence that this
54:08 - potentially could be empty
54:11 - so for example let me just finish this
54:13 - function let's say
54:16 - return mean object with id by
54:19 - url time
54:20 - title
54:23 - and there we go so we've got select
54:25 - fields so that should just bring us back
54:26 - this stuff now we shouldn't have like
54:28 - descendants or scores or anything like
54:30 - that
54:31 - um
54:32 - but if we pass something in here that
54:34 - just happens to be like undefined let's
54:36 - uh default it to an empty object
54:40 - so that's that file done select fields
54:43 - we need to import it in here now so just
54:46 - set imp
54:47 - select fields
54:49 - from utils select fields
54:52 - perfect
54:54 - let's go back
54:56 - and we can actually test this
54:59 - by just
55:00 - heading
55:01 - out
55:02 - that wasn't good we can just test this
55:04 - by um
55:06 - coming in here
55:07 - json.string fight and let's see if we
55:09 - have the descendants
55:14 - as far as i can tell there's no
55:16 - descendants in there which is good
55:20 - so i'll put that back to normal we
55:22 - should have the stories going in
55:24 - um
55:25 - [Music]
55:26 - let's see yes we do perfect
55:29 - okay so we've got the story container
55:31 - we've got the
55:33 - oh cannot destructure
55:35 - id of undefined or null where's this
55:38 - happening select fields
55:40 - so we have to make sure that
55:43 - when we're actually passing into
55:46 - that select fields that we're not
55:47 - getting
55:48 - anything that's potentially going to be
55:50 - null
55:51 - so if we open up the hack and use api
55:55 - we'll say okay once you've got the data
55:58 - uh we're gonna set data and
56:01 - which basically says okay if it's not
56:02 - null and it's true for value go ahead
56:04 - and pass it into there and then we will
56:06 - run into that issue
56:08 - that's the hacking news api part
56:10 - finished
56:11 - we want to implement um
56:14 - infinite scrolling test but we're going
56:16 - to look at that a bit later down the
56:17 - line
56:18 - but one thing i want to show you right
56:19 - now is
56:21 - um well one thing i want to work on
56:23 - right now i think
56:24 - this looks quite boring so i want to
56:26 - give it a few styles and
56:30 - you know just make it a bit nicer so
56:31 - let's go ahead and add in
56:33 - styled components because that's what
56:35 - we're going to be working with
56:37 - we're not going to go too complex as i
56:39 - said at the start of this tutorial
56:41 - let's add that but um we're going to be
56:43 - looking at how you can just manage props
56:45 - and stuff
56:46 - um
56:47 - and changeability within style
56:48 - components
56:50 - uh but yeah we'll see we'll see if uh
56:52 - how how it goes i do like um you know
56:55 - sass so
56:58 - not fully switched on star components
56:59 - just yet but we'll see
57:01 - uh so we've got style components now so
57:03 - we can actually
57:05 - let's start doing the
57:07 - um see
57:09 - if we got styles folder yes we do
57:13 - so let's call this story
57:16 - styles
57:17 - dot js
57:19 - and within here let's just say input
57:21 - styled from
57:23 - style
57:24 - components and do export const and the
57:27 - way style components work is it gives
57:29 - you back like a component
57:32 - somewhat of a wrapper but it's more of a
57:33 - component so if you've got let's say we
57:36 - call this story wrapper
57:38 - and we'll say styles because you always
57:39 - have to give it this um con styled which
57:43 - is the interface so we'll say style dot
57:45 - and we'll give it like the
57:47 - um
57:48 - semantic markup so we're gonna say
57:50 - section
57:51 - and then template tags
57:55 - and then just do whatever you want in
57:56 - here so we'll say okay padding top which
57:57 - is 10.
57:59 - uh margin bottom i'm going to need a
58:00 - margin but i'm on the story wrapper
58:03 - border top 1px solid and we've got cccc
58:08 - i'm gonna say okay first of type i know
58:10 - we're gonna probably have issues with
58:12 - when we've got a title we don't want a
58:14 - border on the top one
58:16 - likewise last of type
58:20 - let's remove that
58:23 - we'll say margin bottom
58:26 - zero padding bottom zero
58:30 - that looks good to me
58:32 - so let's import that and just see how it
58:33 - looks
58:34 - one thing i want to do story
58:37 - uh
58:38 - stories container i think in here we
58:40 - need some sort of um
58:43 - i don't know maybe some titles as to
58:45 - what's going on right now i'm just gonna
58:46 - call it
58:47 - so we've got the map
58:48 - right now i'm going to call it hacking
58:50 - news api but like i said in the next
58:52 - tutorial after this one we're going to
58:53 - be using graphql and grabbing a bunch of
58:56 - different news
58:57 - apis and we can and that'll be really
59:00 - interesting to see how we can use
59:01 - graphql as the the man
59:03 - in there and we can create services
59:05 - around that
59:07 - so let's just give this a fragment which
59:09 - allows us to render siblings next to
59:11 - each other and don't get confused by
59:14 - this it's just saying okay we can render
59:16 - two components next to each other like
59:18 - component one component two
59:22 - but you cannot pass any props to this
59:26 - fragment if you want that you want the
59:28 - react.fragment1
59:30 - and then you can pass like a key value
59:32 - but
59:33 - let's just uh let's not digress we'll
59:34 - give it a fragment
59:36 - uh i'll chuck this in as some javascript
59:38 - and then also what i want to do here is
59:41 - um
59:42 - i'll just give this h1 that says hacker
59:45 - news stories
59:48 - uh let's see where we're at so the
59:50 - hacking news stories and then
59:54 - let's see
59:54 - [Music]
59:56 - we have the map
60:00 - where what's this winging up
60:04 - unterminated json contents
60:09 - uh
60:12 - no let's see
60:16 - i've lot i've gone into bracket hell
60:19 - oh
60:21 - no stop
60:22 - there we are
60:25 - uh this is what so what's this saying
60:26 - here expected uh unreachable card
60:30 - uh what's unreachable
60:33 - oh
60:36 - the lintzer is not serving me today
60:39 - there we are
60:41 - so let's have a look hacking new stories
60:42 - and there they are loading in perfect so
60:44 - let's go ahead and grab our styles it's
60:46 - called stor story wrapper in this case
60:49 - so what we want to do now is uh we want
60:51 - to go ahead and import this also input
60:54 - story wrapper from styles
60:56 - story styles
60:58 - and down here let's just basically
61:00 - rebuild
61:01 - a bit of this
61:02 - so we know we're going to be testing
61:04 - this later on so let's say story wrapper
61:07 - and we'll give it a test id of story
61:10 - just to make sure it's there
61:12 - starter wrapper
61:14 - and let's just see where we've got we've
61:16 - got to with that
61:20 - come on
61:21 - okay so we've got a bit of padding
61:23 - you'll see it's been injected
61:26 - you see it gives it a class a class name
61:28 - which is nice and gives it some weird
61:30 - class name but
61:31 - it's quite cool how it does that
61:34 - so let's go back into our story styles i
61:37 - don't know if we want to do too much
61:39 - more in here i know we've got actual we
61:41 - do have uh two other things to do we've
61:43 - got a title and we also have the meta so
61:45 - like
61:46 - time and buy
61:49 - so let's do xbox const and we'll say
61:51 - story title
61:54 - and within that title we just want some
61:56 - fairly generic but we'll say style.h1
61:59 - again we're using this semantic
62:02 - tag
62:03 - inside.h1.section you could in here do
62:06 - you know div or whatever it may be
62:09 - and then let's
62:13 - margin bottom 5px
62:15 - let's just pull this up here
62:20 - size 18 px line height
62:23 - 1.8
62:24 - give it a margin of zero
62:27 - text decoration none give it
62:30 - a color of two two two two
62:33 - is it two two two e two e two c maybe is
62:36 - that the one
62:37 - background color
62:39 - four eight
62:41 - dc 3d
62:43 - text decoration
62:45 - none
62:48 - and then we've got the meta in here too
62:50 - so also
62:52 - we'll go pretty much of with the same
62:54 - routine so story meta we've got
62:56 - style.div
62:58 - um
63:00 - let's have a look
63:02 - we want font style italic so when you've
63:04 - got stuff stuff like
63:07 - the
63:07 - by uh the author which is going to make
63:10 - that italic and since we've give it
63:12 - we'll give it a span or say
63:14 - which is not the first child but before
63:16 - that child
63:17 - give me some content of
63:20 - oh let me just go grab the bullet snip
63:22 - it from
63:24 - my snippets content um
63:27 - snip its total box
63:31 - there we are let me put that on a
63:32 - keyboard shot cause i use it all the
63:34 - time margin bottom margin right margin
63:37 - left
63:39 - uh you could actually just do for this
63:41 - you could probably for shorthand css you
63:43 - could do
63:44 - zero so i'll target top and bottom this
63:46 - will target left and right
63:48 - and then we'll say story we're gonna use
63:50 - bem still story bold
63:53 - and we're bold
63:56 - uh i think we should be good but we can
63:58 - test this i normally just write out a
64:00 - bunch of css and test it after and we'll
64:02 - say it's going to have a meta element
64:05 - which will be our spans
64:08 - and then we'll say font went bold and
64:10 - this is probably the furthest we're
64:11 - going to get in terms of complexity with
64:12 - style components but we'll just say okay
64:14 - if there's a color and we pass some
64:16 - props
64:18 - to that
64:19 - we'll say
64:21 - props dot color
64:23 - so if that exists or you're gonna give
64:25 - it a red color
64:27 - and that's
64:28 - one of the uh aspects of style
64:29 - components you can pass props in so if i
64:31 - was to use
64:33 - story element
64:34 - story meta element and passing
64:38 - color
64:39 - um i guess you could just pass
64:42 - uh ffff for white
64:44 - that would give it the white color if
64:46 - not it would just if i didn't pass it in
64:48 - it give it red
64:50 - so we can have a look so the star
64:52 - components there i'll move the story
64:53 - just one tab over
64:55 - um
64:56 - so we've got in here now we've got story
64:59 - title so let's take this
65:01 - and pretty much what we're going to do
65:03 - we're just going to start replacing what
65:04 - we've already got so
65:06 - let's do story title
65:10 - and we'd no longer need p tags in here
65:14 - get rid of those
65:16 - that looks good to me
65:18 - and we've got the story wrapper so let's
65:20 - just say okay we're already importing
65:21 - from story style so let's just go back
65:23 - and say give me the story title two
65:27 - give me the story meta
65:29 - give me the story element
65:32 - so now we've got we was well basically
65:35 - to target the buy
65:37 - so
65:38 - let's go down here we'll say story meta
65:42 - and because we said we wanted to target
65:44 - a span we'll say store it by
65:47 - give it a span uh probably going to date
65:49 - a test id on these as well so the test
65:51 - id equals story by
65:55 - and then i say story
65:58 - meta element
65:59 - because that's what we used and again
66:01 - well not again but as i mentioned
66:03 - earlier we can pass in prop so so give
66:05 - this a color of
66:07 - black
66:08 - and that's good enough for me and we'll
66:10 - just say bye
66:12 - and then we'll say story dot bye
66:15 - that looks nice that does look nice and
66:17 - you know what just for
66:19 - the sake of
66:22 - brevity i guess in this particular point
66:23 - so we've got story meta let's copy this
66:26 - we'll say story
66:28 - time
66:29 - story time
66:32 - and we'll set instead of time we'll set
66:35 - posted so
66:36 - we'll come to fixing that later down the
66:39 - line as to how we can get some nice
66:40 - dates to say okay this got posted you
66:42 - know two two hours ago or 20 minutes ago
66:44 - whatever it may be
66:46 - and then we'll say story.time so if
66:48 - there's a time
66:50 - then say map time and i know there's
66:52 - always going to be a time
66:54 - but on that first render of react
66:55 - because it'll render and say the stories
66:57 - aren't there just yet or there's no
66:59 - story in that component because it's
67:01 - going to run through this even though
67:02 - it's going to check for the url so we
67:04 - should get that so we should just be
67:06 - able to call map time which will allow
67:08 - us in the future to give it that nice
67:10 - url but if you don't me meta get it here
67:13 - with the
67:15 - story most likely
67:16 - you're going to get some errors in here
67:18 - because it's going to be trying to
67:19 - access properties at certain op
67:20 - positions in objects that don't exist or
67:23 - if you're calling functions like here
67:25 - and there's no
67:26 - a quality check before it's going to
67:28 - call that function pass something in and
67:29 - maybe that function blows up down the
67:31 - line so just just be aware of that um
67:34 - going going forward
67:36 - so let's see what we've got here
67:39 - that looks good nice and clean after sir
67:42 - um i don't know what people's thoughts
67:44 - are on new lines for stuff like this
67:47 - i sometimes do like to split up i don't
67:49 - know
67:50 - how much i should split up by
67:52 - i mean that does look quite nice but
67:54 - also does that i think i'll keep it
67:56 - like that for now
67:58 - so anyways
67:59 - let's go ahead and take a look what's
68:01 - going on do we have any nice stories
68:05 - oh somewhat somewhat it's not too bad
68:07 - it's not too bad
68:09 - i'll um i'll take that i'll take that
68:11 - for now so it looks like now because the
68:13 - stories are going all across the page
68:14 - we're gonna have to create something
68:16 - that's gonna allow us to lock in that
68:19 - story container
68:20 - so let's take a look at the story
68:21 - container i did think i added a space
68:23 - there but uh let's take a look i thought
68:26 - i added one here uh clearly not
68:29 - let's see
68:32 - um
68:33 - let's i i thought you could use a
68:35 - template literal so let's just uh
68:38 - um
68:39 - let's see let me get rid of this
68:42 - um
68:44 - one thing you could do here i guess is
68:49 - i guess we could push out that we could
68:51 - use a margin but
68:53 - let me
68:54 - use this particular method to give it a
68:56 - bit of space in there
69:02 - hmm
69:09 - let's see
69:11 - i suspect is there i was looking at the
69:13 - posted one so we need to go back
69:15 - actually
69:16 - um
69:19 - put that back story.time we're going to
69:21 - the time
69:24 - so we have a class name on there do we
69:27 - am i even tagging story.time because if
69:30 - if not i could probably get rid of
69:32 - that um
69:35 - we don't need that class name right now
69:38 - story.buy because we're using star
69:40 - components we can actually just target
69:42 - the semantic elements instead so let's
69:44 - just get rid of that too
69:48 - um although i guess in here so we've got
69:51 - we've got two spans story by story time
69:54 - um let's take a look at the first one so
69:57 - the buy we're going to be expecting
70:01 - we're going to be expecting that it
70:03 - comes in and yeah so so that looks good
70:05 - to me we've got the italics
70:08 - let's take a look here see i was quite
70:10 - slow and jerking a bit because it's
70:12 - loading 500 stories in the ui struggling
70:15 - so we're going to take a look at how we
70:16 - can fix that within an infinite scroll
70:19 - it's not a good user experience right
70:20 - now
70:22 - so yeah so we've got this one on italic
70:25 - so
70:26 - i believe they're both on italic though
70:29 - so let's have a look so if we're going
70:31 - to story styles
70:34 - yes uh which is we're gonna say spam not
70:37 - the first type
70:39 - let's say spam
70:44 - first child
70:46 - so margin right 10 px
70:50 - let's just see if we can get a bit of
70:51 - space in between that
70:53 - i guess one thing we could do is put
70:55 - like a bullet in between there or just
70:56 - something to split that up
70:59 - let's have a look did that not
71:02 - so we're saying we're we're in story
71:04 - meta which is
71:07 - here this says span
71:10 - oops
71:11 - spun first child so we want to target
71:13 - this one here
71:15 - so span oh we don't need that
71:18 - um
71:19 - let's uh spam first child
71:27 - there we are we've got some nice and
71:28 - some nice padding on there so let's
71:31 - let's go ahead and take a look now at
71:33 - styles and what we want to do in styles
71:35 - now is uh i kind of want to lock this
71:37 - container
71:39 - um
71:40 - so story
71:43 - stories container styles
71:46 - maybe we can come up with a better name
71:48 - for that down the line so let's import
71:50 - styles
71:51 - and then we're going to be importing
71:53 - create global style
71:56 - from style components
71:58 - reason we want to do that is because i
72:00 - want to insert something into the body
72:01 - so we need to use create global style so
72:04 - if i do export const global
72:07 - style
72:08 - i'll say create global style
72:11 - and i'm just gonna for
72:13 - brevity sick post in my default config
72:17 - for most websites which is just this so
72:19 - just to reset the box size in setting
72:21 - the margin setting a color
72:23 - and then
72:25 - i guess what we want at this point uh
72:27 - for global styles i think that's pretty
72:29 - much it but we can inject that component
72:31 - now
72:32 - but um in terms of locking the container
72:34 - we've gotta say stories container
72:36 - wrapper style dot min
72:41 - down here remove that
72:43 - and then we'll say max width 1140
72:47 - padding
72:48 - top and bottom 20 left and right 15
72:51 - then margin auto sort of go in the
72:53 - middle
72:55 - and that's our
72:57 - stories container styles done
72:59 - so we can import that now so let's go up
73:01 - here
73:03 - and what we're going to do here is
73:04 - because it's our container we want to
73:06 - input what we just got there was
73:09 - um
73:10 - so story style storage container
73:14 - it's fine story container style so we
73:16 - want
73:17 - global style
73:20 - and story container wrapper
73:24 - so grab that
73:26 - and we'll just pass them in there like
73:27 - sir and we'll say from styles and then
73:31 - story container
73:32 - styles
73:35 - perfect and what we can do here now we
73:37 - can just dump in this as a component so
73:39 - global styles
73:41 - and then also we want the wrapper so we
73:43 - can just uh
73:44 - give that a date of test id to make sure
73:46 - the wrapper comes in so we'll said do we
73:48 - get a story's container when we're going
73:49 - to test this
73:50 - if so brilliant
73:52 - uh let's have a look i'll just see if
73:55 - we've got a nice
73:59 - there we are it's in the middle it's
74:00 - loading it's going to you know making
74:02 - those
74:03 - huge amounts of api calls so i hope um
74:07 - the hacking news api doesn't like shut
74:09 - me off at some point or after this video
74:11 - there'll be a lot of requests i imagine
74:13 - to api
74:14 - uh so let's just uh did we have the
74:16 - title
74:18 - uh the title looks fine right now so
74:20 - that's good
74:23 - yeah packing news there we are
74:24 - personally and brilliant so yeah we've
74:26 - done well that's that's pretty much our
74:28 - styles at this point so their style
74:30 - components covered as you can see it's
74:32 - quite jerky
74:33 - um
74:35 - and if you did you know run this in
74:36 - reacts the components you've got a bunch
74:38 - of stuff going on in here with different
74:40 - keys
74:41 - and if you you know run the uh profiler
74:45 - you can see it's going to take a little
74:46 - bit of time
74:49 - let's see
74:52 - stop profiling cause it's probably going
74:54 - crazy at this point
74:59 - and you can see we've got 7.7
75:01 - milliseconds that's most likely star
75:03 - components taking up that particular
75:05 - particular performance hit there
75:08 - so story.key 9.2 milliseconds uh 0.9
75:12 - 33.1 so you can see all these components
75:14 - being rendered here and i only managed
75:16 - to get 308
75:18 - uh
75:19 - let's have a look rank chart so this
75:21 - context.consumer
75:22 - i imagine that's a style component
75:24 - what's um
75:25 - doing its magic
75:27 - so i'm not too sold on style components
75:29 - at the minute if someone can uh you know
75:31 - give me a good reason to use them
75:34 - the only thing that i
75:36 - well one of the things that i'm i'm not
75:38 - too sure about is calling them as
75:40 - components because
75:42 - i imagine you could get a lot of
75:45 - components just laying around that
75:47 - styles unless you do what i've done here
75:49 - where you just have a wrapper and then
75:50 - target say the h1 selecting story
75:54 - you know i'm targeting the air tag here
75:55 - for the link i'm targeting the spans
75:59 - it could get quite crazy so um yeah i
76:01 - mean if there's a css expert help there
76:03 - or style components expert feel free to
76:06 - jump in the comments and let me know and
76:07 - you know
76:08 - find me on twitter which is in the
76:10 - description let's have a conversation
76:12 - and
76:13 - i want to be sold on style components
76:16 - um
76:16 - anyways so we've got all our styles
76:18 - we've got a fairly good looking api at
76:20 - this point one api application that
76:22 - calls an api with two different routes
76:25 - so we're calling stories id and then
76:27 - we're calling
76:29 - we're requesting for a story by that
76:31 - particular id
76:33 - so if we just recap where we're at
76:36 - we've got a container that houses the
76:38 - story ids
76:40 - and then when the story ids come in and
76:42 - they've rendered to the page we call the
76:44 - story component by using the map and the
76:47 - map's going to go over about 500 times
76:49 - if that's what comes through but we do
76:51 - mitigate out some um story ids that uh
76:54 - actually we don't mean to get out any
76:56 - story id so we get 500 stories being
76:58 - called
77:00 - um what we do do what we do do what we
77:03 - do
77:05 - happen to
77:07 - go ahead and do is um
77:09 - we
77:10 - when a component mounts we you know set
77:12 - the story and the story doesn't happen
77:13 - to be in there we just return null um
77:16 - which i find is fa you know more than
77:19 - adequate
77:20 - um
77:21 - but yeah if there's if you do feel
77:22 - there's a there's a better way to do
77:24 - this but i mean the hacking news api
77:26 - isn't great in the sense that you're
77:28 - getting 500 requests coming back
77:30 - be nice to um you know be able to put
77:32 - page pagination in there so i'll be like
77:34 - give me the you know the first 20 i'll
77:36 - give me this next 20. but we're going to
77:38 - look at building that in ourselves to
77:40 - help the
77:41 - performance of the application so we
77:43 - will be looking at stuff like infinite
77:45 - scroll very soon one thing i wanted to
77:48 - do is um
77:50 - create this mapper so we was in uh we
77:53 - were in
77:54 - story.js and i said down here we want to
77:57 - map the time so instead of giving us
77:59 - this like unique time stamp we wanted to
78:01 - say like two minutes ago or five minutes
78:02 - ago you know yesterday two hours ago
78:04 - whatever it may be
78:05 - um and you can find these online these
78:08 - i've called it a mapper um but you know
78:11 - there's different names for it
78:12 - essentially all it is is i'm just gonna
78:14 - say it's a function that passes in the
78:15 - timestamp and then it will return me
78:19 - different scenarios based on
78:21 - you know different intervals that are
78:23 - going on so if we set seconds and we'll
78:26 - say math.floor
78:27 - um and don't get too hooked up on this
78:30 - sort of stuff
78:31 - uh this is a function i've had laying
78:33 - around for a long time and used it uh
78:35 - many times but it's not react
78:38 - specific saucer
78:40 - um
78:41 - and that day it needs to be called with
78:43 - uh some promise
78:45 - uh we'll say let interval
78:47 - math.floor
78:49 - um
78:51 - and then there's a bunch a bunch of
78:53 - different um
78:54 - you know divisions and additions going
78:56 - on in here so
78:57 - instead of uh borrowing you into with
79:00 - this uh this maths that's going on i'm
79:02 - just gonna
79:02 - paste that in there from one of my
79:04 - snippets over my keyboard
79:07 - which just basically goes ahead and
79:08 - figure out you know is it years ago is
79:10 - it months ago days ago how's it go
79:12 - it's not specific to react so i don't
79:14 - really want to be teaching this it's
79:16 - just
79:17 - a map function that gives you some nice
79:18 - stats so if we just put that in here so
79:21 - we'll say map time
79:24 - map time so it's going to run that
79:25 - function over that story
79:28 - dot time which is good so set input
79:30 - and we'll say map time from
79:34 - mappers
79:35 - map time
79:36 - and it'll give us a nice dare so let's
79:38 - have a look
79:39 - and again i'm hit there two minutes ago
79:41 - three minutes ago whatever it may be
79:43 - but
79:44 - what's quite crazy here is it's hitting
79:46 - that api you know all the time so it's
79:48 - hitting that 500 times so we have to
79:49 - slow that down
79:50 - um but yeah let's take a look uh where
79:53 - we at now we do need a space actually i
79:55 - just spied here so uh where it says
79:57 - posted so where's posted live
80:00 - so it lives in story okay so posted is
80:02 - down yeah there is um
80:04 - so yeah let's just give it um an empty
80:07 - template string see if that will fix it
80:10 - there we are that does it nice um but
80:13 - yeah okay so we've got the story uh
80:16 - component so it's a nice little learning
80:19 - project this you've got
80:20 - one component that goes off and calls an
80:23 - api you've got a container that goes off
80:26 - and calls an api that is it it is a
80:28 - component but don't don't get this mixed
80:30 - up with saying oh this is a container it
80:33 - is just a wrapper so that's my words
80:35 - this is not react specific it's me just
80:36 - saying this is a component container
80:39 - that wraps a bunch of stories
80:43 - so um i mean
80:45 - let's have a look here what we've got
80:47 - going on we've got styles we've got
80:48 - services so containers mappers selectors
80:52 - services it's just all made up words um
80:55 - just like component but um these are
80:58 - more what i like to work with so like
81:00 - you know you've got your mappers you've
81:01 - got selectors
81:03 - actually in this case uh seen as a
81:06 - a util i guess a util could be
81:10 - put in as a selector so we'll move that
81:12 - and hopefully vs codes
81:14 - smart enough to
81:16 - figure that out here it is look it's
81:17 - found it it's giving me this and it said
81:20 - it said select field is now a selector
81:23 - can you save this for me sure i'll save
81:24 - that um and it should still work perfect
81:28 - that's brilliant okay
81:32 - okay so now i think it's time
81:36 - that we
81:37 - maybe started doing the infinite scroll
81:39 - so let's have a look so as you can see
81:41 - we've got a bunch of
81:44 - stories here and it takes a little bit
81:46 - of time to load
81:47 - because it's requesting 500 and that
81:50 - will be hitting the micro task queue
81:53 - so if we go ahead now and say we've got
81:55 - constants we've got any components
81:58 - right now what we need to create and i
82:00 - don't want you to get too hooked up on
82:01 - this
82:02 - but we're going to create a hook
82:05 - called
82:07 - use
82:08 - in
82:09 - bennett
82:11 - infinite scroll
82:13 - dot js
82:15 - and with the infinite scroll we're just
82:17 - going to do the standard stuff
82:19 - input react
82:21 - then we're going to go ahead and say
82:24 - actually we don't need react for this
82:27 - we just need a few methods from yeah so
82:29 - you you stir use effect
82:32 - that looks good
82:35 - and come down here we need some
82:37 - constants now so in our constants file
82:41 - let's go ahead and just set index.js
82:44 - and essentially all we need in here is
82:47 - two constants export cons max stories
82:50 - and we're gonna get we know we're gonna
82:51 - get 500 so let's just put 500 in there
82:54 - and then story increment
82:57 - is equal to
82:59 - and if we go back into the infinite
83:01 - scroll
83:03 - what we want to do we want to import
83:07 - story increments
83:09 - max stories
83:12 - from constants
83:14 - and then i'm going to come down here
83:16 - export const use infinite scroll
83:21 - this doesn't have to be hook but
83:23 - i'm in the mode of creating hooks at the
83:24 - moment so uh i thought i'd
83:26 - show you how to do these and since this
83:28 - is a tutorial
83:30 - i may as well take the opportunity to
83:32 - show you how to use custom hooks
83:34 - so we're going to say loading set
83:35 - loading equal false we're going to
83:37 - initialize the state with false
83:39 - and then we're going to do another use
83:41 - state so
83:42 - use step
83:44 - we'll say count and then set counts and
83:46 - then use the story
83:48 - increment so we're going to say the
83:50 - count starts at 30 so
83:52 - say if we do something javascript like
83:54 - uh
83:55 - you know if we use slice
83:57 - slice from 0 to 30 when the user scrolls
84:01 - got from 30 to 60 and you oh we could
84:03 - say go to zero or 60
84:06 - because we want to display all the
84:07 - stories we don't want to get rid of the
84:09 - ones the other ones so we could just
84:11 - keep doing this until we hit 500.
84:14 - so what we want to do now is
84:17 - we want to do something create a method
84:20 - essentially
84:21 - so
84:23 - what ultimately what we're going to do
84:24 - here is just say handle scroll
84:27 - and then we're going to say
84:31 - uh we need to get the window so if i
84:33 - just log out window here
84:36 - should be able to access the window
84:38 - directly and react
84:41 - so look
84:44 - go into our console in dev tools
84:48 - we have to import this actually so if we
84:50 - go into
84:51 - it should be let me get rid of that
84:53 - don't need that don't need that do not
84:55 - need that
84:57 - we don't go into stories container
85:00 - then we do
85:02 - imp
85:03 - we should say
85:05 - um use infinite scroll from hooks
85:10 - use infinite scroll
85:14 - and then if we
85:15 - um let's see if we just go ahead and
85:20 - let's have a look where i the structure
85:22 - i'll count because we're going to return
85:23 - we've got a return count but it's not
85:25 - there at the moment so let's just say
85:27 - um test and we'll call that method
85:33 - it's never defined okay
85:36 - we'll call handle scroll
85:40 - i just want to see what i want to show
85:41 - you what window returns here
85:44 - here we are access to the window
85:47 - so there's a bunch of stuff on here
85:50 - um
85:51 - that we can access but i don't want to
85:54 - confuse you too much as to
85:56 - you know what's what all this stuff is
85:58 - we could leave that for another tutorial
86:00 - but you've got stuff like local storage
86:03 - um
86:04 - animations the navigator uh let's have a
86:08 - look on key down all these dom
86:11 - based actions
86:13 - the origin
86:15 - the outer height the outer width
86:18 - but more specifically what we're looking
86:20 - for
86:22 - you have
86:24 - inner height should be in here somewhere
86:27 - in a height
86:28 - and then we'll say well that's what
86:30 - we're looking for now
86:32 - and then um myself have a look what's in
86:34 - document
86:37 - so even though we've got the inner
86:38 - height what we want to
86:40 - log out
86:41 - we should be able to look for
86:46 - document element
86:49 - and then within document element there
86:51 - should be
86:53 - scroll top somewhere
86:55 - there we are
86:57 - and if you used to reload that window
86:58 - they should update but what we want to
87:00 - do we want to do a calculation and say
87:01 - okay
87:02 - in a height
87:05 - plus the
87:06 - um scroll top
87:09 - is not equal to the offset
87:12 - so let's have a look for the offset
87:14 - should be
87:15 - in here let's have a look
87:22 - there we are offset height so we want to
87:24 - make sure it's not bigger than that and
87:25 - right now i can see it's pretty crazy
87:28 - um if if it's uh
87:31 - say if it is bigger than that then we're
87:33 - going to set attributes to say if it's
87:34 - loading or if it's not loading and then
87:36 - also we don't want to be hitting
87:38 - a refresh with react all the time so
87:40 - something we can do is put a concept on
87:42 - this function called a d bounce
87:45 - to make sure if i scroll i can't just
87:46 - keep scrolling and scrolling and
87:48 - scrolling when i do hit a scroll
87:50 - it locks my scroller for 500
87:53 - milliseconds or a thousand milliseconds
87:55 - whatever it may be just to make the
87:57 - experience a bit better
87:59 - so let's take a look now i'll just go
88:01 - back in here
88:02 - we can uh delete that delete that
88:05 - um i'll just delete that for a second
88:08 - what we're going to do in here we're
88:09 - going to you know do that conditional
88:11 - check in here to make sure that we can
88:13 - calculate the height correctly
88:14 - and then we can do certain conditions
88:16 - based around the height
88:18 - but please do not get too hung up on
88:20 - this this is
88:21 - basically just checking if you've
88:23 - scrolled and then what we're going to do
88:24 - we're going to do some react type stuff
88:28 - right okay
88:30 - as mentioned don't get hung up on this
88:31 - but i should say okay if window
88:34 - dot inner
88:36 - height
88:37 - plus
88:39 - document.document element
88:41 - dot scroll
88:43 - top
88:44 - is not equal
88:46 - to
88:47 - the document.document element
88:50 - dot off set height
88:54 - or if it's loading
88:57 - if that condition happens to be
88:59 - true for example
89:02 - uh
89:02 - well depending on that condition comes
89:04 - back ours we can just return false
89:07 - and then else
89:09 - set loading
89:10 - true
89:12 - and now
89:13 - save that cool that's good
89:16 - of pulling use effect
89:19 - and what we're going to do we use
89:20 - effects we're going to have two of these
89:22 - in here two listeners so if it's not
89:25 - loading
89:26 - just return out of here
89:28 - because we don't want to be going ahead
89:29 - and doing all the set loading unlocking
89:31 - the count we'll say if count plus story
89:36 - increments
89:37 - is greater than or equal to max stories
89:41 - then set count
89:43 - max
89:44 - stories and what that's saying is
89:46 - basically
89:48 - if we have a count of 480
89:51 - plus the story increment which is 30
89:53 - that equals 510
89:56 - and we don't want to
89:59 - get let the users keep scrolling because
90:01 - we've already exceeded the max stories
90:03 - right so we're just going to set the
90:04 - count to 500 and you know quit the
90:06 - scrolling there
90:08 - else if they if they are below 500
90:10 - stories let's just say count so we could
90:12 - start off with 30 they scroll
90:15 - once on the page we're going to add
90:18 - store increment which is
90:20 - 30 so you'd have initial count plus
90:22 - another
90:23 - then it hit 60 and if the user scrolls
90:25 - again because the count's changed
90:27 - we'd hit 90.
90:29 - and we do that till we get to 500
90:31 - stories
90:32 - and whilst that's all going on just say
90:33 - set loading false so that we can
90:35 - continue on and we're going to keep a
90:37 - watch with our use effect on loading
90:41 - and we're going to do one more use
90:42 - effects
90:43 - and i'm doing two separate use effects
90:45 - because i don't want to be watching
90:47 - actually you know what i don't care
90:48 - about counting there so let me get rid
90:50 - of disable that and i should just add
90:52 - the exhaustive dependencies i want
90:55 - another use effect because i don't want
90:56 - to do anything in here i just want it to
90:58 - run just at once so we're going to do
90:59 - the component did mount this is
91:01 - re-watching loading all the time
91:04 - for a change value this one is just
91:06 - going to do it once so i'm going to say
91:08 - window.add event listener
91:10 - and i want
91:11 - it to listen for the scroll and then
91:14 - handle the scroll
91:17 - let's just do this and one important
91:19 - aspect here is we have to sort of
91:22 - unsubscribe from this event listener and
91:25 - the way to do this to do a clean up in
91:26 - our use effect and react is return a
91:28 - function that does window dot remove
91:32 - event
91:33 - listener and we'll say remove the scroll
91:35 - and then
91:36 - remove that method too
91:38 - and that's saying okay we're going to
91:40 - add the event listener
91:42 - and then once this use effects done go
91:44 - ahead and just remove this listener
91:47 - because we don't want these to be
91:48 - hanging around and creating multiple
91:50 - listeners or whatever it may be we just
91:52 - want to do a quick cleanup in here
91:55 - and after all of this we're just going
91:56 - to say return
91:58 - count
92:00 - so we should be able to use this now uh
92:03 - it should be in a workable state but
92:05 - there's still some stuff that has to be
92:06 - done to it so i should be able to grab
92:09 - this and say
92:12 - const accounts
92:14 - equals use infinite scroll
92:17 - and what we want to do down here even
92:19 - though we've done the map what we want
92:20 - to do now is we want to set dot slice
92:23 - we'll start at zero
92:25 - and then go with the count so for
92:27 - example
92:29 - if the count
92:30 - so user comes on the page it's going to
92:32 - be 0
92:33 - and 30. user scrolls is going to be 0 60
92:37 - user scrolls again 090 user scrolls
92:39 - again 120 and so on
92:42 - and that's what's going to happen but
92:43 - then you're probably saying to me now
92:44 - but it's going to re-render
92:46 - a bunch of these components out already
92:49 - on the page it's going to re-render them
92:51 - for no particular reason like that's bad
92:53 - right yeah we don't want to be
92:54 - re-rendering these stories all the time
92:56 - so there's a perfect solution in react
92:58 - for this
92:59 - and what we're going to do we're going
93:01 - to pull that in from up here and it's
93:03 - called use memo
93:05 - i don't want to implement this right
93:07 - away actually it's called memo what am i
93:08 - talking about i don't want to use this
93:10 - right away because i want to show you
93:12 - why this is very important so let's save
93:15 - all this let's have a look see if we've
93:16 - got a working
93:19 - page so you see the scroll bars better
93:23 - and it seems to
93:24 - be broken
93:26 - so what's going on
93:29 - so it doesn't seem to be scrolling maybe
93:31 - there's something wrong in my user
93:35 - use infinite scroll
93:37 - uh hook
93:39 - so what we got here we got the loading
93:41 - let's debug this together
93:43 - she's gonna be doing a lot of debugging
93:44 - um
93:45 - go say count that's right we're gonna
93:47 - handle the story so we're gonna say
93:48 - window plus document element is not
93:50 - equal
93:52 - to the offset height
93:54 - or loading return false that was good to
93:57 - me
93:58 - and we're going to say set loading
94:01 - and what we're missing here we've got
94:03 - another use effect that's saying if it's
94:05 - not loading return if count plus story
94:07 - increment is greater than
94:09 - set count set count
94:12 - plus star increment
94:14 - max star is set loading false we're
94:16 - watching for loading we have a
94:19 - use effect that adds an event listener
94:22 - of scroll i'm going to say use this
94:25 - method for a handle scroll so when
94:28 - so when we're listening and this happens
94:29 - we're going to uh
94:31 - call that function
94:33 - and we're going to do return window dot
94:35 - event listener scroll handle scroll
94:39 - so
94:40 - i think i've spotted the bug but i just
94:41 - want to uh
94:44 - go ahead and
94:45 - keep debugging this a bit more just so
94:47 - we can get in the uh
94:49 - because it's never smooth sailing right
94:51 - we we do want to uh
94:54 - keep track of what's going on
94:56 - um
94:57 - let's see
94:59 - counts 30
95:01 - counts now 60
95:07 - and that's all it does it only goes to
95:09 - 60.
95:11 - very strange
95:15 - does it go any further
95:22 - it only does one scroll and i'm guessing
95:27 - so i've pulled in news
95:29 - so we don't have to watch the count
95:31 - because what what's going to happen is
95:33 - um
95:35 - it should refresh each time so even
95:38 - though we've got those stories
95:40 - on scroll it's going to fire back
95:43 - as if the count has changed
95:46 - so this count will just update here
95:49 - use
95:51 - effect okay
95:54 - so let's take a quick look once more in
95:57 - here the
95:59 - use infinite scroll return seems fine
96:02 - for picking up the event listener we're
96:05 - watching the loading
96:07 - um
96:08 - i i'm gonna take a guess
96:13 - that this is not working simply because
96:17 - either it's something to do with our
96:19 - d-bounce
96:21 - or
96:22 - it's something to do with a scott story
96:24 - container so as you see
96:26 - it knows counts updated
96:29 - so like count in here so for example
96:32 - where it says count here so if it's not
96:34 - loading go ahead if count plus
96:37 - star increment is greater than or not
96:40 - set story
96:42 - set false loading should be up here
96:46 - um
96:48 - so yeah it does look okay i don't know
96:51 - if anyone spotted this just yet
96:54 - um i think i know what it is
97:00 - um so i think i know what this issue is
97:03 - it comes down to and this is one i'd
97:05 - actually like to leave with you guys if
97:07 - you want to do some work on this after
97:09 - if you've zoomed in
97:12 - the offset seems to be wrong
97:14 - if i zoom out
97:16 - i can hit the count
97:20 - ignore this message at the minute we'll
97:21 - use a clean up properly
97:24 - you see all the counts updating
97:27 - 60
97:28 - 90
97:30 - 120
97:32 - 150 we should be able to get to 500
97:35 - that'll stop us
97:37 - the count should hit 500.
97:40 - we see i can just keep scrolling and
97:41 - then it kind of stops and it requests
97:43 - whilst it's requesting
97:45 - 420 and it's a bit jerky it's not the
97:47 - best experience that's why we're going
97:48 - to implement a d bounce
97:51 - 500
97:53 - and and that's it what let me scroll
97:55 - anymore perfect
97:58 - um so yeah let's have a look now
98:00 - implementing we don't need counting
98:02 - there anymore we don't need it there
98:04 - because we're not going to be watching
98:05 - count count should just update here so
98:07 - when this story container
98:09 - goes ahead and does its work and gets to
98:11 - 500
98:12 - it'll look through here and it'll say
98:14 - okay well infinite scroll has changed
98:17 - this in here has changed so
98:20 - if we're watching
98:22 - count
98:23 - we're actually watching counting here
98:25 - but if loading is being changed that
98:27 - means count the counts changed
98:29 - so if loading does change which is in
98:31 - this year's effect here
98:34 - then what we're going to do go change
98:35 - the count
98:37 - and we can update the count here
98:39 - so let's take a look so what we can do
98:42 - actually you know what i'm just going to
98:44 - put the count
98:46 - uh let me
98:48 - let me put it back in here a second i'm
98:50 - just going to leave it there so i can
98:51 - debug you can actually put it in there
98:53 - um
98:56 - yeah so what we need now okay that's
98:58 - good
98:59 - what we need now is a d-bouncer open up
99:01 - your explorer
99:04 - and it should be utilities folder in
99:06 - here
99:07 - so
99:08 - let's have a look we're gonna drop in
99:10 - here something called the bounce.js
99:13 - and this is another thing i don't want
99:14 - you to get hung up on but let's create a
99:16 - function called d-bounce and it's going
99:18 - to take a function
99:20 - it's going to take away it
99:22 - it's going to take an immediate
99:25 - and then it's going to take an args
99:28 - and it may be a bit confusing i was just
99:30 - thinking about this that why is this
99:33 - updating
99:34 - like why is this stories content
99:36 - updating and getting a new count each
99:38 - time
99:39 - well i'll show you in the profiler
99:41 - um
99:43 - in the dev tools as to why this gets
99:45 - updated so you can see it visually
99:47 - because there's nothing in here if i got
99:49 - rid of counter sir
99:51 - well you need to run this use effect
99:53 - apart from this infinite scroll
99:55 - obviously but
99:56 - this use effect here it's like well
99:57 - nothing's in here so why should i update
99:59 - this component well i'll show you
100:01 - shortly it's better to visually see it
100:03 - as opposed to me explaining it
100:05 - let's just do let timeout will return a
100:07 - cleanup function
100:09 - that says const
100:11 - contact this
100:13 - cons call now
100:15 - immediate
100:18 - and there's no timeout
100:19 - constellator
100:22 - time out equals null
100:24 - i know i've mentioned it plenty of times
100:27 - but
100:28 - i'm you know i'm trying to teach as much
100:30 - react as possible here um
100:33 - so i don't really want to get hung up on
100:35 - just an infinite scroll
100:38 - um if you are interested feel free to
100:40 - drop some comments and we can talk more
100:41 - about this
100:42 - um or you can find me on twitter at carl
100:44 - hadwin
100:45 - i should set a timeout so i say later
100:47 - where
100:48 - and then if call now
100:51 - function dot apply context args
100:54 - and that should be
100:57 - okay
100:58 - oh
100:59 - set timeout
101:02 - that should be all right so let's close
101:03 - up and the way to apply that function is
101:06 - well what we want to do we want to apply
101:07 - in our use infinite scroll
101:10 - wherever that's gone
101:11 - um
101:12 - so we want to apply it when apply it
101:14 - here so
101:15 - when handle
101:17 - scroll gets called
101:19 - we want to wrap it in
101:22 - um a d bounce so we're going to say
101:25 - i need to import actually
101:27 - import d bounds from
101:29 - utils d bounce
101:32 - and we want to wrap the entire function
101:34 - so if that
101:35 - this bit here actually this bit this bit
101:37 - all of them is yeah it's this bit so we
101:39 - want to wrap this handle scroll in d
101:41 - bounce and then
101:43 - we're going to do the d-bound see what's
101:44 - going on in here and then you know if we
101:46 - get get the you know the green light go
101:48 - ahead do the handle scroll if not you
101:50 - know wait 100 milliseconds let's put
101:52 - this 500
101:55 - and uh yeah basically that's it for use
101:57 - infinite scroll
101:58 - and uh it should just work now we've got
102:00 - the infinite scroll it should give us a
102:02 - nice d bounce sort of look
102:05 - there is it's locked to the
102:06 - scroller for 500 milliseconds
102:09 - and feel free to put that to whatever
102:11 - you like whatever you feel is the better
102:13 - user experience
102:14 - um
102:16 - so we have select fields we have a bunch
102:18 - of stuff going on here i don't know if
102:20 - it's at this point because we have a
102:22 - functional app at this point maybe it's
102:23 - uh
102:24 - do we have fixtures in here no i don't
102:26 - uh maybe it's worth let me create a
102:29 - folder close all these folders down
102:32 - i'm just going to create a fixtures
102:34 - folder and the reason we're creating the
102:36 - fixtures folder is because we're going
102:37 - to start preparing for
102:38 - tests or testing
102:42 - so if we just go ahead and in our
102:44 - fixtures well we can just create an
102:46 - index.js
102:48 - index.js and what this does let's just
102:51 - create a singular story so do export
102:53 - const
102:54 - singular stories because we don't want
102:56 - to be hitting the hacking news api all
102:57 - the time especially when we're running
102:58 - tests right
103:00 - um
103:02 - so let's just say ids one
103:04 - time i'll let me grab a unix timestamp
103:08 - um yeah we don't be hitting this all the
103:10 - time so the reason for that is we're
103:11 - just going to run the test against this
103:14 - tarnish google responds this is one of
103:16 - the articles i saw url uh something
103:20 - uh something calm
103:24 - new hacking news
103:26 - tut
103:27 - um yeah we're gonna be running the test
103:29 - against the live site
103:31 - um so it's just uh export cons story ids
103:36 - and you could go ahead and check out the
103:37 - uh
103:39 - you know the infinite scroll but uh
103:42 - i don't feel it's necessary if we can
103:44 - manually test it
103:45 - and um
103:47 - just say an empty story would be all
103:49 - this it was just so undefined
103:52 - so id
103:55 - time
103:55 - [Music]
103:57 - title
103:59 - url
104:00 - grab these boom
104:02 - [Music]
104:03 - that looks good so we've got a fixture
104:04 - that we're going to import into our
104:06 - tests so do we have a testing folder we
104:08 - do not actually
104:10 - create a new folder
104:11 - underscore underscore tests
104:14 - uh firstly what we're going to do
104:18 - um
104:19 - [Music]
104:21 - actually you know what there's a there's
104:23 - quite a few things to test here so
104:25 - what i actually want to test
104:27 - we're going to test the application like
104:29 - kind of end-to-end ish the hacking news
104:31 - api so i can use
104:34 - service which is this
104:36 - we're going to test the story container
104:38 - storage container and then we're going
104:40 - to test the component which is stories
104:41 - itself
104:42 - so let's take a look at that and then
104:45 - we'll do a few tests just to get some
104:47 - confidence in our application it is
104:49 - obviously working but um
104:52 - there is a few things that we can test
104:54 - and you know to get confidence whether
104:55 - it be this is going through a
104:57 - shared code based or
105:00 - it's going through a pipeline we want it
105:01 - to be passing tests
105:03 - um so yeah let's take a look at that uh
105:06 - and we'll jump in we're going to write
105:07 - probably three or four tests we're going
105:09 - to be using react testing library
105:11 - um and there's all sorts of nice stuff
105:13 - you can do here right so i've left you a
105:15 - project i'm going to leave your project
105:16 - after the test is done i can go ahead
105:18 - and pull in different apis you can test
105:20 - it differently you can remove the
105:22 - infinite scroll you can modify the
105:24 - infinite scroll
105:25 - and then once all this once this video
105:27 - is
105:29 - a released
105:29 - or two from now you'll see the second
105:31 - video which will be the graphql
105:33 - implementation hooked up to this and
105:36 - this will go from hacker news
105:38 - application to a news reader the news
105:40 - reader will read multiple apis and then
105:44 - we'll modify and adapt certain data that
105:46 - can be returned to our front end
105:50 - so what we're going to do here i'm going
105:51 - to just modify the screen a little
105:53 - hopefully everybody can see this i'm
105:55 - just going to
105:56 - throw my terminal in here
106:01 - and i'm going to close that just so you
106:03 - guys and girls can see what's going on
106:06 - um
106:08 - close that close that
106:10 - and what we're gonna do
106:13 - this i don't i'm trying to think which
106:14 - test might be easy to break in first so
106:17 - we've got the story the stone storage
106:19 - container you know what let's jump right
106:21 - in head first let's go ahead
106:25 - do tests
106:27 - app.spec.js
106:31 - and what we're going to do in here
106:33 - import react
106:35 - oops
106:36 - input react
106:38 - and we need to import act and act
106:42 - now um
106:44 - react dom
106:46 - test utils
106:47 - actually i will explain act right now
106:49 - let me let me do in a second it's
106:51 - basically asynchronous
106:53 - rendering so instead of
106:55 - well yeah okay let me explain in a
106:57 - second you'll see you'll see it better
106:58 - we need to input all this stuff that
107:00 - we're using because we do want to mock
107:01 - this out and when i'm saying mocking
107:03 - it's like giving it some sort of fake
107:05 - response
107:07 - because we don't either we don't need to
107:08 - test this particular bit uh that well
107:11 - or we just want some empty components
107:13 - because we're not focusing on testing
107:15 - and testing them
107:17 - always simply like if it's axios we
107:18 - don't want to be hitting an api right
107:21 - so um
107:23 - there we are that looks good and we need
107:25 - to bring in the infinite scroll uh use
107:28 - infinite scroll
107:30 - from
107:32 - hooks
107:34 - use infinite scroll
107:36 - and let's have a look story increment we
107:38 - can bring that into i guess
107:41 - increment
107:44 - uh that was in constants wasn't it
107:46 - that was good okay we're gonna say this
107:49 - is react testing library right here so i
107:51 - said before each can i make that bit
107:53 - just a tad smaller
107:56 - um
108:00 - that seems okay for now
108:02 - i'll just uh pull it over there for now
108:06 - and we'll keep running these tests we'll
108:07 - go set before each this is before each
108:09 - test
108:11 - do a cleanup and by saying that it's
108:13 - cleaning up the dom
108:15 - which for me oh actually you know what
108:17 - one crucial thing i missed i forgot to
108:19 - import the
108:20 - testing library
108:22 - uh clean up generally i'll do a render
108:24 - and clean up i'll pull those in and
108:25 - maybe you know sometimes i might pull in
108:29 - uh what else do i normally pull in maybe
108:32 - uh
108:33 - fire
108:35 - click event fire event i think it is
108:37 - um do we have this actually
108:41 - oh i don't think we have it so what's
108:44 - let me have a look package
108:50 - ah we don't have it okay we need to
108:51 - install this so uh if you go ahead and
108:54 - uh dev dependencies
108:56 - dev the
108:58 - i can just
109:03 - dev dependencies
109:05 - i'm going to say testing
109:08 - library
109:09 - reacts
109:11 - now i said give me
109:12 - 9
109:20 - uh what's this saying here
109:23 - call unexpected um call unexpected where
109:30 - really
109:34 - let's close that down
109:38 - oh what's this doing here spinner
109:44 - anyways
109:45 - let's go to package.json
109:49 - like it did with mine there
109:51 - um it's still going but um let's just
109:53 - continue on writing this in this
109:55 - app.spec file it's probably easier just
109:57 - to generally fire in um do a yarn ad
110:03 - react testing libra
110:05 - so let's go ahead and say
110:09 - describe
110:12 - and we'll create a describe function
110:16 - that's going to give us we're just going
110:17 - to say up
110:19 - and to be honest you don't even have to
110:21 - do a describe because not much is going
110:23 - on sir i'm not going to do a describe
110:25 - i'm just going to set it
110:28 - one thing before we do the 8 let's just
110:30 - do a yarn install because we need the
110:31 - testing library as you can see we've got
110:33 - the the red
110:35 - squiggly lines telling us basically it's
110:37 - unable to resolve
110:38 - so once that's installed we should get
110:40 - the testing library library which will
110:41 - be nice and i was just thinking
110:44 - briefly then instead of using it
110:47 - i generally use it
110:49 - as a function to test stuff when it's
110:51 - inside a described block if it's outside
110:53 - the describe block we can just do test
110:56 - which uh makes a bit more sense let's
110:58 - say it renders the application
111:01 - it has to be asynchronous because we're
111:03 - doing asynchronous calls
111:05 - and we're going to get the use infinite
111:07 - scroll uh to find never used okay that's
111:09 - fine uh use infinite scroll dot mock
111:13 - implementation
111:17 - and then what we're going to do we're
111:18 - going to say count let's go say return
111:21 - the implementation of you use infinite
111:23 - scroll return me count with 30 and
111:26 - that's all i care about at this point
111:28 - and that's all i ever want from used
111:31 - infinite scroll so i don't want to bring
111:32 - in the actual implementation i just want
111:34 - you to return me an object that says
111:36 - count is equal to 30
111:38 - and then we're gonna have to mock the
111:40 - get story
111:41 - so we're gonna do mock implementation
111:43 - again
111:45 - um i'm gonna say promise dot resolve
111:49 - because on that get story remember
111:50 - because it's asynchronous it's always
111:52 - gonna return us a promise so we have to
111:54 - resolve something and that's why we had
111:56 - the fixture file
111:58 - fixture in here and i'm just gonna say
112:01 - uh for this get started return me this
112:03 - singular object with this stuff in here
112:06 - so i'm gonna say resolve me this i don't
112:07 - want to hit the api's want you to return
112:09 - me this
112:11 - and that's the power of a mock so get
112:13 - story ids dot mock implementation
112:17 - i'm gonna say promise dot resolve
112:19 - story ids
112:22 - likewise for the story ids um i don't
112:25 - care about the implementation of get
112:27 - story ids you know hitting actually i'm
112:29 - just gonna say okay
112:31 - give me this function and
112:33 - just return me a result that i'm
112:35 - faking essentially and that result i'm
112:37 - faking it with is story ids which is
112:40 - this array here with one so i'm gonna
112:42 - say if you get one go ahead and get a
112:44 - single story
112:47 - and this is where the
112:49 - the real business comes in so set a
112:50 - weight act async
112:54 - and then we'll say arrow function
112:57 - and this my friends
113:00 - is
113:00 - great basically what's happened um
113:03 - recently is
113:04 - you didn't used to be able to i don't
113:07 - believe use an asynchronous act so you
113:10 - couldn't
113:11 - do some work say for example
113:14 - go get me these stories because it's a
113:16 - synchronous and render these
113:18 - um
113:20 - i essentially want because when this
113:22 - test runs it's just going to run
113:23 - immediately right and it's not going to
113:25 - have say the story on the page so i want
113:27 - it to
113:28 - await this
113:30 - so if we didn't await this and you get a
113:31 - bunch of errors saying those
113:33 - asynchronous tasks going on and your
113:35 - renders all messed up
113:37 - so we're going to use away act and we'll
113:38 - take that off actually in a second
113:41 - but i want to show you this get by text
113:44 - query by test id
113:46 - i'm going to say render me the
113:48 - application
113:50 - um
113:53 - let's see then await i'm going to say
113:55 - wait for the element and wait for
113:57 - element in react testing libraries in
113:59 - asynchronous utility that basically
114:01 - allows me to pass it
114:03 - one element or an array of elements to
114:05 - say
114:06 - once
114:07 - the asynchronous tasks have happened
114:10 - do this so it's going to say await this
114:14 - this bit here
114:15 - so just wait on a response from the
114:18 - asynchronous task once it's resolved go
114:20 - do this stuff so i'm going to say expect
114:25 - get by
114:26 - text hacker news stories
114:30 - and you know what i want that to be
114:31 - truth i want it to exist
114:35 - and we'll do a comma because we're
114:36 - passing an array here
114:37 - and i'll just uh manipulate these query
114:40 - by test id we want to make sure story
114:42 - buys there because that story by is um
114:45 - who the stories by
114:48 - and we want to check in the uh
114:54 - text content so we can check the text
114:56 - content here
114:57 - and uh since there's going to be a bunch
114:58 - of story buys we can't use get by text
115:01 - right
115:02 - um well really what we can't do is say
115:05 - you know
115:06 - buy this person or buy this person get
115:08 - my text only allows us to get one
115:10 - particular element that's on the page if
115:12 - there's multiple elements with the same
115:15 - uh
115:15 - with the same text it just what works so
115:17 - what we're doing here is we've got a
115:18 - query by the test id for story by and
115:21 - story buys like a spam tag
115:23 - um so we're just going to go into that
115:24 - text content i believe it's a spam tag
115:26 - calendar but we we made it i just want
115:28 - to say bye
115:30 - you know what i can't remember what we
115:32 - made it buying a fixture i think it was
115:33 - by me actually
115:35 - yeah by me
115:37 - um get rid of that i don't need that
115:42 - that looks good um hacking new stories
115:45 - yep that's the title and what we also
115:47 - want to do when i make sure this is in
115:49 - here so i want to make sure the title is
115:51 - in here
115:52 - and this will all start making sense you
115:54 - can see these squiggly lines here saying
115:55 - look it's not imported from
115:57 - react testing library
115:59 - so yeah that all makes sense so let's go
116:01 - ahead and just say yarn
116:03 - test
116:07 - let's see what happens
116:11 - and i'll pull up the coverage if i can
116:12 - on this actually
116:16 - mock implementation is not a function
116:18 - okay great
116:20 - uh so it's saying here we're saying use
116:22 - effect from the hooks
116:24 - um oh what we've got to do actually we
116:26 - have to create our initial mock so we're
116:28 - going to say just oops just.mock
116:33 - dash dash hooks
116:38 - use infinite scroll that'll give us an
116:40 - initial mock so we can start modifying
116:42 - that mock specifically
116:44 - likewise with
116:47 - our services so
116:49 - i can use api
116:51 - you know as soon as it loads in
116:55 - get me the story
116:58 - jess.function and by returning a gesture
117:01 - function it allows us just to you know
117:03 - make assertions on that function did it
117:05 - get called did it get called with this
117:06 - data all this sort of good stuff so get
117:09 - story ids
117:12 - so that should now work except take a
117:15 - look
117:16 - we could rerun that test automatically
117:18 - but it kind of uh nukes my system
117:21 - perfect so we've got account in here
117:23 - but what happens uh i'm hoping we can
117:26 - demonstrate i don't know if it's
117:28 - possible to demonstrate this async act
117:30 - we may actually not need it with the um
117:32 - wait for element
117:33 - hopefully yeah we'd actually need it but
117:35 - that's how you do use async access come
117:37 - out in i think react 16.9
117:40 - uh we don't need it there but we may
117:41 - need it down the line so we'll keep it
117:43 - in the tool bag for now but let me just
117:44 - get rid of these
117:48 - and save that let's see what happens
117:50 - here we are look unexpected talk and
117:52 - that's basically syntax error so rerun
117:54 - that
117:58 - unable to find an element with this sort
118:00 - of stuff great and why is that well the
118:03 - page the test ran but there's no content
118:05 - so we have to await that data so we can
118:08 - do that by just saying
118:10 - putting this back to a wait for element
118:12 - and we also have an asynchronous test
118:14 - here which is great so if we run that
118:16 - test once more
118:18 - save that it's gonna probably failed i
118:20 - think i caught it in time to serve
118:23 - yo i did that's great
118:25 - uh we can check out count because counts
118:27 - basically
118:29 - uh story container
118:33 - don't need that there either
118:36 - let's take a look
118:37 - that looks good to me so basically
118:39 - that's how we uh mock out well not knock
118:41 - out but that's how we test the app.spec
118:44 - so i'll pull up the um coverage now and
118:46 - then we can have a look where stuff
118:47 - maybe we haven't hit or stuff we do need
118:49 - to hit
118:51 - all right yeah sometimes um when i run
118:53 - the test it don't give me coverage and
118:55 - uh you can set this up in your
118:56 - package.json but i wanted to give me
118:59 - coverage for everything not just
119:00 - specific files so even though it's only
119:02 - one one test i'll still want coverage um
119:05 - and it not to get cached so let's have a
119:07 - look at app.spec.js running coverage
119:10 - perfect
119:11 - we've got coverage if i go back here
119:16 - open up uh let's have a look
119:19 - coverage
119:21 - where is it
119:23 - let's see
119:25 - ah okay
119:27 - go into your
119:28 - package.json
119:30 - and what we want to do we have to
119:32 - [Music]
119:34 - have a look for coverage reporters
119:37 - coverage fresh show is there a refresher
119:39 - oh there's nothing in here
119:41 - okay
119:43 - okay
119:45 - we can do just and we've done this
119:47 - before in some in uh like the to do with
119:50 - tutorial so collects
119:52 - uh actually i'm not gonna collect
119:54 - coverage for a minute i'm not gonna i'm
119:55 - just gonna get it from everything but so
119:57 - coverage
119:58 - threshold and this is a good standard to
120:00 - get a good mindset to get yourself in
120:03 - always have a good threshold so branches
120:05 - 95
120:08 - um
120:10 - functions
120:13 - lines
120:16 - statements
120:20 - that looks good
120:23 - uh coverage threshold
120:26 - this is whinging out
120:30 - 462
120:33 - um
120:35 - let's have a look
120:38 - unexpected talking about oh
120:42 - one
120:44 - two
120:44 - [Music]
120:46 - all right that seems fine we'll we'll
120:48 - see in a second
120:49 - um
120:51 - so we've got coverage if i spell that
120:53 - right threshold
120:54 - we have global
120:58 - of the global coverage and the reason
121:00 - we're not getting any coverage report is
121:04 - go away
121:05 - um
121:06 - when to say
121:08 - coverage reporters
121:11 - give it an array of html and text
121:15 - and what that's going to do
121:18 - should give me a
121:19 - oh yeah i didn't like that
121:21 - uh coverage threshold i'm pretty sure
121:23 - collect coverage from coverage threshold
121:26 - yeah i can't spell threshold so that's
121:28 - that should work now
121:32 - should give me a coverage report
121:36 - let's have a look
121:39 - there we are index.html
121:42 - perfect we've got a lot going on here so
121:44 - we might have to clear some stuff out
121:46 - that
121:47 - we don't exactly want to be testing so
121:50 - we've actually tested our story by just
121:52 - doing an app file but i think what's
121:53 - best is if we test it individually as a
121:55 - unit test
121:57 - um even though we did kind of test it
121:58 - and you know you do get this fall over
122:00 - between app and sorry container because
122:02 - it's kind of doing the same thing but um
122:06 - do as much coverage as possible just
122:07 - test everything you possibly can
122:10 - if it's unnecessary to test uh you know
122:13 - you don't have to do it but
122:17 - let's have a look let's go ahead next
122:18 - and create because this one's gonna be
122:20 - quite similar to start up
122:22 - so we could just use this as a base i
122:24 - imagine uh close that down
122:26 - um
122:27 - so let's pull in this as a base i i
122:29 - don't i think we could it's the exact
122:31 - same test i don't even know if i have to
122:32 - test this honestly
122:34 - uh
122:34 - [Music]
122:36 - yeah so we're gonna be hitting the story
122:38 - container
122:40 - it's gonna be doing exactly the same
122:41 - stuff like if you just replace story
122:43 - container here
122:47 - with up
122:48 - i mean i can leave it in here if you
122:49 - wish containers
122:53 - uh
122:55 - is it did i call it containers i can't
122:56 - even remember containers
123:01 - sorry content
123:06 - come on
123:08 - uh story concerner stories container and
123:11 - you know what you'll probably get
123:15 - that will most likely run completely
123:17 - fine and you it you know you can modify
123:20 - stuff in a storage container
123:22 - um
123:24 - there you are look perfect but i mean
123:26 - maybe you could just mock that in the
123:27 - app
123:28 - and then you know just say okay it
123:30 - renders
123:31 - it just renders that's all you wanted to
123:33 - do as opposed to doing all this
123:36 - but anyways i'll leave that in there let
123:37 - me see i'm going to put this on github
123:39 - so
123:41 - any modifications on the test
123:44 - let me know because i'd like to see that
123:46 - story.spec.js is next clear that out
123:51 - um this one's going to be you know it's
123:54 - going to be fairly similar maybe you
123:55 - want to put some stuff in your test with
123:56 - it the api fails but
123:59 - i'm not gonna go crazy with the testing
124:01 - i'm not i am kind of a purist but in the
124:03 - same hand uh on the other hand i'm not
124:06 - i'd like someone who's really good with
124:08 - tests to come and buff these up if
124:09 - possible
124:10 - um but when i start testing i'm like
124:12 - okay
124:14 - i've already tested this stuff i've got
124:15 - similar components being used throughout
124:18 - so i may as well
124:20 - you know just
124:22 - copy this to be you know i may as well
124:25 - copy it i know story ids isn't being
124:26 - rendered in here the infinite scroll is
124:29 - not going to get rendered we don't need
124:30 - the constant
124:31 - uh infinite scroll that can go we're not
124:33 - doing the story ids because we're just
124:35 - looking at the get
124:36 - story uh renders even though that's his
124:40 - application renders
124:42 - uh let's change that to story component
124:45 - with content
124:47 - uh so what did we have here story so
124:49 - that one goes to renders the story
124:52 - container with a story
124:56 - uh so yeah let's see here so um we're
124:58 - going to say okay we're going to mock
125:00 - out this implementation with a single
125:02 - story
125:04 - we are gonna
125:06 - render a story and we're gonna give a
125:08 - story idea of one
125:13 - components
125:15 - story story ids don't need that
125:18 - get story ids do not need that
125:21 - infinite scroll do not need
125:23 - uh so yeah get story do we need a clean
125:26 - up yeah we need to clean up but um
125:28 - seeing as though
125:30 - there's gonna be multiple mocks in here
125:32 - one nice trick you can do
125:35 - put this down here
125:37 - is we'll call that function like that
125:40 - and then we'll say just dot reset all
125:43 - mocks and that will reset on each test
125:46 - so this sort of stuff or this mock
125:48 - implementation here
125:50 - will fall into the next test
125:52 - um so we get a clean test so we're going
125:54 - to clean the dome and we're also going
125:55 - to clean all the mocks
125:57 - and i think uh even this is asynchronous
125:59 - yes it is i'm going to mock the
126:01 - implementation of a single story we're
126:03 - going to
126:04 - render out a story pass it a story idea
126:06 - of one
126:07 - because that's in our fixture
126:09 - then we're going to wait for element and
126:11 - we're going to say i can use
126:13 - let's just actually let's say also
126:17 - um i know that we have a test id in
126:19 - there of i think it was story or story
126:23 - always check your components there
126:24 - should be a test id in here yeah test id
126:27 - story which is there
126:28 - so if i um i i basically just want to
126:31 - call query by
126:32 - uh you can use get by test id query by
126:34 - test id
126:36 - um
126:37 - hmm
126:39 - let me just say actually we could do
126:41 - query by test id and i'll i'll explain
126:44 - the difference in a second
126:45 - um let's say query by test id story
126:49 - let's see what happens
126:50 - um
126:51 - get by test
126:53 - text
126:54 - then we'll say
126:55 - [Music]
126:57 - the hacking news stories isn't going to
126:58 - be there because that's not in the
126:59 - container tarnish will be there text
127:02 - content
127:03 - all right let's have a look where we're
127:04 - at with this sir
127:06 - yarn test
127:08 - let's test everything
127:12 - we can run individual tests as well i'll
127:14 - show you how to do that in a second
127:18 - works fine perfect um
127:21 - so component story that's done even
127:23 - though it's covered in another two tests
127:25 - but to run individual tests just do yarn
127:27 - test
127:28 - give it the
127:30 - relative path
127:31 - and just run that
127:33 - you can also run individual coverage on
127:35 - that too so if i quit out of there
127:37 - and say yarn test coverage it'll give me
127:41 - the individual coverage for that as
127:43 - opposed to running all the test coverage
127:46 - um yeah so that was good to me
127:48 - so um
127:51 - let's take a look here so we've got get
127:53 - by text query by test id
127:57 - um
127:58 - so let's expect query by test id story
128:02 - uh to be truthful
128:06 - you see it's all checking perfect so if
128:09 - you switch that out now to um
128:11 - i think it was get
128:13 - by
128:15 - get by test id
128:21 - let's see
128:23 - both work the same um one of them i
128:25 - believe so yeah so what we're looking at
128:27 - here okay we want to see what the
128:28 - difference between get by test id and
128:30 - query by test id is
128:33 - and essentially what happens is so you
128:36 - could use get by test id
128:38 - if that happens to be false so you could
128:40 - just actually call this
128:42 - like that and if it happens to be false
128:44 - it'll throw an error
128:46 - um
128:47 - if this here query by test id
128:50 - happens to be
128:52 - you know false it'll just return null
128:55 - um i'm not too sure which one i like
128:56 - most i i would like to get an error
128:59 - um but you could just do two truthfully
129:01 - but in this case i'll leave them in so
129:02 - you can just see
129:04 - how that works so let's have a look
129:06 - so get by test id
129:08 - let's just rerun that and it's not going
129:10 - to be there
129:14 - hopefully we get a nice error
129:17 - taking its time there we are
129:20 - just give me an error
129:22 - unable to find but if i run query by
129:24 - test id on that
129:30 - it should also fail
129:32 - because i've got to be truthful
129:35 - but you see how it doesn't give me the
129:36 - debugging as well
129:38 - um but if you used to do this so for
129:40 - example
129:42 - you just called it here so let's keep an
129:44 - eye on this
129:52 - come on
129:53 - there you are i couldn't find it so what
129:55 - happens if i do a query by test id
129:57 - should hopefully get null back
130:00 - oh it doesn't doesn't return anything
130:03 - which is quite bad
130:04 - so
130:06 - in this case
130:08 - i i'd probably stick with
130:11 - get by test id honestly i think it's a
130:14 - bit safer
130:15 - so we don't actually need that
130:18 - get rid of that
130:21 - perfect that looks good to me let's
130:23 - check out the let's check out the
130:25 - coverage
130:28 - there we are
130:29 - um what was that on that was on
130:31 - story.spec
130:33 - yeah it's already covered from the kind
130:34 - of an integration between the app and
130:37 - the story container
130:39 - so a nice one that we're going to be
130:40 - doing now
130:42 - is the hn api.js i can use api that's
130:46 - all it is uh you can stop running those
130:48 - tests now and there's there's no real
130:50 - need
130:51 - um so this one we're going to import
130:54 - we're going to mock axios because we
130:56 - don't actually use the rail
130:57 - implementation
130:59 - we're going to say
131:01 - from axios and you don't need the named
131:04 - input because axios is a default so
131:07 - let's just say input
131:10 - get me the story ids get story
131:13 - new stories url story url and this test
131:16 - is
131:17 - is really nice actually i like this one
131:19 - and
131:21 - it's not this one specifically but
131:23 - i like testing apis because you can see
131:25 - or did it get called with this data did
131:26 - it not so let's import singular story we
131:29 - need our fixtures
131:30 - empty singular story
131:34 - from
131:36 - fixtures
131:38 - all right
131:39 - oh yeah that looks right
131:41 - uh how many tests we've got going in
131:43 - here now so what did i do with this when
131:45 - i did test it out just the one so yeah
131:47 - we don't really need a describe here i
131:49 - mean
131:51 - actually you know what we could do with
131:52 - a describe here because we're testing
131:54 - this and this so
131:56 - firstly let's uh
131:59 - let's do a nested one
132:00 - i can use api
132:02 - forage and you can put your before each
132:04 - by the way in the describe um
132:07 - just dot
132:10 - reset all mocks we need some clean up
132:13 - and then we'll do
132:14 - clean up
132:17 - um did we not bring in react testing
132:20 - library actually do we need a clean up
132:23 - we don't really need to clean up because
132:24 - we're not doing anything to the dom here
132:25 - we're just basically testing the api
132:28 - um
132:29 - describe
132:31 - uh let's say get story
132:34 - um get story functionality i don't like
132:37 - testing functionality but in this case
132:39 - you know um
132:41 - i'm breaking my own rule
132:44 - for now let's just do one describe
132:46 - so what does it do well it
132:50 - requests and gets a story from the
132:53 - hacker
132:55 - hacker news
132:57 - api
132:59 - and then we can do axios.get because
133:01 - that's a function on axios and we're
133:04 - going to say mock that implementation
133:05 - because i know that's what we've been
133:07 - using because
133:08 - we did
133:10 - implement that right we we used to get
133:12 - back way back over in
133:14 - service
133:15 - we'll use this get and i just want to
133:16 - mock that out
133:18 - so do promise.resolve
133:21 - and i'm going to say
133:23 - i want it to match exactly how it runs
133:24 - through my data so i'm going to say data
133:27 - and
133:28 - spread a singular story in there
133:32 - there we go that looks good to me
133:35 - and then what we could do we could do
133:36 - const entity equals aware get story and
133:41 - pass it one
133:42 - and because this we're using an aware we
133:44 - need an asynchronous function
133:46 - and what we can do now because this is
133:49 - mocked and it's not actually going to go
133:50 - call the hacking news api it's just
133:51 - going to give me this
133:52 - and that spread story what's happening
133:55 - here with these three dots we've got
133:56 - singular story um i'm creating a new
133:59 - object
134:00 - which you probably just could just well
134:04 - you can just do
134:06 - uh
134:07 - should i just do that actually let's
134:08 - test it we'll find out
134:10 - dot resolve data which is a single story
134:15 - we can test it let's see what happens um
134:17 - so i said we want to expect
134:20 - axios what
134:22 - happened expect axios.get
134:26 - to have been called
134:31 - times one
134:34 - then we're going to say
134:36 - remove that
134:37 - to have been called with and then this
134:40 - is where the magic comes in
134:41 - story url
134:44 - plus one being
134:48 - uh
134:49 - this here get started
134:52 - and then what we're going to do we're
134:53 - going to say dot json because that's
134:55 - what is actually going to be sending to
134:57 - the hacking news api and saying give me
134:59 - this story this num the story of an id
135:00 - of one i'm going to say that expects
135:05 - entity dot
135:08 - so equal
135:10 - and we should be able to put single
135:12 - story in there
135:14 - let's test this hypothesis and just see
135:18 - so i'll get that yarn test
135:22 - let's see what happens maybe it doesn't
135:24 - like a singular story going in
135:27 - it should not should do let's see
135:31 - requests so don't like the mock
135:34 - implementation and i can already hear
135:37 - everyone screaming to me it's like you
135:38 - told me to do this early you have to
135:40 - mock the actual implementation the the
135:43 - module
135:44 - let's go ahead and do that
135:46 - so we can actually you know used use our
135:49 - mocks and we get the mock implementation
135:50 - so soon perfect it passed
135:53 - but reason we mock this is so we can do
135:55 - stuff like mock implementation on that
135:57 - so we know that axios is in there and we
135:59 - say mock the implementation because
136:00 - we've got a construct constructor ingest
136:03 - that sets up all these nice functions
136:05 - for us so like for example if you used
136:07 - to run axios
136:10 - we run this test
136:12 - we should get a bunch of nice stuff out
136:14 - here
136:18 - you see so we get um
136:22 - a bunch of mock implementations here so
136:25 - we do get the actual axios uh
136:27 - we'll get the access function and get
136:29 - mock implementation clear all this good
136:32 - stuff all because we did this
136:36 - uh but then you also get stuff like here
136:38 - headers uh inceptor response so you can
136:41 - get the original functionality if you
136:43 - wish to get the original functionality
136:45 - um
136:46 - but in this case we only care about the
136:48 - dot get
136:50 - so we can remove this axios
136:53 - maybe i can show you it also in the mock
136:55 - implementation of the story so if i
136:58 - do get story
137:04 - i think that'll return just a function
137:06 - value actually
137:07 - oops
137:09 - grab that
137:14 - let's see
137:20 - there we are so we'll get the get
137:21 - started because i've mocked it out
137:24 - here
137:25 - and i've just said give me the jest up
137:27 - function but you see the difference in
137:29 - here
137:30 - is that's just going to give me the
137:31 - default marks on everything whereas the
137:32 - get story
137:34 - if i mock out that particular function
137:36 - it's going to give me all this
137:37 - functionality here
137:39 - and then you can run stuff like you know
137:41 - mock implementation
137:42 - like that which is what we're using
137:44 - there
137:45 - don't go ahead and do that
137:46 - um so yeah hopefully that makes sense
137:48 - i'm always open to answering more
137:49 - questions i know these can watch in
137:51 - these videos it can get quite tedious
137:53 - and some stuff you may understand some
137:55 - stuff you you may not understand but
137:58 - essentially that's that's programming
138:00 - you're going to understand some stuff
138:01 - and you're not going to understand some
138:03 - other stuff and
138:04 - it may click one day it may not click
138:06 - another day so always come back write
138:08 - notes
138:09 - ask people it's the best way to just
138:10 - communicate people
138:14 - so what i can do here will say
138:15 - [Music]
138:16 - it
138:18 - [Music]
138:19 - does not retrieve a story from the
138:23 - hacker news api
138:28 - but handles
138:30 - gracefully
138:33 - let's pull this over here
138:40 - does not retrieve a story
138:42 - from the i just say api
138:44 - handles gracefully i'm going to be
138:46 - rewriting a lot of this stuff when we do
138:47 - hit the graphql bit
138:49 - again we can just go in here copy this
138:52 - and i don't i don't want it to uh where
138:54 - we are i think
138:57 - uh space
138:59 - i don't really care about a single story
139:01 - here i want an empty singular story
139:04 - and we can mock an empty singular story
139:07 - and we're going to say we want it to
139:08 - equal when it returns a singular story
139:11 - so let's have a look
139:18 - perfect uh just need to go back into
139:20 - story dot spec and remove that
139:23 - console.log there so you're getting all
139:25 - this stuff here
139:27 - again this is all going to be on uh it's
139:28 - all going to be on github feel free to
139:30 - contribute to the project
139:32 - graphql is coming so it's going to be a
139:34 - news reader not specifically hacker news
139:37 - we will be using the hacking news api
139:38 - but we're going to be pulling other
139:39 - stuff as well using graphql
139:42 - get story functionality
139:45 - doesn't retrieve so we've done the get
139:46 - story so now all we've really got to do
139:50 - let's have a look where are we with
139:51 - these braces
139:53 - describe
139:55 - get story ids that's you know that's all
139:58 - we've got left to do
140:00 - and we can pretty much just go ahead
140:02 - copy this because we've got similar
140:03 - implementation so it makes our test nice
140:05 - and easy
140:06 - requests
140:08 - and gets
140:10 - uh let's change this to story ids
140:12 - from the hacking news api
140:14 - we will mock out the implementation of
140:16 - the get once more
140:18 - and the reason we're not mocking this
140:19 - out up top is because we want to change
140:21 - it on each test right and we're clearing
140:23 - it on each test as well by doing
140:25 - just.reset all mocks
140:28 - so here we're just going to say give me
140:30 - story ids which uh is in our fixture if
140:32 - you forgot it's there in the rear with
140:34 - one
140:36 - um access dot get mock implementation
140:38 - promise dot resolve return me an um an
140:41 - object with a key of
140:43 - data there's a property and that
140:45 - property is an array with one inside so
140:49 - we'll say get story ids we don't have to
140:51 - pass anything to get story ids
140:53 - and we can basically say how many times
140:55 - it's been called once
140:57 - we only only thing we really care about
140:59 - here is uh does it hit the
141:02 - new storage url
141:04 - because that's what we plan on hitting
141:05 - it with which is this a buildup of base
141:07 - url which is that
141:09 - new stories and it should go get me the
141:12 - new stories and then we'll say we want
141:14 - it to equal
141:15 - story ideas
141:18 - let's have a look what goes on here
141:24 - certain stuff we worry about in our test
141:27 - perfect even that's hitting the
141:29 - the wrong test
141:30 - uh yeah certain stuff we won't worry
141:32 - about within the tests um
141:35 - i'll try to stay away from
141:36 - implementation but doing these sort of
141:38 - tests gives you confidence in your api
141:39 - so i quite like doing them
141:42 - maybe it's just something i like doing
141:44 - guest story functionality
141:46 - um
141:48 - let's put that to get story ids
141:51 - you can see the names come inside here
141:53 - from the describe and the test so
141:55 - hacking news api gets story requests and
141:57 - gets a story
141:59 - there we are perfect
142:01 - um
142:02 - so i'm just going to go ahead now and
142:03 - check the coverage report see where
142:05 - we're actually at
142:07 - um it'd be useful if i actually run the
142:09 - coverage uh so let's have a look
142:13 - there we are
142:17 - the links are in the description by the
142:19 - way for this particular project and
142:20 - other projects i've done
142:22 - all in the description i'm on twitter at
142:24 - carl hadwin my github is
142:26 - in also in the description of carl
142:28 - hadwin
142:29 - we don't care about hooks in this case
142:30 - and we don't also care about utils i'm
142:32 - not testing the d-bounce
142:34 - service worker we don't care about that
142:36 - so okay in this case
142:38 - we're getting very close to the end now
142:41 - stuff i don't care about i mean this is
142:42 - very subjective but uh certain stuff
142:44 - that i can manually test
142:46 - i'm not gonna test honestly um if i can
142:49 - just manually test it
142:50 - get coverage
142:52 - from
142:53 - give it an array
142:55 - even though the debunks don't work um
142:56 - the infinite scroll kind of works but
142:58 - when you put it on a different screen
143:00 - um zoom it don't work too well so i
143:04 - could fix that now or
143:06 - if one of you want to fix it that would
143:07 - be really nice
143:10 - um not only would it save me the time
143:12 - but uh
143:13 - it would make this tutorial shorter and
143:15 - also
143:16 - if someone could write an implementation
143:19 - so this is why well not implementation
143:21 - but a few notes around
143:23 - why it uh was like that you know that
143:25 - would be nice but like i said people
143:28 - i don't know people learning this i
143:30 - don't want you to get hooked hooked up
143:32 - on a d-ball so i don't want to get
143:33 - hooked upon
143:35 - all the other nonsense and the nuances
143:38 - that may occur
143:39 - um i just want you to learn react um i'm
143:42 - not forcing you to react i'm just saying
143:45 - these are some of the good stuff uh the
143:47 - functionalities for hooks this is hooks
143:49 - this is components this is containers
143:52 - all this stuff that kind of brings it
143:54 - together
143:55 - um as a react developer
143:57 - so it's all good stuff to look out for
143:58 - all these are like fundamentals and
144:00 - you'll use these day-to-day
144:02 - so anyways i'm going to rerun the test
144:03 - um
144:05 - i'll show you what i'm running by the
144:06 - way for this yarn test coverage watch
144:09 - all
144:12 - and hopefully we get 100 coverage once
144:13 - you get rid of all this uh all this
144:14 - nonsense here what we don't want to test
144:17 - i'm not testing a service worker even
144:19 - though you can turn the service worker
144:20 - on
144:21 - oh it's not met oh selectors is missing
144:25 - um
144:27 - by the way if you do want a service
144:28 - worker i'm going to run this through
144:29 - lighthouse very shortly
144:31 - all perfect hundred percent uh selectors
144:33 - should go in a second
144:36 - uh source selectors uh selector selector
144:39 - selectors
144:42 - that looks fine to me let me rerun that
144:44 - once more
144:50 - come on
144:52 - perfect
144:55 - you'll see this one here is uh giving
144:57 - you
144:58 - a 50 in branches because we never hit
145:00 - red but i wanted to show you our style
145:02 - components work and giving you
145:04 - um an opportunity to look at how props
145:05 - work there too so you feel free to
145:07 - change that if you wish
145:09 - um
145:10 - so yeah let's run this through
145:11 - lighthouse
145:12 - right now i think we i think we're done
145:14 - we've got a working application we've
145:16 - got it working pretty quickly but then
145:17 - we just wanted to make sure we could uh
145:20 - i you know oh one thing we didn't do we
145:23 - didn't implement memo
145:24 - so this is this is a really good thing
145:26 - so can i just get rid of the um terminal
145:29 - right now
145:30 - uh
145:32 - let me see here i'll just pull this out
145:36 - stop snapping there is
145:39 - go back to this
145:41 - cool okay one thing that's really
145:43 - important right now
145:46 - story
145:47 - container
145:51 - yeah so one one of the important things
145:52 - here is even the
145:54 - react isn't going to re-render this
145:56 - story because it's already there right
145:59 - it's not going to hit that render
146:00 - function
146:01 - but it is going to call this story
146:05 - um so we'll go in here it's not going to
146:07 - just ignore it it's going to go in here
146:08 - and be like okay well it's here
146:10 - um let's remount the component and uh
146:13 - maybe this is a quirky react i'm not too
146:15 - sure actually but it's going to
146:16 - re-render this component and you can see
146:18 - here it's like okay um
146:21 - if we log out the con this story id
146:23 - would expect it to be in there once and
146:24 - it should just be in there once
146:26 - let's have a look it should just be in
146:28 - there once so if we do like 2 107
146:33 - it's in there once but if i re-render
146:34 - you think okay well it's going to go get
146:36 - me zero to 60 now so it should be in
146:37 - there twice
146:40 - but no react smarter than nice like well
146:42 - you've already rendered this component
146:44 - why should i go
146:45 - and re-render it again i'm not i mean
146:47 - i'm not going to come in here and say
146:50 - um
146:51 - yeah i'm not going to come in here and
146:52 - say i'm going to re-render what's the
146:53 - point nothing's changed the props are
146:55 - the same so i'm not going to re-render
146:57 - if the props happen to be different i
146:59 - would re-render but i'm not going to
147:01 - but this is where some people
147:03 - forget that this use effect still going
147:06 - to get hit
147:07 - and you can see that clearly here
147:09 - um so if you go to the network tab
147:13 - search for two one zero one seven eight
147:16 - or two so it's going to do the first
147:18 - call which when it gets comes on to the
147:20 - pit reacts loading everything the second
147:22 - once it's rendered the third call
147:25 - when you do a scroll
147:28 - so we have to be careful with this
147:30 - so one amazing thing you can use is memo
147:32 - a memo works like amazingly so all we
147:35 - have to do
147:36 - just put memo there
147:38 - wrap it in a function
147:40 - say story
147:43 - and this will prevent that use effect
147:46 - being hit
147:47 - which is really good because we're not
147:48 - making additional additional network
147:50 - calls this is one of my favorite um
147:53 - things about uh the memo function how
147:55 - easy well for hooks essentially how easy
147:58 - it is to just implement that and that is
148:01 - going to come back now and say okay well
148:02 - if i'm in store a container and i
148:04 - realize this is wrapped in a memo even
148:06 - i'm going to go in here i'm going to
148:07 - check to see if that's already on the
148:09 - page and if and if it's exactly the same
148:11 - i'm not going to do anything why should
148:13 - i
148:13 - you know do this twice
148:15 - so we'll copy this id once more i'll do
148:17 - a refresh
148:20 - i'll clear this out
148:22 - go in here save this save this
148:26 - so should get a network call in here now
148:31 - once so it's there once and if i just
148:32 - remove that you can see there's a ton in
148:34 - there if i go scroll down it's going to
148:36 - go re-render
148:38 - and you see it's only re-rendering
148:41 - the new ones
148:42 - and it's only in there once so no matter
148:44 - how much i scroll
148:46 - we're not going to be hitting that
148:47 - network more than once because it's
148:48 - already there
148:50 - and that's memo and it's amazing i
148:52 - absolutely love memoir it's my favorite
148:53 - hook
148:54 - uh we can get rid of that story id don't
148:56 - need that
148:58 - um
149:00 - perfect
149:01 - clear that out
149:04 - do one scroll it's not in there perfect
149:06 - if i do one more
149:09 - it's in there once
149:12 - absolutely love memo works fantastically
149:15 - yeah and just react in general is like
149:17 - really good i just really enjoy working
149:19 - with react and um
149:22 - don't get too uh put down or be too
149:25 - harsh on yourself if you don't know
149:26 - something like even i you know even
149:28 - people experienced who've been working
149:29 - react for three four five years or
149:31 - whatever it may be
149:33 - do forget stuff like
149:35 - i had to sanity check myself just then
149:36 - to see
149:38 - um will this component re-render if the
149:40 - props haven't changed and um you can
149:42 - call you can't call a component to
149:44 - update like with should component update
149:46 - for the return um
149:48 - and when i say return a re-render
149:50 - essentially
149:51 - um but yeah i i still have to sign it to
149:53 - check myself i everyone forgets stuff so
149:56 - uh don't get too uh down on yourself if
149:58 - you don't you know fully understand this
150:00 - tutorial i'm here to help i'm on twitter
150:02 - the github's in the link the twitter's
150:04 - in
150:04 - in the link the link for github is into
150:07 - uh the description the link for my
150:09 - twitter's in the description
150:11 - my email is uh
150:13 - on my youtube channel so feel free to
150:15 - check that out i'll answer all emails
150:17 - even though it may take me a bit of time
150:19 - but i'll answer every email
150:21 - uh and
150:23 - yeah just keep following the tutorials
150:25 - we can run this through lighthouse now
150:27 - actually let's just see uh performance
150:28 - wise and i'll show you how to do this
150:30 - actually let's go ahead and
150:33 - do yarn build
150:36 - and we'll create a production build here
150:40 - creating an optimized production build
150:44 - let's see
150:45 - let's see let's see let's see
150:47 - should give us part 5000 i believe
150:50 - uh we can use serve you may have to
150:52 - install this just do like yarn out serve
150:54 - it should work uh there we are
150:57 - and you want to run your production bill
150:58 - through lighthouse um
151:01 - if i open
151:03 - a new version you want to run an
151:05 - incognito so you don't get like um
151:07 - look i mean even even here i've got so
151:10 - much stuff that i'm trying to learn
151:11 - everyone's still learning so even on my
151:13 - you know task bars there's certain stuff
151:15 - i forget so uh yeah don't be too hard on
151:17 - yourself
151:19 - um
151:20 - click lighthouse little add-on you can
151:21 - get from the chrome store run it
151:22 - incognito so you don't get other
151:24 - applications well extensions interfering
151:26 - generate a nice report
151:29 - it's running in mobile mode which is
151:31 - nice and we see it's responsive
151:34 - uh and boom we've got 95 performance
151:36 - best practices time to interactive yeah
151:38 - it's a bit slow serve static assets with
151:40 - an effective cash policy nothing we can
151:42 - do about that unfortunately whilst we're
151:44 - doing it locally but if you put it on a
151:45 - server it would won't run great
151:47 - accessibility all passed
151:50 - best practices again we can't hit 100 on
151:52 - this because we're not using http http
151:54 - 2. we can do that on a server seo
151:57 - progressive web app we've got a service
151:59 - worker running which uh which is nice we
152:01 - can't hit this to put on a server but
152:03 - yeah you see like we pretty much hit all
152:05 - bases you can keep re-rendering this
152:07 - actually to get better scores
152:09 - and they're probably one or two
152:10 - extensions i've got enabled i think
152:11 - you've got like last pass and a few
152:12 - other things that are running
152:14 - um there you are 100
152:16 - 100 performance it really depends but
152:18 - yeah that's lighthouse um and yeah i'm
152:20 - really happy with this hopefully it's a
152:21 - good project that people can learn from
152:23 - it's not too complicated
152:25 - um
152:27 - but yeah it's not too complicated
152:29 - there's only like one component in there
152:31 - but we're hitting apis and i'm so
152:33 - excited to be looking at graphql next
152:35 - it's gonna be so good to be able to you
152:37 - know make this from one component and
152:39 - render just one
152:41 - api we're going to be hitting graphql
152:42 - and getting a bunch of different
152:44 - endpoints
152:46 - so yeah that's pretty much it for this
152:47 - tutorial i hope you learned a lot we did
152:49 - react testing library we did one
152:50 - component we looked at memo
152:54 - implemented stuff like mappers utilities
152:56 - for d-balance selecting fields we had a
152:58 - service worker we did apis quite a lot
153:01 - actually so if you got through this
153:03 - congratulations
153:04 - i'm on twitter carl hadwin
153:06 - all the relevant
153:08 - links are in the description below
153:10 - this will be on github so that will also
153:12 - be in the description below
153:15 - follow me on youtube search my name carl
153:18 - hadwin or cognitive search and you'll
153:20 - find many videos like this and many more
153:22 - to come and keep an eye out for the part
153:24 - two of this where we're gonna be looking
153:25 - at graphql that's gonna be really really
153:27 - interesting
153:28 - and any questions drop them below i'd
153:30 - love to hear them so yeah let's uh as a
153:33 - community maybe build on this try uh if
153:36 - you get to the graphql point before me
153:38 - fantastic
153:39 - uh maybe we can do live updating too in
153:41 - this that'd be cool so yeah any ideas
153:43 - throw them across i'd love to hear them
153:45 - thanks for watching this video
153:47 - as always i shall see you in the next
153:48 - one

Cleaned transcript:

hello and welcome to this react tutorial where we're going to be looking at creating a application that calls the hacker news api so this is the application we're going to be creating it essentially loads in hacking new stories uh one by one there's 500 in the api the api will return as a list of story ids and then we're going to call another api route that will give us the stories we're going to be looking at infinite scrolling this so we can continuously scroll down and each time it does that we're going to hit the api again for another 20 or 30 stories and then what we're going to be looking at is we're going to be testing this with react testing library we're going to be using style components not too extensively but we're going to be using them just to show you how to get started with them um and we're going to be looking at things like memo in react so we're not having to recall well rerender the component each time on each particular scroll so in terms of this tutorial on you know what exposure to react you have to have i'd say that um you could come in this from a beginner standpoint and if you have a little bit of javascript experience and you have the ability and knowledge to call apis you you will follow this tutorial and do quite well i don't believe there's many necessary um other aspects that you're going to have to need essentially all this is is we're gonna have one component which is a story and we're gonna have a container for the entirety of the stories so let's begin uh and we're gonna start by just creating a create react app with hack and use tuts so i'm going to take this one a bit slower than my last one which was a todoist one even though that was a seven hour tutorial but this one's going to be focusing on more of the beginner aspects of react even though we are going to be throwing stuff in there like memo so if we just create a react up and that will take a few seconds we're using mpx here i basically just grabbed this off the github of create react up so if you run this line right here we'll get a react up ready to go and we can start modifying it and playing around adding components in the only aspects that may get into the intermediate aspect of javascript and and all on all that good stuff is the infinite scroll but i wouldn't worry too too much about that let's focus mainly on react here um so that should be done now so if we do our cd into this and it was hack and use tut and there we are and i'll open up and if you want to do this you can go into vs code and i think if you go to the settings so i think it's command shift p and then type path and it should add code to your path so here we are that's good um let's open this we'll start by doing a quick cleanup so generally what i do each time i get one of these i go in here we don't need to manifest um actually we can probably leave the manifest in there because we're going to be looking at stuff like um service workers and i'll explain those down the line don't need a description uh actually it's just the description let me make this bigger so you can see this hopefully that's a bit better and we'll say here we'll just put in some content so when you're searching google this description is in the little description descriptive box below the title so sir bringing you the finest news since 2019 uh favicon don't need theme color we'll keep in there keep the description apple touch that's just the logo for the apple touch icon if you want to make it an application or change this to news reader and my thought process with this particular application is we're going to create it now in the aspects of you know the beginner showing you how again we into react giving you some nice little tips here and there like memo style components uh testing so you should get on your feet with react through this tutorial then the next one we're going to consolidate a bunch of apis so we'll get hacking usable maybe we'll get some stuff from the bbc other tech websites uh and then what we're going to do we're going to use graphql on the back end or just say there's middleware to call some services those services being api routes and then consolidate those and give us those new stories back to the front end um so that should be really nice to do and that's where we'll get into a bit more the intermediate aspects of react and graphql and we're going to be writing all our resolvers and everything else um without using anything like prisma so we've just got rid of those so we can start by doing a clean up in here so generally as uh if you followed my tutorials in the past you know that i'll come in here and uh i'll wipe out the majority of stuff so we'll just set export const bring that into an arrow function and then down here we'll just we don't need the return we can just get rid of that and say hello and we don't need to default export here because we've got an inline export here that should give us something to play with um let's get rid of index.css we don't need the logo number whilst we're here we can turn on the service worker don't worry too much about this at the moment but we'll i'll explain service workers as we uh get to that particular point remove this um and what i generally like to do i just instead of calling react dom here directly i like to just remove that and just say give me render and then we can get rid of uh we need to seeing as though this is no longer a default input we need to change this because if you remember in here we're now using a named export so we need to use an um named import here service workers fine there um one thing we have to do to turn the linter on go into your package.json and i generally just remove the es link config because i like to run the airbnb one so as you see it's now running give that sieve go in here just add a equals remove that there we are if you want to unregister we don't need that comment let's open up the sidebar so now uh let's have a look do we need to test not right now we can test that somewhere else um close down public we've got app.css don't need that either it's going to be using star components and there we are we've got a clean set up and next what we're going to do we'll start creating the scaffolding so things like the folders and this is a really important part of software development i want you to get in the into the uh the routine of creating these folders where you have separations of concerns so you have components folder containers folder hooks folder selectors mappers all this stuff that transforms your data and keeps it separate so it can live by itself um so i'll show you that right now okay so one thing i've just set up now is um well what i want to do let's just begin and start this and just make sure we've got something coming out generally you may see this issue where it's like telling it telling you about skip preflight check there is so if you do see that issue go ahead in here um and just create a new file dim put that in there and then if we go ahead and restart that we should to get the application starting let's see come on there we go perfect so let's begin by doing the scaffolding for the app so let's do components which is a folder or just house our components we will then have constants and generally this stuff is in uh most large applications um because you want separation of concerns so stuff can live by itself hooks we're going to need a services folder for the um api calls a styles folder for our styles uh utilities folder which will basically just house stuff that is kind of miscellaneous uh mappers selectors and that should be it for now uh even uh only containers let's do a containers folder so that should be good so let's begin like what do we need to uh you know start hitting the api well let's have a look so github um and then what we want to look for is the hacking news api so this is a hacking news api and it just gives you let's have a look these uh this is hacking news and we're just going to be calling this api and they've got this api here um we'd have to worry about all this particular stuff right now and uh if we click on one of these you can see that it returns to some json data with like the title the story the url but like i said we have to worry about um right at this moment what we want to worry about here is this new top and best stories so up to 500 topper news stories are available at top stories news news stories and best stories we're going to be wanting to hit the new stories so we need some sort of service that can hit this new stories so as we can see it returns ids and these ids are story ids and what we want to do without these ids is get them back and it's going to give us 500 so we've got to be a bit careful in terms of how we're going to manage these api calls but what we want to do is we're going to get these 500 back and we want to render 20 or 30 of them per scroll so to begin with we're going to get the 500 stories from the api which is this so this is the url i'm going to be calling with axios and then say we got this one here 2906 62655 we want to go ahead and it says for example a story lives here so if we change this item to this url you'll get all this data and that's pretty much all we're going to be doing so we're going to do two api calls um well two routes we'll be creating two service container routes and we're gonna be calling this api um for the stories because we only need to call this one this api route once because we only need all the new story ids in this case it's top stories but you can do that new stories and we'll get all the ids and make api calls to with these ids to get the story so that yeah that's pretty much it really um i guess what we need to do next is let's have a look we need to create a new tab in here a little bit bigger and what's going to do yarn add axios and axios is a nice little package it's not react specific but it's a nice package that allows us to do api calls and essentially it's it's just what fetch is doing but um people seem to prefer it i like the package uh you can have a look just do github actually austin has tons of useful methods in there so now we've got axios we can actually start making calls so if we go back in here i mentioned the services folder earlier let's create a file let's call it hn for i can use api.json api.json.json.js and we'll import axios from axios and then what i'll do we want to create some sort of base url that we're going to be hitting so if we do export const base url let's leave it empty for now and then we're going to do expert const new stories url and let's put that to an r and then what we're going to do we're going to do xbox cons story url and we'll build these up so for example i'm going to make these into 10 template strings um we want to include the base url here so base url and then what i imagine that one will be is new stories so you could switch this out if you if you wanted to not be a json and pretty much the same here base url and we're going to say i am slash so let's go get the base url so the base url is this here right up to there and you see i've got item there that corresponds with this one here so if i just paste that in here now this is saying this story url is saying this particular string lives in here and then item likewise with this one so now we can start creating a function that will get me a story so let's test this so actually you know what let's get the story of our story urls first or story ids so export cons because we're going to be using this through our application so we want to import it so say get story and that name is perfect something like that is exactly what you want and this is making some sort of side effect so when you think of stuff like image processing so if you're on twitter you upload an image on facebook and you can crop the photos it's quite heavy likewise with network calls which is what we're doing here um likewise with accessing the file system it's going to block say the rendering of the ui so we have to use async here and by saying async we're going to shove it onto something called the micro task queue i don't want to get too deep into exactly what the micro task queue is right now but i'll tell you how it works when we call this so if we do cons result and we're going to say await this response from axios and we're going to this is going to be a get and if you look at axios you've got all these um different methods so you can have delete get should be post patch put requests so there's all these methods but we're going to use get we're going to say go get me that data new stories url and what we're going to say then is once you've gone and got me this then get me the data and we're just going to call this data and once you have that data just return it um we don't need this actually so i've just said okay now you've got data pass me return me that data i'm gonna say return result and if i just go ahead now and go into app let's start bringing some things in here so we can test it so um yeah sorry not up uh let's close that down open this up actually you know what we can test we can test this directly and up it'll give us a good understanding of why we don't want it in app we just want app to call one container or one component and then go do all the business that you have to do in that particular file but right now let's just call in here so say return hello but in here we want to use something from react called use effect in addition we also want to use state so if i now just saying here um when this application you know gets mounted to the page as in you can see what's on the page we want to call our api immediately but we don't want to be blocking the ui so we still want we still want the ui to be interactive so what we're going to do to mitigate that issue is we're going to hold something in a value so we're going to say used and if you've not come across hooks in react just yet let's just say we want the story ids to be stored in this variable here so story ids and if i ever want to change story ids i'm going to have to use this one here so set story ids so you've got a value and you've got a setter which is essentially a function that you can pass data and we know this is coming back as an array because if i hit this here there's an example here you see the array but just for some sanity let's have a look there you are you got an array so i'm just going to say okay if nothing comes back or initialize this particular variable here story ids as soon as you this loads i want you to assign an empty array to it so for example if we don't have the data and we start looping over that and it's not an array we're going to get some sort of error and we don't want that so we're just going to say give me initialize that particular bit of data with an empty ray so just to recap we have a variable here that's going to be initialized to the empty array and if we ever want to change this we just call set story ids so this is where the magic comes in now so we've done the the work in this hack news api we've got this we're making a call out to the hack news api we're using axios so we want to call this in here and we can see that it's a named expert so we're going to have to use a named import to grab this from the hacking news api so let's go ahead and set imp and i'll say um what did i call this uh get story ids and we know we're gonna have to go outside the folder and we're gonna say go get me services uh let's just services um hn api serve that then we're gonna say use effect okay so this is where the big one comes in what exactly is use effect we've looked at use state where you can store values so like this is stored to this initial array to begin with but if somewhere in my render or somewhere in this use effect i want to update this value story ids i can call this and say um set story ids hello so there we are that will now be hello oops so let's just see what happens here so if i log out hello so if you want to call story ids you can just say story ids let's see what happens here cannot resolve i can use to module let's take a look what's going on uh services i can use api uh let's see services get story ids don't spell that right i did that seems right so let's have a look what's going on and this is what you're going to be running into so if you are a a new program and you you think these tutorials always go fine i see people programming um let me just get rid of that a second and you think you know how can the get through that so easily it's never the case uh stuff always goes wrong and i think it's best to keep somewhat of it in tutorials so set story ideas to hello so there we are we got hello there oh yeah so what happens if i wanted to change this so if i just get rid of this and i'll still you know uh print that out what do you think that's going to be it's just going to be an empty rear and you can let's have a look let's stringify this and there we are it's an empty rear so that allows us to have some sanity check so if i just bring back in import get story ids from services i can use api and then say for example i want to call this method now that we've put together we've done all the work in here i just want to call this now so i can just simply because it's a bit it's been imported up here i can just say guess story ids like sir but what we gotta do oops i'm putting that inside the uh well what say well that is just yet but i'll tell you in a second let's have a look bubble lord i cannot find services can't resolve services let's take a look so we've run into the same era as before so i'm thinking that it is well it's not very descriptive is it so we are doing expert const get story ids return result and we're getting that from the hack and use api so module not found cannot resolve in i can use tut so even though it's coming through here and it's all looking fine the module's fine so i don't know if this is a case of let me restart this start in it's taking its time that's fine so it works i don't know what the issue was there um so yeah we've got the story ids and uh if i let me log this out um because i want to make a few important notes about what's going on yeah so you see it says promise but you know i thought it was returning me my data you see the status is resolved the value and we've got a bunch of data in there from the api so there's 500 um ids in as you can see there but why is that happening well you see how we've stuck this async on here so any function that you stick in async on will always return a promise so now what we have to do we have to go back to app.js and say we can't just call this directly that like we just did then like a regular function we have to say okay once the data's there you see how it's giving me these options so it's saying attaches callbacks for the resolution and or rejection of the promise so i'm gonna say okay go get me those ids and then return me the result which will be a promise with the data held in there and we have to resolve that promise so we can say and to resolve it we can just say then and by saying then on this particular um return promise here because it's asynchronous remember it's asynchronous and the big no is like i just mentioned it always returns a promise so you say get story ids dot then i'm gonna say okay give me the data and this could be anything i could say lemons so once you have the lemons go ahead and set story ids and by calling set story ids here we're going to replace this empty initialized array with our 500 story ids how cool is that so let's take a look set story ids with lemons like i said you can call it anything well change it obviously but um you know boom what's going on here object not great that's perfect so when you do see this objects are not valid as react children we know it's well i know it's worked um and i'll show you why uh in a second and why that happens because you have to get used to reading these errors boom you see that so you initialize it you initialize it quick it's an empty rear and then it returns you all this data but you have some issues here right so this is saying it's giving me all the data back from axios and i don't want that so let me go back and say okay so we've got um well what we've got here we've got our lemons so we're getting the story ids and we're saying dot then now it's saying uh it will say here so on fulfills once you have the lemons uh you know you can return the lemons if you like but what i actually want to do you know i know the lemons are going to be there so i can just remove that so i'm going to say get me the story ids over here i'm going to call this i know it's asynchronous because i put asynchronous there thus being asynchronous it's going to always return me a promise and in there you'll have promised value which will be holding your data because we did it here we got the returned it once this is done go back so we're away in this context here so it's going to await this response then it's going to pop it into result and then we call it then we're going to say then give me the lemons set the story ids to lemons uh let's have a look what's going on here so uh we're getting all this data back so let me just take a quick look at this um you can inspect it so we've got all these story ids as you can see we've got 500 and they all we also get returned the uh the response and a few other things from the hacking news api but like i said we don't want those um basically what we want is a um a clean a clean array so let's have a look so we've got the result we're awaiting the result axios.get new story url then they're there so i don't know if you can see the error here what's not a particular error but it's kind of a clean up axios is re returning me something called data or i'm assigning it to data um oh in this case it actually is returning me dirty so you see there well i only want the data i don't want all this other stuff here like the content type the headers none of that none of that nonsense so a way to do this is i know that's called data because i just saw it in the console and i want to structure that out in a nice easy clean way to do this open up one of these one of these uh curly braces um i always forget the name then another curly brace or should i say bracket open up the bracket give it a curly brace and then you know basically what we've created is this and what that's saying is the structure me out data i only want data as in that particular value as you see now nice and clean and if you look into the the the uh dev tools all you've got in here is just all the um uh 500 top stories uh ids and if you call one of these you'll get the article not the article itself but you get like the title the link all that good stuff so let's go back so now we've got lemons and i've shown you you can call it anything let's replace that with data just so someone don't come in and think all right you know some some guy here is getting some lemons from a hacking news api which is a bit strange um so i want to just take a quick a a quick look now at um use effect and we'll start basically we'll start refactoring this putting it into its own container uh because this is far too hot the far too high up the reactory to be doing all this rerendering if you leave something in app that has accessories rerendering components down the line you don't be rerendering 500 components or all the components below so we're going to put it into something else um but now we've used effect you'll notice you've got this use effect function here that um return well it's saying okay i've got an anonymous function and go ahead and do this and people may be asking oh why haven't you got an async stuck on here because you know this is you know it's a network call well there's no reason to use an async here because what we're doing here is this is returning me a promise so it's still sat on this little queue called the micro task queue and uh once i resolve that it's going to get popped off that queue and get um whipped around the event loop and say okay put me back in and so there's no need to stick an async on there hopefully that makes sense because we've already done the async here we get return to promise all we've got to do then is just resolve it and that's what we've done there you can obviously put other stuff on there like um catch uh you could wrap this in a try catch or you could put an error on there whatever it may be but we're just using then we're just saying resolve this give me the data once data's here i'm gonna set it and that's it we're totally done with you that's it we're done uh but let's go back to this here so what are what is this empty array essentially in the shoe's effect like why is it just stuck around here can why can't it just be like this well this is a life cycle if if you were prior to you know uh hooks uh using react prior to hooks you'll know that you had life cycle methods in react and basically what this is saying it's saying okay uh when the component mounts uh do this um if i put in there um let's say for example we had a variable i was like story ids updated and what it just basically was true or false um we could keep a watch on this so i could put story ids updated in here and basically use effect will watch for this to change so if i passed maybe a set timeout so set timeout which i'd never do but um if i every 10 seconds even though this is never accurate in terms of the reading of the seconds it's basically saying do this for a minimum of that amount of seconds so if you have two thousand milliseconds it's saying do this for a minimum of two thousand milliseconds but let's say for example in here every two thousand milliseconds i you know did story ids updated equal to true um and then i'd you know eventually kept switching it between true and false and this use effect will see that and then it will be like okay well this story id is updated has changed i need to rerun this again and when it reruns that it will do a rerender and you know potentially we could have new story id so we could get new stories so we could have a live feed of new stories so all that does is with an empty array it's just going to run just the ones you stick something in there and it's going to watch that particular variable and if that variable changes it's going to rerender so you can run into an infinite loop here if you're not careful and i'll show you why so uh while whilst this is happening i'll just uh use effect here so let's just watch how it works you know if you want to learn react just uh or any language well javascript merely dump a bunch of console.logs in there and just see what's going on in the dev tools uh so let's have a look console.log use effect here you see you just run the once great right okay now let's run into an infinite loop um because we love infinite loops so i'm gonna stick story ids in there so this is going to run and it's going to be like okay well i'm going to set the story ids with data oops i'm going to set the story ids with dare and this is watching story ids so it's like okay well story ids have just changed i need to rerender this and when it gets here again it's going to rerender well it's going to set the story ids once more up here and then this is going to be like oh well story ids have changed again i need to re redo this function and just keep going round and round and round because once this is resolved we're gonna basically say set the story ids the use effect is watching the story ids and it's gonna come back in here keep rerendering and we'll show it uh i may crash my uh tab doing this but uh there you are look at that it's going crazy 25 it's just rerendering i think chrome should have stopped it no it doesn't i think firefox does though um so i need to check that out i'm gonna my laptop may set on fire um there we are perfect we're back to normal um yes knowing for not loops there but yeah that's how use effect works here's another way to what we're looking at later so we'll be looking at clean up and cleanup basically is when you want to just clean up anything some sort of subscription or something like a layout effects so if you're messing with the layout like a um you call in a scroller you don't want to be rerendering um all the time and because there's implications to that but i'll explain why there but now now we've got the um uh story ids i want to refactor this out and say okay give me a container and i'm going to call this container oops not a new folder i want to call this container um what we're going to call it uh well let's just let's just do it in plain english it's a story's container let's just do stories container um i think i think that's as simple as you can get with that to be honest uh so let's grab this off here stories we're gonna need react um we've got to go up one more for that and we're going to need we're going to basically need this all right so if i just put this right back to normal um come on you can do this oops there we are that looks good to me uh we'll just bring that in oops just bring that in there that looks good rename this uh in here to uh star is container star is container um stringify looks good uh and then you know what i'm gonna render that story concerner stories container and where did we put it well we put it in containers um because it's next to it let's go stories container soon as though this is a component you know what render that component there we are perfect nice refactor um so now we have a our story storage container and we've got all the ids what we need to do now is create um well essentially we want to be able to pass an id up to the hack news api and we're going to be doing in here so let's do xbox const and instead of get story ids let's go set get story and this is an asynchronous function that takes in a story id and then we're going to say const result pretty much the same as before await axios dot get and we're going to give it a template string and we're going to say story url which is this here so we're going to say okay give me this and then just item for on on the end which is good and then we're going to say plus actually not plus i'm living in the old world of javascript here um let's just uh actually we could do a plus uh story id um there's other ways to do it template strings but we'll just we'll do that for now and said.json and then of course we have to resolve this so let's do dot then and you can see how the uh the intellisense is telling me you're gonna have to resolve this we'll do the same as we did before let's just structured data out of there and once we've got the data we're gonna say give me the dare return the data that's all we're doing and you know what we need to return this result because now this is a promise that gets returned we're going to have to you know let's test it um what we've got here it's called get star is um let's see we could actually just do uh we'll say if stories ids and story ids is dot length is greater than zero because firstly it's not going to be there actually let me just show you the implications of passing an id right up there let's grab this one um what do we expect it to be let's switch out that id so expect it to be i don't know what that is um but anyways let's pass it this idea uh so yeah we're passing it this id we can just actually pass it down like that and now let's resolve it um and always say console.log there looks good to me boom there it is there's the story and you see it matches up with this perfect so we know that works which is great so we've basically just built a service in here that can call um the hacking users api and that's all it is that's all that is for the api uh so pretty simple right really nice we can get data from elsewhere and uh we obviously have to build on top of this so at some point in time we're gonna have to build a uh a story so let's take a look now what else we can start working on we've got our story ids and we've also got our stories well we can get a story which is which is really good so let's go ahead and quickly take a look so if we just hop back um let's have a look we've got the story ids so let me see here um i guess what we want to do from this point uh let's see um we want to start building out the well the app's gone so what components let's create a story.js component and here import react and then let's go ahead and do expo const story and then we'll say return so let's see we've got the return um if we just dump something in here actually let's pull in um use the use effect let's see and then we'll do the standard stuff use effect we know how that works now what we do want is we want uh get story and in that get story we want to get from services and i can use api um let's see so story returns and we'll just say i am a story so look at this save that story container so in story container what we're going to be doing is we're going to be looping over these stories so we've got 500 um so let's just uh loop over these and we'll do uh let's just story ids dart map and what's there for each story id so when we're mapping over it's going to give us a story id again this could be anything this could be lemon piece or whatever it may be but let's just call it story id because that makes sense and then we'll say give me what should we give me give me the story component let's import that and that's a story so it's a component and it's our story component and that lives in components and we're importing this as a named input because we exploit it as a named export so we have to do as a named input so let's have a look here so this let's pass story id as a prop so for every story component that gets rendered on the page we're going to pass the story id and this is one of those let's have a look i'm sorry i'm a story i'm a story cool but what this story id is gonna be if we just serve this and go back and pass this in here we can say story id let's just have a look what that story ideas there we are perfect so we get the story id and that means we can now use that story id to make a call over to the hacking news api again to get the story information back and if you're coming from two traditional backgrounds where you've got parameters and um or well arguments so you can pass an argument into story you would probably see something like this but seeing as though this is not a function well in some ways it's a functional component which it actually is but we cannot use the parameter as such we have to the structure that out like so by giving curly brackets and the reason for this is uh in react um so let's have a look so we get story ideas here story ideas come through um let's see what they were coming through ah okay so the story id is sir justin.stringify did i crush it because that's rendering now 500 components uh objects are not valid as react children object with key story id there we are so we've got the story ids but let's say for example sick we just call this props and we don't just structure anything out of there and i'll just remove this um and we'll do console.log not console.log i want to be able to see it on the page so i'll just say stringify props let's take a look there we are you see here so basically all we're doing is just structuring our story id which will give us this so let's put that back to normal and you'll see that pattern everywhere in react it's it basically saves you from having to do props dot story id which is uh quite longwinded um story id so now what we want to do is we want to make a call and seeing as though we've already built this get story we're just going to pretty much follow the same method we've done here where we're doing and get story ids and then place it into story ids but instead we're going to say ustear and within you state what we're going to do we're going to call this story let's do that once more used story set story and the initial story we're just going to say it's an empty object so within our use effect we can come down here and we can say get story from in here which will be this and then we can pass it the story id which is basically just this uh prop that gets passed down and then we'll resolve this asynchronous function and said data and sometimes on this api i've seen that the dot com with urls so i'm just going to say okay once we've got the data once it's been resolved and you know you've got the data in here i'm not just going to return it i'm going to say and and to make sure that we have a data.url and if we do have a data.url we're going to set story to data and that's pretty much it and you don't have to watch for a story id changing so in this case i'm just going to disable that eslint rule because the the fact of the matter is here is um this story id even even though it's uh it's kind of component based where we only need it once we need this story id once and that's pretty much it um we don't expect it to change maybe if there's comments on there um but in this case it's not but if there's comments on there we could watch the comments changing and then we'll recall the api to get updated comments for example but in this case we don't so we're not going to watch for anything we're just going to say as soon as this component mounts do this which gets the story and we pass it starter id then it gets resolves the the function gives us data and then we're going to do a check for the url and then if all is good at that point set the story um so now let's have a look so we should have a story so let's just json.stringify story and it won't be there immediately let's take a look it won't be there immediately but there you see them loading in perfect we've got an empty one here which we can resolve later by just making sure that uh we filter our empty ones and another one there we see how the stories come in and there's quite a lot of them there we go perfect so now we've jumped back in here we can start just building up this component so we can just say if there's a story so this will get rid of that you know empty object and well this bit will and story.url then go ahead and just say give it a p tag and just say story. story.title and we want to execute this as javascript we don't just want to give it some p tags so that's why i'm just wrapping in these curly braces story.title and we'll put this actually in href because we want the url so it says story.url and then from here or now we what else do we have um we have story.buy um so we can set by uh was it story.time we can come and fix that let it post it and we'll just say that i got posted time um i don't believe we have much more so we can just take a look at that right now um let's see let's see what we've done wrong oh always have to return something in the render so even in this case i'm just going to return null which is fine we said bye yeah there we are there and that's what we was looking for that's how simple is to make the api calls and we get this complaint in here so each child in the list must have a unique key prop so we can fix that by going into story.container because that's where it's coming from stories container grab this story id because we know that's never going to change and this is how react checks for updates as well to see what should be updated and in what particular position so if you look at reconciliation within react there's a good post on the react documentation about how reconciliation works and why the key prop is very valuable so if this is changing don't put it in the key so if you're using something like math.random it's a it's a bad thing to use because when it's looking for changes it's like oh the story id has changed even though probably the component data hasn't but it will re um refresh all the stuff in there and the positioning for example on a list could be wrong but nevertheless i don't digress into that just have a look as to how that works so we've got our stories now there's no null ones which is good uh we don't need to get story in here for the story container um let's have a look where we're at now we don't have any hooks mappers um one thing i do want to create is um something to handle what comes back from the api so if we just take a quick look as to so what's in just remove this quickly for one second and actually remove all that no nope uh json.stringify and we'll say story because it's instead now so i'm just logging out what's inside i just want to see what's in there and you see how we've got descendants we have whoops this is quite a lot you know we've got descendants okay let's just use this as a uh example type we don't care about the type we don't care about the descendants uh the score so we're going to get rid of that so when this comes back from here we don't want to do it at this particular level we'll do it in get story but let's take a look in get story and what we're going to do we want some sort of function that selects the fields nicely so we'll say select uh fields and we'll just wrap that and it's going to say okay well it's not defined okay i understand that so if we're going to utils we could just call this select fields.js now within selectfields.js let's just do export const and then we'll call this select fields and then we'll give it a function that the structures our id by url time title and then we'll say okay if this stuff's you know if it comes in and there's uh there's an occurrence that this potentially could be empty so for example let me just finish this function let's say return mean object with id by url time title and there we go so we've got select fields so that should just bring us back this stuff now we shouldn't have like descendants or scores or anything like that um but if we pass something in here that just happens to be like undefined let's uh default it to an empty object so that's that file done select fields we need to import it in here now so just set imp select fields from utils select fields perfect let's go back and we can actually test this by just heading out that wasn't good we can just test this by um coming in here json.string fight and let's see if we have the descendants as far as i can tell there's no descendants in there which is good so i'll put that back to normal we should have the stories going in um let's see yes we do perfect okay so we've got the story container we've got the oh cannot destructure id of undefined or null where's this happening select fields so we have to make sure that when we're actually passing into that select fields that we're not getting anything that's potentially going to be null so if we open up the hack and use api we'll say okay once you've got the data uh we're gonna set data and which basically says okay if it's not null and it's true for value go ahead and pass it into there and then we will run into that issue that's the hacking news api part finished we want to implement um infinite scrolling test but we're going to look at that a bit later down the line but one thing i want to show you right now is um well one thing i want to work on right now i think this looks quite boring so i want to give it a few styles and you know just make it a bit nicer so let's go ahead and add in styled components because that's what we're going to be working with we're not going to go too complex as i said at the start of this tutorial let's add that but um we're going to be looking at how you can just manage props and stuff um and changeability within style components uh but yeah we'll see we'll see if uh how how it goes i do like um you know sass so not fully switched on star components just yet but we'll see uh so we've got style components now so we can actually let's start doing the um see if we got styles folder yes we do so let's call this story styles dot js and within here let's just say input styled from style components and do export const and the way style components work is it gives you back like a component somewhat of a wrapper but it's more of a component so if you've got let's say we call this story wrapper and we'll say styles because you always have to give it this um con styled which is the interface so we'll say style dot and we'll give it like the um semantic markup so we're gonna say section and then template tags and then just do whatever you want in here so we'll say okay padding top which is 10. uh margin bottom i'm going to need a margin but i'm on the story wrapper border top 1px solid and we've got cccc i'm gonna say okay first of type i know we're gonna probably have issues with when we've got a title we don't want a border on the top one likewise last of type let's remove that we'll say margin bottom zero padding bottom zero that looks good to me so let's import that and just see how it looks one thing i want to do story uh stories container i think in here we need some sort of um i don't know maybe some titles as to what's going on right now i'm just gonna call it so we've got the map right now i'm going to call it hacking news api but like i said in the next tutorial after this one we're going to be using graphql and grabbing a bunch of different news apis and we can and that'll be really interesting to see how we can use graphql as the the man in there and we can create services around that so let's just give this a fragment which allows us to render siblings next to each other and don't get confused by this it's just saying okay we can render two components next to each other like component one component two but you cannot pass any props to this fragment if you want that you want the react.fragment1 and then you can pass like a key value but let's just uh let's not digress we'll give it a fragment uh i'll chuck this in as some javascript and then also what i want to do here is um i'll just give this h1 that says hacker news stories uh let's see where we're at so the hacking news stories and then let's see we have the map where what's this winging up unterminated json contents uh no let's see i've lot i've gone into bracket hell oh no stop there we are uh this is what so what's this saying here expected uh unreachable card uh what's unreachable oh the lintzer is not serving me today there we are so let's have a look hacking new stories and there they are loading in perfect so let's go ahead and grab our styles it's called stor story wrapper in this case so what we want to do now is uh we want to go ahead and import this also input story wrapper from styles story styles and down here let's just basically rebuild a bit of this so we know we're going to be testing this later on so let's say story wrapper and we'll give it a test id of story just to make sure it's there starter wrapper and let's just see where we've got we've got to with that come on okay so we've got a bit of padding you'll see it's been injected you see it gives it a class a class name which is nice and gives it some weird class name but it's quite cool how it does that so let's go back into our story styles i don't know if we want to do too much more in here i know we've got actual we do have uh two other things to do we've got a title and we also have the meta so like time and buy so let's do xbox const and we'll say story title and within that title we just want some fairly generic but we'll say style.h1 again we're using this semantic tag inside.h1.section you could in here do you know div or whatever it may be and then let's margin bottom 5px let's just pull this up here size 18 px line height 1.8 give it a margin of zero text decoration none give it a color of two two two two is it two two two e two e two c maybe is that the one background color four eight dc 3d text decoration none and then we've got the meta in here too so also we'll go pretty much of with the same routine so story meta we've got style.div um let's have a look we want font style italic so when you've got stuff stuff like the by uh the author which is going to make that italic and since we've give it we'll give it a span or say which is not the first child but before that child give me some content of oh let me just go grab the bullet snip it from my snippets content um snip its total box there we are let me put that on a keyboard shot cause i use it all the time margin bottom margin right margin left uh you could actually just do for this you could probably for shorthand css you could do zero so i'll target top and bottom this will target left and right and then we'll say story we're gonna use bem still story bold and we're bold uh i think we should be good but we can test this i normally just write out a bunch of css and test it after and we'll say it's going to have a meta element which will be our spans and then we'll say font went bold and this is probably the furthest we're going to get in terms of complexity with style components but we'll just say okay if there's a color and we pass some props to that we'll say props dot color so if that exists or you're gonna give it a red color and that's one of the uh aspects of style components you can pass props in so if i was to use story element story meta element and passing color um i guess you could just pass uh ffff for white that would give it the white color if not it would just if i didn't pass it in it give it red so we can have a look so the star components there i'll move the story just one tab over um so we've got in here now we've got story title so let's take this and pretty much what we're going to do we're just going to start replacing what we've already got so let's do story title and we'd no longer need p tags in here get rid of those that looks good to me and we've got the story wrapper so let's just say okay we're already importing from story style so let's just go back and say give me the story title two give me the story meta give me the story element so now we've got we was well basically to target the buy so let's go down here we'll say story meta and because we said we wanted to target a span we'll say store it by give it a span uh probably going to date a test id on these as well so the test id equals story by and then i say story meta element because that's what we used and again well not again but as i mentioned earlier we can pass in prop so so give this a color of black and that's good enough for me and we'll just say bye and then we'll say story dot bye that looks nice that does look nice and you know what just for the sake of brevity i guess in this particular point so we've got story meta let's copy this we'll say story time story time and we'll set instead of time we'll set posted so we'll come to fixing that later down the line as to how we can get some nice dates to say okay this got posted you know two two hours ago or 20 minutes ago whatever it may be and then we'll say story.time so if there's a time then say map time and i know there's always going to be a time but on that first render of react because it'll render and say the stories aren't there just yet or there's no story in that component because it's going to run through this even though it's going to check for the url so we should get that so we should just be able to call map time which will allow us in the future to give it that nice url but if you don't me meta get it here with the story most likely you're going to get some errors in here because it's going to be trying to access properties at certain op positions in objects that don't exist or if you're calling functions like here and there's no a quality check before it's going to call that function pass something in and maybe that function blows up down the line so just just be aware of that um going going forward so let's see what we've got here that looks good nice and clean after sir um i don't know what people's thoughts are on new lines for stuff like this i sometimes do like to split up i don't know how much i should split up by i mean that does look quite nice but also does that i think i'll keep it like that for now so anyways let's go ahead and take a look what's going on do we have any nice stories oh somewhat somewhat it's not too bad it's not too bad i'll um i'll take that i'll take that for now so it looks like now because the stories are going all across the page we're gonna have to create something that's gonna allow us to lock in that story container so let's take a look at the story container i did think i added a space there but uh let's take a look i thought i added one here uh clearly not let's see um let's i i thought you could use a template literal so let's just uh um let's see let me get rid of this um one thing you could do here i guess is i guess we could push out that we could use a margin but let me use this particular method to give it a bit of space in there hmm let's see i suspect is there i was looking at the posted one so we need to go back actually um put that back story.time we're going to the time so we have a class name on there do we am i even tagging story.time because if if not i could probably get rid of that um we don't need that class name right now story.buy because we're using star components we can actually just target the semantic elements instead so let's just get rid of that too um although i guess in here so we've got we've got two spans story by story time um let's take a look at the first one so the buy we're going to be expecting we're going to be expecting that it comes in and yeah so so that looks good to me we've got the italics let's take a look here see i was quite slow and jerking a bit because it's loading 500 stories in the ui struggling so we're going to take a look at how we can fix that within an infinite scroll it's not a good user experience right now so yeah so we've got this one on italic so i believe they're both on italic though so let's have a look so if we're going to story styles yes uh which is we're gonna say spam not the first type let's say spam first child so margin right 10 px let's just see if we can get a bit of space in between that i guess one thing we could do is put like a bullet in between there or just something to split that up let's have a look did that not so we're saying we're we're in story meta which is here this says span oops spun first child so we want to target this one here so span oh we don't need that um let's uh spam first child there we are we've got some nice and some nice padding on there so let's let's go ahead and take a look now at styles and what we want to do in styles now is uh i kind of want to lock this container um so story stories container styles maybe we can come up with a better name for that down the line so let's import styles and then we're going to be importing create global style from style components reason we want to do that is because i want to insert something into the body so we need to use create global style so if i do export const global style i'll say create global style and i'm just gonna for brevity sick post in my default config for most websites which is just this so just to reset the box size in setting the margin setting a color and then i guess what we want at this point uh for global styles i think that's pretty much it but we can inject that component now but um in terms of locking the container we've gotta say stories container wrapper style dot min down here remove that and then we'll say max width 1140 padding top and bottom 20 left and right 15 then margin auto sort of go in the middle and that's our stories container styles done so we can import that now so let's go up here and what we're going to do here is because it's our container we want to input what we just got there was um so story style storage container it's fine story container style so we want global style and story container wrapper so grab that and we'll just pass them in there like sir and we'll say from styles and then story container styles perfect and what we can do here now we can just dump in this as a component so global styles and then also we want the wrapper so we can just uh give that a date of test id to make sure the wrapper comes in so we'll said do we get a story's container when we're going to test this if so brilliant uh let's have a look i'll just see if we've got a nice there we are it's in the middle it's loading it's going to you know making those huge amounts of api calls so i hope um the hacking news api doesn't like shut me off at some point or after this video there'll be a lot of requests i imagine to api uh so let's just uh did we have the title uh the title looks fine right now so that's good yeah packing news there we are personally and brilliant so yeah we've done well that's that's pretty much our styles at this point so their style components covered as you can see it's quite jerky um and if you did you know run this in reacts the components you've got a bunch of stuff going on in here with different keys and if you you know run the uh profiler you can see it's going to take a little bit of time let's see stop profiling cause it's probably going crazy at this point and you can see we've got 7.7 milliseconds that's most likely star components taking up that particular particular performance hit there so story.key 9.2 milliseconds uh 0.9 33.1 so you can see all these components being rendered here and i only managed to get 308 uh let's have a look rank chart so this context.consumer i imagine that's a style component what's um doing its magic so i'm not too sold on style components at the minute if someone can uh you know give me a good reason to use them the only thing that i well one of the things that i'm i'm not too sure about is calling them as components because i imagine you could get a lot of components just laying around that styles unless you do what i've done here where you just have a wrapper and then target say the h1 selecting story you know i'm targeting the air tag here for the link i'm targeting the spans it could get quite crazy so um yeah i mean if there's a css expert help there or style components expert feel free to jump in the comments and let me know and you know find me on twitter which is in the description let's have a conversation and i want to be sold on style components um anyways so we've got all our styles we've got a fairly good looking api at this point one api application that calls an api with two different routes so we're calling stories id and then we're calling we're requesting for a story by that particular id so if we just recap where we're at we've got a container that houses the story ids and then when the story ids come in and they've rendered to the page we call the story component by using the map and the map's going to go over about 500 times if that's what comes through but we do mitigate out some um story ids that uh actually we don't mean to get out any story id so we get 500 stories being called um what we do do what we do do what we do happen to go ahead and do is um we when a component mounts we you know set the story and the story doesn't happen to be in there we just return null um which i find is fa you know more than adequate um but yeah if there's if you do feel there's a there's a better way to do this but i mean the hacking news api isn't great in the sense that you're getting 500 requests coming back be nice to um you know be able to put page pagination in there so i'll be like give me the you know the first 20 i'll give me this next 20. but we're going to look at building that in ourselves to help the performance of the application so we will be looking at stuff like infinite scroll very soon one thing i wanted to do is um create this mapper so we was in uh we were in story.js and i said down here we want to map the time so instead of giving us this like unique time stamp we wanted to say like two minutes ago or five minutes ago you know yesterday two hours ago whatever it may be um and you can find these online these i've called it a mapper um but you know there's different names for it essentially all it is is i'm just gonna say it's a function that passes in the timestamp and then it will return me different scenarios based on you know different intervals that are going on so if we set seconds and we'll say math.floor um and don't get too hooked up on this sort of stuff uh this is a function i've had laying around for a long time and used it uh many times but it's not react specific saucer um and that day it needs to be called with uh some promise uh we'll say let interval math.floor um and then there's a bunch a bunch of different um you know divisions and additions going on in here so instead of uh borrowing you into with this uh this maths that's going on i'm just gonna paste that in there from one of my snippets over my keyboard which just basically goes ahead and figure out you know is it years ago is it months ago days ago how's it go it's not specific to react so i don't really want to be teaching this it's just a map function that gives you some nice stats so if we just put that in here so we'll say map time map time so it's going to run that function over that story dot time which is good so set input and we'll say map time from mappers map time and it'll give us a nice dare so let's have a look and again i'm hit there two minutes ago three minutes ago whatever it may be but what's quite crazy here is it's hitting that api you know all the time so it's hitting that 500 times so we have to slow that down um but yeah let's take a look uh where we at now we do need a space actually i just spied here so uh where it says posted so where's posted live so it lives in story okay so posted is down yeah there is um so yeah let's just give it um an empty template string see if that will fix it there we are that does it nice um but yeah okay so we've got the story uh component so it's a nice little learning project this you've got one component that goes off and calls an api you've got a container that goes off and calls an api that is it it is a component but don't don't get this mixed up with saying oh this is a container it is just a wrapper so that's my words this is not react specific it's me just saying this is a component container that wraps a bunch of stories so um i mean let's have a look here what we've got going on we've got styles we've got services so containers mappers selectors services it's just all made up words um just like component but um these are more what i like to work with so like you know you've got your mappers you've got selectors actually in this case uh seen as a a util i guess a util could be put in as a selector so we'll move that and hopefully vs codes smart enough to figure that out here it is look it's found it it's giving me this and it said it said select field is now a selector can you save this for me sure i'll save that um and it should still work perfect that's brilliant okay okay so now i think it's time that we maybe started doing the infinite scroll so let's have a look so as you can see we've got a bunch of stories here and it takes a little bit of time to load because it's requesting 500 and that will be hitting the micro task queue so if we go ahead now and say we've got constants we've got any components right now what we need to create and i don't want you to get too hooked up on this but we're going to create a hook called use in bennett infinite scroll dot js and with the infinite scroll we're just going to do the standard stuff input react then we're going to go ahead and say actually we don't need react for this we just need a few methods from yeah so you you stir use effect that looks good and come down here we need some constants now so in our constants file let's go ahead and just set index.js and essentially all we need in here is two constants export cons max stories and we're gonna get we know we're gonna get 500 so let's just put 500 in there and then story increment is equal to and if we go back into the infinite scroll what we want to do we want to import story increments max stories from constants and then i'm going to come down here export const use infinite scroll this doesn't have to be hook but i'm in the mode of creating hooks at the moment so uh i thought i'd show you how to do these and since this is a tutorial i may as well take the opportunity to show you how to use custom hooks so we're going to say loading set loading equal false we're going to initialize the state with false and then we're going to do another use state so use step we'll say count and then set counts and then use the story increment so we're going to say the count starts at 30 so say if we do something javascript like uh you know if we use slice slice from 0 to 30 when the user scrolls got from 30 to 60 and you oh we could say go to zero or 60 because we want to display all the stories we don't want to get rid of the ones the other ones so we could just keep doing this until we hit 500. so what we want to do now is we want to do something create a method essentially so what ultimately what we're going to do here is just say handle scroll and then we're going to say uh we need to get the window so if i just log out window here should be able to access the window directly and react so look go into our console in dev tools we have to import this actually so if we go into it should be let me get rid of that don't need that don't need that do not need that we don't go into stories container then we do imp we should say um use infinite scroll from hooks use infinite scroll and then if we um let's see if we just go ahead and let's have a look where i the structure i'll count because we're going to return we've got a return count but it's not there at the moment so let's just say um test and we'll call that method it's never defined okay we'll call handle scroll i just want to see what i want to show you what window returns here here we are access to the window so there's a bunch of stuff on here um that we can access but i don't want to confuse you too much as to you know what's what all this stuff is we could leave that for another tutorial but you've got stuff like local storage um animations the navigator uh let's have a look on key down all these dom based actions the origin the outer height the outer width but more specifically what we're looking for you have inner height should be in here somewhere in a height and then we'll say well that's what we're looking for now and then um myself have a look what's in document so even though we've got the inner height what we want to log out we should be able to look for document element and then within document element there should be scroll top somewhere there we are and if you used to reload that window they should update but what we want to do we want to do a calculation and say okay in a height plus the um scroll top is not equal to the offset so let's have a look for the offset should be in here let's have a look there we are offset height so we want to make sure it's not bigger than that and right now i can see it's pretty crazy um if if it's uh say if it is bigger than that then we're going to set attributes to say if it's loading or if it's not loading and then also we don't want to be hitting a refresh with react all the time so something we can do is put a concept on this function called a d bounce to make sure if i scroll i can't just keep scrolling and scrolling and scrolling when i do hit a scroll it locks my scroller for 500 milliseconds or a thousand milliseconds whatever it may be just to make the experience a bit better so let's take a look now i'll just go back in here we can uh delete that delete that um i'll just delete that for a second what we're going to do in here we're going to you know do that conditional check in here to make sure that we can calculate the height correctly and then we can do certain conditions based around the height but please do not get too hung up on this this is basically just checking if you've scrolled and then what we're going to do we're going to do some react type stuff right okay as mentioned don't get hung up on this but i should say okay if window dot inner height plus document.document element dot scroll top is not equal to the document.document element dot off set height or if it's loading if that condition happens to be true for example uh well depending on that condition comes back ours we can just return false and then else set loading true and now save that cool that's good of pulling use effect and what we're going to do we use effects we're going to have two of these in here two listeners so if it's not loading just return out of here because we don't want to be going ahead and doing all the set loading unlocking the count we'll say if count plus story increments is greater than or equal to max stories then set count max stories and what that's saying is basically if we have a count of 480 plus the story increment which is 30 that equals 510 and we don't want to get let the users keep scrolling because we've already exceeded the max stories right so we're just going to set the count to 500 and you know quit the scrolling there else if they if they are below 500 stories let's just say count so we could start off with 30 they scroll once on the page we're going to add store increment which is 30 so you'd have initial count plus another then it hit 60 and if the user scrolls again because the count's changed we'd hit 90. and we do that till we get to 500 stories and whilst that's all going on just say set loading false so that we can continue on and we're going to keep a watch with our use effect on loading and we're going to do one more use effects and i'm doing two separate use effects because i don't want to be watching actually you know what i don't care about counting there so let me get rid of disable that and i should just add the exhaustive dependencies i want another use effect because i don't want to do anything in here i just want it to run just at once so we're going to do the component did mount this is rewatching loading all the time for a change value this one is just going to do it once so i'm going to say window.add event listener and i want it to listen for the scroll and then handle the scroll let's just do this and one important aspect here is we have to sort of unsubscribe from this event listener and the way to do this to do a clean up in our use effect and react is return a function that does window dot remove event listener and we'll say remove the scroll and then remove that method too and that's saying okay we're going to add the event listener and then once this use effects done go ahead and just remove this listener because we don't want these to be hanging around and creating multiple listeners or whatever it may be we just want to do a quick cleanup in here and after all of this we're just going to say return count so we should be able to use this now uh it should be in a workable state but there's still some stuff that has to be done to it so i should be able to grab this and say const accounts equals use infinite scroll and what we want to do down here even though we've done the map what we want to do now is we want to set dot slice we'll start at zero and then go with the count so for example if the count so user comes on the page it's going to be 0 and 30. user scrolls is going to be 0 60 user scrolls again 090 user scrolls again 120 and so on and that's what's going to happen but then you're probably saying to me now but it's going to rerender a bunch of these components out already on the page it's going to rerender them for no particular reason like that's bad right yeah we don't want to be rerendering these stories all the time so there's a perfect solution in react for this and what we're going to do we're going to pull that in from up here and it's called use memo i don't want to implement this right away actually it's called memo what am i talking about i don't want to use this right away because i want to show you why this is very important so let's save all this let's have a look see if we've got a working page so you see the scroll bars better and it seems to be broken so what's going on so it doesn't seem to be scrolling maybe there's something wrong in my user use infinite scroll uh hook so what we got here we got the loading let's debug this together she's gonna be doing a lot of debugging um go say count that's right we're gonna handle the story so we're gonna say window plus document element is not equal to the offset height or loading return false that was good to me and we're going to say set loading and what we're missing here we've got another use effect that's saying if it's not loading return if count plus story increment is greater than set count set count plus star increment max star is set loading false we're watching for loading we have a use effect that adds an event listener of scroll i'm going to say use this method for a handle scroll so when so when we're listening and this happens we're going to uh call that function and we're going to do return window dot event listener scroll handle scroll so i think i've spotted the bug but i just want to uh go ahead and keep debugging this a bit more just so we can get in the uh because it's never smooth sailing right we we do want to uh keep track of what's going on um let's see counts 30 counts now 60 and that's all it does it only goes to 60. very strange does it go any further it only does one scroll and i'm guessing so i've pulled in news so we don't have to watch the count because what what's going to happen is um it should refresh each time so even though we've got those stories on scroll it's going to fire back as if the count has changed so this count will just update here use effect okay so let's take a quick look once more in here the use infinite scroll return seems fine for picking up the event listener we're watching the loading um i i'm gonna take a guess that this is not working simply because either it's something to do with our dbounce or it's something to do with a scott story container so as you see it knows counts updated so like count in here so for example where it says count here so if it's not loading go ahead if count plus star increment is greater than or not set story set false loading should be up here um so yeah it does look okay i don't know if anyone spotted this just yet um i think i know what it is um so i think i know what this issue is it comes down to and this is one i'd actually like to leave with you guys if you want to do some work on this after if you've zoomed in the offset seems to be wrong if i zoom out i can hit the count ignore this message at the minute we'll use a clean up properly you see all the counts updating 60 90 120 150 we should be able to get to 500 that'll stop us the count should hit 500. we see i can just keep scrolling and then it kind of stops and it requests whilst it's requesting 420 and it's a bit jerky it's not the best experience that's why we're going to implement a d bounce 500 and and that's it what let me scroll anymore perfect um so yeah let's have a look now implementing we don't need counting there anymore we don't need it there because we're not going to be watching count count should just update here so when this story container goes ahead and does its work and gets to 500 it'll look through here and it'll say okay well infinite scroll has changed this in here has changed so if we're watching count we're actually watching counting here but if loading is being changed that means count the counts changed so if loading does change which is in this year's effect here then what we're going to do go change the count and we can update the count here so let's take a look so what we can do actually you know what i'm just going to put the count uh let me let me put it back in here a second i'm just going to leave it there so i can debug you can actually put it in there um yeah so what we need now okay that's good what we need now is a dbouncer open up your explorer and it should be utilities folder in here so let's have a look we're gonna drop in here something called the bounce.js and this is another thing i don't want you to get hung up on but let's create a function called dbounce and it's going to take a function it's going to take away it it's going to take an immediate and then it's going to take an args and it may be a bit confusing i was just thinking about this that why is this updating like why is this stories content updating and getting a new count each time well i'll show you in the profiler um in the dev tools as to why this gets updated so you can see it visually because there's nothing in here if i got rid of counter sir well you need to run this use effect apart from this infinite scroll obviously but this use effect here it's like well nothing's in here so why should i update this component well i'll show you shortly it's better to visually see it as opposed to me explaining it let's just do let timeout will return a cleanup function that says const contact this cons call now immediate and there's no timeout constellator time out equals null i know i've mentioned it plenty of times but i'm you know i'm trying to teach as much react as possible here um so i don't really want to get hung up on just an infinite scroll um if you are interested feel free to drop some comments and we can talk more about this um or you can find me on twitter at carl hadwin i should set a timeout so i say later where and then if call now function dot apply context args and that should be okay oh set timeout that should be all right so let's close up and the way to apply that function is well what we want to do we want to apply in our use infinite scroll wherever that's gone um so we want to apply it when apply it here so when handle scroll gets called we want to wrap it in um a d bounce so we're going to say i need to import actually import d bounds from utils d bounce and we want to wrap the entire function so if that this bit here actually this bit this bit all of them is yeah it's this bit so we want to wrap this handle scroll in d bounce and then we're going to do the dbound see what's going on in here and then you know if we get get the you know the green light go ahead do the handle scroll if not you know wait 100 milliseconds let's put this 500 and uh yeah basically that's it for use infinite scroll and uh it should just work now we've got the infinite scroll it should give us a nice d bounce sort of look there is it's locked to the scroller for 500 milliseconds and feel free to put that to whatever you like whatever you feel is the better user experience um so we have select fields we have a bunch of stuff going on here i don't know if it's at this point because we have a functional app at this point maybe it's uh do we have fixtures in here no i don't uh maybe it's worth let me create a folder close all these folders down i'm just going to create a fixtures folder and the reason we're creating the fixtures folder is because we're going to start preparing for tests or testing so if we just go ahead and in our fixtures well we can just create an index.js index.js and what this does let's just create a singular story so do export const singular stories because we don't want to be hitting the hacking news api all the time especially when we're running tests right um so let's just say ids one time i'll let me grab a unix timestamp um yeah we don't be hitting this all the time so the reason for that is we're just going to run the test against this tarnish google responds this is one of the articles i saw url uh something uh something calm new hacking news tut um yeah we're gonna be running the test against the live site um so it's just uh export cons story ids and you could go ahead and check out the uh you know the infinite scroll but uh i don't feel it's necessary if we can manually test it and um just say an empty story would be all this it was just so undefined so id time title url grab these boom that looks good so we've got a fixture that we're going to import into our tests so do we have a testing folder we do not actually create a new folder underscore underscore tests uh firstly what we're going to do um actually you know what there's a there's quite a few things to test here so what i actually want to test we're going to test the application like kind of endtoend ish the hacking news api so i can use service which is this we're going to test the story container storage container and then we're going to test the component which is stories itself so let's take a look at that and then we'll do a few tests just to get some confidence in our application it is obviously working but um there is a few things that we can test and you know to get confidence whether it be this is going through a shared code based or it's going through a pipeline we want it to be passing tests um so yeah let's take a look at that uh and we'll jump in we're going to write probably three or four tests we're going to be using react testing library um and there's all sorts of nice stuff you can do here right so i've left you a project i'm going to leave your project after the test is done i can go ahead and pull in different apis you can test it differently you can remove the infinite scroll you can modify the infinite scroll and then once all this once this video is a released or two from now you'll see the second video which will be the graphql implementation hooked up to this and this will go from hacker news application to a news reader the news reader will read multiple apis and then we'll modify and adapt certain data that can be returned to our front end so what we're going to do here i'm going to just modify the screen a little hopefully everybody can see this i'm just going to throw my terminal in here and i'm going to close that just so you guys and girls can see what's going on um close that close that and what we're gonna do this i don't i'm trying to think which test might be easy to break in first so we've got the story the stone storage container you know what let's jump right in head first let's go ahead do tests app.spec.js and what we're going to do in here import react oops input react and we need to import act and act now um react dom test utils actually i will explain act right now let me let me do in a second it's basically asynchronous rendering so instead of well yeah okay let me explain in a second you'll see you'll see it better we need to input all this stuff that we're using because we do want to mock this out and when i'm saying mocking it's like giving it some sort of fake response because we don't either we don't need to test this particular bit uh that well or we just want some empty components because we're not focusing on testing and testing them always simply like if it's axios we don't want to be hitting an api right so um there we are that looks good and we need to bring in the infinite scroll uh use infinite scroll from hooks use infinite scroll and let's have a look story increment we can bring that into i guess increment uh that was in constants wasn't it that was good okay we're gonna say this is react testing library right here so i said before each can i make that bit just a tad smaller um that seems okay for now i'll just uh pull it over there for now and we'll keep running these tests we'll go set before each this is before each test do a cleanup and by saying that it's cleaning up the dom which for me oh actually you know what one crucial thing i missed i forgot to import the testing library uh clean up generally i'll do a render and clean up i'll pull those in and maybe you know sometimes i might pull in uh what else do i normally pull in maybe uh fire click event fire event i think it is um do we have this actually oh i don't think we have it so what's let me have a look package ah we don't have it okay we need to install this so uh if you go ahead and uh dev dependencies dev the i can just dev dependencies i'm going to say testing library reacts now i said give me 9 uh what's this saying here call unexpected um call unexpected where really let's close that down oh what's this doing here spinner anyways let's go to package.json like it did with mine there um it's still going but um let's just continue on writing this in this app.spec file it's probably easier just to generally fire in um do a yarn ad react testing libra so let's go ahead and say describe and we'll create a describe function that's going to give us we're just going to say up and to be honest you don't even have to do a describe because not much is going on sir i'm not going to do a describe i'm just going to set it one thing before we do the 8 let's just do a yarn install because we need the testing library as you can see we've got the the red squiggly lines telling us basically it's unable to resolve so once that's installed we should get the testing library library which will be nice and i was just thinking briefly then instead of using it i generally use it as a function to test stuff when it's inside a described block if it's outside the describe block we can just do test which uh makes a bit more sense let's say it renders the application it has to be asynchronous because we're doing asynchronous calls and we're going to get the use infinite scroll uh to find never used okay that's fine uh use infinite scroll dot mock implementation and then what we're going to do we're going to say count let's go say return the implementation of you use infinite scroll return me count with 30 and that's all i care about at this point and that's all i ever want from used infinite scroll so i don't want to bring in the actual implementation i just want you to return me an object that says count is equal to 30 and then we're gonna have to mock the get story so we're gonna do mock implementation again um i'm gonna say promise dot resolve because on that get story remember because it's asynchronous it's always gonna return us a promise so we have to resolve something and that's why we had the fixture file fixture in here and i'm just gonna say uh for this get started return me this singular object with this stuff in here so i'm gonna say resolve me this i don't want to hit the api's want you to return me this and that's the power of a mock so get story ids dot mock implementation i'm gonna say promise dot resolve story ids likewise for the story ids um i don't care about the implementation of get story ids you know hitting actually i'm just gonna say okay give me this function and just return me a result that i'm faking essentially and that result i'm faking it with is story ids which is this array here with one so i'm gonna say if you get one go ahead and get a single story and this is where the the real business comes in so set a weight act async and then we'll say arrow function and this my friends is great basically what's happened um recently is you didn't used to be able to i don't believe use an asynchronous act so you couldn't do some work say for example go get me these stories because it's a synchronous and render these um i essentially want because when this test runs it's just going to run immediately right and it's not going to have say the story on the page so i want it to await this so if we didn't await this and you get a bunch of errors saying those asynchronous tasks going on and your renders all messed up so we're going to use away act and we'll take that off actually in a second but i want to show you this get by text query by test id i'm going to say render me the application um let's see then await i'm going to say wait for the element and wait for element in react testing libraries in asynchronous utility that basically allows me to pass it one element or an array of elements to say once the asynchronous tasks have happened do this so it's going to say await this this bit here so just wait on a response from the asynchronous task once it's resolved go do this stuff so i'm going to say expect get by text hacker news stories and you know what i want that to be truth i want it to exist and we'll do a comma because we're passing an array here and i'll just uh manipulate these query by test id we want to make sure story buys there because that story by is um who the stories by and we want to check in the uh text content so we can check the text content here and uh since there's going to be a bunch of story buys we can't use get by text right um well really what we can't do is say you know buy this person or buy this person get my text only allows us to get one particular element that's on the page if there's multiple elements with the same uh with the same text it just what works so what we're doing here is we've got a query by the test id for story by and story buys like a spam tag um so we're just going to go into that text content i believe it's a spam tag calendar but we we made it i just want to say bye you know what i can't remember what we made it buying a fixture i think it was by me actually yeah by me um get rid of that i don't need that that looks good um hacking new stories yep that's the title and what we also want to do when i make sure this is in here so i want to make sure the title is in here and this will all start making sense you can see these squiggly lines here saying look it's not imported from react testing library so yeah that all makes sense so let's go ahead and just say yarn test let's see what happens and i'll pull up the coverage if i can on this actually mock implementation is not a function okay great uh so it's saying here we're saying use effect from the hooks um oh what we've got to do actually we have to create our initial mock so we're going to say just oops just.mock dash dash hooks use infinite scroll that'll give us an initial mock so we can start modifying that mock specifically likewise with our services so i can use api you know as soon as it loads in get me the story jess.function and by returning a gesture function it allows us just to you know make assertions on that function did it get called did it get called with this data all this sort of good stuff so get story ids so that should now work except take a look we could rerun that test automatically but it kind of uh nukes my system perfect so we've got account in here but what happens uh i'm hoping we can demonstrate i don't know if it's possible to demonstrate this async act we may actually not need it with the um wait for element hopefully yeah we'd actually need it but that's how you do use async access come out in i think react 16.9 uh we don't need it there but we may need it down the line so we'll keep it in the tool bag for now but let me just get rid of these and save that let's see what happens here we are look unexpected talk and that's basically syntax error so rerun that unable to find an element with this sort of stuff great and why is that well the page the test ran but there's no content so we have to await that data so we can do that by just saying putting this back to a wait for element and we also have an asynchronous test here which is great so if we run that test once more save that it's gonna probably failed i think i caught it in time to serve yo i did that's great uh we can check out count because counts basically uh story container don't need that there either let's take a look that looks good to me so basically that's how we uh mock out well not knock out but that's how we test the app.spec so i'll pull up the um coverage now and then we can have a look where stuff maybe we haven't hit or stuff we do need to hit all right yeah sometimes um when i run the test it don't give me coverage and uh you can set this up in your package.json but i wanted to give me coverage for everything not just specific files so even though it's only one one test i'll still want coverage um and it not to get cached so let's have a look at app.spec.js running coverage perfect we've got coverage if i go back here open up uh let's have a look coverage where is it let's see ah okay go into your package.json and what we want to do we have to have a look for coverage reporters coverage fresh show is there a refresher oh there's nothing in here okay okay we can do just and we've done this before in some in uh like the to do with tutorial so collects uh actually i'm not gonna collect coverage for a minute i'm not gonna i'm just gonna get it from everything but so coverage threshold and this is a good standard to get a good mindset to get yourself in always have a good threshold so branches 95 um functions lines statements that looks good uh coverage threshold this is whinging out 462 um let's have a look unexpected talking about oh one two all right that seems fine we'll we'll see in a second um so we've got coverage if i spell that right threshold we have global of the global coverage and the reason we're not getting any coverage report is go away um when to say coverage reporters give it an array of html and text and what that's going to do should give me a oh yeah i didn't like that uh coverage threshold i'm pretty sure collect coverage from coverage threshold yeah i can't spell threshold so that's that should work now should give me a coverage report let's have a look there we are index.html perfect we've got a lot going on here so we might have to clear some stuff out that we don't exactly want to be testing so we've actually tested our story by just doing an app file but i think what's best is if we test it individually as a unit test um even though we did kind of test it and you know you do get this fall over between app and sorry container because it's kind of doing the same thing but um do as much coverage as possible just test everything you possibly can if it's unnecessary to test uh you know you don't have to do it but let's have a look let's go ahead next and create because this one's gonna be quite similar to start up so we could just use this as a base i imagine uh close that down um so let's pull in this as a base i i don't i think we could it's the exact same test i don't even know if i have to test this honestly uh yeah so we're gonna be hitting the story container it's gonna be doing exactly the same stuff like if you just replace story container here with up i mean i can leave it in here if you wish containers uh is it did i call it containers i can't even remember containers sorry content come on uh story concerner stories container and you know what you'll probably get that will most likely run completely fine and you it you know you can modify stuff in a storage container um there you are look perfect but i mean maybe you could just mock that in the app and then you know just say okay it renders it just renders that's all you wanted to do as opposed to doing all this but anyways i'll leave that in there let me see i'm going to put this on github so any modifications on the test let me know because i'd like to see that story.spec.js is next clear that out um this one's going to be you know it's going to be fairly similar maybe you want to put some stuff in your test with it the api fails but i'm not gonna go crazy with the testing i'm not i am kind of a purist but in the same hand uh on the other hand i'm not i'd like someone who's really good with tests to come and buff these up if possible um but when i start testing i'm like okay i've already tested this stuff i've got similar components being used throughout so i may as well you know just copy this to be you know i may as well copy it i know story ids isn't being rendered in here the infinite scroll is not going to get rendered we don't need the constant uh infinite scroll that can go we're not doing the story ids because we're just looking at the get story uh renders even though that's his application renders uh let's change that to story component with content uh so what did we have here story so that one goes to renders the story container with a story uh so yeah let's see here so um we're going to say okay we're going to mock out this implementation with a single story we are gonna render a story and we're gonna give a story idea of one components story story ids don't need that get story ids do not need that infinite scroll do not need uh so yeah get story do we need a clean up yeah we need to clean up but um seeing as though there's gonna be multiple mocks in here one nice trick you can do put this down here is we'll call that function like that and then we'll say just dot reset all mocks and that will reset on each test so this sort of stuff or this mock implementation here will fall into the next test um so we get a clean test so we're going to clean the dome and we're also going to clean all the mocks and i think uh even this is asynchronous yes it is i'm going to mock the implementation of a single story we're going to render out a story pass it a story idea of one because that's in our fixture then we're going to wait for element and we're going to say i can use let's just actually let's say also um i know that we have a test id in there of i think it was story or story always check your components there should be a test id in here yeah test id story which is there so if i um i i basically just want to call query by uh you can use get by test id query by test id um hmm let me just say actually we could do query by test id and i'll i'll explain the difference in a second um let's say query by test id story let's see what happens um get by test text then we'll say the hacking news stories isn't going to be there because that's not in the container tarnish will be there text content all right let's have a look where we're at with this sir yarn test let's test everything we can run individual tests as well i'll show you how to do that in a second works fine perfect um so component story that's done even though it's covered in another two tests but to run individual tests just do yarn test give it the relative path and just run that you can also run individual coverage on that too so if i quit out of there and say yarn test coverage it'll give me the individual coverage for that as opposed to running all the test coverage um yeah so that was good to me so um let's take a look here so we've got get by text query by test id um so let's expect query by test id story uh to be truthful you see it's all checking perfect so if you switch that out now to um i think it was get by get by test id let's see both work the same um one of them i believe so yeah so what we're looking at here okay we want to see what the difference between get by test id and query by test id is and essentially what happens is so you could use get by test id if that happens to be false so you could just actually call this like that and if it happens to be false it'll throw an error um if this here query by test id happens to be you know false it'll just return null um i'm not too sure which one i like most i i would like to get an error um but you could just do two truthfully but in this case i'll leave them in so you can just see how that works so let's have a look so get by test id let's just rerun that and it's not going to be there hopefully we get a nice error taking its time there we are just give me an error unable to find but if i run query by test id on that it should also fail because i've got to be truthful but you see how it doesn't give me the debugging as well um but if you used to do this so for example you just called it here so let's keep an eye on this come on there you are i couldn't find it so what happens if i do a query by test id should hopefully get null back oh it doesn't doesn't return anything which is quite bad so in this case i i'd probably stick with get by test id honestly i think it's a bit safer so we don't actually need that get rid of that perfect that looks good to me let's check out the let's check out the coverage there we are um what was that on that was on story.spec yeah it's already covered from the kind of an integration between the app and the story container so a nice one that we're going to be doing now is the hn api.js i can use api that's all it is uh you can stop running those tests now and there's there's no real need um so this one we're going to import we're going to mock axios because we don't actually use the rail implementation we're going to say from axios and you don't need the named input because axios is a default so let's just say input get me the story ids get story new stories url story url and this test is is really nice actually i like this one and it's not this one specifically but i like testing apis because you can see or did it get called with this data did it not so let's import singular story we need our fixtures empty singular story from fixtures all right oh yeah that looks right uh how many tests we've got going in here now so what did i do with this when i did test it out just the one so yeah we don't really need a describe here i mean actually you know what we could do with a describe here because we're testing this and this so firstly let's uh let's do a nested one i can use api forage and you can put your before each by the way in the describe um just dot reset all mocks we need some clean up and then we'll do clean up um did we not bring in react testing library actually do we need a clean up we don't really need to clean up because we're not doing anything to the dom here we're just basically testing the api um describe uh let's say get story um get story functionality i don't like testing functionality but in this case you know um i'm breaking my own rule for now let's just do one describe so what does it do well it requests and gets a story from the hacker hacker news api and then we can do axios.get because that's a function on axios and we're going to say mock that implementation because i know that's what we've been using because we did implement that right we we used to get back way back over in service we'll use this get and i just want to mock that out so do promise.resolve and i'm going to say i want it to match exactly how it runs through my data so i'm going to say data and spread a singular story in there there we go that looks good to me and then what we could do we could do const entity equals aware get story and pass it one and because this we're using an aware we need an asynchronous function and what we can do now because this is mocked and it's not actually going to go call the hacking news api it's just going to give me this and that spread story what's happening here with these three dots we've got singular story um i'm creating a new object which you probably just could just well you can just do uh should i just do that actually let's test it we'll find out dot resolve data which is a single story we can test it let's see what happens um so i said we want to expect axios what happened expect axios.get to have been called times one then we're going to say remove that to have been called with and then this is where the magic comes in story url plus one being uh this here get started and then what we're going to do we're going to say dot json because that's what is actually going to be sending to the hacking news api and saying give me this story this num the story of an id of one i'm going to say that expects entity dot so equal and we should be able to put single story in there let's test this hypothesis and just see so i'll get that yarn test let's see what happens maybe it doesn't like a singular story going in it should not should do let's see requests so don't like the mock implementation and i can already hear everyone screaming to me it's like you told me to do this early you have to mock the actual implementation the the module let's go ahead and do that so we can actually you know used use our mocks and we get the mock implementation so soon perfect it passed but reason we mock this is so we can do stuff like mock implementation on that so we know that axios is in there and we say mock the implementation because we've got a construct constructor ingest that sets up all these nice functions for us so like for example if you used to run axios we run this test we should get a bunch of nice stuff out here you see so we get um a bunch of mock implementations here so we do get the actual axios uh we'll get the access function and get mock implementation clear all this good stuff all because we did this uh but then you also get stuff like here headers uh inceptor response so you can get the original functionality if you wish to get the original functionality um but in this case we only care about the dot get so we can remove this axios maybe i can show you it also in the mock implementation of the story so if i do get story i think that'll return just a function value actually oops grab that let's see there we are so we'll get the get started because i've mocked it out here and i've just said give me the jest up function but you see the difference in here is that's just going to give me the default marks on everything whereas the get story if i mock out that particular function it's going to give me all this functionality here and then you can run stuff like you know mock implementation like that which is what we're using there don't go ahead and do that um so yeah hopefully that makes sense i'm always open to answering more questions i know these can watch in these videos it can get quite tedious and some stuff you may understand some stuff you you may not understand but essentially that's that's programming you're going to understand some stuff and you're not going to understand some other stuff and it may click one day it may not click another day so always come back write notes ask people it's the best way to just communicate people so what i can do here will say it does not retrieve a story from the hacker news api but handles gracefully let's pull this over here does not retrieve a story from the i just say api handles gracefully i'm going to be rewriting a lot of this stuff when we do hit the graphql bit again we can just go in here copy this and i don't i don't want it to uh where we are i think uh space i don't really care about a single story here i want an empty singular story and we can mock an empty singular story and we're going to say we want it to equal when it returns a singular story so let's have a look perfect uh just need to go back into story dot spec and remove that console.log there so you're getting all this stuff here again this is all going to be on uh it's all going to be on github feel free to contribute to the project graphql is coming so it's going to be a news reader not specifically hacker news we will be using the hacking news api but we're going to be pulling other stuff as well using graphql get story functionality doesn't retrieve so we've done the get story so now all we've really got to do let's have a look where are we with these braces describe get story ids that's you know that's all we've got left to do and we can pretty much just go ahead copy this because we've got similar implementation so it makes our test nice and easy requests and gets uh let's change this to story ids from the hacking news api we will mock out the implementation of the get once more and the reason we're not mocking this out up top is because we want to change it on each test right and we're clearing it on each test as well by doing just.reset all mocks so here we're just going to say give me story ids which uh is in our fixture if you forgot it's there in the rear with one um access dot get mock implementation promise dot resolve return me an um an object with a key of data there's a property and that property is an array with one inside so we'll say get story ids we don't have to pass anything to get story ids and we can basically say how many times it's been called once we only only thing we really care about here is uh does it hit the new storage url because that's what we plan on hitting it with which is this a buildup of base url which is that new stories and it should go get me the new stories and then we'll say we want it to equal story ideas let's have a look what goes on here certain stuff we worry about in our test perfect even that's hitting the the wrong test uh yeah certain stuff we won't worry about within the tests um i'll try to stay away from implementation but doing these sort of tests gives you confidence in your api so i quite like doing them maybe it's just something i like doing guest story functionality um let's put that to get story ids you can see the names come inside here from the describe and the test so hacking news api gets story requests and gets a story there we are perfect um so i'm just going to go ahead now and check the coverage report see where we're actually at um it'd be useful if i actually run the coverage uh so let's have a look there we are the links are in the description by the way for this particular project and other projects i've done all in the description i'm on twitter at carl hadwin my github is in also in the description of carl hadwin we don't care about hooks in this case and we don't also care about utils i'm not testing the dbounce service worker we don't care about that so okay in this case we're getting very close to the end now stuff i don't care about i mean this is very subjective but uh certain stuff that i can manually test i'm not gonna test honestly um if i can just manually test it get coverage from give it an array even though the debunks don't work um the infinite scroll kind of works but when you put it on a different screen um zoom it don't work too well so i could fix that now or if one of you want to fix it that would be really nice um not only would it save me the time but uh it would make this tutorial shorter and also if someone could write an implementation so this is why well not implementation but a few notes around why it uh was like that you know that would be nice but like i said people i don't know people learning this i don't want you to get hooked hooked up on a dball so i don't want to get hooked upon all the other nonsense and the nuances that may occur um i just want you to learn react um i'm not forcing you to react i'm just saying these are some of the good stuff uh the functionalities for hooks this is hooks this is components this is containers all this stuff that kind of brings it together um as a react developer so it's all good stuff to look out for all these are like fundamentals and you'll use these daytoday so anyways i'm going to rerun the test um i'll show you what i'm running by the way for this yarn test coverage watch all and hopefully we get 100 coverage once you get rid of all this uh all this nonsense here what we don't want to test i'm not testing a service worker even though you can turn the service worker on oh it's not met oh selectors is missing um by the way if you do want a service worker i'm going to run this through lighthouse very shortly all perfect hundred percent uh selectors should go in a second uh source selectors uh selector selector selectors that looks fine to me let me rerun that once more come on perfect you'll see this one here is uh giving you a 50 in branches because we never hit red but i wanted to show you our style components work and giving you um an opportunity to look at how props work there too so you feel free to change that if you wish um so yeah let's run this through lighthouse right now i think we i think we're done we've got a working application we've got it working pretty quickly but then we just wanted to make sure we could uh i you know oh one thing we didn't do we didn't implement memo so this is this is a really good thing so can i just get rid of the um terminal right now uh let me see here i'll just pull this out stop snapping there is go back to this cool okay one thing that's really important right now story container yeah so one one of the important things here is even the react isn't going to rerender this story because it's already there right it's not going to hit that render function but it is going to call this story um so we'll go in here it's not going to just ignore it it's going to go in here and be like okay well it's here um let's remount the component and uh maybe this is a quirky react i'm not too sure actually but it's going to rerender this component and you can see here it's like okay um if we log out the con this story id would expect it to be in there once and it should just be in there once let's have a look it should just be in there once so if we do like 2 107 it's in there once but if i rerender you think okay well it's going to go get me zero to 60 now so it should be in there twice but no react smarter than nice like well you've already rendered this component why should i go and rerender it again i'm not i mean i'm not going to come in here and say um yeah i'm not going to come in here and say i'm going to rerender what's the point nothing's changed the props are the same so i'm not going to rerender if the props happen to be different i would rerender but i'm not going to but this is where some people forget that this use effect still going to get hit and you can see that clearly here um so if you go to the network tab search for two one zero one seven eight or two so it's going to do the first call which when it gets comes on to the pit reacts loading everything the second once it's rendered the third call when you do a scroll so we have to be careful with this so one amazing thing you can use is memo a memo works like amazingly so all we have to do just put memo there wrap it in a function say story and this will prevent that use effect being hit which is really good because we're not making additional additional network calls this is one of my favorite um things about uh the memo function how easy well for hooks essentially how easy it is to just implement that and that is going to come back now and say okay well if i'm in store a container and i realize this is wrapped in a memo even i'm going to go in here i'm going to check to see if that's already on the page and if and if it's exactly the same i'm not going to do anything why should i you know do this twice so we'll copy this id once more i'll do a refresh i'll clear this out go in here save this save this so should get a network call in here now once so it's there once and if i just remove that you can see there's a ton in there if i go scroll down it's going to go rerender and you see it's only rerendering the new ones and it's only in there once so no matter how much i scroll we're not going to be hitting that network more than once because it's already there and that's memo and it's amazing i absolutely love memoir it's my favorite hook uh we can get rid of that story id don't need that um perfect clear that out do one scroll it's not in there perfect if i do one more it's in there once absolutely love memo works fantastically yeah and just react in general is like really good i just really enjoy working with react and um don't get too uh put down or be too harsh on yourself if you don't know something like even i you know even people experienced who've been working react for three four five years or whatever it may be do forget stuff like i had to sanity check myself just then to see um will this component rerender if the props haven't changed and um you can call you can't call a component to update like with should component update for the return um and when i say return a rerender essentially um but yeah i i still have to sign it to check myself i everyone forgets stuff so uh don't get too uh down on yourself if you don't you know fully understand this tutorial i'm here to help i'm on twitter the github's in the link the twitter's in in the link the link for github is into uh the description the link for my twitter's in the description my email is uh on my youtube channel so feel free to check that out i'll answer all emails even though it may take me a bit of time but i'll answer every email uh and yeah just keep following the tutorials we can run this through lighthouse now actually let's just see uh performance wise and i'll show you how to do this actually let's go ahead and do yarn build and we'll create a production build here creating an optimized production build let's see let's see let's see let's see should give us part 5000 i believe uh we can use serve you may have to install this just do like yarn out serve it should work uh there we are and you want to run your production bill through lighthouse um if i open a new version you want to run an incognito so you don't get like um look i mean even even here i've got so much stuff that i'm trying to learn everyone's still learning so even on my you know task bars there's certain stuff i forget so uh yeah don't be too hard on yourself um click lighthouse little addon you can get from the chrome store run it incognito so you don't get other applications well extensions interfering generate a nice report it's running in mobile mode which is nice and we see it's responsive uh and boom we've got 95 performance best practices time to interactive yeah it's a bit slow serve static assets with an effective cash policy nothing we can do about that unfortunately whilst we're doing it locally but if you put it on a server it would won't run great accessibility all passed best practices again we can't hit 100 on this because we're not using http http 2. we can do that on a server seo progressive web app we've got a service worker running which uh which is nice we can't hit this to put on a server but yeah you see like we pretty much hit all bases you can keep rerendering this actually to get better scores and they're probably one or two extensions i've got enabled i think you've got like last pass and a few other things that are running um there you are 100 100 performance it really depends but yeah that's lighthouse um and yeah i'm really happy with this hopefully it's a good project that people can learn from it's not too complicated um but yeah it's not too complicated there's only like one component in there but we're hitting apis and i'm so excited to be looking at graphql next it's gonna be so good to be able to you know make this from one component and render just one api we're going to be hitting graphql and getting a bunch of different endpoints so yeah that's pretty much it for this tutorial i hope you learned a lot we did react testing library we did one component we looked at memo implemented stuff like mappers utilities for dbalance selecting fields we had a service worker we did apis quite a lot actually so if you got through this congratulations i'm on twitter carl hadwin all the relevant links are in the description below this will be on github so that will also be in the description below follow me on youtube search my name carl hadwin or cognitive search and you'll find many videos like this and many more to come and keep an eye out for the part two of this where we're gonna be looking at graphql that's gonna be really really interesting and any questions drop them below i'd love to hear them so yeah let's uh as a community maybe build on this try uh if you get to the graphql point before me fantastic uh maybe we can do live updating too in this that'd be cool so yeah any ideas throw them across i'd love to hear them thanks for watching this video as always i shall see you in the next one
