With timestamps:

00:00 - you're about to learn how to code an
00:01 - e-commerce website using django and vue
00:04 - that means you'll be using python on the
00:06 - backend and javascript on the front end
00:09 - you just need to know a basic
00:10 - understanding of these technologies to
00:12 - follow along this course was created by
00:14 - code with stein he's created a bunch of
00:16 - great courses on his own channel and we
00:18 - wanted to bring him to a larger audience
00:22 - hi in this video we're going to build
00:23 - the e-commerce website using django and
00:25 - vue i'm going to use django rest
00:27 - framework to build the api and the back
00:29 - end and then i'm going to use vue.js to
00:32 - build a separate front end which we're
00:33 - going to use to connect to the backend
00:36 - using axios to handle the payments i'm
00:39 - going to use something called stripe
00:41 - this course will assume that you have
00:42 - basic knowledge of both view and django
00:45 - but i will still try to explain
00:46 - everything as good as i can so hopefully
00:49 - you should be able to follow along
00:51 - anyway let me show a little demo of what
00:52 - we are building so it's easier for you
00:54 - to understand and follow along here you
00:56 - can see the project we are going to
00:57 - build we have a simple menu with the
01:00 - search the categories login button and
01:04 - the cart button and have a simple header
01:06 - which is uh welcomes you to the page
01:09 - this is a jacket store
01:11 - you have the latest products and a
01:13 - simple footer
01:15 - i go into one of the categories you'll
01:17 - see the products from this category and
01:20 - if i click view details you will see the
01:22 - full version of it with a bigger image
01:24 - title and a description
01:26 - you also have the price here and the
01:28 - possibility to add to cart and if i
01:30 - click add to cart you'll see a little
01:32 - pop-up down here which says that the
01:34 - product was added to the cart
01:36 - if i now go to the cart we have the
01:38 - possibility to change the quantity and
01:41 - you can also remove them from here if
01:43 - you want to like that
01:44 - and then the price updates here and also
01:47 - down here
01:49 - and if i now try to proceed to checkout
01:52 - just log in with my username code with
01:54 - stein
01:56 - put my password
01:58 - and then i headed to the checkout page
02:00 - here i need to fill out contact
02:02 - information card number etc and then we
02:05 - click paid stripe and when send back to
02:07 - the page afterwards to a simple success
02:10 - page
02:11 - and if i go to my account here i would
02:14 - have a list of my orders if i had any i
02:16 - don't have any in this version of this
02:18 - jacket store right now
02:20 - and i also have possibility to log out
02:23 - so that's basically the product we are
02:24 - going to build i hope it looks really
02:26 - interesting to follow along with
02:28 - i'm going to build everything from
02:30 - scratch and step by step and when we
02:32 - finish we're going to deploy this
02:34 - project to a live server on digitalocean
02:37 - but now it's time to get started with
02:38 - the coding
02:40 - here i have the to-do list you are going
02:42 - to go through in this video
02:44 - it's quite long but we're just going to
02:46 - start at the top and work our way down
02:49 - first i'm going to install a setup
02:51 - django and everything we need there
02:54 - i have a folder here jackets would be
02:56 - which will be the root folder for all of
02:58 - this project view django and everything
03:00 - we need
03:02 - okay inside this folder i want to create
03:04 - something called an environment
03:06 - it's a virtual environment and every
03:08 - python package we install here will only
03:11 - be for this environment so when we are
03:13 - deploying this project later it will it
03:15 - will be much easier to have the same
03:17 - environment locally and in production
03:20 - and to create this just a virtual
03:24 - env and an environment
03:28 - eight or three eight two which is the
03:30 - python version i'm running
03:32 - and hit enter
03:34 - so now i have now i have it there on the
03:36 - computer
03:37 - we just click ls you'll see here the
03:40 - environment folder
03:42 - and then i need to activate it so we can
03:44 - install some packages and to do this i
03:46 - said
03:47 - source environment then activate
03:52 - as you can see here we have prepared the
03:54 - no environment 382 this means that if i
03:56 - now use pip to install something it will
03:59 - only be installed inside this
04:00 - environment
04:02 - and if you don't have virtual
04:04 - environment you can install it by just
04:06 - writing pip install virtual env in one
04:09 - word like this pip install virtual
04:13 - env
04:14 - i already have it installed but you
04:16 - obviously need to install it if you
04:18 - don't have it
04:19 - it might be a little bit overwhelming
04:21 - with all this environment and everything
04:22 - you're going to install right now but
04:24 - we'll come back to much of this later in
04:26 - this video so then it hopefully will
04:28 - make much more sense when we go through
04:31 - them multiple times
04:34 - so the first thing we're going to
04:35 - install now is django so just pip
04:38 - install django
04:40 - this will install the latest stable
04:42 - version of django and also a few
04:43 - dependencies that django has
04:46 - latest version of django is currently
04:48 - three one seven
04:50 - next we are going to install the django
04:51 - rest framework
04:53 - to this you just say pip install django
04:55 - rest framework this is what you're using
04:57 - to create the api in the back end
05:00 - and hit enter this also has a few
05:02 - dependencies
05:04 - and then we can install django dash
05:07 - course dash headers this will help us
05:09 - with security so everything between api
05:12 - and backend will be working securely
05:15 - and then we are going to install joser
05:17 - this will also help us with
05:18 - authentication users and similar
05:22 - juicer adds some a few
05:24 - endpoints to the api so it's easy to
05:27 - create users log in get a token for
05:30 - authentication and similar
05:33 - so just hit enter and this also
05:37 - installs a few dependencies
05:39 - and then we can install pillow this will
05:42 - help us with resize images and similar
05:46 - this is a python image library but
05:48 - pillow is a different version of it but
05:51 - it's much better and really easy to use
05:54 - and the last thing you're going to
05:56 - install in the back end is a stripe so
05:58 - just right click install strip
06:01 - so now everything in the back end is
06:03 - installed and we can start configuring
06:05 - it we just need to create a new django
06:08 - project
06:09 - and to create the new django project you
06:11 - say django admin start project and then
06:14 - the name i just want to call it jacket
06:17 - underscore django so i know it's the
06:19 - django part of this project
06:22 - and if i go into it check it's
06:24 - underscore django
06:26 - have a new folder in there and a file
06:29 - managed pi is used to run administrative
06:32 - tasks like initialize the database
06:34 - create super users and similar
06:37 - and inside the jackets django i can open
06:40 - it here so it's easier to see
06:42 - i have a initial spine that just means
06:44 - that python should handle this as a
06:46 - package asgi and wsgi are entry points
06:50 - for the web server
06:52 - settings to spy are globally
06:55 - configuration for the whole project
06:57 - and urls.pi is kind of like a table of
07:00 - contents of all the pages in the backend
07:04 - so i will come back to all of these
07:06 - later so we don't have to think too much
07:08 - about it yet
07:10 - okay and then we need to tell django
07:12 - about those packages we installed so if
07:15 - you're going to set install pi
07:17 - oops
07:18 - we have a list of installed apps there
07:21 - are a few that comes from django these
07:23 - ones
07:24 - but we want to add more to this
07:27 - first we had the rest framework just so
07:30 - now django knows that we are going to
07:32 - use it as well
07:34 - and then the next is restframework.org
07:36 - token because we're going to use what
07:38 - tokens for the authentication
07:41 - and course headers we installed and also
07:44 - joser
07:46 - so now we have uh
07:48 - said to django that we're going to use
07:50 - all of those
07:52 - and then the next thing we're going to
07:53 - use do the next thing we're going to do
07:55 - is to configure the course headers so
07:58 - below here add two lines
08:01 - course allowed origins this will be the
08:04 - address to the front and later you need
08:06 - to change this to the live server
08:08 - address or if you use a different
08:10 - address for the front end than i am
08:14 - and we also need to change the
08:16 - middleware middleware is the coded and
08:19 - that goes in the back end of django
08:23 - so above
08:25 - it's important it is above common
08:27 - middleware you say
08:30 - courseheaders.middlewear.course
08:31 - middleware so it's just that the django
08:33 - u goes through this code before it goes
08:36 - to the next part of the django code and
08:38 - that's it for the configuration so now
08:40 - we have done everything for the security
08:42 - in the backend for now
08:45 - then the last thing we're going to do is
08:47 - to go to urls just to remove this big
08:50 - comment here
08:51 - and i'm going to include the api fonts i
08:55 - told you about for joe sir so we are
08:56 - ready to create users
08:59 - but you need to import one more thing
09:01 - from django.urls and this includes so
09:04 - you can include pots from that project
09:08 - so first pod api slash v1 we include
09:12 - jose.urls
09:15 - and the same bot here and
09:17 - includejoser.urls.token
09:20 - so now we have everything we need in the
09:21 - back end this has added a lot of cool
09:24 - functionalities and now we can create
09:25 - users you can get authentication tokens
09:28 - and similar from the front and
09:30 - it looks a little bit like magic because
09:32 - now we get a lot of functionality
09:34 - without doing a lot but you will
09:36 - probably understand a lot more when you
09:38 - have used it a little bit
09:41 - so you can just save this file for now
09:44 - and then i want to do one more thing
09:45 - here in the backend and that is to
09:48 - initialize the database and to do that i
09:50 - said python managed to apply make
09:53 - migrations
09:56 - that's just to create the migrations
09:58 - files and then to run them i say python
10:01 - mentioned by
10:02 - migrate so now we have a new database
10:06 - with all of these tables
10:09 - so to test that everything is working we
10:11 - can also create a super user we can log
10:13 - into the admin interface that django
10:15 - comes built within
10:17 - python management by create super
10:20 - user
10:23 - oops
10:25 - super
10:27 - user
10:28 - and then i want the username to be admin
10:31 - admin
10:33 - jackets.com
10:36 - and then a password
10:40 - hit enter and now the superuser created
10:43 - successfully perfect and then to log
10:46 - into the admin interface we can run the
10:48 - development server that django comes
10:50 - with by saying python mentioned by
10:54 - run server
10:56 - this will store the development server
10:58 - at this address
11:00 - just copy this address go to chrome
11:03 - and it's not found because these are the
11:06 - only urls that are available but if i go
11:08 - to slash admin i can log in with the
11:11 - admin account i just created
11:16 - and everything here seems to be working
11:18 - we have the auth tokens but there are
11:20 - none yet of course and if i go to users
11:23 - i will see the user i created a new
11:26 - search is signed in and using the front
11:28 - end will appear here as well
11:32 - so that should be it for the back and
11:34 - for now
11:35 - now i can set the first task here to
11:37 - done
11:39 - next step now is to install a setup view
11:42 - and i just want to open up a new
11:43 - terminal just for view
11:47 - so cd documents and jackets that should
11:51 - be the correct folder
11:52 - okay and to create a new view project
11:55 - you need to install view cli first to
11:57 - install it just say npm install
12:00 - g
12:01 - at view
12:02 - cli this will install the newest version
12:04 - of view on your computer
12:07 - and when and just hit enter but i
12:09 - already installed it i'm not going to go
12:11 - through it right now
12:13 - so since i'm right here now i can create
12:15 - a new project by saying view
12:18 - create
12:19 - and then check it
12:22 - oops check view should be the name of
12:24 - the project
12:26 - and i want to manually select which
12:29 - features we're going to use
12:31 - we won't be able to transcribe the code
12:34 - real javascript i'm going to use the
12:36 - router the view x
12:39 - css preprocessors i can just remove the
12:42 - linter
12:44 - and then i can hit enter
12:47 - going to select 3.x preview
12:52 - and i'm going to use history mode for
12:54 - the router
12:57 - yes and i want to use dart says
13:01 - and i can store this in dedicated config
13:04 - files
13:06 - and i don't need to save this for later
13:09 - no
13:10 - so now this will install now create a
13:13 - new gnoview project and install the
13:16 - dependencies that view has
13:19 - great so now i can go into it cd jackets
13:22 - view oops check it view
13:25 - and i need two packages or libraries
13:28 - here as well
13:29 - to install them i can just say npm
13:31 - install axios this is a library you're
13:34 - going to use to talk to the back end
13:37 - and npm install
13:40 - bulma this is a css framework i'm going
13:42 - to use i don't have to think too much
13:44 - about the styling and similar for this
13:46 - project because we're here to learn vue
13:49 - and django
13:51 - so now everything there is installed
13:53 - i go back to visual studio code just
13:56 - look at the files here
13:59 - we have something called node modules
14:01 - which is the the packages we have
14:03 - installed
14:04 - public
14:06 - is the
14:06 - index.html which is the
14:09 - file we're going to serve
14:12 - and we have a few other config files and
14:14 - in the source we have the main.js which
14:18 - creates the view app
14:20 - app.view is kind of like the wrapper
14:22 - around all of the
14:24 - code
14:26 - views are the different pages
14:28 - store is view x which is a global state
14:32 - management for the whole app
14:35 - router is almost like the urls does pi
14:38 - in the django project it's all of the
14:40 - pages in the project
14:42 - components are small
14:44 - or large reusable parts of code we're
14:47 - going to use as well and assets will be
14:50 - images and similar
14:52 - i know it's a little bit much
14:54 - information right now but when we just
14:56 - only start adding code to each of them
14:58 - you'll probably understand what each of
15:00 - them do when you just done it a couple
15:02 - of times
15:03 - and if you want to use bootstrap instead
15:06 - of bulma you are free to do so but i'm
15:08 - not going to do that and it will be a
15:10 - little bit different but
15:12 - it's up to you what you want to do
15:14 - and if you want to test the
15:17 - view everything is okay we can say npm
15:20 - run serve
15:22 - so this will start a development server
15:26 - and this is the address we added in the
15:28 - backend just in the settings to spy
15:31 - so if i now go open up a new tab hit
15:34 - enter you'll see everything
15:36 - you'll see the front page of the view
15:38 - here
15:39 - and switch route so we see that
15:41 - everything is working perfect
15:44 - so now i can go back to the to-do list
15:47 - and set this task to done
15:49 - next step now is to include font also i
15:52 - want to use some icons around different
15:54 - places in the page so it's very easy to
15:57 - implement i just go into public and into
16:01 - the
16:01 - index.html
16:03 - and then below the title here
16:06 - i just paste this one linked real
16:08 - stylesheet and then the link to
16:11 - the cdn which holds version 550 and two
16:15 - of of uh font awesome
16:18 - and save
16:20 - so this shouldn't have done anything
16:22 - with the front end so you can just go
16:25 - back here again as that this task clip
16:27 - done
16:29 - next now is i want to do some changes to
16:31 - the base template i want the menu and i
16:34 - want to remove all of this which doesn't
16:36 - have anything with our ecommerce website
16:38 - to do
16:40 - so if i just go back to
16:42 - app.view
16:43 - make this a little bit smaller
16:46 - and i can remove the contents here
16:50 - and i want to import my hair and to do
16:53 - that i just say at
16:55 - import
16:56 - dot slash
16:58 - node modules
17:01 - slash bulma
17:03 - i think that's everything i need
17:06 - for refresh now yes it looks like i have
17:09 - gotten the styling
17:12 - and i can remove this nav bar
17:15 - i want to create a div id wrapper around
17:18 - all of the content just to have one
17:20 - element in this template because that's
17:23 - required by view
17:24 - then i want to create a nav with class
17:27 - navbar is dark this is bulma clauses
17:30 - which will give a menu on the top with
17:32 - the dark theme
17:35 - close the nav
17:37 - just go in here said div class
17:40 - nav bar brand this will be the logo
17:43 - and then to show the jackets logo there
17:46 - i create a router link to just slash
17:49 - which is the front page and give it a
17:51 - class of nav bar item
17:53 - and then i just a strong jacket and
17:56 - close the strong and also close the
17:58 - router link down here i want to create
18:01 - the
18:02 - possibility to have a hamburger menu
18:05 - icon when you are on small devices
18:09 - so we just say a close nav war burger
18:12 - area label
18:13 - expanded false data target nav bar menu
18:17 - network menu will be the menu that shows
18:19 - when we click this icon
18:21 - and then add three of these which are
18:24 - three stripes in the burger
18:26 - then i can close the nav bar brand
18:30 - and then add a new div class navbar menu
18:33 - which you can see this are linked like
18:35 - that
18:37 - and one more div class nav bar and
18:39 - because i want the menu to be on one
18:41 - side of the page and the logo on the
18:43 - other page now the other side of the
18:45 - menu
18:47 - and here i want to add the two
18:48 - categories we're going to have summer
18:50 - and winter
18:53 - it's just router link to slash winter
18:56 - class navbar item and then the label
18:58 - we're going to show in the menu and then
19:00 - the button for the card is a little bit
19:02 - more complicated first we need to add a
19:04 - div close nav bar item and then a div
19:08 - close buttons because we're going to
19:09 - have two buttons and to get space
19:11 - between them we add this buttons clause
19:15 - and then the login button is just router
19:17 - link to slash log in button a slide to
19:20 - have a light grey button with the label
19:23 - log in
19:24 - and the same with the chord it's just
19:26 - slash chord and it's success it's green
19:29 - is a little bit more pretty or inviting
19:31 - to click on
19:33 - and here i want to show a shopping cart
19:35 - icon
19:37 - spam clause icon and i close fos fa
19:41 - shopping cards
19:43 - and then spam
19:45 - spam
19:46 - card
19:47 - and close the spam and close the router
19:49 - link close the buttons and close the nav
19:52 - bar item
19:53 - and then
19:54 - to get a little bit space
19:57 - below the menu and around the content we
20:00 - add around this router view
20:03 - a section clause section
20:05 - the router view is where all of the
20:07 - content is placed
20:09 - and then below there we have a footer
20:11 - class footer
20:13 - and then just simple paragraph showing
20:16 - copyright 2021 and class has text
20:19 - centered
20:21 - footer
20:23 - and save
20:24 - so if i now go here you'll see that we
20:26 - have this menu
20:28 - and everything from this logo and down
20:30 - here is inside that router view so if i
20:33 - now go to
20:35 - slash about which is a page that exists
20:38 - this is the router view content
20:42 - great
20:43 - so i can also just go to
20:46 - views and into home.view and clean it up
20:49 - a little bit
20:50 - and remove this one just say home
20:54 - remove the import of the hello world
20:57 - because we're not going to use it right
20:59 - now
21:00 - save
21:01 - if i go back now i just say home there
21:04 - perfect
21:05 - so now i think i can go back here and
21:09 - set this task to done
21:11 - because now the front end is finished
21:13 - for now and i can go back to the back
21:16 - end and start working with the products
21:18 - we're going to use in this project
21:21 - okay and if for now we just try to test
21:23 - this on a mobile device
21:25 - you'll see that we have this hamburger
21:27 - but nothing happens once we click it so
21:29 - we're going to need to implement some
21:31 - view js to fix this
21:33 - so if i just scroll down here
21:35 - create a new script
21:38 - and create a data
21:41 - return this is that object
21:44 - and i want one property here show mobile
21:47 - set the default to false
21:49 - because we don't want to show the mobile
21:51 - when we open the page before we click
21:53 - the button
21:55 - and to make it possible to click it we
21:56 - can go up here and find the button
22:01 - and i add here at click so when we click
22:04 - this we call the function or the code in
22:07 - here and just say show mobile menu
22:10 - equals not show mobile menu so if it's
22:13 - true it will be false and if it's false
22:15 - it will be true
22:17 - so now we just need to append a clause
22:19 - to this one it's true
22:22 - and to do that i just go at the end here
22:25 - paste a little bit of code
22:27 - v bind so we bind the attribute class
22:30 - to show is active if the show mobile
22:34 - menu is true
22:35 - so if you just
22:37 - save this now this is a view directive
22:40 - if you wanted to know what this is
22:41 - called
22:43 - just refresh and if i click here now you
22:46 - will see the menu go up and down
22:48 - perfect
22:51 - and then i can go back to the to-do list
22:53 - and set this task to done
22:56 - next step now is to go to the backend i
22:58 - created django app we're going to create
23:01 - database models to have information
23:04 - about the products and the categories
23:07 - and to create the django app we just
23:09 - stop the server down here
23:12 - and say python managed pi start app and
23:15 - then the name which would be project
23:18 - and hit enter
23:20 - so now if i scroll up there should be a
23:23 - new folder
23:24 - there called product with the migrations
23:27 - folder the init.pi
23:30 - admin which will we use to register the
23:33 - models we create with the admin
23:34 - interface and apps which is information
23:38 - or config about just this app
23:41 - models.pi
23:42 - is
23:43 - where we describe to the database what
23:45 - types of information we're going to use
23:47 - and store
23:49 - tests or
23:50 - python tests and view those buyers where
23:53 - we get information from the database and
23:55 - present it to the front end
23:58 - so first we can go into models.pi and
24:01 - just remove this command
24:03 - okay so first i want to begin with the
24:05 - category model to create a new model
24:07 - with just a class category and pause in
24:10 - models.model
24:12 - i want one field called name which is a
24:15 - chore field with a max length of 255
24:18 - this will be the name of the category
24:21 - and then i want the slug which is the
24:24 - address version of the name
24:26 - models.slug field
24:31 - and i want to order the categories by
24:33 - name in the backend at least and to do
24:36 - that you need to add something called
24:37 - class meta which is options for the
24:40 - model
24:41 - ordering
24:44 - create a tuple
24:45 - name and this is a template you need to
24:48 - add a comma there so it's iterable for
24:50 - the backend
24:52 - and i also want the string
24:54 - representation of this object because if
24:56 - we now add the category and see it in
24:58 - the back end we'll only see object blah
25:00 - blah blah so we want to show the name
25:03 - instead
25:04 - to do that we said def
25:06 - underscore underscore str underscore
25:08 - underscore
25:09 - was it himself say return
25:12 - self.name
25:14 - so that's much easier to understand what
25:16 - type of object it is
25:18 - and i need to create one more function
25:21 - so we can get the url
25:23 - for the category so it's easier to use
25:25 - in front and later
25:27 - this can this function is called get
25:30 - absolute url
25:32 - and to use it we just say return
25:34 - f so we format it with slash and inside
25:37 - there it pass in the slug which is the
25:39 - address of the category
25:42 - and save
25:44 - next step now is to use the migration
25:46 - script again to update the database but
25:48 - to do that we need to tell django that
25:50 - this app exists
25:52 - and to do that we need to go into
25:53 - install apps and at the top here i can
25:56 - say product
25:57 - so you need to
25:58 - you go information inform django about
26:01 - the
26:02 - app and not the model
26:04 - so if i now go down here i said python
26:06 - managed to apply
26:08 - make migrations
26:10 - you'll see that you want to create a new
26:12 - model called category
26:14 - and then we need to run python managed
26:17 - by migrate to actually create it in the
26:20 - database
26:21 - now the product cat no the product model
26:24 - will be a little bit more complicated
26:27 - first i need to import bytes io from io
26:30 - because we're going to handle images
26:32 - here and resizing
26:34 - and then i want to import peel which is
26:36 - pillow installed or
26:38 - import image from that library
26:41 - and from
26:42 - django.cod.files i want to import files
26:44 - so it's easier to create thumbnails and
26:46 - similar
26:48 - now we can go down here and start
26:50 - working on the model
26:52 - clause
26:53 - product models dot model
26:57 - the first field i want here is a
26:58 - reference to the category i want to use
27:01 - something called a foreign key which is
27:03 - index in the database or a relation key
27:07 - so first you just pause in category and
27:10 - set the related name so when on a
27:12 - category it's easier to get all the
27:14 - products by just saying
27:15 - category.product.all
27:18 - and if you delete one of the
27:21 - categories we also delete all of the
27:23 - products connected to it
27:26 - then i can just copy the name because i
27:28 - want to use that and also the slug
27:33 - then i want one field for the
27:35 - description this is set to blank equals
27:38 - true and null equals true so it can be
27:40 - empty if you don't want descriptions for
27:42 - a certain product
27:45 - then add a
27:46 - field for the price which is a decimal
27:49 - field
27:50 - set max digit to six and decimal places
27:53 - to two this might be different in your
27:55 - country than here in norway
27:58 - and then i want one field called image
28:00 - which is image field we upload this to a
28:03 - folder called uploads i'll show you
28:05 - where we're going to place this soon
28:07 - set also these two blank and no liquids
28:09 - true so we don't have to have image on
28:11 - all of the products
28:13 - and then one field called thumbnail
28:15 - we're going to generate the terminal
28:17 - based on image very soon i'll show you
28:19 - how we do that
28:21 - and the last field is the date
28:23 - time field with autumn now add set to
28:26 - true so when we create a new product in
28:28 - the backend it would automatically fill
28:31 - the date time field so we know when it
28:33 - was added to the database
28:35 - then i can copy these two
28:40 - i can actually copy all three of these
28:44 - paste them down here but we don't want
28:46 - to order this by name we want to order
28:47 - by the newest
28:49 - so copy
28:51 - minus date edit so we get them in
28:53 - descending order
28:54 - the string can also be self.name
28:58 - but here i also need to append
29:01 - self oops at the curly braces
29:04 - self.category.slug
29:07 - so now we get this log based on this
29:10 - category field and here we also need a
29:13 - few more get no functions we need one
29:16 - for f get image
29:20 - self
29:21 - here we check if we have the image in
29:24 - that field and if you do we return the
29:27 - whole address so it's easier to use in
29:29 - the front end and then we just say
29:32 - self.image.url
29:34 - if not we can just return an empty
29:37 - string
29:38 - and then we want the similar for the
29:40 - thumbnail get thumbnail
29:42 - if self dot thumbnail
29:45 - now we can just return the url to the
29:48 - thumbnail
29:49 - else
29:50 - and we first need to check if we have
29:52 - the image because then we need to
29:54 - generate the thumbnail
29:56 - and if you have it we can say
29:58 - self.thumbnail which refers to this
30:00 - field
30:01 - then we call a function called make
30:03 - thumbnail and pass in the image we have
30:07 - for this and when that's done we say
30:09 - self.save so it's saved in the backend
30:12 - or in the database
30:14 - and then we can return the address here
30:17 - but if the product doesn't have an image
30:20 - we just need to return empty string
30:23 - and now the last thing for this model is
30:25 - to create the make thumbnail
30:28 - so def
30:30 - make thumbnail self and image
30:33 - and we also need to set the default size
30:35 - to 300 times 200 pixels wide
30:38 - and then we're going to use the image we
30:40 - imported at the top here to create a new
30:44 - object based on this image
30:48 - just convert it to rgb so we are certain
30:50 - that everything is okay with the picture
30:53 - and we just say m.thumbnail and pause in
30:56 - the size we get up here
30:59 - so thumbnail is a in a built-in function
31:01 - in
31:02 - image there is a thumb i o and use the
31:06 - byte style we imported at the top
31:09 - and we save the image within this
31:12 - information
31:13 - as a jpeg
31:14 - and quality is just at 85 because this
31:17 - is just a very small thumbnail
31:20 - and then we need to create a thumbnail
31:23 - using the file we imported from django
31:26 - core files
31:28 - and we pass in image.name and now we
31:31 - just return
31:33 - thumb nail
31:35 - and save
31:36 - so now we will set the thumbnail to the
31:39 - image or the terminal generated and save
31:42 - it and return
31:44 - so now we can update the database again
31:47 - run the make migration script
31:50 - create product model
31:53 - and migrate
31:54 - great so now everything there is working
31:57 - perfect
31:59 - so now i can run the server again so i
32:01 - have it running in the background
32:05 - and i can go back here and set this task
32:07 - to done
32:08 - and sorry i just forgot one thing i need
32:11 - to fix the uploads folder so if i go to
32:15 - settings.pi we just need to tell django
32:18 - where to put the files
32:20 - first is that media url
32:22 - to this this will be appended to the end
32:24 - of the address of the server
32:27 - and the media root is where located on
32:30 - the server we're going to upload the
32:32 - images so just paste there slash media
32:36 - so now we can save we don't have any
32:38 - errors and everything looks okay perfect
32:43 - and then to use the the media in the
32:46 - front end we just need to go to urls and
32:48 - do a little change here as well
32:50 - so first we need to import the
32:52 - possibility to use the settings here in
32:55 - the urls file
32:57 - and we need to use a function called
32:59 - static from urls
33:01 - and at the end of the url patterns we
33:03 - add static use the media url and just
33:07 - tell django where the document root is
33:10 - this won't be used when they're going to
33:11 - use live because they will use a
33:13 - different server
33:15 - so we are still going to see some
33:16 - progress in the front end so it will be
33:18 - a little bit more exciting
33:21 - but we can now continue to the next task
33:24 - which is create a serializers and views
33:26 - for the project over products the
33:29 - serializer is where we get the
33:31 - information from the database and turn
33:33 - it into json so we can use it in the
33:35 - front end
33:36 - and to create the serializer we just
33:39 - scroll up and find the product app
33:42 - create a new file serializers.pi
33:46 - first we import serializers from the
33:49 - django rest
33:50 - framework now we can import the category
33:53 - and project model since we are inside
33:56 - inside the same folder as mods.pi we can
33:58 - just say those models and python will
34:00 - fix this for us
34:02 - then we create the product serializer
34:06 - and posin serializer dot model
34:08 - serializer
34:09 - to configure this we use the class meta
34:13 - just like the models
34:14 - and we say model equals product because
34:18 - we want to use the product model to
34:20 - get information
34:22 - and then i just configure what fields
34:24 - we're going to use in the front-end
34:26 - fields
34:29 - this is tuple
34:31 - and then we want the id the name
34:34 - to get absolute url function so we get
34:37 - it directly here
34:39 - the description the price
34:41 - get image and get thumbnail so if you
34:44 - have an image and when we call this for
34:46 - the first time the in terminals will be
34:48 - generated for us
34:50 - so this can be saved
34:53 - next we need to create a view set so we
34:55 - can actually tell django
34:58 - what we are going to put in or get from
35:00 - that model
35:02 - so from dot serializers import
35:06 - product serializer
35:08 - and i also need to import a few things
35:10 - from the rest framework i'm going to
35:12 - import api view
35:15 - and import response from rest framework
35:18 - dot response
35:20 - and i need to import a product from
35:22 - models
35:23 - and then i want to create a view set for
35:25 - getting the latest products which are
35:28 - going to show on the front page
35:31 - so
35:31 - create a new clause called late test
35:34 - products list and pausing api view this
35:36 - is generic views built inside the django
35:40 - rest framework helping us do all of this
35:42 - magic then i want to create a new
35:45 - function called get so we can override
35:48 - that functionality and do a little bit
35:50 - changes
35:52 - and we get the product from the database
35:54 - by saying products equals product
35:56 - product.objects.all
35:58 - and then we just want the first four or
36:01 - the latest products
36:03 - and then to convert this using the
36:05 - product serializer is a serializer equal
36:08 - product serializer plus in the products
36:11 - and say man equals three because we have
36:13 - more than one object
36:16 - and then we just return response and
36:18 - position serializer.data
36:23 - and we want a separate urls file inside
36:26 - here to clip keep things still tidy as
36:29 - possible
36:31 - from
36:31 - django.urls import port and include
36:37 - and from dot views import latest product
36:41 - list
36:44 - url patterns
36:47 - so this is just the same as the other
36:49 - file it's just more clean to have it a
36:51 - separate file for each of the models
36:53 - know each of the
36:55 - each of the django apps
36:57 - actually i can say from product import
37:00 - views so it's a little bit easier to
37:02 - separate them later
37:05 - and then put
37:07 - late latest products
37:09 - views dot latest products list as view
37:13 - and save
37:15 - and then we just need to import this to
37:17 - the other url spy file so at the bottom
37:20 - here we say part
37:22 - api slash b1
37:25 - include
37:27 - product
37:29 - dot urls
37:32 - and save
37:33 - so everything still seems to be okay
37:35 - here
37:36 - i just go to the browser
37:38 - api
37:40 - b1
37:42 - and i don't get anything there but if i
37:45 - go to latest
37:46 - products
37:48 - it's empty because they don't have any
37:50 - products in the back end yet
37:53 - so if you want to create a few products
37:55 - we need to go back to visual studio code
37:58 - and inside the admin.pi file in the
38:00 - products app you need to say from dot
38:03 - models import
38:05 - category and product
38:08 - and admin.site register category
38:13 - and admin dot site register
38:16 - product so if you now go back to the
38:19 - admin interface
38:21 - front page here you'll see that these
38:23 - two appeared here
38:25 - perfect
38:26 - so we can now add summer
38:29 - summer with lower cases
38:31 - and winter
38:33 - winter
38:34 - so now we have this hair
38:36 - great
38:37 - and we can create a few products
38:41 - summer
38:42 - brown leather
38:44 - brown leather
38:48 - the desk 199.
38:51 - and just select image
38:54 - just go in here
38:57 - select that one
38:58 - open save
39:01 - so now we have one product there
39:04 - you can create one in the winter as well
39:07 - warm
39:08 - jacket warm check it
39:11 - the desk for this product
39:15 - 2.99
39:18 - and select the winter image
39:20 - and save
39:22 - and if i now go to the latest hair
39:24 - refresh you'll see that we get
39:26 - information about this product so we get
39:29 - the name
39:30 - the url the description price and the
39:33 - link to the images if i open this in a
39:35 - new tab you'll see that we can see the
39:37 - full size
39:38 - and also
39:40 - the
39:40 - thumbnail great
39:44 - so now i can go to the tool list again
39:48 - as a test task to done
39:50 - so now we can finally do some work on
39:52 - the front and again we're going to show
39:54 - the latest products on the front page
39:57 - so if i just go to home.view
40:01 - first i just paste the code to show the
40:03 - header with the welcome to check that
40:06 - information
40:07 - and then below here i want to list the
40:10 - products
40:11 - the first i created deep class column is
40:14 - multiline so i can have the title and
40:16 - also the products next to each other
40:18 - below there
40:21 - so then i paste a little bit more code
40:23 - the plus column is 12 it fills out the
40:25 - screen
40:26 - h2 which is size 2 which is medium sized
40:30 - and is centered so the latest product
40:32 - stays on the center of the screen
40:35 - then i create a product and for each of
40:39 - these columns i want to look through the
40:41 - list of products we are going to get
40:43 - very soon
40:44 - to do that we say v4
40:47 - product in latest
40:50 - products oops products
40:54 - and you see now here i've got an error
40:56 - this is because django no view expects
41:00 - that each of these
41:01 - elements are unique so you need to find
41:04 - an attribute to the product id
41:07 - the point key
41:10 - product
41:11 - dot id
41:14 - so for every iteration we bind the data
41:17 - key to the id which should be unique for
41:20 - each product
41:22 - just close that one
41:24 - div class
41:26 - box so we get a little bit shadow around
41:28 - product
41:30 - and at the top i want the image figure
41:32 - class image and before so we get a
41:35 - little bit space below the image down to
41:37 - the text
41:39 - and to insert the image we just say mv
41:42 - bind src
41:44 - product dot get thumbnail and this is
41:47 - the whole url to the image
41:49 - we could use a shortcut to bind it by
41:52 - just saying colon src if we wanted to
41:56 - we can close the figure
41:58 - then we want to show a little title h3
42:01 - clause is size 4 and then we show the
42:03 - name by using the curly brackets just
42:06 - like in django as a product dot name
42:09 - below the name i want to show the price
42:12 - this is just a little b with each size 6
42:15 - has text gray
42:16 - and then the dollar sign product.price
42:21 - and then the last thing i want to add a
42:22 - button to review details
42:24 - but since we don't have that yet we can
42:26 - just write view details
42:29 - close that one
42:30 - if i save now and go back
42:33 - first of all i get an error because i
42:36 - forgot to close one of the divs
42:39 - but it won't work because we haven't
42:42 - created a function to get the
42:43 - information from the backend
42:46 - so this time we need to use excels
42:50 - so first and down in the script i say
42:52 - import xios from
42:55 - excels
42:58 - and then below
43:00 - there is a data because you need a new
43:02 - object return
43:05 - and latest product and create an empty
43:08 - list
43:10 - column there it's low here i want to go
43:13 - into one of the life cycles hooks of
43:16 - view called mounted so when the this
43:19 - page is finished we call this code
43:22 - and that is this dot get latest products
43:28 - and then we create that method below
43:31 - here in a new object methods
43:36 - like that
43:38 - and in here we call excels xcos
43:43 - dot get
43:45 - api slash v1
43:48 - slash latest products
43:54 - and when that's done we get a response
43:57 - back from the server
44:00 - and then we can just this dot latest
44:03 - product equals
44:06 - response dot data because there's a list
44:09 - of objects so it's very easy to use like
44:12 - this
44:13 - and if you get any errors we can just
44:15 - show them in the console for now you can
44:18 - fix this later in the video
44:20 - and a little thing too i want to do is
44:22 - to create a simple style object at the
44:24 - bottom because on the image i want to
44:27 - remove the spacing around it so it looks
44:29 - a little bit more pretty
44:32 - it's just margin top minus 125 same with
44:36 - the left and the right
44:38 - so if we go back now it still won't work
44:40 - because we try to just go to slash api
44:44 - so here we could write the whole address
44:47 - to the server but i want this to work by
44:49 - default
44:51 - to do that i need to go into main.js
44:56 - as you can see here we haven't imported
44:58 - excels
44:59 - anyway so we need to import it here and
45:02 - tell you to use it
45:04 - so import
45:06 - excels from
45:08 - xcos
45:10 - and then below here i say
45:12 - excels.defaults
45:13 - base url and then the address to the
45:16 - server which you have running down here
45:19 - and then after router i say excels
45:23 - and save
45:24 - so everything should be working and if i
45:27 - just go back here now we have already
45:29 - gotten the latest products from the
45:31 - server
45:32 - perfect
45:34 - so now i can go to the to-do list one
45:37 - more time and said done
45:40 - next now we're going to make it possible
45:42 - to click view details and go in to the
45:44 - detail page of a product
45:47 - okay and the first thing you need to do
45:48 - done is to create a new view set for the
45:51 - detail of
45:52 - the of the product
45:54 - so go back to views.pi
45:57 - and then we create a new clause product
46:00 - detail and also going to use the api
46:02 - view here
46:03 - but instead of the get function we're
46:05 - going to use a function called get
46:07 - object and here we're going to pass in
46:09 - the categories log and also the product
46:11 - slug
46:13 - here we need to check if the object
46:15 - exists pressing try
46:19 - and then we say return
46:20 - product.object.filter
46:22 - so we filter every product that is
46:24 - inside a
46:26 - category and then we get the slug or the
46:30 - product based on the products like we
46:32 - get up here
46:34 - and if it doesn't exist we will get an
46:37 - exception so accept
46:40 - product
46:42 - that does not exist
46:44 - this is the correct exception for this
46:48 - and then we want to erase the http 404
46:51 - error
46:52 - and to use the 404 error we need to
46:55 - import it you can remove this render and
46:58 - just from django.http import http 404.
47:03 - so this is now a function and then we
47:05 - want to override the get parameter or
47:08 - function like we did here
47:10 - so def get get the request pass in the
47:13 - slugs and format set to none
47:17 - and then we get the product the same
47:18 - product equal self.get object which
47:21 - calls this function and pass in the
47:23 - slugs
47:25 - so we don't have to reuse this every
47:28 - time
47:29 - and we still want to use the product
47:30 - serializer so we get all of these fields
47:33 - for the full version as well
47:36 - then we can just say return response and
47:38 - pass in the serializer just like up here
47:42 - and save
47:43 - next we need to go into the urls file
47:46 - and below here we create one more
47:49 - path products slug it is a field or
47:53 - string
47:54 - and here django nara
47:56 - requires that you pass in a slug which
47:58 - we call category slug and once local
48:01 - products log these are references to
48:04 - these two and then we just say we're
48:07 - going to use views dot product detail
48:09 - i'm going to render it as a view
48:12 - and save
48:14 - so now we have a view for showing the
48:16 - product
48:18 - next is to create a view page
48:21 - it's not a view like in django view but
48:23 - viewers in view
48:25 - so if you just go down here and into
48:27 - views create a new file called product
48:31 - dot view
48:33 - in here we always begin with empty
48:35 - template and empty script
48:38 - name can be set to product
48:41 - and we can say data
48:44 - return
48:45 - can just be empty for now
48:47 - and we can import excels
48:51 - from excels
48:53 - because you know we want to use this
48:56 - first i like to
48:57 - create one div class element page
48:59 - product just don't know which page we
49:01 - are on
49:02 - and then create a div class column it's
49:05 - multi-line
49:06 - and then to the left on the screen we
49:08 - have a div class s9 which is almost a
49:11 - whole width to show the image the title
49:14 - and the description
49:16 - first we showed image just like
49:19 - in the list of protests but here we use
49:21 - mb6 we get even more space below
49:24 - and we bind src attributes to project
49:27 - get image instead of get thumbnail
49:31 - and below here i want to show the title
49:34 - so h1 clause title type and add this
49:37 - clause we get it
49:39 - very big and pass in project.name
49:42 - and below there i want to show the
49:44 - description
49:45 - now you can close this column create one
49:48 - more div close
49:51 - column
49:53 - oops s3
49:56 - close that div first you just want to
49:59 - show a subtitle with information about
50:01 - the product
50:03 - then i want to show the price and i
50:05 - prefix it with a dollar sign
50:09 - and then i add the button and input
50:12 - field for the add to cart functionality
50:15 - this is a has add-ons which means that
50:17 - the button and input value will be into
50:19 - each other
50:21 - i use input type number because i expect
50:23 - to get the number in the back end and
50:26 - class input so it gets pretty styling
50:28 - and the minimum i allow is one and then
50:32 - i bind the model
50:33 - this field to a data object called
50:36 - quantity
50:37 - so if i now go down here inside data i
50:41 - can say
50:42 - quantity
50:44 - one sorry not these quotes like that
50:49 - so this is default now to one and it
50:51 - can't go below
50:52 - one and then below there i create a new
50:55 - clause control and have simple button
50:57 - add to cart i will fix this later in
51:00 - this video
51:01 - and then to get the product from the
51:04 - server we need to use axios
51:06 - and he's use the mounted function again
51:09 - so mounted
51:12 - this dot get project
51:16 - oops
51:17 - methods
51:20 - get products
51:23 - like that and the first thing i want
51:25 - here is to get the categories log from
51:28 - the url we are on
51:31 - and i also want to get the products like
51:34 - before i do anything more here i just
51:35 - want to import this page into the router
51:38 - so we can visit it and see that
51:40 - everything is working
51:43 - and i want to add one more
51:45 - product here which can be an object just
51:49 - so things here will work and not crash
51:51 - the site
51:53 - if i now go to router you see here that
51:56 - you have the home page and the about
51:58 - page
51:59 - but we now want to import the product
52:02 - page we just created so import project
52:06 - from dot slash views slash
52:10 - project dot view
52:13 - then we want to append it at the bottom
52:15 - here because
52:16 - this has the same url structure as a
52:18 - project but we want to use dynamic
52:21 - routes and that's best to have at the
52:22 - bottom
52:24 - so create a new object this
52:27 - part
52:28 - and here is a slash colon category slug
52:33 - this is the name of the parameter
52:36 - slash colon product slog so just easier
52:40 - to separate the slopes from each other
52:44 - name project
52:47 - and the component we're going to use is
52:50 - product which we imported here a
52:53 - component and page is almost the same
52:55 - thing
52:56 - and save so everything here seems to be
52:59 - okay
53:00 - so for now go to the home page to
53:03 - replace the view details
53:05 - label with the button
53:07 - like that
53:09 - now we have a router link and we bind it
53:11 - to attribute called
53:12 - to and here we pass in the product that
53:16 - get absolute url which we get from the
53:19 - backend
53:20 - the button is dark and has empty force a
53:22 - little bit space
53:24 - above the button
53:26 - so if we save this now
53:29 - go back you see this turn into button
53:32 - and at the bottom of the left screen you
53:34 - will see winter slash warm jacket
53:37 - if i click it
53:39 - get an error because this does get
53:42 - product is not a function okay
53:46 - if i go back to product.view
53:50 - this should be get product
53:53 - just refresh okay so there's no errors
53:56 - perfect
53:57 - if you see these warnings here i'm going
53:59 - to fix this later it's just because the
54:01 - winter the category and login similar
54:04 - doesn't exist yet
54:07 - so now we need to continue this and get
54:09 - the product
54:11 - excels
54:13 - dot get
54:16 - slash api v1
54:19 - and to get the products we now say
54:22 - products
54:24 - then we want to pass in
54:26 - the cat node products log
54:28 - but first the category slug
54:31 - dollar sign curly bracket like that
54:34 - slash
54:35 - dollar sign curly bracket
54:41 - and this
54:42 - but this formatting doesn't work if you
54:45 - use this regular quotes so we need to
54:48 - replace it with this
54:52 - like that
54:53 - so now we get the correct url
54:57 - and then we will get the new response
55:01 - back from the server
55:04 - and then we can just say this dot
55:05 - product equals response dot data
55:10 - and if there are any errors you just
55:12 - console log errors you can show it in
55:15 - the console if you want to know what
55:16 - error is
55:18 - so if we save now go back here
55:21 - refresh
55:22 - okay there's an error
55:24 - dot done is not defined
55:27 - sorry i forgot to add the dot
55:32 - refresh and now we got information from
55:34 - the servers now we have the image title
55:37 - description
55:38 - and also the price
55:40 - if i go back to the front page now click
55:42 - this product instead it everything here
55:45 - has changed
55:46 - perfect
55:49 - so now i can set this
55:51 - to done this to dawn and this to done
55:54 - great
55:56 - done
55:58 - next now is to set up the view x or
56:01 - state management we need this to make it
56:03 - possible to add things to the cart for
56:06 - authentication and a lot of other things
56:10 - so if you now go back and find store
56:14 - index.js
56:16 - i have already created a store this
56:18 - comes default from view
56:20 - state is the
56:22 - variables or informations
56:24 - mutations is synchronous
56:27 - mutation students variables because you
56:29 - can't just change them directly
56:33 - actions will be asynchronous
56:35 - function to change it
56:37 - modules i'm not quite sure
56:41 - so inside here we create a new couple of
56:44 - new products
56:46 - so in here we create a new
56:49 - so in here we created a couple of new
56:51 - properties
56:53 - first we create a new object called cart
56:55 - and inside there we have one list called
56:58 - items
57:00 - and then we have is authenticator we can
57:02 - just set it to false so it's done
57:04 - and same with the token this will be
57:06 - used later when we add login
57:09 - and it's loading set defaults because we
57:11 - want to show a loading bar when we're
57:13 - going between products anything into the
57:16 - cards in my cart and similar
57:19 - i can just save this
57:21 - and i can set this to done because
57:24 - that's actually setting up the store
57:25 - like that
57:27 - so now we need to make it possible to
57:28 - add things to the cart and then we need
57:30 - to add some functionality to view x
57:33 - and we do that inside the mutations
57:36 - first i want to create a function called
57:38 - initialize store this is so we can store
57:41 - things in the local storage of the webs
57:44 - of the browser
57:46 - first we check if the local storage
57:49 - exists with an item called cart and if
57:52 - it doesn't we just create it
57:55 - and if we get it from the local storage
57:57 - we can state.cart which is this
58:00 - json.parse and then we get the object
58:03 - from the local storage
58:05 - but if it doesn't exist we need to
58:07 - create it
58:09 - and then we say local storage dot set
58:11 - item
58:13 - cart which is the name of the object and
58:15 - then we stringify
58:17 - this object
58:20 - and then one more
58:22 - add
58:23 - to cart
58:25 - state
58:26 - and here we want to pass in
58:28 - the item we want to add to the cart
58:32 - first we create a new variable called
58:35 - exists so here we check if the item we
58:38 - are trying to add to record exists in
58:40 - the chord
58:42 - from before
58:43 - so we add a test here if exists that
58:46 - line so if it's larger than zero then we
58:49 - know that item is already in the course
58:53 - so we get the first object in this list
58:55 - since it's already in a list i just do
58:57 - it like this as a quantity
59:00 - parse end get the quantity
59:02 - and add the quantity we try to add from
59:06 - the
59:08 - this form
59:09 - here so this is a 10 there it's
59:11 - increased by 10
59:14 - but if it's not in the card you need to
59:16 - add it to the cart
59:19 - and to do that we just
59:21 - state.court.items to push the item and
59:24 - so all of the information we get will
59:26 - just be pushed right into the cart
59:30 - and then we say local storage set item
59:33 - cart and then we stringify the whole
59:35 - object so the next time if you just
59:37 - refresh the browser now everything will
59:39 - be stored to the next time
59:41 - perfect
59:43 - so then i can set this to done
59:46 - initialize the store in app.view
59:50 - so then i need to go back to app.view
59:53 - because the first time or yes when we go
59:56 - into the page we want to make sure that
59:58 - the store and cart is existing
60:01 - so in here i created one object called
60:04 - cart so i have it available in this
60:07 - template because we're going to use it
60:09 - up in the menu
60:11 - and just like we have a hook called
60:13 - mounted we also have something called
60:15 - before create so before this is created
60:18 - we want to initialize the store
60:21 - and to initialize the store we say this
60:23 - dot store dot commit initialize store
60:26 - commit is used to call the actions we
60:30 - have here no the mutations not the
60:32 - actions
60:33 - so if i just go back here now we now
60:36 - initialize the store and we can create
60:38 - or
60:39 - and we can close the before create
60:42 - so then i can set this to done
60:46 - and then i just want to show the card
60:48 - length up in the menu so if i go back to
60:52 - app.view again
60:54 - and scroll up here
60:56 - after the chord we said that two
60:59 - parenthesis and chord total length
61:04 - this is a computed value
61:07 - and just like we have methods and
61:09 - variables similar we have something here
61:12 - called
61:13 - computed
61:14 - these are calculated
61:17 - variables based on things around on the
61:19 - whole page
61:22 - so we want to create one called a cart
61:24 - total length
61:26 - and every time the
61:27 - car changes this will also automatically
61:30 - update
61:31 - first you create a new variable let
61:34 - total length set it to zero
61:36 - now we want to loop through all of the
61:38 - items in the chord
61:41 - and for each iteration we just say total
61:44 - length plus equals this dot chord items
61:46 - dot quantity
61:48 - return total length
61:51 - and save
61:52 - if we now go back here you'll see that
61:55 - we don't have anything in the cart
61:57 - so then we need to make sure that when
61:59 - we click this this is updated
62:01 - automatically
62:02 - so
62:03 - if you see here now in the to list we
62:05 - have add we already have this button but
62:08 - we need to make it possible
62:10 - to call
62:12 - the
62:13 - the store with ux
62:17 - so if i just go here say add click
62:21 - add to cart
62:24 - and i can copy this
62:26 - go down to methods
62:28 - and below the get product i create it
62:30 - like this
62:32 - first i checked that the the
62:35 - the value inside this.quantity
62:37 - which is the field a pair actually is a
62:40 - number
62:41 - and if it isn't the number i just set it
62:43 - to one if anyone has managed to changed
62:47 - it somehow
62:49 - and then i create a new object const
62:51 - item
62:53 - product which is set to the product we
62:56 - are on and the quantity is a reference
62:58 - to the quantity up here
63:01 - and then to call the store we just said
63:03 - this dot store dot commit add to cart
63:06 - and plus n item
63:08 - so if you now go back to here we call
63:11 - this function and pause in item and this
63:13 - code will execute
63:15 - so if you now just refresh add to cart
63:19 - that did not work
63:21 - okay
63:23 - console.log
63:25 - add
63:26 - card just test that this actually is
63:28 - clicked on
63:31 - yes so why isn't this working
63:35 - pass in this product the quantity
63:39 - okay so i think i forgot to do one thing
63:41 - and that is inside mounted hook on the
63:44 - upper view
63:46 - i just said this dot cord equals distort
63:49 - store dot card because the card total
63:52 - length calculates this
63:54 - so now you see five there and if you
63:56 - click one more it also increases so now
63:59 - it's working there perfect
64:04 - so then i can go back to the
64:05 - product.view just to remove this comment
64:10 - and next i want to make it possible to
64:12 - show the little uh pop-up saying that
64:14 - you have added the product to the cart
64:17 - and to do this i just need to stop view
64:20 - here and install a new package called
64:23 - npm install
64:24 - bulma toast
64:30 - and now we can say mpn run serve again
64:34 - and go back to vs code
64:36 - and first at the top here below axios as
64:39 - i import curl bracket toast from bulma
64:43 - toast
64:44 - and inside here
64:46 - below at the bottom we have added the
64:49 - product to record we call toast set the
64:52 - message we want to show
64:54 - the type which is class which will show
64:56 - a green it's dismissable pause on hover
65:00 - duration which is 2000 milliseconds and
65:03 - bottom right of the screen
65:05 - and save
65:06 - so if i now click here again so refresh
65:10 - click the product was added to the cart
65:13 - great
65:14 - now i have added to cart functionality
65:19 - and i can set this task to done i just
65:22 - want to move these tasks a little bit
65:25 - because i want them
65:27 - below here
65:29 - below there
65:30 - so now i want to implement a loading bar
65:33 - so when we click product and things go
65:36 - slow between the server i want to show a
65:38 - loading bar so you know what's going on
65:41 - so if i go into store
65:44 - you know remember that we added this but
65:46 - you need to make it possible to change
65:48 - this so i create a new action here or
65:51 - mutation
65:52 - so set is loading
65:55 - so we just
65:56 - pause in false or true from the one of
65:59 - the pages
66:01 - and then if i can go to product for
66:04 - example
66:05 - and at the top of this function
66:08 - i can say this dot store commit so now
66:11 - we set set is loading to true
66:13 - and when this excels is finished we can
66:16 - say false like that
66:20 - but to make sure that we don't call
66:23 - false before it's finished we need to
66:24 - set this to a sink
66:27 - and
66:28 - a wait
66:30 - so when this is finished this code will
66:33 - execute
66:35 - and save
66:36 - so nothing will happen now because we
66:38 - haven't added the loading bar to the
66:39 - screen yet
66:41 - so if i just go to app.view
66:45 - scroll up
66:47 - above this section create a new div
66:50 - is loading bar has text center
66:53 - and bind this
66:55 - clause attribute and set is loading if
66:58 - state is loading is set to true so if
67:02 - this is set to true the loading wire
67:04 - will show
67:05 - and here i just add a div class lds dual
67:08 - ring
67:09 - and we need to add some styling to this
67:12 - so if i just go down at the bottom and
67:15 - find the style object i've already
67:17 - prepared this
67:19 - so we set lds dual ring display inline
67:22 - block width and height is set to 80
67:26 - and then after this we had content
67:28 - empty set display block
67:31 - set width and height of the circle to
67:33 - 64. more genus 8
67:35 - border radius and the color
67:38 - i will add this to the github so you can
67:40 - easily get it from there if you don't
67:41 - want to write all of this yourself
67:44 - then we set the keyframes because we
67:46 - wanted to go down up and circle or
67:49 - rotate
67:51 - we set this automatically to hidden and
67:53 - height to zero but when we overloading
67:56 - the height is set to 80.
67:59 - so we save this
68:01 - so if you save this now
68:03 - go here refresh you see this here a
68:06 - little bit while we wait for information
68:08 - from the server
68:11 - so now we have a loading bar
68:14 - set this to done
68:16 - and if i want to use this other places
68:19 - like the front page i can do that
68:22 - just copy that line
68:24 - find where we are loading this
68:26 - a sync
68:29 - and set it to await
68:32 - true
68:34 - and false
68:36 - i could set it in here but if we got an
68:38 - error then we need to set it to
68:41 - false in there as well so it's just
68:43 - easier to show it or remove it after
68:46 - so for now front
68:48 - refresh you see this very fast
68:52 - great so then we can continue
68:55 - to
68:56 - make a possible to set the document
68:58 - title
69:00 - because as you can see here it says
69:02 - check gets view and we want to make it
69:04 - possible to click a product i want to
69:07 - say
69:08 - black no brown leather instead of just
69:10 - jackets view which doesn't make any
69:12 - sense
69:14 - so if i for example can go to
69:16 - project.view
69:18 - and after i've got the product from the
69:21 - server
69:22 - i can set document.title
69:24 - this.product.name
69:26 - and pipe it into jackets like that
69:30 - and the front page
69:32 - you can set this in the mounted
69:35 - here you can just say
69:39 - home like that
69:41 - save
69:42 - so if you now refresh you will see brown
69:44 - leather pipe jackets if i go to the
69:47 - front page it says home
69:49 - great
69:50 - so this will be implemented all pages we
69:53 - create from now on
69:56 - so i can set this as well to done
69:59 - so now i want to make it possible to
70:01 - click winter and summer appear because
70:04 - now nothing happens when i go to these
70:06 - pages so the first thing i need to do is
70:09 - to go back to views.pi and create a new
70:12 - view set for the
70:14 - category so just category detail just
70:17 - like here
70:19 - and i can copy most of this
70:22 - just paste it
70:24 - remove products like okay and instead of
70:27 - saying product area of course a category
70:29 - because we want to get the category not
70:31 - the product
70:33 - i can remove the filter
70:35 - as a slug is
70:38 - category slug
70:41 - and the same with this one can be copied
70:45 - and get remove the product slug
70:48 - remove the product slug
70:50 - and here we want to use something called
70:52 - a category serializer which you are
70:54 - going to create very soon
70:59 - copy and paste and save so now we have
71:02 - the view sets but we need to create the
71:04 - serializer for this as well
71:07 - so below the product serializer
71:11 - we create a class called category
71:13 - serializer and pause in this one more
71:15 - time
71:16 - then we say class matter
71:20 - model equals category
71:23 - and then the fields we want to use is id
71:27 - name
71:28 - slug and we also want to get all of the
71:30 - products connected to this category
71:34 - and to make sure that we get all the
71:36 - data connected to the product as well i
71:39 - can pass in products equals product
71:41 - serializer and then money equals true
71:44 - and i will use this
71:46 - product serializer to get the data and
71:49 - pass it in here as well
71:51 - and i can copy to get absolute url
71:55 - i don't need the slug actually because i
71:57 - get it in here
71:59 - save
72:01 - then we need to import it here
72:03 - so we just pot
72:05 - products
72:07 - slug category slug
72:11 - views dot category detail dot s
72:15 - view
72:17 - and that's it for the back end
72:19 - so if you now go down to view again we
72:22 - need to create a page for showing the
72:24 - category so here's the new file
72:26 - category.view
72:28 - so begin template div class
72:32 - page category
72:35 - close it
72:37 - script
72:38 - name is category oops category
72:43 - and i know we're going to use xco so
72:46 - import
72:47 - excels from
72:49 - excels
72:51 - and i want to show the toast if you get
72:52 - any errors we're going to show the
72:54 - information that we got an error from
72:56 - the server
72:57 - and in here is data
73:00 - return
73:02 - create a new object called category
73:04 - and a list called products inside there
73:07 - and up in the template you also want a
73:10 - div
73:10 - to show the title and the product inside
73:13 - there
73:15 - so it's just like the latest product
73:17 - this is size 2 hashtag center and just
73:20 - category.name
73:22 - i'm about to get the category from the
73:25 - back end we create there go into the
73:27 - mounted hook
73:29 - mounted
73:30 - and call this.getcategory
73:32 - and now we need to create this function
73:35 - methods
73:37 - get category
73:40 - and we can set this to a sync as well
73:42 - because we want to use the loading bar
73:44 - here also
73:46 - but first we can get the categories like
73:48 - from the route parameters just like we
73:50 - did in the detail page for the project
73:54 - then we can set the is loading to true
73:58 - and to false defaults after
74:00 - excel's request
74:02 - axios
74:05 - dot get
74:07 - and here i just pass in the route to the
74:11 - category use this one inside there
74:15 - dot then
74:17 - response
74:20 - create a fat arrow function
74:22 - this dot category
74:25 - equals response dot data and here we got
74:28 - the category and also the products
74:31 - and when we get this from the server you
74:33 - can set the document title to
74:35 - this.category.name
74:37 - pipe jackets
74:39 - and if there are errors you just say
74:41 - catch
74:42 - error
74:44 - console.log
74:46 - printed in there
74:48 - but since we have the toast available we
74:50 - can show
74:51 - something went wrong please try again
74:53 - and then you show a red information
74:58 - so now everything there is okay but we
75:00 - still need to show the products
75:02 - but we can first import it to the router
75:06 - below here import category
75:10 - from dot slash views
75:12 - category.view
75:16 - i can make a copy of this it will be a
75:18 - little bit simpler
75:20 - because we don't need product slug we
75:22 - can just have it like this
75:24 - remove the trailing slashes
75:27 - category
75:30 - category
75:32 - okay so i have an error in the python
75:35 - code
75:36 - name category is not defined
75:39 - and that's inside the
75:41 - views.pi sorry i forgot to import
75:45 - the
75:47 - category model of course
75:51 - for now refresh
75:52 - something went wrong i getting 500 error
75:55 - from the server
75:57 - let's check it out what that can be
76:00 - category serializer
76:02 - forgot to import that as well sorry
76:05 - save
76:07 - refresh
76:08 - now we get summer but we don't have any
76:10 - product to show there yet
76:12 - but if i go to the front page
76:15 - to home.view
76:18 - i can just make a simple copy of this
76:22 - code
76:23 - go to category.view
76:26 - paste but instead of saying latest
76:29 - product is category dot
76:32 - products
76:33 - and save
76:35 - and then they show there but the problem
76:37 - now is that we are uh
76:40 - we are duplicating a lot of the code so
76:42 - this should actually be turned into a
76:44 - component and that is the next task in
76:47 - the list i think
76:49 - yes convert product to a component
76:53 - so
76:54 - inside the folder components we can
76:56 - create a new file
76:58 - product box dot view so this can be
77:01 - reused all over the page
77:03 - so i can just paste the same code this
77:06 - is the code from the front page if class
77:09 - column is tree we just remove the v4
77:14 - and then script name
77:16 - product books
77:18 - and we need a way to post information
77:20 - from the parent down to the component
77:23 - and then we use something called props
77:26 - and i have one props here called product
77:28 - which is an object so if you try to send
77:31 - in anything else you'll get an error
77:34 - and then the last thing is to go to home
77:38 - and i can just remove this code
77:44 - go back to the product box because i
77:47 - just want it in here so it's just
77:49 - connected to this component
77:52 - so if we save now we should be able to
77:54 - reuse this code
77:56 - so in home dot view
77:59 - we can go to the top here
78:01 - and say import product
78:04 - box from
78:06 - at slash components
78:08 - that is just a shortcut for the root
78:11 - folder of the view project
78:14 - and product
78:16 - box
78:17 - like that
78:20 - and to be able to use it here we need to
78:23 - add it to the list of components
78:26 - and then i want to remove all of this
78:30 - and replace it with this much prettier
78:33 - code
78:35 - sorry one too many dips there so now we
78:37 - just say product box use the same v4
78:41 - but here we should latest
78:44 - test products
78:46 - bind it and we bind
78:48 - product to the product we get here
78:52 - and pause it into the prop here so it
78:55 - can be used here as well
78:57 - if i go back to the front page
78:59 - it still looks the same but the code is
79:01 - reused
79:03 - so i can do the same for the category
79:05 - page if i go back to home
79:08 - copy this
79:12 - like that go to category
79:14 - and then i just
79:16 - paste it in there
79:18 - then i just need to import it
79:21 - import product books from
79:24 - at components
79:27 - slash product books
79:29 - and then just register here components
79:35 - like that and save
79:37 - so now it's much easier to maintain
79:41 - oops typo components
79:45 - so if i now go here
79:48 - there is something wrong latest product
79:50 - sorry
79:52 - did another typo here it should say
79:55 - category dot products
79:58 - save
79:59 - so now we have the same code on all
80:01 - pages
80:03 - but if you look closely now if i click
80:06 - summer winter nothing happens and this
80:09 - is because we need to watch the route
80:11 - for changes because when we switch
80:14 - between two similar dynamic routes the
80:17 - life cycle hooks won't be cold
80:20 - so when i click the winter or summer
80:24 - the
80:25 - mounted hook will not be
80:28 - be
80:28 - clicked or
80:30 - refreshed from view so we need to fix
80:32 - this
80:33 - so below mounted i create a new object
80:37 - called watch so this will watch changes
80:40 - to the route
80:41 - and
80:42 - here we can check that if to the right
80:45 - we're going to is a category then we
80:48 - call this here function again
80:50 - so if we now click save
80:52 - refresh and i click winter the products
80:55 - change the title and similar great
80:59 - so now everything there is okay
81:03 - so now we have the possibility to view a
81:06 - category to get this to done
81:09 - and then we want to make it possible to
81:11 - search we want to add a simple search
81:13 - bar up in the menu
81:15 - and then the first thing you need to do
81:16 - is to add some a new view so first you
81:19 - need to import something more from the
81:21 - rest framework because we need a
81:23 - decorator here here i want to use a
81:25 - simple function best views instead of
81:28 - the class-based views
81:31 - and here we use the decorator api view
81:33 - and we say that we just want to accept
81:35 - post requests to this view
81:39 - search which is the name of this view
81:42 - and then we get the query from the
81:43 - request data and if it's empty it's
81:46 - empty
81:47 - but if query we want to check if it is
81:50 - empty
81:51 - and then we say product equals prodigy
81:54 - product dot object filter and we check
81:57 - if the name contains the query or if the
82:00 - description contains the query so you
82:03 - just need to import this q function from
82:05 - django which means you make it possible
82:07 - to do a little bit more advanced query
82:09 - sets
82:10 - to import it we can scroll up
82:13 - and just at the top here we say from
82:16 - django.db.models import queue
82:19 - you can go down and continue
82:22 - and then we just want to use the same
82:23 - serializer the product serializer and
82:26 - pass in products
82:28 - return
82:30 - and just copy this line
82:32 - like that
82:34 - and if the query is empty we can just
82:37 - return an empty products list
82:40 - and save
82:42 - and then i just want to import this to
82:44 - the urls
82:45 - so at the bottom oh sorry i can be above
82:48 - here since this is a fixed word and not
82:51 - a slug so then we go to slash products
82:54 - search to get information from the
82:56 - server
82:57 - okay so now we have the route so then we
82:59 - can go back to view and continue the
83:01 - development there
83:03 - so if i just find app dot view
83:07 - scroll up
83:09 - and above the nav bar and i want this to
83:11 - be on the other side of the menu to do
83:14 - that i create a new div class app bar
83:16 - starts
83:18 - then a new dave claus with navbar item
83:22 - and then a formatter get action slash
83:25 - search slash search is here on view and
83:27 - not on the back end we should get back
83:29 - to you soon
83:33 - and just like the
83:35 - field has add-ons we have it here as
83:37 - well just like on the add to cart button
83:42 - and at first control input text class
83:45 - input placeholder what you're looking
83:48 - for and give it the name of query
83:53 - whoops looks weird
83:56 - okay like that's around the button close
83:59 - button is success in here we have icon
84:02 - which is just a search icon if it's
84:04 - saved now
84:06 - go back here
84:07 - you will see that we have the simple
84:08 - search here with this icon from front
84:11 - awesome so then we can create the search
84:14 - page which you to go to and click this
84:17 - to create a new view search dot view
84:20 - create a new template and a difficult
84:23 - page search
84:25 - and script tag name
84:28 - search
84:31 - and now i'm going to use excels here
84:33 - and i can import the product box like on
84:35 - the front page and the category page
84:37 - because the product box will also be
84:39 - used here
84:42 - i can create a data array
84:44 - return
84:47 - products
84:50 - this can be a list
84:52 - and then components
84:55 - so we register the product books here
84:58 - and i also want one more product no
85:01 - property here called query
85:03 - and when we open this we're going to
85:06 - mount it and we can set the document
85:08 - title to search
85:10 - and then a pair create some more html
85:13 - this is a div class columns is a
85:15 - multiline
85:17 - and then we have a div for the title and
85:19 - information about which search term you
85:21 - have searched for
85:24 - so search and then search term this will
85:27 - just print the contents of this variable
85:31 - close the div close that div
85:35 - and then below here we can call this
85:38 - component again and just loop through
85:39 - just like on the other two pages
85:42 - so if we save now we can import this to
85:45 - the router so just test it it's working
85:50 - import search
85:54 - from dot slash views
85:57 - search dot view
86:00 - and then again add it to the list here
86:02 - okay copy this one
86:05 - paste it above
86:07 - there
86:08 - search
86:11 - paste there and search
86:13 - and save so you can now go back here
86:16 - i can say check it
86:18 - hit enter
86:19 - search term is empty so there's
86:22 - something wrong
86:24 - or something i have forgotten to do
86:27 - yes in the mount that here we need to
86:29 - get information from the url
86:32 - like that so then we get the
86:34 - location search substring
86:37 - they get all of the parameters based on
86:40 - this url
86:41 - and then we can get the query from the
86:44 - url
86:46 - then we said this.query which is a
86:48 - reference to this to the value of the
86:50 - query in the url
86:53 - and then we can set this dot perform
86:56 - search
86:58 - like that
86:59 - okay just create this functionality so
87:01 - we have it
87:02 - methods perform search
87:05 - save
87:06 - so even now go back here you'll see that
87:08 - they have jacket in there because that's
87:10 - what what we were searching for now we
87:12 - can set this to a sync because we want
87:14 - to use the loading bar here as well
87:18 - true
87:19 - false after the axios
87:22 - so here is the evade excels and then we
87:25 - use dot post because we want to post the
87:27 - query back to the server
87:29 - to this route which we created and then
87:32 - when we get the response we can just add
87:34 - this.product equals response.data
87:38 - save
87:38 - and if you go back now you will see that
87:40 - we got this back from the server
87:43 - your search brown instead we should get
87:45 - a brown leather jacket perfect
87:49 - so now we have a simple search for our
87:51 - store
87:53 - which means we can go back here so this
87:56 - task done
87:58 - great
87:59 - so now we can make it possible to go to
88:01 - the cart so we can see what we have in
88:03 - there it possible to increment and
88:05 - decrement the content and similar
88:08 - but we can start by creating a new view
88:14 - chord dot view
88:15 - create template tag
88:17 - tab class
88:19 - page cart
88:21 - close it
88:23 - script
88:24 - name
88:26 - cart
88:27 - now we can just import this to the
88:28 - router before we continue so it's done
88:32 - make a copy of one of these
88:35 - cards
88:37 - card
88:38 - and i can copy and paste here as well
88:41 - chord
88:42 - chord
88:44 - chord and save
88:46 - so then i can click here we rewrite it
88:49 - here but there are no contents yet but
88:51 - we're going to fix that now
88:53 - so if i go back here i can add the title
88:56 - and div class column
88:59 - so if i save now you will see that we
89:01 - have the title there so everything is
89:03 - working as it should up until now at
89:05 - least
89:06 - and then below the title i create a new
89:09 - deep clause and add a d plus
89:12 - shadow so it's a little bit the shadow
89:15 - around this contents
89:18 - and then i add a simple
89:20 - table
89:22 - set it the full width so it fills out
89:24 - the whole screen
89:25 - and this will only show if there are
89:27 - products in the cart and if there are
89:30 - not
89:31 - you can see here we say we if you use
89:33 - that directive and down here is a vls so
89:36 - if you don't have any products we show
89:38 - this information instead
89:40 - and the table contains the product price
89:43 - quantity total and the symbol empty one
89:46 - for the actions
89:48 - here we're going to use a component
89:51 - we're going to create very soon where we
89:53 - just loop through cart dot items
89:56 - so if you go down here i can
89:59 - import xios from xcos
90:04 - and i can import
90:07 - this cart item we're going to create i
90:09 - just want to make something more here
90:11 - data
90:14 - return
90:16 - cart
90:19 - an object and set the empty list in
90:21 - there so the code up here don't crash
90:24 - and then i can say components
90:28 - so we register this with view
90:33 - and save
90:34 - so now we just want to create this
90:36 - before we continue
90:38 - so up here in the components folder
90:41 - cart item dot view
90:44 - create a template script
90:46 - name cart
90:48 - item
90:50 - and here we want one prop called
90:53 - initial light time because we don't want
90:54 - to change the item we get in so we need
90:57 - to create a new item m and pass it in
91:00 - back later you will understand very soon
91:04 - then we create a new data object which
91:06 - just returns the item
91:08 - and our set the item to the property we
91:11 - get from the parent
91:13 - and we have one method called get item
91:15 - total let's just take the quantity and
91:18 - multiply it with the product price
91:21 - and if you just go up here to the
91:23 - template again
91:25 - paste in a little bit of code
91:28 - first we have a td with router link
91:30 - which is connected to the product get
91:33 - absolute url just like in the product
91:36 - box here
91:38 - and then we just show the product name
91:40 - below there we have the product price
91:43 - the item quantity and then we use this
91:45 - get item total which is the method we
91:48 - created here for calculating the total
91:51 - price
91:52 - to fixed so it's not very many decimals
91:55 - here
91:55 - and then add a button which is not going
91:57 - to work yet
91:59 - but if we save this go back to the cart
92:02 - you don't have any products in the cart
92:04 - but that's because we haven't activated
92:06 - this yet
92:08 - so we can create the mounted who care
92:11 - again
92:12 - like this
92:13 - this dot card equals list store just
92:15 - like we did in app.view
92:17 - so if we save now
92:19 - go back
92:21 - still don't have any products that's
92:24 - wrong because we have eight up here
92:26 - i think it is because uh this value
92:29 - hasn't been set yet this is a computed
92:32 - value
92:33 - so
92:34 - add a new property here computed
92:38 - card total length
92:41 - and then we use something called reduce
92:44 - which is the built-in function in
92:45 - javascript so we loop through all of the
92:49 - functions no items there
92:51 - this is the accumulator and current
92:53 - value
92:55 - and then we just
92:56 - combine them to each other and default
92:59 - value is zero so it just takes zero and
93:02 - plus every time there is a quantity
93:05 - so if we save now
93:07 - now we see the contents here perfect
93:10 - so that means that this
93:12 - function is working as it should
93:16 - like it's just
93:18 - the this value
93:20 - is going up there
93:22 - and then for every time we go through at
93:24 - item it's adding the item quantity
93:28 - okay and below here i want to create a
93:30 - button for going to the checkout and
93:32 - also showing the totals
93:35 - so below
93:37 - here
93:38 - paste in the code div class column is 12
93:41 - and box so i have a little bit shade
93:43 - around that too
93:44 - give this subtitle summary
93:47 - and then we create a new get total price
93:49 - which is a new computer value i'll come
93:51 - back to
93:53 - just to show the total price and then
93:55 - the number of items we have and then
93:57 - below there we have a button to cart
93:59 - slash checkout which will come back to
94:01 - you very soon
94:04 - so i can just scroll down
94:07 - this function is very similar to the
94:09 - total length just that it takes the
94:11 - price
94:12 - and multiplied with the quantity instead
94:15 - so if we save now
94:17 - go back here you'll see that the total
94:19 - is showing here and that you have eight
94:21 - eight times in the cart
94:23 - great
94:24 - so now we can go back here
94:27 - to the to-do list and set this task to
94:29 - done and the cart item is already a
94:32 - component perfect
94:35 - so now i want to make it possible to
94:36 - click plus and minus to change the
94:38 - quantity and the card and also click the
94:40 - delete button to remove it totally or
94:43 - completely from the course
94:45 - okay so to make it possible to change
94:47 - the quantity we go back to curve.view
94:50 - and then just below
94:53 - oh sorry we're going to cart item so
94:55 - it's easier to handle it there in the
94:57 - component
94:58 - so below item quantity we are decrement
95:01 - quantity and
95:03 - increment quantity
95:05 - plus
95:07 - so then we're going to create these two
95:09 - functions as well
95:12 - item
95:15 - and increment
95:20 - quantity there press an item like that
95:24 - now we have the plus and minus button
95:27 - but nothing happens when i click this
95:29 - but that will be fixed now
95:31 - so when we click increment quantity
95:33 - you say in item dot quantity plus one
95:37 - and then we call this dot update card
95:40 - and when we call
95:42 - decrement quantity
95:44 - is a minus equals one
95:48 - but i also want to check that if the
95:50 - quantity is zero then we just want to
95:52 - remove it completely from the cart
95:56 - so we can't go below one without it
95:58 - being removed from the cars
96:01 - then we can create this update cart
96:05 - so we can update back to the parent
96:08 - and when we call update card we just say
96:10 - local storage to the set item cart and
96:13 - then just stringify the whole object of
96:15 - cart which we have in the storage
96:18 - and since we already here we can create
96:20 - a remove from cart as well
96:23 - this will call a function back to the
96:26 - parent and make that remove it from the
96:29 - object because we can't do it directly
96:31 - from here since we're in the component
96:34 - so let's just add the button for this as
96:36 - well
96:37 - so if i go up now
96:40 - just replace this button
96:41 - [Music]
96:42 - where we add add click remove from cart
96:45 - pass in item
96:47 - and then it's this function that will be
96:49 - called
96:50 - so if i click this now it go down as you
96:53 - can see down in the left here in the
96:55 - summary the price changes
96:57 - if i refresh that process and everything
97:00 - has been updated perfect
97:03 - but if i click this now it won't uh work
97:06 - because
97:07 - we haven't done anything to this
97:10 - so what we need to do now is to just
97:12 - copy this and go to cart dot view
97:16 - and
97:16 - at the next line is a v on so we listen
97:19 - to remove from chords
97:22 - and we just say remove from cart
97:26 - and then we need to create this function
97:29 - so this is from the from the component
97:31 - and this is in the chord dot view so i
97:34 - just scroll down below
97:36 - no sorry
97:38 - methods let's create a new property
97:43 - and then i have a function called remove
97:45 - from cart
97:48 - in here
97:49 - i said that this dot card dot items
97:51 - equals this dot corted items and then we
97:54 - filter out the product we get and remove
97:56 - it from that list
97:59 - and save if i refresh now click this one
98:03 - it was removed from the card and the
98:04 - prices here was also updated perfect
98:08 - so
98:09 - then i can actually set this to done
98:11 - because now we have made both of these
98:13 - two
98:14 - possible okay so now it's time to make
98:16 - it possible to sign up and log in when
98:18 - you proceed to the cart or sorry the
98:21 - checkout
98:22 - okay so first we can start by creating
98:24 - the view for this so sign up dot view
98:29 - create a new template live close page
98:31 - sign up
98:33 - and script name
98:36 - sign
98:38 - up
98:39 - and i'm going to use axios here so
98:41 - import axios from
98:44 - xcos
98:45 - oops
98:48 - and i want to use the toast if there are
98:50 - an errors in the sign up form
98:52 - then i have a data object with the
98:54 - username password and i repeated
98:57 - password and a list of errors if there
98:59 - are any
99:01 - and inside here i had one more dip class
99:04 - columns
99:05 - and then column is four is offset fourth
99:07 - it's narrow and on the middle of the
99:10 - screen close that
99:13 - close that and then we can import it to
99:15 - the router just to see that it's working
99:20 - router
99:22 - make a copy of one of these
99:24 - sign f
99:28 - i can copy the search for example
99:32 - sign up
99:34 - sign
99:36 - up
99:37 - sign up
99:39 - and then i don't have any buttons for
99:41 - this yet but if i try to go to sign up
99:44 - instead i'll see the title at least
99:47 - below here i want to have a forum we're
99:49 - filling out all of the information we
99:51 - need
99:52 - so just go back to signup.view
99:56 - and below the title here add form
99:59 - and when we submit this i want to
100:01 - prevent the default action which is to
100:03 - submit it to the server
100:05 - we call a function called submit form we
100:08 - can create this so we have it down here
100:12 - like that
100:13 - then i want to add a few more fields up
100:15 - here
100:17 - first i have a div class field and a
100:19 - label username and a v model username
100:22 - which just returns or is connected to
100:25 - this one
100:26 - and then below the username i have two
100:28 - fields for the password
100:30 - which is password and password two so i
100:33 - can check that they're matching and
100:34 - similar
100:36 - and if there are any errors i want to
100:39 - use something called div class
100:41 - notification so we can show information
100:43 - there and print out error to the user
100:46 - and this will only generate or be
100:49 - rendered if the errors has length
100:52 - and if there is we loop through them and
100:54 - show them as a simple paragraph
100:57 - then have a simple button to submit the
100:59 - form
101:01 - and if you already have an account you
101:03 - can just click here to log in we can go
101:06 - back and see it now
101:07 - so we have the three fields the button
101:10 - or click here to log in but we don't
101:12 - have haven't created that yet
101:15 - so now i just want to create a
101:16 - functionality for signing up remember
101:19 - that everything is done in the backend
101:20 - so it's just here in the front end we
101:22 - need to change things
101:24 - okay so the first thing i want to do is
101:26 - to reset distort errors in case you try
101:29 - to sign up multiple times
101:32 - and then we can validate the username
101:34 - just to check that it's not empty
101:37 - and if it is empty we push this string
101:40 - to the list of errors
101:41 - if we save now
101:44 - first just click sign up you see this
101:46 - username is missing
101:48 - and then we do the same for the password
101:50 - but you just check password one
101:52 - and down here we check that if they
101:54 - don't match
101:56 - and if there are no errors now we can
101:57 - continue and push the information to the
102:00 - server
102:01 - and say if this.there is not
102:04 - this.length then we can go into this
102:07 - first we create the object with the
102:09 - username and the password which is
102:11 - information that will be sent to the
102:12 - server and then we say excels
102:16 - i want to use the post
102:18 - so we call post to this route and pass
102:21 - in the forum data
102:23 - then we get the response back from the
102:25 - server
102:27 - and we show a toast with the information
102:29 - that the account is created so go please
102:32 - go and log in and then we use distort
102:34 - router push to automatically redirect
102:37 - you to the login screen
102:39 - and the error list here is a little bit
102:41 - longer than we are used to
102:44 - we loop through the errors we get from
102:46 - the server and just push it so if you
102:48 - have problem with that the username
102:50 - already exists
102:51 - and similar you will show it here
102:54 - okay so now we can save and we can try
102:56 - to create an account
102:58 - code with stein
103:06 - sign up
103:07 - account was created and i got an error
103:10 - at the same time
103:12 - okay i got an error because the login
103:14 - here doesn't exist yet
103:17 - yes i get that category does not exist
103:20 - so i need to create the
103:22 - in login page
103:25 - so that is the next task anyway so i can
103:28 - just set this to done because i got the
103:30 - new account but there is an error
103:32 - because the login page doesn't exist
103:35 - so
103:36 - create a new file log in dot view
103:41 - and if i just go here now to the router
103:43 - we can import it
103:45 - log in
103:50 - and just copy this
103:54 - log in
103:56 - log in
103:59 - and save
104:00 - so if we now refresh we don't get any
104:02 - errors there so now we can continue and
104:04 - build the login functionality
104:06 - so for now just go back up to login.view
104:10 - paste a little bit of code it's almost
104:12 - identically to the sign up page you can
104:14 - just copy that and remove password to
104:17 - and change the login or sign up to login
104:21 - besides that it's identical
104:24 - i can create the script
104:26 - and we can import excels we can set the
104:29 - name to log in
104:32 - and we can create the data array with
104:34 - username password a list of errors
104:38 - mounted document.title
104:42 - log in pipe it into
104:44 - jackets
104:47 - save so now the title is set up there
104:50 - and i have the simple login form perfect
104:54 - so but before i continue and make it
104:56 - possible to call the backend i just need
104:58 - to change the store view x a little bit
105:02 - so in here below the initialize store
105:06 - i add this because i want to check if
105:09 - you have a
105:12 - item called token in the local storage
105:14 - and if you do we set token
105:17 - this object there to that value and is
105:19 - authenticated is true and reset them if
105:22 - they are not apparent
105:25 - in there
105:26 - and then we need a function to set the
105:28 - token very simple
105:31 - just said token and pass in token and
105:34 - then we set authenticated to true and
105:36 - the value of token to token
105:39 - and the same with remove token when we
105:41 - log out we just want to reset these two
105:44 - so you're not don't have any problems
105:46 - there
105:47 - i can save this
105:49 - close it for now
105:51 - and when we call the initialize store
105:53 - inside app.view i need to make a few
105:56 - small changes there as well
106:00 - first i want to get the token from the
106:03 - state so we know all the time if you are
106:06 - authenticated or not
106:09 - and in here we say
106:10 - if token so if you are authenticated we
106:13 - want to set the access default headers
106:16 - or authorization token to the token we
106:19 - have stored in the browser and if not we
106:22 - set authorization to to empty
106:26 - and save
106:27 - but then we can continue and make the
106:29 - rest of the login functionality
106:32 - so below the mounted we need the methods
106:34 - for creating the login function or the
106:37 - submit form
106:42 - here i want to call async
106:44 - submit form
106:46 - like that
106:47 - first i just want to reset
106:49 - the authorization
106:52 - in case there are anything that from the
106:55 - an earlier session or similar
106:57 - and i want to remove the token from the
106:59 - local storage
107:01 - and then i create a form that i just
107:03 - like and sign up but here i only have
107:05 - one password
107:06 - and then i just paste simple axios post
107:10 - which goes to token login and we get the
107:13 - response back because the new variable
107:15 - called token with
107:17 - uh in the information from response to
107:19 - data.org token
107:22 - and then we call the store to set the
107:25 - token with information we get from the
107:27 - server
107:28 - and we set the default header here to
107:30 - token so that every time that we call
107:32 - the server from now on we have already
107:35 - set the token
107:37 - and we store the tokul token in the
107:40 - local storage so we can refresh and
107:42 - everything will work
107:44 - and after that we want to go to the part
107:46 - where we're coming from so if we were in
107:49 - the course and click proceed to checkout
107:51 - you would be redirected to the login
107:53 - page and then you'll go back there after
107:57 - and if there are no it just be
107:59 - redirected to the cart when you sign in
108:02 - and here we just had a simple error just
108:04 - like in the sign up
108:06 - now we can save
108:07 - okay there's an error axios is not
108:10 - defined
108:11 - sorry i think it is in the update view i
108:14 - forgotten to import here import axios
108:18 - from
108:20 - excels
108:22 - and save
108:23 - so now refresh i have this i can try to
108:26 - log in with the user i just created
108:32 - log in
108:33 - and yes i was redirected to the cart so
108:36 - hopefully and probably everything was
108:38 - working there now so now i authenticate
108:40 - that as code it's time user
108:43 - so then i can go to the to-do list
108:46 - and i can set this task to done
108:49 - and i want the simple my account page
108:51 - where i can make it possible to log out
108:56 - so if i just go into views
108:58 - there creating a file my account dot
109:02 - view
109:03 - created template
109:06 - and
109:07 - script name
109:09 - my account
109:12 - and we have a simple method here for
109:14 - logging out
109:15 - this is just a function logout and we
109:18 - reset this we remove everything from the
109:20 - local storage and we commit remove token
109:23 - so the state is also updated and when
109:26 - that's done we redirect the user back to
109:28 - the front page of the store or the
109:31 - e-commerce website
109:33 - the template here is very simple it's
109:35 - just a david glass page my account and i
109:38 - have the title my account with the
109:40 - button where we when you click that you
109:43 - call the logout function and it's just a
109:45 - button with this danger so it's red and
109:47 - it's easier to understand what it does
109:50 - okay so now there's a little bit of
109:52 - magic we need to do in the router
109:55 - because we need to add something called
109:56 - a router guard now because if you go to
109:59 - my account without being authenticated
110:01 - we want to send you to the login page
110:04 - so first we can import this
110:07 - my account
110:10 - and just add it here
110:15 - my account
110:17 - my
110:18 - account
110:20 - like that so now it's just like the
110:22 - other but we need to append some
110:25 - metadata here so you can tell view that
110:27 - we want this to be guarded by
110:29 - authentication
110:31 - so meta object require login equals true
110:35 - and to make this happen we need to
110:37 - scroll down at the bottom here we will
110:39 - create the router so before we go into
110:42 - that route we want to check in the state
110:44 - if we are authenticated
110:47 - so below here we say router dot before
110:51 - each so before each route we go into we
110:54 - we want to loop through this code
110:57 - so this is a little bit complicated but
110:59 - we checked that if to dot match some
111:02 - record
111:03 - require login so this will trigger when
111:06 - this is set to true
111:08 - and not store.state is authenticated so
111:12 - if you require
111:14 - login and you're not authenticated we
111:16 - want to send you to the login screen
111:19 - and then we say next name log in which
111:22 - is the page a query just so we know
111:25 - we're going to redirect you to after
111:29 - else
111:31 - i can just call a function called name
111:34 - and then we go to the my account page so
111:36 - if i now go to my account you're
111:39 - probably here
111:41 - okay here is an error store is not
111:43 - defined i forgot to import store in the
111:46 - page
111:47 - in the index.js here
111:51 - so at the top here
111:53 - i can say import store from dot
111:55 - store and save
111:57 - so if i now refresh you will see that my
111:59 - account page and i can log out
112:03 - access is not defined
112:05 - forgot to import it
112:08 - of course
112:09 - import excels from
112:12 - excels
112:14 - save refresh
112:16 - logout and that was logged out great
112:20 - try to log in again call it's time
112:25 - like that
112:27 - great so now we have login functionality
112:29 - log out and sign up perfect
112:33 - so i should probably change this because
112:35 - we don't want to see the login button or
112:37 - authenticator will much rather go and
112:40 - show my account button
112:42 - that's not very hard to achieve so i
112:44 - just need to find app.view
112:48 - and then where i have the login button
112:50 - create paste some new code
112:53 - here we create a new template and check
112:55 - if you are authenticated and we want to
112:57 - show the my account button if not we
113:00 - show the login button so if i just save
113:02 - now go back here using my account
113:05 - instead of login
113:07 - perfect
113:08 - okay so next step now is to proceed to
113:10 - the checkout
113:12 - where you need authentication
113:14 - and that we have already fixed
113:16 - authentication so we can create a new
113:18 - page for the checkout
113:20 - so in here create a new file
113:23 - checkout.view
113:24 - okay so first we create a new template
113:27 - with the page checkout multiline and the
113:30 - title as usual
113:32 - oops
113:33 - close the div
113:35 - close the div
113:37 - and close the template and create the
113:40 - script name
113:43 - check
113:44 - out like that
113:46 - the dead object here is a little bit
113:48 - longer because here we have the cart
113:50 - stripe
113:51 - card and all of the information of the
113:55 - customer and the list of errors
114:00 - then we want to go into mounted as a
114:02 - document.title
114:04 - equals
114:06 - check out jackets
114:09 - and we want to set the court here to
114:12 - this so we get information from the
114:14 - state in to this one also and we need a
114:18 - method for getting the total of the
114:20 - cards
114:23 - or get the item totals already so for
114:26 - each item we get the total of the item
114:30 - and then i have copied the two computer
114:33 - values from the cart page so they are
114:36 - identical
114:38 - and then i just want to import excels
114:41 - before i forget it import excels from
114:45 - excels
114:48 - and then we can just changes to the
114:50 - template
114:51 - first we create a new box with a simple
114:54 - table inside
114:56 - where we show the items product price
114:59 - quantity and the total
115:01 - so here we also add the body to the
115:04 - table your looped record.items and set
115:07 - the key to product id
115:10 - here so the product name price quantity
115:13 - and i'm used to get item total that
115:15 - created down here
115:17 - and then i want a simple foot for the
115:20 - table
115:21 - where you show the total length the
115:22 - total price and similar
115:25 - so if you save this now we can go into
115:28 - router to import it here
115:33 - check out
115:35 - like that
115:37 - and now i want to copy this because i
115:40 - want to require login when you go to
115:42 - this page
115:43 - and i want it below here so i'll connect
115:46 - it to the cart
115:48 - and the url is cart slash checkout
115:51 - the name is checkout
115:55 - check out
115:59 - safe like that
116:01 - so now we have the possibility to go
116:03 - there
116:04 - so if we go now here proceed to check
116:06 - out but you don't have any products
116:08 - there so we can fix that first
116:11 - add the cart go here proceed to checkout
116:15 - and now we have the summary here of what
116:17 - we are going to pay
116:19 - perfect
116:20 - now we need to add four below here we
116:22 - add information like the name
116:25 - phone number
116:26 - etc so then i can go back to the
116:30 - checkout page
116:32 - and below this div i think yes
116:36 - create one more div with the subtitle
116:38 - shipping details
116:40 - close that div
116:42 - that looks okay and all fields here are
116:44 - required to fill out
116:47 - and then
116:48 - below this i had a div class multiline
116:51 - because i want the
116:52 - some fields there and some next to them
116:55 - so we don't have a very long form
116:58 - first i had the fields to the left
117:00 - the first name b model first name which
117:03 - is connected to this down here
117:06 - and then the last name the email which
117:08 - is type email so we have a validation
117:11 - from the browser
117:13 - and the phone
117:15 - and then the field on the right side
117:17 - will be address zip code and place so if
117:21 - i save now and go back you'll see that i
117:24 - have much more hair perfect
117:26 - but we need a button and a place to fill
117:29 - in stripe
117:31 - and if you get any errors from
117:34 - the server or from view you want to show
117:37 - them here so it's just like other places
117:39 - where we're shown errors
117:43 - hr
117:45 - just add a div element id card this is
117:49 - for stripe i'll come back to that soon
117:52 - and then we check that if the
117:54 - card.length is more than zero then we
117:57 - want to show the button where you can
117:58 - pay with stripe
118:00 - then i just need to create this function
118:02 - so it doesn't crash
118:04 - like that if i save now
118:07 - go back you'll see pay with stripe
118:10 - great
118:11 - actually i think this is supposed to be
118:14 - one
118:15 - more div out i'll just cut this out
118:18 - paste it there
118:20 - so now yes that looks much better so
118:22 - here we'll it'll be possible to add the
118:24 - fields for stripe soon
118:27 - so i just want to
118:29 - extend this a little bit before we go
118:32 - further to the next task
118:34 - paste in a little bit of code first i
118:37 - just reset this errors list then i check
118:40 - if the first name is filled out and etc
118:43 - of all of the different fields so we
118:45 - just save now
118:47 - try to submit
118:48 - you'll get information that all of the
118:50 - fields are missing
118:52 - but now we have a simple
118:54 - checkout page at least
118:57 - so then i can set this task to done
119:00 - and then i can create a simple success
119:02 - page before i forget it
119:04 - so
119:06 - just find the views folder here create
119:08 - new file called success dot view
119:12 - template
119:14 - script name success
119:17 - i can set the amount add to success
119:20 - jackets
119:22 - and the template will just show that
119:23 - your order will be processed within 48
119:26 - hours whatever you want to show here to
119:28 - the customer save and close
119:32 - then we can import it to the router so
119:35 - it's done
119:38 - so router index.js
119:44 - success
119:47 - like that
119:48 - so go down here
119:52 - card slash access
119:54 - success
119:56 - like that so now we have the simple
119:58 - variable redirected to when the
120:01 - payment is done
120:02 - like that
120:04 - okay so then i just need to make sure
120:07 - that the
120:08 - that the
120:09 - stripe is working in the back end so
120:12 - that's a little bit more job
120:14 - so if you haven't created an account
120:16 - that's stripe you need to do that just
120:18 - go to stripe.com it's free and then you
120:21 - get the api keys you need
120:24 - and when you're done that you can go
120:26 - back to the settings.pi file and create
120:28 - a variable there i like to have it up
120:31 - here somewhere
120:33 - and it's stripe secret game and it's a
120:36 - very long and you need this test key and
120:38 - it's important that it is the secret key
120:41 - which you're going to use in the back
120:42 - end
120:43 - and to keep track of the orders we need
120:45 - a new django app so if i just go down
120:48 - here stop the server
120:50 - python managed by start app order
120:55 - and before i forget it i can just append
120:58 - it to the list of installed apps order
121:01 - save and close
121:03 - and now we need a model to keep track of
121:05 - the orders
121:08 - so find order here go to models.pi
121:11 - i want to connect the order to users and
121:14 - it import this object from django which
121:17 - is the user object your request you are
121:20 - authenticated with
121:22 - then i want to import the product model
121:24 - because the items is connected to a
121:27 - product
121:28 - then i create a new clause order which
121:30 - is the order model and pause in models
121:33 - dot model
121:34 - and then to connect the user to the
121:36 - order i just create a new foreign key
121:39 - set the related name to order so it's
121:41 - easy to get all the orders for a user
121:44 - then just paste in all of this field
121:46 - which is the contact information we are
121:48 - going now we are passing in in the
121:51 - checkout form
121:53 - and i want one field for uh for the date
121:55 - time field so i know when the order was
121:57 - created
121:59 - and then i want the decimal field so i
122:01 - know the paid amount so i get this from
122:03 - stripe and fill it out
122:06 - just so i know that i can double check
122:08 - it afterwards
122:10 - and i also save the stripe token that
122:12 - was used to perform the purchase
122:15 - and i changed the ordering to create
122:17 - that in descending order so that in the
122:20 - back end everything is okay and when you
122:22 - show the ordering and then my account
122:24 - page
122:25 - and then add a simple string
122:27 - representation of the object which is
122:28 - just the first name so it's easier to
122:30 - see in the back end
122:33 - and i want to order item as a separate
122:36 - model as well so clause order item
122:40 - models dot model
122:42 - first i need a reference to the
122:44 - order so i just do like every other
122:48 - foreign case
122:49 - and i need a reference to the product so
122:51 - i know which item which product it is on
122:55 - the item
122:56 - and then the price so it's easier to get
122:58 - i don't have to go through the product
123:00 - to get it
123:02 - and then the quantity which is defaults
123:04 - to one
123:05 - and then the stream string
123:07 - representation which is just the id so
123:09 - it's easier to see in the back end
123:12 - so that's the models for there and then
123:14 - i can update the database by running
123:16 - make migrations
123:20 - and migrate
123:22 - then i can run the server again
123:25 - great i can also close this
123:27 - and now we have the models
123:29 - okay so to make it possible to proceed
123:32 - to the checkout and everything is
123:34 - working in the back end we need to go
123:36 - into
123:36 - views slash no order slash use pi
123:41 - and import a few things
123:43 - first import strike which you're going
123:45 - to use to talk to stripes api
123:48 - and then we import settings so we can
123:51 - get the secret key we added to
123:53 - settings.pi
123:55 - we need to get the user i need to use
123:58 - http before if there are any errors and
124:00 - then a simple render
124:03 - and then you import a few functions from
124:05 - the rest framework like status
124:07 - authentication permissions and just like
124:10 - in the
124:11 - in the product slash reviews.buy
124:14 - then we import the two models we created
124:17 - and i also need to import the order
124:20 - serializer i want to come back to that
124:22 - and fix it very soon
124:24 - then i do
124:26 - create the api view and here we just
124:27 - want to post requests i set
124:30 - authentication because we want to
124:31 - require token authentication and that
124:34 - the user is authenticated then we create
124:37 - a new view called checkout
124:40 - and we want to use the order serializer
124:42 - with the data we get from the
124:45 - the form we fill out in the checkout
124:47 - page
124:49 - now we can say if serializer is valid
124:51 - that means that all of the data is
124:53 - correct and we can proceed with the
124:54 - checkout
124:55 - then we initialize stripe with the
124:57 - secret key we get from the settings file
125:01 - and then we can calculate the paid
125:03 - amount by saying sum
125:05 - and then we take the item quantity
125:08 - and multiply with the price and we do
125:11 - this for every item in the serializer
125:14 - validated that are items which you get
125:17 - from the post form
125:19 - and then we want to add a try here
125:21 - because if the
125:23 - payment isn't successful we need to
125:26 - accept this and show an error to the
125:28 - user
125:30 - first we create a new charge for stripe
125:34 - i set the amount to pay the amount and
125:36 - multiply it with 100 because the stripe
125:39 - wants this in cents and not in dollars
125:43 - i want to set the currency to us dollars
125:45 - because that's what i want on my
125:47 - e-commerce
125:48 - and then i just show a simple
125:50 - description which will show up on their
125:52 - bills which is a charge from jackets
125:55 - and source which is the stripe token we
125:57 - get from the front end so that
125:59 - everything is connected and working
126:03 - now just close this
126:05 - and when we go go through this that
126:07 - means that everything is working and we
126:09 - can save the data in the serializer set
126:12 - the user to request the user which is
126:14 - the requested user and there's a paid
126:16 - amount to the paid amount we calculated
126:18 - up here
126:20 - and then we return response as a 201
126:22 - created so the front end knows that
126:25 - everything is okay
126:27 - and accept exception so that means that
126:29 - there is something wrong and if there is
126:32 - something wrong we need to show a 400
126:34 - 400 bed request
126:37 - and the same goes with if there is
126:38 - something wrong with the serializer we
126:40 - just show the same error and save then i
126:44 - can create a new urls file for the order
126:48 - urls.pi
126:50 - from
126:51 - django.urls import pot
126:57 - not fromorder.notimport views
126:59 - and url patterns
127:02 - equals credit list part
127:04 - okay
127:05 - do it like this but check out we use the
127:08 - checkout and the name is also check out
127:10 - don't think we need this but
127:12 - yes like that
127:14 - great and then we need to create a
127:16 - serializer for the order
127:20 - so inside this app create a new file
127:22 - serializers.point
127:26 - so first we import serializers from the
127:28 - rest framework and then we import the
127:30 - two models we created and we want the
127:33 - product serializer since it's connected
127:35 - to and one of the items
127:39 - and then i create the order item
127:40 - serializer class
127:43 - matter
127:43 - [Music]
127:45 - model equals order
127:49 - whoops order sorry order item this is
127:52 - the order item this has to be above the
127:55 - order serializer
127:57 - and the fields i want for the order item
127:59 - is price the product and the quantity
128:02 - and then below here i create the order
128:05 - serializer plus
128:08 - model equals order
128:11 - and the fields here i want id and all of
128:13 - these names stripe token and items and
128:16 - to get items i need to do just like we
128:18 - did in the product for the categories
128:21 - so items equals order item serializer as
128:24 - that manager
128:26 - and what we need to do now is to
128:29 - override the create functionality for
128:31 - this
128:32 - serializer
128:33 - to do that we create a new function here
128:35 - called def create and here we get the
128:38 - validated data
128:40 - we remove the items from there and then
128:42 - we create a new order based on the
128:45 - validated data we get from the form
128:47 - and then we loop through all of the
128:50 - items in the list and we create a new
128:52 - order item
128:54 - and set the order which is a foreign key
128:57 - to that item data and the product is
129:00 - already included here
129:02 - now you can save this
129:04 - so i think that if i now go back here
129:08 - and just fill out something here
129:12 - play with stripe nothing is working
129:14 - because i haven't created the function
129:16 - here in the com knowing the
129:19 - here we need to call axios
129:21 - which i've already imported so i can
129:23 - scroll down here
129:25 - so below here i check again if the error
129:29 - has length meaning that if there are not
129:31 - errors we can go into this
129:34 - and the first thing we do then is to set
129:36 - is loading to true
129:40 - and then we use this dot stripe i will
129:43 - show you how to edit create a token
129:45 - based on the chord information
129:48 - and when that's done if there are errors
129:50 - we remove is loading
129:52 - and then we show that there's something
129:54 - wrong with stripe and paste try again
129:56 - and then we just show the error in the
129:58 - console as well but if there are no
130:01 - errors from the backend with straight
130:03 - then we continue to dysfunction call
130:06 - stripe token handler
130:10 - token
130:12 - so then we call this function
130:15 - this has to be a sync function
130:18 - first we create a new list called items
130:21 - started to be empty
130:23 - and then we loop through all the items
130:26 - in the court and just do some changes
130:28 - here because that's much better for the
130:29 - backend so you get the price finished
130:32 - and everything and then just push the
130:34 - object to the list of items
130:37 - then we created new data from new data
130:40 - object with the contact information all
130:42 - the items and the stripe token
130:47 - let's try token is the one we get from
130:49 - the back end and when that's done below
130:52 - here
130:55 - we call await excels and then we post it
130:58 - to slash checkout which just created
131:01 - here
131:02 - sorry i need to before i forget it i
131:06 - need to go into the main urls
131:09 - and import it here
131:12 - order
131:13 - like that
131:15 - sorry about that so then i can go back
131:17 - to them check out
131:21 - yes so then we call it and when that's
131:23 - done we call uh the store the view x
131:27 - clear card so everything is clear there
131:30 - and then we redirect the user to the
131:32 - success page we created and then we just
131:34 - remove the set is loading
131:38 - so now i just need to import stripe here
131:40 - and make sure everything is okay
131:42 - so i go up and find the mounted
131:47 - below here i paste a little bit of code
131:50 - so first here i checked that if this dot
131:53 - card total length which is the function
131:57 - we have down here computed
131:59 - if that is greater than zero that means
132:01 - that we have products in the cart and we
132:03 - can continue
132:04 - so then we create a new
132:06 - function no new instance of stripe
132:09 - and a new instance of elements and then
132:12 - we want to hide the postal code from
132:14 - that stupid form
132:16 - and then we mount it to the element we
132:18 - added up here
132:22 - then we just as you can see here we have
132:24 - the stripe and chord which is just two
132:26 - empty objects
132:29 - and the last thing we need to do now i
132:31 - think it's the last is to import stripe
132:34 - in the
132:34 - index.html file
132:38 - so below the font awesome paste in the
132:41 - stripe url
132:43 - js.stripe.com
132:45 - v3
132:47 - i think if i now refresh yes you can see
132:50 - that we can fill out the card number and
132:52 - things like that
132:55 - so let's try this
132:57 - no sorry i need to do one more thing
133:00 - and that is to go into the store and
133:03 - create the remove
133:04 - no clear cart function so that just
133:07 - clears the whole object and then remove
133:10 - it from the local storage
133:13 - now
133:14 - refresh and then the card number to test
133:17 - this you can use 42 42 42 42 32 42 32 42
133:22 - and then a date in the future and one
133:24 - two three as cvc
133:27 - pay with
133:28 - stripe so thank you the process will in
133:32 - the order will be processed within 48
133:34 - hours
133:36 - and if i go here
133:38 - it seems that you got post so everything
133:40 - there is correct
133:42 - and if i go to
133:46 - order and into admin notify i want to
133:48 - register this with the backend
133:51 - from dot models import order and order
133:56 - item
133:57 - admin dot site register order
134:01 - i don't need to see the order item
134:05 - save
134:07 - so then if i go here go to the front
134:10 - page go to orders you will see that i
134:12 - have an order and the paid amount the
134:15 - stripe token and everything seems to be
134:17 - working so we got success page and the
134:20 - stripe has got its money
134:22 - perfect
134:23 - and i want to show orders on my account
134:26 - page
134:27 - so then i need to create a new
134:29 - serializer so if i scroll up
134:36 - and find the order serializer
134:40 - i can
134:42 - copy this
134:45 - and say
134:46 - my order item serializer
134:49 - and this is where i want to use the
134:51 - product serializer like that
134:54 - because if not there will be a problem
134:55 - when you post it and you
134:58 - because somewhere you have the object
134:59 - product assuming you have id for the
135:01 - project and similar
135:03 - and then you can make a copy of the
135:05 - order serializer but you don't need a
135:08 - create function
135:09 - just copy it and go up here
135:13 - say my order serializer and i want to
135:15 - use my order serializer there as well
135:19 - and i want to get the paid amount here
135:22 - as a variable
135:24 - save
135:26 - so everything is okay then i need to
135:28 - create the view sets for this
135:32 - so import my order serializer
135:36 - and then at the bottom create a new view
135:39 - sets
135:40 - called clause orders list
135:43 - and then you set authentication clauses
135:45 - and permissions and then we override the
135:47 - get
135:48 - because here we only want to get the
135:50 - orders where the user is the request
135:52 - user which is the authenticated and we
135:55 - want to use my order serializers and
135:58 - return the data to the front end
136:01 - so we can save this
136:03 - we need to import this into
136:06 - the urls
136:08 - so below checkout we just say pot orders
136:10 - views orders list as view and save
136:15 - so now it should be possible to use this
136:17 - in the front end
136:19 - so now if i find my account
136:22 - and below this button
136:25 - create an hr and then a new div class
136:27 - column subtitle my orders and i created
136:31 - a new uh component order summary where
136:34 - it posts in information about the order
136:38 - then i need to import this component
136:41 - which will create soon
136:43 - and i need a registered component
136:46 - and then i want to use the mounted we
136:48 - can set the document title and when
136:50 - that's done we call a new function
136:52 - called get my orders
136:56 - and this is very similar
136:58 - just the
137:01 - the normal axios
137:03 - to api slash v1 slash orders and i'm
137:06 - going to get it to slap dish.orders to
137:08 - response.data
137:10 - just need to make sure that we have a
137:11 - data array as well return
137:15 - orders
137:18 - which is a list and then we can oops
137:21 - forgot that comma there then we need to
137:23 - create this file
137:25 - and component
137:28 - new file order summary.view
137:32 - okay so here we have the template a div
137:34 - class box and the order title which
137:37 - shows also the order id
137:39 - i have a subtitle with the products and
137:42 - the table which shows all of the
137:44 - different products and here we just loop
137:46 - through order load items which you get
137:48 - because we use the my order
137:51 - serializer which has items included
137:56 - down here we just say name order summary
137:59 - we get a prop order
138:01 - and we have two methods for getting the
138:02 - total for the item and the order total
138:05 - length so if i save now
138:07 - and expect that wait word okay
138:11 - because i need to go into my account
138:14 - again
138:16 - this has to be such a sync of course
138:18 - when i use elevate in here
138:22 - so now i have the order here with the
138:24 - products i've ordered a simpler
138:26 - perfect and that was really coding are
138:28 - going to do now so now it's time to push
138:31 - this code to live server and start
138:33 - making impossible for other people to
138:36 - find my store so if i just go to the
138:39 - to-do list i can set this task to done
138:43 - and the first thing i'm going to do is
138:44 - to deploy the django part of this
138:46 - project i'm going to create a server and
138:49 - then start accessing it i'm installing
138:51 - the software we need
138:53 - so if i go to the browser and into
138:56 - digitalocean and i click create up in
138:58 - the corner here i'm going to create a
139:00 - new droplet
139:02 - i want to ubuntu 20.04
139:06 - and i just want a basic shared cpu
139:09 - and i can select regular intel and five
139:12 - dollar because it's going to be a very
139:14 - small server for testing
139:17 - i don't want any volumes it can be
139:19 - located in amsterdam it's close to
139:21 - norway
139:22 - a little bit at least
139:25 - the network name can be set to that i
139:27 - don't want any of this yet
139:30 - and password
139:32 - like that okay so now that was okay one
139:35 - droplet hostname can be just ubuntu
139:39 - jackets
139:42 - and
139:43 - create droplet
139:45 - and now this is created and i just need
139:47 - to wait for the server to start
139:50 - okay so now it's just started i copy the
139:53 - address try to access it
139:55 - ssh root at
140:00 - yes
140:02 - permission denied okay
140:05 - okay
140:06 - type the wrong password
140:09 - like that so now i should be in perfect
140:13 - and then i can go to to do list because
140:15 - i created the server and exit it and
140:18 - then i want to install the software we
140:20 - need
140:21 - so first i just want to update
140:23 - everything so that all of the packages
140:25 - and everything is correct
140:28 - this can sometimes take a little while
140:30 - and then see the apt get upgrade this
140:33 - will actually upgrade the packages and
140:35 - not just the connections to them
140:39 - great so now everything is updated and
140:42 - we can start installing some software
140:44 - i'm going to install python 3 pip
140:47 - python3 dev lib.qs postgresql postgresql
140:51 - contract and nginx
140:53 - just
140:54 - type that
140:55 - hit enter and yes i want to install that
140:58 - great and i also want to install cert
141:01 - bot and python 3 insert bot and insert
141:03 - but no patent reserve with nginx so we
141:05 - can get sl ssl certificates for the
141:08 - website
141:09 - so
141:10 - yes
141:13 - i will add all of these commands in a
141:16 - file on github okay so now that this
141:18 - does the done the next is to create a
141:20 - postgresql database
141:22 - so go back to server as i sudo dash you
141:26 - postgres psql so i change which user i'm
141:29 - logged in with
141:31 - then i create a new database by saying
141:33 - create database jackets
141:35 - and i create a new user jacket user with
141:39 - packet jacket's password
141:41 - and then i need to do some changes this
141:43 - is for the role and something to do with
141:46 - the configuration for django
141:49 - and then i want to grant all of the
141:51 - privileges to this user to that database
141:55 - and then i quit by saying backslash q
141:58 - so now we have postgresql installed and
142:01 - the database is set up with the user we
142:03 - can use
142:04 - then i want to upgrade pip just so i
142:07 - know that that is also for with the
142:09 - newest version
142:11 - and i want to install virtual
142:13 - environment so we can use that just like
142:15 - we do locally
142:17 - and then i want to create a new folder
142:19 - in web apps slash check cache which we
142:22 - should read a base for all of the
142:24 - projects here
142:25 - we can go into it
142:28 - then i want to create a user group for
142:30 - the user i'm going to call the group web
142:33 - app so we can use the server for
142:35 - multiple web apps or web applications or
142:38 - django websites
142:40 - then i want to create a user by saying
142:42 - sudo user ad system group id so i want
142:46 - to put it in the web apps set the
142:48 - default shell and the home folder to web
142:51 - slash jacket under the name of the user
142:53 - which is jackets
142:55 - hit enter
142:57 - and since i'm already in this folder i
142:59 - want to create the virtual environment
143:00 - by saying virtual env environment 382
143:04 - and hit enter
143:06 - and then i can go into it saying cd
143:09 - environment also i don't have to go into
143:11 - it but i can activate it
143:13 - environment bin
143:15 - activate
143:17 - so now it's activated here just like it
143:19 - is locally
143:20 - and then i want to install the same
143:22 - packages here that we have locally and
143:25 - to do that i can go back to visual
143:26 - studio code stop the server as i pipped
143:30 - freeze
143:33 - then i will get the list of all of the
143:35 - packages we have installed locally so if
143:38 - i just copy all of this now
143:43 - create a new file here called touch req
143:46 - dot txt
143:48 - vi or q
143:51 - and paste it in there
143:52 - and i can install of all of them saying
143:54 - pip install
143:56 - r
143:57 - req.txt
143:59 - now note that we have the same packages
144:01 - on the live server as you have locally
144:04 - so that means that there are no
144:05 - differences in the environment for
144:07 - python
144:08 - and i need to install another pip which
144:11 - is cycle pg2 binary this is used to
144:15 - connect the django to the postgresql
144:18 - server
144:19 - next step now is to move the django
144:21 - files from locally to the server
144:23 - normally i would just use
144:25 - git but to make it easy i can just use
144:30 - i can just send them by using scp
144:35 - so here i go up one folder
144:38 - and say
144:39 - sip or
144:41 - check go
144:43 - jackets
144:44 - django
144:46 - dot zip
144:48 - check at django
144:50 - now i've got a folder with all of that
144:52 - and i can send it by saying sap
144:55 - r
144:57 - so root at and then i p
145:00 - like that
145:05 - sorry i forgot to specify which folder i
145:08 - wanted to send
145:10 - django jackasjango.zip
145:13 - like that
145:16 - so now it should be sent here
145:18 - and then
145:19 - just make this a little bit smaller
145:22 - cpu root
145:27 - put it there
145:28 - and then i just say unzip
145:31 - jackets jungle
145:33 - can it install unzipped
145:40 - and then i can unzip it great
145:43 - just removed a zip folder
145:46 - just to make sure that i don't have any
145:48 - problems with the the permissions for
145:50 - the folders and similar if i do this you
145:52 - will see that the root is owning
145:54 - everything here now and i want it to be
145:56 - owned by the jackets user
145:59 - so ca mod
146:01 - ch phone sorry dash r
146:06 - jackets
146:07 - colon web apps dot
146:10 - ls lord again and then you'll see that
146:12 - now i own all of the files and folders
146:15 - so don't any permissions
146:17 - wrong there or anything like that
146:20 - but i want to make a little change to
146:22 - the cd jackets
146:25 - and into jackets jungle
146:27 - i want to copy the settings file because
146:29 - i want the separate settings file for
146:31 - the production so
146:33 - this would be called settingspro.pi
146:37 - and settings prod change the database
146:40 - here
146:42 - just remove these lines
146:46 - and then i paste information about the
146:49 - postgresql server we created so by the
146:52 - name of the user know the database the
146:55 - username password and localhost because
146:58 - i'm the same server as the postgresql
147:02 - great so now we need to update the
147:04 - database but to do that i need to make a
147:07 - copy
147:09 - of the manage.pi
147:13 - i should buy
147:14 - how to create a profile for this as well
147:18 - and h prod
147:21 - because i want to use the prod file for
147:23 - updating the database
147:26 - so now i can say python management pi
147:29 - make migrations
147:33 - sorry
147:34 - manage
147:38 - prod
147:39 - by make migrations
147:42 - and
147:43 - migrate
147:46 - so now everything should be updated and
147:48 - created in the back end perfect
147:51 - next step now is to install g unicorn g
147:54 - unicorn will be the web server for
147:56 - django
147:58 - so pip install
148:00 - g unicorn
148:03 - i want to go up one folder and inside
148:06 - the environment i want to create a
148:07 - script for running the g unicorn server
148:10 - so vi environment bin g unicorn
148:15 - underscore start
148:17 - and then i paste in some code
148:19 - i set the name to check its django
148:21 - the directory for django
148:24 - socket file it should be created
148:26 - automatically which user to use which
148:29 - group
148:30 - which settings module to use and i would
148:32 - use the wsgi as i mentioned in the
148:35 - beginning of this tutorial
148:37 - and then just go into the django there
148:39 - start something and execute it
148:44 - i will add the these files in the github
148:46 - so you can get them there if you want
148:48 - and then you need to make this run the
148:50 - ball by saying chmod plus x environment
148:55 - then unicorn start
148:58 - you can try to run it
149:00 - supposed to be jackets here
149:05 - check it
149:06 - like that maybe that will work now
149:11 - no
149:13 - cd slash web apps check it environment
149:17 - jackets
149:19 - okay now i know why it should be like
149:22 - this because the jacket django is not in
149:24 - the environment folder
149:27 - okay now it's starting the problem was
149:29 - that if i go into the script again
149:32 - add the wrong part here because you need
149:34 - to go back one folder and then into the
149:37 - environment then bin then activate and
149:40 - the same down here
149:42 - so now the unicorn is starting perfect
149:46 - next step is to install something called
149:47 - supervisor supervisor will make sure
149:50 - that the t unicorn script is running at
149:53 - all times
149:54 - so install supervisor by saying apt
149:59 - install supervisor
150:03 - and when that's done we can create a
150:05 - script or just a config file that will
150:07 - make sure that the
150:09 - unicorn is running at all time so if you
150:12 - go to cd e2c
150:14 - supervisor
150:16 - conf create a new file touch
150:20 - jackets
150:21 - dot conf
150:24 - vi gen gets of course
150:27 - that's not correct that will fix it
150:29 - create new program jackets django the
150:32 - command we want to run is webs slash
150:34 - jacket environmentary a2 bin g unicorn
150:38 - which is the great script we just
150:39 - created
150:41 - we want to use the
150:43 - jackets
150:44 - check gets its name of the user
150:48 - and then a log file here i need to
150:50 - create this folder
150:53 - and then it's just some environment
150:55 - configurations
150:58 - so okay there so i have the log file
151:01 - and then we need to update supervisor by
151:03 - saying supervisor
151:05 - re-read first
151:08 - just to check that it's available
151:10 - supervisor ctl
151:13 - it's available of course and then update
151:17 - and now it was added to the group
151:19 - if i now say status
151:24 - it says starting
151:26 - now it says running so now hopefully
151:28 - django should be running in the
151:30 - background
151:31 - next step now is install nginx nginx is
151:34 - the web server out to the world so when
151:37 - we get the request to engine x we use
151:40 - that as a proxies to reach g unicorn and
151:43 - we need nginx to handle the media files
151:46 - for django
151:48 - so install nginx that have all
151:51 - so already installed nginx we did that
151:53 - in the beginning
151:56 - so we just need to create a new config
151:58 - file so e2c and genex sites
152:02 - available
152:04 - and then vi check
152:06 - api jackets dot code
152:10 - with
152:12 - with
152:13 - stein.com
152:15 - which is the address for the web server
152:17 - i'm running on now
152:19 - so first we create the upstream
152:22 - app so this will connect to the g
152:25 - unicorn socket file which is created by
152:27 - the g unicorn script
152:29 - and then we want to listen to port 80
152:32 - and if you come from port 80 which is
152:34 - http we want to redirect you to https
152:42 - and then we want to listen to 443 which
152:44 - is what https is at the back max body
152:48 - size and access log error log and ssl
152:51 - certificate and i search the certificate
152:54 - key
152:55 - i will fix it after this is done
152:58 - and then set some protocols and just
153:00 - make sure that ssl is working
153:03 - here is the hosting for the static files
153:06 - and here is the whole thing for the
153:07 - media files which is the uploaded files
153:10 - and similar
153:12 - and and we use the proxy to forward you
153:15 - to the jackets app server which is the
153:18 - socket file we created
153:20 - so now everything there should be okay
153:23 - i'll also add this file in the github
153:26 - repository
153:28 - i need to activate this now see the
153:30 - sites enabled
153:34 - s create a symbol like link back to that
153:36 - file we created
153:39 - check it
153:42 - no api
153:44 - there
153:46 - now we have it here and we can restart
153:48 - nginx so service and gen x restart
153:53 - okay there is an error
153:55 - okay it can't load the certificate so
153:58 - that's the problem here
154:00 - so the problem is that they can't load
154:02 - the certificates so we need to obtain
154:04 - them
154:05 - search bot dash ng next hd and indeed
154:09 - the domain name
154:11 - okay maybe if i just skip using nginx
154:17 - cannot load
154:19 - okay i just need to remove this for now
154:27 - so now i get it
154:29 - enter email address called stein
154:32 - gmat.com
154:35 - agree
154:36 - yes
154:38 - okay so then we got that sorry um
154:41 - yes redirect
154:44 - and then i can obtain this where we will
154:46 - host the view part of this project
154:51 - and then redirect
154:55 - okay so now we have the ssl certificate
154:57 - and we can try to create the symbolic
154:59 - link again
155:01 - restart nginx
155:05 - okay there's a new error
155:10 - okay i restarted the server and now
155:12 - everything seems to be okay so if i go
155:14 - to api check it
155:18 - dot code with
155:20 - stein.com
155:23 - get a bad gateway so i need to check the
155:25 - log server log files web apps
155:28 - check it snow
155:31 - environment
155:34 - okay there logs
155:39 - ch own
155:42 - super
155:51 - okay so our problems is to be with the g
155:53 - unicorn
155:55 - so i need to find out what that is
155:58 - failing
155:59 - this couldn't create this one okay
156:02 - permission denied
156:04 - so then i need to go to this folder
156:11 - and it seems that root is owning this
156:13 - folder so i need to change the
156:15 - permissions
156:17 - restart
156:22 - and also i want to restart supervisor
156:26 - supervisor ctl restart
156:30 - jackets hit enter
156:35 - okay what's the status
156:39 - check it's django
156:46 - refresh great so now it's working i just
156:50 - need to add this to the list of allowed
156:52 - hosts
156:56 - via django
156:58 - settings prod
157:03 - so i need to find it first of all i can
157:06 - add
157:08 - http s
157:12 - i can add this here because this is the
157:14 - one i'm going to use for the front end
157:19 - and here i need to add it to this list
157:21 - as well
157:26 - restart jackets django
157:30 - refresh
157:31 - found perfect
157:33 - but it seems that it's working so i can
157:35 - just try to log in to create a product
157:38 - sorry i need to create a super user
157:43 - so source
157:46 - slash environment bin activate
157:50 - python mentioned by
157:52 - manage product by create super user
158:00 - of course headers
158:02 - jungles always something you forget to
158:05 - add
158:08 - just want to edit here
158:12 - and to the list here as well so i need
158:15 - to have
158:17 - two of this
158:22 - like that
158:24 - now we need to restart again
158:28 - then we can try to create the super user
158:33 - admin admin jackets.com
158:37 - and the password
158:44 - and then
158:45 - we can go here login with the user i
158:48 - just created
158:51 - great
158:52 - create
158:53 - categories
158:54 - winter winter
158:58 - and summer
159:00 - summer
159:03 - and i can create a product as well
159:07 - in the
159:08 - winter
159:10 - warm jacket warm
159:13 - check it
159:15 - the
159:16 - description
159:18 - 199 select the picture
159:23 - save
159:24 - so now we have products there and if i
159:27 - now try to go to
159:30 - api v1
159:32 - products
159:36 - latest products
159:39 - then i get it there perfect
159:41 - okay i need to change this as well
159:45 - sorry that's the last thing we need to
159:47 - do in the back end
159:50 - yeah project
159:52 - models.pi
159:56 - it shouldn't be this address of course
160:01 - it should be this
160:08 - maybe even without the
160:11 - lost slash there
160:15 - restart
160:18 - refresh
160:19 - and then we have them here
160:21 - perfect
160:24 - okay so i just need to check if the
160:27 - files were applied uploaded
160:30 - media
160:32 - uploads
160:35 - okay the picture isn't there
160:38 - okay we'll come back to that very soon
160:41 - just want to make sure that we have
160:43 - uploaded engineer
160:45 - view as well so everything is working
160:47 - except images
160:49 - so then i first want to go in here and
160:52 - go to main.js and change this url
160:56 - to
160:58 - api jackets dot code with style.com
161:03 - and save so now that would be the
161:05 - address
161:07 - and then we want to
161:10 - compile all the view code so we can
161:12 - upload it to the server as well to do
161:14 - that we say npm
161:16 - run build
161:18 - and understand we have a new folder here
161:19 - called this this is all of the compiled
161:22 - code in like html and javascript and
161:25 - similar and we need to upload this to
161:27 - the web server
161:28 - just want to zip it first zip dash or
161:32 - dist dot zip
161:34 - and dist
161:36 - so then we can send it to the server
161:39 - so sap
161:42 - dist dot sip
161:44 - and then the address sorry
161:46 - root at
161:48 - like that
161:51 - and then my password
161:56 - and now that's there so then i can go up
161:59 - one folder and say cp
162:02 - root dist there unzip
162:06 - dist
162:08 - so now i have it here but i want to
162:10 - create a new folder okay there
162:13 - check it
162:15 - view
162:15 - and move this folder inside there
162:19 - oops
162:21 - that's wrong
162:22 - and the jackets underscore into jackets
162:26 - view and call it dist
162:29 - and if i go in here now
162:31 - unless lord you will see that root is
162:34 - owning this
162:35 - and i need to fix that
162:38 - great so now the next step is to create
162:40 - a new config for view now for nginx
162:44 - so cd e2c engine x sites
162:48 - available
162:51 - touch jackets
162:55 - dot code with stein.com
162:59 - the i jackets
163:01 - and paste them so we do the same thing
163:03 - here we listen to 80 and redirect you to
163:05 - https
163:07 - and then we do the same here with
163:08 - setting up jackets.com at least in 443
163:12 - set the ssl it's at the correct part to
163:15 - these which we have also already
163:17 - obtained
163:19 - and we set the root folder to
163:21 - web apps slash should be jackets here
163:25 - sorry
163:26 - check it
163:27 - check its view dist
163:29 - and the same down here
163:31 - jackets
163:33 - so save and close i'm going to sites
163:37 - enabled
163:40 - and lms dot slash sites available
163:44 - jackets
163:46 - there there
163:48 - and restart
163:51 - oops i was not supposed to
163:55 - service
163:58 - and gen x
164:00 - restart sorry i start to get a little
164:02 - bit tired now so sorry for all the
164:04 - mistakes
164:07 - so if i now try to go to this address
164:13 - yes everything is working there we got
164:15 - the product from the live server but the
164:18 - image isn't working
164:20 - sorry other wrong parts for the media
164:23 - files
164:27 - so it's supposed to be like this media
164:31 - and i need a space at the beginning
164:35 - save close restart
164:40 - and now the image is there
164:42 - and hopefully if i refresh the image is
164:44 - there as well so now everything is
164:46 - working as it should
164:49 - so i can go to the to-do list
164:52 - and everything can be set to done here
164:55 - now
164:56 - now i have a working e-commerce website
164:58 - built at django and view
165:00 - so this is a really cool project you can
165:03 - use in your portfolio similar just
165:05 - remember to change the styling and just
165:07 - change a little bit more functionality
165:09 - and similar
165:10 - the code might not be ready for
165:12 - production and you need to change the
165:15 - stripe api keys for production as
165:17 - similar but i hope you have learned a
165:19 - lot anyways
165:21 - if you have any questions feel free to
165:22 - leave me a comment below and answer as
165:24 - soon as i can

Cleaned transcript:

you're about to learn how to code an ecommerce website using django and vue that means you'll be using python on the backend and javascript on the front end you just need to know a basic understanding of these technologies to follow along this course was created by code with stein he's created a bunch of great courses on his own channel and we wanted to bring him to a larger audience hi in this video we're going to build the ecommerce website using django and vue i'm going to use django rest framework to build the api and the back end and then i'm going to use vue.js to build a separate front end which we're going to use to connect to the backend using axios to handle the payments i'm going to use something called stripe this course will assume that you have basic knowledge of both view and django but i will still try to explain everything as good as i can so hopefully you should be able to follow along anyway let me show a little demo of what we are building so it's easier for you to understand and follow along here you can see the project we are going to build we have a simple menu with the search the categories login button and the cart button and have a simple header which is uh welcomes you to the page this is a jacket store you have the latest products and a simple footer i go into one of the categories you'll see the products from this category and if i click view details you will see the full version of it with a bigger image title and a description you also have the price here and the possibility to add to cart and if i click add to cart you'll see a little popup down here which says that the product was added to the cart if i now go to the cart we have the possibility to change the quantity and you can also remove them from here if you want to like that and then the price updates here and also down here and if i now try to proceed to checkout just log in with my username code with stein put my password and then i headed to the checkout page here i need to fill out contact information card number etc and then we click paid stripe and when send back to the page afterwards to a simple success page and if i go to my account here i would have a list of my orders if i had any i don't have any in this version of this jacket store right now and i also have possibility to log out so that's basically the product we are going to build i hope it looks really interesting to follow along with i'm going to build everything from scratch and step by step and when we finish we're going to deploy this project to a live server on digitalocean but now it's time to get started with the coding here i have the todo list you are going to go through in this video it's quite long but we're just going to start at the top and work our way down first i'm going to install a setup django and everything we need there i have a folder here jackets would be which will be the root folder for all of this project view django and everything we need okay inside this folder i want to create something called an environment it's a virtual environment and every python package we install here will only be for this environment so when we are deploying this project later it will it will be much easier to have the same environment locally and in production and to create this just a virtual env and an environment eight or three eight two which is the python version i'm running and hit enter so now i have now i have it there on the computer we just click ls you'll see here the environment folder and then i need to activate it so we can install some packages and to do this i said source environment then activate as you can see here we have prepared the no environment 382 this means that if i now use pip to install something it will only be installed inside this environment and if you don't have virtual environment you can install it by just writing pip install virtual env in one word like this pip install virtual env i already have it installed but you obviously need to install it if you don't have it it might be a little bit overwhelming with all this environment and everything you're going to install right now but we'll come back to much of this later in this video so then it hopefully will make much more sense when we go through them multiple times so the first thing we're going to install now is django so just pip install django this will install the latest stable version of django and also a few dependencies that django has latest version of django is currently three one seven next we are going to install the django rest framework to this you just say pip install django rest framework this is what you're using to create the api in the back end and hit enter this also has a few dependencies and then we can install django dash course dash headers this will help us with security so everything between api and backend will be working securely and then we are going to install joser this will also help us with authentication users and similar juicer adds some a few endpoints to the api so it's easy to create users log in get a token for authentication and similar so just hit enter and this also installs a few dependencies and then we can install pillow this will help us with resize images and similar this is a python image library but pillow is a different version of it but it's much better and really easy to use and the last thing you're going to install in the back end is a stripe so just right click install strip so now everything in the back end is installed and we can start configuring it we just need to create a new django project and to create the new django project you say django admin start project and then the name i just want to call it jacket underscore django so i know it's the django part of this project and if i go into it check it's underscore django have a new folder in there and a file managed pi is used to run administrative tasks like initialize the database create super users and similar and inside the jackets django i can open it here so it's easier to see i have a initial spine that just means that python should handle this as a package asgi and wsgi are entry points for the web server settings to spy are globally configuration for the whole project and urls.pi is kind of like a table of contents of all the pages in the backend so i will come back to all of these later so we don't have to think too much about it yet okay and then we need to tell django about those packages we installed so if you're going to set install pi oops we have a list of installed apps there are a few that comes from django these ones but we want to add more to this first we had the rest framework just so now django knows that we are going to use it as well and then the next is restframework.org token because we're going to use what tokens for the authentication and course headers we installed and also joser so now we have uh said to django that we're going to use all of those and then the next thing we're going to use do the next thing we're going to do is to configure the course headers so below here add two lines course allowed origins this will be the address to the front and later you need to change this to the live server address or if you use a different address for the front end than i am and we also need to change the middleware middleware is the coded and that goes in the back end of django so above it's important it is above common middleware you say courseheaders.middlewear.course middleware so it's just that the django u goes through this code before it goes to the next part of the django code and that's it for the configuration so now we have done everything for the security in the backend for now then the last thing we're going to do is to go to urls just to remove this big comment here and i'm going to include the api fonts i told you about for joe sir so we are ready to create users but you need to import one more thing from django.urls and this includes so you can include pots from that project so first pod api slash v1 we include jose.urls and the same bot here and includejoser.urls.token so now we have everything we need in the back end this has added a lot of cool functionalities and now we can create users you can get authentication tokens and similar from the front and it looks a little bit like magic because now we get a lot of functionality without doing a lot but you will probably understand a lot more when you have used it a little bit so you can just save this file for now and then i want to do one more thing here in the backend and that is to initialize the database and to do that i said python managed to apply make migrations that's just to create the migrations files and then to run them i say python mentioned by migrate so now we have a new database with all of these tables so to test that everything is working we can also create a super user we can log into the admin interface that django comes built within python management by create super user oops super user and then i want the username to be admin admin jackets.com and then a password hit enter and now the superuser created successfully perfect and then to log into the admin interface we can run the development server that django comes with by saying python mentioned by run server this will store the development server at this address just copy this address go to chrome and it's not found because these are the only urls that are available but if i go to slash admin i can log in with the admin account i just created and everything here seems to be working we have the auth tokens but there are none yet of course and if i go to users i will see the user i created a new search is signed in and using the front end will appear here as well so that should be it for the back and for now now i can set the first task here to done next step now is to install a setup view and i just want to open up a new terminal just for view so cd documents and jackets that should be the correct folder okay and to create a new view project you need to install view cli first to install it just say npm install g at view cli this will install the newest version of view on your computer and when and just hit enter but i already installed it i'm not going to go through it right now so since i'm right here now i can create a new project by saying view create and then check it oops check view should be the name of the project and i want to manually select which features we're going to use we won't be able to transcribe the code real javascript i'm going to use the router the view x css preprocessors i can just remove the linter and then i can hit enter going to select 3.x preview and i'm going to use history mode for the router yes and i want to use dart says and i can store this in dedicated config files and i don't need to save this for later no so now this will install now create a new gnoview project and install the dependencies that view has great so now i can go into it cd jackets view oops check it view and i need two packages or libraries here as well to install them i can just say npm install axios this is a library you're going to use to talk to the back end and npm install bulma this is a css framework i'm going to use i don't have to think too much about the styling and similar for this project because we're here to learn vue and django so now everything there is installed i go back to visual studio code just look at the files here we have something called node modules which is the the packages we have installed public is the index.html which is the file we're going to serve and we have a few other config files and in the source we have the main.js which creates the view app app.view is kind of like the wrapper around all of the code views are the different pages store is view x which is a global state management for the whole app router is almost like the urls does pi in the django project it's all of the pages in the project components are small or large reusable parts of code we're going to use as well and assets will be images and similar i know it's a little bit much information right now but when we just only start adding code to each of them you'll probably understand what each of them do when you just done it a couple of times and if you want to use bootstrap instead of bulma you are free to do so but i'm not going to do that and it will be a little bit different but it's up to you what you want to do and if you want to test the view everything is okay we can say npm run serve so this will start a development server and this is the address we added in the backend just in the settings to spy so if i now go open up a new tab hit enter you'll see everything you'll see the front page of the view here and switch route so we see that everything is working perfect so now i can go back to the todo list and set this task to done next step now is to include font also i want to use some icons around different places in the page so it's very easy to implement i just go into public and into the index.html and then below the title here i just paste this one linked real stylesheet and then the link to the cdn which holds version 550 and two of of uh font awesome and save so this shouldn't have done anything with the front end so you can just go back here again as that this task clip done next now is i want to do some changes to the base template i want the menu and i want to remove all of this which doesn't have anything with our ecommerce website to do so if i just go back to app.view make this a little bit smaller and i can remove the contents here and i want to import my hair and to do that i just say at import dot slash node modules slash bulma i think that's everything i need for refresh now yes it looks like i have gotten the styling and i can remove this nav bar i want to create a div id wrapper around all of the content just to have one element in this template because that's required by view then i want to create a nav with class navbar is dark this is bulma clauses which will give a menu on the top with the dark theme close the nav just go in here said div class nav bar brand this will be the logo and then to show the jackets logo there i create a router link to just slash which is the front page and give it a class of nav bar item and then i just a strong jacket and close the strong and also close the router link down here i want to create the possibility to have a hamburger menu icon when you are on small devices so we just say a close nav war burger area label expanded false data target nav bar menu network menu will be the menu that shows when we click this icon and then add three of these which are three stripes in the burger then i can close the nav bar brand and then add a new div class navbar menu which you can see this are linked like that and one more div class nav bar and because i want the menu to be on one side of the page and the logo on the other page now the other side of the menu and here i want to add the two categories we're going to have summer and winter it's just router link to slash winter class navbar item and then the label we're going to show in the menu and then the button for the card is a little bit more complicated first we need to add a div close nav bar item and then a div close buttons because we're going to have two buttons and to get space between them we add this buttons clause and then the login button is just router link to slash log in button a slide to have a light grey button with the label log in and the same with the chord it's just slash chord and it's success it's green is a little bit more pretty or inviting to click on and here i want to show a shopping cart icon spam clause icon and i close fos fa shopping cards and then spam spam card and close the spam and close the router link close the buttons and close the nav bar item and then to get a little bit space below the menu and around the content we add around this router view a section clause section the router view is where all of the content is placed and then below there we have a footer class footer and then just simple paragraph showing copyright 2021 and class has text centered footer and save so if i now go here you'll see that we have this menu and everything from this logo and down here is inside that router view so if i now go to slash about which is a page that exists this is the router view content great so i can also just go to views and into home.view and clean it up a little bit and remove this one just say home remove the import of the hello world because we're not going to use it right now save if i go back now i just say home there perfect so now i think i can go back here and set this task to done because now the front end is finished for now and i can go back to the back end and start working with the products we're going to use in this project okay and if for now we just try to test this on a mobile device you'll see that we have this hamburger but nothing happens once we click it so we're going to need to implement some view js to fix this so if i just scroll down here create a new script and create a data return this is that object and i want one property here show mobile set the default to false because we don't want to show the mobile when we open the page before we click the button and to make it possible to click it we can go up here and find the button and i add here at click so when we click this we call the function or the code in here and just say show mobile menu equals not show mobile menu so if it's true it will be false and if it's false it will be true so now we just need to append a clause to this one it's true and to do that i just go at the end here paste a little bit of code v bind so we bind the attribute class to show is active if the show mobile menu is true so if you just save this now this is a view directive if you wanted to know what this is called just refresh and if i click here now you will see the menu go up and down perfect and then i can go back to the todo list and set this task to done next step now is to go to the backend i created django app we're going to create database models to have information about the products and the categories and to create the django app we just stop the server down here and say python managed pi start app and then the name which would be project and hit enter so now if i scroll up there should be a new folder there called product with the migrations folder the init.pi admin which will we use to register the models we create with the admin interface and apps which is information or config about just this app models.pi is where we describe to the database what types of information we're going to use and store tests or python tests and view those buyers where we get information from the database and present it to the front end so first we can go into models.pi and just remove this command okay so first i want to begin with the category model to create a new model with just a class category and pause in models.model i want one field called name which is a chore field with a max length of 255 this will be the name of the category and then i want the slug which is the address version of the name models.slug field and i want to order the categories by name in the backend at least and to do that you need to add something called class meta which is options for the model ordering create a tuple name and this is a template you need to add a comma there so it's iterable for the backend and i also want the string representation of this object because if we now add the category and see it in the back end we'll only see object blah blah blah so we want to show the name instead to do that we said def underscore underscore str underscore underscore was it himself say return self.name so that's much easier to understand what type of object it is and i need to create one more function so we can get the url for the category so it's easier to use in front and later this can this function is called get absolute url and to use it we just say return f so we format it with slash and inside there it pass in the slug which is the address of the category and save next step now is to use the migration script again to update the database but to do that we need to tell django that this app exists and to do that we need to go into install apps and at the top here i can say product so you need to you go information inform django about the app and not the model so if i now go down here i said python managed to apply make migrations you'll see that you want to create a new model called category and then we need to run python managed by migrate to actually create it in the database now the product cat no the product model will be a little bit more complicated first i need to import bytes io from io because we're going to handle images here and resizing and then i want to import peel which is pillow installed or import image from that library and from django.cod.files i want to import files so it's easier to create thumbnails and similar now we can go down here and start working on the model clause product models dot model the first field i want here is a reference to the category i want to use something called a foreign key which is index in the database or a relation key so first you just pause in category and set the related name so when on a category it's easier to get all the products by just saying category.product.all and if you delete one of the categories we also delete all of the products connected to it then i can just copy the name because i want to use that and also the slug then i want one field for the description this is set to blank equals true and null equals true so it can be empty if you don't want descriptions for a certain product then add a field for the price which is a decimal field set max digit to six and decimal places to two this might be different in your country than here in norway and then i want one field called image which is image field we upload this to a folder called uploads i'll show you where we're going to place this soon set also these two blank and no liquids true so we don't have to have image on all of the products and then one field called thumbnail we're going to generate the terminal based on image very soon i'll show you how we do that and the last field is the date time field with autumn now add set to true so when we create a new product in the backend it would automatically fill the date time field so we know when it was added to the database then i can copy these two i can actually copy all three of these paste them down here but we don't want to order this by name we want to order by the newest so copy minus date edit so we get them in descending order the string can also be self.name but here i also need to append self oops at the curly braces self.category.slug so now we get this log based on this category field and here we also need a few more get no functions we need one for f get image self here we check if we have the image in that field and if you do we return the whole address so it's easier to use in the front end and then we just say self.image.url if not we can just return an empty string and then we want the similar for the thumbnail get thumbnail if self dot thumbnail now we can just return the url to the thumbnail else and we first need to check if we have the image because then we need to generate the thumbnail and if you have it we can say self.thumbnail which refers to this field then we call a function called make thumbnail and pass in the image we have for this and when that's done we say self.save so it's saved in the backend or in the database and then we can return the address here but if the product doesn't have an image we just need to return empty string and now the last thing for this model is to create the make thumbnail so def make thumbnail self and image and we also need to set the default size to 300 times 200 pixels wide and then we're going to use the image we imported at the top here to create a new object based on this image just convert it to rgb so we are certain that everything is okay with the picture and we just say m.thumbnail and pause in the size we get up here so thumbnail is a in a builtin function in image there is a thumb i o and use the byte style we imported at the top and we save the image within this information as a jpeg and quality is just at 85 because this is just a very small thumbnail and then we need to create a thumbnail using the file we imported from django core files and we pass in image.name and now we just return thumb nail and save so now we will set the thumbnail to the image or the terminal generated and save it and return so now we can update the database again run the make migration script create product model and migrate great so now everything there is working perfect so now i can run the server again so i have it running in the background and i can go back here and set this task to done and sorry i just forgot one thing i need to fix the uploads folder so if i go to settings.pi we just need to tell django where to put the files first is that media url to this this will be appended to the end of the address of the server and the media root is where located on the server we're going to upload the images so just paste there slash media so now we can save we don't have any errors and everything looks okay perfect and then to use the the media in the front end we just need to go to urls and do a little change here as well so first we need to import the possibility to use the settings here in the urls file and we need to use a function called static from urls and at the end of the url patterns we add static use the media url and just tell django where the document root is this won't be used when they're going to use live because they will use a different server so we are still going to see some progress in the front end so it will be a little bit more exciting but we can now continue to the next task which is create a serializers and views for the project over products the serializer is where we get the information from the database and turn it into json so we can use it in the front end and to create the serializer we just scroll up and find the product app create a new file serializers.pi first we import serializers from the django rest framework now we can import the category and project model since we are inside inside the same folder as mods.pi we can just say those models and python will fix this for us then we create the product serializer and posin serializer dot model serializer to configure this we use the class meta just like the models and we say model equals product because we want to use the product model to get information and then i just configure what fields we're going to use in the frontend fields this is tuple and then we want the id the name to get absolute url function so we get it directly here the description the price get image and get thumbnail so if you have an image and when we call this for the first time the in terminals will be generated for us so this can be saved next we need to create a view set so we can actually tell django what we are going to put in or get from that model so from dot serializers import product serializer and i also need to import a few things from the rest framework i'm going to import api view and import response from rest framework dot response and i need to import a product from models and then i want to create a view set for getting the latest products which are going to show on the front page so create a new clause called late test products list and pausing api view this is generic views built inside the django rest framework helping us do all of this magic then i want to create a new function called get so we can override that functionality and do a little bit changes and we get the product from the database by saying products equals product product.objects.all and then we just want the first four or the latest products and then to convert this using the product serializer is a serializer equal product serializer plus in the products and say man equals three because we have more than one object and then we just return response and position serializer.data and we want a separate urls file inside here to clip keep things still tidy as possible from django.urls import port and include and from dot views import latest product list url patterns so this is just the same as the other file it's just more clean to have it a separate file for each of the models know each of the each of the django apps actually i can say from product import views so it's a little bit easier to separate them later and then put late latest products views dot latest products list as view and save and then we just need to import this to the other url spy file so at the bottom here we say part api slash b1 include product dot urls and save so everything still seems to be okay here i just go to the browser api b1 and i don't get anything there but if i go to latest products it's empty because they don't have any products in the back end yet so if you want to create a few products we need to go back to visual studio code and inside the admin.pi file in the products app you need to say from dot models import category and product and admin.site register category and admin dot site register product so if you now go back to the admin interface front page here you'll see that these two appeared here perfect so we can now add summer summer with lower cases and winter winter so now we have this hair great and we can create a few products summer brown leather brown leather the desk 199. and just select image just go in here select that one open save so now we have one product there you can create one in the winter as well warm jacket warm check it the desk for this product 2.99 and select the winter image and save and if i now go to the latest hair refresh you'll see that we get information about this product so we get the name the url the description price and the link to the images if i open this in a new tab you'll see that we can see the full size and also the thumbnail great so now i can go to the tool list again as a test task to done so now we can finally do some work on the front and again we're going to show the latest products on the front page so if i just go to home.view first i just paste the code to show the header with the welcome to check that information and then below here i want to list the products the first i created deep class column is multiline so i can have the title and also the products next to each other below there so then i paste a little bit more code the plus column is 12 it fills out the screen h2 which is size 2 which is medium sized and is centered so the latest product stays on the center of the screen then i create a product and for each of these columns i want to look through the list of products we are going to get very soon to do that we say v4 product in latest products oops products and you see now here i've got an error this is because django no view expects that each of these elements are unique so you need to find an attribute to the product id the point key product dot id so for every iteration we bind the data key to the id which should be unique for each product just close that one div class box so we get a little bit shadow around product and at the top i want the image figure class image and before so we get a little bit space below the image down to the text and to insert the image we just say mv bind src product dot get thumbnail and this is the whole url to the image we could use a shortcut to bind it by just saying colon src if we wanted to we can close the figure then we want to show a little title h3 clause is size 4 and then we show the name by using the curly brackets just like in django as a product dot name below the name i want to show the price this is just a little b with each size 6 has text gray and then the dollar sign product.price and then the last thing i want to add a button to review details but since we don't have that yet we can just write view details close that one if i save now and go back first of all i get an error because i forgot to close one of the divs but it won't work because we haven't created a function to get the information from the backend so this time we need to use excels so first and down in the script i say import xios from excels and then below there is a data because you need a new object return and latest product and create an empty list column there it's low here i want to go into one of the life cycles hooks of view called mounted so when the this page is finished we call this code and that is this dot get latest products and then we create that method below here in a new object methods like that and in here we call excels xcos dot get api slash v1 slash latest products and when that's done we get a response back from the server and then we can just this dot latest product equals response dot data because there's a list of objects so it's very easy to use like this and if you get any errors we can just show them in the console for now you can fix this later in the video and a little thing too i want to do is to create a simple style object at the bottom because on the image i want to remove the spacing around it so it looks a little bit more pretty it's just margin top minus 125 same with the left and the right so if we go back now it still won't work because we try to just go to slash api so here we could write the whole address to the server but i want this to work by default to do that i need to go into main.js as you can see here we haven't imported excels anyway so we need to import it here and tell you to use it so import excels from xcos and then below here i say excels.defaults base url and then the address to the server which you have running down here and then after router i say excels and save so everything should be working and if i just go back here now we have already gotten the latest products from the server perfect so now i can go to the todo list one more time and said done next now we're going to make it possible to click view details and go in to the detail page of a product okay and the first thing you need to do done is to create a new view set for the detail of the of the product so go back to views.pi and then we create a new clause product detail and also going to use the api view here but instead of the get function we're going to use a function called get object and here we're going to pass in the categories log and also the product slug here we need to check if the object exists pressing try and then we say return product.object.filter so we filter every product that is inside a category and then we get the slug or the product based on the products like we get up here and if it doesn't exist we will get an exception so accept product that does not exist this is the correct exception for this and then we want to erase the http 404 error and to use the 404 error we need to import it you can remove this render and just from django.http import http 404. so this is now a function and then we want to override the get parameter or function like we did here so def get get the request pass in the slugs and format set to none and then we get the product the same product equal self.get object which calls this function and pass in the slugs so we don't have to reuse this every time and we still want to use the product serializer so we get all of these fields for the full version as well then we can just say return response and pass in the serializer just like up here and save next we need to go into the urls file and below here we create one more path products slug it is a field or string and here django nara requires that you pass in a slug which we call category slug and once local products log these are references to these two and then we just say we're going to use views dot product detail i'm going to render it as a view and save so now we have a view for showing the product next is to create a view page it's not a view like in django view but viewers in view so if you just go down here and into views create a new file called product dot view in here we always begin with empty template and empty script name can be set to product and we can say data return can just be empty for now and we can import excels from excels because you know we want to use this first i like to create one div class element page product just don't know which page we are on and then create a div class column it's multiline and then to the left on the screen we have a div class s9 which is almost a whole width to show the image the title and the description first we showed image just like in the list of protests but here we use mb6 we get even more space below and we bind src attributes to project get image instead of get thumbnail and below here i want to show the title so h1 clause title type and add this clause we get it very big and pass in project.name and below there i want to show the description now you can close this column create one more div close column oops s3 close that div first you just want to show a subtitle with information about the product then i want to show the price and i prefix it with a dollar sign and then i add the button and input field for the add to cart functionality this is a has addons which means that the button and input value will be into each other i use input type number because i expect to get the number in the back end and class input so it gets pretty styling and the minimum i allow is one and then i bind the model this field to a data object called quantity so if i now go down here inside data i can say quantity one sorry not these quotes like that so this is default now to one and it can't go below one and then below there i create a new clause control and have simple button add to cart i will fix this later in this video and then to get the product from the server we need to use axios and he's use the mounted function again so mounted this dot get project oops methods get products like that and the first thing i want here is to get the categories log from the url we are on and i also want to get the products like before i do anything more here i just want to import this page into the router so we can visit it and see that everything is working and i want to add one more product here which can be an object just so things here will work and not crash the site if i now go to router you see here that you have the home page and the about page but we now want to import the product page we just created so import project from dot slash views slash project dot view then we want to append it at the bottom here because this has the same url structure as a project but we want to use dynamic routes and that's best to have at the bottom so create a new object this part and here is a slash colon category slug this is the name of the parameter slash colon product slog so just easier to separate the slopes from each other name project and the component we're going to use is product which we imported here a component and page is almost the same thing and save so everything here seems to be okay so for now go to the home page to replace the view details label with the button like that now we have a router link and we bind it to attribute called to and here we pass in the product that get absolute url which we get from the backend the button is dark and has empty force a little bit space above the button so if we save this now go back you see this turn into button and at the bottom of the left screen you will see winter slash warm jacket if i click it get an error because this does get product is not a function okay if i go back to product.view this should be get product just refresh okay so there's no errors perfect if you see these warnings here i'm going to fix this later it's just because the winter the category and login similar doesn't exist yet so now we need to continue this and get the product excels dot get slash api v1 and to get the products we now say products then we want to pass in the cat node products log but first the category slug dollar sign curly bracket like that slash dollar sign curly bracket and this but this formatting doesn't work if you use this regular quotes so we need to replace it with this like that so now we get the correct url and then we will get the new response back from the server and then we can just say this dot product equals response dot data and if there are any errors you just console log errors you can show it in the console if you want to know what error is so if we save now go back here refresh okay there's an error dot done is not defined sorry i forgot to add the dot refresh and now we got information from the servers now we have the image title description and also the price if i go back to the front page now click this product instead it everything here has changed perfect so now i can set this to done this to dawn and this to done great done next now is to set up the view x or state management we need this to make it possible to add things to the cart for authentication and a lot of other things so if you now go back and find store index.js i have already created a store this comes default from view state is the variables or informations mutations is synchronous mutation students variables because you can't just change them directly actions will be asynchronous function to change it modules i'm not quite sure so inside here we create a new couple of new products so in here we create a new so in here we created a couple of new properties first we create a new object called cart and inside there we have one list called items and then we have is authenticator we can just set it to false so it's done and same with the token this will be used later when we add login and it's loading set defaults because we want to show a loading bar when we're going between products anything into the cards in my cart and similar i can just save this and i can set this to done because that's actually setting up the store like that so now we need to make it possible to add things to the cart and then we need to add some functionality to view x and we do that inside the mutations first i want to create a function called initialize store this is so we can store things in the local storage of the webs of the browser first we check if the local storage exists with an item called cart and if it doesn't we just create it and if we get it from the local storage we can state.cart which is this json.parse and then we get the object from the local storage but if it doesn't exist we need to create it and then we say local storage dot set item cart which is the name of the object and then we stringify this object and then one more add to cart state and here we want to pass in the item we want to add to the cart first we create a new variable called exists so here we check if the item we are trying to add to record exists in the chord from before so we add a test here if exists that line so if it's larger than zero then we know that item is already in the course so we get the first object in this list since it's already in a list i just do it like this as a quantity parse end get the quantity and add the quantity we try to add from the this form here so this is a 10 there it's increased by 10 but if it's not in the card you need to add it to the cart and to do that we just state.court.items to push the item and so all of the information we get will just be pushed right into the cart and then we say local storage set item cart and then we stringify the whole object so the next time if you just refresh the browser now everything will be stored to the next time perfect so then i can set this to done initialize the store in app.view so then i need to go back to app.view because the first time or yes when we go into the page we want to make sure that the store and cart is existing so in here i created one object called cart so i have it available in this template because we're going to use it up in the menu and just like we have a hook called mounted we also have something called before create so before this is created we want to initialize the store and to initialize the store we say this dot store dot commit initialize store commit is used to call the actions we have here no the mutations not the actions so if i just go back here now we now initialize the store and we can create or and we can close the before create so then i can set this to done and then i just want to show the card length up in the menu so if i go back to app.view again and scroll up here after the chord we said that two parenthesis and chord total length this is a computed value and just like we have methods and variables similar we have something here called computed these are calculated variables based on things around on the whole page so we want to create one called a cart total length and every time the car changes this will also automatically update first you create a new variable let total length set it to zero now we want to loop through all of the items in the chord and for each iteration we just say total length plus equals this dot chord items dot quantity return total length and save if we now go back here you'll see that we don't have anything in the cart so then we need to make sure that when we click this this is updated automatically so if you see here now in the to list we have add we already have this button but we need to make it possible to call the the store with ux so if i just go here say add click add to cart and i can copy this go down to methods and below the get product i create it like this first i checked that the the the value inside this.quantity which is the field a pair actually is a number and if it isn't the number i just set it to one if anyone has managed to changed it somehow and then i create a new object const item product which is set to the product we are on and the quantity is a reference to the quantity up here and then to call the store we just said this dot store dot commit add to cart and plus n item so if you now go back to here we call this function and pause in item and this code will execute so if you now just refresh add to cart that did not work okay console.log add card just test that this actually is clicked on yes so why isn't this working pass in this product the quantity okay so i think i forgot to do one thing and that is inside mounted hook on the upper view i just said this dot cord equals distort store dot card because the card total length calculates this so now you see five there and if you click one more it also increases so now it's working there perfect so then i can go back to the product.view just to remove this comment and next i want to make it possible to show the little uh popup saying that you have added the product to the cart and to do this i just need to stop view here and install a new package called npm install bulma toast and now we can say mpn run serve again and go back to vs code and first at the top here below axios as i import curl bracket toast from bulma toast and inside here below at the bottom we have added the product to record we call toast set the message we want to show the type which is class which will show a green it's dismissable pause on hover duration which is 2000 milliseconds and bottom right of the screen and save so if i now click here again so refresh click the product was added to the cart great now i have added to cart functionality and i can set this task to done i just want to move these tasks a little bit because i want them below here below there so now i want to implement a loading bar so when we click product and things go slow between the server i want to show a loading bar so you know what's going on so if i go into store you know remember that we added this but you need to make it possible to change this so i create a new action here or mutation so set is loading so we just pause in false or true from the one of the pages and then if i can go to product for example and at the top of this function i can say this dot store commit so now we set set is loading to true and when this excels is finished we can say false like that but to make sure that we don't call false before it's finished we need to set this to a sink and a wait so when this is finished this code will execute and save so nothing will happen now because we haven't added the loading bar to the screen yet so if i just go to app.view scroll up above this section create a new div is loading bar has text center and bind this clause attribute and set is loading if state is loading is set to true so if this is set to true the loading wire will show and here i just add a div class lds dual ring and we need to add some styling to this so if i just go down at the bottom and find the style object i've already prepared this so we set lds dual ring display inline block width and height is set to 80 and then after this we had content empty set display block set width and height of the circle to 64. more genus 8 border radius and the color i will add this to the github so you can easily get it from there if you don't want to write all of this yourself then we set the keyframes because we wanted to go down up and circle or rotate we set this automatically to hidden and height to zero but when we overloading the height is set to 80. so we save this so if you save this now go here refresh you see this here a little bit while we wait for information from the server so now we have a loading bar set this to done and if i want to use this other places like the front page i can do that just copy that line find where we are loading this a sync and set it to await true and false i could set it in here but if we got an error then we need to set it to false in there as well so it's just easier to show it or remove it after so for now front refresh you see this very fast great so then we can continue to make a possible to set the document title because as you can see here it says check gets view and we want to make it possible to click a product i want to say black no brown leather instead of just jackets view which doesn't make any sense so if i for example can go to project.view and after i've got the product from the server i can set document.title this.product.name and pipe it into jackets like that and the front page you can set this in the mounted here you can just say home like that save so if you now refresh you will see brown leather pipe jackets if i go to the front page it says home great so this will be implemented all pages we create from now on so i can set this as well to done so now i want to make it possible to click winter and summer appear because now nothing happens when i go to these pages so the first thing i need to do is to go back to views.pi and create a new view set for the category so just category detail just like here and i can copy most of this just paste it remove products like okay and instead of saying product area of course a category because we want to get the category not the product i can remove the filter as a slug is category slug and the same with this one can be copied and get remove the product slug remove the product slug and here we want to use something called a category serializer which you are going to create very soon copy and paste and save so now we have the view sets but we need to create the serializer for this as well so below the product serializer we create a class called category serializer and pause in this one more time then we say class matter model equals category and then the fields we want to use is id name slug and we also want to get all of the products connected to this category and to make sure that we get all the data connected to the product as well i can pass in products equals product serializer and then money equals true and i will use this product serializer to get the data and pass it in here as well and i can copy to get absolute url i don't need the slug actually because i get it in here save then we need to import it here so we just pot products slug category slug views dot category detail dot s view and that's it for the back end so if you now go down to view again we need to create a page for showing the category so here's the new file category.view so begin template div class page category close it script name is category oops category and i know we're going to use xco so import excels from excels and i want to show the toast if you get any errors we're going to show the information that we got an error from the server and in here is data return create a new object called category and a list called products inside there and up in the template you also want a div to show the title and the product inside there so it's just like the latest product this is size 2 hashtag center and just category.name i'm about to get the category from the back end we create there go into the mounted hook mounted and call this.getcategory and now we need to create this function methods get category and we can set this to a sync as well because we want to use the loading bar here also but first we can get the categories like from the route parameters just like we did in the detail page for the project then we can set the is loading to true and to false defaults after excel's request axios dot get and here i just pass in the route to the category use this one inside there dot then response create a fat arrow function this dot category equals response dot data and here we got the category and also the products and when we get this from the server you can set the document title to this.category.name pipe jackets and if there are errors you just say catch error console.log printed in there but since we have the toast available we can show something went wrong please try again and then you show a red information so now everything there is okay but we still need to show the products but we can first import it to the router below here import category from dot slash views category.view i can make a copy of this it will be a little bit simpler because we don't need product slug we can just have it like this remove the trailing slashes category category okay so i have an error in the python code name category is not defined and that's inside the views.pi sorry i forgot to import the category model of course for now refresh something went wrong i getting 500 error from the server let's check it out what that can be category serializer forgot to import that as well sorry save refresh now we get summer but we don't have any product to show there yet but if i go to the front page to home.view i can just make a simple copy of this code go to category.view paste but instead of saying latest product is category dot products and save and then they show there but the problem now is that we are uh we are duplicating a lot of the code so this should actually be turned into a component and that is the next task in the list i think yes convert product to a component so inside the folder components we can create a new file product box dot view so this can be reused all over the page so i can just paste the same code this is the code from the front page if class column is tree we just remove the v4 and then script name product books and we need a way to post information from the parent down to the component and then we use something called props and i have one props here called product which is an object so if you try to send in anything else you'll get an error and then the last thing is to go to home and i can just remove this code go back to the product box because i just want it in here so it's just connected to this component so if we save now we should be able to reuse this code so in home dot view we can go to the top here and say import product box from at slash components that is just a shortcut for the root folder of the view project and product box like that and to be able to use it here we need to add it to the list of components and then i want to remove all of this and replace it with this much prettier code sorry one too many dips there so now we just say product box use the same v4 but here we should latest test products bind it and we bind product to the product we get here and pause it into the prop here so it can be used here as well if i go back to the front page it still looks the same but the code is reused so i can do the same for the category page if i go back to home copy this like that go to category and then i just paste it in there then i just need to import it import product books from at components slash product books and then just register here components like that and save so now it's much easier to maintain oops typo components so if i now go here there is something wrong latest product sorry did another typo here it should say category dot products save so now we have the same code on all pages but if you look closely now if i click summer winter nothing happens and this is because we need to watch the route for changes because when we switch between two similar dynamic routes the life cycle hooks won't be cold so when i click the winter or summer the mounted hook will not be be clicked or refreshed from view so we need to fix this so below mounted i create a new object called watch so this will watch changes to the route and here we can check that if to the right we're going to is a category then we call this here function again so if we now click save refresh and i click winter the products change the title and similar great so now everything there is okay so now we have the possibility to view a category to get this to done and then we want to make it possible to search we want to add a simple search bar up in the menu and then the first thing you need to do is to add some a new view so first you need to import something more from the rest framework because we need a decorator here here i want to use a simple function best views instead of the classbased views and here we use the decorator api view and we say that we just want to accept post requests to this view search which is the name of this view and then we get the query from the request data and if it's empty it's empty but if query we want to check if it is empty and then we say product equals prodigy product dot object filter and we check if the name contains the query or if the description contains the query so you just need to import this q function from django which means you make it possible to do a little bit more advanced query sets to import it we can scroll up and just at the top here we say from django.db.models import queue you can go down and continue and then we just want to use the same serializer the product serializer and pass in products return and just copy this line like that and if the query is empty we can just return an empty products list and save and then i just want to import this to the urls so at the bottom oh sorry i can be above here since this is a fixed word and not a slug so then we go to slash products search to get information from the server okay so now we have the route so then we can go back to view and continue the development there so if i just find app dot view scroll up and above the nav bar and i want this to be on the other side of the menu to do that i create a new div class app bar starts then a new dave claus with navbar item and then a formatter get action slash search slash search is here on view and not on the back end we should get back to you soon and just like the field has addons we have it here as well just like on the add to cart button and at first control input text class input placeholder what you're looking for and give it the name of query whoops looks weird okay like that's around the button close button is success in here we have icon which is just a search icon if it's saved now go back here you will see that we have the simple search here with this icon from front awesome so then we can create the search page which you to go to and click this to create a new view search dot view create a new template and a difficult page search and script tag name search and now i'm going to use excels here and i can import the product box like on the front page and the category page because the product box will also be used here i can create a data array return products this can be a list and then components so we register the product books here and i also want one more product no property here called query and when we open this we're going to mount it and we can set the document title to search and then a pair create some more html this is a div class columns is a multiline and then we have a div for the title and information about which search term you have searched for so search and then search term this will just print the contents of this variable close the div close that div and then below here we can call this component again and just loop through just like on the other two pages so if we save now we can import this to the router so just test it it's working import search from dot slash views search dot view and then again add it to the list here okay copy this one paste it above there search paste there and search and save so you can now go back here i can say check it hit enter search term is empty so there's something wrong or something i have forgotten to do yes in the mount that here we need to get information from the url like that so then we get the location search substring they get all of the parameters based on this url and then we can get the query from the url then we said this.query which is a reference to this to the value of the query in the url and then we can set this dot perform search like that okay just create this functionality so we have it methods perform search save so even now go back here you'll see that they have jacket in there because that's what what we were searching for now we can set this to a sync because we want to use the loading bar here as well true false after the axios so here is the evade excels and then we use dot post because we want to post the query back to the server to this route which we created and then when we get the response we can just add this.product equals response.data save and if you go back now you will see that we got this back from the server your search brown instead we should get a brown leather jacket perfect so now we have a simple search for our store which means we can go back here so this task done great so now we can make it possible to go to the cart so we can see what we have in there it possible to increment and decrement the content and similar but we can start by creating a new view chord dot view create template tag tab class page cart close it script name cart now we can just import this to the router before we continue so it's done make a copy of one of these cards card and i can copy and paste here as well chord chord chord and save so then i can click here we rewrite it here but there are no contents yet but we're going to fix that now so if i go back here i can add the title and div class column so if i save now you will see that we have the title there so everything is working as it should up until now at least and then below the title i create a new deep clause and add a d plus shadow so it's a little bit the shadow around this contents and then i add a simple table set it the full width so it fills out the whole screen and this will only show if there are products in the cart and if there are not you can see here we say we if you use that directive and down here is a vls so if you don't have any products we show this information instead and the table contains the product price quantity total and the symbol empty one for the actions here we're going to use a component we're going to create very soon where we just loop through cart dot items so if you go down here i can import xios from xcos and i can import this cart item we're going to create i just want to make something more here data return cart an object and set the empty list in there so the code up here don't crash and then i can say components so we register this with view and save so now we just want to create this before we continue so up here in the components folder cart item dot view create a template script name cart item and here we want one prop called initial light time because we don't want to change the item we get in so we need to create a new item m and pass it in back later you will understand very soon then we create a new data object which just returns the item and our set the item to the property we get from the parent and we have one method called get item total let's just take the quantity and multiply it with the product price and if you just go up here to the template again paste in a little bit of code first we have a td with router link which is connected to the product get absolute url just like in the product box here and then we just show the product name below there we have the product price the item quantity and then we use this get item total which is the method we created here for calculating the total price to fixed so it's not very many decimals here and then add a button which is not going to work yet but if we save this go back to the cart you don't have any products in the cart but that's because we haven't activated this yet so we can create the mounted who care again like this this dot card equals list store just like we did in app.view so if we save now go back still don't have any products that's wrong because we have eight up here i think it is because uh this value hasn't been set yet this is a computed value so add a new property here computed card total length and then we use something called reduce which is the builtin function in javascript so we loop through all of the functions no items there this is the accumulator and current value and then we just combine them to each other and default value is zero so it just takes zero and plus every time there is a quantity so if we save now now we see the contents here perfect so that means that this function is working as it should like it's just the this value is going up there and then for every time we go through at item it's adding the item quantity okay and below here i want to create a button for going to the checkout and also showing the totals so below here paste in the code div class column is 12 and box so i have a little bit shade around that too give this subtitle summary and then we create a new get total price which is a new computer value i'll come back to just to show the total price and then the number of items we have and then below there we have a button to cart slash checkout which will come back to you very soon so i can just scroll down this function is very similar to the total length just that it takes the price and multiplied with the quantity instead so if we save now go back here you'll see that the total is showing here and that you have eight eight times in the cart great so now we can go back here to the todo list and set this task to done and the cart item is already a component perfect so now i want to make it possible to click plus and minus to change the quantity and the card and also click the delete button to remove it totally or completely from the course okay so to make it possible to change the quantity we go back to curve.view and then just below oh sorry we're going to cart item so it's easier to handle it there in the component so below item quantity we are decrement quantity and increment quantity plus so then we're going to create these two functions as well item and increment quantity there press an item like that now we have the plus and minus button but nothing happens when i click this but that will be fixed now so when we click increment quantity you say in item dot quantity plus one and then we call this dot update card and when we call decrement quantity is a minus equals one but i also want to check that if the quantity is zero then we just want to remove it completely from the cart so we can't go below one without it being removed from the cars then we can create this update cart so we can update back to the parent and when we call update card we just say local storage to the set item cart and then just stringify the whole object of cart which we have in the storage and since we already here we can create a remove from cart as well this will call a function back to the parent and make that remove it from the object because we can't do it directly from here since we're in the component so let's just add the button for this as well so if i go up now just replace this button where we add add click remove from cart pass in item and then it's this function that will be called so if i click this now it go down as you can see down in the left here in the summary the price changes if i refresh that process and everything has been updated perfect but if i click this now it won't uh work because we haven't done anything to this so what we need to do now is to just copy this and go to cart dot view and at the next line is a v on so we listen to remove from chords and we just say remove from cart and then we need to create this function so this is from the from the component and this is in the chord dot view so i just scroll down below no sorry methods let's create a new property and then i have a function called remove from cart in here i said that this dot card dot items equals this dot corted items and then we filter out the product we get and remove it from that list and save if i refresh now click this one it was removed from the card and the prices here was also updated perfect so then i can actually set this to done because now we have made both of these two possible okay so now it's time to make it possible to sign up and log in when you proceed to the cart or sorry the checkout okay so first we can start by creating the view for this so sign up dot view create a new template live close page sign up and script name sign up and i'm going to use axios here so import axios from xcos oops and i want to use the toast if there are an errors in the sign up form then i have a data object with the username password and i repeated password and a list of errors if there are any and inside here i had one more dip class columns and then column is four is offset fourth it's narrow and on the middle of the screen close that close that and then we can import it to the router just to see that it's working router make a copy of one of these sign f i can copy the search for example sign up sign up sign up and then i don't have any buttons for this yet but if i try to go to sign up instead i'll see the title at least below here i want to have a forum we're filling out all of the information we need so just go back to signup.view and below the title here add form and when we submit this i want to prevent the default action which is to submit it to the server we call a function called submit form we can create this so we have it down here like that then i want to add a few more fields up here first i have a div class field and a label username and a v model username which just returns or is connected to this one and then below the username i have two fields for the password which is password and password two so i can check that they're matching and similar and if there are any errors i want to use something called div class notification so we can show information there and print out error to the user and this will only generate or be rendered if the errors has length and if there is we loop through them and show them as a simple paragraph then have a simple button to submit the form and if you already have an account you can just click here to log in we can go back and see it now so we have the three fields the button or click here to log in but we don't have haven't created that yet so now i just want to create a functionality for signing up remember that everything is done in the backend so it's just here in the front end we need to change things okay so the first thing i want to do is to reset distort errors in case you try to sign up multiple times and then we can validate the username just to check that it's not empty and if it is empty we push this string to the list of errors if we save now first just click sign up you see this username is missing and then we do the same for the password but you just check password one and down here we check that if they don't match and if there are no errors now we can continue and push the information to the server and say if this.there is not this.length then we can go into this first we create the object with the username and the password which is information that will be sent to the server and then we say excels i want to use the post so we call post to this route and pass in the forum data then we get the response back from the server and we show a toast with the information that the account is created so go please go and log in and then we use distort router push to automatically redirect you to the login screen and the error list here is a little bit longer than we are used to we loop through the errors we get from the server and just push it so if you have problem with that the username already exists and similar you will show it here okay so now we can save and we can try to create an account code with stein sign up account was created and i got an error at the same time okay i got an error because the login here doesn't exist yet yes i get that category does not exist so i need to create the in login page so that is the next task anyway so i can just set this to done because i got the new account but there is an error because the login page doesn't exist so create a new file log in dot view and if i just go here now to the router we can import it log in and just copy this log in log in and save so if we now refresh we don't get any errors there so now we can continue and build the login functionality so for now just go back up to login.view paste a little bit of code it's almost identically to the sign up page you can just copy that and remove password to and change the login or sign up to login besides that it's identical i can create the script and we can import excels we can set the name to log in and we can create the data array with username password a list of errors mounted document.title log in pipe it into jackets save so now the title is set up there and i have the simple login form perfect so but before i continue and make it possible to call the backend i just need to change the store view x a little bit so in here below the initialize store i add this because i want to check if you have a item called token in the local storage and if you do we set token this object there to that value and is authenticated is true and reset them if they are not apparent in there and then we need a function to set the token very simple just said token and pass in token and then we set authenticated to true and the value of token to token and the same with remove token when we log out we just want to reset these two so you're not don't have any problems there i can save this close it for now and when we call the initialize store inside app.view i need to make a few small changes there as well first i want to get the token from the state so we know all the time if you are authenticated or not and in here we say if token so if you are authenticated we want to set the access default headers or authorization token to the token we have stored in the browser and if not we set authorization to to empty and save but then we can continue and make the rest of the login functionality so below the mounted we need the methods for creating the login function or the submit form here i want to call async submit form like that first i just want to reset the authorization in case there are anything that from the an earlier session or similar and i want to remove the token from the local storage and then i create a form that i just like and sign up but here i only have one password and then i just paste simple axios post which goes to token login and we get the response back because the new variable called token with uh in the information from response to data.org token and then we call the store to set the token with information we get from the server and we set the default header here to token so that every time that we call the server from now on we have already set the token and we store the tokul token in the local storage so we can refresh and everything will work and after that we want to go to the part where we're coming from so if we were in the course and click proceed to checkout you would be redirected to the login page and then you'll go back there after and if there are no it just be redirected to the cart when you sign in and here we just had a simple error just like in the sign up now we can save okay there's an error axios is not defined sorry i think it is in the update view i forgotten to import here import axios from excels and save so now refresh i have this i can try to log in with the user i just created log in and yes i was redirected to the cart so hopefully and probably everything was working there now so now i authenticate that as code it's time user so then i can go to the todo list and i can set this task to done and i want the simple my account page where i can make it possible to log out so if i just go into views there creating a file my account dot view created template and script name my account and we have a simple method here for logging out this is just a function logout and we reset this we remove everything from the local storage and we commit remove token so the state is also updated and when that's done we redirect the user back to the front page of the store or the ecommerce website the template here is very simple it's just a david glass page my account and i have the title my account with the button where we when you click that you call the logout function and it's just a button with this danger so it's red and it's easier to understand what it does okay so now there's a little bit of magic we need to do in the router because we need to add something called a router guard now because if you go to my account without being authenticated we want to send you to the login page so first we can import this my account and just add it here my account my account like that so now it's just like the other but we need to append some metadata here so you can tell view that we want this to be guarded by authentication so meta object require login equals true and to make this happen we need to scroll down at the bottom here we will create the router so before we go into that route we want to check in the state if we are authenticated so below here we say router dot before each so before each route we go into we we want to loop through this code so this is a little bit complicated but we checked that if to dot match some record require login so this will trigger when this is set to true and not store.state is authenticated so if you require login and you're not authenticated we want to send you to the login screen and then we say next name log in which is the page a query just so we know we're going to redirect you to after else i can just call a function called name and then we go to the my account page so if i now go to my account you're probably here okay here is an error store is not defined i forgot to import store in the page in the index.js here so at the top here i can say import store from dot store and save so if i now refresh you will see that my account page and i can log out access is not defined forgot to import it of course import excels from excels save refresh logout and that was logged out great try to log in again call it's time like that great so now we have login functionality log out and sign up perfect so i should probably change this because we don't want to see the login button or authenticator will much rather go and show my account button that's not very hard to achieve so i just need to find app.view and then where i have the login button create paste some new code here we create a new template and check if you are authenticated and we want to show the my account button if not we show the login button so if i just save now go back here using my account instead of login perfect okay so next step now is to proceed to the checkout where you need authentication and that we have already fixed authentication so we can create a new page for the checkout so in here create a new file checkout.view okay so first we create a new template with the page checkout multiline and the title as usual oops close the div close the div and close the template and create the script name check out like that the dead object here is a little bit longer because here we have the cart stripe card and all of the information of the customer and the list of errors then we want to go into mounted as a document.title equals check out jackets and we want to set the court here to this so we get information from the state in to this one also and we need a method for getting the total of the cards or get the item totals already so for each item we get the total of the item and then i have copied the two computer values from the cart page so they are identical and then i just want to import excels before i forget it import excels from excels and then we can just changes to the template first we create a new box with a simple table inside where we show the items product price quantity and the total so here we also add the body to the table your looped record.items and set the key to product id here so the product name price quantity and i'm used to get item total that created down here and then i want a simple foot for the table where you show the total length the total price and similar so if you save this now we can go into router to import it here check out like that and now i want to copy this because i want to require login when you go to this page and i want it below here so i'll connect it to the cart and the url is cart slash checkout the name is checkout check out safe like that so now we have the possibility to go there so if we go now here proceed to check out but you don't have any products there so we can fix that first add the cart go here proceed to checkout and now we have the summary here of what we are going to pay perfect now we need to add four below here we add information like the name phone number etc so then i can go back to the checkout page and below this div i think yes create one more div with the subtitle shipping details close that div that looks okay and all fields here are required to fill out and then below this i had a div class multiline because i want the some fields there and some next to them so we don't have a very long form first i had the fields to the left the first name b model first name which is connected to this down here and then the last name the email which is type email so we have a validation from the browser and the phone and then the field on the right side will be address zip code and place so if i save now and go back you'll see that i have much more hair perfect but we need a button and a place to fill in stripe and if you get any errors from the server or from view you want to show them here so it's just like other places where we're shown errors hr just add a div element id card this is for stripe i'll come back to that soon and then we check that if the card.length is more than zero then we want to show the button where you can pay with stripe then i just need to create this function so it doesn't crash like that if i save now go back you'll see pay with stripe great actually i think this is supposed to be one more div out i'll just cut this out paste it there so now yes that looks much better so here we'll it'll be possible to add the fields for stripe soon so i just want to extend this a little bit before we go further to the next task paste in a little bit of code first i just reset this errors list then i check if the first name is filled out and etc of all of the different fields so we just save now try to submit you'll get information that all of the fields are missing but now we have a simple checkout page at least so then i can set this task to done and then i can create a simple success page before i forget it so just find the views folder here create new file called success dot view template script name success i can set the amount add to success jackets and the template will just show that your order will be processed within 48 hours whatever you want to show here to the customer save and close then we can import it to the router so it's done so router index.js success like that so go down here card slash access success like that so now we have the simple variable redirected to when the payment is done like that okay so then i just need to make sure that the that the stripe is working in the back end so that's a little bit more job so if you haven't created an account that's stripe you need to do that just go to stripe.com it's free and then you get the api keys you need and when you're done that you can go back to the settings.pi file and create a variable there i like to have it up here somewhere and it's stripe secret game and it's a very long and you need this test key and it's important that it is the secret key which you're going to use in the back end and to keep track of the orders we need a new django app so if i just go down here stop the server python managed by start app order and before i forget it i can just append it to the list of installed apps order save and close and now we need a model to keep track of the orders so find order here go to models.pi i want to connect the order to users and it import this object from django which is the user object your request you are authenticated with then i want to import the product model because the items is connected to a product then i create a new clause order which is the order model and pause in models dot model and then to connect the user to the order i just create a new foreign key set the related name to order so it's easy to get all the orders for a user then just paste in all of this field which is the contact information we are going now we are passing in in the checkout form and i want one field for uh for the date time field so i know when the order was created and then i want the decimal field so i know the paid amount so i get this from stripe and fill it out just so i know that i can double check it afterwards and i also save the stripe token that was used to perform the purchase and i changed the ordering to create that in descending order so that in the back end everything is okay and when you show the ordering and then my account page and then add a simple string representation of the object which is just the first name so it's easier to see in the back end and i want to order item as a separate model as well so clause order item models dot model first i need a reference to the order so i just do like every other foreign case and i need a reference to the product so i know which item which product it is on the item and then the price so it's easier to get i don't have to go through the product to get it and then the quantity which is defaults to one and then the stream string representation which is just the id so it's easier to see in the back end so that's the models for there and then i can update the database by running make migrations and migrate then i can run the server again great i can also close this and now we have the models okay so to make it possible to proceed to the checkout and everything is working in the back end we need to go into views slash no order slash use pi and import a few things first import strike which you're going to use to talk to stripes api and then we import settings so we can get the secret key we added to settings.pi we need to get the user i need to use http before if there are any errors and then a simple render and then you import a few functions from the rest framework like status authentication permissions and just like in the in the product slash reviews.buy then we import the two models we created and i also need to import the order serializer i want to come back to that and fix it very soon then i do create the api view and here we just want to post requests i set authentication because we want to require token authentication and that the user is authenticated then we create a new view called checkout and we want to use the order serializer with the data we get from the the form we fill out in the checkout page now we can say if serializer is valid that means that all of the data is correct and we can proceed with the checkout then we initialize stripe with the secret key we get from the settings file and then we can calculate the paid amount by saying sum and then we take the item quantity and multiply with the price and we do this for every item in the serializer validated that are items which you get from the post form and then we want to add a try here because if the payment isn't successful we need to accept this and show an error to the user first we create a new charge for stripe i set the amount to pay the amount and multiply it with 100 because the stripe wants this in cents and not in dollars i want to set the currency to us dollars because that's what i want on my ecommerce and then i just show a simple description which will show up on their bills which is a charge from jackets and source which is the stripe token we get from the front end so that everything is connected and working now just close this and when we go go through this that means that everything is working and we can save the data in the serializer set the user to request the user which is the requested user and there's a paid amount to the paid amount we calculated up here and then we return response as a 201 created so the front end knows that everything is okay and accept exception so that means that there is something wrong and if there is something wrong we need to show a 400 400 bed request and the same goes with if there is something wrong with the serializer we just show the same error and save then i can create a new urls file for the order urls.pi from django.urls import pot not fromorder.notimport views and url patterns equals credit list part okay do it like this but check out we use the checkout and the name is also check out don't think we need this but yes like that great and then we need to create a serializer for the order so inside this app create a new file serializers.point so first we import serializers from the rest framework and then we import the two models we created and we want the product serializer since it's connected to and one of the items and then i create the order item serializer class matter model equals order whoops order sorry order item this is the order item this has to be above the order serializer and the fields i want for the order item is price the product and the quantity and then below here i create the order serializer plus model equals order and the fields here i want id and all of these names stripe token and items and to get items i need to do just like we did in the product for the categories so items equals order item serializer as that manager and what we need to do now is to override the create functionality for this serializer to do that we create a new function here called def create and here we get the validated data we remove the items from there and then we create a new order based on the validated data we get from the form and then we loop through all of the items in the list and we create a new order item and set the order which is a foreign key to that item data and the product is already included here now you can save this so i think that if i now go back here and just fill out something here play with stripe nothing is working because i haven't created the function here in the com knowing the here we need to call axios which i've already imported so i can scroll down here so below here i check again if the error has length meaning that if there are not errors we can go into this and the first thing we do then is to set is loading to true and then we use this dot stripe i will show you how to edit create a token based on the chord information and when that's done if there are errors we remove is loading and then we show that there's something wrong with stripe and paste try again and then we just show the error in the console as well but if there are no errors from the backend with straight then we continue to dysfunction call stripe token handler token so then we call this function this has to be a sync function first we create a new list called items started to be empty and then we loop through all the items in the court and just do some changes here because that's much better for the backend so you get the price finished and everything and then just push the object to the list of items then we created new data from new data object with the contact information all the items and the stripe token let's try token is the one we get from the back end and when that's done below here we call await excels and then we post it to slash checkout which just created here sorry i need to before i forget it i need to go into the main urls and import it here order like that sorry about that so then i can go back to them check out yes so then we call it and when that's done we call uh the store the view x clear card so everything is clear there and then we redirect the user to the success page we created and then we just remove the set is loading so now i just need to import stripe here and make sure everything is okay so i go up and find the mounted below here i paste a little bit of code so first here i checked that if this dot card total length which is the function we have down here computed if that is greater than zero that means that we have products in the cart and we can continue so then we create a new function no new instance of stripe and a new instance of elements and then we want to hide the postal code from that stupid form and then we mount it to the element we added up here then we just as you can see here we have the stripe and chord which is just two empty objects and the last thing we need to do now i think it's the last is to import stripe in the index.html file so below the font awesome paste in the stripe url js.stripe.com v3 i think if i now refresh yes you can see that we can fill out the card number and things like that so let's try this no sorry i need to do one more thing and that is to go into the store and create the remove no clear cart function so that just clears the whole object and then remove it from the local storage now refresh and then the card number to test this you can use 42 42 42 42 32 42 32 42 and then a date in the future and one two three as cvc pay with stripe so thank you the process will in the order will be processed within 48 hours and if i go here it seems that you got post so everything there is correct and if i go to order and into admin notify i want to register this with the backend from dot models import order and order item admin dot site register order i don't need to see the order item save so then if i go here go to the front page go to orders you will see that i have an order and the paid amount the stripe token and everything seems to be working so we got success page and the stripe has got its money perfect and i want to show orders on my account page so then i need to create a new serializer so if i scroll up and find the order serializer i can copy this and say my order item serializer and this is where i want to use the product serializer like that because if not there will be a problem when you post it and you because somewhere you have the object product assuming you have id for the project and similar and then you can make a copy of the order serializer but you don't need a create function just copy it and go up here say my order serializer and i want to use my order serializer there as well and i want to get the paid amount here as a variable save so everything is okay then i need to create the view sets for this so import my order serializer and then at the bottom create a new view sets called clause orders list and then you set authentication clauses and permissions and then we override the get because here we only want to get the orders where the user is the request user which is the authenticated and we want to use my order serializers and return the data to the front end so we can save this we need to import this into the urls so below checkout we just say pot orders views orders list as view and save so now it should be possible to use this in the front end so now if i find my account and below this button create an hr and then a new div class column subtitle my orders and i created a new uh component order summary where it posts in information about the order then i need to import this component which will create soon and i need a registered component and then i want to use the mounted we can set the document title and when that's done we call a new function called get my orders and this is very similar just the the normal axios to api slash v1 slash orders and i'm going to get it to slap dish.orders to response.data just need to make sure that we have a data array as well return orders which is a list and then we can oops forgot that comma there then we need to create this file and component new file order summary.view okay so here we have the template a div class box and the order title which shows also the order id i have a subtitle with the products and the table which shows all of the different products and here we just loop through order load items which you get because we use the my order serializer which has items included down here we just say name order summary we get a prop order and we have two methods for getting the total for the item and the order total length so if i save now and expect that wait word okay because i need to go into my account again this has to be such a sync of course when i use elevate in here so now i have the order here with the products i've ordered a simpler perfect and that was really coding are going to do now so now it's time to push this code to live server and start making impossible for other people to find my store so if i just go to the todo list i can set this task to done and the first thing i'm going to do is to deploy the django part of this project i'm going to create a server and then start accessing it i'm installing the software we need so if i go to the browser and into digitalocean and i click create up in the corner here i'm going to create a new droplet i want to ubuntu 20.04 and i just want a basic shared cpu and i can select regular intel and five dollar because it's going to be a very small server for testing i don't want any volumes it can be located in amsterdam it's close to norway a little bit at least the network name can be set to that i don't want any of this yet and password like that okay so now that was okay one droplet hostname can be just ubuntu jackets and create droplet and now this is created and i just need to wait for the server to start okay so now it's just started i copy the address try to access it ssh root at yes permission denied okay okay type the wrong password like that so now i should be in perfect and then i can go to to do list because i created the server and exit it and then i want to install the software we need so first i just want to update everything so that all of the packages and everything is correct this can sometimes take a little while and then see the apt get upgrade this will actually upgrade the packages and not just the connections to them great so now everything is updated and we can start installing some software i'm going to install python 3 pip python3 dev lib.qs postgresql postgresql contract and nginx just type that hit enter and yes i want to install that great and i also want to install cert bot and python 3 insert bot and insert but no patent reserve with nginx so we can get sl ssl certificates for the website so yes i will add all of these commands in a file on github okay so now that this does the done the next is to create a postgresql database so go back to server as i sudo dash you postgres psql so i change which user i'm logged in with then i create a new database by saying create database jackets and i create a new user jacket user with packet jacket's password and then i need to do some changes this is for the role and something to do with the configuration for django and then i want to grant all of the privileges to this user to that database and then i quit by saying backslash q so now we have postgresql installed and the database is set up with the user we can use then i want to upgrade pip just so i know that that is also for with the newest version and i want to install virtual environment so we can use that just like we do locally and then i want to create a new folder in web apps slash check cache which we should read a base for all of the projects here we can go into it then i want to create a user group for the user i'm going to call the group web app so we can use the server for multiple web apps or web applications or django websites then i want to create a user by saying sudo user ad system group id so i want to put it in the web apps set the default shell and the home folder to web slash jacket under the name of the user which is jackets hit enter and since i'm already in this folder i want to create the virtual environment by saying virtual env environment 382 and hit enter and then i can go into it saying cd environment also i don't have to go into it but i can activate it environment bin activate so now it's activated here just like it is locally and then i want to install the same packages here that we have locally and to do that i can go back to visual studio code stop the server as i pipped freeze then i will get the list of all of the packages we have installed locally so if i just copy all of this now create a new file here called touch req dot txt vi or q and paste it in there and i can install of all of them saying pip install r req.txt now note that we have the same packages on the live server as you have locally so that means that there are no differences in the environment for python and i need to install another pip which is cycle pg2 binary this is used to connect the django to the postgresql server next step now is to move the django files from locally to the server normally i would just use git but to make it easy i can just use i can just send them by using scp so here i go up one folder and say sip or check go jackets django dot zip check at django now i've got a folder with all of that and i can send it by saying sap r so root at and then i p like that sorry i forgot to specify which folder i wanted to send django jackasjango.zip like that so now it should be sent here and then just make this a little bit smaller cpu root put it there and then i just say unzip jackets jungle can it install unzipped and then i can unzip it great just removed a zip folder just to make sure that i don't have any problems with the the permissions for the folders and similar if i do this you will see that the root is owning everything here now and i want it to be owned by the jackets user so ca mod ch phone sorry dash r jackets colon web apps dot ls lord again and then you'll see that now i own all of the files and folders so don't any permissions wrong there or anything like that but i want to make a little change to the cd jackets and into jackets jungle i want to copy the settings file because i want the separate settings file for the production so this would be called settingspro.pi and settings prod change the database here just remove these lines and then i paste information about the postgresql server we created so by the name of the user know the database the username password and localhost because i'm the same server as the postgresql great so now we need to update the database but to do that i need to make a copy of the manage.pi i should buy how to create a profile for this as well and h prod because i want to use the prod file for updating the database so now i can say python management pi make migrations sorry manage prod by make migrations and migrate so now everything should be updated and created in the back end perfect next step now is to install g unicorn g unicorn will be the web server for django so pip install g unicorn i want to go up one folder and inside the environment i want to create a script for running the g unicorn server so vi environment bin g unicorn underscore start and then i paste in some code i set the name to check its django the directory for django socket file it should be created automatically which user to use which group which settings module to use and i would use the wsgi as i mentioned in the beginning of this tutorial and then just go into the django there start something and execute it i will add the these files in the github so you can get them there if you want and then you need to make this run the ball by saying chmod plus x environment then unicorn start you can try to run it supposed to be jackets here check it like that maybe that will work now no cd slash web apps check it environment jackets okay now i know why it should be like this because the jacket django is not in the environment folder okay now it's starting the problem was that if i go into the script again add the wrong part here because you need to go back one folder and then into the environment then bin then activate and the same down here so now the unicorn is starting perfect next step is to install something called supervisor supervisor will make sure that the t unicorn script is running at all times so install supervisor by saying apt install supervisor and when that's done we can create a script or just a config file that will make sure that the unicorn is running at all time so if you go to cd e2c supervisor conf create a new file touch jackets dot conf vi gen gets of course that's not correct that will fix it create new program jackets django the command we want to run is webs slash jacket environmentary a2 bin g unicorn which is the great script we just created we want to use the jackets check gets its name of the user and then a log file here i need to create this folder and then it's just some environment configurations so okay there so i have the log file and then we need to update supervisor by saying supervisor reread first just to check that it's available supervisor ctl it's available of course and then update and now it was added to the group if i now say status it says starting now it says running so now hopefully django should be running in the background next step now is install nginx nginx is the web server out to the world so when we get the request to engine x we use that as a proxies to reach g unicorn and we need nginx to handle the media files for django so install nginx that have all so already installed nginx we did that in the beginning so we just need to create a new config file so e2c and genex sites available and then vi check api jackets dot code with with stein.com which is the address for the web server i'm running on now so first we create the upstream app so this will connect to the g unicorn socket file which is created by the g unicorn script and then we want to listen to port 80 and if you come from port 80 which is http we want to redirect you to https and then we want to listen to 443 which is what https is at the back max body size and access log error log and ssl certificate and i search the certificate key i will fix it after this is done and then set some protocols and just make sure that ssl is working here is the hosting for the static files and here is the whole thing for the media files which is the uploaded files and similar and and we use the proxy to forward you to the jackets app server which is the socket file we created so now everything there should be okay i'll also add this file in the github repository i need to activate this now see the sites enabled s create a symbol like link back to that file we created check it no api there now we have it here and we can restart nginx so service and gen x restart okay there is an error okay it can't load the certificate so that's the problem here so the problem is that they can't load the certificates so we need to obtain them search bot dash ng next hd and indeed the domain name okay maybe if i just skip using nginx cannot load okay i just need to remove this for now so now i get it enter email address called stein gmat.com agree yes okay so then we got that sorry um yes redirect and then i can obtain this where we will host the view part of this project and then redirect okay so now we have the ssl certificate and we can try to create the symbolic link again restart nginx okay there's a new error okay i restarted the server and now everything seems to be okay so if i go to api check it dot code with stein.com get a bad gateway so i need to check the log server log files web apps check it snow environment okay there logs ch own super okay so our problems is to be with the g unicorn so i need to find out what that is failing this couldn't create this one okay permission denied so then i need to go to this folder and it seems that root is owning this folder so i need to change the permissions restart and also i want to restart supervisor supervisor ctl restart jackets hit enter okay what's the status check it's django refresh great so now it's working i just need to add this to the list of allowed hosts via django settings prod so i need to find it first of all i can add http s i can add this here because this is the one i'm going to use for the front end and here i need to add it to this list as well restart jackets django refresh found perfect but it seems that it's working so i can just try to log in to create a product sorry i need to create a super user so source slash environment bin activate python mentioned by manage product by create super user of course headers jungles always something you forget to add just want to edit here and to the list here as well so i need to have two of this like that now we need to restart again then we can try to create the super user admin admin jackets.com and the password and then we can go here login with the user i just created great create categories winter winter and summer summer and i can create a product as well in the winter warm jacket warm check it the description 199 select the picture save so now we have products there and if i now try to go to api v1 products latest products then i get it there perfect okay i need to change this as well sorry that's the last thing we need to do in the back end yeah project models.pi it shouldn't be this address of course it should be this maybe even without the lost slash there restart refresh and then we have them here perfect okay so i just need to check if the files were applied uploaded media uploads okay the picture isn't there okay we'll come back to that very soon just want to make sure that we have uploaded engineer view as well so everything is working except images so then i first want to go in here and go to main.js and change this url to api jackets dot code with style.com and save so now that would be the address and then we want to compile all the view code so we can upload it to the server as well to do that we say npm run build and understand we have a new folder here called this this is all of the compiled code in like html and javascript and similar and we need to upload this to the web server just want to zip it first zip dash or dist dot zip and dist so then we can send it to the server so sap dist dot sip and then the address sorry root at like that and then my password and now that's there so then i can go up one folder and say cp root dist there unzip dist so now i have it here but i want to create a new folder okay there check it view and move this folder inside there oops that's wrong and the jackets underscore into jackets view and call it dist and if i go in here now unless lord you will see that root is owning this and i need to fix that great so now the next step is to create a new config for view now for nginx so cd e2c engine x sites available touch jackets dot code with stein.com the i jackets and paste them so we do the same thing here we listen to 80 and redirect you to https and then we do the same here with setting up jackets.com at least in 443 set the ssl it's at the correct part to these which we have also already obtained and we set the root folder to web apps slash should be jackets here sorry check it check its view dist and the same down here jackets so save and close i'm going to sites enabled and lms dot slash sites available jackets there there and restart oops i was not supposed to service and gen x restart sorry i start to get a little bit tired now so sorry for all the mistakes so if i now try to go to this address yes everything is working there we got the product from the live server but the image isn't working sorry other wrong parts for the media files so it's supposed to be like this media and i need a space at the beginning save close restart and now the image is there and hopefully if i refresh the image is there as well so now everything is working as it should so i can go to the todo list and everything can be set to done here now now i have a working ecommerce website built at django and view so this is a really cool project you can use in your portfolio similar just remember to change the styling and just change a little bit more functionality and similar the code might not be ready for production and you need to change the stripe api keys for production as similar but i hope you have learned a lot anyways if you have any questions feel free to leave me a comment below and answer as soon as i can
