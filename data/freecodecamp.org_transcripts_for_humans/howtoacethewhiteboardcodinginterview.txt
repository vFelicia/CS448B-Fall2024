With timestamps:

00:00 - hello free code campers my name is
00:02 - jennifer bland i have created for you a
00:05 - series of videos that will help you get
00:08 - your very first job as a developer
00:11 - these videos cover a process that's
00:14 - called the whiteboard exercise
00:16 - this is an exercise that you will
00:18 - experience when interviewing for a job
00:20 - as a developer
00:22 - it's where a company will evaluate your
00:24 - skill sets and your abilities to
00:26 - determine whether or not to hire you for
00:29 - that open position
00:31 - i've shown you exact
00:33 - questions that i have been asked in the
00:36 - past when interviewing for jobs
00:38 - so that you can learn from what i have
00:41 - my experiences and be able to use that
00:44 - to your benefit when you interview for
00:47 - your very first job as a developer
00:49 - i have a series of videos that i've
00:51 - created for you these videos and cover
00:54 - topics such as html
00:56 - they cover css
00:58 - i have several videos on javascript and
01:01 - also videos on jquery
01:04 - these will help you as you start to
01:07 - interview for your very first job as a
01:09 - developer
01:11 - if you have any questions or if you need
01:13 - to reach out to me my website is
01:16 - www.jenniferbland.com
01:21 - hopefully these
01:22 - movies these movies will be beneficial
01:25 - to you and will help you get your very
01:28 - first job as a developer
01:31 - thank you very much for watching
01:35 - [Music]
01:42 - write a function that takes a string as
01:44 - parameter and returns the frequency of
01:47 - each letter of the alphabet that's found
01:51 - in that string
01:53 - okay that might be a question that you
01:55 - might be asked
01:57 - in a white boarding exercising
02:00 - always when you're doing a whiteboard
02:02 - exercising ask questions to potential
02:05 - employers so that you understand exactly
02:08 - what they're expecting from you and what
02:10 - you actually want to bring
02:12 - to the table in terms of the
02:14 - functionality of your functions you're
02:16 - going to create
02:17 - so
02:18 - one of the first questions that i might
02:20 - ask is okay if you're given a string
02:24 - what about case is case important is an
02:27 - uppercase a counted as 1 and a lowercase
02:30 - a counted as 1 for the lowercase or is
02:33 - that counted as 2 for a since they're
02:35 - both a's and it doesn't matter if it's
02:37 - uppercase and lowercase
02:39 - so
02:40 - that would be one of the first questions
02:42 - that i would ask so
02:44 - i'm just going to show you how to handle
02:46 - this whether they ask you to treat
02:49 - uppercase or lowercase either the same
02:52 - or as separate
02:54 - letters so let's get started and let's
02:56 - start working on our function that we're
02:58 - going to be creating for this potential
03:00 - employer so we're going to start off
03:03 - we're going to create a function
03:07 - and i'm just going to call my function
03:08 - count
03:14 - and my function very simple is
03:16 - called count and it's going to have the
03:18 - string as the input that they are giving
03:20 - me
03:21 - um and what they want to do is to go
03:24 - through and look through every character
03:26 - that's in the string
03:27 - and
03:28 - get count the number of times that that
03:31 - letter appears in the string and it
03:34 - returns that information out of the
03:35 - function
03:37 - so the first thing that i want to do is
03:40 - well what about case is case important
03:43 - to you at all
03:45 - and you need to find out if it is or not
03:47 - so let's say that case isn't important
03:50 - um an uppercase a and a lowercase a are
03:54 - treated exactly the same
03:56 - so what we can do is
03:59 - the first thing we can do is we can take
04:00 - our string
04:10 - and we're going to convert our string to
04:12 - lower case so that makes everything in
04:14 - the string all lowercase so anything
04:16 - that was previously uppercase will now
04:18 - be lowercase and therefore we can
04:20 - actually be able to count what was
04:23 - previously in uppercase a as a lower and
04:25 - a lowercase a as exactly the same since
04:28 - they're now all the same case so that's
04:30 - the first thing that i want to do now i
04:33 - need something some type of container to
04:35 - to hold the count of each individual
04:38 - characters so one of the things that you
04:40 - can use is you can use a number
04:43 - you can use an array if you want or you
04:45 - can use an object in this case i'm going
04:48 - to actually solve this by using an
04:50 - object so i need to define my object
04:53 - that i'm going to use so i'm just going
04:55 - to create an object
04:58 - so i have an empty object right here and
05:01 - that's going to have my count that's
05:03 - going to be returned back
05:05 - out of this function
05:07 - so the next thing that i need to do is
05:09 - loop through every single character
05:11 - that's found in that string so i will
05:14 - need a for loop
05:36 - all right so now i have a for loop this
05:37 - will will go through every single
05:40 - character that's found in that string um
05:43 - and what i'm going to do is actually put
05:46 - that into my object now what i can do is
05:49 - in order to do a account
05:52 - i'm going to take advantage of the
05:53 - functionality that's built into an
05:55 - object in javascript
05:57 - an object is basically a key value pair
06:00 - what i'm going to use as a key is the
06:02 - letter
06:03 - the value is the count of how many times
06:06 - that letter has appeared within that
06:08 - string so that's what i'm going to be
06:10 - using so what i'm going to do is i'm
06:13 - going to first check to see if
06:17 - that
06:18 - character is in my object that i'm going
06:21 - to be using as my placeholder so if
06:25 - if i'm going to
06:26 - check
06:36 - so what this will do this will either
06:38 - return um the um
06:42 - the actual
06:44 - character if it's in the object right
06:46 - now and if not this will actually return
06:49 - is undefined because it doesn't exist
06:51 - in the object itself so what i want to
06:55 - do is if it doesn't exist
06:58 - then what i want to do is go through and
07:02 - add it
07:04 - to
07:05 - the
07:07 - object if it does exist in this case
07:10 - this is asking does it exist and if it
07:13 - does exist then i want to increase that
07:15 - value
07:17 - in that key value pair by one because it
07:20 - now has one more character found in that
07:23 - string so in order to do that what i can
07:26 - do is i come in
07:44 - and i basically take the the current
07:47 - character
07:48 - which is found in this key and i'm going
07:51 - to and set its value to its current
07:54 - value plus one so therefore i'm going to
07:56 - basically increase it
07:58 - by one
08:00 - all right then i'm going to have an else
08:02 - in here
08:04 - and
08:04 - this is if the obj if the character
08:07 - doesn't currently exist in my object
08:09 - placeholder so i'm going to now add it
08:12 - in there and i'm going to set its value
08:14 - to 1 because it's the first time that
08:16 - this character exists
08:18 - so what i have is i can put object
08:34 - all right so now what i've done is
08:37 - i've gone in and i've added that letter
08:40 - to my placeholder object and i've set
08:42 - its value equal to one
08:45 - and it will go through and it will loop
08:47 - through everything that's in there now
08:49 - the last requirement that the
08:52 - potential employer asked me when they
08:53 - asked me to write this function
08:55 - was to actually go through and return
08:59 - the count of each letter that's found
09:02 - within the string so the last thing that
09:04 - i want to do in my function is i
09:07 - actually want to return
09:10 - my object
09:12 - and therefore i've gone through and i've
09:14 - given them everything that they've asked
09:17 - me to do
09:18 - so when you're going through this is
09:21 - something that you might have
09:23 - asked as part of a coding challenge and
09:26 - this is how you would actually go
09:28 - through and resolve that that coding
09:30 - challenge now when you start looking at
09:33 - this there are couple of things that you
09:35 - can actually do to this to make it a
09:38 - little bit better make it run a little
09:40 - bit um
09:42 - cleaner and so forth that comes in there
09:45 - so one of the other things that you
09:47 - might ask is well
09:51 - what if the string has
09:54 - spaces in it what if it has a period at
09:57 - the end of a sentence what if it has a
09:58 - question mark or an exclamation mark
10:01 - or numbers that are in there
10:04 - what do i want to do in that case um and
10:08 - you
10:08 - you need to ask that question and it's
10:11 - something that you should ask because it
10:13 - tells the potential employer that you're
10:15 - thinking about scenarios that you might
10:18 - encounter in real world applications and
10:22 - that shows them that you have that
10:23 - ability to think about what might happen
10:27 - so that you can account for it within
10:29 - your code so if they come back and they
10:32 - ask you
10:33 - i only want to worry about letters only
10:36 - the letters a through z i don't care
10:38 - about numbers i don't care about
10:40 - punctuation marks i don't care about
10:42 - anything else like that
10:43 - so what we need to do is
10:46 - take our string that we've converted to
10:49 - uppercase and now what we need to do is
10:52 - we actually need to strip out anything
10:55 - that's not a character
10:58 - and so we can actually go in and change
11:01 - this
11:02 - so i'm going to add a line in here
11:07 - and i'm going to use
11:09 - a reg x expression and a regex
11:12 - expression would basically go through it
11:13 - says here's my criteria anything that
11:16 - doesn't match it i'm going to basically
11:18 - strip it out of the string so in my
11:21 - match
11:22 - what i'm going to be looking for is for
11:25 - anything that's not
11:27 - a through z
11:29 - or a through z uppercase
11:35 - and if it's
11:37 - if it's in there i'm going to replace it
11:40 - with quote quotes which basically means
11:42 - it's going to strip it out so if you had
11:45 - a string that was
11:46 - hello apple how are you today
11:50 - and there was an exclamation mark at the
11:52 - end of hello apple and a
11:55 - how are you today there was a question
11:56 - mark at the end and then maybe one two
11:59 - three after the question mark
12:02 - this would basically pull out
12:04 - basically this would go through and pull
12:06 - out
12:08 - all of the spaces the exclamation marks
12:10 - the periods anything that's not a letter
12:13 - and the letter is anything a through z
12:15 - so it's going to remove that so that's
12:17 - one of the first things that i can do as
12:20 - an improvement to the first iteration
12:22 - that i did on my function another thing
12:25 - that i can do is if i look at this if
12:28 - else that's in here
12:30 - um
12:32 - that's you start to see some repetition
12:35 - that you have in here that it's
12:37 - basically taking this it's setting this
12:40 - this key and it's either adding an one
12:42 - to the current value or setting the
12:44 - value to equal to one where you can
12:46 - actually take that and combine that into
12:49 - a single statement using a ternary
12:52 - operation so
12:54 - if we come in i'm going to actually
12:56 - erase this if statement
13:03 - and what we're going to do is we can
13:05 - replace that and what we're replacing is
13:08 - object
13:15 - so this is what i'm setting and i'm
13:17 - going to either set it equal to 1 or i'm
13:20 - going to take its current value and
13:21 - increase it by one
13:23 - so i'm going to set it equal to
13:26 - here and i'm going to do a ternary
13:28 - operation where i'm going to do
13:35 - i'm going to check to see if it's
13:37 - currently there
13:38 - and if it is there um if it is true
13:42 - then i'm going to increment
13:56 - so
13:57 - what the ternary operation is going to
13:59 - do is i'm setting this value and what
14:02 - i'm doing is i'm doing a comparison i'm
14:04 - going to check to see if the current
14:07 - letter is in my placeholder object
14:10 - if it is
14:11 - then what i'm going to do is i'm going
14:14 - to take its current value
14:16 - and i'm doing a plus plus on it
14:19 - which means i'm going to increment it by
14:21 - 1.
14:22 - then if it's not there then you have the
14:25 - fault statement and it's going to be
14:26 - setting it equal to
14:28 - 1
14:29 - so that we actually see that and this
14:32 - information that whole for loop all that
14:35 - if else that was in here can be replaced
14:37 - with this one line
14:39 - um so that we have it in here and then
14:41 - this information gets returned back
14:44 - to you
14:45 - so that is a way of actually going
14:48 - through and implementing a
14:51 - whiteboarding exercise
14:53 - for doing things
14:55 - some of the things that you might also
14:57 - see
14:58 - this
14:59 - implementation of this function in some
15:02 - other variations and some of the other
15:04 - most common variations that you might
15:07 - find
15:08 - on that is
15:10 - instead of returning the the frequency
15:12 - of every character that's found in the
15:16 - string
15:17 - they might ask you to return the
15:19 - character that has
15:21 - the most
15:22 - frequent um iteration in the string
15:25 - itself so what you would do is once
15:28 - you've got everything into your object
15:31 - in here before you do the return that
15:33 - what you're going to have to do
15:36 - is to basically look through that
15:39 - object um and then check to see
15:43 - how many times each each character
15:44 - occurs and you find the one character
15:47 - that has the most occurrences and then
15:50 - you actually return just the character
15:53 - and the amount of times that it actually
15:55 - occurs in there so that's one thing that
15:57 - you would see as a variation um to
16:00 - basically this simple question that
16:02 - you're using
16:04 - in an object another way of asking this
16:07 - variation of this function is
16:10 - it comes back and they might say i'm
16:12 - going to give you a code snippet
16:15 - you tell me if it is correct or not
16:19 - and what their meaning is they're going
16:21 - to give you something in the string that
16:24 - comes in is going to be like programming
16:26 - code kind of like this function and what
16:29 - they want to do is to check to make sure
16:33 - that
16:35 - you have
16:36 - an equal number of like if you have an
16:38 - open parenthesis you have a closing
16:40 - parenthesis if you have a open curly
16:43 - brace you have a closed curly brace
16:48 - open parenthesis close parentheses open
16:51 - square bracket close square bracket
16:54 - and make sure that they all line up
16:56 - evenly on there
16:58 - and the way that they should line up
17:01 - in here i have two
17:03 - sets of brackets
17:05 - this one is open this one's open this is
17:08 - closed and then this is this closes the
17:11 - first one that's in there
17:13 - so you should always have um they should
17:16 - always pair up along that line
17:19 - um so that's one of the things you can
17:22 - compare and the way that you can go in
17:25 - and modify this in your object
17:28 - is
17:29 - you would actually put in
17:33 - if it has
17:35 - braces so you might have
17:37 - one of your keys might be braces and in
17:39 - there you put in
17:41 - all of the open braces that you have
17:44 - curly braces and when you find a closed
17:47 - curly braces you should remove
17:50 - the open one from the object itself
17:54 - so that when i come in here i'm like
17:57 - okay i have a open curly braid i mean
17:59 - open parenthesis so i put that into my
18:02 - object then i'll keep breathing through
18:04 - my my string and then when i get the
18:06 - closed curly brace i will go to my
18:09 - object and if there's an open curly
18:12 - brace in there i remove it from the
18:15 - object and then i'll go along same thing
18:18 - here i'll put an open curly brace in i
18:22 - mean open parentheses in then i'll
18:24 - immediately take it out because i've
18:26 - reached the close and if we were
18:28 - following along in our object our object
18:32 - would have
18:33 - it would have an open parenthesis
18:35 - then it would have nothing in it because
18:38 - now that open parenthesis has been
18:39 - removed it would have an open curly
18:42 - brace and that would be the only thing
18:44 - currently in the object then we come
18:46 - around to this line
18:48 - now our object will have two things in
18:50 - it it would have this open curly brace
18:53 - this open parenthesis
18:55 - when it sees this it's going to remove
18:57 - this open parenthesis from the object
19:00 - leaving nothing but this open curly
19:03 - brace and as you work your way through
19:06 - when you get to the very end of your
19:08 - code you should at the end of the string
19:12 - should have an object that has nothing
19:14 - in it
19:15 - if there's nothing in the object that
19:17 - means that the code snippet is valid
19:21 - so that's one of the things that you can
19:23 - do as a variation for answering this
19:25 - question
19:26 - so
19:27 - hopefully this information will help you
19:29 - out
19:31 - the goal is to help you prepare for your
19:34 - white boarding interview that you're
19:35 - going to have for your software
19:36 - engineering positions and this is how
19:39 - you would actually go about and answer
19:41 - these questions when you're presented
19:43 - with that information
19:46 - [Music]
19:52 - previously i have gone through and just
19:54 - did the exercises directly on the board
19:56 - instead i'm going to convert over to my
19:59 - computer and i'm actually going to walk
20:02 - through a series of questions that you
20:05 - might have as part of a whiteboard
20:07 - exercise on html and css
20:12 - here are a series of potential questions
20:14 - that you might be asked as part of your
20:15 - whiteboarding exercise on html and css
20:20 - let's go through each of the questions
20:22 - the first question is to write a css
20:25 - selector to select only the inner two
20:28 - list items in the markup below
20:31 - we have list items for one 2 3 8 3 b and
20:36 - 4
20:36 - and what they're asking is for us to get
20:39 - a css selector that would only access 3a
20:43 - and 3b
20:45 - there are multiple ways that you can go
20:48 - about doing this so let's go through
20:50 - different ways that you can access just
20:53 - 3a and 3b the first one is to start from
20:56 - the class
20:57 - that we have at the top then we go down
20:59 - to the unordered list and then to the
21:02 - list item itself and that would give us
21:04 - 3a and 3b
21:06 - we can skip the class and just go from
21:09 - the unordered list to the list item to
21:11 - the unordered list and then to the list
21:13 - item itself and that would give us
21:15 - access to it also
21:17 - and then another way of getting access
21:19 - to it would be to go to the list item
21:22 - unordered list
21:24 - and then list item and that tells us to
21:26 - go directly to the children
21:28 - of the unordered list
21:31 - and that would give us three different
21:33 - ways that we can get access to the inner
21:36 - two list items 3a and 3b
21:41 - it's possible that you will be asked a
21:43 - follow-up question
21:44 - on that and that question number two is
21:47 - to write a css selector to select only
21:51 - the first list item of the two list
21:54 - items in the markup above
21:56 - so what we want to do is to get access
21:59 - to just 3a
22:01 - and not 3b that we were doing previously
22:05 - so we can go through and we can start
22:06 - out with going to the unordered list the
22:09 - list item the unordered list the list
22:11 - item which would have given us both
22:14 - and what we want to do is select the
22:16 - first child which would give us 3a and
22:20 - that is the difference between the first
22:22 - question and the second question
22:24 - all right
22:26 - the third question is what is the
22:29 - difference between an id and a class
22:33 - an id
22:36 - has to be unique
22:37 - it can be assigned to only one dom
22:41 - element at a time
22:43 - a class can be assigned to multiple
22:46 - elements
22:48 - on the dom page
22:50 - in terms of specificity
22:53 - and id will have a higher value than a
22:56 - class because it has to be unique
23:00 - an element can be assigned both an id
23:03 - and a class
23:04 - and an element can also be assigned more
23:07 - than one class
23:10 - that is in general terms the difference
23:13 - between an id
23:14 - and a class
23:16 - the next question is
23:18 - is it possible to change the location of
23:21 - an element on a page
23:23 - via css
23:25 - and the answer is yes we actually have
23:27 - two
23:28 - methods available to us and that is
23:30 - position and
23:32 - float
23:33 - that would give us the ability to look
23:36 - at things on the page
23:38 - the
23:39 - one things that you want to do is
23:40 - explain what is the difference between
23:43 - position
23:44 - and float
23:47 - if you're going to use them
23:50 - both of them take the element out of the
23:52 - page flow
23:54 - position
23:56 - requires a parent element to have a
23:59 - position set to relative or absolute in
24:02 - order for it to work
24:04 - a float requires a parent element to
24:08 - have a clear fix applied
24:10 - overflow hidden applied or to be floated
24:14 - itself in order for it to work
24:21 - question number five
24:23 - what does the box model refer to in css
24:28 - and the answer is it refers to how
24:31 - elements size
24:33 - including its borders margins and
24:36 - padding is calculated
24:42 - question number six
24:44 - is there a way to change
24:46 - the box model
24:49 - and the answer is yes because the
24:51 - default for the box model is content box
24:56 - what content box does is it adds the
24:59 - borders margins and padding to the set
25:02 - width and height of the element
25:05 - to determine its size
25:08 - if you use box sizing
25:11 - border box
25:13 - then for an element its size will take
25:17 - the size the height and width that it's
25:19 - been aside
25:20 - and the borders margins and paddings
25:23 - will be subtracted from that so that the
25:26 - element will fit
25:28 - directly into the height and width
25:30 - that's been specified for that
25:32 - particular item
25:36 - number number seven
25:38 - what is the difference between these
25:40 - three selectors and we have three
25:43 - different css selectors
25:46 - the first one div refers to an element
25:50 - that has um the name of dib and it's
25:54 - assigning its background color to be red
25:58 - the second one is dot div
26:00 - this refers to an element that's been
26:03 - assigned a class
26:04 - called div
26:06 - and it sets its background to blue
26:09 - the last one pound sign div
26:12 - refers to an id
26:15 - and it's
26:16 - setting the background on that element
26:18 - to green
26:21 - number eight given this css what would
26:26 - this html look like when it's rendered
26:29 - and the css that we're given is div span
26:33 - has a color of red
26:35 - and div greater than span
26:38 - has a background of green
26:41 - and what they're asking is do you
26:43 - understand what this background greater
26:46 - than span
26:48 - does compared to just doing div span
26:51 - the first one div span
26:54 - what it does is it refers to any span
26:57 - within a div
26:58 - so here we have a span all work and no
27:01 - play that's contained within a div so
27:04 - this div span would be color red so this
27:08 - text all work and no play would have red
27:11 - text
27:12 - also we have down here a span that's
27:15 - directly inside of div
27:17 - makes jack a dull boy and that would
27:20 - make its color red so
27:23 - this first
27:25 - element this first css would make all of
27:28 - the text in this html to be color red
27:32 - now we have another css that is div
27:35 - greater than span and we set its
27:38 - background to green
27:39 - and what this does is refer to a span
27:42 - that is a direct child of a div
27:46 - in here we have a div
27:48 - a paragraph and a span the span isn't a
27:52 - direct child of the div it's a direct
27:54 - child of the paragraph so this would not
27:57 - apply
27:58 - the bottom one
28:00 - the span is a direct child of the div so
28:03 - this background green would apply and so
28:06 - makes jack a dull boy would be red text
28:11 - and it would have a green background
28:16 - [Music]
28:21 - i want you to write a function
28:23 - that will take a string as an input and
28:26 - it will return whether or not that
28:28 - string is a palindrome and if you're not
28:31 - familiar with what a palindrome is a
28:33 - palindrome is a word that's written the
28:35 - same way but forward as it is backwards
28:38 - radar pop because when you think
28:42 - a d a r-a-d-a-r-r-a-d-a-r
28:44 - it's written the same way both forwards
28:46 - and backwards the word hello
28:49 - on the other hand is not a palindrome so
28:52 - what you want to do is write a function
28:54 - that determines if a string is a
28:55 - palindrome
28:57 - once you've been given the exercise by
28:59 - the potential employer
29:01 - always ask questions
29:03 - that allows you to show that you're
29:07 - questioning what is that you want to
29:09 - accomplish how you're going to be able
29:11 - to accomplish it
29:13 - and it provides feedback to the
29:15 - potential employers so if i was given
29:18 - that question one of the first questions
29:20 - i would ask would be
29:22 - what type of return do you want to come
29:24 - out of this function if it's a
29:26 - palindrome do you want me just to give
29:27 - you the string back
29:29 - or give you a empty string if it's not a
29:31 - palindrome or do you want me to return a
29:34 - boolean
29:35 - that would be true or false based on
29:37 - whether or not the word that i've been
29:39 - given as a palindrome
29:41 - so that would be one of the first
29:43 - questions that i would ask and most
29:44 - likely the answer they would be given is
29:46 - that they want the function to return
29:48 - true or false as to whether or not the
29:50 - string is a palindrome so now that i've
29:53 - got some basic information i can start
29:55 - working on my function so what i do is
29:58 - i'll come over here and i'm just going
29:59 - to say i'm going to create a function
30:02 - i'm going to call my function palindrome
30:06 - and it's going to take in one parameter
30:08 - which is a string
30:11 - so now what i have is the beginning of
30:13 - what i'm going to show the potential
30:15 - employment in terms of my
30:18 - um coding skills for solving this this
30:21 - function now there are multiple ways
30:23 - that you can go about solving this
30:24 - function and one of the most common ways
30:27 - that i've see people try to solve it is
30:30 - they will take a for loop and they will
30:32 - loop through each character in the
30:34 - string
30:35 - and they will compare the that first
30:37 - character
30:38 - to the last character in the string and
30:40 - if they're the same they continue on
30:42 - then they compare the next character
30:44 - from the front and from the back and
30:46 - they will see
30:48 - are they the same and then they will
30:49 - keep doing it until they meet in the
30:51 - middle and if they meet at that point
30:53 - and every character matches then you
30:55 - know that you have a palindrome
30:58 - um that's one way of doing it um but i
31:01 - think one of the things that they're
31:03 - really wanting to accomplish and that
31:05 - asking you that interview question is
31:07 - how well do you know
31:09 - the native data types in javascript
31:13 - well a string is a data type one of the
31:15 - native data types that are in javascript
31:18 - another data type that you have is an
31:21 - object
31:23 - a string the native data type on string
31:26 - does not have a method to do a reverse
31:30 - of the string
31:32 - but
31:33 - the
31:34 - an array which is
31:36 - a type of an object in javascript does
31:39 - have a built-in method called reverse
31:43 - that you can use to reverse things well
31:45 - you're thinking well i'm asked to
31:47 - reverse a string not an array
31:50 - but one of the things that you can do is
31:53 - show that you have knowledge of all the
31:56 - primitive data types within javascript
31:59 - and also how you can move between them
32:01 - to be able to accomplish what you want
32:04 - in this function
32:05 - so if you want to use that built-in
32:08 - reverse and not have to rewrite
32:10 - everything by doing a for loop
32:13 - i can use what's given to me natively
32:15 - within javascript on an array
32:18 - and use that reverse function so now i
32:21 - need to figure out how i can get my
32:23 - string and convert it into an array
32:27 - well the string method natively has a
32:31 - method on it that's called split
32:34 - and split will actually convert a string
32:37 - into an array so this is the first step
32:40 - that i'm going to do
32:42 - in my function so i'm going to
32:46 - go in
32:47 - and i'm going to create a new variable
32:50 - i'm just going to call it string2
32:52 - and i'm going to set it equal to string
32:56 - dot split
32:59 - and the split method actually requires
33:03 - you
33:04 - to
33:06 - put in a
33:08 - parameter into the method that tells it
33:11 - on what it is going to be splitting the
33:14 - actual string itself
33:16 - so i'm using quote quote which basically
33:19 - means
33:20 - after every single letter in the
33:24 - string it's going to split it out into
33:27 - an individual element into the array
33:30 - now that i have it out into an array
33:34 - what i can do is basically now i can
33:37 - reverse it so i can do string two dot
33:41 - reverse
33:45 - so now i have my string is now reversed
33:49 - so it is reversed so now i've got to
33:52 - figure out
33:53 - what do i need to do to convert it from
33:56 - an array
33:57 - back into an extreme
33:59 - and this
34:01 - there is a method that's called join
34:04 - that will actually convert it back into
34:07 - a string
34:08 - so um
34:22 - so i'm going to use the split
34:25 - method
34:26 - i'm going to use the same quote quote
34:28 - that basically says i'm just going to
34:30 - convert it all into a single string with
34:32 - nothing some to separate them out and i
34:36 - now have my string as a
34:39 - reverse so string two now is an exact
34:42 - reverse
34:43 - of string
34:44 - so what i want to do is then compare
34:47 - these and return them so one of the
34:50 - things that i can do is i can just check
34:53 - to see if
34:54 - string is equal to
34:57 - string
34:58 - two
35:00 - and if it is i can return
35:04 - true
35:08 - else
35:10 - i'm going to return
35:13 - false
35:17 - and there i have my function that i have
35:20 - written that will actually go out and
35:23 - compare to see if something is a
35:27 - true palindrome or not
35:29 - now there's some things that i can do to
35:32 - actually make this a little bit better
35:35 - one of the things i can do is i can take
35:38 - my if statement and take all of this
35:40 - code that's down here
35:43 - and i can refactor that
35:46 - and i can refactor it to where it just
35:48 - returns
35:52 - whether or not string is equal to
35:56 - string two so this one line is
36:00 - equivalent to what i had in my if
36:02 - statement before so i make things a
36:04 - little bit easier um because this is
36:07 - going to be either a true or false and
36:09 - that's what i'm going to be returning
36:12 - out of my function
36:15 - now
36:16 - there's also this thing that i can do
36:19 - because in javascript you can actually
36:22 - chain
36:23 - methods together so i can actually take
36:26 - all these three lines and convert them
36:28 - into a single line so i'm going to
36:30 - change this
36:37 - so i have my var and i'm going to have
36:40 - var string 2
36:41 - is equal to string
36:43 - dot
36:44 - split
36:48 - dot now it's an array so now i'm going
36:50 - to reverse
36:54 - [Music]
36:56 - and now i'm going to join it back
36:58 - together
36:59 - so now i have string two
37:02 - in one line where i've converted to
37:04 - array i've built use the built-in
37:06 - reverse function that's built into an
37:08 - array to reverse it and then i've
37:10 - converted back to a string so now string
37:13 - two is an exact reverse and i now can
37:16 - compare it between the two of them
37:19 - to see what's going on
37:21 - so what i can do is as i'm going through
37:24 - and i'm actually working on my function
37:27 - i can actually write it and then
37:30 - completely refactor it and while i'm
37:33 - refactoring it actually explain it to
37:35 - the potential employer so they can
37:37 - follow my thought process so i can tell
37:40 - them why i put this into one line
37:43 - because it's easier because i know
37:44 - everything that i want to do in that
37:46 - string is on one line it's easy to
37:48 - follow it's easy to understand
37:50 - i do a single line of return on it to
37:53 - compare it
37:54 - now another question i might need to ask
37:57 - the potential employer
37:59 - because technically my function as it is
38:02 - written
38:03 - will work
38:04 - there's some problems that this might
38:06 - have on here that you need to ask as
38:10 - part of your interview in your
38:12 - whiteboarding exam and one of the
38:14 - questions that you might need to ask
38:16 - would be
38:19 - well do i need to worry about upper and
38:21 - lower case
38:22 - you know because radar with a capital r
38:25 - is the first letter and then adar
38:28 - technically isn't a paleo drum if you
38:31 - worry about case because a capital r and
38:33 - a lower case r are not equivalent so in
38:37 - that case this would not
38:40 - would fail this would not return as a
38:43 - palindrome because of that case
38:44 - differential that you have in there
38:47 - so you have to ask about that well what
38:49 - about these outliers what about these
38:51 - exceptions that i need to worry about
38:54 - and they're like oh well i
38:56 - don't worry about about case so
38:58 - uppercase r lowercase a d a r would
39:01 - return true as a palindrome just would
39:04 - the lower case r a d a r would return
39:07 - true well if that is the case then i
39:11 - need to convert my original string to
39:14 - lowercase or to uppercase it doesn't
39:17 - matter so that it's consistent so
39:20 - what i can do in here
39:26 - and i'm just going to convert it to
39:28 - lowercase
39:29 - um and so in here i've converted it to
39:32 - lowercase so now that outlier of well
39:36 - what about case does that matter um so
39:40 - that would be a question that you might
39:41 - need to ask on there
39:43 - another thing would be well what do i do
39:46 - if
39:47 - what i'm passed in is an empty string
39:50 - do i need to return true or false for an
39:53 - empty string so you need to ask for that
39:56 - so if you've asked that question so you
39:58 - would need to put in a line up here in
40:01 - the very beginning that would check to
40:03 - test to see if your string is a string
40:06 - or not
40:07 - and that would be another test that you
40:09 - would have would be what if somebody put
40:12 - into um the
40:14 - passed into the function the number one
40:16 - two three well that's not a string so
40:19 - you're not comparing that so might you
40:22 - that would be another thing that you
40:23 - would um
40:25 - basically ask the potential employer
40:27 - what do i need to do if this string
40:31 - isn't a string um so somebody passed me
40:33 - in a number or a boolean or a function
40:36 - or something else
40:38 - how do i account for that
40:40 - so that you need to be able to ask these
40:42 - questions because just writing a simple
40:46 - two-line function yes it does work will
40:49 - it work 100 of the time no is what the
40:52 - employer paying you to do is to write
40:54 - code that's will work 100 of time yes
40:58 - are you meeting that criteria by just
41:00 - putting in two lines and the answer is
41:02 - really no
41:04 - so what i've done is i've put in the
41:06 - thing where i convert it to lowercase to
41:08 - handle um whether or not upper and lower
41:10 - case counts um another thing would be
41:13 - what if um there's
41:16 - pronunciation that's in there like a
41:18 - space
41:19 - do we account for space or do we need to
41:22 - remove um a space that's in there
41:25 - so that would be another question that
41:27 - you have in there if if they tell you to
41:29 - remove all punctuation like a space a
41:32 - comma a period an exclamation mark a
41:35 - question mark
41:36 - before running your test you can do that
41:39 - up here just like you converted it to
41:41 - lower string you can remove all pronoun
41:44 - pronunciation by using a regex
41:47 - expression that takes all pronunciation
41:50 - marks and removes them from the string
41:53 - and then you can then
41:55 - reverse it and compare it so that would
41:58 - be something else that you need to ask
42:00 - the potential employer
42:02 - um you know before you actually you know
42:05 - finish up your your test that that you
42:08 - have on there
42:09 - um so that just gives you some examples
42:12 - of things that are going on on here
42:14 - because basically in asking this very
42:17 - simple question
42:18 - write a function that determines if a
42:20 - string is a palindrome
42:22 - what the employer like i said earlier is
42:25 - basically wanting to see is how well do
42:28 - you know javascript how do well do you
42:30 - know the native data types that are in
42:33 - javascript and the methods that are
42:35 - provided with them we know that there is
42:38 - a reverse that's on an array it's not
42:40 - there on a string so is there a way that
42:43 - i can use that
42:45 - even though i'm originally starting with
42:46 - the string and yes you can by knowing
42:49 - that you can split a string into an
42:51 - array convert it back to a spring and
42:54 - then you can compare them
42:57 - that's in there and as you're going
42:59 - through and you're writing it make sure
43:00 - that you communicate your work as you're
43:03 - going along
43:05 - so that they can understand that and i
43:07 - think it's important to ask questions
43:09 - especially about the outliers about does
43:12 - this case count what if they don't pass
43:14 - me in a string what do i do in that case
43:16 - what if the parameter they pass into me
43:19 - isn't a string what if it's some other
43:21 - data type like a number how do you want
43:23 - me to handle something along that lines
43:26 - you know do i need to remove
43:28 - pronunciation marks so ads start asking
43:32 - questions like that because these are
43:34 - real things that you're going to get
43:36 - in a day-to-day environment as a
43:38 - programmer and what you're showing to
43:40 - that potential employer is that when
43:42 - you're faced with those on your day job
43:46 - you're able to handle them successfully
43:48 - and that's what they want in a potential
43:51 - employee
43:53 - [Music]
43:59 - i'm going to convert over to my computer
44:01 - and i'm going to give you a series of
44:04 - questions that you might be asked as
44:06 - part of a whiteboard exercising covering
44:09 - the topic of jquery
44:11 - so
44:12 - watch below and i will show you these
44:15 - questions
44:17 - here are a half dozen questions that you
44:19 - might be asked on jquery as part of your
44:22 - whiteboard exercising when interviewing
44:24 - for a developer position
44:27 - so let's go through each of these
44:28 - questions
44:30 - question number one
44:32 - what is the difference between dollar
44:34 - document.ready and window.onload
44:39 - well the main difference is that
44:41 - document.ready is the earliest possible
44:44 - time that you can actually use
44:47 - javascript or jquery to change the dom
44:51 - in your browser
44:54 - the
44:55 - window.onload event actually loads after
44:59 - document.ready
45:01 - document.readyloads as soon as the html
45:05 - is loaded but not when all of the
45:07 - content has been loaded on the page
45:10 - window.low on load
45:12 - occurs later
45:14 - and it mainly occurs when things like
45:17 - the images that have have already been
45:20 - loaded on the page itself
45:23 - with window.onload you're limited to
45:26 - only being able to attach
45:28 - one listener
45:30 - to it
45:32 - but you can attach as many as you want
45:35 - to the dollar document.ready method
45:39 - so that is the difference between
45:41 - document.ready and window.onload
45:46 - number two
45:47 - can you delay the execution of dollar
45:50 - document dot ready
45:52 - and the answer is yes you can the jquery
45:56 - dot hold ready
45:58 - where you pass in the hold
46:01 - to the method will hold or release
46:03 - execution of jquery's ready event
46:06 - the
46:08 - in order to make this work this method
46:10 - must be called very early in the
46:12 - document so what i recommend doing is
46:15 - that you put it in the head of your html
46:20 - and you should put it as the very first
46:21 - line after your script tag which loads
46:24 - jquery
46:26 - if you happen to call this method after
46:28 - the ready event has already fired then
46:31 - it will have no effect that's why you
46:33 - want to load it early on um so that you
46:36 - can actually pause the execution of the
46:39 - dollar document.ready
46:42 - number three
46:44 - what is the difference between jquery's
46:47 - detach hide and remove functions
46:52 - well let's take them one at a time the
46:54 - hide function
46:56 - sets the element's css display property
46:59 - to none so it's still there
47:02 - but you just can't see it
47:05 - the remove function
47:07 - actually removes it from the dom so it's
47:09 - no longer there at all
47:12 - detach is kind of like remove
47:16 - it removes it from the dom but it keeps
47:20 - all the stored data and events
47:23 - associated with the the matched elements
47:27 - you can actually reinsert an item that
47:30 - was detached
47:32 - into the dom
47:33 - and the way that you do that is that
47:35 - when you
47:36 - detach an element you actually assign it
47:39 - to a variable
47:41 - then when you want to reattach it then
47:44 - you can take that variable and then just
47:47 - like append it back into the body or
47:49 - someplace else so that it's now
47:52 - available and that's the difference
47:54 - between the detach hide and remove
47:57 - functions
47:59 - so question number four
48:02 - what is the difference between jquery's
48:05 - ajax
48:06 - get and post
48:10 - functions or methods
48:12 - and the main difference is the jquery
48:15 - ajax
48:17 - that is kind of the umbrella um
48:21 - method that is that is used
48:23 - the dollar get and the dollar post are
48:26 - subsets of the ajax
48:30 - method itself
48:32 - the biggest difference between the
48:34 - implementation standpoint between those
48:37 - two
48:38 - is that
48:40 - you pass an object into
48:42 - jquery's ajax method in order to get all
48:46 - the necessary parameters that you need
48:48 - to make that call
48:50 - but for the dot get and the dot post
48:53 - method you actually pass in arguments
48:56 - and not an object
48:58 - and that is the big difference between
49:00 - those three
49:03 - the next question number five what is
49:06 - the difference between
49:08 - dot get and dot post
49:12 - the dot get method
49:14 - has data that's encoded in the url by
49:17 - the browser and it's visible in the url
49:21 - and it's stored also in the web history
49:25 - the dot post uses name value pairs
49:28 - submitted in the
49:30 - body
49:32 - that is being sent
49:34 - and it's part of the http request
49:37 - and it cannot be seen in the browser bar
49:39 - so
49:40 - it has a little bit more anonymity to it
49:44 - so that's the main difference between
49:46 - get and dot pose
49:49 - and then the last question is
49:51 - how can we change the class of an
49:54 - element
49:56 - using jquery so jquery actually provides
49:59 - three different methods that we can use
50:02 - to change the class
50:03 - of an element we have the add class
50:06 - method we have the remove class method
50:10 - and we have the toggle class method
50:12 - add class as its name
50:15 - applies
50:16 - is it will actually add a class to an
50:19 - element remove class will remove the
50:22 - class from the element and type class
50:26 - what it does is is a combination of add
50:29 - and remove class working together
50:31 - you give it the name of the class
50:33 - if the element doesn't have the class it
50:37 - will add it to the element
50:39 - if the element does have the class then
50:42 - it removes it from the element
50:45 - and that is the
50:47 - three different ways that you can add a
50:48 - class to an element
50:51 - in jquery
50:52 - hopefully these um these episodes have
50:55 - been um beneficial to you if they are
50:58 - feel free to leave a comment below feel
51:00 - free to to like this um video share it
51:03 - with your friends
51:04 - my name again is jennifer bland
51:07 - my website is jenniferbland.com
51:11 - thank you very much for watching

Cleaned transcript:

hello free code campers my name is jennifer bland i have created for you a series of videos that will help you get your very first job as a developer these videos cover a process that's called the whiteboard exercise this is an exercise that you will experience when interviewing for a job as a developer it's where a company will evaluate your skill sets and your abilities to determine whether or not to hire you for that open position i've shown you exact questions that i have been asked in the past when interviewing for jobs so that you can learn from what i have my experiences and be able to use that to your benefit when you interview for your very first job as a developer i have a series of videos that i've created for you these videos and cover topics such as html they cover css i have several videos on javascript and also videos on jquery these will help you as you start to interview for your very first job as a developer if you have any questions or if you need to reach out to me my website is www.jenniferbland.com hopefully these movies these movies will be beneficial to you and will help you get your very first job as a developer thank you very much for watching write a function that takes a string as parameter and returns the frequency of each letter of the alphabet that's found in that string okay that might be a question that you might be asked in a white boarding exercising always when you're doing a whiteboard exercising ask questions to potential employers so that you understand exactly what they're expecting from you and what you actually want to bring to the table in terms of the functionality of your functions you're going to create so one of the first questions that i might ask is okay if you're given a string what about case is case important is an uppercase a counted as 1 and a lowercase a counted as 1 for the lowercase or is that counted as 2 for a since they're both a's and it doesn't matter if it's uppercase and lowercase so that would be one of the first questions that i would ask so i'm just going to show you how to handle this whether they ask you to treat uppercase or lowercase either the same or as separate letters so let's get started and let's start working on our function that we're going to be creating for this potential employer so we're going to start off we're going to create a function and i'm just going to call my function count and my function very simple is called count and it's going to have the string as the input that they are giving me um and what they want to do is to go through and look through every character that's in the string and get count the number of times that that letter appears in the string and it returns that information out of the function so the first thing that i want to do is well what about case is case important to you at all and you need to find out if it is or not so let's say that case isn't important um an uppercase a and a lowercase a are treated exactly the same so what we can do is the first thing we can do is we can take our string and we're going to convert our string to lower case so that makes everything in the string all lowercase so anything that was previously uppercase will now be lowercase and therefore we can actually be able to count what was previously in uppercase a as a lower and a lowercase a as exactly the same since they're now all the same case so that's the first thing that i want to do now i need something some type of container to to hold the count of each individual characters so one of the things that you can use is you can use a number you can use an array if you want or you can use an object in this case i'm going to actually solve this by using an object so i need to define my object that i'm going to use so i'm just going to create an object so i have an empty object right here and that's going to have my count that's going to be returned back out of this function so the next thing that i need to do is loop through every single character that's found in that string so i will need a for loop all right so now i have a for loop this will will go through every single character that's found in that string um and what i'm going to do is actually put that into my object now what i can do is in order to do a account i'm going to take advantage of the functionality that's built into an object in javascript an object is basically a key value pair what i'm going to use as a key is the letter the value is the count of how many times that letter has appeared within that string so that's what i'm going to be using so what i'm going to do is i'm going to first check to see if that character is in my object that i'm going to be using as my placeholder so if if i'm going to check so what this will do this will either return um the um the actual character if it's in the object right now and if not this will actually return is undefined because it doesn't exist in the object itself so what i want to do is if it doesn't exist then what i want to do is go through and add it to the object if it does exist in this case this is asking does it exist and if it does exist then i want to increase that value in that key value pair by one because it now has one more character found in that string so in order to do that what i can do is i come in and i basically take the the current character which is found in this key and i'm going to and set its value to its current value plus one so therefore i'm going to basically increase it by one all right then i'm going to have an else in here and this is if the obj if the character doesn't currently exist in my object placeholder so i'm going to now add it in there and i'm going to set its value to 1 because it's the first time that this character exists so what i have is i can put object all right so now what i've done is i've gone in and i've added that letter to my placeholder object and i've set its value equal to one and it will go through and it will loop through everything that's in there now the last requirement that the potential employer asked me when they asked me to write this function was to actually go through and return the count of each letter that's found within the string so the last thing that i want to do in my function is i actually want to return my object and therefore i've gone through and i've given them everything that they've asked me to do so when you're going through this is something that you might have asked as part of a coding challenge and this is how you would actually go through and resolve that that coding challenge now when you start looking at this there are couple of things that you can actually do to this to make it a little bit better make it run a little bit um cleaner and so forth that comes in there so one of the other things that you might ask is well what if the string has spaces in it what if it has a period at the end of a sentence what if it has a question mark or an exclamation mark or numbers that are in there what do i want to do in that case um and you you need to ask that question and it's something that you should ask because it tells the potential employer that you're thinking about scenarios that you might encounter in real world applications and that shows them that you have that ability to think about what might happen so that you can account for it within your code so if they come back and they ask you i only want to worry about letters only the letters a through z i don't care about numbers i don't care about punctuation marks i don't care about anything else like that so what we need to do is take our string that we've converted to uppercase and now what we need to do is we actually need to strip out anything that's not a character and so we can actually go in and change this so i'm going to add a line in here and i'm going to use a reg x expression and a regex expression would basically go through it says here's my criteria anything that doesn't match it i'm going to basically strip it out of the string so in my match what i'm going to be looking for is for anything that's not a through z or a through z uppercase and if it's if it's in there i'm going to replace it with quote quotes which basically means it's going to strip it out so if you had a string that was hello apple how are you today and there was an exclamation mark at the end of hello apple and a how are you today there was a question mark at the end and then maybe one two three after the question mark this would basically pull out basically this would go through and pull out all of the spaces the exclamation marks the periods anything that's not a letter and the letter is anything a through z so it's going to remove that so that's one of the first things that i can do as an improvement to the first iteration that i did on my function another thing that i can do is if i look at this if else that's in here um that's you start to see some repetition that you have in here that it's basically taking this it's setting this this key and it's either adding an one to the current value or setting the value to equal to one where you can actually take that and combine that into a single statement using a ternary operation so if we come in i'm going to actually erase this if statement and what we're going to do is we can replace that and what we're replacing is object so this is what i'm setting and i'm going to either set it equal to 1 or i'm going to take its current value and increase it by one so i'm going to set it equal to here and i'm going to do a ternary operation where i'm going to do i'm going to check to see if it's currently there and if it is there um if it is true then i'm going to increment so what the ternary operation is going to do is i'm setting this value and what i'm doing is i'm doing a comparison i'm going to check to see if the current letter is in my placeholder object if it is then what i'm going to do is i'm going to take its current value and i'm doing a plus plus on it which means i'm going to increment it by 1. then if it's not there then you have the fault statement and it's going to be setting it equal to 1 so that we actually see that and this information that whole for loop all that if else that was in here can be replaced with this one line um so that we have it in here and then this information gets returned back to you so that is a way of actually going through and implementing a whiteboarding exercise for doing things some of the things that you might also see this implementation of this function in some other variations and some of the other most common variations that you might find on that is instead of returning the the frequency of every character that's found in the string they might ask you to return the character that has the most frequent um iteration in the string itself so what you would do is once you've got everything into your object in here before you do the return that what you're going to have to do is to basically look through that object um and then check to see how many times each each character occurs and you find the one character that has the most occurrences and then you actually return just the character and the amount of times that it actually occurs in there so that's one thing that you would see as a variation um to basically this simple question that you're using in an object another way of asking this variation of this function is it comes back and they might say i'm going to give you a code snippet you tell me if it is correct or not and what their meaning is they're going to give you something in the string that comes in is going to be like programming code kind of like this function and what they want to do is to check to make sure that you have an equal number of like if you have an open parenthesis you have a closing parenthesis if you have a open curly brace you have a closed curly brace open parenthesis close parentheses open square bracket close square bracket and make sure that they all line up evenly on there and the way that they should line up in here i have two sets of brackets this one is open this one's open this is closed and then this is this closes the first one that's in there so you should always have um they should always pair up along that line um so that's one of the things you can compare and the way that you can go in and modify this in your object is you would actually put in if it has braces so you might have one of your keys might be braces and in there you put in all of the open braces that you have curly braces and when you find a closed curly braces you should remove the open one from the object itself so that when i come in here i'm like okay i have a open curly braid i mean open parenthesis so i put that into my object then i'll keep breathing through my my string and then when i get the closed curly brace i will go to my object and if there's an open curly brace in there i remove it from the object and then i'll go along same thing here i'll put an open curly brace in i mean open parentheses in then i'll immediately take it out because i've reached the close and if we were following along in our object our object would have it would have an open parenthesis then it would have nothing in it because now that open parenthesis has been removed it would have an open curly brace and that would be the only thing currently in the object then we come around to this line now our object will have two things in it it would have this open curly brace this open parenthesis when it sees this it's going to remove this open parenthesis from the object leaving nothing but this open curly brace and as you work your way through when you get to the very end of your code you should at the end of the string should have an object that has nothing in it if there's nothing in the object that means that the code snippet is valid so that's one of the things that you can do as a variation for answering this question so hopefully this information will help you out the goal is to help you prepare for your white boarding interview that you're going to have for your software engineering positions and this is how you would actually go about and answer these questions when you're presented with that information previously i have gone through and just did the exercises directly on the board instead i'm going to convert over to my computer and i'm actually going to walk through a series of questions that you might have as part of a whiteboard exercise on html and css here are a series of potential questions that you might be asked as part of your whiteboarding exercise on html and css let's go through each of the questions the first question is to write a css selector to select only the inner two list items in the markup below we have list items for one 2 3 8 3 b and 4 and what they're asking is for us to get a css selector that would only access 3a and 3b there are multiple ways that you can go about doing this so let's go through different ways that you can access just 3a and 3b the first one is to start from the class that we have at the top then we go down to the unordered list and then to the list item itself and that would give us 3a and 3b we can skip the class and just go from the unordered list to the list item to the unordered list and then to the list item itself and that would give us access to it also and then another way of getting access to it would be to go to the list item unordered list and then list item and that tells us to go directly to the children of the unordered list and that would give us three different ways that we can get access to the inner two list items 3a and 3b it's possible that you will be asked a followup question on that and that question number two is to write a css selector to select only the first list item of the two list items in the markup above so what we want to do is to get access to just 3a and not 3b that we were doing previously so we can go through and we can start out with going to the unordered list the list item the unordered list the list item which would have given us both and what we want to do is select the first child which would give us 3a and that is the difference between the first question and the second question all right the third question is what is the difference between an id and a class an id has to be unique it can be assigned to only one dom element at a time a class can be assigned to multiple elements on the dom page in terms of specificity and id will have a higher value than a class because it has to be unique an element can be assigned both an id and a class and an element can also be assigned more than one class that is in general terms the difference between an id and a class the next question is is it possible to change the location of an element on a page via css and the answer is yes we actually have two methods available to us and that is position and float that would give us the ability to look at things on the page the one things that you want to do is explain what is the difference between position and float if you're going to use them both of them take the element out of the page flow position requires a parent element to have a position set to relative or absolute in order for it to work a float requires a parent element to have a clear fix applied overflow hidden applied or to be floated itself in order for it to work question number five what does the box model refer to in css and the answer is it refers to how elements size including its borders margins and padding is calculated question number six is there a way to change the box model and the answer is yes because the default for the box model is content box what content box does is it adds the borders margins and padding to the set width and height of the element to determine its size if you use box sizing border box then for an element its size will take the size the height and width that it's been aside and the borders margins and paddings will be subtracted from that so that the element will fit directly into the height and width that's been specified for that particular item number number seven what is the difference between these three selectors and we have three different css selectors the first one div refers to an element that has um the name of dib and it's assigning its background color to be red the second one is dot div this refers to an element that's been assigned a class called div and it sets its background to blue the last one pound sign div refers to an id and it's setting the background on that element to green number eight given this css what would this html look like when it's rendered and the css that we're given is div span has a color of red and div greater than span has a background of green and what they're asking is do you understand what this background greater than span does compared to just doing div span the first one div span what it does is it refers to any span within a div so here we have a span all work and no play that's contained within a div so this div span would be color red so this text all work and no play would have red text also we have down here a span that's directly inside of div makes jack a dull boy and that would make its color red so this first element this first css would make all of the text in this html to be color red now we have another css that is div greater than span and we set its background to green and what this does is refer to a span that is a direct child of a div in here we have a div a paragraph and a span the span isn't a direct child of the div it's a direct child of the paragraph so this would not apply the bottom one the span is a direct child of the div so this background green would apply and so makes jack a dull boy would be red text and it would have a green background i want you to write a function that will take a string as an input and it will return whether or not that string is a palindrome and if you're not familiar with what a palindrome is a palindrome is a word that's written the same way but forward as it is backwards radar pop because when you think a d a radarradar it's written the same way both forwards and backwards the word hello on the other hand is not a palindrome so what you want to do is write a function that determines if a string is a palindrome once you've been given the exercise by the potential employer always ask questions that allows you to show that you're questioning what is that you want to accomplish how you're going to be able to accomplish it and it provides feedback to the potential employers so if i was given that question one of the first questions i would ask would be what type of return do you want to come out of this function if it's a palindrome do you want me just to give you the string back or give you a empty string if it's not a palindrome or do you want me to return a boolean that would be true or false based on whether or not the word that i've been given as a palindrome so that would be one of the first questions that i would ask and most likely the answer they would be given is that they want the function to return true or false as to whether or not the string is a palindrome so now that i've got some basic information i can start working on my function so what i do is i'll come over here and i'm just going to say i'm going to create a function i'm going to call my function palindrome and it's going to take in one parameter which is a string so now what i have is the beginning of what i'm going to show the potential employment in terms of my um coding skills for solving this this function now there are multiple ways that you can go about solving this function and one of the most common ways that i've see people try to solve it is they will take a for loop and they will loop through each character in the string and they will compare the that first character to the last character in the string and if they're the same they continue on then they compare the next character from the front and from the back and they will see are they the same and then they will keep doing it until they meet in the middle and if they meet at that point and every character matches then you know that you have a palindrome um that's one way of doing it um but i think one of the things that they're really wanting to accomplish and that asking you that interview question is how well do you know the native data types in javascript well a string is a data type one of the native data types that are in javascript another data type that you have is an object a string the native data type on string does not have a method to do a reverse of the string but the an array which is a type of an object in javascript does have a builtin method called reverse that you can use to reverse things well you're thinking well i'm asked to reverse a string not an array but one of the things that you can do is show that you have knowledge of all the primitive data types within javascript and also how you can move between them to be able to accomplish what you want in this function so if you want to use that builtin reverse and not have to rewrite everything by doing a for loop i can use what's given to me natively within javascript on an array and use that reverse function so now i need to figure out how i can get my string and convert it into an array well the string method natively has a method on it that's called split and split will actually convert a string into an array so this is the first step that i'm going to do in my function so i'm going to go in and i'm going to create a new variable i'm just going to call it string2 and i'm going to set it equal to string dot split and the split method actually requires you to put in a parameter into the method that tells it on what it is going to be splitting the actual string itself so i'm using quote quote which basically means after every single letter in the string it's going to split it out into an individual element into the array now that i have it out into an array what i can do is basically now i can reverse it so i can do string two dot reverse so now i have my string is now reversed so it is reversed so now i've got to figure out what do i need to do to convert it from an array back into an extreme and this there is a method that's called join that will actually convert it back into a string so um so i'm going to use the split method i'm going to use the same quote quote that basically says i'm just going to convert it all into a single string with nothing some to separate them out and i now have my string as a reverse so string two now is an exact reverse of string so what i want to do is then compare these and return them so one of the things that i can do is i can just check to see if string is equal to string two and if it is i can return true else i'm going to return false and there i have my function that i have written that will actually go out and compare to see if something is a true palindrome or not now there's some things that i can do to actually make this a little bit better one of the things i can do is i can take my if statement and take all of this code that's down here and i can refactor that and i can refactor it to where it just returns whether or not string is equal to string two so this one line is equivalent to what i had in my if statement before so i make things a little bit easier um because this is going to be either a true or false and that's what i'm going to be returning out of my function now there's also this thing that i can do because in javascript you can actually chain methods together so i can actually take all these three lines and convert them into a single line so i'm going to change this so i have my var and i'm going to have var string 2 is equal to string dot split dot now it's an array so now i'm going to reverse and now i'm going to join it back together so now i have string two in one line where i've converted to array i've built use the builtin reverse function that's built into an array to reverse it and then i've converted back to a string so now string two is an exact reverse and i now can compare it between the two of them to see what's going on so what i can do is as i'm going through and i'm actually working on my function i can actually write it and then completely refactor it and while i'm refactoring it actually explain it to the potential employer so they can follow my thought process so i can tell them why i put this into one line because it's easier because i know everything that i want to do in that string is on one line it's easy to follow it's easy to understand i do a single line of return on it to compare it now another question i might need to ask the potential employer because technically my function as it is written will work there's some problems that this might have on here that you need to ask as part of your interview in your whiteboarding exam and one of the questions that you might need to ask would be well do i need to worry about upper and lower case you know because radar with a capital r is the first letter and then adar technically isn't a paleo drum if you worry about case because a capital r and a lower case r are not equivalent so in that case this would not would fail this would not return as a palindrome because of that case differential that you have in there so you have to ask about that well what about these outliers what about these exceptions that i need to worry about and they're like oh well i don't worry about about case so uppercase r lowercase a d a r would return true as a palindrome just would the lower case r a d a r would return true well if that is the case then i need to convert my original string to lowercase or to uppercase it doesn't matter so that it's consistent so what i can do in here and i'm just going to convert it to lowercase um and so in here i've converted it to lowercase so now that outlier of well what about case does that matter um so that would be a question that you might need to ask on there another thing would be well what do i do if what i'm passed in is an empty string do i need to return true or false for an empty string so you need to ask for that so if you've asked that question so you would need to put in a line up here in the very beginning that would check to test to see if your string is a string or not and that would be another test that you would have would be what if somebody put into um the passed into the function the number one two three well that's not a string so you're not comparing that so might you that would be another thing that you would um basically ask the potential employer what do i need to do if this string isn't a string um so somebody passed me in a number or a boolean or a function or something else how do i account for that so that you need to be able to ask these questions because just writing a simple twoline function yes it does work will it work 100 of the time no is what the employer paying you to do is to write code that's will work 100 of time yes are you meeting that criteria by just putting in two lines and the answer is really no so what i've done is i've put in the thing where i convert it to lowercase to handle um whether or not upper and lower case counts um another thing would be what if um there's pronunciation that's in there like a space do we account for space or do we need to remove um a space that's in there so that would be another question that you have in there if if they tell you to remove all punctuation like a space a comma a period an exclamation mark a question mark before running your test you can do that up here just like you converted it to lower string you can remove all pronoun pronunciation by using a regex expression that takes all pronunciation marks and removes them from the string and then you can then reverse it and compare it so that would be something else that you need to ask the potential employer um you know before you actually you know finish up your your test that that you have on there um so that just gives you some examples of things that are going on on here because basically in asking this very simple question write a function that determines if a string is a palindrome what the employer like i said earlier is basically wanting to see is how well do you know javascript how do well do you know the native data types that are in javascript and the methods that are provided with them we know that there is a reverse that's on an array it's not there on a string so is there a way that i can use that even though i'm originally starting with the string and yes you can by knowing that you can split a string into an array convert it back to a spring and then you can compare them that's in there and as you're going through and you're writing it make sure that you communicate your work as you're going along so that they can understand that and i think it's important to ask questions especially about the outliers about does this case count what if they don't pass me in a string what do i do in that case what if the parameter they pass into me isn't a string what if it's some other data type like a number how do you want me to handle something along that lines you know do i need to remove pronunciation marks so ads start asking questions like that because these are real things that you're going to get in a daytoday environment as a programmer and what you're showing to that potential employer is that when you're faced with those on your day job you're able to handle them successfully and that's what they want in a potential employee i'm going to convert over to my computer and i'm going to give you a series of questions that you might be asked as part of a whiteboard exercising covering the topic of jquery so watch below and i will show you these questions here are a half dozen questions that you might be asked on jquery as part of your whiteboard exercising when interviewing for a developer position so let's go through each of these questions question number one what is the difference between dollar document.ready and window.onload well the main difference is that document.ready is the earliest possible time that you can actually use javascript or jquery to change the dom in your browser the window.onload event actually loads after document.ready document.readyloads as soon as the html is loaded but not when all of the content has been loaded on the page window.low on load occurs later and it mainly occurs when things like the images that have have already been loaded on the page itself with window.onload you're limited to only being able to attach one listener to it but you can attach as many as you want to the dollar document.ready method so that is the difference between document.ready and window.onload number two can you delay the execution of dollar document dot ready and the answer is yes you can the jquery dot hold ready where you pass in the hold to the method will hold or release execution of jquery's ready event the in order to make this work this method must be called very early in the document so what i recommend doing is that you put it in the head of your html and you should put it as the very first line after your script tag which loads jquery if you happen to call this method after the ready event has already fired then it will have no effect that's why you want to load it early on um so that you can actually pause the execution of the dollar document.ready number three what is the difference between jquery's detach hide and remove functions well let's take them one at a time the hide function sets the element's css display property to none so it's still there but you just can't see it the remove function actually removes it from the dom so it's no longer there at all detach is kind of like remove it removes it from the dom but it keeps all the stored data and events associated with the the matched elements you can actually reinsert an item that was detached into the dom and the way that you do that is that when you detach an element you actually assign it to a variable then when you want to reattach it then you can take that variable and then just like append it back into the body or someplace else so that it's now available and that's the difference between the detach hide and remove functions so question number four what is the difference between jquery's ajax get and post functions or methods and the main difference is the jquery ajax that is kind of the umbrella um method that is that is used the dollar get and the dollar post are subsets of the ajax method itself the biggest difference between the implementation standpoint between those two is that you pass an object into jquery's ajax method in order to get all the necessary parameters that you need to make that call but for the dot get and the dot post method you actually pass in arguments and not an object and that is the big difference between those three the next question number five what is the difference between dot get and dot post the dot get method has data that's encoded in the url by the browser and it's visible in the url and it's stored also in the web history the dot post uses name value pairs submitted in the body that is being sent and it's part of the http request and it cannot be seen in the browser bar so it has a little bit more anonymity to it so that's the main difference between get and dot pose and then the last question is how can we change the class of an element using jquery so jquery actually provides three different methods that we can use to change the class of an element we have the add class method we have the remove class method and we have the toggle class method add class as its name applies is it will actually add a class to an element remove class will remove the class from the element and type class what it does is is a combination of add and remove class working together you give it the name of the class if the element doesn't have the class it will add it to the element if the element does have the class then it removes it from the element and that is the three different ways that you can add a class to an element in jquery hopefully these um these episodes have been um beneficial to you if they are feel free to leave a comment below feel free to to like this um video share it with your friends my name again is jennifer bland my website is jenniferbland.com thank you very much for watching
