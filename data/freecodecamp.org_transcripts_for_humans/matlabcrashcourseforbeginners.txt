With timestamps:

00:00 - learn Matlab from Phil Parisi Phil is a
00:03 - PhD engineering student and his teaching
00:05 - style is clear and to the point Matlab
00:07 - is a programming language and software
00:10 - suite used for data analysis scientific
00:13 - Computing and visualizations and it's
00:16 - widely used in Academia and Industry Hey
00:19 - There YouTube we are going Zero to Hero
00:22 - today in Matlab thanks for joining me
00:24 - we're going to Jump Right In
00:26 - right in front of us is the first screen
00:28 - you'll see when you open up Matlab for
00:29 - the first time this is called the Matlab
00:32 - IDE integrated developing environment
00:36 - this is the place that we do all of our
00:38 - programming in Matlab
00:40 - center of the screen we have the command
00:42 - window this essentially serves as a
00:45 - powerful calculator let's type some
00:47 - stuff in here let's just do seven plus
00:50 - eight or nine that gives us 16. we can
00:54 - do 10 minus five that gives us five how
00:57 - about the square root of 225 15.
01:00 - what about square root of 15 times 9.
01:07 - 34.8569 right these are just quick in
01:10 - and out commands to give us information
01:13 - now if you look in the right we've
01:15 - already got something popping up in our
01:17 - workspace
01:18 - we've got something called ants and if
01:21 - you see after every time we run a
01:22 - command we're getting this output ants
01:25 - which is short for answer and it equals
01:28 - the value of the previous statement that
01:29 - we entered in ants is our first variable
01:33 - that we've created if I just ask Matlab
01:36 - for the value of ants it'll spit it
01:38 - right back out to me as the most recent
01:41 - answer that was spat out
01:43 - if I were to do this again and say 8
01:46 - plus 2 answer is now 10 you can see the
01:49 - workspace variable has been updated to
01:52 - 10 and I can ask for ants and it's 10. I
01:55 - can also do ants plus nine and we'll get
01:58 - 19. Matlab is holding this ants variable
02:02 - in memory
02:04 - we're getting kind of clogged up here to
02:07 - clear the command window
02:09 - CLC and hit enter and that'll remove all
02:13 - that crap in the command window all of
02:15 - our previous statements are now gone but
02:17 - they were executed which is why ants
02:20 - still holds its value
02:22 - right here and still equals 19 even
02:25 - though we just cleared away the
02:26 - lettering with CLC
02:29 - if you want to actually clear the
02:31 - workspace variables you'll need to use
02:33 - the command clear vars this is one word
02:37 - you hit that boom now there's nothing in
02:40 - our workspace and if I ask for ants I
02:43 - get nothing out because ants doesn't
02:44 - exist right now
02:47 - let's try creating some more variables
02:49 - with actual nice names that we can use
02:52 - such as x equals 10 and Y equals 20.
02:57 - here in our workspace we now have two
02:59 - variables X and Y with values 10 and 20
03:02 - and we can use those variables to do
03:05 - further mathematics here we've used X
03:07 - Plus y equals 30 and 30 is saved to our
03:10 - ants variable of course we can ask
03:13 - Matlab for just the x value and just the
03:15 - Y value that we created
03:18 - CLC to free up our Command window
03:22 - there's another cool way to see our
03:24 - workspace variables and that's by typing
03:26 - whose
03:28 - just type that and we'll see the names
03:30 - of our variables that exist here
03:33 - notably this column the class column
03:36 - will describe what type of variable
03:39 - these are
03:41 - in many programming languages handling
03:43 - the types of variables are very
03:45 - important luckily in Matlab 95 percent
03:48 - of the time we're only going to be
03:50 - dealing with doubles double is just the
03:53 - way that Matlab holds the data that
03:57 - belongs to x y and all the other
03:59 - variables that we create
04:01 - this is a nice Bridge into other types
04:04 - of variables such as strings
04:06 - let's call W equals the word new
04:11 - no problem this isn't a number right
04:14 - this is the word new and if we type
04:16 - whose we'll see that Matlab has now
04:19 - created w
04:20 - as a Char this is short for character
04:24 - characters in Matlab are defined when we
04:27 - use single apostrophes around a string
04:31 - of letters or numbers
04:34 - if I do two apostrophes such as Z equals
04:39 - York
04:41 - with double apostrophes on either side
04:43 - and I do whose
04:46 - now we're seeing w
04:48 - is still a char
04:50 - and Z is now a string
04:54 - these three chars doubles and strings
04:57 - will cover almost anything you need to
05:00 - do for basic Matlab and we're not going
05:02 - to go any further beyond the data type
05:04 - discussion for now
05:06 - that's clear on workspace and start
05:08 - fresh
05:09 - one thing you may have noticed when we
05:11 - Define these variables
05:13 - every time we hit enter Matlab provides
05:16 - an output here
05:17 - if we don't want that output we can
05:20 - simply add a semicolon at the end of the
05:23 - sentence
05:25 - like this
05:26 - these semicolons are called suppression
05:30 - they prevent Matlab from outputting a
05:33 - line of code so
05:35 - Matlab still runs that
05:37 - everything we do in this before the
05:40 - semicolon Matlab still acts on for
05:42 - example if we Define x equals
05:46 - X plus seven
05:48 - we run this
05:50 - this line is still run but we just don't
05:52 - see an output
05:54 - by the way you'll notice that our X
05:55 - variable is now 26. why is that
05:59 - the programming language moves
06:01 - sequentially in this line X was defined
06:04 - as 19.
06:06 - when we run this line
06:09 - X right here is replaced with 19
06:13 - adds 7 to 19 and you get 26 on the right
06:17 - hand side of this equation that value is
06:20 - stored to X
06:21 - if we ask for X Out X is now 26.
06:25 - another piece of useful Punctuation is
06:27 - the comma
06:28 - let's say you want to add multiple
06:30 - things on one line I'm clearing out
06:33 - everything right now let's say you want
06:35 - to do Define
06:38 - U is 25
06:41 - and then me
06:44 - is 10.
06:46 - if I run this I can now act two things
06:49 - on one line
06:51 - two commands for one line they both
06:53 - output here
06:55 - if you didn't want them to Output what
06:57 - would you do
06:58 - you'd add semicolons at the ends of
07:00 - these lines in fact at the end of each
07:03 - expression
07:04 - so after 25 and after 10.
07:08 - briefly hit the up arrow in your
07:10 - keyboard and you're going to see that
07:13 - you can access all the old commands that
07:15 - you were using
07:16 - I'll bring this one back at a semicolon
07:19 - here and a semicolon here and we'll see
07:22 - no output but these two lines are both
07:24 - run
07:25 - we've seen a few popular operators I can
07:28 - do U plus me I can do U minus me I can
07:32 - do U divided by me U times me
07:36 - you
07:37 - to the power
07:39 - of me use that carrot on your keyboard
07:42 - to do the power
07:44 - we've seen square root as well
07:46 - square root of U is five
07:50 - one thing to note you can do compound
07:52 - Expressions if I do the square root of 8
07:56 - times 9
07:58 - . that's going to give me the correct
07:59 - answer the same as the square root if I
08:02 - defined X as eight
08:04 - times nine and then did square root of x
08:08 - these two expressions are essentially
08:11 - the same thing X is just holding 8 times
08:14 - 9 and we're plugging it in here
08:17 - whereas here we're just putting 8 times
08:19 - 9 in directly but it's the same thing
08:21 - mathematically and you can see we get
08:23 - the same answer out in both cases
08:26 - again you can always check to see what
08:28 - variables exist if you use the whose
08:30 - command and they're all displayed here
08:34 - that covers how our workspace works on
08:36 - the right if you want to view these
08:38 - variables in further detail you can
08:40 - always double click on them this would
08:42 - be useful when we have matrices and
08:43 - things like that that are not just a
08:45 - single number in a corner
08:49 - other aspects of the Matlab IDE on the
08:53 - left we have the current folder this
08:55 - should be the place that you're actively
08:57 - working in and saving your Matlab
08:59 - scripts to
09:00 - this will be more important later
09:03 - the toolbar is up top this is where you
09:06 - can create new scripts and files open
09:08 - things import data you know it's kind of
09:11 - just your overseen software component of
09:14 - the actual Matlab syntax
09:16 - you might be envious of the dark mode
09:19 - I've got going on if you want to also
09:21 - change that go to your preferences go to
09:24 - colors
09:25 - and this screen should show up
09:28 - uncheck the use System colors box set
09:32 - your background color to Black and your
09:34 - text to White
09:39 - you can also copy all the remaining
09:42 - colors that I've got set up here
09:44 - it's up to you though what your color
09:45 - preference is I like high contrast
09:48 - this is also a great place if you're
09:50 - looking to modify other things in your
09:52 - editor and debugger you want to change
09:54 - the font sizes things like that you can
09:57 - all do it from this preferences tab
10:01 - you've seen so far that Matlab can act
10:03 - as essentially a calculator on steroids
10:06 - but it's not very useful if we're just
10:08 - typing line by line and having to use
10:10 - the outputs that we create let's create
10:13 - a new script
10:15 - to do this you can click the new script
10:17 - button in the very top left or click new
10:20 - and then script
10:23 - these are very powerful and you're going
10:25 - to do the majority of your programming
10:27 - in these Scripts
10:30 - the power of them is that you can type
10:31 - multiple lines of code without anything
10:34 - happening to the Matlab command window
10:37 - you can see I typed clearvars but yet
10:39 - the workspace hasn't been cleared and
10:42 - that's just because I've typed these but
10:44 - I have not run these commands yet
10:48 - to do an actual running of your script
10:52 - you have to click the Run button
10:55 - save and run we need to save this file
10:58 - I'll just call it basics
11:03 - we run it and now look our Command
11:05 - window is giving us the output of x
11:07 - equals 10 which was the result of this
11:09 - line
11:10 - also it cleared all the previous stuff
11:13 - we had in our Command window and we
11:15 - cleared all the variables so now we only
11:17 - had X after we created it
11:20 - this is the real way we're going to code
11:22 - in this beginner course and the way that
11:24 - you should structure all your programs
11:26 - from here on out
11:28 - you can do things like x equals X plus
11:30 - seven
11:32 - add in W equals X
11:34 - plus y
11:38 - suppress those run this and we'll get no
11:40 - output because we suppressed every
11:42 - single line of code
11:44 - but w x and y all exist in the workspace
11:48 - because we ran these lines and they were
11:50 - all assigned during this process
11:53 - if we wanted to see a variable we can
11:55 - check in the command window or when you
11:58 - run this script you can just ask for
12:00 - that variable to be outputted
12:03 - and there we run it again and you get W
12:05 - equals 27. I'm running this the cheating
12:08 - way I love doing it control
12:11 - and enter is the quick way to run your
12:14 - Matlab Scripts
12:15 - you can always use this run button at
12:17 - the top as well
12:20 - let's clear out our script and our
12:22 - workspace using CLC and clearvars and
12:25 - start fresh here for a new topic vectors
12:28 - and matrices
12:29 - let's add a heading for our script and
12:32 - you can do that using the percent sign
12:34 - yes it's percent I know it's weird but
12:37 - it's Matlab standard for adding comments
12:41 - comments are very useful you can add
12:43 - them all over your scripts so that you
12:46 - know what values you're defining and why
12:49 - very often we know why we're doing stuff
12:51 - in the moment
12:53 - but many many days later even minutes
12:55 - later you're going to come back and
12:57 - wonder why you needed to do something
12:59 - you can add comments on whole new lines
13:02 - like this you can also add comments in
13:04 - line like this
13:06 - new line and inline comments
13:10 - and then when you run your script using
13:13 - control and enter
13:15 - you'll see that the lines these comments
13:18 - aren't even included
13:20 - Matlab still goes through and creates
13:22 - the variables as such
13:25 - this section will call matrices and
13:28 - vectors you're in The Matrix laboratory
13:30 - I hope you know some linear algebra and
13:33 - some basic Matrix operations if not stay
13:36 - tuned we're going to learn them
13:37 - first things first let's always start
13:40 - off our script by clearing our Command
13:42 - window and doing a clear vars operation
13:45 - that ensures that every time we run this
13:47 - script we're going to have a fresh
13:49 - output
13:51 - anything that was previously outputted
13:53 - will be cleaned out and we're always
13:55 - going to have any new outputs that we
13:57 - call Fresh in the command window
13:59 - and then clearvars will always wipe away
14:02 - the stuff from our last script and allow
14:04 - us to Define new variables that'll be
14:07 - available in the workspace at the end of
14:09 - the script this is good form
14:13 - for our first vector and vectors and
14:16 - arrays are going to be used
14:17 - interchangeably let's say x equals 1
14:21 - through 10.
14:23 - I typed a colon when I said the word
14:26 - through
14:28 - if we run this with control enter
14:31 - here x is defined as 1 2 3 all the way
14:34 - to ten
14:36 - it's not just a single value anymore X
14:39 - is a vector or an array
14:42 - even in the workspace we see here it's
14:45 - defined as such holding these 10 values
14:49 - let's type who's in the command window
14:51 - and we'll see that X is still stored as
14:53 - a double but it's a 1 by 10 in size
14:58 - this is because Matlab uses the standard
15:00 - and linear algebra to do one row by 10
15:04 - columns
15:06 - this is a horizontal array it's one row
15:10 - of values
15:11 - 10 columns across
15:14 - if you want to switch this I could do X
15:16 - transpose transpose is just a single
15:20 - apostrophe I run this and now we see
15:25 - the answer out is a vertical array
15:29 - X start out as horizontal I took the
15:32 - transpose and ants is now a vertical
15:35 - array
15:36 - we take a look in our Command window
15:38 - ants is a ten by one it's ten rows by
15:42 - one column X is one row by ten columns
15:46 - very important to keep this straight As
15:49 - you know
15:53 - we can also Define arrays and vectors
15:56 - using the linspace function
15:58 - x equals the Lin space
16:00 - and the arguments here are going to be
16:02 - the value you want to start with and
16:05 - then the value you want to end with
16:07 - if we run this oh my gosh we have a ton
16:10 - of stuff in our output
16:11 - it's because linspace will automatically
16:14 - generate 100 values between 20 and 50.
16:19 - and that's we're seeing here and these
16:22 - are evenly spaced values
16:24 - if I did from 0 to 100
16:28 - we're seeing 100 at the end and we start
16:31 - at zero
16:33 - you can add one more argument to Lin
16:36 - space and that will be the number of
16:38 - terms you want the default is a hundred
16:40 - evenly spaced terms but if I ask for 101
16:43 - for example now I get even numbers here
16:47 - because a hundred and zero are included
16:49 - in these 101 values I can also do 20 and
16:54 - now we're only a one row by Twenty
16:57 - values a 1 by 20 double as our workspace
17:00 - tells us
17:02 - linspace is the first function we've
17:04 - encountered and will cover functions
17:06 - extensively throughout this training
17:08 - when you have a function this is a
17:11 - built-in tool that Matlab has for us to
17:13 - use freely
17:14 - you're going to always open up functions
17:16 - with parentheses
17:18 - and functions take arguments these are
17:21 - the values that are inputted to tell the
17:23 - function what to do
17:25 - here our first argument was Zero our
17:27 - second argument was a hundred and our
17:29 - third argument was 20. each argument is
17:33 - separated by a comma
17:35 - note that Matlab doesn't care if you
17:37 - have spaces or things in between as long
17:39 - as you have commas separating your
17:41 - arguments
17:42 - no difference in the output
17:45 - another way to define arrays and vectors
17:47 - is simply to do it manually
17:50 - to do this you start by opening a
17:53 - bracket and then you type the values you
17:55 - want let's say 12 50 negative 8 negative
18:00 - 100. close the brackets and run this
18:04 - there's y 1250 negative 800 just as we
18:08 - specified here
18:10 - the only separator I'm using is a space
18:13 - you can add different spaces in here run
18:16 - it and Matlab won't care at all it'll
18:18 - give you the same output
18:20 - I'm going to suppress these outputs for
18:22 - now as well
18:24 - the important thing is that there is at
18:26 - least one space between you can also
18:28 - separate these with commas
18:31 - or no comma
18:33 - run this
18:35 - still the same output nothing's changed
18:37 - here so commas or spaces to separate
18:40 - values in an array or vector
18:45 - let's call our first Matrix a and we'll
18:49 - Define it as a two by two
18:52 - we'll call the first row one and three
18:55 - separated by just a space and to do a
18:58 - new row you have to use a semicolon
19:01 - and then 2 and negative 10 will be our
19:04 - third and fourth values
19:06 - if I run this here's a 1 3 2 and
19:09 - negative 10 ordered as we discussed
19:12 - because I have this semicolon here
19:14 - I could also add optionally commas
19:17 - between those values and we'll get the
19:19 - same output
19:20 - if I want to add another row no problem
19:23 - 88 and 99 we run that and we added a
19:27 - third row here
19:30 - Matlab
19:31 - will follow every single rule of linear
19:35 - algebra
19:36 - and it assumes you want to do linear
19:38 - algebra throughout your mathematics
19:41 - for example if I want to add a value to
19:44 - a
19:45 - it'll follow the linear algebra rule
19:47 - which is add that scalar value to each
19:52 - of the positions in The Matrix
19:55 - 99 plus 2 is 101.
19:58 - same thing with multiplication a times
20:02 - eight
20:03 - every single value will be multiplied by
20:07 - eight
20:08 - what happens if I do a times a
20:13 - if we run this and we've gotten our
20:16 - first error in Matlab just grow to love
20:19 - these errors but they're trying to help
20:22 - you it's going to be frustrating when
20:24 - you get them read these errors
20:25 - extensively
20:27 - you'll see here incorrect dimensions for
20:29 - matrix multiplication ah okay a is a
20:33 - three row by two column Matrix
20:37 - linear algebra rules state that we
20:39 - cannot multiply a three by two by a
20:42 - three by two
20:44 - that inner Dimension has to match what
20:47 - we could do is take the transpose of a
20:50 - and do this
20:51 - a is a three by two but a transpose is a
20:55 - two by three
20:58 - right here two rows by three columns and
21:02 - thus when we do this multiplication it
21:05 - works out it follows the rules of linear
21:07 - algebra
21:09 - but what if you don't want to follow
21:10 - those rules let's say you've got x
21:13 - equals Lin space 0 to 100 you've got
21:16 - your 100 evenly spaced values and you
21:19 - want to take I don't know the square of
21:21 - X so you want to do x squared
21:24 - well matlab's going to throw you for an
21:26 - error once again because this is a one
21:29 - by a hundred Matrix and you can't
21:31 - multiply one by a hundred by a one by a
21:33 - hundred but what if you just wanted the
21:34 - square of every value you wanted zero
21:37 - squared 1 squared 2 squared
21:39 - to do element-wise operations that's the
21:42 - difference here you can do Matrix
21:44 - operations or you can do element wise
21:48 - operations
21:49 - element wise operations
21:52 - need a dot in front of them it's going
21:55 - to be weird to get used to I know but
21:57 - the dot is exactly what you need
22:00 - if I run this
22:02 - it goes through X and takes every value
22:05 - squared
22:06 - it's not the best example let me just
22:08 - add 101 here so we get even values and
22:11 - now you'll recognize this is 0 squared 1
22:14 - squared 2 squared 3 squared 4 squared
22:18 - right all the way down we should get a
22:20 - hundred squared to get 10 000.
22:25 - remember arrays in vectors are simply
22:28 - along one dimension like x equals 22 to
22:32 - 100.
22:34 - along one dimension matrices are along
22:38 - two dimensions
22:43 - there's a few more handy ways to Define
22:46 - common types of matrices if you want to
22:48 - make a matrix of all zeros you'll do
22:50 - ones and then add an argument here
22:54 - this creates a three by three Matrix of
22:58 - ones very simple if you wanted to change
23:01 - those Dimensions you could do something
23:02 - like this and it gives you purely a
23:04 - three row by one column array of ones
23:08 - if I wanted to do B as all zeros I'd do
23:12 - zeros let's give it the argument of ten
23:14 - it gives me a 10 by 10 matrix here you
23:18 - can always check that in your workspace
23:19 - too
23:20 - similarly if I want just to do a two by
23:23 - eight Matrix of zeros here's two rows by
23:27 - eight
23:28 - and the last one that we'll cover
23:29 - briefly is going to be the identity
23:32 - Matrix you'll use I
23:36 - I just like the eyeball in your face I
23:40 - of three and we'll get an identity
23:44 - Matrix which is just ones on the
23:46 - diagonal
23:47 - again can I add B and C together
23:52 - of course not the matrix dimensions must
23:54 - agree and Matlab will continually remind
23:56 - you of that I can add C and C together
23:59 - that's not a problem same dimensions and
24:02 - I'll get twos along the diagonal because
24:04 - of the summation
24:06 - a cool trick here as well when I had X
24:09 - was one to ten
24:11 - there's actually one more argument that
24:13 - we can add here
24:14 - and it's going to be this value between
24:16 - the colons
24:18 - if I do this we get what we've been
24:20 - expecting one to ten
24:22 - but think of this as start at one
24:25 - Jump by one value
24:28 - end at 10.
24:30 - if I wanted to jump every two values run
24:34 - this and I get one plus two is three
24:36 - plus two is five plus two is seven plus
24:39 - two is nine if I added another two I'd
24:42 - be beyond our upper limit and thus it
24:45 - stops at 9 and doesn't go to ten kind of
24:47 - Handy if you ever need to jump values
24:49 - quickly
24:51 - let's clear everything out and start
24:52 - fresh here
24:54 - an important part of working with our
24:56 - matrices will be grabbing certain values
24:59 - out of those matrices to use them for
25:02 - further calculations
25:04 - let's start for another example here
25:05 - basic a 5 3 4.2
25:10 - it's going to be a that's a one row
25:12 - let's do eight nine and zero as our
25:14 - second row
25:16 - easy good start
25:17 - let's say I want to grab out one of
25:20 - those values how about this nine
25:23 - how would I do that
25:27 - we can use something called the index
25:30 - the index goes through a matrix or array
25:35 - or any variable and pulls out elements
25:38 - of those variables
25:41 - here a is a combination of all these
25:45 - individual elements including nine
25:49 - to use the index you're going to have to
25:51 - use parentheses
25:53 - then within those parentheses you
25:56 - specify the location of the element that
25:59 - you want
26:00 - here it's nine I'm going to call a
26:03 - second row
26:04 - second column
26:07 - and our output
26:08 - is 9.
26:10 - if I want to access that zero that's in
26:13 - the second row
26:14 - third column
26:17 - let's say I want to add that 0 to that 9
26:25 - just like this
26:27 - we're specifying this value second row
26:30 - third column
26:32 - which is zero and we're adding it to the
26:35 - second row second column value of nine
26:40 - if you just have an array say a was only
26:44 - this it's just a simple 1 by 3 Matrix
26:50 - to grab a value out of that
26:53 - you can just specify a single number so
26:55 - A1 would be 5 A2 would be 3 and A3 would
27:01 - be
27:02 - 4.2
27:04 - this is going to be very frustrating for
27:06 - programmers of other languages because
27:08 - Matlab uses something called one
27:11 - indexing
27:12 - that means that in the memory Matlab
27:16 - stores the first value of something as
27:18 - the first index
27:20 - this is because of the nature
27:22 - of doing Matrix algebra linear algebra
27:27 - needs this to be in the first spot there
27:29 - is no such thing as a of zero
27:33 - array indices must be positive integers
27:35 - or logical values
27:39 - final note on this you can also use end
27:42 - as an index
27:44 - that'll grab you the last value in a
27:46 - matrix
27:47 - this is convenient for let's say you've
27:49 - got a equals Lin space
27:53 - you know I don't know
27:55 - 220 to 900 and then you've got b equals
28:01 - one by every five to
28:04 - 98 980 like this and you want to find
28:08 - the last value of these well I could
28:11 - tell you right now Lin space has a
28:12 - hundred values in it but for B I have no
28:15 - idea how many values are in this so I
28:17 - can just call B end and I'll get the
28:20 - last value out of B
28:22 - from there you can work your way
28:23 - backwards if you want you can call B end
28:26 - minus 10.
28:28 - it'll go back 10 spots okay this isn't
28:32 - the end quantity minus 10 this is go to
28:36 - the last index and then pull back 10
28:39 - spots so if we open up B here
28:42 - go to the end of B
28:45 - 976 and go 1 2 3 4 5 6 7 8 9 10 9 26.
28:53 - that's what we got right here very
28:56 - different from B
28:57 - and
28:58 - end parentheses here which grabs 976 and
29:03 - then subtract 10 which is simply 976
29:06 - minus 10 which gives us 966. important
29:09 - differentiation there
29:12 - we will use these indices further when
29:15 - we get into Loops the last thing I want
29:17 - to note on it is that we can use these
29:19 - indices to change values of our matrices
29:22 - I've just got another very basic
29:26 - array set up here
29:27 - and I want to do
29:29 - this one value
29:31 - I want to change it to a hundred let's
29:34 - say it was a typo or something
29:36 - I can do a 1 comma 1.
29:39 - and then set that value equal to a
29:41 - hundred
29:43 - I'm going to Output a afterwards and
29:45 - we'll see that I've now corrected this
29:46 - value the first row and First Column
29:50 - value to 100.
29:52 - and we see it here in our Command window
29:56 - you can also pull out entire rows and
29:59 - entire columns I've only shown you how
30:02 - to do this with single stuff right now
30:03 - like asking for the first row second
30:06 - value of two let's say I want the entire
30:09 - second row here to be outputted
30:11 - you're going to use that colon again
30:13 - what you'll do is you need to determine
30:15 - what you want so here we want the entire
30:18 - second row so that means that we want
30:22 - the second row and instead of specifying
30:25 - a single value
30:27 - I'll just say give me them all
30:30 - and the colon will give you them all
30:33 - boom
30:35 - you can also think of this as giving you
30:38 - the first value through the third value
30:41 - this is the second row First Column
30:43 - second row second column second row
30:46 - third column and one to three just gives
30:49 - us
30:51 - the one two and three
30:55 - if you want just the second row first
30:59 - and second values the five and the four
31:02 - there you go
31:04 - and if you ever want everything you
31:05 - could just do one to end in case you
31:08 - didn't know what the end of this Matrix
31:09 - actually was
31:11 - short and sweet we're moving along well
31:13 - let's keep going
31:16 - let's take a look at a real world
31:18 - problem that you're likely going to be
31:19 - solving
31:21 - what is the maximum value of the
31:23 - following equation on the Range 0 to 5
31:25 - we have the expression for y here
31:28 - what is the minimum of that function
31:30 - what is the x value where the maximum
31:33 - occurs
31:35 - and then Part D is what is y if we input
31:38 - 20.7 for x
31:40 - this is exactly the type of problem you
31:42 - guys are going to see in the real world
31:43 - let's go through step by step but you
31:46 - need to unthink
31:48 - how you typically solve these problems
31:51 - if you just had pen and paper you take
31:53 - the derivative of y you'd set it equal
31:56 - to zero
31:57 - and then you'd find what points are the
31:59 - maximum and minimum right typical very
32:02 - standard approach
32:04 - however
32:06 - we have a computer we have processing
32:08 - power we can calculate a bunch of
32:10 - different things
32:12 - so rather than solving this for One X
32:15 - value what we're actually going to do is
32:17 - generate X values from 0 to 5 and then
32:20 - calculate a bunch of Y values that
32:23 - correlate to those X values
32:25 - and then we'll just pick out the largest
32:27 - y value and pick up the minimum of the Y
32:29 - values and then part C and D we'll have
32:32 - to learn some more stuff as we go but no
32:34 - problem your brain is putting right now
32:36 - because you are learning so much let's
32:38 - get back into Matlab
32:40 - here we are with a fresh slate as I
32:43 - mentioned let's first generate a bunch
32:45 - of values between 0 and 5. I'm using
32:48 - linspace so that'll give us a hundred
32:50 - then at each of those X values let's
32:53 - calculate a y value
32:56 - and let's start easy here because it's
32:58 - very easy to get lost when you're
32:59 - writing these equations we want to do x
33:02 - minus
33:04 - 3 for the equation and let's just run
33:06 - this for now let's make sure that as we
33:09 - progress and add terms we're not getting
33:11 - errors
33:13 - this works we've now calculated what x
33:16 - minus 3 is and this is element wise
33:19 - stuff X is technically a vector it's a 1
33:22 - by 100 vector and so is y right now 1 by
33:25 - 100 because every value in X is just
33:28 - being subtracted by 3 right now
33:31 - let's take the opposite of that for the
33:34 - equation and now we need to multiply
33:36 - this to the second power
33:40 - squared
33:42 - if we run this we're going to get an
33:44 - error why because this quantity here is
33:47 - an array
33:49 - it's a 1 by 100 array
33:52 - and it's being multiplied by itself
33:53 - right we're squaring it
33:56 - math in Matlab is Matrix algebra
34:03 - thus it's trying to do a one by a
34:06 - hundred times a one by a hundred matrix
34:08 - multiplication and that's what we're
34:10 - getting this error
34:12 - think how do we do element wise
34:14 - operations we just want each of these
34:16 - X's the first value of x
34:19 - to be squared the second value of x to
34:21 - be squared technically first value minus
34:23 - three to be squared second value minus
34:26 - three to be squared that's an
34:28 - element-wise operation
34:30 - add a DOT it even tells you right here
34:33 - to perform element wise Matrix Powers
34:35 - use Dot and then the carrot that's
34:38 - exactly what we want let's add the dot
34:40 - in there
34:41 - good
34:43 - and then finally we need to add 10 at
34:47 - the end
34:48 - to ensure that order of operations are
34:50 - happening and by all means Matlab is
34:52 - extremely smart and will do these
34:53 - appropriately it's more so for us as the
34:56 - programmers I like to add in extra
34:59 - parentheses do not do not do not add any
35:03 - other type of brackets or braces no no
35:06 - no no
35:07 - brackets are used when you define
35:09 - matrices right a equals zero and one
35:14 - that's only only only for matrices and
35:18 - arrays all right parentheses are
35:21 - dedicated for orders of operations and
35:24 - for indexing
35:25 - so use multiple multiple you can do
35:28 - double things here whatever you want
35:31 - do not use brackets do not use braces
35:33 - don't use these things no no no no no
35:36 - those are for other things in Matlab
35:39 - just the parentheses here
35:42 - and then I'm adding 10 afterwards
35:45 - great so I've got X on the Range 0 to 5
35:48 - y
35:50 - taking those X values subtracting 3 from
35:53 - each of them squaring that quantity
35:56 - taking the opposite of it and then
35:58 - adding 10 to it fantastic
36:01 - but I'm a visual person I love to see
36:04 - things and that's how I learn and
36:05 - understand if you are too then this just
36:08 - isn't doing it for you yes you have all
36:10 - these values and we can find the maximum
36:12 - one but let's first plot this
36:14 - we're going to use matlab's plot command
36:16 - and just give it the x value and the Y
36:19 - values that you want to plot against
36:20 - each other
36:22 - hit enter and we've made our first graph
36:24 - in Matlab and it's beautiful
36:27 - x-axis are our X values from zero to
36:30 - five Y axis we see goes from about 1 to
36:32 - 10 and we have to find our Max y value
36:36 - looks like it's going to be around three
36:37 - right now but this just gives us a good
36:39 - idea of what we're working with
36:41 - we're going to cover plotting more
36:43 - advanced later in this but for now basic
36:45 - plot
36:47 - what's actually going on though is that
36:49 - this isn't a contiguous line these are
36:52 - just all the 100 data points that we've
36:54 - plotted
36:55 - really quickly just change this
36:59 - and add this argument
37:02 - you're adding a character star
37:05 - put that in there and you'll see on this
37:07 - graph all these little stars are the
37:10 - data points that we calculated that's
37:12 - what I'm talking about we've got a
37:13 - computer here that can do mad
37:15 - computation let it do its thing
37:18 - also now that we've got plots being made
37:20 - I've added this close all command that
37:23 - will close all those figures that we
37:26 - have up every time we run a new script
37:28 - and when we plot it'll be on a brand new
37:31 - figure so we get the new plot showing
37:33 - every single time
37:36 - but we still have to answer the question
37:38 - what is the maximum y value and this is
37:40 - where matlab's built-in functions come
37:42 - into play Matlab literally has a
37:45 - function called Max
37:47 - if we give y as the argument we'll get
37:50 - the maximum y value out right here
37:53 - you can see it's just about 10
37:55 - . the reason why it's not 10 is because
37:58 - we're not checking every single infinite
38:00 - value that exists between 0 and 5. we're
38:03 - only checking a hundred of them because
38:05 - that's what linspace gives us
38:07 - is this answer correct just about it's
38:10 - pretty darn close to 10 but note that
38:12 - this is a numerical solution
38:15 - whereas 10 would be the actual
38:18 - theoretical solution
38:20 - if you want to find the minimum value
38:22 - how would you do that
38:24 - well you've likely figured out that
38:26 - minimum Y is probably the one that'll do
38:28 - it for you and this one comes out to an
38:30 - even one
38:31 - but let's say you didn't know the name
38:33 - of a function right I clearly know Max
38:36 - and Min those are easy but if you're
38:38 - looking for more advanced functions how
38:40 - would you even begin to find this
38:42 - Matlab provides awesome ways to get help
38:46 - first and foremost is my favorite you
38:48 - click this little FX down here and this
38:51 - opens up a search for functions
38:54 - boom I've already got minimum searched
38:56 - in here and you can see all the
38:57 - functions that in the description have
39:00 - minimum in it
39:01 - if you want to take an integral of
39:03 - something you're going to search
39:04 - integral in here and boom numerical
39:06 - integration all these different things
39:08 - that are built into Matlab that you have
39:10 - at your disposal
39:13 - maximum again
39:15 - here we are
39:16 - let's say you want to round values
39:20 - ceiling floor fix you've got all these
39:22 - options take advantage of this tool
39:25 - simply by clicking the little f of x in
39:27 - the bottom of your screen
39:29 - however I've now found these functions
39:32 - how do I know what their arguments are
39:35 - Matlab has this covered by doing help
39:37 - and then the function name
39:40 - if you run this in your command window
39:42 - and then open it up a bit more you get
39:45 - documentation on this function
39:48 - men minimum elements of an array it's
39:51 - the smallest element in the vector X
39:53 - what's X right here it's your argument
39:56 - and it tells you all these conditions
39:58 - for what this function does
40:01 - you can also type doc and then the
40:04 - function name and it will open up
40:06 - matlab's online documentation for this
40:09 - function
40:10 - it's basically the nicer version of what
40:12 - we saw in just plain text there before
40:16 - you've also got this help bar that you
40:18 - can search in I can look for the maximum
40:21 - search this and I'll see that there's a
40:23 - cumulative maximum function some sort of
40:25 - name length Max and moving Max this is
40:28 - the max that we're going to be using
40:29 - here just the maximum elements of an
40:31 - array there is so much help and guys if
40:34 - you aren't peeing your pants right now
40:36 - and subscribing to this YouTube channel
40:38 - oh if you've lost your mind this is gold
40:41 - as a programmer you are never ever ever
40:44 - ever expected to know all the functions
40:47 - and all the possibilities of a
40:48 - programming language no no no no you
40:51 - need to know the basics and then you
40:53 - need to know how to find information
40:55 - that you need
40:56 - almost every time that I program in
40:59 - Matlab I end up going online going to
41:02 - this documentation and searching for
41:04 - something new
41:05 - the other way to do it you open up a new
41:08 - browser on the web and you say how to
41:10 - find the minimum of an array
41:14 - in Matlab
41:16 - look this up boom MathWorks website has
41:19 - a hint boom right here all this help is
41:22 - available guys you are not alone do you
41:25 - see when I was searching for this right
41:26 - here look in Java python C plus plus
41:29 - JavaScript they're in Matlab already in
41:31 - C everyone everyone has to get help in
41:35 - these languages the internet is the best
41:38 - resource for you guys the world is your
41:40 - oyster here take advantage of it
41:43 - anyway I digress
41:45 - let's get back to our problem
41:49 - all right we found the Max and the
41:51 - minimum using the Max and Min functions
41:53 - at what x value does the maximum y value
41:56 - occur okay with a maximum y value I
41:59 - think we found was about 10 so we need
42:01 - to go back and find that x value
42:05 - in our script let's take a step back
42:07 - we've got Max of Y that's good but we
42:10 - need the index of that right at some x
42:15 - value
42:16 - we put it through this function here and
42:19 - we got some y value that was the maximum
42:22 - so if we work backwards we might be able
42:24 - to get that index
42:26 - and this is where reading about the
42:27 - functions help
42:29 - Max let's take a look here
42:33 - this third paragraph m i max of X also
42:38 - Returns the indices into operating
42:40 - Dimension corresponding to the maximum
42:42 - values
42:44 - oh that's exactly what we need the index
42:47 - is what we want let's try a couple
42:49 - things here let's try first let's just
42:52 - save this to Max Val
42:55 - and do Max y
42:57 - I'm going to suppress some output here
42:59 - we don't need a plot right now so I'm
43:01 - going to comment this line out so Matlab
43:03 - won't even run this and now if I run
43:06 - boom we're just getting that maximum
43:07 - value out as we saw before though in
43:10 - that help thing it said if we do M and I
43:14 - we're going to get the maximum value and
43:17 - the index of it
43:19 - if we run this we get two outputs now
43:22 - this is how you take multiple outputs of
43:25 - a function you actually pass it in a
43:28 - matrix of values and then the function
43:30 - will assign appropriate values to these
43:33 - outputs
43:34 - now I've got I equals 60. that means the
43:37 - 60th value of I if we open up sorry of Y
43:42 - if we open up y one two three four five
43:45 - six you know if you go all the way over
43:46 - to 60
43:49 - should be boom right there the value
43:51 - we're expecting
43:53 - that means the 60th value in X is the
43:57 - One X value that gives us the maximum y
43:59 - value 60 right here so
44:03 - 2.9798 of course guys you don't have to
44:05 - go and open this up every time we're
44:07 - smarter than that we can just do X of 60
44:12 - and that'll give us the x value better
44:16 - yet let's come here and let's do
44:19 - x max Val
44:22 - equals
44:24 - X of I
44:26 - what is this I it comes out of here and
44:29 - it has the value of 60.
44:31 - if we run this we'll get X maximum value
44:36 - 2.9798 this really gives us the maximum
44:38 - value of the Y function
44:41 - the last question they asked us was how
44:43 - to find the Y value of Any Given X
44:49 - this is not something we can do by just
44:51 - generating all these different points
44:53 - right that'd be exhaustive I could give
44:55 - you any x value right
44:59 - 9.99999957892 right and I there's no way
45:01 - that I was going to calculate that in my
45:03 - Lin space so at this point we need a
45:06 - different approach
45:07 - what we're going to do
45:09 - is Define something called a custom
45:11 - function more specifically Matlab calls
45:15 - these Anonymous functions but they're
45:17 - just what we're used to when we plug in
45:19 - a simple value into an equation and we
45:21 - get one output
45:24 - and we're going to say at X
45:28 - Y at x equals this
45:30 - if we run this we get an error guys I
45:33 - can honestly never remember how to
45:35 - define Anonymous functions you know why
45:37 - because I can open up a new browser
45:41 - and type Anonymous functions in Matlab
45:45 - heck I've even made a YouTube video on
45:47 - this but I don't remember these things
45:49 - because they're very quick and easy to
45:50 - look up here we are
45:52 - we do at uh okay I just forgot to add
45:55 - parentheses around X not a big deal I
45:59 - come here parentheses around X
46:02 - and we're good I run this no more error
46:06 - but why is defined differently if I
46:08 - output y right here it's no longer just
46:12 - this entire thing put through our
46:14 - function
46:16 - it's actually a function handle what the
46:18 - heck is this don't worry so much know
46:21 - that you can now use Y and plug in any x
46:23 - value that you want
46:27 - run that script and there's your answer
46:29 - it's a massive number also note that
46:32 - Matlab uses scientific notation here
46:34 - this is times 10 to the sixth power
46:37 - but now I think we were asked the Y
46:40 - value of
46:42 - 20.2 something like that we can run this
46:46 - and there we go
46:48 - if we input this value of x we get this
46:51 - value of y out
46:52 - these are called Anonymous functions and
46:55 - they're very quick and easy methods to
46:57 - get outputs
46:58 - the problem actually called for us to do
47:01 - y of 20.7 so I'll go ahead and do that
47:04 - for you we run that note can be a little
47:07 - bit confusing because previously we've
47:09 - done
47:11 - something like this where X of 2 is
47:14 - actually the second value in x
47:16 - note that these are very different X
47:19 - here is a matrix it's a 1 by 100 array
47:23 - of values
47:25 - y isn't a matrix or array there is no
47:29 - index to y y is defined as a function
47:33 - handle
47:35 - these function handles they don't have
47:37 - multiple components like X does X has
47:40 - all these values we can choose from y
47:42 - does not
47:43 - when we give a value to Y and it's a
47:46 - function handle
47:47 - it simply inputs that value and then
47:50 - runs it through the equation
47:51 - and that's why these look similar but
47:54 - act very different
47:56 - here is another question to consider
47:58 - plot the equation from x equals negative
48:00 - 10 to 10 of it's that same formula we
48:03 - saw previously
48:05 - Part B is going to be we have to change
48:08 - the curve to add 15 instead of 10 and
48:11 - then part C is change that curve again
48:14 - but we're going to do x minus 5 quantity
48:17 - squared in the parentheses
48:19 - this is prompting us to think more about
48:21 - plotting we're going to cover that for
48:23 - the next few minutes
48:25 - let's start fresh in Matlab here we've
48:28 - got X and I've changed this to negative
48:31 - 10 to 10. we aren't going to be using
48:33 - this Anonymous function form anymore I'm
48:36 - just going to clean this up to what we
48:37 - need is the bare minimum
48:39 - and let's run this to make sure things
48:40 - are working I've called our y y1 because
48:44 - for Part B and C we can create a Y2 and
48:48 - a Y3
48:50 - I'm just gonna copy this for now it's
48:52 - gonna be the easiest way to make this
48:54 - work there's our Y2 and our Y3 will be
48:58 - like such very good
49:00 - and our Y2 we add 15 and our Y3 we do
49:07 - this as a minus five excellent this will
49:11 - get us our three curves and if we run
49:12 - this good we've got
49:15 - 100 values for each of these y's and
49:19 - then we can plot all those values
49:21 - because it's against the same X right
49:23 - we're using the same x value negative 10
49:25 - to 10 for all these different y's and
49:27 - these will give us our three curves
49:29 - essentially right now we have three
49:32 - different pairs of data
49:34 - but before we get into plotting these
49:36 - and I want to plot them all side by side
49:38 - around the same graph potentially let's
49:40 - just start talking about plots and
49:43 - figures in Matlab Matlab calls these
49:45 - things a figure in our Command window
49:47 - let's just do figure one and hit enter
49:50 - it's going to open up this window and it
49:52 - contains a blank figure not very
49:54 - eventful but as we begin to plot things
49:56 - on it for example let me do a split
49:59 - screen here it'll be easier to see
50:01 - here we go here's our figure that's just
50:03 - all blank let's do plot X and y1 right
50:08 - we do this and there we go the plot is
50:11 - starting to be populated now if I did
50:13 - plot X and then Y2
50:16 - we'll see there's a slight very slight
50:19 - change there actually not substantial
50:22 - but let me plot the third one now Y3 and
50:26 - there's a that was a much bigger change
50:27 - the curved shape is staying the same but
50:29 - if you look at our axes those are
50:31 - shifting
50:33 - what matlab's doing it's rewriting this
50:36 - graph on the same figure see we still
50:38 - have figure one right here
50:41 - the proper way to do this to add
50:42 - multiple curves of the same plot is
50:45 - going to be using the hold on command
50:48 - okay so here I've got Y3 plotted this is
50:50 - the most recent one that I ran if I did
50:53 - hold on and then plotted X versus y1 aha
50:58 - there's our other line let's do that
51:01 - again hold on and plot X and Y2
51:05 - there's our third line in yellow there
51:07 - matlabs automatically recognizing that
51:09 - these are going to be different lines
51:11 - and hence it changes the colors being
51:13 - used
51:14 - but let's make it ahead of ourselves
51:16 - this graph is actually pretty crappy we
51:18 - don't have any actions labels there's no
51:20 - title this is this is kind of garbage
51:22 - for now let's let's start a new plot
51:24 - here let's call figure two
51:28 - and you know what let's do all this
51:30 - second figure work back in our script
51:34 - I'm gonna go full screen here again this
51:36 - close all is going to wipe out all those
51:38 - figures and we're starting fresh
51:41 - let's start with our plot so plot of X
51:44 - versus y1 we run this we get what we
51:47 - expect let's add an X label
51:50 - that's gonna be our x-axis this is
51:53 - simply X great same thing for the Y axes
51:56 - let's do y label and Y could not be
51:59 - simpler you can I like to do these with
52:01 - a comma but you can put them on separate
52:03 - lines it doesn't matter you run these
52:06 - and it's created
52:07 - we can be more specific here and specify
52:10 - what figure we want because we can
52:11 - create multiple figures and plot Y2 on
52:15 - that second figure
52:16 - now two figures will pop up here's our
52:19 - first figure
52:20 - which has the X and Y on it
52:23 - and the first curve and here's the
52:25 - second figure which has our second curve
52:28 - notice that these X label commands when
52:31 - they follow a plot they go on that plot
52:34 - here the X label and Y label commands
52:37 - come after this first figure plot
52:40 - and then right here
52:42 - we plot the second figure but we don't
52:45 - have any X axes Y axis labels once you
52:48 - command a plot
52:50 - anything that follows will go on that
52:52 - plot until you start another plot
52:56 - let's keep rolling with this one let's
52:57 - add a title
53:00 - using the title command
53:02 - we call this Y versus X
53:05 - and we kind of had this as like problem
53:07 - a from our problem sets so be nice to
53:09 - have that graft on there too so it
53:11 - specifies there's our problem a I like
53:14 - having grid lines on here it makes
53:16 - things a lot clearer you're just going
53:17 - to call grid on
53:19 - run this and we're pretty much there
53:22 - guys this is looking like a very nice
53:24 - graph the only thing and this is getting
53:26 - Nitty Gritty at this point
53:28 - we should be plotting data points
53:30 - because these are just simply raw data
53:32 - points right now right this isn't a
53:35 - curve this isn't one continuous curve y1
53:38 - and X1 are 100 data points so we really
53:42 - should be plotting these as
53:45 - those Stars
53:47 - as I talked about earlier
53:49 - and that way it's a bit more clear I'll
53:51 - go full screen here to see that we're
53:53 - just calculating y values at different X
53:56 - values along the way it creates a shape
53:59 - of a curve but it isn't overly
54:00 - misleading of what's going on here
54:03 - if you want to change the color of these
54:05 - the shapes of these how do you think
54:07 - you'd do that what have we talked about
54:09 - so far when you need to get extra help
54:12 - on a command
54:14 - throw this in your command window help
54:16 - plot scroll up a little bit and you'll
54:18 - see there's a whole plethora ugh Gold
54:21 - Guys gold right here blue green red
54:24 - these are all your oh
54:26 - blue green red these are all your colors
54:28 - you can do different shapes and things
54:31 - and then for your lines you can create
54:32 - different things here
54:34 - let's go ahead and do that you add all
54:37 - those things right in here
54:39 - so if I wanted to do blue stars I'd do
54:43 - blue and then star what about blue
54:46 - circles the o
54:49 - how about magenta squares let's do MS
54:54 - I'm not going to plot this figure for
54:56 - now just the one and there we have
54:59 - magenta squares kind of fun but very
55:03 - useful to make sure you're separating
55:04 - out the different things that you're
55:06 - plotting on the same graph and that's
55:08 - what we want to do I want to plot all of
55:10 - these curves on the same graph
55:13 - to do that we already discussed the hold
55:16 - on command let's do plot
55:19 - X versus Y2 and let's make it something
55:21 - different let's say we want these to be
55:24 - I don't know blue triangles I think
55:27 - that's going to be triangles we can do
55:29 - that
55:30 - and then those will be added on note
55:32 - that we didn't have to add any more X
55:34 - label and Y label and title stuff
55:35 - because we already added that to the
55:37 - figure and now we're just adding another
55:40 - line here another data set onto the
55:43 - figure
55:44 - very cool how this works but you can see
55:47 - every every Diamond here is simply a
55:50 - little bit higher than every Square
55:53 - you can click these points to get the
55:54 - actual values that you're calculating by
55:55 - the way and you'll see that we're just
55:57 - slightly above as you go along the curve
55:59 - here
56:01 - last thing we have to plot is going to
56:03 - be that
56:05 - final curve let's do Y3 and let's plot
56:09 - that as I don't know Green
56:12 - let's do plus signs for now
56:16 - we'll go ahead and do that and now we
56:19 - have our green plus signs on there too
56:21 - but if you just showed someone this
56:22 - graph they have no idea what equations
56:25 - you're using they don't know what these
56:27 - belong to or how they relate what you
56:29 - need to do is add a legend
56:32 - go ahead and do the legend command see
56:34 - this is so straightforward I love
56:35 - plotting a Matlab I hope you're seeing
56:37 - how easy this is and straightforward you
56:39 - just keep adding the things that you
56:41 - want and Matlab will keep adding those
56:42 - to your figure we'll do Legend and then
56:45 - we need to name the legend entries I'll
56:47 - do y1 Y2 and Y3 note these have to be
56:52 - given as characters or strings
56:55 - and then Matlab will add these to our
56:57 - graph and it goes in order okay so the
57:00 - first thing you plot will correlate to
57:02 - the first thing that you name
57:05 - we do this and Matlab will add an
57:07 - automatic legend in the top right you
57:10 - can click and drag this by the way and
57:13 - move it around so you can make it easier
57:14 - for your viewers you've also got a lot
57:16 - of tools built into this chart look on
57:19 - the right here you click this hand
57:21 - that's your panning hand
57:24 - and then if you go and click on the
57:26 - graph click and hold I can scooch this
57:28 - and now change the viewing area let's
57:31 - see how my axes are changing right now
57:33 - pretty cool after that I can click the
57:36 - home button to go back
57:39 - to the actual View
57:40 - you can zoom in
57:42 - click the plus magnifier and I want to
57:44 - zoom in to where all these Peaks are
57:46 - happening click and drag and now we've
57:48 - zoomed into all these Peaks pretty cool
57:50 - I can also zoom out by just clicking the
57:53 - zoom out and clicking around the screen
57:55 - here
57:57 - and you can always go back to the home
57:58 - at the end
58:00 - if you want to copy this figure and put
58:02 - it in another document you'll click the
58:04 - copy figure button right here and
58:07 - that'll enable you to open up a
58:08 - PowerPoint presentation a Word document
58:10 - or something like that you'll copy the
58:12 - figure you can also save this figure and
58:15 - do a couple other things here
58:17 - but mainly edit copy figure and paste it
58:21 - into something else
58:24 - if you want to change the axes ranges
58:28 - for example yeah we did X from negative
58:31 - 10 to 10 but maybe I just want to hone
58:33 - in on a specific part you're going to do
58:36 - x-lim and then pass
58:39 - a matrix here okay this Matrix is going
58:42 - to be what you want for your lower limit
58:43 - I'll say 0 to 2.
58:46 - so this Matrix is your actual limits
58:49 - okay
58:50 - you run this and then you'll see our
58:53 - x-axis is now just from zero to two
58:57 - if I wanted to change the y-axis you
58:59 - guessed it y Lim and I can do this from
59:02 - zero to a hundred
59:05 - run this and now you'll see that the y
59:07 - axis has changed only looking from zero
59:09 - to a hundred
59:10 - remember I can still use my pan tool to
59:13 - look around here and see the other
59:14 - curves
59:16 - I can use my magnifying glass to
59:20 - zoom out a little bit more
59:22 - see some more of that curve look around
59:26 - these tools are here for your disposal
59:29 - last thing if you want these to be
59:32 - filled in you have a couple attributes
59:34 - that you can change
59:35 - so these symbols let's say I want to
59:37 - fill this in you're going to do an
59:40 - attribute name and then the value of
59:42 - that attribute
59:43 - so here we want to do Marker
59:46 - face color
59:48 - and then I want that to be Magento
59:51 - and let's say I also want to change the
59:53 - marker size
59:55 - and I want that to be size 10.
59:59 - you're probably thinking where is he
60:01 - getting these things where are these
60:02 - attributes stored where can I learn more
60:04 - about these attributes
60:08 - use matlab's help
60:11 - scroll around read these things Google
60:14 - them you can always find more
60:16 - information on the stuff online and
60:18 - using the stuff that I've shown you in
60:20 - the command window
60:22 - I think it's got them here somewhere
60:24 - it's going to look for marker size and
60:27 - see if they use this at all on the page
60:29 - here we go we've got marker size 10
60:32 - we've got marker Edge color oh okay so
60:34 - here they change the edges to kind of a
60:36 - blue
60:37 - and I did a marker face color change the
60:40 - face values you can change the lined
60:42 - width so those lines that I was plotting
60:44 - earlier you can change those
60:46 - let's go back down here
60:49 - let's plot what we have
60:52 - here you can now see how our axes are
60:54 - still kind of off here but there we've
60:56 - got those squares that are now filled in
60:59 - a little bit easier to see these green
61:01 - things are kind of difficult right now
61:02 - but you get the notion you can play
61:04 - around with these things you call an
61:07 - attribute
61:08 - and then you call
61:09 - the value you want that attribute to be
61:14 - and then with your lines if you want to
61:16 - plot this as a line you can add a dash
61:19 - dash in front
61:20 - we do this and you'll see we get a
61:22 - dashed line with the squares on it if
61:25 - you want to get rid of the squares well
61:27 - then you don't specify the shape that
61:29 - you want to plot
61:30 - I'm going to get rid of our our limits
61:32 - here because these are kind of annoying
61:35 - if you don't specify the shape then
61:37 - you'll see we just have a dash dash line
61:39 - that's magenta representing our y1 curve
61:44 - you'll notice that we've put all of
61:46 - these three curves on one single plot
61:48 - and we did that with the hold on command
61:50 - Matlab also offers us the option to
61:53 - split these into three different plots
61:54 - or put them on side by side plots I'll
61:57 - show you what I mean we can create those
61:59 - different figures
62:00 - remember when we did the figure one the
62:02 - figure two
62:03 - let's put these all on separate figures
62:05 - so instead of hold on let's just do a
62:08 - new figure and a new figure and we don't
62:10 - need a legend anymore because we're
62:12 - putting these all on different figures
62:14 - in fact three figures
62:16 - let's run this and you'll see that we
62:18 - now have three figures each for a curve
62:22 - that's one way to split things up
62:24 - and then you'd have to add for every
62:26 - figure
62:27 - these
62:29 - you have to do the X label you have to
62:30 - do the Y label you have to do the title
62:32 - you need to add all that stuff to
62:33 - populate these graphs as well
62:36 - another option you can do and depending
62:39 - on your application this could be very
62:40 - useful is using something called
62:42 - subplots
62:44 - can do help subplot
62:46 - and you can learn more about the subplot
62:48 - approach but what subplots do is
62:51 - basically you're creating this like a
62:54 - matrix of graphs you know how we have a
62:56 - two by two Matrix and we have values in
63:00 - all those two by two spots we can do
63:02 - that with plots we can call subplot
63:07 - I can call two by two here and then
63:10 - specify the place I want my first plot
63:12 - let's just call it one for now but this
63:14 - will create two rows by two columns of
63:17 - plots get rid of my other figure
63:19 - commands for now let's just comment
63:21 - these out so we don't get confused
63:25 - and I'll show you what this looks like
63:27 - there okay see how this plot is in the
63:30 - top left of a two by two
63:33 - looks like a matrix of graphs almost
63:35 - right if this is the layout so you can
63:38 - put these plots it's in the same figure
63:40 - but it's in a different area of the
63:43 - actual plotting area
63:45 - it's kind of hard to describe this with
63:47 - words but I think you guys are seeing it
63:48 - from the visual let's say I want to add
63:50 - all the other curves then in these other
63:52 - spots
63:53 - I would do subplot same same subplot
63:57 - here so you keep the same dimensions
63:59 - then I'm going to add two because I want
64:01 - this one in the second position
64:04 - let's go plot and do this one we'll see
64:06 - this one come up now in the second
64:08 - position and it goes top left is one and
64:11 - then two then three then four
64:14 - let's get this third plot on there as
64:17 - well two two let's put this sorry this
64:20 - one should be in the second spot this
64:21 - one should be in the third spot
64:23 - uncomment it and we'll end up with this
64:26 - beautiful graph again we need to add all
64:29 - the the labels and the titles for every
64:32 - one of them if we want that let's go
64:34 - ahead and just copy those in right below
64:37 - those plotting commands
64:39 - those all be populated
64:41 - but this a two by two isn't the
64:43 - appropriate approach for these graphs
64:46 - right what would be better what would be
64:48 - a more visually appealing method for
64:50 - this what type of Matrix a 1x5 a 10 by
64:54 - 10
64:55 - hopefully you're thinking maybe a 1 by 3
64:57 - or a three by one we've got three graphs
64:58 - here
64:59 - let's go ahead and do that let's do one
65:01 - by three
65:03 - for all of these
65:08 - and this will give us one row of three
65:11 - charts then as we expand this out we get
65:15 - a nice side by side visualization of
65:17 - these three plots and that'll be a
65:19 - sufficient answer to that problem we
65:21 - started with about how these curves
65:23 - change with different parameters
65:29 - let's take a stab at another question
65:31 - here we see based upon the following
65:34 - equation what percent of Y values are
65:37 - greater than 0.8 for x equals 0 to 10 we
65:41 - have y is the sine of x
65:44 - this is one that if I'm being honest I
65:46 - don't even know how I'd solve this
65:47 - analytically you know with what we said
65:50 - our equation would be solve for values
65:53 - at x equals zero and x equals 10 and try
65:55 - to plug these in and then
65:58 - look at the the period of the sine wave
66:00 - so this would be a tough one to do
66:03 - with paper I honestly don't know how to
66:05 - do it I'm sure there's proofs and things
66:06 - like that but if we break this down we
66:09 - know that the sign of any any input
66:11 - there will be from negative one to one
66:15 - so we know that some values should be
66:16 - greater than 0.8 right we'll have
66:18 - something between 0.8 and 1 for I don't
66:21 - know how many X values but that'll
66:23 - happen so that's at least good so it's
66:24 - not zero
66:26 - but we'll need to essentially check
66:29 - some data points similar to when we
66:31 - plotted we developed x from 0 to 10 we
66:34 - calculated some y values and then we had
66:37 - those individual points that we plotted
66:39 - remember that we're essentially going to
66:41 - do that but now we need to check if
66:42 - those values are greater than 0.8
66:45 - and then we'll have to sum those up and
66:48 - see how many we have and divide that by
66:49 - the total amount that's going to be the
66:51 - approach for this problem
66:53 - we have a clean slate and Matlab and
66:55 - I've got our X going from 0 to 10 and
66:58 - our Y is just the sine of x nothing too
67:00 - eventful here I like to plot things
67:02 - again I'm very visual
67:04 - I'm going to go ahead and make a plot of
67:06 - this just so we see we've got an idea
67:08 - okay let's pop this as as points again
67:11 - we don't want to confuse ourselves
67:13 - what's going on just do dot that'll give
67:16 - us just points
67:17 - now if we look closely here's 0.8
67:20 - and it looks like it's going to be some
67:22 - portion I guess this is around 15 you
67:26 - can hold me to it we'll see how this
67:27 - problem goes I have not solved it yet
67:29 - but we can mean if we were really
67:31 - desperate we could just count these
67:33 - points and divide by the total number of
67:34 - points but I'm trying to teach you guys
67:37 - basics of logic in this problem
67:41 - we have our points and we're getting
67:43 - real fancy what we can do let's do hold
67:46 - on plot another thing let's plot just
67:49 - the X values let's do one at zero and
67:52 - ten
67:54 - and then let's do Y at 0.8 and 0.8 see
67:59 - what I'm doing here I'm not creating
68:00 - actual X and Y things to plug in here
68:02 - I'm just giving them the direct arrays
68:06 - so that'll plot point zero zero point
68:08 - eight and then 10 0.8 that'll give us a
68:12 - line let's make that a red line
68:15 - that's dashed
68:18 - all right let's do that really quick and
68:20 - now we can get a better visual for we're
68:22 - looking for all these dots above this
68:24 - red line kind of cool and we're going to
68:26 - add some more line I'm sorry we're going
68:29 - to add some more points here let's make
68:31 - this
68:32 - geez hundred thousand points mat level
68:34 - have no problem for this by the way it
68:36 - still takes like no time to run but we
68:38 - have a lot more points now you can't
68:40 - even see that it's not a line these are
68:41 - individual points that'll give us a more
68:43 - accurate answer than if we did I don't
68:46 - know just 10 points
68:48 - right this is a very inaccurate approach
68:50 - you can hardly even tell this is a sine
68:53 - wave so it's always better to run more
68:55 - points especially when we have the
68:57 - computation ability with modern
68:59 - computers
69:00 - sounds good we need to check if these
69:03 - values are greater than 0.8 this is the
69:06 - bases of logic logic gives true and
69:10 - false values out after you present a
69:13 - logic statement
69:14 - let's start by just saying x equals five
69:17 - no problem there we're just back to our
69:19 - Command window
69:20 - and let's do X is greater than two run
69:25 - this and we get the logical of one this
69:28 - is telling us yes your statement here
69:31 - was true remember cute computers started
69:35 - with zeros and ones and they still are
69:37 - zeros and ones by the way we've just
69:39 - progressed to languages like Matlab we
69:42 - don't have to type zero zero one zero
69:44 - one one zero zero but the bases of these
69:46 - things are still zeros and ones let's do
69:48 - X is less than two which would be the
69:51 - answer here if one is true
69:55 - zero will be false and you can I can
69:58 - even type true here and get the logical
70:01 - out of one and I can type false and get
70:04 - the logical out of 0.
70:08 - thus if we want to check multiple values
70:10 - let's define a as just a matrix of ones
70:16 - let's do a 1 by 10 matrix of one so a
70:19 - will just be a bunch of ones here
70:21 - what if we did a is greater than zero
70:24 - what will come out
70:26 - mat level performed this logic
70:28 - assessment on every element of a
70:32 - one is greater than zero one is greater
70:34 - than zero one is greater than zero and
70:36 - thus we're just going to get the Matrix
70:38 - out of all trues
70:40 - maybe not the best example let me do a
70:43 - is ones and then multiply this by five
70:46 - so we'll have a bunch of fives and now
70:48 - we can do our logical test a greater
70:51 - than zero and we get a logical array of
70:53 - ones out which is telling us true true
70:55 - true true true true true true right this
70:57 - is exactly how we get this information
70:59 - in zeros and ones and now we can use
71:02 - zeros and ones to easily count I can use
71:06 - the sum function having been discussed
71:08 - you probably know it existed sum of a
71:12 - will give us 50. this is just summing up
71:15 - these 10 values but if I save result to
71:18 - the logic statement a greater than zero
71:21 - my result is this true true true true
71:23 - true
71:24 - array and if I sum result I get 10. this
71:30 - confirms that 10 of the values in a are
71:34 - greater than zero
71:37 - there's tons more logic to do guys I'm
71:39 - going to run through really quick some
71:41 - of these other logical operators you
71:43 - could do eight greater than or equal to
71:46 - eight true
71:48 - you can do 19 plus 5 is less than
71:53 - a hundred
71:54 - true
71:55 - you can do 55
71:58 - does not equal to this is a fancy one
72:01 - here a tilde
72:03 - 20. and that gives you logical of one
72:06 - because 55 does not equal 20. by the way
72:09 - on your keyboard this should be like the
72:11 - very top left shift and hit that one the
72:14 - dash is what's next to it this little
72:15 - thing jig
72:17 - I call it a tilde maybe it's an e tilde
72:19 - I don't know
72:21 - other stuff you can do compound checks
72:24 - so maybe
72:25 - 10 is greater than 5.
72:29 - and
72:32 - 11 is greater than negative 100.
72:37 - so this will check is 10 greater than 5
72:39 - that's true
72:41 - this will check is 11 greater than
72:43 - negative 100 that's true and if both of
72:47 - these are true
72:48 - then it'll output true
72:51 - okay this is kind of getting to the
72:52 - whole field of logic you may or may not
72:54 - be familiar but these ands require both
72:57 - of these correct if I did an or
73:00 - actually let me make one of these false
73:03 - this is false right 11 is not less than
73:05 - 100 so we get false because both of
73:08 - these are not true we get false that's
73:11 - the power of the and
73:13 - if we look at or when we take this and
73:17 - do or which is just a vertical bar or
73:21 - 10 is greater than 5 that's true 11 less
73:24 - than negative 100 that's false but only
73:28 - one of these has to be true only 10
73:30 - greater than 5 or 11 less than negative
73:33 - 100. if I run that I'll get true
73:36 - okay that's all I want to cover on the
73:38 - logicals but let's go back to our
73:40 - problem
73:41 - we have to figure out what percentage of
73:44 - our values and Y are greater than 1.8
73:48 - how do we do that
73:49 - well if a value of 1 is greater than 0.8
73:53 - that'll give us a one out so maybe we
73:57 - can compare this entire Matrix of y's
74:00 - y greater than
74:03 - 0.8 let's see what our output is oh my
74:06 - goodness yeah we have a lot of values
74:08 - here we're going to get a ton of stuff a
74:11 - bunch of zeros here
74:13 - let's keep scrolling through and see if
74:15 - we find any ones there's so many values
74:17 - ah here we are
74:20 - found a bunch of ones that's good that
74:21 - means our test worked to some degree
74:23 - let's sum up those values let's save
74:25 - this as y I'm going to do y underscore
74:28 - greater
74:30 - that's going to hold the array output of
74:33 - this
74:34 - so now this will be saved to y greater
74:36 - I'm going to stop plotting this for now
74:39 - and y greater is the same size as our y
74:42 - value but you can see in our workspace
74:44 - it's got a check next to it because if
74:46 - we do whose
74:48 - take a look our y grader is a logical
74:51 - array
74:52 - it's not the typical double that we see
74:54 - before but we can treat this as
74:56 - something that we can sum up let's do
74:58 - the sum of y greater
75:01 - and that'll give us the total number of
75:04 - values that are greater than 0.8
75:09 - then we can divide this
75:11 - by the total number of values that we
75:15 - generated
75:17 - and that'll give us the percent of
75:19 - values that are greater than 0.8 so let
75:22 - me do
75:23 - final percent as a variable here
75:26 - some y we have those values and I'm just
75:29 - going to divide that by yeah if we could
75:31 - cheat here we could change this to be
75:33 - you know we could just copy and paste it
75:35 - there that's bad form because what if we
75:38 - change this to 100 values now we have to
75:41 - change this to 100 values instead let's
75:44 - do the length of Y
75:47 - new function Here length of Y will give
75:51 - us the length of Y how many elements are
75:54 - in y you can also call height of Y which
75:58 - would give us the number of rows and you
76:00 - can call width of Y
76:03 - and that'll give us
76:06 - the number
76:08 - of columns length will always give you
76:11 - the larger of height and width
76:14 - great we call length of Y we run this
76:18 - and we get final percent is 0.25 kind of
76:22 - cool and now
76:24 - let's actually ramp this back up make
76:27 - sure we have more and you can see that
76:29 - our number changes just slightly here it
76:31 - increases to be more accurate
76:33 - if we just do one value yeah we're gonna
76:36 - get to zero because the one value we
76:37 - sample didn't actually do anything if we
76:40 - do 10 samples we say it's about you know
76:42 - 20 of the values and if we increase this
76:45 - to a thousand we start honing in and the
76:48 - value doesn't get any any more accurate
76:50 - so we're just dealing with 0.2574 as the
76:52 - answer to our question
76:55 - if you want to technically make this a
76:56 - percent you can multiply this by 100 and
76:59 - then change this to be 25.74 percent
77:04 - this was a super quick intro to logic
77:07 - statements but very often these things
77:10 - are super useful for quick checks of
77:12 - things like we did in this problem
77:14 - one cool thing we can do is change this
77:17 - 0.8 value and we can now check if things
77:20 - are greater than 0.5 let's say
77:22 - but we're also going to want our plot to
77:24 - update let's create a new variable and
77:27 - call it
77:28 - y check that's the value we're checking
77:30 - against and I'll call it 0.5 for now
77:33 - and we can replace this
77:36 - with Y check and Y check
77:40 - and then this with Y check this is good
77:43 - programmer form
77:45 - you want all your parameters to start at
77:47 - the top
77:50 - then come in and do your actual actions
77:53 - and then have your final output
77:59 - I'm being sloppy here but work with me
78:01 - you get the idea we start out and we
78:04 - Define parameters these are the things
78:06 - that we change very easily and quickly
78:08 - and it commands the rest of the code
78:09 - imagine you've got hundreds of lines
78:12 - here you don't want to go back searching
78:14 - for wherever this value made sense or
78:16 - whatever you know you want these things
78:18 - to be consistent so you can update one
78:20 - value like why check to zero and then
78:24 - automatically your code follows suit and
78:27 - updates in those places
78:29 - now if we run this code look our line
78:32 - adjusts to zero and the final percent is
78:35 - updated as well
78:38 - if you're wondering why half the values
78:40 - right if it's a sine curve you should
78:42 - have should be greater than and then
78:43 - half should be less than it's because
78:45 - we're going over like one and a half
78:47 - periods of a sine curve here if we
78:49 - adjusted this to be right right here as
78:52 - where we cut things off
78:53 - looks like it's about
78:55 - let's see what is this point here
78:58 - um
79:01 - let's actually change this to prove what
79:02 - I'm saying here looks like it's around I
79:04 - don't know 6.3 so let's change this to
79:07 - 6.3
79:09 - what else do we have to change
79:13 - this value right here to 6.3
79:16 - so let's now create a variable called
79:18 - Max X
79:20 - and do Max X and then this equals 6.3
79:27 - 0 to Max X
79:30 - we run this
79:32 - and there we go we have got about it's
79:33 - about one period then one Crest one
79:35 - trough and our final percent is just
79:38 - about fifty percent there I was
79:40 - eyeballing it but that makes sense it's
79:42 - a good logic check to know that our code
79:44 - is running as we expect it to
79:47 - that's the final lesson to take away
79:49 - from this as well don't just blindly
79:51 - send stuff out into the ether and hope
79:53 - that Matlab is doing it correctly
79:55 - matlab's doing what you tell it to do
79:57 - your parents at some point probably told
79:59 - you that computers are stupid and they
80:01 - are because they listen to everything
80:03 - you do and if you're stupid then you're
80:05 - going to create a stupid output
80:07 - I'm not calling you stupid but garbage
80:09 - in is garbage out you can write a crappy
80:12 - program and it's not going to give you a
80:14 - good answer
80:15 - you need to write good programs that you
80:18 - are confident in and those will give you
80:20 - confident accurate answers
80:24 - let's take a stab at this problem
80:26 - part A is to generate 10 random numbers
80:29 - from one to five
80:31 - so randomly generate a three randomly
80:34 - generated two a four one five this would
80:37 - be from a uniform discrete distribution
80:41 - and then we want to count how many
80:43 - threes there are in Part B we're going
80:46 - to display the word wow
80:48 - if there is more than twenty percent of
80:50 - the numbers being three
80:53 - in part C we're going to do a and b
80:55 - again but using a for Loop we'll
80:58 - introduce the for Loop mentality here
81:00 - and then we're going to extend this
81:02 - instead of 10 random numbers to 10
81:05 - million random numbers and we're going
81:07 - to compare the speeds and the time it
81:09 - takes to compute using the two different
81:11 - methods
81:13 - we are back to a blank script in Matlab
81:15 - I'm now using Ubuntu as my operating
81:18 - system for those using Linux
81:19 - distributions out there Windows was the
81:21 - first half of this class nothing changes
81:24 - by the way it's basically the same exact
81:26 - approach
81:27 - the same syntax that Matlab is using
81:30 - you'll only notice some differences in
81:32 - the IDE but for learning purposes it's
81:34 - the exact same just offering potential
81:37 - Comfort to those of different operating
81:39 - systems
81:40 - first thing here as always we're going
81:43 - to clear everything in the command
81:45 - window and clear our variables
81:47 - we need to generate our random numbers
81:48 - and I'm going to call this Matrix a a
81:52 - will hold our random numbers
81:54 - if you want to find some other random
81:56 - commands feel free to look around the
81:58 - webs I'm going to use Randy
82:00 - we can find more about Randy by taping
82:03 - help Randy
82:06 - Randy is going to generate integers with
82:09 - a uniform discrete distribution that's
82:11 - exactly what we need
82:14 - let's go ahead and give the arguments
82:16 - five so if I just run this
82:18 - a is four if I keep running this script
82:21 - over and over we're going to see that
82:23 - that random number changes so this is
82:24 - generating just one random number from
82:27 - one to five
82:28 - I want 10 of them I want a 1 by 10
82:32 - matrix and here we're getting random
82:34 - numbers 10 of them from one to five
82:37 - great
82:40 - the first thing we need to do was to
82:43 - count how many threes there were
82:45 - if you recall we've done some logic
82:47 - checks
82:49 - if something's greater than 3 if
82:51 - something's Less Than 3 if something
82:53 - does not equal three well let's try just
82:55 - running something like this the fifth
82:58 - term equals three so we can check a
83:01 - single term if it equals three or not
83:03 - and you'll see in the output there we
83:05 - just gotta hit logical is one as our
83:07 - answer and the first second third fourth
83:11 - the fifth term is three we were
83:14 - basically just checking this single term
83:16 - here
83:18 - remember as we learned we can do this
83:20 - for whole arrays so we can just check in
83:22 - general if a is equal to 3 and we'll get
83:26 - a entire logical array out
83:28 - in this case we didn't get any threes so
83:30 - our logic array is just a bunch of zeros
83:32 - but as we do this in this run we had
83:36 - looks like four threes
83:38 - to count this all we do is add a
83:40 - summation
83:42 - around our logic statement there which
83:44 - will sum these up and give us the number
83:46 - of threes
83:48 - so here we have two two one two zero two
83:52 - occasionally we should get three all
83:55 - right here's three and we wanted to
83:57 - display wow if this happened
84:00 - this is where we can introduce the if
84:02 - statement
84:03 - the if statement will act if a condition
84:06 - is true
84:08 - for example
84:10 - if
84:11 - this value here which we discovered was
84:13 - just outputting three it outputs the
84:16 - number
84:17 - of Threes that we have in this a matrix
84:20 - if that is greater than or equal to
84:23 - three
84:25 - then we will output
84:27 - using the display command wow
84:32 - and then we have to end at the if
84:33 - statement
84:35 - you'll notice that every time we open an
84:36 - if you have to do an end to the f
84:42 - this display will simply output to the
84:44 - command window and we can begin to run
84:46 - this
84:52 - there we go there's our first time we
84:54 - have one two three
84:57 - four threes in this one and that time we
85:01 - were able to display wow to the command
85:04 - window
85:04 - when this statement right here that I
85:06 - have highlighted evaluates to true then
85:10 - we get an output to the command window
85:11 - because we asked for it right here and
85:14 - to be thorough for the problem it wants
85:16 - us to Output the number of threes
85:19 - so let's go ahead and do this as num
85:21 - threes equals the sum of a
85:25 - equals three
85:26 - and then we can just replace right here
85:29 - num3
85:34 - then with our outputs we'll get the
85:36 - random Matrix a the number of Threes
85:38 - that we had in The Matrix and when num3
85:42 - is greater than or equal to three we'll
85:44 - display wow
85:48 - run this a few more times so we get one
85:49 - more hit here
85:51 - there we are wow we had three sorry we
85:53 - had five threes in this run and we
85:55 - displayed wow
85:57 - that's the basics of the if statement
86:01 - from here our instructions were to go
86:03 - ahead and do a for loop with the same
86:06 - mentality
86:08 - I'm going to introduce you to a section
86:10 - notation
86:11 - to
86:13 - percent signs side by side introduce a
86:16 - new section you can see this blue
86:18 - highlighting here it might be white it
86:21 - might be black depending on your system
86:22 - setup we're creating a new section right
86:25 - now and we can run each of these
86:28 - sections differently
86:30 - this will be section one up top
86:34 - foreign
86:42 - we can be more specific on what we're
86:44 - calling them this is the if statement
86:47 - approach and down below in section two
86:49 - we have the for Loop approach it's these
86:51 - double percent signs that Define a new
86:54 - section the benefit of this is that in
86:57 - each section we can kind of run them
86:59 - independently and they act independently
87:02 - of these other scripts that it's
87:03 - involved with in the same dot m file
87:07 - so if I run this script down here and
87:08 - just say x equals 10 and run this
87:12 - everything up here is still the same
87:13 - nothing changed I only ran this section
87:16 - got my output of x equals 10 and a new
87:19 - variable was created
87:21 - if I do CLC and clear vars down here and
87:25 - run this
87:27 - it's as if I'm just running this own
87:29 - section here which is what I'm doing
87:31 - Matlab only runs each section
87:33 - independently
87:36 - control enter is the best way to run
87:39 - your independent sections you can also
87:42 - come up here to your run button you've
87:44 - also got run section on the left
87:47 - and that'll be your section depending on
87:50 - where you're running if you use the Run
87:52 - button in general it'll go through and
87:55 - it will run the entire script
87:58 - as you can see we end up with just x
88:01 - equals 10 at the end because of this CLC
88:03 - and clearvar statement
88:05 - run will always run the entire script
88:08 - run section just runs the individual
88:12 - section that your cursor was in
88:14 - that's because that's the active section
88:16 - and Matlab assumes you want to run that
88:18 - individual section
88:20 - let's start with a clean slate to
88:23 - discuss for loops
88:24 - for Loops are more advanced programming
88:27 - techniques and can be very challenging
88:28 - for beginners so please don't be put off
88:30 - I promise you you'll get it
88:32 - they're useful when you need to do the
88:34 - same thing over and over again
88:37 - you do a for Loop for a specified number
88:39 - of iterations and then it stops and the
88:42 - rest of the code will continue to run
88:45 - of course it's best demonstrated with an
88:48 - example
88:49 - let me go ahead and write a for Loop for
88:52 - I equals 1 through 10. let's just output
88:56 - I and then end the loop
88:59 - I'm going to run this
89:01 - and we're going to see in our output
89:02 - that I is just being outputted
89:06 - 1 to 10.
89:08 - so what's going on here
89:11 - well you know one to ten right you've
89:13 - seen this before if we just do that in
89:14 - our Command window
89:16 - it's going to do what just give us 10
89:18 - values one to ten no surprise here
89:21 - but we're using this variable I
89:24 - and this could be any variable it
89:26 - doesn't have to be I I is just what's
89:28 - typically used you could call it a
89:30 - counter if you want to and then change
89:32 - this to counter and counter is going to
89:35 - go from 1 to 10 you could call it
89:39 - your friend
89:41 - in case you don't have any friends
89:44 - now you're oh look at the end you have
89:45 - friends that are you have 10 friends see
89:47 - look at that programming's beautiful
89:49 - the fact is we're going to call this I
89:52 - and it's a placeholder value that you're
89:55 - using in each of your Loops but what's
89:57 - actually looping what's what is this
89:58 - Loop iteration that we talk about
90:01 - every time this runs
90:04 - the value of I will change
90:08 - I starts at 1
90:10 - I equal to one
90:13 - and then this code is executed if I have
90:16 - multiple lines like I plus 1 and display
90:19 - I and all these things in here all this
90:22 - stuff between the four and the end
90:24 - is run with I equal to 1.
90:29 - so if I run this
90:30 - and scroll up
90:32 - during that first iteration oh
90:35 - let me just clear some stuff here
90:38 - sorry about that so you'll see
90:41 - and clear vars
90:43 - so we just have a clean output
90:47 - here we get I equals one and then I
90:50 - added I plus 1
90:52 - and then I just simply displayed the
90:54 - letter i which happened right there
90:59 - see how I displayed the letter I and not
91:02 - the actual value which would be
91:06 - I like that
91:09 - just the letter i
91:11 - so every Loop
91:13 - every time we run this code the value of
91:17 - I will change it starts out as I equals
91:19 - one because we asked it to right here in
91:22 - the next Loop
91:23 - once it hits end it goes back up
91:27 - it goes back up and I becomes 2.
91:31 - right here I equals 2 because of this
91:34 - statement here
91:35 - then we add I plus 1 and we get the
91:39 - answer out to be three and then we
91:41 - display the letter I right here I
91:44 - that's all the commands so we go back up
91:46 - I now becomes three
91:49 - I equals three three plus one is four
91:51 - display the letter I and we do this over
91:54 - and over and over
91:56 - until we get to 10 which is why the last
91:59 - Loop is I equals 10 I plus 1 is 11 and
92:03 - display the letter i
92:05 - we get to set the number of Loops right
92:08 - we're telling Matlab we only want I to
92:11 - go from 1 to 10.
92:13 - if I want I to go from 1 to 10 skipping
92:15 - every other number there remember just
92:18 - like we did
92:19 - earlier this will go one three five
92:22 - seven nine if I run the code
92:29 - I is 1 then I is 3 I is 5.
92:34 - i7 I is 9 and we have all the other
92:36 - outputs that we asked for as well
92:39 - this is for Loops while Loops are
92:42 - different and we'll cover them later
92:44 - how does this relate to what we're
92:46 - trying to do though in our problem we're
92:48 - trying to count the number of Threes how
92:50 - is this even useful
92:52 - for Loops are very useful for going
92:55 - through numbers and a matrix
92:58 - we can use this I
93:00 - as an index
93:02 - so we could go through and if we called
93:04 - I or sorry a like we had up here
93:08 - we could call a of one
93:11 - we could call af5 and we can go through
93:14 - and then do checks on each of the
93:16 - individual components
93:18 - let's generate this random a matrix down
93:22 - here now
93:24 - and instead of going from one by you
93:27 - know 1 to 10 here let's just go from one
93:30 - to the length of a
93:33 - and the length of a will be what
93:35 - it will just be 10 because it's a 1 by
93:38 - 10 matrix and 10 is the longest
93:39 - dimension
93:41 - we'll go through from 1 to 10 and I'm
93:45 - going to check all these values inside
93:48 - a
93:49 - I
93:51 - will start with this let's run this what
93:53 - will happen
93:54 - I is 1 to start we run this and this is
93:58 - equivalent to running a parentheses 1
94:01 - which gives us the first term of a
94:04 - on the next loop I becomes 2
94:08 - this becomes a 2. which gives us the
94:11 - second term of a
94:13 - so it'll end up printing out
94:16 - line by line here what a is here a two
94:19 - one four four two one four four it's
94:23 - just going through each of those indices
94:27 - we want to do a logic check right we
94:29 - want to see if that value is going to be
94:33 - greater than or equal to 3.
94:35 - count the number of threes
94:38 - so we can do a
94:41 - is equal to 3 here
94:44 - and we'll get logicals out right we're
94:47 - getting all these logicals now zero zero
94:50 - zero zeros all the way down we get oh
94:52 - geez three threes in a row at the end
94:54 - there they are
94:57 - now we need to count these
95:00 - ideally we'd establish some sort of
95:02 - num3 variable again
95:04 - that will equal the previous value and
95:07 - we'll just add one to it so every every
95:09 - Loop that we get this to be true ah we
95:13 - should make this an if statement so we
95:14 - should do if
95:16 - AI is equal to 3. then we run this
95:21 - and we'll end that if statement
95:23 - this is called a nested if statement
95:25 - because it's inside of another loop
95:28 - nested if
95:31 - so if
95:33 - this term of a is equal to 3
95:37 - if that evaluates to true then we do
95:39 - this
95:40 - we say num3 is equal to the previous
95:43 - value of num3 and we add 1 to it we're
95:46 - counting these values of three as we go
95:48 - through the Matrix
95:50 - if we try to run this
95:53 - we have no threes in that one but here
95:55 - we have a three and we're going to get
95:58 - an error and that's because we didn't
96:01 - Define num3 before this Loop started so
96:04 - Matlab tried to grab num3 it doesn't
96:06 - exist
96:08 - we need to add num3 equals zero to start
96:11 - because our count of numbers of Threes
96:13 - is zero we have no no threes yet until
96:16 - we start going through the loop and we
96:18 - count every time that this is added
96:22 - let's run it
96:24 - there we are num3 equals one
96:27 - run it again we get two outputs here
96:29 - right because the first time we had a
96:31 - hit we outputted and the second time we
96:34 - had a hit we outputted and it added one
96:37 - great and then at the end we can add
96:39 - just the same logic statements
96:42 - right here we can display wow if num3 is
96:46 - greater than or equal to three
96:48 - run this a few times let's see if we get
96:50 - there we are with our wow if you don't
96:52 - want to have that output every time you
96:54 - can just simply add a semicolon there
96:56 - and we'll just get wow
97:00 - a bit more complicated and it is for
97:03 - this simple example
97:04 - but it's often good to learn on examples
97:07 - where you know the answers are true so
97:09 - that you can check your for loops with
97:11 - it
97:13 - the final part of this problem was to
97:16 - calculate it with 1 million variables
97:19 - as in we're going to generate one
97:21 - million random numbers and let's run
97:23 - these side by side now
97:25 - I like to make my sections when I'm
97:27 - initially learning how to do these
97:29 - things so it keeps it separate now that
97:31 - they're both running let's go ahead and
97:34 - bring this together
97:35 - going to get rid of the section notation
97:38 - I'm going to add a comment down here
97:39 - still so we know this is the for Loop
97:43 - area and just for Loop
97:46 - we only need to generate one
97:49 - Matrix of random values
97:52 - and then let's see what else we need to
97:54 - do num3 here we don't want to have the
97:58 - same variable that we're using for these
98:00 - different areas so let's go ahead and
98:02 - name this one num3 underscore
98:06 - if because it relates to the if
98:08 - statement stuff we're doing
98:12 - and then we can just leave these as
98:13 - number three down here
98:15 - and actually we should be good
98:16 - programmers and name it
98:18 - num34 right and you can see too Matlab
98:22 - offers depressed shift and enter to
98:24 - rename the other two instances I like
98:26 - that and now we have num34 and we have
98:29 - num3f in the other section
98:31 - we can run this all together and we
98:34 - should get outputs only when we have the
98:36 - Wows you'll see we get two Wows because
98:39 - both sections are displaying them here
98:42 - we can suppress this output as well if
98:44 - we want and we'll just get the random
98:46 - Matrix and our Wows out
98:49 - the last thing was to compare the times
98:51 - with a million I got distracted there so
98:53 - we want to make this a million so here's
98:55 - a hundred
98:57 - thousand million 10 million I believe is
98:59 - what it asked for 10 million points
99:01 - let's run this oh dear make sure that
99:05 - you no longer output a as you can see
99:08 - your computer is going to try to
99:10 - output a million values now in your
99:14 - uh command window make sure you suppress
99:16 - that
99:17 - and notice how greater than or equal to
99:20 - 3 no longer is applicable right we're
99:22 - always going to get that with a million
99:24 - 10 million values
99:26 - we want to make this 20 percent so 0.2
99:29 - times the number of values generated so
99:33 - times the length of a
99:37 - same down here greater than or equal to
99:39 - 0.2
99:42 - times the length of a
99:45 - good so that way this comparison
99:48 - statement here
99:50 - will change as we change our a value
99:54 - sorry change the length of a
99:57 - now if we run this oh I have an error
99:59 - this should be length fully spelled out
100:01 - and good we're able to run this now
100:04 - sometimes we output wow sometimes we
100:06 - don't makes absolute sense
100:09 - to time it to get the duration of time
100:12 - it takes to run a specific section of
100:14 - code what you need to do is use matlab's
100:17 - built-in function tick and talk
100:20 - tick is where you want to start timing
100:22 - something
100:23 - and talk is where you want to end it
100:26 - if we run this Matlab will automatically
100:28 - give us an output about the elapsed time
100:31 - between tick and talk
100:33 - to save these as variables let's call
100:36 - time if which is the time it took to run
100:39 - the if section
100:40 - you do that equal the talk we run that
100:43 - and you'll see we get time F here
100:47 - 0.0040 so these are in seconds by the
100:49 - way seconds
100:51 - let's do the same thing for the four
100:53 - section add tick and at the end add tuck
100:57 - we want to save that as time underscore
101:00 - 4 equals talk
101:02 - run this and we have two different times
101:05 - here
101:06 - the time to run the if statement
101:08 - what is this four thousandths yeah tens
101:12 - hundreds thousands point zero zero four
101:14 - seconds here a time to run the four
101:16 - statement section
101:18 - is .0450
101:22 - it seems pretty insignificant right
101:24 - that's both less than a second we have
101:26 - all the time in the world right now
101:27 - we're in no rush but this is actually a
101:29 - huge huge insight into some of the
101:32 - challenges that we see in Computing for
101:34 - Loops in general are going to be slower
101:36 - and right now does it matter in our
101:39 - script no we're not even waiting a
101:41 - second to run this it's hardly
101:44 - significant
101:45 - but imagine if you had a script that
101:46 - took four days to run
101:49 - write your if statement version of it
101:51 - took four days and you're for your for
101:53 - Loop statement version of it took 45
101:57 - days
101:58 - right that's that's a pretty big deal
102:01 - and even if it's the difference between
102:04 - four minutes and 40 minutes is a big
102:07 - difference right so when you're making
102:10 - your code and your scripts you want to
102:13 - consider the most optimized method and
102:15 - this is something that takes years of
102:17 - practice I just want to introduce you to
102:19 - it now so you're aware tick and talk are
102:21 - great ways to know what's fast and
102:23 - what's not
102:25 - the if statement method this is
102:27 - typically called vectorization because
102:30 - you're just dealing with vectors here
102:31 - I'm not going through each individual
102:34 - term I'm doing whole checks on entire
102:37 - vectors right these logic checks I'm
102:39 - performing rather than going through and
102:41 - looking at each individual term of that
102:45 - random Matrix
102:46 - so try to vectorize as much as you can
102:48 - but again
102:49 - write stuff that's simple and
102:51 - understandable when you start and then
102:53 - you can look towards this optimization
102:55 - later on
102:58 - we ran to a couple things here that I
102:59 - want to point out the first are going to
103:01 - be naming conventions you'll see I'm
103:03 - using some underscores I'm using some
103:05 - you know capital letters
103:07 - there's a couple good ways you want to
103:08 - create variables
103:10 - there's two main methods
103:12 - the first
103:14 - is going to be called a camel case and
103:17 - that's where you do this camel case
103:20 - under under what is this lowercase first
103:23 - letter and then when you have a compound
103:25 - word you capitalize the second part of
103:27 - it
103:28 - this could be then let's just total
103:30 - revenue
103:32 - equals seven
103:33 - you can also do total underscore Revenue
103:36 - equals eight
103:39 - or whatever
103:40 - these are the two main methods
103:42 - underscoring you just keep everything
103:43 - lowercase and that underscores between
103:45 - compound things and then total revenue
103:48 - is an example of camel case where you
103:50 - uppercase those other letters for the
103:53 - compound words
103:55 - you want your variable names to be as
103:56 - descriptive as possible a bad variable
103:59 - name for example would be four right
104:01 - four is a word that Matlab already
104:04 - assigns for doing for Loops so you can't
104:07 - say four equals nine
104:09 - it's going to be thrown off what you're
104:11 - trying to do here similarly you
104:13 - shouldn't name your variables after any
104:15 - functions like the sum
104:18 - should not equal
104:20 - 10 that's bad because what if you're
104:23 - trying to use the sum function you know
104:24 - the things that you want to keep clear
104:26 - so don't use variable names that are the
104:29 - same as function names you also can't
104:31 - use numbers to start your variable name
104:33 - so I can't do
104:35 - 2016 total revenue if I run that well I
104:40 - could try doing yeah see okay matlab's
104:43 - already telling me look you're missing
104:45 - multiplication it thinks I'm doing this
104:47 - multiplication here multiplying between
104:49 - something else if I still insisted no I
104:51 - want to save this as a variable
104:55 - 2016 whatever whatever year that might
104:57 - be right it's going to give me that
104:59 - error because it thinks I'm trying to do
105:01 - math so you can't start with
105:04 - numbers you have to start with letters
105:05 - here
105:07 - foreign
105:09 - the other thing I want to show you is
105:11 - how to do your file names we can create
105:14 - new files using the new script here
105:17 - you can also use the plus sign right
105:19 - next to your current and go between and
105:21 - you can have multiple scripts open here
105:22 - this is very useful when you're working
105:24 - on things
105:25 - at the same time you can use Ctrl s to
105:28 - save these really quickly and make sure
105:30 - you have the dot m file extension the
105:33 - dot m extension is needed to save Matlab
105:35 - files
105:36 - let's say I want to name this file 2016
105:39 - Revenue like before dot m if I click
105:42 - save matlab's going to yell at me I
105:45 - cannot start with a number
105:47 - Matlab file names must start with a
105:49 - letter and contain only letters numbers
105:51 - and underscores
105:54 - home stretch guys the last topic we're
105:57 - going to cover are while loops and
105:58 - custom functions while Loops are in the
106:01 - same family as for Loops they look
106:03 - similar the way we construct them but
106:05 - they have one key difference
106:08 - in a for Loop you decide how many times
106:10 - you want to run right for I equals 1 to
106:14 - 20 for I equals 5 to 50. you're going to
106:18 - display
106:19 - the variable I and then end you know how
106:22 - many times this is going to run right
106:24 - it's predictable you're telling it how
106:27 - many Loops to run here
106:29 - output is as expected just explain the I
106:32 - as we go through this case I'm
106:34 - displaying the variable I not just the
106:37 - letter I like we did previously
106:41 - here we just see a bunch of eyes
106:43 - in a while loop
106:46 - while
106:48 - we have to give it some condition here
106:50 - and then we do actions and then we end
106:54 - let's do well the condition and the
106:57 - condition will be something like Z is
107:00 - greater than five or the sum of values
107:02 - is greater than nine it'll be one of
107:04 - those conditional statements we've been
107:06 - doing
107:07 - such as
107:09 - 10 greater than
107:12 - five and whenever that condition is true
107:15 - the while loop will run
107:18 - once that condition is false the while
107:22 - loop stops
107:24 - so you can see that we no longer have
107:26 - direct control over how many Loops are
107:28 - run but instead we have control over the
107:31 - conditional statement
107:32 - Let's do an example Z equals 100
107:35 - while Z is greater than 75 we do stuff
107:41 - we display let's just say the square
107:44 - root of Z I don't know up to you
107:47 - and then
107:49 - we have to add a key statement which I
107:52 - think of as the reduction statement
107:54 - you have to force eventually this
107:58 - statement to become false
108:01 - otherwise you get in an infinite Loop
108:03 - scenario okay if I were to run this
108:05 - right now and I'll do it for you I may
108:07 - crash the computer but let's go ahead
108:09 - and run this it's just outputting tens
108:11 - you can't tell right now this thing is
108:13 - just going going going going I have to
108:16 - force quit with Ctrl C okay you might
108:19 - even hear my laptop it's revving up
108:20 - right now it was just infinitely
108:22 - outputting tens I can show you my like
108:24 - I'm scrolling right now look at it's
108:26 - just 10 10 I mean infinitely this would
108:28 - have gone on forever
108:30 - force quit with Ctrl C if you ever hit
108:32 - this issue
108:34 - why did that happen well Z was a hundred
108:36 - right so the square root of 100 was 10
108:39 - which just kept outputting and then it
108:41 - went back up to the top evaluated as Z
108:43 - greater than 75 well yeah it absolutely
108:46 - is oh you don't need that semicolon by
108:48 - the way every time is z greater than 75
108:50 - sure Z is still a hundred is 100 greater
108:53 - than 75 yes do this yes do this yes do
108:57 - this over and over and over until you've
109:00 - got a ton of outputs that you just have
109:02 - to control C to stop this
109:04 - so
109:05 - we need a statement in here that's going
109:07 - to reduce the value of Z
109:10 - to make this statement false
109:13 - simple one
109:14 - Z equals z minus 1.
109:20 - we run this
109:21 - it stops we have a set number of values
109:24 - and we're just giving the square root of
109:25 - Z
109:27 - and this we decrease the value so now Z
109:30 - becomes 99 99 is greater than 75.
109:34 - 98 is greater than 75 all the way you
109:37 - can see we get to 81 at some point here
109:40 - because the square root of 81 is 9 and
109:42 - then eventually we hit a stopping point
109:45 - when Z is equal to
109:47 - 76 this will be true one last time we'll
109:52 - decrease
109:53 - 76 to 75 and then 75 is not greater than
109:59 - 75 that will be false and it ends
110:04 - and then anything you want here
110:06 - I'm gonna add Loop ended it's a little
110:08 - reminder for us we run this and we get
110:11 - our little display afterwards because
110:12 - the script keeps on running afterwards
110:17 - the last thing I wanted to show you guys
110:19 - was how to make this into a separate
110:21 - function
110:22 - you're going to end up with a very
110:24 - complicated things very complicated
110:26 - Expressions very complicated
110:27 - mathematical formulas you know even all
110:29 - these the nested Loops the nested if
110:31 - statements it becomes easier at a
110:34 - certain point to create a separate.m
110:36 - file to handle all those things and then
110:39 - you can just run those that m-files from
110:42 - your main dot m file
110:45 - let's create a new script and we're
110:47 - going to use it as a function
110:50 - Matlab has a great built-in feature for
110:52 - this click the drop down by new and
110:55 - select function
110:57 - it gives you all the basic structure
110:59 - that you need
111:01 - to create a function you're going to
111:03 - start with function and then Define what
111:05 - output arguments you want
111:07 - this should be the name of the function
111:08 - here
111:10 - and then you're going to add input
111:11 - arguments
111:12 - all this inside will be using your input
111:15 - arguments to create your output
111:17 - arguments
111:19 - in our case we're just going to be
111:21 - running our while loop
111:23 - let's take this stuff right here
111:25 - and let's replace it in here
111:31 - while Z is greater than 75 display
111:33 - square root of Z yes we're going to get
111:36 - rid of this line we don't need to
111:37 - display these things
111:38 - but we just want to reduce it down
111:41 - so let's let's plan for this to be more
111:43 - General case so let's have our output be
111:46 - the final Z value Z final
111:51 - and we'll have our input just be Z
111:54 - let's call this function
111:56 - reduce Z with an underscore in there and
111:59 - we need to save it as that same name
112:01 - reduce underscore Z dot m
112:05 - this is where the current folder matters
112:07 - we need this file this dot m file to be
112:12 - in the same folder as our main script
112:14 - which I have Basics here
112:17 - that way these two files can interact
112:20 - with each other because they're in the
112:22 - same current folder
112:25 - now for reduce Z what we'll do is we
112:28 - receive a z value
112:29 - and let's say that's Z initial
112:35 - let's set Z equal to Z initial
112:39 - no output needed and then while Z is
112:42 - greater than
112:44 - Z
112:45 - initial
112:48 - we're going to reduce the value of Z
112:52 - and this will become
112:54 - Z final
112:57 - so actually
112:58 - no let's keep this as Z for now
113:02 - and then at the end of everything
113:06 - we'll save Z
113:09 - to Z final
113:11 - equals z
113:14 - okay so we bring in z
113:17 - let's think how this is going to go
113:18 - through so if we give an input of 75
113:20 - like we did before
113:22 - as our argument to this function reduce
113:24 - Z
113:26 - 75
113:28 - is saved to Z
113:30 - while 75 is greater than Z initial this
113:33 - doesn't work let's do this divided by 2.
113:37 - so while 75 is greater than 75 over 2
113:40 - then we reduce Z every Loop
113:43 - until it gets to this point which will
113:45 - happen because we're reducing it
113:46 - eventually we'll get down to you know Z
113:48 - over 2 and then we'll be final this is a
113:50 - little bit complicated guys I know I'm
113:52 - just trying to show you this function
113:53 - notation and we'll output Z here and
113:57 - this is the final is what we have is our
113:59 - output to our function
114:01 - let's save this we'll go back to basics
114:04 - don't need this anymore all we need to
114:07 - do is run our function
114:09 - which we called reduce Z
114:12 - let's give it the argument of Z and
114:15 - we'll see what happens here
114:17 - we run this and we get our answer out to
114:20 - be 50.
114:22 - don't need this anymore either
114:23 - does that make sense to us we're giving
114:25 - a value of a hundred this is the one
114:28 - argument that we're giving to our
114:30 - function so the value of 100 is passed
114:33 - to the function reduce Z
114:35 - we go into reduce Z
114:37 - here Z initial is set to 100.
114:42 - 100 is saved to Z
114:46 - is 100 here
114:48 - while 100 is greater than 100 over 2. so
114:53 - while Z is greater than 50
114:56 - we take Z which is 100 to start and we
115:00 - decrease it by one
115:01 - so it goes down to 99. now we're 99
115:04 - greater than 50.
115:08 - we Joe would go again we reduce so now
115:10 - it's 98 97 96 95 all the way until
115:14 - Z is going to be what 51 Z is 51 greater
115:19 - than this
115:22 - oh no 51 will be true so 51 greater than
115:24 - 50 yes Z is reduced down to 50.
115:29 - 50 greater than this no
115:31 - false we end the while loop and then we
115:34 - save 50 which is z to Z final
115:39 - Z final is then our final output for the
115:43 - function
115:45 - and that gives us this answer of 50.
115:48 - I know
115:50 - it's crazy
115:51 - it is very hard to get your mind around
115:53 - this if you're struggling do not worry I
115:57 - have entirely separate YouTube videos on
115:59 - these topics these last ones these for
116:02 - Loops while loops and functions they are
116:05 - challenging
116:06 - don't back down think of it as a way
116:08 - that you need to push yourself to
116:10 - understand these Advanced parts of the
116:12 - programming language
116:14 - question for you
116:15 - what if I put
116:17 - 75 here
116:19 - what would be the final answer
116:22 - well think eventually we're going down
116:24 - to the Z over two that's the initial
116:27 - over two so it'll be 75 over 2.
116:31 - which would be 37.5
116:34 - when Z is 38
116:36 - this will still be true because 38 is
116:38 - greater than will reduce down to 37 and
116:41 - that should be the last Loop so let me
116:42 - run this and 37 is inevitably our answer
116:47 - holy cow guys
116:49 - I think we did it we covered so many
116:52 - topics in this video I'm amazed if you
116:55 - stayed to the end kudos to you this is
116:58 - one of the best beginner crash courses
116:59 - that I could come up with for you guys
117:00 - more videos on the channel This was
117:03 - meant to give you foundations
117:05 - now from here I encourage you to dive
117:07 - into specific topics that you need to do
117:09 - for whatever project or whatever you're
117:11 - just curious about doing a Matlab
117:13 - thank you for watching seriously this
117:16 - channel has been growing because of
117:18 - people like you who are committed to
117:20 - learning programming and I'm committed
117:22 - to helping you learn the program
117:24 - thank you so much for watching please
117:26 - like this video please subscribe engage
117:29 - on the channel I answer any single
117:31 - question that you guys want to ask I'm
117:33 - happy to clarify I'm happy to make more
117:36 - videos just let me know I am here to
117:39 - help you excel in your programming
117:41 - experience
117:43 - cheers and have a great day

Cleaned transcript:

learn Matlab from Phil Parisi Phil is a PhD engineering student and his teaching style is clear and to the point Matlab is a programming language and software suite used for data analysis scientific Computing and visualizations and it's widely used in Academia and Industry Hey There YouTube we are going Zero to Hero today in Matlab thanks for joining me we're going to Jump Right In right in front of us is the first screen you'll see when you open up Matlab for the first time this is called the Matlab IDE integrated developing environment this is the place that we do all of our programming in Matlab center of the screen we have the command window this essentially serves as a powerful calculator let's type some stuff in here let's just do seven plus eight or nine that gives us 16. we can do 10 minus five that gives us five how about the square root of 225 15. what about square root of 15 times 9. 34.8569 right these are just quick in and out commands to give us information now if you look in the right we've already got something popping up in our workspace we've got something called ants and if you see after every time we run a command we're getting this output ants which is short for answer and it equals the value of the previous statement that we entered in ants is our first variable that we've created if I just ask Matlab for the value of ants it'll spit it right back out to me as the most recent answer that was spat out if I were to do this again and say 8 plus 2 answer is now 10 you can see the workspace variable has been updated to 10 and I can ask for ants and it's 10. I can also do ants plus nine and we'll get 19. Matlab is holding this ants variable in memory we're getting kind of clogged up here to clear the command window CLC and hit enter and that'll remove all that crap in the command window all of our previous statements are now gone but they were executed which is why ants still holds its value right here and still equals 19 even though we just cleared away the lettering with CLC if you want to actually clear the workspace variables you'll need to use the command clear vars this is one word you hit that boom now there's nothing in our workspace and if I ask for ants I get nothing out because ants doesn't exist right now let's try creating some more variables with actual nice names that we can use such as x equals 10 and Y equals 20. here in our workspace we now have two variables X and Y with values 10 and 20 and we can use those variables to do further mathematics here we've used X Plus y equals 30 and 30 is saved to our ants variable of course we can ask Matlab for just the x value and just the Y value that we created CLC to free up our Command window there's another cool way to see our workspace variables and that's by typing whose just type that and we'll see the names of our variables that exist here notably this column the class column will describe what type of variable these are in many programming languages handling the types of variables are very important luckily in Matlab 95 percent of the time we're only going to be dealing with doubles double is just the way that Matlab holds the data that belongs to x y and all the other variables that we create this is a nice Bridge into other types of variables such as strings let's call W equals the word new no problem this isn't a number right this is the word new and if we type whose we'll see that Matlab has now created w as a Char this is short for character characters in Matlab are defined when we use single apostrophes around a string of letters or numbers if I do two apostrophes such as Z equals York with double apostrophes on either side and I do whose now we're seeing w is still a char and Z is now a string these three chars doubles and strings will cover almost anything you need to do for basic Matlab and we're not going to go any further beyond the data type discussion for now that's clear on workspace and start fresh one thing you may have noticed when we Define these variables every time we hit enter Matlab provides an output here if we don't want that output we can simply add a semicolon at the end of the sentence like this these semicolons are called suppression they prevent Matlab from outputting a line of code so Matlab still runs that everything we do in this before the semicolon Matlab still acts on for example if we Define x equals X plus seven we run this this line is still run but we just don't see an output by the way you'll notice that our X variable is now 26. why is that the programming language moves sequentially in this line X was defined as 19. when we run this line X right here is replaced with 19 adds 7 to 19 and you get 26 on the right hand side of this equation that value is stored to X if we ask for X Out X is now 26. another piece of useful Punctuation is the comma let's say you want to add multiple things on one line I'm clearing out everything right now let's say you want to do Define U is 25 and then me is 10. if I run this I can now act two things on one line two commands for one line they both output here if you didn't want them to Output what would you do you'd add semicolons at the ends of these lines in fact at the end of each expression so after 25 and after 10. briefly hit the up arrow in your keyboard and you're going to see that you can access all the old commands that you were using I'll bring this one back at a semicolon here and a semicolon here and we'll see no output but these two lines are both run we've seen a few popular operators I can do U plus me I can do U minus me I can do U divided by me U times me you to the power of me use that carrot on your keyboard to do the power we've seen square root as well square root of U is five one thing to note you can do compound Expressions if I do the square root of 8 times 9 . that's going to give me the correct answer the same as the square root if I defined X as eight times nine and then did square root of x these two expressions are essentially the same thing X is just holding 8 times 9 and we're plugging it in here whereas here we're just putting 8 times 9 in directly but it's the same thing mathematically and you can see we get the same answer out in both cases again you can always check to see what variables exist if you use the whose command and they're all displayed here that covers how our workspace works on the right if you want to view these variables in further detail you can always double click on them this would be useful when we have matrices and things like that that are not just a single number in a corner other aspects of the Matlab IDE on the left we have the current folder this should be the place that you're actively working in and saving your Matlab scripts to this will be more important later the toolbar is up top this is where you can create new scripts and files open things import data you know it's kind of just your overseen software component of the actual Matlab syntax you might be envious of the dark mode I've got going on if you want to also change that go to your preferences go to colors and this screen should show up uncheck the use System colors box set your background color to Black and your text to White you can also copy all the remaining colors that I've got set up here it's up to you though what your color preference is I like high contrast this is also a great place if you're looking to modify other things in your editor and debugger you want to change the font sizes things like that you can all do it from this preferences tab you've seen so far that Matlab can act as essentially a calculator on steroids but it's not very useful if we're just typing line by line and having to use the outputs that we create let's create a new script to do this you can click the new script button in the very top left or click new and then script these are very powerful and you're going to do the majority of your programming in these Scripts the power of them is that you can type multiple lines of code without anything happening to the Matlab command window you can see I typed clearvars but yet the workspace hasn't been cleared and that's just because I've typed these but I have not run these commands yet to do an actual running of your script you have to click the Run button save and run we need to save this file I'll just call it basics we run it and now look our Command window is giving us the output of x equals 10 which was the result of this line also it cleared all the previous stuff we had in our Command window and we cleared all the variables so now we only had X after we created it this is the real way we're going to code in this beginner course and the way that you should structure all your programs from here on out you can do things like x equals X plus seven add in W equals X plus y suppress those run this and we'll get no output because we suppressed every single line of code but w x and y all exist in the workspace because we ran these lines and they were all assigned during this process if we wanted to see a variable we can check in the command window or when you run this script you can just ask for that variable to be outputted and there we run it again and you get W equals 27. I'm running this the cheating way I love doing it control and enter is the quick way to run your Matlab Scripts you can always use this run button at the top as well let's clear out our script and our workspace using CLC and clearvars and start fresh here for a new topic vectors and matrices let's add a heading for our script and you can do that using the percent sign yes it's percent I know it's weird but it's Matlab standard for adding comments comments are very useful you can add them all over your scripts so that you know what values you're defining and why very often we know why we're doing stuff in the moment but many many days later even minutes later you're going to come back and wonder why you needed to do something you can add comments on whole new lines like this you can also add comments in line like this new line and inline comments and then when you run your script using control and enter you'll see that the lines these comments aren't even included Matlab still goes through and creates the variables as such this section will call matrices and vectors you're in The Matrix laboratory I hope you know some linear algebra and some basic Matrix operations if not stay tuned we're going to learn them first things first let's always start off our script by clearing our Command window and doing a clear vars operation that ensures that every time we run this script we're going to have a fresh output anything that was previously outputted will be cleaned out and we're always going to have any new outputs that we call Fresh in the command window and then clearvars will always wipe away the stuff from our last script and allow us to Define new variables that'll be available in the workspace at the end of the script this is good form for our first vector and vectors and arrays are going to be used interchangeably let's say x equals 1 through 10. I typed a colon when I said the word through if we run this with control enter here x is defined as 1 2 3 all the way to ten it's not just a single value anymore X is a vector or an array even in the workspace we see here it's defined as such holding these 10 values let's type who's in the command window and we'll see that X is still stored as a double but it's a 1 by 10 in size this is because Matlab uses the standard and linear algebra to do one row by 10 columns this is a horizontal array it's one row of values 10 columns across if you want to switch this I could do X transpose transpose is just a single apostrophe I run this and now we see the answer out is a vertical array X start out as horizontal I took the transpose and ants is now a vertical array we take a look in our Command window ants is a ten by one it's ten rows by one column X is one row by ten columns very important to keep this straight As you know we can also Define arrays and vectors using the linspace function x equals the Lin space and the arguments here are going to be the value you want to start with and then the value you want to end with if we run this oh my gosh we have a ton of stuff in our output it's because linspace will automatically generate 100 values between 20 and 50. and that's we're seeing here and these are evenly spaced values if I did from 0 to 100 we're seeing 100 at the end and we start at zero you can add one more argument to Lin space and that will be the number of terms you want the default is a hundred evenly spaced terms but if I ask for 101 for example now I get even numbers here because a hundred and zero are included in these 101 values I can also do 20 and now we're only a one row by Twenty values a 1 by 20 double as our workspace tells us linspace is the first function we've encountered and will cover functions extensively throughout this training when you have a function this is a builtin tool that Matlab has for us to use freely you're going to always open up functions with parentheses and functions take arguments these are the values that are inputted to tell the function what to do here our first argument was Zero our second argument was a hundred and our third argument was 20. each argument is separated by a comma note that Matlab doesn't care if you have spaces or things in between as long as you have commas separating your arguments no difference in the output another way to define arrays and vectors is simply to do it manually to do this you start by opening a bracket and then you type the values you want let's say 12 50 negative 8 negative 100. close the brackets and run this there's y 1250 negative 800 just as we specified here the only separator I'm using is a space you can add different spaces in here run it and Matlab won't care at all it'll give you the same output I'm going to suppress these outputs for now as well the important thing is that there is at least one space between you can also separate these with commas or no comma run this still the same output nothing's changed here so commas or spaces to separate values in an array or vector let's call our first Matrix a and we'll Define it as a two by two we'll call the first row one and three separated by just a space and to do a new row you have to use a semicolon and then 2 and negative 10 will be our third and fourth values if I run this here's a 1 3 2 and negative 10 ordered as we discussed because I have this semicolon here I could also add optionally commas between those values and we'll get the same output if I want to add another row no problem 88 and 99 we run that and we added a third row here Matlab will follow every single rule of linear algebra and it assumes you want to do linear algebra throughout your mathematics for example if I want to add a value to a it'll follow the linear algebra rule which is add that scalar value to each of the positions in The Matrix 99 plus 2 is 101. same thing with multiplication a times eight every single value will be multiplied by eight what happens if I do a times a if we run this and we've gotten our first error in Matlab just grow to love these errors but they're trying to help you it's going to be frustrating when you get them read these errors extensively you'll see here incorrect dimensions for matrix multiplication ah okay a is a three row by two column Matrix linear algebra rules state that we cannot multiply a three by two by a three by two that inner Dimension has to match what we could do is take the transpose of a and do this a is a three by two but a transpose is a two by three right here two rows by three columns and thus when we do this multiplication it works out it follows the rules of linear algebra but what if you don't want to follow those rules let's say you've got x equals Lin space 0 to 100 you've got your 100 evenly spaced values and you want to take I don't know the square of X so you want to do x squared well matlab's going to throw you for an error once again because this is a one by a hundred Matrix and you can't multiply one by a hundred by a one by a hundred but what if you just wanted the square of every value you wanted zero squared 1 squared 2 squared to do elementwise operations that's the difference here you can do Matrix operations or you can do element wise operations element wise operations need a dot in front of them it's going to be weird to get used to I know but the dot is exactly what you need if I run this it goes through X and takes every value squared it's not the best example let me just add 101 here so we get even values and now you'll recognize this is 0 squared 1 squared 2 squared 3 squared 4 squared right all the way down we should get a hundred squared to get 10 000. remember arrays in vectors are simply along one dimension like x equals 22 to 100. along one dimension matrices are along two dimensions there's a few more handy ways to Define common types of matrices if you want to make a matrix of all zeros you'll do ones and then add an argument here this creates a three by three Matrix of ones very simple if you wanted to change those Dimensions you could do something like this and it gives you purely a three row by one column array of ones if I wanted to do B as all zeros I'd do zeros let's give it the argument of ten it gives me a 10 by 10 matrix here you can always check that in your workspace too similarly if I want just to do a two by eight Matrix of zeros here's two rows by eight and the last one that we'll cover briefly is going to be the identity Matrix you'll use I I just like the eyeball in your face I of three and we'll get an identity Matrix which is just ones on the diagonal again can I add B and C together of course not the matrix dimensions must agree and Matlab will continually remind you of that I can add C and C together that's not a problem same dimensions and I'll get twos along the diagonal because of the summation a cool trick here as well when I had X was one to ten there's actually one more argument that we can add here and it's going to be this value between the colons if I do this we get what we've been expecting one to ten but think of this as start at one Jump by one value end at 10. if I wanted to jump every two values run this and I get one plus two is three plus two is five plus two is seven plus two is nine if I added another two I'd be beyond our upper limit and thus it stops at 9 and doesn't go to ten kind of Handy if you ever need to jump values quickly let's clear everything out and start fresh here an important part of working with our matrices will be grabbing certain values out of those matrices to use them for further calculations let's start for another example here basic a 5 3 4.2 it's going to be a that's a one row let's do eight nine and zero as our second row easy good start let's say I want to grab out one of those values how about this nine how would I do that we can use something called the index the index goes through a matrix or array or any variable and pulls out elements of those variables here a is a combination of all these individual elements including nine to use the index you're going to have to use parentheses then within those parentheses you specify the location of the element that you want here it's nine I'm going to call a second row second column and our output is 9. if I want to access that zero that's in the second row third column let's say I want to add that 0 to that 9 just like this we're specifying this value second row third column which is zero and we're adding it to the second row second column value of nine if you just have an array say a was only this it's just a simple 1 by 3 Matrix to grab a value out of that you can just specify a single number so A1 would be 5 A2 would be 3 and A3 would be 4.2 this is going to be very frustrating for programmers of other languages because Matlab uses something called one indexing that means that in the memory Matlab stores the first value of something as the first index this is because of the nature of doing Matrix algebra linear algebra needs this to be in the first spot there is no such thing as a of zero array indices must be positive integers or logical values final note on this you can also use end as an index that'll grab you the last value in a matrix this is convenient for let's say you've got a equals Lin space you know I don't know 220 to 900 and then you've got b equals one by every five to 98 980 like this and you want to find the last value of these well I could tell you right now Lin space has a hundred values in it but for B I have no idea how many values are in this so I can just call B end and I'll get the last value out of B from there you can work your way backwards if you want you can call B end minus 10. it'll go back 10 spots okay this isn't the end quantity minus 10 this is go to the last index and then pull back 10 spots so if we open up B here go to the end of B 976 and go 1 2 3 4 5 6 7 8 9 10 9 26. that's what we got right here very different from B and end parentheses here which grabs 976 and then subtract 10 which is simply 976 minus 10 which gives us 966. important differentiation there we will use these indices further when we get into Loops the last thing I want to note on it is that we can use these indices to change values of our matrices I've just got another very basic array set up here and I want to do this one value I want to change it to a hundred let's say it was a typo or something I can do a 1 comma 1. and then set that value equal to a hundred I'm going to Output a afterwards and we'll see that I've now corrected this value the first row and First Column value to 100. and we see it here in our Command window you can also pull out entire rows and entire columns I've only shown you how to do this with single stuff right now like asking for the first row second value of two let's say I want the entire second row here to be outputted you're going to use that colon again what you'll do is you need to determine what you want so here we want the entire second row so that means that we want the second row and instead of specifying a single value I'll just say give me them all and the colon will give you them all boom you can also think of this as giving you the first value through the third value this is the second row First Column second row second column second row third column and one to three just gives us the one two and three if you want just the second row first and second values the five and the four there you go and if you ever want everything you could just do one to end in case you didn't know what the end of this Matrix actually was short and sweet we're moving along well let's keep going let's take a look at a real world problem that you're likely going to be solving what is the maximum value of the following equation on the Range 0 to 5 we have the expression for y here what is the minimum of that function what is the x value where the maximum occurs and then Part D is what is y if we input 20.7 for x this is exactly the type of problem you guys are going to see in the real world let's go through step by step but you need to unthink how you typically solve these problems if you just had pen and paper you take the derivative of y you'd set it equal to zero and then you'd find what points are the maximum and minimum right typical very standard approach however we have a computer we have processing power we can calculate a bunch of different things so rather than solving this for One X value what we're actually going to do is generate X values from 0 to 5 and then calculate a bunch of Y values that correlate to those X values and then we'll just pick out the largest y value and pick up the minimum of the Y values and then part C and D we'll have to learn some more stuff as we go but no problem your brain is putting right now because you are learning so much let's get back into Matlab here we are with a fresh slate as I mentioned let's first generate a bunch of values between 0 and 5. I'm using linspace so that'll give us a hundred then at each of those X values let's calculate a y value and let's start easy here because it's very easy to get lost when you're writing these equations we want to do x minus 3 for the equation and let's just run this for now let's make sure that as we progress and add terms we're not getting errors this works we've now calculated what x minus 3 is and this is element wise stuff X is technically a vector it's a 1 by 100 vector and so is y right now 1 by 100 because every value in X is just being subtracted by 3 right now let's take the opposite of that for the equation and now we need to multiply this to the second power squared if we run this we're going to get an error why because this quantity here is an array it's a 1 by 100 array and it's being multiplied by itself right we're squaring it math in Matlab is Matrix algebra thus it's trying to do a one by a hundred times a one by a hundred matrix multiplication and that's what we're getting this error think how do we do element wise operations we just want each of these X's the first value of x to be squared the second value of x to be squared technically first value minus three to be squared second value minus three to be squared that's an elementwise operation add a DOT it even tells you right here to perform element wise Matrix Powers use Dot and then the carrot that's exactly what we want let's add the dot in there good and then finally we need to add 10 at the end to ensure that order of operations are happening and by all means Matlab is extremely smart and will do these appropriately it's more so for us as the programmers I like to add in extra parentheses do not do not do not add any other type of brackets or braces no no no no brackets are used when you define matrices right a equals zero and one that's only only only for matrices and arrays all right parentheses are dedicated for orders of operations and for indexing so use multiple multiple you can do double things here whatever you want do not use brackets do not use braces don't use these things no no no no no those are for other things in Matlab just the parentheses here and then I'm adding 10 afterwards great so I've got X on the Range 0 to 5 y taking those X values subtracting 3 from each of them squaring that quantity taking the opposite of it and then adding 10 to it fantastic but I'm a visual person I love to see things and that's how I learn and understand if you are too then this just isn't doing it for you yes you have all these values and we can find the maximum one but let's first plot this we're going to use matlab's plot command and just give it the x value and the Y values that you want to plot against each other hit enter and we've made our first graph in Matlab and it's beautiful xaxis are our X values from zero to five Y axis we see goes from about 1 to 10 and we have to find our Max y value looks like it's going to be around three right now but this just gives us a good idea of what we're working with we're going to cover plotting more advanced later in this but for now basic plot what's actually going on though is that this isn't a contiguous line these are just all the 100 data points that we've plotted really quickly just change this and add this argument you're adding a character star put that in there and you'll see on this graph all these little stars are the data points that we calculated that's what I'm talking about we've got a computer here that can do mad computation let it do its thing also now that we've got plots being made I've added this close all command that will close all those figures that we have up every time we run a new script and when we plot it'll be on a brand new figure so we get the new plot showing every single time but we still have to answer the question what is the maximum y value and this is where matlab's builtin functions come into play Matlab literally has a function called Max if we give y as the argument we'll get the maximum y value out right here you can see it's just about 10 . the reason why it's not 10 is because we're not checking every single infinite value that exists between 0 and 5. we're only checking a hundred of them because that's what linspace gives us is this answer correct just about it's pretty darn close to 10 but note that this is a numerical solution whereas 10 would be the actual theoretical solution if you want to find the minimum value how would you do that well you've likely figured out that minimum Y is probably the one that'll do it for you and this one comes out to an even one but let's say you didn't know the name of a function right I clearly know Max and Min those are easy but if you're looking for more advanced functions how would you even begin to find this Matlab provides awesome ways to get help first and foremost is my favorite you click this little FX down here and this opens up a search for functions boom I've already got minimum searched in here and you can see all the functions that in the description have minimum in it if you want to take an integral of something you're going to search integral in here and boom numerical integration all these different things that are built into Matlab that you have at your disposal maximum again here we are let's say you want to round values ceiling floor fix you've got all these options take advantage of this tool simply by clicking the little f of x in the bottom of your screen however I've now found these functions how do I know what their arguments are Matlab has this covered by doing help and then the function name if you run this in your command window and then open it up a bit more you get documentation on this function men minimum elements of an array it's the smallest element in the vector X what's X right here it's your argument and it tells you all these conditions for what this function does you can also type doc and then the function name and it will open up matlab's online documentation for this function it's basically the nicer version of what we saw in just plain text there before you've also got this help bar that you can search in I can look for the maximum search this and I'll see that there's a cumulative maximum function some sort of name length Max and moving Max this is the max that we're going to be using here just the maximum elements of an array there is so much help and guys if you aren't peeing your pants right now and subscribing to this YouTube channel oh if you've lost your mind this is gold as a programmer you are never ever ever ever expected to know all the functions and all the possibilities of a programming language no no no no you need to know the basics and then you need to know how to find information that you need almost every time that I program in Matlab I end up going online going to this documentation and searching for something new the other way to do it you open up a new browser on the web and you say how to find the minimum of an array in Matlab look this up boom MathWorks website has a hint boom right here all this help is available guys you are not alone do you see when I was searching for this right here look in Java python C plus plus JavaScript they're in Matlab already in C everyone everyone has to get help in these languages the internet is the best resource for you guys the world is your oyster here take advantage of it anyway I digress let's get back to our problem all right we found the Max and the minimum using the Max and Min functions at what x value does the maximum y value occur okay with a maximum y value I think we found was about 10 so we need to go back and find that x value in our script let's take a step back we've got Max of Y that's good but we need the index of that right at some x value we put it through this function here and we got some y value that was the maximum so if we work backwards we might be able to get that index and this is where reading about the functions help Max let's take a look here this third paragraph m i max of X also Returns the indices into operating Dimension corresponding to the maximum values oh that's exactly what we need the index is what we want let's try a couple things here let's try first let's just save this to Max Val and do Max y I'm going to suppress some output here we don't need a plot right now so I'm going to comment this line out so Matlab won't even run this and now if I run boom we're just getting that maximum value out as we saw before though in that help thing it said if we do M and I we're going to get the maximum value and the index of it if we run this we get two outputs now this is how you take multiple outputs of a function you actually pass it in a matrix of values and then the function will assign appropriate values to these outputs now I've got I equals 60. that means the 60th value of I if we open up sorry of Y if we open up y one two three four five six you know if you go all the way over to 60 should be boom right there the value we're expecting that means the 60th value in X is the One X value that gives us the maximum y value 60 right here so 2.9798 of course guys you don't have to go and open this up every time we're smarter than that we can just do X of 60 and that'll give us the x value better yet let's come here and let's do x max Val equals X of I what is this I it comes out of here and it has the value of 60. if we run this we'll get X maximum value 2.9798 this really gives us the maximum value of the Y function the last question they asked us was how to find the Y value of Any Given X this is not something we can do by just generating all these different points right that'd be exhaustive I could give you any x value right 9.99999957892 right and I there's no way that I was going to calculate that in my Lin space so at this point we need a different approach what we're going to do is Define something called a custom function more specifically Matlab calls these Anonymous functions but they're just what we're used to when we plug in a simple value into an equation and we get one output and we're going to say at X Y at x equals this if we run this we get an error guys I can honestly never remember how to define Anonymous functions you know why because I can open up a new browser and type Anonymous functions in Matlab heck I've even made a YouTube video on this but I don't remember these things because they're very quick and easy to look up here we are we do at uh okay I just forgot to add parentheses around X not a big deal I come here parentheses around X and we're good I run this no more error but why is defined differently if I output y right here it's no longer just this entire thing put through our function it's actually a function handle what the heck is this don't worry so much know that you can now use Y and plug in any x value that you want run that script and there's your answer it's a massive number also note that Matlab uses scientific notation here this is times 10 to the sixth power but now I think we were asked the Y value of 20.2 something like that we can run this and there we go if we input this value of x we get this value of y out these are called Anonymous functions and they're very quick and easy methods to get outputs the problem actually called for us to do y of 20.7 so I'll go ahead and do that for you we run that note can be a little bit confusing because previously we've done something like this where X of 2 is actually the second value in x note that these are very different X here is a matrix it's a 1 by 100 array of values y isn't a matrix or array there is no index to y y is defined as a function handle these function handles they don't have multiple components like X does X has all these values we can choose from y does not when we give a value to Y and it's a function handle it simply inputs that value and then runs it through the equation and that's why these look similar but act very different here is another question to consider plot the equation from x equals negative 10 to 10 of it's that same formula we saw previously Part B is going to be we have to change the curve to add 15 instead of 10 and then part C is change that curve again but we're going to do x minus 5 quantity squared in the parentheses this is prompting us to think more about plotting we're going to cover that for the next few minutes let's start fresh in Matlab here we've got X and I've changed this to negative 10 to 10. we aren't going to be using this Anonymous function form anymore I'm just going to clean this up to what we need is the bare minimum and let's run this to make sure things are working I've called our y y1 because for Part B and C we can create a Y2 and a Y3 I'm just gonna copy this for now it's gonna be the easiest way to make this work there's our Y2 and our Y3 will be like such very good and our Y2 we add 15 and our Y3 we do this as a minus five excellent this will get us our three curves and if we run this good we've got 100 values for each of these y's and then we can plot all those values because it's against the same X right we're using the same x value negative 10 to 10 for all these different y's and these will give us our three curves essentially right now we have three different pairs of data but before we get into plotting these and I want to plot them all side by side around the same graph potentially let's just start talking about plots and figures in Matlab Matlab calls these things a figure in our Command window let's just do figure one and hit enter it's going to open up this window and it contains a blank figure not very eventful but as we begin to plot things on it for example let me do a split screen here it'll be easier to see here we go here's our figure that's just all blank let's do plot X and y1 right we do this and there we go the plot is starting to be populated now if I did plot X and then Y2 we'll see there's a slight very slight change there actually not substantial but let me plot the third one now Y3 and there's a that was a much bigger change the curved shape is staying the same but if you look at our axes those are shifting what matlab's doing it's rewriting this graph on the same figure see we still have figure one right here the proper way to do this to add multiple curves of the same plot is going to be using the hold on command okay so here I've got Y3 plotted this is the most recent one that I ran if I did hold on and then plotted X versus y1 aha there's our other line let's do that again hold on and plot X and Y2 there's our third line in yellow there matlabs automatically recognizing that these are going to be different lines and hence it changes the colors being used but let's make it ahead of ourselves this graph is actually pretty crappy we don't have any actions labels there's no title this is this is kind of garbage for now let's let's start a new plot here let's call figure two and you know what let's do all this second figure work back in our script I'm gonna go full screen here again this close all is going to wipe out all those figures and we're starting fresh let's start with our plot so plot of X versus y1 we run this we get what we expect let's add an X label that's gonna be our xaxis this is simply X great same thing for the Y axes let's do y label and Y could not be simpler you can I like to do these with a comma but you can put them on separate lines it doesn't matter you run these and it's created we can be more specific here and specify what figure we want because we can create multiple figures and plot Y2 on that second figure now two figures will pop up here's our first figure which has the X and Y on it and the first curve and here's the second figure which has our second curve notice that these X label commands when they follow a plot they go on that plot here the X label and Y label commands come after this first figure plot and then right here we plot the second figure but we don't have any X axes Y axis labels once you command a plot anything that follows will go on that plot until you start another plot let's keep rolling with this one let's add a title using the title command we call this Y versus X and we kind of had this as like problem a from our problem sets so be nice to have that graft on there too so it specifies there's our problem a I like having grid lines on here it makes things a lot clearer you're just going to call grid on run this and we're pretty much there guys this is looking like a very nice graph the only thing and this is getting Nitty Gritty at this point we should be plotting data points because these are just simply raw data points right now right this isn't a curve this isn't one continuous curve y1 and X1 are 100 data points so we really should be plotting these as those Stars as I talked about earlier and that way it's a bit more clear I'll go full screen here to see that we're just calculating y values at different X values along the way it creates a shape of a curve but it isn't overly misleading of what's going on here if you want to change the color of these the shapes of these how do you think you'd do that what have we talked about so far when you need to get extra help on a command throw this in your command window help plot scroll up a little bit and you'll see there's a whole plethora ugh Gold Guys gold right here blue green red these are all your oh blue green red these are all your colors you can do different shapes and things and then for your lines you can create different things here let's go ahead and do that you add all those things right in here so if I wanted to do blue stars I'd do blue and then star what about blue circles the o how about magenta squares let's do MS I'm not going to plot this figure for now just the one and there we have magenta squares kind of fun but very useful to make sure you're separating out the different things that you're plotting on the same graph and that's what we want to do I want to plot all of these curves on the same graph to do that we already discussed the hold on command let's do plot X versus Y2 and let's make it something different let's say we want these to be I don't know blue triangles I think that's going to be triangles we can do that and then those will be added on note that we didn't have to add any more X label and Y label and title stuff because we already added that to the figure and now we're just adding another line here another data set onto the figure very cool how this works but you can see every every Diamond here is simply a little bit higher than every Square you can click these points to get the actual values that you're calculating by the way and you'll see that we're just slightly above as you go along the curve here last thing we have to plot is going to be that final curve let's do Y3 and let's plot that as I don't know Green let's do plus signs for now we'll go ahead and do that and now we have our green plus signs on there too but if you just showed someone this graph they have no idea what equations you're using they don't know what these belong to or how they relate what you need to do is add a legend go ahead and do the legend command see this is so straightforward I love plotting a Matlab I hope you're seeing how easy this is and straightforward you just keep adding the things that you want and Matlab will keep adding those to your figure we'll do Legend and then we need to name the legend entries I'll do y1 Y2 and Y3 note these have to be given as characters or strings and then Matlab will add these to our graph and it goes in order okay so the first thing you plot will correlate to the first thing that you name we do this and Matlab will add an automatic legend in the top right you can click and drag this by the way and move it around so you can make it easier for your viewers you've also got a lot of tools built into this chart look on the right here you click this hand that's your panning hand and then if you go and click on the graph click and hold I can scooch this and now change the viewing area let's see how my axes are changing right now pretty cool after that I can click the home button to go back to the actual View you can zoom in click the plus magnifier and I want to zoom in to where all these Peaks are happening click and drag and now we've zoomed into all these Peaks pretty cool I can also zoom out by just clicking the zoom out and clicking around the screen here and you can always go back to the home at the end if you want to copy this figure and put it in another document you'll click the copy figure button right here and that'll enable you to open up a PowerPoint presentation a Word document or something like that you'll copy the figure you can also save this figure and do a couple other things here but mainly edit copy figure and paste it into something else if you want to change the axes ranges for example yeah we did X from negative 10 to 10 but maybe I just want to hone in on a specific part you're going to do xlim and then pass a matrix here okay this Matrix is going to be what you want for your lower limit I'll say 0 to 2. so this Matrix is your actual limits okay you run this and then you'll see our xaxis is now just from zero to two if I wanted to change the yaxis you guessed it y Lim and I can do this from zero to a hundred run this and now you'll see that the y axis has changed only looking from zero to a hundred remember I can still use my pan tool to look around here and see the other curves I can use my magnifying glass to zoom out a little bit more see some more of that curve look around these tools are here for your disposal last thing if you want these to be filled in you have a couple attributes that you can change so these symbols let's say I want to fill this in you're going to do an attribute name and then the value of that attribute so here we want to do Marker face color and then I want that to be Magento and let's say I also want to change the marker size and I want that to be size 10. you're probably thinking where is he getting these things where are these attributes stored where can I learn more about these attributes use matlab's help scroll around read these things Google them you can always find more information on the stuff online and using the stuff that I've shown you in the command window I think it's got them here somewhere it's going to look for marker size and see if they use this at all on the page here we go we've got marker size 10 we've got marker Edge color oh okay so here they change the edges to kind of a blue and I did a marker face color change the face values you can change the lined width so those lines that I was plotting earlier you can change those let's go back down here let's plot what we have here you can now see how our axes are still kind of off here but there we've got those squares that are now filled in a little bit easier to see these green things are kind of difficult right now but you get the notion you can play around with these things you call an attribute and then you call the value you want that attribute to be and then with your lines if you want to plot this as a line you can add a dash dash in front we do this and you'll see we get a dashed line with the squares on it if you want to get rid of the squares well then you don't specify the shape that you want to plot I'm going to get rid of our our limits here because these are kind of annoying if you don't specify the shape then you'll see we just have a dash dash line that's magenta representing our y1 curve you'll notice that we've put all of these three curves on one single plot and we did that with the hold on command Matlab also offers us the option to split these into three different plots or put them on side by side plots I'll show you what I mean we can create those different figures remember when we did the figure one the figure two let's put these all on separate figures so instead of hold on let's just do a new figure and a new figure and we don't need a legend anymore because we're putting these all on different figures in fact three figures let's run this and you'll see that we now have three figures each for a curve that's one way to split things up and then you'd have to add for every figure these you have to do the X label you have to do the Y label you have to do the title you need to add all that stuff to populate these graphs as well another option you can do and depending on your application this could be very useful is using something called subplots can do help subplot and you can learn more about the subplot approach but what subplots do is basically you're creating this like a matrix of graphs you know how we have a two by two Matrix and we have values in all those two by two spots we can do that with plots we can call subplot I can call two by two here and then specify the place I want my first plot let's just call it one for now but this will create two rows by two columns of plots get rid of my other figure commands for now let's just comment these out so we don't get confused and I'll show you what this looks like there okay see how this plot is in the top left of a two by two looks like a matrix of graphs almost right if this is the layout so you can put these plots it's in the same figure but it's in a different area of the actual plotting area it's kind of hard to describe this with words but I think you guys are seeing it from the visual let's say I want to add all the other curves then in these other spots I would do subplot same same subplot here so you keep the same dimensions then I'm going to add two because I want this one in the second position let's go plot and do this one we'll see this one come up now in the second position and it goes top left is one and then two then three then four let's get this third plot on there as well two two let's put this sorry this one should be in the second spot this one should be in the third spot uncomment it and we'll end up with this beautiful graph again we need to add all the the labels and the titles for every one of them if we want that let's go ahead and just copy those in right below those plotting commands those all be populated but this a two by two isn't the appropriate approach for these graphs right what would be better what would be a more visually appealing method for this what type of Matrix a 1x5 a 10 by 10 hopefully you're thinking maybe a 1 by 3 or a three by one we've got three graphs here let's go ahead and do that let's do one by three for all of these and this will give us one row of three charts then as we expand this out we get a nice side by side visualization of these three plots and that'll be a sufficient answer to that problem we started with about how these curves change with different parameters let's take a stab at another question here we see based upon the following equation what percent of Y values are greater than 0.8 for x equals 0 to 10 we have y is the sine of x this is one that if I'm being honest I don't even know how I'd solve this analytically you know with what we said our equation would be solve for values at x equals zero and x equals 10 and try to plug these in and then look at the the period of the sine wave so this would be a tough one to do with paper I honestly don't know how to do it I'm sure there's proofs and things like that but if we break this down we know that the sign of any any input there will be from negative one to one so we know that some values should be greater than 0.8 right we'll have something between 0.8 and 1 for I don't know how many X values but that'll happen so that's at least good so it's not zero but we'll need to essentially check some data points similar to when we plotted we developed x from 0 to 10 we calculated some y values and then we had those individual points that we plotted remember that we're essentially going to do that but now we need to check if those values are greater than 0.8 and then we'll have to sum those up and see how many we have and divide that by the total amount that's going to be the approach for this problem we have a clean slate and Matlab and I've got our X going from 0 to 10 and our Y is just the sine of x nothing too eventful here I like to plot things again I'm very visual I'm going to go ahead and make a plot of this just so we see we've got an idea okay let's pop this as as points again we don't want to confuse ourselves what's going on just do dot that'll give us just points now if we look closely here's 0.8 and it looks like it's going to be some portion I guess this is around 15 you can hold me to it we'll see how this problem goes I have not solved it yet but we can mean if we were really desperate we could just count these points and divide by the total number of points but I'm trying to teach you guys basics of logic in this problem we have our points and we're getting real fancy what we can do let's do hold on plot another thing let's plot just the X values let's do one at zero and ten and then let's do Y at 0.8 and 0.8 see what I'm doing here I'm not creating actual X and Y things to plug in here I'm just giving them the direct arrays so that'll plot point zero zero point eight and then 10 0.8 that'll give us a line let's make that a red line that's dashed all right let's do that really quick and now we can get a better visual for we're looking for all these dots above this red line kind of cool and we're going to add some more line I'm sorry we're going to add some more points here let's make this geez hundred thousand points mat level have no problem for this by the way it still takes like no time to run but we have a lot more points now you can't even see that it's not a line these are individual points that'll give us a more accurate answer than if we did I don't know just 10 points right this is a very inaccurate approach you can hardly even tell this is a sine wave so it's always better to run more points especially when we have the computation ability with modern computers sounds good we need to check if these values are greater than 0.8 this is the bases of logic logic gives true and false values out after you present a logic statement let's start by just saying x equals five no problem there we're just back to our Command window and let's do X is greater than two run this and we get the logical of one this is telling us yes your statement here was true remember cute computers started with zeros and ones and they still are zeros and ones by the way we've just progressed to languages like Matlab we don't have to type zero zero one zero one one zero zero but the bases of these things are still zeros and ones let's do X is less than two which would be the answer here if one is true zero will be false and you can I can even type true here and get the logical out of one and I can type false and get the logical out of 0. thus if we want to check multiple values let's define a as just a matrix of ones let's do a 1 by 10 matrix of one so a will just be a bunch of ones here what if we did a is greater than zero what will come out mat level performed this logic assessment on every element of a one is greater than zero one is greater than zero one is greater than zero and thus we're just going to get the Matrix out of all trues maybe not the best example let me do a is ones and then multiply this by five so we'll have a bunch of fives and now we can do our logical test a greater than zero and we get a logical array of ones out which is telling us true true true true true true true true right this is exactly how we get this information in zeros and ones and now we can use zeros and ones to easily count I can use the sum function having been discussed you probably know it existed sum of a will give us 50. this is just summing up these 10 values but if I save result to the logic statement a greater than zero my result is this true true true true true array and if I sum result I get 10. this confirms that 10 of the values in a are greater than zero there's tons more logic to do guys I'm going to run through really quick some of these other logical operators you could do eight greater than or equal to eight true you can do 19 plus 5 is less than a hundred true you can do 55 does not equal to this is a fancy one here a tilde 20. and that gives you logical of one because 55 does not equal 20. by the way on your keyboard this should be like the very top left shift and hit that one the dash is what's next to it this little thing jig I call it a tilde maybe it's an e tilde I don't know other stuff you can do compound checks so maybe 10 is greater than 5. and 11 is greater than negative 100. so this will check is 10 greater than 5 that's true this will check is 11 greater than negative 100 that's true and if both of these are true then it'll output true okay this is kind of getting to the whole field of logic you may or may not be familiar but these ands require both of these correct if I did an or actually let me make one of these false this is false right 11 is not less than 100 so we get false because both of these are not true we get false that's the power of the and if we look at or when we take this and do or which is just a vertical bar or 10 is greater than 5 that's true 11 less than negative 100 that's false but only one of these has to be true only 10 greater than 5 or 11 less than negative 100. if I run that I'll get true okay that's all I want to cover on the logicals but let's go back to our problem we have to figure out what percentage of our values and Y are greater than 1.8 how do we do that well if a value of 1 is greater than 0.8 that'll give us a one out so maybe we can compare this entire Matrix of y's y greater than 0.8 let's see what our output is oh my goodness yeah we have a lot of values here we're going to get a ton of stuff a bunch of zeros here let's keep scrolling through and see if we find any ones there's so many values ah here we are found a bunch of ones that's good that means our test worked to some degree let's sum up those values let's save this as y I'm going to do y underscore greater that's going to hold the array output of this so now this will be saved to y greater I'm going to stop plotting this for now and y greater is the same size as our y value but you can see in our workspace it's got a check next to it because if we do whose take a look our y grader is a logical array it's not the typical double that we see before but we can treat this as something that we can sum up let's do the sum of y greater and that'll give us the total number of values that are greater than 0.8 then we can divide this by the total number of values that we generated and that'll give us the percent of values that are greater than 0.8 so let me do final percent as a variable here some y we have those values and I'm just going to divide that by yeah if we could cheat here we could change this to be you know we could just copy and paste it there that's bad form because what if we change this to 100 values now we have to change this to 100 values instead let's do the length of Y new function Here length of Y will give us the length of Y how many elements are in y you can also call height of Y which would give us the number of rows and you can call width of Y and that'll give us the number of columns length will always give you the larger of height and width great we call length of Y we run this and we get final percent is 0.25 kind of cool and now let's actually ramp this back up make sure we have more and you can see that our number changes just slightly here it increases to be more accurate if we just do one value yeah we're gonna get to zero because the one value we sample didn't actually do anything if we do 10 samples we say it's about you know 20 of the values and if we increase this to a thousand we start honing in and the value doesn't get any any more accurate so we're just dealing with 0.2574 as the answer to our question if you want to technically make this a percent you can multiply this by 100 and then change this to be 25.74 percent this was a super quick intro to logic statements but very often these things are super useful for quick checks of things like we did in this problem one cool thing we can do is change this 0.8 value and we can now check if things are greater than 0.5 let's say but we're also going to want our plot to update let's create a new variable and call it y check that's the value we're checking against and I'll call it 0.5 for now and we can replace this with Y check and Y check and then this with Y check this is good programmer form you want all your parameters to start at the top then come in and do your actual actions and then have your final output I'm being sloppy here but work with me you get the idea we start out and we Define parameters these are the things that we change very easily and quickly and it commands the rest of the code imagine you've got hundreds of lines here you don't want to go back searching for wherever this value made sense or whatever you know you want these things to be consistent so you can update one value like why check to zero and then automatically your code follows suit and updates in those places now if we run this code look our line adjusts to zero and the final percent is updated as well if you're wondering why half the values right if it's a sine curve you should have should be greater than and then half should be less than it's because we're going over like one and a half periods of a sine curve here if we adjusted this to be right right here as where we cut things off looks like it's about let's see what is this point here um let's actually change this to prove what I'm saying here looks like it's around I don't know 6.3 so let's change this to 6.3 what else do we have to change this value right here to 6.3 so let's now create a variable called Max X and do Max X and then this equals 6.3 0 to Max X we run this and there we go we have got about it's about one period then one Crest one trough and our final percent is just about fifty percent there I was eyeballing it but that makes sense it's a good logic check to know that our code is running as we expect it to that's the final lesson to take away from this as well don't just blindly send stuff out into the ether and hope that Matlab is doing it correctly matlab's doing what you tell it to do your parents at some point probably told you that computers are stupid and they are because they listen to everything you do and if you're stupid then you're going to create a stupid output I'm not calling you stupid but garbage in is garbage out you can write a crappy program and it's not going to give you a good answer you need to write good programs that you are confident in and those will give you confident accurate answers let's take a stab at this problem part A is to generate 10 random numbers from one to five so randomly generate a three randomly generated two a four one five this would be from a uniform discrete distribution and then we want to count how many threes there are in Part B we're going to display the word wow if there is more than twenty percent of the numbers being three in part C we're going to do a and b again but using a for Loop we'll introduce the for Loop mentality here and then we're going to extend this instead of 10 random numbers to 10 million random numbers and we're going to compare the speeds and the time it takes to compute using the two different methods we are back to a blank script in Matlab I'm now using Ubuntu as my operating system for those using Linux distributions out there Windows was the first half of this class nothing changes by the way it's basically the same exact approach the same syntax that Matlab is using you'll only notice some differences in the IDE but for learning purposes it's the exact same just offering potential Comfort to those of different operating systems first thing here as always we're going to clear everything in the command window and clear our variables we need to generate our random numbers and I'm going to call this Matrix a a will hold our random numbers if you want to find some other random commands feel free to look around the webs I'm going to use Randy we can find more about Randy by taping help Randy Randy is going to generate integers with a uniform discrete distribution that's exactly what we need let's go ahead and give the arguments five so if I just run this a is four if I keep running this script over and over we're going to see that that random number changes so this is generating just one random number from one to five I want 10 of them I want a 1 by 10 matrix and here we're getting random numbers 10 of them from one to five great the first thing we need to do was to count how many threes there were if you recall we've done some logic checks if something's greater than 3 if something's Less Than 3 if something does not equal three well let's try just running something like this the fifth term equals three so we can check a single term if it equals three or not and you'll see in the output there we just gotta hit logical is one as our answer and the first second third fourth the fifth term is three we were basically just checking this single term here remember as we learned we can do this for whole arrays so we can just check in general if a is equal to 3 and we'll get a entire logical array out in this case we didn't get any threes so our logic array is just a bunch of zeros but as we do this in this run we had looks like four threes to count this all we do is add a summation around our logic statement there which will sum these up and give us the number of threes so here we have two two one two zero two occasionally we should get three all right here's three and we wanted to display wow if this happened this is where we can introduce the if statement the if statement will act if a condition is true for example if this value here which we discovered was just outputting three it outputs the number of Threes that we have in this a matrix if that is greater than or equal to three then we will output using the display command wow and then we have to end at the if statement you'll notice that every time we open an if you have to do an end to the f this display will simply output to the command window and we can begin to run this there we go there's our first time we have one two three four threes in this one and that time we were able to display wow to the command window when this statement right here that I have highlighted evaluates to true then we get an output to the command window because we asked for it right here and to be thorough for the problem it wants us to Output the number of threes so let's go ahead and do this as num threes equals the sum of a equals three and then we can just replace right here num3 then with our outputs we'll get the random Matrix a the number of Threes that we had in The Matrix and when num3 is greater than or equal to three we'll display wow run this a few more times so we get one more hit here there we are wow we had three sorry we had five threes in this run and we displayed wow that's the basics of the if statement from here our instructions were to go ahead and do a for loop with the same mentality I'm going to introduce you to a section notation to percent signs side by side introduce a new section you can see this blue highlighting here it might be white it might be black depending on your system setup we're creating a new section right now and we can run each of these sections differently this will be section one up top foreign we can be more specific on what we're calling them this is the if statement approach and down below in section two we have the for Loop approach it's these double percent signs that Define a new section the benefit of this is that in each section we can kind of run them independently and they act independently of these other scripts that it's involved with in the same dot m file so if I run this script down here and just say x equals 10 and run this everything up here is still the same nothing changed I only ran this section got my output of x equals 10 and a new variable was created if I do CLC and clear vars down here and run this it's as if I'm just running this own section here which is what I'm doing Matlab only runs each section independently control enter is the best way to run your independent sections you can also come up here to your run button you've also got run section on the left and that'll be your section depending on where you're running if you use the Run button in general it'll go through and it will run the entire script as you can see we end up with just x equals 10 at the end because of this CLC and clearvar statement run will always run the entire script run section just runs the individual section that your cursor was in that's because that's the active section and Matlab assumes you want to run that individual section let's start with a clean slate to discuss for loops for Loops are more advanced programming techniques and can be very challenging for beginners so please don't be put off I promise you you'll get it they're useful when you need to do the same thing over and over again you do a for Loop for a specified number of iterations and then it stops and the rest of the code will continue to run of course it's best demonstrated with an example let me go ahead and write a for Loop for I equals 1 through 10. let's just output I and then end the loop I'm going to run this and we're going to see in our output that I is just being outputted 1 to 10. so what's going on here well you know one to ten right you've seen this before if we just do that in our Command window it's going to do what just give us 10 values one to ten no surprise here but we're using this variable I and this could be any variable it doesn't have to be I I is just what's typically used you could call it a counter if you want to and then change this to counter and counter is going to go from 1 to 10 you could call it your friend in case you don't have any friends now you're oh look at the end you have friends that are you have 10 friends see look at that programming's beautiful the fact is we're going to call this I and it's a placeholder value that you're using in each of your Loops but what's actually looping what's what is this Loop iteration that we talk about every time this runs the value of I will change I starts at 1 I equal to one and then this code is executed if I have multiple lines like I plus 1 and display I and all these things in here all this stuff between the four and the end is run with I equal to 1. so if I run this and scroll up during that first iteration oh let me just clear some stuff here sorry about that so you'll see and clear vars so we just have a clean output here we get I equals one and then I added I plus 1 and then I just simply displayed the letter i which happened right there see how I displayed the letter I and not the actual value which would be I like that just the letter i so every Loop every time we run this code the value of I will change it starts out as I equals one because we asked it to right here in the next Loop once it hits end it goes back up it goes back up and I becomes 2. right here I equals 2 because of this statement here then we add I plus 1 and we get the answer out to be three and then we display the letter I right here I that's all the commands so we go back up I now becomes three I equals three three plus one is four display the letter I and we do this over and over and over until we get to 10 which is why the last Loop is I equals 10 I plus 1 is 11 and display the letter i we get to set the number of Loops right we're telling Matlab we only want I to go from 1 to 10. if I want I to go from 1 to 10 skipping every other number there remember just like we did earlier this will go one three five seven nine if I run the code I is 1 then I is 3 I is 5. i7 I is 9 and we have all the other outputs that we asked for as well this is for Loops while Loops are different and we'll cover them later how does this relate to what we're trying to do though in our problem we're trying to count the number of Threes how is this even useful for Loops are very useful for going through numbers and a matrix we can use this I as an index so we could go through and if we called I or sorry a like we had up here we could call a of one we could call af5 and we can go through and then do checks on each of the individual components let's generate this random a matrix down here now and instead of going from one by you know 1 to 10 here let's just go from one to the length of a and the length of a will be what it will just be 10 because it's a 1 by 10 matrix and 10 is the longest dimension we'll go through from 1 to 10 and I'm going to check all these values inside a I will start with this let's run this what will happen I is 1 to start we run this and this is equivalent to running a parentheses 1 which gives us the first term of a on the next loop I becomes 2 this becomes a 2. which gives us the second term of a so it'll end up printing out line by line here what a is here a two one four four two one four four it's just going through each of those indices we want to do a logic check right we want to see if that value is going to be greater than or equal to 3. count the number of threes so we can do a is equal to 3 here and we'll get logicals out right we're getting all these logicals now zero zero zero zeros all the way down we get oh geez three threes in a row at the end there they are now we need to count these ideally we'd establish some sort of num3 variable again that will equal the previous value and we'll just add one to it so every every Loop that we get this to be true ah we should make this an if statement so we should do if AI is equal to 3. then we run this and we'll end that if statement this is called a nested if statement because it's inside of another loop nested if so if this term of a is equal to 3 if that evaluates to true then we do this we say num3 is equal to the previous value of num3 and we add 1 to it we're counting these values of three as we go through the Matrix if we try to run this we have no threes in that one but here we have a three and we're going to get an error and that's because we didn't Define num3 before this Loop started so Matlab tried to grab num3 it doesn't exist we need to add num3 equals zero to start because our count of numbers of Threes is zero we have no no threes yet until we start going through the loop and we count every time that this is added let's run it there we are num3 equals one run it again we get two outputs here right because the first time we had a hit we outputted and the second time we had a hit we outputted and it added one great and then at the end we can add just the same logic statements right here we can display wow if num3 is greater than or equal to three run this a few times let's see if we get there we are with our wow if you don't want to have that output every time you can just simply add a semicolon there and we'll just get wow a bit more complicated and it is for this simple example but it's often good to learn on examples where you know the answers are true so that you can check your for loops with it the final part of this problem was to calculate it with 1 million variables as in we're going to generate one million random numbers and let's run these side by side now I like to make my sections when I'm initially learning how to do these things so it keeps it separate now that they're both running let's go ahead and bring this together going to get rid of the section notation I'm going to add a comment down here still so we know this is the for Loop area and just for Loop we only need to generate one Matrix of random values and then let's see what else we need to do num3 here we don't want to have the same variable that we're using for these different areas so let's go ahead and name this one num3 underscore if because it relates to the if statement stuff we're doing and then we can just leave these as number three down here and actually we should be good programmers and name it num34 right and you can see too Matlab offers depressed shift and enter to rename the other two instances I like that and now we have num34 and we have num3f in the other section we can run this all together and we should get outputs only when we have the Wows you'll see we get two Wows because both sections are displaying them here we can suppress this output as well if we want and we'll just get the random Matrix and our Wows out the last thing was to compare the times with a million I got distracted there so we want to make this a million so here's a hundred thousand million 10 million I believe is what it asked for 10 million points let's run this oh dear make sure that you no longer output a as you can see your computer is going to try to output a million values now in your uh command window make sure you suppress that and notice how greater than or equal to 3 no longer is applicable right we're always going to get that with a million 10 million values we want to make this 20 percent so 0.2 times the number of values generated so times the length of a same down here greater than or equal to 0.2 times the length of a good so that way this comparison statement here will change as we change our a value sorry change the length of a now if we run this oh I have an error this should be length fully spelled out and good we're able to run this now sometimes we output wow sometimes we don't makes absolute sense to time it to get the duration of time it takes to run a specific section of code what you need to do is use matlab's builtin function tick and talk tick is where you want to start timing something and talk is where you want to end it if we run this Matlab will automatically give us an output about the elapsed time between tick and talk to save these as variables let's call time if which is the time it took to run the if section you do that equal the talk we run that and you'll see we get time F here 0.0040 so these are in seconds by the way seconds let's do the same thing for the four section add tick and at the end add tuck we want to save that as time underscore 4 equals talk run this and we have two different times here the time to run the if statement what is this four thousandths yeah tens hundreds thousands point zero zero four seconds here a time to run the four statement section is .0450 it seems pretty insignificant right that's both less than a second we have all the time in the world right now we're in no rush but this is actually a huge huge insight into some of the challenges that we see in Computing for Loops in general are going to be slower and right now does it matter in our script no we're not even waiting a second to run this it's hardly significant but imagine if you had a script that took four days to run write your if statement version of it took four days and you're for your for Loop statement version of it took 45 days right that's that's a pretty big deal and even if it's the difference between four minutes and 40 minutes is a big difference right so when you're making your code and your scripts you want to consider the most optimized method and this is something that takes years of practice I just want to introduce you to it now so you're aware tick and talk are great ways to know what's fast and what's not the if statement method this is typically called vectorization because you're just dealing with vectors here I'm not going through each individual term I'm doing whole checks on entire vectors right these logic checks I'm performing rather than going through and looking at each individual term of that random Matrix so try to vectorize as much as you can but again write stuff that's simple and understandable when you start and then you can look towards this optimization later on we ran to a couple things here that I want to point out the first are going to be naming conventions you'll see I'm using some underscores I'm using some you know capital letters there's a couple good ways you want to create variables there's two main methods the first is going to be called a camel case and that's where you do this camel case under under what is this lowercase first letter and then when you have a compound word you capitalize the second part of it this could be then let's just total revenue equals seven you can also do total underscore Revenue equals eight or whatever these are the two main methods underscoring you just keep everything lowercase and that underscores between compound things and then total revenue is an example of camel case where you uppercase those other letters for the compound words you want your variable names to be as descriptive as possible a bad variable name for example would be four right four is a word that Matlab already assigns for doing for Loops so you can't say four equals nine it's going to be thrown off what you're trying to do here similarly you shouldn't name your variables after any functions like the sum should not equal 10 that's bad because what if you're trying to use the sum function you know the things that you want to keep clear so don't use variable names that are the same as function names you also can't use numbers to start your variable name so I can't do 2016 total revenue if I run that well I could try doing yeah see okay matlab's already telling me look you're missing multiplication it thinks I'm doing this multiplication here multiplying between something else if I still insisted no I want to save this as a variable 2016 whatever whatever year that might be right it's going to give me that error because it thinks I'm trying to do math so you can't start with numbers you have to start with letters here foreign the other thing I want to show you is how to do your file names we can create new files using the new script here you can also use the plus sign right next to your current and go between and you can have multiple scripts open here this is very useful when you're working on things at the same time you can use Ctrl s to save these really quickly and make sure you have the dot m file extension the dot m extension is needed to save Matlab files let's say I want to name this file 2016 Revenue like before dot m if I click save matlab's going to yell at me I cannot start with a number Matlab file names must start with a letter and contain only letters numbers and underscores home stretch guys the last topic we're going to cover are while loops and custom functions while Loops are in the same family as for Loops they look similar the way we construct them but they have one key difference in a for Loop you decide how many times you want to run right for I equals 1 to 20 for I equals 5 to 50. you're going to display the variable I and then end you know how many times this is going to run right it's predictable you're telling it how many Loops to run here output is as expected just explain the I as we go through this case I'm displaying the variable I not just the letter I like we did previously here we just see a bunch of eyes in a while loop while we have to give it some condition here and then we do actions and then we end let's do well the condition and the condition will be something like Z is greater than five or the sum of values is greater than nine it'll be one of those conditional statements we've been doing such as 10 greater than five and whenever that condition is true the while loop will run once that condition is false the while loop stops so you can see that we no longer have direct control over how many Loops are run but instead we have control over the conditional statement Let's do an example Z equals 100 while Z is greater than 75 we do stuff we display let's just say the square root of Z I don't know up to you and then we have to add a key statement which I think of as the reduction statement you have to force eventually this statement to become false otherwise you get in an infinite Loop scenario okay if I were to run this right now and I'll do it for you I may crash the computer but let's go ahead and run this it's just outputting tens you can't tell right now this thing is just going going going going I have to force quit with Ctrl C okay you might even hear my laptop it's revving up right now it was just infinitely outputting tens I can show you my like I'm scrolling right now look at it's just 10 10 I mean infinitely this would have gone on forever force quit with Ctrl C if you ever hit this issue why did that happen well Z was a hundred right so the square root of 100 was 10 which just kept outputting and then it went back up to the top evaluated as Z greater than 75 well yeah it absolutely is oh you don't need that semicolon by the way every time is z greater than 75 sure Z is still a hundred is 100 greater than 75 yes do this yes do this yes do this over and over and over until you've got a ton of outputs that you just have to control C to stop this so we need a statement in here that's going to reduce the value of Z to make this statement false simple one Z equals z minus 1. we run this it stops we have a set number of values and we're just giving the square root of Z and this we decrease the value so now Z becomes 99 99 is greater than 75. 98 is greater than 75 all the way you can see we get to 81 at some point here because the square root of 81 is 9 and then eventually we hit a stopping point when Z is equal to 76 this will be true one last time we'll decrease 76 to 75 and then 75 is not greater than 75 that will be false and it ends and then anything you want here I'm gonna add Loop ended it's a little reminder for us we run this and we get our little display afterwards because the script keeps on running afterwards the last thing I wanted to show you guys was how to make this into a separate function you're going to end up with a very complicated things very complicated Expressions very complicated mathematical formulas you know even all these the nested Loops the nested if statements it becomes easier at a certain point to create a separate.m file to handle all those things and then you can just run those that mfiles from your main dot m file let's create a new script and we're going to use it as a function Matlab has a great builtin feature for this click the drop down by new and select function it gives you all the basic structure that you need to create a function you're going to start with function and then Define what output arguments you want this should be the name of the function here and then you're going to add input arguments all this inside will be using your input arguments to create your output arguments in our case we're just going to be running our while loop let's take this stuff right here and let's replace it in here while Z is greater than 75 display square root of Z yes we're going to get rid of this line we don't need to display these things but we just want to reduce it down so let's let's plan for this to be more General case so let's have our output be the final Z value Z final and we'll have our input just be Z let's call this function reduce Z with an underscore in there and we need to save it as that same name reduce underscore Z dot m this is where the current folder matters we need this file this dot m file to be in the same folder as our main script which I have Basics here that way these two files can interact with each other because they're in the same current folder now for reduce Z what we'll do is we receive a z value and let's say that's Z initial let's set Z equal to Z initial no output needed and then while Z is greater than Z initial we're going to reduce the value of Z and this will become Z final so actually no let's keep this as Z for now and then at the end of everything we'll save Z to Z final equals z okay so we bring in z let's think how this is going to go through so if we give an input of 75 like we did before as our argument to this function reduce Z 75 is saved to Z while 75 is greater than Z initial this doesn't work let's do this divided by 2. so while 75 is greater than 75 over 2 then we reduce Z every Loop until it gets to this point which will happen because we're reducing it eventually we'll get down to you know Z over 2 and then we'll be final this is a little bit complicated guys I know I'm just trying to show you this function notation and we'll output Z here and this is the final is what we have is our output to our function let's save this we'll go back to basics don't need this anymore all we need to do is run our function which we called reduce Z let's give it the argument of Z and we'll see what happens here we run this and we get our answer out to be 50. don't need this anymore either does that make sense to us we're giving a value of a hundred this is the one argument that we're giving to our function so the value of 100 is passed to the function reduce Z we go into reduce Z here Z initial is set to 100. 100 is saved to Z is 100 here while 100 is greater than 100 over 2. so while Z is greater than 50 we take Z which is 100 to start and we decrease it by one so it goes down to 99. now we're 99 greater than 50. we Joe would go again we reduce so now it's 98 97 96 95 all the way until Z is going to be what 51 Z is 51 greater than this oh no 51 will be true so 51 greater than 50 yes Z is reduced down to 50. 50 greater than this no false we end the while loop and then we save 50 which is z to Z final Z final is then our final output for the function and that gives us this answer of 50. I know it's crazy it is very hard to get your mind around this if you're struggling do not worry I have entirely separate YouTube videos on these topics these last ones these for Loops while loops and functions they are challenging don't back down think of it as a way that you need to push yourself to understand these Advanced parts of the programming language question for you what if I put 75 here what would be the final answer well think eventually we're going down to the Z over two that's the initial over two so it'll be 75 over 2. which would be 37.5 when Z is 38 this will still be true because 38 is greater than will reduce down to 37 and that should be the last Loop so let me run this and 37 is inevitably our answer holy cow guys I think we did it we covered so many topics in this video I'm amazed if you stayed to the end kudos to you this is one of the best beginner crash courses that I could come up with for you guys more videos on the channel This was meant to give you foundations now from here I encourage you to dive into specific topics that you need to do for whatever project or whatever you're just curious about doing a Matlab thank you for watching seriously this channel has been growing because of people like you who are committed to learning programming and I'm committed to helping you learn the program thank you so much for watching please like this video please subscribe engage on the channel I answer any single question that you guys want to ask I'm happy to clarify I'm happy to make more videos just let me know I am here to help you excel in your programming experience cheers and have a great day
