With timestamps:

00:00 - closures a closure is the combination of
00:03 - a function and the environment within
00:05 - which that function was declared the
00:07 - environment consists of any local
00:09 - variables that were in scope at the time
00:11 - that the closure was created in
00:13 - JavaScript all functions form closures
00:16 - in other languages without closures the
00:18 - local variables within a function only
00:20 - exist for the duration of that
00:22 - function's execution let's look at an
00:24 - example so we have this function make
00:27 - Funk and we have the our name equals JS
00:30 - nuggets and then we have another
00:32 - function within the function display
00:34 - name where we're going to console.log
00:36 - the name and this function make Funk is
00:39 - going to return the display name the
00:41 - other function so down here we're going
00:44 - to create um the my funk equals make
00:47 - Funk which is we're making a variable
00:50 - that's this function and we're going to
00:52 - run my funk now it's going to return
00:54 - display
00:56 - name now if we run
00:58 - that
01:01 - it's going to display JS nuggets so it's
01:04 - returning this function inside that
01:06 - function there is no name but because of
01:10 - closures this function that's been
01:13 - that's being returned and run here has
01:15 - access to the environment with that was
01:19 - created in which means it has access to
01:21 - this JS nuggets the name variable even
01:24 - though this the name isn't even in here
01:28 - so that's basically what a closure is so
01:30 - the function has access to any variable
01:32 - that's within the scope or the
01:34 - environment that was created in now
01:37 - let's look at some more some more
01:40 - practical examples a closure lets you
01:42 - associate some data which is the
01:43 - environment with a function that
01:45 - operates on that data one way to use a
01:48 - closure is to emulate private methods
01:50 - private methods can only be called by
01:52 - other methods in the same class but
01:54 - JavaScript does not have a native way of
01:56 - doing this it is possible to emulate
01:59 - private methods with
02:01 - closures okay let's look at this we have
02:03 - a our counter and this is assigned to an
02:05 - anonymous function and here's the
02:08 - anonymous function right here and as
02:10 - soon as the anonymous function is
02:12 - assigned it's executed as soon as it's
02:14 - been defined these two parentheses at
02:16 - the end is are going to execute that
02:18 - function and put the execution of that
02:20 - function into the variable counter and
02:23 - the so it's going to return when it
02:25 - executes the function it's going to
02:27 - return this into the aable counter so
02:31 - this is actually first going to create a
02:33 - shared environment and then it's going
02:35 - to um send out some things into the
02:37 - variable counter so the Shar environment
02:40 - involves the private our private counter
02:42 - zero and the function change by value
02:46 - which is private counter and then it's
02:48 - going to add the value and then assign
02:51 - the the added value to private counter
02:54 - it's going to increase private counter
02:55 - by the value so then we're going to
02:57 - return these functions and um because
03:01 - these functions have been returned into
03:03 - the counter you are only going to be
03:05 - able to access these functions from
03:08 - outside of the counter so these are
03:11 - going to be private and these are going
03:14 - to be the the public methods so we're
03:17 - returning the increment function change
03:19 - by one it calls change by one and see
03:22 - this increment method that's being
03:25 - created can access the change by method
03:30 - because it's in the environment that it
03:32 - was created in this decrement can access
03:35 - the change by because it's in the
03:36 - environment that was created in and this
03:38 - value can return the private counter
03:42 - variable because that's within the the
03:43 - environment it was created in so neither
03:46 - of the private items can be accessed
03:48 - directly from outside of the anonymous
03:50 - function but they can just be accessed
03:53 - by the three public functions that are
03:55 - returned from the anonymous rapper these
03:57 - are the public functions thanks to
03:58 - javascript's Lux School scoping that
04:00 - each have access to the private counter
04:02 - variable and the change by function so
04:04 - let's see this in action we're going to
04:06 - console doog counter. value counter.
04:09 - value and then we're going to increment
04:11 - it we're going to increment it again
04:13 - then we're going to counter. log count
04:15 - console. log it again then we're going
04:16 - to decrement and then console.log so let
04:18 - me run this and see the first time the
04:22 - counter is zero after two increments
04:25 - it's two and then we decrement it's one
04:28 - well thanks for watching I hope this
04:30 - gave you a good introduction to closures
04:32 - my name is boars and if you check the
04:34 - description you can look for some links
04:36 - that where you can get some more
04:37 - information about closures including a
04:40 - link where I got a lot of the
04:41 - information for this video please
04:43 - subscribe and remember use your code for
04:45 - good

Cleaned transcript:

closures a closure is the combination of a function and the environment within which that function was declared the environment consists of any local variables that were in scope at the time that the closure was created in JavaScript all functions form closures in other languages without closures the local variables within a function only exist for the duration of that function's execution let's look at an example so we have this function make Funk and we have the our name equals JS nuggets and then we have another function within the function display name where we're going to console.log the name and this function make Funk is going to return the display name the other function so down here we're going to create um the my funk equals make Funk which is we're making a variable that's this function and we're going to run my funk now it's going to return display name now if we run that it's going to display JS nuggets so it's returning this function inside that function there is no name but because of closures this function that's been that's being returned and run here has access to the environment with that was created in which means it has access to this JS nuggets the name variable even though this the name isn't even in here so that's basically what a closure is so the function has access to any variable that's within the scope or the environment that was created in now let's look at some more some more practical examples a closure lets you associate some data which is the environment with a function that operates on that data one way to use a closure is to emulate private methods private methods can only be called by other methods in the same class but JavaScript does not have a native way of doing this it is possible to emulate private methods with closures okay let's look at this we have a our counter and this is assigned to an anonymous function and here's the anonymous function right here and as soon as the anonymous function is assigned it's executed as soon as it's been defined these two parentheses at the end is are going to execute that function and put the execution of that function into the variable counter and the so it's going to return when it executes the function it's going to return this into the aable counter so this is actually first going to create a shared environment and then it's going to um send out some things into the variable counter so the Shar environment involves the private our private counter zero and the function change by value which is private counter and then it's going to add the value and then assign the the added value to private counter it's going to increase private counter by the value so then we're going to return these functions and um because these functions have been returned into the counter you are only going to be able to access these functions from outside of the counter so these are going to be private and these are going to be the the public methods so we're returning the increment function change by one it calls change by one and see this increment method that's being created can access the change by method because it's in the environment that it was created in this decrement can access the change by because it's in the environment that was created in and this value can return the private counter variable because that's within the the environment it was created in so neither of the private items can be accessed directly from outside of the anonymous function but they can just be accessed by the three public functions that are returned from the anonymous rapper these are the public functions thanks to javascript's Lux School scoping that each have access to the private counter variable and the change by function so let's see this in action we're going to console doog counter. value counter. value and then we're going to increment it we're going to increment it again then we're going to counter. log count console. log it again then we're going to decrement and then console.log so let me run this and see the first time the counter is zero after two increments it's two and then we decrement it's one well thanks for watching I hope this gave you a good introduction to closures my name is boars and if you check the description you can look for some links that where you can get some more information about closures including a link where I got a lot of the information for this video please subscribe and remember use your code for good
