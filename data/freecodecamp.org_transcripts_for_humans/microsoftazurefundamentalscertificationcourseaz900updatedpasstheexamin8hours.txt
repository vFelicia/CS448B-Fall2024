With timestamps:

00:00 - hey it's Andrew Brown your favorite
00:01 - Cloud instructor over here on free Camp
00:04 - bringing you another free Cloud
00:06 - certification study course and this time
00:08 - it's the Azure fundamentals also known
00:11 - as the
00:11 - a900 and the way we're going to achieve
00:14 - Microsoft certification is by watching
00:17 - those lecture videos doing those
00:18 - Hands-On labs and as always I'm going to
00:21 - provide you a free practice exam so you
00:24 - can go get that certification putting
00:26 - your resume uh putting on your LinkedIn
00:28 - and go uh get that a cloud roll you've
00:30 - been looking to get if you love these
00:33 - kinds of uh Cloud certification study
00:35 - courses the best way to support more
00:37 - free courses just like this one is to
00:39 - purchase the paid optional materials
00:41 - it's going to help you uh increase your
00:43 - odds of passing the exam and it just
00:46 - helps the production of these courses um
00:49 - and if you don't know me I'm Andrew
00:50 - Brown and I've taught a lot of different
00:52 - Cloud certification study courses here
00:54 - uh we've done adabs Azure gcp kubernetes
00:57 - terraform you name it I've taught it uh
01:00 - but that's about it let's go ahead and
01:02 - learn some Azure and I'll see you soon
01:08 - ciao hey this is Andre Brown and welcome
01:11 - to the Microsoft Azure fundamentals and
01:13 - we're asking the most important question
01:15 - uh first which is what is this
01:17 - certification well uh the Azure
01:19 - fundamentals is the entrylevel cloud
01:21 - certification for Microsoft Azure or
01:24 - Azure uh and you'll see me alternate
01:26 - between those uh pronunciations they're
01:28 - both accepted so whichever you prefer um
01:31 - there is no prerequisite for this
01:34 - certification uh but you should probably
01:36 - have a little bit of it experience but
01:38 - if you don't it's totally fine if you're
01:40 - totally new to Cloud you still be okay
01:42 - here uh the key topics that we are
01:44 - covering is understanding the basics of
01:45 - cloud computing exploring the benefits
01:47 - of using cloud services uh and looking
01:50 - at those core Services the those being
01:52 - Computing networking storage and
01:54 - databases understanding identity
01:56 - security governance so you know one
01:58 - example for identity would would be
02:00 - entra ID previously known as Azure ad
02:02 - something you'll hear again and again
02:04 - through all the uh Microsoft
02:06 - certification courses um understanding
02:09 - how pricing Works things like
02:11 - subscriptions uh and cost management
02:13 - tools and uh learning about the tools
02:15 - available for managing Azure resources
02:17 - uh such as Azure portal or the SDK or
02:20 - the CLI and things like that uh
02:22 - Microsoft Azure is the second leading
02:24 - cloud service provider in the world the
02:26 - first being AWS but uh let that not uh
02:30 - discourage you because Azure is still an
02:32 - extremely uh great uh cloud service uh
02:35 - to use and um it's used quite a lot so
02:39 - Azure fundamentals is a very common
02:41 - starting point for people breaking the
02:42 - cloud U similar to the ads Cloud
02:45 - practitioner so both are really great
02:46 - entries uh into Cloud who's the
02:49 - certification for well consider this uh
02:51 - fundamental certification if you're new
02:53 - to cloud and you want to learn the
02:54 - fundamentals and benefits adopting cloud
02:56 - services in general you are from a
02:58 - non-technical background such as an
03:00 - executive management or sales level and
03:02 - you need to acquire strategic
03:03 - information about uh Cloud for adoption
03:06 - or migration you want to understand the
03:08 - capabilities of azure and how to build
03:10 - basic Solutions and deploy cloud
03:12 - services in your organization very very
03:14 - basic but I mean the the objective of
03:17 - these fundamental certifications is not
03:19 - to really teach you how to build Cloud
03:22 - workloads um that is more at associate
03:24 - level but we'll talk about that later on
03:26 - uh or you're a senior Cloud engineer or
03:28 - solution architect or or Cloud architect
03:31 - who needs a reset or refresh their
03:33 - knowledge after working with Azure for
03:35 - multiple years but maybe you didn't
03:36 - notice some things change so it's a
03:38 - great uh revisit to get an idea of what
03:42 - is going on here so what is the value of
03:44 - the certification well the fundamentals
03:46 - is uh provides the most expensive view
03:48 - possible for um Cloud architecture and
03:51 - Azure uh I like to say this is going to
03:54 - provide you a bird's eyee view or the
03:56 - 50,000 foot view so we're going to cover
03:58 - a lot of stuff uh but it's not going to
04:00 - be uh as detailed as you would imagine
04:04 - but uh the idea here is to promote big
04:06 - picture thinking zooming out and
04:07 - assessing the cloud and Azure landscape
04:09 - for changes Trends opportunities uh and
04:13 - being strategic about the approach and
04:14 - process for our Cloud Journey okay um
04:18 - the Azure fundamentals is not a
04:20 - difficult exam it will not validate that
04:22 - you can build Cloud workloads um for
04:25 - technical roles such as developer
04:26 - engineer devops it's not going to be
04:28 - enough to obtain those roles but it it's
04:31 - possible that it could short list your
04:32 - resume for interview um the exam covers
04:35 - content not found in other
04:36 - certifications so strongly recommend
04:38 - that you take this as your foundational
04:40 - certification a lot of people like to
04:41 - skip fundamentals because they they
04:44 - think that they're easy yes the
04:45 - certification easy but the exam content
04:48 - has a lot of stuff in it especially mine
04:50 - because I pack in a ton of stuff that I
04:52 - just I'm not going to put it the next
04:53 - level because I'm going to assume that
04:55 - you taking this course and getting all
04:57 - that knowledge there uh the a900 00 lays
05:00 - a a gr foundation for Specialized or
05:03 - specialization for Azure certifications
05:05 - and is a stepping stone for professional
05:07 - de development in cloud services so
05:09 - definitely there is value in the a900
05:12 - let's go take a look at the Azure road
05:13 - map and this is not all of the Asher
05:16 - certifications and Microsoft
05:17 - certifications they just have too many I
05:19 - cannot fit them all on screen here and
05:22 - um I think all the course codes are up
05:24 - to date but they're changing them all
05:26 - the time so uh it's possible that they
05:28 - might be incremented by some verions but
05:30 - the the entry we have the Azure
05:32 - fundamentals there are other fundamental
05:34 - certifications um we have the AI 900
05:38 - which is for AI we have the dp900 which
05:40 - is for data uh we have the sc900 which
05:43 - is for security but again I don't have
05:45 - room for all that so I'm not showing
05:46 - them on here so I'm showing you the path
05:48 - that is commonly uh completed after
05:51 - taking the a900 so you have uh some
05:53 - associate certifications you have a
05:55 - couple expert certifications you have
05:57 - specialty certifications there's
05:58 - definitely more Associates there's
06:00 - definitely more Specialties but there's
06:02 - always the two Pros or experts I should
06:04 - say so getting my a handy pen out here
06:07 - very often what people go for after the
06:09 - fundamentals is the administrator the
06:12 - a104 this is the most common path uh for
06:16 - those that are going to their next step
06:18 - in their Azure journey and a lot of
06:20 - times people are going for that
06:21 - Solutions architect expert which is over
06:23 - here but before you do that you really
06:25 - want to go and grab that uh uh developer
06:28 - the a 204 these are the uh this is the
06:31 - the the most common strategy right here
06:34 - is uh these but of course it really
06:36 - depends on what you're doing if you're
06:39 - doing security you have the sc900 and
06:41 - then there's three different associate
06:43 - level security
06:44 - certifications uh if you are going after
06:47 - data that's a whole different track so
06:49 - it's going to really vary based on that
06:51 - but um again you know this is the most
06:53 - common track and even if you go uh do
06:55 - all of this and you want to do something
06:56 - else that's totally fine because this is
06:58 - going to lay a very very very strong
07:00 - Foundation uh and give you really good
07:02 - skills in Azure so how long does it take
07:04 - to study for this certification well if
07:06 - you're a beginner we're looking at about
07:09 - 30 hours and this is someone that's
07:10 - never written uh or used Azure or any
07:13 - cloud provider have never written any
07:15 - code or held a tech role technically the
07:17 - certification doesn't require you to
07:19 - code but I really want to make sure that
07:22 - I set you up really well because in
07:24 - Azure uh coding and scripting and that
07:27 - kind of stuff is way more important than
07:30 - any other cloud provider uh because you
07:32 - come across it a lot more and so I've
07:34 - stuck in a bunch of coding stuff and it
07:37 - is very challenging for beginners but I
07:39 - want to try to get you um best prepared
07:42 - as possible because when you go to the
07:43 - associate level with like the a104 it is
07:46 - so much more difficult so I made this
07:49 - much harder than it had to be to prepare
07:51 - you for the next level despite the exam
07:54 - okay so uh again 30 hours on that side
07:56 - if you're experienced uh then you're
07:58 - already working with that Azure or you
08:00 - maybe are you've worked in eight of us
08:01 - in gcp and you are trying to pick up
08:03 - Azure the it could be as little as 6
08:05 - hours um so you know generally the study
08:09 - time is 24 hours and I would say it's
08:11 - split between uh lectures and labs and
08:14 - then you have your practice exams so
08:16 - just make sure that you put your time uh
08:18 - in with the practice exams practice
08:20 - exams are very very very very very
08:23 - important for Azure because Azure has
08:25 - all these different question types and
08:27 - we'll talk about that in a moment but
08:29 - yeah the recommend studies is 1 to two
08:30 - hours a day for 14 days take your time
08:33 - let it absorb uh you could finish it in
08:36 - a couple days but don't do that you know
08:39 - make sure that you are acquiring the
08:40 - knowledge for long term and the the best
08:42 - way to do that is to take your time uh
08:45 - and and not try to pass it in a weekend
08:48 - um what does it take to pass the examp
08:49 - well you got to watch those lecture
08:51 - videos you got to do those Hands-On labs
08:53 - and fall alongs within your own account
08:55 - uh strongly recommend that you do uh
08:57 - some paid online practice exam
08:59 - uh we give you a full free practice exam
09:01 - like a full set uh which is on our
09:04 - platform there we have a lot of practice
09:06 - exams you can get that at exampro doco
09:09 - a900 and really helps support the course
09:12 - here uh where do you take the exam well
09:14 - you're going to either take it in person
09:16 - at a test center or the convenience of
09:18 - your home um and uh so I would just say
09:22 - just a second
09:24 - here sorry about that b is knocking on
09:26 - my door door beo is the other Andrew uh
09:29 - who you you'll hear me talk about uh bo
09:32 - a bit throughout the course but uh he's
09:34 - the other person that works with me
09:36 - that's never on camera you never see him
09:38 - but um he helps uh do a lot of the work
09:40 - over here uh with uh the platform and um
09:44 - creating the content but anyway so Azure
09:46 - uh delivers exams via I got to reclick
09:50 - here um and the click's not working
09:52 - there we go uh Pearson view uh is the
09:54 - proctoring system that Microsoft uses in
09:57 - the past there used to be a bunch of
09:59 - ones there's Criterion uh which Google
10:01 - used to use Google Cloud there's PSI
10:04 - online which um adab us like to use but
10:07 - for whatever reason both um adabs and um
10:12 - Microsoft exclusively only use Pearson
10:15 - view now and I think um gcp is now using
10:18 - PSI online and everyone else uses PSI um
10:21 - for whatever reason but yeah you have to
10:23 - use Pearson View and you can do it
10:25 - online or Pearson view has a uh a
10:27 - network of test centers that uh you can
10:30 - go to in person personally I recommend
10:33 - that you go in person if you can because
10:35 - if there is a test center near you the
10:37 - whole environment is controlled it's
10:38 - going to be a lot less stressful whereas
10:41 - if you do it from home uh you know if
10:43 - you have family or you have uh the least
10:46 - ideal place to uh set up uh because you
10:49 - have to have a non-cluttered room and
10:52 - they have to inspect your room and
10:54 - things can go wrong so I'm just saying
10:56 - if you have that opportunity to go to an
10:57 - iners inperson test center Center
10:59 - leverage that if you can't that's okay
11:01 - do what works for you but understand
11:03 - that these certifications are proctored
11:06 - uh so uh when you go sit that exam there
11:08 - is someone who is monitoring you to make
11:10 - sure that you are not cheating um in
11:13 - terms of the content outline there is
11:14 - three domains I think there used to be
11:16 - more but they grouped them into three
11:18 - I'm not sure why uh each domain has its
11:20 - own waiting and and that determines how
11:22 - many questions in a domain will show up
11:24 - so we'll look take a look there
11:26 - something that's really interesting
11:27 - about Azure exam is that they um they
11:31 - don't give you the same amount of
11:33 - questions uh per person so they'll give
11:36 - you like you like you might sit the exam
11:39 - and get 35 and your friend might get 40
11:41 - so I had to give ranges here in terms of
11:44 - um uh the the percentage that will
11:46 - appear on your exam so we have
11:48 - describing Cloud Concepts which is 25 to
11:50 - 30% so you're going to get about 13 to
11:53 - 15 questions describe Azure architecture
11:55 - and services that's 35 to 40% that is
11:58 - the majority of uh the certification
12:00 - most fundamentals is about learning all
12:02 - the services uh that the cloud service
12:05 - provider is providing then we have
12:07 - describe Azure management and governance
12:09 - so that's uh 30 to 35% with 14 to 16 uh
12:12 - 16 questions there is uh subdomains
12:15 - under each of these so of course
12:17 - security is in there and all those other
12:18 - things are in there but we'll have to
12:20 - open up the exam guide uh to see that
12:22 - okay so um again you know just pointing
12:25 - out that that domain 2 is the largest
12:28 - one there so make sure that we we're
12:31 - going to make sure that we know a wide
12:32 - range of azure services but we're also
12:34 - going to make sure we know in depth a a
12:37 - bit more about those core Services let's
12:40 - talk about grading you got to get 700
12:42 - points out of a th000 so um that's about
12:45 - 70% we say around because Azure uses
12:48 - skilled scoring meaning that it doesn't
12:50 - necessarily mean you get 70% and you
12:52 - pass um you could technically pass with
12:55 - 71% or sorry fail with 71% but you could
12:59 - also technically pass with 69% so just
13:01 - understand it's not based on percentage
13:04 - it's based on a point system in terms of
13:06 - what kind of questions you'll be getting
13:08 - well first let's talk about the range of
13:09 - questions but you can get between 35 to
13:11 - 50 I us say 37 to 37 to 50 um it's
13:16 - confusing because I don't know how they
13:20 - determine how many you get uh when I sat
13:22 - my exam I got about 35 questions some
13:25 - people get more uh it's really really
13:28 - tricky to to nail that down there so you
13:31 - know we say about 10 to 14 questions you
13:34 - have you can afford to get wrong there
13:36 - are no penalty for wrong questions so
13:39 - absolutely uh always fill in the answers
13:41 - in terms of formatting questions uh we
13:43 - have multiple choice multiple answer
13:45 - drag and drop yes and no I do need to
13:47 - point out that uh when you go and take
13:50 - uh associate level and expert level
13:52 - certifications with Microsoft they have
13:55 - way more um question types and
13:59 - uh just to help prepare you uh for that
14:02 - level of difficulty and it doesn't
14:04 - appear in these exams but in our
14:06 - practice exams we try to put in uh case
14:09 - studies so case studies is a much more
14:11 - advanced um exam type question and you
14:14 - know I really feel that we need to do
14:16 - that because if we don't uh you're going
14:18 - to feel like you're ready for the AZ 104
14:21 - and you're going to get totally
14:22 - blindsided because again the difficulty
14:24 - ramp is super hard so again we're
14:26 - increasing the difficulty for your
14:28 - benefit uh so if you feel like uh this
14:30 - course is hard that's good because it's
14:33 - going to make the next one really really
14:35 - easy for you uh in terms of duration
14:37 - apparently it's 45 minutes I cannot
14:40 - remember how long it was when I sat it
14:42 - uh and when you search the internet it's
14:44 - very difficult to determine that number
14:47 - uh Microsoft does not make it easy to
14:49 - find out that number you think that they
14:50 - would other cloud service providers
14:53 - their certification exams they tell you
14:55 - right on the same page good luck finding
14:57 - it on azure but uh 45 minutes would
15:00 - still leave us with about one minute per
15:02 - time again it depends if you get the 35
15:04 - questions or 45 questions so we're going
15:07 - to have to say about a minute uh so
15:09 - we'll say the exam time is 45 minutes uh
15:12 - some people say the seat time is 60 to
15:14 - 65 minutes when we say SE time we we're
15:16 - talking about the time you should
15:18 - allocate for the exam that includes
15:20 - things like time to review instructions
15:22 - read and accept the NDA complete the
15:24 - exam provide the feedback at the end now
15:26 - personally I think that the seat time
15:28 - should always be 30 minutes on top of
15:30 - whatever that is so if it's 45 minutes
15:33 - it really would be um 75 minutes or 70
15:37 - minutes or something like that so uh you
15:40 - know anyway if you got a 45 minute exam
15:43 - show up 30 minutes or 35 minutes earlier
15:45 - because if you're checking in especially
15:47 - online you got to uh pull out your uh
15:50 - government ID you got to make sure the
15:53 - lighting is right and then it scans it
15:54 - in if things go wrong uh you know it's
15:57 - going to cut in your time so give
15:59 - yourself ample time and don't get
16:00 - stressed out um uh for that okay so
16:04 - these certifications are uh for
16:06 - Microsoft are valid Forever This is
16:08 - specific for fundamental certifications
16:10 - so if you take the um any one that has
16:12 - 900 in the name so a900 dp900 AI 900
16:18 - sc900 PL 900
16:21 - ms9900 you get in the pattern here if it
16:23 - says 900 in the name it's a fundamentals
16:25 - those certifications do not expire um
16:29 - and so I just want to make that very
16:31 - very very clear um for the other levels
16:35 - like associ expert um I think it's two
16:38 - years it's either two or three years but
16:41 - uh the interesting thing is that if you
16:43 - want to get
16:44 - recertified um you don't have to pay to
16:47 - take the exam again you can take a
16:49 - simpler test to U make sure that your
16:51 - knowledge is up to date and I think it's
16:53 - free so uh that's a great advantage that
16:56 - Microsoft has at the associate and
16:57 - expert level specialty level but uh yeah
17:00 - there we go and I'll see you in the next
17:03 - [Music]
17:07 - one all right so I went on to the
17:09 - internet and I searched for a900 and
17:10 - we've ended up on the learn.
17:12 - microsoft.com the reason I want to show
17:14 - you this page is to uh get more familiar
17:16 - with where we actually get the
17:18 - information um so that you can read up
17:21 - about about it if we didn't answer
17:22 - everything or if anything has changed um
17:25 - but it's good good good to be familiar
17:26 - with these pages so once you're here
17:28 - here uh on the
17:30 - a900 um what they'll have down below
17:32 - here is the study guide now the study
17:34 - guide used to be in a PDF format and for
17:36 - whatever reason Azure has just made it a
17:38 - website with all the other study guides
17:41 - here I really don't like this format um
17:43 - I find that it's very hard to find uh
17:45 - information and to read it I really
17:47 - prefer the old PDF but that's never
17:49 - coming back or if it is it's somewhere
17:51 - else and I don't know where it is but
17:53 - what we can see over here um is the
17:57 - actual breakdown so so we have Cloud
17:59 - Concepts and so we think see things like
18:01 - defining cloud computing share
18:03 - responsibility model the um different uh
18:06 - deployments of cloud um and a bunch of
18:08 - other stuff
18:10 - here um you can see describing the cloud
18:13 - service types now at one point they
18:14 - actually removed this and now it's back
18:16 - so that's really interesting I don't
18:17 - know why they ever removed it to begin
18:19 - with but it's good to see that that is
18:21 - uh returning we have uh I call This
18:24 - Global uh infrastructure or uh and uh
18:27 - cloud networking so they call this core
18:30 - Architectural Components which I suppose
18:32 - some of these things are but this is
18:34 - more like a billing thing and this is
18:35 - more Global
18:37 - infrastructure then we have Azure comput
18:39 - and networking services so we're
18:40 - recovering virtual machines functions
18:42 - skill sets availability sets uh Azure
18:44 - virtual desktop now we don't have to do
18:46 - all these things um and we aren't going
18:48 - to do all these things because some of
18:49 - these things are really hard like Azure
18:51 - virtual desktop is not an easy task but
18:53 - we need to know what they are we are
18:55 - going to launch a virtual machine uh and
18:58 - uh play around with that a little bit we
18:59 - are going to launch an Azure function um
19:02 - then we have storage services so we do a
19:05 - lot with Azure uh storage because it is
19:08 - uh cheap and easy to use uh then we need
19:11 - to know how to perform different
19:12 - operations with Azure um Azure storage
19:16 - there then we have Azure identity access
19:18 - and security so um again this is a
19:21 - subcategory under here or subdomain so
19:23 - we need to know a bunch of things about
19:25 - security I'm just going to tell you that
19:27 - some of the content is going to say
19:29 - Azure ID some of it's going to say
19:31 - Microsoft Entre ID um Microsoft for some
19:34 - crazy reason decided to change the name
19:36 - of azure ad even though everybody was
19:38 - fine with it it confuses uh myself and
19:41 - Boo and everyone else to this day so
19:44 - just understand that some of it's Azure
19:46 - ID some of it's Microsoft entra ID but
19:48 - this is this is really what's going to
19:49 - be going forward okay we have described
19:53 - cost Management in Azure so that uh
19:55 - that's TCO so more pricing stuff here um
19:58 - a Azure purview Azure
20:01 - policy we have the Azure portal which is
20:04 - just the platform which we use
20:05 - everything Azure Arc which uh I guess
20:08 - it's okay to know uh we actually do a
20:10 - lot of interesting coding here so I show
20:13 - you how to do IC with um arm templates
20:15 - and Azure bicep and
20:19 - terraform uh so that stuff's fun there
20:22 - we look at uh monitoring tools so we
20:24 - look at Azure service Health Azure
20:26 - advisor all sorts of fun stuff now there
20:28 - could be other stuff that appears exam
20:30 - that's uh uh not on here and so we just
20:33 - do a very thorough job to show you uh
20:36 - basically everything and just to kind of
20:38 - round out your knowledge but again it's
20:40 - very difficult to um to find all the
20:45 - details like the time of the exam and
20:47 - the amount of questions they really just
20:50 - do not make this easily available here
20:52 - if anyone finds it please tell me
20:53 - because I sure can't find it and uh the
20:56 - only way I know is by Sting the exam and
20:58 - I have to remember those details
20:59 - afterwards they do show what kind of
21:01 - changes that they make um so they're
21:03 - always making teeny tiny changes but try
21:05 - not to worry about that too much because
21:07 - we do ensure to include a lot of stuff
21:10 - here and this exam is up to date and and
21:13 - and the fresh and as fresh as it can be
21:16 - as of this recording but you know I find
21:18 - that even two years out people are
21:20 - passing uh like people are passing the
21:22 - the current exam with the old the old
21:25 - one um which is which is really
21:27 - interesting so it just shows you that
21:30 - not much changes on those exams okay but
21:33 - anyway that's that another thing I want
21:35 - to show you is the exam s sandbox so
21:38 - this uh emulates the Pearson view uh
21:40 - kind of experience and it'll just show
21:42 - you some of the question formats now uh
21:44 - we are under here for the a900 and it
21:46 - might show us more exam types than what
21:48 - we'll actually see on the exam so go
21:51 - here this just has 10 questions it's
21:52 - going to just show us all the types so
21:54 - here we have multiple choice then we
21:57 - have multiple select I'm not looking at
22:00 - what the correct answers are or reading
22:02 - any of it I'm just showing you here I
22:04 - believe that we drag these into these
22:05 - areas here so that's this
22:07 - one then this one is your answer area
22:10 - and you're bringing them over and then
22:11 - you're trying to uh determine the order
22:14 - so you're changing the order here then
22:17 - this one's an answer area so we go here
22:19 - and it's just an image and this is
22:22 - draggable we have this one here so we
22:24 - look at this graphic and we try to match
22:27 - it based on this information we read it
22:29 - very
22:30 - clearly this one here
22:33 - um uh what is this for a hot area so hot
22:37 - area is you have a Graphic very similar
22:38 - to that other one but you click it it's
22:40 - almost like you're kind of interacting
22:42 - with it but you're not it's just an
22:43 - image then we have a case study so this
22:46 - is something that we absolutely
22:47 - absolutely give you in our platform and
22:49 - you will not see this on your exam but
22:51 - we give you this exam question type
22:53 - anyway because it's super important uh
22:55 - to get that kind of experience you
22:57 - notice this one's a little bit more uh
23:00 - robust in terms of the information and
23:02 - so there are other things um yeah
23:05 - another thing with case studies is when
23:07 - you do a case study you basically get a
23:09 - series of questions around this case
23:12 - study right and it went to the next part
23:16 - and it's kind of like a mini exam inside
23:17 - the mini exam I'll show you case studies
23:19 - in another video so I know I'm going
23:21 - really quick there but uh we'll come
23:23 - back to that then sometimes you have uh
23:25 - these additional tabs so this is kind of
23:28 - like a minic case study for just a
23:30 - particular question but they might say
23:32 - hey uh check out the exhibit and you
23:34 - have to look at the exhibit come back
23:35 - and then answer the question so there's
23:39 - that and then sometimes there's multiple
23:42 - exhibits so yeah but uh yeah there you
23:45 - go so that is the um the sandbox there
23:49 - so hopefully that gives you a good idea
23:51 - the price might vary based on where you
23:53 - live so if we go to Canada I'm not sure
23:56 - what the price is in Canada so we go
23:58 - here and it still shows
24:00 - $199 USD we go somewhere else does it
24:03 - ever show a different price sometimes it
24:06 - does okay for some reason Canada gets a
24:08 - bad price but uh some other places do a
24:11 - little bit better so understand that
24:12 - that price is going to fluctuate based
24:13 - on where you live um yeah hopefully that
24:17 - gives you an idea of the uh exam and
24:21 - we'll see you in the next one okay
24:26 - ciao
24:28 - hey this is Andrew Brown from exam Pro
24:30 - and we are at the start of our journey
24:31 - asking the most important question first
24:33 - which is what is cloud computing so
24:36 - cloud computing is the practice of using
24:38 - a network of remote servers hosted on
24:40 - the internet to store manage and process
24:42 - data rather than a local server or
24:44 - personal computer and so when we're
24:46 - talking about on premise you own the
24:48 - servers you hire the IT people you pay
24:51 - or rent the real estate you take all the
24:53 - risks but with a cloud provider uh
24:56 - someone else owns the servers someone
24:57 - someone else hires the IT people someone
24:59 - else pays or rents the real estate and
25:01 - you are responsible for configuring
25:03 - cloud services and code and someone
25:05 - takes care of the rest of it for you
25:07 - okay so to understand cloud computing we
25:10 - need to look at the evolution of cloud
25:12 - hosting going all the way back to 1995
25:14 - where if you wanted to host your website
25:16 - or web app you'd have to get a dedicated
25:18 - server so that would be one physical
25:20 - machine dedicated to a single business
25:23 - running a single project a site or an
25:25 - app and as you can imagine these are
25:27 - expensive because you have to uh buy
25:29 - outright the hardware have a place to
25:31 - store it the network connection having a
25:34 - person to maintain it um but it did give
25:36 - you a guarantee of high security um and
25:39 - they still do as of today so this model
25:40 - hasn't gone away but it's been
25:42 - specialized for a particular use case
25:44 - then came along the virtual private
25:46 - server so the idea is we still had one
25:48 - physical machine but now we were able to
25:51 - subdivide um our machine into
25:53 - submachines via
25:55 - virtualization and so essentially you're
25:57 - running a machine machine within a
25:58 - machine and so you had better
26:00 - utilization of that machine um running
26:03 - multiple web apps as opposed to having a
26:04 - physical machine per project so you got
26:07 - better utilization and isolation of
26:10 - resources and so uh these two options
26:12 - still required you to purchase a machine
26:15 - a dedicated machine and so that was
26:17 - still kind of expensive but then came
26:18 - along shared hosting and so if you
26:20 - remember uh the mid 2000s like with
26:23 - GoDaddy or HostGator or any of those
26:25 - sites where you had really cheap posting
26:28 - the idea is that you had this one
26:29 - physical machine shared by hundreds of
26:32 - businesses and the way this worked it
26:34 - relied on uh tenants underutilizing
26:36 - their resources so you know you wouldn't
26:38 - have a submachine in there but you'd
26:40 - have a folder with permissions that you
26:42 - could use um and so you would really
26:45 - share the cost and this was very very
26:46 - cheap um but you were limited to
26:49 - whatever that machine could do and you
26:51 - were very restricted in terms of the
26:53 - functionality you had and there was just
26:55 - poor isolation meaning that you know if
26:57 - one person decided to utilize a server
26:59 - more they could hang up all the all the
27:01 - websites on that single server then came
27:04 - along Cloud hosting and the idea is that
27:06 - you have um multiple physical machines
27:08 - that act as one system so this is
27:10 - distributed computing and so the system
27:12 - is abstracted into multiple cloud
27:14 - services and the idea is that you
27:16 - basically get the advantages of a lot of
27:18 - the things above so it's flexible you
27:21 - can just add more servers um it's
27:23 - scalable it's very secure because you
27:25 - get that uh virtual isol Iz ation you
27:28 - get it extremely at a low cost because
27:30 - you're sharing that cost with the users
27:32 - where in the shared hosting it might be
27:33 - hundreds of businesses we're looking at
27:35 - thousands of businesses and it was also
27:38 - highly configurable because it was a
27:39 - full virtual machine now uh Cloud
27:41 - actually uh still includes all of these
27:44 - types of Hosting they haven't gone away
27:47 - uh but it's just the idea that you now
27:48 - have more of a selection for your use
27:50 - case uh but hopefully that gives you an
27:51 - idea what cloud hosting looks like and
27:54 - it really has to come down to
27:55 - distributed computing okay
28:00 - [Music]
28:01 - hey this is Andrew Brown from exam Pro
28:03 - and we are looking at common cloud
28:05 - services so a cloud provider can have
28:08 - hundreds of cloud services are grouped
28:11 - uh into various types of services and
28:13 - the four most common types of cloud
28:15 - services for infrastructure as a service
28:17 - uh and we'll talk about what that is
28:19 - later on uh would be compute so this is
28:22 - where you have a virtual computer that
28:24 - can run applications programs and C uh
28:26 - code then you have storage so this is
28:29 - where you would have uh virtual hard
28:31 - drives that you could store files uh
28:33 - then you'd have virtual networking
28:35 - because you have these computers and
28:37 - storage so you need to uh put them in
28:39 - some kind of virtual Network and then
28:41 - you have databases so uh just imagine um
28:45 - a database that is running in the cloud
28:47 - or uh if you're not familiar with
28:48 - databases just imagine that it's excel
28:50 - in the cloud but it Powers your web apps
28:53 - uh and one thing I want you to know
28:54 - about the term cloud computing is that
28:57 - you even though it says Computing in the
28:59 - word uh at this point we just use it as
29:01 - a catall term so it could refer to all
29:04 - of these categories so when I say cloud
29:05 - computing I could be referring to
29:07 - compute network storage and databases
29:09 - but you can also say cloud storage Cloud
29:11 - compute Cloud databases Cloud networking
29:14 - and people will know what you
29:16 - [Music]
29:20 - mean hey this is Andrew Brown from exam
29:22 - Pro and we are looking at what is
29:24 - Microsoft so you've probably seen this
29:26 - logo before and and Microsoft is an
29:28 - American multinational computer
29:29 - technology corporation headquartered in
29:31 - Redmond uh Washington and Microsoft
29:34 - makes software phones tablets game
29:36 - consoles cloud services which is uh what
29:39 - we care about here today and they even
29:41 - have a search engine uh and we're not
29:43 - just limited to that list they have tons
29:45 - of stuff but Microsoft is best known for
29:48 - uh their oper operating system called
29:50 - windows and they've been around since
29:51 - the
29:52 - 1970s so uh they've been around for
29:55 - quite a while in the tech sphere uh so
29:57 - now that leads us to the question is
29:59 - what is azure so Azure is what Microsoft
30:01 - calls their cloud provider Service uh
30:04 - and so it's called Microsoft Azure or we
30:06 - commonly refer to it as just Azure uh
30:09 - and so here is the logo for it if you're
30:12 - wondering what is the name behind the
30:14 - service it means bright blue color of
30:17 - the cloudless sky so sure that's great
30:21 - um and so uh you'll hear me say cloud
30:24 - service provider frequently with
30:26 - throughout this course and it is
30:27 - abbreviated to CSP but that's what Azure
30:30 - is it is a cloud service provider so
30:33 - there you
30:34 - [Music]
30:37 - go hey this is Andrew Brown from exam
30:40 - Pro and we are looking at the benefits
30:41 - of cloud computing so what are the
30:43 - benefits well we have a big list here
30:45 - for you starting with cost Effectiveness
30:47 - so you pay for what you consume there is
30:49 - no upfront cost you pay as you go also
30:52 - abbreviated as P YG uh and you're
30:54 - sharing the cost with thousands of
30:56 - customers so that's how you're getting
30:57 - that uh that low low cost another
31:00 - benefit is that uh you can go Global so
31:02 - launch workloads anywhere in the world
31:04 - just choose your region um and uh you
31:07 - are now in the global market uh another
31:10 - benefit is uh the the cloud is secure so
31:13 - Cloud providers take care of the
31:14 - physical security and cloud services can
31:16 - be secur by default or you have the
31:18 - ability to configure access down to the
31:20 - granular level so you have a lot of
31:22 - security controls that you would have
31:23 - that you you would normally not have or
31:25 - you'd have to build out on pram
31:28 - now the cloud is also known for being
31:29 - reliable so you can have data backups
31:32 - disaster recovery and data replication
31:34 - and fault tolerance uh the cloud is also
31:37 - scalable you can increase or decrease
31:38 - your resources and services based on the
31:41 - demand uh the cloud is also elastic so
31:44 - you can automate scaling during spikes
31:47 - and and drop the demand when uh there is
31:50 - no longer the demand for that stuff uh
31:52 - and it's also current so the underlying
31:54 - Hardware in manage software is patch
31:56 - upgraded and replaced by the cloud
31:57 - provider without interruption to you uh
32:00 - and I mean the last one there is cases
32:02 - of interruption but generally fewer
32:04 - interruptions than you would have on
32:05 - Prem so there you
32:07 - [Music]
32:10 - go hey this is Andrew Brown from exam
32:13 - Pro and we are looking at the different
32:15 - types of cloud computing and we have
32:17 - this nice pyramid on the left hand side
32:18 - to help us understand um how each type
32:21 - builds off the other starting at the top
32:23 - of our pyramid we have software as a
32:25 - service also known as SAS and this is a
32:27 - product that is run and managed by the
32:30 - service provider you don't worry about
32:31 - how the service is maintained and it
32:33 - just works and remains available so you
32:36 - might not be aware of this but you
32:37 - probably already are using a SAS product
32:41 - so examples of that could be Salesforce
32:43 - or Gmail or Office
32:46 - 365 so those are those are things that
32:48 - would be considered SAS and these are
32:50 - really for customers so it's just you
32:52 - wanting to use uh software um like
32:54 - General software on your computer but in
32:56 - the cloud
32:57 - the next category we have is platform as
32:59 - a service abbreviated as pass and so
33:02 - here we focus on um development and
33:04 - management of your applications uh and
33:07 - so you don't worry about provisioning
33:08 - configuring or understanding the
33:10 - hardware or Os and this is really for
33:11 - people that are building apps but they
33:13 - don't but they don't think about any of
33:15 - the infrastructure underneath services
33:17 - like this would be elastic beanock on
33:18 - AWS or Roku which is very popular
33:21 - amongst um Junior developers which is a
33:24 - thirdparty service um for launching web
33:26 - apps and then you have uh the Google app
33:29 - engine so those are three examples there
33:31 - and these are really for developers so
33:33 - platform of service makes it easy for
33:35 - developers to uh build apps on the cloud
33:38 - without worrying about all the stuff
33:39 - underneath and at the bottom we have
33:41 - infrastructure as a service
33:44 - IAS um and this is the basic building
33:46 - blocks of cloud it so provide access to
33:49 - networking features computers and data
33:51 - storage space don't worry about the
33:53 - about it staff data centers and hardware
33:55 - and this is the true Focus focus of our
33:57 - course here is focusing on this layer
33:59 - but um the thing is again on this
34:01 - pyramid is that I um the infrastructure
34:04 - service can have platform as a service
34:06 - and software as service on top of it and
34:08 - so examples of infrastructure service
34:10 - would be Microsoft Azure uh AWS or even
34:14 - Oracle cloud and so this is really
34:16 - intended for
34:17 - administrators um so that is the three
34:20 - types of cloud computing and there you
34:22 - [Music]
34:25 - go hey this is this is Andrew Brown from
34:27 - exam Pro and we were looking at the
34:28 - types of cloud computing responsibility
34:31 - so we saw the three categories there um
34:33 - but we don't really understand what it
34:35 - is that we're responsible for and what
34:36 - is the cloud service provider
34:38 - responsible for so let's uh lay out our
34:41 - categories and we're going to include on
34:42 - premise uh into this because technically
34:44 - on- premise could be uh a private cloud
34:47 - and should be in the category here so we
34:49 - have on premise infrastructure is a
34:51 - service platform is a service and
34:52 - software is a service so when we're
34:54 - looking at
34:55 - applications um it's going to be the
34:57 - customers's responsibility um for on
34:59 - pram uh infrastructure pass but when we
35:02 - have software of service um the cloud
35:04 - service provider is responsible for that
35:06 - when looking at the data level it's
35:08 - going to be the same for software as of
35:10 - service uh the cloud service provider is
35:12 - going to be uh responsible but the for
35:13 - the rest it's going to be the customer
35:16 - and then on the next level for the
35:18 - runtime uh it's going to be uh
35:21 - responsible on the cloud service
35:22 - provider for the platform is a service
35:24 - and software is a service for middleware
35:26 - it's going to be the same for the OS
35:29 - like the operating system that is
35:30 - running on the service it's going to be
35:32 - the same then when we get to
35:33 - virtualization now it's uh the uh
35:36 - virtualization is responsible um with
35:38 - the cloud service provider and above and
35:41 - then for storage it's or sorry servers
35:43 - it's the same uh for storage it's the
35:46 - same and for networking it's the same so
35:48 - you can see that on premise you're
35:50 - responsible for everything and the the
35:53 - farther we move up the types of cloud
35:55 - computing the less respons
35:56 - responsibility you
35:58 - [Music]
36:02 - have hey this is Andrew Brown from exam
36:04 - Pro and we were looking at azure's
36:06 - deployment models and the first model
36:08 - we're going to talk about is public
36:09 - cloud and that's where everything is
36:11 - built on the cloud service provider
36:13 - you're not using anything on Prem or in
36:15 - your own data centers everything is
36:17 - running within Azure uh and generally
36:20 - this is known as Cloud native um but for
36:22 - some reason Azure calls it public Cloud
36:24 - so that's what we're going to use in the
36:25 - terminology here and so here I have an
36:27 - architectural diagram where we have a
36:29 - network uh on Azure and within that
36:31 - Network we have a virtual machine
36:33 - running and a database running so that
36:35 - would be an example of public Cloud then
36:37 - we have private cloud and so this is
36:39 - where everything is built on the
36:41 - company's data centers also known as on
36:44 - premise because it's within the premises
36:47 - of the organization uh like their
36:49 - physical location and uh it could an
36:52 - organiz organization could technically
36:55 - be operating their own cloud
36:57 - but it would be private cloud and they
36:58 - could be running some open-source Cloud
37:00 - software that mimics what um Azure would
37:03 - do such as open stack so it looks very
37:05 - similar uh but you just uh put an open
37:08 - stack in there and it's running a
37:10 - virtual machine or a server and it's
37:12 - also running a database and the last on
37:14 - our list here is hybrid so with hybrid
37:18 - uh you are using both on premise and the
37:20 - cloud service provider and they're
37:22 - connected together and so there's a lot
37:24 - of different networking services that
37:26 - you can use that will facilitate the
37:28 - connection between the two uh in this
37:30 - case we're using express route Express
37:32 - rout is a dedicated uh connection it's
37:35 - like having a fiber optic Line running
37:36 - from your on premise data center to the
37:38 - Azure Network so just one of the ways
37:40 - you can connect and if we wanted to
37:43 - understand like the pros and cons I have
37:45 - this nice little table here we'll just
37:47 - quickly go through it so if you're using
37:48 - public uh Cloud uh it's more cost
37:50 - effective security um it it's uh it sced
37:54 - controls are stronger by default but
37:56 - some people might not find the cloud
37:58 - will meet all their security
37:59 - requirements because of government and
38:01 - Regulatory um uh regulatory reasons not
38:04 - because the the cloud is not secure but
38:06 - it's just those uh those policies uh for
38:09 - level of configuration it's going to be
38:11 - limited based on what the cloud service
38:12 - provider exposes to you um still there's
38:14 - a lot of configuration there it's just
38:16 - that if you're if you have your own
38:17 - servers uh you obviously can do anything
38:20 - and everything with them for technical
38:21 - knowledge you don't need to have as much
38:23 - in-depth knowledge of the underlying
38:24 - infrastructure because you're not
38:25 - physically setting up
38:27 - uh or that networking everything else
38:29 - now coming down to private Cloud private
38:31 - cloud is the most expensive option on
38:32 - our list um so you're going to be paying
38:35 - uh a lot of money there uh for security
38:39 - uh there is no guarantee that is 100%
38:41 - secure because you just don't have the
38:42 - same kind of visibility that you would
38:44 - have with a cloud service provider with
38:46 - all those dashboards it's just so hard
38:47 - to build out all that software but you
38:49 - could meet your security compliance
38:50 - requirements um depending on your
38:53 - situation U but this is becoming uh less
38:56 - and less as um more governments and
38:58 - larger organizations move over to the
39:00 - cloud uh you can configure
39:01 - infrastructure exactly how you like
39:03 - because you literally have uh bought the
39:06 - hardware and can do anything you want
39:07 - with it uh and the technical knowledge
39:09 - you'll have to have a serious amount of
39:11 - technical knowledge you might even have
39:12 - a really hard time finding the resources
39:14 - to uh to maintain all that stuff then uh
39:18 - down below we have the hybrid model so
39:20 - this could be more cost- effective based
39:21 - on uh what you offload to the cloud and
39:24 - also the cost of actually moving data
39:25 - back and forth uh for security uh you
39:28 - know you have more to secure but uh
39:31 - technically uh some things are easier to
39:33 - secure on the cloud than it is in uh
39:35 - private so maybe you have a boost in
39:37 - security you're going to get the best of
39:38 - both worlds in terms of configuration uh
39:41 - and for technical knowledge you're going
39:42 - to need to know both the cloud and and
39:45 - uh like how to set things up on premise
39:47 - so that's the most work there and just
39:50 - one more deployment model here I just
39:51 - want to talk about cross Cloud this
39:53 - isn't something that is listed on the
39:54 - actual exam but it's something that you
39:56 - should understand and know and so cross
39:59 - cloud is when you're using multiple
40:00 - Cloud providers sometimes people refer
40:02 - this as multicloud or hybrid cloud and
40:04 - so I just have an example here so um uh
40:07 - there's a service called Azure Arc and
40:09 - what Azure Arc does it extends your
40:10 - control plane so you can run um
40:13 - containers kubernetes containers on
40:15 - different platforms and so you could
40:18 - have AWS on the left hand side with eks
40:20 - and gcp kubernetes engine and so you can
40:22 - be running virtual machines and they're
40:23 - all treated like they're on the same
40:25 - network so cross cloud is coming uh very
40:27 - popular with extremely large
40:28 - organizations where they they have uh
40:31 - very unique requirements but I I
40:32 - definitely want you to know what that is
40:34 - because it just gets left out uh and
40:36 - it's definitely something that is uh
40:37 - part of the industry so there you
40:39 - [Music]
40:42 - go hey this is Andrew Brown from exam
40:45 - Pro and we are looking at the concept of
40:46 - total cost of ownership tcco so what is
40:49 - the difference between on premise so
40:51 - having your own data centers and then
40:53 - using Azure and you'll notice above it
40:55 - it says KAC and Opex we're going to talk
40:57 - about that in the next slide but for the
40:59 - time for the time being we're going to
41:01 - focus on the total cost of ownership so
41:03 - to really make sense of this uh I always
41:05 - use this graphic here uh and if you're
41:07 - wondering what that is those are
41:08 - icebergs people sometimes think they
41:10 - look like teeth and so just to make this
41:12 - drawing a little bit more clear I've
41:14 - added some penguins and a whale so
41:15 - there's no mistaking it and the reason
41:17 - we're using this as a representation is
41:19 - because we have the top of the iceberg
41:21 - which are the cloths that we're
41:22 - generally concerned about but then we
41:24 - have those hidden cloths those CLS that
41:25 - we're not really think about that is
41:26 - underneath the water and if you know
41:28 - icebergs they can be really big
41:30 - underneath you don't know so um on the
41:32 - left hand side the cost that we
41:34 - generally think of is the software
41:36 - license fees uh and then uh for the
41:39 - cloud service provider we look at the
41:40 - subscription fees and so when you're
41:42 - comparing these two sometimes the
41:44 - subscription fees can cost more than the
41:46 - software license fees so you'd think
41:48 - well we should really just use uh um on
41:51 - Prem because it's more cost effective
41:53 - but when we Tak in the total cost of
41:55 - ownership all the costs involved we're
41:57 - going to see a very different picture so
41:59 - on the left hand side if you uh are on
42:01 - premise you have to deal with the
42:03 - implementation the configuration and the
42:05 - training but you also have to deal with
42:07 - the physical security of your building
42:08 - you have to pay for the hardware you
42:10 - have to pay for the IT personnel you
42:12 - have to uh deal with maintenance now on
42:14 - the right hand side on the cloud you
42:16 - still have to do implementation and
42:18 - configuration and training but that's
42:20 - about it so um there's a big difference
42:23 - in terms of what you have to do and you
42:26 - might ask okay well what is the amount
42:28 - of savings well generally people find
42:30 - that when they move from on Prem to the
42:31 - cloud they save
42:34 - 75% that's a lot of money okay 75% of
42:38 - what you generally would spend and so
42:40 - now all this stuff on the left- hand
42:41 - side is now azure's responsibility you
42:43 - don't take care of those anymore Azure
42:45 - is going to take care of it for you so
42:46 - that's total cost of
42:48 - [Music]
42:52 - ownership hey this is Andrew Brown from
42:53 - exam Pro and we are looking at Capital
42:55 - versus operational expenditure so on the
42:57 - Le hand side we have capex so Capital
43:00 - expenditures on the right hand side we
43:01 - have operational expenditures Opex and
43:03 - so looking on the left- hand side
43:06 - capital expenditure is spending money
43:07 - upfront on physical infrastructure so
43:10 - deducting the expenses from your tax
43:12 - bill over time a lot of companies larger
43:14 - companies are used to dealing with
43:16 - capital expenses and they know how to
43:18 - work their tax bill and so that's why a
43:20 - lot of people are afraid to move over
43:21 - the cloud because they're used to this
43:23 - uh this this way of operating but let's
43:26 - talk about some of the things that would
43:28 - be considered a capital expanse so again
43:30 - it's anything that's physical and then
43:32 - you're buying it with money UPF front so
43:34 - computers so that would be your server
43:36 - costs if you were to buy hard drives
43:37 - that' be your storage cost if you bought
43:39 - routers cables and switches for your
43:41 - network if you were uh purchasing things
43:43 - for backup and archive costs if you had
43:46 - disaster recovery so like an un
43:48 - uninterruptible power supply would be an
43:50 - example of that uh you have your data
43:52 - center cost so that's your rent cooling
43:53 - physical security your technical
43:55 - personnel so you're hiring people to to
43:57 - do things for you and so with capital
43:59 - expenses you have to guess upfront what
44:02 - you plan to spend um now let's look at
44:05 - operational expenditure so operational
44:06 - expenditure is the cost Associated when
44:09 - an on-premise data center has put has
44:11 - shifted that cost of the service
44:13 - provider so here in this case it's the
44:14 - cloud service provider and the customer
44:16 - only has to be concerned with
44:18 - nonphysical costs so what's examples of
44:21 - opec's cost well leasing software and
44:23 - customizing features training employ
44:26 - emplo in cloud services paying for cloud
44:28 - support um building based on the cloud
44:31 - metrics so compute usage and storage
44:33 - usage uh and the advantage here is that
44:36 - with operational expenses you can try a
44:38 - product or service without investing
44:40 - equipment so we have flexibility of uh
44:43 - investment and we also from the previous
44:45 - slide we saw that we have a huge
44:46 - reduction cost so there's two reasons
44:48 - really good reasons to use the
44:51 - [Music]
44:54 - cloud let's take a look at Cloud
44:57 - architecture terminologies before we do
44:59 - let's talk about some of the roles that
45:00 - are around uh doing Cloud architecture
45:02 - so the first is Solutions architect this
45:04 - is a role in a technical organization
45:07 - that Architects a technical solution
45:09 - using multiple systems via researching
45:11 - documentation and experimentation and
45:14 - then you have the cloud architect this
45:15 - is a Solutions architect that is focused
45:17 - solely on architecting Technical
45:19 - Solutions using cloud services
45:21 - understand that in the uh actual
45:23 - Marketplace a lot of times Solutions
45:24 - architect is used to describe both a
45:26 - cloud architect and a Solutions
45:28 - architect and you know these are going
45:31 - to highly vary based on your locality
45:33 - and how companies want to use these
45:34 - terms but this is just me broadly
45:36 - defining them here so just don't take
45:37 - them as a perfect word in terms of what
45:40 - they're representing so a cloud
45:42 - architect needs to understand the
45:43 - following terms and factors uh and
45:45 - Factor them into their designed
45:47 - architecture based on the business
45:48 - requirements so we have the idea of
45:50 - availability your ability to ensure
45:52 - service remains available scalability
45:54 - your ability to grow rapidly or
45:55 - unimpeded elasticity your ability to
45:57 - shrink and grow to meet the demand fault
45:59 - tolerance your ability to prevent a
46:00 - failure Disaster Recovery your ability
46:02 - to recover from a failure and there are
46:05 - a couple other things that uh that
46:07 - should be considered they're not
46:08 - terminologies but they're definitely
46:10 - important to a Solutions architector
46:12 - Cloud architect and uh these are things
46:15 - you always need to consider uh as well
46:18 - and this is just me talking to my
46:19 - Solutions architect friends where
46:20 - they'll always ask me these two
46:21 - questions after presentation they'll say
46:24 - how secure is the solution and how much
46:26 - is this going to cost all right and so
46:29 - for the terminologies up here we're
46:31 - going to Define these right away and
46:33 - we're going to figure these out
46:34 - throughout the course we have two giant
46:36 - sections just on cost and security alone
46:38 - uh so there we
46:39 - [Music]
46:43 - go hey this is Andrew Brown from exam
46:45 - Pro and we are looking at the concept of
46:47 - high availability so this is your
46:49 - ability for your service to remain
46:51 - available by ensuring there is no single
46:53 - point of failure or ensure a certain
46:55 - level of performance so here I have a
46:58 - technical architectural diagram that is
46:59 - describing High availability so the idea
47:02 - behind this is that if you have a server
47:05 - which runs your web application if you
47:07 - were to run redundant versions of your
47:09 - server if anything happened to a single
47:10 - server traffic could always be red to
47:12 - those other servers and that way your
47:15 - service would remain available now
47:17 - having multiple servers is great but
47:19 - even what's better is having multiple
47:21 - servers in multiple data centers because
47:22 - something could happen to a data center
47:24 - it could become unavailable of a
47:26 - networking issue so by being able to
47:28 - Route traffic or uh that way you're
47:30 - going to remain highly available and and
47:33 - uh running a workload across multiple
47:36 - availability zones and availability
47:37 - zones is what Azure calls their data
47:40 - centers ensures that if one or two data
47:42 - center becomes unavailable your service
47:45 - will remain available very very common
47:47 - to run uh at least three servers across
47:50 - three data centers now how would you
47:52 - distribute the traffic or manage the
47:54 - traffic to all three and that's where an
47:56 - Azure load bouncer comes into play that
47:59 - green triangle with the arrows that is
48:01 - the representation of a load bouncer so
48:04 - load balcer allows you to evenly
48:06 - distribute traffic to multiple servers
48:08 - in one or more data center and if a data
48:11 - center or server becomes unavailable so
48:13 - unhealthy the load balancer will rote
48:14 - the traffic to only available data
48:16 - centers with servers so there you go
48:19 - that is high
48:21 - [Music]
48:24 - availability hey this is Andrew Brown
48:26 - from exam Pro and we are looking at the
48:28 - concept of high scalability and this is
48:30 - your ability to increase your capacity
48:32 - based on the increasing demand of
48:33 - traffic memory and computing power if
48:35 - you are a growing company you're going
48:37 - to have to scale up you're going to have
48:38 - to get bigger and better servers but the
48:41 - uh there are different types of scaling
48:42 - and the first type is vertical scaling
48:44 - this is the the the most obvious one
48:46 - people are going to think of and it's
48:47 - called scaling up and what we do is we
48:49 - just upgrade to bigger servers we need
48:51 - bigger hard drives faster computers
48:53 - that's vertical scaling but there's
48:55 - another kind of kind of scaling called
48:56 - horizontal scaling and horizontal
48:58 - scaling is is described as scaling out
49:00 - and what you're doing is you're just
49:01 - adding additional servers because we saw
49:04 - with the high availability we have a
49:06 - load balcer we can distribute traffic to
49:08 - multiple servers and three servers can
49:10 - equal the same thing as one big server
49:12 - so um horizontal scaling is when we add
49:15 - more servers of the same
49:17 - [Music]
49:21 - size hey this is Andrew Brown from exam
49:23 - Pro and we're looking at the concept of
49:25 - High elasticity and this is your ability
49:28 - to automatically increase or decrease
49:31 - Your Capacity based on this the current
49:34 - uh demand of traffic memory and
49:36 - computing power so this sounds a lot
49:38 - like high scalability but the key
49:39 - difference is that it's automatic and
49:42 - you can decrease the demand not just
49:44 - increase it and so the way we would do
49:46 - that is that we would have a virtual uh
49:49 - virtual machine or server and if we
49:51 - needed more servers we would add more
49:54 - servers and if we need less servers we
49:57 - would remove less servers and so this is
49:59 - going to be accomplished using
50:00 - horizontal scaling so when we say we're
50:02 - scaling out this means we're adding more
50:04 - servers of the same size when we're
50:06 - scaling in this means we're removing
50:08 - more servers of the same size and
50:10 - generally you're not going to use
50:12 - vertical scaling for high elasticity
50:13 - it's just extremely difficult to um uh
50:17 - uh to vertically scale because if you H
50:20 - if you have to increase let's say your
50:22 - storage Drive um and then you decrease
50:24 - it you could lose data so it's not a
50:26 - good idea or or even feasible to do
50:30 - vertical scaling with high elasticity
50:32 - now how would you accomplish uh being
50:34 - elastic on Azure uh well You' use
50:37 - azure's VM scale set so scale sets
50:40 - automatically increase or decrease in
50:41 - the response to demand uh uh b or based
50:45 - on a defined schedule and we'll talk
50:47 - about those in Greater detail later in
50:49 - this course uh and then we have SQL
50:51 - Server uh or server stretch database
50:53 - these dynamically stretch warm and cold
50:55 - trans transactional data from Microsoft
50:57 - SQL Server 2016 to Microsoft Azure not
51:00 - something we're going to cover but it's
51:01 - generally the same concept that skill
51:03 - sets uh do so there you go that's high
51:06 - [Music]
51:10 - elasticity hey this is Andrew Brown from
51:12 - exam Pro and we're looking at the
51:13 - concept of being highly fa tolerant and
51:15 - this is your ability for your service to
51:17 - ensure there is no single point of
51:19 - failure preventing the chance of failure
51:21 - so when we looked at high availability
51:23 - we had also said that it was no point of
51:25 - failure but when we really talk about
51:26 - that we're really talking about being
51:29 - highly fault tolerant because there is
51:31 - the word failure in the word and that is
51:33 - what being fa tolerant is and so how do
51:36 - we prevent failure well we use the
51:38 - concept of failovers so failovers is
51:41 - when you have a plan to shift traffic to
51:43 - a redundant system in the case a primary
51:46 - system fails and so I have a Graphic
51:49 - here that represents um a primary
51:52 - database failing over to a secondary
51:54 - database and I have a bit of a
51:56 - description here so the idea is that we
51:58 - have um a copy of our production
52:01 - database we're going to call that a
52:03 - secondary system uh and the idea here is
52:06 - that every time something is ritten to
52:08 - our primary database it's going to be
52:09 - synced so it's going to be sent over to
52:11 - our secondary database so it's up to
52:13 - date with the latest database and then
52:16 - if uh the primary database uh happens to
52:19 - fail for whatever reason whether it's
52:22 - Hardware or otherwise something's going
52:24 - to detect that there's something wrong
52:25 - with the primary and it's going to fail
52:28 - over to the secondary and the secondary
52:30 - is going to be promoted to being the
52:32 - primary instance and the key thing to
52:35 - understand is that that that secondary
52:37 - is standby it's not in actual use uh
52:41 - it's only in use when the failover
52:43 - occurs so what would you use an Azure to
52:46 - uh build out a highly fa tolerant system
52:49 - that's where aure traffic manager comes
52:51 - into play um so with this uh and this
52:54 - works with a DNS level um and so the
52:56 - idea here is that you can uh fail over
52:59 - from a primary system of the DNS level
53:01 - to a standby this is really great if you
53:03 - have Regional failures you could
53:05 - probably also use a load balancer but
53:07 - this is the case that I'm showing here
53:09 - but there you
53:10 - [Music]
53:14 - go hey this is Andrew Brown from exam
53:16 - Pro and we are looking at the concept of
53:18 - high durability so this is your ability
53:19 - to recover from a disaster and to
53:21 - prevent the loss of data um so this
53:24 - could be solution that recover from a
53:26 - disaster is known as Disaster Recovery
53:29 - Dr uh and so I'm just going to ask you a
53:32 - bunch of questions to help you think
53:33 - about how how to be highly durable so
53:36 - one question would be like do you have a
53:38 - backup so do you have a backup in place
53:39 - how fast can you restore your backup
53:41 - does your backup still work how how do
53:44 - you ensure Uh current live data is not
53:46 - corrupt so that is the concept of high
53:48 - durability there's a variety of services
53:51 - to implement it so it's not just a
53:52 - single service um but there you go that
53:55 - is is the full list of cloud
53:56 - architecture
53:58 - [Music]
54:01 - terminologies so to understand Disaster
54:04 - Recovery we need to know more about uh
54:07 - things around it like business
54:09 - continuity plans BCPS and RTO and rpos
54:12 - so a BCP is a document that outlines how
54:16 - a business will continue operating
54:17 - during an unplanned disruption in
54:19 - services so it's basically the plan that
54:21 - you're going to execute uh if that
54:23 - happens and so here we have a disaster
54:26 - and you can see that there's a chance of
54:27 - data loss and downtime and these two um
54:31 - uh factors as RPO and RTO are going to
54:33 - define the length of these durations so
54:36 - recovery Point objective is the maximum
54:38 - acceptable amount of data loss after an
54:40 - unplanned data loss incident Express
54:42 - this amount of time so how much data are
54:44 - you willing to lose and then recovery
54:46 - time objective so the maximum amount of
54:48 - downtime your business can tolerate
54:50 - without inuring a significant financial
54:52 - loss so how much time you're willing to
54:54 - go go down okay so those are the two
54:57 - there and now let's go take a look at
54:59 - the disaster recovery options that we
55:00 - can use to define in our our
55:04 - [Music]
55:07 - BCP so now let's take a look at our
55:09 - disaster recovery options uh and based
55:12 - on what you choose they're going to be a
55:13 - trade of cost versus time to recover
55:15 - based on the rpos your RTO of course and
55:18 - so sometimes this is rep represented
55:20 - vertically like a a thermostat or you
55:22 - can do it horizontally here um both
55:25 - valid ways of displaying this
55:26 - information but I just have it
55:27 - horizontally here today and so we have
55:30 - low or high or you could say um even
55:33 - though I don't have it written here this
55:34 - could be cold or this could be hot okay
55:38 - so um on the left hand side we got
55:40 - backup and restore pilot light warm
55:42 - standby multiactive sight notice we're
55:45 - using the like the words like pilot
55:46 - light warm things that are relating to
55:48 - temperature so again cold and hot all
55:51 - right so let's just walk through what
55:54 - each of these things as conceptually do
55:56 - uh in terms of architecture so when
55:58 - you're doing a backup and restore you're
56:00 - back you basically back up your data and
56:03 - uh at the time of Disaster Recovery
56:04 - you're just going to restore it to New
56:05 - infrastructure uh for a pilot light the
56:07 - data is replicated to another region
56:09 - with the minimal Services running to
56:11 - keep on replicating that data and so you
56:13 - might have some core Services running a
56:15 - warm standby is a scaled down copy of
56:18 - your infrastructure so you basically
56:19 - have everything that you would
56:20 - absolutely need to run an application
56:23 - but the idea is it's not at scale and so
56:25 - at any time when there's an incident
56:26 - you're going to scale up to the capacity
56:29 - that you need and then you have
56:30 - multi-site active active where you you
56:32 - have a scaled up copy of your
56:34 - infrastructure in another region so
56:35 - basically everything you have
56:37 - identically in another region and so in
56:39 - terms of the rpos and the rtos for back
56:41 - and restore you're looking at hours uh
56:44 - with the pilot light you're looking at
56:45 - 10 minutes with a warm standby you're
56:47 - looking at minutes and multi sight uh
56:49 - active active you're looking at uh real
56:51 - time so you know hopefully that gives
56:53 - you an idea of you know the the
56:55 - difference in terms of scale but let's
56:56 - just look at more detail so for a backup
56:58 - and restore this is for low priority use
57:00 - cases restore data after events deploy
57:03 - resources after an event and it's very
57:05 - cost effective uh for pilot light this
57:08 - is where you have less stringent RTO and
57:10 - rpos so you're going to be just running
57:12 - your core Services uh you're going to
57:14 - start and scale resources after the
57:15 - event and this is a little bit more
57:17 - expensive this is uh very good for warm
57:20 - standby is good for business critical
57:21 - services so you scale resources after
57:24 - the event
57:25 - uh and it's uh almost very it's very
57:27 - it's costly but it's not as expensive as
57:30 - a multi-site active active so you get
57:32 - zero down time near zero loss uh you
57:35 - have it's great for Mission critical
57:37 - services and it's just as expensive as
57:39 - your original uh infrastructure so
57:41 - you're basically doubling the cost there
57:43 - [Music]
57:47 - okay hey this is Andrew Brown from exam
57:49 - Pro and we are looking at the evolution
57:50 - of computing and this is going to really
57:52 - help you to understand the different
57:55 - layers of compute uh and so we're going
57:57 - to start from uh on the left hand side
57:58 - to dedicated and work our way all the
58:00 - way to functions so what I want you to
58:03 - know is that uh when we're talking about
58:04 - dedicated this is a physical server
58:07 - wholly utilized by a single customer and
58:10 - so the idea is that this customer has
58:11 - purchased uh this dedicated piece of
58:14 - Hardware um but the thing with this is
58:17 - that you have to guess your capacity So
58:19 - when you buy it it's like a capital cost
58:21 - or you're purchasing uh uh for for like
58:25 - the whole like you have to plan how
58:27 - you're going to fully utilize it so
58:28 - you're going to overpay uh and you're
58:30 - going to have underutilized servers and
58:33 - the reason why is that when you first
58:34 - launch your app it might be small and
58:36 - then you're expected to grow into that
58:37 - space But you're just not using that
58:39 - space until you grow into it so it's
58:41 - considered wasted um if you want to
58:43 - upgrade Beyond Your Capacity this is
58:45 - going to be slow and expensive you
58:46 - literally would have to buy a new server
58:48 - that's larger and then move everything
58:49 - over you're going to be limited by your
58:51 - operating system so whatever operating
58:53 - system is installed uh that's what
58:55 - you're going to have uh you're going to
58:56 - have multiple apps uh if you do install
58:59 - multiple apps onto a dedicated server
59:01 - you might have conflicts in resource
59:02 - sharing but generally it's recommended
59:05 - to only have a single primary
59:06 - application on a dedicated server uh you
59:09 - are going to have a guarantee of
59:10 - security privacy and full utility of the
59:12 - underlying resources because that is
59:14 - what that's the whole purpose of having
59:15 - a dedicated server is sometimes
59:17 - dedicated servers where you have full
59:19 - control of everything is called bare
59:21 - metal and that's basically mimics what
59:23 - it was like to have a server on Primus
59:26 - or back in the day and they still exist
59:28 - so that is dedicated we'll move on to
59:33 - VMS so now we're moving on to Virtual
59:36 - machines also known as VMS and so the
59:38 - idea here is that if you had a physical
59:40 - server and you had the capability of
59:41 - running virtual machines that's like
59:42 - running a machine within a machine and
59:44 - so now you're able to run multiple
59:46 - applications on a single machine uh the
59:49 - technology that's used to actually run
59:51 - VMS is known as hypervisor there there
59:53 - are some other kinds but the ones we
59:55 - need to know uh is hypervisor so just
59:57 - know that that's the software that makes
59:59 - virtual machines work um you are now
60:02 - sharing the physical server with
60:04 - multiple customers that is generally a
60:06 - good thing because you are paying a
60:07 - fraction of the server cost you don't
60:08 - have to buy that server outright um you
60:11 - are still going to be uh uh overpaying
60:12 - for under underutilized uh uh the
60:15 - underutilization of a virtual machine
60:17 - because it still has an issue of wasted
60:18 - space because you have to choose a
60:19 - particular size of virtual machine it's
60:22 - not going to be perfectly fit for your
60:23 - application uh you are going to be
60:25 - limited by your guest operating system
60:27 - so whatever OS that you've chosen that's
60:29 - what you get um uh so that's that's what
60:32 - you have there if you want to run
60:34 - multiple apps on a single virtual
60:35 - machine they can still result in
60:37 - Conflict uh resource sharing but now uh
60:40 - customers that are isolated from you
60:41 - aren't going to conflict with you so you
60:43 - can run you could run uh if you had
60:45 - three apps you could run them as three
60:46 - virtual machines so you're not going to
60:48 - have that issue but if they're on the
60:49 - same VM you still have that issue so
60:52 - there you go that is virtual machines
60:53 - and we'll move on to two
60:58 - containers hey this is Andrew Brown from
61:00 - exam Pro and we are looking at the
61:01 - concept of containers and so this takes
61:03 - it a step further where we have virtual
61:05 - machines and we're running multiple
61:07 - containers so we're even uh we're
61:09 - further subdividing the way that we uh
61:12 - run our applications and the technology
61:14 - that is used to uh run a containers with
61:17 - within a VM or on a physical server is
61:20 - called dock Docker Damon if you're using
61:22 - Docker for containerization that's the
61:24 - most common in one um but that's going
61:25 - to let you run multiple containers and
61:28 - you can maximize the the uh the utility
61:30 - of the available capacity uh so this is
61:33 - extremely more cost effective right so
61:35 - um uh that available space is is always
61:39 - there for you to launch more servers
61:40 - within or you can or you can expand uh
61:43 - the usage for your app to take up that
61:45 - available space your containers share
61:47 - the same underlying OS so the containers
61:49 - are more efficient than multiple VMS um
61:52 - but the great thing is is that you can
61:54 - have different uh os's so the idea is
61:57 - that each container can technically be
62:00 - running a different uh OS and so now you
62:02 - have a lot more flexibility it doesn't
62:05 - seem like you could improve upon this
62:06 - further but we will when we move over to
62:12 - function so now we're going to take a
62:14 - look at the evolution of computing for
62:16 - functions and I I bet you didn't believe
62:19 - it but we subdivided it even further and
62:21 - so uh we've taken our applications that
62:23 - we're running container and we broke up
62:25 - the apps into little pieces of code
62:27 - called functions and now we even have
62:30 - more uh or or better utility of our
62:33 - compute so we have a manage a VM running
62:37 - managed containers so we don't have to
62:39 - worry about the containers and configure
62:40 - them ourselves functions are usually
62:42 - taken care of this is known as seress
62:43 - compute because you don't set up
62:45 - anything you just put your code online
62:47 - and it just works you might choose the
62:49 - memory and the duration that you need to
62:50 - utilize and that's all you pay for
62:53 - you're only responsible for your codee
62:55 - and data and nothing else and it's
62:57 - extremely extremely cost effective right
63:00 - because you are just paying for that
63:01 - individual function to run and all that
63:04 - un underutilized space is is the the the
63:07 - problem of the cloud service provider
63:09 - it's not your issue the only downside is
63:12 - that um there is a concept called cold
63:15 - starts meaning that when you launch a
63:17 - function or or serverless or a
63:19 - serverless code It generally has to
63:21 - provision a server because the the the
63:24 - cloud service provider doesn't want to
63:25 - be running servers when they don't they
63:26 - don't uh they aren't being utilized so
63:28 - you might experience a cold start where
63:30 - you're waiting for a server to start
63:31 - before your code will execute but
63:32 - there's definitely ways around that so
63:34 - there you go that is the evolution of
63:36 - [Music]
63:39 - compute hey this is Andrew Brown from
63:41 - exam Pro and we are looking at uh
63:44 - regions and geographies uh for Azure so
63:48 - a region is a grouping of multiple data
63:51 - centers and for um Azure they call their
63:54 - data centers availability zones Azure
63:57 - has 58 regions available across 140
64:01 - countries one thing Azure likes to
64:03 - promote is that they have the most
64:04 - regions out of all uh cloud service
64:07 - providers uh then we have something what
64:09 - we call a geography so geography is a
64:11 - discrete Market of two or more regions
64:14 - that preserve data residency and
64:16 - compliance boundaries and the
64:18 - geographies that are available for Azure
64:21 - uh we have the United States then
64:23 - there's Azure government us this is a
64:25 - geography that's only for the US
64:27 - government uh so regular citizens cannot
64:30 - use it then you have Canada that's where
64:32 - I'm from Brazil and Mexico and I just
64:35 - want to emphasize that data residency
64:37 - and compliance boundaries for geography
64:38 - and I just want to give you an example
64:40 - so imagine you live in Canada and you uh
64:43 - and you work for a Canadian company you
64:44 - want to guarantee that the data will
64:46 - remain within Canada for whatever
64:48 - government regul regulatory reasons so
64:51 - then you'd want to use the canidate
64:52 - Azure geography because because that
64:55 - data would never leave Canadian soil um
64:58 - so that's the case there and I just want
65:01 - to give you kind of a a visual example
65:03 - so on the Le hand side we have two
65:05 - regions we have us East one and we have
65:08 - the Europe Norway east region and in
65:11 - those regions I'm I'm not showing it
65:12 - here because I don't want to make it too
65:14 - complicated but there would be
65:15 - availability zones and we could launch
65:17 - resources so we have some servers
65:19 - virtual machines those are the images
65:20 - you see within the regions and generally
65:23 - the way uh regions work in Azure is that
65:26 - when you go to launch uh a resource you
65:28 - choose the region at that time of
65:30 - creation so if you're launching a
65:31 - virtual machine it's going to give you
65:32 - an option to choose a region and you
65:34 - just choose from that list uh so yeah
65:37 - there you go so I just made my way over
65:40 - to Azure so I just typed in um Azure
65:42 - Global infrastructure because I just
65:43 - wanted to show you the big map of all
65:46 - the regions um and uh where Azure is
65:49 - available all throughout the world
65:51 - because sometimes it's nice to look here
65:52 - so we can see we have stuff down in
65:54 - Australia we have um uh regions in
65:57 - Africa we have a region in South America
66:00 - we have a lot in North America we have a
66:03 - lot in uh Western Europe uh and then we
66:06 - have some in um Asia here so we have
66:09 - Japan China all over the place so you
66:12 - know if if you want to look a little bit
66:13 - more into that um there's a lot of good
66:15 - information here on the global
66:18 - infrastructure pages but that's about it
66:20 - I just wanted to show you that world
66:23 - map
66:25 - [Music]
66:27 - so now we're looking at paired regions
66:29 - so each region is paired with another
66:32 - region 300 miles away and the reason why
66:34 - Azure does this is so that if one region
66:37 - is being updated uh then the other one
66:40 - is still available meaning that if
66:42 - you're running if you're planning to
66:43 - make sure that you never have uh
66:46 - downtime you can uh put your resources
66:48 - in that paired region uh and you're
66:50 - going to have higher availability uh so
66:52 - some Azure services rely on paired
66:54 - regions for disaster recovery so when
66:57 - you turn those services on they're
66:59 - automatically going to launch in that
67:00 - paired region uh one Service uh which
67:04 - would help you uh leverage your paired
67:06 - region would be a service called Azure
67:08 - well it's a feature of storage but it's
67:10 - called Azure Geo redundant storage so it
67:12 - replicate your data to secondary region
67:14 - automatically ensuring that the data is
67:17 - durable even in the event the primary
67:18 - region is isn't recoverable and just to
67:21 - give you an example of a paired region
67:23 - uh so let's say we're talking about
67:25 - Canada so with Canada uh you'd have uh
67:29 - um Canada Central and then its paired
67:31 - region is Canada east for North America
67:34 - and when we say North America we're
67:35 - really talking about the United States
67:37 - uh it's East US region paired with the
67:39 - West us region and then for Germany you
67:41 - have Germany Central and ger uh Germany
67:44 - Northeast so it gives you an idea how
67:46 - far away they are 300 miles that's quite
67:48 - a distance um but there you
67:52 - go
67:54 - [Music]
67:56 - hey this is Andrew Brown from exam Pro
67:58 - and we are looking at Region types and
67:59 - service availability for Azure and what
68:02 - I want you to know about uh service
68:04 - availability uh regarding regions is
68:06 - that not all cloud services are
68:08 - available in every single region and
68:10 - there's infrastructure reasons as to why
68:12 - and there's compliance reasons as to why
68:14 - so Azure um has two types of regions
68:17 - they have recommended regions these are
68:19 - regions that provide the broadest range
68:21 - of service capabilities um and what that
68:23 - means is that uh the majority of
68:25 - services are going to be available in
68:26 - this region uh and this recommended
68:29 - region is designed to support
68:31 - availability zones then you have
68:33 - alternate regions uh and these are
68:35 - regions that extends azure's footprint
68:37 - within a data residency boundary where a
68:40 - recommended region also exists but
68:42 - they're not designed to support
68:43 - availability zones that doesn't mean you
68:45 - can't launch resources within them it
68:47 - just means that when you go to launch of
68:49 - resource you're not going to choose an
68:50 - availability Zone uh and these regions
68:52 - are labeled as other when you're in the
68:54 - Azure portal now let's talk about
68:56 - General availability so General
68:58 - availability abbreviated to GA is when a
69:00 - service is considered ready to be used
69:02 - publicly by everyone so if you have a a
69:04 - service or product and it was in beta
69:06 - and now you're ready to sell to people
69:08 - that means that it's ga uh uh but it's
69:11 - but just because it's ready to sell it
69:13 - there's also the the conversation around
69:15 - whether it's actually available to use
69:18 - and that's going to be determined based
69:20 - on the category that the Azure cloud
69:22 - service is in so Azure categorizes uh
69:26 - three different types of availability
69:28 - for services and the first one is
69:30 - foundational so a cloud service that is
69:32 - foundational is going to be available
69:35 - immediately in a recommended and
69:37 - Alternate regions when it goes GA or at
69:39 - least in 5 12 months of the time that it
69:41 - was announced then you have mainstream
69:44 - so these are um cloud services that will
69:47 - become immediately available in a
69:49 - recommended region or in 12 months when
69:51 - it goes GA um but for for the alternate
69:54 - region uh it may become available based
69:56 - on the customer demand and then the last
69:59 - one is specialized so cloud services
70:02 - that in this category will become
70:03 - available in in recommended or alternate
70:06 - regions based on customer demand so
70:08 - hopefully that clears up uh service
70:10 - availability and region
70:12 - [Music]
70:15 - types hey this is Andrew Brown from exam
70:18 - Pro and we are looking at special
70:19 - regions for Azure so Azure has
70:22 - specialized regions to meet compliance
70:23 - are legal reasons because they might
70:26 - want they might want to work with
70:27 - specific governments of uh and to meet
70:30 - those requirements they basically give
70:32 - them their own region and so the First
70:34 - on our list is the us and we have three
70:36 - regions that we know about so we have
70:38 - the US Department of Defense Central the
70:41 - US government of Virginia region the US
70:43 - government of Iowa region and then we
70:46 - have an additional three that we just
70:47 - don't know about it because they're in
70:48 - Secret locations so maybe they're for
70:51 - Area 51 we don't know um and so the
70:54 - reason why they have these special
70:55 - regions is that if you just want to do
70:56 - business with the government they need
70:58 - these kind of regulations um then on the
71:01 - other side we have China and so they
71:03 - have a region in China East and China
71:05 - North uh and these regions are available
71:07 - through a unique partnership between
71:09 - Microsoft and 21 vonet uh and so
71:12 - Microsoft does not directly maintain
71:14 - these data centers but they work with uh
71:15 - 21 vonet to give you uh accessibility to
71:19 - these regions um and probably to operate
71:22 - these regions you'd probably be um a
71:24 - citizen of these countries and you'd
71:26 - also be an employee of the government so
71:28 - it's not going to be for a citizens to
71:29 - use but there you
71:31 - [Music]
71:35 - go hey this is Andrew Brown from exam
71:37 - Pro and we are looking at availability
71:39 - zones for Azure and so availability
71:42 - zones abbreviated to uh short for AZ and
71:45 - you'll hear me using that abbreviation a
71:47 - lot in this course and you should learn
71:49 - to remember that as well is a physical
71:51 - location made up of one or more Data
71:54 - Center and so a data center is a secured
71:56 - building that contains hundreds of
71:58 - thousands of computers and if you want a
72:00 - little visual uh here is uh the inside
72:03 - of a data center um and there's a
72:04 - technician working on a rack of servers
72:06 - and there's a dog uh in the data center
72:09 - uh you should definitely never have a
72:10 - dog in your data center you'll probably
72:12 - hear me refer to availab availability
72:14 - zones as a data center because it's the
72:16 - easiest way to think of it but it
72:17 - actually can be more than one data
72:19 - center now a region will generally
72:22 - contain three available IL zones I say
72:24 - generally here because there are cases
72:26 - where there are less than three but
72:27 - there's actually very specific reasons
72:29 - as to having exactly three availability
72:31 - zones data centers within a region will
72:33 - be isolate from each other so they'll be
72:36 - in different buildings but they will be
72:38 - close enough to provide low latency uh
72:40 - and that load latency would probably be
72:41 - in the sub milliseconds I don't know
72:43 - what it is for Azure but that's
72:44 - generally uh how it would be designed
72:46 - because you want it to feel like you're
72:47 - uh it's on uh the same
72:49 - network um it's common practice to run
72:52 - workloads in at least 3 A's and that's
72:54 - why I I was saying that earlier that's
72:55 - important to ensure Services remain
72:57 - available in the case one or two data
72:59 - centers fail fail and this is called
73:01 - high availability and we'll definitely
73:03 - cover this concept again in this course
73:05 - just to give you a bit of a visual on
73:07 - the Le hand side what we have is a
73:09 - region called us East one and we have
73:11 - multiple availability zones um uh Azure
73:15 - just labels them one two and three and
73:18 - so when you go to launcher resource if
73:19 - you look on the right hand side you
73:21 - choose your region so we are choosing us
73:24 - uh East us then we're saying we're going
73:26 - to use availability Zone and then we
73:28 - choose which one we want to launch it
73:29 - into so if we if we choose two it's
73:31 - going to go into availability Zone 2
73:32 - that doesn't mean we're going to launch
73:33 - two instances it just means availability
73:35 - Zone 2 so there you
73:37 - [Music]
73:41 - go hey this is Andrew Brown from exam
73:44 - Pro and we are looking at AZ supported
73:45 - regions for Azure and so not every
73:48 - region has support for availability
73:50 - zones and we touched on this in the
73:51 - region section but we'll touch on it
73:53 - here again again so uh we know that
73:55 - there are regions called alternate
73:57 - others and these do not have
73:59 - availability zones whatsoever then you
74:01 - have recommended regions and these are
74:03 - supposed to have 3 azs the reason why
74:06 - they might not have them is because it's
74:08 - a newer region and Azure is promising to
74:11 - add more regions within 12 months or
74:13 - whatever time period that they say uh
74:16 - but generally what you want to do is
74:18 - when you have um Cloud resources you
74:20 - want to launch them where they have at
74:21 - least three azs so which regions have
74:23 - three azs and that is Central Us East Us
74:27 - 2 West us2 West Europe France Central
74:32 - North uh uh Northern uh Europe uh
74:35 - southeast Asia so that is where you
74:37 - generally want to run your workloads now
74:40 - what does it look like when uh you try
74:42 - to go launch a resource um and they and
74:45 - you choose a region that doesn't have an
74:47 - availability Zone what's that going to
74:48 - look like well it's going to look like
74:49 - this so you're going to availability
74:51 - zone is going to be blanked out and
74:53 - you'll have to choose no infrastructure
74:55 - uh redundancy required and so that would
74:58 - be the example for Brazil South where
75:00 - it's just there are there is a single AZ
75:04 - but it's described as not having a so
75:05 - you just don't choose it in the
75:06 - interface so there you
75:08 - [Music]
75:12 - go hey this is Andrew Brown from exam
75:14 - Pro and we are looking at fault and
75:16 - update domains so an availability Zone
75:19 - uh in an Azure region is a combination
75:22 - of a fault domain and an update domain
75:25 - so a fault domain is a logical grouping
75:27 - of Hardware to avoid a single point of
75:29 - failure within an a uh and so basically
75:32 - it's a group of virtual machines that
75:33 - share a common power source and network
75:35 - switch um the reason why Azure does this
75:38 - is that so if part of the data center
75:41 - fails then other servers won't be taken
75:43 - down with it so let's say there's a fire
75:45 - within the data center in one particular
75:47 - region it won't affect other Hardware
75:49 - that is running then you have update
75:51 - domains and so update domains is when
75:53 - Azure needs to apply updates to the
75:54 - underlying hardware and software um but
75:57 - the thing is is that because Azure is
75:59 - updating them it takes these machines
76:00 - offline so the idea is that if you run
76:03 - your workloads in um another uh like
76:07 - another domain in the update domain not
76:10 - neither domain will be updated at the
76:11 - exact same time and that way you won't
76:14 - have downtime because of
76:15 - updates and so the way fault domains and
76:18 - update domains work is that you use
76:20 - availability sets so availability sets
76:22 - is a logical grouping that you can use
76:24 - an Azure to ensure that your VMS you
76:26 - place in the availability set are in
76:28 - different fault update domains to avoid
76:30 - down time and just to really help with
76:33 - that visual uh here um what I'm going to
76:35 - do is just show you this here so each
76:37 - virtual machine and availability set is
76:38 - assigned a fault domain and an update
76:40 - domain and so what you're looking at
76:42 - here is uh you see those gray boxes
76:45 - those are racks uh in your data center
76:48 - aack is just like it it's like a closet
76:50 - for um servers and all those servers sit
76:53 - on top of each other and so each of
76:55 - those servers um uh uh in that is where
76:59 - your virtual machine might be deployed
77:01 - so if you are deployed if you have a
77:04 - server and it's deployed in Fault domain
77:06 - zero and fault domain one it could be in
77:08 - any of the the the servers on that rack
77:12 - uh but then update domains you just
77:13 - might have very particular servers um in
77:16 - that rack that are those update domains
77:19 - so hopefully that makes that a bit clear
77:21 - I know it's a little bit confusing but
77:22 - just remember the Conant behind fault
77:24 - domains and update domains and just to
77:26 - give you a visual of what it would look
77:27 - like in the Azure portal uh if you go
77:30 - ahead and create availability set you
77:31 - would name it so here I call it
77:32 - production and you would choose theault
77:34 - domains and you would choose the update
77:36 - domains and so I believe that what
77:38 - you're doing there is that you're
77:39 - choosing the amount of domains that you
77:41 - want uh your your virtual machines to be
77:44 - distributed
77:45 - across and I keep on saying virtual
77:47 - machine that's your server okay so if
77:50 - you say um two fault domains that that
77:53 - means that when you launch two servers
77:54 - and you put them into that availability
77:56 - set they're going to be across two fault
77:59 - uh two different fault domains and if
78:00 - you launch Five
78:02 - servers um and your update domains is at
78:05 - five that means it's going to be across
78:06 - five different uh servers that are
78:08 - isolated from each other so hopefully
78:09 - that makes sense but that's fault and
78:11 - update domains so I quickly just wanted
78:13 - to show you the fault and update domains
78:15 - that are in uh Azure here so the idea is
78:17 - if you're launching a virtual machine uh
78:20 - and you want to uh control the
78:23 - availability set what you can do is you
78:25 - can go um to down to here where we have
78:28 - availability options we're going to drop
78:30 - it down and choose availability set and
78:32 - then we don't have an availability set
78:34 - so I'm going to go ahead and create one
78:36 - if I just click there and so when we
78:38 - create a set we can say you know uh
78:41 - production
78:42 - set and so we have these two uh these
78:45 - two um uh dialogues here and so what
78:49 - what it is is when you say there's three
78:51 - fault domains that means that if you
78:53 - were to launch three VMS and you put
78:55 - them all into this uh availability set
78:57 - it'll be spread across three different
78:59 - racks so that if a rack goes out um two
79:02 - other racks are operational and so your
79:04 - service will remain available and then
79:05 - down below it's the same thing on a rack
79:08 - there might be multiple machines and
79:09 - certain machines um uh will will be will
79:14 - be scheduled for updates but they won't
79:15 - all be updated at the same time so if
79:17 - you're saying this you'll say spread it
79:18 - across five machines uh and that's all
79:20 - there really is to it so I just wanted
79:22 - to show you where that was uh when you
79:23 - actually launch it for a virtual
79:25 - [Music]
79:28 - machine hey everyone it's Andrew Brown
79:31 - and welcome to another follow along and
79:33 - probably the most important one which is
79:34 - how to create your Azure account so what
79:36 - I did is I typed into Google uh Azure uh
79:40 - Microsoft portal and so it brought me to
79:42 - here um this page might look a little
79:44 - bit different it really just depends on
79:46 - where you uh land in but a lot of times
79:49 - they make it very easy by having this
79:51 - try aure for free getting started free
79:53 - account so just find one of the ways in
79:56 - they probably go all to the same place
79:58 - so I'm going to go ahead and click Start
79:59 - free I'm going to get out of the way uh
80:02 - so that we can do this now um I already
80:05 - have an existing uh Microsoft account
80:07 - that's what you need in order to access
80:09 - Azure so I'm going to go here and say
80:11 - sign in with another account I'm going
80:13 - to create another account I go ahead and
80:15 - create one of course you probably
80:17 - already have an account or if you don't
80:18 - you can go ahead and start typing one in
80:20 - so I'm going to need an alternate email
80:22 - to utilize for this so just give me a
80:24 - moment okay so I was just thinking about
80:27 - it I actually already have another email
80:29 - called Andrew teer seat.com it's the
80:31 - name of our platform that runs exam Pro
80:33 - so I'm going to go ahead and try this
80:34 - and see if that works you can't sign in
80:37 - here with a work or school email address
80:39 - use a personal email such as a Gmail
80:42 - okay so it's not letting me uh uh do
80:44 - that there but maybe we can get
80:45 - ourselves a new email address and that
80:48 - will be one way in here now of course
80:49 - you don't need to create an Outlook or
80:51 - Hotmail you can of course uh use
80:54 - something else but I'm just going to
80:56 - create a new account to make my life a
80:57 - little bit easier uh while demonstrating
81:00 - this I'm going to type in exam Pro and
81:02 - your brown and hopefully it will allow
81:04 - me have that hyphen there and so I need
81:06 - to choose a password so just give me a
81:08 - moment also if you're looking for a
81:10 - password manager or sorry a password
81:12 - generator I tend to like this one called
81:14 - uh password generator.net because it
81:16 - works really well um so that's the one
81:18 - that I'm going to use but I'm going to
81:19 - take this off screen here for a moment
81:21 - and just put a pass in okay so I've just
81:24 - generated out a password and hopefully
81:25 - it will let me go ahead and create that
81:27 - so we're in good shape and so I'll fill
81:28 - in the next information here so I don't
81:31 - want to expose all my personal
81:32 - information so I'm just going to fill
81:33 - this in and hit next so you'll see me
81:35 - jump to the next screen okay and so it
81:38 - is progressing and we're just waiting
81:40 - for uh new things to happen
81:49 - here and so now I have a little puzzle
81:51 - to solve so just give me a moment I just
81:52 - want to save the password before I lose
81:55 - it okay I just saved my password off
81:57 - screen here let's go ahead and solve
81:59 - this so please solve the puzzle so we
82:01 - know you're not a robot uh how do I
82:04 - solve it do I need to put my headphones
82:06 - on just give me a moment here and take a
82:09 - look so let's go ahead and hit next so
82:11 - use the arrows to rotate the animal to
82:13 - face the direction of the
82:15 - hands
82:18 - um well it's already uh facing it so I
82:21 - guess we're in good shape that was not
82:23 - quite right oh maybe the direction of
82:25 - where the hand is pointing okay we'll
82:26 - try that again so there we
82:30 - go and we'll try that again very
82:32 - interesting um challenge that's the
82:34 - first time I've ever seen that one but
82:36 - uh that's
82:39 - interesting and we'll give it a moment
82:43 - here and so now we can fill in all of
82:46 - our information so of course again I
82:48 - don't want to expose all of my
82:50 - information here so go ahead and fill
82:52 - this in and what we'll need to do is
82:54 - verify our phone number so we'll fill in
82:56 - all this stuff um and then we'll choose
83:00 - to use a different phone number and all
83:02 - this stuff and I'll see you back here in
83:03 - a moment of course if you already have
83:05 - an email you wouldn't have to go through
83:07 - all of this process here but I'll be
83:08 - back in just a moment okay all right so
83:10 - the next screen that I'm being prompted
83:12 - with is to add a credit card they say
83:15 - identity verification by card um of
83:18 - course this is is so that when you want
83:20 - to pay uh and go to the pay TI you can I
83:23 - believe that Azure uh provides you a
83:25 - Sandbox so you'll be okay but you'll
83:26 - have limited control within Azure um but
83:30 - what we'll do is we'll go ahead and I
83:32 - will fill all this information of course
83:33 - I'm not going to show you all of this
83:35 - information um but I'll see you back
83:37 - here in just a moment okay okay that's
83:39 - all filled in and so it looks like um
83:41 - it's still setting up our account up
83:43 - here uh it's asking for some feedback um
83:46 - I don't really have any feedback for the
83:48 - sign up process I'm just going to wait
83:50 - here till setting up your account is
83:51 - complete so I'll see you back here in
83:53 - just a moment okay oh it looks like it's
83:55 - already done so the account is created I
83:58 - assume that we can just go ahead and log
84:00 - in so let's go ahead and sign in
84:03 - here and we will CH choose this new
84:06 - account now the cool thing about um
84:09 - Azure is that normally when you're
84:10 - logged in you stay logged in so um uh
84:13 - it's usually pretty pretty convenient I
84:16 - don't feel like I'm always logging into
84:17 - my account but we are in here and so
84:19 - that's all we had to do to get into our
84:21 - new azure account so there you
84:24 - [Music]
84:28 - go all right so in this video what I
84:30 - want to do is focus a little bit more on
84:32 - uh resource providers because it's very
84:34 - important to understand about
84:35 - registering uh or unregistering resource
84:38 - providers to get access to particular
84:40 - Services right now I am still utilizing
84:43 - the free tier so in some videos I might
84:44 - be on free tier in other ones I might
84:46 - not be but what I want to do is make our
84:48 - way over to our subscription so we'll go
84:50 - ahead and type in subscription in the
84:52 - top to and from here we'll go into Azure
84:54 - subscription one yours might be named
84:56 - differently if you named it differently
84:57 - I'm going to go down uh down over here
84:59 - and look for resource providers and so
85:02 - in here we have a bunch of uh providers
85:05 - that we can utilize and if we scroll
85:06 - through here there's a ton of them and
85:08 - so if we do not have um a particular
85:11 - things registered we're just not going
85:12 - to be able to use those services and the
85:15 - the type of subscription you have might
85:17 - determine what you're able to actually
85:19 - access so uh we can just kind of sort
85:21 - here on the right hand side by uh just
85:23 - double clicking and we can see what
85:25 - resources we have so I'm just looking
85:27 - through here and we we kind of have an
85:29 - idea of what they are so Microsoft
85:30 - storage is probably storage accounts um
85:33 - I'm trying to look for uh virtual
85:35 - machines I imagine there is probably one
85:37 - called Microsoft virtual machines or VM
85:39 - if we're not sure I can go ahead and
85:40 - type it up here so VMware what if I type
85:43 - in Virtual machines so um some of these
85:46 - are not registered but um you know uh
85:49 - it's just going to be really dependent
85:50 - on what we're running into so some of
85:52 - these are grouped under the same thing
85:53 - so it could be a bit misleading in terms
85:55 - of what their names are but uh what I'm
85:58 - going to do is just take a look and
85:59 - click into storage and see what kind of
86:01 - information we can get about it so we'll
86:03 - go ahead and click into this one
86:06 - here and I'm again I'm just trying to
86:08 - see what kind of information we can
86:11 - get and if we click here in the top it's
86:14 - showing resource types so that's kind of
86:15 - showing the kind of operations um that
86:17 - we can perform and if I hover over them
86:20 - notice it says like locations or
86:22 - operations or storage tasks so I imagine
86:25 - that these um uh these might be
86:27 - specifically tied to API calls um but
86:31 - yeah if if it's not very clear what
86:32 - these do that's totally understandable
86:34 - uh but I'm just going to say that we are
86:36 - going to come across resources and
86:37 - they're not going to work and it's we're
86:39 - going to have to enable those uh
86:40 - resource providers First uh one that I
86:43 - think that might happen would might be
86:45 - Cosmo DB I kind of remember having to
86:47 - always activate that one Cosmo
86:50 - DB so just give me a second I'll go look
86:53 - for it okay all right so I did a bit of
86:55 - Googling and in this one they were
86:57 - suggesting some uh resource providers I
87:00 - think it's talking about Cosmos DB and I
87:02 - think that Cosmos DB used to be called
87:04 - document DB or it was an older version
87:06 - of it so I'm just curious if we were to
87:08 - uh type that in here let me say document
87:10 - DB yeah and notice that it's not
87:12 - registered so um Cosmos DB is a um it's
87:16 - a nosql database if you ever heard of um
87:20 - adabs is equivalent of Dynamo DB it's
87:22 - something similar uh the question is can
87:24 - we use this in the free uh tier I'm not
87:26 - 100% certain but it says try for free uh
87:29 - for up to 30 days and so all I want to
87:31 - see is is it going to complain that we
87:33 - don't have it registered that's what I'm
87:35 - hoping uh to happen here to demonstrate
87:38 - this uh this thing about registering I'm
87:40 - going to go ahead and go ahead uh here
87:41 - and hit create and uh we have a bunch of
87:45 - different options here so I'm just going
87:47 - to go ahead and create a nosql database
87:49 - and I'm going to create a resource Group
87:51 - so I'm going to say
87:52 - you know my DB we'll go ahead and say
87:56 - okay just follow along if you don't know
87:57 - the stuff that's totally all right again
87:59 - I'm just trying to get it to prompt if
88:02 - you don't want to make this you can just
88:03 - watch and just see what happens uh when
88:06 - we see that resource provider uh
88:08 - complaint assuming that this is going to
88:10 - trigger it I'm not sure and so we need
88:11 - account name so I'm going just say my
88:13 - new
88:13 - DB um and I'm just going to put a bunch
88:17 - of numbers here on the end these are
88:19 - Global names so it's treated like a
88:20 - domain name I have to really figured out
88:22 - apply the free tier discount absolutely
88:24 - yes and we'll go ahead and give it a
88:32 - moment so we'll just wait and we'll go
88:35 - ahead and
88:36 - create and so it's initializing the
88:40 - deployment and I'm not seeing any
88:43 - complaint uh so far I keep expecting it
88:45 - to say hey you need a you need a um a
88:49 - resource provider
88:51 - here but it seems to be deploying so
88:53 - this might not be a good example but I
88:55 - definitely remember having this issue
88:57 - before but we'll give it a moment I'm
88:58 - just going to be back in just a second
89:00 - and we'll see what the result is okay
89:02 - also while we're waiting I just want to
89:04 - point out that uh a lot of times when
89:06 - things are happening you can go up to
89:08 - the notifications and it will give you
89:10 - an update here and so while this is
89:12 - creating I could go ahead and give this
89:14 - a hard refresh um and just still notice
89:17 - that it's still showing the deployment
89:18 - in progress so we can really keep track
89:20 - of where we are or what
89:22 - happening um again I don't know how long
89:24 - this takes to create this might take
89:26 - quite a while I just kind of forget I
89:29 - know it's not going to cost me anything
89:30 - to spin this up but uh we'll wait here a
89:32 - bit okay all right so that did actually
89:34 - create so I guess that wasn't a really
89:37 - good example unfortunately uh but I do
89:39 - know um I'm going to go ahead to that
89:41 - Resource Group and I'm just going to go
89:43 - ahead and delete this uh anytime you
89:44 - launch a resource in Azure uh you always
89:46 - have to launch it into a resource Group
89:48 - and it's a lot easier to tear down all
89:50 - the resources within a resource Resource
89:52 - Group so I go ahead and hit delete
89:53 - Resource Group it has that one database
89:55 - there I'm going to go ahead and delete
89:57 - it so I did kind of cheat and I went out
90:00 - to the internet and I said what service
90:03 - uh isn't enabled by default uh where
90:05 - you'd have to register it and one they
90:07 - said was AKs AKs is uh for running
90:11 - kubernetes clusters that's a little bit
90:13 - um out of scope for the the uh this
90:17 - level of certification but I'm going to
90:19 - do it anyway I really don't want you to
90:21 - do this I just just want you to uh watch
90:23 - and see what I'm talking about here
90:25 - because kubernetes can be very expensive
90:28 - um and I don't want to to put you in
90:30 - trouble here or to make this harder for
90:31 - you so just watch along and let's see if
90:33 - we can see what happens when we try to
90:36 - launch a kubernetes service without
90:37 - turning on uh turning it on in uh the
90:40 - reg uh under resource providers so I'm
90:43 - going to go here and launch a new
90:44 - kubernetes
90:46 - cluster and I'm going to create a new
90:48 - resource script I'm just say my
90:50 - K8 um uh Resource Group for RG there
90:53 - we'll say okay and I'm going to choose
90:56 - something again don't do this I'm just
90:57 - doing this we'll go ahead and do Dev and
90:59 - test I'm going to say my uh k8's
91:04 - cluster and so it likes the name there
91:06 - that's fine I'm going to go with the
91:07 - free pricing tier if it's free you can
91:09 - do it as well but going to tell you it's
91:11 - not fun to set up kubernetes clusters
91:13 - it's going to set up at one Noe pool
91:15 - we'll go ahead and hit review and create
91:17 - if you're also noticing um there's
91:19 - always this confirmation step with Azure
91:22 - I really like this like eight of us does
91:24 - not do this gcp kind of does this but
91:26 - you always go through this process of go
91:29 - through the steps review what it is that
91:30 - you want and hit create and then it has
91:32 - a a deployment step um so it's a nice
91:35 - workflow I really like that about Azure
91:37 - but we'll give it a moment here to um
91:39 - get ready to confirm all the information
91:41 - and we'll go ahead and see if we can
91:42 - create it it says validation has passed
91:44 - we'll go down below and hit create I'm
91:47 - still expecting it to ask me about
91:49 - container
91:50 - service
91:54 - and I definitely confirm that this is
91:55 - something you're supposed to have turned
91:56 - on now what we'll do while we're waiting
91:59 - is I'm going to go over here uh click
92:01 - back into a new tab and while that is
92:04 - deploying because that's going to take a
92:05 - while I'm going to go ahead back into
92:07 - our subscriptions and I want to check
92:10 - resource providers because I know this
92:11 - one is called like container services so
92:13 - I'm going to type in here
92:15 - container and it says it's registered
92:18 - so I feel like Azure is messing with me
92:21 - because in the past you've always always
92:23 - always had to manually turn these on and
92:25 - I feel like it's just turning them on
92:26 - for me so what I'm going to do
92:30 - here is I want to see something I don't
92:33 - have turned on and then I want to go try
92:35 - and use it and see if it actually just
92:37 - turns it on because if it does that now
92:39 - that is great but always in the past
92:41 - that's not how it worked so just let me
92:43 - go look for something and I'll be back
92:45 - in just a moment all right so I just
92:47 - went over to chat GPT and I asked what
92:49 - does Microsoft compute give you access
92:51 - to and it says virtual machines and
92:53 - scale sets which makes sense that's what
92:54 - I recall uh it doing but I just wanted
92:56 - to be 100% sure it's going to do what I
92:59 - wanted to do I also noticed that uh
93:01 - coming back to AKs our deployment failed
93:03 - I'm going to go take a look here um the
93:05 - resource R operation failed to complete
93:07 - successfully because it reached terminal
93:08 - provisioning State failed that's totally
93:10 - fine I don't even want to deploy a
93:13 - kubernetes cluster anymore I've given up
93:15 - on that we're going to go ahead and just
93:17 - um delete this Resource
93:20 - Group and if you're thinking this is a
93:22 - bit messy I'm just going to tell you
93:24 - this is what Azure is like um Azure is
93:27 - uh really great in terms of its
93:29 - offerings but uh out of all the cloud
93:31 - service providers I would just say that
93:33 - it is the most uh challenging to learn
93:35 - but anyway that's going to tear down and
93:37 - so what I want to find out is if I go
93:40 - launch a virtual machine this this
93:41 - automatically going to turn on to be
93:43 - registered that's what I want to know so
93:45 - what I'm going to do is go ahead and
93:47 - attempt to launch a virtual
93:50 - machine which that that is something
93:52 - that is a lot more reasonable to learn
93:54 - at this certification level but we're
93:56 - going to go ahead and hit create I'm
93:57 - going to choose an Azure virtual
93:59 - machine and I'm going to create a new
94:01 - resource I'm going to say my uh uh
94:04 - virtual
94:05 - machine uh
94:08 - RG and I'm going to go here and just say
94:11 - my virtual machine
94:13 - RG or not RG but just put that in there
94:16 - like that and we're going to go ahead
94:18 - and choose us East does not really
94:20 - matter I just want to it
94:22 - somewhere and I mean this looks all okay
94:25 - um I'm not going to log into this the
94:27 - only thing that matters is uh what kind
94:30 - of image we're utilizing because that's
94:32 - going to determine uh the spend so that
94:34 - is free tier I'm going to stick with
94:36 - free tier let's go ahead uh forward to
94:38 - our review and create and see what
94:41 - happens so again I'm kind of
94:45 - expecting to create this and I wanted to
94:47 - say that it's not enabled it wants us to
94:49 - generate a new key pair um
94:52 - um I don't really want to download a key
94:54 - pair but I'll go ahead and do that
94:56 - anyway that's something you commonly do
94:58 - with virtual
95:00 - machines I just wanted to create it so
95:03 - again I have not enabled that service
95:06 - while we're waiting for this let's go
95:08 - ahead and click on notifications and
95:10 - view all the activity I'm just curious
95:12 - if it's enabling those
95:15 - subscriptions because usually it tells
95:17 - us everything in here and so I'm just
95:19 - carefully looking so
95:23 - um I'm going to go ahead and
95:28 - refresh that was four minutes
95:32 - ago ah look here Register subscription
95:35 - for container service okay so um we
95:38 - absolutely do need to turn it on but it
95:40 - turned it on automatically for us and
95:42 - I'm just trying to say that in the past
95:44 - I always had to manually do that down
95:46 - below here register the the uh uh
95:48 - storage resource provider so I'm not
95:51 - sure if this is a problem anymore but I
95:53 - still think it's important to point out
95:55 - that you are supposed to register
95:57 - Services uh before you use them um and
96:00 - that's the only point I wanted to make
96:02 - there um so just understand that that is
96:04 - something that's important to um Azure
96:07 - but uh now what I need to do is uh get
96:10 - rid of my
96:12 - um uh that virtual machine I've been
96:14 - launching so over here you can see the
96:16 - latest resources I'm going to go to this
96:18 - one here and I know it's still deploying
96:20 - it's creating these resources I'm going
96:22 - to go ahead and tear that down so I'll
96:24 - go here and just say um apply for delete
96:28 - for all everything yep I definitely want
96:29 - to do that and I'm going to go ahead and
96:31 - copy this name here and we'll tear that
96:34 - down so that's the only point I wanted
96:36 - to make in that video I know was super
96:37 - complicated but hey that's Azure we'll
96:39 - see you in the next one okay
96:45 - ciao let's go ahead and actually create
96:47 - some users and just before we proceed
96:49 - forward to create a user I just want to
96:51 - point out you can tell what tenant you
96:52 - are in if you look in the top right
96:54 - corner so here I'm in my Starfleet
96:55 - tenant and there's actually I think you
96:57 - can switch between
97:00 - here yeah that's an easier way to switch
97:03 - between your directories uh but
97:04 - generally that's not how I do
97:06 - it I'll go to the top here and just type
97:09 - in Azure active
97:10 - directory and uh when I want to switch a
97:12 - tenant I just click the Switch tenant
97:13 - button and click on what I want but
97:15 - we'll make our way back to the uh
97:17 - Starfleet tenant that I have here here
97:19 - you can see my information and I've
97:22 - obviously activated Azure ad premium P2
97:25 - um but before we go ahead and create a
97:26 - user we're going to have to create a
97:27 - group and I'll show you why if I'm going
97:29 - to go ahead I'm just going to speed
97:30 - through this for a second but if I
97:31 - scroll on down I have this option where
97:33 - I need to create a assign it to a group
97:35 - I guess I don't have to but um the
97:37 - problem is I don't have one and so
97:39 - before I create my user let's go ahead
97:41 - and create ourselves a new user group
97:44 - and so we'll go ahead and create a new
97:45 - group here and I we have two options we
97:48 - have security and Microsoft 365 it
97:50 - explain explains right here the
97:51 - difference so 365 is really for giving
97:54 - access to mailbox calendar files
97:56 - SharePoint we're not doing that stuff
97:58 - here we're just sticking with regular
97:59 - security groups uh which is for Azure
98:02 - stuff we'll name this uh developers and
98:05 - then we'll name this
98:06 - developers and notice here that uh the
98:09 - membership type I have a drop down if
98:10 - you're on the free tier this is going to
98:12 - be great out but uh this Dynamic user is
98:14 - part of P2 and so uh this allows us to
98:17 - add a dynamic query and the idea here is
98:20 - that if I start having users and I just
98:22 - say if a user uh is from
98:25 - Canada then they'll automatically be
98:27 - added to this group and so that's the
98:29 - query that gets outputed but we're not
98:30 - going to make a dynamic group today uh
98:33 - we'll just make our way back here to the
98:35 - new group and we'll just manually
98:37 - assigned stuff all right I'll go ahead
98:40 - there and create that user or that that
98:42 - group there and now that we have that
98:44 - group let's make our way over to users
98:46 - so we'll go back here I'm going to make
98:48 - myself a new user um and and on the top
98:51 - here we'll go here uh and we'll name
98:53 - this one
98:56 - Kevin and we'll have that
98:59 - lowercase and we will call them Kevin
99:02 - xxbridge
99:04 - all
99:06 - right and you'll notice here it will
99:08 - autogenerate a password it's four
99:10 - letters and four numbers I don't find
99:11 - this personally uh very secure but the
99:13 - idea here is that uh user is going to
99:15 - reset that password right away so it's
99:17 - not a big deal and that's very easy to
99:18 - remember and now I can go here and
99:20 - assign uh
99:22 - groups and if I want to assign them a ro
99:24 - I can do that here so we'll open that up
99:26 - we have a bunch of different options
99:28 - maybe we want these two roles
99:30 - here and then we have some additional
99:33 - information I'll go ahead and create
99:34 - this user and so now this user
99:36 - exists what's interesting is that I can
99:38 - go ahead and delete users and then
99:40 - recover them the groups have this as
99:42 - well where if you go here and I actually
99:44 - have a user I deleted previously so it
99:46 - just takes some time to show up but if
99:48 - you go ahead you can hit the uh delete
99:50 - user here
99:51 - and then uh they will remain in here for
99:54 - uh 30 days and then they'll
99:55 - automatically be Del be deleted so if
99:58 - someone made a mistake this is a great
99:59 - opportunity to bring them back and so I
100:01 - can just go checkbox on rishan here and
100:04 - we can just bring her on back restore
100:06 - that
100:07 - user all right and again you know this
100:10 - is sometimes a bit delayed so we might
100:13 - have to hit
100:14 - refresh there she is and so uh you know
100:17 - that is the whole group and user stuff
100:20 - there
100:21 - [Music]
100:25 - let's take a look at how we can enable
100:27 - multiactor authentication for our users
100:30 - and so multiactor stands for MFA you're
100:32 - probably used to it where it's a
100:34 - secondary step to confirm your identity
100:36 - before logging in either via a phone or
100:39 - a hardware device such as an UB key and
100:41 - so there's this button here says
100:43 - multiactor authentication and it could
100:45 - be disabled for you it very likely is if
100:48 - you're on the uh the free version of
100:51 - um your Azure ad just going back up here
100:54 - one level you can tell based on what
100:57 - that is here so I'm using Azure ad
100:59 - premium P2 that's definitely going to
101:01 - allow me to have MFA so if you just
101:03 - don't want to turn on P2 or it's trying
101:05 - to uh charge your money don't worry
101:07 - about it just watch me do it here you
101:08 - pretty much learn what you need to know
101:10 - so we'll just go ahead and click that
101:11 - button it's going to bring us to a
101:13 - different screen here and here we have
101:15 - our users and you can see multiactor
101:17 - authentication has turned off for all of
101:19 - them so we can go ahead here and turn it
101:21 - on for a single one if I click
101:23 - enable uh and so that enables it for
101:26 - Kevin then we have some other additional
101:28 - options like manage user settings and
101:30 - here you can see we have some extra
101:31 - options so require selected users to
101:33 - provide contact methods again delete all
101:36 - existing app passwords generated by the
101:38 - selected users restore multiactor
101:40 - authentication on all remembered devices
101:42 - so just some additional things another
101:44 - thing we'll want to check out here it's
101:45 - not very obvious but we have a service
101:47 - settings button up
101:48 - here and this will give us more addition
101:50 - additional options to enforce for our
101:52 - users so first we have app passwords so
101:55 - this allows users to create app
101:56 - passwords to sign into non-browser apps
101:59 - so things that are uh not part of the
102:01 - website here and so you can whitelist
102:03 - some IP addresses for them uh so that
102:06 - they are trusted from those locations
102:08 - then for verification options this is
102:10 - something that's important we have some
102:11 - options like call to phone so um it will
102:14 - actually uh to do the MFA will actually
102:16 - call your phone and you'll tell you the
102:19 - letters and numbers that you enter in or
102:21 - it can send you a text message or it can
102:23 - notify you through the mobile
102:24 - application so you can install the
102:26 - companion app uh from the Android or iOS
102:29 - store or the Windows store I imagine
102:31 - there's a Windows store too um and then
102:33 - there's the verification code and mobile
102:35 - app on or Hardware tokens so Hardware
102:37 - tokens could be with an UB key right
102:40 - then you can say remember a multiactor
102:41 - authentication on trust devices for x
102:43 - amount of days that way they don't have
102:45 - to enter it all the time uh because it
102:47 - might get annoying for some users
102:49 - honestly for me I want everyone to
102:50 - entered every single time cuz that's
102:52 - just how I am but let's make our way
102:54 - back here and see how we can do some
102:56 - bulk assignment so what I'll do is I
102:59 - want to enable it for a few people here
103:00 - so if I go up to bulk update I can
103:03 - download a sample file and uh that's
103:06 - going to go ahead and download
103:08 - that and uh you can see I actually did
103:10 - this previously here so I'll just copy
103:12 - it and uh what we'll do is just paste
103:15 - that in there so we're just pasting in
103:18 - yeah that's fine we're just pasting in
103:20 - uh their their name right and the MFA
103:23 - status you can always get the name from
103:26 - here just back on the list there and so
103:28 - once we have saved that file we can go
103:30 - ahead and upload
103:33 - that uh they're the same here so it's
103:35 - not a big
103:37 - deal and we'll just wait a few seconds
103:39 - here this is pretty darn
103:44 - quick usually doesn't take minutes
103:46 - sometimes it takes seconds but we'll
103:48 - just give it a moment here
103:59 - and there we go so that was a long wait
104:01 - I don't know why but I verified the two
104:04 - there and so if we go next now those
104:06 - will be now enabled uh there's also this
104:08 - option to enforce so I just go there uh
104:11 - after multiactor authentication is en
104:12 - Force users will need to create app
104:14 - passwords to use non-browser
104:16 - applications such as Outlook or links
104:18 - and so that's a great option to have so
104:20 - I'll just go ahead enable that as well
104:22 - so now that's enforced and so that's all
104:24 - you really need to know about uh
104:27 - [Music]
104:31 - MFA hey this is Andrew Brown from exam
104:33 - Pro and we are looking at Azure
104:35 - Computing Services starting with Azure
104:37 - virtual machines so virtual machine is
104:40 - going to be the most common type of
104:41 - compute whenever you're launching a
104:43 - server I would just think of a virtual
104:45 - machine uh and your virtual machines
104:47 - could either be running Windows or the
104:49 - Linux operating system now the great
104:51 - thing with virtual machines is you get a
104:52 - lot of configurations so you can choose
104:54 - your OS the amount of memory the amount
104:56 - of CPU you can attach storage to it uh
104:59 - the thing here is that because it's a
105:00 - virtual machine the uh the hardware is
105:02 - shared with other customers you can get
105:04 - dedicated but generally it's shared and
105:06 - then you get a virtual uh computer um so
105:10 - it seems like you have like 100% of the
105:13 - resource okay then we have Azure
105:16 - container instances so this I would
105:18 - describe as Docker as a service you can
105:20 - run containerized apps probably runs
105:23 - Docker in both windows containers CU I
105:25 - believe uh Windows has containers as
105:27 - well but uh runs containerized apps on
105:29 - Azure without provisioning servers or VM
105:31 - so makes that a lot easier for you the
105:34 - next sounds very similar which is called
105:36 - Azure kubernetes service so it's
105:38 - kubernetes as a service uh easy to
105:40 - deploy manag and scale containerized
105:43 - applications um so the idea here is that
105:46 - kubernetes is is just another uh way of
105:49 - uh working with containers
105:51 - um but it's using an open-source library
105:53 - kubernetes has basically become the deao
105:56 - for um uh containers and so we've seen
105:59 - all the cloud providers uh try to make
106:01 - their own service or orchestration
106:03 - service but um kubernetes kind of one
106:05 - out so you'll see it on all platforms
106:07 - the next one is azure service fabric
106:09 - this one can be a bit confusing because
106:11 - it's described as many things uh but I'm
106:13 - going to describe it here is a tier one
106:15 - Enterprise container as a service uh
106:17 - application or um cloud service so um
106:21 - it's for distributed system platforms it
106:23 - runs on on the Azure cloud or on premise
106:26 - uh and the way they described is easy to
106:28 - package deploy and manage scalable and
106:29 - reliable
106:31 - microservices and anytime you hear the
106:33 - word microservices think of also
106:34 - containers so with Azure container
106:36 - instances and Azure kubernetes Services
106:38 - that's where you'd also run
106:40 - microservices then we have Azure
106:42 - functions so uh this would be event
106:44 - driven serverless compute uh anytime
106:46 - we're talking about serverless compute
106:47 - we're usually talking about serverless
106:48 - functions which are little B of code uh
106:51 - that you can just um upload and it just
106:53 - works you don't have to think about the
106:55 - servers or provision anything uh and you
106:57 - only pay for the time that that code
106:59 - runs so serverless functions generally
107:01 - run for very short duration as soon as
107:03 - they're done those uh those underlying
107:05 - servers are shutting off uh and the last
107:08 - on our list here is azure batch so you
107:09 - can plan schedule and execute your batch
107:11 - compute uh workloads across uh 100 plus
107:15 - jobs in parallel when I say jobs here
107:17 - it's just the the code that you want to
107:19 - run uh you can use spot VMS spot VMS
107:22 - might not be out at the time of this but
107:23 - it will be in the future um but
107:25 - generally it's known as low priority VMS
107:27 - but the idea here is that there are uh
107:30 - virtual machines that are being
107:31 - underutilized and so Azure is allowing
107:34 - you to uh uh rent them at a more cost
107:37 - effective cost and so if you're doing a
107:39 - lot of uh scientific compute or other
107:42 - things uh and it doesn't matter if these
107:44 - uh Services get interrupted and you want
107:46 - to use those low prior VMS that is a
107:48 - great way to save and that is the
107:50 - computer
107:51 - [Music]
107:54 - Services hey this is Andrew Brown from
107:56 - exam Pro and we are looking Azure
107:58 - virtual machines which makes it easy for
108:00 - you to choose your own OS compute memory
108:02 - and storage and launch a server within
108:04 - minutes all right so let's take a quick
108:06 - look here at VMS for Azure and this is a
108:09 - highly configurable server that relies
108:11 - on virtualization meaning that you're
108:13 - running a server without having to
108:15 - actually buy and maintain physical
108:17 - Hardware that runs it uh you will still
108:19 - have to manage things at the software
108:21 - layer so you would have to apply your
108:23 - own OS system patches and installing the
108:26 - configuration packages but the nice
108:28 - thing is that you're not dealing with
108:29 - that Hardware it's just going to work
108:31 - for you and some things I want you to
108:33 - know about Azure virtual machines is
108:35 - that the size of the virtual machine is
108:36 - determined by the Azure image uh and so
108:39 - the image defines the combination of
108:41 - vcpus memory and storage capacity the
108:44 - current limit on a per subscription
108:45 - basis is 20 VMS per region I would think
108:48 - that if you wanted more you could just
108:49 - use another sub subscription I don't
108:51 - know if they have service limit increase
108:52 - for that but that might be possible as
108:54 - well Azure VMS are build at an hourly
108:56 - rate an instance uh or a single instance
108:59 - that you launch is going to have
109:01 - availability of 99.9% when you're using
109:04 - premium disc if you have standard disc I
109:06 - have no idea what it is um but it's
109:08 - going to be less than that if you want
109:10 - to get
109:12 - 99.95% availability you're going to have
109:14 - to launch two instances within an
109:15 - availability set and you can attach
109:18 - multiple manag discs to an azure virtual
109:21 - machine now just to give you uh like a
109:24 - quick visual of what's actually
109:25 - happening when you launch an instance
109:27 - because when you do launch a virtual
109:29 - machine there's going to be other
109:30 - networking components that are going to
109:31 - be created or associated with you and
109:33 - you definitely need to know all these
109:35 - components here so I have this nice
109:36 - diagram we're going to do a quick run
109:38 - through with it and I want you to just
109:40 - know that when you do launch a virtual
109:42 - machine it actually does give you a list
109:44 - of all the components that it creates
109:46 - this is actually very common with most
109:47 - Azure services and sometimes what
109:49 - they'll do is they'll put it within a
109:50 - resource Group for you so that they're
109:52 - all grouped together which is very nice
109:54 - um but uh let's just run through these
109:57 - uh common components that you need to
109:58 - know such as the network security group
110:00 - and this is going to be attached to your
110:02 - network interface it acts as a virtual
110:04 - firewall with rules around ports and
110:05 - protocol so that is what's protecting
110:07 - our virtual machine you have the network
110:10 - interface that handles IP protocols so
110:12 - that's how the virtual machine uh talks
110:14 - to the internet or other things on the
110:16 - network you have the virtual machine
110:17 - itself or the instance that's a uh the
110:20 - version or the um uh instance that is
110:23 - currently running it's going to get a
110:25 - public IP address assigned to it so
110:27 - that's how um people from the internet
110:29 - can actually access the virtual
110:31 - machine and then you're going to have to
110:32 - launch it within a virtual network uh
110:35 - and so that's you're going to have that
110:37 - v-net so you'll either you'll either
110:38 - choose one or you'll be creating one uh
110:41 - during that wizard process so there you
110:44 - [Music]
110:47 - go so now let's take a quick look at the
110:50 - options for operating systems on Azure
110:52 - VM and let's just Define what an OS is
110:55 - uh so the OS is the program that manages
110:57 - all other programs in a computer and the
110:59 - most commonly known operating systems
111:00 - are windows Mac OS and Linux and when
111:04 - you want to uh launch a virtual machine
111:07 - the way you determine what operating
111:08 - system you use is based on the image
111:10 - that you choose okay and um Azure has a
111:14 - Marketplace so they have so many
111:17 - different kinds of operating systems
111:18 - you're going to have every Poss option
111:20 - you want and Microsoft is also partnered
111:23 - uh with specific companies to make sure
111:25 - that they're providing you images that
111:27 - are updated and optimized for the Azure
111:29 - runtime so let's do a quick run through
111:31 - of these supported or partnered uh os's
111:35 - so we have Seuss we have red hat Ubuntu
111:38 - Debian FreeBSD um then you have flat car
111:41 - container Linux Rancher OS which is for
111:44 - containerization bitnami bitnami is more
111:46 - like images that have pre-loaded
111:48 - software on them they very popular for
111:50 - their bitnami WordPress you have
111:53 - mesosphere uh and then you have images
111:55 - that have Docker with it so you have a
111:57 - lot of options uh open to you there and
111:59 - I always forget about Jenkins and
112:00 - Jenkins is on the end there now if you
112:03 - want to bring your own Linux version you
112:05 - can totally do so all you have to do is
112:07 - package it into a virtual hard disk or a
112:10 - vhd uh if you've never heard of vhd uh
112:13 - these are these are just uh virtual hard
112:15 - disk formats that you can create using
112:18 - hyperv software which would be on your
112:20 - Windows machine uh and just be aware
112:23 - that Azure doesn't support vhdx which is
112:25 - a newer format it it only uses vhd okay
112:29 - so there you
112:33 - go so let's take a look here at Azure
112:35 - scale sets and these are used to
112:37 - automatically increase or decrease your
112:39 - virtual machine capacity so imagine uh
112:42 - you have a web application behind an
112:44 - application load balancer and you have
112:46 - an increase in traffic you want to be
112:48 - able to quickly add more capacity by
112:50 - adding another identical virtual machine
112:53 - or when uh there's a decrease in traffic
112:56 - remove it to save cost and that is what
112:58 - Azure skill sets do um so you're
113:01 - creating uh skill policies to
113:02 - automatically uh add remove based on
113:05 - host metrics host metrics could be like
113:07 - CPU utilization or uh Network in uh
113:10 - you're going to create health checks and
113:12 - you can also uh set a repair policy to
113:15 - replace unhealthy instances you can
113:17 - associate a load balancer to distribute
113:20 - virtual machines across uh availability
113:22 - zones and you can scale to 100 or even a
113:25 - th000 VMS using scale
113:31 - sets so one thing you're going to
113:33 - probably want to do with your scale set
113:34 - is associate with a load Bouncer and in
113:36 - honest I don't run any kind of
113:38 - application workload uh unless it is in
113:40 - a scale set and behind a load balancer
113:43 - because it's just good practice to do
113:44 - that and the reason why you're going to
113:45 - want a load balancer is that it's going
113:47 - to help you evenly distribute your VMS
113:49 - across multiple availability zones and
113:51 - that's going to give you high
113:52 - availability uh because you definitely
113:54 - want to try to run uh 3 VMS across 3 azs
113:58 - to get that a high availability uh you
114:00 - can also use a load balancer probe
114:03 - checks and these are more robust health
114:04 - checks than what scill set provides you
114:07 - uh so that's just an added benefit there
114:10 - uh and when we're talking about um load
114:12 - balancers we have two different choices
114:14 - here we have the application Gateway and
114:16 - so this is for HTTP htps web traffic
114:19 - load balancer uh and then you also have
114:22 - Azure load balancer and this is going to
114:23 - support TCP and UDP Network traffic and
114:27 - things like that so depending on what
114:29 - OSI layer you need to operate on is
114:31 - going to determine what kind of load
114:32 - bouncer you need to
114:37 - use so let's take a look at scaling
114:39 - policies and these determine when a
114:41 - virtual machine should be added or
114:42 - removed to meet the current requirements
114:44 - and you have this uh Little Wizard here
114:46 - this is what the What wizard you see or
114:48 - form you see when you're creating a
114:50 - scale set initially with very simple
114:52 - features but let's just focus on two
114:53 - things scaling out and scaling in so
114:55 - scaling out is when an instance should
114:57 - be added to a skill set to increase
114:58 - capacity so you choose your metric uh
115:01 - which is hardcoded in this case to CPU
115:03 - threshold so you choose your metric the
115:05 - duration how many VMS you want to add
115:08 - and then the scale in is the opposite
115:09 - that's when you're removing uh uh uh
115:12 - something from the scale set to decrease
115:13 - your capacity and again that interface
115:16 - is very simple uh when you actually go
115:18 - ahead and create a scale set after you
115:20 - go and update it you're going to end up
115:21 - with a lot more options and here are the
115:24 - options you can see they're extremely
115:26 - robust and so uh you have the option to
115:29 - choose one of the built-in host metrics
115:30 - that are already be being collected on
115:32 - your virtual machine so uh the most
115:34 - popular here and there's more than this
115:36 - but uh the most popular here is CPU
115:38 - Network in network out dis read and
115:40 - write uh then you have your Aggregates
115:42 - so you can decide how you want to group
115:44 - or uh collect that data uh before you
115:47 - apply your final operations on it uh
115:49 - then you have your operator so you can
115:51 - say greater than or greater than or
115:53 - equal to then you have your actions you
115:55 - can say increase the count of so add uh
115:58 - x amount of servers or you can say uh
116:01 - increase by percentage so imagine you
116:03 - had um uh 10 servers and you want to
116:06 - increase the load by 30% that would add
116:08 - three additional servers if you want
116:10 - more metrics than just the built-in host
116:12 - metrics you can absolutely get more uh
116:14 - but you're going to have to install a
116:15 - couple things uh for app uh if you want
116:17 - more app specific metrics like page
116:19 - performance or page load performance and
116:21 - sessions count you would uh install a
116:24 - small instrumentation package for app
116:25 - insights and uh if you want to have more
116:28 - detailed host metrics so you might have
116:30 - host metrics but you want them in more
116:31 - detail or more available host metrics
116:33 - you'd install the Azure diagnostic
116:35 - extension within your VM um there are a
116:38 - few other uh scaling policy options that
116:41 - are well they're not exactly in that
116:42 - form but they are around or are
116:44 - associated with them one is the scale in
116:47 - policy not to be confused with the scale
116:48 - in options
116:50 - um and this determines what virtual
116:52 - machine should be removed when you
116:54 - decrease capacity so it's just a simple
116:55 - drop down and you have a few different
116:57 - options so there's the default option
116:58 - this is where it deletes the VM with the
117:00 - highest instance ID and it's going to do
117:02 - that b uh uh take in consideration uh
117:05 - the balancing across azs and ads or it
117:08 - can delete the newest virtual machine so
117:09 - delete the newest VM again uh this one's
117:12 - only across uh virt or availability
117:14 - zones or delete the oldest VM this is
117:17 - going to delete the oldest VM and
117:19 - balance across availability zones then
117:21 - you have an update policy and this
117:24 - determines how uh how VM instances are
117:27 - brought up to date with the latest scale
117:29 - set model so again it's another drop
117:30 - down and you have a a few options here
117:33 - so you have automatic so increasing the
117:35 - start upgrade immediately in random over
117:37 - uh order or or manual so existence or
117:40 - existing instances must be manually
117:42 - upgraded or rolling and so this update
117:45 - upgrades roll out uh in batches with
117:48 - optional pause uh and just one other
117:50 - note here is that if you want to do
117:52 - automatic OS upgrades you can enable uh
117:54 - this to help ease update management by
117:56 - safely and automatically upgradeing the
117:57 - OS disk for all instances so there you
118:01 - [Music]
118:04 - go Health monitoring is a feature with
118:07 - skill sets you're absolutely going to
118:08 - want to turn on uh and what it does is
118:11 - it determines whether your instance your
118:12 - virtual machine instance is healthy or
118:14 - unhealthy so you have that option to
118:16 - disable or enable it and it comes in two
118:18 - different modes we're going to have the
118:20 - application Health extension which is
118:21 - what we're seeing on the right hand side
118:23 - here and this is where you ping an HTTP
118:25 - or htps request with a specific path uh
118:29 - and expect a back a specific status so
118:33 - the status here would be 200 so the idea
118:35 - is that you could say ping the homepage
118:36 - and if the homepage appears then
118:38 - therefore the server must be healthy or
118:40 - you can make it your own custom uh page
118:42 - that's what I like to do I have like a
118:43 - health check page the other mode is load
118:46 - balancer probe uh this is only going to
118:48 - work if you have an associate IED load
118:49 - balancer and uh here you can check based
118:53 - on TCP UDP HTP request so this is a
118:56 - little bit more robust um um so I
118:59 - generally would recommend using this
119:01 - mode over um the the first mode because
119:05 - generally when you have a scale set
119:06 - you're going to also want to have a load
119:08 - balancer uh now if you want to replace
119:11 - unhealthy instances they have an
119:12 - automatic repair policy so this is an
119:14 - automatic I mean like it's not turned on
119:16 - by default so you have to uh explicitly
119:18 - say you want to turn it on and what that
119:20 - will do is that if it finds an instance
119:22 - that is unhealthy it's just going to uh
119:24 - terminate it and then launch a new
119:25 - instance all right and so there you
119:31 - go all right let's take a look at Azure
119:33 - virtual desktop formerly known as
119:35 - Windows Virtual desktop Azure virtual
119:38 - desktop on Microsoft Azure is a desktop
119:40 - and app virtualization service that runs
119:42 - on the cloud Azure virtual desktop works
119:45 - across devices like Windows Mac iOS
119:48 - Android and Linux with apps that you can
119:50 - use to access remote desktops and apps
119:52 - you can use most modern browsers to
119:54 - access Azure virtual desktop hosted
119:56 - experiences use Azure virtual desktop
119:59 - for specific needs like when security is
120:01 - a concern because all data is saved on
120:02 - the server and cannot be left on the
120:04 - device of a user key features and
120:06 - benefits enable secure and productive
120:09 - remote work on any device Azure virtual
120:12 - desktop provides full Windows 10 and
120:13 - Windows Server desktop and application
120:15 - virtualization on any personal device
120:18 - seamless integration with Microsoft 365
120:21 - apps for Enterprise and Microsoft teams
120:24 - reduce costs of Licensing and
120:25 - infrastructure use eligible windows or
120:28 - Microsoft 365 licenses to access Windows
120:31 - Virtual desktop and pay only for what
120:33 - you use protect against outages to stay
120:35 - productive help keep your team running
120:38 - during outages by leveraging built-in
120:39 - Azure site recovery and Azure backup
120:42 - Technologies simplify it Management
120:45 - Windows Virtual desktop manages the
120:47 - virtual desktop infrastructure for you
120:48 - say so you can focus on users apps and
120:51 - Os images instead of hardware and
120:52 - maintenance Heap application and user
120:55 - data secure easily apply the right
120:57 - access controls to users and devices
120:59 - with Azure active directory conditional
121:02 - access so that's an overview of azure
121:04 - virtual
121:06 - [Music]
121:09 - desktop hey this is Andrew Brown from
121:12 - exam Pro and I'm going to show you how
121:13 - to launch your own server on Azure uh
121:16 - and so a server would be considered some
121:18 - kind of Computing service and the one
121:20 - we're going to do right now is we're
121:22 - going to use Virtual machines so go the
121:24 - uh all the way to the top here to the
121:25 - search and I want you to type in virtual
121:27 - machine I know it's on our dashboard
121:29 - here but just to get the get in the
121:31 - habit of always being able to find stuff
121:33 - it's great to use the search and then
121:35 - once we're here on the left hand side I
121:36 - want you to click
121:39 - add and we're going to be presented with
121:41 - a lot of different options so the first
121:43 - thing we need to do is choose our
121:45 - Resource Group uh we have another
121:46 - Resource Group we that was created here
121:48 - for us for azure
121:49 - I wouldn't worry about it let's just
121:50 - choose the one that we created I'm going
121:52 - to name this virtual machine I'm going
121:54 - to call it my VM we're going to launch
121:56 - it in uh Us East uh if we wanted to
121:58 - choose an a we could so we go to
122:00 - availability Zone and choose one I'm
122:02 - just going to stick to no infrastructure
122:05 - then we have Ubuntu here it's using the
122:06 - latest version it might be different for
122:08 - you I wouldn't worry too much about it
122:10 - then we need to choose our size this is
122:12 - going to really determine our cost here
122:13 - this is $89 Canadian I'm just going to
122:16 - go ahead and hit select uh here
122:19 - and we're just going to sort on the
122:21 - right hand side based on cost and we're
122:23 - going to choose the most inexpensive
122:24 - server which is the B1 LS so that's one
122:27 - vpcu and half a gigabyte of ram um
122:31 - because this is just an example app
122:32 - we're not going to do any or a server
122:33 - we're not going to do anything with it
122:35 - so we might as well make sure we're not
122:36 - overspending our free credits uh we have
122:39 - the option to add a public key this is
122:41 - what you generally would want to do uh
122:43 - but that's a lot of work and so uh for
122:45 - this demo so we're just going to choose
122:47 - password they're very finicky about the
122:49 - passwords here that it has to have a
122:51 - uppercase lowercase special
122:53 - character um number and it also has to
122:56 - be 12 characters so I'm going to type in
122:58 - testing with a capital T testing 1 2 3
123:01 - exclamation exclamation and then testing
123:04 - uh with a capital on the T 1 2 3
123:07 - exclanation exclamation so there we go
123:10 - uh we don't need um any inbound ports
123:13 - I'm going to say none because we're not
123:14 - sshing in I'm just going to click
123:16 - forward here to show you some of the
123:17 - other options so we could Cho are are
123:19 - the type of uh dis we'd be attaching so
123:22 - it's by default on premium you might
123:23 - want to choose standard or standard htd
123:26 - generally when you're launching web web
123:28 - apps you want SSD if we were to choose
123:30 - standard it would say hey you should
123:31 - really use premium so we're just going
123:33 - to go back to premium you're going to
123:35 - notice that the uh disk is encrypted by
123:37 - default so you can't have an unencrypted
123:39 - dis that's a very good uh default option
123:42 - if we go over to networking it's going
123:44 - to automatically select our v-net that
123:46 - we chose uh and the default sub net that
123:49 - we uh that it created uh when we created
123:51 - the v-net and then here we could choose
123:53 - whether we want an IP address or not um
123:56 - if it had no I or public IP address it
123:58 - would still have a private IP address um
124:01 - and that would that would mean that it
124:02 - like it's really intended for a private
124:04 - subnet um it has a network security
124:07 - group set on to basic here um and that's
124:11 - pretty much it here you could also put
124:12 - it behind a load balcer we're not going
124:13 - to do that let's go over to management
124:16 - management we have a couple options here
124:18 - like identity auto shut shut down backup
124:21 - um these are all fine we're just going
124:22 - to leave it alone for Advance we could
124:24 - put custom data in here that means we
124:26 - could provide it a script that it would
124:28 - use to initially set up the server we're
124:30 - not going to do that um and that's about
124:32 - it so I'm going to go back to basic and
124:34 - I'm going to scroll all the way down to
124:35 - the bottom and I'm going to hit review
124:37 - review plus create and what we're going
124:39 - to have to do is wait for this
124:40 - validation step that was very fast it
124:43 - might take multiple seconds for you or
124:45 - even a minute um but sometimes it's
124:47 - faster than others so so now I'm going
124:49 - to go down below and hit
124:51 - create and we're just going to wait for
124:53 - that deployment to be submitted it's
124:55 - going to say deployment is underway and
124:57 - then soon it's going to say deployment
124:58 - is complete so I'll see you back here in
125:00 - a moment when deployment is complete
125:03 - great so we had to wait a few minutes
125:05 - there and now it says deployment is
125:06 - complete and we can PR proceed to go to
125:09 - Resource and so here's our virtual
125:11 - machine we have some CPU some Network
125:13 - some dis so there's some activity here
125:15 - um if we wanted to gain access to it
125:18 - there should be connect button here
125:19 - we're not going to be able to gain
125:20 - access to it because we just didn't set
125:22 - it up in a way that that was the case we
125:24 - have a few options down the left hand
125:26 - side such as the diss that are actually
125:28 - attached to it and maybe the size here
125:31 - so maybe if we wanted to um resize
125:34 - change it to a larger size we could go
125:35 - ahead and do that um but there's nothing
125:38 - really exciting here to do I just wanted
125:40 - to show you how to launch your own
125:41 - virtual machine and now that we have our
125:43 - own virtual machine uh launched I'm
125:44 - going to go back to overview we're going
125:46 - to go ahead and delete that because this
125:47 - is now costing us money uh it's not
125:49 - costing us a lot of money but uh again
125:52 - we're done here so we'll just go ahead
125:53 - and delete we're going to say yes to
125:55 - delete and now it says it's deleting the
125:57 - virtual
125:58 - machine and so we're just going to wait
126:00 - until this is uh finished
126:04 - deleting and a lot of times you can just
126:06 - look at the progress up here and it'll
126:07 - say deleting the virtual machine could
126:09 - take a few seconds it could take a few
126:11 - minutes um it just depends so I'll I'll
126:14 - see you here in a little bit when this
126:16 - is done
126:16 - deleting so after a little while here it
126:19 - says it's how it's successfully deleted
126:21 - the virtual machine if we want to make
126:23 - sure that it's deleted let's go make our
126:24 - way over to Virtual machines at the top
126:27 - here in the search and you're going to
126:28 - notice that it's still showing up there
126:30 - but it said it was deleted and this is
126:32 - the thing with uh Azure is that it takes
126:34 - time for it to propagate so what we'll
126:36 - have to do is just hit refresh and now
126:38 - it's gone so just be aware that um
126:41 - sometimes the consistency in terms of
126:43 - what you see in the UI is a bit delayed
126:45 - and so um if you remember clicking
126:48 - delete and it says that it deleted it
126:50 - just uh have a bit of patience there and
126:52 - hit refresh and just double check to
126:53 - make sure that's the case so there you
126:59 - go hey this is Andrew Brown from exam
127:01 - Pro and we're looking at Azure app
127:02 - Services which allows you to quickly
127:04 - deploy and manage web apps on Azure
127:06 - without worrying about the underlying
127:07 - infrastructure and specifically this is
127:09 - known as a platform as a service so
127:12 - Azure app service is an HTTP based
127:15 - service for hosting web applications
127:17 - rest apis and mobile backends and you
127:19 - can choose your programming language and
127:21 - it can either be windows or L Linux
127:23 - environment and it's a platform as a
127:25 - service so if you've ever used Heroku is
127:28 - basically the Heroku of azure and so
127:31 - Azure app service takes care of a lot of
127:32 - the underlying infrastructure for you so
127:34 - can do security patches of the OS and
127:36 - languages load balancing autoscaling
127:39 - automated manager uh and then um there's
127:42 - a lot of things that you can Implement
127:44 - uh and so for Integrations such as Azure
127:47 - devops uh GitHub Integrations Docker Hub
127:51 - uh package management easy to set up
127:53 - staging environments custom domains
127:56 - attaching uh SSL certificates so you can
127:58 - see that it just basically takes care of
128:00 - everything for you uh if it's really
128:02 - hard for you or timec consuming for you
128:04 - to do all this on your own in Azure and
128:07 - the way it works is you pay based on an
128:09 - Azure app service plan honestly I find
128:12 - these really confusing um I really like
128:14 - how adus does elastic beanock because
128:16 - you're just paying for the underlying
128:17 - services but Azure has all these crazy
128:20 - uh tiers here uh but you have shared
128:23 - tier which is free and shared doesn't
128:25 - support Linux you have the dedicated
128:26 - tier uh which is basic standard premium
128:29 - premium version two and three and the
128:31 - isolated tier and so uh another thing I
128:34 - need to note is that Azure app Services
128:36 - is not just for traditional VMS for
128:39 - monoliths you can also run Docker single
128:41 - or multi containers uh and when you set
128:44 - up a project you're going to choose your
128:46 - domain name on the azurewebsites.net
128:48 - obviously you can override that with
128:49 - your custom domain name but there you
128:52 - [Music]
128:55 - go let's talk about Azure app services
128:58 - runtimes and so let's define what a
129:00 - runtime is a runtime is software
129:02 - instructions that are executed while
129:04 - your program is running and so runtime
129:06 - generally means what programming
129:08 - language libraries and Frameworks you're
129:09 - going to be using and so uh runtimes for
129:12 - Azure app services are predefined
129:14 - containers that has your programming
129:15 - languages and probably some commonly
129:17 - used Li
129:18 - for those languages installed and
129:20 - probably commonly used languages for web
129:23 - Frameworks and so the idea is that
129:25 - you're going to choose your uh runtime
129:28 - it could be net net core Java Ruby which
129:33 - I'm very disappointed in Azure because
129:35 - uh as of shooting this video they do not
129:37 - support uh Ruby for application insights
129:40 - but yet they have it here in Azure app
129:42 - Services node GS PHP Python and there's
129:46 - all the logos uh if you like seeing the
129:47 - logos
129:49 - and so Azure app Services generally has
129:50 - multiple versions so they have like Ruby
129:53 - 2.6 2.7 for PHP they have a lot of
129:56 - versions for no J they have a lot of
129:57 - versions uh but I just want to point out
130:00 - uh that it's pretty common for cloud
130:01 - providers to stop or to retire the old
130:04 - ones at some point to stop supporting
130:06 - them uh you know that just because they
130:08 - want to keep things modern um and the
130:10 - other thing is like it also helps you
130:12 - keep with your best security practices
130:13 - because really you should always be
130:15 - trying to upgrade to the latest version
130:17 - uh for those security patches and and
130:19 - things like that so there you
130:24 - go but now let's say uh you wanted to
130:28 - use a language that wasn't supported on
130:31 - um Azure app services like you wanted to
130:33 - use uh Elixir what you could do is
130:36 - create your own custom container either
130:38 - for Windows or Linux uh and so uh you
130:41 - just go ahead and create your own Docker
130:43 - container on your local environment you
130:45 - can push it to an Azure container
130:46 - registry and then the the idea is you
130:48 - can deploy your container image to your
130:50 - app service so I just wanted you to know
130:52 - that you could do that um if there's
130:54 - some languages or other things or maybe
130:56 - you're using a language but you need uh
130:58 - some bundle or packages that are uh that
131:01 - are just baked into the uh into the
131:03 - Container so there you
131:07 - go let's talk about deployment slots so
131:10 - deployment slots allow you to create
131:11 - different environments for your web
131:12 - application and Associate a different
131:14 - host name this is useful when you need a
131:16 - staging or quality assurance environment
131:18 - or maybe you need just like a developer
131:20 - environment any kind of environment you
131:21 - want so think of it as a way to quickly
131:23 - clone your production environment for
131:24 - other uses and so down below here you'd
131:27 - have your deployment slots and there's
131:28 - your slots maybe you have app staging
131:30 - beta so that's the different uh host
131:32 - names there uh and so the idea is that
131:35 - not only do you have other environments
131:36 - but there's also this thing called
131:37 - swapping and the idea is like imagine uh
131:40 - you decide like you make a clone of your
131:42 - production environment and then you
131:44 - deploy the latest version to it and then
131:47 - when you decide that it's good it's in
131:48 - good shape then what you can do is swap
131:50 - it out with your current production
131:52 - environment and then just retire your
131:54 - old one and this is called blue green
131:56 - deployment uh and so that is a great way
131:58 - to uh do deployments and I just wanted
132:00 - you to be aware of
132:04 - that so I wanted to talk about app
132:06 - service environment because I just
132:08 - wanted to show you how Azure app service
132:10 - is not just for little toy apps or your
132:13 - small startup but they can be really
132:15 - useful for larger Enterprises so um app
132:18 - service environment is an Azure app
132:20 - service feature that provides fully
132:21 - isolated and dedicated environment for
132:23 - securely running app Service uh at high
132:27 - scale and this is going to allow you to
132:29 - host web or Windows Web apps Linux web
132:31 - apps Docker containers mobile apps and
132:33 - functions and app service environments
132:36 - are appropriate for application
132:37 - workloads that require very highs scale
132:40 - isolation and secure network access High
132:43 - memory utilization and again you know
132:45 - when you think of platform as a service
132:47 - you don't think it this kind of scale so
132:48 - it's really impressive that Azure does
132:50 - this customers can create multiple asc's
132:52 - within a single Azure region or across
132:55 - multiple Azure regions making ASC ideal
132:57 - for horizontal scaling stateless
132:59 - application tiers in support of high
133:01 - request per second RP RPS workloads and
133:04 - ASC comes with its own pricing tier and
133:06 - that's the isolated tier and ASC can be
133:09 - used to configure security architecture
133:11 - apps running ASC can have their access
133:14 - gated by Upstream devices such as a web
133:17 - app application firewall also known as a
133:19 - WAFF app or s s ases can be deployed
133:24 - into availability zones using Zone
133:26 - pinning I don't know what that is a Zone
133:28 - pinning but that sounds good to me uh
133:30 - and there are two deployment types for
133:33 - ASE we have external ASC and ilb ASC
133:37 - let's go take a quick look at what those
133:38 - look like so here's a big diagram and
133:41 - look in the middle there that's where
133:42 - our Azure uh uh service environment is
133:46 - it's in our own v-net and a subnet and
133:48 - the idea is that you if the reason it's
133:50 - called an external ASC is because it
133:52 - exposes the ASC hosted app on an
133:55 - internet accessible IP address and then
133:58 - down below uh if you wanted to connect
134:00 - this this is generally what people are
134:02 - probably using for but what uh you want
134:04 - to do is you can connect it to your on
134:05 - premise via a site to site or express
134:08 - route VPN um so that's something you can
134:11 - do with it and the other part is like
134:14 - you can because the ASC is within the
134:16 - same v-net it also has access to
134:18 - resources within the v-net without any
134:20 - additional configuration so that's
134:21 - really nice and then the second uh
134:24 - second one here it looks it's exactly
134:26 - identical but there's one key difference
134:29 - and it has this ilb there and an ilb
134:31 - stands for internal load balancer um and
134:34 - that is basically the only difference so
134:37 - uh there you
134:38 - [Music]
134:41 - go so the way you pay uh when you use
134:45 - Azure app service is you need an Azure
134:47 - app service service plan and that's
134:48 - going to determine you know how much you
134:50 - pay and what's going to be available to
134:51 - you they got three tiers which we're
134:53 - going to go uh through here shortly and
134:55 - we did mentioned them earlier I honestly
134:57 - do not like this whatsoever this tells
134:59 - you this this is a Microsoft product
135:01 - because it has these uh wonky pricing
135:03 - tiers I hope in the future they'll
135:05 - change it but that's just what it is and
135:07 - so let's go learn it so basically what
135:09 - you do is you have like this big uh
135:11 - wizard uh that tells you all the stuff
135:13 - that you can have it tells you what's
135:14 - included and stuff like that uh but
135:17 - let's work our way through through it so
135:18 - the first thing is the shared tier and
135:19 - there's two types here we got free and
135:21 - shared and so there's the free tier that
135:23 - red one there it's called F1 it gives
135:25 - you 1 gigabyte of disk space up to 10
135:27 - apps on a single shared instance no SLA
135:30 - for availability and each app app has a
135:33 - compute quota of 60 minutes per day so
135:35 - there you go you get some uh free tier
135:37 - there then there's the shared tier this
135:38 - provides up to 100 apps on a single
135:40 - shared instance no SLA availability each
135:42 - app has a compute quota of 240 minutes
135:44 - per day uh and the thing is is that I
135:46 - didn't know where the button is for that
135:48 - so like the next thing right beside it
135:49 - is the dedicated tier and I thought
135:52 - that's what it would be because it says
135:53 - 100 total
135:55 - acus so is it I'm not sure but anyway
135:58 - the point is there is a Shar tier where
136:00 - it is I don't know and you can't use the
136:02 - Shar tier on uh on the on Linux base
136:05 - system so you're using Windows you're
136:07 - using Windows you got to use bigger
136:08 - instances anyway which I don't know I
136:09 - don't like that too much but that's what
136:11 - it is uh moving on uh over we're now
136:14 - into the dedicated tiers and look it's
136:16 - right beside the free tier that's the
136:18 - green one it says B1 and if you expand
136:21 - it it actually has a couple other tiers
136:22 - there so I just wanted to show you that
136:23 - there was uh three uh there and so uh
136:27 - for dedicated TI we got basic standard
136:28 - premium premium version two premium
136:30 - version three and we're looking at basic
136:32 - that's what that is more disc space
136:33 - unlimited apps three levels in this tier
136:36 - that offer varying amount of compute
136:37 - power memory disc usage it must be B1 B2
136:40 - B3 uh and then the next thing over is uh
136:43 - the standard and we had we had to switch
136:45 - tabs there onto the production tab
136:47 - notice the terminologies don't really
136:49 - match the tiers uh and so uh with
136:51 - standard you can scale out to three
136:52 - dedicated instances has an SLA of
136:55 - 99.95% availability and three levels in
136:58 - this tier that are offering varying
137:00 - amounts of compute power memory and
137:02 - storage dis and so then uh that's that
137:06 - tier there and we're on to our last tier
137:08 - which is the premium tier and this
137:10 - scales to uh 10 dedicated instances it
137:13 - has availability SLA of
137:15 - 99.95% and multiple levels of Hardware
137:19 - so that's the dedicated TI then we're on
137:21 - to the last thing which is isolated and
137:23 - this is really only to be used I think
137:24 - for ASC so the uh the isolated tier has
137:27 - dedicated Azure virtual networks uh full
137:30 - Network compute isolation scales out to
137:33 - 100 instances availability SLA of 99.95%
137:36 - and again I think it's just for those
137:38 - as um but there you go that is all the
137:41 - tiers and hopefully it makes sense to
137:43 - you but it is a little bit tricky to
137:44 - figure out what to choose but you don't
137:46 - really get to like pick at a granular
137:48 - level that's what I don't like um but uh
137:51 - it is a really great service Azure app
137:53 - uh service it does figure everything out
137:55 - for you so maybe it's okay for
137:57 - [Music]
138:00 - you hey this is Andrew Brown from exam
138:02 - Pro and we are going to be learning
138:04 - about Azure app services in this follow
138:06 - along uh and it's a service that's
138:08 - supposed to make it easy for you to
138:09 - deploy web applications I say supposed
138:11 - to because it really depends on your
138:13 - stack Azure has more synergies with
138:15 - other Stacks than others so if you're
138:18 - like me and you like Ruby on Rails
138:19 - you're going to find a lot of friction
138:21 - with rails and Linux but if you're using
138:23 - something like Windows servers or python
138:26 - or.net you're going to have a much
138:27 - easier time still really great service
138:29 - just wish they'd make it a bit more
138:30 - broad there but let's hop into it so
138:32 - before we can go use that service let's
138:35 - make sure that it's activated and so
138:37 - we'll go over here and we'll go to Azure
138:40 - subscription and then down below we're
138:42 - going to go to Resource provider now you
138:44 - think what you could do is just type in
138:46 - app services
138:48 - uh and you'd be wrong because the the
138:50 - service is under a particular provider
138:52 - so if you want to figure out what
138:53 - provider it is we can go um Azure
138:56 - resource
138:58 - providers and they have a page on
139:00 - documentation here that lists them all
139:02 - so if I search for Azure app
139:06 - Services it's under web and domain
139:08 - registration so we're going to make sure
139:10 - this is registered if we're using a
139:11 - custom domain which we are not today we
139:14 - need this one activated so going back
139:17 - here I will type in web and you can see
139:19 - it's registered so if yours is not
139:21 - registered go ahead and hit that I
139:23 - believe this by default is generally
139:25 - registered with new Azure accounts so I
139:28 - don't think that is an issue for you but
139:30 - we'll go back up here close these
139:31 - additional tabs and we will type in
139:33 - Azure app
139:35 - services and we will look for that
139:38 - service so there it is and we'll go
139:39 - ahead and hit
139:41 - add um and so I'm going to give it a new
139:44 - name I just made it a moment ago but I'm
139:46 - going to try again again and try to use
139:48 - the same name so we're going to call
139:49 - this
139:51 - Voyager Great and then I'm going to go
139:54 - ahead and name this Voyager and I
139:55 - already know that that is taken so I'm
139:57 - going to type in Delta
139:59 - Flyer and these are fully qualified
140:02 - domains so they are unique with Azure
140:03 - app Services you can run a Docker
140:05 - container we're doing code this time
140:07 - around and what I like to use is Ruby um
140:10 - but again you know if I want to use the
140:12 - cicd I'm not going to be able to use the
140:14 - deployment center with Ruby so that is
140:16 - not possible um and so we're going to go
140:18 - with python and run either a flask or
140:20 - ajango app I haven't decided yet I am in
140:23 - Canada so let's go to Canada east and uh
140:27 - down below here we have the plans
140:29 - generally the plans will tell you the
140:31 - cost underneath you'll notice that it's
140:32 - loading but I just want to show you that
140:34 - there are some discrepancies in terms of
140:36 - pricing so if I was to go to Azure app
140:39 - Services
140:41 - pricing and we were to pull this up here
140:44 - we can kind of see the pricing
140:46 - here okay and if we scroll on down right
140:49 - now we're looking at a premium V2 uh and
140:52 - oh no I don't need help I'm okay you'll
140:55 - notice that it's 20 cents per hour so if
140:57 - I go here and do that times 730 because
141:00 - there's 730 hours in the year that's
141:03 - $146 I believe this is showing me in USD
141:06 - dollar yeah and in here it's showing me$
141:10 - 103 Canadian which is lower um so it
141:14 - could be that because I'm running in a
141:15 - Canada east region it's
141:17 - the price is different but you could
141:19 - imagine that if I had this at this cost
141:22 - at uh what did we say here um at 146
141:26 - USD to CAD I'd actually be paying
141:31 - $182 so you got to watch out for that
141:33 - kind of stuff but I'm pretty sure this
141:35 - is what the cost is so just be aware
141:37 - that if you look stuff up in here it's
141:39 - not necessarily reflective so you got to
141:40 - do a little bit more work to figure that
141:42 - out uh if we wanted to go here uh we
141:45 - cannot choose the free tier when we're
141:46 - using Linux if we're using Windows I
141:48 - believe we can use it we're working with
141:50 - Linux today so that's just how it's
141:51 - going to be um for the B1 this is
141:54 - totally fine but we want to utilize
141:56 - deployment slots deployment slots is an
141:58 - advanced feature of uh the production
142:00 - version and that's the only way we're
142:02 - going to be able to use it here this is
142:03 - 20 cents per hour again so I don't want
142:06 - to be doing this for too long but I
142:07 - think what we'll do is before we do that
142:10 - we can just do an upgrade to Dev to prod
142:12 - so we can experience that I'm going to
142:14 - go and just choose B1 okay so we go next
142:19 - um we do not need any application
142:21 - insights for the time being and it will
142:22 - not let us so it's okay we'll go next
142:25 - review and
142:27 - create and we'll go ahead and create
142:29 - this resource here and I will see you
142:32 - back when this is done so um our
142:36 - resources is now set up we'll go to
142:37 - Resource and now that we're in here
142:40 - you'll notice if we hit browse we're not
142:41 - going to see anything because we do not
142:43 - have anything deployed which makes sense
142:45 - right uh so we're going to actually have
142:47 - to go ahead and deploy something so we
142:49 - are going to make our way over to the
142:50 - deployment
142:51 - Center and uh it's just going to tell us
142:54 - that we have yet to configure anything
142:55 - and that's totally fine we're going to
142:57 - go to
142:58 - settings it'll give it a moment and so
143:01 - the thing is is that we're going to need
143:02 - something to deploy um I did not create
143:05 - an app but the great thing uh is in the
143:08 - Azure documentation they have a bunch of
143:10 - quick starts here all right and
143:12 - apparently they have one for Ruby as
143:13 - well but today we are looking at python
143:16 - uh and so they actually have an example
143:19 - repository for us here which is
143:22 - github.com aure samples python docs
143:24 - hello world and I mean I could go make a
143:27 - repo for you but we might as well just
143:28 - use the one that is already provided to
143:30 - us so I'm just going to pull this up to
143:32 - show you what's in it it's a very very
143:34 - simple application even if you don't
143:36 - know anything about building web apps
143:38 - I'm going to walk you through really
143:39 - easily here okay so we're going to open
143:41 - up app.py so we are using flask if
143:44 - you've never heard of flask it is a very
143:46 - minimal python framework for creating
143:48 - web apps uh very uninspiring uh homepage
143:52 - here but it gets the job done it's going
143:54 - to create a default route for us which
143:57 - uh we have there we're going to call
143:59 - hello here and we're going to have hello
144:01 - world so that's all that's going on here
144:04 - very very simple and we have our
144:06 - requirements this is our package manager
144:08 - I don't know why python uses txt files
144:10 - it's very outdated to me but that's what
144:11 - they use and here we have
144:14 - flask all right so we're going to use
144:17 - that repo it's a public repo so it
144:19 - should be very easy for us to connect so
144:21 - we'll drop down go to
144:24 - GitHub and uh the next thing we need to
144:26 - do is authorize GitHub all right so I
144:29 - ran into a bit of trouble there because
144:30 - I could not uh authenticate my uh a
144:33 - GitHub account but you know what I just
144:35 - made another GitHub account so that made
144:37 - it a lot easier I'm going to go ahead
144:39 - here hit GitHub and we're going to try
144:40 - to authorize it and so now I'm logged
144:42 - into this new one called exam Pro Dev
144:45 - and we'll go ahead and authorize this
144:47 - application and we're now in good shape
144:50 - this repository doesn't have anything in
144:52 - it so um if I want to clone something I
144:55 - guess I'll probably have to Fork that
144:57 - repo so we'll give it a moment to
144:59 - authorize and while that's going I think
145:01 - that's what I'm going to do I'm going to
145:02 - go and uh Fork the example repo if I can
145:06 - find the link again here uh
145:10 - myself uh I
145:14 - believe it is that's still authorizing
145:18 - over there I'm still looking for it so
145:20 - it was like examples or something
145:22 - samples or
145:25 - examples all right so I found a way
145:26 - around the problem I just made a new uh
145:29 - GitHub account so that's all I had to do
145:31 - um and I just won't be using my primary
145:33 - account till I get my phone back but um
145:35 - so what we'll do is go hit connect I'll
145:37 - hit
145:38 - authorize and it didn't prompt me
145:40 - because it already connected to this new
145:41 - one called exam prodev you might have to
145:43 - put your credentials in here and it's
145:45 - going to ask me to select some things
145:47 - it's a new account so there are no
145:48 - organizations there are no repositories
145:50 - there are no branches totally brand new
145:53 - so what I'm going to need to do is get a
145:55 - repo in there so we'll just go ahead and
145:57 - Fork the Azure samples one so that is
146:00 - azure samples
146:03 - python docs hello
146:06 - world and if I type that right we're in
146:08 - good shape I'm going to go ahead and
146:09 - Fork this
146:12 - repository I'll say got it and then I'll
146:15 - move this off screen here
146:17 - this is now cloned you should see it
146:18 - cloned here and we'll go back here and
146:22 - this probably isn't live so there's no
146:25 - refresh button here so we'll have to hit
146:27 - discard and we will give this another go
146:30 - here and we will select our organization
146:33 - which is our name there is the
146:35 - repository uh should be main branch is
146:37 - kind of outdated I'm sorry but it's
146:39 - called Master that's what it is not my
146:41 - fault that's azure's fault okay um and I
146:46 - think that's it I don't know if we need
146:48 - a workflow configuration file I don't
146:51 - think
146:52 - so it's going to double check here no I
146:55 - don't think so and uh what we'll do is
146:57 - we'll just go ahead and save
147:03 - that and so now we are set up for
147:11 - [Music]
147:14 - deployment hey this is Andrew Brown from
147:16 - exam Pro and we're looking at Azure
147:18 - container instances also known as ACI
147:20 - and this allows you to package deploy
147:22 - and manage Cloud applications using
147:23 - containers or the way I like to think of
147:25 - it as fully managed stalker as a service
147:29 - Azure container instances allow you to
147:30 - launch containers without the need to
147:32 - worry about configuring or managing the
147:34 - underlying virtual machines and you're
147:36 - going to be able to design isolate
147:37 - containers for simple applications task
147:39 - automations and build jobs let's talk
147:41 - about some of the uh reasons why you'd
147:43 - want to use containers over VM so
147:45 - containers can be provision within
147:47 - seconds where VMS will take several
147:48 - minutes containers are buil per second
147:50 - where VMS are built per hour so you'll
147:52 - save a lot more money containers have
147:54 - granular at uh and custom sizing VPC uh
147:57 - vpcu memory and gpus where VM sizes are
148:01 - predetermined uh so those are the
148:03 - benefits between containers and VMS uh
148:05 - aciis can uh be utilized for both
148:07 - windows and Linux containers you can
148:09 - persist storage with Azure files using
148:11 - ACI containers and honestly if you have
148:13 - containers or functions you have to have
148:16 - an external storage mounted to persist
148:18 - uh it's just the way you do it aciis are
148:21 - accessed via fully qualified domain
148:23 - names which is one of the things I
148:24 - really appreciate about Azure Services
148:26 - because most of the services are like
148:27 - that Azure provides quick start images
148:30 - to help you start uh launching example
148:32 - apps but you can also Source containers
148:34 - from add your container registry Docker
148:36 - Hub and privately hosted container
148:38 - Registries it looks like that the choice
148:40 - option there let's just talk about
148:42 - container groups because this is pretty
148:43 - much the only major component you have
148:45 - to worry about these are ction of
148:46 - containers that get uh that get
148:48 - scheduled on the same host and the
148:50 - containers uh the containers in a
148:52 - container group share life cycle
148:54 - resources local network storage volumes
148:57 - so the idea is that you have these
148:58 - tightly coupled containers so all of
149:01 - them act as a service within that
149:02 - container group uh so here you can see
149:04 - an example of a couple containers that
149:05 - are mounting Azure files on different
149:08 - directories there and underneath all of
149:10 - that it's running on an Azure virtual
149:13 - machine container groups are similar to
149:15 - kubernetes pods
149:17 - yeah and it says similar to but not
149:19 - really the same thing multicontainer
149:20 - groups can currently support only Linux
149:23 - containers which is kind of a bummer but
149:25 - that's just what it is and there are two
149:27 - ways to deploy a multicontainer group
149:29 - you can use Arm templates when you need
149:31 - to deploy additional Azure service
149:33 - resources or just a yamell file when you
149:35 - want to deploy uh when your deployment
149:37 - only includes container
149:43 - instances let's take a look at container
149:45 - restart policies and what these do is
149:47 - allow you to change how the policies uh
149:51 - restart and there's three different ways
149:52 - we have always uh never and on failure
149:55 - so the first one here always means
149:58 - always restart the container and the
150:00 - idea is to uh keep your container
150:02 - running as long as possible and the
150:04 - reason why you'd want that is if you're
150:05 - running a web server some other
150:07 - providers would call that a service then
150:09 - we have never so run only one time this
150:11 - is great for background jobs and so
150:13 - other providers would just call this a
150:15 - task uh then you have on failure so
150:17 - containers that encounter an error
150:19 - that's when it should um restart and so
150:22 - it's as simple as just choosing that
150:23 - option uh when you uh are creating uh
150:26 - that
150:31 - container let's take a look at container
150:33 - environment variables are also known as
150:35 - nbars that allow you to pass
150:37 - configuration details to your containers
150:39 - and you can do this through the portal
150:40 - the CLI Powershell which that's always
150:43 - the case with Azure and so it's as
150:44 - simple as just putting in your uh key
150:47 - and your value uh and one other thing I
150:49 - want to point out is that you can also
150:50 - pass in secured environment variables so
150:52 - the idea is that sometimes you don't
150:53 - want them plain teex so if you have like
150:55 - so I have that stripe secret key you
150:57 - don't want anyone ever seeing that in
150:59 - production so the idea is that through
151:01 - and I don't think you can do this
151:02 - through the portal but you can do this
151:04 - through the CLI or Powershell is provide
151:06 - the secure environment variables over
151:07 - the regular one which isn't environment
151:09 - variables and that way you can pass it
151:11 - securely so it's never uh exposed to
151:14 - human
151:15 - eyes
151:19 - let's talk about persisting storage and
151:21 - we talked about that a little while
151:23 - there when we were looking at Azure
151:24 - files but uh containers are stateless by
151:27 - default so when a container crashes or
151:29 - stops all all state is lost to persist a
151:32 - state you need to mount an external
151:34 - volume and there's quite a few different
151:35 - things we can mount Azure files secret
151:38 - volumes empty directory a cloud get repo
151:41 - so you got a few options there and to
151:43 - mount a file volume you need to do this
151:45 - via power shell C you're going to give
151:47 - the following detail so when you launch
151:49 - the container there's going to be
151:50 - nothing in the portal so you got to do
151:51 - it this way all
151:53 - [Music]
151:57 - right hey this is Andie Brown from exam
151:59 - Pro and we're going to take a look at
152:01 - Azure container instances so here it is
152:03 - so all we got to do is go to container
152:05 - instances we'll hit add and the nice
152:07 - thing is that Azure provides us with a
152:09 - Hello World one so it's very easy for us
152:11 - to get started um it's a Linux machine
152:14 - and it looks like it's pretty inex
152:16 - expensive there so we'll stick with that
152:18 - I'm going to create a new group here
152:19 - we're going to call it banana um and
152:23 - we'll name the container instance banana
152:26 - and East Us 2 seems fine to me you'll
152:29 - notice we're on a quick start image if
152:30 - we wanted we could use something from
152:32 - the docker Hub and provide our own link
152:34 - but we'll just stick with the quick uh
152:36 - start image for today we're going to go
152:39 - ahead and hit next to networking just to
152:41 - see what we have as options you can make
152:43 - it public or private we'll go to ADV
152:46 - Advanced hold on here yep those are just
152:48 - the ports you can expose we'll go to
152:50 - advance and for the restart policy we
152:52 - can set on failure always or never we
152:54 - can pass in environment variables and I
152:57 - covered this a lot more in detail in the
152:59 - lecture content so we don't need to
153:01 - really dive deep into this um and we'll
153:03 - go ahead and create this
153:06 - instance and so we'll have to wait a
153:08 - little while here and I'll see you back
153:09 - in a moment okay and so after a short
153:12 - wait our container instance is ready
153:14 - we'll go to that resource there
153:16 - and take a look around so on the left
153:18 - hand side we can go to containers and
153:20 - there we can see it running we can see
153:22 - the events down below of what's going on
153:24 - so you can see that it's pulled the
153:26 - image it successfully pulled it and it
153:29 - started the
153:30 - container some properties nothing
153:32 - interesting there the logs if we wanted
153:34 - to see stuff and if we wanted to connect
153:35 - to the instance we could also go here
153:37 - and hit connect which is kind of nice um
153:40 - I don't have any purpose to do that
153:41 - right now so and it's also not going to
153:43 - work the way we're doing it but I just
153:45 - wanted to show you you had those
153:47 - opportunities uh you can do identity so
153:50 - that means manage it with role base
153:51 - access controls but what I want to see
153:54 - is actually this uh hello world working
153:56 - I'm assuming that must be a a hello page
153:58 - I've never looked at it before so we're
154:00 - going to go here grab the public IP
154:02 - address and paste it on in the top and
154:04 - there we go so we have deployed a
154:07 - instance onto Azure container instances
154:10 - or a container I should say so nothing
154:12 - super exciting to talk about here um but
154:15 - we do need to know the Basics uh there
154:18 - um if we wanted to deploy other
154:20 - containers it's just the one there so
154:22 - that's all you really need to do um but
154:25 - yeah so yeah hopefully that uh gives you
154:27 - an idea there I'll just go back to the
154:29 - list here so we can see it and we'll go
154:31 - ahead and just uh delete that probably
154:33 - do it for the vi the resources on the
154:35 - left hand side like I always like to do
154:38 - uh and we will go into banana
154:40 - here and we will delete
154:43 - banana and there you
154:45 - go
154:47 - [Music]
154:51 - let's talk about networking for Azure
154:53 - and so everything kind of revolves
154:54 - around the virtual Network also known as
154:56 - the v-net and this is a logically
154:57 - isolated section of your Azure Network
154:59 - where you launch your Azure resources
155:01 - and here's a very simple uh diagram of
155:05 - using v-net but there's a lot of
155:07 - networking components uh that you're
155:09 - going to be utilizing and we're not
155:11 - going to go through the exhaustive list
155:12 - here but let's just go through some of
155:14 - them uh just to give you an idea like
155:16 - all the things you can do within Azure
155:18 - networking so you have Azure DNS this
155:20 - manages your your DNS domain then you
155:23 - have the v-net itself and so underneath
155:25 - that it'll have like address spaces
155:26 - route tabl subnets then you have network
155:29 - security groups this access a virtual
155:30 - firewall at the subnet or Nick level you
155:32 - have express route this helps you create
155:34 - a very fast connection between your
155:36 - on-prem to your v-net then you have
155:39 - virtual Wan this is a centralized
155:40 - Network to Route different network
155:43 - connections then you have virtual
155:45 - Network Gateway
155:46 - this is a sight tosite vpm connection
155:48 - between v-ets and local networks then
155:50 - you have your Nicks or your network
155:52 - interfaces and these are virtual network
155:54 - devices to allow VMS to communicate
155:56 - using IP protocols and then you have
155:59 - like all your load balancers and other
156:01 - things like that so again not an
156:03 - exhaustive list uh but just shows you
156:05 - that there's a lot you can do uh within
156:07 - networking on
156:08 - [Music]
156:11 - Azure one interesting concept is v-net
156:14 - peering and this is where you connect
156:16 - multiple v-ets so they act as one
156:18 - network and there are two types of
156:20 - peering we have um uh Regional peering
156:23 - this is when you peer two v-ets from the
156:25 - same region and then you have Global
156:27 - v-net peering this is when you peer two
156:29 - v-ets from two different
156:35 - regions let's take a look at network
156:37 - interfaces which are software or
156:38 - Hardware interfaces between two pieces
156:40 - of equipment or protocol layers in a
156:42 - computer network and so network
156:43 - interface controllers also known as Nyx
156:46 - um that is the actual piece of Hardware
156:48 - that connects computer to computer
156:50 - network and they go by a bunch of
156:51 - different names such as network
156:52 - interface card network adapter LAN
156:54 - adapter physical network interface or
156:56 - even ethernet interface controller card
156:59 - so if it was back in the 1990s you
157:01 - definitely would have had one of these
157:02 - in the back of your computer and if
157:03 - you're a gamer uh today then you have
157:05 - one because you want that wire
157:07 - connection so you have a super fast
157:08 - connection uh and so um these cards or
157:11 - Nicks uh communicate using the Internet
157:13 - Protocol also known IP that's going to
157:16 - them to uh communicate on the on Layer
157:18 - Two the data link layer and the physical
157:20 - layer of the OSI uh model uh and so the
157:24 - way these work in Azure is they're
157:26 - called the Azure network interfaces and
157:28 - um they have the same initialism and IC
157:32 - and so the idea is that you're going to
157:33 - attach a network interface uh to an
157:35 - Azure uh VM instance and without one of
157:38 - these your Azure VM just can't
157:39 - communicate because it's just imagine
157:41 - not having that card in your computer it
157:43 - would have no way of of communicating um
157:45 - and the difference here is that they're
157:46 - just virtual network interfaces right so
157:49 - I'm sure um at the data center Azure has
157:52 - a bunch of these um actual uh cards but
157:54 - they are abstracted away so you know you
157:56 - just treat them as virtual and um an
157:59 - Azure VM it just has to have at least
158:01 - one Nick but it can also have multiple
158:04 - Nicks if you want and so here's just a
158:05 - nice little graphical representation of
158:08 - a VM that has a Nick attached to it so
158:10 - there you
158:14 - go let's take a look at subnets and a
158:16 - subnet is a logical division of an
158:18 - address space so we just looked at
158:19 - address spaces so we're cutting it up
158:21 - one step further and subnets help you
158:23 - define different kinds of workloads and
158:26 - allows you to apply virtual is isolation
158:28 - within your network so when you launch
158:30 - an aszure resource you choose the subnet
158:32 - you want to launch with within and an IP
158:35 - from that subnet is assigned to your
158:37 - resource so uh the thing is is that uh
158:40 - when you create route tables that's how
158:42 - you are associating uh the subnet so it
158:44 - can access the inter internet or access
158:46 - anything uh and then there's public and
158:48 - private subnets but this thing is
158:50 - interesting because like again if you if
158:52 - you're using AWS uh those are very
158:54 - clearly defined things but in Azure uh
158:57 - they don't have this concept of public
158:59 - and private you have to Define it
159:01 - yourself so really a public or private
159:03 - subnet is just a subnet that doesn't
159:05 - have access to the internet and so we
159:07 - saw that when we had the rote table and
159:09 - we over over uh Road um the access to
159:13 - the internet to none that M essentially
159:15 - made it a private subnet uh another
159:18 - thing you can do with subnets is you can
159:19 - associate a network security group and
159:21 - this is going to help protect protect
159:23 - your traffic entering and leaving the
159:25 - subnet so you're making rules based on
159:26 - the IP address port and protocol uh and
159:29 - then there's a special thing called a
159:30 - Gateway subnet so uh it's a specialized
159:33 - uh type of subnet it's just for Azure
159:36 - virtual Network gateways and so um it's
159:39 - interesting you'll go in and there'll be
159:41 - a separate section just for it and so
159:43 - you'll create it it's just for that
159:45 - service
159:46 - [Music]
159:50 - to understand Azure DNS let's first
159:52 - Define what is the domain name and that
159:53 - is a service that is responsible for
159:55 - translating resolving a service name to
159:57 - its IP address and so Azure DNS is a
160:00 - hosting service for DNS domains that
160:02 - provides a name resolution by Microsoft
160:04 - Azure infrastructure so imagine you have
160:06 - a domain you want it to be M managed by
160:09 - Azure DNS and then you can make records
160:12 - like www to point to a specific Azure
160:14 - resource that's the idea behind there
160:17 - and there's two types of uh dns's you
160:20 - can make you got a public DNS an
160:21 - internet facing one this is the one
160:23 - you're likely going to be using so this
160:24 - allows you to manage your domain for
160:26 - internet accessible domains Point your
160:28 - domains to your website or creating
160:30 - records that you uh you own the domain
160:32 - or that you uh are pointing uh emails to
160:35 - your email server uh so things like that
160:37 - then you have your private DNS which is
160:39 - internal facing this allows you to use
160:41 - your own custom domain instead of the
160:43 - Azure provider domains so azure has its
160:46 - own provided domains which are fully
160:47 - qualified domains for a lot of services
160:49 - a great example of this is azure storage
160:51 - accounts and so that is that link there
160:53 - is its fully qualified domain one thing
160:55 - I want to point out is that you cannot
160:57 - use Azure to purchase domains if you
161:00 - want to purchase a domain you can
161:02 - actually do do that through app services
161:03 - or you use like a thirdparty provider
161:05 - such as uh name cheep or GoDaddy and
161:08 - then have Azure manage that
161:11 - DNS uh
161:14 - stuff
161:16 - [Music]
161:17 - so uh virtual private networks also know
161:19 - as vpns what they do is they extend a
161:21 - private Network across a public network
161:23 - and enables your users to send and
161:26 - receive data across shared or public
161:29 - networks as if their Computing devices
161:31 - were directly connected to the private
161:33 - Network all right uh and so now we have
161:36 - to talk about what is a virtual Network
161:38 - Gateway and so virtual Network Gateway
161:41 - is the software of VPN device uh for
161:44 - your Azure virtual Network so that's how
161:46 - these uh devices are going to connect to
161:48 - your network so when you deploy a
161:50 - virtual Network Gateway it will deploy
161:52 - two or uh two or more specialized uh VMS
161:55 - in specific subnets you need to create a
161:58 - Gateway subnet and these deployed VMS
162:01 - contain routing tables and run specific
162:03 - Gateway Services you can uh choose the
162:06 - type of Gateway you want it to be and
162:07 - this is going to determine whether You'
162:09 - use something like VPN Gateway or
162:10 - Express rope Gateway so it's as simple
162:13 - as an option like that but to really
162:15 - understand
162:15 - these virtual Network gateways we should
162:17 - just look at some VP and Gateway design
162:19 - so you understand why you're creating
162:20 - these
162:21 - [Music]
162:25 - things so Azure Express routes creates
162:27 - private connections between Azure data
162:29 - centers and infrastructure on your
162:31 - premises or in collocation environments
162:33 - and so uh connections don't go over the
162:35 - public internet and as a result offer
162:36 - more reliability faster speeds
162:38 - consistent latencies and higher security
162:41 - so here's a big old graphic here kind of
162:43 - representing what's going on here and
162:45 - theide idea is that you're going to have
162:46 - connectivity from different things like
162:48 - from any to any so that's ipvpn Network
162:52 - a pointto point ethernet Network a
162:54 - virtual cross connection and this is all
162:56 - going to be going through a connectivity
162:57 - P provider at a co- location facility so
163:00 - this example would be a uh an edge
163:02 - partner and so you would be the customer
163:05 - Network that' be your on premise or
163:07 - whatever you want to connect so that you
163:09 - can make it all the way to your Azure
163:11 - services and the way you would establish
163:13 - connection is you create these Express
163:15 - circuits uh it's pretty common to have
163:18 - more than one because uh you want to
163:19 - have high availability just in case the
163:21 - other one goes out the idea is that you
163:23 - can route them uh route this traffic to
163:25 - a couple different places so the first
163:27 - one would be things like peering to
163:29 - Office 365 Dynamics 365 or even your
163:33 - Azure public services so when we say
163:36 - Public Services imagine you just launch
163:38 - a um a virtual machine that is in a
163:40 - public subnet that has a an IP that's
163:42 - reachable from the internet uh that
163:44 - could just be to that or maybe you're
163:47 - using like Cosmo DB or like you have
163:48 - fully qualified domains for other
163:50 - services uh so it's just a way that you
163:52 - can get there and then let's talk about
163:54 - the other side which is uh um doing
163:57 - private peering for uh v-net so the idea
163:59 - is that you have a private v-net so the
164:02 - subnets are private and so the only way
164:04 - is going to be access it uh you want a
164:05 - direct way to access it that way so uh
164:08 - that's the two ways there uh and just to
164:10 - note there is express route direct and
164:13 - so this is like express route with an
164:15 - additional benefit that has greater
164:17 - bandwidth connections from 50 megabytes
164:19 - per second up to 10 GB per second and
164:23 - this is really ideal if you have hybrid
164:24 - Solutions where you uh you're removing
164:26 - massive amounts of uh data or where
164:28 - latency matters because you you want uh
164:31 - to feel like these uh cloud services are
164:33 - right there with your on- premise
164:34 - environment you're going to need a lot
164:35 - of speed for
164:37 - [Music]
164:40 - that so as your private links allows you
164:43 - to establish secure connections between
164:45 - Azure resources so traffic remains
164:47 - within your Azure Network and so I got
164:50 - this big old graphic here uh and so
164:52 - let's just uh Define a few things I'm
164:53 - going to pull out my pen here and so
164:55 - imagine you have workloads on your on
164:57 - Prem or you have your own virtual
164:59 - Network on Azure and so you have some
165:02 - VMS doing some stuff and the idea is
165:04 - that you want to connect them to some
165:06 - other services over here uh but the
165:08 - thing is is that if you wanted to
165:10 - connect them they might try to
165:12 - transverse the internet so if you're on
165:13 - Prem it's going out here
165:15 - and it's going over here and so the
165:18 - issue with this is that um it's not
165:21 - necessarily secure uh another issue
165:23 - could be um you know it's just faster if
165:26 - it would to stay within the actual
165:28 - Network because if you're already
165:30 - connected you you know your stuff over
165:32 - here then why wouldn't it just go
165:34 - through uh the actual Network another
165:36 - thing is like data transfer cost so it's
165:38 - always going out the internet and coming
165:39 - back in and that's not a great scenario
165:42 - uh so I'm just going to erase all that
165:44 - stuff there
165:45 - uh the idea with private link is that
165:47 - it's just keeping everything within the
165:48 - Azure Network um and so that's what it's
165:51 - doing so if you want to uh you know um
165:56 - connect your workloads in your v-net or
165:58 - your on-prem that connects to a specific
166:00 - vnet the idea is that you can launch a
166:03 - private link endpoint which is a network
166:04 - interface and this is what's
166:05 - establishing that connection and you're
166:07 - going to have to give that private
166:08 - endpoint a private IP address from your
166:10 - v-net and so then the idea is that on
166:12 - the right hand side that's what you want
166:14 - to connect to there's a lot of Azure
166:15 - Services by default works with private
166:17 - link so there's no additional
166:18 - configuration you'll just be able to uh
166:20 - say use private link and they will uh
166:23 - same thing with some third-party
166:24 - providers um in the marketplace uh they
166:26 - might be powered by private link and
166:28 - then there's a third case where let's
166:30 - say you have like a private subnet and
166:32 - you have some VMS there uh so what you
166:34 - could do is um if you have a load balcer
166:38 - and you need to have an internal load
166:39 - balcer there you can uh launch the
166:41 - private link service and this is going
166:43 - to basically make your
166:45 - uh your workload in that v-net become
166:48 - compatible or powered by private link so
166:51 - there you
166:52 - [Music]
166:56 - go hey this is Andrew Brown from exam
166:59 - Pro and we're going to look at making
167:00 - our own virtual Network so we made a
167:02 - resource Group but we also need a
167:04 - virtual Network or v-net so we actually
167:06 - have some Network to launch our
167:08 - resources within so what I want you to
167:10 - do is make your way all the way to the
167:12 - top here and we're going to go ahead and
167:13 - type in vnet
167:15 - which uh we'll get virtual networks and
167:18 - go ahead and click that and if you
167:20 - notice you don't have any networks so
167:21 - we're going to have to go ahead and
167:22 - create our own so go ahead and hit the
167:24 - add
167:27 - button and uh we're going to have a
167:29 - bunch of options here I'm just going to
167:31 - name this uh well sorry we're going to
167:33 - choose that Resource Group so exam Pro
167:35 - and we're just going to name this exam
167:37 - Pro
167:38 - vet and there are some additional steps
167:41 - here we'll just take a peak here we
167:42 - don't really need to change anything but
167:43 - we'll just take a look so for IP address
167:46 - you can set the IP address space it's
167:47 - going to default to 10.0.0 416 which is
167:50 - very good for us you can see that it
167:52 - supports IPv6 which is great it's going
167:55 - to create us a default subnet which is
167:57 - going to be 10.0.0 sl24 that's going to
168:00 - be a subnet with uh like 256 um IP
168:03 - addresses which is great we go to the
168:05 - security tab um we have DOS protection
168:08 - basic and you definitely want to stay on
168:10 - that because that is free same thing
168:12 - with the firewall we don't want it on
168:14 - because that's going to cost extra money
168:15 - I'm going to go back to basics we're
168:17 - going to hit review plus
168:19 - create we're just going to wait for
168:20 - validation to complete this could be
168:22 - instantaneous for you or you can wait a
168:23 - few seconds it's different for
168:32 - everybody and now the validation has
168:34 - completed we'll go ahead and hit
168:38 - create and so we'll just wait for that
168:40 - to finish
168:43 - creating
168:54 - great so it's created so it's just
168:55 - saying deployment is underway so we're
168:57 - just going to have to wait a little bit
168:58 - here until it says deployment is
168:59 - complete and it's already done super
169:01 - fast we'll go ahead and hit go to
169:03 - Resource and so now we are in our
169:05 - virtual Network and we have a bunch of
169:07 - settings on the left- hand side so
169:09 - address space subnets etc etc nothing we
169:12 - need to know at this level um we just
169:15 - need that virtual Network so we can
169:16 - launch resources in so now that we have
169:18 - resource groups and virtual networks we
169:19 - can start launching resources so there
169:22 - you go I'll see you in the next follow
169:24 - [Music]
169:27 - along hey this is angrew Brown from exam
169:30 - Pro and we are looking at Azure storage
169:32 - Services starting with Azure blob
169:34 - storage so um I would describe this as
169:37 - object serverless storage so if you ever
169:38 - heard of object storage or seress
169:41 - storage this is going to make sense to
169:42 - you so you're able to store very large
169:44 - files and and large amounts of
169:46 - unstructured files uh and the idea here
169:48 - is that you pay for only what you store
169:50 - uh it's basically unlimited storage you
169:52 - don't have to resize the volumes you
169:54 - don't have to worry about file system
169:55 - protocols you just upload files uh and
169:58 - that's why it's considered serverless
170:00 - storage then we're going to move on to
170:02 - Azure dis storage this is the most
170:03 - common type of storage uh you'll
170:06 - encounter um so we can describe it as a
170:08 - virtual volume so you're just choosing
170:10 - either an SSD or an htd so it's
170:13 - basically a hard drive in the cloud it
170:15 - has encryption by default and uh it's
170:18 - attached to Virtual machines so anytime
170:21 - you're spinning up a virtual machine uh
170:23 - it's probably spinning up also uh Azure
170:25 - dis storage attached to it then you have
170:28 - Azure file storage so this is a shared
170:30 - volume that you can access and manage
170:32 - like a file server so it's going to use
170:34 - uh protocols such as SMB the reason
170:37 - you'd want this is that let's say you
170:38 - had multiple virtual machines multiple
170:40 - servers and you wanted them to all share
170:42 - the same uh uh hard drive drive that's
170:45 - what You' use it for or if you need to
170:47 - have users access it using those
170:49 - protocols that's another way of doing
170:52 - that uh then you have Azure Q storage
170:55 - now I put an aster in front of it
170:57 - because this is just a weirdly named
170:59 - service um because this is really uh for
171:02 - a messaging queue this is actually for
171:03 - application integration but I list it
171:06 - here because they put the word storage
171:07 - on it so I just think it's poorly named
171:10 - um and even the way they describe it is
171:12 - is just makes you think it's storage but
171:13 - it's a data store queuing and reliably
171:15 - delivering messages between applications
171:18 - so it's just uh uh integrating two
171:20 - applications together passing a messages
171:22 - along another one that's confusing is
171:25 - azure table storage I would put this in
171:27 - the database categories and it's a nosql
171:30 - database and specifically it's a wide
171:33 - column nosql database as they described
171:35 - it's a nosql store that hosts
171:37 - unstructured data uh independent from
171:39 - any schema so just be aware of those two
171:42 - they're just very poorly worded um then
171:44 - you have Azure data box and also it's
171:47 - upgraded version the Azure data box
171:49 - heavy this is a rugged briefcase
171:51 - computer and storage designed to move
171:53 - terabytes or pedabytes of data so
171:56 - imagine um somebody uh shows up your
171:59 - door with this uh this Tower that's a
172:01 - computer and you plug in your USB or
172:04 - whatever um uh whatever you want and you
172:06 - transfer all your files locally on your
172:08 - on- premise Data Center and then they
172:11 - they ship it because it's faster to ship
172:13 - the data on a physical piece a device
172:15 - and it is to send it over the Internet
172:16 - that's what Azure data box is uh and
172:19 - then we have Azure archive storage so
172:22 - this is long-term cold storage for when
172:24 - you need to hold onto files for years
172:26 - but you want the cheapest storage
172:27 - options if you have lots of data and
172:29 - it's not it's not doing anything you
172:31 - definitely want to be uh putting on the
172:32 - cheapest possible uh storage devices
172:35 - cheap meaning um uh doesn't mean that
172:38 - they're not reliable just means that
172:39 - they're not active the discs are not act
172:41 - actively spinning nobody's accessing the
172:43 - data on those hard drives the last one
172:46 - is azure uh Azure data Lake storage and
172:49 - so this is a centralized reposit
172:51 - repository that allows you to store all
172:53 - structured and unstructured data at any
172:55 - scale when you're working with big data
172:57 - from multiple different sources and you
172:59 - need it to be in one place that is the
173:01 - service for you and so that is the Azure
173:03 - storage
173:04 - [Music]
173:08 - Services hey this is Andrew Brown from
173:10 - exam Pro and we are looking at Azure
173:11 - storage accounts which is used for
173:13 - containing all your your storage data
173:15 - objects such as blobs files cues tables
173:17 - and diss so storage accounts is one of
173:20 - those Services where it has a bunch of
173:22 - different storage types uh within it so
173:24 - it's a quite the multi-purpose uh
173:26 - service and with each different type of
173:29 - storage is going to have different
173:30 - features and their own pricing models
173:32 - let's just quickly break down uh the
173:34 - type of storage we have so we have
173:36 - general purpose uh version one uh
173:38 - version two blob storage block blob
173:42 - storage and file storage and so I just
173:44 - want you to know that when you are using
173:46 - storage accounts uh I'm saying storage
173:49 - type but for whatever reason the UI
173:51 - calls it account kind uh just to be
173:53 - aware of that small little discrepancy
173:55 - there but storage accounts are going to
173:58 - vary based on features and so the common
174:00 - features we'll see across storage will
174:02 - be um supported services so where can I
174:05 - put this storage account and so on the
174:07 - right hand side you can see uh like if
174:10 - you make a general purpose version two
174:12 - what you have access to such as contain
174:14 - containers cues tables or fur those
174:17 - options are going to change based on
174:18 - what you're using all right uh for
174:21 - performance tiers this is how fast uh
174:23 - you'll be able to do reads and writs uh
174:25 - you have standard and premium uh you
174:28 - have different kinds of access tiers so
174:30 - how often do I need to quick access
174:32 - these files and then there's replication
174:35 - how many redundant copies should be made
174:37 - and where and the last thing is
174:39 - deployment models so who should deploy
174:42 - the supported service resource manager
174:44 - class CL and in generally most cases
174:46 - it's going to be resource
174:48 - [Music]
174:51 - manager so here I have all the storage
174:54 - Types on the Le hand side and uh we have
174:57 - the feature set and how it's going to
174:59 - vary based on the certain types let's
175:00 - just quickly look through this to see
175:03 - where there are some uh standouts and
175:05 - you might want to actually review this
175:07 - at the end of the section just so uh
175:09 - you're a bit more familiar with all
175:11 - these types of features so it clicks it
175:13 - better but let's just quick go through
175:14 - this so you're going to notice for
175:15 - version one this is the only case where
175:17 - you're going to have a deployment model
175:18 - of classic everything else is going to
175:20 - be the resource manager from a practical
175:23 - standpoint you're not going to really
175:24 - notice because you're just going to be
175:25 - pressing buttons but underneath um
175:28 - that's the only case where it varies for
175:30 - replication you're going to notice that
175:31 - uh version two has the most options with
175:34 - replication and if these don't make
175:35 - sense don't worry we're going to cover
175:36 - all the replication in an upcoming slide
175:40 - uh for uh blob block storage you can see
175:42 - it's very limited same with file storage
175:45 - um so that's there when we're talking
175:48 - about access tiers how quickly you can
175:50 - access files you're going to notice that
175:52 - it's only available for General version
175:54 - 2 and blob storage where we're choosing
175:56 - these different tiers for these ones it
175:58 - doesn't really matter um because well
176:01 - especially with like a file storage
176:02 - because the drive is as fast as it's
176:04 - going to be right uh for performance
176:06 - tiers uh you're going to notice that
176:08 - with version one and version two we have
176:10 - standard and premium when you're using
176:12 - file storage and block blob storage
176:14 - you're always using premium and with
176:16 - blob storage which is again a legacy
176:18 - format there that's going to be using
176:20 - standard uh blob storage comes in three
176:23 - different types and you're going to
176:24 - notice that uh based on what you want to
176:26 - use there'll be some variation there um
176:29 - I don't know where pages I think that
176:31 - they both support page but there are
176:34 - three types in there I wouldn't really
176:35 - worry about it too much uh you're going
176:37 - to notice that file storage only
176:38 - supports file types and then you have
176:40 - version two and this pretty much uh
176:42 - supports everything so you can see
176:43 - general purpose version 2 is a really
176:45 - great um uh storage to
176:49 - [Music]
176:52 - choose so we were just talking about
176:54 - storage types now let's talk about the
176:56 - actual storage services that we can
176:58 - actually uh launch or utilize Within
177:01 - These uh storage types under storage
177:03 - accounts and there are five core
177:05 - storages available to us the first is
177:07 - azure blob this is a massively scalable
177:10 - Object Store for text and binary data it
177:12 - also includes uh Big Data analytics
177:14 - through data Lake storage Gen 2 um and
177:18 - so aszure blob is really great because
177:21 - you just don't have to think about the
177:22 - file system you just upload files and
177:23 - they're treated like objects so that's
177:25 - really nice then you have Azure files
177:27 - and this is a file share uh and so the
177:31 - great thing about Azure files is that if
177:33 - you want to have a bunch of virtual
177:35 - machines and have it so like they have
177:38 - um the same file system sharing all the
177:40 - same files that's what you're going to
177:41 - use that for then you have Azure cues to
177:44 - me this really is a database but for
177:45 - whatever reason it's under uh storage
177:47 - accounts and it's a nosql store for
177:49 - schema storage of structured data this
177:51 - is another unusual one uh I don't know
177:53 - why Azure puts it under here but um it's
177:56 - a messaging store for Reliable messaging
177:58 - uh between application components to me
178:00 - that's like an application integration
178:01 - service but Azure categorizes it as
178:04 - storage and the last one is azure dis
178:06 - and this is Block Level storage volumes
178:08 - for Azure VMS and so the idea is that
178:11 - when you want to do the top four the
178:13 - above you're going to be launching
178:14 - storage accounts and for uh discs you're
178:17 - going to be launching diss it's a bit
178:19 - unusual because um one of storage
178:21 - accounts say that you can uh use or
178:24 - store diss uh in I think version or uh
178:27 - general purpose version two I'm not
178:29 - really sure I understand that uh maybe
178:31 - it's talking about like backing them up
178:33 - or something like that but anyway from
178:35 - practical standpoint and for what we
178:36 - need to know is that this is the
178:38 - breakdown here and we do have a full
178:40 - section on Azure diss um so we will get
178:42 - into that
178:46 - [Music]
178:48 - so now let's take a look at some of the
178:49 - features that are available on uh
178:51 - account storage the first being
178:53 - performance tiers and generally this is
178:54 - going to be for blob storage and we have
178:56 - two types of performance tiers we have
178:58 - standard and premium so it's a simple as
179:00 - uh just choosing between the two uh and
179:03 - when we're talking about performance
179:04 - especially when we're talking about
179:05 - storage we want to be thinking about
179:06 - iops and that stands for input output
179:08 - operations per second so the higher the
179:10 - iops the faster a drive can read and
179:12 - write so you can uh definitely assume
179:15 - that uh premium is going to have a
179:17 - higher amount of iops and so when we're
179:19 - looking at the premium performance these
179:21 - are going to be stored on solid state
179:23 - drives ssds which we have in the picture
179:25 - there it's optimized for low latency
179:27 - higher throughput and the use cases here
179:30 - is going to be interactive workloads
179:32 - analytics uh AI or ML and data
179:35 - transformation on the other side for
179:36 - standard performance these are running
179:38 - on hard disk drives and you're going to
179:41 - have VAR Performance Based on your
179:42 - access tier and we're going to talk
179:43 - about access tiers uh very shortly uh
179:46 - but the tiers would be hot cool and
179:48 - archive and this is great for backup and
179:51 - Disaster Recovery media content bulk of
179:53 - data processing uh and things like that
179:57 - and so the reason why ssds are uh
179:59 - generally really really good for uh
180:01 - premium performance is because they have
180:04 - no moving Parts within them and the data
180:05 - is distributed Rand uh randomly so if
180:08 - you have to do a read and write the
180:09 - distance between the read and wres are
180:11 - going to be a lot faster uh and that's
180:13 - generally why you're going to see Sol
180:15 - satz with premium performance or things
180:17 - with higher iops and then for um hard uh
180:21 - dis drives it does have moving parts so
180:24 - you see that it has an arm and that arm
180:26 - needs to read and write data sequential
180:28 - sequentially to the disk and so it's
180:30 - very good at writing or reading large
180:32 - amounts of data that is close together
180:34 - that is sequential um but you know the
180:37 - idea is that neither uh format is good
180:40 - or bad it's just the the use case that
180:42 - you need so you don't always always need
180:44 - to go with SSD sometimes you want to
180:45 - save money and hhds are uh or hdds are
180:49 - really good for
180:51 - [Music]
180:54 - that so let's take a look at access
180:56 - tiers and there are three types of tiers
180:58 - uh for standard storage we have cool hot
181:00 - and archive and so you're going to have
181:02 - this option between uh cool and hot and
181:05 - archive archive might not show up
181:07 - depending how you configure your storage
181:09 - account uh so for example if you use a
181:11 - particular type of replication that
181:13 - might not be available uh uh uh to use
181:15 - with archives so just be aware if that
181:17 - option doesn't show up you might have to
181:18 - change some of your settings let's
181:20 - quickly walk through the three options
181:21 - so hot is for data that's access
181:23 - frequently and has the highest storage
181:25 - cost and lowest access cost so again
181:28 - it's for data that's as frequently
181:29 - access or in active use or data that's
181:32 - staged for processing an eventual
181:34 - migration to the cool AIS tier then you
181:36 - have the cool tier this is data that's
181:38 - infrequently accessed and stored for at
181:39 - least 30 days lower storage costs higher
181:43 - access cost
181:44 - and the use casee here is for short-term
181:46 - backup and Disaster Recovery data sets
181:48 - or older media content not viewed
181:49 - frequently anymore but is expected to be
181:52 - available immediately when accessed uh
181:54 - and I think there's actually a third use
181:56 - case which is large data sets that need
181:57 - to be stored cost-effectively while more
181:59 - data is being gathered for future
182:01 - processing then we have the archive tier
182:04 - this is for data that's rarely accessed
182:05 - and stored for at least 180 days uh it's
182:08 - the lowest storage cost but it also has
182:11 - the highest access cost uh and so its
182:14 - use case would be long-term backup
182:15 - secondary backup archival data sets
182:18 - original raw data that must be preserved
182:19 - even after it's been processed into the
182:21 - its usable form uh and compliance and
182:23 - archival data that needs to be stored
182:25 - for a long time and is hardly ever
182:27 - accessed so just make use or note of the
182:29 - cool is at the least 30 days and the
182:31 - archive is at at least 180 days I should
182:34 - have highlighted those for you I don't
182:35 - know why I didn't uh and so just some
182:37 - other things you need to know so for
182:38 - account level tiering any blob that
182:40 - doesn't have an explicitly assigned tier
182:42 - infers the tier from the storage account
182:44 - access tier settings so you can set uh
182:47 - blobs at different um storage levels uh
182:50 - blob level tiering uh you can upload a
182:52 - blob to the tier of your choice and
182:54 - change uh change the tiers happen
182:56 - instantly with exception from moving out
182:58 - of archive uh the concept of rehydrating
183:01 - this is when uh you're moving a blob out
183:02 - of archive into another tier it can take
183:04 - several hours uh you have the blob life
183:07 - cycle management so you can create
183:09 - rule-based policies to transition your
183:11 - data to different tiers so after 30 days
183:13 - we can move it to cool storage and here
183:16 - is just the option here you see where it
183:17 - says 30 I think 30 is the minimum days
183:19 - you have to choose um but I could be
183:21 - wrong and so you have the options down
183:23 - below so move to Cool Storage move to
183:25 - Archive storage delete the
183:27 - blob uh and just a few other things here
183:30 - when a blob is uploaded or moved to
183:31 - another tier it's it's charged at the
183:34 - new tier rate immediately upon the tier
183:36 - change so when you're moving to a cooler
183:38 - a cooler tier the operation is build as
183:40 - a right operation to the destination
183:42 - tier and when the right operation per
183:45 - 10,000 and data right per gigabyte uh
183:48 - charges for the destination tier applies
183:51 - uh when moving to a hotter tier the
183:53 - operations is build as a read from the
183:55 - source tier and where the read operation
183:57 - again in the 10K and the data retrieval
184:00 - again in gigabytes charges for the
184:02 - source tier applies and early detection
184:05 - uh charges for any blob moved out of the
184:07 - cool or archive tier May apply as well
184:10 - uh and just lastly here uh when we're
184:12 - talking about cool and archive early
184:14 - detection any blob that is moved into
184:17 - the cool tier so this is only for
184:19 - general purpose version two accounts is
184:20 - subject to a cool early detection period
184:23 - of 30 days and any blob that is moved
184:26 - into the archive tier is subject to an
184:28 - archive early detection of 180 days and
184:30 - this charge is pro-rated so uh you know
184:33 - access tiers aren't the funnest thing to
184:34 - talk about but there is all the
184:36 - information you need to
184:37 - [Music]
184:40 - know so let's take a look at replication
184:42 - and data data redundancy and so when you
184:45 - create a storage account you're going to
184:46 - have to choose a replication type and
184:48 - the reason why is that uh you're going
184:50 - to want to have multiple copies of your
184:52 - data so you're protected from a bunch of
184:53 - things so maybe uh your data Setter has
184:56 - a planned outage so you have to make
184:58 - sure you have a u a backup of your data
185:00 - if you need to access it maybe there is
185:02 - a hardware failure or network or power
185:04 - outage or natural disaster and so that
185:07 - is the whole point of replication and
185:09 - the greater level redundancy the more
185:11 - expensive the cost of replication will
185:13 - be and talking about cost we can break
185:15 - it down into three categories and each
185:17 - uh of these categories have uh two types
185:21 - of uh replication so let's just quickly
185:23 - go through the list and then we'll Deep
185:24 - dive into all of them uh in the upcoming
185:27 - slide so for the first part we have
185:29 - primary region redundancy so we have
185:31 - local redundant storage lrs and Zone
185:34 - redundant storage zrs and locally
185:36 - redundant storage is the most cost
185:38 - effective tier so that's the one I'm
185:39 - usually going for a lot especially when
185:41 - I'm running uh using development
185:43 - accounts that's what I'm always setting
185:45 - and so the reason or and so the use for
185:47 - thisa uh this tier is generally disaster
185:49 - recovery and
185:50 - failovers the secondary region
185:52 - redundancy we have Geo redundant storage
185:55 - GRS and geozone redundant storage gzrs
185:59 - and the reason you'd want to use this
186:00 - tier is for also disaster recovery and
186:03 - failovers but it has a higher level
186:05 - redundancy uh then the last one here is
186:08 - secondary region redundancy with read
186:10 - AIS uh and uh for this case uh we we're
186:13 - going to have is read axis GE redundant
186:15 - storage so that's RS and read AIS GE
186:18 - redundant storage G uh R
186:21 - azrs uh and that's going to generally be
186:23 - for read replicas and if you can't
186:25 - remember all the initialisms don't worry
186:27 - I don't either um but uh you know there
186:29 - you
186:30 - [Music]
186:34 - go so what we're going to do is take a
186:37 - closer look at the replication type
186:39 - starting with the primary region
186:41 - redundancy and so for this tier all the
186:44 - data is going to be replicated at least
186:46 - three times in the primary region and we
186:48 - got two options we have lrs and zrs and
186:51 - by the graphic you can tell that they're
186:52 - slightly different and so for for lrs
186:55 - it's using um uh synchronous uh
186:59 - replication for those other pieces of
187:01 - data so you notice in that region there
187:03 - are three uh there's three versions
187:05 - running and so when we say synchronous
187:07 - we mean that if I want to read from any
187:09 - of those copies um they're all going to
187:12 - be 100% up to date so that's what
187:14 - synchronous means um and so here we have
187:17 - a durability of 119 and this is the
187:21 - absolute most cheapest option when
187:23 - choosing storage accounts so if you're
187:24 - running this for developer accounts you
187:26 - do not care about uh replication choose
187:29 - lrs uh for zrs we have copies of data
187:33 - synchrony to three different
187:35 - availability zones in the primary region
187:37 - and this has a durability of 12 9 so
187:40 - it's clearly more durable uh and so why
187:43 - would you want to choose the primary
187:45 - region over the lrs well the idea is
187:47 - that if an availability Zone goes out
187:48 - you still have your data in two other
187:50 - regions where in the case of lrs if the
187:53 - uh availabity availability Zone goes out
187:56 - uh your data is gone okay uh so that is
188:00 - uh the first uh
188:01 - [Music]
188:04 - tier so now we're taking a look at
188:06 - secondary region redundancy and the
188:09 - purpose of this is uh if you have your
188:13 - primary region uh suffers a regional
188:15 - disaster so all the data centers are out
188:17 - in your primary region uh you can rely
188:20 - on that secondary region and your
188:23 - secondary region is going to be
188:24 - determined based on your primar pair
188:26 - region so regions are paired with
188:28 - another region uh and so you don't get
188:30 - to pick your twin it's just it is what
188:32 - you get okay um and so secondary regions
188:36 - um aren't available for read and write
188:38 - access except in the event of failover
188:40 - so basically the uh redundant cop the
188:43 - second secondary region is uh is just
188:46 - there on standby but it's not in use and
188:49 - so let's just talk about GRS and G uh
188:53 - gzrs and you'll notice again by the
188:55 - graphic uh they're they look a bit
188:57 - slightly different but you can kind of
188:59 - get the idea based on our previous
189:01 - version or previous uh primary storage
189:04 - tier and so uh data is copied
189:07 - synchronously in within the uh the main
189:10 - primary region and then data is a
189:13 - synchronously copied to another region
189:15 - so asynchronous means that if you try to
189:19 - read from the second region all the data
189:21 - might not be there okay again
189:24 - synchronous means if you read from
189:26 - something there's a guarantee that it's
189:27 - going to be the same and asynchronous
189:29 - means that there's not a guarantee that
189:31 - the data is one: one to the original and
189:34 - the durability here is
189:36 - 69 going over to
189:38 - gzrs uh we have data data is copied
189:42 - synchronously across three availability
189:44 - zones in a physical region and then the
189:47 - data is copied asynchronously to another
189:50 - region and um I believe that the data in
189:53 - the secondary region is not necessarily
189:55 - in three other azs at least that's the
189:57 - graphic I made there so hopefully that
189:59 - is true um but yeah there you
190:02 - [Music]
190:05 - go so now we're going to take a look at
190:08 - um a redundancy in the secondary region
190:10 - with read AIS and the whole purpose of
190:13 - this region is so that you can actually
190:15 - uh have a read replica in another region
190:19 - uh and so the the concept of that is
190:21 - having your data in sync okay and so
190:24 - down below we have RS and R azrs and
190:27 - it's going to look very similar to the
190:28 - last setup but the key difference is
190:30 - that now um data is synchronous uh
190:33 - synchronous in both the primary and the
190:35 - secondary region because if you're going
190:37 - to be reading from it you want to make
190:39 - sure that your data is one to one uh
190:41 - with your primary regions data so there
190:43 - you
190:44 - [Music]
190:47 - go so we keep on mentioning about Azure
190:50 - blob storage let's actually talk about
190:51 - it now so blob storage is an object
190:54 - stored that is optimized for storing
190:55 - massive amounts of unstructured data and
190:58 - unstructured data is data that doesn't
190:59 - adhere to a particular data model or
191:01 - definition such as text or binary data
191:03 - and Azure blobs are composed of the
191:05 - following components so I have this
191:07 - graphic here so the first thing is your
191:08 - storage account and I didn't mention
191:10 - this prior but uh when you create a
191:12 - storage account you actually get a fully
191:14 - qualified domain uh a lot of azure
191:17 - services are like this where you get a
191:18 - fully qualified domain so that you can
191:20 - access it from everywhere and this is a
191:22 - really nice feature but that means that
191:23 - when you're naming your storage account
191:25 - or other Azure Services you have to
191:27 - treat it like a domain name and you have
191:28 - to choose a unique name uh the next
191:31 - thing are containers uh and this is a
191:33 - little bit confusing because when we
191:35 - think of containers we think of
191:37 - computing but Azure um uh account
191:40 - storage has the concept of containers
191:41 - for blobs and it's just uh what they
191:43 - call folders so just be aware of that
191:46 - and then you actually have the actual
191:48 - data being stored and these are the
191:51 - [Music]
191:54 - blobs so there are three types of blob
191:57 - storage we have blob blocks and this is
192:01 - what you're going to primarily be using
192:02 - and so this is when you store text and
192:04 - binary data it's made up of blocks of
192:06 - data that can be managed individually
192:08 - and it can store up to 4.7 uh terabytes
192:11 - of data then you have aend blocks um and
192:15 - these are optimized for append operation
192:17 - so imagine that you have
192:20 - logs uh from a virtual machine and you
192:22 - want to write them to blob storage this
192:24 - is going to be a lot more efficient if
192:25 - you're using appen blobs because they
192:28 - just appen to the end of the file and
192:30 - the last is Page blobs and these store
192:33 - random access files up to 8 terabytes in
192:35 - size and these are just for storing
192:38 - virtual hard drives so vhd files uh and
192:41 - serves as discs for aure virtual machine
192:43 - so there's the three
192:45 - [Music]
192:48 - types let's take a closer look at a copy
192:51 - and this is a command line utility that
192:53 - you can use to copy blobber files to or
192:56 - from a storage account so the first
192:57 - thing you're going to need is the
192:59 - executable file and there you can see
193:01 - they have it for Windows Linux and mac
193:03 - and then once you download that file uh
193:05 - what you're going to have to do is also
193:07 - uh make sure that you have the the right
193:09 - level of authorization with for the user
193:11 - account you're using with it so you
193:13 - might need to uh for download you'll
193:15 - need storage blob data reader for upload
193:18 - storage blob data contributor and
193:21 - storage blob data owner so just be aware
193:24 - that you need to have those uh rules
193:26 - available to you um to your user account
193:29 - I think that I have access to everything
193:30 - so I don't think I even I set this it it
193:32 - just works but if you're in a larger
193:34 - company and you have more uh permissive
193:36 - least permissive roles you just need to
193:38 - know about that and so you can gain
193:41 - access uh uh via either the Azure active
193:44 - directory or a shared access signature
193:48 - so let's just take a look at that right
193:49 - now so the idea here is that we'll type
193:51 - in a copy login and it's going to ask us
193:54 - whether we want to sign into the web
193:56 - browser so that is uh that should be as
193:58 - your active directory option one and so
194:00 - what you'll do is you'll uh enter your
194:02 - username and password and you'll then
194:04 - have to enter the code displayed there
194:06 - and so now you're ready to use uh the um
194:10 - the CLI and so all you have to do is
194:12 - type in a copy copy and then you have
194:14 - the file and then you give it the
194:16 - endpoint to the storage account uh and
194:19 - the container and the location you want
194:21 - it to go in if you want to download
194:23 - files it's the same command you just
194:24 - reverse the order you say uh this is the
194:27 - the location of the file I want to
194:29 - download it locally all
194:35 - right let's talk about Azure storage
194:37 - Explorer so this is a standalone app
194:39 - that makes it easy to work with Azure
194:41 - storage data on Windows Mac OS and Linux
194:43 - and you can create a variety of things
194:45 - so I just want to show you and here I am
194:46 - running on a Mac but on the left hand
194:48 - side you can see I have my subscriptions
194:50 - my storage accounts my Diss and we have
194:52 - some options where we can like upload
194:54 - files download files open stuff uh clone
194:57 - stuff uh create uh some things and so
195:00 - this is just an easy and convenient way
195:01 - to uh access your file or your account
195:04 - storage and work with
195:06 - [Music]
195:09 - them so let's take a look at Azure files
195:12 - this is a fully managed file share in
195:14 - the cloud and the idea behind this is
195:15 - that it's like a centralized server for
195:17 - storage that allows multiple connections
195:20 - or the way I like to think about it it's
195:21 - like having one big shared drive that
195:23 - every that everyone can use or work on
195:25 - at the same time and when I say everyone
195:27 - I mean your virtual machines so here is
195:29 - a visual representation but let's just
195:31 - talk uh quickly about it uh so the idea
195:33 - is that you're going to be using a
195:34 - network protocol uh in order to uh
195:36 - facilitate communication and so the two
195:39 - most common ones is server message block
195:41 - which I believe uh was created by
195:42 - Microsoft and network file system NFS
195:45 - which is very commonly used on Linux
195:47 - files or Unix based file systems and
195:49 - what you're going to be doing is you'll
195:51 - have to establish a connection with your
195:52 - file shares file system uh and what
195:56 - you'll be doing is making it accessible
195:57 - within a specific directory so a folder
196:00 - within your um within your drive okay
196:03 - and this is called mounting so you
196:05 - notice there uh it says Z X and Y so on
196:08 - Windows you'd actually have the option
196:11 - uh when you mount it to say I want to
196:12 - mount it to zed and so anytime you
196:14 - access Zed on your Windows Server uh
196:17 - it's actually going to be using um Azure
196:19 - files
196:23 - okay so let's talk about all the use
196:26 - cases for Azure files normally they have
196:28 - a spiffy graphic here um but because
196:30 - Azure files has so much utility uh all I
196:33 - have room for is a bunch of text uh but
196:35 - we do need to learn it all because it is
196:37 - such an important service so the first
196:39 - use case is that it can serve as a
196:40 - replacement or supplement uh for your
196:43 - on- premise file servers network
196:45 - attached storage your Nas devices if
196:47 - you're performing a lift and shift and a
196:49 - lift and shift is when you're
196:50 - moving data in the cloud we'll describe
196:52 - it in a second here uh you can use um uh
196:56 - Azure files for that and so we actually
196:58 - have two different kinds of lifts we can
197:00 - do that Azure defines we have a classic
197:02 - lift and a hybrid lift so in a in a lift
197:04 - and shift this means when you you move
197:07 - workloads without re architecting so the
197:09 - idea is like you used to use on premise
197:11 - you want to use app meure uh but you're
197:13 - trying to keep things as as similar as
197:14 - you can very commonly lift and shifts
197:17 - for uh um from on premise to the cloud
197:20 - will just be taking your virtual
197:21 - machines and then just uh copying and
197:24 - bringing them onto the cloud with
197:26 - nothing else right uh but anyway in the
197:28 - case here for storage we have the
197:30 - classic lift this is where both the
197:32 - application and its data are moved to
197:33 - Azure and then in a hybrid lift this is
197:36 - where the application data is moved from
197:38 - uh moved to Azure files and the
197:40 - application continues to run on PR
197:42 - premise uh so clearly classic lift is
197:45 - bring everything over hybrid lift is
197:46 - like leave the application behind uh
197:49 - another reason you'd want to be using as
197:51 - your files is that it's going to
197:52 - simplify your Cloud deployment so
197:54 - imagine you have shared application
197:55 - settings so you have multiple virtual
197:57 - machines and workstations and they all
197:58 - rely on the same configuration fils you
198:00 - can just go ahead and mount that drive
198:02 - and share that information uh if you're
198:04 - doing do diagnostic tests so let's say
198:06 - you have a bunch of virtual machines and
198:07 - they're logging uh to those
198:10 - machines uh and you want a developer to
198:12 - go in and quickly debug them maybe
198:14 - there's a reason why you don't want to
198:15 - use a third party provider because of
198:17 - compliance or security reasons but the
198:19 - idea is that all these DMS can just log
198:22 - uh to the um uh to the file share and so
198:26 - now you have centralized logs across
198:28 - many machines uh another uh use case is
198:32 - that you need to quickly share
198:33 - development tools so you could put all
198:34 - your tools onto the on to the drive and
198:36 - so they developer would mount it and now
198:38 - they can set up a local environment a
198:40 - lot faster when we're talking about
198:42 - containerization we have a few options
198:44 - here so if you are using containers
198:46 - generally by default containers are
198:48 - stateless and so you need to purist
198:50 - volume somehow and so that's what you're
198:52 - going to do you're going to be using
198:53 - Azure files to do that um and also
198:56 - another question is why would you why
198:58 - would you use Azure files instead of
199:00 - setting up your own file share server
199:03 - because that's definitely an option that
199:04 - you can do and the reason why is that
199:06 - shared access so it already has the
199:08 - standard protocols so you don't have to
199:10 - configure them it's already uh baked
199:11 - into to uh the service it's fully
199:14 - managed uh and this is something that I
199:16 - should I don't think should be
199:17 - underlooked but because it's very
199:18 - difficult to um scale a file server so
199:21 - it they will uh apply patches for it and
199:24 - it will just automatically um scale
199:26 - another thing is that it already has a
199:27 - lot of scripting and tooling built in so
199:29 - if you want to use the Azure API or
199:31 - Powershell you can automate the
199:32 - management and creation of files and
199:34 - things like that and it's also extremely
199:37 - extremely uh resilient so uh you can be
199:40 - sure that it's going to stay remain
199:42 - running so there's a lot of use cases
199:44 - there but definitely worth our time so
199:45 - there you
199:46 - [Music]
199:49 - go all right so we heard of azure files
199:52 - but there's also another service called
199:54 - Azure file sync and so the idea behind
199:57 - this service is that it allows you to
199:58 - cash Azure file shares on an on- premise
200:01 - Windows server or Cloud virtual machine
200:03 - and so here is the uh visual graphic
200:06 - here where you can see on Prem Azure VMS
200:08 - and your Azure backups and so the idea
200:10 - here is that you can use any protocol
200:11 - that's available on the Windows server
200:13 - to access your data locally including
200:14 - SMB NFS and even ft FTP um and you can
200:20 - have as many caches as you need across
200:22 - the world so I mean like this is kind of
200:24 - like having a one drive right for your
200:27 - file share uh because it's keeping uh or
200:29 - like any kind of cloud storage it's just
200:31 - keeping your files in sync and the nice
200:33 - part is like you can have files in the
200:35 - cloud and uh they're they're referenced
200:37 - on your computer but you only um you
200:40 - only need to access them when you when
200:42 - you need them so you don't have to have
200:43 - all these files locally
200:46 - [Music]
200:49 - okay hey this is Andrew Brown and in
200:52 - this video I'm going to show you how to
200:53 - set up blob storage and so if you
200:56 - remember uh through the actual course
200:58 - blob storage is like serverless storage
201:00 - so you don't have to worry about um
201:02 - running out of space or resizing your
201:03 - discs let's go to it um at the top here
201:06 - I want you to type in uh blob storage
201:09 - and you're going to go to storage
201:10 - accounts
201:12 - and this is where you end up creating
201:14 - all of your storage accounts you can see
201:15 - that we have a couple storage devices
201:17 - from the virtual machine and when we
201:19 - created the um serus uh the serverless
201:22 - function there so go ahead and hit
201:25 - add and what we're going to do is choose
201:28 - exam Pro or whatever you called yours
201:30 - when we were at the resource Group step
201:33 - then we're going to have a storage
201:34 - device I'm going to say my
201:36 - blob uh
201:38 - storage oh has to be all lowercase my
201:40 - blob storage
201:44 - and that's already taken so we'll
201:46 - say uh exam blob
201:52 - storage and it can have
201:55 - hyphens there we go and so we're going
201:57 - to launch it in Us East we have the
202:00 - difference between standard and premium
202:01 - I think we'll stick with standard uh we
202:04 - have storage type V2 or V1 or blob
202:07 - storage we want blob storage uh we have
202:10 - some replication options here I'm just
202:12 - going to leave it alone uh we have
202:14 - access here hot or cool we're just going
202:16 - to leave it
202:17 - hot and we can just look at networking
202:19 - here for a moment uh we're going to
202:21 - leave this alone we're just going to
202:22 - look Advance at a moment so nothing
202:24 - exciting there we'll go back to basic
202:26 - hit review plus create we'll have to
202:28 - wait for validation we'll go ahead and
202:30 - now hit
202:32 - create and then it should say deployment
202:35 - underway we're waiting to see the St
202:36 - deployment complete uh you might be
202:38 - getting into the rhythm of how creating
202:40 - Services now it's almost always the same
202:42 - process and we'll just wait here till
202:44 - this is
202:48 - complete okay great so I just waited a
202:50 - minute there and now um that's all set
202:52 - up so let's go ahead and hit go to
202:54 - Resource and then we have a lot of stuff
202:57 - around here um so what we want to do is
203:00 - we want to start uploading files but I
203:02 - think we have to create a container
203:03 - first so go all the way down here left
203:05 - inside and go to
203:07 - containers and we're going to create a
203:09 - new container I'm going to call this
203:11 - start track it's going to be a private
203:13 - container so it's only just for me we'll
203:15 - hit
203:16 - create and now we should be able to
203:18 - click into that
203:20 - container all right so now we uh now
203:22 - that we have that container what we can
203:23 - do is go ahead and upload our first file
203:26 - I just happen to have a file on my
203:27 - desktop here so I'm just going to go
203:29 - select that there and
203:32 - upload um all the options by default are
203:35 - great here we'll just hit
203:37 - upload and there we go so we just
203:39 - uploaded a file into our blob storage
203:42 - brige um yeah so that's all there really
203:45 - is to it um so now that we're all done
203:47 - there we can just go ahead and delete
203:48 - this container so I think we'll just go
203:50 - back to storage accounts not sure if we
203:53 - have to delete the containers first I
203:54 - guess we'll find out and we'll just go
203:55 - here to blob storage we'll go ahead and
203:57 - hit delete and we'll hit
204:00 - yes we'll go to
204:02 - delete and there you go so we'll just go
204:05 - back to Microsoft Azure there and back
204:07 - on our desktop and I'll see you in the
204:09 - next fall
204:10 - along
204:14 - hey this is Andrew Brown from exam Pro
204:16 - and in this section we'll be covering
204:18 - the Azure Cloud adoption framework Cloud
204:20 - adoption framework is a white paper that
204:22 - is a step-by-step process to help
204:24 - organizations plan and migrate their
204:26 - workloads to Azure the image outlines
204:28 - the Microsoft cloud adoption framework
204:30 - for Azure a systematic approach to
204:32 - transitioning to the Azure Cloud the
204:34 - process is categorized into stages
204:36 - Define strategy here the focus is on
204:40 - understanding motivations grasp in the
204:41 - reasons for cloud adoption business
204:44 - outcomes identifying the desired results
204:47 - business justification validating the
204:48 - moves reasons first adoption project
204:51 - kickstarting the cloud Journey plan this
204:54 - stage includes rationalizing digital
204:56 - estate evaluating current digital assets
204:59 - initial organization alignment ensuring
205:01 - everyone is aligned with the migration
205:03 - goals skills Readiness Plan equipping
205:05 - teams with necessary Cloud skills Cloud
205:08 - adoption plan laying out a road map for
205:10 - the cloud transition ready this phase
205:12 - ensures preparedness Azure Readiness
205:14 - guide preparing the environment for
205:16 - Azure First Landing Zone setting up an
205:18 - initial secure Azure environment
205:21 - expanding the blueprint broadening the
205:22 - Azure setup as per requirements best
205:25 - practice validation ensuring adherence
205:27 - to Azure best practices adopt the
205:30 - actionable phase where migrate existing
205:32 - workloads or moved to Azure this entails
205:34 - the first workload migration
205:36 - understanding expanded scenarios
205:38 - validating best practices and making
205:40 - process improvements
205:42 - innovate transform services in the Azure
205:44 - environment using Innovation guides
205:46 - exploring new scenarios validating best
205:48 - practices and furthering process
205:50 - improvements govern this is about
205:52 - oversight and management establish a
205:55 - methodology and Benchmark for governance
205:58 - Implement initial best practices
205:59 - standards for Azure use measure
206:02 - governance maturity how well governance
206:03 - rules are followed manage the deals with
206:06 - ongoing operations ensure business
206:09 - commitments are met during the
206:10 - transition set and assess the operations
206:12 - Baseline determine operations maturity
206:15 - gauge the efficiency of cloud
206:18 - operations now let's take a look at the
206:20 - security roles and responsibilities of
206:22 - the Azure Cloud adoption framework
206:25 - Business and Technology outcomes goals
206:27 - and results expected from security
206:29 - functions security outcomes results an
206:32 - organization aims for including
206:34 - governance prevention and response role
206:37 - types security leadership provides
206:39 - security Direction and strategy
206:42 - security architect designs and
206:43 - implements security blueprints platform
206:46 - app security Engineers ensures security
206:48 - of platforms and applications security
206:51 - operations manages real-time security
206:53 - threats
206:55 - responsibilities security leadership set
206:57 - security strategy security architecture
207:00 - design secure systems security
207:03 - compliance ensures adherence to
207:05 - regulations policy and standards set
207:07 - security policies posture management
207:10 - manages over all security stance phases
207:13 - of security implementation plan identify
207:16 - security needs build Implement
207:19 - strategies including access control and
207:21 - asset protection run manages ongoing
207:24 - operations including prevention and
207:26 - response feedback loop continuous
207:28 - Improvement cycle and security
207:30 - operations in summary the framework
207:33 - offers a structured way to transition to
207:34 - Azure ensuring strategy alignment
207:36 - preparation adoption governance and
207:38 - effective
207:40 - management
207:44 - the next topic we'll be covering is
207:46 - azure migrate Azure migrate offers a
207:48 - streamline service for migration
207:50 - modernization and optimization on Azure
207:53 - it simplifies the pre-migration
207:54 - processes like discovering assessing and
207:57 - appropriately sizing on premises
207:58 - resources for infrastructure data and
208:01 - applications with an extensible
208:03 - framework Azure migrate easily
208:04 - integrates with thirdparty tools
208:06 - broadening its range of supported
208:08 - scenarios here's what it offers Unified
208:11 - migration platform a centralized portal
208:13 - to initiate execute and monitor your
208:15 - Azure migration Journey diverse tool set
208:18 - Azure migrate provides a suite of tools
208:20 - for both assessment and migration it
208:22 - features tools such as Azure migrate
208:24 - Discovery and assessment in migration
208:26 - and modernization furthermore it
208:28 - seamlessly integrates with other Azure
208:29 - Services tools and thirdparty offerings
208:32 - from independent software
208:34 - vendors comprehensive migration and
208:36 - modernization capabilities in the Azure
208:38 - migrate Hub you can assess migrate and
208:41 - modernize servers databases and web apps
208:44 - assess and migrate on premises servers
208:46 - web apps and SQL Server instances to
208:48 - Azure databases analyze on premises SQL
208:52 - Server instances and databases and
208:54 - migrate them to Azure SQL on a VM Azure
208:56 - SQL managed instance or Azure SQL
208:59 - database web applications evaluate on
209:02 - premises web applications and transition
209:04 - them to the Azure app service or Azure
209:06 - cubern service virtual desktops review
209:09 - your onsite virtual desktop infr
209:11 - structure and move it to Azure virtual
209:13 - desktop data transfer efficiently and
209:15 - affordably transfer vast data volumes to
209:17 - Azure using Azure data box products by
209:20 - using Azure migrate organizations can
209:23 - streamline and simplify their migration
209:25 - process reduce downtime and improve the
209:27 - overall efficiency and cost
209:28 - effectiveness of their Cloud
209:34 - migration the next thing we'll be
209:36 - covering are the integrated Tools in
209:37 - Azure migrate the Azure migrate Hub
209:40 - includes these tools
209:41 - Azure migrate Discovery and assessment
209:44 - discover and assess servers including
209:46 - SQL and web apps discover and assess on
209:48 - premises servers running on VMware
209:50 - hyperv and physical servers in
209:52 - preparation for migration to Azure
209:54 - migration and modernization migrate
209:57 - servers migrate VMware VMS hyperv VMS
210:00 - physical servers other virtualized
210:02 - servers and public Cloud VMS to Azure
210:05 - data migration assistant assess SQL
210:07 - Server databases for migration to Azure
210:10 - SQL database Azure SQL managed instance
210:12 - or Azure vm's running SQL Server data
210:15 - migration assistant assesses SQL servers
210:18 - identifies potential migration problems
210:20 - unsupported features and suggest the
210:22 - best path for database migration Azure
210:25 - database migration service migrate on
210:27 - premises databases to Azure vm's running
210:29 - SQL Server Azure SQL database or SQL
210:33 - managed instances Azure databased
210:35 - migration service is a managed service
210:37 - for seamless migrations to Azure data
210:39 - platforms with minimal downtime nuver
210:41 - assess servers nuu is a SAS platform
210:44 - that enhances business intelligence by
210:46 - accurately depicting it environments
210:48 - within a day web app migration assistant
210:51 - assess on premises web apps and migrate
210:53 - them to Azure Azure app service
210:55 - migration assistant is a standalone tool
210:57 - to assess on premises websites for
210:58 - migration to Azure app service Azure
211:01 - data box migrate offline data use Azure
211:04 - data box products to move large amounts
211:06 - of offline data to Azure so that's an
211:08 - overview of the integrated Tools in
211:10 - Azure mic
211:15 - great the next migration solution we'll
211:17 - be covering is azure datab box the
211:20 - Microsoft Azure datab box Cloud solution
211:22 - lets you send terabytes of data into and
211:24 - out of azure in a quick inexpensive and
211:26 - reliable way each storage device has a
211:29 - maximum usable storage capacity of 80
211:31 - terabytes and is transported to your
211:32 - data center through a regional carrier
211:35 - it is designed to help customers with
211:36 - slow or limited internet connectivity to
211:38 - move large volumes of data to the cloud
211:41 - let's take a look at some of azzure data
211:43 - Box's use cases data boxes used to
211:46 - import data to Azure for onetime
211:48 - migrations moving large on premises data
211:51 - transitioning offline tapes relocating
211:53 - VMS SQL servers applications and
211:56 - transferring historical data for Azure
211:57 - based analysis initial bulk transfers
212:00 - large scale transfers using data box
212:03 - followed by incremental Network
212:04 - transfers for example moving vast
212:06 - backups with Partners like convolt
212:09 - periodic uploads transferring large
212:11 - volumes of data generated periodically
212:13 - like video content from oil rigs or
212:15 - windmill farms for exporting from Azure
212:17 - data boxes used for Disaster Recovery
212:20 - restoring Azure data on premises quickly
212:23 - security requirements meeting mandates
212:25 - that require data extraction from Azure
212:27 - storage tiers Like Us Secret migration
212:30 - moving data back to on premises or to a
212:32 - different cloud provider here's how
212:35 - Azure data box works customers order a
212:37 - data box from the Azure portal when the
212:40 - data box arriv arrives customers connect
212:42 - it to their Network and configure it
212:43 - using the Azure portal customers copy
212:46 - data to the data box using standard file
212:48 - transfer protocols such as SMB or NFS
212:51 - once the data transfer is complete
212:53 - customers ship the data box back to
212:55 - Azure Azure copies the data from the
212:57 - data box to the customer's Azure storage
212:59 - account so that's an overview of azure
213:02 - datab box its use cases and
213:08 - workflow hey this is Andrew Brown and
213:10 - and before we get into Azure ad I need
213:13 - to point something out it's not called
213:15 - Azure ad anymore it's called Microsoft
213:17 - entra ID Microsoft decided to change the
213:20 - name of
213:21 - azuread why nobody knows but I can tell
213:24 - you no customer likes this particular
213:26 - change um somebody just had a lot of
213:29 - time on their hands over at Microsoft
213:31 - but we do need to address this and I
213:33 - need to point out that I'm not refiling
213:35 - all of the content that I made just to
213:38 - change the name because that's crazy I
213:40 - will will at some point when this when
213:42 - the content is stale but the content's
213:44 - not stale they just change the name on
213:46 - us um but I wanted to just go over that
213:48 - quickly here so uh the names here we
213:51 - have Azure ad is now Microsoft entra ID
213:55 - then the Azure ad tiers is from P1 P2
213:58 - still P1 P2 the Azure ad external
214:01 - identities is now called Microsoft entra
214:03 - external identities and if we scroll on
214:06 - down we have a logo change so instead of
214:09 - this which by the way I really like the
214:11 - old
214:12 - logo they didn't need to muck with it
214:14 - but anyway we have uh the older ones
214:16 - here and so this is the new one
214:18 - here and so there are some name changes
214:20 - here Azure ad single sign on now
214:22 - Microsoft entra entra uh single sign on
214:26 - we'll go down below here and you can see
214:28 - well more name changes okay so um anyway
214:33 - yeah they renamed it and you know
214:35 - customers are just going to take a while
214:37 - to get used to it I still like calling
214:39 - Azure ad I know a lot of other people
214:40 - like still calling it Azure ad but it's
214:42 - at some point we'll get moved over to it
214:45 - and we're just going to use both names
214:47 - okay now coming over to uh uh the portal
214:51 - I need to show you that if you type in
214:52 - Azure ad it's still going to pull up
214:55 - Microsoft ENT okay now you don't want
214:58 - Azure ad B to C which is interesting
215:00 - they didn't rename that U which is a it
215:05 - is part of azure ad kind of in a sense
215:08 - but it's more for um if you're building
215:09 - applications and you want to um have
215:13 - authentication into it so just
215:16 - understand that there's not consistency
215:17 - all over the place especially even their
215:19 - documentation the marketplace still says
215:20 - Azure ad all over the place um even down
215:23 - below uh you know Azure ad notification
215:26 - so you know there's just going to be
215:28 - that Legacy of azure ad but anyway yeah
215:30 - what you want to do is go go over to
215:32 - Microsoft Entre ID it all looks the same
215:34 - it's just some name changes okay but
215:37 - yeah there you go see you in the next
215:39 - one
215:43 - [Music]
215:44 - hey this is Andrew Brown from exam Pro
215:46 - and we are looking at Azure active
215:47 - directory and this is a cloud-based
215:49 - identity and access management service
215:51 - to manage users sign-ins and access to
215:53 - ad related resources so as your active
215:56 - directory is Microsoft's cloud-based
215:58 - identity and access management service
215:59 - which helps you your employees sign in
216:01 - and access resources so that could be
216:04 - external resources like Microsoft Office
216:06 - 365 azer portal SAS applications or
216:09 - internal resources so applications
216:11 - within your internal networking or
216:12 - access to workstations on premise and
216:15 - you can use Azure ad to implement single
216:17 - sign on so you can see that Azure ad is
216:19 - basically like the the the one solution
216:22 - to log into everything and uh we
216:24 - actually use it at exam Pro we use it
216:26 - with Microsoft teams or uh you know for
216:29 - the exam pro pro platform our mid panels
216:32 - tied to it so when we want to log into
216:33 - the mid panel with credentials we have
216:35 - it there uh we use it with AWS to log
216:37 - into there and we use it to log into
216:40 - azure so it has a lot of flexibility and
216:42 - if you're building out applications for
216:43 - Enterprises they're likely using ad and
216:46 - so this is the reason why everybody
216:48 - adopts it or needs to understand it so
216:49 - it's a service I really really do want
216:51 - you to understand and know as your
216:53 - active directory comes in for additions
216:55 - we have the free tier and by the way
216:57 - each uh uh uh tier that goes up has the
217:00 - features before it but uh free has MFA
217:03 - SSO basic security usage reports and
217:05 - user management then you have the Office
217:07 - 365 apps which is uh revolves around if
217:10 - you're using that Suite so you have
217:12 - company branding SLA two sync between on
217:14 - premise and cloud and then the premium
217:16 - tiers which really comes into Enterprise
217:18 - or or or on premise hybrid architecture
217:21 - so hybrid architectures Advanced group
217:23 - access conditional access premium 2
217:26 - identity protection and identity
217:28 - governance only thing I don't like about
217:29 - Azure ad is that uh you can't really
217:31 - create your uh custom access controls
217:33 - unless you have premium one or premium 2
217:35 - but that's just how they do it so there
217:36 - you
217:39 - go
217:41 - so let's take a look at the use case for
217:43 - Azure ad and we basically covered it in
217:45 - the introduction but I just want to
217:47 - reiterate it in a different way with a
217:48 - bit of a visual uh so that it really
217:50 - helps uh it sync into your uh brain
217:53 - there so Azure ad can authorize and
217:55 - authenticate to multiple sources so it
217:57 - can authenticate to your on- premise ad
217:59 - to your web application allow users to
218:01 - log in with uh ipds uh so identity
218:04 - providers could be like use Facebook or
218:06 - Google login uh you can use it with
218:09 - Office 365 or Azure Microsoft and so
218:12 - just a visual here notice that uh we
218:14 - have Azure ad and using Azure ad connect
218:17 - we can connect to on premise through uh
218:20 - app registrations we're able to uh
218:22 - connect our web application to Azure ad
218:25 - with external identities we can um uh
218:28 - use Facebook or Google uh uh uh uh login
218:32 - and then for cloud applications we can
218:34 - connect to Office 365 or Microsoft
218:39 - azure
218:41 - [Music]
218:42 - so active directory existed way before
218:44 - Azure and so let's just do a quick uh uh
218:47 - rundown of the history so we have an
218:48 - idea of what we're looking at so um
218:51 - Microsoft introduced active directory
218:53 - domain services in Windows 2000 to give
218:55 - organizations the ability to manage
218:57 - multiple on- premise infrastructure
218:58 - components and systems using a single
219:00 - identity per user so it's been around
219:02 - for 20 years and as your ad takes this
219:05 - approach to the next level by providing
219:07 - organizations with identity as a service
219:09 - so idaa
219:11 - solution for their apps across uh cloud
219:14 - and on premise and both versions are
219:16 - still used today because they just have
219:17 - different utility and so we have active
219:20 - directory which is for on premise and
219:22 - then you have azuread which is just the
219:23 - cloud hosted version and many regards
219:26 - these can also be connected together um
219:29 - but there you
219:33 - go so I want to cover some active
219:36 - directory terminology and the honest
219:38 - truth is that uh for a you're not going
219:41 - to be uh uh too worried about these
219:43 - things but they're going to come up in
219:44 - the documentation you're going to kind
219:45 - of wonder what they are and so I just
219:47 - wanted to uh uh tell you about these
219:49 - upfront even though they're not core to
219:50 - study uh so that it just really rounds
219:52 - out your active directory knowledge
219:53 - because active directory is such a core
219:55 - service to Azure Microsoft products you
219:57 - you should know these things uh so the
219:58 - first thing is all about domain so a
220:00 - domain is an area of network uh
220:02 - organized by a single authentication
220:04 - database an active directory domain is a
220:07 - logical grouping of ad0 objects on a
220:09 - network so just think of it way as you
220:10 - know how you have resource groups to
220:12 - logically group your Azure resources
220:14 - domains are a logical grouping for your
220:16 - ad objects then you have a domain
220:19 - controller a domain controller is a
220:21 - server that authenticates user
220:22 - identities and authorizes their access
220:24 - to resources very common to have
220:26 - multiples of these uh because you want
220:28 - to have redundant uh domain controllers
220:30 - so you can log in or availability or
220:33 - launching domain controller uh nearby so
220:35 - people can log in different places uh so
220:37 - definitely uh very core to active
220:39 - directory then you have the domain
220:40 - computer this is a computer that is
220:42 - registered with a central authentication
220:44 - database uh and a domain computer would
220:46 - be uh an ad object uh so then you have
220:50 - ad objects so this is the basic element
220:52 - of active directory so you have users
220:54 - groups printers computers share folders
220:56 - Etc then you have a group policy object
220:58 - a GP this is a virtual collection of
221:00 - policy settings it controls what an ad
221:02 - object has access to you have your
221:04 - organizational units this is a
221:05 - subdivision within active directory into
221:08 - which you can place users groups
221:10 - computers and other organizational units
221:12 - so it's just another way of um doing
221:15 - logical
221:16 - grouping then you have a directory
221:17 - service and this is this provides a
221:19 - method for storing directory data and
221:22 - making this data available to network
221:24 - users and administrators a directory
221:25 - service runs on a domain controller so
221:28 - there you go that is the rundown of
221:30 - active directory terminology and again
221:32 - hopefully when you see it in the
221:33 - documentation you can refer back to this
221:35 - or you'll have a better understanding of
221:37 - all the components I would have loved to
221:38 - have made a diagram but just couldn't
221:40 - find an example of one and so uh I mean
221:43 - I feel like there could be a really good
221:45 - picture for all this
221:47 - [Music]
221:50 - stuff so remember that the domain
221:52 - controller is the server that users are
221:54 - going to be using to authenticate to the
221:56 - directory Service uh and so when you
221:58 - create an active directory Azure sets
222:00 - one up for you but there's some cases
222:02 - where you might want to set one up
222:03 - yourself and the reason why is that you
222:05 - could be like an on like an Enterprise
222:08 - where you already have your own active
222:09 - directory on premise but you've decided
222:11 - that you want to move it over to Azure
222:13 - ad uh because you just want a fully
222:15 - managed active directory and uh you want
222:18 - to tap into the cloud but uh the thing
222:20 - is that some domain Services those are
222:22 - features on your domain controller just
222:24 - might not be available and that's where
222:26 - you're going to need to set up your own
222:27 - domain controller and that's where Azure
222:29 - active director domain Services come
222:31 - into play because these provide managed
222:33 - domain
222:34 - services and so they have manage domain
222:36 - services such as domain joins uh group
222:39 - policies
222:40 - ldaps uh curb B Ross Never Can Say That
222:44 - properly ntlm authentication and so the
222:48 - great thing is here is you can have
222:49 - these domain services but you're not
222:51 - going to have to deploy them manage them
222:53 - patch them they're just going to work so
222:55 - there you
222:59 - go the next topic we'll be covering is
223:01 - single sign on an enter ID single sign
223:04 - on an enter ID is a feature that allows
223:06 - users to authenticate once with enter ID
223:08 - and then access multiple applic ations
223:10 - and services without having to
223:11 - authenticate again when a user signs
223:14 - into enter ID with their credentials
223:15 - enter ID creates a security token that
223:17 - can be used to access other resources
223:19 - within the same organization this token
223:21 - can be used to authenticate the user to
223:23 - other cloud-based or on premises
223:25 - applications that have been integrated
223:26 - with enter ID SSO supports a wide range
223:29 - of applications including cloud-based
223:32 - applications such as Microsoft 3065
223:35 - Salesforce and Dropbox as well as on
223:37 - premises applications such as SharePoint
223:39 - and sap
223:40 - SSO can also be used with custombuilt
223:42 - applications using industry standard
223:44 - protocols such as saml open ID connect
223:47 - and
223:48 - oth there are several ways you can
223:50 - configure an application for SSO
223:52 - choosing an SSO method depends on how
223:54 - the application is configured for
223:56 - authentication Cloud applications can
223:58 - use open ID connect ooth saml
224:01 - password-based or linked for SSO single
224:04 - side on can also be disabled on premises
224:07 - applications can use password-based
224:08 - integrated with Windows authentication
224:11 - header based or linked for SSO the on
224:13 - premises choices work when applications
224:15 - are configured for application proxy
224:18 - this flowchart can help you decide which
224:19 - SSO method is best for your
224:22 - situation the main SSO protocol
224:25 - supported in Azure include open ID
224:28 - connect and oath open ID connect is an
224:30 - identity layer built on top of oath 2.0
224:32 - it allows for authentication and
224:34 - authorization of users in a secure and
224:36 - standardized manner it is saml ml is an
224:40 - xml-based protocol used for exchanging
224:42 - authentication and authorization data
224:44 - between an identity provider and a
224:45 - service provider it is commonly used for
224:47 - Federated authentication
224:49 - scenarios password-based authentication
224:52 - this refers to the traditional username
224:54 - password authentication method where
224:56 - users provide their credentials directly
224:57 - to authenticate linked authentication
225:00 - Azure provides the ability to link
225:02 - multiple accounts from different
225:03 - identity providers to a single user
225:05 - identity this allows users to
225:07 - authenticate using any of their linked
225:09 - accounts
225:10 - integrated Windows authentication it
225:12 - will let users access applications using
225:14 - their Windows domain credentials
225:16 - utilizing their current Windows session
225:17 - for
225:18 - authentication header base
225:20 - authentication in this method the
225:22 - application accepts an authentication
225:24 - token in the form of a header in each
225:25 - request the token is validated by the
225:28 - application to authenticate the user
225:30 - you'll need to be familiar with these
225:32 - SSO protocols as there will be questions
225:34 - asking you which SSO protocol is best
225:36 - suited for a specific
225:38 - application what is multiactor
225:41 - authentication a security control where
225:43 - after you fill in your username email
225:45 - and password you have to use a second
225:47 - device such as a phone to confirm that
225:49 - it's you logging in MFA protects against
225:52 - people who have stolen your password MFA
225:55 - is an option in most Cloud providers and
225:56 - even social media websites such as
225:59 - Facebook so that's an overview of single
226:01 - sign on an enter
226:03 - [Music]
226:07 - ID let's talk about external identity so
226:10 - external identities in aad allows people
226:12 - outside your organization to access your
226:13 - apps and resources while letting them
226:15 - sign in uh and use whatever identity
226:17 - they prefer so your partners
226:19 - Distributors suppliers vendors or other
226:21 - guests can bring their own identities
226:23 - such as uh Google or Facebook uh you can
226:26 - share apps with external users that's
226:27 - for B2B stuff uh if you develop apps and
226:30 - tender for Azure ad tenants uh for
226:32 - single tener multitenant you can do that
226:34 - as well uh you can develop white label
226:36 - apps for consumers and customers so this
226:38 - would be like azure ad uh B to C so
226:42 - there you
226:45 - go the next topic we'll be going over is
226:48 - conditional access conditional access
226:51 - provides an extra layer of security
226:53 - before allowing authenticated users to
226:55 - access data or other assets conditional
226:57 - access is implemented via conditional
226:59 - access policies which are a set of rules
227:01 - that specify the conditions under which
227:03 - signin are evaluated and allowed for
227:06 - example you can create a conditional
227:08 - access policy that states if the user
227:10 - account name is a member of a group for
227:12 - users that are assigned The Exchange
227:13 - user password security SharePoint or
227:16 - Global administrator roles require MFA
227:18 - before allowing access this policy
227:21 - enables MFA enforcement based on group
227:23 - membership simplifying the process
227:25 - compared to configuring MFA for
227:27 - individual users when roles
227:29 - change conditional access policy
227:31 - analyzes signals including user and
227:34 - location device application and
227:36 - real-time risk and verifies every access
227:39 - attempt via access controls this
227:41 - requires MFA block access and allow
227:44 - access signals or metadata associated
227:47 - with an identity attempting to gain
227:49 - access user or group membership policies
227:52 - Target specific users and groups giving
227:54 - admins find grain control over access
227:57 - named location information IP location
227:59 - information IP address ranges are used
228:01 - to permit or deny access based on
228:03 - geographical locations device policies
228:06 - can be applied based on the platform or
228:08 - status of a user device application
228:11 - users attempting to access specific
228:13 - applications can trigger different
228:15 - conditional access
228:16 - policies realtime sign in Risk detection
228:19 - signals and Azure ad identity protection
228:21 - detect risky sign-ins if risks emerge
228:23 - policies can prompt actions such as
228:25 - password resets multiactor
228:27 - authentication or block access pending
228:29 - admin
228:30 - intervention Cloud apps or actions can
228:32 - include or exclude Cloud applications or
228:34 - user actions that will be subject to the
228:37 - policy user risk for customer numers
228:39 - with identity protection user risk can
228:41 - be evaluated as part of a conditional
228:43 - access policy user risk represents the
228:45 - probability that a given Identity or
228:47 - account is
228:49 - compromised common decisions Define the
228:51 - access controls that decide what level
228:53 - of access based on Signal
228:55 - information block access most
228:57 - restrictive decision Grant access least
229:00 - restrictive decision still require one
229:02 - or more of the following options require
229:05 - multiactor authentication require device
229:07 - to be marked as compliant require hybrid
229:09 - ENT ID join device require approved
229:12 - Client app and require app protection
229:14 - policy conditional access policies are
229:16 - available and can be utilized with the
229:18 - following licensing plans Microsoft 365
229:21 - business premium Microsoft 365 E3 and E5
229:25 - enter ID premium P1 and enter ID premium
229:27 - P2
229:28 - licenses overall conditional access acts
229:31 - as a robust security measure in Azure
229:33 - ensuring that authenticated users can
229:35 - only Access Data under specific
229:38 - conditions
229:42 - [Music]
229:43 - hey this is Andrew Brown from exam Pro
229:45 - and we are starting our journey for the
229:46 - sc900 talking about zero trust
229:48 - methodologies or the zero trust model in
229:50 - particular uh and this is super
229:53 - important because it really lays the
229:54 - foundation of the way we should be
229:56 - thinking about uh all of the security
229:58 - that we're going to be doing with an
229:59 - Azure and actually in any cloud service
230:02 - providers because the zero trust model
230:04 - is really uh what is being adopted today
230:07 - and we'll talk about why that is so the
230:08 - zero trust model operates on the
230:10 - principles of trust no one and verify
230:12 - everything so if you have malicious
230:15 - actors and they're being able to bypass
230:17 - conventional access controls and
230:18 - demonstrates traditional security
230:19 - measures that's no longer sufficient we
230:21 - need to come up with a new way uh to
230:23 - protect ourselves and so that's where uh
230:26 - Azure or Microsoft in particular has
230:28 - come up with their version of a Zer
230:29 - trust model called the Microsoft's zero
230:32 - trust model and this is based on three
230:34 - principles and six pillars so in the
230:36 - three principles we have verify
230:38 - explicity least privileged access assume
230:41 - breach for our six pillars we have um
230:43 - identities endpoints uh an easier way of
230:46 - thinking about end points is just think
230:47 - of them as devices apps data
230:50 - infrastructure and networks and I would
230:52 - say that if you wanted to put an
230:53 - emphasis on anything it's going to be
230:55 - identities which comes down to Azure ad
230:58 - that seems to be um the largest Focus
231:01 - here in this entire course and to really
231:03 - ensuring the zero trust methodology
231:06 - works the zero trust model is not unique
231:09 - to Microsoft gcp has its own uh zero
231:12 - trust model adabs has its own zero trust
231:15 - model but the one here is just going to
231:16 - really work for Azure
231:19 - [Music]
231:22 - okay okay so let's review the three
231:25 - principles we said that are in the
231:26 - Microsoft zero trust model the first is
231:28 - verify explicity and so this always
231:31 - authenticates and authorizes based on
231:33 - all the available data points um the
231:36 - next one is least privilege access so
231:37 - limit user access with just in time and
231:40 - just enough access for risk-based
231:42 - adaptive policies and data protection
231:44 - assume breach so minimize blast radius
231:46 - and segment access verify end to end
231:48 - encryption and use analy to gain
231:50 - visibility Drive threat detection
231:52 - improve defenses now you see me
231:53 - highlighting things in red uh and I'm
231:56 - not telling you what they are because we
231:57 - have a whole section on these things so
231:59 - don't worry if you see a bunch of terms
232:01 - and you're just getting overwhelmed uh
232:02 - we're going to cover them multiple times
232:04 - uh and so you just understand that we're
232:07 - going to front load you with a lot of
232:08 - terms you don't know but you will know
232:09 - them by the end of this course
232:11 - [Music]
232:14 - okay let's take a look here at defense
232:16 - and depth and so there are seven layers
232:18 - of security that Azure wants you to know
232:20 - it kind of maps up to the share
232:23 - responsibility Model A lot of times we
232:25 - see these things when um uh
232:28 - organizations or or CL Cloud providers
232:30 - are talking about their um security
232:33 - centers like the actual data centers and
232:35 - how they're secured but this is more
232:37 - General uh it doesn't necessarily have
232:38 - to apply to a data center but uh let's
232:41 - go and work our way through inside out
232:44 - okay so the core we have data uh so
232:46 - access to business and customer data
232:48 - encryption uh to protect our data then
232:50 - we have applications so um applications
232:53 - secure and and free of security
232:55 - vulnerabilities then you have compute so
232:58 - access to VMS ports on premise and Cloud
233:01 - the network limit communications between
233:03 - resources using segmentation and access
233:05 - controls the perimeter so uh distribut
233:08 - Den of service protection to filter
233:10 - large scale attacks before they can
233:12 - cause the denial service for users
233:14 - identity and access so control uh
233:17 - controlling access to infrastructure and
233:19 - change uh controls and then you have
233:21 - physical security so limiting access to
233:23 - a data center to only authorized
233:25 - Personnel so the idea is that if you
233:27 - really want to like if you want to get
233:28 - to data you got to go through all these
233:30 - steps here these are all the layers of
233:33 - Defense um and so I just want to give
233:36 - extra emphasis to
233:39 - um this one here identity and access
233:42 - because this one's like the besides the
233:44 - physical security this one's the
233:46 - outermost one so they they will say like
233:49 - your your your perimeter like the modern
233:52 - perimeter is defined based on your like
233:54 - your identity okay we'll see that more
233:56 - here in this
233:58 - [Music]
234:01 - course hey this is Andrew Brown from
234:03 - exam Pro and we are taking a look here
234:05 - at Azure Defender so Azure Defender
234:07 - provides Advanced protection for your
234:08 - Azure in on premise workloads and Azure
234:11 - Defender can be found in the Azure
234:12 - security Center So within the security
234:14 - Center there'll be a tab called Azure
234:15 - Defender and that's the way you find it
234:17 - so Azure Defender is composed of
234:19 - coverage security alerts insights and
234:21 - advanced protection so talking about
234:23 - coverage it allows you to see the
234:26 - resource types that are in your
234:27 - subscription and eligible for protection
234:29 - by Azure Defender so here take note that
234:32 - we can see things like virtual machines
234:34 - kubernetes Services container registry
234:36 - app Services SQL ver uh VMS Vault uh uh
234:40 - key vaults SQL servers and storage
234:42 - accounts for security alerts they
234:45 - describe details of the affected
234:46 - resources such as remediation steps and
234:48 - in some cases an option to trigger a
234:51 - logic app in response so here you can
234:53 - kind of see security alerts over time uh
234:56 - then there are insights this is a
234:57 - rolling pane of news suggested reading
234:59 - and high priority alerts uh that give
235:01 - security centers insights into pressing
235:03 - security matters that are relevant to
235:05 - you in your subscription for advanced
235:07 - protection Within Fender are additional
235:09 - security features that is driven by
235:11 - analytics so VM vulnerability
235:13 - assessments just in time VM access
235:15 - adaptive application control container
235:17 - image scanning adaptive Network
235:20 - hardening SQL vulnerability assessment
235:23 - file Integrity monitoring Network map
235:26 - iot security and so down below you can
235:29 - see all these options here whether
235:30 - they're turned on or not let's take a
235:32 - we'll take a look at Network map here in
235:33 - a moment um so scope of azure Defender
235:36 - so there it has a lot of different plans
235:38 - for specific Azure resources so we have
235:41 - Azure Defender for servers app service
235:43 - storage SQL kubernetes container
235:45 - registry key volt resource manager DNS
235:48 - uh open source relational databases and
235:50 - when you turn on as your Defender all
235:52 - plans are activated we saw that under
235:54 - the advanced protection uh tabs then
235:57 - just to kind of highlight Network map
235:58 - because this one's really cool uh it's a
236:00 - network map that provides a graphic
236:02 - graphical view with with security
236:04 - overlays giving you recommendations and
236:06 - insights for hardening your network
236:08 - resources is so uh using the map you can
236:10 - see the network topology of your Azure
236:12 - workloads uh connections between your
236:15 - virtual machines and subnets and the
236:16 - capabilities to drill down from the map
236:18 - into a specific resource uh resources
236:21 - and the recommendations of those
236:22 - resources uh then just the last thing I
236:24 - want to touch on here is hybrid uh Cloud
236:26 - protection so Azure Defender can protect
236:29 - VMS residing in other cloud service
236:31 - providers such as AWS and gcp Via Azure
236:34 - Arc so Azure Arc if you've never heard
236:36 - of it is a control plane that can manage
236:38 - compute resources across cloud service
236:40 - providers on premise and at the stage or
236:43 - at the edge and so for infrastructure
236:45 - you'll notice that it can handle uh VMS
236:48 - uh kubernetes clusters SQL servers and
236:50 - Azure sack
236:52 - [Music]
236:56 - hcis hey this is Andrew Brown from exam
236:58 - Pro and we are looking at multiactor
237:01 - authentication so what is MFA so MFA is
237:05 - a security control where after you fill
237:07 - in your username or maybe it's your
237:09 - email and password into a login portal
237:12 - so this login portal could be the Azure
237:13 - portal this could be you logging into
237:15 - Facebook uh the idea is that you have to
237:17 - use a second device such as a phone to
237:20 - confirm that it's you logging in and so
237:22 - why do we use MFA well MFA protects uh
237:25 - against people who have stolen your
237:27 - password because they might have your
237:28 - password but they don't have your phone
237:30 - or whatever device that they're uh
237:31 - you're using for MFA so um MFA is an
237:36 - option most Cloud providers have and
237:38 - just as I said before most social media
237:41 - uh websites have it so Facebook Twitter
237:43 - uh they all have it so just to give you
237:45 - a visual example uh we have a form where
237:47 - I'm entering my email and password then
237:50 - we have a phone which is our MFA in this
237:52 - case and then we get authorization so in
237:55 - the first case that is one factor right
237:57 - so if we didn't have to use a phone or
237:59 - another device that'd be considered one
238:01 - factor and then multiactor or two Factor
238:04 - authentication would be the uh the
238:06 - addition of another uh device to confirm
238:08 - that that it's you and pretty what
238:11 - pretty much what's common is to use your
238:12 - phone and to install an app on your
238:14 - phone and then what that phone will do
238:15 - is it will give you a random number that
238:17 - expires like every I don't know 10
238:19 - seconds you have to enter that in uh uh
238:22 - with your username and password or as
238:24 - the second step and then you gain access
238:26 - to Azure
238:28 - [Music]
238:31 - portal hey this is Andrew Brown from
238:33 - exam Pro and we are looking at Azure
238:36 - security Center so azure security Center
238:39 - is a unified infrastructure Security
238:40 - Management System it strengthens the
238:43 - security posture of your data centers
238:45 - and provides Advanced threat protection
238:47 - across your hybrid workloads in the
238:49 - cloud that sounds really fancy but let's
238:51 - take a look at what that is so that's
238:53 - what it is down below it's a bunch of
238:55 - graphs and it's going to tell you uh if
238:57 - you are compliant with particular
238:59 - policies it'll tell you about your
239:01 - security hygiene all sorts of security
239:03 - stuff so you have a good visual about
239:06 - your security within Azure so there you
239:08 - you
239:09 - [Music]
239:13 - go hey this is Andrew Brown from exam
239:15 - Pro and we are looking at Key Vault so
239:18 - Azure key Vault helps you Safeguard
239:20 - cryptographic keys and other Secrets
239:22 - used by Cloud apps and services and So
239:25 - within key Vault it has a bunch of
239:28 - functionality in it so one thing it can
239:30 - do is manage your secrets so store uh uh
239:34 - store and tightly control access to
239:35 - tokens passwords certificates API keys
239:37 - and other secrets
239:39 - it also has Key Management so it it can
239:42 - create and control encryption Keys used
239:44 - to encrypt your data then we have
239:46 - certificate management so easily
239:48 - provision manage and deploy public and
239:49 - private SSL certificates for use with
239:51 - Azure and internal connected resources
239:55 - uh and then it also is a Hardware
239:56 - security module so secrets and keys can
239:58 - be protected either by software or fips
240:02 - 142 or 140 hyphen 2 level two validated
240:05 - HSM and I told you uh that we would be
240:08 - talking about fips again and we are
240:10 - right now so to understand uh um HSM the
240:14 - last thing we're talking about which
240:15 - stands for Hardware security module it's
240:17 - a piece of Hardware designed to store
240:19 - your encryption keys and it literally
240:21 - looks like something like that so um uh
240:24 - Azure would have bought one of these or
240:27 - tons of these and that is what is
240:29 - storing your cryptographic keys and this
240:32 - um piece of Hardware is special because
240:35 - uh when you store keys on it they're
240:37 - stored in memory meaning that they're
240:38 - not ridden to disk if that thing shuts
240:40 - down uh the the keys are gone and nobody
240:43 - can steal your data it's just a security
240:45 - measure and that security measure has to
240:47 - do with fips okay so fips 1405 and 2 is
240:50 - a us and Canadian government standard
240:52 - that specifies the security requirements
240:54 - for cryptographic modules that protect
240:57 - sensitive information so for hsms that
241:00 - are multi-tenant they're generally going
241:02 - to be 140 hyphen 2 compliant
241:05 - multi-tenant meaning that um that
241:07 - there's more than one customer that is
241:09 - using that piece uh piece of Hardware
241:11 - but they're virtually isolated from each
241:13 - other uh and then if you have a single
241:16 - tenant HSM they're generally going to be
241:18 - fips 140 hypen 3 compliance so a single
241:21 - customer on a dedicated HSM um it's
241:24 - better to be fips 140 hyphen 3 compliant
241:28 - um but fips 140 hyphen 2 is pretty good
241:30 - for most people so there you
241:33 - [Music]
241:36 - go hey this is and Brown from exam Pro
241:39 - and we're taking a look here at dos so
241:41 - this stands for distributed denial of
241:42 - service attack and it's a malicious
241:44 - attempt to disrupt normal traffic by
241:46 - flooding a website with large amounts of
241:48 - fake traffic so the idea is you have an
241:50 - attacker and a victim and the attacker
241:51 - is utilizing remote machines and uh with
241:55 - a with some software that's going to
241:57 - generate out traffic uh directed towards
242:00 - your virtual machine over the cloud and
242:02 - the uh problem here is that what it's
242:04 - going to do is it's going to make uh
242:06 - your website unresponsive
242:08 - or just not work at all for the regular
242:11 - user but by having your compute within
242:14 - the Azure Network you're going to get
242:15 - free dos protection and that's going to
242:17 - mitigate uh these attacks so let's talk
242:19 - about the types of um dos attacks that
242:22 - frequently happen the first is
242:24 - volumetric attacks so these are volume
242:26 - based attacks that flood the network
242:28 - with legitimate looking traffic these
242:29 - will exhaust the available bandwidth and
242:32 - legitimate users cannot access the
242:34 - website these are measured in bits per
242:36 - second so BPS then there are protocol
242:38 - attacks and these are exhausting server
242:40 - Resources with false uh protocol
242:42 - requests that exploit weakness you're
242:44 - looking at UDP and TCP flooding on the
242:46 - layer three and four measured in
242:48 - packages per second so PSP then you have
242:50 - application layer attacks these are
242:52 - attacks that occur at the application
242:54 - layer uh that's B layer 7 so you're
242:56 - looking at HTTP floods SQL injection
242:58 - cross-site scripting also known as xss
243:01 - parameter tamping Solus attacks here
243:03 - you're going to be wanting using a w web
243:05 - application firewall as a means of
243:07 - protection WS are generally uh paired a
243:10 - lot a lot together with DOs Services
243:12 - across the cloud service provider um uh
243:14 - offerings okay so Azure offers two tiers
243:18 - of Dos protection the first is uh the
243:20 - the basic tier this is free it's already
243:22 - turned on uh it's part of the global
243:24 - Network and then you have the standard
243:26 - that starts at about
243:28 - 2,900 uh about 3,000 USD you get metrics
243:31 - alerts reporting dos expert support
243:34 - application and cost protections SLA
243:36 - there's probably a difference in terms
243:37 - of the tier protection I cannot remember
243:39 - off the top of my head but you know one
243:41 - will protect more likely against certain
243:43 - types of attacks like like three and
243:45 - four and the other one will do all all
243:47 - the layers 3 four and seven
243:50 - [Music]
243:53 - okay Azure firewall is a managed
243:56 - cloud-based network security service
243:57 - that protects Azure v-ets resources and
244:00 - it's a fully stateful firewall as a
244:01 - service so you're going to get built-in
244:03 - High availability and unrestricted cloud
244:05 - scalability and what you can do is uh
244:08 - essentially create enforce and log
244:09 - application network connectivity
244:11 - policies across subscription and virtual
244:14 - networks so Azure firewall uses a static
244:16 - public IP address for your v-net
244:18 - resources allowing outside firewalls to
244:20 - identify uh originating from your
244:24 - virtual Network and the service is fully
244:25 - integrated with Azure monitor for
244:27 - logging and analytics so here is a
244:30 - representation of azure firewall and so
244:33 - the idea is that you're going to launch
244:34 - an Azure firewall into its own v-net and
244:37 - then other v-net and you're on premise
244:39 - or other things are going to pass
244:41 - through that Central v-net onto wherever
244:43 - they want to go and the idea is that
244:45 - we're going to be able to uh do things
244:47 - like utilize Microsoft threat
244:49 - intelligence this is going to block
244:51 - known malicious IPS in
244:53 - fqdns that stands for fully qualified
244:55 - domain names and by default the traffic
244:58 - is uh set to deny uh but you can set
245:02 - connectivity policies to filter out
245:04 - traffic in a variety of ways to make
245:05 - sure that you are protected uh there so
245:09 - yeah that's all there is to
245:10 - [Music]
245:14 - it so Azure has uh a few different kinds
245:17 - of load balancers and one in particular
245:19 - is the application Gateway and this is
245:20 - for application Level routing and load
245:23 - balancing service so application Gateway
245:25 - operates at the OS I layer 7 uh which is
245:28 - also known as the application layer and
245:31 - the idea here is that when you're
245:32 - working about applications you're
245:34 - working with HTTP requests that's what
245:36 - it is uh and so the idea is that it can
245:39 - look at the contents of the HBU request
245:42 - and do some interesting things so maybe
245:44 - it's looking at the path and saying okay
245:46 - you're uh if you have a path um and it's
245:49 - payments go to the VM that has their
245:51 - payment system and then if it's for
245:53 - admin go to the VM that does that uh
245:56 - maybe it has to do with something with
245:57 - cookies or um maybe you want to apply a
246:01 - WAFF policy to it and so you can look at
246:04 - those HB requests and determine if it is
246:07 - malicious traffic and filter it out uh
246:09 - so uh yeah it's all about the
246:11 - application which has to do with HP
246:13 - requests to configure this thing you
246:15 - need to set up a front ends uh Runing
246:17 - rules and backend pools and there are
246:19 - two configurations for the front end you
246:21 - can either have it with a private IP
246:23 - which makes it now an internal load
246:24 - bouncer or a public IP which makes it
246:26 - either we would call a public or
246:28 - external load bouncer uh and there's a
246:30 - both I've never used that option before
246:33 - um but I mean you just really need to
246:34 - know the public and private for the
246:36 - backends you create create backend pools
246:38 - and a backend pool is just a collection
246:40 - of resources to which your application
246:42 - Gateway sends traffic uh and so a
246:44 - backend pool can contain virtual
246:45 - machines virtual machine scale sets IP
246:48 - addresses domain names app
246:51 - Service uh and I think you can also send
246:53 - it to like on Prem uh so let's just talk
246:55 - about routing rules which connects the
246:56 - front end and the back end together and
246:59 - so uh here is a more complex example
247:01 - gives you a better idea of the service
247:03 - uh uh at full uh and so the idea is that
247:07 - you have your application Gateway it's
247:09 - going to send uh traffic or sorry like a
247:11 - DNS is going to send to application
247:12 - Gateway and then you have these
247:14 - listeners and they they listen for
247:16 - incoming traffic uh and then what it
247:18 - will do it will pass on that to a rule
247:21 - and a rule just really says who should
247:23 - we pass the data to uh and then if you
247:26 - are defining a backend pool then you
247:27 - need to have um an HTP setting that says
247:30 - how do we handle the HTTP requests okay
247:33 - and so now we'll just look at more
247:34 - granular detail about requests or
247:37 - routing rules
247:37 - [Music]
247:41 - let's take a closer look at routing
247:43 - rules this is where all the magic
247:44 - happens so a listener listens on a
247:46 - specified Port an IP address for traffic
247:49 - that uses a specified protocol if the
247:50 - listener criteria met the application
247:52 - Gateway will apply the routing Rule and
247:54 - these come in two flavors we got basic
247:57 - which fors all requests for any domain
247:58 - to back in pools and multisite forward
248:01 - requests to different backend pools
248:02 - based on host header and host name so
248:04 - the thing is is that uh you uh you can
248:06 - have multiple listeners and you can have
248:08 - an order of them and the idea is that
248:10 - you really want the basic to be on the
248:12 - uh be in last in priority because if
248:14 - it's a first it's going to capture
248:16 - everything because that's its job it's
248:17 - like a catch allall uh so just make sure
248:19 - that um if you're using multiple
248:21 - listeners you put basic last uh so
248:24 - that's just something you need to know
248:25 - then for those backend Targets this is
248:27 - where we either Define a backend pool or
248:28 - redirection redirection is just an HTP
248:31 - redirection like uh 403 or whatever you
248:33 - have their temporary or permanent very
248:36 - simple uh but for backend pools you have
248:38 - to create HTP settings uh and this tells
248:40 - us a little bit more about how we want
248:42 - to handle HTTP you know cookies cook uh
248:44 - connection draining Port request Etc
248:47 - let's talk about that a little bit more
248:48 - so here are the actual options that we
248:49 - can configure for HTP settings so you
248:52 - have your backend Port uh so generally
248:55 - it's either Port 80 or 443 it just
248:58 - depends on where you're doing your SSL
249:01 - termination uh but generally um if you
249:03 - need end to end encryption it'll be 443
249:06 - or uh and then if you are doing connect
249:08 - or if you're doing SSL termination at
249:10 - the blow balcer then it's
249:11 - 80 um then you have cookie base Affinity
249:14 - this allows you to keep a user session
249:16 - on the same server so if you need to
249:17 - persist cookies and use them for
249:19 - authentication you'll want to enable
249:20 - that you got connection draining this
249:22 - gracefully uh removes backend pool
249:24 - members during plan service updates so
249:26 - the idea is that you know when there is
249:28 - an update it's not just going to
249:29 - abruptly cut over it's going to wait
249:32 - until a connection disconnects from a
249:33 - server before uh not no longer sending
249:36 - more requests there cuz you don't want a
249:38 - a connection dropping in the middle of
249:39 - an update it's not great for a user then
249:41 - you have request timeouts this is the
249:43 - number of seconds the application
249:44 - Gateway will will wait to receive a
249:46 - response from the backend pool before it
249:47 - Returns the connection timeout error
249:49 - message and last our um oh sorry we
249:52 - still have override backin path these
249:54 - allow you to override the path in the
249:55 - URL so the request for a spe a specific
249:57 - path can be red to another path the idea
249:59 - is imagine you want to send it to um
250:02 - bananas and you want bananas actually
250:04 - internally route to oranges I don't know
250:06 - why you want to do that or maybe to
250:08 - plantains that make a lot more sense so
250:09 - something you can do uh and the last one
250:11 - is the override the host name so
250:13 - application Gateway normally leaves the
250:15 - host name alone uh but you know if
250:17 - you're using multi-tenant services like
250:19 - apps uh like app service or API
250:22 - management it needs very specific host
250:24 - header set so this is where you can
250:26 - override them and change them for those
250:28 - services so hopefully that really gives
250:30 - you a good picture of application
250:31 - Gateway but I feel that that's all you
250:32 - really need to
250:36 - know
250:38 - so let's take a closer look here at
250:40 - Azure ro-based access controls because
250:42 - this is something we're definitely going
250:43 - to be using a lot and so Ro based Access
250:45 - Control helps you manage who has access
250:47 - to Azure resources what they can do with
250:50 - those resources and what areas they have
250:52 - have access to and the idea is that you
250:54 - have a user and you want to assign them
250:56 - a role so you're going to use a role
250:57 - assignment and a role assignment is made
250:59 - up of three elements you have the
251:00 - security principle the RO definition and
251:02 - the scope and we're going to look at
251:04 - those three things in a little bit more
251:05 - detail here in a second and there are
251:07 - four fundamental Azure roles which we
251:09 - are going to learn and then Azure rbac
251:13 - also includes over 70 built-in roles
251:15 - which we definitely do not need to go
251:17 - into great detail uh so let's take a
251:19 - look at uh one of those three elements
251:22 - first which is the security principle
251:24 - and this represents the identity
251:26 - requesting access to an Azure resource
251:28 - and when we say identity that's just
251:29 - like a loose term for something and that
251:32 - something could be a user in your Azure
251:34 - active directory a group uh which
251:36 - defines a set of users in your Azure
251:38 - active directory a service principle so
251:40 - a sec security identity used by
251:42 - applications or services to access
251:45 - specified Azure resources or a managed
251:48 - identity an identity in your active uh
251:50 - Azure active directory that is
251:52 - automatically managed by Azure so
251:53 - service principle basically an Azure
251:55 - service and then managed identity is
251:56 - something in your Azure active
251:58 - directory then we'll move on to scope
252:00 - and a scope is just a set of resources
252:03 - that um access that uh assess um the
252:06 - role uh the RO assignment applies to and
252:09 - so scope access controls at the
252:12 - management subcription or Resource Group
252:13 - level so what does that mean and we we
252:16 - have another slide on this I can't
252:17 - remember what section it's in but you
252:19 - have this breakdown of scope where you
252:20 - have management groups subscriptions
252:22 - resource groups or resources so when
252:23 - you're saying I'm setting a scope you're
252:25 - saying what is a scope is it on a
252:26 - management group is it on a particular
252:28 - resource is it a resource Group and
252:30 - that's what we're trying to say there
252:32 - and then last the last element there is
252:34 - a role definition and this is a
252:36 - collection of permission
252:38 - so role definition lists operations that
252:40 - can be performed such as read write and
252:42 - delete and roles can be highle like
252:45 - owner specific or like a virtual machine
252:48 - reader and so Azure has uh built-in
252:52 - roles and we said there were four
252:54 - fundamental built-in roles and here they
252:55 - are it's owner contributor reader and
252:58 - user admin uh administrator so you want
253:01 - to know those four and then across the
253:03 - board you have those three um operations
253:06 - read Grant
253:07 - and then create update delete so you can
253:09 - see the owner can do everything the
253:11 - contributor can uh both read and create
253:13 - stuff they just can't Grant access other
253:15 - people the reader just has readon access
253:18 - and then a user access administrator is
253:20 - granting other users uh privileges but
253:23 - themselves are not creating anything all
253:26 - [Music]
253:29 - right hey this is Andrew Brown from exam
253:31 - Pro and let's look at Azure management
253:33 - groups so Azure management groups is a
253:36 - way of managing multile multiple
253:38 - subscriptions and when you hear the word
253:40 - subscriptions in Azure just think
253:41 - accounts um because that's an easier way
253:43 - to think about it into a hierarchial
253:45 - structure so each directory is given a
253:48 - single top level management group called
253:50 - The Root Management Group all
253:52 - subscriptions within a Management Group
253:53 - automatically uh inherit the conditions
253:55 - applied to the management group and so
253:57 - this is a graphical representation so at
253:59 - the top you have your Root Management
254:01 - Group and then you can create management
254:03 - groups underneath so Human Resources it
254:06 - marketing production
254:07 - developers whatever you want and
254:10 - underneath you have those individual
254:11 - subscriptions again just think of them
254:14 - like an account so that is azure
254:16 - management
254:17 - [Music]
254:21 - groups hey this is Andrew Brown from
254:24 - exam Pro and we're looking at Azure
254:26 - service health so this is about
254:27 - information about current upcoming
254:29 - issues such as service impacting events
254:31 - planned maintenance and other changes
254:33 - that may affect your availability so
254:36 - going down the list we have Azure status
254:38 - which informs you of uh service outages
254:40 - in Azure Azure service Health a is a
254:43 - personalized view of the health of the
254:45 - Azure service and regions you're using
254:48 - and then Azure resource health is
254:49 - information about the health of the
254:51 - individual Cloud resources such as your
254:53 - VM so if you're ever wondering uh the
254:55 - state of your health you can use Azure
254:58 - service health and if you noticed it was
254:59 - an option under Azure monitor so if
255:02 - you're looking for it that's where you
255:03 - go to find
255:06 - it
255:08 - hey this is Andrew Brown from exam Pro
255:10 - and we're looking at Azure advisor so ad
255:12 - Azure advisor is a personalized Cloud
255:14 - consultant that helps you follow best
255:16 - practices to optimize your Azure
255:18 - deployments the a the advisor uh
255:20 - dashboard displays personalized
255:21 - recommendations for all your
255:22 - subscriptions for the following five
255:24 - categories High availability security
255:27 - performance cost and operational
255:29 - excellence and since we are in the
255:30 - security category that's what we mostly
255:32 - care about is security but it would also
255:34 - be important for the uh pricing section
255:37 - there as well so the first one we're
255:38 - going to look at is actually um the
255:40 - Azure advisor recommendation for cost so
255:42 - here you can see that it's telling you
255:44 - uh where the most impact can occur and
255:46 - leav tell you how much money you can
255:48 - save if you follow its
255:50 - recommendations then you have security
255:52 - and so here it has 21 recommendations if
255:55 - we were to click into it it would tell
255:56 - you what kind of things that you could
255:58 - improve in your system uh to improve
256:01 - your security so there you go that's
256:02 - Azure
256:05 - ad
256:08 - hey this is Andrew Brown from exam Pro
256:09 - and we are looking at Azure database
256:11 - Services starting at the top of list is
256:13 - azure Cosmos DB this is a fully managed
256:16 - no scoll database it's designed for
256:18 - scale with guarantee of
256:19 - 99.999% availability uh Azure loves
256:23 - talking about this database it's their
256:24 - Flagship database because it works at
256:26 - incredible scale and an incredible
256:28 - performance so whenever you're thinking
256:30 - about like uh like super large databases
256:33 - think of azure Cosmos DB next on our
256:36 - list is Azure SQL database and even
256:38 - though it doesn't have it in its name
256:40 - this is for the mssql uh engine so if
256:44 - you're running Microsoft SQL uh you're
256:46 - going to want to use this it's fully
256:47 - managed with autoscale integ uh integral
256:50 - intelligence robust security so has a
256:52 - lot of great features built around this
256:54 - for mssql databases now if you're not
256:57 - using mssql and you're using something
256:59 - like MySQL postgress or Marb they have
257:02 - Azure database so it's fully managed and
257:04 - scalable uh with high availability and
257:06 - security
257:07 - then you have SQL server on VMS uh again
257:10 - it doesn't have it in its name but it's
257:12 - Microsoft SQL uh engine okay anytime uh
257:17 - it says SQL servers just assume that
257:18 - it's the Microsoft flavor of SQL um and
257:21 - and the idea for this one is that if you
257:23 - already have SQL servers running on
257:26 - premise uh within your data center and
257:28 - you want to move them onto Azure uh this
257:31 - is where You' use a lift and shift so it
257:32 - takes those virtual machines and
257:34 - directly moves them onto the cloud you
257:36 - don't don't get all the functionality
257:38 - that you would with Azure SQL database
257:40 - but it's the easiest way to get onto the
257:42 - cloud then you have Azure synapsis
257:45 - analytics previously known as Azure SQL
257:48 - data warehouse It's because they added
257:50 - an analytics component to it um but it's
257:53 - a fully managed data warehouse with
257:55 - integ uh integral uh security at every
257:58 - level of scale at no extra cost then you
258:01 - have as your database migration service
258:03 - so migrate your databases to the cloud
258:05 - with no application code changes so
258:07 - there's that service then you have Azure
258:10 - cache for Reddit so if you need an
258:12 - in-memory cache that is using the open
258:15 - source redus you can use that and last
258:18 - on our list is azure table storage we
258:21 - mentioned this in the storage services
258:23 - but to me this is a database it's not a
258:26 - storage service um even though it's
258:28 - named as such so wide column no s
258:31 - database a noq store that hosts
258:32 - unstructured data independent of any
258:35 - schema so there you go that's the
258:37 - Azure database
258:39 - [Music]
258:43 - Services hey this is Andre Brown from
258:45 - exam Pro and we are looking at
258:46 - application integration services on
258:48 - Azure now I didn't have room on the
258:50 - slide for this but just to tell you what
258:51 - application integration is these are
258:54 - services that are designed to help apps
258:57 - or Services talk to each other so it's
258:59 - basically the glue of services the First
259:02 - on our list here is azure notifications
259:04 - Hub this is using publisher subscription
259:07 - technology underneath and this is for
259:08 - sending push notifications to any
259:10 - platform from any back end next we have
259:13 - Azure API apps so this is essentially an
259:16 - API Gateway so you can quickly build and
259:18 - consume apis in the cloud and then th
259:21 - those apis will have API endpoints and
259:23 - you can route them to Azure services or
259:25 - maybe functions or containers uh but
259:27 - it's a way of building an API in the
259:29 - cloud then you have Azure service bus
259:32 - and as the name implies it is a service
259:34 - bus uh so reliable Cloud messaging as a
259:37 - service Maas and simple hybrid
259:39 - integration I know that's not very clear
259:41 - uh that is the language that Microsoft
259:43 - uses to describe it but just what you
259:45 - need to know is that it is a service bus
259:48 - then you have Azure stream analytics so
259:50 - this is serverless realtime analytics
259:53 - remember that world word real time and
259:55 - think of this service uh from the cloud
259:58 - to the edge then you have Azure logic
260:01 - apps so you can schedule automate
260:03 - orchestrate tasks business processes and
260:05 - workflows and it integrates with
260:07 - enterprise sassin Enterprise
260:10 - applications then you have Azure API
260:12 - management this can be confusing because
260:15 - we have another service called Azure API
260:17 - apps I don't know what we would
260:19 - generally call this service uh they say
260:21 - it's a hybrid multicloud management
260:23 - platform for apis across all
260:25 - environments whatever that means but the
260:28 - when I looked at it what it does is you
260:30 - can put this in front of an existing API
260:32 - to add additional functionality so if
260:34 - you have an API you put it in front of
260:36 - it and it and it's a basically proxy to
260:38 - your API and you get all this additional
260:40 - stuff then last on our list is azure Q
260:44 - storage we saw this in our storage
260:46 - service sections and I had said that I
260:48 - don't really consider this a storage
260:49 - service I consider it an application
260:51 - integration Service uh and this is a
260:53 - messaging queue so it's a data store for
260:55 - queuing and reliably delivering messages
260:57 - between applications so there you go
260:59 - that is the application integration
261:01 - services on
261:05 - azure
261:07 - hey this is Andrew Brown from exam Pro
261:09 - and we are looking at developer and
261:11 - mobile tools uh that are commonly used
261:13 - with Azure the first on the list is
261:15 - azure signal R service and this is a
261:18 - real-time messaging service not to be
261:20 - confused uh with Azure notification
261:23 - service this is for easily adding
261:26 - real-time web functionality to
261:27 - Applications so if you ever heard of
261:29 - Pusher it's just like Pusher so um that
261:31 - is the equivalent there the next we have
261:34 - is azure app service so easy to use
261:36 - service for deploying and scaling web
261:38 - applications with net nodejs Java Python
261:42 - and PHP I'm a bit sad I don't see Ruby
261:44 - in there but what are you going to do um
261:47 - so it's for developers who want to focus
261:49 - on building their web apps and not worry
261:51 - about the underlying infrastructure so
261:54 - if you've ever used Heroku think of it
261:56 - like that but for Azure next you have a
261:59 - a visual studio um and visual studio is
262:04 - a code editor it's it it's basically an
262:06 - IDE an integrated development
262:08 - development environment designed for
262:10 - creating powerful scalable applications
262:12 - for Azure you might have heard of Visual
262:14 - Studio code um which is similar but
262:17 - different um but I just wanted to make
262:19 - mention of Visual Studio here then you
262:22 - have uh zamarin I think I'm pronouncing
262:25 - it right and it's a mobile app framework
262:28 - um it's for creating powerful and
262:29 - scalable native mobile apps andet and
262:32 - Azure um and yeah so that is the
262:34 - developer in Mobile tools for
262:37 - [Music]
262:41 - Azure hey this is Andrew Brown from exam
262:43 - Pro and we are looking at Azure devops
262:45 - services so Azure devops is really just
262:47 - an umbrella service for a bunch of
262:50 - modern Dev services and we'll jump into
262:53 - them right away first being Azure boards
262:56 - if you've ever used a can band board
262:58 - that is what Azure boards is and if You'
263:00 - ever use GitHub projects it literally is
263:02 - that because Azure uh and GitHub are
263:05 - owned by the same company Microsoft and
263:07 - so they brought over that technology to
263:09 - Azure so deliver value to your users
263:11 - faster using proven agile tools to plan
263:13 - track and discuss work across your teams
263:17 - then you have Azure pipeline so build
263:18 - test and deploy cicd that works with any
263:21 - language platform and Cloud connect to
263:23 - GitHub or any other git provider and
263:25 - deploy continuously so if you need
263:27 - automatic deployments that's what Azure
263:29 - pipelines is for then you have Azure
263:31 - repos and this is exactly like GitHub
263:34 - repos so get unlimited co uh Cloud
263:37 - hosted private G repos and collaborate
263:40 - to build better code with pull request
263:42 - and advanced file management I really
263:44 - mean it's just like GitHub repos because
263:46 - it's just that technology moved over to
263:47 - Azure then you have Azure test plans so
263:50 - test and ship with confidence using
263:51 - manual and exploratory testing tools so
263:55 - this is just a way of setting up test so
263:57 - if you ever use like um what's it called
263:59 - Cypress or any other like uh or any
264:01 - other testing tools it's just built into
264:03 - Azure it'll open up a browser and it'll
264:05 - literally test your app and make sure it
264:07 - works as expected then you have Azure
264:09 - artifact so create host and share
264:11 - packages with your team so this is just
264:12 - package management but specifically for
264:15 - cicd pipelines so cicd pipelines they
264:18 - have to set up these servers and you
264:20 - have to have pre-installed packages
264:22 - that's just going to make it a lot
264:23 - easier for you last is azure Dev test
264:26 - Labs so this is just an easy way to
264:27 - create Dev test environments for your
264:30 - developers and that is the Azure devops
264:35 - services
264:36 - [Music]
264:38 - hey this is Andrew Brown from exam Pro
264:39 - and we are looking at the cloud native
264:41 - networking Services now these networking
264:43 - Services aren't super uh super important
264:45 - for the exam I like to go through them
264:47 - generally I would make an architectural
264:49 - diagram for this but it's just a bit too
264:51 - complicated so I thought we'll just go
264:53 - through and list them so first is azure
264:55 - DNS and we do describe this service uh
264:57 - later in uh the course here but this
265:00 - provides an ultra fast DNS responses and
265:02 - ultra high domain availability so if you
265:04 - have a domain name and you just want it
265:06 - to be managed by um Azure you can
265:10 - associate it with Azure DNS then you
265:12 - have Azure virtual network uh we talked
265:14 - about this prior but we'll talk about it
265:16 - again um short for v-net a logical
265:18 - isolated section of your Azure Network
265:20 - for customers to launch Azure resources
265:22 - within then you have Azure load balancer
265:25 - and as the name implies it is a load
265:27 - balancer but this one is at level four
265:29 - transport um so it doesn't really
265:32 - understand requests like what a web
265:34 - application would send it's more lower
265:35 - level
265:36 - um and so that's what that is then you
265:39 - have Azure application Gateway and this
265:41 - is an HTTP load bouncer so it does
265:44 - understand um like requests coming from
265:47 - a web server and what you can do with it
265:49 - is you can actually route um based on HP
265:52 - request to specific services but it also
265:55 - you can apply a web application firewall
265:57 - because it is an application load balcer
265:59 - that's why you can apply that web
266:01 - application firewall which is a separate
266:02 - service then you have network security
266:05 - groups so uh this is a way of protecting
266:08 - your subnets so it's a virtual firewall
266:10 - around your subnets where you can say
266:12 - allow these um allow these ports to be
266:15 - open um and and from who and and and
266:19 - such so there you go that's the cloud
266:21 - native networking services and the
266:23 - reason why they're Cloud native
266:24 - networking is because you wouldn't use
266:26 - these with Enterprise or on uh or uh or
266:29 - in Hybrid models is just what you
266:30 - normally use and most startups would be
266:32 - using all these Cloud uh these
266:33 - networking
266:35 - services
266:38 - [Music]
266:39 - so next we have Enterprise or hybrid
266:42 - networking services so this is when
266:44 - you're using a networking that is going
266:46 - to bridge on Prem to the cloud so the
266:51 - first is azure front door so this is a
266:52 - scalable and secure entry point for fast
266:54 - delivery of your Global applications so
266:58 - just making sure you have a secure entry
266:59 - point into Azure from outside then you
267:02 - have Azure express route you want to
267:05 - remember this one definitely for the
267:06 - exam it probably will show up as a
267:08 - question this is a connection between
267:10 - your on premise to Azure cloud and it
267:12 - can be between 50 megabytes per second
267:14 - to 10 gigabytes per second I'm pretty
267:16 - sure it's also secure um but the point
267:19 - is that if you need a super super fast
267:21 - connection uh from your on-prem uh data
267:23 - center to Azure you'd use this service
267:26 - express route remember it it's going to
267:28 - be on your exam then you have virtual
267:30 - Wan so a network service that brings
267:33 - many networking security routing uh
267:35 - functionality together to provide a
267:37 - single operations operational interface
267:40 - I know that sounds complicated but a w
267:42 - is just a way of making networking
267:44 - Easier by creating like a hub spoke
267:46 - model uh then you have Azure connection
267:48 - so a VPN connection securely connects to
267:51 - Azure local networks via IPC so that's
267:55 - just a way of uh creating a secure
267:57 - connection uh with Azure then you have
267:59 - virtual Network Gateway a site tosite
268:01 - VPN connection between Azure virtual
268:04 - Network and your local network so this
268:05 - just way of connecting with azzure um so
268:09 - there you go that is um the networking
268:13 - [Music]
268:16 - Services hey this is Andrew Brown from
268:19 - exam Pro and we are looking at Azure
268:21 - traffic manager so this service operates
268:23 - at the DNS layer to quickly and
268:25 - efficiently direct incoming DNS requests
268:27 - based on the routing method of your
268:29 - choice so what you do is you'd um choose
268:33 - a routing method so we got performance
268:34 - weighted priority geog Geographic
268:36 - multivalue subnet um and You' be able to
268:40 - reroute your traffic so you could Route
268:41 - traffic to servers geographically uh
268:43 - nearby to reduce latency fail over to uh
268:46 - redundant systems in case primary
268:48 - systems become unhealthy or route to
268:50 - random uh virtual machines to simulate
268:53 - AB testings I think like the best use
268:56 - Cas is failovers um for DN at the DNS
268:58 - level I think that's a great one uh and
269:00 - just a visual example here imagine we
269:02 - had exampro doco and we had a production
269:06 - and a beta server and we only wanted 20%
269:08 - of our users to see the beta server so
269:11 - we could use um I guess we' use weighted
269:14 - there and we'd say 80% on prod 20% there
269:17 - and that's how that would work so there
269:18 - you go that's Azure traffic
269:21 - [Music]
269:24 - manager hey this is Andrew Brown from
269:26 - exam Pro and we are looking at iot
269:28 - services on Azure and so before we get
269:31 - into it what is iot so iot stands for
269:34 - internet of things so a network of
269:37 - Internet connected objects usually
269:39 - Hardware able to connect and exchange
269:41 - data so here is a graphical
269:43 - representation of iot devices maybe you
269:46 - recognize some but let's just go through
269:47 - a quick list of things that could be iot
269:49 - devices so you have Smart bulbs so maybe
269:51 - there's light bulbs in your house that
269:52 - are controlled by the internet smart
269:55 - fridges who doesn't want one of those
269:57 - smart light switches narrow band or
270:00 - wideband Hardware this is just a way of
270:02 - connecting to the internet it's just
270:03 - like uh it's kind of like Wi-Fi um then
270:06 - you have security cameras then you have
270:08 - voice command speakers so think of like
270:10 - Alexa then you might have temperature
270:13 - pressure or imunity sensors if you're in
270:14 - the farming industry you can you you can
270:16 - Le leverage iot devices for that maybe
270:19 - uh you have drones uh maybe you have
270:22 - phones that could be an IT device and
270:24 - even buttons so uh AWS had these things
270:27 - called AWS or Dash buttons uh they
270:30 - weren't popular but the idea was you
270:32 - could like press a button and like
270:33 - purchase something um so like if you
270:35 - always had to get like soap for your
270:38 - washer you can have that button right on
270:39 - your washer um but let's actually talk
270:41 - about the iot services here um so the
270:44 - first one here is iot Central so this
270:46 - allows you to connect your iot devices
270:47 - to the cloud then you have iot Hub so
270:50 - this is this enables highly secure and
270:52 - reliable Communications between your iot
270:54 - applications and devices it manages uh
270:57 - then you have iot Edge this is a fully
270:59 - managed service built on the Azure iot
271:01 - Hub it allows you allows data processing
271:04 - an analyst near the iot devices so this
271:07 - is really Edge Computing I really should
271:08 - have highlighted that for you but this
271:10 - is where you are able to offload your
271:12 - compute from the cloud to local
271:13 - Computing Hardware such as iot devices
271:15 - phones or home computers so it's just a
271:18 - way of saving money or utilizing your
271:20 - local network for compute then you have
271:23 - uh Windows 10 iot core services so this
271:25 - is a cloud services subscription that
271:27 - provides the essential Services need to
271:29 - commercialize a device on Windows iot or
271:32 - 10 iot core so basically it's long-term
271:34 - OS support and services to manage device
271:36 - updates and uh assess device health all
271:40 - right so there you go that's your iot
271:42 - [Music]
271:45 - services hey this is Andrew Brown from
271:47 - exam Pro and we are looking at Big Data
271:49 - and analytics services on Azure so
271:51 - before we jump into it let's talk about
271:53 - what is Big Data so it is a term used to
271:55 - describe massive volumes of structured
271:57 - and unstructured data that is so large
272:00 - it is difficult to move and process
272:02 - using traditional database and software
272:04 - techniques so we need spe
272:06 - Services just to handle them the First
272:07 - on our list here is azure synapsis
272:10 - analytics formerly known as SQL data
272:12 - warehouse so it is Enterprise data
272:15 - warehousing and big data analytics so
272:17 - it's intended to run SQL queries against
272:20 - large databases to generate things such
272:22 - as
272:23 - reporting um then you have HD Insight HD
272:26 - is short for Hadoop um but anyway it
272:29 - runs open source analytics software such
272:31 - as Hadoop kofka and sparkk I imagine it
272:33 - was called HD Insight because it only
272:35 - supported Hadoop and then they added
272:37 - additional services but that's just what
272:39 - it's called then you have Azure data
272:41 - bricks so uh we have an Apache spark
272:44 - based analytics platform optimized for
272:46 - Microsoft aure cloud service platforms
272:49 - so thirdparty data bricks cloud services
272:51 - support with Azure so data bricks was
272:54 - made by the uh creators of spark and yes
272:57 - of course you can run sparc on hdnight
273:00 - but uh data bricks is its own cloud
273:03 - service provider and as you're partnered
273:04 - up with them so that you can use it
273:06 - within uh the Azure platform then you
273:10 - have data Lake analytics so an OnDemand
273:12 - analytics job service that simplifies
273:14 - big data uh and we saw what data Lakes
273:17 - were when we looked at storage services
273:19 - but we'll describe them here just in a
273:20 - diff a little bit different way a data
273:22 - lake is a storage repository that holds
273:24 - a vast amount of raw data in its native
273:26 - format until it is needed so there you
273:28 - go that is the big data and analytic
273:30 - Services we need to
273:34 - know
273:36 - hey this is angrew Brown from exam Pro
273:38 - and we are looking at artificial
273:39 - intelligence and machine learning
273:41 - services on Azure so a great way of
273:44 - describing that is to always have this
273:46 - graphic here where we have this kind of
273:47 - like onion thing where each is dependent
273:49 - on the other and we'll start with
273:50 - artificial intelligence so what is
273:52 - artificial intelligence or AI this is
273:54 - where machines that perform jobs that
273:57 - mimic human behavior now that doesn't
273:59 - mean that uh the the technology behind
274:01 - it has to be complex it could be FL
274:03 - statements but it could be utilizing
274:05 - machine learning it could be utilizing
274:06 - deep learning but the point is that it
274:09 - mimics human behavior then you have
274:12 - machine learning and this is where
274:13 - machines that get better at a task
274:15 - without explicit
274:17 - programming um so they are smart enough
274:20 - to learn on their own then you have deep
274:23 - learning and so deep learning is where
274:24 - machines that have an artificial neural
274:26 - network inspired by the human brain to
274:28 - solve complex problems so literally it's
274:30 - like the power of the human brain uh
274:33 - maybe not as not as great as is the
274:35 - human brain but quite quite close there
274:38 - and AI could be leveraging ML and uh
274:41 - deep learning and so that's why it is
274:44 - like that so when we want to do uh
274:46 - machine learning on Azure they have a
274:48 - service called Azure machine learning
274:49 - service so this is a service that uh uh
274:52 - that simplifies running AI uh ml related
274:55 - workloads allowing you to build flexible
274:57 - pipelines to automate workflows so you
274:59 - can use Python and R you can run your uh
275:03 - deep learning workloads using
275:04 - Technologies such as tensor flow um and
275:07 - so that's what you'd use now there was a
275:09 - service called Azure machine Learning
275:11 - Studio I think it's still around if you
275:13 - uh if you're still using it and that's
275:14 - the classic version of the service and
275:16 - it does basically what Azure machine
275:18 - learning service does but there's some
275:20 - limitation so does not have uh like a
275:23 - pipeline and other functionalities and
275:26 - if you're wondering if you could easily
275:27 - migrate from classic to the other one um
275:29 - it's not easy to migrate um so basically
275:32 - you definitely always want to start with
275:34 - Azure machine learning services there's
275:35 - no reason you'd want to use Azure
275:36 - machine Learning Studio unless you're
275:38 - using it for legacy
275:41 - [Music]
275:45 - reasons hey this is Andrew Brown from
275:47 - exam Pro and we're still looking at Ai
275:49 - and ml Services specifically just AI
275:52 - Services because Azure has a lot of them
275:55 - and I'm just going to quickly go through
275:56 - them and they're pretty
275:57 - self-explanatory so first one is
275:59 - personalizer it delivers Rich
276:01 - personalized experiences for every user
276:03 - using AI then you have translator it
276:05 - adds real-time multilanguage text
276:07 - translation to your apps websites and
276:09 - tools you have anomaly detector detects
276:12 - anomalies and data to quickly identify
276:13 - and troubleshoot issues Azure bot
276:16 - service intelligent serverless bot
276:18 - service that scales on demand form recog
276:21 - uh uh recognizer automate the extraction
276:24 - of text key value Pairs and tables from
276:26 - your documents you have computer vision
276:28 - easily customized computer vision models
276:31 - for Unique use cases language
276:34 - understanding so build build a natural
276:36 - language understanding into Apps Bots
276:38 - and iot devices we have Q&A maker so
276:42 - create a conversational question and
276:44 - answer bot from your existing content
276:46 - text analytics extract information such
276:49 - as sentiment key phrases named entities
276:52 - and languages from your text content
276:55 - moderator so moderate text and images to
276:57 - provide a safer more positive user
277:00 - experience face so detect and identify
277:02 - people and emotions in images Inc uh uh
277:07 - uh recognizer recognize digital ink
277:10 - content and such as handwriting shapes
277:12 - and document layouts so there you go
277:14 - they have a lot of services and they
277:16 - haven't even made time to make all icons
277:18 - for them that's how many they
277:20 - [Music]
277:23 - have hey this is Andrew Brown from exam
277:26 - Pro and we are looking at servess
277:28 - services on Azure so what is serverless
277:31 - this is one the underlying server
277:32 - servers infrastructure and Os is taking
277:34 - care care of by the cloud service
277:36 - provider it will generally be highly
277:38 - available scalable and coste effective
277:40 - so serverless is event driven at scale
277:44 - so uh a seress function can be triggered
277:46 - or trigger other events allowing you to
277:48 - compose complex application and just
277:50 - scale so with serverless technology it's
277:52 - like playing with Lego blocks um then
277:55 - you have abstraction of servers so
277:56 - servers are abstracted away your code is
277:58 - described as functions these functions
278:00 - can be running on different compute
278:01 - instances so if some people like to use
278:04 - python or some people like to use
278:05 - JavaScript you can mix and match um uh
278:08 - there then you have Micro billing so
278:11 - when you have traditional servers you
278:12 - probably build by at least a second some
278:16 - build by the hour but the thing is if
278:18 - you're not using the server for the
278:19 - whole second or hour you are paying for
278:22 - a compute that you are not using so
278:24 - serverless functions will bill you in
278:26 - the microsc so you're saving money
278:28 - because you're not paying for unused
278:31 - computation uh now we'll just quickly
278:33 - walk through uh some of the Serv
278:35 - Services I'm sure there's more than this
278:37 - but this is what I think are worth
278:38 - highlighting so the first is azure
278:40 - functions so run small amounts of code
278:41 - known as seress functions in your
278:43 - favorite languages so you got C Java
278:45 - JavaScript Python and Powershell and if
278:48 - Azure is listening please can you
278:49 - support Ruby because I love using Ruby
278:53 - then you have blob storage so this is
278:54 - seress object storage just upload your
278:56 - files don't think about the underlying
278:58 - file systems resizing uh basically
279:00 - unlimited space and and you can upload
279:02 - pretty darn large files then you have
279:05 - logic apps allows you to build seress
279:07 - workflows composed of azure functions
279:09 - building a I would say this is you
279:11 - building a state machine for seress
279:12 - compute then you have event Bridge which
279:14 - seems a bit similar but it's not it uses
279:16 - Pub sub messaging systems to allow you
279:18 - to react to events and Trigger other
279:20 - Azure cloud services such as Azure
279:22 - functions so there you go that is
279:25 - serverless
279:27 - [Music]
279:30 - Services hey this is Andrew Brown from
279:32 - exam Pro and I'm going to show you how
279:34 - to create resource groups and the reason
279:36 - why we're going to make one is because
279:38 - without one we're not going to be able
279:39 - to launch pretty much any resource until
279:41 - we do so because you always have to
279:43 - choose a resource Group when launching
279:45 - uh Azure resources so even though it
279:48 - shows up here on our dashboard um if it
279:51 - doesn't I want you to go up here at the
279:52 - top and type in Resource Group and we'll
279:55 - go ahead and click Resource Group here
279:58 - and then all the way on the left hand
279:59 - side I want you to click on
280:01 - ADD and uh we're just going to have to
280:04 - use our R trial which is the our type of
280:06 - subscription I'm just going to type in
280:08 - exam Pro as the resource Group we're
280:09 - going to stay in Us East uh because that
280:12 - is where the most uh most of the
280:15 - services are available in Azure and
280:17 - that's what I'm going to be using
280:18 - throughout um this course is always
280:20 - using Us East so we'll go down here and
280:23 - hit create plus uh review plus create
280:25 - because there's really nothing else to
280:27 - check and once validation passed this
280:30 - might happen instantaneously for you you
280:31 - might have to wait a few seconds go
280:33 - ahead and hit create
280:36 - and so um now we have created our
280:39 - Resource Group and there is no cost
280:41 - resource groups so there's no worry
280:43 - about uh having this or whether you uh
280:46 - keep it around don't delete it uh you're
280:48 - going to notice that the group hasn't
280:49 - showed up just yet you're going to have
280:50 - to hit refresh and sometimes Azure is a
280:53 - bit slow about uh showing resources when
280:55 - you create them initially and when you
280:57 - delete them so I'm just going to wait a
280:59 - little bit here and I'm just going to
281:00 - keep on refreshing and I'll see you back
281:02 - in a few minutes all right so waited a
281:05 - couple minutes and if you just go ahead
281:06 - up here and hit refresh now we can see
281:09 - that we have our Resource Group so
281:10 - that's all there really is to it nothing
281:12 - super exciting there I'm just going to
281:13 - click Microsoft Azure at the top here to
281:15 - get back to my dashboard and I'll see
281:17 - you in the next follow
281:19 - [Music]
281:22 - along okay great so now that we've uh
281:25 - done that let's actually go learn how to
281:27 - do a different kind of compute which is
281:29 - serverless functions so uh if we want to
281:32 - launch our own serverless function uh by
281:34 - the the way if you're not at the screen
281:35 - just click on Microsoft Azure here at
281:37 - the top and we're going to go to our
281:38 - search and we're going to type in
281:42 - functions and so on the left hand side I
281:45 - want you to click on
281:47 - ADD and then uh what we're doing is we
281:49 - need to create a function app so we're
281:51 - going to be on our free trial we're
281:52 - going to choose our Resource Group we
281:54 - created earlier we're going to name this
281:55 - I'm going to just call this um this is
281:57 - the function app name so I'm going just
281:59 - say my my
282:01 - app uh my app is not available these all
282:05 - unique names I'm just call it exam Pro
282:06 - app you might have to change this a few
282:08 - times before you get what you want um
282:11 - and then for publish we're going to use
282:13 - code we don't want to use a Docker
282:14 - container that's too much work and we're
282:16 - going to just choose nodejs which is
282:18 - just JavaScript version 12 sounds great
282:20 - to me we're going to change this to make
282:21 - it sure that it's Us East to make our
282:24 - lives a little bit easier there's
282:25 - nothing wrong with Central it's just I
282:26 - want everything to be consistent so
282:28 - everything is very predictable in these
282:30 - um uh in these follow alongs here we'll
282:33 - go all the way to the top and look at
282:34 - hosting just quickly here we're going to
282:36 - see that we have a storage account okay
282:38 - nothing exciting here it's going to
282:40 - either be Linux or Windows this doesn't
282:42 - really matter to us we can let it be
282:44 - Windows we're going to go back to basic
282:45 - I'm going to go ahead and hit review
282:47 - plus
282:48 - create so we're going to wait for this
282:50 - validation to uh step to complete here
282:52 - so again it could take a second or it
282:54 - could take a minute just depends on the
282:57 - day with Azure so we'll just wait here a
282:59 - little
283:00 - bit there we go it's just finished
283:02 - validating I'm going to go ahead and hit
283:04 - create
283:05 - and now we're waiting for that initial
283:07 - deployment so we're going to see that
283:08 - deployment is on its way and then we're
283:10 - going to have to wait for deployment to
283:11 - be
283:15 - complete so it's in progress It's
283:17 - underway this shouldn't take too long it
283:19 - should say that it's complete here in a
283:22 - moment great so after waiting a few
283:24 - minutes here our deployment is complete
283:25 - we'll go ahead and hit go to resources
283:28 - so now what we need to do is we need to
283:30 - go create ourselves a function so on the
283:32 - left hand side make your way to function
283:36 - and then in here we're going to add
283:37 - ourselves a new
283:39 - function and so we have a lot of presets
283:42 - here for us it's not going to matter
283:43 - what we choose well it does um and I'm
283:45 - going to say let's choose HTTP
283:47 - trigger we're going to leave it with a
283:49 - default name that's fine uh we'll have
283:51 - it uh stay as function for authorization
283:54 - level we'll go ahead and create that
284:00 - function so once that function is has
284:02 - been created here and it's already done
284:05 - let's start adding our code because
284:07 - again the whole point of server list is
284:08 - that you don't have to worry about
284:09 - servers you just add your code and it
284:12 - works and so here's some code it already
284:13 - has for us what I'm going to do is I'm
284:15 - just going to add myself a console log
284:18 - uh console log is just like saying hello
284:20 - world so we're going to say hello
284:22 - world and then I'm going to hit
284:26 - save and now it's just connecting to
284:28 - application insights I don't know if
284:30 - it's actually running yeah it's
284:31 - connected great and now let's go ahead
284:32 - and hit test and so we have a bunch of
284:35 - options here I'm not going to fill in
284:36 - anything I'm just going to hit run and
284:39 - we're going to see what the output
284:40 - is okay great so you know I'm just
284:42 - looking at how this actually works and
284:44 - um I think what we need to do is we need
284:46 - to actually pass a name into the uh to
284:49 - the query string here so what we'll do
284:50 - is we're just going to go ahead and type
284:51 - in query here and we'll put a name and
284:54 - we'll say
284:58 - Andrew
285:00 - um and so that should do it so let's
285:02 - just hit
285:03 - run
285:06 - okay great and so it's saying uh hello
285:08 - Andrew so there you go that's all you
285:09 - have to do to uh create a serverless
285:12 - function um and it doesn't cost us
285:15 - anything to keep this around so we don't
285:16 - necessarily have to delete it uh if you
285:18 - did want to go delete it I guess we can
285:20 - go back here uh we'd have to go back to
285:22 - functions
285:25 - here and I would just click
285:30 - delete and we'll type in yes and we'll
285:33 - hit delete
285:38 - and there you go so that's that's all
285:40 - there is there uh there to it for uh
285:42 - serverless compute I can go back to
285:43 - Microsoft Azure here back to the
285:45 - dashboard and we'll see you in the next
285:46 - fall
285:47 - [Music]
285:51 - along hey this is Andrew Brown from exam
285:53 - Pro and we are looking at slas for Azure
285:56 - so SLA stands for service level
285:58 - agreement and this describes azure's
286:00 - commitment for uptime and connectivity
286:03 - that uh that means like if you have a
286:05 - web server Azure is going to say yeah we
286:08 - we guarantee 99.9% of the time it's
286:10 - going to remain uh running throughout
286:13 - the year it's not going to go down so
286:14 - that's kind of the idea behind an SLA um
286:16 - for Azure slas are indiv individualized
286:19 - per Azure service so they don't have
286:21 - broad uh slas you're going to have to
286:23 - investigate each service to figure out
286:25 - um what uh the commitment of azure is
286:28 - for that service um and the way we
286:30 - describe um uh these slas in terms of up
286:34 - time and connectivity is through
286:35 - performance targets now a performance
286:37 - Target is just a representation in the
286:39 - form of a percentage so if somebody were
286:42 - to say to you um you know this service H
286:45 - uh is 99% likely of not failing that's
286:48 - called two NES and then you have the
286:51 - three nines and then you have five NES
286:53 - and then you have nine NES and and the
286:55 - higher this number goes up the more uh
286:58 - reliable uh the the uh better coverage
287:01 - this SLA is going to give you so you
287:03 - want something that has a higher number
287:05 - of nines and it's not always just nines
287:07 - it could be
287:09 - 99.95% um but just understand that when
287:12 - someone says 9 N they're talking about
287:13 - that last value there and it is like one
287:15 - of the highest um one of the highest
287:18 - guarantees that SLA can give I can't
287:20 - remember if there's like 119 there might
287:21 - be 11 9 uh but generally 9 N is the
287:24 - upper limit uh and just to uh uh mention
287:28 - is that for Azure if you are using the
287:30 - free tier or shared tiers you do not get
287:33 - SLA because they just do not provide
287:35 - support for those because you're
287:37 - consuming everything for free so you
287:39 - have to be paying to get the advantage
287:40 - of that SLA garantee so I did say that
287:44 - the slas are uh service specific um and
287:47 - so if you want to actually go
287:48 - investigate all you got to do is type in
287:50 - Azure SLA into Google and you should be
287:52 - able to make your way to this page and
287:54 - what we can do is we can click into uh
287:56 - any of these here so if I go to database
287:57 - and we choose uh Cosmos DB and we just
288:00 - expand our information here we get tons
288:03 - of information about their slas and then
288:06 - our performance targets are down here so
288:08 - we have this for availability this is
288:10 - for read availability um so they have a
288:12 - lot of information uh and as I said it's
288:15 - for basically any service anything you
288:17 - want just click into it and they have
288:18 - all that SLA information so there you
288:21 - [Music]
288:24 - go hey this is Andrew Brown from exam
288:27 - Pro and we are looking at service
288:28 - credits for Azure so a service credit is
288:31 - when a custom customer would get a
288:34 - discount on their Azure bill as comp as
288:37 - compensation for an underperforming
288:38 - Azure product or service based on the
288:40 - SLA so those guarantees that Azure gives
288:43 - if they don't meet those guarantees then
288:46 - they owe you money uh and the way they
288:49 - do it is through credits right so
288:50 - credits is just like virtual money uh I
288:53 - actually don't know what a uh like what
288:55 - a service credit is worth but I just
288:57 - know that you know if they if they do
288:59 - not meet those slas they're going to
289:01 - back it and give you your money back in
289:03 - some sense
289:04 - uh so um just an example here if we have
289:07 - Azure virtual machine remember a virtual
289:08 - machine is a server uh if you had uh
289:11 - monthly uptime percentage of 99.9 so if
289:15 - it was under that then you'd get a
289:17 - service credit of 10% if it was under 99
289:20 - then you get a service credit of
289:22 - 25% and if it was under 95 you get a
289:25 - service credit of
289:27 - 100% so um I guess what that means is
289:31 - maybe it's the cost of what you spend
289:33 - spent uh but anyway I'm not exactly sure
289:36 - um but I would take a guess that if if
289:38 - let's say the up time was under 95% and
289:41 - they're going to give you a service
289:42 - credit of 100% maybe it's 100% of your
289:44 - resources given back to you so if you
289:45 - spend $100 you get that $100 back so
289:48 - there you
289:49 - [Music]
289:52 - go hey this is Andrew Brown from exam
289:55 - Pro and we are looking at composite SLA
289:57 - so we had said earlier that um different
289:59 - Services have different
290:01 - slas uh and the problem with that is
290:04 - that when you have different servers
290:05 - different slas it's kind of hard to
290:06 - understand what the actual guarantee is
290:08 - when you use them uh in combination so
290:11 - composite slas is just a way of
290:13 - understanding what the actual uh SLA
290:16 - guarantee underneath is for the
290:18 - performance Target so imagine you have a
290:20 - web application and that web application
290:22 - uses an SQL database so the web app has
290:25 - a guarantee of
290:26 - 99.95% because maybe that's the um the
290:29 - performance Target for the virtual
290:31 - machine and then the SQL database is 99.
290:34 - 99% so what is it is it 95 99.95% or is
290:38 - it 49 we don't know so if we had to
290:42 - calculate that calculate that for the
290:44 - SLA with the web app and SQL database
290:46 - that would uh come out to
290:48 - 99.94% don't ask me on the math that is
290:51 - the example that we are given but just
290:53 - understand that that's what it would
290:54 - come out to be it would come out to
290:56 - 99.94% and so you'd have an overall
291:00 - reduction of the SLA whereas the SQL
291:03 - database would have 9 99.9% so how could
291:05 - we improve our SLA and consider that in
291:08 - our design so we get the uh the SLA that
291:10 - we want and so what you can do is you
291:12 - can add in fallback systems that will
291:15 - improve the overall SLA and if you
291:17 - logically think about it it makes sense
291:19 - why that would work so imagine you have
291:21 - that SQL database and it goes down but
291:23 - if you had a que uh and that Q was
291:26 - saving all the transaction attempts that
291:27 - the web app was trying to write to the
291:29 - database and saved in the queue it
291:31 - wouldn't matter if the database went
291:32 - down because once the database went back
291:34 - up all those transactions would be there
291:36 - and then those transactions would then
291:38 - complete and so by using the Q which has
291:41 - a
291:42 - 99.9% up time uh based on the math down
291:45 - below again don't ask me how the math
291:46 - works but the the the outcome would be
291:49 - an SLA of 99.95% and so that's uh an
291:52 - improvement over 99.94%
291:55 - so that is comp composite slas and there
291:58 - you
291:59 - [Music]
292:02 - go hey this is Andrew Brown from exam
292:05 - Pro and we are looking at the TCO
292:07 - calculator for Azure so if you remember
292:10 - uh earlier in the course we talked about
292:12 - the total cost of ownership that's what
292:13 - TCO stands for it's about uh uh showing
292:16 - an enterpr Enterprise that that operates
292:19 - on premise how much money they would
292:20 - save if they moved onto Cloud onto Azure
292:24 - so that's what the TCO calculator does
292:25 - it estimates the cost savings you can
292:27 - realize by migrating your workloads to
292:30 - Azure so what it can do is it can gener
292:32 - generate out a detailed report and
292:34 - Export as a PDF to send to your decision
292:36 - makers now you have to input all the
292:38 - information in but it's going to help
292:40 - you convince your boss uh convince the
292:43 - executive level uh that it's time to
292:45 - move over to the cloud because they'll
292:46 - be saving tons and tons of money and so
292:48 - if you want to use that calculator you
292:50 - just got to go to
292:51 - azure.com
292:53 - pricing calulator and it's going to give
292:55 - you an idea of how much you'll save and
292:58 - now this is only a little bit of what it
293:00 - generates out because it's a it's a very
293:02 - detailed report but in this example it
293:05 - would compare on premise uh to the cost
293:08 - Savings of azure and in this case this
293:10 - person would be saving
293:12 - $130,000 over 5 years and it's going to
293:15 - vary on uh use case but uh yeah that is
293:17 - the TCO calculator so I just wanted to
293:19 - quickly show you the TCO calculator in
293:22 - action if you want to find it yourself
293:23 - just type in um Azure TCO calculator
293:26 - into Google and you should be able to
293:28 - find your way here uh so what I've done
293:30 - here is I've defined my workload so in
293:32 - my workload I've defined some servers so
293:33 - we have some Linux servers we have 10 of
293:35 - them four processes four cores 8 GB of
293:38 - RAM and then here I've added uh four
293:41 - servers that are databases running
293:42 - postest then I added uh some HDD drives
293:46 - so I said three terabytes two terabytes
293:48 - backup Etc and then I defined some
293:50 - Network bandwidth so Going On To The
293:52 - Next Step we're going to adjust our
293:53 - assumptions this helps us to um make it
293:56 - even more accurate the estimat so we can
293:57 - choose our our currency some other
294:00 - additional features we might want to
294:02 - consider where we might save money like
294:04 - using Azure hybrid benefit uh and then
294:07 - down below we can tweak some of our
294:09 - costs that we do know about for our on
294:11 - Prem uh so there's a lot here to tweak
294:13 - it to make it more accurate and then if
294:15 - we go to next we're going to get our um
294:18 - our savings here so just wait a moment
294:20 - and so over a 5year period we should
294:22 - save $666
294:25 - and18 um and you can drop it down if you
294:27 - want to do one year we'll go to one year
294:29 - so here it says
294:31 - $381 and we have a lot of Graphics here
294:34 - as you can see uh and then down below
294:37 - you should be able to download it so you
294:38 - can just go ahead and download the
294:40 - results there and that is the TCO
294:43 - [Music]
294:47 - calculator hey this is Andrew Brown from
294:49 - exam Pro and we are looking at the Azure
294:51 - Marketplace so the Azure Marketplace is
294:53 - a place where there are apps and
294:56 - services made Available to You by
294:57 - third-party Publishers to quickly get
294:59 - started on Azure and so the apps
295:02 - available uh
295:03 - the apps and services that can be
295:05 - available could be free they could be
295:07 - free trial they could be pay as you go
295:09 - or they could be bring your own license
295:11 - so just an example of what that looks
295:13 - like if you were logged into uh the
295:15 - Azure portal and you uh searched for
295:18 - Marketplace what you could do here is
295:20 - you could type in a variety of things so
295:22 - like here I'm typing in WordPress and
295:24 - here I have a bunch of Wordpress that
295:26 - are provided by thirdparty uh um
295:28 - Publishers that have been vetted by um
295:31 - Azure and and again they they could call
295:33 - cost money they could have a free trial
295:34 - they could be 100% free but whatever you
295:36 - need it's generally in the marketplace
295:39 - um it's a great place to go check out so
295:40 - just be aware of that so I just wanted
295:43 - to quickly show you the Azure
295:45 - Marketplace uh so you'd have to have an
295:47 - account to actually see it um but we do
295:49 - show you that in this course but anyway
295:51 - I'm just going to go up here to the top
295:52 - and type in
295:53 - Marketplace and uh this will pull up the
295:56 - marketplace and here you can see we have
295:57 - a a huge amount of categories of uh
296:00 - things that we can launch so whatever we
296:02 - need and I think I show before WordPress
296:04 - but we'll type that in there so enter in
296:06 - WordPress and there's all these servers
296:09 - so you can click into there um it might
296:11 - it might have plans associated with it
296:12 - if there's any price but you just go
296:14 - ahead and hit create and then that would
296:16 - start the process of creating a virtual
296:17 - machine and you go through that and you
296:19 - subscribe to whatever the underlying
296:21 - cost would be but you can see there's
296:22 - just tons of stuff in
296:24 - here so and you can sort by Price sort
296:28 - by operating system so there you
296:32 - go
296:34 - hey this is Andrew Brown from exam Pro
296:36 - and we are looking at Azure hybrid
296:38 - benefit so many customers have invested
296:40 - already in Windows servers licenses and
296:43 - they want to repurpose their investment
296:44 - on Azure this happens because
296:46 - Enterprises had been working with
296:48 - Microsoft servers even before Azure
296:50 - existed or they were on premise
296:52 - originally uh and so they wanted to use
296:55 - the software so they purchased the
296:56 - licenses but now they're ready to move
296:58 - on to Azure um and so since they've
297:00 - already got a special deal with um
297:03 - Microsoft because they purchased those
297:05 - licenses they want to keep those deals
297:07 - and bring them to the cloud so that's
297:08 - where the Azure hybrid benefit comes
297:11 - into play also abbreviated as Hub uh
297:14 - sometimes it's called asure hybrid use
297:16 - benefit uh uh in Microsoft documentation
297:19 - but for some reason Azure they just dro
297:21 - the word use but the abbreviation is Hub
297:24 - so this gives customers the uh the right
297:25 - to use these licenses for virtual
297:27 - machines on Azure and so uh such types
297:30 - of virtual machines would be Windows
297:32 - servers or SQL servers uh and I would
297:34 - imagine this would probably happen with
297:36 - a lift and shift which I think we
297:37 - described uh somewhere in this course so
297:39 - Hub can be turned on and off at any time
297:41 - for existing virtual machines and hub
297:44 - can be applied at deployment time for
297:45 - new VMS and I just wrote bring your own
297:48 - license down here just because um we are
297:51 - talking about licensing and I just want
297:53 - to get you more exposure to that term
297:54 - bring your own license B Yol L and so uh
297:58 - that just means that someone's purchased
297:59 - a license and they want to apply it um
298:02 - uh they want to bring it onto Azure uh
298:05 - so there you go that is azure hybrid
298:07 - benefit so I just wanted to quickly show
298:09 - you this page here which is the Azure
298:11 - hybrid benefit page if you were to type
298:13 - into Google Azure hybrid benefit you
298:15 - definitely make your way here what I
298:16 - wanted to show you is that they actually
298:17 - have this nice little calculator down
298:19 - below so if you do have licenses and
298:21 - you're bringing them over and you want
298:22 - to run workloads on Azure you can fill
298:24 - this stuff out and it'll give you an
298:25 - idea of what you might save um so I just
298:28 - wanted to make you aware of that so
298:29 - there you
298:32 - go
298:35 - hey this is Andrew Brown from exam Pro
298:37 - and we are looking at Azure subscription
298:40 - so an Azure subscription I would
298:41 - describe as uh the equivalent of saying
298:44 - my Azure account uh I don't know why
298:46 - they use the term subscription because
298:48 - to me it's just confusing um but I
298:50 - always just try to reinforce that it's
298:52 - just your account and there are four
298:54 - tiers of azb subscriptions the first is
298:56 - the free subscription so when you first
298:58 - sign up this is the the account that you
299:00 - or subscription you're going to have you
299:02 - have to provide a credit card to
299:04 - complete the process you're going to get
299:05 - 200 USD credits free for 30 days and
299:08 - certain Azure products will be free for
299:09 - 12 months now um the whole point of this
299:12 - free subscription is to help you avoid
299:15 - charges and there are some limitations I
299:17 - remember when I was trying to add
299:20 - another user um I couldn't grant them
299:23 - access so there was definitely some uh
299:25 - some limitations here to uh to prevent
299:27 - you from being charged but it's not a a
299:29 - complete sandbox so it is possible to
299:31 - get charg in this account if you start
299:33 - using things outside uh the free tier or
299:36 - if you burn through your credit so just
299:37 - be careful there and then once you are
299:40 - ready to switch or or to upgrade and
299:42 - unlock everything then you can switch to
299:45 - pay as you go subscription also reved to
299:47 - p a YG um some people might call that on
299:51 - demand and so uh for this you still need
299:53 - a credit card required but since you've
299:55 - already entered it into the free
299:56 - subscription stage no problem here uh
299:59 - and you're going to be charged at the
300:00 - end of the month based on on consumed
300:02 - Cloud resources is then you have an
300:04 - Enterprise agreement so if you are an
300:06 - Enterprise you can uh make a deal with
300:08 - Azure and agree to receive a discounted
300:11 - price for licenses and cloud service but
300:13 - I bet you're paying a lot of money um
300:15 - like compared to the uh uh a normal
300:17 - person but the deal is worth it for you
300:19 - so just be aware if you're an Enterprise
300:21 - go talk to Azure they want to make a
300:22 - deal uh and the last is the student
300:24 - subscription so with the student
300:26 - subscription you do not require a credit
300:28 - card you get $100 USD credits for 12
300:30 - months but it requires a valid student
300:32 - email so there is a bit of a vetting
300:34 - process there so uh you you definitely
300:36 - have to be in school to get that but it
300:38 - is a very nice option to have so there
300:40 - you go that is the Azure subscription
300:43 - [Music]
300:46 - Models All right so what I want to do in
300:48 - this video is show you how to keep track
300:50 - of your spend uh within your Azure
300:53 - account so I just created a fresh new
300:55 - account uh this one's exam Pro Andrew
300:57 - Brown outlook.com this is not my primary
301:00 - one so you'll see some videos where I'm
301:02 - I'm doing labs in this one and other
301:04 - ones in my primary account um so just be
301:06 - aware that there might be um some
301:08 - discrepancies uh between the videos but
301:11 - anyway um where we're going to keep
301:13 - track of our spent is within
301:14 - subscriptions so up here in the top if
301:16 - we uh type in
301:18 - subscriptions okay we can see
301:20 - subscriptions that are attached to this
301:22 - uh tenant so understand that there is a
301:24 - relationship between tenants and
301:26 - subscriptions and your uh your directory
301:30 - and subscriptions is how you pay Azure
301:33 - and you can create multiple
301:35 - subscriptions um and there's good reason
301:37 - for that um but the point is is that you
301:40 - start with a default subscription so
301:41 - here I have the Azure subscription one
301:43 - notice there is no current cost because
301:46 - I have yet to launch any services in
301:47 - here but we'll go ahead and click into
301:49 - here and eventually something should
301:52 - appear here yep so it says you uh your
301:54 - remaining $200 of free credits expire in
301:56 - 30 days so the idea is that we have $200
302:00 - or uh we have 30 days to utilize uh this
302:03 - a free free account here so I'm going to
302:05 - go ahead and just click into this
302:06 - upgrade I'm not upgrading right now I
302:08 - just want to show you what it looks like
302:10 - so in here we have some options you can
302:12 - rename your subscription if you want I
302:14 - think for my even my primary account I
302:16 - just left it as as your subscription one
302:19 - the name doesn't really matter it's just
302:20 - for your reference but uh we do have
302:23 - some options and this is for additional
302:25 - um support if you want to have technical
302:27 - support from Azure when you upgrade you
302:29 - can just stick with basic because of
302:31 - course we don't need to pay an
302:32 - additional fee on top of what we're
302:33 - doing here cuz we have these
302:35 - instructional videos to learn but that's
302:37 - how you're going to go ahead and upgrade
302:39 - later when we do have some spend we'll
302:41 - come back and revisit it here but we do
302:43 - have a lot of options to uh track our
302:46 - spend and usage so there's spend and
302:47 - usage which are uh two different things
302:50 - but you know hopefully that makes things
302:52 - very clear when you want to figure out
302:54 - what your spend is go over to your
302:55 - subscription I'll just go back to the um
302:58 - dashboard here and I'll see you in the
302:59 - next one
303:01 - ciao
303:04 - [Music]
303:05 - hey this is Andrew Brown from exam Pro
303:07 - and we are looking at Azure pricing
303:09 - calculator so configure and estimate the
303:11 - cost of azure products you don't have to
303:13 - sign in to use this tool and and what
303:15 - you can do is download Excel spreadsheet
303:17 - and share that uh those costs with your
303:20 - boss so to get there you go to
303:22 - azure.com
303:23 - pricing calculat uh and from there you
303:27 - can you can go in here and you can fill
303:29 - out different things so there's a bunch
303:31 - of different categories the most common
303:33 - one would probably be a virtual machine
303:34 - so you go in there and you say what
303:35 - region it's going to launch in what OS
303:38 - um and all the types of configuration
303:39 - it's going to give you an estimated cost
303:41 - so this one down below is an upfront
303:43 - cost of 0 with a monthly cost of
303:45 - $12. $62 so if you're not sure how to
303:49 - make sense of all the pricing go here
303:51 - and play around and you will get a clear
303:53 - picture of what you're going to spend on
303:54 - Azure so I just wanted to show you the
303:57 - pricing calculator so if you just went
303:58 - to Google and typed in Azure pricing
304:00 - calculator you should be able to make
304:01 - your way to this page
304:03 - and so down below we have a bunch of
304:04 - products we also have example scenarios
304:07 - which is uh uh very nice to see here um
304:10 - so let's say we wanted a cicd pipeline
304:14 - here and we said add to estimate we
304:16 - could get that information for all these
304:17 - components I'm just going to go to
304:18 - single products because it's a bit
304:20 - easier to uh view so let's say we want
304:22 - to determine our cost for storage so
304:25 - let's just go to storage
304:27 - here and uh we will try storage
304:31 - accounts and and then down below uh
304:34 - We've now added storage and so we can
304:35 - enter some information to try to
304:37 - determine our cost so we could do blob
304:39 - file storage table storage I'm going to
304:40 - go with file
304:42 - storage um actually no I'm going to go
304:44 - with blob it's just easier to calculate
304:46 - and so we're going to have the
304:47 - performance tier to premium redundancy
304:50 - lrs um and we're going to be e uh East
304:53 - usest and so if we had a th000 gigabytes
304:56 - I guess it's a terabyte that's
304:58 - $150 uh if we had x amount of right
305:01 - operations x amount of list and create
305:03 - container operations read operations and
305:05 - here we'd have $150 as a monthly cost so
305:08 - here you just have to tweak it based on
305:10 - your uh consumptions um and then
305:13 - generally they'll show you like purchase
305:14 - options but really this just means like
305:16 - go sign up for an Azure account uh but I
305:19 - just wanted to show you what that looks
305:20 - like and just so that you know that you
305:22 - can go explore any cost and try to
305:24 - calculate something before you use
305:27 - [Music]
305:30 - it hey this is Andrew Brown from exam
305:32 - Pro and we are looking at Azure cost
305:34 - management and so this service allows
305:36 - you to perform cost analysis so you can
305:38 - visualize the spending of your Azure
305:39 - Cloud resources but you can also create
305:42 - a budget under the service so when you
305:43 - set a budget you're going to you're
305:45 - going to Define a threshold and you're
305:46 - going to be alerted when you're
305:47 - approaching or you've exceeded that
305:49 - threshold uh and so just to give you a
305:51 - visual uh representation there that is
305:53 - for the cost analysis so you can see you
305:55 - get beautiful graphs and you can drill
305:57 - down and filter that stuff out to really
305:59 - understand how you are spending stuff on
306:01 - azure so definitely check it out and
306:04 - there you
306:05 - [Music]
306:08 - go let's take a look at the concept of
306:10 - resource tags are just sometimes known
306:12 - as a tag and this is a key and value
306:15 - pair that you can assign to Azure
306:16 - resources so generally when you are
306:19 - launching a new resource you're going to
306:21 - have a uh a tags page and this is where
306:23 - you can uh apply that key and value name
306:27 - and just to give you some examples of
306:28 - tags you might want to apply you might
306:30 - want to have a department and then the
306:32 - type of Department status approved uh a
306:35 - team an environment or the project or
306:39 - the
306:39 - location and so you have a lot of uh
306:42 - tags that you can apply and tags allow
306:44 - you to organize your resources in the
306:45 - following ways you can organize them in
306:48 - your uh via Resource Management so
306:50 - that's where you are specifying uh
306:52 - workloads environments like developer
306:54 - environments uh there's cost management
306:56 - and optimization so cost tracking
306:58 - budgets and alerts operation management
307:01 - so uh that could be uh business
307:03 - commitments to SLA operations so uh you
307:06 - might want to tag services that are
307:08 - considered Mission critical Services uh
307:10 - there's security so that's
307:11 - classification of data and security
307:13 - impact so if there's uh certain
307:15 - databases that have uh very specific
307:18 - compliance rules you might want to do
307:20 - that as well which I think is the next
307:21 - example here um or maybe you're defining
307:24 - uh services that are used for automation
307:26 - or or services are for workload
307:28 - optimization so there's a lot to do with
307:31 - tags uh and even even though I don't use
307:33 - them uh frequently in my follow alongs
307:35 - it's definitely something uh is a good
307:36 - habit to do and uh you should do in your
307:38 - production
307:40 - [Music]
307:43 - workloads hey this is Andrew Brown from
307:45 - exam Pro and we're talking about
307:47 - Microsoft pview information protection
307:49 - also known as Microsoft information
307:51 - protection and this is a collection of
307:53 - features within Microsoft pview formerly
307:55 - Microsoft 365 compliance to help you
307:58 - discover classify and protect sensitive
308:01 - information wherever lives or travels so
308:04 - the idea here is that we have this
308:05 - diagram and we have four specific
308:07 - domains that are information protection
308:09 - capabilities around our data and so the
308:11 - first is know your data the second is
308:13 - protect your data the third is prevent
308:15 - data loss and the fourth is govern your
308:17 - data so we'll be going over all these
308:19 - sections in the next few slides taking a
308:21 - look at the four domains here for the
308:22 - Microsoft purview information protection
308:25 - these are features found within
308:26 - Microsoft perview so the first is know
308:28 - your data understand your data landscape
308:30 - and identify important data dat across
308:32 - your hybrid environment so one feature
308:34 - would be sensitive information types
308:36 - this identifies sensitive data by using
308:38 - built-in or custom regular expressions
308:40 - or a function it provides corroborative
308:43 - evidence includes keywords confidence
308:45 - levels and proximity we have built in
308:47 - sensitive labels and you have custom
308:49 - ones as well so then there's trainable
308:51 - classifiers this identifies sensitive
308:53 - data by using examples of the data
308:55 - you're interested and rather than
308:56 - identifying elements in the item so
308:59 - pattern matching and you can use
309:00 - built-in classifiers or train a
309:02 - classifier with your own content so you
309:04 - have trainable classifiers here for data
309:06 - classification this is a graphical
309:08 - identification of items in your
309:10 - organization that have a sensitive label
309:12 - a retention label or have been
309:14 - classified you can also use this
309:16 - information to gain insights into the
309:17 - actions that your users are taking on
309:19 - these items so that's the context
309:21 - Explorer and the activity Explorer the
309:23 - second part is protect your data so
309:25 - apply flexible protection actions that
309:27 - include encryption access restrictions
309:30 - and visual markings so you have sens
309:32 - sensitivity labels Azure information
309:34 - protection unified labeling client
309:36 - double key encryption Office 365 message
309:39 - encryption service encryption with
309:41 - customer key SharePoint information
309:43 - Rights Management Rights Management
309:45 - connector Azure information protection
309:47 - unified labeling scanner Microsoft
309:49 - Defender for cloud apps and Microsoft
309:51 - information protection SDK most of these
309:54 - you won't need to know but we'll
309:55 - definitely cover sensitivity labels then
309:57 - we have prevent data loss so this
309:59 - prevents accidental oversharing of
310:01 - sensitive information
310:02 - here you have Microsoft perview data
310:04 - loss prevention and point data loss
310:06 - prevention Microsoft compliance
310:08 - extension there's a Chrome extension
310:09 - that does compliance for you so it's
310:11 - built in your browser there's the
310:13 - Microsoft purview data loss prevention
310:15 - on premises scanner and protect
310:17 - sensitive information in Microsoft teams
310:19 - chat and channel messages we'll
310:21 - definitely take a closer look at
310:22 - Microsoft perview data loss prevention
310:24 - later next we have Microsoft perview
310:26 - data life cycle management formerly
310:28 - Microsoft information governance which
310:30 - is a collection of features to govern
310:32 - your data for compliance or regulatory
310:34 - so for Microsoft perview data life cycle
310:36 - management it keeps what you need and
310:38 - deletes what you don't we have retention
310:40 - policies and retention labels inactive
310:43 - mailboxes archive mailboxes import
310:45 - service for pstd files and for Microsoft
310:48 - perview records management it manages
310:50 - high value items for business legal or
310:53 - regulatory recordkeeping requirements
310:55 - you have file plan retention labels for
310:57 - individual items retention policies if
311:00 - needed for Baseline retention and
311:02 - disposition review and proof of
311:03 - disposition so those are the four
311:05 - domains in Microsoft purview information
311:07 - protection govern your data is not
311:09 - technically part of it as it's in the
311:11 - data life cycle and record section but I
311:13 - included it
311:17 - anyways so Azure policies are used to
311:20 - enforce organizational standards to
311:22 - assess compliance at scale and policies
311:25 - do not restrict access they only observe
311:27 - for compliance so here on the right hand
311:29 - side in the Azure policy uh port portal
311:32 - uh you're going to see a big list of
311:34 - policies and Azure has a bunch of
311:36 - policies built in for you right away
311:38 - that you can use so if you need to meet
311:40 - nist or fed ramp or Hippa what you can
311:43 - do is just turn those on and it's going
311:44 - to check based on the categories to see
311:46 - if like you're using Cosmo DB it's going
311:48 - to check for that compliance and tell
311:50 - you whether you're being compliant or
311:52 - not and there's a bunch of components
311:53 - that are involved when you're making
311:55 - Azure policies so you have the policy
311:57 - definition file and this is just a Json
312:00 - file that describes business rules to
312:01 - control access to resources you have
312:03 - policy assignment this is the scope of a
312:05 - policy that it can affect assigned to a
312:07 - user a resource Group or Management
312:09 - Group you have policy parameters these
312:11 - are values you can pass into your policy
312:13 - definition so your policies are more
312:15 - flexible for use and you have initiative
312:18 - definitions and these are an initiative
312:20 - definition is a collection of policy
312:21 - definitions that you can assign so it's
312:23 - a group of policies to enforce some kind
312:25 - of compliance like PCI uh DSS compliance
312:28 - and I want you to carefully look at the
312:29 - screenshot on the right hand side where
312:31 - it says defin defition type and you see
312:33 - policy initiative so the ones at the top
312:35 - there is talking about policy
312:36 - definitions and then you have initiative
312:38 - definitions which are just a group of
312:39 - policy definitions all
312:44 - right let's take a look at resource
312:47 - locks so as in a menu might have a case
312:50 - where you want to lock a subcription
312:51 - resource Group or resource to prevent
312:53 - other users from accidentally deleting
312:55 - or modifying critical resources So
312:58 - within the Azure portal you can set the
312:59 - following lock levels you have the
313:01 - cannot delete uh which is basically uh
313:05 - prevents deletion so authorized users
313:07 - can still read and modify resource but
313:08 - they can't delete the resource and the
313:10 - other mode is readon uh so authorized
313:12 - users can read a resource but they can't
313:14 - delete or update the resource uh so
313:17 - those are the two modes uh and that's
313:19 - something uh you might be interested in
313:24 - doing let's take a look at Azure
313:26 - Blueprints and this is a way to enable
313:29 - quick creation of govern subscriptions
313:31 - the keyword there is governed so the
313:33 - idea is like you can go in your account
313:35 - and just create a subscription but when
313:36 - it's a govern subscription that means
313:37 - there's a process uh and certain
313:40 - expectations on how subscription should
313:42 - be set up um so the idea is you're going
313:44 - to compose artifacts based on common or
313:47 - organization-based patterns into
313:49 - reusable Blueprints and the service is
313:52 - designed to help with environment setup
313:54 - so blueprints are are a declarative way
313:57 - to orchestrate the deployment of various
313:59 - resource templates and artifa artifacts
314:01 - I want to emphasize that word
314:02 - declarative declarative means that
314:04 - everything is spelled out so we exactly
314:07 - know what's going to be created and so
314:09 - artifacts could be Ro assignments policy
314:12 - assignments Azure resource manager
314:14 - templates also known as arm templates
314:16 - resource groups and the Azure blueprint
314:19 - service is backed by the globally
314:20 - distributed Azure cosmod DB blueprint
314:24 - objects are replicated to multiple
314:26 - regions so uh they're definitely well
314:29 - backed up uh and so the main main
314:31 - question people are going to ask well
314:32 - what's the difference between an arm
314:33 - template and an Azure blueprint because
314:36 - an arm template can automate the setup
314:38 - of stuff well basically nearly
314:40 - everything you want to include uh for
314:42 - deployment in an Azure blueprint can
314:43 - technically be accomplished in an arm
314:45 - template but the thing is is that an arm
314:47 - template uh you you are you are storing
314:49 - that either locally or in Source control
314:51 - and there is no active connection or
314:53 - relationship to the arm template whereas
314:56 - a your blueprints the relationship
314:58 - between the blueprint definition what
314:59 - should be deployed and the blueprint
315:01 - assignment uh what was deployed and it
315:04 - can also be uh upgraded SE uh it can
315:08 - also upgrade sever subscriptions at once
315:10 - that are governed by the same blueprint
315:12 - so uh blueprint support improve tracking
315:14 - and auditing of deployments that is the
315:16 - thing so they're very similar to arm
315:18 - templates but generally if you have the
315:20 - option you should always use as your
315:22 - blueprints so there you
315:24 - [Music]
315:27 - go hey this is Andrew Brown from exam
315:29 - Pro and we are looking at the the Azure
315:32 - portal so the Azure portal is a
315:34 - web-based unified console that provides
315:36 - an alternative to command line tools you
315:38 - can manage your Azure subscription with
315:40 - the Azure portal build manage monitor
315:43 - everything from simple web apps to
315:45 - complex Cloud deployments so what does
315:47 - that mean it just means the browser that
315:48 - you use to access Azure so anytime
315:51 - you're logged into Azure uh that is the
315:53 - portal that's all you need to know uh
315:55 - there's another thing about Azure portal
315:57 - and that's Azure preview portal so uh
316:00 - the thing is is that sometimes there are
316:02 - new features or new products that Azure
316:04 - has made that are not necessarily
316:05 - generally available but you can get a
316:07 - sneak peek of them uh sooner if you use
316:10 - the Azure preview portal so that could
316:12 - be previews uh betas or other
316:15 - pre-releases so the way you would do
316:17 - that is very similar how to you how
316:19 - you'd access uh the regular portal but
316:22 - if you want a test preview of new
316:24 - features you go to the preview. portal.
316:26 - azure.com or if you're looking for
316:28 - stable release and production ready
316:30 - features you just use portal. azure.com
316:33 - so that's all you need to know about the
316:35 - Azure
316:37 - portal so I just wanted to quickly show
316:40 - you what the portal looks like um we are
316:42 - going to show you in this course how to
316:44 - create your own account and work within
316:45 - the portal but I already have one set up
316:47 - here and uh I'm already logged in and if
316:49 - I go to the top here I actually have
316:51 - this portal link now and when I go here
316:53 - we can see what the portal looks like so
316:55 - this is the portal uh you can see that
316:57 - it's telling me about my spend but I'm
316:59 - on the dashboard right now on the left
317:01 - hand side we have this hamburger menu
317:02 - where we can explore the services we can
317:04 - go up here and search them as well so
317:06 - whatever I'm looking for if it's monitor
317:08 - we can go there uh and that's pretty
317:10 - much it this is the portal so it's just
317:13 - the browser when you're logged in and
317:15 - you can interact with any Cloud
317:17 - [Music]
317:20 - resources so in this video I want to go
317:22 - take a look at the preview portal so
317:24 - that you are aware where that is uh I
317:26 - know it exists I never ever ever ever
317:29 - ever go to it unless there is some kind
317:31 - of kind of service that I think is going
317:32 - to get released and I want to teach
317:34 - teach you it um and so I believe that we
317:37 - just add something in front of it so I
317:38 - was just looking up on the um uh like
317:42 - the azures or the Microsoft Tech
317:43 - Community and they're suggesting that
317:46 - it's this address here I'm not really
317:47 - reading it I was just looking for the
317:49 - address and so if we log into here we're
317:51 - now in the preview portal and so we have
317:53 - access to all the preview things um that
317:56 - Azure has so one thing that is in
317:57 - preview right now I believe is ma uh
317:59 - fabric uh Microsoft Fabric and this was
318:02 - just announced I believe or was talked
318:04 - about a lot at the recent Microsoft
318:06 - ignite and so this is a preview feature
318:08 - if we want to use it we have to be in
318:10 - the preview account if we're in um Azure
318:13 - here I'm not sure if it'll let us use it
318:15 - so we'll go over here and just see what
318:16 - happens um I have no idea what the costs
318:18 - are here so you can take a look and just
318:20 - not touch it but here it says uh
318:23 - Microsoft fabric delivers an nend
318:25 - experience create a fabric capacity and
318:27 - then we'll go over here and it's also
318:29 - here as well so what I'm going to do is
318:31 - go ahead and see what happens if I try
318:32 - to create
318:35 - this so it says you cannot create a
318:37 - Microsoft capacity using a personal
318:38 - account you use an organization account
318:40 - instead so um right now I'm still in a
318:42 - free tier account and it has to be
318:44 - within organization so they're not going
318:46 - to let me use this which is totally fine
318:48 - um but I just wanted to see what would
318:49 - happen if I clicked
318:52 - it and I don't know if that applies for
318:54 - any other preview features as well uh I
318:57 - wonder if we typed in preview if we
318:58 - could see what's in preview maybe uh
319:01 - there is a preview features service I've
319:03 - actually never tried to look this up so
319:05 - I don't know I'm just curious myself so
319:08 - exploring pre-release features so yeah
319:09 - it looks like we can see all the the
319:11 - preview stuff here um and there's
319:13 - nothing really popping out at me that we
319:15 - could go take a look and take for a spin
319:18 - um but it is nice to know that if you
319:19 - want to see where all the preview
319:21 - features are we can go ahead and look at
319:23 - that um so yeah that is all good here um
319:27 - and that's all I really wanted to point
319:28 - out now if I could find a preview
319:30 - service to launch we definitely test it
319:32 - uh one thing I'm not 100% sure is how we
319:34 - would go ahead and use preview features
319:36 - in the CLI so just give me a second to
319:38 - find out all right so uh I I wasn't
319:41 - looking for this in particular but it's
319:43 - worth taking a look here so here it's
319:45 - suggesting that if we want to um uh
319:48 - access uh preview features in our
319:50 - account we can go under subscriptions
319:52 - and documentation let's go check and
319:54 - find out if that is the case so we'll go
319:55 - over to subscriptions we'll click into
319:57 - our subscription here and on the left
319:59 - hand side I'm scrolling down I'm looking
320:01 - for document is that what they said I
320:04 - think that's what they said right no
320:06 - preview features and here it is and
320:09 - we'll go into
320:12 - here and we'll give it a moment it might
320:14 - be the same listing that we actually
320:16 - looked up just a moment
320:18 - ago okay and it looks like we can just
320:21 - register them so this is very similar to
320:24 - the the um resource providers it looks
320:26 - like if we want to use them we just
320:27 - register register them um but uh yeah I
320:31 - guess that's all there really is to it I
320:33 - was always told that the preview portal
320:35 - was so that you can only use preview
320:36 - features so if we can register them in
320:39 - the main
320:41 - one what's the point anyway in
320:44 - practicality this is not something you
320:45 - really have to worry about but you
320:46 - should know that there are there are
320:48 - things that are preview uh that you have
320:50 - to do some extra work to be able to
320:52 - access them and just make sure you're
320:53 - not using them in your production
320:55 - workloads because uh Azure might roll
320:58 - back on them and uh you know I've heard
321:00 - this from customers before where it's
321:02 - like they've worked with Microsoft and
321:04 - they worked for like six months and
321:06 - implemented stuff and it really seemed
321:08 - like it was going going to go through
321:09 - investing a lot of money uh and it
321:11 - really seemed like Azure was going to uh
321:14 - stick with it and then last minute they
321:15 - said oh we're not doing this anymore so
321:18 - really just be very wary of preview
321:21 - features you can get excited about them
321:22 - but do not put them in your production
321:24 - workloads but there you
321:26 - [Music]
321:30 - go hey this is Andrew Brown from exam
321:32 - Pro and we are looking at Azure Cloud
321:34 - shell so Azure Cloud shell is an
321:36 - interactive authenticated browser
321:39 - accessible shell for managing Azure
321:43 - resources and so it provides the
321:45 - flexibility of choosing the shell
321:46 - experience that best suits the way you
321:48 - work so you can either use bash or
321:50 - Powershell we just talked about
321:52 - Powershell and this is the place where
321:53 - you could use it in Azure so uh just to
321:56 - give you a visual uh if you ever want to
321:58 - access the cloud shell it's all the way
322:00 - up in the header there in the portal and
322:03 - so you click that button it opens up
322:05 - Powershell or it will depends on what
322:07 - you choose but it will open it up down
322:09 - below uh and then you'll be able to use
322:12 - um Powershell right away and also the
322:14 - CLI right away which we'll talk about
322:17 - [Music]
322:20 - next all right so what I want to do in
322:23 - this video is to introduce you to Cloud
322:25 - shell so um Microsoft Azure has a portal
322:28 - which is what we're looking at uh and
322:30 - and and it basically has uh different
322:33 - Services where we're going to have user
322:35 - interfaces so if we want to say launch a
322:37 - virtual machine they have uh this really
322:40 - nice I don't know why it's asking me to
322:42 - log in again but that's okay but it has
322:44 - this really nice uh UI so that if I want
322:46 - to launch a virtual machine I can just
322:48 - do some click Ops click Ops is when we
322:50 - perform operations through clicking of
322:52 - the Mouse um but in practice a lot of
322:55 - the times especially if you're working
322:56 - in devops uh or other roles is you're
322:59 - going to be Pro programmatically
323:01 - creating resources because it's more
323:03 - efficient or there are cases in Azure
323:05 - where there is no UI and you have to do
323:07 - it programmatically uh this happens
323:10 - especially with newer services or Cloud
323:12 - native Services um so just be aware that
323:15 - you cannot avoid doing some basic
323:17 - scripting programming or uh terminal
323:19 - usage so the nice thing about Azure and
323:22 - most providers have this uh uh now but
323:25 - they have a a way of launching a a a
323:27 - cloud shell a terminal so that you can
323:30 - programmatically enter in commands and
323:32 - so that's what I want to show you in
323:33 - this video so in the top right corner
323:36 - you're going to see um a bunch of little
323:37 - icons here and the first one uh and
323:40 - hover over to make sure that it is what
323:42 - we think it is but it's called Cloud
323:44 - shell and if we go ahead and click that
323:46 - what we're going to get is this um dark
323:48 - box that's appearing below and it's
323:50 - going to say welcome to Azure Cloud
323:52 - shell uh select either bash or pow shell
323:55 - so um there are two uh very popular um
323:58 - scripting languages one is called bash
324:02 - it's also the terminal itself it's not
324:04 - just uh the scripting language but bash
324:06 - is what is used on Linux Powershell is
324:09 - what is used on Windows machines and so
324:11 - this is a a way to Pro programmatically
324:14 - um interact with uh machines and
324:16 - programs and so uh we should take a look
324:18 - at both of them but I'm going to first
324:20 - take a look at bash of course we are in
324:22 - the U Windows uh Microsoft ecosystem so
324:25 - Powershell is going to be what is uh
324:27 - probably preferred when we're using
324:28 - Azure but anyway the first thing it's
324:30 - going to tell you if this is the first
324:32 - time you ever launched it it's going to
324:33 - say you do not have uh uh a storage
324:37 - account so the idea is that um this bash
324:40 - terminal needs to store some data and so
324:42 - it's going to spin up a storage account
324:45 - and we'll talk about that later in the
324:46 - course uh in order to store some of the
324:48 - information here and so this should be
324:50 - uh pretty low cost to no cost so just go
324:53 - ahead and create that
324:56 - resource and uh we'll just give it a
324:58 - moment
324:59 - here
325:02 - and I just want you to know that uh it's
325:04 - still taking time for uh for me to
325:06 - create so uh if it's taking uh quite a
325:09 - few minutes do not stress out uh just
325:11 - keep waiting and we'll see what happens
325:12 - okay I'm just going to pause and and uh
325:15 - speed this up but actually there it is
325:17 - it's done so it took about I don't know
325:18 - 3 minutes for this to uh create that
325:21 - storage account so while this is
325:23 - spinning up a lot of times in Azure they
325:24 - will uh show up in the notifications
325:26 - recent actions and it's not showing up
325:30 - here might be this tab
325:32 - nope but normally when resources are
325:35 - ready or being created they will uh they
325:37 - will show up in the notifications not
325:39 - exactly sure why I'm not seeing it here
325:40 - but I'm going to go ahead and right
325:41 - click and just take a look at
325:43 - notifications and it really keeps asking
325:45 - me to log in not sure why today um but
325:48 - uh yeah if we go here uh we can see uh
325:52 - things that are happening so it started
325:54 - it created subcription that was the
325:55 - start of our account so this I just
325:57 - recently created this account and then
325:59 - it performed a generate
326:01 - not exactly sure what that was for um
326:04 - that's for subscription so totally um
326:07 - not important but I thought we would see
326:09 - and hear things like created a storage
326:10 - account but we don't and that's totally
326:12 - fine so we'll come back over here and
326:15 - going to carefully read here so it says
326:17 - storage file share subscription is not
326:20 - registered to Microsoft cloud shell
326:21 - namespace please follow these
326:22 - instructions to register in future unex
326:25 - unregistered subscriptions will have
326:27 - restricted access to Cloud Shell service
326:30 - so what I'll do is I'll go ahead and
326:32 - copy this
326:34 - link okay and we'll just enter this in
326:37 - here and it's giving us instructions
326:40 - about getting started with Cloud shell
326:41 - so what it's probably asking us to do is
326:44 - enable um uh enable Cloud shell so this
326:48 - is again another thing that we have to
326:50 - understand about Azure is that we need
326:52 - to uh register particular services so
326:54 - this is normally done under your
326:56 - subscription so what we're going to do
326:58 - is we're going to go over back to our
326:59 - subscription so let's just type
327:00 - subscription
327:04 - here and we'll click into our
327:07 - subscription and I want to show you on
327:09 - the left hand side there's a tab called
327:11 - resource providers this is something
327:12 - you're going to be going to a lot and
327:14 - you'll see me go here a lot but the idea
327:16 - is that Azure is made up of a bunch of
327:18 - different services and you have to
327:20 - register or permit uh the access of
327:23 - these services so uh in this tutorial
327:26 - it's saying make sure that Microsoft
327:28 - cloud shell is registered and if I go
327:30 - over here here it is registered so I'm
327:32 - thinking what it did is it did it for us
327:34 - so it said hey it wasn't registered but
327:36 - we did it for you okay and so now we're
327:38 - able to use it but uh you will again see
327:40 - me in many videos at the start of it
327:42 - making sure that we have those resources
327:44 - so um anyway we have this
327:47 - open and uh this is running Linux as far
327:51 - as I'm aware of and so we can run some
327:53 - Linux commands for fun so the first I'm
327:55 - going to type is PWD which is print
327:57 - working directory and then LS to list
327:59 - out the directory and you can see that
328:01 - uh we are getting some input what I want
328:03 - to do is just make this a bit larger
328:05 - it's a bit hard on the eyes and let's
328:07 - see if this Cog here uh will allow us to
328:09 - change the font so yes we can so that's
328:11 - the largest I can make it I apologize if
328:14 - it is uh not better but anyway uh the
328:17 - great thing about these Cloud shells is
328:19 - that they're normally loaded up with um
328:21 - clis uh for um the particular provider
328:25 - so uh Azure has a CLI called Azure CLI
328:29 - and in order to to use it you can type
328:31 - the command AZ so if we type in AZ and
328:34 - hit enter it should uh tell us a bunch
328:36 - of stuff on how to use
328:38 - this and I'm just going to go ahead and
328:40 - hit this maximize button so we have our
328:42 - full screen here and so the idea here is
328:45 - that uh in order to use the Azure CLI we
328:48 - can go ahead and start typing things in
328:49 - so maybe we want to find something about
328:51 - our Azure subscription so I can go down
328:53 - here below and type in AZ subscription
328:56 - or sorry
328:58 - account and we'll go ahead and hit enter
329:01 - and right away it's going to complain
329:03 - because most commands are going to have
329:04 - a command and then a sub command so uh
329:07 - here I'm going to go ahead and type in a
329:09 - account list as it's suggesting uh
329:12 - things that we can
329:14 - do and so what it's doing here is it's
329:16 - returning back to us um uh some
329:19 - information on our account so in this
329:22 - video all I wanted to do was show you
329:23 - how to open up cloudshell um in uh
329:26 - another video we'll talk a little bit
329:28 - more about the uh Azure CLI and and
329:30 - Powershell and and this other stuff but
329:33 - yeah that's about it here when we're
329:35 - done with Cloud shell we can go ahead
329:36 - and hit the X and close that off and we
329:38 - can just forget about it so it's as easy
329:40 - as that and we'll see you in the next
329:42 - [Music]
329:46 - one hey this is Andrew Brown from exam
329:48 - Pro and we are looking at Powershell for
329:51 - Azure so first of off what is Powershell
329:53 - so Powershell is a task Automation and
329:56 - configuration management tool um but an
329:59 - easier way to think of it is just it's a
330:00 - command line shell and it's also a
330:02 - scripting language and so when I say a
330:04 - command line shell I mean this thing
330:06 - this blue thing and so if you have a
330:08 - Windows machine you can actually you'd
330:10 - have to I think have Windows
330:11 - Professional uh but you can go ahead and
330:13 - install this and it's uh allows you to
330:16 - automate things using its scripting
330:17 - language as well as in this uh this uh
330:21 - program now uh powershell's available on
330:25 - Azure as well and we'll get to that in a
330:26 - moment let's just talk about the
330:27 - benefits of Powershell over traditional
330:30 - um uh traditional shells so a shell
330:32 - could be something like bash or zsh uh
330:35 - which would accept and return tax but
330:37 - Powers shell is built on top of the net
330:39 - common language runtime so CLR uh and it
330:43 - accepts and returns net objects so those
330:45 - objects make it a lot easier to automate
330:48 - scripting and so Powershell is available
330:51 - on Azure and it's known as Azure
330:54 - Powershell and so we have a set of
330:56 - command uh commandlets for managing
330:58 - Azure resources directly from the
331:00 - Powershell command line and if you're
331:02 - wondering how You' access Powershell you
331:04 - could use um Cloud shell which we'll
331:07 - talk about here uh in a
331:10 - moment okay so I just wanted to quickly
331:12 - show you a Powershell I'm on my Windows
331:14 - computer right now and this is natively
331:16 - installed on my uh my Windows 10
331:19 - computer and I can type in commands here
331:21 - and so this is just giving me a list of
331:23 - all my um my my the directories in in
331:26 - this current uh folder but I just also
331:28 - want to show you that we have Powershell
331:30 - here in the Azure portal so I'm using
331:33 - the cloud shell up here and I've chosen
331:35 - to use Powershell and you can see it's
331:36 - pretty much the same experience um with
331:39 - some extra things that make it easier to
331:40 - work on cloud so that's
331:43 - [Music]
331:46 - it all right so in this video what I
331:48 - want to do is show you Powershell so
331:50 - Powershell is kind of like bash except
331:53 - it's for Windows um and uh it's it looks
331:56 - different so uh that's the easiest way
331:59 - to describe it but let's go ahead and
332:00 - get some experience with it so in the
332:02 - top right corner we're going to go ahead
332:03 - and open Cloud shell I'm expand expand
332:05 - this open so it's nice and big going to
332:07 - make sure my font is nice and big and uh
332:10 - notice right away that it launched and
332:11 - Bash uh it's whatever you had open up
332:14 - last you can restart Cloud Shell by
332:16 - clicking this button I'm just going to
332:18 - drop down and click on par shell and
332:19 - just confirm and it will go ahead and
332:21 - open it
332:22 - up so uh notice that Powershell is nice
332:26 - and blue most Windows computers should
332:28 - have Powershell installed I can't
332:29 - remember remember you have to have
332:30 - Windows Professional or not so I could
332:32 - technically open up Powershell on my
332:34 - computer here not going to do that but
332:36 - notice that this is spun up and so now
332:38 - we can go ahead and use Powershell and
332:40 - Powershell has its own syntax and its
332:42 - own way of working um it's a really
332:44 - powerful tool and very efficient when
332:47 - you are working as a systems
332:48 - administrator um but what we'll do is go
332:50 - ahead and ask chat jpt um the same thing
332:53 - we did before but we'll say let's use
332:55 - Powershell Azure
332:58 - Powershell and one thing I want to say
333:01 - about Azure uh or Powershell is that
333:03 - Powershell the Azure package or Plugin
333:06 - takes forever to
333:08 - install so I really uh am not looking
333:11 - forward to the time I I'll have to show
333:13 - you in a future course um installing
333:16 - that because it just takes forever um I
333:18 - don't know why it's always uh it's like
333:20 - that but it's always taken a very very
333:22 - long time I just want to point that out
333:25 - so here it's very similar it's saying
333:27 - okay the first time you use power shell
333:29 - you're gonna use connect hyphen a
333:31 - account um the thing is is that uh we
333:33 - don't need to do this because we're
333:35 - already logged in because Cloud shell
333:36 - will do that for us automatically if
333:38 - we're installing this locally the
333:39 - process would be a little bit different
333:41 - and so the thing is is that Parell is
333:44 - going to follow uh this very interesting
333:46 - convention in terms of how they uh name
333:49 - their stuff so here it's new new hyphen
333:52 - a a resource Group uh and so there is a
333:54 - way of learning um uh that syntax so I I
333:58 - I'm not I don't use Powershell lot I'm
334:00 - very I'm comfortable using it but um uh
334:03 - I just don't use Powershell because I
334:05 - prefer bash but let's go see if there is
334:07 - a Powershell asure uh uh reference
334:10 - documentation because that's what we
334:11 - would uh expect to look for so we'll go
334:14 - over here and I would imagine it's very
334:16 - similar um so yeah commandlet
334:21 - reference maybe it's under
334:24 - here and I said plugin but yeah they're
334:26 - called commandlets uh that's uh and
334:29 - commandlets contain modules so in here
334:31 - we're looking for the module for let's
334:34 - say the resource Group so we'll go here
334:35 - and look for Resource
334:37 - Group if it's not called that let's go
334:39 - take a look oh AZ Resource
334:44 - Group maybe it's a
334:48 - resources and we'll go ahead and type in
334:50 - Resource
334:53 - Group there it is so the modules aren't
334:55 - always named exactly the same but uh
334:59 - anyway if you remember our bash video
335:01 - very similar we're going to go look up
335:03 - that
335:04 - documentation and uh you know it looks
335:07 - kind of similar um so we can go down
335:11 - here and I'm not noticing shorter Flags
335:13 - but um I'm pretty sure that Powershell
335:15 - autocompletes so we'll find out here but
335:18 - I'm going to type in new yes it does and
335:19 - so that's one of the nice things about
335:21 - Powershell at least working on Azure is
335:24 - that they really want to make everything
335:25 - really easy for you so as soon as I
335:27 - started typing new it already started
335:28 - autocomp completing and so I can go
335:30 - ahead and hit tab
335:31 - here and uh I don't know why I didn't
335:34 - take the whole thing but maybe
335:36 - oops and it's not taking the whole thing
335:40 - but we'll keep typing
335:44 - here group and so I can do hyphen name
335:47 - and so uh we'll call this um probably
335:49 - singles I'll stick with singles I can't
335:51 - remember if it takes doubles but we'll
335:53 - say my uh
335:56 - Powershell RG and then we'll do
336:00 - location and here it's saying Central
336:03 - us so even notice like remember like we
336:05 - typed in Us East lowercase and the
336:08 - syntax was different so understand that
336:09 - things going to be different it's still
336:10 - suggesting more stuff um that is good
336:13 - enough so I'll go ahead and hit
336:15 - enter and so um we get that back there
336:19 - we'll go ahead and go to the next
336:21 - command so it's going to be new a
336:24 - storage account so we'll go back here we
336:28 - could also search it here we'll go ahead
336:29 - and just just look it
336:33 - up and we'll click on that one there and
336:36 - so we have a bunch of commands um but
336:39 - you know we just did this so we're
336:40 - already familiar with the the um the
336:42 - inputs that we're going to go into this
336:43 - so we'll type in new and we're going to
336:46 - say
336:47 - a uh storage
336:50 - account and so we need our Resource
336:52 - Group
336:56 - name and this one is going to be my par
336:59 - shell uh whoops my tab nope it's not
337:04 - letting me tab that sometimes it lets
337:06 - you Tab and other times it doesn't my
337:08 - Powershell
337:09 - RG and we're going to name
337:14 - this again these names have to be very
337:16 - unique it's showing that the name is
337:18 - title case so maybe we can name it
337:22 - whatever we want I thought it had to be
337:23 - lower case because azure's really picky
337:26 - again about
337:28 - naming it's very hard to remember
337:30 - because it's so different so I'm going
337:32 - to just double check here we'll go over
337:34 - to storage
337:36 - accounts and take a
337:38 - look if I click onto
337:42 - this and I click on here uh the name
337:45 - must be unique across all Sorge account
337:47 - names it must be uh 3 to 24 characters
337:51 - long and can contain only lower case
337:53 - letters and numbers and I go over here
337:56 - and look it's showing me title case so I
337:58 - feel like it's lying to me so I'm I'm
338:00 - going to ignore it I don't believe it uh
338:02 - unless it's going to normalize it for me
338:04 - which I don't know um but you know what
338:06 - let's just let's try to put it with
338:08 - title cases because it's not supposed to
338:10 - work but we'll see what happens so I'm
338:11 - going to just say my
338:13 - whoops my uh Resource Group or sorry
338:17 - storage account storage account I'm
338:19 - going to put a bunch of random numbers
338:21 - here and then my
338:22 - initials okay we'll choose the same
338:24 - location as our Resource Group so we'll
338:26 - just say
338:27 - Central us
338:30 - and
338:31 - um we should
338:34 - specify the kind of storage it might
338:37 - default to something so we might not
338:38 - even have to um set one
338:40 - here and what what did we have to do for
338:42 - that it was kind so we'll go here and
338:46 - look up
338:47 - kind yeah here it says blob storage so
338:52 - um it's not saying the flag here
338:56 - directly well we'll just do storage
338:58 - version two it's
339:00 - fine so we'll go here and just say um
339:05 - kind
339:07 - storage version two it's interesting
339:10 - that this doesn't require notice here
339:12 - it's not indicating single quotations I
339:14 - would assume that it would want it
339:15 - everywhere but we'll go ahead and hit
339:17 - enter and see what happens and so it
339:19 - says commandlet new a storage account at
339:21 - pipeline position one failed um and so
339:24 - it's saying that the SQ SQ name was not
339:27 - supplied I'm going to do control C on my
339:29 - keyboard uh to just ignore that but it's
339:32 - trying to prompt me to say hey you got
339:34 - to fill that one in so I thought we
339:35 - could get away without it so I'll go
339:37 - back and hit up on my keyboard and I'm
339:39 - going to type in hyphen I'm going to say
339:40 - SKU
339:42 - name and we'll go with standard lrs
339:46 - because that sounds like the default to
339:47 - be honest and we'll go ahead and hit
339:49 - enter and right away we're getting a
339:51 - problem and it's saying my storage
339:54 - account Etc is not a valid storage
339:55 - account name that's because it lied to
339:58 - us it was Auto autocompleting with title
340:00 - case and I knew I knew for sure that
340:03 - wasn't right so I'm going to hit up on
340:04 - my keyboard and scroll on back and I'm
340:06 - going just take out those uh those
340:08 - capitals here
340:11 - okay oh and it's there's still a mistake
340:13 - we got to get rid of that capital S
340:19 - there and it still doesn't like it it
340:21 - might be suggesting the name is too long
340:24 - um storage count must be three letters
340:26 - and length lowercase only I'll just take
340:28 - some letters out here like
340:30 - that what does it not like oh you know
340:33 - what AB is and caps that's why so go
340:36 - ahead and do
340:42 - that I notice it's talking about up
340:44 - upcoming breaking changes so it's even
340:46 - suggesting things that might
340:49 - change and so uh you know uh B who's the
340:53 - other Andrew that is at exam Pro my
340:55 - co-founder he loves Powershell and he
340:58 - always tells me like how awesome it is
341:00 - that it gives consistent output it's
341:01 - very good at chaining programs together
341:03 - his background was managing Windows
341:04 - machines for years I more on the the
341:06 - Linux side so um you know I'm going to
341:09 - be more biased for that but uh a
341:11 - Powershell is a very very powerful Tool
341:14 - uh we're definitely not even coming
341:15 - close to tapping uh all the power of it
341:18 - right here but notice that it created
341:19 - that storage account we're going to go
341:21 - back over to uh our our portal and we're
341:25 - going to go into storage accounts if you
341:26 - don't see it there you can just search
341:28 - it and well actually I don't want to go
341:30 - here I actually want to go to Resource
341:32 - groups and what we'll do is we'll go
341:34 - ahead and just clean this up because
341:35 - we're totally done with it make sure
341:37 - it's my power shell RG not this one
341:39 - that's your Cloud shell that we're we're
341:40 - using right now we're going to go ahead
341:42 - and delete that Resource Group and I'm
341:44 - going to go ahead and copy it and paste
341:46 - it down below we'll go ahead and delete
341:48 - it we can go back over here close that
341:50 - out and uh yeah just make sure that that
341:53 - does delete but um there you go so now
341:55 - you got some exposure to bash and
341:57 - Powershell so you're on your way of
341:59 - getting some good programming skills
342:00 - there okay
342:02 - [Music]
342:06 - ciao hey this is Andrew Brown from exam
342:08 - Pro and we are looking at Azure CLI so
342:12 - what is a CLI well CLI stands for
342:14 - command line interface and it processes
342:17 - commands to a computer program in the
342:20 - form of lines of text and the operating
342:22 - system implements a command line
342:23 - interface in a shell or
342:26 - terminal so we saw a shell earlier which
342:28 - was power shell
342:30 - um but uh we'll look at what uh CLI
342:34 - commands look like here in a moment so
342:36 - the Azure CLI can be installed on
342:37 - Windows Mac and Linux once it's
342:40 - installed you would type A Z followed by
342:42 - other commands to create update delete
342:44 - View and manage your Azure resources and
342:46 - so to really show you what that code
342:48 - looks like down below we have a bash
342:50 - script but this could easily be
342:51 - Powershell and you have the commands AZ
342:54 - and then you would have what it is that
342:56 - you want to do so if you want to create
342:57 - a group you type a group create and you
343:00 - provide the name and the location or
343:02 - let's say you wanted to launch a virtual
343:03 - machine which is a server you do asvm
343:06 - create uh and then provide those other
343:08 - parameters so that is how you would
343:10 - pragmatically create um Azure resources
343:12 - and there's tons and tons of CLI
343:15 - commands uh for Azure so you basically
343:17 - anything you're looking at pretty much
343:19 - can be created with the CLI Pro
343:22 - [Music]
343:26 - programmatically all right so in this
343:28 - video what I want to to do is get you
343:29 - more familiar with Azure CLI um it's
343:32 - very very very very very important that
343:34 - you get some scripting programming any
343:37 - kind of exposure to that because most
343:39 - technical roles in Cloud require you to
343:41 - touch some kind of cod like thing um and
343:45 - again Azure uh doesn't always let you do
343:48 - click offs with all their services and
343:50 - sometimes you'll be copy and pasting
343:51 - command so it's important we get
343:53 - comfortable with that as soon as
343:54 - possible so what I'm going to do is go
343:56 - in the top right corner and open up
343:57 - cloudshell we learned how to do this uh
344:00 - previously so watch the cloud shell
344:02 - video if this is the first time you're
344:03 - launching it I'm going to go ahead and
344:05 - increase my font size to large we're
344:07 - going to wait for this terminal to start
344:09 - um I just recently had cloud cloud shell
344:11 - open so it opened up very quickly for
344:14 - you it might take longer and I want to
344:16 - remind people that the Azure CLI is
344:18 - pre-installed on here so if we type in
344:20 - AZ um we should get back some um output
344:24 - just understand that sometimes there are
344:26 - uh Network latencies so you have to be
344:28 - patient but we're getting stuff back so
344:30 - uh what would be really interesting is
344:32 - to go ahead and launch something
344:34 - anything here uh via the CLI and so
344:38 - before we do that I just want to show
344:39 - you how would you find out CLI commands
344:41 - of course we can uh type in a and see
344:44 - them here another way that we can look
344:46 - at Azure commands is by looking it up so
344:48 - we can say Azure CLI reference
344:51 - documentation because that's often what
344:53 - CLI um interfaces will have is they'll
344:55 - have a reference
344:56 - documentation and carefully looking here
344:59 - this is at the learn website which is
345:00 - fine uh we'll try the first one here and
345:04 - what I'm looking for here is the
345:05 - reference so here it says Azure CLI
345:08 - reference and I'll click reference A to
345:09 - Z I personally don't like the way that
345:12 - Azure lays out their docs for the CLI I
345:14 - definitely prefer uh the way Google or
345:17 - um AWS does it but we got what we got
345:20 - and so uh here we have a bunch of
345:22 - different commands and uh they are going
345:25 - to correspond to different things so
345:27 - let's say we want to launch a storage
345:29 - account which is something that is very
345:31 - common for us to do I'm going to type in
345:33 - storage which is one option um and we're
345:36 - going to go here and just expand it and
345:38 - we'll look at summary and so we have
345:40 - some options here um one thing I want to
345:43 - point out with the documentation is the
345:45 - status so the status indicates whether
345:47 - these CLI commands are are going to are
345:50 - are going to be supported or whether
345:53 - they uh might be uh gone in the future
345:55 - so ga stands for uh General availability
345:58 - meaning that Azure has decided that they
346:00 - like this uh feature and they're going
346:02 - to keep it uh preview means that um
346:05 - they're very likely to um they might uh
346:09 - bring this feature to all customers and
346:12 - Azure likes to have a preview and a
346:14 - gener general available um I think it's
346:18 - a subcription or something somewhere
346:19 - there's a way to access it or the portal
346:21 - is different I always forget but my
346:23 - point is is that um if you want to
346:25 - utilize uh preview features in Azure uh
346:28 - you have to go some somewhere else to do
346:29 - that um and so if you try to use a
346:32 - preview feature and it doesn't work it's
346:33 - probably because you're not in the
346:35 - whatever preview setting I'll do another
346:37 - video on that so that's very clear but
346:39 - my point is is that always stick to the
346:40 - ga do not touch preview do not touch
346:43 - experimental because if they do uh get
346:47 - rid of those things and you rely on them
346:48 - you're going to run into trouble but
346:50 - anyway I'm interested in a storage so
346:52 - I'm going to go ahead and click in Click
346:54 - into here and notice that when I clicked
346:56 - into storage we have a big drop down of
346:57 - a bunch of stuff
346:59 - and again notice um where it says where
347:02 - it says type core so it's a core command
347:04 - or some some are extensions stick to
347:07 - core stick to GA and they just have a
347:09 - lot and a lot of CLI commands other
347:13 - providers like adab us and gcp do not
347:15 - have this many commands um for whatever
347:18 - reason Azure likes to take uh uh uh take
347:21 - their services and put them under
347:23 - umbrellas uh and they also uh like to
347:26 - just keep adding stuff uh and so you
347:29 - might have um CLI commands that do
347:31 - exactly the same thing and so there are
347:33 - a lot here and it can be really hard to
347:35 - figure out what to do so I'm going to go
347:37 - over to chat jpt and we're going to get
347:38 - its help to kind of narrow down what it
347:40 - is that we want to do so I'm going to
347:42 - say I want to create a um blob storage
347:48 - account via the Azure
347:51 - CLI and we'll go ahead and narrow down
347:54 - the commands it's going to provide us
347:55 - now chachy BT can go out to the internet
347:58 - and it can bring us back stuff but we
348:00 - have to double triple check it because
348:02 - it's not intelligent uh despite it be
348:04 - calling AI but it can give us an idea of
348:06 - where to get started so the first thing
348:08 - it's telling us to do is to do a login
348:11 - and that's great but um we don't have to
348:13 - do a login because when we use cloud
348:15 - shell we're already logged in if we were
348:18 - to install the CLI on our local computer
348:20 - we would have to uh utilize ay login in
348:24 - order to First gain access so we can
348:26 - skip that step the next thing it's just
348:28 - uh saying is to create an Azure Resource
348:30 - Group which that makes sense uh we
348:32 - always need to create a resource Group
348:34 - so let's go ahead and see what we can do
348:35 - and I want you to follow along and do
348:37 - this in your own account okay so the
348:39 - first thing we want to create is an
348:40 - Azure Resource Group um and so we'll
348:43 - just quickly talk about that here I'm
348:44 - going to open a new
348:46 - tab and every time I do that it wants me
348:48 - to log in totally fine and if we type in
348:50 - the top here uh a resource Group is a
348:53 - way of grouping together resources and
348:57 - um uh it's different like if you come
349:00 - from ads everything is with an account
349:02 - if you're in uh a gcp everything's
349:04 - within a project and in Azure everything
349:06 - is within a resource Group um and so
349:09 - before you create any resources you need
349:11 - to put them in a resource Group and
349:12 - often you need to create a resource
349:14 - Group so that's what we're going to do
349:16 - we're going to go back here and this
349:17 - command is a group create so let's go
349:20 - take a look for that command over here
349:22 - and find it so I'm going to type in
349:26 - resource not very useful so what I'll do
349:29 - is just search for it man manually and
349:32 - we have resource manager that's probably
349:34 - what it
349:35 - is and here we have a group I think
349:38 - that's the command it's asking us to do
349:40 - we'll go ahead here and we have create
349:42 - so we'll go ahead and look at this and
349:45 - we can see it requires some parameters
349:47 - it wants the location so that is
349:49 - something it might want it says that's a
349:51 - required parameter uh there is the name
349:53 - that's a required parameter then we have
349:55 - some op optional parameters and we can
349:57 - do some tags so
349:59 - uh here it's saying Resource Group and
350:01 - location and so the the the location is
350:04 - going to be a Azure region and then the
350:06 - resource Group is going to be the name
350:07 - so let's go ahead and start typing that
350:09 - in here so I'm going to say
350:11 - AZ
350:12 - group um create and then we'll
350:16 - do sorry for the little popup there it
350:19 - gets into the way I'm going to expand
350:20 - this to make our lives a bit easier I'm
350:22 - going to put in here um we had a short
350:26 - flag so we have the long flag or the
350:28 - short flag FL I'm going to use the
350:29 - shorter one CU it's a bit easier to look
350:31 - at we'll do L and we probably can do us
350:34 - East
350:36 - one uh or east us that's what it is I'm
350:39 - thinking about AWS right now that's my
350:41 - problem and um the other thing is the
350:44 - name so that's a hyphen n apparently it
350:46 - can be hyphen G as well which is fine so
350:49 - we do that and I'm just going to say um
350:52 - Azure
350:54 - CLI and this will be blob because we're
350:57 - going to create a a blob storage
350:59 - account and so what what that's going to
351:02 - do is it's going to go ahead and create
351:04 - it and so notice we got Jason back
351:06 - that's usually a good indicator that it
351:08 - is working correctly notice that the
351:10 - provisioning state is succeeded
351:12 - sometimes this will come back and say
351:13 - it's creating um but resource groups
351:15 - create basically instantly let's go over
351:18 - to our Resource Group uh Tab and we'll
351:20 - give it a refresh I want to point out
351:22 - that um sometimes Azure is very very
351:25 - slow in showing you what you've done um
351:28 - azure's uh portal is one of the most
351:31 - robust portals uh compared to every
351:34 - other provider and that is great but the
351:36 - disadvantage to it is it's very hard for
351:39 - Azure to propagate that information uh
351:41 - to us and so sometimes you will do
351:43 - something and you won't see it and
351:46 - you'll think that you did it wrong or
351:48 - you didn't create it but all you got to
351:50 - do is wait around so just have a lot of
351:51 - patience when you create something you
351:53 - don't see it and double triple check
351:55 - with Azure so here we can see we've
351:57 - created our azure CLI blob so that is
351:59 - there I'm going to go back over to our
352:01 - instructions and we're going to look at
352:03 - the next one so here it's saying AZ
352:05 - storage account create and it wants the
352:07 - name and the resource Group and the
352:09 - location the SKU and the kind so what
352:12 - I'm going to do is I'm going to go over
352:14 - here and we're going to look for
352:19 - storage okay and again I just really
352:22 - want to point out that if you're going
352:23 - to use any generative AI don't blindly
352:25 - follow it double check the docs always
352:27 - double check it so here um I think we're
352:32 - doing a storage account create yes we
352:37 - are and in here I'm going to search for
352:41 - create here it is good I notice it has a
352:44 - lot of flags so there is a lot here um
352:50 - I'm not sure exactly what uh we'll need
352:52 - for this but I'm pretty sure we can do
352:53 - these basic ones and it'll be fine so
352:55 - I'm going to go back over here and type
352:57 - in a storage account create and then
353:01 - let's take a look at the flags it wants
353:03 - so it wants the resource
353:06 - Group so let's go over here and take a
353:09 - look at the flag so Resource Group can
353:12 - be a hyphen G I think I like that so
353:14 - we'll do hyphen G and it wants it to be
353:17 - the name of the resource Group we name
353:19 - this Azure CLI blob so we go ahead and
353:22 - paste that on in here good we'll go next
353:26 - back over to here it wants a name we
353:29 - know that we can put hyphen n for name
353:31 - here and notice that um the resource
353:34 - Group allowed us use the hyphen G or
353:36 - hyphen n flag to name the name but in
353:38 - this one hyphen g means the resource
353:40 - Group and hyphen N means the storage
353:42 - account name so uh there might not be
353:44 - consistency in terms of the flags uh uh
353:48 - between like short Flags between
353:50 - different commands so again just always
353:52 - double triple check and don't just
353:54 - assume we'll go here to the right we
353:56 - have our location so we'll go here and
353:58 - do uh well we got to give a name for the
354:00 - storage account now storage accounts I
354:02 - believe have to have um all the
354:05 - everything lowercase no spaces uh Azure
354:09 - is notorious for having crazy naming for
354:11 - every service they're all different and
354:14 - I think it's treated like a URL like a
354:16 - domain name so you have to make it uh
354:18 - unique so I'm going to say here
354:22 - my uh storage
354:26 - account and I'm going to just put uh a
354:28 - number in here so I'm going to put 1 two
354:31 - 3 4 and I'll say AB for my initials you
354:35 - make it very unique so that you don't
354:36 - run into any troubles we're still not
354:38 - hitting enter we'll go back over here um
354:41 - did we do the location so do hyphen L
354:44 - East
354:46 - us and we'll go back over here
354:49 - again and then there's the SKU the kind
354:52 - so I know the storage is going to be
354:54 - version two that sounds good to me so um
354:57 - I'm going to double check and look for
354:58 - the short flag as I prefer
355:01 - those so we'll go hyphen hyen kind
355:07 - here and so we have a few options blob
355:09 - storage um blob block storage file
355:12 - storage Storage storage version two so
355:15 - um I believe that we can do blob storage
355:17 - under storage version two so we can do
355:21 - either or um so I'm going to just stick
355:23 - with storage version two because it's
355:25 - totally
355:26 - fine and
355:29 - uh it's this one doesn't have a short
355:30 - flag so we'll have to do it in full also
355:33 - note that if we're using the CLI we're
355:36 - programmatically doing stuff um it's not
355:38 - going to warn us about free tier stuff
355:40 - uh when you use click offs you get a lot
355:42 - more information through the portal when
355:44 - you're using the CLI it's just
355:45 - programming so it's not going to give us
355:47 - the same amount of
355:48 - stuff so we'll go back over here and we
355:53 - need the SKU so let's go take a look at
355:55 - what it wants for the SKU the storage
355:58 - account SKU so this is going to
356:00 - determine
356:02 - um uh the the replication of resources
356:06 - and so I I just want to go with the
356:08 - standard one now notice it says a
356:09 - default value so sometimes if there's a
356:11 - default value if we if we don't include
356:13 - it it will default to it so I'm hoping
356:16 - that's what's going to happen I'm going
356:17 - to purposely leave out the
356:19 - SKU I'm going to go ahead and hit enter
356:21 - and see what
356:24 - happens okay and so it's creating it or
356:27 - running it
356:30 - and we'll just give a moment and see
356:31 - what happens
356:32 - okay all right so um we got a bunch of
356:36 - uh output back and it looks like it was
356:39 - successful um so what we'll do is we'll
356:42 - double check we'll go to the top here to
356:43 - micros Azure we'll type in storage
356:51 - accounts and we can see that we have our
356:54 - storage account so we've done something
356:56 - Pro programmatically there is for stuff
356:58 - that we can do here we can go ahead and
357:01 - create our blob we can uh list the
357:03 - containers I don't want to do all those
357:05 - things right now I just wanted to get
357:07 - you a little bit experience working with
357:09 - the CLI um and uh being comfortable with
357:13 - that another thing I can uh say is that
357:15 - the CLI will allow you to Output to
357:18 - different formats um it might be hyphen
357:20 - o or something I'm not sure if it will
357:22 - show it here because that's kind of a
357:23 - global
357:24 - flag so yeah it's hyphen o and so let's
357:27 - say we wanted data in a different format
357:30 - we could choose something instead of
357:31 - Json we could get table yaml or
357:33 - something else um so I'm going to go
357:35 - here and just say uh here it says Azure
357:38 - storage list I want I just want to list
357:40 - um all the accounts I'm going to see if
357:42 - uh that works here I'm going just say a
357:43 - I'm just guessing but I think it's a
357:45 - storage account list and will that list
357:48 - out storage accounts for us notice it
357:50 - came back as Json so if we wanted to
357:52 - change the output we can give it a
357:53 - hyphen o flag and uh the the output
357:57 - format probably will vary per um command
358:00 - so don't expect the output format to be
358:02 - for all them this is defaulted Json uh
358:05 - let's take a look at yaml and type that
358:07 - in
358:08 - here there we go so that looks uh a lot
358:12 - more readable and I I really do like
358:13 - yaml uh we could also try table format
358:16 - so let's do that that's a very common
358:19 - one when you're in the
358:22 - terminal okay there you go so kind of
358:24 - looks like a table it's a lot of
358:26 - information so maybe not as nice as we'd
358:28 - like it to be but that's the basics of
358:31 - uh working with Azure CLI it definitely
358:33 - gets a lot more complex than that but
358:35 - again I just wanted to give you
358:36 - confidence with it so now that we are
358:39 - done with that resource I just want to
358:40 - go ahead and delete it uh so I'm just
358:42 - going to go ahead and close out
358:44 - cloudshell and we're going to make our
358:45 - way over to Resource groups so I'll type
358:47 - in resource groups at the top
358:50 - here and on the left hand side I'm going
358:52 - to Azure CLI blob here is that resource
358:55 - that we created I'm going to go ahead
358:56 - and hit delete res Resource Group and um
358:59 - I'm going to go and enter the name I
359:01 - like how they say enter the name but you
359:02 - can go ahead and copy paste it the idea
359:05 - to type it in is to make sure that you
359:07 - are you know what you are deleting but
359:09 - uh they've even uh expediated that so
359:11 - that is deleting and that's all I really
359:13 - wanted to show you um with the um Azure
359:17 - CLI okay so we'll see you in the next
359:18 - one
359:20 - [Music]
359:23 - ciao hey this is Andrew Brown from exam
359:25 - Pro and we're looking at Visual Studio
359:27 - code so visual studio code is a free
359:30 - source code editor meaning it edits code
359:33 - made by Microsoft uh for Windows Linux
359:35 - and Mac OS and you can even run it in
359:38 - the cloud and if you're wondering what
359:39 - it looks like this is the editor and
359:42 - this is not to be confused with visual
359:44 - studio so visual studio is an IDE uh and
359:46 - it is also for programming but it has a
359:48 - lot of functionality built in here um is
359:51 - Visual Studio code op Source well they
359:53 - say that it is but I don't know to what
359:55 - degree I don't know if it's 100% open
359:57 - Source but this is the most popular um
360:00 - um text editor or code editor um out
360:04 - right now and Microsoft has or sorry
360:06 - Azure has a service called it's like
360:08 - Visual Studio workspaces that's on Azure
360:11 - and it allows you to spin up these
360:13 - developer environments using this editor
360:15 - right in the cloud I don't think it's
360:16 - going to be on your exam but I just
360:17 - thought it was cool to mention uh and if
360:19 - you don't have a a code editor I
360:22 - strongly recommend downloading this one
360:24 - for your computer because it is great so
360:26 - I just wanted to quick show off visual
360:28 - studio code here um so if you wanted to
360:30 - go download yourself you just type in
360:32 - Visual Studio code into Google and you
360:34 - should end up here and you can download
360:36 - a version it's for Windows uh Mac and
360:38 - Linux so you can download for anything
360:39 - and you can run it in the cloud uh on
360:41 - Azure or even launch your own server on
360:43 - other other on other uh Cloud providers
360:46 - I just have happen to have Visual Studio
360:48 - code open here with an open source
360:50 - project um just to show you what it
360:52 - looks like the the thing that people
360:54 - really like about it is just it looks
360:55 - great and it has really good plugins so
360:57 - if just go to extensions here you can
360:59 - anything you need uh you can add it and
361:01 - enhance uh this editor here if you don't
361:03 - have a code editor I strongly recommend
361:05 - downloading this and I just wanted to
361:07 - make make you uh um familiar with this
361:09 - editor
361:11 - [Music]
361:15 - here all right so in this video I want
361:17 - to introduce you to um Visual Studio
361:19 - code and maybe we can go ahead and use a
361:22 - bit of azure SDK um in order to Pro
361:26 - programmatically uh set up a resource so
361:28 - this is very similar to how we use the
361:30 - bash CLI or P Powershell CLI we're going
361:32 - to use a programming language to do it
361:34 - and um again I really believe that you
361:37 - should learn this as soon as possible
361:39 - because uh very quickly you end up
361:41 - having to touch code or scripting or
361:43 - something so get comfortable with it
361:45 - right away here um so what you're going
361:47 - to need to do is install in Visual
361:48 - Studio code I'm not going to show you
361:50 - how to install that it's not that hard
361:51 - to learn uh but you're going to go look
361:53 - for visual studio code you're going to
361:54 - install it this is a free and open open
361:57 - source um um uh coder or code editor and
362:02 - once it's installed we can get go ahead
362:04 - and start utilizing it so you go ahead
362:06 - and install it I already got installed
362:08 - in fact I got a project open here not
362:10 - the project we're going to use but this
362:11 - is actually how I um Stitch uh the big
362:14 - video when I send it over to free Cod
362:15 - Camp so I have a bunch of scripts here
362:17 - but uh what I want to do is once you
362:19 - have it installed we're going to go
362:20 - ahead and create a new um a new folder
362:23 - so on my desktop I'm going to go do that
362:25 - so let me just make some room on my
362:27 - desktop to here okay all right so I got
362:29 - some nice room on my desktop I'm going
362:30 - to make a new folder here and I'm just
362:32 - going to call it um Azure uh because we
362:36 - keep doing things with the storage
362:37 - bucket so we'll just say Azure SDK
362:40 - example uh you can name it title case
362:43 - lowercase however you want to name it
362:45 - but uh just make sure there's no spaces
362:46 - in it I know that's a bit hard to read
362:48 - on my background here but we now have a
362:49 - folder and that's just going to give us
362:51 - a place to start working with so I'm
362:53 - going to go ahead and say file open
362:55 - folder and this is point to my sites
362:58 - directory so I'm going to go back and
362:59 - I'm going to say
363:01 - desktop I think that's we have a desktop
363:04 - there
363:05 - right and um I'm going to say show local
363:08 - so it'll just open it up here make our
363:10 - lives a little bit easier I'll click on
363:12 - desktop here I'm going to choose Azure
363:14 - SDK example select that folder and so
363:16 - it's going to open that folder up and
363:19 - it's opening up my whole desktop which
363:21 - is really not what I wanted to do um
363:23 - that is totally wrong so give me two
363:25 - seconds okay all right so what I'm
363:27 - thinking is what we'll have to do is try
363:28 - this again so we'll say open
363:30 - folder and we'll go to desktop and we'll
363:34 - double click into that folder make sure
363:36 - we're double clicked into it and say
363:37 - select
363:38 - folder there we go so we're in that
363:40 - folder looks like we're not in there but
363:42 - it's here uh in the top and you know
363:45 - again I'm not going to go super heavy
363:46 - into this because this is a completely
363:48 - separate discipline but do your best to
363:50 - follow along so we want to create a new
363:52 - file you can do that by going to file
363:53 - new text file up here you can also click
363:55 - this little icon here to do that so
363:57 - we'll go ahead and say new text file and
364:00 - the question is is what are we going to
364:01 - write our code in because um we're going
364:05 - to need to uh write this in some kind of
364:07 - language and so I'm just trying to
364:09 - decide what we can use here um so that
364:12 - is a another question as well so just
364:15 - give me a second to think about it okay
364:16 - you know instead of thinking about it
364:18 - what I want to do is I'm just going to
364:19 - go ask
364:25 - um go ahead and take a look quickly so
364:27 - we'll say it's probably in the slides
364:29 - but I you know I can't remember all
364:30 - these things off the top of my head AZ
364:31 - dek
364:33 - languages and so we'll go here and we'll
364:36 - take a look and we have uh Android C go
364:40 - C C++ iOS Java JavaScript python no Ruby
364:45 - which I mean I think there's Ruby
364:46 - somewhere but uh they haven't been
364:47 - maintaining it very well so we do have a
364:49 - few options here uh the question is
364:51 - which one do we want to use uh I don't
364:54 - really like any of these languages um
364:56 - but but we're going to have to make a
364:58 - choice and so I guess we could use
365:02 - C so maybe what we'll do is go ahead and
365:05 - use
365:06 - C I almost feel like I'm going to regret
365:09 - using that so um all right so anyway
365:13 - what I want to show you here is
365:17 - um yeah we'll write some C code and
365:20 - actually we're going to cheat we're
365:21 - going to go use chat GPT because I
365:22 - really don't want to uh spend forever uh
365:24 - figuring how to do it so we'll say uh um
365:27 - using the Azure SDK for
365:31 - C uh let's deploy a new Resource Group
365:36 - or a new storage account in a new
365:39 - Resource
365:42 - Group group for blob
365:49 - storage okay so we'll go ahead and hit
365:51 - enter and we'll see what it
365:54 - produces deploy a new aure storage
365:56 - account for blob storage in a new
365:58 - Resource Group using Azure SDK you're
365:59 - going to need the following so it's
366:01 - going to say install the Azure
366:05 - SDK okay and so we'll just give it a
366:07 - moment to uh uh spit out some stuff all
366:10 - right so it's produced some code here
366:11 - and so just taking a look here we have
366:13 - our code example it's explaining
366:15 - everything here but I don't need that
366:16 - and so the idea here is that we first
366:18 - are doing our Imports most programming
366:19 - languages are going to have you require
366:21 - import resources um so obviously
366:24 - resource manager for uh uh uh creating
366:27 - the resource and then we need storage
366:29 - for storage accounts um identity for
366:31 - probably connecting to Azure um that's
366:34 - most likely what it is system is for
366:36 - system stuff so maybe for doing outputs
366:38 - and things like that and right away we
366:41 - can see that we need to create our uh
366:43 - credentials and then from there it's
366:46 - saying initialize the arm client so arm
366:48 - stands for Azure resource manager so I
366:50 - imagine um that has something to do with
366:54 - um maybe resource grips we'll see here
366:55 - in a moment so we create the Azure
366:57 - resource manager client and from there
366:59 - we can get our default subscription that
367:01 - makes sense and from the subscription
367:03 - we'll get our resource groups and we'll
367:04 - create or update a new one here and so
367:08 - here it looks like it's going to create
367:09 - our Resource Group the next we have um
367:13 - our storage management client so it
367:14 - looks like that's how we create our
367:16 - storage account or at least it's the the
367:18 - manager for it anyway and then um create
367:22 - we're creating our storage account okay
367:24 - that makes sense if this looks very
367:26 - verbose and uh tricky it is um it's just
367:30 - the nature of c c is a great language um
367:34 - but I'm just going to say that the way
367:36 - they choose to name things here I even
367:38 - find a bit confusing and I work with
367:40 - every single programming language but we
367:42 - do have some code here and so the idea
367:44 - is that we can go ahead and copy this
367:46 - code and I'm going to go ahead and paste
367:48 - this into Visual Studio code now I do
367:50 - want to point out that um in order to
367:52 - run this program we actually have to
367:54 - have C installed and I'm not even sure
367:57 - if I actually have that installed on
367:58 - this computer um so we're going to have
367:59 - to see what we can do uh there so I'm
368:01 - going to go ahead and just save this
368:03 - file and I'm just going to name it uh
368:07 - we'll just say storage new storage
368:10 - account uh. CS because that is the
368:13 - extension for C and so it says do you
368:15 - want to install the recommended C
368:17 - extension for the language we'll say
368:18 - install so the thing is is that Visual
368:20 - Studio code on the left hand side they
368:22 - have extensions and they have extensions
368:24 - for
368:25 - everything and and I just want to point
368:28 - out that Azure because uh Microsoft
368:30 - created this project and Microsoft owns
368:33 - GitHub and all this stuff is uh Visual
368:35 - Studio code has tons of synergies with
368:38 - um with Azure and in fact you can create
368:41 - resources and other things uh via uh
368:44 - Visual Studio code directly um so here
368:46 - it says the net cor SDK could not be
368:48 - located um and so we can go here and say
368:50 - get the SDK says do you want to uh uh
368:54 - want to code to open the external
368:55 - website yes and it's complaining because
368:57 - it's saying hey you don't have this
368:58 - installed it's not going to work and so
369:01 - we could go ahead and install it here
369:04 - that is one way to do it um but the
369:06 - thing is it really depends on what kind
369:08 - of machine you're on if you're on
369:09 - Windows or Linux or Mac OS it's going to
369:10 - be a different installation process so
369:14 - we can do it this way but there's
369:15 - another option and the other option that
369:17 - um I'm going to recommend is to not do
369:19 - it locally but do it in a cloud
369:21 - developer environment now most um um
369:25 - cloud service providers have have a
369:27 - cloud developer environment uh adab us
369:29 - has Cloud9 gcp has um I forget what it's
369:33 - called project idx and they even have
369:35 - one built into their uh their platform
369:37 - but for whatever reason all we get is
369:39 - cloud shell in Azure so um I like to
369:43 - think of github's code spaces as azure's
369:46 - um Cloud developer environment why it's
369:47 - not directly integrated with Azure I
369:49 - have no idea so what I'm going to do is
369:51 - I'm going to go over to GitHub and you
369:54 - are going to have to create a GitHub
369:55 - account and they're free and you should
369:57 - absolutely have one because every person
369:58 - that's working in Tech should have a
370:00 - GitHub account but I'm going to go ahead
370:02 - and log into mine I'll be back here in
370:03 - just a moment and if you don't have one
370:05 - go ahead and create yourself a GitHub
370:08 - all right so I'm in my GitHub account
370:09 - and what I'm going to do is I'm going to
370:11 - create myself a new
370:13 - repository uh and again don't worry if
370:15 - you don't know all of this just do your
370:16 - best to follow along um because there is
370:18 - a lot to learn here and I'm not trying
370:20 - to overwhelm you but let's go ahead I'm
370:22 - going to choose um the owner is myself
370:24 - so you would have chosen a username when
370:26 - when you signed up mine is Omen King I
370:28 - also have like another account called
370:30 - exam Pro Co I probably should use that
370:31 - one and we're going to just say Azure
370:33 - SDK C example uh so you can name it
370:37 - exactly the same uh these are you uh you
370:39 - can have the same name for repo that
370:41 - someone else has because it's going to
370:43 - be based on the scope of your name here
370:45 - we can make it private or public I'm
370:46 - going to make it public uh that that way
370:48 - everyone's going to see it I'm going to
370:50 - add a read me here as well and we're
370:52 - going to go ahead and create this
370:54 - repository so go ahead and create that
370:57 - and we'll just give it a
370:59 - moment and so now that that's been
371:01 - created um you're not going to have this
371:03 - get pod button here but what I'm going
371:05 - to do is drop this
371:08 - down and it's sorry code I want the code
371:11 - button here and we have this option
371:13 - called code spaces and so here um code
371:16 - spaces does have a free tier or they
371:19 - should have a free tier anyway yeah up
371:20 - here and the free tier is going to let
371:22 - us run for a short period of time I'm
371:24 - not going to get fully into that because
371:26 - because we're not going to be doing
371:27 - enough coding to even worry about that
371:29 - but we're going to go ahead and create
371:30 - ourselves a code space on Main and U
371:34 - honestly I actually prefer git pod for
371:36 - cloud developer environments the reason
371:38 - I'm using codes spaces is because um
371:41 - Visual Studio code has a Marketplace so
371:43 - if we go ahead and type in Visual Studio
371:46 - code
371:47 - Marketplace and um these are extensions
371:51 - for visual studio code it's when we're
371:52 - over here on the Le hand side and we're
371:54 - installing uh fun plugins or extensions
371:57 - they're coming from this Marketplace and
371:59 - even though I prefer git pod um uh this
372:02 - portal this is or this Marketplace is
372:05 - provided by Microsoft and it's a
372:07 - proprietary um Marketplace so all of the
372:10 - official Microsoft Integrations are here
372:13 - and if you use um uh a git pod you're
372:16 - not going to be able to access the full
372:18 - Suite of these you could technically use
372:20 - them if you opened G pod within local
372:23 - Visual Studio code I'm not going to do
372:24 - that here today we're going to just go
372:26 - ahead and use um code spaces and I don't
372:29 - use code spaces that often but we're
372:31 - going to use it here the first thing I
372:32 - want to do is change the theme because I
372:34 - do not want to look at white so I'm
372:36 - going to go all the way down to the
372:37 - bottom to this Cog here and I'm going to
372:39 - go and go to settings or themes here we
372:43 - go and we'll choose color theme and I'm
372:45 - just going to go and say dark Visual
372:47 - Studio code and now my eyes are thanking
372:49 - me for uh putting that effort in and so
372:52 - what I want to do is create a new file
372:54 - so we can upload new files here by
372:56 - dragging them so on our desktop here uh
372:59 - we have this folder uh and this file so
373:01 - I'm going to go ahead and just drag this
373:03 - file on
373:05 - over okay and the thing about uh codes
373:09 - spaces and and G pod is that they should
373:11 - have a lot of these things pre-installed
373:13 - so down below here it says do you want
373:14 - to install the recommended C dev kit yes
373:17 - please I would love to have the dev kit
373:19 - so the devkit helps you manage your code
373:21 - with a Solutions Explorer and test your
373:24 - code sounds great to me and we're going
373:26 - to go Ahad ahead and let that install
373:27 - now I want to point out that the way
373:30 - these Cloud developer environments work
373:31 - is as long as you are running them they
373:33 - are consuming spend so if you are trying
373:37 - to walk away and go get coffee or or
373:39 - food please please please make sure you
373:41 - close the tab um so that it's not just
373:44 - running and you're uh exped uh utilizing
373:48 - uh credits or usage uh again you're on a
373:50 - free tier but let's make sure we don't
373:53 - use up all that free tier so I think
373:55 - that extension is now
373:57 - installed and so uh we should start to
374:00 - be able to use uh C so what we'll do is
374:02 - go back over here and we have our new
374:04 - file and it's right here uh and so we
374:07 - have our program uh and so we should be
374:10 - able to run it so there's a few values
374:11 - we need we need our subscription ID our
374:13 - Resource Group name our storage account
374:15 - our location okay so these are the few
374:18 - things we're going to want to fill out
374:20 - um so I'm going to go here and yeah I'll
374:22 - take West us I don't care it doesn't
374:24 - matter we'll say West us then we have
374:26 - our storage account name remember that
374:28 - has to be very unique so I'm just going
374:30 - to say hello world and I'm going to put
374:33 - a bunch of numbers here and I'm going to
374:34 - say AB remember to keep it lowercase and
374:36 - not any trouble here and here for the
374:39 - resource resource Group we're going to
374:40 - say my um SDK did we already create
374:44 - one no we didn't so we'll say my
374:47 - SDK
374:49 - um RG and then we need our subscription
374:52 - ID so we'll go over here subscription ID
374:56 - is is going to be um if we click uh into
375:00 - our
375:02 - subscriptions it's right here so we'll
375:04 - go ahead and copy that
375:05 - in okay and we'll make our way back over
375:10 - to here I'm going to go ahead and paste
375:12 - that
375:14 - in we'll say allow good we'll click oops
375:19 - try not to add any additional characters
375:21 - by accident be very careful but yeah
375:23 - that looks fine to me and so I filled in
375:25 - all the things that it's say saying that
375:26 - I need I also want to point out that you
375:28 - know chat chapt generated the code but
375:32 - it doesn't always give you good code so
375:34 - just understand that we could run this
375:36 - and it it could possibly not work um and
375:39 - it might even give us things that we
375:40 - don't want so always make sure you can
375:42 - understand what you're reading so here
375:43 - it's saying it's using the standard lrs
375:45 - which is good it's using storage version
375:47 - two so everything that we've been doing
375:49 - up to this point and so now I want to
375:51 - run this code um so uh again I don't run
375:54 - C code a lot but sometimes it uses mono
375:58 - sometimes it uses um different engines
376:00 - for running but let's go take a look at
376:02 - our extensions and we'll click into this
376:04 - one and see if there's any options to
376:07 - start running it so it does say there's
376:09 - like build and run options
376:12 - here um so it says command
376:15 - shift net build so it's possibly we can
376:19 - build it that way and that's probably
376:20 - the way I'd like to build it so we'll go
376:23 - back over here and the thing is that we
376:25 - have haven't logged into anything so
376:27 - it's my assumption that this isn't going
376:28 - to work okay so what I want to do is I
376:31 - want to open up the command pallet so I
376:33 - believe we go down here to the bottom
376:35 - left corner click the Cog if we do if we
376:37 - type in shift uh uh control shift p or
376:41 - click this button it'll open the command
376:42 - pallet and what we're looking for is
376:44 - that net build so I'm going to go ahead
376:45 - and do net build and see if that
376:49 - works I did click it we'll try this
376:53 - again command
376:54 - pallet says we used itm
376:57 - build and I'm not seeing anything
377:01 - happening so did it build I'm not sure
377:05 - so give me just a moment all right so I
377:08 - went over and I asked chbt how can I
377:10 - just run it and it was not helpful
377:12 - whatsoever um it did tell us that we
377:14 - should probably have the a uh the um the
377:17 - Azure seall which I absolutely agree so
377:19 - this is a great opportunity for us to uh
377:21 - do that here in fact it might already
377:23 - pre be pre-installed so if we just type
377:25 - in a is it here here no it does not um
377:28 - so maybe that's something we can go do
377:30 - so I'm going to go type in AZ CLI
377:32 - install and we'll go get the
377:34 - instructions for
377:35 - that and so I want to install this for
377:39 - Linux uh we're probably on Ubuntu or
377:42 - Debian so I'm going to go ahead and
377:43 - click that and I'm going to go to
377:44 - install Azure
377:46 - C and so we want this on line command
377:49 - I've done this a lot of time so I know
377:50 - it's this on line command so we'll go
377:51 - ahead and copy that and we'll go back
377:54 - over to GitHub code spaces and we'll go
377:57 - and paste that in there now I realize
377:59 - this font might be a little bit small so
378:01 - while that is installing I'm going to go
378:02 - ahead and increase our
378:05 - font so I'll go ahead and increase our
378:08 - font size I'm going to type in here
378:12 - terminal and if you're finding that I'm
378:14 - going really fast the great thing is you
378:15 - can always go back and watch the video I
378:18 - really do encourage you to try to work
378:20 - through the steps and try to figure out
378:21 - what it is that I'm doing um of course I
378:24 - could go a little bit slower but
378:26 - um the best learning is the part where
378:28 - you're going to go out and uh you know
378:30 - try to really figure out what it is that
378:32 - I'm doing here so that's why I'm not
378:34 - being super super detailed and slow with
378:36 - these steps um but uh you know just be
378:38 - aware of that so I'm just typing
378:40 - terminal font in here because I want to
378:42 - increase that
378:44 - font uh there it is and so we'll just
378:46 - say 24 there we
378:48 - go that might be a little bit too big
378:50 - we'll go down to
378:51 - 20 okay and so the CLI is now installed
378:54 - so if we type in AZ
378:56 - um it will now should prompt us and so
378:59 - now the next thing we want to do is log
379:00 - in so I'm going to type in a login and
379:02 - so what it did is it as soon as we typed
379:04 - in a login it popped up a new browser
379:07 - window and it's allowing us to connect
379:09 - to Microsoft
379:10 - Azure so I click this and uh even though
379:15 - it's not going anywhere that's totally
379:17 - okay we'll go back over here and it
379:18 - didn't work because we are not doing
379:20 - this on our local machine we are doing
379:21 - this within a browser so it says if uh
379:25 - if no browser is available or if the web
379:27 - browser fails to open use the device
379:28 - code below so that's what we're going to
379:30 - do we're going to actually do that
379:31 - instead so I'm going to type in a login
379:34 - hyphen hyphen user device code and hit
379:39 - enter okay and we're going to give it a
379:41 - moment here oh and then it says copy
379:43 - this link so we're going to go to this
379:45 - link
379:46 - here and hit
379:49 - enter and it's going to say enter this
379:51 - code in and so we'll go
379:52 - ahead and enter in this code that it
379:57 - want okay and we'll hit next and then
380:00 - we'll pick our account are you trying to
380:03 - log with the a CLI we absolutely
380:05 - are we'll go back over to
380:08 - here and it now gives us output so we
380:11 - are now logged into Azure CLI so now
380:15 - that the CLI is installed um we're in
380:18 - better
380:19 - shape the thing is when you when you log
380:21 - into the Azure CLI uh I don't know where
380:24 - it is but it's probably dumping some
380:26 - kind of file locally onto this
380:28 - computer onto this workspace if I type
380:30 - in LS so somewhere in here I'm not sure
380:33 - where but somewhere in the in the in
380:35 - this on the storage of this workspace in
380:38 - the cloud it's storing the credentials
380:41 - to log Us in so we don't have to pass in
380:43 - or we shouldn't have to pass in
380:44 - credentials here and when we run the
380:46 - script it's going to rely on that local
380:48 - file uh and it should pull it from these
380:51 - default credentials so the next thing I
380:53 - want to do is run this program
380:56 - and it really did not tell us how to do
380:58 - that so um I I should know how because I
381:01 - do have uh my own uh unpublished thing
381:07 - so I'm going to go take a look and find
381:08 - those instructions all right so I just
381:10 - want to point out that you will not have
381:12 - access to this this is totally private
381:14 - but I'm just trying to find notes from
381:15 - it and I also wanted to prove that I
381:17 - actually do know all the programming
381:19 - languages for cloud um but knowing them
381:22 - uh when I say I know them I mean like
381:24 - I've used them all and I've made really
381:25 - good notes notes and so when I need to
381:26 - go back to them I can always look it up
381:28 - and so somewhere here we should have
381:30 - some notes for
381:31 - c um and because there's a few different
381:34 - ways we can run it there's a program
381:37 - called CSC uh which is the turbo
381:40 - compiler um so it depends on what we
381:44 - want to
381:46 - utilize and we could use
381:51 - nougat we could have also created a net
381:54 - uh a net project that's probably what we
381:55 - should have done um so that's probably
381:58 - what we should have done is we probably
381:59 - should have created ourselves a net
382:01 - project because now that I'm um
382:03 - remembering that's pretty much the way
382:05 - that we do it okay and that's going to
382:07 - make our life a lot easier for um
382:11 - utilizing so what I'm going to do is
382:13 - just take a look here and let's go back
382:15 - to chat 2bt and say okay um how do we
382:20 - use the Azure SDK C and we create a new
382:25 - new uh
382:28 - uhet
382:29 - project okay and so this should be more
382:31 - in line in terms of what we want so chbt
382:35 - is only good if you know what to ask it
382:37 - and it's talking about new get packages
382:38 - and that definitely is what it looks
382:40 - like I was doing there before so we'll
382:42 - give it a moment here to help us uh see
382:45 - what's going
382:47 - on I just want those
382:54 - commands
382:57 - and it's asking us to do this through
382:59 - it's it's like telling us to click
383:00 - through it's going it's saying like go
383:02 - up here and click click click like
383:04 - create a new create a new project in
383:06 - there but that's not how I want to do it
383:07 - I want to do it via the um the CLI and
383:11 - all I wanted to know was whoops I just
383:13 - closed that tab we actually needed that
383:14 - tab um but what I wanted to know was
383:17 - what framework version does it want us
383:19 - to use because uh that could matter
383:23 - right and that's what we're not getting
383:25 - answer uh for so that's kind of
383:27 - important so we'll go back over to
383:30 - here and it's really really really not
383:33 - helping
383:36 - us this is not helpful whatsoever so I'm
383:40 - just going to tell it to stop talking
383:41 - because I know it's not helping us and
383:43 - I'm just going to pull up that example
383:44 - again just give me a moment all right so
383:46 - I have this pulled up again I'm going to
383:47 - go back to my hello world again you're
383:48 - not going to have this you don't need
383:50 - you don't need to have direct access to
383:51 - this it's fine um and then down below
383:54 - there is the thing here so we need to
383:56 - create ourselves a new project we're
383:57 - going to say new console because it's a
384:00 - console project and we're going to want
384:01 - to have that package so I'm just going
384:03 - to drag this off screen so I can see it
384:05 - and type it and then you'll just have to
384:07 - follow along here with me okay just give
384:09 - me just two
384:12 - seconds to be able to see this
384:17 - here
384:19 - and okay so what we're going to do is go
384:21 - back over to
384:22 - here to our project and and I'm going to
384:26 - try this I'm going to typee in new new
384:29 - console hyphen n we're going to say
384:31 - package. net and we're going to try
384:34 - framework net 60 even if there was a
384:38 - newer version of the framework we could
384:40 - use for um C or for net sometimes it
384:44 - doesn't like the latest version um so
384:47 - even over here like I made a note I said
384:50 - even though net is the latest neither
384:51 - fake nor bogus works with net 7.0 so you
384:56 - know I'm going to try to use seven and
384:58 - hopefully we're not going to run into
384:59 - issues
385:02 - here and so it did a bunch of stuff and
385:05 - it created this uh package over here so
385:07 - it actually created a folder called
385:08 - package. net if we open it up uh we have
385:12 - a program and so that's where our code
385:13 - has to go so I'm going to go ahead and I
385:16 - know this is a bit of a mess but I'm
385:17 - going to go ahead and copy this over
385:18 - here and I'm going to take all of this
385:21 - and we're going to cut this we're go
385:23 - over this program and we're we're going
385:25 - to paste it into here okay and I'll
385:27 - delete the old file
385:30 - here so now we have um our package um
385:34 - and we're in better shape so now we can
385:36 - probably use those net commands to um
385:38 - build the package that's probably what
385:40 - we can do here so that's what I would
385:42 - like to do next so I have to find that
385:46 - command um I believe it's just net run
385:49 - so if we type in
385:52 - netrun um that should probably do it
385:56 - couldn't find a project so we probably
385:57 - have to CD into that folder so I'll type
385:59 - in CD package
386:02 - h.net enter I'm going to type in LS to
386:05 - see what's in there I'm going to type in
386:06 - cleer clear to clear the
386:09 - screen I'm going to go ahead and type
386:12 - Inn net
386:16 - run okay and hopefully it's just going
386:18 - to run it now we didn't install any uh
386:20 - packages for it so I don't know how we
386:22 - would know how to run these it looks
386:24 - like it's actually complaining it's
386:25 - saying uh the typer namespace name Azure
386:27 - could not be found it's talking about
386:29 - this up here so normally you like in
386:31 - programming languages you have to
386:32 - install packages or libraries and every
386:35 - single um programming language usually
386:38 - has its own package manager and I
386:40 - believe the one for
386:42 - um uh net or the the one for that one is
386:46 - called nougat n u g so there's probably
386:49 - a way to add it and it's actually
386:51 - probably part of because I'm looking at
386:53 - my commands here it's probably part of
386:55 - um uh n get's probably part of net so
386:58 - I'm going to type in net add package and
387:01 - we need to figure out what the package
387:02 - name is so I'm going just type in Azure
387:04 - because it's probably what it is I'm
387:05 - going to go ahead and hit enter and uh
387:08 - we have to actually spell net correctly
387:10 - for that to work again this is just me
387:12 - totally guessing but I believe that's
387:15 - what's going to work and so I go up here
387:18 - and it looks like it's trying to install
387:20 - something it's talking about this
387:22 - falling back here and then it says error
387:25 - there is no version available for the
387:27 - package Azure so clearly there is uh
387:31 - something more to this here so
387:33 - Azure
387:35 - uh
387:37 - net net n get package and version so
387:42 - that's what I'm looking for
387:46 - here
387:48 - okay and I'm just trying to
387:51 - find what it is so I don't want to
387:55 - search the internet for that so I want
387:57 - to install the Azure SDK via
388:02 - net add package what is the
388:08 - command okay once you know
388:11 - programming chat GPT is great because
388:14 - you can narrow it down and help you save
388:15 - you some time but uh it's not always
388:18 - easy and sometimes it just doesn't tell
388:20 - you what you want to hear right away so
388:21 - here it's saying Azure identity ah so it
388:24 - looks like we might have to do do them
388:25 - individually okay so let's go give that
388:28 - a try so I'm going to go back over to uh
388:31 - GitHub uh in our uh code spaces now
388:34 - let's try each of these individually so
388:36 - I'm hitting up I'm going to try
388:39 - identity let's see what
388:41 - happens it looks like it's installing
388:43 - that looks great okay great so we're on
388:45 - to something here excellent so we have
388:48 - that one the next one is resource
388:51 - manager so I'll paste that in there
388:53 - enter
388:55 - just going to bring this over here um I
388:58 - don't know if we need to specify these
389:00 - individually underneath so I'm just
389:02 - going to copy them anyway and just try
389:04 - them again I don't know if we have to do
389:06 - that often when you have the top level
389:08 - one you get them all but since um doing
389:11 - the top level Azure didn't work I don't
389:13 - trust it and it did install something so
389:14 - that looked like that work we'll do
389:16 - storage
389:18 - next and these two are not going to do
389:21 - because these are buil-in packages we
389:23 - don't have to go ahead and and install
389:25 - them very common for most languages so
389:27 - I'm going to type in clear here to clear
389:29 - on our screen I'm going to hit up up up
389:31 - till we get back to that run command and
389:33 - we're going to try
389:35 - that it says there is no given argument
389:37 - that corresponds to the required
389:39 - parameter data um here and it's saying
389:42 - on line 2490 so we're going to go down
389:44 - below and look at line
389:46 - 24 and it's complaining about this uh
389:50 - saying something about data so there's
389:53 - no argument given that responds to the
389:55 - required parameter
389:57 - data um and so probably what might be
390:00 - happening here is either well chbt gave
390:04 - us bad code um or it it's looking at Old
390:07 - documentation so it's not that it
390:09 - purposely gave us bad code it just
390:10 - doesn't know what's the latest there's a
390:12 - few other errors here like the name s s
390:15 - KU name does not exist in the current
390:16 - context the kind does not exist in the
390:19 - current context and it's talking about
390:22 - this here so it really looks like
390:25 - like um uh chat GPT lied to us okay so
390:31 - what we can do is we can just go ahead
390:33 - and paste this into chat GPT and see if
390:35 - it can try to solve it for us if not we
390:37 - can go look it up ourselves uh we get
390:39 - the following errors uh from the code
390:44 - provided earlier in this
390:51 - chat okay so uh for me like I would just
390:54 - go out to the documentation go fix it um
390:56 - I'm trying to show you how you would do
390:58 - this if you don't have the same kind of
390:59 - uh programming skills so here it's
391:01 - saying the errors you encountered uh
391:03 - project suggest some issues great so
391:05 - it's just going to tell us what problems
391:07 - it had and then we're going to wait just
391:08 - a moment and find out um what it
391:13 - is make sure you have the latest
391:14 - packages well we just installed them so
391:16 - it should be
391:20 - correct okay well the other thing is
391:24 - that we don't know what
391:25 - versions uh Azure was using right so
391:28 - that might be the
391:31 - issue check the latest SDK
391:35 - documentation of
391:38 - course yeah so it's okay the suggest
391:42 - code
391:44 - changes like come on you're not really
391:46 - helping me today chat
391:53 - GPT
391:58 - all right and we'll take a look here at
391:59 - what it's
392:02 - saying so looking at this very
392:08 - carefully here it says uh new Resource
392:12 - Group data and then this one here is
392:14 - saying create or
392:15 - async um so it looks slightly different
392:17 - the meth seems to require additional
392:18 - parameter okay it's guessing it doesn't
392:20 - know what it's doing so I really don't
392:22 - trust it anymore and so what we'll do is
392:25 - we'll go back here and take a look at
392:26 - our code the first one it failed on was
392:27 - line
392:29 - 24 all right and so that's on here so
392:34 - um we need to go figure this out I'm
392:36 - going to close some of these tabs
392:37 - because we're kind of getting
392:38 - overwhelmed with tabs
392:42 - here and I'm going to go type in Azure
392:45 - SDK
392:47 - C and we'll go over
392:49 - here uh we'll say storage
392:53 - accounts
392:56 - and we're going to try to figure out if
392:58 - we can find some official
393:06 - docs okay ay login we've already done
393:10 - this here they're using visual studio
393:12 - we're not using uh well this this is how
393:14 - it did it over here which is
393:17 - fine um but we just want to see the
393:19 - reference docs so yeah it's talking
393:22 - about blob storage which is great let's
393:23 - go to reference
393:28 - Azure uh it might be whoops might be
393:32 - over
393:33 - here Azure
393:35 - SDK C reference
393:41 - documentation we'll go over here and uh
393:44 - we're looking for these commands so the
393:46 - first one it it mucked up on was line 24
393:49 - so I believe this one's
393:50 - okay uh this is for creating a resource
393:53 - Group
393:55 - so we'll go here and I'm going to search
393:56 - Resource
393:59 - Group it's probably under resource
394:03 - manager
394:04 - and here showing that we add that net
394:07 - package so that makes sense uh and so we
394:10 - have this line here so if we go back to
394:12 - our code do we have that line Looks like
394:14 - we do right new arm client uh yeah it's
394:18 - down here sorry new arm client so that's
394:20 - right now we get a resource Group
394:23 - collection
394:25 - so this one's slightly different it's
394:27 - trying to do it all in one go um which
394:29 - that's one way of coding it but I
394:30 - actually kind of prefer what they're
394:31 - doing here in the documentation so I'm
394:34 - going to go ahead and grab this so that
394:35 - we assign this to its own
394:37 - variable okay in coding you can do
394:40 - things uh multiple ways so um you know
394:43 - one code can do the exact same thing as
394:44 - something else and be written
394:45 - differently that can make it very
394:47 - confusing if you don't know what you're
394:48 - looking at we'll go ahead and paste this
394:50 - one NE uh in next so uh looks like I cut
394:55 - off a bit of that code
394:58 - there okay and so this is now the
395:02 - equivalent of this so that gets that
395:04 - part and then this is equivalent of that
395:07 - so that's that part and so next thing we
395:08 - need to do is this create or async thing
395:10 - so we'll go to the next
395:13 - step
395:15 - and we already have uh these two things
395:18 - set up here as
395:21 - strings this one set as an Azure
395:23 - location
395:25 - so we probably want to do what they're
395:26 - doing here
395:27 - too okay so I'm going to go up here and
395:29 - paste this in like this
395:31 - instead
395:34 - okay um and it really depends on what
395:36 - the thing wants so maybe in the older
395:39 - the older SDK it took a string but now
395:42 - it looks like it takes a a variable data
395:45 - type of azure location that's why I'm
395:46 - doing it this way okay um so that looks
395:50 - fine there the next part is Resource
395:53 - Group data
395:55 - so that looks very similar to our code
395:58 - here notice it's not doing a create or
396:00 - async update I mean that's probably one
396:02 - way of doing it and probably a good way
396:04 - of doing it make sure you put these
396:05 - semicolons on the end here um C really
396:08 - likes these some languages don't care
396:10 - but this one does and then it does it on
396:12 - the next step here so it does it
396:15 - here okay so it's still doing that
396:18 - operation so we'll paste that
396:21 - in and I don't know where it went didn't
396:24 - really go where I wanted to go we'll go
396:26 - ahead and paste that in again here and
396:28 - we'll hit
396:30 - enter so we have arm operation uh I
396:34 - don't feel like explaining this part but
396:35 - that's a feature of C coding uh that's
396:39 - like an interface I believe I think
396:40 - that's what they call it uh so we have
396:42 - to create or upsate uh update or async
396:44 - so wait until it's done uh pass in the
396:47 - resource Group name which is that up
396:49 - here and then pass in the resource Group
396:52 - data which is that here and so that
396:54 - takes care of this part okay so we've
396:56 - now replaced that part of the code um so
396:59 - that is fine that will create our
397:02 - Resource Group and the next thing we
397:04 - need to do is uh create our storage um
397:07 - our storage account so to be honest
397:10 - because this code is so hard to do I'm
397:13 - going to make it a lot easier for us I'm
397:15 - just going to wipe this part out because
397:16 - if we can just make a resource Group
397:17 - we've kind of done enough coding here
397:20 - but uh the whole process we went through
397:23 - in terms of of uh you know think like
397:26 - starting with a single file and having
397:27 - to work with it and then we moved over
397:29 - to the CD uh um uh uh GitHub codes
397:32 - spaces which is a cloud developer
397:34 - environment and we had to do some
397:35 - research this is totally normal this is
397:37 - what happens every single day so I'm
397:39 - really happy that we're able to uh show
397:41 - that even if it is a bit of a mess but
397:43 - let's go ahead and see if uh this works
397:46 - um the only thing I'm wondering is about
397:47 - this Azure location how does it know
397:48 - about it because we didn't have any
397:50 - requirement up here but we'll go ahead
397:52 - and we'll try to do a net run and it
397:54 - might complain about that so it says the
397:56 - variable subscription ID is assigned but
397:58 - the value is never used and that's true
398:00 - we don't actually ever use it anywhere
398:01 - here the variable storage name account
398:04 - is a sign but it's the value is never
398:05 - used and that's because we don't ever
398:07 - use these so um these are warnings
398:10 - they're not errors but I'm going to go
398:12 - ahead and delete this one up because
398:13 - we're actually not using a storage
398:14 - account name whoops that's a bit too
398:16 - much and we should probably be using a
398:19 - description ID but for the time being
398:21 - I'm going to comment that out I'm going
398:22 - to assume that it can in uh infer the
398:24 - subcription ID based on when we did the
398:27 - a login so we're going to go and go up
398:30 - here a bit it says the typ or name space
398:32 - aure location could not be found that's
398:34 - what I I thought was going to
398:36 - happen so how would we include that in
398:40 - here um we already have resource manager
398:43 - in here right we do and we're not really
398:45 - using these other ones anymore um so
398:48 - this one I'm not 100% sure so we'll
398:52 - say add meure
398:56 - location and we'll go back over to here
398:59 - because they this is the thing with
399:01 - tutorials they don't always tell you all
399:03 - of the code they're sometimes missing
399:05 - something so uh we need to go figure
399:08 - that out and I'm going to go back over
399:13 - here okay so it cannot be found and
399:17 - we'll use y old Google for this because
399:20 - it should be smart enough to do
399:23 - this
399:27 - it's not telling us here so we'll go and
399:29 - try chat
399:30 - GPT um Azure location is not found uh in
399:36 - my C script what package do I need to
399:43 - install you'd think it'd be the resource
399:45 - manager
399:49 - one okay just tell me what I want to
399:52 - install
399:54 - it does say Azure resource
399:57 - manager so coming back over to here in
399:59 - our code we have it right
400:07 - here and we have those two there
400:18 - yep I mean I'm pretty sure we installed
400:22 - that uh we probably still need the re
400:23 - resources one in so I'm going to bring
400:25 - that
400:26 - back whoops whoops whoops
400:30 - whoops and we'll go ahead and paste that
400:32 - in we'll save that
400:36 - um yeah this one's quite the pickle
400:40 - so the Azure location does not exist in
400:43 - the current
400:47 - context all right let me go figure it
400:48 - out okay all right so I'm not getting uh
400:51 - much luck here but I imagine that this
400:53 - might be actually olving as a string
400:54 - anyway I'm not 100% sure so I'm going to
400:57 - try to cheat and I'm going to try to
400:59 - make this a string and see what happens
401:01 - and it might work uh but I'm not 100%
401:03 - sure so I'm going to go ahead and just
401:04 - say um West us here I'm going to go
401:10 - ahead and comment this out and fingers
401:13 - crossed that it's going to let us do
401:15 - this programming is not always easy um
401:18 - it's it's sometimes like this it says
401:20 - the client does not exist in the current
401:22 - context the the name name wait until
401:24 - does not exist in the current context
401:26 - wow it's really making our lives super
401:29 - super super difficult here it's talking
401:32 - about
401:33 - these
401:34 - um and it's frustrating because it's not
401:37 - showing us in this code
401:39 - example all the stuff so I'm going to go
401:41 - ahead and copy this code example go back
401:43 - to chat gbt um
401:48 - uh uh can you show me what
401:55 - using
401:56 - statements are missing and should be
401:59 - added to get this code to
402:02 - work very very often programs do not
402:06 - show you all those things and it drives
402:07 - me
402:08 - crazy okay and it could be because like
402:11 - if you're using visual uh Visual Studio
402:13 - which is not the same thing as Visual
402:14 - Studio code it would automatically add
402:17 - those in
402:20 - there okay and so here it's saying okay
402:23 - we got to use models for Azure
402:27 - location okay but what
402:29 - about but what about um some of these
402:32 - other ones like well anyway we're going
402:35 - to go ahead and copy them in and we're
402:36 - going to give it a go we didn't have
402:38 - this Azure core here before that
402:39 - probably is very important so we go
402:41 - ahead and paste that in and I'm going to
402:43 - go ahead and uh do net uh
402:47 - package uh was it new or install or it's
402:50 - add Azure core we'll do that
402:55 - you know what if we did python or
402:56 - JavaScript we have been done this a long
402:58 - time ago but uh you know I would say
403:01 - that getting exposure to net is probably
403:03 - the best one for uh working with Azure
403:06 - here so I don't know if it installed all
403:09 - of these we'll try resources we probably
403:11 - don't need the model
403:14 - part um oh sorry this is resource
403:19 - manager
403:22 - resources
403:24 - and then we'll go here and we'll say
403:26 - resources models again I don't know if
403:28 - we really need all the the end ones like
403:30 - that I don't think so yeah there's no
403:32 - versions of it so probably the upper
403:34 - ones is the one that works we'll go
403:36 - ahead and try this again please please
403:38 - please work or give me something
403:40 - different the name client does not exist
403:42 - in the current context it is killing me
403:43 - this program client where is that here
403:46 - let's search for that let's look for
403:49 - that
403:52 - client right here
403:55 - client um well maybe it's because this
403:58 - one's named a bit differently so we're
403:59 - coming back to code this one's called
404:00 - client right here this one is called arm
404:03 - client so we'll just change this to
404:04 - client okay we'll save that we'll hit up
404:07 - please please
404:09 - work getting closer we have this wait
404:12 - until say what about wait
404:16 - until see if you figures that one
404:22 - out
404:29 - and it's telling me to use Azure in the
404:31 - top level that seems kind of uh
404:33 - exhaustive the wait until uh you need to
404:35 - include Azure name space okay I mean
404:38 - that doesn't sound right to me but we'll
404:39 - go ahead and do that anyway unless it's
404:41 - saying I mean if it's in that Nam space
404:43 - couldn't we just say Azure do wait until
404:45 - I'm not really sure but we'll go ahead
404:48 - people that are probably like better C
404:50 - programmers than me are just cringing
404:52 - watching me do this but go ahead and uh
404:54 - try to see if that we get that working
404:56 - here we still say
404:57 - run please tell me you don't need me to
405:00 - install Azure as well because we have it
405:02 - installed like 10 different ways please
405:04 - please please
405:07 - work it's taking time so I mean that's
405:10 - probably a good indication oh it worked
405:14 - okay so I'm going to go back over here I
405:16 - cannot believe that worked that was so
405:18 - so hard and we never even created a
405:20 - storage count within it so this one's
405:21 - called my SDK RG
405:24 - um so what we're going to
405:26 - do why does it say St oh because the
405:29 - comment still says that down here below
405:31 - so just say uh Resource Group
405:34 - here and for all our hard work let's
405:36 - save that so um we never have to look
405:38 - for that again it's trying to include a
405:40 - lot of junk in here um so I don't want
405:43 - all this stuff otherwise uh that'd be
405:45 - too much to commit so I'm going to go
405:47 - here and make a new dog ignore file dog
405:51 - ignore okay and I want to ignore this uh
405:54 - Bin directory and this probably object
405:56 - directory no just the bin directory um
405:59 - make sure we spell this right
406:01 - dotg
406:03 - ignore and in here I'm going to say
406:05 - ignore I want to ignore package. net
406:09 - bin uh and then Aster so it should
406:12 - ignore that entire directory if we go
406:14 - over here and we give this a
406:17 - refresh um just going to make sure this
406:20 - is all correct
406:22 - here
406:24 - there's a lot of stuff in here I don't
406:26 - think we should be seeing that much so
406:27 - I'm going to go here and do
406:29 - package. net for SL obj debug so I have
406:35 - a feeling that it's trying to include
406:36 - all this stuff in
406:38 - here there we go and so this looks a lot
406:41 - more manageable to me I don't know if we
406:44 - want to
406:45 - include uh this file this looks like it
406:47 - should be in there yeah I'm going to go
406:48 - ahead and just go ahead and add this
406:50 - code and we'll just say uh create an
406:53 - measure Resource
406:55 - Group using the C SDK if you were able
407:00 - to get to the end here pat yourself on
407:02 - the back because that was uh quite the
407:04 - challenge uh if you're just able to
407:06 - watch the video that's totally fine as
407:08 - well um here it should commit and push
407:11 - so I've pushed my code I'm going to go
407:13 - back over to
407:15 - um uh the the repo in GitHub so go back
407:19 - over
407:21 - here and I'm going to search for
407:25 - Azure what do we call this this is under
407:27 - exam Pro for you you it might be
407:30 - different I called it this here Azure
407:32 - SDK C I just want to make sure my code
407:34 - is here it is if you are trying to do
407:38 - this and you do not want to struggle you
407:39 - can go find my code and copy it here but
407:42 - again I'm just trying to get you
407:44 - exposure to this stuff I'm not trying to
407:45 - make you super programmers so it's not a
407:47 - big deal um we're done with this uh code
407:49 - space so I do want to shut it down and I
407:52 - don't do this very often with code
407:53 - spaces let's see if there's like shut
407:55 - down
407:57 - close stop okay here it is code spaces
408:01 - stop current codes space I'm going to go
408:03 - ahead and click that and notice that is
408:05 - now stopping the workspace that's going
408:06 - to stop the
408:08 - spend all right we're going to go over
408:10 - here this Resource Group has nothing in
408:12 - it but we'll go ahead and delete
408:17 - it and there there we go we'll go ahead
408:19 - and delete that and we're finally done I
408:22 - really didn't think it would take this
408:23 - long but anyway we are done and I'll see
408:26 - you in the next one
408:27 - [Music]
408:30 - okay all right so let's take a quick
408:33 - introduction into Azure resource manager
408:36 - which is short for arm and is a service
408:38 - that allows you to manage Azure
408:40 - resources and one thing that really
408:42 - confused me about the service when I
408:43 - first sted using Azure was that you
408:45 - couldn't just type in Azure resource
408:47 - manager and the reason why is because
408:50 - it's actually a collection of services
408:52 - and it makes up what we call this
408:54 - management layer it allows you to do
408:56 - things like create update delete
408:57 - resources apply management features such
409:00 - as access controls locks and tags uh
409:02 - writing infrastructure is code via Json
409:05 - templates and there are very specific
409:08 - features we're going to be looking at
409:09 - that make up the armed layer and it's
409:11 - going to be the following so you're
409:12 - going to be looking at subscriptions
409:14 - management groups resource groups uh
409:16 - resource providers resource locks Azure
409:19 - blueprints resource tags access control
409:22 - so also known as IM uh Ro base access
409:26 - controls Azure policies and arm
409:29 - templates uh I don't know why I don't
409:31 - have tenant in there I might have in
409:33 - another slide but it's not a big deal
409:35 - but that is what we're going to be
409:36 - covering in this Azure resource manager
409:38 - section all
409:39 - [Music]
409:43 - right so let's take a quick look at uh
409:46 - the use case for Azure resource manager
409:47 - and this is just to kind of give you a
409:50 - visualization because it is an abstract
409:52 - thing so I just want you to have some
409:53 - kind of picture in your head of what it
409:55 - is so here I have this diagram and just
409:58 - to follow up with this Tech think of
409:59 - azure resource manager as a gatekeeper
410:02 - and all requests flow through arm and it
410:05 - decides whether that request can be
410:06 - performed on a resource and so on the
410:09 - left hand side you have your requests
410:11 - and so requests could be happening in
410:13 - the Azure portal VI the Azure Powershell
410:16 - the CLI or the rest client which would
410:18 - be the API uh and then you can see the
410:20 - two middle ones would use the Azure SDK
410:24 - and in the middle that's the gatekeeper
410:25 - and so we have Azure resource manager
410:27 - that's going to work in conjunction with
410:29 - your authentication uh authentication
410:31 - which generally should be active
410:33 - directory I don't think you can swap
410:35 - that out for anything else and then on
410:36 - the right hand side you're going to get
410:38 - access to resources so this could be
410:39 - virtual machines containers databases
410:41 - and storage there's obviously a lot of
410:43 - uh Azure services but that is what it is
410:46 - in a
410:48 - [Music]
410:51 - snapshot so let's understand understand
410:53 - the concept of scoping because this is
410:55 - going to help you understand all the
410:56 - components that are involved with azurus
410:58 - resource manager so what is a scope a
411:00 - scope is a boundary of control for Azure
411:02 - resources and it is a way to govern your
411:04 - resources by placing resources within a
411:07 - logical grouping applying logical
411:09 - restrictions in the form of rules uh and
411:11 - so let's now go break down um what uh
411:15 - these Scopes are and so the first scope
411:18 - we're going to talk about is management
411:19 - groups and this is a logical grouping of
411:21 - multiple subscriptions uh just because
411:23 - you can have a lot of subscriptions in
411:25 - your account and you might want a
411:26 - subscription to um a collection of
411:28 - subscriptions to belong to some kind of
411:30 - domain so maybe it's for development or
411:33 - business or uh data Sciences whatever
411:35 - you want then you have a subscription
411:37 - and this grants you access to Azure
411:39 - Services based on a billing and support
411:41 - agreement um so the idea is that uh when
411:44 - you launch resources you're going to
411:46 - choose what subscription to go under
411:47 - it's just going to determine the billing
411:49 - okay under that um things you're going
411:50 - to pay for uh then you have re groups
411:53 - this is a logical grouping of multiple
411:55 - resources within a subscription then you
411:57 - have resources this is um the actual
412:00 - service itself like Azure virtual
412:02 - machine and I just want you to know that
412:03 - we're going to revisit the scope when we
412:05 - go look at ro-based access controls
412:07 - because that's going to really help it
412:09 - uh make a lot more sense okay but uh
412:11 - let's just go jump into some of these
412:13 - Scopes in specific and talk about them a
412:14 - bit
412:15 - [Music]
412:18 - more so let's take a look at arm
412:20 - templates uh and before we jump into it
412:23 - let's just make sure we're familiar with
412:24 - infrastructure is code cuz that's what
412:26 - arm templates are all about and this is
412:28 - the process of managing and provisioning
412:30 - computer center uh data centers such as
412:32 - Azure through machine readable
412:34 - definition files such as adjacent file
412:36 - and in this case an arm template because
412:38 - that's all it is ajason file and rather
412:40 - than physical Hardware configuration or
412:42 - interactive configuration tools and just
412:44 - to simplify that even further basically
412:47 - you're writing a script that's going to
412:48 - set up your cloud services for you and
412:50 - with iac's they usually come in two
412:53 - different flavors we have declarative
412:55 - that's where uh exactly what you write
412:57 - is what you get and imperative so you're
412:59 - going to generally Define what you want
413:00 - and then the service will guess uh what
413:02 - you want it's going to fill in the
413:03 - blanks to save you a lot of time writing
413:05 - those scripts uh and so uh arm templates
413:08 - are Json files that are def that Define
413:11 - Azure resources that you want to
413:12 - provision uh and Azure services that you
413:15 - want to configure and with arm templates
413:18 - they are going to be declarative so you
413:20 - get exactly what you define uh they're
413:22 - going to stand end up tear down or share
413:24 - entire architectures in minutes and
413:26 - they're going to reduce configuration
413:27 - mistakes and you know exactly what you
413:29 - have defined for a stack to establish an
413:32 - architectural Baseline for compliance so
413:34 - you definitely want to use Arm templates
413:37 - or IAC whenever you can and try to avoid
413:40 - using the console unless you're doing
413:41 - development or test workloads but let's
413:44 - just run through the big list of what
413:46 - you can do with an arm template I know
413:47 - this is a big boring list but let's just
413:49 - get it uh get through it as quickly as
413:50 - possible just so we know what we can do
413:52 - with armed templates so with armed
413:54 - templates that are declarative so what
413:56 - you see is what you get you can stand up
413:59 - tear down share entire environment
414:01 - minutes you can reduce configuration
414:02 - mistakes you can establish an
414:04 - architectural Baseline for compliance
414:06 - there uh modular so you can break up
414:08 - your architecture in multiple files and
414:09 - reuse them they're extendable so you can
414:11 - add Powershell and Bash scripts to your
414:13 - templates uh it has testing so you can
414:16 - use the arm ttk uh to test make sure
414:19 - exactly what uh what you've deployed is
414:21 - what you wanted
414:23 - um you have preview changes so before uh
414:25 - you create infrastructure via templates
414:27 - you see what it will create built-in
414:29 - validation so it will only deploy your
414:31 - template if it passes track deployments
414:33 - keep track of changes to your
414:34 - architecture over time policy is code so
414:37 - apply Azure policies to ensure you you
414:39 - remain compliant uh and then you have
414:40 - Microsoft blueprints which we we did
414:42 - Cover here uh which establishes
414:44 - relationships between resources and
414:46 - templates so it's just one step further
414:48 - where arm templates don't have any
414:50 - relationship with the resources where
414:52 - blueprints like a better version of arm
414:53 - templates and then you have cicd
414:56 - integration exportable code so exporting
414:59 - the current state of the resource groups
415:00 - and resources uh authoring tools I
415:02 - believe is the last on our list here so
415:04 - you can use Visual Studio code that has
415:06 - advanced features for authoring arm
415:07 - templates makes it a lot easier to write
415:08 - them so there you
415:10 - [Music]
415:15 - go okay so now what I want to do is
415:17 - cover infrastructure as code for Azure
415:20 - so there are two uh primary ways of
415:22 - doing infrastructures code we have arm
415:24 - templates the arm stands for Azure
415:26 - resource manager and the other one is
415:29 - azure biceps we're going to focus on the
415:31 - first one uh infrastructure as a code is
415:33 - the concept of um uh defining all your
415:38 - infrastructure as code uh and that might
415:41 - be confusing because that might sound
415:43 - like s the SDK or the CLI and uh it is
415:47 - confusing until you start working with
415:48 - it but the key difference is that when
415:50 - you use the CLI or the SDK uh to
415:53 - programmatically create resources they
415:55 - don't keep uh track of the State uh and
415:58 - so that is the key difference between
415:59 - that whereas if you ran a CLI command to
416:02 - create uh let's say a virtual machine
416:05 - and you ran it again with the same
416:07 - parameters and the same name it would
416:09 - attempt to create a second um virtual
416:12 - machine whereas with infrastructure as
416:13 - code if it's already there it's going to
416:16 - either update it or say hey you can't
416:18 - update it there's already one that
416:19 - exists so the idea is that um uh it's
416:23 - different in that process or in that
416:25 - sense uh there is a word for it um I
416:27 - believe the word is IDP poent uh I
416:30 - always have a hard time saying it but um
416:31 - that is the key difference between those
416:33 - programming methods and iic so what I
416:36 - want to show you is uh arm templates and
416:40 - um arm again stands for Azure resource
416:43 - manager it's part of resource groups so
416:46 - if we type in arm here we're not going
416:48 - to really get uh a service or anything
416:51 - like that we say azure or as your
416:53 - resource
416:54 - manager okay you're just not going to uh
416:57 - exactly get that because um it is it is
417:00 - something that's there but it really is
417:01 - talking about resource groups so when
417:04 - you deploy a resource Group it will
417:06 - always create an arm template for you no
417:08 - matter if you do click Ops um you'll
417:11 - always get an arm template and this is
417:12 - something that is very different from
417:13 - other providers so like when you use ads
417:15 - or
417:16 - gcp um when you launch a resource it
417:19 - doesn't necessarily will produce a uh a
417:21 - template for you but Azure is very
417:24 - unique in that sense that they will do
417:25 - that so what I want to do is I want to
417:28 - go ahead and explore some things with
417:31 - arm templates so you're very aware of
417:33 - how they work and I believe that uh
417:36 - there is a way to uh deploy if we type
417:38 - in template here there should be
417:39 - something like deploy a custom template
417:41 - whoops and that's how you would go about
417:43 - deploying a custom template and they
417:45 - actually already have some common
417:46 - templates here so maybe we can uh take a
417:48 - look at one as a quick start and try to
417:51 - understand uh what the templates look
417:52 - like another key difference between
417:54 - other cloud service providers is that
417:56 - it's not very common to write arm
417:57 - templates by hand um in fact it's very
418:00 - tedious and you would not necessarily
418:01 - want to do it as opposed to ads where
418:03 - you have cloud formation it's totally
418:05 - normal to do and that's why um having a
418:07 - layer on top of uh arm makes it so much
418:10 - easier like using again Azure bicep or
418:12 - terraform let's go ahead and create a
418:14 - Linux virtual machine here and notice
418:17 - that I select the template and it has
418:20 - some options here so um what I want to
418:23 - show you here this looks like the usual
418:25 - process for setting up a um a virtual
418:28 - machine but if we go here we can edit
418:29 - the template and then it's going to
418:31 - allow us to see what this template looks
418:33 - like so arm templates this is what it
418:34 - looks like and I believe that uh they're
418:38 - only Jason I kind of
418:40 - forget Let's go ask chat GPT so are arm
418:44 - templates uh in Azure only Jason or can
418:48 - they also be yaml the reason why I I
418:51 - don't remember is because I work with a
418:52 - lot of cloud service providers usually
418:54 - they'll provide both options um but
418:58 - generally uh I always remember that arm
419:01 - templates are only Json so there is no
419:03 - yaml support for it but of course you
419:05 - could use yaml locally and then convert
419:07 - it over back to Json but anyway so if we
419:10 - look at this here we have some things we
419:12 - have the schema that describes what the
419:14 - format of this Json should be um we have
419:17 - some metadata which probably gets
419:18 - autogenerated or is additional U
419:21 - information to attach the template we uh
419:23 - we have parameters so these are going to
419:25 - be values that we're inputting that
419:27 - allow us to uh make our template
419:29 - reusable and if we scroll on down um
419:32 - yeah we got variables which is
419:35 - probably um the modification of
419:38 - parameters and then we have our
419:40 - resources down below here and you know
419:43 - again if you've seen cloud formation
419:44 - templates or uh deployment manager gcp
419:46 - deployment uh scripts these are going to
419:49 - look very very similar so we we Define
419:51 - the type for the res ource uh we have a
419:53 - name for it then it has its properties
419:56 - uh and then it can depend on other
419:57 - resources to say what order uh they're
419:59 - performed in but anyway my point is is
420:02 - that uh this is a template and we can go
420:05 - ahead and actually uh deploy this
420:08 - template but I'm not that interested in
420:09 - that part of it because this is not that
420:11 - exciting what's more exciting is what
420:13 - happens when you do click offs so I'm
420:14 - going to go over uh over here and uh
420:17 - deploy a virtual
420:20 - machine m
420:22 - yeah I mean we could do virtual machine
420:24 - I'm just trying to think what's easier
420:25 - maybe we'll go ahead and actually do
420:27 - I've changed my mind we're going to
420:29 - actually go ahead and do uh storage
420:30 - accounts again I'm still in the free
420:32 - tier and I'm just trying to make things
420:33 - easy for you as well um and virtu
420:36 - virtual machines will spin up a lot of
420:37 - resources so maybe I don't want
420:39 - something that complicated uh for this
420:41 - example but what I want to do is I want
420:43 - to launch a virtual uh a storage account
420:46 - and then I want to see how we can look
420:48 - at the template and maybe we'll attempt
420:50 - to repport the template at at and then
420:52 - delete the storage account and recreate
420:54 - it so go here and I'm going to hit
420:56 - create and we're going to create
420:58 - ourselves a new Resource Group I'm going
420:59 - to call this Resource Group
421:03 - um uh
421:05 - my uh arm RG so arm for Azure resource
421:11 - manager and today it's really thinking I
421:13 - don't know if I'm having internet issues
421:15 - here or if it's just really complaining
421:17 - or if Azure slow Azure uh sometimes
421:20 - their UI is not always responsive and we
421:22 - have to give this a name of course we
421:24 - have to make sure this is very unique so
421:25 - I'm going say my um storage account a
421:30 - bunch of numbers and then my
421:32 - initials and it probably has too many
421:34 - letters so it's complaining there we go
421:36 - and I'll just let it choose whatever
421:37 - region wants we'll have it on standard
421:39 - that's totally fine I'm going to go
421:40 - ahead and go to review where we can see
421:42 - all of our options looks fine to me
421:44 - we'll go down the bottom hit create and
421:46 - we'll give it a moment here to create so
421:50 - I'll be back in just a second
421:52 - all right so that deployment is complete
421:54 - and what I'm interested in is checking
421:56 - out uh the resource Group but notice
421:57 - that when we've deployed this we have
422:00 - our inputs it shows us what we've
422:01 - inputed and we looked at the uh
422:03 - parameters of a template before so it is
422:05 - creating literally an arm template and
422:07 - then inputting the parameters it's
422:09 - showing this the outputs of uh that arm
422:12 - template and then here's the template
422:13 - itself so every time you deploy as your
422:16 - resources it is creating uh these IAC
422:19 - code for you and that is one of the
422:22 - greatest advantages of azure as much as
422:24 - I complain about Azure this is one of
422:26 - their really really good features and
422:28 - there's a few things you can do like it
422:29 - looks like we can add this to our
422:30 - library we can download this we can
422:32 - deploy it again let's go ahead I usually
422:34 - don't uh fiddle with these too much but
422:37 - we can um import this template and I can
422:39 - say uh my Resource Group but just
422:43 - remember you could have a lot of
422:44 - resources and really make that uh uh ret
422:47 - templated I'm going to choose the same
422:49 - um area here and this will just be
422:52 - version 1.0.0 down here I'm going to go
422:55 - to next it shows me the template next uh
422:58 - we can do some tagging I'm going to
423:00 - ignore that for now review and
423:01 - create and so now we have our own uh
423:04 - template so that's kind of cool um if we
423:07 - go back to here I'm not exactly sure
423:12 - where they oh we have to hit create
423:13 - maybe first it's not super clear but uh
423:17 - so that is now uh template has been
423:19 - saved but where did it save to uh just
423:22 - says it's a template
423:26 - spec it is really taking its time to
423:28 - load
423:29 - here okay and so we have our template
423:32 - here I'm not sure if we if we typed in
423:33 - templates here if they'd show up here
423:35 - they I guess they show up under template
423:36 - specs uh we'll refresh this not sure why
423:40 - it doesn't show up we know that we
423:42 - created it and you know I've said this
423:44 - in other videos where Azure doesn't
423:46 - always propagate things right away and
423:48 - you have to wait so you have to have
423:50 - confidence in waiting for things to show
423:51 - up an Azure so even though it's not here
423:54 - I know I created one okay so we go over
423:57 - here it says template spec succeeded so
423:59 - it really really I think it would show
424:01 - up here um and I I really want to prove
424:04 - that it will show up here eventually so
424:05 - what I'm going to do is just take a
424:07 - break and I'm going to give it like 10
424:09 - 15 minutes I'm going to give it a good
424:10 - chunk of time here and we'll come back
424:11 - and see if it appears um just to give
424:14 - you validation and confidence that
424:16 - patience always uh pays off here in
424:18 - Azure okay all right so I've waited a
424:20 - good chunk of time was just talking to
424:22 - Bo and um so I'm now I'm back and let's
424:25 - see if it is here we're going to give a
424:26 - refresh and look it's here so I told you
424:28 - you got to be really really patient with
424:30 - Azure it is really known for being slow
424:32 - for uh some particular
424:34 - resources and I when I say some I mean a
424:36 - lot so you know just have that patience
424:38 - there but anyway what I want to do is
424:40 - I'm going to open up another tab we're
424:42 - going to go back over every time I open
424:44 - that new tab and wants me log in that's
424:46 - great um but what I want to do is go
424:49 - over to our resource groups and we're
424:51 - going to go into that new one that we
424:52 - created and what I want to do is I just
424:54 - want to delete this resource here um and
424:57 - I want to see what happens if we attempt
424:59 - to redeploy our uh template there I
425:02 - assume we're going to have
425:04 - to I mean we don't have to delete this
425:06 - one but um I just want to remve it
425:08 - completely and just try utilizing an arm
425:11 - template so we'll give it a moment there
425:14 - and oh notice we have an upgrade button
425:16 - this is uh definitely new we might be
425:18 - going through
425:19 - our not sure why it's uh appearing all
425:21 - of a sudden I've actually never seen
425:22 - that button before so it's really
425:25 - interesting and NOP I guess it's just
425:28 - maybe after a while they just kind of
425:29 - poke you and over here we're getting our
425:32 - prompt so um it looks like we're
425:33 - starting to get some spend and you know
425:35 - I said earlier that Azure is really good
425:37 - about telling us about um alerts and
425:39 - things like that much better than other
425:40 - providers um and so you know here it's
425:43 - showing in Canadian dollars that uh
425:45 - we've already uh consumed half our spend
425:48 - not sure how I did that because I
425:50 - haven't really done a whole lot
425:52 - but um what we'll do is we'll try to
425:54 - figure out where that that uh free spend
425:56 - has been going um still again that's a
425:59 - lot um so maybe it's overestimating that
426:01 - or I left something running maybe that
426:04 - Kuan a cluster is still running I don't
426:05 - think so let's go double
426:08 - check and but anyway I wanted that to
426:10 - happen so I could go back and show a
426:12 - video of of that kind of stuff because
426:14 - all we created is a couple virtual
426:16 - machines and some other things yeah we
426:18 - don't have anything else running that
426:20 - should be costing us spend but we'll go
426:22 - take a look there and see what we can
426:23 - figure out so anyway I'm going to go
426:25 - back here give this a
426:27 - refresh and um that resource is gone
426:30 - what's interesting is it also got rid of
426:32 - the template why did it get rid of the
426:35 - template that that was something we
426:36 - created
426:37 - separately and so I guess it was linked
426:39 - to the resource Group and so that kind
426:41 - of defeats the purpose of us uploading
426:43 - our arm template so that's a shame um I
426:48 - guess what we could do is we could go
426:50 - and M
426:53 - I don't know we could go and use the
426:55 - custom provider and launch a template
426:57 - but there's not much interest in that so
427:00 - uh I'm not really interested in doing
427:02 - that yeah I think we're pretty much done
427:04 - here I think we've we've proved the
427:06 - point that Azure is really good at
427:07 - producing These Arm templates you're not
427:09 - going to want to write them by hand um
427:12 - you could ask CH PT to do it but I again
427:14 - I would probably not do that myself but
427:16 - I think that satisfies this video for
427:18 - arm templates so we'll see you in the
427:19 - next one okay
427:23 - [Music]
427:25 - all right so we looked at uh utilizing
427:28 - arm templates and I think it' also be
427:30 - really great to look at Azure bicep um
427:32 - because that is a more productive way to
427:34 - write infrastructure as code um and
427:37 - honestly I really like Azure bicep I
427:39 - think it's really really cool uh so what
427:41 - I want to do is I want to go ahead and
427:43 - go over back to GitHub we looked at
427:46 - creating a GitHub or creating a repoing
427:48 - GitHub uh back in our SDK video that was
427:50 - a really messy video I'm really hoping
427:52 - that it's not as crazy as that one but I
427:54 - don't like editing out any of the
427:56 - challenges uh here cuz I want to give
427:58 - you uh the full idea of of what it looks
428:01 - like when trying to work through these
428:03 - things what I'm going to do is go over
428:04 - to GitHub and you should of course go
428:06 - ahead and create yourself a GitHub
428:08 - account has a free tier uh and once you
428:10 - have your GitHub account we'll make a
428:11 - new repo I'm going to uh drop down uh
428:14 - here and go to exam Pro and of course
428:17 - you'll just have one name here if I have
428:19 - multiple accounts so there's a lot for
428:20 - me to create stuff in and what I'm going
428:22 - to do is make a new repo called um Azure
428:27 - bicep example you can call yours
428:29 - whatever you like I'm going to make this
428:30 - public so that you can see the code uh
428:33 - you can make yours private if uh private
428:35 - is available to you there but I'm going
428:37 - to make it public because if you want to
428:39 - go find this repo at exampro here and
428:41 - copy it and work with it you can so
428:43 - we're going to go ahead and use code
428:44 - spaces and codes spaces does have uh
428:46 - free credit usage you could do this
428:49 - locally um on your local computer but
428:51 - you'd have to install a bunch of stuff
428:53 - uh I like using Cloud developer
428:55 - environments and Azure does not have one
428:57 - built into their portal um most other
429:00 - ones do but I think the reason why Azure
429:02 - doesn't is because Microsoft owns GitHub
429:04 - and so you could just go over here and
429:06 - use code spaces instead so this to me is
429:09 - like using Azure okay so we're going to
429:11 - go ahead and create a uh code spaces on
429:14 - Main here and understand as long as the
429:16 - code space is running we are consuming
429:19 - uh so if you want to stop it you could
429:20 - always go up to to the command pallet
429:22 - here and we can just say uh stop
429:26 - or uh it's code
429:29 - spaces it should be there should be
429:31 - something here called
429:32 - stop um shut
429:35 - down I did this the other uh the other
429:37 - day when we did did that yeah it is code
429:39 - spaces whoops it's loading so it's it's
429:43 - bumping things out here but if we go
429:44 - code spaces there is an option to stop
429:47 - the current Works uh code space so I'm
429:49 - not doing that right now uh I want my
429:51 - theme to be dark so I'm going to go to
429:53 - this Cog down here go to themes go to
429:55 - color and we'll switch to um GitHub
430:01 - dark and we'll give it a moment to think
430:03 - because it's a bit slower loading I
430:05 - greatly greatly prefer git pod the
430:07 - reason I'm using Code spaces is because
430:10 - um the extensions are going to use the
430:12 - official ones with Microsoft and it's
430:15 - just going to be easier to show you this
430:17 - here in most other courses I use git
430:20 - pod um
430:21 - so anyway once that is loaded and we
430:25 - have changed our theme if that matters
430:26 - to you uh we're going to want to do some
430:29 - Azure bicep stuff so on the left hand
430:31 - side I want you to go to extensions and
430:33 - we're going to search Azure bicep I
430:36 - don't use Azure bicep a lot but I
430:38 - definitely know how to use it when we
430:40 - need to so I know they have a really
430:42 - good extension for it and it's like it
430:45 - writes code for you it was it's the
430:47 - nicest experience I've ever had with a
430:49 - um an i
430:53 - tool and this is the thing because
430:55 - Microsoft um built Visual Studio code
430:58 - and you know their they own GitHub they
431:00 - can have really amazing synergies for
431:02 - developers um so a lot of times I find
431:05 - it easier to work in vs code and use
431:07 - their extensions to interact with Azure
431:09 - than it is to use Azure portal itself
431:11 - and there are specific services like
431:13 - Azure functions where you really have to
431:15 - use Visual Studio code so it's essential
431:17 - that you get used to using uh Visual
431:19 - Studio code whether it's local or in a
431:21 - cloud developer environment so I'm
431:23 - installing that this Azure bicep um
431:25 - extension and this thing will help us
431:27 - write a lot of uh code um uh and it has
431:31 - like templates and other stuff like that
431:33 - so that's what I want to uh take
431:35 - advantage of it um I don't remember the
431:38 - extension for Azure bicep file so we'll
431:40 - just go to the Azure bicep website I'm
431:42 - sure they'll have like a quick start and
431:44 - we'll work through it here
431:46 - together so I want to go here and I just
431:49 - want to know what the extension is it's
431:51 - bicep so that's what it is so we're
431:53 - going to go here and make a new file
431:54 - we're going to call it main.
431:59 - bicep and something we didn't do before
432:01 - and this is what I wanted to do in the
432:02 - SDK one but we didn't actually have a
432:04 - use for it is there's probably like an
432:06 - Azure um like kit Azure tools there we
432:09 - go and this is something you might want
432:11 - to install a lot of these down below
432:12 - here see how there's like one for
432:14 - databases resources functions if you
432:16 - install tools it installs all these
432:18 - other ones you even have one for C tools
432:20 - and and um it's possible that uh yeah
432:24 - see like this this one will autocomplete
432:26 - Azure commands it'll do all sorts of fun
432:28 - stuff even for Azure storage and
432:29 - everything there's something but the
432:31 - reason we want Azure tools is because we
432:33 - can install Azure accounts and this will
432:35 - allow us to quickly log in to our Azure
432:39 - account remember before we typed in a
432:41 - login and then we had to get a device
432:43 - code and plug that in uh well if we have
432:45 - this installed uh we can just use the
432:47 - command pallet and log in very quickly
432:49 - and that's what I want to do here so I'm
432:50 - going to go to the bottom left corner
432:52 - I'm going to pull up command pallet and
432:54 - we'll try to do Azure
432:57 - signin now to be fair I mean this is not
433:00 - going to do much difference down here
433:02 - but I think it installed the um the CLI
433:05 - for us because before we had to manually
433:07 - install it right so we'll go here and
433:09 - we're going to have to choose device
433:11 - code we have signed into Azure Cloud
433:13 - let's try this one first see if that
433:15 - works and then we're going to say uh
433:18 - just so you know Azure has different
433:20 - ones there like Azure China Azure
433:22 - Germany Azure US Government so generally
433:24 - we always want to choose Azure unless
433:25 - you live in one of these other regions
433:27 - and you have to use that one and this is
433:29 - going to open up and we will sign in we
433:32 - can now close this
433:33 - window and I believe we are now logged
433:36 - into Azure also notice on the leth hand
433:38 - side we have this little Azure icon here
433:41 - on the left hand side it will allow us
433:43 - to see our resources we can also sign in
433:45 - from here we should be signed in maybe
433:48 - it didn't work I'll try this one more
433:49 - time extension as your resources wants
433:52 - to sign in we'll say allow maybe it has
433:53 - to sign in separately I don't know we'll
433:56 - close
433:58 - this there we are so now we see our
434:00 - subscription we are in here which is
434:02 - great and we can see a bunch of our
434:05 - services um so you know if we had
434:07 - storage accounts and we do have some
434:09 - storage accounts we can see them here
434:10 - this one I think is for our uh Cloud
434:13 - shell that's why it starts with cs and
434:14 - it has a random number afterwards if we
434:16 - had virtual machines and other things we
434:18 - could see them here but yeah working
434:20 - with functions you often use them here
434:23 - um we could also probably right click
434:24 - this and create a resource and so here
434:27 - there's a lot of ways to uh create some
434:30 - stuff we create a resource Group and and
434:31 - some other particular
434:33 - things but uh yeah that's that's
434:35 - interesting I also wonder if like these
434:37 - are these are obviously uh things that
434:39 - were installed there could be other
434:41 - extensions that we didn't install like
434:43 - Azure uh machine learning service or
434:45 - other stuff that could end up showing up
434:47 - there on the left hand
434:48 - side so I'm just kind of scrolling
434:50 - through here seeing what might not be
434:51 - installed so Azure container apps was
434:53 - not
434:54 - installed or maybe it was and it's these
434:56 - other ones that have these little
434:57 - install words on
434:58 - here but
435:00 - anyway enough about that let's stay on
435:03 - track here and let's write some Azure
435:05 - biceps so now that we have uh that
435:07 - installed we want to start writing it so
435:08 - I just need to see a little bit of code
435:10 - to get a reminder here um so yeah if we
435:13 - start typing it should start suggesting
435:15 - and this is what we want to do is make a
435:16 - storage account so let's go ahead and
435:17 - start typing that in so I'm going to
435:19 - type in resource uh and so already
435:22 - notice that it is autocom completing and
435:24 - then uh let's just go check here so the
435:27 - next thing is going to be storage
435:31 - account and it should
435:35 - autocomplete so yeah I remember this
435:37 - being really good at autoc completing
435:39 - just give me two seconds and let's go
435:40 - figure that out one sec yeah so I'm
435:42 - looking at it here and it's supposed to
435:44 - just start autoc completing when we type
435:48 - so I'm not sure why it's not exact doing
435:51 - that we'll go back here sometimes Visual
435:53 - Studio code doesn't do what we want it
435:54 - to do which is totally fine storage
436:00 - account and it's not really autocom
436:03 - completing so I'm going to go ahead and
436:04 - save this for a
436:06 - second well there it's autoc completing
436:09 - so
436:11 - resource storage am I typing it wrong is
436:14 - it supposed to be uh with the resources
436:17 - no no it's this so it's really
436:19 - interesting that it's not Auto
436:20 - completing but we could just copy this
436:22 - in
436:23 - here
436:25 - okay I just wanted to show you how
436:26 - powerful it was cuz I was so impressed
436:28 - the first time I I saw it uh writing all
436:30 - the code for me which is um not what the
436:32 - other ones do that's for sure so we'll
436:34 - just paste this in here
436:38 - and if I put a period
436:43 - here yeah I guess I was expecting a
436:46 - little bit more from it um but uh
436:47 - whatever I guess we'd have to work with
436:49 - it a bit more to find out
436:51 - again I don't work with it every single
436:52 - day but I am always very excited to use
436:54 - it um but you know the thing that I want
436:57 - to uh take a look at is let's look at
436:58 - where the actual reference documentation
437:00 - is and so we'll go to Resource reference
437:03 - here on the left hand side and I'm
437:05 - really interested to
437:07 - see uh where everything is so if you
437:10 - know the resource type you can just type
437:12 - it here in the Le hand side that's fine
437:14 - so we have all our resources here on the
437:15 - left and so we are trying to create a
437:17 - storage
437:18 - account so we can go over here
437:21 - here and look for storage account so
437:25 - that be storage and storage
437:30 - accounts and so here it says to create a
437:34 - uh to create a resource add the folling
437:36 - to your Azure bicep so um just kind of
437:39 - getting familiar with it it looks like
437:40 - this is going to be its logical name and
437:42 - this is actually going to define the
437:43 - resource itself and these are all its
437:45 - properties and it looks like there are
437:47 - some that are required and some that are
437:49 - not so it looks like I
437:52 - think that if we can find this tab back
437:54 - I think we can name this whatever we
437:56 - want here this doesn't actually have to
437:57 - be called storage account so we can go
437:59 - here it's just a logical name that we
438:01 - reference within this resource so I can
438:03 - go here and say like storage account AB
438:05 - it shouldn't
438:07 - matter um what's really interesting up
438:09 - here is that it's going to looks like
438:11 - it's going to grab the resource Group ID
438:15 - and then what does it do here creates a
438:17 - deterministic hash based on the string
438:18 - so it uses the resource ID to make a
438:20 - random string and then it's going to say
438:23 - toy launch in the front of it so I don't
438:24 - want toy launch I'm just going to put in
438:25 - here bicep and so um I think we can do
438:29 - hyphens actually I don't think we can
438:32 - and so we should get an Azure storage
438:34 - account that's going to be bicep and
438:36 - some random value after this and then up
438:38 - here this is going to pull in the
438:40 - resource Group now what's interesting is
438:42 - we haven't created a resource Group it
438:44 - says return the current Resource Group
438:46 - scope so I'm not sure how this is going
438:48 - to work if we don't have an existing
438:49 - Resource Group but anyway we've written
438:51 - our Azure bicep and we probably want to
438:53 - go ahead and uh deploy this now so we
438:56 - could probably just type in bicep down
438:58 - below that's probably what the command
439:00 - is nope that's not what it
439:03 - is um maybe it's what is it I don't know
439:07 - so let's go over to um back over here
439:10 - for a second and let's see what the CLI
439:12 - commands
439:15 - are oh boy we'll say bicep
439:19 - CLI
439:23 - what is the commands just tell me what
439:25 - the commands are please we could use the
439:27 - command pallet because they're probably
439:28 - all there like if we're if we were to go
439:30 - into the command pallet and type in
439:33 - bicep like we get all those commands but
439:36 - I I really want to know what the um CLI
439:39 - commands are I really thought it would
439:40 - be bicep it is a z bicep of course so
439:43 - looks like we can do um a bicep and then
439:46 - just specify the template probably main
439:48 - is the default so if we do nothing or
439:51 - probably will pick that up I'm going to
439:52 - go ahead and type in that and so it's
439:55 - interesting we installed the extension
439:57 - and we were able to log in but we still
439:59 - don't actually have uh the CLI so it
440:01 - looks like we do actually have to
440:03 - install the Azure CLI in here which is
440:05 - fine it's always great to get more
440:07 - practice so we'll go ahead and type in
440:08 - Azure CLI install we'll go to the
440:11 - Microsoft learn website we will scroll
440:13 - to Linux we'll go to auntu Debian um
440:17 - because that's generally what G pod or
440:19 - code space is or what have you will be
440:21 - using we'll go down look for that one
440:23 - liner and we'll copy it we'll go back
440:26 - over to um code spaces we'll paste this
440:28 - in hit enter and that'll go ahead and
440:30 - install the uh Azure C now we are logged
440:34 - in in this um uh invidual Studio code
440:38 - and it could be storing the same
440:39 - credential files wherever on the local
440:42 - machine um so maybe we don't have to
440:45 - necessarily log in twice it might be
440:48 - also interesting to see where that um
440:50 - that file is so maybe we can go ask chat
440:51 - gbt where does um where does okay so
440:58 - when you log into the Azure CLI where
441:02 - does it store the
441:05 - credentials what folder and file on the
441:08 - Linux
441:10 - machine that's what we want to
441:15 - know
441:17 - MH and the only thing I don't like about
441:19 - ch BT is that you can't go away from uh
441:22 - this tab while it's
441:24 - generating and then sometimes it just uh
441:27 - gets a bit slow but it goes out to the
441:28 - Internet so I think that's the reason
441:30 - why it's uh been slower than previous I
441:32 - like previous models where it wasn't out
441:34 - on the internet because it could
441:35 - generate out
441:37 - faster but
441:39 - uh yeah this one's hanging on me so
441:41 - let's
441:42 - go to 3.5 let's just ask this one I want
441:46 - it
441:48 - fast okay so it's saying it's in the
441:51 - Azure folder so that's something that we
441:52 - might want to take a quick look at the
441:54 - Azure CLI is installed I'm going to just
441:56 - type in a um
441:59 - account um account list and see if we
442:02 - can list our
442:03 - accounts okay so we are not logged in so
442:06 - us logging in here uh wherever it's
442:09 - storing it's definitely not storing in
442:10 - the same place but let's go take a look
442:12 - at that Azure profile directory so I'm
442:14 - going to bump up the font a bit I
442:15 - realized it's really small and I'm going
442:17 - to go ahead and say CD and then
442:20 - make a Tilda that is above your tab key
442:24 - and you have to press shift to make it
442:25 - it's called a Tilda it's like a little
442:27 - squiggly we'll do a for slash I'm going
442:29 - to do period for a hidden folder and
442:31 - we're start start typing Azure and so
442:33 - that folder is there we'll hit enter I'm
442:35 - going to do LS to list out the contents
442:37 - and we have stuff here I can do LS
442:39 - hyphen LA to list it in a nice beautiful
442:41 - list and uh if we don't want no that
442:44 - looks fine and so I'm kind of interested
442:46 - where it's storing uh that configuration
442:49 - probably in the config directory so I'm
442:51 - going to just CD into
442:55 - config uh oh maybe it's not a folder I
443:00 - thought that was a folder it is not a
443:02 - folder okay so let's do cat to print out
443:04 - the
443:05 - contents cat stands for C Cate I think
443:09 - and so that doesn't store it does a does
443:13 - the a uh Jason file have it no that
443:15 - doesn't have it but to be fair we
443:17 - haven't logged in yet so maybe the file
443:19 - will appear after after we log in so
443:22 - that's okay what I'm going to do is go
443:23 - ahead and type in a login and we'll say
443:25 - use device code because I believe that's
443:27 - the flag we have to use and we'll go
443:30 - ahead and copy this link we'll go to the
443:32 - top here and paste it in to one of our
443:35 - available tabs we have to go back and uh
443:38 - provide this
443:41 - code and we'll go click next and we'll
443:44 - click on our account we'll say continue
443:47 - we'll go back over to here and we'll
443:49 - give it a moment to think there we go we
443:52 - are logged in so now what I want to do
443:53 - is type in LS and looks like there's
443:56 - more stuff there it looks like there is
443:59 - and did we have this
444:02 - before
444:04 - um let's see here one 2 3 4 5 6 7 8 9 10
444:09 - 1 2 3 4 5 6 7 8 9 10 11 12 yeah there's
444:13 - definitely more stuff here um the new
444:16 - thing that's here is Cloud's config so
444:18 - I'm just going to cat that let's see
444:20 - what's in there so least tells us this
444:22 - is our default subscription so we at
444:24 - least know where that's coming from
444:25 - let's cat the config let's see if
444:26 - anything's changed in there that's the
444:28 - same let's cat a Json
444:32 - Json there's still nothing in
444:34 - there so it'd be really nice to know
444:37 - exactly where it is normally other ones
444:39 - will tell you exactly where they are uh
444:42 - and you can literally open them up and
444:43 - see see the information there I guess we
444:46 - could also just cat out the session no
444:49 - nothing so anyway it is stored
444:52 - somewhere where it is I don't know does
444:54 - it really matter no but it's nice to
444:57 - know exactly where it is so that uh
444:58 - let's say you wanted to delete it off
445:00 - your computer or something but it's
445:02 - stored somewhere anyway um we are we
445:05 - should now be logged into Azure so we'll
445:08 - go ahead and type in Azure a bicep I
445:10 - still feel like it should have told us
445:11 - the commands even if we weren't logged
445:13 - in and I was hoping that it would print
445:16 - us out the sub commands let's try to do
445:18 - help and see if it actually does that
445:20 - okay so it does you just have to give it
445:21 - the help flag and so we have a few
445:23 - options we can do build a bicep
445:25 - file um build the bicep pramp file
445:31 - decompile so if we already had an arm
445:33 - template we could turn it back into a
445:34 - bicep file that sounds really cool I
445:36 - like that idea format a bicep file you
445:39 - know if there's something wrong with it
445:40 - it could tell us as the format's correct
445:41 - install uh the bicep CLI which I thought
445:45 - it already was installed let's go ahead
445:46 - and try that first because maybe that's
445:49 - why I couldn't just type in
445:50 - bicep okay so now what happens if I type
445:53 - in
445:53 - bicep no so why did I install it if it
445:57 - was already like that um bicep I'm
446:02 - hitting tab to autocomplete to see if
446:03 - anything's there bicep
446:06 - CLI well whatever I mean we kind of
446:10 - still already have it so that's totally
446:11 - fine so we'll go ahead and type in bicep
446:13 - a uh uh AZ bicep
446:18 - build and and it wants a file totally
446:21 - fine so we're going to give it a file um
446:24 - build the file build a file and print
446:25 - all of its outputs to SD
446:27 - out I don't think it matters if we print
446:29 - them out so before we do that I just did
446:32 - control C to uh break that we need to
446:34 - get back to our main folder so I'm doing
446:36 - CD dot dot and I'm doing
446:41 - LS where is this
446:43 - folder CD for uh Aster for uh for slash
446:48 - I'm so used to using git pod I can't
446:49 - remember where uh this directory is I'm
446:52 - just going to scroll up here and take a
446:53 - look it is workspaces okay so to get
446:56 - back to this
446:58 - folder okay we're going to go to CD slw
447:00 - workspaces I'm hitting tab to
447:02 - autocomplete and then this one's called
447:04 - Azure
447:05 - bicep
447:07 - um is really not autoc completing here
447:10 - today oh I spelled Azure wrong okay that
447:12 - explains that I'll go fix that in the um
447:16 - the git pod I'll just rename it but now
447:18 - we're back into here so um typing clear
447:21 - so we're going to go Azure bicep file
447:25 - and we're going to provide it main TF or
447:28 - I'm thinking terraform bicep we'll hit
447:29 - enter and so that's going to go ahead
447:31 - and build it um is misspelled or does
447:34 - not recognize is not recognized by the
447:38 - system um okay we'll type in LS I mean
447:42 - it's right there let's go back and and
447:44 - take a look at the documentation and see
447:46 - what it wants sometimes it might want um
447:50 - uh like the file information but I don't
447:52 - think so it just shows main
447:55 - bicep I'll copy this
448:03 - command oh I forgot the word build up
448:06 - here that's why so um it looks like it's
448:08 - now built and so we now have a main Json
448:11 - we'll take a look here it's generated us
448:14 - an arm
448:15 - template at least that's what it looks
448:18 - like y yep that's what it is so that
448:21 - looks pretty good um I'm noticing
448:23 - that yeah we have parameters up here so
448:27 - now we can go ahead and deploy
448:31 - this so it builds
448:34 - it see here uh we can build our build
448:37 - pram file not interested in that
448:38 - generate
448:40 - prams and install the commands to your
448:46 - CLI oh publish maybe that's it the
448:49 - publish command adds a module to the
448:51 - registry the Azure container registry
448:53 - exists I'm not sure if that's useful I
448:56 - think that's if we want to reuse a
448:57 - template for later kind of like how we
448:59 - had those template specs I
449:05 - think okay so if asure bicep just
449:09 - generates out the files I'd imagine that
449:12 - we just probably deploy it the regular
449:13 - way using arm templates so I'll be back
449:15 - in just a moment most other I tools like
449:17 - they'll let you build and deploy but
449:19 - maybe Azure bicep just compiles out
449:21 - templates just give me a moment yeah so
449:24 - I just quickly asked um chat gbt and yes
449:27 - it did confirm it I my suspicions were
449:29 - correct as your bicep is just draining
449:31 - out the resource template and it looks
449:33 - like we're going to have to deploy it
449:34 - the regular uh or oldfashioned way here
449:37 - um so now here's a question could we
449:40 - actually use um Visual Studio code to
449:43 - deploy this so if I right click
449:46 - this could we deploy somewhere with this
449:50 - so that's what I'm really curious
449:53 - about let me go find all right so I
449:57 - believe there's a few ways we can do
449:58 - this of course we could go and just
450:00 - deploy it the uh the oldfashioned way by
450:03 - using this AZ deployment group um I was
450:06 - looking around myself and I just typed
450:08 - in bicep here and I also noticed that
450:10 - they had
450:11 - um uh a deploy step so maybe it can do a
450:15 - direct deploy not maybe not through the
450:17 - CLI but maybe it can do it through
450:18 - Visual Studio code there should be one
450:20 - for arm templates in here it's not
450:23 - showing up I mean chat TBT seems to
450:25 - think that it can but maybe there is a
450:27 - another extension we're missing so let's
450:29 - type in uh
450:32 - Azure so we have Azure tools is there
450:36 - one for
450:39 - developer um let's go back here and take
450:42 - a
450:43 - look so there's one here it says Azure
450:46 - resource manager oh it's an extens well
450:49 - I thought that be installed ready then
450:51 - that would be a really useful one to
450:52 - have here so we'll say Azure resource
450:54 - manager I thought it was there but I
450:56 - didn't see it on the side so this seems
450:57 - like a really good plugin this is
450:59 - probably something I'd want to have
451:00 - let's go ahead and install this one 1.5
451:02 - million views yeah I believe so it's by
451:05 - Microsoft I'm surprised it doesn't get
451:06 - installed with the tools oh it's in
451:08 - preview okay so I imagine when this is
451:13 - out of preview I bet when you install
451:14 - Azure tools it will uh be installed
451:16 - there now I've said previously if
451:18 - there's a preview tool you should should
451:19 - try to avoid it because it might not be
451:21 - there in the future um this one I think
451:24 - we can kind of get away with utilizing
451:26 - it it might be the future and it's no
451:28 - longer in preview so we'll go over back
451:31 - over to
451:32 - here and do we have any changes
451:36 - here no but if we go into our Command
451:39 - pallet let's type in arm deploy
451:43 - now it was saying that uh that something
451:47 - we could do as your resource manager
451:53 - uh install this
451:58 - extension type in arm deploy in our
452:01 - Command pallet we did
452:07 - that yeah so it doesn't show up so you
452:10 - know preview feature uh chbt might be
452:13 - telling us something else we are using
452:15 - 3.5 so it might not be telling us the
452:17 - full truth there and and I don't really
452:19 - see any changes on here so I guess we're
452:22 - not going to worry about that but I
452:23 - would like to try the um the bicep
452:26 - deploy so we'll type in just deploy
452:28 - here and scroll on down we have deploy
452:33 - bicep file let's see what happens if we
452:34 - do
452:35 - that and
452:37 - so please enter the name of the
452:39 - deployment sure we have to name the
452:41 - deployment good um create a resource
452:44 - Group because remember that we didn't
452:45 - specify Resource Group so we'll have to
452:47 - create one on the Fly here so let's do
452:48 - that we'll call this my bicep RG RG for
452:53 - Resource Group it's now going to go
452:56 - ahead and deploy that it says deploy
452:58 - failed uh provider subcription does not
453:01 - have the resource type resource
453:05 - groups
453:07 - okay that is something I was not
453:10 - expecting let's
453:12 - go let's go ask Chach BT and try to save
453:15 - us some
453:18 - time
453:22 - says check your bicep template file
453:24 - ensure that you have defined the
453:25 - resources correctly that is not
453:27 - useful um maybe it's because it's not
453:30 - registered so maybe when we use the CL
453:33 - uh when we use the the UI it will
453:35 - automatically register things when we
453:37 - use it but we create resource groups all
453:39 - the time so it's kind of surprising if
453:41 - that wouldn't be registered so we'll go
453:42 - over to our
453:44 - subscription and I'm just going to
453:45 - double check this here but I'm not sure
453:47 - if it's going to make a difference we'll
453:49 - over to
453:52 - our yeah we're in our
453:55 - subscription I'm looking
453:57 - for
454:01 - providers there it is resource providers
454:03 - sometimes there's like another extra um
454:06 - blade they call these blades over here
454:07 - by the way and so I was getting a bit
454:09 - confused and so Chachi BT is
454:14 - suggesting maybe resources is not
454:17 - registered which to me seems czy
454:19 - crazy oh it is it's right there uh so
454:22 - I'm not exactly sure what it's
454:24 - complaining about the other thing is
454:25 - that maybe Azure bicep isn't logged in
454:28 - so I mean that seems like a possible
454:30 - option so maybe we'll just go stick with
454:33 - uh the usual way which is using the
454:35 - Azure um the this Azure deploy method so
454:39 - I'm going to scroll back up here and we
454:40 - have this command now we did install in
454:43 - here uh in extensions or I think it it
454:46 - came installed was the Azure CLI and and
454:49 - what that will do is it when we write it
454:51 - out Azure CLI commands I believe it will
454:53 - autocomplete for
454:55 - us so here's scrapbooks for developing
454:57 - running commands with a CLI create an
454:59 - Azure CLI files and use the following
455:01 - features oh okay so there's actually a
455:04 - thing called an Azure CLI file that's
455:06 - new to
455:07 - me um but what we'll do is we'll go
455:09 - ahead and we'll just say um new file so
455:12 - we'll just say
455:14 - commands and I'll just put that there
455:17 - rename that like that that's what it's
455:19 - saying to do and you'll say uh deploy an
455:24 - arm
455:26 - template and we'll go back over here and
455:30 - we'll see if it starts to autocomplete
455:31 - so we have AZ uh
455:34 - deploy it's not really completing
455:36 - correctly as just
455:38 - demonstrated we'll go back over here and
455:40 - take a look at that again
455:44 - so yeah this one says demo. asli they're
455:47 - making a comment
455:50 - so Intel sense for commands and their
455:52 - arguments stiip and
455:54 - commands scrapbooks for uh developing
455:57 - running commands in the Azure
455:59 - CLI okay then work properly please maybe
456:04 - it's not
456:05 - installed oh we have to install it sorry
456:08 - I thought we already had it installed
456:09 - that's why so we'll go back over here
456:12 - and so now our common is showing up so
456:14 - we'll type a
456:17 - deployment um
456:19 - I mean we probably want to create
456:22 - right it will have to have a name so
456:24 - we'll just say my RG my
456:30 - bicep um
456:32 - deployment we'll probably have to have a
456:34 - location so let's just
456:37 - say probably should place it in the same
456:39 - place as this one this does not have a
456:41 - particular location so probably default
456:43 - to wherever the resource Group is yep so
456:46 - we'll say um it's East us there we go
456:51 - there's probably something else we need
456:53 - uh I'm not really sure let's go back and
456:55 - see what chat GPT was asking for uh the
456:57 - template of
457:03 - course um we'll say
457:06 - template and it technically is a
457:09 - file so we'll go here and say main J
457:13 - Json and by the way we could bring these
457:15 - down onto new lines with this backslash
457:17 - that allows us to have multiple lines in
457:20 - our bash
457:22 - terminal okay and it also probably wants
457:25 - the resource Group so we'll go here and
457:26 - type in
457:28 - resource it can't do
457:33 - multi-line it is not autocomp
457:36 - completing
457:38 - anymore Resource Group maybe we just hit
457:41 - the limit of it
457:47 - there
457:49 - uh so I I assume that it could handle
457:51 - multi-line but I guess when we're doing
457:52 - multi-line then uh the Intel sense the
457:55 - auto completion is it can't handle it so
457:58 - we'll go back over to here and I just
458:00 - forgot what we called that Resource
458:01 - Group we actually did create one uh but
458:03 - Azure bicep did fail the deploy because
458:06 - of some kind of permissions or settings
458:08 - so I just want to go quickly find that
458:10 - name again notice that sometimes an
458:13 - Azure you have to be patient super super
458:16 - super common uh to wait around for for
458:18 - Azure um because of propagations in
458:21 - their UI super
458:23 - common my internet's totally fine it's
458:26 - it's Azure and it's back here says an
458:28 - error occurred when trying to fetch
458:29 - resources additional details from the
458:31 - underlying API might be helpful are we
458:33 - having an issue with
458:36 - service so sometimes that happens so we
458:38 - go like uh Microsoft status
458:41 - page sometimes that happens and I got to
458:43 - walk away come back to my
458:47 - computer
458:50 - but uh maybe it's not because my
458:51 - internet seems to be funny
458:55 - so but if that's the case
458:58 - then oh yeah it's me I'll be back in a
459:01 - moment all right so uh my internet
459:04 - should be back here I'm just reopening
459:06 - my connection here to my code spaces and
459:10 - I'm going to go back over to here and
459:12 - we'll give it a refresh and so I guess
459:15 - that Resource Group did not create so we
459:17 - do definitely have to create a resource
459:18 - group first otherwise it's not going to
459:20 - know what to deploy
459:23 - into and I'm hoping that this uh
459:25 - reconnects or it's still
459:27 - running so but uh what I'll do here
459:30 - while we're waiting is I'm going to
459:31 - create a new Resource Group I'm going to
459:33 - call this one my
459:35 - bicep
459:37 - RG and we'll go ahead and review and
459:40 - create and we'll go ahead and create
459:42 - that we'll go back over to our other tab
459:45 - here I would really like it to reopen
459:48 - here um not sure what it's doing to
459:49 - figure this out going to go at the top
459:51 - just type in
460:18 - that previously working code space
460:20 - environment so it's here it is active
460:22 - I'm going to go back and say
460:24 - open in the browser notice you can
460:26 - launch this in Visual Studio code
460:27 - locally or if you want to use Jupiter
460:29 - Labs let's say you're doing something
460:30 - with AI or something or machine learning
460:33 - you could do that so this should open
460:35 - back up our environment there we go
460:38 - that's
460:40 - great and um so we created that new
460:43 - Resource Group that's called this here
460:44 - so I'm going to go ahead and copy that
460:46 - and I'm going to paste it into here
460:48 - sometimes it's good to put double
460:49 - quotations around these things I'm not
460:50 - doing that unless that gives us problems
460:52 - so I think this is everything we need we
460:54 - need to know um the resource Group uh
460:57 - it's probably recommended to provideed a
460:59 - name we'll have our location and our
461:02 - template file so I'm going to go ahead
461:03 - and copy this and fingers crossed this
461:05 - works uh of course we didn't really look
461:07 - anything up um oh this one says a
461:11 - deployment group create so maybe we
461:12 - should make sure that's
461:14 - correct but it did autocomplete create
461:17 - so maybe
461:20 - maybe that's okay well wait why is one
461:23 - deployment group wouldn't that create
461:25 - hold on we can hover over here and get
461:26 - some stuff manage the a your resource
461:28 - template uh deployment at the resource
461:30 - Group
461:33 - okay oh that's really cool if you hover
461:35 - over it tells you everything
461:38 - there well what happens if I take this
461:40 - name out then does this still
461:43 - complete starts a deployment at the
461:45 - subscription scope so maybe both both
461:48 - Works let's just see what happens it's
461:50 - really nice that it shows everything
461:52 - like that I really like that we'll go
461:53 - ahead and paste that in we'll hit
461:56 - enter and um it's showing we're missing
462:00 - an argument Resource Group arguments it
462:03 - doesn't like that
462:07 - one starts a deployment creates a
462:10 - deployment the resource
462:16 - Group okay so here we have a create and
462:18 - then we have starts a deployment the
462:20 - subscription scope creates a deployment
462:22 - at the resource Group from a local file
462:24 - template so it looks like if we already
462:25 - have one maybe this one would have
462:27 - created a resource Group for us so what
462:29 - I'm going to do is take this one out as
462:31 - I really thought we needed to have it
462:32 - but I'm going to go and see what happens
462:34 - if we do
462:36 - this the template resource location at
462:39 - line 12 uh line 17 is not is invalid the
462:42 - template function Resource Group is not
462:44 - expected at this
462:46 - location um okay it's it's not there I
462:48 - didn't put it in the
462:50 - template
462:52 - so okay well what I'm going to do is
462:55 - undo and type in group so I guess you
462:58 - got to be really careful when entering
462:59 - stuff in because it's going to give you
463:01 - some trouble and this one looks a little
463:03 - bit more normal with the group create so
463:05 - we have template file Resource Group I
463:07 - don't know if it needs a
463:09 - name so maybe I'll just take the name
463:12 - out and then we'll try this
463:16 - one and we'll hit enter
463:22 - and unrecognized arguments no
463:27 - location well I mean this one has it and
463:30 - this one doesn't okay we'll take the
463:32 - location out we'll try this well I guess
463:34 - we don't have to specify a location
463:36 - because we've already created the
463:37 - resource Group that's why so we'll try
463:39 - this again makeing a lot of trouble
463:43 - here but it's a good way to learn this
463:45 - is how you should learn and this is this
463:47 - is what Cloud's like just moing around
463:49 - till get till we get it to work and then
463:51 - hopefully it's it's the right way um so
463:54 - this is going to go ahead and run and
463:56 - we'll wait here I'm not going to make
463:57 - you uh watch watch it here I'll be back
464:01 - uh here in a moment okay all right after
464:03 - a little bit of waiting um our terminal
464:05 - has produced some stuff for us so it's
464:07 - suggesting it probably created the
464:08 - resource so we're in good shape let's go
464:10 - back over to Azure and we're going to go
464:12 - into our bicep RG and we now have our
464:16 - resource so we've success successfully
464:18 - used um as your biceps so let's go ahead
464:20 - and delete this Resource Group we are
464:22 - all done here um we're going to go ahead
464:25 - and commit what we have so that uh any
464:27 - future folks that are trying to do the
464:28 - same thing as us can just go get that
464:29 - code base uh good stuff here go ahead
464:33 - hit commit sync the changes we'll say
464:35 - okay that will push the changes
464:38 - excellent and I'm going to want to stop
464:40 - this workspace we'll open up the command
464:41 - pallet we'll say
464:44 - stop uh so say code spaces stop Cod C
464:49 - spaces stop current workspace there we
464:51 - go and that will stop the current
464:53 - workspace so that is all good right
464:56 - there um and I'm going to fix the name
464:59 - here because it really should be named
465:01 - correctly so that you can easily find it
465:03 - in the
465:05 - future just be more patient and make
465:07 - sure you don't make mistakes and try to
465:08 - fix them the best you can but yeah that
465:10 - is azure bicep and we'll see you in the
465:13 - next one
465:17 - okay
465:18 - [Music]
465:20 - all right so we are back we showed you
465:22 - how to uh utilize an arm template as
465:25 - your bicep I want to show you another
465:27 - way to do infrastructures code that's
465:28 - very popular and it's with a uh
465:31 - third-party um uh technology called
465:34 - terraform super popular because
465:36 - terraform can work with every single
465:39 - cloud provider and it's simply the most
465:42 - popular I tool um and it doesn't get a
465:45 - whole lot of attention with Azure so I
465:46 - figured we should throw that in in here
465:48 - because you're most likely to encounter
465:50 - it uh on the job as Azure bicep and arm
465:52 - templates aren't as used as much as
465:55 - terraform surprisingly so what I want to
465:57 - do is go over to um GitHub and we're
466:00 - going to make another
466:02 - repo if it will let me see where that
466:05 - button is sometimes it's a bit funny so
466:06 - I'll go to the top right corner create a
466:08 - new repo there's lots of ways to create
466:09 - repos in here going to go to exam Pro
466:12 - I'm going to make sure I type Azure
466:13 - right this time we'll say Azure
466:14 - terraform example I'm making mine public
466:17 - you can make yours private um again it's
466:21 - better for you to make it private
466:22 - because that way you might uh you won't
466:24 - expose information by accident and not
466:28 - sure why this looks a little bit
466:29 - different maybe GitHub just changed
466:31 - something on me but what we'll
466:32 - do because there used to be like a a
466:35 - code button here maybe because I didn't
466:38 - create the read me that's
466:40 - why normally supposed to have a readme
466:42 - I'm going to go ahead and just click
466:43 - that button to create the read me commit
466:46 - that and
466:49 - oh unexpected what are you talking about
466:52 - well now it is here so I think GitHub is
466:54 - just having some hiccups anyway we have
466:57 - a code code button here we'll go ahead
466:59 - and create our code
467:01 - spaces and we'll launch that up and
467:03 - we're going to have to go install the
467:04 - terraform CLI so I'm going to look up
467:06 - terraform CLI
467:08 - install and we'll go to the hashy cor
467:11 - website hash car is what makes terraform
467:13 - and somewhere in here they'll have one
467:14 - for Linux we'll go over here and we need
467:17 - to follow these commands here very
467:19 - straightforward not a a oneline command
467:22 - but they have additional commands here
467:24 - for security
467:25 - purposes so uh this environment's
467:28 - opening let's go to the bottom left
467:30 - corner and we'll pick out a nicer theme
467:33 - we'll choose a uh GitHub
467:36 - dark I'll just bump up the font a little
467:39 - bit and we'll go back over to
467:41 - here and we'll copy the installation
467:43 - command so we're uh uh copying the first
467:46 - one
467:46 - here we say
467:50 - allow okay we'll try this
467:54 - again and is not letting me copy paste
467:58 - sometimes you got to go up to this
467:59 - clipboard make sure it
468:00 - allows it is on
468:03 - continue
468:04 - copy right click there we go and this is
468:07 - going to install um usually it's good
468:10 - practice to do an update on your
468:11 - packages we didn't do that for the other
468:13 - the Azure CLI but very common practice
468:16 - on Linux do that so that's what they're
468:18 - doing first then we'll go over here and
468:20 - we will grab the gpg key um gpg is a
468:24 - security key that does something this
468:26 - output is normal you should be seeing
468:27 - this why it prints it like that I don't
468:29 - know but I know it's okay you can ignore
468:31 - it we will paste in the next one and
468:36 - that one was weird that didn't look
468:37 - right so I'll try this one more
468:39 - time paste it again hit
468:43 - enter oh I had to hit control C when you
468:45 - see this like this here it usually means
468:47 - it's expecting more input so I had to do
468:50 - um contr C on my keyboard that's when
468:52 - that shows up so I'm going to try that
468:54 - one more time I think what it did was
468:56 - when I hit up it it broughten that stuff
468:57 - so we'll go back over
468:59 - here I know it's a bit finicky it's a
469:01 - bit frustrating and so this looks normal
469:03 - this is what I want it's confirming the
469:06 - key so verify the so download the key
469:09 - and then verify it's
469:11 - fingerprint and then the next thing we
469:13 - can do is this will install the source
469:15 - for hashy Corp so it can actually
469:17 - install the p
469:22 - package and notice that sometimes when
469:24 - you copy paste you get some funny stuff
469:26 - so you got to be really careful with
469:28 - your copy
469:31 - paste okay I'm just going to type clear
469:33 - here I'm going to try this
469:36 - again copy right click paste there we go
469:41 - okay so now it's acting
469:46 - normally you know I've been coding for
469:49 - 20 years and copy and paste gets me all
469:51 - the
469:52 - time it's uh not much you can do about
469:54 - it now we can go ahead and install it so
469:57 - I know that's a lot of steps we probably
469:59 - could have just ran this and it probably
470:01 - would have worked okay also knows here
470:04 - it accidentally downloaded this weird
470:05 - file I'm going to go ahead and delete
470:06 - that not sure why it did that but make
470:09 - sure you don't end up with junk files by
470:10 - accident so now terraform is installed
470:13 - so uh terraform the way it works is you
470:16 - have the terraform command we hit hit
470:17 - enter here I recently did a terraform
470:20 - boot camp so terraform is fresh in my
470:22 - mind whereas you notice Azure bicep was
470:24 - a bit more Rusty but we'll go ahead and
470:26 - make a main.tf file that is how we
470:28 - create a terraform file we'll go to
470:30 - extensions on the left hand side there's
470:32 - probably a terraform
470:34 - extension and here is one um this
470:37 - there's this one and this
470:39 - one this one is by Anton and I know
470:42 - Anton he's super nice and then we also
470:44 - have uh the official one we'll go the
470:46 - official one here today sorry Anton
470:48 - don't get upset with me they're both
470:50 - great I just chose the official one for
470:53 - this uh video demonstration Anton's um
470:56 - maintains uh the terraform modules for
470:58 - ads and a lot of other stuff so he he's
471:01 - very good at terraform but now that we
471:03 - have this installed it should gives us
471:04 - some syntax highlighting and autoc
471:06 - completion um and so uh what we need to
471:09 - do is we need to get some code now the
471:12 - reason I like Azure bicep is because it
471:14 - really does generate everything in place
471:15 - but with terraform you have to do a
471:16 - little bit of work
471:18 - we're going to type in terraform
471:19 - registry and this is where um we can
471:22 - find everything so here it's the
471:23 - registry. terraform doio and we're going
471:26 - to go to Providers providers is our
471:28 - established connection to our specific
471:30 - provider we're going to choose Azure and
471:33 - in here in the top right corner they
471:34 - have this purple button and it's going
471:35 - to give us the code that we need to
471:37 - start working with we're going to go
471:38 - ahead and copy this and we're going to
471:40 - go over here back to our code we'll
471:43 - paste it into our main TF file so what
471:45 - this is going to do it's going to say
471:47 - install the the uh the ads or sorry the
471:51 - Azure RM provider so that we can
471:53 - interact with Azure through terraform
471:55 - and then we can configure Azure down
471:57 - here below normally the way it works for
472:00 - uh configuration if we go to
472:01 - documentation it will tell us in the
472:02 - first page how do we establish a
472:05 - connection so we can authenticate using
472:08 - the Azure CLI which is something that we
472:10 - have done we can also use a manage
472:12 - service or a service principle um so I
472:16 - mean the the azure C is the easiest way
472:18 - to do it at some point you will have to
472:20 - learn how to create a service principle
472:22 - so I kind of want to do that like that's
472:25 - kind of what I'm preferred to do at this
472:27 - at this stage
472:28 - here um but uh I have to make sure that
472:31 - this makes sense so service principal
472:34 - and client secret so this would be with
472:37 - a password so let's click into this
472:40 - one and I'm just trying to see where the
472:43 - syntax is here I'm just looking at the
472:45 - code so first log into here
472:48 - here create
472:51 - rbac no no I'll just do it the easy way
472:53 - I won't make it too complicated for
472:55 - everybody here I'll just use the Azure U
472:57 - the Azure CLI so what we'll do is we'll
473:00 - need to go ahead and install the Azure
473:01 - CLI so you probably know by this routine
473:03 - now so we'll go Azure CLI install and
473:06 - we'll go over here and we'll go down
473:08 - we'll go to the Ubuntu Debian and we'll
473:12 - scroll on down grab the single line go
473:14 - back over to code spaces which is here
473:17 - we'll drag this up we'll go ahead and
473:19 - paste this in and we'll hit enter and
473:21 - that will install us the Azure
473:23 - CLI won't take too long but it will get
473:25 - installed here in a moment and so I'm
473:28 - thinking that if the CLI is installed it
473:29 - should automatically or uh it should
473:31 - already know how to
473:33 - deploy um so while that is installing
473:36 - let's go back over to uh the terraform
473:38 - registry and we'll look at um uh trying
473:42 - to launch something in Azure so if we
473:44 - click
473:46 - back and we go back to the documentation
473:48 - it has all the resources here on the uh
473:51 - uh left hand side so we've been doing
473:53 - storage accounts quite a bit here so I'm
473:55 - just going to look for that on the left
473:57 - hand side there so we'll type in
473:59 - storage here and we'll go into
474:03 - storage and in here I'm looking for a
474:06 - storage account so it's right here and
474:09 - we have some example code so this is
474:11 - going to create
474:13 - us a resource Group and then a storage
474:16 - account so we'll copy this code and
474:19 - we'll bring it on
474:21 - over to here and we'll just paste it on
474:23 - below I'm going to have to jump this
474:25 - down a couple sizes here so I can see
474:27 - what I'm doing and so we'll paste that
474:28 - on in there and so now we have our uh
474:30 - Resource Group with a logical name of
474:32 - example um I'm going to rename this to
474:35 - be something other than this so we'll
474:37 - say uh
474:39 - my uh terraform RG I don't want West EUR
474:45 - Europe I want uh something in North
474:50 - America
474:52 - West us is that what it would
474:56 - be I'm not sure if this will actually
474:58 - autocomplete for me if it messes up
474:59 - it'll throw an error we need to give
475:01 - this a name so we will provide uh some
475:04 - name here we're not doing complex
475:05 - terraform of course you can pass in
475:07 - parameters with separate files and
475:08 - variables we didn't do that with uh
475:10 - bicep either um that's something we
475:12 - would do at a more advanced level but
475:14 - let's go ahead and change this name here
475:16 - and we'll put something else in so we'll
475:18 - say um uh my storage account bunch of
475:23 - numbers and then AB okay so this should
475:27 - work replication doesn't need to be on
475:29 - RGS but that's still fine it's a
475:32 - standard that's fine I guess we have
475:34 - some tags we don't need tags but that's
475:36 - fine so now what we'll want to do is go
475:38 - down below here and we'll have to do an
475:40 - ay
475:42 - login sorry I meant to say ay login
475:45 - hyphen hyen Ed device code
475:49 - okay and so we'll have to go to this
475:50 - address down
475:53 - below and we'll open
475:55 - it on one of these other tabs we don't
475:57 - care about and we'll go back here and
476:00 - grab the
476:03 - code we'll say
476:06 - next and we'll click this we'll say
476:11 - continue great we'll go back over to
476:15 - here and so we have ADD your Cloud we
476:17 - are now logged in so we should be able
476:19 - to deploy to terraform it should know
476:21 - that we're going to deploy to that
476:22 - subscription remember earlier we checked
476:24 - the um that Azure file uh in our uh
476:27 - Azure config I'm just going to show you
476:29 - really quickly Tilda sl. aure tab tab
476:33 - tab and we're going to look in the
476:35 - config directory it wasn't that one
476:37 - maybe it was something else Cloud's
476:40 - config and that's how it knows what
476:43 - subscription is going to Target where
476:45 - those credential files are somewhere in
476:46 - that folder we still don't know and uh
476:49 - the terminal's kind of messing up here
476:51 - there we go I had to just kind of wiggle
476:52 - it to get it to act normally and so what
476:55 - I want to do is type A terraform and nit
476:57 - so that's going to install the terraform
477:00 - plugins the actual Azure provider for us
477:02 - to establish connection I'm going to
477:04 - type a terraform plan that's how you um
477:08 - determine if your plan will work it says
477:10 - insufficient feature blocks at least one
477:12 - features block are required what the
477:15 - heck is a features block I don't I don't
477:17 - remember there being one there uh there
477:18 - before maybe it just wants us to remove
477:21 - the configuration complet
477:23 - completely let's see if that
477:26 - works um no it wants it so we'll go back
477:28 - here I don't remember there being a
477:30 - features block before but again things
477:32 - change all the time on uh on me here and
477:35 - so we'll go back to the provider it
477:36 - doesn't show anything here go back to
477:39 - the
477:41 - documentation
477:43 - features the features block allow
477:45 - configuration behavior for the a
477:46 - provider for more information go to the
477:48 - dedicated page sounds good to me and
477:51 - here it says uh this allows different
477:53 - users to select behaviors they require
477:55 - for example some users may wish to use
477:57 - the OS dis virtual machine While others
477:59 - might want to do other stuff so here
478:03 - looks like you're supposed to have a
478:04 - features block and then there are some
478:06 - settings you can
478:07 - set um additional settings so that's
478:10 - kind of cool uh I don't remember that
478:12 - before but let's just give it empty
478:14 - features because I don't really want to
478:16 - uh do anything
478:18 - fancy okay we'll go ahead and save and
478:22 - we'll say terraform
478:27 - plan we'll give it a moment here it's
478:30 - thinking it's really thinking that's a
478:33 - good thing
478:39 - right and usually doesn't take this
478:42 - long
478:45 - um what is going on here I'll be back in
478:49 - a moment okay all right so I thought
478:51 - there might be an issue with it but we
478:52 - had to wait a very long time and it says
478:54 - insufficient feature blocks um so at
478:57 - least one features blocks are required
478:59 - so I guess there's no way around it we
479:01 - have to include a feature so I guess
479:03 - I'll carefully look here and figure out
479:07 - what it
479:09 - wants um so here's all
479:12 - possible uh
479:15 - features they say they're all optional
479:17 - then why do I have to why do I have to
479:20 - provide one if if they're all
479:23 - optional okay well if there was one that
479:26 - we're going to do let's go ahead and
479:27 - grab the resource Group because we are
479:29 - using it we are technically creating a
479:30 - resource Group um so maybe that's a good
479:33 - idea to um have that one in
479:36 - there really surprised that we have to
479:38 - but
479:40 - whatever so it says prevent deletion if
479:43 - contains
479:45 - resource
479:48 - uh false I mean you might want it true
479:51 - but the thing is we're doing this
479:52 - temporarily and I want to be able to
479:54 - tear things down and I don't want to
479:56 - have any prevention on so we'll go ahead
479:58 - and try terraform plan again maybe it'll
479:59 - be faster that'd be really
480:01 - nice and we did do what it asked us to
480:04 - do
480:07 - so and again I'm going to spare you the
480:09 - waiting I'm just going to uh pause oh no
480:13 - there we go so what it's done is it's
480:15 - saying um and I'll just zoom out a bit
480:17 - more so it's a bit easier or Zoom back
480:20 - so the way it works is when you run it
480:22 - it's going to say yeah we are going to
480:23 - create these resources to see those
480:25 - pluses that's what it's going to go
480:26 - ahead and
480:27 - create and there might be even more than
480:30 - what you expect there to be um but nope
480:32 - it's it's good so now that we're ready
480:34 - we can go ahead and do a terraform
480:37 - apply terraform
480:39 - apply it's going to ask us to confirm
480:42 - it'll say like yes or no we'll
480:44 - definitely say yes we'll give it a
480:45 - moment
480:52 - okay other providers like adus and gcp
480:55 - are a lot more responsive I think it's
480:56 - just the time it takes to go talk to
480:58 - Azure we'll type in
481:04 - yes we'll give it a moment here again
481:07 - it's thinking it's
481:11 - thinking and it's creating the resources
481:14 - great so I'll be back here when it's
481:17 - done it might just take a couple minutes
481:19 - might take 30 seconds but I'll be back
481:20 - when it is uh created all right so like
481:23 - about a minute took to create um so what
481:26 - we'll do is we'll go take a look at and
481:28 - by the way we really don't want to um um
481:32 - we really don't want to uh leave this
481:34 - you really want to stick with this and
481:36 - uh after we deploy it so we can tear it
481:37 - down because the state file is all here
481:40 - so when you use um uh arm uh as your arm
481:44 - templates and bicep with which just
481:46 - produces arm templates the state of the
481:49 - the infrastructure is on the cloud
481:51 - provider so Azure has uh the Azure
481:55 - resource manager and it stores some kind
481:57 - of state file you don't see it we don't
481:58 - know what format it's in um uh but with
482:01 - terraform because it is an agnostic
482:03 - provider uh it stores the state file
482:05 - here now we could use ter from cloud
482:08 - which has a free tier and we could put
482:09 - it up there but uh for our purpose we
482:11 - just have it in here you do not want to
482:13 - commit this ever to your repo it could
482:15 - have sensitive information in it so just
482:17 - be aware of that in fact we should have
482:19 - an ignore file in here so that we not
482:21 - running into problems so I'm going to go
482:23 - ahead here and just type in get ignore
482:26 - it's probably the first thing we should
482:27 - have done but uh you know sometimes we
482:29 - do things out of order here get ignore
482:31 - uh terraform so we'll just go grab that
482:33 - because it'll give us the best stuff
482:35 - GitHub has a um a recommended ignore
482:38 - file we'll go ahead and copy
482:42 - that and we'll go back here and paste
482:45 - this in here and Save it and that way um
482:48 - that state file will not be part of the
482:50 - source code so notice it's not going to
482:52 - commit it but the lock file will be
482:54 - there which is fine let's go over to uh
482:57 - Azure and make sure that that resource
482:59 - was created so if we go to storage
483:00 - accounts we have an additional one there
483:03 - my uh storage account Etc it's there so
483:07 - um it's there so if we were to lose that
483:10 - state file we would actually have to
483:11 - manually delete the resource Group
483:13 - because it would no longer be able to
483:15 - track it but we do have the state file
483:16 - here and so we can go ahead and delete
483:19 - those resources so we'll go ahead and
483:20 - type in terraform
483:23 - destroy and we'll hit enter and that
483:25 - will um tear down terraform
483:34 - okay we'll give it a moment it's just
483:44 - thinking it is thinking real
483:51 - hard there we go we'll type in yes and
483:53 - we'll have to wait for it to destroy the
483:55 - resource I'll see you back here when
483:57 - it's done destroying okay all right so
483:59 - after a short little wait there uh that
484:01 - stuff has been torn down I'm going to go
484:02 - ahead and commit these files so uh
484:04 - changes we'll just make a quick commit
484:06 - message there we'll sync those changes
484:08 - we'll say okay make sure those changes
484:10 - get pushed if you need to look at my
484:12 - code it's going to be in that repo so
484:14 - just go back and look for it on the
484:16 - GitHub exam proo aure bicep
484:19 - example um yeah we're good there let's
484:22 - make sure we just
484:24 - uh turn off this workspace here so we'll
484:27 - say
484:28 - stop
484:30 - okay and we have now stopped this
484:33 - workspace we are in good shape and we'll
484:35 - see you in the next one
484:37 - [Music]
484:41 - okay all right so um I've been in the
484:44 - free tier here and I've been Gathering a
484:45 - bit of spend while just clicking through
484:47 - resources I was actually surprised how
484:49 - much spend uh has occurred considering I
484:51 - haven't really done anything but let's
484:53 - go take a look at in our subscription
484:55 - and see if we can figure out what's
484:57 - going on with our spend here uh of
484:59 - course you know if you are in your paid
485:00 - tier that could be problematic uh but
485:03 - I'm hopefully you are utilizing the free
485:05 - tier just as I am um and also we might
485:07 - be bringing through the free tier
485:08 - quicker because they're not treating um
485:11 - not giving us the free uh the free tier
485:13 - usage and they're just treating
485:15 - everything as as if it's it's fully paid
485:17 - so here it says we have2 200 remaining
485:18 - out our $500 still I find that kind of
485:21 - crazy we have spending rate and forecast
485:23 - uh cost of course we have no cost so
485:25 - we're probably more interested in usage
485:27 - but let's go take a look and see what's
485:29 - been causing this issue so we'll go into
485:32 - uh here into our cost
485:34 - analysis and there is there is really no
485:37 - real cost it's more just like us using
485:39 - uh resources so I'm trying to make sense
485:41 - of this it Mak it's a lot easier when
485:43 - it's real money and not uh pretend money
485:45 - so we'll have to see here we'll go cost
485:49 - by
485:50 - resource let's see if we can make sense
485:52 - of this
485:54 - breakdown and uh I mean these are all
485:56 - under a dollar so I'm not exactly sure
485:59 - what it means here so this is not going
486:01 - to be very useful in our free tier maybe
486:02 - what we can do is go over uh
486:07 - to back over to uh our subscriptions
486:10 - here because really we shouldn't really
486:12 - have any kind of spend it's uh I think
486:14 - it's Azure tricking us
486:17 - because I know all the resources we've
486:18 - been spitting up and they're not uh we
486:20 - have not had them up for very long and
486:22 - there's no way they could be uh uh as
486:25 - much as it's reporting here so maybe a
486:27 - better thing might be usage uh if usage
486:30 - gives us some indication
486:32 - here I rarely ever have free tier so
486:35 - it's not always very clear to me uh
486:36 - what's going on here and so what we're
486:38 - seeing here is this is the um uh the
486:41 - quotas or usage of resources so if you
486:43 - were to exceed this you might have to uh
486:46 - request a a quot increase so this is not
486:49 - uh that useful uh this is more about
486:51 - current usage and usage there so yeah
486:53 - I'm not 100% sure where um uh free spend
486:57 - occurs so just give me a moment and I'll
486:59 - go find out okay all right so um
487:01 - Microsoft is suggesting some things here
487:03 - I don't necessarily mean that I believe
487:05 - that this is where it is but let's go
487:06 - take a look and see if they're being
487:07 - honest with us here so we're in our
487:09 - subscription and it's suggesting that we
487:11 - go over to where um spending r forecast
487:16 - so that's what we were on earlier if we
487:18 - go back over to the right tab it was we
487:22 - go back over to overview it was this
487:24 - here we go to view
487:26 - details and I was trying to break it
487:28 - down a different
487:31 - way okay so we'll go back over here cost
487:34 - by resource show the cost of individual
487:37 - resources uh top free services by
487:41 - usage uh this only uh this area only
487:44 - appears for free count so if you don't
487:45 - have a free count the isn't shown well
487:47 - I'd love to see that that sounds very
487:48 - useful to me so let's see if we can I'm
487:51 - going to close this tab it keeps messing
487:53 - me up if we can see that
487:57 - [Music]
488:01 - here I mean I'm not
488:04 - really seeing that
488:07 - here all right let me really carefully
488:10 - read it okay all right I think what it's
488:12 - saying is that on that overview page
488:13 - it'll have that on the right hand side I
488:15 - don't think I saw saw that but I was
488:17 - going pretty darn quick so to be fair it
488:19 - could be my fault and we're just going
488:21 - to go back to subscriptions here on our
488:23 - overview it's over here so we'll view
488:25 - all free uh uh Services they say this
488:28 - only is provided in our free services
488:30 - for 12 months so no this is talking
488:32 - about all usage over uh over 12 months
488:36 - and uh we can sort this based on usage I
488:38 - suppose and we're only seeing usage here
488:40 - so you can see that we're not really uh
488:43 - utilizing much like Cosmos DB has a free
488:45 - tier that's something we spun up earlier
488:47 - virtual machines has a free tier I don't
488:49 - think AKs has a free tier but where is
488:52 - all this money going that's what I want
488:54 - to know how do we go from $500 to $200
488:56 - in a day uh it's oh your remaining $200
489:01 - of free credits expire in ETC maybe we
489:04 - only get 200 free maybe it's not $500
489:06 - and I'm just I'm just crazy um let's go
489:10 - ask
489:11 - chbt how many credits do I get in Azure
489:17 - for the first 30
489:19 - days maybe it's just
489:22 - 200 I mean that sounds more reasonable
489:24 - than 500 I think I'm just uh kind of
489:30 - forgetting I remember gcp once had like
489:33 - a lot of free credits like
489:36 - thousands and uh chat GPT is really
489:38 - taking their time here so let's go out
489:40 - to the internet and oh no here we
489:43 - go it's $200 okay so all right our spend
489:47 - isn't crazy it's just down by a little a
489:50 - little amount of money it's still not
489:52 - showing us what is fully
489:55 - outstanding again it's so hard to see
489:57 - this when the spend is so low so I guess
489:59 - we really are not spending a whole lot
490:01 - there we can go back to notifications
490:02 - and see it uh I mean it did show up here
490:13 - notifications and notifications is
490:15 - taking time here to today that's
490:17 - great come on notifications you can do
490:25 - it it's really not appearing here today
490:29 - and I can't go
490:30 - back there we go yeah so I guess maybe
490:32 - it wouldn't show up there maybe it would
490:34 - show up in the advisory so um uh most
490:37 - providers have advisories and that's
490:39 - maybe where that popup came from so
490:40 - we'll go back to subscriptions I think I
490:43 - saw it here on the left hand side we had
490:45 - like uh ad
490:47 - recommendations and we have none right
490:50 - now okay so that's okay um all I wanted
490:54 - to know was do we know where we can see
490:56 - our spend and apparently in the free
490:57 - tier we can go over here uh and see
490:59 - stuff since we're not in the pay tier
491:01 - there's not a whole lot of information
491:02 - that is interesting that we can see but
491:04 - maybe make note of this that when you
491:05 - want when you are in your first 12
491:07 - months of your account go over here and
491:09 - check and just uh see what your
491:11 - utilization is looking at and just be
491:13 - very aware of what you have access to so
491:15 - clearly we have Cosmos DB we have
491:17 - storage we have some virtual Machines of
491:18 - very particular sizing we get some SQL
491:21 - database which is really nice uh public
491:24 - IP addresses this is something that was
491:26 - not charged for uh previously I don't
491:28 - know when Azure started charging for it
491:30 - but all providers now charge for
491:32 - ipv4 uh addresses um so that's another
491:35 - additional uh expense cognitive Services
491:38 - which we do a lot in the AI 900 so
491:41 - that's a lot of AI stuff you got a load
491:43 - balancer for free which is nice um um
491:46 - and a bunch of databases down here below
491:47 - and more virtual machines so one's
491:49 - probably L Linux one's probably windows
491:51 - so a lot of fun stuff there but anyway
491:53 - hopefully that gives you an idea of
491:55 - spend a little bit more but of course
491:57 - it' look a lot nicer if we had more
491:58 - spend and maybe I'll make a separate
492:00 - video showing uh more spend okay see you
492:02 - in the next one
492:06 - ciao so asure monitor is uh quite a
492:09 - beefy service there's a lot going on in
492:11 - it and so it's a comprehensive solution
492:13 - for collecting analyzing acting on tele
492:15 - data from your cloud and on- premise
492:17 - environment so here's an example of one
492:19 - of the things it can do which is provide
492:20 - you a visual dashboard but it can create
492:23 - smart alerts automate actions log
492:25 - monitoring and a lot of different things
492:27 - and many Azure Services by default are
492:29 - already sending their data to Azure
492:31 - monitor so you can use it right
492:36 - away now I just want to introduce you to
492:38 - the concept of the pillars of
492:40 - observability this isn't a thing
492:42 - specific to Azure but it's something
492:43 - that in devops that you need to
492:45 - understand and it's just going to help
492:46 - you contextualize the offerings of azure
492:49 - Monitor and other cloud service
492:50 - providers so what is observability that
492:53 - is the ability to measure and understand
492:54 - how internal systems work in order to
492:56 - answer questions regarding performance
492:58 - tolerance security and faults with a
493:00 - system and application and in order to
493:02 - uh obtain observability you need three
493:04 - things you need metrics logs and traces
493:06 - uh and you have to use them together
493:08 - using them in isolate does not gain you
493:10 - a observability so let's go Define those
493:12 - three things the first thing is metrics
493:14 - and that is a number that that is
493:15 - measured over a period of time if we
493:17 - measured the CPU usage and aggregated it
493:19 - over a period of time then we would have
493:21 - the average CPU metric then you have
493:23 - logs these are text files where each
493:25 - line contains event data about what
493:27 - happened at a certain time and then you
493:29 - have um traces and this is a history of
493:32 - requests that is that is uh that travels
493:35 - through multiple apps and services so we
493:37 - can pinpoint performance or failures and
493:40 - I like to make the joke that it looks
493:41 - kind of like the Triforce observability
493:43 - once you've constructed it there at the
493:45 - end
493:45 - [Music]
493:50 - let's look at the anatomy of azure
493:51 - monitor which is a little bit complex
493:53 - but I'm sure we can work our way through
493:54 - it so the first thing is that we need uh
493:56 - sources of data so these this is what uh
493:59 - what data can be sent into Azure so you
494:02 - probably want application data operating
494:04 - system data uh data from Azure resources
494:07 - at your subscription level your tenant
494:08 - level which is going to be associated
494:09 - with active directory and custom sources
494:12 - and once you get those into Azure
494:13 - monitor you have to store them somewhere
494:16 - you're going to put them in logs and
494:17 - monitors and these are just data stores
494:19 - that are within Azure monitor that
494:20 - you're going to be able to work with and
494:22 - once you have that data in there you're
494:24 - going to be able to leverage different
494:25 - services that do different things um and
494:27 - so we will call these functions so you
494:30 - can perform insights uh visualizations
494:33 - uh analysis uh response and integration
494:36 - so what we' look at insights uh we're
494:39 - getting insights into our virtual
494:40 - machines our containers our applications
494:43 - uh for visualization you might be making
494:45 - d dashboards uh you could be using
494:46 - powerbi or creating workbooks for
494:49 - analysis you might be using the log
494:50 - analysis or the metrical analysis tools
494:53 - for responses uh you might want to
494:55 - create alerts or start Auto scaling and
494:57 - for Integrations you might want to use
494:59 - logic apps or export apis to connect
495:02 - things up so there you
495:07 - go I want to quickly touch on log
495:09 - analytics uh and so this is a tool used
495:11 - to edit and run queries within Azure
495:14 - monitor logs and and so the idea is it
495:17 - kind of looks like um something you use
495:18 - to connect to a database cuz it really
495:20 - is structured like a database with
495:21 - tables and columns and things like that
495:24 - and it has this uh its own query
495:25 - language called kql and the idea is that
495:28 - you input uh um your queries and it's
495:31 - going to Output results for you and
495:33 - that's something we're going to look uh
495:34 - in Greater detail is that uh kql
495:36 - language so that we know how to use that
495:38 - panel let's go talk about
495:40 - [Music]
495:44 - workspaces so um when you use log
495:46 - analytics you're going to probably want
495:47 - a workspace and this is a unique
495:49 - environment uh for Azure monitor log
495:51 - data each workspace has its own data
495:54 - repository and configuration and data
495:55 - sources and solutions and are configured
495:57 - to store their data in a particular
495:59 - workspace so it's really interesting
496:01 - because if you go over to Azure monitor
496:03 - you can use uh uh log analytics without
496:06 - creating a workspace but I believe that
496:07 - if you want to um uh isolate a lot of
496:10 - your data and uh install like maybe like
496:14 - collect data outside of a your services
496:16 - for other things you're going to need a
496:17 - workspace and it's going to also have a
496:19 - lot more robust options so that's
496:20 - something you're going to end up doing
496:22 - is uh creating work spaces and it's a
496:24 - good habit to do um but there's not a
496:26 - lot to talk about there but let's move
496:28 - on to actual the query language which is
496:29 - really the meat of log
496:35 - analytics let's take a look here at
496:37 - Azure alerts and this helps us uh be
496:39 - notified when there are issues found
496:41 - within the infrastructure or application
496:43 - and this allows us to identify and
496:44 - address is before the users of your
496:46 - system notice them and so they come in
496:48 - three flavors we got metric alerts log
496:50 - alerts and activity log alerts and when
496:52 - alert is triggered you can be notified
496:54 - or have it take action so here is kind
496:56 - of the anatomy of an alert and we have
496:59 - the alert rule this defines who we
497:01 - should monitor like the the service and
497:03 - uh like the the definition of when it is
497:06 - triggered which is going to be the next
497:08 - part here so a resource such as a
497:10 - virtual machine uh designated as a
497:12 - Target resource will emit signals so
497:14 - it's going to be em emitting a data
497:15 - payload and it could be of the following
497:17 - types it could be a metric a log
497:19 - activity log application insights you
497:21 - can kind of see how that ties to the
497:22 - types of alerts then you have the
497:25 - criteria or logical uh tests this gets
497:27 - evaluated and determines are we in a
497:29 - triggered state it could be like
497:31 - percentage CPU greater than 70% then you
497:33 - have your Action Group which contains
497:35 - actions um and those actions uh will be
497:39 - uh performed when it is triggered and
497:41 - actions could be things like run uh run
497:43 - an automation run book use Azure
497:46 - functions itsm logic app web hooks or
497:48 - secure web hook on the other side there
497:51 - we have um this box over here and this
497:53 - is all about the state of your alert and
497:55 - so we have monitor condition Al Alert
497:57 - state so monitor condition is set by the
497:59 - system and Alert state is set by the
498:01 - user but the idea that is there is so
498:04 - you can Define where it is because you
498:06 - might want to uh have a history of
498:08 - saying okay I've resolved this issue so
498:10 - I'm marking this as closed and that' be
498:12 - like an alert State there um and so
498:14 - there you go
498:15 - [Music]
498:19 - let's take a look here at application
498:20 - insights and this is an application
498:23 - Performance Management Service so it's
498:25 - an APM and it's a subservice of azure
498:27 - monitor let's talk about what apms are
498:29 - so these are monitoring and and um uh
498:31 - they do monitoring and management of
498:32 - performance and availability for
498:34 - software apps APM strives to detect
498:36 - diagnosed complex application
498:37 - performance problems to maintain an
498:39 - expected level of performance so why use
498:43 - application insights will automatically
498:45 - text performance anomalies and includes
498:47 - powerful analytics tools to help you
498:49 - diagnose issues and to understand what
498:50 - users do with your app designed to help
498:53 - you continuously improve performance and
498:55 - usability works for apps for.net node GS
498:58 - Java python hosted on on premise hybrid
499:01 - or any uh public cloud and I know that
499:03 - it works for uh other ones that are not
499:06 - part of the supported languages so
499:07 - there's one for Ruby but the thing is is
499:09 - like um Azure is only providing official
499:12 - support for a bunch of languages but you
499:14 - might still have libraries out there for
499:16 - them and it integrates with your devops
499:18 - processes and can monitor analyze uh
499:20 - Telemetry from mobile apps by
499:22 - integrating with visual studio app
499:25 - center and if you're running an app you
499:27 - definitely want to have an APM installed
499:29 - if you ever use data dog or Skylight or
499:32 - New Relic that's what apms are or what
499:35 - those um providers offer but let's take
499:37 - a closer look here and this is kind of
499:40 - an example of uh an application and what
499:43 - you're going to see is that we have a
499:44 - front end a backend and workers just to
499:46 - kind of represent uh how you can
499:48 - instrument your applications and when we
499:50 - say instrument it just means install
499:51 - like this piece of code that runs on it
499:53 - to send data back to uh application
499:56 - insights uh and the idea is that when
499:58 - you instrument it you're just installing
499:59 - the instrument uh package STK or in some
500:02 - cases you can just turn it on where it's
500:03 - supported so you don't necessarily uh
500:05 - have to install it an app you might just
500:07 - press a button and it will uh install it
500:10 - within uh Azure services and there's
500:12 - many ways that you can view your
500:14 - telemetry data so the idea is that the
500:16 - agent send that information to
500:17 - application insights and then you're
500:19 - going to be able to leverage that in
500:21 - alerts powerbi Visual Studio rest API
500:23 - continuous exports a lot of a lot of
500:25 - services can ingest application sit so
500:28 - apps can be instrumented from anywhere
500:30 - so if if you running on AWS you can
500:32 - install it on your servers there when
500:34 - you set up application sites monitoring
500:35 - for your web apps you create an
500:37 - application site resource in Microsoft
500:39 - Azure so it's a physical resource and
500:42 - you open this resource in the Azure
500:43 - portal in order to see and analyze
500:45 - Telemetry collected from your app and
500:47 - the resources identified by the
500:48 - instrumentation key also known as the I
500:50 - key and I just got a big old list here
500:53 - just to tell you all the things you can
500:54 - do with it so what does application
500:56 - Insight monitor well request rates
500:58 - response time failure rates dependency
500:59 - rates response times failure rates
501:02 - exceptions page views load performance
501:04 - Ajax calls user and sessions count
501:06 - performance counters host Diagnostics
501:09 - diagnostic Trace uh logs custom events
501:12 - metrics uh uh so there you go that's a
501:14 - big old list and on the right hand side
501:16 - is where can I see my Telemetry and we
501:18 - saw a little list but let's go through
501:19 - the big list and that's uh smart
501:21 - detection manual alerts application map
501:23 - profiler user uh usage analysis
501:25 - diagnostic search for instance data
501:27 - metrics Explorer for aggregated data
501:28 - dashboards live metric streams analytics
501:31 - Visual Studio snapshot debugger powerbi
501:35 - rest API continuous export and there you
501:38 - go so you can see that it can collect
501:41 - and you can use it in a lot of places
501:44 - definitely definitely install if you're
501:45 - using or you running a web application

Cleaned transcript:

hey it's Andrew Brown your favorite Cloud instructor over here on free Camp bringing you another free Cloud certification study course and this time it's the Azure fundamentals also known as the a900 and the way we're going to achieve Microsoft certification is by watching those lecture videos doing those HandsOn labs and as always I'm going to provide you a free practice exam so you can go get that certification putting your resume uh putting on your LinkedIn and go uh get that a cloud roll you've been looking to get if you love these kinds of uh Cloud certification study courses the best way to support more free courses just like this one is to purchase the paid optional materials it's going to help you uh increase your odds of passing the exam and it just helps the production of these courses um and if you don't know me I'm Andrew Brown and I've taught a lot of different Cloud certification study courses here uh we've done adabs Azure gcp kubernetes terraform you name it I've taught it uh but that's about it let's go ahead and learn some Azure and I'll see you soon ciao hey this is Andre Brown and welcome to the Microsoft Azure fundamentals and we're asking the most important question uh first which is what is this certification well uh the Azure fundamentals is the entrylevel cloud certification for Microsoft Azure or Azure uh and you'll see me alternate between those uh pronunciations they're both accepted so whichever you prefer um there is no prerequisite for this certification uh but you should probably have a little bit of it experience but if you don't it's totally fine if you're totally new to Cloud you still be okay here uh the key topics that we are covering is understanding the basics of cloud computing exploring the benefits of using cloud services uh and looking at those core Services the those being Computing networking storage and databases understanding identity security governance so you know one example for identity would would be entra ID previously known as Azure ad something you'll hear again and again through all the uh Microsoft certification courses um understanding how pricing Works things like subscriptions uh and cost management tools and uh learning about the tools available for managing Azure resources uh such as Azure portal or the SDK or the CLI and things like that uh Microsoft Azure is the second leading cloud service provider in the world the first being AWS but uh let that not uh discourage you because Azure is still an extremely uh great uh cloud service uh to use and um it's used quite a lot so Azure fundamentals is a very common starting point for people breaking the cloud U similar to the ads Cloud practitioner so both are really great entries uh into Cloud who's the certification for well consider this uh fundamental certification if you're new to cloud and you want to learn the fundamentals and benefits adopting cloud services in general you are from a nontechnical background such as an executive management or sales level and you need to acquire strategic information about uh Cloud for adoption or migration you want to understand the capabilities of azure and how to build basic Solutions and deploy cloud services in your organization very very basic but I mean the the objective of these fundamental certifications is not to really teach you how to build Cloud workloads um that is more at associate level but we'll talk about that later on uh or you're a senior Cloud engineer or solution architect or or Cloud architect who needs a reset or refresh their knowledge after working with Azure for multiple years but maybe you didn't notice some things change so it's a great uh revisit to get an idea of what is going on here so what is the value of the certification well the fundamentals is uh provides the most expensive view possible for um Cloud architecture and Azure uh I like to say this is going to provide you a bird's eyee view or the 50,000 foot view so we're going to cover a lot of stuff uh but it's not going to be uh as detailed as you would imagine but uh the idea here is to promote big picture thinking zooming out and assessing the cloud and Azure landscape for changes Trends opportunities uh and being strategic about the approach and process for our Cloud Journey okay um the Azure fundamentals is not a difficult exam it will not validate that you can build Cloud workloads um for technical roles such as developer engineer devops it's not going to be enough to obtain those roles but it it's possible that it could short list your resume for interview um the exam covers content not found in other certifications so strongly recommend that you take this as your foundational certification a lot of people like to skip fundamentals because they they think that they're easy yes the certification easy but the exam content has a lot of stuff in it especially mine because I pack in a ton of stuff that I just I'm not going to put it the next level because I'm going to assume that you taking this course and getting all that knowledge there uh the a900 00 lays a a gr foundation for Specialized or specialization for Azure certifications and is a stepping stone for professional de development in cloud services so definitely there is value in the a900 let's go take a look at the Azure road map and this is not all of the Asher certifications and Microsoft certifications they just have too many I cannot fit them all on screen here and um I think all the course codes are up to date but they're changing them all the time so uh it's possible that they might be incremented by some verions but the the entry we have the Azure fundamentals there are other fundamental certifications um we have the AI 900 which is for AI we have the dp900 which is for data uh we have the sc900 which is for security but again I don't have room for all that so I'm not showing them on here so I'm showing you the path that is commonly uh completed after taking the a900 so you have uh some associate certifications you have a couple expert certifications you have specialty certifications there's definitely more Associates there's definitely more Specialties but there's always the two Pros or experts I should say so getting my a handy pen out here very often what people go for after the fundamentals is the administrator the a104 this is the most common path uh for those that are going to their next step in their Azure journey and a lot of times people are going for that Solutions architect expert which is over here but before you do that you really want to go and grab that uh uh developer the a 204 these are the uh this is the the the most common strategy right here is uh these but of course it really depends on what you're doing if you're doing security you have the sc900 and then there's three different associate level security certifications uh if you are going after data that's a whole different track so it's going to really vary based on that but um again you know this is the most common track and even if you go uh do all of this and you want to do something else that's totally fine because this is going to lay a very very very strong Foundation uh and give you really good skills in Azure so how long does it take to study for this certification well if you're a beginner we're looking at about 30 hours and this is someone that's never written uh or used Azure or any cloud provider have never written any code or held a tech role technically the certification doesn't require you to code but I really want to make sure that I set you up really well because in Azure uh coding and scripting and that kind of stuff is way more important than any other cloud provider uh because you come across it a lot more and so I've stuck in a bunch of coding stuff and it is very challenging for beginners but I want to try to get you um best prepared as possible because when you go to the associate level with like the a104 it is so much more difficult so I made this much harder than it had to be to prepare you for the next level despite the exam okay so uh again 30 hours on that side if you're experienced uh then you're already working with that Azure or you maybe are you've worked in eight of us in gcp and you are trying to pick up Azure the it could be as little as 6 hours um so you know generally the study time is 24 hours and I would say it's split between uh lectures and labs and then you have your practice exams so just make sure that you put your time uh in with the practice exams practice exams are very very very very very important for Azure because Azure has all these different question types and we'll talk about that in a moment but yeah the recommend studies is 1 to two hours a day for 14 days take your time let it absorb uh you could finish it in a couple days but don't do that you know make sure that you are acquiring the knowledge for long term and the the best way to do that is to take your time uh and and not try to pass it in a weekend um what does it take to pass the examp well you got to watch those lecture videos you got to do those HandsOn labs and fall alongs within your own account uh strongly recommend that you do uh some paid online practice exam uh we give you a full free practice exam like a full set uh which is on our platform there we have a lot of practice exams you can get that at exampro doco a900 and really helps support the course here uh where do you take the exam well you're going to either take it in person at a test center or the convenience of your home um and uh so I would just say just a second here sorry about that b is knocking on my door door beo is the other Andrew uh who you you'll hear me talk about uh bo a bit throughout the course but uh he's the other person that works with me that's never on camera you never see him but um he helps uh do a lot of the work over here uh with uh the platform and um creating the content but anyway so Azure uh delivers exams via I got to reclick here um and the click's not working there we go uh Pearson view uh is the proctoring system that Microsoft uses in the past there used to be a bunch of ones there's Criterion uh which Google used to use Google Cloud there's PSI online which um adab us like to use but for whatever reason both um adabs and um Microsoft exclusively only use Pearson view now and I think um gcp is now using PSI online and everyone else uses PSI um for whatever reason but yeah you have to use Pearson View and you can do it online or Pearson view has a uh a network of test centers that uh you can go to in person personally I recommend that you go in person if you can because if there is a test center near you the whole environment is controlled it's going to be a lot less stressful whereas if you do it from home uh you know if you have family or you have uh the least ideal place to uh set up uh because you have to have a noncluttered room and they have to inspect your room and things can go wrong so I'm just saying if you have that opportunity to go to an iners inperson test center Center leverage that if you can't that's okay do what works for you but understand that these certifications are proctored uh so uh when you go sit that exam there is someone who is monitoring you to make sure that you are not cheating um in terms of the content outline there is three domains I think there used to be more but they grouped them into three I'm not sure why uh each domain has its own waiting and and that determines how many questions in a domain will show up so we'll look take a look there something that's really interesting about Azure exam is that they um they don't give you the same amount of questions uh per person so they'll give you like you like you might sit the exam and get 35 and your friend might get 40 so I had to give ranges here in terms of um uh the the percentage that will appear on your exam so we have describing Cloud Concepts which is 25 to 30% so you're going to get about 13 to 15 questions describe Azure architecture and services that's 35 to 40% that is the majority of uh the certification most fundamentals is about learning all the services uh that the cloud service provider is providing then we have describe Azure management and governance so that's uh 30 to 35% with 14 to 16 uh 16 questions there is uh subdomains under each of these so of course security is in there and all those other things are in there but we'll have to open up the exam guide uh to see that okay so um again you know just pointing out that that domain 2 is the largest one there so make sure that we we're going to make sure that we know a wide range of azure services but we're also going to make sure we know in depth a a bit more about those core Services let's talk about grading you got to get 700 points out of a th000 so um that's about 70% we say around because Azure uses skilled scoring meaning that it doesn't necessarily mean you get 70% and you pass um you could technically pass with 71% or sorry fail with 71% but you could also technically pass with 69% so just understand it's not based on percentage it's based on a point system in terms of what kind of questions you'll be getting well first let's talk about the range of questions but you can get between 35 to 50 I us say 37 to 37 to 50 um it's confusing because I don't know how they determine how many you get uh when I sat my exam I got about 35 questions some people get more uh it's really really tricky to to nail that down there so you know we say about 10 to 14 questions you have you can afford to get wrong there are no penalty for wrong questions so absolutely uh always fill in the answers in terms of formatting questions uh we have multiple choice multiple answer drag and drop yes and no I do need to point out that uh when you go and take uh associate level and expert level certifications with Microsoft they have way more um question types and uh just to help prepare you uh for that level of difficulty and it doesn't appear in these exams but in our practice exams we try to put in uh case studies so case studies is a much more advanced um exam type question and you know I really feel that we need to do that because if we don't uh you're going to feel like you're ready for the AZ 104 and you're going to get totally blindsided because again the difficulty ramp is super hard so again we're increasing the difficulty for your benefit uh so if you feel like uh this course is hard that's good because it's going to make the next one really really easy for you uh in terms of duration apparently it's 45 minutes I cannot remember how long it was when I sat it uh and when you search the internet it's very difficult to determine that number uh Microsoft does not make it easy to find out that number you think that they would other cloud service providers their certification exams they tell you right on the same page good luck finding it on azure but uh 45 minutes would still leave us with about one minute per time again it depends if you get the 35 questions or 45 questions so we're going to have to say about a minute uh so we'll say the exam time is 45 minutes uh some people say the seat time is 60 to 65 minutes when we say SE time we we're talking about the time you should allocate for the exam that includes things like time to review instructions read and accept the NDA complete the exam provide the feedback at the end now personally I think that the seat time should always be 30 minutes on top of whatever that is so if it's 45 minutes it really would be um 75 minutes or 70 minutes or something like that so uh you know anyway if you got a 45 minute exam show up 30 minutes or 35 minutes earlier because if you're checking in especially online you got to uh pull out your uh government ID you got to make sure the lighting is right and then it scans it in if things go wrong uh you know it's going to cut in your time so give yourself ample time and don't get stressed out um uh for that okay so these certifications are uh for Microsoft are valid Forever This is specific for fundamental certifications so if you take the um any one that has 900 in the name so a900 dp900 AI 900 sc900 PL 900 ms9900 you get in the pattern here if it says 900 in the name it's a fundamentals those certifications do not expire um and so I just want to make that very very very clear um for the other levels like associ expert um I think it's two years it's either two or three years but uh the interesting thing is that if you want to get recertified um you don't have to pay to take the exam again you can take a simpler test to U make sure that your knowledge is up to date and I think it's free so uh that's a great advantage that Microsoft has at the associate and expert level specialty level but uh yeah there we go and I'll see you in the next one all right so I went on to the internet and I searched for a900 and we've ended up on the learn. microsoft.com the reason I want to show you this page is to uh get more familiar with where we actually get the information um so that you can read up about about it if we didn't answer everything or if anything has changed um but it's good good good to be familiar with these pages so once you're here here uh on the a900 um what they'll have down below here is the study guide now the study guide used to be in a PDF format and for whatever reason Azure has just made it a website with all the other study guides here I really don't like this format um I find that it's very hard to find uh information and to read it I really prefer the old PDF but that's never coming back or if it is it's somewhere else and I don't know where it is but what we can see over here um is the actual breakdown so so we have Cloud Concepts and so we think see things like defining cloud computing share responsibility model the um different uh deployments of cloud um and a bunch of other stuff here um you can see describing the cloud service types now at one point they actually removed this and now it's back so that's really interesting I don't know why they ever removed it to begin with but it's good to see that that is uh returning we have uh I call This Global uh infrastructure or uh and uh cloud networking so they call this core Architectural Components which I suppose some of these things are but this is more like a billing thing and this is more Global infrastructure then we have Azure comput and networking services so we're recovering virtual machines functions skill sets availability sets uh Azure virtual desktop now we don't have to do all these things um and we aren't going to do all these things because some of these things are really hard like Azure virtual desktop is not an easy task but we need to know what they are we are going to launch a virtual machine uh and uh play around with that a little bit we are going to launch an Azure function um then we have storage services so we do a lot with Azure uh storage because it is uh cheap and easy to use uh then we need to know how to perform different operations with Azure um Azure storage there then we have Azure identity access and security so um again this is a subcategory under here or subdomain so we need to know a bunch of things about security I'm just going to tell you that some of the content is going to say Azure ID some of it's going to say Microsoft Entre ID um Microsoft for some crazy reason decided to change the name of azure ad even though everybody was fine with it it confuses uh myself and Boo and everyone else to this day so just understand that some of it's Azure ID some of it's Microsoft entra ID but this is this is really what's going to be going forward okay we have described cost Management in Azure so that uh that's TCO so more pricing stuff here um a Azure purview Azure policy we have the Azure portal which is just the platform which we use everything Azure Arc which uh I guess it's okay to know uh we actually do a lot of interesting coding here so I show you how to do IC with um arm templates and Azure bicep and terraform uh so that stuff's fun there we look at uh monitoring tools so we look at Azure service Health Azure advisor all sorts of fun stuff now there could be other stuff that appears exam that's uh uh not on here and so we just do a very thorough job to show you uh basically everything and just to kind of round out your knowledge but again it's very difficult to um to find all the details like the time of the exam and the amount of questions they really just do not make this easily available here if anyone finds it please tell me because I sure can't find it and uh the only way I know is by Sting the exam and I have to remember those details afterwards they do show what kind of changes that they make um so they're always making teeny tiny changes but try not to worry about that too much because we do ensure to include a lot of stuff here and this exam is up to date and and and the fresh and as fresh as it can be as of this recording but you know I find that even two years out people are passing uh like people are passing the the current exam with the old the old one um which is which is really interesting so it just shows you that not much changes on those exams okay but anyway that's that another thing I want to show you is the exam s sandbox so this uh emulates the Pearson view uh kind of experience and it'll just show you some of the question formats now uh we are under here for the a900 and it might show us more exam types than what we'll actually see on the exam so go here this just has 10 questions it's going to just show us all the types so here we have multiple choice then we have multiple select I'm not looking at what the correct answers are or reading any of it I'm just showing you here I believe that we drag these into these areas here so that's this one then this one is your answer area and you're bringing them over and then you're trying to uh determine the order so you're changing the order here then this one's an answer area so we go here and it's just an image and this is draggable we have this one here so we look at this graphic and we try to match it based on this information we read it very clearly this one here um uh what is this for a hot area so hot area is you have a Graphic very similar to that other one but you click it it's almost like you're kind of interacting with it but you're not it's just an image then we have a case study so this is something that we absolutely absolutely give you in our platform and you will not see this on your exam but we give you this exam question type anyway because it's super important uh to get that kind of experience you notice this one's a little bit more uh robust in terms of the information and so there are other things um yeah another thing with case studies is when you do a case study you basically get a series of questions around this case study right and it went to the next part and it's kind of like a mini exam inside the mini exam I'll show you case studies in another video so I know I'm going really quick there but uh we'll come back to that then sometimes you have uh these additional tabs so this is kind of like a minic case study for just a particular question but they might say hey uh check out the exhibit and you have to look at the exhibit come back and then answer the question so there's that and then sometimes there's multiple exhibits so yeah but uh yeah there you go so that is the um the sandbox there so hopefully that gives you a good idea the price might vary based on where you live so if we go to Canada I'm not sure what the price is in Canada so we go here and it still shows $199 USD we go somewhere else does it ever show a different price sometimes it does okay for some reason Canada gets a bad price but uh some other places do a little bit better so understand that that price is going to fluctuate based on where you live um yeah hopefully that gives you an idea of the uh exam and we'll see you in the next one okay ciao hey this is Andrew Brown from exam Pro and we are at the start of our journey asking the most important question first which is what is cloud computing so cloud computing is the practice of using a network of remote servers hosted on the internet to store manage and process data rather than a local server or personal computer and so when we're talking about on premise you own the servers you hire the IT people you pay or rent the real estate you take all the risks but with a cloud provider uh someone else owns the servers someone someone else hires the IT people someone else pays or rents the real estate and you are responsible for configuring cloud services and code and someone takes care of the rest of it for you okay so to understand cloud computing we need to look at the evolution of cloud hosting going all the way back to 1995 where if you wanted to host your website or web app you'd have to get a dedicated server so that would be one physical machine dedicated to a single business running a single project a site or an app and as you can imagine these are expensive because you have to uh buy outright the hardware have a place to store it the network connection having a person to maintain it um but it did give you a guarantee of high security um and they still do as of today so this model hasn't gone away but it's been specialized for a particular use case then came along the virtual private server so the idea is we still had one physical machine but now we were able to subdivide um our machine into submachines via virtualization and so essentially you're running a machine machine within a machine and so you had better utilization of that machine um running multiple web apps as opposed to having a physical machine per project so you got better utilization and isolation of resources and so uh these two options still required you to purchase a machine a dedicated machine and so that was still kind of expensive but then came along shared hosting and so if you remember uh the mid 2000s like with GoDaddy or HostGator or any of those sites where you had really cheap posting the idea is that you had this one physical machine shared by hundreds of businesses and the way this worked it relied on uh tenants underutilizing their resources so you know you wouldn't have a submachine in there but you'd have a folder with permissions that you could use um and so you would really share the cost and this was very very cheap um but you were limited to whatever that machine could do and you were very restricted in terms of the functionality you had and there was just poor isolation meaning that you know if one person decided to utilize a server more they could hang up all the all the websites on that single server then came along Cloud hosting and the idea is that you have um multiple physical machines that act as one system so this is distributed computing and so the system is abstracted into multiple cloud services and the idea is that you basically get the advantages of a lot of the things above so it's flexible you can just add more servers um it's scalable it's very secure because you get that uh virtual isol Iz ation you get it extremely at a low cost because you're sharing that cost with the users where in the shared hosting it might be hundreds of businesses we're looking at thousands of businesses and it was also highly configurable because it was a full virtual machine now uh Cloud actually uh still includes all of these types of Hosting they haven't gone away uh but it's just the idea that you now have more of a selection for your use case uh but hopefully that gives you an idea what cloud hosting looks like and it really has to come down to distributed computing okay hey this is Andrew Brown from exam Pro and we are looking at common cloud services so a cloud provider can have hundreds of cloud services are grouped uh into various types of services and the four most common types of cloud services for infrastructure as a service uh and we'll talk about what that is later on uh would be compute so this is where you have a virtual computer that can run applications programs and C uh code then you have storage so this is where you would have uh virtual hard drives that you could store files uh then you'd have virtual networking because you have these computers and storage so you need to uh put them in some kind of virtual Network and then you have databases so uh just imagine um a database that is running in the cloud or uh if you're not familiar with databases just imagine that it's excel in the cloud but it Powers your web apps uh and one thing I want you to know about the term cloud computing is that you even though it says Computing in the word uh at this point we just use it as a catall term so it could refer to all of these categories so when I say cloud computing I could be referring to compute network storage and databases but you can also say cloud storage Cloud compute Cloud databases Cloud networking and people will know what you mean hey this is Andrew Brown from exam Pro and we are looking at what is Microsoft so you've probably seen this logo before and and Microsoft is an American multinational computer technology corporation headquartered in Redmond uh Washington and Microsoft makes software phones tablets game consoles cloud services which is uh what we care about here today and they even have a search engine uh and we're not just limited to that list they have tons of stuff but Microsoft is best known for uh their oper operating system called windows and they've been around since the 1970s so uh they've been around for quite a while in the tech sphere uh so now that leads us to the question is what is azure so Azure is what Microsoft calls their cloud provider Service uh and so it's called Microsoft Azure or we commonly refer to it as just Azure uh and so here is the logo for it if you're wondering what is the name behind the service it means bright blue color of the cloudless sky so sure that's great um and so uh you'll hear me say cloud service provider frequently with throughout this course and it is abbreviated to CSP but that's what Azure is it is a cloud service provider so there you go hey this is Andrew Brown from exam Pro and we are looking at the benefits of cloud computing so what are the benefits well we have a big list here for you starting with cost Effectiveness so you pay for what you consume there is no upfront cost you pay as you go also abbreviated as P YG uh and you're sharing the cost with thousands of customers so that's how you're getting that uh that low low cost another benefit is that uh you can go Global so launch workloads anywhere in the world just choose your region um and uh you are now in the global market uh another benefit is uh the the cloud is secure so Cloud providers take care of the physical security and cloud services can be secur by default or you have the ability to configure access down to the granular level so you have a lot of security controls that you would have that you you would normally not have or you'd have to build out on pram now the cloud is also known for being reliable so you can have data backups disaster recovery and data replication and fault tolerance uh the cloud is also scalable you can increase or decrease your resources and services based on the demand uh the cloud is also elastic so you can automate scaling during spikes and and drop the demand when uh there is no longer the demand for that stuff uh and it's also current so the underlying Hardware in manage software is patch upgraded and replaced by the cloud provider without interruption to you uh and I mean the last one there is cases of interruption but generally fewer interruptions than you would have on Prem so there you go hey this is Andrew Brown from exam Pro and we are looking at the different types of cloud computing and we have this nice pyramid on the left hand side to help us understand um how each type builds off the other starting at the top of our pyramid we have software as a service also known as SAS and this is a product that is run and managed by the service provider you don't worry about how the service is maintained and it just works and remains available so you might not be aware of this but you probably already are using a SAS product so examples of that could be Salesforce or Gmail or Office 365 so those are those are things that would be considered SAS and these are really for customers so it's just you wanting to use uh software um like General software on your computer but in the cloud the next category we have is platform as a service abbreviated as pass and so here we focus on um development and management of your applications uh and so you don't worry about provisioning configuring or understanding the hardware or Os and this is really for people that are building apps but they don't but they don't think about any of the infrastructure underneath services like this would be elastic beanock on AWS or Roku which is very popular amongst um Junior developers which is a thirdparty service um for launching web apps and then you have uh the Google app engine so those are three examples there and these are really for developers so platform of service makes it easy for developers to uh build apps on the cloud without worrying about all the stuff underneath and at the bottom we have infrastructure as a service IAS um and this is the basic building blocks of cloud it so provide access to networking features computers and data storage space don't worry about the about it staff data centers and hardware and this is the true Focus focus of our course here is focusing on this layer but um the thing is again on this pyramid is that I um the infrastructure service can have platform as a service and software as service on top of it and so examples of infrastructure service would be Microsoft Azure uh AWS or even Oracle cloud and so this is really intended for administrators um so that is the three types of cloud computing and there you go hey this is this is Andrew Brown from exam Pro and we were looking at the types of cloud computing responsibility so we saw the three categories there um but we don't really understand what it is that we're responsible for and what is the cloud service provider responsible for so let's uh lay out our categories and we're going to include on premise uh into this because technically on premise could be uh a private cloud and should be in the category here so we have on premise infrastructure is a service platform is a service and software is a service so when we're looking at applications um it's going to be the customers's responsibility um for on pram uh infrastructure pass but when we have software of service um the cloud service provider is responsible for that when looking at the data level it's going to be the same for software as of service uh the cloud service provider is going to be uh responsible but the for the rest it's going to be the customer and then on the next level for the runtime uh it's going to be uh responsible on the cloud service provider for the platform is a service and software is a service for middleware it's going to be the same for the OS like the operating system that is running on the service it's going to be the same then when we get to virtualization now it's uh the uh virtualization is responsible um with the cloud service provider and above and then for storage it's or sorry servers it's the same uh for storage it's the same and for networking it's the same so you can see that on premise you're responsible for everything and the the farther we move up the types of cloud computing the less respons responsibility you have hey this is Andrew Brown from exam Pro and we were looking at azure's deployment models and the first model we're going to talk about is public cloud and that's where everything is built on the cloud service provider you're not using anything on Prem or in your own data centers everything is running within Azure uh and generally this is known as Cloud native um but for some reason Azure calls it public Cloud so that's what we're going to use in the terminology here and so here I have an architectural diagram where we have a network uh on Azure and within that Network we have a virtual machine running and a database running so that would be an example of public Cloud then we have private cloud and so this is where everything is built on the company's data centers also known as on premise because it's within the premises of the organization uh like their physical location and uh it could an organiz organization could technically be operating their own cloud but it would be private cloud and they could be running some opensource Cloud software that mimics what um Azure would do such as open stack so it looks very similar uh but you just uh put an open stack in there and it's running a virtual machine or a server and it's also running a database and the last on our list here is hybrid so with hybrid uh you are using both on premise and the cloud service provider and they're connected together and so there's a lot of different networking services that you can use that will facilitate the connection between the two uh in this case we're using express route Express rout is a dedicated uh connection it's like having a fiber optic Line running from your on premise data center to the Azure Network so just one of the ways you can connect and if we wanted to understand like the pros and cons I have this nice little table here we'll just quickly go through it so if you're using public uh Cloud uh it's more cost effective security um it it's uh it sced controls are stronger by default but some people might not find the cloud will meet all their security requirements because of government and Regulatory um uh regulatory reasons not because the the cloud is not secure but it's just those uh those policies uh for level of configuration it's going to be limited based on what the cloud service provider exposes to you um still there's a lot of configuration there it's just that if you're if you have your own servers uh you obviously can do anything and everything with them for technical knowledge you don't need to have as much indepth knowledge of the underlying infrastructure because you're not physically setting up uh or that networking everything else now coming down to private Cloud private cloud is the most expensive option on our list um so you're going to be paying uh a lot of money there uh for security uh there is no guarantee that is 100% secure because you just don't have the same kind of visibility that you would have with a cloud service provider with all those dashboards it's just so hard to build out all that software but you could meet your security compliance requirements um depending on your situation U but this is becoming uh less and less as um more governments and larger organizations move over to the cloud uh you can configure infrastructure exactly how you like because you literally have uh bought the hardware and can do anything you want with it uh and the technical knowledge you'll have to have a serious amount of technical knowledge you might even have a really hard time finding the resources to uh to maintain all that stuff then uh down below we have the hybrid model so this could be more cost effective based on uh what you offload to the cloud and also the cost of actually moving data back and forth uh for security uh you know you have more to secure but uh technically uh some things are easier to secure on the cloud than it is in uh private so maybe you have a boost in security you're going to get the best of both worlds in terms of configuration uh and for technical knowledge you're going to need to know both the cloud and and uh like how to set things up on premise so that's the most work there and just one more deployment model here I just want to talk about cross Cloud this isn't something that is listed on the actual exam but it's something that you should understand and know and so cross cloud is when you're using multiple Cloud providers sometimes people refer this as multicloud or hybrid cloud and so I just have an example here so um uh there's a service called Azure Arc and what Azure Arc does it extends your control plane so you can run um containers kubernetes containers on different platforms and so you could have AWS on the left hand side with eks and gcp kubernetes engine and so you can be running virtual machines and they're all treated like they're on the same network so cross cloud is coming uh very popular with extremely large organizations where they they have uh very unique requirements but I I definitely want you to know what that is because it just gets left out uh and it's definitely something that is uh part of the industry so there you go hey this is Andrew Brown from exam Pro and we are looking at the concept of total cost of ownership tcco so what is the difference between on premise so having your own data centers and then using Azure and you'll notice above it it says KAC and Opex we're going to talk about that in the next slide but for the time for the time being we're going to focus on the total cost of ownership so to really make sense of this uh I always use this graphic here uh and if you're wondering what that is those are icebergs people sometimes think they look like teeth and so just to make this drawing a little bit more clear I've added some penguins and a whale so there's no mistaking it and the reason we're using this as a representation is because we have the top of the iceberg which are the cloths that we're generally concerned about but then we have those hidden cloths those CLS that we're not really think about that is underneath the water and if you know icebergs they can be really big underneath you don't know so um on the left hand side the cost that we generally think of is the software license fees uh and then uh for the cloud service provider we look at the subscription fees and so when you're comparing these two sometimes the subscription fees can cost more than the software license fees so you'd think well we should really just use uh um on Prem because it's more cost effective but when we Tak in the total cost of ownership all the costs involved we're going to see a very different picture so on the left hand side if you uh are on premise you have to deal with the implementation the configuration and the training but you also have to deal with the physical security of your building you have to pay for the hardware you have to pay for the IT personnel you have to uh deal with maintenance now on the right hand side on the cloud you still have to do implementation and configuration and training but that's about it so um there's a big difference in terms of what you have to do and you might ask okay well what is the amount of savings well generally people find that when they move from on Prem to the cloud they save 75% that's a lot of money okay 75% of what you generally would spend and so now all this stuff on the left hand side is now azure's responsibility you don't take care of those anymore Azure is going to take care of it for you so that's total cost of ownership hey this is Andrew Brown from exam Pro and we are looking at Capital versus operational expenditure so on the Le hand side we have capex so Capital expenditures on the right hand side we have operational expenditures Opex and so looking on the left hand side capital expenditure is spending money upfront on physical infrastructure so deducting the expenses from your tax bill over time a lot of companies larger companies are used to dealing with capital expenses and they know how to work their tax bill and so that's why a lot of people are afraid to move over the cloud because they're used to this uh this this way of operating but let's talk about some of the things that would be considered a capital expanse so again it's anything that's physical and then you're buying it with money UPF front so computers so that would be your server costs if you were to buy hard drives that' be your storage cost if you bought routers cables and switches for your network if you were uh purchasing things for backup and archive costs if you had disaster recovery so like an un uninterruptible power supply would be an example of that uh you have your data center cost so that's your rent cooling physical security your technical personnel so you're hiring people to to do things for you and so with capital expenses you have to guess upfront what you plan to spend um now let's look at operational expenditure so operational expenditure is the cost Associated when an onpremise data center has put has shifted that cost of the service provider so here in this case it's the cloud service provider and the customer only has to be concerned with nonphysical costs so what's examples of opec's cost well leasing software and customizing features training employ emplo in cloud services paying for cloud support um building based on the cloud metrics so compute usage and storage usage uh and the advantage here is that with operational expenses you can try a product or service without investing equipment so we have flexibility of uh investment and we also from the previous slide we saw that we have a huge reduction cost so there's two reasons really good reasons to use the cloud let's take a look at Cloud architecture terminologies before we do let's talk about some of the roles that are around uh doing Cloud architecture so the first is Solutions architect this is a role in a technical organization that Architects a technical solution using multiple systems via researching documentation and experimentation and then you have the cloud architect this is a Solutions architect that is focused solely on architecting Technical Solutions using cloud services understand that in the uh actual Marketplace a lot of times Solutions architect is used to describe both a cloud architect and a Solutions architect and you know these are going to highly vary based on your locality and how companies want to use these terms but this is just me broadly defining them here so just don't take them as a perfect word in terms of what they're representing so a cloud architect needs to understand the following terms and factors uh and Factor them into their designed architecture based on the business requirements so we have the idea of availability your ability to ensure service remains available scalability your ability to grow rapidly or unimpeded elasticity your ability to shrink and grow to meet the demand fault tolerance your ability to prevent a failure Disaster Recovery your ability to recover from a failure and there are a couple other things that uh that should be considered they're not terminologies but they're definitely important to a Solutions architector Cloud architect and uh these are things you always need to consider uh as well and this is just me talking to my Solutions architect friends where they'll always ask me these two questions after presentation they'll say how secure is the solution and how much is this going to cost all right and so for the terminologies up here we're going to Define these right away and we're going to figure these out throughout the course we have two giant sections just on cost and security alone uh so there we go hey this is Andrew Brown from exam Pro and we are looking at the concept of high availability so this is your ability for your service to remain available by ensuring there is no single point of failure or ensure a certain level of performance so here I have a technical architectural diagram that is describing High availability so the idea behind this is that if you have a server which runs your web application if you were to run redundant versions of your server if anything happened to a single server traffic could always be red to those other servers and that way your service would remain available now having multiple servers is great but even what's better is having multiple servers in multiple data centers because something could happen to a data center it could become unavailable of a networking issue so by being able to Route traffic or uh that way you're going to remain highly available and and uh running a workload across multiple availability zones and availability zones is what Azure calls their data centers ensures that if one or two data center becomes unavailable your service will remain available very very common to run uh at least three servers across three data centers now how would you distribute the traffic or manage the traffic to all three and that's where an Azure load bouncer comes into play that green triangle with the arrows that is the representation of a load bouncer so load balcer allows you to evenly distribute traffic to multiple servers in one or more data center and if a data center or server becomes unavailable so unhealthy the load balancer will rote the traffic to only available data centers with servers so there you go that is high availability hey this is Andrew Brown from exam Pro and we are looking at the concept of high scalability and this is your ability to increase your capacity based on the increasing demand of traffic memory and computing power if you are a growing company you're going to have to scale up you're going to have to get bigger and better servers but the uh there are different types of scaling and the first type is vertical scaling this is the the the most obvious one people are going to think of and it's called scaling up and what we do is we just upgrade to bigger servers we need bigger hard drives faster computers that's vertical scaling but there's another kind of kind of scaling called horizontal scaling and horizontal scaling is is described as scaling out and what you're doing is you're just adding additional servers because we saw with the high availability we have a load balcer we can distribute traffic to multiple servers and three servers can equal the same thing as one big server so um horizontal scaling is when we add more servers of the same size hey this is Andrew Brown from exam Pro and we're looking at the concept of High elasticity and this is your ability to automatically increase or decrease Your Capacity based on this the current uh demand of traffic memory and computing power so this sounds a lot like high scalability but the key difference is that it's automatic and you can decrease the demand not just increase it and so the way we would do that is that we would have a virtual uh virtual machine or server and if we needed more servers we would add more servers and if we need less servers we would remove less servers and so this is going to be accomplished using horizontal scaling so when we say we're scaling out this means we're adding more servers of the same size when we're scaling in this means we're removing more servers of the same size and generally you're not going to use vertical scaling for high elasticity it's just extremely difficult to um uh uh to vertically scale because if you H if you have to increase let's say your storage Drive um and then you decrease it you could lose data so it's not a good idea or or even feasible to do vertical scaling with high elasticity now how would you accomplish uh being elastic on Azure uh well You' use azure's VM scale set so scale sets automatically increase or decrease in the response to demand uh uh b or based on a defined schedule and we'll talk about those in Greater detail later in this course uh and then we have SQL Server uh or server stretch database these dynamically stretch warm and cold trans transactional data from Microsoft SQL Server 2016 to Microsoft Azure not something we're going to cover but it's generally the same concept that skill sets uh do so there you go that's high elasticity hey this is Andrew Brown from exam Pro and we're looking at the concept of being highly fa tolerant and this is your ability for your service to ensure there is no single point of failure preventing the chance of failure so when we looked at high availability we had also said that it was no point of failure but when we really talk about that we're really talking about being highly fault tolerant because there is the word failure in the word and that is what being fa tolerant is and so how do we prevent failure well we use the concept of failovers so failovers is when you have a plan to shift traffic to a redundant system in the case a primary system fails and so I have a Graphic here that represents um a primary database failing over to a secondary database and I have a bit of a description here so the idea is that we have um a copy of our production database we're going to call that a secondary system uh and the idea here is that every time something is ritten to our primary database it's going to be synced so it's going to be sent over to our secondary database so it's up to date with the latest database and then if uh the primary database uh happens to fail for whatever reason whether it's Hardware or otherwise something's going to detect that there's something wrong with the primary and it's going to fail over to the secondary and the secondary is going to be promoted to being the primary instance and the key thing to understand is that that that secondary is standby it's not in actual use uh it's only in use when the failover occurs so what would you use an Azure to uh build out a highly fa tolerant system that's where aure traffic manager comes into play um so with this uh and this works with a DNS level um and so the idea here is that you can uh fail over from a primary system of the DNS level to a standby this is really great if you have Regional failures you could probably also use a load balancer but this is the case that I'm showing here but there you go hey this is Andrew Brown from exam Pro and we are looking at the concept of high durability so this is your ability to recover from a disaster and to prevent the loss of data um so this could be solution that recover from a disaster is known as Disaster Recovery Dr uh and so I'm just going to ask you a bunch of questions to help you think about how how to be highly durable so one question would be like do you have a backup so do you have a backup in place how fast can you restore your backup does your backup still work how how do you ensure Uh current live data is not corrupt so that is the concept of high durability there's a variety of services to implement it so it's not just a single service um but there you go that is is the full list of cloud architecture terminologies so to understand Disaster Recovery we need to know more about uh things around it like business continuity plans BCPS and RTO and rpos so a BCP is a document that outlines how a business will continue operating during an unplanned disruption in services so it's basically the plan that you're going to execute uh if that happens and so here we have a disaster and you can see that there's a chance of data loss and downtime and these two um uh factors as RPO and RTO are going to define the length of these durations so recovery Point objective is the maximum acceptable amount of data loss after an unplanned data loss incident Express this amount of time so how much data are you willing to lose and then recovery time objective so the maximum amount of downtime your business can tolerate without inuring a significant financial loss so how much time you're willing to go go down okay so those are the two there and now let's go take a look at the disaster recovery options that we can use to define in our our BCP so now let's take a look at our disaster recovery options uh and based on what you choose they're going to be a trade of cost versus time to recover based on the rpos your RTO of course and so sometimes this is rep represented vertically like a a thermostat or you can do it horizontally here um both valid ways of displaying this information but I just have it horizontally here today and so we have low or high or you could say um even though I don't have it written here this could be cold or this could be hot okay so um on the left hand side we got backup and restore pilot light warm standby multiactive sight notice we're using the like the words like pilot light warm things that are relating to temperature so again cold and hot all right so let's just walk through what each of these things as conceptually do uh in terms of architecture so when you're doing a backup and restore you're back you basically back up your data and uh at the time of Disaster Recovery you're just going to restore it to New infrastructure uh for a pilot light the data is replicated to another region with the minimal Services running to keep on replicating that data and so you might have some core Services running a warm standby is a scaled down copy of your infrastructure so you basically have everything that you would absolutely need to run an application but the idea is it's not at scale and so at any time when there's an incident you're going to scale up to the capacity that you need and then you have multisite active active where you you have a scaled up copy of your infrastructure in another region so basically everything you have identically in another region and so in terms of the rpos and the rtos for back and restore you're looking at hours uh with the pilot light you're looking at 10 minutes with a warm standby you're looking at minutes and multi sight uh active active you're looking at uh real time so you know hopefully that gives you an idea of you know the the difference in terms of scale but let's just look at more detail so for a backup and restore this is for low priority use cases restore data after events deploy resources after an event and it's very cost effective uh for pilot light this is where you have less stringent RTO and rpos so you're going to be just running your core Services uh you're going to start and scale resources after the event and this is a little bit more expensive this is uh very good for warm standby is good for business critical services so you scale resources after the event uh and it's uh almost very it's very it's costly but it's not as expensive as a multisite active active so you get zero down time near zero loss uh you have it's great for Mission critical services and it's just as expensive as your original uh infrastructure so you're basically doubling the cost there okay hey this is Andrew Brown from exam Pro and we are looking at the evolution of computing and this is going to really help you to understand the different layers of compute uh and so we're going to start from uh on the left hand side to dedicated and work our way all the way to functions so what I want you to know is that uh when we're talking about dedicated this is a physical server wholly utilized by a single customer and so the idea is that this customer has purchased uh this dedicated piece of Hardware um but the thing with this is that you have to guess your capacity So when you buy it it's like a capital cost or you're purchasing uh uh for for like the whole like you have to plan how you're going to fully utilize it so you're going to overpay uh and you're going to have underutilized servers and the reason why is that when you first launch your app it might be small and then you're expected to grow into that space But you're just not using that space until you grow into it so it's considered wasted um if you want to upgrade Beyond Your Capacity this is going to be slow and expensive you literally would have to buy a new server that's larger and then move everything over you're going to be limited by your operating system so whatever operating system is installed uh that's what you're going to have uh you're going to have multiple apps uh if you do install multiple apps onto a dedicated server you might have conflicts in resource sharing but generally it's recommended to only have a single primary application on a dedicated server uh you are going to have a guarantee of security privacy and full utility of the underlying resources because that is what that's the whole purpose of having a dedicated server is sometimes dedicated servers where you have full control of everything is called bare metal and that's basically mimics what it was like to have a server on Primus or back in the day and they still exist so that is dedicated we'll move on to VMS so now we're moving on to Virtual machines also known as VMS and so the idea here is that if you had a physical server and you had the capability of running virtual machines that's like running a machine within a machine and so now you're able to run multiple applications on a single machine uh the technology that's used to actually run VMS is known as hypervisor there there are some other kinds but the ones we need to know uh is hypervisor so just know that that's the software that makes virtual machines work um you are now sharing the physical server with multiple customers that is generally a good thing because you are paying a fraction of the server cost you don't have to buy that server outright um you are still going to be uh uh overpaying for under underutilized uh uh the underutilization of a virtual machine because it still has an issue of wasted space because you have to choose a particular size of virtual machine it's not going to be perfectly fit for your application uh you are going to be limited by your guest operating system so whatever OS that you've chosen that's what you get um uh so that's that's what you have there if you want to run multiple apps on a single virtual machine they can still result in Conflict uh resource sharing but now uh customers that are isolated from you aren't going to conflict with you so you can run you could run uh if you had three apps you could run them as three virtual machines so you're not going to have that issue but if they're on the same VM you still have that issue so there you go that is virtual machines and we'll move on to two containers hey this is Andrew Brown from exam Pro and we are looking at the concept of containers and so this takes it a step further where we have virtual machines and we're running multiple containers so we're even uh we're further subdividing the way that we uh run our applications and the technology that is used to uh run a containers with within a VM or on a physical server is called dock Docker Damon if you're using Docker for containerization that's the most common in one um but that's going to let you run multiple containers and you can maximize the the uh the utility of the available capacity uh so this is extremely more cost effective right so um uh that available space is is always there for you to launch more servers within or you can or you can expand uh the usage for your app to take up that available space your containers share the same underlying OS so the containers are more efficient than multiple VMS um but the great thing is is that you can have different uh os's so the idea is that each container can technically be running a different uh OS and so now you have a lot more flexibility it doesn't seem like you could improve upon this further but we will when we move over to function so now we're going to take a look at the evolution of computing for functions and I I bet you didn't believe it but we subdivided it even further and so uh we've taken our applications that we're running container and we broke up the apps into little pieces of code called functions and now we even have more uh or or better utility of our compute so we have a manage a VM running managed containers so we don't have to worry about the containers and configure them ourselves functions are usually taken care of this is known as seress compute because you don't set up anything you just put your code online and it just works you might choose the memory and the duration that you need to utilize and that's all you pay for you're only responsible for your codee and data and nothing else and it's extremely extremely cost effective right because you are just paying for that individual function to run and all that un underutilized space is is the the the problem of the cloud service provider it's not your issue the only downside is that um there is a concept called cold starts meaning that when you launch a function or or serverless or a serverless code It generally has to provision a server because the the the cloud service provider doesn't want to be running servers when they don't they don't uh they aren't being utilized so you might experience a cold start where you're waiting for a server to start before your code will execute but there's definitely ways around that so there you go that is the evolution of compute hey this is Andrew Brown from exam Pro and we are looking at uh regions and geographies uh for Azure so a region is a grouping of multiple data centers and for um Azure they call their data centers availability zones Azure has 58 regions available across 140 countries one thing Azure likes to promote is that they have the most regions out of all uh cloud service providers uh then we have something what we call a geography so geography is a discrete Market of two or more regions that preserve data residency and compliance boundaries and the geographies that are available for Azure uh we have the United States then there's Azure government us this is a geography that's only for the US government uh so regular citizens cannot use it then you have Canada that's where I'm from Brazil and Mexico and I just want to emphasize that data residency and compliance boundaries for geography and I just want to give you an example so imagine you live in Canada and you uh and you work for a Canadian company you want to guarantee that the data will remain within Canada for whatever government regul regulatory reasons so then you'd want to use the canidate Azure geography because because that data would never leave Canadian soil um so that's the case there and I just want to give you kind of a a visual example so on the Le hand side we have two regions we have us East one and we have the Europe Norway east region and in those regions I'm I'm not showing it here because I don't want to make it too complicated but there would be availability zones and we could launch resources so we have some servers virtual machines those are the images you see within the regions and generally the way uh regions work in Azure is that when you go to launch uh a resource you choose the region at that time of creation so if you're launching a virtual machine it's going to give you an option to choose a region and you just choose from that list uh so yeah there you go so I just made my way over to Azure so I just typed in um Azure Global infrastructure because I just wanted to show you the big map of all the regions um and uh where Azure is available all throughout the world because sometimes it's nice to look here so we can see we have stuff down in Australia we have um uh regions in Africa we have a region in South America we have a lot in North America we have a lot in uh Western Europe uh and then we have some in um Asia here so we have Japan China all over the place so you know if if you want to look a little bit more into that um there's a lot of good information here on the global infrastructure pages but that's about it I just wanted to show you that world map so now we're looking at paired regions so each region is paired with another region 300 miles away and the reason why Azure does this is so that if one region is being updated uh then the other one is still available meaning that if you're running if you're planning to make sure that you never have uh downtime you can uh put your resources in that paired region uh and you're going to have higher availability uh so some Azure services rely on paired regions for disaster recovery so when you turn those services on they're automatically going to launch in that paired region uh one Service uh which would help you uh leverage your paired region would be a service called Azure well it's a feature of storage but it's called Azure Geo redundant storage so it replicate your data to secondary region automatically ensuring that the data is durable even in the event the primary region is isn't recoverable and just to give you an example of a paired region uh so let's say we're talking about Canada so with Canada uh you'd have uh um Canada Central and then its paired region is Canada east for North America and when we say North America we're really talking about the United States uh it's East US region paired with the West us region and then for Germany you have Germany Central and ger uh Germany Northeast so it gives you an idea how far away they are 300 miles that's quite a distance um but there you go hey this is Andrew Brown from exam Pro and we are looking at Region types and service availability for Azure and what I want you to know about uh service availability uh regarding regions is that not all cloud services are available in every single region and there's infrastructure reasons as to why and there's compliance reasons as to why so Azure um has two types of regions they have recommended regions these are regions that provide the broadest range of service capabilities um and what that means is that uh the majority of services are going to be available in this region uh and this recommended region is designed to support availability zones then you have alternate regions uh and these are regions that extends azure's footprint within a data residency boundary where a recommended region also exists but they're not designed to support availability zones that doesn't mean you can't launch resources within them it just means that when you go to launch of resource you're not going to choose an availability Zone uh and these regions are labeled as other when you're in the Azure portal now let's talk about General availability so General availability abbreviated to GA is when a service is considered ready to be used publicly by everyone so if you have a a service or product and it was in beta and now you're ready to sell to people that means that it's ga uh uh but it's but just because it's ready to sell it there's also the the conversation around whether it's actually available to use and that's going to be determined based on the category that the Azure cloud service is in so Azure categorizes uh three different types of availability for services and the first one is foundational so a cloud service that is foundational is going to be available immediately in a recommended and Alternate regions when it goes GA or at least in 5 12 months of the time that it was announced then you have mainstream so these are um cloud services that will become immediately available in a recommended region or in 12 months when it goes GA um but for for the alternate region uh it may become available based on the customer demand and then the last one is specialized so cloud services that in this category will become available in in recommended or alternate regions based on customer demand so hopefully that clears up uh service availability and region types hey this is Andrew Brown from exam Pro and we are looking at special regions for Azure so Azure has specialized regions to meet compliance are legal reasons because they might want they might want to work with specific governments of uh and to meet those requirements they basically give them their own region and so the First on our list is the us and we have three regions that we know about so we have the US Department of Defense Central the US government of Virginia region the US government of Iowa region and then we have an additional three that we just don't know about it because they're in Secret locations so maybe they're for Area 51 we don't know um and so the reason why they have these special regions is that if you just want to do business with the government they need these kind of regulations um then on the other side we have China and so they have a region in China East and China North uh and these regions are available through a unique partnership between Microsoft and 21 vonet uh and so Microsoft does not directly maintain these data centers but they work with uh 21 vonet to give you uh accessibility to these regions um and probably to operate these regions you'd probably be um a citizen of these countries and you'd also be an employee of the government so it's not going to be for a citizens to use but there you go hey this is Andrew Brown from exam Pro and we are looking at availability zones for Azure and so availability zones abbreviated to uh short for AZ and you'll hear me using that abbreviation a lot in this course and you should learn to remember that as well is a physical location made up of one or more Data Center and so a data center is a secured building that contains hundreds of thousands of computers and if you want a little visual uh here is uh the inside of a data center um and there's a technician working on a rack of servers and there's a dog uh in the data center uh you should definitely never have a dog in your data center you'll probably hear me refer to availab availability zones as a data center because it's the easiest way to think of it but it actually can be more than one data center now a region will generally contain three available IL zones I say generally here because there are cases where there are less than three but there's actually very specific reasons as to having exactly three availability zones data centers within a region will be isolate from each other so they'll be in different buildings but they will be close enough to provide low latency uh and that load latency would probably be in the sub milliseconds I don't know what it is for Azure but that's generally uh how it would be designed because you want it to feel like you're uh it's on uh the same network um it's common practice to run workloads in at least 3 A's and that's why I I was saying that earlier that's important to ensure Services remain available in the case one or two data centers fail fail and this is called high availability and we'll definitely cover this concept again in this course just to give you a bit of a visual on the Le hand side what we have is a region called us East one and we have multiple availability zones um uh Azure just labels them one two and three and so when you go to launcher resource if you look on the right hand side you choose your region so we are choosing us uh East us then we're saying we're going to use availability Zone and then we choose which one we want to launch it into so if we if we choose two it's going to go into availability Zone 2 that doesn't mean we're going to launch two instances it just means availability Zone 2 so there you go hey this is Andrew Brown from exam Pro and we are looking at AZ supported regions for Azure and so not every region has support for availability zones and we touched on this in the region section but we'll touch on it here again again so uh we know that there are regions called alternate others and these do not have availability zones whatsoever then you have recommended regions and these are supposed to have 3 azs the reason why they might not have them is because it's a newer region and Azure is promising to add more regions within 12 months or whatever time period that they say uh but generally what you want to do is when you have um Cloud resources you want to launch them where they have at least three azs so which regions have three azs and that is Central Us East Us 2 West us2 West Europe France Central North uh uh Northern uh Europe uh southeast Asia so that is where you generally want to run your workloads now what does it look like when uh you try to go launch a resource um and they and you choose a region that doesn't have an availability Zone what's that going to look like well it's going to look like this so you're going to availability zone is going to be blanked out and you'll have to choose no infrastructure uh redundancy required and so that would be the example for Brazil South where it's just there are there is a single AZ but it's described as not having a so you just don't choose it in the interface so there you go hey this is Andrew Brown from exam Pro and we are looking at fault and update domains so an availability Zone uh in an Azure region is a combination of a fault domain and an update domain so a fault domain is a logical grouping of Hardware to avoid a single point of failure within an a uh and so basically it's a group of virtual machines that share a common power source and network switch um the reason why Azure does this is that so if part of the data center fails then other servers won't be taken down with it so let's say there's a fire within the data center in one particular region it won't affect other Hardware that is running then you have update domains and so update domains is when Azure needs to apply updates to the underlying hardware and software um but the thing is is that because Azure is updating them it takes these machines offline so the idea is that if you run your workloads in um another uh like another domain in the update domain not neither domain will be updated at the exact same time and that way you won't have downtime because of updates and so the way fault domains and update domains work is that you use availability sets so availability sets is a logical grouping that you can use an Azure to ensure that your VMS you place in the availability set are in different fault update domains to avoid down time and just to really help with that visual uh here um what I'm going to do is just show you this here so each virtual machine and availability set is assigned a fault domain and an update domain and so what you're looking at here is uh you see those gray boxes those are racks uh in your data center aack is just like it it's like a closet for um servers and all those servers sit on top of each other and so each of those servers um uh uh in that is where your virtual machine might be deployed so if you are deployed if you have a server and it's deployed in Fault domain zero and fault domain one it could be in any of the the the servers on that rack uh but then update domains you just might have very particular servers um in that rack that are those update domains so hopefully that makes that a bit clear I know it's a little bit confusing but just remember the Conant behind fault domains and update domains and just to give you a visual of what it would look like in the Azure portal uh if you go ahead and create availability set you would name it so here I call it production and you would choose theault domains and you would choose the update domains and so I believe that what you're doing there is that you're choosing the amount of domains that you want uh your your virtual machines to be distributed across and I keep on saying virtual machine that's your server okay so if you say um two fault domains that that means that when you launch two servers and you put them into that availability set they're going to be across two fault uh two different fault domains and if you launch Five servers um and your update domains is at five that means it's going to be across five different uh servers that are isolated from each other so hopefully that makes sense but that's fault and update domains so I quickly just wanted to show you the fault and update domains that are in uh Azure here so the idea is if you're launching a virtual machine uh and you want to uh control the availability set what you can do is you can go um to down to here where we have availability options we're going to drop it down and choose availability set and then we don't have an availability set so I'm going to go ahead and create one if I just click there and so when we create a set we can say you know uh production set and so we have these two uh these two um uh dialogues here and so what what it is is when you say there's three fault domains that means that if you were to launch three VMS and you put them all into this uh availability set it'll be spread across three different racks so that if a rack goes out um two other racks are operational and so your service will remain available and then down below it's the same thing on a rack there might be multiple machines and certain machines um uh will will be will be scheduled for updates but they won't all be updated at the same time so if you're saying this you'll say spread it across five machines uh and that's all there really is to it so I just wanted to show you where that was uh when you actually launch it for a virtual machine hey everyone it's Andrew Brown and welcome to another follow along and probably the most important one which is how to create your Azure account so what I did is I typed into Google uh Azure uh Microsoft portal and so it brought me to here um this page might look a little bit different it really just depends on where you uh land in but a lot of times they make it very easy by having this try aure for free getting started free account so just find one of the ways in they probably go all to the same place so I'm going to go ahead and click Start free I'm going to get out of the way uh so that we can do this now um I already have an existing uh Microsoft account that's what you need in order to access Azure so I'm going to go here and say sign in with another account I'm going to create another account I go ahead and create one of course you probably already have an account or if you don't you can go ahead and start typing one in so I'm going to need an alternate email to utilize for this so just give me a moment okay so I was just thinking about it I actually already have another email called Andrew teer seat.com it's the name of our platform that runs exam Pro so I'm going to go ahead and try this and see if that works you can't sign in here with a work or school email address use a personal email such as a Gmail okay so it's not letting me uh uh do that there but maybe we can get ourselves a new email address and that will be one way in here now of course you don't need to create an Outlook or Hotmail you can of course uh use something else but I'm just going to create a new account to make my life a little bit easier uh while demonstrating this I'm going to type in exam Pro and your brown and hopefully it will allow me have that hyphen there and so I need to choose a password so just give me a moment also if you're looking for a password manager or sorry a password generator I tend to like this one called uh password generator.net because it works really well um so that's the one that I'm going to use but I'm going to take this off screen here for a moment and just put a pass in okay so I've just generated out a password and hopefully it will let me go ahead and create that so we're in good shape and so I'll fill in the next information here so I don't want to expose all my personal information so I'm just going to fill this in and hit next so you'll see me jump to the next screen okay and so it is progressing and we're just waiting for uh new things to happen here and so now I have a little puzzle to solve so just give me a moment I just want to save the password before I lose it okay I just saved my password off screen here let's go ahead and solve this so please solve the puzzle so we know you're not a robot uh how do I solve it do I need to put my headphones on just give me a moment here and take a look so let's go ahead and hit next so use the arrows to rotate the animal to face the direction of the hands um well it's already uh facing it so I guess we're in good shape that was not quite right oh maybe the direction of where the hand is pointing okay we'll try that again so there we go and we'll try that again very interesting um challenge that's the first time I've ever seen that one but uh that's interesting and we'll give it a moment here and so now we can fill in all of our information so of course again I don't want to expose all of my information here so go ahead and fill this in and what we'll need to do is verify our phone number so we'll fill in all this stuff um and then we'll choose to use a different phone number and all this stuff and I'll see you back here in a moment of course if you already have an email you wouldn't have to go through all of this process here but I'll be back in just a moment okay all right so the next screen that I'm being prompted with is to add a credit card they say identity verification by card um of course this is is so that when you want to pay uh and go to the pay TI you can I believe that Azure uh provides you a Sandbox so you'll be okay but you'll have limited control within Azure um but what we'll do is we'll go ahead and I will fill all this information of course I'm not going to show you all of this information um but I'll see you back here in just a moment okay okay that's all filled in and so it looks like um it's still setting up our account up here uh it's asking for some feedback um I don't really have any feedback for the sign up process I'm just going to wait here till setting up your account is complete so I'll see you back here in just a moment okay oh it looks like it's already done so the account is created I assume that we can just go ahead and log in so let's go ahead and sign in here and we will CH choose this new account now the cool thing about um Azure is that normally when you're logged in you stay logged in so um uh it's usually pretty pretty convenient I don't feel like I'm always logging into my account but we are in here and so that's all we had to do to get into our new azure account so there you go all right so in this video what I want to do is focus a little bit more on uh resource providers because it's very important to understand about registering uh or unregistering resource providers to get access to particular Services right now I am still utilizing the free tier so in some videos I might be on free tier in other ones I might not be but what I want to do is make our way over to our subscription so we'll go ahead and type in subscription in the top to and from here we'll go into Azure subscription one yours might be named differently if you named it differently I'm going to go down uh down over here and look for resource providers and so in here we have a bunch of uh providers that we can utilize and if we scroll through here there's a ton of them and so if we do not have um a particular things registered we're just not going to be able to use those services and the the type of subscription you have might determine what you're able to actually access so uh we can just kind of sort here on the right hand side by uh just double clicking and we can see what resources we have so I'm just looking through here and we we kind of have an idea of what they are so Microsoft storage is probably storage accounts um I'm trying to look for uh virtual machines I imagine there is probably one called Microsoft virtual machines or VM if we're not sure I can go ahead and type it up here so VMware what if I type in Virtual machines so um some of these are not registered but um you know uh it's just going to be really dependent on what we're running into so some of these are grouped under the same thing so it could be a bit misleading in terms of what their names are but uh what I'm going to do is just take a look and click into storage and see what kind of information we can get about it so we'll go ahead and click into this one here and I'm again I'm just trying to see what kind of information we can get and if we click here in the top it's showing resource types so that's kind of showing the kind of operations um that we can perform and if I hover over them notice it says like locations or operations or storage tasks so I imagine that these um uh these might be specifically tied to API calls um but yeah if if it's not very clear what these do that's totally understandable uh but I'm just going to say that we are going to come across resources and they're not going to work and it's we're going to have to enable those uh resource providers First uh one that I think that might happen would might be Cosmo DB I kind of remember having to always activate that one Cosmo DB so just give me a second I'll go look for it okay all right so I did a bit of Googling and in this one they were suggesting some uh resource providers I think it's talking about Cosmos DB and I think that Cosmos DB used to be called document DB or it was an older version of it so I'm just curious if we were to uh type that in here let me say document DB yeah and notice that it's not registered so um Cosmos DB is a um it's a nosql database if you ever heard of um adabs is equivalent of Dynamo DB it's something similar uh the question is can we use this in the free uh tier I'm not 100% certain but it says try for free uh for up to 30 days and so all I want to see is is it going to complain that we don't have it registered that's what I'm hoping uh to happen here to demonstrate this uh this thing about registering I'm going to go ahead and go ahead uh here and hit create and uh we have a bunch of different options here so I'm just going to go ahead and create a nosql database and I'm going to create a resource Group so I'm going to say you know my DB we'll go ahead and say okay just follow along if you don't know the stuff that's totally all right again I'm just trying to get it to prompt if you don't want to make this you can just watch and just see what happens uh when we see that resource provider uh complaint assuming that this is going to trigger it I'm not sure and so we need account name so I'm going just say my new DB um and I'm just going to put a bunch of numbers here on the end these are Global names so it's treated like a domain name I have to really figured out apply the free tier discount absolutely yes and we'll go ahead and give it a moment so we'll just wait and we'll go ahead and create and so it's initializing the deployment and I'm not seeing any complaint uh so far I keep expecting it to say hey you need a you need a um a resource provider here but it seems to be deploying so this might not be a good example but I definitely remember having this issue before but we'll give it a moment I'm just going to be back in just a second and we'll see what the result is okay also while we're waiting I just want to point out that uh a lot of times when things are happening you can go up to the notifications and it will give you an update here and so while this is creating I could go ahead and give this a hard refresh um and just still notice that it's still showing the deployment in progress so we can really keep track of where we are or what happening um again I don't know how long this takes to create this might take quite a while I just kind of forget I know it's not going to cost me anything to spin this up but uh we'll wait here a bit okay all right so that did actually create so I guess that wasn't a really good example unfortunately uh but I do know um I'm going to go ahead to that Resource Group and I'm just going to go ahead and delete this uh anytime you launch a resource in Azure uh you always have to launch it into a resource Group and it's a lot easier to tear down all the resources within a resource Resource Group so I go ahead and hit delete Resource Group it has that one database there I'm going to go ahead and delete it so I did kind of cheat and I went out to the internet and I said what service uh isn't enabled by default uh where you'd have to register it and one they said was AKs AKs is uh for running kubernetes clusters that's a little bit um out of scope for the the uh this level of certification but I'm going to do it anyway I really don't want you to do this I just just want you to uh watch and see what I'm talking about here because kubernetes can be very expensive um and I don't want to to put you in trouble here or to make this harder for you so just watch along and let's see if we can see what happens when we try to launch a kubernetes service without turning on uh turning it on in uh the reg uh under resource providers so I'm going to go here and launch a new kubernetes cluster and I'm going to create a new resource script I'm just say my K8 um uh Resource Group for RG there we'll say okay and I'm going to choose something again don't do this I'm just doing this we'll go ahead and do Dev and test I'm going to say my uh k8's cluster and so it likes the name there that's fine I'm going to go with the free pricing tier if it's free you can do it as well but going to tell you it's not fun to set up kubernetes clusters it's going to set up at one Noe pool we'll go ahead and hit review and create if you're also noticing um there's always this confirmation step with Azure I really like this like eight of us does not do this gcp kind of does this but you always go through this process of go through the steps review what it is that you want and hit create and then it has a a deployment step um so it's a nice workflow I really like that about Azure but we'll give it a moment here to um get ready to confirm all the information and we'll go ahead and see if we can create it it says validation has passed we'll go down below and hit create I'm still expecting it to ask me about container service and I definitely confirm that this is something you're supposed to have turned on now what we'll do while we're waiting is I'm going to go over here uh click back into a new tab and while that is deploying because that's going to take a while I'm going to go ahead back into our subscriptions and I want to check resource providers because I know this one is called like container services so I'm going to type in here container and it says it's registered so I feel like Azure is messing with me because in the past you've always always always had to manually turn these on and I feel like it's just turning them on for me so what I'm going to do here is I want to see something I don't have turned on and then I want to go try and use it and see if it actually just turns it on because if it does that now that is great but always in the past that's not how it worked so just let me go look for something and I'll be back in just a moment all right so I just went over to chat GPT and I asked what does Microsoft compute give you access to and it says virtual machines and scale sets which makes sense that's what I recall uh it doing but I just wanted to be 100% sure it's going to do what I wanted to do I also noticed that uh coming back to AKs our deployment failed I'm going to go take a look here um the resource R operation failed to complete successfully because it reached terminal provisioning State failed that's totally fine I don't even want to deploy a kubernetes cluster anymore I've given up on that we're going to go ahead and just um delete this Resource Group and if you're thinking this is a bit messy I'm just going to tell you this is what Azure is like um Azure is uh really great in terms of its offerings but uh out of all the cloud service providers I would just say that it is the most uh challenging to learn but anyway that's going to tear down and so what I want to find out is if I go launch a virtual machine this this automatically going to turn on to be registered that's what I want to know so what I'm going to do is go ahead and attempt to launch a virtual machine which that that is something that is a lot more reasonable to learn at this certification level but we're going to go ahead and hit create I'm going to choose an Azure virtual machine and I'm going to create a new resource I'm going to say my uh uh virtual machine uh RG and I'm going to go here and just say my virtual machine RG or not RG but just put that in there like that and we're going to go ahead and choose us East does not really matter I just want to it somewhere and I mean this looks all okay um I'm not going to log into this the only thing that matters is uh what kind of image we're utilizing because that's going to determine uh the spend so that is free tier I'm going to stick with free tier let's go ahead uh forward to our review and create and see what happens so again I'm kind of expecting to create this and I wanted to say that it's not enabled it wants us to generate a new key pair um um I don't really want to download a key pair but I'll go ahead and do that anyway that's something you commonly do with virtual machines I just wanted to create it so again I have not enabled that service while we're waiting for this let's go ahead and click on notifications and view all the activity I'm just curious if it's enabling those subscriptions because usually it tells us everything in here and so I'm just carefully looking so um I'm going to go ahead and refresh that was four minutes ago ah look here Register subscription for container service okay so um we absolutely do need to turn it on but it turned it on automatically for us and I'm just trying to say that in the past I always had to manually do that down below here register the the uh uh storage resource provider so I'm not sure if this is a problem anymore but I still think it's important to point out that you are supposed to register Services uh before you use them um and that's the only point I wanted to make there um so just understand that that is something that's important to um Azure but uh now what I need to do is uh get rid of my um uh that virtual machine I've been launching so over here you can see the latest resources I'm going to go to this one here and I know it's still deploying it's creating these resources I'm going to go ahead and tear that down so I'll go here and just say um apply for delete for all everything yep I definitely want to do that and I'm going to go ahead and copy this name here and we'll tear that down so that's the only point I wanted to make in that video I know was super complicated but hey that's Azure we'll see you in the next one okay ciao let's go ahead and actually create some users and just before we proceed forward to create a user I just want to point out you can tell what tenant you are in if you look in the top right corner so here I'm in my Starfleet tenant and there's actually I think you can switch between here yeah that's an easier way to switch between your directories uh but generally that's not how I do it I'll go to the top here and just type in Azure active directory and uh when I want to switch a tenant I just click the Switch tenant button and click on what I want but we'll make our way back to the uh Starfleet tenant that I have here here you can see my information and I've obviously activated Azure ad premium P2 um but before we go ahead and create a user we're going to have to create a group and I'll show you why if I'm going to go ahead I'm just going to speed through this for a second but if I scroll on down I have this option where I need to create a assign it to a group I guess I don't have to but um the problem is I don't have one and so before I create my user let's go ahead and create ourselves a new user group and so we'll go ahead and create a new group here and I we have two options we have security and Microsoft 365 it explain explains right here the difference so 365 is really for giving access to mailbox calendar files SharePoint we're not doing that stuff here we're just sticking with regular security groups uh which is for Azure stuff we'll name this uh developers and then we'll name this developers and notice here that uh the membership type I have a drop down if you're on the free tier this is going to be great out but uh this Dynamic user is part of P2 and so uh this allows us to add a dynamic query and the idea here is that if I start having users and I just say if a user uh is from Canada then they'll automatically be added to this group and so that's the query that gets outputed but we're not going to make a dynamic group today uh we'll just make our way back here to the new group and we'll just manually assigned stuff all right I'll go ahead there and create that user or that that group there and now that we have that group let's make our way over to users so we'll go back here I'm going to make myself a new user um and and on the top here we'll go here uh and we'll name this one Kevin and we'll have that lowercase and we will call them Kevin xxbridge all right and you'll notice here it will autogenerate a password it's four letters and four numbers I don't find this personally uh very secure but the idea here is that uh user is going to reset that password right away so it's not a big deal and that's very easy to remember and now I can go here and assign uh groups and if I want to assign them a ro I can do that here so we'll open that up we have a bunch of different options maybe we want these two roles here and then we have some additional information I'll go ahead and create this user and so now this user exists what's interesting is that I can go ahead and delete users and then recover them the groups have this as well where if you go here and I actually have a user I deleted previously so it just takes some time to show up but if you go ahead you can hit the uh delete user here and then uh they will remain in here for uh 30 days and then they'll automatically be Del be deleted so if someone made a mistake this is a great opportunity to bring them back and so I can just go checkbox on rishan here and we can just bring her on back restore that user all right and again you know this is sometimes a bit delayed so we might have to hit refresh there she is and so uh you know that is the whole group and user stuff there let's take a look at how we can enable multiactor authentication for our users and so multiactor stands for MFA you're probably used to it where it's a secondary step to confirm your identity before logging in either via a phone or a hardware device such as an UB key and so there's this button here says multiactor authentication and it could be disabled for you it very likely is if you're on the uh the free version of um your Azure ad just going back up here one level you can tell based on what that is here so I'm using Azure ad premium P2 that's definitely going to allow me to have MFA so if you just don't want to turn on P2 or it's trying to uh charge your money don't worry about it just watch me do it here you pretty much learn what you need to know so we'll just go ahead and click that button it's going to bring us to a different screen here and here we have our users and you can see multiactor authentication has turned off for all of them so we can go ahead here and turn it on for a single one if I click enable uh and so that enables it for Kevin then we have some other additional options like manage user settings and here you can see we have some extra options so require selected users to provide contact methods again delete all existing app passwords generated by the selected users restore multiactor authentication on all remembered devices so just some additional things another thing we'll want to check out here it's not very obvious but we have a service settings button up here and this will give us more addition additional options to enforce for our users so first we have app passwords so this allows users to create app passwords to sign into nonbrowser apps so things that are uh not part of the website here and so you can whitelist some IP addresses for them uh so that they are trusted from those locations then for verification options this is something that's important we have some options like call to phone so um it will actually uh to do the MFA will actually call your phone and you'll tell you the letters and numbers that you enter in or it can send you a text message or it can notify you through the mobile application so you can install the companion app uh from the Android or iOS store or the Windows store I imagine there's a Windows store too um and then there's the verification code and mobile app on or Hardware tokens so Hardware tokens could be with an UB key right then you can say remember a multiactor authentication on trust devices for x amount of days that way they don't have to enter it all the time uh because it might get annoying for some users honestly for me I want everyone to entered every single time cuz that's just how I am but let's make our way back here and see how we can do some bulk assignment so what I'll do is I want to enable it for a few people here so if I go up to bulk update I can download a sample file and uh that's going to go ahead and download that and uh you can see I actually did this previously here so I'll just copy it and uh what we'll do is just paste that in there so we're just pasting in yeah that's fine we're just pasting in uh their their name right and the MFA status you can always get the name from here just back on the list there and so once we have saved that file we can go ahead and upload that uh they're the same here so it's not a big deal and we'll just wait a few seconds here this is pretty darn quick usually doesn't take minutes sometimes it takes seconds but we'll just give it a moment here and there we go so that was a long wait I don't know why but I verified the two there and so if we go next now those will be now enabled uh there's also this option to enforce so I just go there uh after multiactor authentication is en Force users will need to create app passwords to use nonbrowser applications such as Outlook or links and so that's a great option to have so I'll just go ahead enable that as well so now that's enforced and so that's all you really need to know about uh MFA hey this is Andrew Brown from exam Pro and we are looking at Azure Computing Services starting with Azure virtual machines so virtual machine is going to be the most common type of compute whenever you're launching a server I would just think of a virtual machine uh and your virtual machines could either be running Windows or the Linux operating system now the great thing with virtual machines is you get a lot of configurations so you can choose your OS the amount of memory the amount of CPU you can attach storage to it uh the thing here is that because it's a virtual machine the uh the hardware is shared with other customers you can get dedicated but generally it's shared and then you get a virtual uh computer um so it seems like you have like 100% of the resource okay then we have Azure container instances so this I would describe as Docker as a service you can run containerized apps probably runs Docker in both windows containers CU I believe uh Windows has containers as well but uh runs containerized apps on Azure without provisioning servers or VM so makes that a lot easier for you the next sounds very similar which is called Azure kubernetes service so it's kubernetes as a service uh easy to deploy manag and scale containerized applications um so the idea here is that kubernetes is is just another uh way of uh working with containers um but it's using an opensource library kubernetes has basically become the deao for um uh containers and so we've seen all the cloud providers uh try to make their own service or orchestration service but um kubernetes kind of one out so you'll see it on all platforms the next one is azure service fabric this one can be a bit confusing because it's described as many things uh but I'm going to describe it here is a tier one Enterprise container as a service uh application or um cloud service so um it's for distributed system platforms it runs on on the Azure cloud or on premise uh and the way they described is easy to package deploy and manage scalable and reliable microservices and anytime you hear the word microservices think of also containers so with Azure container instances and Azure kubernetes Services that's where you'd also run microservices then we have Azure functions so uh this would be event driven serverless compute uh anytime we're talking about serverless compute we're usually talking about serverless functions which are little B of code uh that you can just um upload and it just works you don't have to think about the servers or provision anything uh and you only pay for the time that that code runs so serverless functions generally run for very short duration as soon as they're done those uh those underlying servers are shutting off uh and the last on our list here is azure batch so you can plan schedule and execute your batch compute uh workloads across uh 100 plus jobs in parallel when I say jobs here it's just the the code that you want to run uh you can use spot VMS spot VMS might not be out at the time of this but it will be in the future um but generally it's known as low priority VMS but the idea here is that there are uh virtual machines that are being underutilized and so Azure is allowing you to uh uh rent them at a more cost effective cost and so if you're doing a lot of uh scientific compute or other things uh and it doesn't matter if these uh Services get interrupted and you want to use those low prior VMS that is a great way to save and that is the computer Services hey this is Andrew Brown from exam Pro and we are looking Azure virtual machines which makes it easy for you to choose your own OS compute memory and storage and launch a server within minutes all right so let's take a quick look here at VMS for Azure and this is a highly configurable server that relies on virtualization meaning that you're running a server without having to actually buy and maintain physical Hardware that runs it uh you will still have to manage things at the software layer so you would have to apply your own OS system patches and installing the configuration packages but the nice thing is that you're not dealing with that Hardware it's just going to work for you and some things I want you to know about Azure virtual machines is that the size of the virtual machine is determined by the Azure image uh and so the image defines the combination of vcpus memory and storage capacity the current limit on a per subscription basis is 20 VMS per region I would think that if you wanted more you could just use another sub subscription I don't know if they have service limit increase for that but that might be possible as well Azure VMS are build at an hourly rate an instance uh or a single instance that you launch is going to have availability of 99.9% when you're using premium disc if you have standard disc I have no idea what it is um but it's going to be less than that if you want to get 99.95% availability you're going to have to launch two instances within an availability set and you can attach multiple manag discs to an azure virtual machine now just to give you uh like a quick visual of what's actually happening when you launch an instance because when you do launch a virtual machine there's going to be other networking components that are going to be created or associated with you and you definitely need to know all these components here so I have this nice diagram we're going to do a quick run through with it and I want you to just know that when you do launch a virtual machine it actually does give you a list of all the components that it creates this is actually very common with most Azure services and sometimes what they'll do is they'll put it within a resource Group for you so that they're all grouped together which is very nice um but uh let's just run through these uh common components that you need to know such as the network security group and this is going to be attached to your network interface it acts as a virtual firewall with rules around ports and protocol so that is what's protecting our virtual machine you have the network interface that handles IP protocols so that's how the virtual machine uh talks to the internet or other things on the network you have the virtual machine itself or the instance that's a uh the version or the um uh instance that is currently running it's going to get a public IP address assigned to it so that's how um people from the internet can actually access the virtual machine and then you're going to have to launch it within a virtual network uh and so that's you're going to have that vnet so you'll either you'll either choose one or you'll be creating one uh during that wizard process so there you go so now let's take a quick look at the options for operating systems on Azure VM and let's just Define what an OS is uh so the OS is the program that manages all other programs in a computer and the most commonly known operating systems are windows Mac OS and Linux and when you want to uh launch a virtual machine the way you determine what operating system you use is based on the image that you choose okay and um Azure has a Marketplace so they have so many different kinds of operating systems you're going to have every Poss option you want and Microsoft is also partnered uh with specific companies to make sure that they're providing you images that are updated and optimized for the Azure runtime so let's do a quick run through of these supported or partnered uh os's so we have Seuss we have red hat Ubuntu Debian FreeBSD um then you have flat car container Linux Rancher OS which is for containerization bitnami bitnami is more like images that have preloaded software on them they very popular for their bitnami WordPress you have mesosphere uh and then you have images that have Docker with it so you have a lot of options uh open to you there and I always forget about Jenkins and Jenkins is on the end there now if you want to bring your own Linux version you can totally do so all you have to do is package it into a virtual hard disk or a vhd uh if you've never heard of vhd uh these are these are just uh virtual hard disk formats that you can create using hyperv software which would be on your Windows machine uh and just be aware that Azure doesn't support vhdx which is a newer format it it only uses vhd okay so there you go so let's take a look here at Azure scale sets and these are used to automatically increase or decrease your virtual machine capacity so imagine uh you have a web application behind an application load balancer and you have an increase in traffic you want to be able to quickly add more capacity by adding another identical virtual machine or when uh there's a decrease in traffic remove it to save cost and that is what Azure skill sets do um so you're creating uh skill policies to automatically uh add remove based on host metrics host metrics could be like CPU utilization or uh Network in uh you're going to create health checks and you can also uh set a repair policy to replace unhealthy instances you can associate a load balancer to distribute virtual machines across uh availability zones and you can scale to 100 or even a th000 VMS using scale sets so one thing you're going to probably want to do with your scale set is associate with a load Bouncer and in honest I don't run any kind of application workload uh unless it is in a scale set and behind a load balancer because it's just good practice to do that and the reason why you're going to want a load balancer is that it's going to help you evenly distribute your VMS across multiple availability zones and that's going to give you high availability uh because you definitely want to try to run uh 3 VMS across 3 azs to get that a high availability uh you can also use a load balancer probe checks and these are more robust health checks than what scill set provides you uh so that's just an added benefit there uh and when we're talking about um load balancers we have two different choices here we have the application Gateway and so this is for HTTP htps web traffic load balancer uh and then you also have Azure load balancer and this is going to support TCP and UDP Network traffic and things like that so depending on what OSI layer you need to operate on is going to determine what kind of load bouncer you need to use so let's take a look at scaling policies and these determine when a virtual machine should be added or removed to meet the current requirements and you have this uh Little Wizard here this is what the What wizard you see or form you see when you're creating a scale set initially with very simple features but let's just focus on two things scaling out and scaling in so scaling out is when an instance should be added to a skill set to increase capacity so you choose your metric uh which is hardcoded in this case to CPU threshold so you choose your metric the duration how many VMS you want to add and then the scale in is the opposite that's when you're removing uh uh uh something from the scale set to decrease your capacity and again that interface is very simple uh when you actually go ahead and create a scale set after you go and update it you're going to end up with a lot more options and here are the options you can see they're extremely robust and so uh you have the option to choose one of the builtin host metrics that are already be being collected on your virtual machine so uh the most popular here and there's more than this but uh the most popular here is CPU Network in network out dis read and write uh then you have your Aggregates so you can decide how you want to group or uh collect that data uh before you apply your final operations on it uh then you have your operator so you can say greater than or greater than or equal to then you have your actions you can say increase the count of so add uh x amount of servers or you can say uh increase by percentage so imagine you had um uh 10 servers and you want to increase the load by 30% that would add three additional servers if you want more metrics than just the builtin host metrics you can absolutely get more uh but you're going to have to install a couple things uh for app uh if you want more app specific metrics like page performance or page load performance and sessions count you would uh install a small instrumentation package for app insights and uh if you want to have more detailed host metrics so you might have host metrics but you want them in more detail or more available host metrics you'd install the Azure diagnostic extension within your VM um there are a few other uh scaling policy options that are well they're not exactly in that form but they are around or are associated with them one is the scale in policy not to be confused with the scale in options um and this determines what virtual machine should be removed when you decrease capacity so it's just a simple drop down and you have a few different options so there's the default option this is where it deletes the VM with the highest instance ID and it's going to do that b uh uh take in consideration uh the balancing across azs and ads or it can delete the newest virtual machine so delete the newest VM again uh this one's only across uh virt or availability zones or delete the oldest VM this is going to delete the oldest VM and balance across availability zones then you have an update policy and this determines how uh how VM instances are brought up to date with the latest scale set model so again it's another drop down and you have a a few options here so you have automatic so increasing the start upgrade immediately in random over uh order or or manual so existence or existing instances must be manually upgraded or rolling and so this update upgrades roll out uh in batches with optional pause uh and just one other note here is that if you want to do automatic OS upgrades you can enable uh this to help ease update management by safely and automatically upgradeing the OS disk for all instances so there you go Health monitoring is a feature with skill sets you're absolutely going to want to turn on uh and what it does is it determines whether your instance your virtual machine instance is healthy or unhealthy so you have that option to disable or enable it and it comes in two different modes we're going to have the application Health extension which is what we're seeing on the right hand side here and this is where you ping an HTTP or htps request with a specific path uh and expect a back a specific status so the status here would be 200 so the idea is that you could say ping the homepage and if the homepage appears then therefore the server must be healthy or you can make it your own custom uh page that's what I like to do I have like a health check page the other mode is load balancer probe uh this is only going to work if you have an associate IED load balancer and uh here you can check based on TCP UDP HTP request so this is a little bit more robust um um so I generally would recommend using this mode over um the the first mode because generally when you have a scale set you're going to also want to have a load balancer uh now if you want to replace unhealthy instances they have an automatic repair policy so this is an automatic I mean like it's not turned on by default so you have to uh explicitly say you want to turn it on and what that will do is that if it finds an instance that is unhealthy it's just going to uh terminate it and then launch a new instance all right and so there you go all right let's take a look at Azure virtual desktop formerly known as Windows Virtual desktop Azure virtual desktop on Microsoft Azure is a desktop and app virtualization service that runs on the cloud Azure virtual desktop works across devices like Windows Mac iOS Android and Linux with apps that you can use to access remote desktops and apps you can use most modern browsers to access Azure virtual desktop hosted experiences use Azure virtual desktop for specific needs like when security is a concern because all data is saved on the server and cannot be left on the device of a user key features and benefits enable secure and productive remote work on any device Azure virtual desktop provides full Windows 10 and Windows Server desktop and application virtualization on any personal device seamless integration with Microsoft 365 apps for Enterprise and Microsoft teams reduce costs of Licensing and infrastructure use eligible windows or Microsoft 365 licenses to access Windows Virtual desktop and pay only for what you use protect against outages to stay productive help keep your team running during outages by leveraging builtin Azure site recovery and Azure backup Technologies simplify it Management Windows Virtual desktop manages the virtual desktop infrastructure for you say so you can focus on users apps and Os images instead of hardware and maintenance Heap application and user data secure easily apply the right access controls to users and devices with Azure active directory conditional access so that's an overview of azure virtual desktop hey this is Andrew Brown from exam Pro and I'm going to show you how to launch your own server on Azure uh and so a server would be considered some kind of Computing service and the one we're going to do right now is we're going to use Virtual machines so go the uh all the way to the top here to the search and I want you to type in virtual machine I know it's on our dashboard here but just to get the get in the habit of always being able to find stuff it's great to use the search and then once we're here on the left hand side I want you to click add and we're going to be presented with a lot of different options so the first thing we need to do is choose our Resource Group uh we have another Resource Group we that was created here for us for azure I wouldn't worry about it let's just choose the one that we created I'm going to name this virtual machine I'm going to call it my VM we're going to launch it in uh Us East uh if we wanted to choose an a we could so we go to availability Zone and choose one I'm just going to stick to no infrastructure then we have Ubuntu here it's using the latest version it might be different for you I wouldn't worry too much about it then we need to choose our size this is going to really determine our cost here this is $89 Canadian I'm just going to go ahead and hit select uh here and we're just going to sort on the right hand side based on cost and we're going to choose the most inexpensive server which is the B1 LS so that's one vpcu and half a gigabyte of ram um because this is just an example app we're not going to do any or a server we're not going to do anything with it so we might as well make sure we're not overspending our free credits uh we have the option to add a public key this is what you generally would want to do uh but that's a lot of work and so uh for this demo so we're just going to choose password they're very finicky about the passwords here that it has to have a uppercase lowercase special character um number and it also has to be 12 characters so I'm going to type in testing with a capital T testing 1 2 3 exclamation exclamation and then testing uh with a capital on the T 1 2 3 exclanation exclamation so there we go uh we don't need um any inbound ports I'm going to say none because we're not sshing in I'm just going to click forward here to show you some of the other options so we could Cho are are the type of uh dis we'd be attaching so it's by default on premium you might want to choose standard or standard htd generally when you're launching web web apps you want SSD if we were to choose standard it would say hey you should really use premium so we're just going to go back to premium you're going to notice that the uh disk is encrypted by default so you can't have an unencrypted dis that's a very good uh default option if we go over to networking it's going to automatically select our vnet that we chose uh and the default sub net that we uh that it created uh when we created the vnet and then here we could choose whether we want an IP address or not um if it had no I or public IP address it would still have a private IP address um and that would that would mean that it like it's really intended for a private subnet um it has a network security group set on to basic here um and that's pretty much it here you could also put it behind a load balcer we're not going to do that let's go over to management management we have a couple options here like identity auto shut shut down backup um these are all fine we're just going to leave it alone for Advance we could put custom data in here that means we could provide it a script that it would use to initially set up the server we're not going to do that um and that's about it so I'm going to go back to basic and I'm going to scroll all the way down to the bottom and I'm going to hit review review plus create and what we're going to have to do is wait for this validation step that was very fast it might take multiple seconds for you or even a minute um but sometimes it's faster than others so so now I'm going to go down below and hit create and we're just going to wait for that deployment to be submitted it's going to say deployment is underway and then soon it's going to say deployment is complete so I'll see you back here in a moment when deployment is complete great so we had to wait a few minutes there and now it says deployment is complete and we can PR proceed to go to Resource and so here's our virtual machine we have some CPU some Network some dis so there's some activity here um if we wanted to gain access to it there should be connect button here we're not going to be able to gain access to it because we just didn't set it up in a way that that was the case we have a few options down the left hand side such as the diss that are actually attached to it and maybe the size here so maybe if we wanted to um resize change it to a larger size we could go ahead and do that um but there's nothing really exciting here to do I just wanted to show you how to launch your own virtual machine and now that we have our own virtual machine uh launched I'm going to go back to overview we're going to go ahead and delete that because this is now costing us money uh it's not costing us a lot of money but uh again we're done here so we'll just go ahead and delete we're going to say yes to delete and now it says it's deleting the virtual machine and so we're just going to wait until this is uh finished deleting and a lot of times you can just look at the progress up here and it'll say deleting the virtual machine could take a few seconds it could take a few minutes um it just depends so I'll I'll see you here in a little bit when this is done deleting so after a little while here it says it's how it's successfully deleted the virtual machine if we want to make sure that it's deleted let's go make our way over to Virtual machines at the top here in the search and you're going to notice that it's still showing up there but it said it was deleted and this is the thing with uh Azure is that it takes time for it to propagate so what we'll have to do is just hit refresh and now it's gone so just be aware that um sometimes the consistency in terms of what you see in the UI is a bit delayed and so um if you remember clicking delete and it says that it deleted it just uh have a bit of patience there and hit refresh and just double check to make sure that's the case so there you go hey this is Andrew Brown from exam Pro and we're looking at Azure app Services which allows you to quickly deploy and manage web apps on Azure without worrying about the underlying infrastructure and specifically this is known as a platform as a service so Azure app service is an HTTP based service for hosting web applications rest apis and mobile backends and you can choose your programming language and it can either be windows or L Linux environment and it's a platform as a service so if you've ever used Heroku is basically the Heroku of azure and so Azure app service takes care of a lot of the underlying infrastructure for you so can do security patches of the OS and languages load balancing autoscaling automated manager uh and then um there's a lot of things that you can Implement uh and so for Integrations such as Azure devops uh GitHub Integrations Docker Hub uh package management easy to set up staging environments custom domains attaching uh SSL certificates so you can see that it just basically takes care of everything for you uh if it's really hard for you or timec consuming for you to do all this on your own in Azure and the way it works is you pay based on an Azure app service plan honestly I find these really confusing um I really like how adus does elastic beanock because you're just paying for the underlying services but Azure has all these crazy uh tiers here uh but you have shared tier which is free and shared doesn't support Linux you have the dedicated tier uh which is basic standard premium premium version two and three and the isolated tier and so uh another thing I need to note is that Azure app Services is not just for traditional VMS for monoliths you can also run Docker single or multi containers uh and when you set up a project you're going to choose your domain name on the azurewebsites.net obviously you can override that with your custom domain name but there you go let's talk about Azure app services runtimes and so let's define what a runtime is a runtime is software instructions that are executed while your program is running and so runtime generally means what programming language libraries and Frameworks you're going to be using and so uh runtimes for Azure app services are predefined containers that has your programming languages and probably some commonly used Li for those languages installed and probably commonly used languages for web Frameworks and so the idea is that you're going to choose your uh runtime it could be net net core Java Ruby which I'm very disappointed in Azure because uh as of shooting this video they do not support uh Ruby for application insights but yet they have it here in Azure app Services node GS PHP Python and there's all the logos uh if you like seeing the logos and so Azure app Services generally has multiple versions so they have like Ruby 2.6 2.7 for PHP they have a lot of versions for no J they have a lot of versions uh but I just want to point out uh that it's pretty common for cloud providers to stop or to retire the old ones at some point to stop supporting them uh you know that just because they want to keep things modern um and the other thing is like it also helps you keep with your best security practices because really you should always be trying to upgrade to the latest version uh for those security patches and and things like that so there you go but now let's say uh you wanted to use a language that wasn't supported on um Azure app services like you wanted to use uh Elixir what you could do is create your own custom container either for Windows or Linux uh and so uh you just go ahead and create your own Docker container on your local environment you can push it to an Azure container registry and then the the idea is you can deploy your container image to your app service so I just wanted you to know that you could do that um if there's some languages or other things or maybe you're using a language but you need uh some bundle or packages that are uh that are just baked into the uh into the Container so there you go let's talk about deployment slots so deployment slots allow you to create different environments for your web application and Associate a different host name this is useful when you need a staging or quality assurance environment or maybe you need just like a developer environment any kind of environment you want so think of it as a way to quickly clone your production environment for other uses and so down below here you'd have your deployment slots and there's your slots maybe you have app staging beta so that's the different uh host names there uh and so the idea is that not only do you have other environments but there's also this thing called swapping and the idea is like imagine uh you decide like you make a clone of your production environment and then you deploy the latest version to it and then when you decide that it's good it's in good shape then what you can do is swap it out with your current production environment and then just retire your old one and this is called blue green deployment uh and so that is a great way to uh do deployments and I just wanted you to be aware of that so I wanted to talk about app service environment because I just wanted to show you how Azure app service is not just for little toy apps or your small startup but they can be really useful for larger Enterprises so um app service environment is an Azure app service feature that provides fully isolated and dedicated environment for securely running app Service uh at high scale and this is going to allow you to host web or Windows Web apps Linux web apps Docker containers mobile apps and functions and app service environments are appropriate for application workloads that require very highs scale isolation and secure network access High memory utilization and again you know when you think of platform as a service you don't think it this kind of scale so it's really impressive that Azure does this customers can create multiple asc's within a single Azure region or across multiple Azure regions making ASC ideal for horizontal scaling stateless application tiers in support of high request per second RP RPS workloads and ASC comes with its own pricing tier and that's the isolated tier and ASC can be used to configure security architecture apps running ASC can have their access gated by Upstream devices such as a web app application firewall also known as a WAFF app or s s ases can be deployed into availability zones using Zone pinning I don't know what that is a Zone pinning but that sounds good to me uh and there are two deployment types for ASE we have external ASC and ilb ASC let's go take a quick look at what those look like so here's a big diagram and look in the middle there that's where our Azure uh uh service environment is it's in our own vnet and a subnet and the idea is that you if the reason it's called an external ASC is because it exposes the ASC hosted app on an internet accessible IP address and then down below uh if you wanted to connect this this is generally what people are probably using for but what uh you want to do is you can connect it to your on premise via a site to site or express route VPN um so that's something you can do with it and the other part is like you can because the ASC is within the same vnet it also has access to resources within the vnet without any additional configuration so that's really nice and then the second uh second one here it looks it's exactly identical but there's one key difference and it has this ilb there and an ilb stands for internal load balancer um and that is basically the only difference so uh there you go so the way you pay uh when you use Azure app service is you need an Azure app service service plan and that's going to determine you know how much you pay and what's going to be available to you they got three tiers which we're going to go uh through here shortly and we did mentioned them earlier I honestly do not like this whatsoever this tells you this this is a Microsoft product because it has these uh wonky pricing tiers I hope in the future they'll change it but that's just what it is and so let's go learn it so basically what you do is you have like this big uh wizard uh that tells you all the stuff that you can have it tells you what's included and stuff like that uh but let's work our way through through it so the first thing is the shared tier and there's two types here we got free and shared and so there's the free tier that red one there it's called F1 it gives you 1 gigabyte of disk space up to 10 apps on a single shared instance no SLA for availability and each app app has a compute quota of 60 minutes per day so there you go you get some uh free tier there then there's the shared tier this provides up to 100 apps on a single shared instance no SLA availability each app has a compute quota of 240 minutes per day uh and the thing is is that I didn't know where the button is for that so like the next thing right beside it is the dedicated tier and I thought that's what it would be because it says 100 total acus so is it I'm not sure but anyway the point is there is a Shar tier where it is I don't know and you can't use the Shar tier on uh on the on Linux base system so you're using Windows you're using Windows you got to use bigger instances anyway which I don't know I don't like that too much but that's what it is uh moving on uh over we're now into the dedicated tiers and look it's right beside the free tier that's the green one it says B1 and if you expand it it actually has a couple other tiers there so I just wanted to show you that there was uh three uh there and so uh for dedicated TI we got basic standard premium premium version two premium version three and we're looking at basic that's what that is more disc space unlimited apps three levels in this tier that offer varying amount of compute power memory disc usage it must be B1 B2 B3 uh and then the next thing over is uh the standard and we had we had to switch tabs there onto the production tab notice the terminologies don't really match the tiers uh and so uh with standard you can scale out to three dedicated instances has an SLA of 99.95% availability and three levels in this tier that are offering varying amounts of compute power memory and storage dis and so then uh that's that tier there and we're on to our last tier which is the premium tier and this scales to uh 10 dedicated instances it has availability SLA of 99.95% and multiple levels of Hardware so that's the dedicated TI then we're on to the last thing which is isolated and this is really only to be used I think for ASC so the uh the isolated tier has dedicated Azure virtual networks uh full Network compute isolation scales out to 100 instances availability SLA of 99.95% and again I think it's just for those as um but there you go that is all the tiers and hopefully it makes sense to you but it is a little bit tricky to figure out what to choose but you don't really get to like pick at a granular level that's what I don't like um but uh it is a really great service Azure app uh service it does figure everything out for you so maybe it's okay for you hey this is Andrew Brown from exam Pro and we are going to be learning about Azure app services in this follow along uh and it's a service that's supposed to make it easy for you to deploy web applications I say supposed to because it really depends on your stack Azure has more synergies with other Stacks than others so if you're like me and you like Ruby on Rails you're going to find a lot of friction with rails and Linux but if you're using something like Windows servers or python or.net you're going to have a much easier time still really great service just wish they'd make it a bit more broad there but let's hop into it so before we can go use that service let's make sure that it's activated and so we'll go over here and we'll go to Azure subscription and then down below we're going to go to Resource provider now you think what you could do is just type in app services uh and you'd be wrong because the the service is under a particular provider so if you want to figure out what provider it is we can go um Azure resource providers and they have a page on documentation here that lists them all so if I search for Azure app Services it's under web and domain registration so we're going to make sure this is registered if we're using a custom domain which we are not today we need this one activated so going back here I will type in web and you can see it's registered so if yours is not registered go ahead and hit that I believe this by default is generally registered with new Azure accounts so I don't think that is an issue for you but we'll go back up here close these additional tabs and we will type in Azure app services and we will look for that service so there it is and we'll go ahead and hit add um and so I'm going to give it a new name I just made it a moment ago but I'm going to try again again and try to use the same name so we're going to call this Voyager Great and then I'm going to go ahead and name this Voyager and I already know that that is taken so I'm going to type in Delta Flyer and these are fully qualified domains so they are unique with Azure app Services you can run a Docker container we're doing code this time around and what I like to use is Ruby um but again you know if I want to use the cicd I'm not going to be able to use the deployment center with Ruby so that is not possible um and so we're going to go with python and run either a flask or ajango app I haven't decided yet I am in Canada so let's go to Canada east and uh down below here we have the plans generally the plans will tell you the cost underneath you'll notice that it's loading but I just want to show you that there are some discrepancies in terms of pricing so if I was to go to Azure app Services pricing and we were to pull this up here we can kind of see the pricing here okay and if we scroll on down right now we're looking at a premium V2 uh and oh no I don't need help I'm okay you'll notice that it's 20 cents per hour so if I go here and do that times 730 because there's 730 hours in the year that's $146 I believe this is showing me in USD dollar yeah and in here it's showing me$ 103 Canadian which is lower um so it could be that because I'm running in a Canada east region it's the price is different but you could imagine that if I had this at this cost at uh what did we say here um at 146 USD to CAD I'd actually be paying $182 so you got to watch out for that kind of stuff but I'm pretty sure this is what the cost is so just be aware that if you look stuff up in here it's not necessarily reflective so you got to do a little bit more work to figure that out uh if we wanted to go here uh we cannot choose the free tier when we're using Linux if we're using Windows I believe we can use it we're working with Linux today so that's just how it's going to be um for the B1 this is totally fine but we want to utilize deployment slots deployment slots is an advanced feature of uh the production version and that's the only way we're going to be able to use it here this is 20 cents per hour again so I don't want to be doing this for too long but I think what we'll do is before we do that we can just do an upgrade to Dev to prod so we can experience that I'm going to go and just choose B1 okay so we go next um we do not need any application insights for the time being and it will not let us so it's okay we'll go next review and create and we'll go ahead and create this resource here and I will see you back when this is done so um our resources is now set up we'll go to Resource and now that we're in here you'll notice if we hit browse we're not going to see anything because we do not have anything deployed which makes sense right uh so we're going to actually have to go ahead and deploy something so we are going to make our way over to the deployment Center and uh it's just going to tell us that we have yet to configure anything and that's totally fine we're going to go to settings it'll give it a moment and so the thing is is that we're going to need something to deploy um I did not create an app but the great thing uh is in the Azure documentation they have a bunch of quick starts here all right and apparently they have one for Ruby as well but today we are looking at python uh and so they actually have an example repository for us here which is github.com aure samples python docs hello world and I mean I could go make a repo for you but we might as well just use the one that is already provided to us so I'm just going to pull this up to show you what's in it it's a very very simple application even if you don't know anything about building web apps I'm going to walk you through really easily here okay so we're going to open up app.py so we are using flask if you've never heard of flask it is a very minimal python framework for creating web apps uh very uninspiring uh homepage here but it gets the job done it's going to create a default route for us which uh we have there we're going to call hello here and we're going to have hello world so that's all that's going on here very very simple and we have our requirements this is our package manager I don't know why python uses txt files it's very outdated to me but that's what they use and here we have flask all right so we're going to use that repo it's a public repo so it should be very easy for us to connect so we'll drop down go to GitHub and uh the next thing we need to do is authorize GitHub all right so I ran into a bit of trouble there because I could not uh authenticate my uh a GitHub account but you know what I just made another GitHub account so that made it a lot easier I'm going to go ahead here hit GitHub and we're going to try to authorize it and so now I'm logged into this new one called exam Pro Dev and we'll go ahead and authorize this application and we're now in good shape this repository doesn't have anything in it so um if I want to clone something I guess I'll probably have to Fork that repo so we'll give it a moment to authorize and while that's going I think that's what I'm going to do I'm going to go and uh Fork the example repo if I can find the link again here uh myself uh I believe it is that's still authorizing over there I'm still looking for it so it was like examples or something samples or examples all right so I found a way around the problem I just made a new uh GitHub account so that's all I had to do um and I just won't be using my primary account till I get my phone back but um so what we'll do is go hit connect I'll hit authorize and it didn't prompt me because it already connected to this new one called exam prodev you might have to put your credentials in here and it's going to ask me to select some things it's a new account so there are no organizations there are no repositories there are no branches totally brand new so what I'm going to need to do is get a repo in there so we'll just go ahead and Fork the Azure samples one so that is azure samples python docs hello world and if I type that right we're in good shape I'm going to go ahead and Fork this repository I'll say got it and then I'll move this off screen here this is now cloned you should see it cloned here and we'll go back here and this probably isn't live so there's no refresh button here so we'll have to hit discard and we will give this another go here and we will select our organization which is our name there is the repository uh should be main branch is kind of outdated I'm sorry but it's called Master that's what it is not my fault that's azure's fault okay um and I think that's it I don't know if we need a workflow configuration file I don't think so it's going to double check here no I don't think so and uh what we'll do is we'll just go ahead and save that and so now we are set up for deployment hey this is Andrew Brown from exam Pro and we're looking at Azure container instances also known as ACI and this allows you to package deploy and manage Cloud applications using containers or the way I like to think of it as fully managed stalker as a service Azure container instances allow you to launch containers without the need to worry about configuring or managing the underlying virtual machines and you're going to be able to design isolate containers for simple applications task automations and build jobs let's talk about some of the uh reasons why you'd want to use containers over VM so containers can be provision within seconds where VMS will take several minutes containers are buil per second where VMS are built per hour so you'll save a lot more money containers have granular at uh and custom sizing VPC uh vpcu memory and gpus where VM sizes are predetermined uh so those are the benefits between containers and VMS uh aciis can uh be utilized for both windows and Linux containers you can persist storage with Azure files using ACI containers and honestly if you have containers or functions you have to have an external storage mounted to persist uh it's just the way you do it aciis are accessed via fully qualified domain names which is one of the things I really appreciate about Azure Services because most of the services are like that Azure provides quick start images to help you start uh launching example apps but you can also Source containers from add your container registry Docker Hub and privately hosted container Registries it looks like that the choice option there let's just talk about container groups because this is pretty much the only major component you have to worry about these are ction of containers that get uh that get scheduled on the same host and the containers uh the containers in a container group share life cycle resources local network storage volumes so the idea is that you have these tightly coupled containers so all of them act as a service within that container group uh so here you can see an example of a couple containers that are mounting Azure files on different directories there and underneath all of that it's running on an Azure virtual machine container groups are similar to kubernetes pods yeah and it says similar to but not really the same thing multicontainer groups can currently support only Linux containers which is kind of a bummer but that's just what it is and there are two ways to deploy a multicontainer group you can use Arm templates when you need to deploy additional Azure service resources or just a yamell file when you want to deploy uh when your deployment only includes container instances let's take a look at container restart policies and what these do is allow you to change how the policies uh restart and there's three different ways we have always uh never and on failure so the first one here always means always restart the container and the idea is to uh keep your container running as long as possible and the reason why you'd want that is if you're running a web server some other providers would call that a service then we have never so run only one time this is great for background jobs and so other providers would just call this a task uh then you have on failure so containers that encounter an error that's when it should um restart and so it's as simple as just choosing that option uh when you uh are creating uh that container let's take a look at container environment variables are also known as nbars that allow you to pass configuration details to your containers and you can do this through the portal the CLI Powershell which that's always the case with Azure and so it's as simple as just putting in your uh key and your value uh and one other thing I want to point out is that you can also pass in secured environment variables so the idea is that sometimes you don't want them plain teex so if you have like so I have that stripe secret key you don't want anyone ever seeing that in production so the idea is that through and I don't think you can do this through the portal but you can do this through the CLI or Powershell is provide the secure environment variables over the regular one which isn't environment variables and that way you can pass it securely so it's never uh exposed to human eyes let's talk about persisting storage and we talked about that a little while there when we were looking at Azure files but uh containers are stateless by default so when a container crashes or stops all all state is lost to persist a state you need to mount an external volume and there's quite a few different things we can mount Azure files secret volumes empty directory a cloud get repo so you got a few options there and to mount a file volume you need to do this via power shell C you're going to give the following detail so when you launch the container there's going to be nothing in the portal so you got to do it this way all right hey this is Andie Brown from exam Pro and we're going to take a look at Azure container instances so here it is so all we got to do is go to container instances we'll hit add and the nice thing is that Azure provides us with a Hello World one so it's very easy for us to get started um it's a Linux machine and it looks like it's pretty inex expensive there so we'll stick with that I'm going to create a new group here we're going to call it banana um and we'll name the container instance banana and East Us 2 seems fine to me you'll notice we're on a quick start image if we wanted we could use something from the docker Hub and provide our own link but we'll just stick with the quick uh start image for today we're going to go ahead and hit next to networking just to see what we have as options you can make it public or private we'll go to ADV Advanced hold on here yep those are just the ports you can expose we'll go to advance and for the restart policy we can set on failure always or never we can pass in environment variables and I covered this a lot more in detail in the lecture content so we don't need to really dive deep into this um and we'll go ahead and create this instance and so we'll have to wait a little while here and I'll see you back in a moment okay and so after a short wait our container instance is ready we'll go to that resource there and take a look around so on the left hand side we can go to containers and there we can see it running we can see the events down below of what's going on so you can see that it's pulled the image it successfully pulled it and it started the container some properties nothing interesting there the logs if we wanted to see stuff and if we wanted to connect to the instance we could also go here and hit connect which is kind of nice um I don't have any purpose to do that right now so and it's also not going to work the way we're doing it but I just wanted to show you you had those opportunities uh you can do identity so that means manage it with role base access controls but what I want to see is actually this uh hello world working I'm assuming that must be a a hello page I've never looked at it before so we're going to go here grab the public IP address and paste it on in the top and there we go so we have deployed a instance onto Azure container instances or a container I should say so nothing super exciting to talk about here um but we do need to know the Basics uh there um if we wanted to deploy other containers it's just the one there so that's all you really need to do um but yeah so yeah hopefully that uh gives you an idea there I'll just go back to the list here so we can see it and we'll go ahead and just uh delete that probably do it for the vi the resources on the left hand side like I always like to do uh and we will go into banana here and we will delete banana and there you go let's talk about networking for Azure and so everything kind of revolves around the virtual Network also known as the vnet and this is a logically isolated section of your Azure Network where you launch your Azure resources and here's a very simple uh diagram of using vnet but there's a lot of networking components uh that you're going to be utilizing and we're not going to go through the exhaustive list here but let's just go through some of them uh just to give you an idea like all the things you can do within Azure networking so you have Azure DNS this manages your your DNS domain then you have the vnet itself and so underneath that it'll have like address spaces route tabl subnets then you have network security groups this access a virtual firewall at the subnet or Nick level you have express route this helps you create a very fast connection between your onprem to your vnet then you have virtual Wan this is a centralized Network to Route different network connections then you have virtual Network Gateway this is a sight tosite vpm connection between vets and local networks then you have your Nicks or your network interfaces and these are virtual network devices to allow VMS to communicate using IP protocols and then you have like all your load balancers and other things like that so again not an exhaustive list uh but just shows you that there's a lot you can do uh within networking on Azure one interesting concept is vnet peering and this is where you connect multiple vets so they act as one network and there are two types of peering we have um uh Regional peering this is when you peer two vets from the same region and then you have Global vnet peering this is when you peer two vets from two different regions let's take a look at network interfaces which are software or Hardware interfaces between two pieces of equipment or protocol layers in a computer network and so network interface controllers also known as Nyx um that is the actual piece of Hardware that connects computer to computer network and they go by a bunch of different names such as network interface card network adapter LAN adapter physical network interface or even ethernet interface controller card so if it was back in the 1990s you definitely would have had one of these in the back of your computer and if you're a gamer uh today then you have one because you want that wire connection so you have a super fast connection uh and so um these cards or Nicks uh communicate using the Internet Protocol also known IP that's going to them to uh communicate on the on Layer Two the data link layer and the physical layer of the OSI uh model uh and so the way these work in Azure is they're called the Azure network interfaces and um they have the same initialism and IC and so the idea is that you're going to attach a network interface uh to an Azure uh VM instance and without one of these your Azure VM just can't communicate because it's just imagine not having that card in your computer it would have no way of of communicating um and the difference here is that they're just virtual network interfaces right so I'm sure um at the data center Azure has a bunch of these um actual uh cards but they are abstracted away so you know you just treat them as virtual and um an Azure VM it just has to have at least one Nick but it can also have multiple Nicks if you want and so here's just a nice little graphical representation of a VM that has a Nick attached to it so there you go let's take a look at subnets and a subnet is a logical division of an address space so we just looked at address spaces so we're cutting it up one step further and subnets help you define different kinds of workloads and allows you to apply virtual is isolation within your network so when you launch an aszure resource you choose the subnet you want to launch with within and an IP from that subnet is assigned to your resource so uh the thing is is that uh when you create route tables that's how you are associating uh the subnet so it can access the inter internet or access anything uh and then there's public and private subnets but this thing is interesting because like again if you if you're using AWS uh those are very clearly defined things but in Azure uh they don't have this concept of public and private you have to Define it yourself so really a public or private subnet is just a subnet that doesn't have access to the internet and so we saw that when we had the rote table and we over over uh Road um the access to the internet to none that M essentially made it a private subnet uh another thing you can do with subnets is you can associate a network security group and this is going to help protect protect your traffic entering and leaving the subnet so you're making rules based on the IP address port and protocol uh and then there's a special thing called a Gateway subnet so uh it's a specialized uh type of subnet it's just for Azure virtual Network gateways and so um it's interesting you'll go in and there'll be a separate section just for it and so you'll create it it's just for that service to understand Azure DNS let's first Define what is the domain name and that is a service that is responsible for translating resolving a service name to its IP address and so Azure DNS is a hosting service for DNS domains that provides a name resolution by Microsoft Azure infrastructure so imagine you have a domain you want it to be M managed by Azure DNS and then you can make records like www to point to a specific Azure resource that's the idea behind there and there's two types of uh dns's you can make you got a public DNS an internet facing one this is the one you're likely going to be using so this allows you to manage your domain for internet accessible domains Point your domains to your website or creating records that you uh you own the domain or that you uh are pointing uh emails to your email server uh so things like that then you have your private DNS which is internal facing this allows you to use your own custom domain instead of the Azure provider domains so azure has its own provided domains which are fully qualified domains for a lot of services a great example of this is azure storage accounts and so that is that link there is its fully qualified domain one thing I want to point out is that you cannot use Azure to purchase domains if you want to purchase a domain you can actually do do that through app services or you use like a thirdparty provider such as uh name cheep or GoDaddy and then have Azure manage that DNS uh stuff so uh virtual private networks also know as vpns what they do is they extend a private Network across a public network and enables your users to send and receive data across shared or public networks as if their Computing devices were directly connected to the private Network all right uh and so now we have to talk about what is a virtual Network Gateway and so virtual Network Gateway is the software of VPN device uh for your Azure virtual Network so that's how these uh devices are going to connect to your network so when you deploy a virtual Network Gateway it will deploy two or uh two or more specialized uh VMS in specific subnets you need to create a Gateway subnet and these deployed VMS contain routing tables and run specific Gateway Services you can uh choose the type of Gateway you want it to be and this is going to determine whether You' use something like VPN Gateway or Express rope Gateway so it's as simple as an option like that but to really understand these virtual Network gateways we should just look at some VP and Gateway design so you understand why you're creating these things so Azure Express routes creates private connections between Azure data centers and infrastructure on your premises or in collocation environments and so uh connections don't go over the public internet and as a result offer more reliability faster speeds consistent latencies and higher security so here's a big old graphic here kind of representing what's going on here and theide idea is that you're going to have connectivity from different things like from any to any so that's ipvpn Network a pointto point ethernet Network a virtual cross connection and this is all going to be going through a connectivity P provider at a co location facility so this example would be a uh an edge partner and so you would be the customer Network that' be your on premise or whatever you want to connect so that you can make it all the way to your Azure services and the way you would establish connection is you create these Express circuits uh it's pretty common to have more than one because uh you want to have high availability just in case the other one goes out the idea is that you can route them uh route this traffic to a couple different places so the first one would be things like peering to Office 365 Dynamics 365 or even your Azure public services so when we say Public Services imagine you just launch a um a virtual machine that is in a public subnet that has a an IP that's reachable from the internet uh that could just be to that or maybe you're using like Cosmo DB or like you have fully qualified domains for other services uh so it's just a way that you can get there and then let's talk about the other side which is uh um doing private peering for uh vnet so the idea is that you have a private vnet so the subnets are private and so the only way is going to be access it uh you want a direct way to access it that way so uh that's the two ways there uh and just to note there is express route direct and so this is like express route with an additional benefit that has greater bandwidth connections from 50 megabytes per second up to 10 GB per second and this is really ideal if you have hybrid Solutions where you uh you're removing massive amounts of uh data or where latency matters because you you want uh to feel like these uh cloud services are right there with your on premise environment you're going to need a lot of speed for that so as your private links allows you to establish secure connections between Azure resources so traffic remains within your Azure Network and so I got this big old graphic here uh and so let's just uh Define a few things I'm going to pull out my pen here and so imagine you have workloads on your on Prem or you have your own virtual Network on Azure and so you have some VMS doing some stuff and the idea is that you want to connect them to some other services over here uh but the thing is is that if you wanted to connect them they might try to transverse the internet so if you're on Prem it's going out here and it's going over here and so the issue with this is that um it's not necessarily secure uh another issue could be um you know it's just faster if it would to stay within the actual Network because if you're already connected you you know your stuff over here then why wouldn't it just go through uh the actual Network another thing is like data transfer cost so it's always going out the internet and coming back in and that's not a great scenario uh so I'm just going to erase all that stuff there uh the idea with private link is that it's just keeping everything within the Azure Network um and so that's what it's doing so if you want to uh you know um connect your workloads in your vnet or your onprem that connects to a specific vnet the idea is that you can launch a private link endpoint which is a network interface and this is what's establishing that connection and you're going to have to give that private endpoint a private IP address from your vnet and so then the idea is that on the right hand side that's what you want to connect to there's a lot of Azure Services by default works with private link so there's no additional configuration you'll just be able to uh say use private link and they will uh same thing with some thirdparty providers um in the marketplace uh they might be powered by private link and then there's a third case where let's say you have like a private subnet and you have some VMS there uh so what you could do is um if you have a load balcer and you need to have an internal load balcer there you can uh launch the private link service and this is going to basically make your uh your workload in that vnet become compatible or powered by private link so there you go hey this is Andrew Brown from exam Pro and we're going to look at making our own virtual Network so we made a resource Group but we also need a virtual Network or vnet so we actually have some Network to launch our resources within so what I want you to do is make your way all the way to the top here and we're going to go ahead and type in vnet which uh we'll get virtual networks and go ahead and click that and if you notice you don't have any networks so we're going to have to go ahead and create our own so go ahead and hit the add button and uh we're going to have a bunch of options here I'm just going to name this uh well sorry we're going to choose that Resource Group so exam Pro and we're just going to name this exam Pro vet and there are some additional steps here we'll just take a peak here we don't really need to change anything but we'll just take a look so for IP address you can set the IP address space it's going to default to 10.0.0 416 which is very good for us you can see that it supports IPv6 which is great it's going to create us a default subnet which is going to be 10.0.0 sl24 that's going to be a subnet with uh like 256 um IP addresses which is great we go to the security tab um we have DOS protection basic and you definitely want to stay on that because that is free same thing with the firewall we don't want it on because that's going to cost extra money I'm going to go back to basics we're going to hit review plus create we're just going to wait for validation to complete this could be instantaneous for you or you can wait a few seconds it's different for everybody and now the validation has completed we'll go ahead and hit create and so we'll just wait for that to finish creating great so it's created so it's just saying deployment is underway so we're just going to have to wait a little bit here until it says deployment is complete and it's already done super fast we'll go ahead and hit go to Resource and so now we are in our virtual Network and we have a bunch of settings on the left hand side so address space subnets etc etc nothing we need to know at this level um we just need that virtual Network so we can launch resources in so now that we have resource groups and virtual networks we can start launching resources so there you go I'll see you in the next follow along hey this is angrew Brown from exam Pro and we are looking at Azure storage Services starting with Azure blob storage so um I would describe this as object serverless storage so if you ever heard of object storage or seress storage this is going to make sense to you so you're able to store very large files and and large amounts of unstructured files uh and the idea here is that you pay for only what you store uh it's basically unlimited storage you don't have to resize the volumes you don't have to worry about file system protocols you just upload files uh and that's why it's considered serverless storage then we're going to move on to Azure dis storage this is the most common type of storage uh you'll encounter um so we can describe it as a virtual volume so you're just choosing either an SSD or an htd so it's basically a hard drive in the cloud it has encryption by default and uh it's attached to Virtual machines so anytime you're spinning up a virtual machine uh it's probably spinning up also uh Azure dis storage attached to it then you have Azure file storage so this is a shared volume that you can access and manage like a file server so it's going to use uh protocols such as SMB the reason you'd want this is that let's say you had multiple virtual machines multiple servers and you wanted them to all share the same uh uh hard drive drive that's what You' use it for or if you need to have users access it using those protocols that's another way of doing that uh then you have Azure Q storage now I put an aster in front of it because this is just a weirdly named service um because this is really uh for a messaging queue this is actually for application integration but I list it here because they put the word storage on it so I just think it's poorly named um and even the way they describe it is is just makes you think it's storage but it's a data store queuing and reliably delivering messages between applications so it's just uh uh integrating two applications together passing a messages along another one that's confusing is azure table storage I would put this in the database categories and it's a nosql database and specifically it's a wide column nosql database as they described it's a nosql store that hosts unstructured data uh independent from any schema so just be aware of those two they're just very poorly worded um then you have Azure data box and also it's upgraded version the Azure data box heavy this is a rugged briefcase computer and storage designed to move terabytes or pedabytes of data so imagine um somebody uh shows up your door with this uh this Tower that's a computer and you plug in your USB or whatever um uh whatever you want and you transfer all your files locally on your on premise Data Center and then they they ship it because it's faster to ship the data on a physical piece a device and it is to send it over the Internet that's what Azure data box is uh and then we have Azure archive storage so this is longterm cold storage for when you need to hold onto files for years but you want the cheapest storage options if you have lots of data and it's not it's not doing anything you definitely want to be uh putting on the cheapest possible uh storage devices cheap meaning um uh doesn't mean that they're not reliable just means that they're not active the discs are not act actively spinning nobody's accessing the data on those hard drives the last one is azure uh Azure data Lake storage and so this is a centralized reposit repository that allows you to store all structured and unstructured data at any scale when you're working with big data from multiple different sources and you need it to be in one place that is the service for you and so that is the Azure storage Services hey this is Andrew Brown from exam Pro and we are looking at Azure storage accounts which is used for containing all your your storage data objects such as blobs files cues tables and diss so storage accounts is one of those Services where it has a bunch of different storage types uh within it so it's a quite the multipurpose uh service and with each different type of storage is going to have different features and their own pricing models let's just quickly break down uh the type of storage we have so we have general purpose uh version one uh version two blob storage block blob storage and file storage and so I just want you to know that when you are using storage accounts uh I'm saying storage type but for whatever reason the UI calls it account kind uh just to be aware of that small little discrepancy there but storage accounts are going to vary based on features and so the common features we'll see across storage will be um supported services so where can I put this storage account and so on the right hand side you can see uh like if you make a general purpose version two what you have access to such as contain containers cues tables or fur those options are going to change based on what you're using all right uh for performance tiers this is how fast uh you'll be able to do reads and writs uh you have standard and premium uh you have different kinds of access tiers so how often do I need to quick access these files and then there's replication how many redundant copies should be made and where and the last thing is deployment models so who should deploy the supported service resource manager class CL and in generally most cases it's going to be resource manager so here I have all the storage Types on the Le hand side and uh we have the feature set and how it's going to vary based on the certain types let's just quickly look through this to see where there are some uh standouts and you might want to actually review this at the end of the section just so uh you're a bit more familiar with all these types of features so it clicks it better but let's just quick go through this so you're going to notice for version one this is the only case where you're going to have a deployment model of classic everything else is going to be the resource manager from a practical standpoint you're not going to really notice because you're just going to be pressing buttons but underneath um that's the only case where it varies for replication you're going to notice that uh version two has the most options with replication and if these don't make sense don't worry we're going to cover all the replication in an upcoming slide uh for uh blob block storage you can see it's very limited same with file storage um so that's there when we're talking about access tiers how quickly you can access files you're going to notice that it's only available for General version 2 and blob storage where we're choosing these different tiers for these ones it doesn't really matter um because well especially with like a file storage because the drive is as fast as it's going to be right uh for performance tiers uh you're going to notice that with version one and version two we have standard and premium when you're using file storage and block blob storage you're always using premium and with blob storage which is again a legacy format there that's going to be using standard uh blob storage comes in three different types and you're going to notice that uh based on what you want to use there'll be some variation there um I don't know where pages I think that they both support page but there are three types in there I wouldn't really worry about it too much uh you're going to notice that file storage only supports file types and then you have version two and this pretty much uh supports everything so you can see general purpose version 2 is a really great um uh storage to choose so we were just talking about storage types now let's talk about the actual storage services that we can actually uh launch or utilize Within These uh storage types under storage accounts and there are five core storages available to us the first is azure blob this is a massively scalable Object Store for text and binary data it also includes uh Big Data analytics through data Lake storage Gen 2 um and so aszure blob is really great because you just don't have to think about the file system you just upload files and they're treated like objects so that's really nice then you have Azure files and this is a file share uh and so the great thing about Azure files is that if you want to have a bunch of virtual machines and have it so like they have um the same file system sharing all the same files that's what you're going to use that for then you have Azure cues to me this really is a database but for whatever reason it's under uh storage accounts and it's a nosql store for schema storage of structured data this is another unusual one uh I don't know why Azure puts it under here but um it's a messaging store for Reliable messaging uh between application components to me that's like an application integration service but Azure categorizes it as storage and the last one is azure dis and this is Block Level storage volumes for Azure VMS and so the idea is that when you want to do the top four the above you're going to be launching storage accounts and for uh discs you're going to be launching diss it's a bit unusual because um one of storage accounts say that you can uh use or store diss uh in I think version or uh general purpose version two I'm not really sure I understand that uh maybe it's talking about like backing them up or something like that but anyway from practical standpoint and for what we need to know is that this is the breakdown here and we do have a full section on Azure diss um so we will get into that so now let's take a look at some of the features that are available on uh account storage the first being performance tiers and generally this is going to be for blob storage and we have two types of performance tiers we have standard and premium so it's a simple as uh just choosing between the two uh and when we're talking about performance especially when we're talking about storage we want to be thinking about iops and that stands for input output operations per second so the higher the iops the faster a drive can read and write so you can uh definitely assume that uh premium is going to have a higher amount of iops and so when we're looking at the premium performance these are going to be stored on solid state drives ssds which we have in the picture there it's optimized for low latency higher throughput and the use cases here is going to be interactive workloads analytics uh AI or ML and data transformation on the other side for standard performance these are running on hard disk drives and you're going to have VAR Performance Based on your access tier and we're going to talk about access tiers uh very shortly uh but the tiers would be hot cool and archive and this is great for backup and Disaster Recovery media content bulk of data processing uh and things like that and so the reason why ssds are uh generally really really good for uh premium performance is because they have no moving Parts within them and the data is distributed Rand uh randomly so if you have to do a read and write the distance between the read and wres are going to be a lot faster uh and that's generally why you're going to see Sol satz with premium performance or things with higher iops and then for um hard uh dis drives it does have moving parts so you see that it has an arm and that arm needs to read and write data sequential sequentially to the disk and so it's very good at writing or reading large amounts of data that is close together that is sequential um but you know the idea is that neither uh format is good or bad it's just the the use case that you need so you don't always always need to go with SSD sometimes you want to save money and hhds are uh or hdds are really good for that so let's take a look at access tiers and there are three types of tiers uh for standard storage we have cool hot and archive and so you're going to have this option between uh cool and hot and archive archive might not show up depending how you configure your storage account uh so for example if you use a particular type of replication that might not be available uh uh uh to use with archives so just be aware if that option doesn't show up you might have to change some of your settings let's quickly walk through the three options so hot is for data that's access frequently and has the highest storage cost and lowest access cost so again it's for data that's as frequently access or in active use or data that's staged for processing an eventual migration to the cool AIS tier then you have the cool tier this is data that's infrequently accessed and stored for at least 30 days lower storage costs higher access cost and the use casee here is for shortterm backup and Disaster Recovery data sets or older media content not viewed frequently anymore but is expected to be available immediately when accessed uh and I think there's actually a third use case which is large data sets that need to be stored costeffectively while more data is being gathered for future processing then we have the archive tier this is for data that's rarely accessed and stored for at least 180 days uh it's the lowest storage cost but it also has the highest access cost uh and so its use case would be longterm backup secondary backup archival data sets original raw data that must be preserved even after it's been processed into the its usable form uh and compliance and archival data that needs to be stored for a long time and is hardly ever accessed so just make use or note of the cool is at the least 30 days and the archive is at at least 180 days I should have highlighted those for you I don't know why I didn't uh and so just some other things you need to know so for account level tiering any blob that doesn't have an explicitly assigned tier infers the tier from the storage account access tier settings so you can set uh blobs at different um storage levels uh blob level tiering uh you can upload a blob to the tier of your choice and change uh change the tiers happen instantly with exception from moving out of archive uh the concept of rehydrating this is when uh you're moving a blob out of archive into another tier it can take several hours uh you have the blob life cycle management so you can create rulebased policies to transition your data to different tiers so after 30 days we can move it to cool storage and here is just the option here you see where it says 30 I think 30 is the minimum days you have to choose um but I could be wrong and so you have the options down below so move to Cool Storage move to Archive storage delete the blob uh and just a few other things here when a blob is uploaded or moved to another tier it's it's charged at the new tier rate immediately upon the tier change so when you're moving to a cooler a cooler tier the operation is build as a right operation to the destination tier and when the right operation per 10,000 and data right per gigabyte uh charges for the destination tier applies uh when moving to a hotter tier the operations is build as a read from the source tier and where the read operation again in the 10K and the data retrieval again in gigabytes charges for the source tier applies and early detection uh charges for any blob moved out of the cool or archive tier May apply as well uh and just lastly here uh when we're talking about cool and archive early detection any blob that is moved into the cool tier so this is only for general purpose version two accounts is subject to a cool early detection period of 30 days and any blob that is moved into the archive tier is subject to an archive early detection of 180 days and this charge is prorated so uh you know access tiers aren't the funnest thing to talk about but there is all the information you need to know so let's take a look at replication and data data redundancy and so when you create a storage account you're going to have to choose a replication type and the reason why is that uh you're going to want to have multiple copies of your data so you're protected from a bunch of things so maybe uh your data Setter has a planned outage so you have to make sure you have a u a backup of your data if you need to access it maybe there is a hardware failure or network or power outage or natural disaster and so that is the whole point of replication and the greater level redundancy the more expensive the cost of replication will be and talking about cost we can break it down into three categories and each uh of these categories have uh two types of uh replication so let's just quickly go through the list and then we'll Deep dive into all of them uh in the upcoming slide so for the first part we have primary region redundancy so we have local redundant storage lrs and Zone redundant storage zrs and locally redundant storage is the most cost effective tier so that's the one I'm usually going for a lot especially when I'm running uh using development accounts that's what I'm always setting and so the reason or and so the use for thisa uh this tier is generally disaster recovery and failovers the secondary region redundancy we have Geo redundant storage GRS and geozone redundant storage gzrs and the reason you'd want to use this tier is for also disaster recovery and failovers but it has a higher level redundancy uh then the last one here is secondary region redundancy with read AIS uh and uh for this case uh we we're going to have is read axis GE redundant storage so that's RS and read AIS GE redundant storage G uh R azrs uh and that's going to generally be for read replicas and if you can't remember all the initialisms don't worry I don't either um but uh you know there you go so what we're going to do is take a closer look at the replication type starting with the primary region redundancy and so for this tier all the data is going to be replicated at least three times in the primary region and we got two options we have lrs and zrs and by the graphic you can tell that they're slightly different and so for for lrs it's using um uh synchronous uh replication for those other pieces of data so you notice in that region there are three uh there's three versions running and so when we say synchronous we mean that if I want to read from any of those copies um they're all going to be 100% up to date so that's what synchronous means um and so here we have a durability of 119 and this is the absolute most cheapest option when choosing storage accounts so if you're running this for developer accounts you do not care about uh replication choose lrs uh for zrs we have copies of data synchrony to three different availability zones in the primary region and this has a durability of 12 9 so it's clearly more durable uh and so why would you want to choose the primary region over the lrs well the idea is that if an availability Zone goes out you still have your data in two other regions where in the case of lrs if the uh availabity availability Zone goes out uh your data is gone okay uh so that is uh the first uh tier so now we're taking a look at secondary region redundancy and the purpose of this is uh if you have your primary region uh suffers a regional disaster so all the data centers are out in your primary region uh you can rely on that secondary region and your secondary region is going to be determined based on your primar pair region so regions are paired with another region uh and so you don't get to pick your twin it's just it is what you get okay um and so secondary regions um aren't available for read and write access except in the event of failover so basically the uh redundant cop the second secondary region is uh is just there on standby but it's not in use and so let's just talk about GRS and G uh gzrs and you'll notice again by the graphic uh they're they look a bit slightly different but you can kind of get the idea based on our previous version or previous uh primary storage tier and so uh data is copied synchronously in within the uh the main primary region and then data is a synchronously copied to another region so asynchronous means that if you try to read from the second region all the data might not be there okay again synchronous means if you read from something there's a guarantee that it's going to be the same and asynchronous means that there's not a guarantee that the data is one one to the original and the durability here is 69 going over to gzrs uh we have data data is copied synchronously across three availability zones in a physical region and then the data is copied asynchronously to another region and um I believe that the data in the secondary region is not necessarily in three other azs at least that's the graphic I made there so hopefully that is true um but yeah there you go so now we're going to take a look at um a redundancy in the secondary region with read AIS and the whole purpose of this region is so that you can actually uh have a read replica in another region uh and so the the concept of that is having your data in sync okay and so down below we have RS and R azrs and it's going to look very similar to the last setup but the key difference is that now um data is synchronous uh synchronous in both the primary and the secondary region because if you're going to be reading from it you want to make sure that your data is one to one uh with your primary regions data so there you go so we keep on mentioning about Azure blob storage let's actually talk about it now so blob storage is an object stored that is optimized for storing massive amounts of unstructured data and unstructured data is data that doesn't adhere to a particular data model or definition such as text or binary data and Azure blobs are composed of the following components so I have this graphic here so the first thing is your storage account and I didn't mention this prior but uh when you create a storage account you actually get a fully qualified domain uh a lot of azure services are like this where you get a fully qualified domain so that you can access it from everywhere and this is a really nice feature but that means that when you're naming your storage account or other Azure Services you have to treat it like a domain name and you have to choose a unique name uh the next thing are containers uh and this is a little bit confusing because when we think of containers we think of computing but Azure um uh account storage has the concept of containers for blobs and it's just uh what they call folders so just be aware of that and then you actually have the actual data being stored and these are the blobs so there are three types of blob storage we have blob blocks and this is what you're going to primarily be using and so this is when you store text and binary data it's made up of blocks of data that can be managed individually and it can store up to 4.7 uh terabytes of data then you have aend blocks um and these are optimized for append operation so imagine that you have logs uh from a virtual machine and you want to write them to blob storage this is going to be a lot more efficient if you're using appen blobs because they just appen to the end of the file and the last is Page blobs and these store random access files up to 8 terabytes in size and these are just for storing virtual hard drives so vhd files uh and serves as discs for aure virtual machine so there's the three types let's take a closer look at a copy and this is a command line utility that you can use to copy blobber files to or from a storage account so the first thing you're going to need is the executable file and there you can see they have it for Windows Linux and mac and then once you download that file uh what you're going to have to do is also uh make sure that you have the the right level of authorization with for the user account you're using with it so you might need to uh for download you'll need storage blob data reader for upload storage blob data contributor and storage blob data owner so just be aware that you need to have those uh rules available to you um to your user account I think that I have access to everything so I don't think I even I set this it it just works but if you're in a larger company and you have more uh permissive least permissive roles you just need to know about that and so you can gain access uh uh via either the Azure active directory or a shared access signature so let's just take a look at that right now so the idea here is that we'll type in a copy login and it's going to ask us whether we want to sign into the web browser so that is uh that should be as your active directory option one and so what you'll do is you'll uh enter your username and password and you'll then have to enter the code displayed there and so now you're ready to use uh the um the CLI and so all you have to do is type in a copy copy and then you have the file and then you give it the endpoint to the storage account uh and the container and the location you want it to go in if you want to download files it's the same command you just reverse the order you say uh this is the the location of the file I want to download it locally all right let's talk about Azure storage Explorer so this is a standalone app that makes it easy to work with Azure storage data on Windows Mac OS and Linux and you can create a variety of things so I just want to show you and here I am running on a Mac but on the left hand side you can see I have my subscriptions my storage accounts my Diss and we have some options where we can like upload files download files open stuff uh clone stuff uh create uh some things and so this is just an easy and convenient way to uh access your file or your account storage and work with them so let's take a look at Azure files this is a fully managed file share in the cloud and the idea behind this is that it's like a centralized server for storage that allows multiple connections or the way I like to think about it it's like having one big shared drive that every that everyone can use or work on at the same time and when I say everyone I mean your virtual machines so here is a visual representation but let's just talk uh quickly about it uh so the idea is that you're going to be using a network protocol uh in order to uh facilitate communication and so the two most common ones is server message block which I believe uh was created by Microsoft and network file system NFS which is very commonly used on Linux files or Unix based file systems and what you're going to be doing is you'll have to establish a connection with your file shares file system uh and what you'll be doing is making it accessible within a specific directory so a folder within your um within your drive okay and this is called mounting so you notice there uh it says Z X and Y so on Windows you'd actually have the option uh when you mount it to say I want to mount it to zed and so anytime you access Zed on your Windows Server uh it's actually going to be using um Azure files okay so let's talk about all the use cases for Azure files normally they have a spiffy graphic here um but because Azure files has so much utility uh all I have room for is a bunch of text uh but we do need to learn it all because it is such an important service so the first use case is that it can serve as a replacement or supplement uh for your on premise file servers network attached storage your Nas devices if you're performing a lift and shift and a lift and shift is when you're moving data in the cloud we'll describe it in a second here uh you can use um uh Azure files for that and so we actually have two different kinds of lifts we can do that Azure defines we have a classic lift and a hybrid lift so in a in a lift and shift this means when you you move workloads without re architecting so the idea is like you used to use on premise you want to use app meure uh but you're trying to keep things as as similar as you can very commonly lift and shifts for uh um from on premise to the cloud will just be taking your virtual machines and then just uh copying and bringing them onto the cloud with nothing else right uh but anyway in the case here for storage we have the classic lift this is where both the application and its data are moved to Azure and then in a hybrid lift this is where the application data is moved from uh moved to Azure files and the application continues to run on PR premise uh so clearly classic lift is bring everything over hybrid lift is like leave the application behind uh another reason you'd want to be using as your files is that it's going to simplify your Cloud deployment so imagine you have shared application settings so you have multiple virtual machines and workstations and they all rely on the same configuration fils you can just go ahead and mount that drive and share that information uh if you're doing do diagnostic tests so let's say you have a bunch of virtual machines and they're logging uh to those machines uh and you want a developer to go in and quickly debug them maybe there's a reason why you don't want to use a third party provider because of compliance or security reasons but the idea is that all these DMS can just log uh to the um uh to the file share and so now you have centralized logs across many machines uh another uh use case is that you need to quickly share development tools so you could put all your tools onto the on to the drive and so they developer would mount it and now they can set up a local environment a lot faster when we're talking about containerization we have a few options here so if you are using containers generally by default containers are stateless and so you need to purist volume somehow and so that's what you're going to do you're going to be using Azure files to do that um and also another question is why would you why would you use Azure files instead of setting up your own file share server because that's definitely an option that you can do and the reason why is that shared access so it already has the standard protocols so you don't have to configure them it's already uh baked into to uh the service it's fully managed uh and this is something that I should I don't think should be underlooked but because it's very difficult to um scale a file server so it they will uh apply patches for it and it will just automatically um scale another thing is that it already has a lot of scripting and tooling built in so if you want to use the Azure API or Powershell you can automate the management and creation of files and things like that and it's also extremely extremely uh resilient so uh you can be sure that it's going to stay remain running so there's a lot of use cases there but definitely worth our time so there you go all right so we heard of azure files but there's also another service called Azure file sync and so the idea behind this service is that it allows you to cash Azure file shares on an on premise Windows server or Cloud virtual machine and so here is the uh visual graphic here where you can see on Prem Azure VMS and your Azure backups and so the idea here is that you can use any protocol that's available on the Windows server to access your data locally including SMB NFS and even ft FTP um and you can have as many caches as you need across the world so I mean like this is kind of like having a one drive right for your file share uh because it's keeping uh or like any kind of cloud storage it's just keeping your files in sync and the nice part is like you can have files in the cloud and uh they're they're referenced on your computer but you only um you only need to access them when you when you need them so you don't have to have all these files locally okay hey this is Andrew Brown and in this video I'm going to show you how to set up blob storage and so if you remember uh through the actual course blob storage is like serverless storage so you don't have to worry about um running out of space or resizing your discs let's go to it um at the top here I want you to type in uh blob storage and you're going to go to storage accounts and this is where you end up creating all of your storage accounts you can see that we have a couple storage devices from the virtual machine and when we created the um serus uh the serverless function there so go ahead and hit add and what we're going to do is choose exam Pro or whatever you called yours when we were at the resource Group step then we're going to have a storage device I'm going to say my blob uh storage oh has to be all lowercase my blob storage and that's already taken so we'll say uh exam blob storage and it can have hyphens there we go and so we're going to launch it in Us East we have the difference between standard and premium I think we'll stick with standard uh we have storage type V2 or V1 or blob storage we want blob storage uh we have some replication options here I'm just going to leave it alone uh we have access here hot or cool we're just going to leave it hot and we can just look at networking here for a moment uh we're going to leave this alone we're just going to look Advance at a moment so nothing exciting there we'll go back to basic hit review plus create we'll have to wait for validation we'll go ahead and now hit create and then it should say deployment underway we're waiting to see the St deployment complete uh you might be getting into the rhythm of how creating Services now it's almost always the same process and we'll just wait here till this is complete okay great so I just waited a minute there and now um that's all set up so let's go ahead and hit go to Resource and then we have a lot of stuff around here um so what we want to do is we want to start uploading files but I think we have to create a container first so go all the way down here left inside and go to containers and we're going to create a new container I'm going to call this start track it's going to be a private container so it's only just for me we'll hit create and now we should be able to click into that container all right so now we uh now that we have that container what we can do is go ahead and upload our first file I just happen to have a file on my desktop here so I'm just going to go select that there and upload um all the options by default are great here we'll just hit upload and there we go so we just uploaded a file into our blob storage brige um yeah so that's all there really is to it um so now that we're all done there we can just go ahead and delete this container so I think we'll just go back to storage accounts not sure if we have to delete the containers first I guess we'll find out and we'll just go here to blob storage we'll go ahead and hit delete and we'll hit yes we'll go to delete and there you go so we'll just go back to Microsoft Azure there and back on our desktop and I'll see you in the next fall along hey this is Andrew Brown from exam Pro and in this section we'll be covering the Azure Cloud adoption framework Cloud adoption framework is a white paper that is a stepbystep process to help organizations plan and migrate their workloads to Azure the image outlines the Microsoft cloud adoption framework for Azure a systematic approach to transitioning to the Azure Cloud the process is categorized into stages Define strategy here the focus is on understanding motivations grasp in the reasons for cloud adoption business outcomes identifying the desired results business justification validating the moves reasons first adoption project kickstarting the cloud Journey plan this stage includes rationalizing digital estate evaluating current digital assets initial organization alignment ensuring everyone is aligned with the migration goals skills Readiness Plan equipping teams with necessary Cloud skills Cloud adoption plan laying out a road map for the cloud transition ready this phase ensures preparedness Azure Readiness guide preparing the environment for Azure First Landing Zone setting up an initial secure Azure environment expanding the blueprint broadening the Azure setup as per requirements best practice validation ensuring adherence to Azure best practices adopt the actionable phase where migrate existing workloads or moved to Azure this entails the first workload migration understanding expanded scenarios validating best practices and making process improvements innovate transform services in the Azure environment using Innovation guides exploring new scenarios validating best practices and furthering process improvements govern this is about oversight and management establish a methodology and Benchmark for governance Implement initial best practices standards for Azure use measure governance maturity how well governance rules are followed manage the deals with ongoing operations ensure business commitments are met during the transition set and assess the operations Baseline determine operations maturity gauge the efficiency of cloud operations now let's take a look at the security roles and responsibilities of the Azure Cloud adoption framework Business and Technology outcomes goals and results expected from security functions security outcomes results an organization aims for including governance prevention and response role types security leadership provides security Direction and strategy security architect designs and implements security blueprints platform app security Engineers ensures security of platforms and applications security operations manages realtime security threats responsibilities security leadership set security strategy security architecture design secure systems security compliance ensures adherence to regulations policy and standards set security policies posture management manages over all security stance phases of security implementation plan identify security needs build Implement strategies including access control and asset protection run manages ongoing operations including prevention and response feedback loop continuous Improvement cycle and security operations in summary the framework offers a structured way to transition to Azure ensuring strategy alignment preparation adoption governance and effective management the next topic we'll be covering is azure migrate Azure migrate offers a streamline service for migration modernization and optimization on Azure it simplifies the premigration processes like discovering assessing and appropriately sizing on premises resources for infrastructure data and applications with an extensible framework Azure migrate easily integrates with thirdparty tools broadening its range of supported scenarios here's what it offers Unified migration platform a centralized portal to initiate execute and monitor your Azure migration Journey diverse tool set Azure migrate provides a suite of tools for both assessment and migration it features tools such as Azure migrate Discovery and assessment in migration and modernization furthermore it seamlessly integrates with other Azure Services tools and thirdparty offerings from independent software vendors comprehensive migration and modernization capabilities in the Azure migrate Hub you can assess migrate and modernize servers databases and web apps assess and migrate on premises servers web apps and SQL Server instances to Azure databases analyze on premises SQL Server instances and databases and migrate them to Azure SQL on a VM Azure SQL managed instance or Azure SQL database web applications evaluate on premises web applications and transition them to the Azure app service or Azure cubern service virtual desktops review your onsite virtual desktop infr structure and move it to Azure virtual desktop data transfer efficiently and affordably transfer vast data volumes to Azure using Azure data box products by using Azure migrate organizations can streamline and simplify their migration process reduce downtime and improve the overall efficiency and cost effectiveness of their Cloud migration the next thing we'll be covering are the integrated Tools in Azure migrate the Azure migrate Hub includes these tools Azure migrate Discovery and assessment discover and assess servers including SQL and web apps discover and assess on premises servers running on VMware hyperv and physical servers in preparation for migration to Azure migration and modernization migrate servers migrate VMware VMS hyperv VMS physical servers other virtualized servers and public Cloud VMS to Azure data migration assistant assess SQL Server databases for migration to Azure SQL database Azure SQL managed instance or Azure vm's running SQL Server data migration assistant assesses SQL servers identifies potential migration problems unsupported features and suggest the best path for database migration Azure database migration service migrate on premises databases to Azure vm's running SQL Server Azure SQL database or SQL managed instances Azure databased migration service is a managed service for seamless migrations to Azure data platforms with minimal downtime nuver assess servers nuu is a SAS platform that enhances business intelligence by accurately depicting it environments within a day web app migration assistant assess on premises web apps and migrate them to Azure Azure app service migration assistant is a standalone tool to assess on premises websites for migration to Azure app service Azure data box migrate offline data use Azure data box products to move large amounts of offline data to Azure so that's an overview of the integrated Tools in Azure mic great the next migration solution we'll be covering is azure datab box the Microsoft Azure datab box Cloud solution lets you send terabytes of data into and out of azure in a quick inexpensive and reliable way each storage device has a maximum usable storage capacity of 80 terabytes and is transported to your data center through a regional carrier it is designed to help customers with slow or limited internet connectivity to move large volumes of data to the cloud let's take a look at some of azzure data Box's use cases data boxes used to import data to Azure for onetime migrations moving large on premises data transitioning offline tapes relocating VMS SQL servers applications and transferring historical data for Azure based analysis initial bulk transfers large scale transfers using data box followed by incremental Network transfers for example moving vast backups with Partners like convolt periodic uploads transferring large volumes of data generated periodically like video content from oil rigs or windmill farms for exporting from Azure data boxes used for Disaster Recovery restoring Azure data on premises quickly security requirements meeting mandates that require data extraction from Azure storage tiers Like Us Secret migration moving data back to on premises or to a different cloud provider here's how Azure data box works customers order a data box from the Azure portal when the data box arriv arrives customers connect it to their Network and configure it using the Azure portal customers copy data to the data box using standard file transfer protocols such as SMB or NFS once the data transfer is complete customers ship the data box back to Azure Azure copies the data from the data box to the customer's Azure storage account so that's an overview of azure datab box its use cases and workflow hey this is Andrew Brown and and before we get into Azure ad I need to point something out it's not called Azure ad anymore it's called Microsoft entra ID Microsoft decided to change the name of azuread why nobody knows but I can tell you no customer likes this particular change um somebody just had a lot of time on their hands over at Microsoft but we do need to address this and I need to point out that I'm not refiling all of the content that I made just to change the name because that's crazy I will will at some point when this when the content is stale but the content's not stale they just change the name on us um but I wanted to just go over that quickly here so uh the names here we have Azure ad is now Microsoft entra ID then the Azure ad tiers is from P1 P2 still P1 P2 the Azure ad external identities is now called Microsoft entra external identities and if we scroll on down we have a logo change so instead of this which by the way I really like the old logo they didn't need to muck with it but anyway we have uh the older ones here and so this is the new one here and so there are some name changes here Azure ad single sign on now Microsoft entra entra uh single sign on we'll go down below here and you can see well more name changes okay so um anyway yeah they renamed it and you know customers are just going to take a while to get used to it I still like calling Azure ad I know a lot of other people like still calling it Azure ad but it's at some point we'll get moved over to it and we're just going to use both names okay now coming over to uh uh the portal I need to show you that if you type in Azure ad it's still going to pull up Microsoft ENT okay now you don't want Azure ad B to C which is interesting they didn't rename that U which is a it is part of azure ad kind of in a sense but it's more for um if you're building applications and you want to um have authentication into it so just understand that there's not consistency all over the place especially even their documentation the marketplace still says Azure ad all over the place um even down below uh you know Azure ad notification so you know there's just going to be that Legacy of azure ad but anyway yeah what you want to do is go go over to Microsoft Entre ID it all looks the same it's just some name changes okay but yeah there you go see you in the next one hey this is Andrew Brown from exam Pro and we are looking at Azure active directory and this is a cloudbased identity and access management service to manage users signins and access to ad related resources so as your active directory is Microsoft's cloudbased identity and access management service which helps you your employees sign in and access resources so that could be external resources like Microsoft Office 365 azer portal SAS applications or internal resources so applications within your internal networking or access to workstations on premise and you can use Azure ad to implement single sign on so you can see that Azure ad is basically like the the the one solution to log into everything and uh we actually use it at exam Pro we use it with Microsoft teams or uh you know for the exam pro pro platform our mid panels tied to it so when we want to log into the mid panel with credentials we have it there uh we use it with AWS to log into there and we use it to log into azure so it has a lot of flexibility and if you're building out applications for Enterprises they're likely using ad and so this is the reason why everybody adopts it or needs to understand it so it's a service I really really do want you to understand and know as your active directory comes in for additions we have the free tier and by the way each uh uh uh tier that goes up has the features before it but uh free has MFA SSO basic security usage reports and user management then you have the Office 365 apps which is uh revolves around if you're using that Suite so you have company branding SLA two sync between on premise and cloud and then the premium tiers which really comes into Enterprise or or or on premise hybrid architecture so hybrid architectures Advanced group access conditional access premium 2 identity protection and identity governance only thing I don't like about Azure ad is that uh you can't really create your uh custom access controls unless you have premium one or premium 2 but that's just how they do it so there you go so let's take a look at the use case for Azure ad and we basically covered it in the introduction but I just want to reiterate it in a different way with a bit of a visual uh so that it really helps uh it sync into your uh brain there so Azure ad can authorize and authenticate to multiple sources so it can authenticate to your on premise ad to your web application allow users to log in with uh ipds uh so identity providers could be like use Facebook or Google login uh you can use it with Office 365 or Azure Microsoft and so just a visual here notice that uh we have Azure ad and using Azure ad connect we can connect to on premise through uh app registrations we're able to uh connect our web application to Azure ad with external identities we can um uh use Facebook or Google uh uh uh uh login and then for cloud applications we can connect to Office 365 or Microsoft azure so active directory existed way before Azure and so let's just do a quick uh uh rundown of the history so we have an idea of what we're looking at so um Microsoft introduced active directory domain services in Windows 2000 to give organizations the ability to manage multiple on premise infrastructure components and systems using a single identity per user so it's been around for 20 years and as your ad takes this approach to the next level by providing organizations with identity as a service so idaa solution for their apps across uh cloud and on premise and both versions are still used today because they just have different utility and so we have active directory which is for on premise and then you have azuread which is just the cloud hosted version and many regards these can also be connected together um but there you go so I want to cover some active directory terminology and the honest truth is that uh for a you're not going to be uh uh too worried about these things but they're going to come up in the documentation you're going to kind of wonder what they are and so I just wanted to uh uh tell you about these upfront even though they're not core to study uh so that it just really rounds out your active directory knowledge because active directory is such a core service to Azure Microsoft products you you should know these things uh so the first thing is all about domain so a domain is an area of network uh organized by a single authentication database an active directory domain is a logical grouping of ad0 objects on a network so just think of it way as you know how you have resource groups to logically group your Azure resources domains are a logical grouping for your ad objects then you have a domain controller a domain controller is a server that authenticates user identities and authorizes their access to resources very common to have multiples of these uh because you want to have redundant uh domain controllers so you can log in or availability or launching domain controller uh nearby so people can log in different places uh so definitely uh very core to active directory then you have the domain computer this is a computer that is registered with a central authentication database uh and a domain computer would be uh an ad object uh so then you have ad objects so this is the basic element of active directory so you have users groups printers computers share folders Etc then you have a group policy object a GP this is a virtual collection of policy settings it controls what an ad object has access to you have your organizational units this is a subdivision within active directory into which you can place users groups computers and other organizational units so it's just another way of um doing logical grouping then you have a directory service and this is this provides a method for storing directory data and making this data available to network users and administrators a directory service runs on a domain controller so there you go that is the rundown of active directory terminology and again hopefully when you see it in the documentation you can refer back to this or you'll have a better understanding of all the components I would have loved to have made a diagram but just couldn't find an example of one and so uh I mean I feel like there could be a really good picture for all this stuff so remember that the domain controller is the server that users are going to be using to authenticate to the directory Service uh and so when you create an active directory Azure sets one up for you but there's some cases where you might want to set one up yourself and the reason why is that you could be like an on like an Enterprise where you already have your own active directory on premise but you've decided that you want to move it over to Azure ad uh because you just want a fully managed active directory and uh you want to tap into the cloud but uh the thing is that some domain Services those are features on your domain controller just might not be available and that's where you're going to need to set up your own domain controller and that's where Azure active director domain Services come into play because these provide managed domain services and so they have manage domain services such as domain joins uh group policies ldaps uh curb B Ross Never Can Say That properly ntlm authentication and so the great thing is here is you can have these domain services but you're not going to have to deploy them manage them patch them they're just going to work so there you go the next topic we'll be covering is single sign on an enter ID single sign on an enter ID is a feature that allows users to authenticate once with enter ID and then access multiple applic ations and services without having to authenticate again when a user signs into enter ID with their credentials enter ID creates a security token that can be used to access other resources within the same organization this token can be used to authenticate the user to other cloudbased or on premises applications that have been integrated with enter ID SSO supports a wide range of applications including cloudbased applications such as Microsoft 3065 Salesforce and Dropbox as well as on premises applications such as SharePoint and sap SSO can also be used with custombuilt applications using industry standard protocols such as saml open ID connect and oth there are several ways you can configure an application for SSO choosing an SSO method depends on how the application is configured for authentication Cloud applications can use open ID connect ooth saml passwordbased or linked for SSO single side on can also be disabled on premises applications can use passwordbased integrated with Windows authentication header based or linked for SSO the on premises choices work when applications are configured for application proxy this flowchart can help you decide which SSO method is best for your situation the main SSO protocol supported in Azure include open ID connect and oath open ID connect is an identity layer built on top of oath 2.0 it allows for authentication and authorization of users in a secure and standardized manner it is saml ml is an xmlbased protocol used for exchanging authentication and authorization data between an identity provider and a service provider it is commonly used for Federated authentication scenarios passwordbased authentication this refers to the traditional username password authentication method where users provide their credentials directly to authenticate linked authentication Azure provides the ability to link multiple accounts from different identity providers to a single user identity this allows users to authenticate using any of their linked accounts integrated Windows authentication it will let users access applications using their Windows domain credentials utilizing their current Windows session for authentication header base authentication in this method the application accepts an authentication token in the form of a header in each request the token is validated by the application to authenticate the user you'll need to be familiar with these SSO protocols as there will be questions asking you which SSO protocol is best suited for a specific application what is multiactor authentication a security control where after you fill in your username email and password you have to use a second device such as a phone to confirm that it's you logging in MFA protects against people who have stolen your password MFA is an option in most Cloud providers and even social media websites such as Facebook so that's an overview of single sign on an enter ID let's talk about external identity so external identities in aad allows people outside your organization to access your apps and resources while letting them sign in uh and use whatever identity they prefer so your partners Distributors suppliers vendors or other guests can bring their own identities such as uh Google or Facebook uh you can share apps with external users that's for B2B stuff uh if you develop apps and tender for Azure ad tenants uh for single tener multitenant you can do that as well uh you can develop white label apps for consumers and customers so this would be like azure ad uh B to C so there you go the next topic we'll be going over is conditional access conditional access provides an extra layer of security before allowing authenticated users to access data or other assets conditional access is implemented via conditional access policies which are a set of rules that specify the conditions under which signin are evaluated and allowed for example you can create a conditional access policy that states if the user account name is a member of a group for users that are assigned The Exchange user password security SharePoint or Global administrator roles require MFA before allowing access this policy enables MFA enforcement based on group membership simplifying the process compared to configuring MFA for individual users when roles change conditional access policy analyzes signals including user and location device application and realtime risk and verifies every access attempt via access controls this requires MFA block access and allow access signals or metadata associated with an identity attempting to gain access user or group membership policies Target specific users and groups giving admins find grain control over access named location information IP location information IP address ranges are used to permit or deny access based on geographical locations device policies can be applied based on the platform or status of a user device application users attempting to access specific applications can trigger different conditional access policies realtime sign in Risk detection signals and Azure ad identity protection detect risky signins if risks emerge policies can prompt actions such as password resets multiactor authentication or block access pending admin intervention Cloud apps or actions can include or exclude Cloud applications or user actions that will be subject to the policy user risk for customer numers with identity protection user risk can be evaluated as part of a conditional access policy user risk represents the probability that a given Identity or account is compromised common decisions Define the access controls that decide what level of access based on Signal information block access most restrictive decision Grant access least restrictive decision still require one or more of the following options require multiactor authentication require device to be marked as compliant require hybrid ENT ID join device require approved Client app and require app protection policy conditional access policies are available and can be utilized with the following licensing plans Microsoft 365 business premium Microsoft 365 E3 and E5 enter ID premium P1 and enter ID premium P2 licenses overall conditional access acts as a robust security measure in Azure ensuring that authenticated users can only Access Data under specific conditions hey this is Andrew Brown from exam Pro and we are starting our journey for the sc900 talking about zero trust methodologies or the zero trust model in particular uh and this is super important because it really lays the foundation of the way we should be thinking about uh all of the security that we're going to be doing with an Azure and actually in any cloud service providers because the zero trust model is really uh what is being adopted today and we'll talk about why that is so the zero trust model operates on the principles of trust no one and verify everything so if you have malicious actors and they're being able to bypass conventional access controls and demonstrates traditional security measures that's no longer sufficient we need to come up with a new way uh to protect ourselves and so that's where uh Azure or Microsoft in particular has come up with their version of a Zer trust model called the Microsoft's zero trust model and this is based on three principles and six pillars so in the three principles we have verify explicity least privileged access assume breach for our six pillars we have um identities endpoints uh an easier way of thinking about end points is just think of them as devices apps data infrastructure and networks and I would say that if you wanted to put an emphasis on anything it's going to be identities which comes down to Azure ad that seems to be um the largest Focus here in this entire course and to really ensuring the zero trust methodology works the zero trust model is not unique to Microsoft gcp has its own uh zero trust model adabs has its own zero trust model but the one here is just going to really work for Azure okay okay so let's review the three principles we said that are in the Microsoft zero trust model the first is verify explicity and so this always authenticates and authorizes based on all the available data points um the next one is least privilege access so limit user access with just in time and just enough access for riskbased adaptive policies and data protection assume breach so minimize blast radius and segment access verify end to end encryption and use analy to gain visibility Drive threat detection improve defenses now you see me highlighting things in red uh and I'm not telling you what they are because we have a whole section on these things so don't worry if you see a bunch of terms and you're just getting overwhelmed uh we're going to cover them multiple times uh and so you just understand that we're going to front load you with a lot of terms you don't know but you will know them by the end of this course okay let's take a look here at defense and depth and so there are seven layers of security that Azure wants you to know it kind of maps up to the share responsibility Model A lot of times we see these things when um uh organizations or or CL Cloud providers are talking about their um security centers like the actual data centers and how they're secured but this is more General uh it doesn't necessarily have to apply to a data center but uh let's go and work our way through inside out okay so the core we have data uh so access to business and customer data encryption uh to protect our data then we have applications so um applications secure and and free of security vulnerabilities then you have compute so access to VMS ports on premise and Cloud the network limit communications between resources using segmentation and access controls the perimeter so uh distribut Den of service protection to filter large scale attacks before they can cause the denial service for users identity and access so control uh controlling access to infrastructure and change uh controls and then you have physical security so limiting access to a data center to only authorized Personnel so the idea is that if you really want to like if you want to get to data you got to go through all these steps here these are all the layers of Defense um and so I just want to give extra emphasis to um this one here identity and access because this one's like the besides the physical security this one's the outermost one so they they will say like your your your perimeter like the modern perimeter is defined based on your like your identity okay we'll see that more here in this course hey this is Andrew Brown from exam Pro and we are taking a look here at Azure Defender so Azure Defender provides Advanced protection for your Azure in on premise workloads and Azure Defender can be found in the Azure security Center So within the security Center there'll be a tab called Azure Defender and that's the way you find it so Azure Defender is composed of coverage security alerts insights and advanced protection so talking about coverage it allows you to see the resource types that are in your subscription and eligible for protection by Azure Defender so here take note that we can see things like virtual machines kubernetes Services container registry app Services SQL ver uh VMS Vault uh uh key vaults SQL servers and storage accounts for security alerts they describe details of the affected resources such as remediation steps and in some cases an option to trigger a logic app in response so here you can kind of see security alerts over time uh then there are insights this is a rolling pane of news suggested reading and high priority alerts uh that give security centers insights into pressing security matters that are relevant to you in your subscription for advanced protection Within Fender are additional security features that is driven by analytics so VM vulnerability assessments just in time VM access adaptive application control container image scanning adaptive Network hardening SQL vulnerability assessment file Integrity monitoring Network map iot security and so down below you can see all these options here whether they're turned on or not let's take a we'll take a look at Network map here in a moment um so scope of azure Defender so there it has a lot of different plans for specific Azure resources so we have Azure Defender for servers app service storage SQL kubernetes container registry key volt resource manager DNS uh open source relational databases and when you turn on as your Defender all plans are activated we saw that under the advanced protection uh tabs then just to kind of highlight Network map because this one's really cool uh it's a network map that provides a graphic graphical view with with security overlays giving you recommendations and insights for hardening your network resources is so uh using the map you can see the network topology of your Azure workloads uh connections between your virtual machines and subnets and the capabilities to drill down from the map into a specific resource uh resources and the recommendations of those resources uh then just the last thing I want to touch on here is hybrid uh Cloud protection so Azure Defender can protect VMS residing in other cloud service providers such as AWS and gcp Via Azure Arc so Azure Arc if you've never heard of it is a control plane that can manage compute resources across cloud service providers on premise and at the stage or at the edge and so for infrastructure you'll notice that it can handle uh VMS uh kubernetes clusters SQL servers and Azure sack hcis hey this is Andrew Brown from exam Pro and we are looking at multiactor authentication so what is MFA so MFA is a security control where after you fill in your username or maybe it's your email and password into a login portal so this login portal could be the Azure portal this could be you logging into Facebook uh the idea is that you have to use a second device such as a phone to confirm that it's you logging in and so why do we use MFA well MFA protects uh against people who have stolen your password because they might have your password but they don't have your phone or whatever device that they're uh you're using for MFA so um MFA is an option most Cloud providers have and just as I said before most social media uh websites have it so Facebook Twitter uh they all have it so just to give you a visual example uh we have a form where I'm entering my email and password then we have a phone which is our MFA in this case and then we get authorization so in the first case that is one factor right so if we didn't have to use a phone or another device that'd be considered one factor and then multiactor or two Factor authentication would be the uh the addition of another uh device to confirm that that it's you and pretty what pretty much what's common is to use your phone and to install an app on your phone and then what that phone will do is it will give you a random number that expires like every I don't know 10 seconds you have to enter that in uh uh with your username and password or as the second step and then you gain access to Azure portal hey this is Andrew Brown from exam Pro and we are looking at Azure security Center so azure security Center is a unified infrastructure Security Management System it strengthens the security posture of your data centers and provides Advanced threat protection across your hybrid workloads in the cloud that sounds really fancy but let's take a look at what that is so that's what it is down below it's a bunch of graphs and it's going to tell you uh if you are compliant with particular policies it'll tell you about your security hygiene all sorts of security stuff so you have a good visual about your security within Azure so there you you go hey this is Andrew Brown from exam Pro and we are looking at Key Vault so Azure key Vault helps you Safeguard cryptographic keys and other Secrets used by Cloud apps and services and So within key Vault it has a bunch of functionality in it so one thing it can do is manage your secrets so store uh uh store and tightly control access to tokens passwords certificates API keys and other secrets it also has Key Management so it it can create and control encryption Keys used to encrypt your data then we have certificate management so easily provision manage and deploy public and private SSL certificates for use with Azure and internal connected resources uh and then it also is a Hardware security module so secrets and keys can be protected either by software or fips 142 or 140 hyphen 2 level two validated HSM and I told you uh that we would be talking about fips again and we are right now so to understand uh um HSM the last thing we're talking about which stands for Hardware security module it's a piece of Hardware designed to store your encryption keys and it literally looks like something like that so um uh Azure would have bought one of these or tons of these and that is what is storing your cryptographic keys and this um piece of Hardware is special because uh when you store keys on it they're stored in memory meaning that they're not ridden to disk if that thing shuts down uh the the keys are gone and nobody can steal your data it's just a security measure and that security measure has to do with fips okay so fips 1405 and 2 is a us and Canadian government standard that specifies the security requirements for cryptographic modules that protect sensitive information so for hsms that are multitenant they're generally going to be 140 hyphen 2 compliant multitenant meaning that um that there's more than one customer that is using that piece uh piece of Hardware but they're virtually isolated from each other uh and then if you have a single tenant HSM they're generally going to be fips 140 hypen 3 compliance so a single customer on a dedicated HSM um it's better to be fips 140 hyphen 3 compliant um but fips 140 hyphen 2 is pretty good for most people so there you go hey this is and Brown from exam Pro and we're taking a look here at dos so this stands for distributed denial of service attack and it's a malicious attempt to disrupt normal traffic by flooding a website with large amounts of fake traffic so the idea is you have an attacker and a victim and the attacker is utilizing remote machines and uh with a with some software that's going to generate out traffic uh directed towards your virtual machine over the cloud and the uh problem here is that what it's going to do is it's going to make uh your website unresponsive or just not work at all for the regular user but by having your compute within the Azure Network you're going to get free dos protection and that's going to mitigate uh these attacks so let's talk about the types of um dos attacks that frequently happen the first is volumetric attacks so these are volume based attacks that flood the network with legitimate looking traffic these will exhaust the available bandwidth and legitimate users cannot access the website these are measured in bits per second so BPS then there are protocol attacks and these are exhausting server Resources with false uh protocol requests that exploit weakness you're looking at UDP and TCP flooding on the layer three and four measured in packages per second so PSP then you have application layer attacks these are attacks that occur at the application layer uh that's B layer 7 so you're looking at HTTP floods SQL injection crosssite scripting also known as xss parameter tamping Solus attacks here you're going to be wanting using a w web application firewall as a means of protection WS are generally uh paired a lot a lot together with DOs Services across the cloud service provider um uh offerings okay so Azure offers two tiers of Dos protection the first is uh the the basic tier this is free it's already turned on uh it's part of the global Network and then you have the standard that starts at about 2,900 uh about 3,000 USD you get metrics alerts reporting dos expert support application and cost protections SLA there's probably a difference in terms of the tier protection I cannot remember off the top of my head but you know one will protect more likely against certain types of attacks like like three and four and the other one will do all all the layers 3 four and seven okay Azure firewall is a managed cloudbased network security service that protects Azure vets resources and it's a fully stateful firewall as a service so you're going to get builtin High availability and unrestricted cloud scalability and what you can do is uh essentially create enforce and log application network connectivity policies across subscription and virtual networks so Azure firewall uses a static public IP address for your vnet resources allowing outside firewalls to identify uh originating from your virtual Network and the service is fully integrated with Azure monitor for logging and analytics so here is a representation of azure firewall and so the idea is that you're going to launch an Azure firewall into its own vnet and then other vnet and you're on premise or other things are going to pass through that Central vnet onto wherever they want to go and the idea is that we're going to be able to uh do things like utilize Microsoft threat intelligence this is going to block known malicious IPS in fqdns that stands for fully qualified domain names and by default the traffic is uh set to deny uh but you can set connectivity policies to filter out traffic in a variety of ways to make sure that you are protected uh there so yeah that's all there is to it so Azure has uh a few different kinds of load balancers and one in particular is the application Gateway and this is for application Level routing and load balancing service so application Gateway operates at the OS I layer 7 uh which is also known as the application layer and the idea here is that when you're working about applications you're working with HTTP requests that's what it is uh and so the idea is that it can look at the contents of the HBU request and do some interesting things so maybe it's looking at the path and saying okay you're uh if you have a path um and it's payments go to the VM that has their payment system and then if it's for admin go to the VM that does that uh maybe it has to do with something with cookies or um maybe you want to apply a WAFF policy to it and so you can look at those HB requests and determine if it is malicious traffic and filter it out uh so uh yeah it's all about the application which has to do with HP requests to configure this thing you need to set up a front ends uh Runing rules and backend pools and there are two configurations for the front end you can either have it with a private IP which makes it now an internal load bouncer or a public IP which makes it either we would call a public or external load bouncer uh and there's a both I've never used that option before um but I mean you just really need to know the public and private for the backends you create create backend pools and a backend pool is just a collection of resources to which your application Gateway sends traffic uh and so a backend pool can contain virtual machines virtual machine scale sets IP addresses domain names app Service uh and I think you can also send it to like on Prem uh so let's just talk about routing rules which connects the front end and the back end together and so uh here is a more complex example gives you a better idea of the service uh uh at full uh and so the idea is that you have your application Gateway it's going to send uh traffic or sorry like a DNS is going to send to application Gateway and then you have these listeners and they they listen for incoming traffic uh and then what it will do it will pass on that to a rule and a rule just really says who should we pass the data to uh and then if you are defining a backend pool then you need to have um an HTP setting that says how do we handle the HTTP requests okay and so now we'll just look at more granular detail about requests or routing rules let's take a closer look at routing rules this is where all the magic happens so a listener listens on a specified Port an IP address for traffic that uses a specified protocol if the listener criteria met the application Gateway will apply the routing Rule and these come in two flavors we got basic which fors all requests for any domain to back in pools and multisite forward requests to different backend pools based on host header and host name so the thing is is that uh you uh you can have multiple listeners and you can have an order of them and the idea is that you really want the basic to be on the uh be in last in priority because if it's a first it's going to capture everything because that's its job it's like a catch allall uh so just make sure that um if you're using multiple listeners you put basic last uh so that's just something you need to know then for those backend Targets this is where we either Define a backend pool or redirection redirection is just an HTP redirection like uh 403 or whatever you have their temporary or permanent very simple uh but for backend pools you have to create HTP settings uh and this tells us a little bit more about how we want to handle HTTP you know cookies cook uh connection draining Port request Etc let's talk about that a little bit more so here are the actual options that we can configure for HTP settings so you have your backend Port uh so generally it's either Port 80 or 443 it just depends on where you're doing your SSL termination uh but generally um if you need end to end encryption it'll be 443 or uh and then if you are doing connect or if you're doing SSL termination at the blow balcer then it's 80 um then you have cookie base Affinity this allows you to keep a user session on the same server so if you need to persist cookies and use them for authentication you'll want to enable that you got connection draining this gracefully uh removes backend pool members during plan service updates so the idea is that you know when there is an update it's not just going to abruptly cut over it's going to wait until a connection disconnects from a server before uh not no longer sending more requests there cuz you don't want a a connection dropping in the middle of an update it's not great for a user then you have request timeouts this is the number of seconds the application Gateway will will wait to receive a response from the backend pool before it Returns the connection timeout error message and last our um oh sorry we still have override backin path these allow you to override the path in the URL so the request for a spe a specific path can be red to another path the idea is imagine you want to send it to um bananas and you want bananas actually internally route to oranges I don't know why you want to do that or maybe to plantains that make a lot more sense so something you can do uh and the last one is the override the host name so application Gateway normally leaves the host name alone uh but you know if you're using multitenant services like apps uh like app service or API management it needs very specific host header set so this is where you can override them and change them for those services so hopefully that really gives you a good picture of application Gateway but I feel that that's all you really need to know so let's take a closer look here at Azure robased access controls because this is something we're definitely going to be using a lot and so Ro based Access Control helps you manage who has access to Azure resources what they can do with those resources and what areas they have have access to and the idea is that you have a user and you want to assign them a role so you're going to use a role assignment and a role assignment is made up of three elements you have the security principle the RO definition and the scope and we're going to look at those three things in a little bit more detail here in a second and there are four fundamental Azure roles which we are going to learn and then Azure rbac also includes over 70 builtin roles which we definitely do not need to go into great detail uh so let's take a look at uh one of those three elements first which is the security principle and this represents the identity requesting access to an Azure resource and when we say identity that's just like a loose term for something and that something could be a user in your Azure active directory a group uh which defines a set of users in your Azure active directory a service principle so a sec security identity used by applications or services to access specified Azure resources or a managed identity an identity in your active uh Azure active directory that is automatically managed by Azure so service principle basically an Azure service and then managed identity is something in your Azure active directory then we'll move on to scope and a scope is just a set of resources that um access that uh assess um the role uh the RO assignment applies to and so scope access controls at the management subcription or Resource Group level so what does that mean and we we have another slide on this I can't remember what section it's in but you have this breakdown of scope where you have management groups subscriptions resource groups or resources so when you're saying I'm setting a scope you're saying what is a scope is it on a management group is it on a particular resource is it a resource Group and that's what we're trying to say there and then last the last element there is a role definition and this is a collection of permission so role definition lists operations that can be performed such as read write and delete and roles can be highle like owner specific or like a virtual machine reader and so Azure has uh builtin roles and we said there were four fundamental builtin roles and here they are it's owner contributor reader and user admin uh administrator so you want to know those four and then across the board you have those three um operations read Grant and then create update delete so you can see the owner can do everything the contributor can uh both read and create stuff they just can't Grant access other people the reader just has readon access and then a user access administrator is granting other users uh privileges but themselves are not creating anything all right hey this is Andrew Brown from exam Pro and let's look at Azure management groups so Azure management groups is a way of managing multile multiple subscriptions and when you hear the word subscriptions in Azure just think accounts um because that's an easier way to think about it into a hierarchial structure so each directory is given a single top level management group called The Root Management Group all subscriptions within a Management Group automatically uh inherit the conditions applied to the management group and so this is a graphical representation so at the top you have your Root Management Group and then you can create management groups underneath so Human Resources it marketing production developers whatever you want and underneath you have those individual subscriptions again just think of them like an account so that is azure management groups hey this is Andrew Brown from exam Pro and we're looking at Azure service health so this is about information about current upcoming issues such as service impacting events planned maintenance and other changes that may affect your availability so going down the list we have Azure status which informs you of uh service outages in Azure Azure service Health a is a personalized view of the health of the Azure service and regions you're using and then Azure resource health is information about the health of the individual Cloud resources such as your VM so if you're ever wondering uh the state of your health you can use Azure service health and if you noticed it was an option under Azure monitor so if you're looking for it that's where you go to find it hey this is Andrew Brown from exam Pro and we're looking at Azure advisor so ad Azure advisor is a personalized Cloud consultant that helps you follow best practices to optimize your Azure deployments the a the advisor uh dashboard displays personalized recommendations for all your subscriptions for the following five categories High availability security performance cost and operational excellence and since we are in the security category that's what we mostly care about is security but it would also be important for the uh pricing section there as well so the first one we're going to look at is actually um the Azure advisor recommendation for cost so here you can see that it's telling you uh where the most impact can occur and leav tell you how much money you can save if you follow its recommendations then you have security and so here it has 21 recommendations if we were to click into it it would tell you what kind of things that you could improve in your system uh to improve your security so there you go that's Azure ad hey this is Andrew Brown from exam Pro and we are looking at Azure database Services starting at the top of list is azure Cosmos DB this is a fully managed no scoll database it's designed for scale with guarantee of 99.999% availability uh Azure loves talking about this database it's their Flagship database because it works at incredible scale and an incredible performance so whenever you're thinking about like uh like super large databases think of azure Cosmos DB next on our list is Azure SQL database and even though it doesn't have it in its name this is for the mssql uh engine so if you're running Microsoft SQL uh you're going to want to use this it's fully managed with autoscale integ uh integral intelligence robust security so has a lot of great features built around this for mssql databases now if you're not using mssql and you're using something like MySQL postgress or Marb they have Azure database so it's fully managed and scalable uh with high availability and security then you have SQL server on VMS uh again it doesn't have it in its name but it's Microsoft SQL uh engine okay anytime uh it says SQL servers just assume that it's the Microsoft flavor of SQL um and and the idea for this one is that if you already have SQL servers running on premise uh within your data center and you want to move them onto Azure uh this is where You' use a lift and shift so it takes those virtual machines and directly moves them onto the cloud you don't don't get all the functionality that you would with Azure SQL database but it's the easiest way to get onto the cloud then you have Azure synapsis analytics previously known as Azure SQL data warehouse It's because they added an analytics component to it um but it's a fully managed data warehouse with integ uh integral uh security at every level of scale at no extra cost then you have as your database migration service so migrate your databases to the cloud with no application code changes so there's that service then you have Azure cache for Reddit so if you need an inmemory cache that is using the open source redus you can use that and last on our list is azure table storage we mentioned this in the storage services but to me this is a database it's not a storage service um even though it's named as such so wide column no s database a noq store that hosts unstructured data independent of any schema so there you go that's the Azure database Services hey this is Andre Brown from exam Pro and we are looking at application integration services on Azure now I didn't have room on the slide for this but just to tell you what application integration is these are services that are designed to help apps or Services talk to each other so it's basically the glue of services the First on our list here is azure notifications Hub this is using publisher subscription technology underneath and this is for sending push notifications to any platform from any back end next we have Azure API apps so this is essentially an API Gateway so you can quickly build and consume apis in the cloud and then th those apis will have API endpoints and you can route them to Azure services or maybe functions or containers uh but it's a way of building an API in the cloud then you have Azure service bus and as the name implies it is a service bus uh so reliable Cloud messaging as a service Maas and simple hybrid integration I know that's not very clear uh that is the language that Microsoft uses to describe it but just what you need to know is that it is a service bus then you have Azure stream analytics so this is serverless realtime analytics remember that world word real time and think of this service uh from the cloud to the edge then you have Azure logic apps so you can schedule automate orchestrate tasks business processes and workflows and it integrates with enterprise sassin Enterprise applications then you have Azure API management this can be confusing because we have another service called Azure API apps I don't know what we would generally call this service uh they say it's a hybrid multicloud management platform for apis across all environments whatever that means but the when I looked at it what it does is you can put this in front of an existing API to add additional functionality so if you have an API you put it in front of it and it and it's a basically proxy to your API and you get all this additional stuff then last on our list is azure Q storage we saw this in our storage service sections and I had said that I don't really consider this a storage service I consider it an application integration Service uh and this is a messaging queue so it's a data store for queuing and reliably delivering messages between applications so there you go that is the application integration services on azure hey this is Andrew Brown from exam Pro and we are looking at developer and mobile tools uh that are commonly used with Azure the first on the list is azure signal R service and this is a realtime messaging service not to be confused uh with Azure notification service this is for easily adding realtime web functionality to Applications so if you ever heard of Pusher it's just like Pusher so um that is the equivalent there the next we have is azure app service so easy to use service for deploying and scaling web applications with net nodejs Java Python and PHP I'm a bit sad I don't see Ruby in there but what are you going to do um so it's for developers who want to focus on building their web apps and not worry about the underlying infrastructure so if you've ever used Heroku think of it like that but for Azure next you have a a visual studio um and visual studio is a code editor it's it it's basically an IDE an integrated development development environment designed for creating powerful scalable applications for Azure you might have heard of Visual Studio code um which is similar but different um but I just wanted to make mention of Visual Studio here then you have uh zamarin I think I'm pronouncing it right and it's a mobile app framework um it's for creating powerful and scalable native mobile apps andet and Azure um and yeah so that is the developer in Mobile tools for Azure hey this is Andrew Brown from exam Pro and we are looking at Azure devops services so Azure devops is really just an umbrella service for a bunch of modern Dev services and we'll jump into them right away first being Azure boards if you've ever used a can band board that is what Azure boards is and if You' ever use GitHub projects it literally is that because Azure uh and GitHub are owned by the same company Microsoft and so they brought over that technology to Azure so deliver value to your users faster using proven agile tools to plan track and discuss work across your teams then you have Azure pipeline so build test and deploy cicd that works with any language platform and Cloud connect to GitHub or any other git provider and deploy continuously so if you need automatic deployments that's what Azure pipelines is for then you have Azure repos and this is exactly like GitHub repos so get unlimited co uh Cloud hosted private G repos and collaborate to build better code with pull request and advanced file management I really mean it's just like GitHub repos because it's just that technology moved over to Azure then you have Azure test plans so test and ship with confidence using manual and exploratory testing tools so this is just a way of setting up test so if you ever use like um what's it called Cypress or any other like uh or any other testing tools it's just built into Azure it'll open up a browser and it'll literally test your app and make sure it works as expected then you have Azure artifact so create host and share packages with your team so this is just package management but specifically for cicd pipelines so cicd pipelines they have to set up these servers and you have to have preinstalled packages that's just going to make it a lot easier for you last is azure Dev test Labs so this is just an easy way to create Dev test environments for your developers and that is the Azure devops services hey this is Andrew Brown from exam Pro and we are looking at the cloud native networking Services now these networking Services aren't super uh super important for the exam I like to go through them generally I would make an architectural diagram for this but it's just a bit too complicated so I thought we'll just go through and list them so first is azure DNS and we do describe this service uh later in uh the course here but this provides an ultra fast DNS responses and ultra high domain availability so if you have a domain name and you just want it to be managed by um Azure you can associate it with Azure DNS then you have Azure virtual network uh we talked about this prior but we'll talk about it again um short for vnet a logical isolated section of your Azure Network for customers to launch Azure resources within then you have Azure load balancer and as the name implies it is a load balancer but this one is at level four transport um so it doesn't really understand requests like what a web application would send it's more lower level um and so that's what that is then you have Azure application Gateway and this is an HTTP load bouncer so it does understand um like requests coming from a web server and what you can do with it is you can actually route um based on HP request to specific services but it also you can apply a web application firewall because it is an application load balcer that's why you can apply that web application firewall which is a separate service then you have network security groups so uh this is a way of protecting your subnets so it's a virtual firewall around your subnets where you can say allow these um allow these ports to be open um and and from who and and and such so there you go that's the cloud native networking services and the reason why they're Cloud native networking is because you wouldn't use these with Enterprise or on uh or uh or in Hybrid models is just what you normally use and most startups would be using all these Cloud uh these networking services so next we have Enterprise or hybrid networking services so this is when you're using a networking that is going to bridge on Prem to the cloud so the first is azure front door so this is a scalable and secure entry point for fast delivery of your Global applications so just making sure you have a secure entry point into Azure from outside then you have Azure express route you want to remember this one definitely for the exam it probably will show up as a question this is a connection between your on premise to Azure cloud and it can be between 50 megabytes per second to 10 gigabytes per second I'm pretty sure it's also secure um but the point is that if you need a super super fast connection uh from your onprem uh data center to Azure you'd use this service express route remember it it's going to be on your exam then you have virtual Wan so a network service that brings many networking security routing uh functionality together to provide a single operations operational interface I know that sounds complicated but a w is just a way of making networking Easier by creating like a hub spoke model uh then you have Azure connection so a VPN connection securely connects to Azure local networks via IPC so that's just a way of uh creating a secure connection uh with Azure then you have virtual Network Gateway a site tosite VPN connection between Azure virtual Network and your local network so this just way of connecting with azzure um so there you go that is um the networking Services hey this is Andrew Brown from exam Pro and we are looking at Azure traffic manager so this service operates at the DNS layer to quickly and efficiently direct incoming DNS requests based on the routing method of your choice so what you do is you'd um choose a routing method so we got performance weighted priority geog Geographic multivalue subnet um and You' be able to reroute your traffic so you could Route traffic to servers geographically uh nearby to reduce latency fail over to uh redundant systems in case primary systems become unhealthy or route to random uh virtual machines to simulate AB testings I think like the best use Cas is failovers um for DN at the DNS level I think that's a great one uh and just a visual example here imagine we had exampro doco and we had a production and a beta server and we only wanted 20% of our users to see the beta server so we could use um I guess we' use weighted there and we'd say 80% on prod 20% there and that's how that would work so there you go that's Azure traffic manager hey this is Andrew Brown from exam Pro and we are looking at iot services on Azure and so before we get into it what is iot so iot stands for internet of things so a network of Internet connected objects usually Hardware able to connect and exchange data so here is a graphical representation of iot devices maybe you recognize some but let's just go through a quick list of things that could be iot devices so you have Smart bulbs so maybe there's light bulbs in your house that are controlled by the internet smart fridges who doesn't want one of those smart light switches narrow band or wideband Hardware this is just a way of connecting to the internet it's just like uh it's kind of like WiFi um then you have security cameras then you have voice command speakers so think of like Alexa then you might have temperature pressure or imunity sensors if you're in the farming industry you can you you can Le leverage iot devices for that maybe uh you have drones uh maybe you have phones that could be an IT device and even buttons so uh AWS had these things called AWS or Dash buttons uh they weren't popular but the idea was you could like press a button and like purchase something um so like if you always had to get like soap for your washer you can have that button right on your washer um but let's actually talk about the iot services here um so the first one here is iot Central so this allows you to connect your iot devices to the cloud then you have iot Hub so this is this enables highly secure and reliable Communications between your iot applications and devices it manages uh then you have iot Edge this is a fully managed service built on the Azure iot Hub it allows you allows data processing an analyst near the iot devices so this is really Edge Computing I really should have highlighted that for you but this is where you are able to offload your compute from the cloud to local Computing Hardware such as iot devices phones or home computers so it's just a way of saving money or utilizing your local network for compute then you have uh Windows 10 iot core services so this is a cloud services subscription that provides the essential Services need to commercialize a device on Windows iot or 10 iot core so basically it's longterm OS support and services to manage device updates and uh assess device health all right so there you go that's your iot services hey this is Andrew Brown from exam Pro and we are looking at Big Data and analytics services on Azure so before we jump into it let's talk about what is Big Data so it is a term used to describe massive volumes of structured and unstructured data that is so large it is difficult to move and process using traditional database and software techniques so we need spe Services just to handle them the First on our list here is azure synapsis analytics formerly known as SQL data warehouse so it is Enterprise data warehousing and big data analytics so it's intended to run SQL queries against large databases to generate things such as reporting um then you have HD Insight HD is short for Hadoop um but anyway it runs open source analytics software such as Hadoop kofka and sparkk I imagine it was called HD Insight because it only supported Hadoop and then they added additional services but that's just what it's called then you have Azure data bricks so uh we have an Apache spark based analytics platform optimized for Microsoft aure cloud service platforms so thirdparty data bricks cloud services support with Azure so data bricks was made by the uh creators of spark and yes of course you can run sparc on hdnight but uh data bricks is its own cloud service provider and as you're partnered up with them so that you can use it within uh the Azure platform then you have data Lake analytics so an OnDemand analytics job service that simplifies big data uh and we saw what data Lakes were when we looked at storage services but we'll describe them here just in a diff a little bit different way a data lake is a storage repository that holds a vast amount of raw data in its native format until it is needed so there you go that is the big data and analytic Services we need to know hey this is angrew Brown from exam Pro and we are looking at artificial intelligence and machine learning services on Azure so a great way of describing that is to always have this graphic here where we have this kind of like onion thing where each is dependent on the other and we'll start with artificial intelligence so what is artificial intelligence or AI this is where machines that perform jobs that mimic human behavior now that doesn't mean that uh the the technology behind it has to be complex it could be FL statements but it could be utilizing machine learning it could be utilizing deep learning but the point is that it mimics human behavior then you have machine learning and this is where machines that get better at a task without explicit programming um so they are smart enough to learn on their own then you have deep learning and so deep learning is where machines that have an artificial neural network inspired by the human brain to solve complex problems so literally it's like the power of the human brain uh maybe not as not as great as is the human brain but quite quite close there and AI could be leveraging ML and uh deep learning and so that's why it is like that so when we want to do uh machine learning on Azure they have a service called Azure machine learning service so this is a service that uh uh that simplifies running AI uh ml related workloads allowing you to build flexible pipelines to automate workflows so you can use Python and R you can run your uh deep learning workloads using Technologies such as tensor flow um and so that's what you'd use now there was a service called Azure machine Learning Studio I think it's still around if you uh if you're still using it and that's the classic version of the service and it does basically what Azure machine learning service does but there's some limitation so does not have uh like a pipeline and other functionalities and if you're wondering if you could easily migrate from classic to the other one um it's not easy to migrate um so basically you definitely always want to start with Azure machine learning services there's no reason you'd want to use Azure machine Learning Studio unless you're using it for legacy reasons hey this is Andrew Brown from exam Pro and we're still looking at Ai and ml Services specifically just AI Services because Azure has a lot of them and I'm just going to quickly go through them and they're pretty selfexplanatory so first one is personalizer it delivers Rich personalized experiences for every user using AI then you have translator it adds realtime multilanguage text translation to your apps websites and tools you have anomaly detector detects anomalies and data to quickly identify and troubleshoot issues Azure bot service intelligent serverless bot service that scales on demand form recog uh uh recognizer automate the extraction of text key value Pairs and tables from your documents you have computer vision easily customized computer vision models for Unique use cases language understanding so build build a natural language understanding into Apps Bots and iot devices we have Q&A maker so create a conversational question and answer bot from your existing content text analytics extract information such as sentiment key phrases named entities and languages from your text content moderator so moderate text and images to provide a safer more positive user experience face so detect and identify people and emotions in images Inc uh uh uh recognizer recognize digital ink content and such as handwriting shapes and document layouts so there you go they have a lot of services and they haven't even made time to make all icons for them that's how many they have hey this is Andrew Brown from exam Pro and we are looking at servess services on Azure so what is serverless this is one the underlying server servers infrastructure and Os is taking care care of by the cloud service provider it will generally be highly available scalable and coste effective so serverless is event driven at scale so uh a seress function can be triggered or trigger other events allowing you to compose complex application and just scale so with serverless technology it's like playing with Lego blocks um then you have abstraction of servers so servers are abstracted away your code is described as functions these functions can be running on different compute instances so if some people like to use python or some people like to use JavaScript you can mix and match um uh there then you have Micro billing so when you have traditional servers you probably build by at least a second some build by the hour but the thing is if you're not using the server for the whole second or hour you are paying for a compute that you are not using so serverless functions will bill you in the microsc so you're saving money because you're not paying for unused computation uh now we'll just quickly walk through uh some of the Serv Services I'm sure there's more than this but this is what I think are worth highlighting so the first is azure functions so run small amounts of code known as seress functions in your favorite languages so you got C Java JavaScript Python and Powershell and if Azure is listening please can you support Ruby because I love using Ruby then you have blob storage so this is seress object storage just upload your files don't think about the underlying file systems resizing uh basically unlimited space and and you can upload pretty darn large files then you have logic apps allows you to build seress workflows composed of azure functions building a I would say this is you building a state machine for seress compute then you have event Bridge which seems a bit similar but it's not it uses Pub sub messaging systems to allow you to react to events and Trigger other Azure cloud services such as Azure functions so there you go that is serverless Services hey this is Andrew Brown from exam Pro and I'm going to show you how to create resource groups and the reason why we're going to make one is because without one we're not going to be able to launch pretty much any resource until we do so because you always have to choose a resource Group when launching uh Azure resources so even though it shows up here on our dashboard um if it doesn't I want you to go up here at the top and type in Resource Group and we'll go ahead and click Resource Group here and then all the way on the left hand side I want you to click on ADD and uh we're just going to have to use our R trial which is the our type of subscription I'm just going to type in exam Pro as the resource Group we're going to stay in Us East uh because that is where the most uh most of the services are available in Azure and that's what I'm going to be using throughout um this course is always using Us East so we'll go down here and hit create plus uh review plus create because there's really nothing else to check and once validation passed this might happen instantaneously for you you might have to wait a few seconds go ahead and hit create and so um now we have created our Resource Group and there is no cost resource groups so there's no worry about uh having this or whether you uh keep it around don't delete it uh you're going to notice that the group hasn't showed up just yet you're going to have to hit refresh and sometimes Azure is a bit slow about uh showing resources when you create them initially and when you delete them so I'm just going to wait a little bit here and I'm just going to keep on refreshing and I'll see you back in a few minutes all right so waited a couple minutes and if you just go ahead up here and hit refresh now we can see that we have our Resource Group so that's all there really is to it nothing super exciting there I'm just going to click Microsoft Azure at the top here to get back to my dashboard and I'll see you in the next follow along okay great so now that we've uh done that let's actually go learn how to do a different kind of compute which is serverless functions so uh if we want to launch our own serverless function uh by the the way if you're not at the screen just click on Microsoft Azure here at the top and we're going to go to our search and we're going to type in functions and so on the left hand side I want you to click on ADD and then uh what we're doing is we need to create a function app so we're going to be on our free trial we're going to choose our Resource Group we created earlier we're going to name this I'm going to just call this um this is the function app name so I'm going just say my my app uh my app is not available these all unique names I'm just call it exam Pro app you might have to change this a few times before you get what you want um and then for publish we're going to use code we don't want to use a Docker container that's too much work and we're going to just choose nodejs which is just JavaScript version 12 sounds great to me we're going to change this to make it sure that it's Us East to make our lives a little bit easier there's nothing wrong with Central it's just I want everything to be consistent so everything is very predictable in these um uh in these follow alongs here we'll go all the way to the top and look at hosting just quickly here we're going to see that we have a storage account okay nothing exciting here it's going to either be Linux or Windows this doesn't really matter to us we can let it be Windows we're going to go back to basic I'm going to go ahead and hit review plus create so we're going to wait for this validation to uh step to complete here so again it could take a second or it could take a minute just depends on the day with Azure so we'll just wait here a little bit there we go it's just finished validating I'm going to go ahead and hit create and now we're waiting for that initial deployment so we're going to see that deployment is on its way and then we're going to have to wait for deployment to be complete so it's in progress It's underway this shouldn't take too long it should say that it's complete here in a moment great so after waiting a few minutes here our deployment is complete we'll go ahead and hit go to resources so now what we need to do is we need to go create ourselves a function so on the left hand side make your way to function and then in here we're going to add ourselves a new function and so we have a lot of presets here for us it's not going to matter what we choose well it does um and I'm going to say let's choose HTTP trigger we're going to leave it with a default name that's fine uh we'll have it uh stay as function for authorization level we'll go ahead and create that function so once that function is has been created here and it's already done let's start adding our code because again the whole point of server list is that you don't have to worry about servers you just add your code and it works and so here's some code it already has for us what I'm going to do is I'm just going to add myself a console log uh console log is just like saying hello world so we're going to say hello world and then I'm going to hit save and now it's just connecting to application insights I don't know if it's actually running yeah it's connected great and now let's go ahead and hit test and so we have a bunch of options here I'm not going to fill in anything I'm just going to hit run and we're going to see what the output is okay great so you know I'm just looking at how this actually works and um I think what we need to do is we need to actually pass a name into the uh to the query string here so what we'll do is we're just going to go ahead and type in query here and we'll put a name and we'll say Andrew um and so that should do it so let's just hit run okay great and so it's saying uh hello Andrew so there you go that's all you have to do to uh create a serverless function um and it doesn't cost us anything to keep this around so we don't necessarily have to delete it uh if you did want to go delete it I guess we can go back here uh we'd have to go back to functions here and I would just click delete and we'll type in yes and we'll hit delete and there you go so that's that's all there is there uh there to it for uh serverless compute I can go back to Microsoft Azure here back to the dashboard and we'll see you in the next fall along hey this is Andrew Brown from exam Pro and we are looking at slas for Azure so SLA stands for service level agreement and this describes azure's commitment for uptime and connectivity that uh that means like if you have a web server Azure is going to say yeah we we guarantee 99.9% of the time it's going to remain uh running throughout the year it's not going to go down so that's kind of the idea behind an SLA um for Azure slas are indiv individualized per Azure service so they don't have broad uh slas you're going to have to investigate each service to figure out um what uh the commitment of azure is for that service um and the way we describe um uh these slas in terms of up time and connectivity is through performance targets now a performance Target is just a representation in the form of a percentage so if somebody were to say to you um you know this service H uh is 99% likely of not failing that's called two NES and then you have the three nines and then you have five NES and then you have nine NES and and the higher this number goes up the more uh reliable uh the the uh better coverage this SLA is going to give you so you want something that has a higher number of nines and it's not always just nines it could be 99.95% um but just understand that when someone says 9 N they're talking about that last value there and it is like one of the highest um one of the highest guarantees that SLA can give I can't remember if there's like 119 there might be 11 9 uh but generally 9 N is the upper limit uh and just to uh uh mention is that for Azure if you are using the free tier or shared tiers you do not get SLA because they just do not provide support for those because you're consuming everything for free so you have to be paying to get the advantage of that SLA garantee so I did say that the slas are uh service specific um and so if you want to actually go investigate all you got to do is type in Azure SLA into Google and you should be able to make your way to this page and what we can do is we can click into uh any of these here so if I go to database and we choose uh Cosmos DB and we just expand our information here we get tons of information about their slas and then our performance targets are down here so we have this for availability this is for read availability um so they have a lot of information uh and as I said it's for basically any service anything you want just click into it and they have all that SLA information so there you go hey this is Andrew Brown from exam Pro and we are looking at service credits for Azure so a service credit is when a custom customer would get a discount on their Azure bill as comp as compensation for an underperforming Azure product or service based on the SLA so those guarantees that Azure gives if they don't meet those guarantees then they owe you money uh and the way they do it is through credits right so credits is just like virtual money uh I actually don't know what a uh like what a service credit is worth but I just know that you know if they if they do not meet those slas they're going to back it and give you your money back in some sense uh so um just an example here if we have Azure virtual machine remember a virtual machine is a server uh if you had uh monthly uptime percentage of 99.9 so if it was under that then you'd get a service credit of 10% if it was under 99 then you get a service credit of 25% and if it was under 95 you get a service credit of 100% so um I guess what that means is maybe it's the cost of what you spend spent uh but anyway I'm not exactly sure um but I would take a guess that if if let's say the up time was under 95% and they're going to give you a service credit of 100% maybe it's 100% of your resources given back to you so if you spend $100 you get that $100 back so there you go hey this is Andrew Brown from exam Pro and we are looking at composite SLA so we had said earlier that um different Services have different slas uh and the problem with that is that when you have different servers different slas it's kind of hard to understand what the actual guarantee is when you use them uh in combination so composite slas is just a way of understanding what the actual uh SLA guarantee underneath is for the performance Target so imagine you have a web application and that web application uses an SQL database so the web app has a guarantee of 99.95% because maybe that's the um the performance Target for the virtual machine and then the SQL database is 99. 99% so what is it is it 95 99.95% or is it 49 we don't know so if we had to calculate that calculate that for the SLA with the web app and SQL database that would uh come out to 99.94% don't ask me on the math that is the example that we are given but just understand that that's what it would come out to be it would come out to 99.94% and so you'd have an overall reduction of the SLA whereas the SQL database would have 9 99.9% so how could we improve our SLA and consider that in our design so we get the uh the SLA that we want and so what you can do is you can add in fallback systems that will improve the overall SLA and if you logically think about it it makes sense why that would work so imagine you have that SQL database and it goes down but if you had a que uh and that Q was saving all the transaction attempts that the web app was trying to write to the database and saved in the queue it wouldn't matter if the database went down because once the database went back up all those transactions would be there and then those transactions would then complete and so by using the Q which has a 99.9% up time uh based on the math down below again don't ask me how the math works but the the the outcome would be an SLA of 99.95% and so that's uh an improvement over 99.94% so that is comp composite slas and there you go hey this is Andrew Brown from exam Pro and we are looking at the TCO calculator for Azure so if you remember uh earlier in the course we talked about the total cost of ownership that's what TCO stands for it's about uh uh showing an enterpr Enterprise that that operates on premise how much money they would save if they moved onto Cloud onto Azure so that's what the TCO calculator does it estimates the cost savings you can realize by migrating your workloads to Azure so what it can do is it can gener generate out a detailed report and Export as a PDF to send to your decision makers now you have to input all the information in but it's going to help you convince your boss uh convince the executive level uh that it's time to move over to the cloud because they'll be saving tons and tons of money and so if you want to use that calculator you just got to go to azure.com pricing calulator and it's going to give you an idea of how much you'll save and now this is only a little bit of what it generates out because it's a it's a very detailed report but in this example it would compare on premise uh to the cost Savings of azure and in this case this person would be saving $130,000 over 5 years and it's going to vary on uh use case but uh yeah that is the TCO calculator so I just wanted to quickly show you the TCO calculator in action if you want to find it yourself just type in um Azure TCO calculator into Google and you should be able to find your way here uh so what I've done here is I've defined my workload so in my workload I've defined some servers so we have some Linux servers we have 10 of them four processes four cores 8 GB of RAM and then here I've added uh four servers that are databases running postest then I added uh some HDD drives so I said three terabytes two terabytes backup Etc and then I defined some Network bandwidth so Going On To The Next Step we're going to adjust our assumptions this helps us to um make it even more accurate the estimat so we can choose our our currency some other additional features we might want to consider where we might save money like using Azure hybrid benefit uh and then down below we can tweak some of our costs that we do know about for our on Prem uh so there's a lot here to tweak it to make it more accurate and then if we go to next we're going to get our um our savings here so just wait a moment and so over a 5year period we should save $666 and18 um and you can drop it down if you want to do one year we'll go to one year so here it says $381 and we have a lot of Graphics here as you can see uh and then down below you should be able to download it so you can just go ahead and download the results there and that is the TCO calculator hey this is Andrew Brown from exam Pro and we are looking at the Azure Marketplace so the Azure Marketplace is a place where there are apps and services made Available to You by thirdparty Publishers to quickly get started on Azure and so the apps available uh the apps and services that can be available could be free they could be free trial they could be pay as you go or they could be bring your own license so just an example of what that looks like if you were logged into uh the Azure portal and you uh searched for Marketplace what you could do here is you could type in a variety of things so like here I'm typing in WordPress and here I have a bunch of Wordpress that are provided by thirdparty uh um Publishers that have been vetted by um Azure and and again they they could call cost money they could have a free trial they could be 100% free but whatever you need it's generally in the marketplace um it's a great place to go check out so just be aware of that so I just wanted to quickly show you the Azure Marketplace uh so you'd have to have an account to actually see it um but we do show you that in this course but anyway I'm just going to go up here to the top and type in Marketplace and uh this will pull up the marketplace and here you can see we have a a huge amount of categories of uh things that we can launch so whatever we need and I think I show before WordPress but we'll type that in there so enter in WordPress and there's all these servers so you can click into there um it might it might have plans associated with it if there's any price but you just go ahead and hit create and then that would start the process of creating a virtual machine and you go through that and you subscribe to whatever the underlying cost would be but you can see there's just tons of stuff in here so and you can sort by Price sort by operating system so there you go hey this is Andrew Brown from exam Pro and we are looking at Azure hybrid benefit so many customers have invested already in Windows servers licenses and they want to repurpose their investment on Azure this happens because Enterprises had been working with Microsoft servers even before Azure existed or they were on premise originally uh and so they wanted to use the software so they purchased the licenses but now they're ready to move on to Azure um and so since they've already got a special deal with um Microsoft because they purchased those licenses they want to keep those deals and bring them to the cloud so that's where the Azure hybrid benefit comes into play also abbreviated as Hub uh sometimes it's called asure hybrid use benefit uh uh in Microsoft documentation but for some reason Azure they just dro the word use but the abbreviation is Hub so this gives customers the uh the right to use these licenses for virtual machines on Azure and so uh such types of virtual machines would be Windows servers or SQL servers uh and I would imagine this would probably happen with a lift and shift which I think we described uh somewhere in this course so Hub can be turned on and off at any time for existing virtual machines and hub can be applied at deployment time for new VMS and I just wrote bring your own license down here just because um we are talking about licensing and I just want to get you more exposure to that term bring your own license B Yol L and so uh that just means that someone's purchased a license and they want to apply it um uh they want to bring it onto Azure uh so there you go that is azure hybrid benefit so I just wanted to quickly show you this page here which is the Azure hybrid benefit page if you were to type into Google Azure hybrid benefit you definitely make your way here what I wanted to show you is that they actually have this nice little calculator down below so if you do have licenses and you're bringing them over and you want to run workloads on Azure you can fill this stuff out and it'll give you an idea of what you might save um so I just wanted to make you aware of that so there you go hey this is Andrew Brown from exam Pro and we are looking at Azure subscription so an Azure subscription I would describe as uh the equivalent of saying my Azure account uh I don't know why they use the term subscription because to me it's just confusing um but I always just try to reinforce that it's just your account and there are four tiers of azb subscriptions the first is the free subscription so when you first sign up this is the the account that you or subscription you're going to have you have to provide a credit card to complete the process you're going to get 200 USD credits free for 30 days and certain Azure products will be free for 12 months now um the whole point of this free subscription is to help you avoid charges and there are some limitations I remember when I was trying to add another user um I couldn't grant them access so there was definitely some uh some limitations here to uh to prevent you from being charged but it's not a a complete sandbox so it is possible to get charg in this account if you start using things outside uh the free tier or if you burn through your credit so just be careful there and then once you are ready to switch or or to upgrade and unlock everything then you can switch to pay as you go subscription also reved to p a YG um some people might call that on demand and so uh for this you still need a credit card required but since you've already entered it into the free subscription stage no problem here uh and you're going to be charged at the end of the month based on on consumed Cloud resources is then you have an Enterprise agreement so if you are an Enterprise you can uh make a deal with Azure and agree to receive a discounted price for licenses and cloud service but I bet you're paying a lot of money um like compared to the uh uh a normal person but the deal is worth it for you so just be aware if you're an Enterprise go talk to Azure they want to make a deal uh and the last is the student subscription so with the student subscription you do not require a credit card you get $100 USD credits for 12 months but it requires a valid student email so there is a bit of a vetting process there so uh you you definitely have to be in school to get that but it is a very nice option to have so there you go that is the Azure subscription Models All right so what I want to do in this video is show you how to keep track of your spend uh within your Azure account so I just created a fresh new account uh this one's exam Pro Andrew Brown outlook.com this is not my primary one so you'll see some videos where I'm I'm doing labs in this one and other ones in my primary account um so just be aware that there might be um some discrepancies uh between the videos but anyway um where we're going to keep track of our spent is within subscriptions so up here in the top if we uh type in subscriptions okay we can see subscriptions that are attached to this uh tenant so understand that there is a relationship between tenants and subscriptions and your uh your directory and subscriptions is how you pay Azure and you can create multiple subscriptions um and there's good reason for that um but the point is is that you start with a default subscription so here I have the Azure subscription one notice there is no current cost because I have yet to launch any services in here but we'll go ahead and click into here and eventually something should appear here yep so it says you uh your remaining $200 of free credits expire in 30 days so the idea is that we have $200 or uh we have 30 days to utilize uh this a free free account here so I'm going to go ahead and just click into this upgrade I'm not upgrading right now I just want to show you what it looks like so in here we have some options you can rename your subscription if you want I think for my even my primary account I just left it as as your subscription one the name doesn't really matter it's just for your reference but uh we do have some options and this is for additional um support if you want to have technical support from Azure when you upgrade you can just stick with basic because of course we don't need to pay an additional fee on top of what we're doing here cuz we have these instructional videos to learn but that's how you're going to go ahead and upgrade later when we do have some spend we'll come back and revisit it here but we do have a lot of options to uh track our spend and usage so there's spend and usage which are uh two different things but you know hopefully that makes things very clear when you want to figure out what your spend is go over to your subscription I'll just go back to the um dashboard here and I'll see you in the next one ciao hey this is Andrew Brown from exam Pro and we are looking at Azure pricing calculator so configure and estimate the cost of azure products you don't have to sign in to use this tool and and what you can do is download Excel spreadsheet and share that uh those costs with your boss so to get there you go to azure.com pricing calculat uh and from there you can you can go in here and you can fill out different things so there's a bunch of different categories the most common one would probably be a virtual machine so you go in there and you say what region it's going to launch in what OS um and all the types of configuration it's going to give you an estimated cost so this one down below is an upfront cost of 0 with a monthly cost of $12. $62 so if you're not sure how to make sense of all the pricing go here and play around and you will get a clear picture of what you're going to spend on Azure so I just wanted to show you the pricing calculator so if you just went to Google and typed in Azure pricing calculator you should be able to make your way to this page and so down below we have a bunch of products we also have example scenarios which is uh uh very nice to see here um so let's say we wanted a cicd pipeline here and we said add to estimate we could get that information for all these components I'm just going to go to single products because it's a bit easier to uh view so let's say we want to determine our cost for storage so let's just go to storage here and uh we will try storage accounts and and then down below uh We've now added storage and so we can enter some information to try to determine our cost so we could do blob file storage table storage I'm going to go with file storage um actually no I'm going to go with blob it's just easier to calculate and so we're going to have the performance tier to premium redundancy lrs um and we're going to be e uh East usest and so if we had a th000 gigabytes I guess it's a terabyte that's $150 uh if we had x amount of right operations x amount of list and create container operations read operations and here we'd have $150 as a monthly cost so here you just have to tweak it based on your uh consumptions um and then generally they'll show you like purchase options but really this just means like go sign up for an Azure account uh but I just wanted to show you what that looks like and just so that you know that you can go explore any cost and try to calculate something before you use it hey this is Andrew Brown from exam Pro and we are looking at Azure cost management and so this service allows you to perform cost analysis so you can visualize the spending of your Azure Cloud resources but you can also create a budget under the service so when you set a budget you're going to you're going to Define a threshold and you're going to be alerted when you're approaching or you've exceeded that threshold uh and so just to give you a visual uh representation there that is for the cost analysis so you can see you get beautiful graphs and you can drill down and filter that stuff out to really understand how you are spending stuff on azure so definitely check it out and there you go let's take a look at the concept of resource tags are just sometimes known as a tag and this is a key and value pair that you can assign to Azure resources so generally when you are launching a new resource you're going to have a uh a tags page and this is where you can uh apply that key and value name and just to give you some examples of tags you might want to apply you might want to have a department and then the type of Department status approved uh a team an environment or the project or the location and so you have a lot of uh tags that you can apply and tags allow you to organize your resources in the following ways you can organize them in your uh via Resource Management so that's where you are specifying uh workloads environments like developer environments uh there's cost management and optimization so cost tracking budgets and alerts operation management so uh that could be uh business commitments to SLA operations so uh you might want to tag services that are considered Mission critical Services uh there's security so that's classification of data and security impact so if there's uh certain databases that have uh very specific compliance rules you might want to do that as well which I think is the next example here um or maybe you're defining uh services that are used for automation or or services are for workload optimization so there's a lot to do with tags uh and even even though I don't use them uh frequently in my follow alongs it's definitely something uh is a good habit to do and uh you should do in your production workloads hey this is Andrew Brown from exam Pro and we're talking about Microsoft pview information protection also known as Microsoft information protection and this is a collection of features within Microsoft pview formerly Microsoft 365 compliance to help you discover classify and protect sensitive information wherever lives or travels so the idea here is that we have this diagram and we have four specific domains that are information protection capabilities around our data and so the first is know your data the second is protect your data the third is prevent data loss and the fourth is govern your data so we'll be going over all these sections in the next few slides taking a look at the four domains here for the Microsoft purview information protection these are features found within Microsoft perview so the first is know your data understand your data landscape and identify important data dat across your hybrid environment so one feature would be sensitive information types this identifies sensitive data by using builtin or custom regular expressions or a function it provides corroborative evidence includes keywords confidence levels and proximity we have built in sensitive labels and you have custom ones as well so then there's trainable classifiers this identifies sensitive data by using examples of the data you're interested and rather than identifying elements in the item so pattern matching and you can use builtin classifiers or train a classifier with your own content so you have trainable classifiers here for data classification this is a graphical identification of items in your organization that have a sensitive label a retention label or have been classified you can also use this information to gain insights into the actions that your users are taking on these items so that's the context Explorer and the activity Explorer the second part is protect your data so apply flexible protection actions that include encryption access restrictions and visual markings so you have sens sensitivity labels Azure information protection unified labeling client double key encryption Office 365 message encryption service encryption with customer key SharePoint information Rights Management Rights Management connector Azure information protection unified labeling scanner Microsoft Defender for cloud apps and Microsoft information protection SDK most of these you won't need to know but we'll definitely cover sensitivity labels then we have prevent data loss so this prevents accidental oversharing of sensitive information here you have Microsoft perview data loss prevention and point data loss prevention Microsoft compliance extension there's a Chrome extension that does compliance for you so it's built in your browser there's the Microsoft purview data loss prevention on premises scanner and protect sensitive information in Microsoft teams chat and channel messages we'll definitely take a closer look at Microsoft perview data loss prevention later next we have Microsoft perview data life cycle management formerly Microsoft information governance which is a collection of features to govern your data for compliance or regulatory so for Microsoft perview data life cycle management it keeps what you need and deletes what you don't we have retention policies and retention labels inactive mailboxes archive mailboxes import service for pstd files and for Microsoft perview records management it manages high value items for business legal or regulatory recordkeeping requirements you have file plan retention labels for individual items retention policies if needed for Baseline retention and disposition review and proof of disposition so those are the four domains in Microsoft purview information protection govern your data is not technically part of it as it's in the data life cycle and record section but I included it anyways so Azure policies are used to enforce organizational standards to assess compliance at scale and policies do not restrict access they only observe for compliance so here on the right hand side in the Azure policy uh port portal uh you're going to see a big list of policies and Azure has a bunch of policies built in for you right away that you can use so if you need to meet nist or fed ramp or Hippa what you can do is just turn those on and it's going to check based on the categories to see if like you're using Cosmo DB it's going to check for that compliance and tell you whether you're being compliant or not and there's a bunch of components that are involved when you're making Azure policies so you have the policy definition file and this is just a Json file that describes business rules to control access to resources you have policy assignment this is the scope of a policy that it can affect assigned to a user a resource Group or Management Group you have policy parameters these are values you can pass into your policy definition so your policies are more flexible for use and you have initiative definitions and these are an initiative definition is a collection of policy definitions that you can assign so it's a group of policies to enforce some kind of compliance like PCI uh DSS compliance and I want you to carefully look at the screenshot on the right hand side where it says defin defition type and you see policy initiative so the ones at the top there is talking about policy definitions and then you have initiative definitions which are just a group of policy definitions all right let's take a look at resource locks so as in a menu might have a case where you want to lock a subcription resource Group or resource to prevent other users from accidentally deleting or modifying critical resources So within the Azure portal you can set the following lock levels you have the cannot delete uh which is basically uh prevents deletion so authorized users can still read and modify resource but they can't delete the resource and the other mode is readon uh so authorized users can read a resource but they can't delete or update the resource uh so those are the two modes uh and that's something uh you might be interested in doing let's take a look at Azure Blueprints and this is a way to enable quick creation of govern subscriptions the keyword there is governed so the idea is like you can go in your account and just create a subscription but when it's a govern subscription that means there's a process uh and certain expectations on how subscription should be set up um so the idea is you're going to compose artifacts based on common or organizationbased patterns into reusable Blueprints and the service is designed to help with environment setup so blueprints are are a declarative way to orchestrate the deployment of various resource templates and artifa artifacts I want to emphasize that word declarative declarative means that everything is spelled out so we exactly know what's going to be created and so artifacts could be Ro assignments policy assignments Azure resource manager templates also known as arm templates resource groups and the Azure blueprint service is backed by the globally distributed Azure cosmod DB blueprint objects are replicated to multiple regions so uh they're definitely well backed up uh and so the main main question people are going to ask well what's the difference between an arm template and an Azure blueprint because an arm template can automate the setup of stuff well basically nearly everything you want to include uh for deployment in an Azure blueprint can technically be accomplished in an arm template but the thing is is that an arm template uh you you are you are storing that either locally or in Source control and there is no active connection or relationship to the arm template whereas a your blueprints the relationship between the blueprint definition what should be deployed and the blueprint assignment uh what was deployed and it can also be uh upgraded SE uh it can also upgrade sever subscriptions at once that are governed by the same blueprint so uh blueprint support improve tracking and auditing of deployments that is the thing so they're very similar to arm templates but generally if you have the option you should always use as your blueprints so there you go hey this is Andrew Brown from exam Pro and we are looking at the the Azure portal so the Azure portal is a webbased unified console that provides an alternative to command line tools you can manage your Azure subscription with the Azure portal build manage monitor everything from simple web apps to complex Cloud deployments so what does that mean it just means the browser that you use to access Azure so anytime you're logged into Azure uh that is the portal that's all you need to know uh there's another thing about Azure portal and that's Azure preview portal so uh the thing is is that sometimes there are new features or new products that Azure has made that are not necessarily generally available but you can get a sneak peek of them uh sooner if you use the Azure preview portal so that could be previews uh betas or other prereleases so the way you would do that is very similar how to you how you'd access uh the regular portal but if you want a test preview of new features you go to the preview. portal. azure.com or if you're looking for stable release and production ready features you just use portal. azure.com so that's all you need to know about the Azure portal so I just wanted to quickly show you what the portal looks like um we are going to show you in this course how to create your own account and work within the portal but I already have one set up here and uh I'm already logged in and if I go to the top here I actually have this portal link now and when I go here we can see what the portal looks like so this is the portal uh you can see that it's telling me about my spend but I'm on the dashboard right now on the left hand side we have this hamburger menu where we can explore the services we can go up here and search them as well so whatever I'm looking for if it's monitor we can go there uh and that's pretty much it this is the portal so it's just the browser when you're logged in and you can interact with any Cloud resources so in this video I want to go take a look at the preview portal so that you are aware where that is uh I know it exists I never ever ever ever ever go to it unless there is some kind of kind of service that I think is going to get released and I want to teach teach you it um and so I believe that we just add something in front of it so I was just looking up on the um uh like the azures or the Microsoft Tech Community and they're suggesting that it's this address here I'm not really reading it I was just looking for the address and so if we log into here we're now in the preview portal and so we have access to all the preview things um that Azure has so one thing that is in preview right now I believe is ma uh fabric uh Microsoft Fabric and this was just announced I believe or was talked about a lot at the recent Microsoft ignite and so this is a preview feature if we want to use it we have to be in the preview account if we're in um Azure here I'm not sure if it'll let us use it so we'll go over here and just see what happens um I have no idea what the costs are here so you can take a look and just not touch it but here it says uh Microsoft fabric delivers an nend experience create a fabric capacity and then we'll go over here and it's also here as well so what I'm going to do is go ahead and see what happens if I try to create this so it says you cannot create a Microsoft capacity using a personal account you use an organization account instead so um right now I'm still in a free tier account and it has to be within organization so they're not going to let me use this which is totally fine um but I just wanted to see what would happen if I clicked it and I don't know if that applies for any other preview features as well uh I wonder if we typed in preview if we could see what's in preview maybe uh there is a preview features service I've actually never tried to look this up so I don't know I'm just curious myself so exploring prerelease features so yeah it looks like we can see all the the preview stuff here um and there's nothing really popping out at me that we could go take a look and take for a spin um but it is nice to know that if you want to see where all the preview features are we can go ahead and look at that um so yeah that is all good here um and that's all I really wanted to point out now if I could find a preview service to launch we definitely test it uh one thing I'm not 100% sure is how we would go ahead and use preview features in the CLI so just give me a second to find out all right so uh I I wasn't looking for this in particular but it's worth taking a look here so here it's suggesting that if we want to um uh access uh preview features in our account we can go under subscriptions and documentation let's go check and find out if that is the case so we'll go over to subscriptions we'll click into our subscription here and on the left hand side I'm scrolling down I'm looking for document is that what they said I think that's what they said right no preview features and here it is and we'll go into here and we'll give it a moment it might be the same listing that we actually looked up just a moment ago okay and it looks like we can just register them so this is very similar to the the um resource providers it looks like if we want to use them we just register register them um but uh yeah I guess that's all there really is to it I was always told that the preview portal was so that you can only use preview features so if we can register them in the main one what's the point anyway in practicality this is not something you really have to worry about but you should know that there are there are things that are preview uh that you have to do some extra work to be able to access them and just make sure you're not using them in your production workloads because uh Azure might roll back on them and uh you know I've heard this from customers before where it's like they've worked with Microsoft and they worked for like six months and implemented stuff and it really seemed like it was going going to go through investing a lot of money uh and it really seemed like Azure was going to uh stick with it and then last minute they said oh we're not doing this anymore so really just be very wary of preview features you can get excited about them but do not put them in your production workloads but there you go hey this is Andrew Brown from exam Pro and we are looking at Azure Cloud shell so Azure Cloud shell is an interactive authenticated browser accessible shell for managing Azure resources and so it provides the flexibility of choosing the shell experience that best suits the way you work so you can either use bash or Powershell we just talked about Powershell and this is the place where you could use it in Azure so uh just to give you a visual uh if you ever want to access the cloud shell it's all the way up in the header there in the portal and so you click that button it opens up Powershell or it will depends on what you choose but it will open it up down below uh and then you'll be able to use um Powershell right away and also the CLI right away which we'll talk about next all right so what I want to do in this video is to introduce you to Cloud shell so um Microsoft Azure has a portal which is what we're looking at uh and and and it basically has uh different Services where we're going to have user interfaces so if we want to say launch a virtual machine they have uh this really nice I don't know why it's asking me to log in again but that's okay but it has this really nice uh UI so that if I want to launch a virtual machine I can just do some click Ops click Ops is when we perform operations through clicking of the Mouse um but in practice a lot of the times especially if you're working in devops uh or other roles is you're going to be Pro programmatically creating resources because it's more efficient or there are cases in Azure where there is no UI and you have to do it programmatically uh this happens especially with newer services or Cloud native Services um so just be aware that you cannot avoid doing some basic scripting programming or uh terminal usage so the nice thing about Azure and most providers have this uh uh now but they have a a way of launching a a a cloud shell a terminal so that you can programmatically enter in commands and so that's what I want to show you in this video so in the top right corner you're going to see um a bunch of little icons here and the first one uh and hover over to make sure that it is what we think it is but it's called Cloud shell and if we go ahead and click that what we're going to get is this um dark box that's appearing below and it's going to say welcome to Azure Cloud shell uh select either bash or pow shell so um there are two uh very popular um scripting languages one is called bash it's also the terminal itself it's not just uh the scripting language but bash is what is used on Linux Powershell is what is used on Windows machines and so this is a a way to Pro programmatically um interact with uh machines and programs and so uh we should take a look at both of them but I'm going to first take a look at bash of course we are in the U Windows uh Microsoft ecosystem so Powershell is going to be what is uh probably preferred when we're using Azure but anyway the first thing it's going to tell you if this is the first time you ever launched it it's going to say you do not have uh uh a storage account so the idea is that um this bash terminal needs to store some data and so it's going to spin up a storage account and we'll talk about that later in the course uh in order to store some of the information here and so this should be uh pretty low cost to no cost so just go ahead and create that resource and uh we'll just give it a moment here and I just want you to know that uh it's still taking time for uh for me to create so uh if it's taking uh quite a few minutes do not stress out uh just keep waiting and we'll see what happens okay I'm just going to pause and and uh speed this up but actually there it is it's done so it took about I don't know 3 minutes for this to uh create that storage account so while this is spinning up a lot of times in Azure they will uh show up in the notifications recent actions and it's not showing up here might be this tab nope but normally when resources are ready or being created they will uh they will show up in the notifications not exactly sure why I'm not seeing it here but I'm going to go ahead and right click and just take a look at notifications and it really keeps asking me to log in not sure why today um but uh yeah if we go here uh we can see uh things that are happening so it started it created subcription that was the start of our account so this I just recently created this account and then it performed a generate not exactly sure what that was for um that's for subscription so totally um not important but I thought we would see and hear things like created a storage account but we don't and that's totally fine so we'll come back over here and going to carefully read here so it says storage file share subscription is not registered to Microsoft cloud shell namespace please follow these instructions to register in future unex unregistered subscriptions will have restricted access to Cloud Shell service so what I'll do is I'll go ahead and copy this link okay and we'll just enter this in here and it's giving us instructions about getting started with Cloud shell so what it's probably asking us to do is enable um uh enable Cloud shell so this is again another thing that we have to understand about Azure is that we need to uh register particular services so this is normally done under your subscription so what we're going to do is we're going to go over back to our subscription so let's just type subscription here and we'll click into our subscription and I want to show you on the left hand side there's a tab called resource providers this is something you're going to be going to a lot and you'll see me go here a lot but the idea is that Azure is made up of a bunch of different services and you have to register or permit uh the access of these services so uh in this tutorial it's saying make sure that Microsoft cloud shell is registered and if I go over here here it is registered so I'm thinking what it did is it did it for us so it said hey it wasn't registered but we did it for you okay and so now we're able to use it but uh you will again see me in many videos at the start of it making sure that we have those resources so um anyway we have this open and uh this is running Linux as far as I'm aware of and so we can run some Linux commands for fun so the first I'm going to type is PWD which is print working directory and then LS to list out the directory and you can see that uh we are getting some input what I want to do is just make this a bit larger it's a bit hard on the eyes and let's see if this Cog here uh will allow us to change the font so yes we can so that's the largest I can make it I apologize if it is uh not better but anyway uh the great thing about these Cloud shells is that they're normally loaded up with um clis uh for um the particular provider so uh Azure has a CLI called Azure CLI and in order to to use it you can type the command AZ so if we type in AZ and hit enter it should uh tell us a bunch of stuff on how to use this and I'm just going to go ahead and hit this maximize button so we have our full screen here and so the idea here is that uh in order to use the Azure CLI we can go ahead and start typing things in so maybe we want to find something about our Azure subscription so I can go down here below and type in AZ subscription or sorry account and we'll go ahead and hit enter and right away it's going to complain because most commands are going to have a command and then a sub command so uh here I'm going to go ahead and type in a account list as it's suggesting uh things that we can do and so what it's doing here is it's returning back to us um uh some information on our account so in this video all I wanted to do was show you how to open up cloudshell um in uh another video we'll talk a little bit more about the uh Azure CLI and and Powershell and and this other stuff but yeah that's about it here when we're done with Cloud shell we can go ahead and hit the X and close that off and we can just forget about it so it's as easy as that and we'll see you in the next one hey this is Andrew Brown from exam Pro and we are looking at Powershell for Azure so first of off what is Powershell so Powershell is a task Automation and configuration management tool um but an easier way to think of it is just it's a command line shell and it's also a scripting language and so when I say a command line shell I mean this thing this blue thing and so if you have a Windows machine you can actually you'd have to I think have Windows Professional uh but you can go ahead and install this and it's uh allows you to automate things using its scripting language as well as in this uh this uh program now uh powershell's available on Azure as well and we'll get to that in a moment let's just talk about the benefits of Powershell over traditional um uh traditional shells so a shell could be something like bash or zsh uh which would accept and return tax but Powers shell is built on top of the net common language runtime so CLR uh and it accepts and returns net objects so those objects make it a lot easier to automate scripting and so Powershell is available on Azure and it's known as Azure Powershell and so we have a set of command uh commandlets for managing Azure resources directly from the Powershell command line and if you're wondering how You' access Powershell you could use um Cloud shell which we'll talk about here uh in a moment okay so I just wanted to quickly show you a Powershell I'm on my Windows computer right now and this is natively installed on my uh my Windows 10 computer and I can type in commands here and so this is just giving me a list of all my um my my the directories in in this current uh folder but I just also want to show you that we have Powershell here in the Azure portal so I'm using the cloud shell up here and I've chosen to use Powershell and you can see it's pretty much the same experience um with some extra things that make it easier to work on cloud so that's it all right so in this video what I want to do is show you Powershell so Powershell is kind of like bash except it's for Windows um and uh it's it looks different so uh that's the easiest way to describe it but let's go ahead and get some experience with it so in the top right corner we're going to go ahead and open Cloud shell I'm expand expand this open so it's nice and big going to make sure my font is nice and big and uh notice right away that it launched and Bash uh it's whatever you had open up last you can restart Cloud Shell by clicking this button I'm just going to drop down and click on par shell and just confirm and it will go ahead and open it up so uh notice that Powershell is nice and blue most Windows computers should have Powershell installed I can't remember remember you have to have Windows Professional or not so I could technically open up Powershell on my computer here not going to do that but notice that this is spun up and so now we can go ahead and use Powershell and Powershell has its own syntax and its own way of working um it's a really powerful tool and very efficient when you are working as a systems administrator um but what we'll do is go ahead and ask chat jpt um the same thing we did before but we'll say let's use Powershell Azure Powershell and one thing I want to say about Azure uh or Powershell is that Powershell the Azure package or Plugin takes forever to install so I really uh am not looking forward to the time I I'll have to show you in a future course um installing that because it just takes forever um I don't know why it's always uh it's like that but it's always taken a very very long time I just want to point that out so here it's very similar it's saying okay the first time you use power shell you're gonna use connect hyphen a account um the thing is is that uh we don't need to do this because we're already logged in because Cloud shell will do that for us automatically if we're installing this locally the process would be a little bit different and so the thing is is that Parell is going to follow uh this very interesting convention in terms of how they uh name their stuff so here it's new new hyphen a a resource Group uh and so there is a way of learning um uh that syntax so I I I'm not I don't use Powershell lot I'm very I'm comfortable using it but um uh I just don't use Powershell because I prefer bash but let's go see if there is a Powershell asure uh uh reference documentation because that's what we would uh expect to look for so we'll go over here and I would imagine it's very similar um so yeah commandlet reference maybe it's under here and I said plugin but yeah they're called commandlets uh that's uh and commandlets contain modules so in here we're looking for the module for let's say the resource Group so we'll go here and look for Resource Group if it's not called that let's go take a look oh AZ Resource Group maybe it's a resources and we'll go ahead and type in Resource Group there it is so the modules aren't always named exactly the same but uh anyway if you remember our bash video very similar we're going to go look up that documentation and uh you know it looks kind of similar um so we can go down here and I'm not noticing shorter Flags but um I'm pretty sure that Powershell autocompletes so we'll find out here but I'm going to type in new yes it does and so that's one of the nice things about Powershell at least working on Azure is that they really want to make everything really easy for you so as soon as I started typing new it already started autocomp completing and so I can go ahead and hit tab here and uh I don't know why I didn't take the whole thing but maybe oops and it's not taking the whole thing but we'll keep typing here group and so I can do hyphen name and so uh we'll call this um probably singles I'll stick with singles I can't remember if it takes doubles but we'll say my uh Powershell RG and then we'll do location and here it's saying Central us so even notice like remember like we typed in Us East lowercase and the syntax was different so understand that things going to be different it's still suggesting more stuff um that is good enough so I'll go ahead and hit enter and so um we get that back there we'll go ahead and go to the next command so it's going to be new a storage account so we'll go back here we could also search it here we'll go ahead and just just look it up and we'll click on that one there and so we have a bunch of commands um but you know we just did this so we're already familiar with the the um the inputs that we're going to go into this so we'll type in new and we're going to say a uh storage account and so we need our Resource Group name and this one is going to be my par shell uh whoops my tab nope it's not letting me tab that sometimes it lets you Tab and other times it doesn't my Powershell RG and we're going to name this again these names have to be very unique it's showing that the name is title case so maybe we can name it whatever we want I thought it had to be lower case because azure's really picky again about naming it's very hard to remember because it's so different so I'm going to just double check here we'll go over to storage accounts and take a look if I click onto this and I click on here uh the name must be unique across all Sorge account names it must be uh 3 to 24 characters long and can contain only lower case letters and numbers and I go over here and look it's showing me title case so I feel like it's lying to me so I'm I'm going to ignore it I don't believe it uh unless it's going to normalize it for me which I don't know um but you know what let's just let's try to put it with title cases because it's not supposed to work but we'll see what happens so I'm going to just say my whoops my uh Resource Group or sorry storage account storage account I'm going to put a bunch of random numbers here and then my initials okay we'll choose the same location as our Resource Group so we'll just say Central us and um we should specify the kind of storage it might default to something so we might not even have to um set one here and what what did we have to do for that it was kind so we'll go here and look up kind yeah here it says blob storage so um it's not saying the flag here directly well we'll just do storage version two it's fine so we'll go here and just say um kind storage version two it's interesting that this doesn't require notice here it's not indicating single quotations I would assume that it would want it everywhere but we'll go ahead and hit enter and see what happens and so it says commandlet new a storage account at pipeline position one failed um and so it's saying that the SQ SQ name was not supplied I'm going to do control C on my keyboard uh to just ignore that but it's trying to prompt me to say hey you got to fill that one in so I thought we could get away without it so I'll go back and hit up on my keyboard and I'm going to type in hyphen I'm going to say SKU name and we'll go with standard lrs because that sounds like the default to be honest and we'll go ahead and hit enter and right away we're getting a problem and it's saying my storage account Etc is not a valid storage account name that's because it lied to us it was Auto autocompleting with title case and I knew I knew for sure that wasn't right so I'm going to hit up on my keyboard and scroll on back and I'm going just take out those uh those capitals here okay oh and it's there's still a mistake we got to get rid of that capital S there and it still doesn't like it it might be suggesting the name is too long um storage count must be three letters and length lowercase only I'll just take some letters out here like that what does it not like oh you know what AB is and caps that's why so go ahead and do that I notice it's talking about up upcoming breaking changes so it's even suggesting things that might change and so uh you know uh B who's the other Andrew that is at exam Pro my cofounder he loves Powershell and he always tells me like how awesome it is that it gives consistent output it's very good at chaining programs together his background was managing Windows machines for years I more on the the Linux side so um you know I'm going to be more biased for that but uh a Powershell is a very very powerful Tool uh we're definitely not even coming close to tapping uh all the power of it right here but notice that it created that storage account we're going to go back over to uh our our portal and we're going to go into storage accounts if you don't see it there you can just search it and well actually I don't want to go here I actually want to go to Resource groups and what we'll do is we'll go ahead and just clean this up because we're totally done with it make sure it's my power shell RG not this one that's your Cloud shell that we're we're using right now we're going to go ahead and delete that Resource Group and I'm going to go ahead and copy it and paste it down below we'll go ahead and delete it we can go back over here close that out and uh yeah just make sure that that does delete but um there you go so now you got some exposure to bash and Powershell so you're on your way of getting some good programming skills there okay ciao hey this is Andrew Brown from exam Pro and we are looking at Azure CLI so what is a CLI well CLI stands for command line interface and it processes commands to a computer program in the form of lines of text and the operating system implements a command line interface in a shell or terminal so we saw a shell earlier which was power shell um but uh we'll look at what uh CLI commands look like here in a moment so the Azure CLI can be installed on Windows Mac and Linux once it's installed you would type A Z followed by other commands to create update delete View and manage your Azure resources and so to really show you what that code looks like down below we have a bash script but this could easily be Powershell and you have the commands AZ and then you would have what it is that you want to do so if you want to create a group you type a group create and you provide the name and the location or let's say you wanted to launch a virtual machine which is a server you do asvm create uh and then provide those other parameters so that is how you would pragmatically create um Azure resources and there's tons and tons of CLI commands uh for Azure so you basically anything you're looking at pretty much can be created with the CLI Pro programmatically all right so in this video what I want to to do is get you more familiar with Azure CLI um it's very very very very very important that you get some scripting programming any kind of exposure to that because most technical roles in Cloud require you to touch some kind of cod like thing um and again Azure uh doesn't always let you do click offs with all their services and sometimes you'll be copy and pasting command so it's important we get comfortable with that as soon as possible so what I'm going to do is go in the top right corner and open up cloudshell we learned how to do this uh previously so watch the cloud shell video if this is the first time you're launching it I'm going to go ahead and increase my font size to large we're going to wait for this terminal to start um I just recently had cloud cloud shell open so it opened up very quickly for you it might take longer and I want to remind people that the Azure CLI is preinstalled on here so if we type in AZ um we should get back some um output just understand that sometimes there are uh Network latencies so you have to be patient but we're getting stuff back so uh what would be really interesting is to go ahead and launch something anything here uh via the CLI and so before we do that I just want to show you how would you find out CLI commands of course we can uh type in a and see them here another way that we can look at Azure commands is by looking it up so we can say Azure CLI reference documentation because that's often what CLI um interfaces will have is they'll have a reference documentation and carefully looking here this is at the learn website which is fine uh we'll try the first one here and what I'm looking for here is the reference so here it says Azure CLI reference and I'll click reference A to Z I personally don't like the way that Azure lays out their docs for the CLI I definitely prefer uh the way Google or um AWS does it but we got what we got and so uh here we have a bunch of different commands and uh they are going to correspond to different things so let's say we want to launch a storage account which is something that is very common for us to do I'm going to type in storage which is one option um and we're going to go here and just expand it and we'll look at summary and so we have some options here um one thing I want to point out with the documentation is the status so the status indicates whether these CLI commands are are going to are are going to be supported or whether they uh might be uh gone in the future so ga stands for uh General availability meaning that Azure has decided that they like this uh feature and they're going to keep it uh preview means that um they're very likely to um they might uh bring this feature to all customers and Azure likes to have a preview and a gener general available um I think it's a subcription or something somewhere there's a way to access it or the portal is different I always forget but my point is is that um if you want to utilize uh preview features in Azure uh you have to go some somewhere else to do that um and so if you try to use a preview feature and it doesn't work it's probably because you're not in the whatever preview setting I'll do another video on that so that's very clear but my point is is that always stick to the ga do not touch preview do not touch experimental because if they do uh get rid of those things and you rely on them you're going to run into trouble but anyway I'm interested in a storage so I'm going to go ahead and click in Click into here and notice that when I clicked into storage we have a big drop down of a bunch of stuff and again notice um where it says where it says type core so it's a core command or some some are extensions stick to core stick to GA and they just have a lot and a lot of CLI commands other providers like adab us and gcp do not have this many commands um for whatever reason Azure likes to take uh uh uh take their services and put them under umbrellas uh and they also uh like to just keep adding stuff uh and so you might have um CLI commands that do exactly the same thing and so there are a lot here and it can be really hard to figure out what to do so I'm going to go over to chat jpt and we're going to get its help to kind of narrow down what it is that we want to do so I'm going to say I want to create a um blob storage account via the Azure CLI and we'll go ahead and narrow down the commands it's going to provide us now chachy BT can go out to the internet and it can bring us back stuff but we have to double triple check it because it's not intelligent uh despite it be calling AI but it can give us an idea of where to get started so the first thing it's telling us to do is to do a login and that's great but um we don't have to do a login because when we use cloud shell we're already logged in if we were to install the CLI on our local computer we would have to uh utilize ay login in order to First gain access so we can skip that step the next thing it's just uh saying is to create an Azure Resource Group which that makes sense uh we always need to create a resource Group so let's go ahead and see what we can do and I want you to follow along and do this in your own account okay so the first thing we want to create is an Azure Resource Group um and so we'll just quickly talk about that here I'm going to open a new tab and every time I do that it wants me to log in totally fine and if we type in the top here uh a resource Group is a way of grouping together resources and um uh it's different like if you come from ads everything is with an account if you're in uh a gcp everything's within a project and in Azure everything is within a resource Group um and so before you create any resources you need to put them in a resource Group and often you need to create a resource Group so that's what we're going to do we're going to go back here and this command is a group create so let's go take a look for that command over here and find it so I'm going to type in resource not very useful so what I'll do is just search for it man manually and we have resource manager that's probably what it is and here we have a group I think that's the command it's asking us to do we'll go ahead here and we have create so we'll go ahead and look at this and we can see it requires some parameters it wants the location so that is something it might want it says that's a required parameter uh there is the name that's a required parameter then we have some op optional parameters and we can do some tags so uh here it's saying Resource Group and location and so the the the location is going to be a Azure region and then the resource Group is going to be the name so let's go ahead and start typing that in here so I'm going to say AZ group um create and then we'll do sorry for the little popup there it gets into the way I'm going to expand this to make our lives a bit easier I'm going to put in here um we had a short flag so we have the long flag or the short flag FL I'm going to use the shorter one CU it's a bit easier to look at we'll do L and we probably can do us East one uh or east us that's what it is I'm thinking about AWS right now that's my problem and um the other thing is the name so that's a hyphen n apparently it can be hyphen G as well which is fine so we do that and I'm just going to say um Azure CLI and this will be blob because we're going to create a a blob storage account and so what what that's going to do is it's going to go ahead and create it and so notice we got Jason back that's usually a good indicator that it is working correctly notice that the provisioning state is succeeded sometimes this will come back and say it's creating um but resource groups create basically instantly let's go over to our Resource Group uh Tab and we'll give it a refresh I want to point out that um sometimes Azure is very very slow in showing you what you've done um azure's uh portal is one of the most robust portals uh compared to every other provider and that is great but the disadvantage to it is it's very hard for Azure to propagate that information uh to us and so sometimes you will do something and you won't see it and you'll think that you did it wrong or you didn't create it but all you got to do is wait around so just have a lot of patience when you create something you don't see it and double triple check with Azure so here we can see we've created our azure CLI blob so that is there I'm going to go back over to our instructions and we're going to look at the next one so here it's saying AZ storage account create and it wants the name and the resource Group and the location the SKU and the kind so what I'm going to do is I'm going to go over here and we're going to look for storage okay and again I just really want to point out that if you're going to use any generative AI don't blindly follow it double check the docs always double check it so here um I think we're doing a storage account create yes we are and in here I'm going to search for create here it is good I notice it has a lot of flags so there is a lot here um I'm not sure exactly what uh we'll need for this but I'm pretty sure we can do these basic ones and it'll be fine so I'm going to go back over here and type in a storage account create and then let's take a look at the flags it wants so it wants the resource Group so let's go over here and take a look at the flag so Resource Group can be a hyphen G I think I like that so we'll do hyphen G and it wants it to be the name of the resource Group we name this Azure CLI blob so we go ahead and paste that on in here good we'll go next back over to here it wants a name we know that we can put hyphen n for name here and notice that um the resource Group allowed us use the hyphen G or hyphen n flag to name the name but in this one hyphen g means the resource Group and hyphen N means the storage account name so uh there might not be consistency in terms of the flags uh uh between like short Flags between different commands so again just always double triple check and don't just assume we'll go here to the right we have our location so we'll go here and do uh well we got to give a name for the storage account now storage accounts I believe have to have um all the everything lowercase no spaces uh Azure is notorious for having crazy naming for every service they're all different and I think it's treated like a URL like a domain name so you have to make it uh unique so I'm going to say here my uh storage account and I'm going to just put uh a number in here so I'm going to put 1 two 3 4 and I'll say AB for my initials you make it very unique so that you don't run into any troubles we're still not hitting enter we'll go back over here um did we do the location so do hyphen L East us and we'll go back over here again and then there's the SKU the kind so I know the storage is going to be version two that sounds good to me so um I'm going to double check and look for the short flag as I prefer those so we'll go hyphen hyen kind here and so we have a few options blob storage um blob block storage file storage Storage storage version two so um I believe that we can do blob storage under storage version two so we can do either or um so I'm going to just stick with storage version two because it's totally fine and uh it's this one doesn't have a short flag so we'll have to do it in full also note that if we're using the CLI we're programmatically doing stuff um it's not going to warn us about free tier stuff uh when you use click offs you get a lot more information through the portal when you're using the CLI it's just programming so it's not going to give us the same amount of stuff so we'll go back over here and we need the SKU so let's go take a look at what it wants for the SKU the storage account SKU so this is going to determine um uh the the replication of resources and so I I just want to go with the standard one now notice it says a default value so sometimes if there's a default value if we if we don't include it it will default to it so I'm hoping that's what's going to happen I'm going to purposely leave out the SKU I'm going to go ahead and hit enter and see what happens okay and so it's creating it or running it and we'll just give a moment and see what happens okay all right so um we got a bunch of uh output back and it looks like it was successful um so what we'll do is we'll double check we'll go to the top here to micros Azure we'll type in storage accounts and we can see that we have our storage account so we've done something Pro programmatically there is for stuff that we can do here we can go ahead and create our blob we can uh list the containers I don't want to do all those things right now I just wanted to get you a little bit experience working with the CLI um and uh being comfortable with that another thing I can uh say is that the CLI will allow you to Output to different formats um it might be hyphen o or something I'm not sure if it will show it here because that's kind of a global flag so yeah it's hyphen o and so let's say we wanted data in a different format we could choose something instead of Json we could get table yaml or something else um so I'm going to go here and just say uh here it says Azure storage list I want I just want to list um all the accounts I'm going to see if uh that works here I'm going just say a I'm just guessing but I think it's a storage account list and will that list out storage accounts for us notice it came back as Json so if we wanted to change the output we can give it a hyphen o flag and uh the the output format probably will vary per um command so don't expect the output format to be for all them this is defaulted Json uh let's take a look at yaml and type that in here there we go so that looks uh a lot more readable and I I really do like yaml uh we could also try table format so let's do that that's a very common one when you're in the terminal okay there you go so kind of looks like a table it's a lot of information so maybe not as nice as we'd like it to be but that's the basics of uh working with Azure CLI it definitely gets a lot more complex than that but again I just wanted to give you confidence with it so now that we are done with that resource I just want to go ahead and delete it uh so I'm just going to go ahead and close out cloudshell and we're going to make our way over to Resource groups so I'll type in resource groups at the top here and on the left hand side I'm going to Azure CLI blob here is that resource that we created I'm going to go ahead and hit delete res Resource Group and um I'm going to go and enter the name I like how they say enter the name but you can go ahead and copy paste it the idea to type it in is to make sure that you are you know what you are deleting but uh they've even uh expediated that so that is deleting and that's all I really wanted to show you um with the um Azure CLI okay so we'll see you in the next one ciao hey this is Andrew Brown from exam Pro and we're looking at Visual Studio code so visual studio code is a free source code editor meaning it edits code made by Microsoft uh for Windows Linux and Mac OS and you can even run it in the cloud and if you're wondering what it looks like this is the editor and this is not to be confused with visual studio so visual studio is an IDE uh and it is also for programming but it has a lot of functionality built in here um is Visual Studio code op Source well they say that it is but I don't know to what degree I don't know if it's 100% open Source but this is the most popular um um text editor or code editor um out right now and Microsoft has or sorry Azure has a service called it's like Visual Studio workspaces that's on Azure and it allows you to spin up these developer environments using this editor right in the cloud I don't think it's going to be on your exam but I just thought it was cool to mention uh and if you don't have a a code editor I strongly recommend downloading this one for your computer because it is great so I just wanted to quick show off visual studio code here um so if you wanted to go download yourself you just type in Visual Studio code into Google and you should end up here and you can download a version it's for Windows uh Mac and Linux so you can download for anything and you can run it in the cloud uh on Azure or even launch your own server on other other on other uh Cloud providers I just have happen to have Visual Studio code open here with an open source project um just to show you what it looks like the the thing that people really like about it is just it looks great and it has really good plugins so if just go to extensions here you can anything you need uh you can add it and enhance uh this editor here if you don't have a code editor I strongly recommend downloading this and I just wanted to make make you uh um familiar with this editor here all right so in this video I want to introduce you to um Visual Studio code and maybe we can go ahead and use a bit of azure SDK um in order to Pro programmatically uh set up a resource so this is very similar to how we use the bash CLI or P Powershell CLI we're going to use a programming language to do it and um again I really believe that you should learn this as soon as possible because uh very quickly you end up having to touch code or scripting or something so get comfortable with it right away here um so what you're going to need to do is install in Visual Studio code I'm not going to show you how to install that it's not that hard to learn uh but you're going to go look for visual studio code you're going to install it this is a free and open open source um um uh coder or code editor and once it's installed we can get go ahead and start utilizing it so you go ahead and install it I already got installed in fact I got a project open here not the project we're going to use but this is actually how I um Stitch uh the big video when I send it over to free Cod Camp so I have a bunch of scripts here but uh what I want to do is once you have it installed we're going to go ahead and create a new um a new folder so on my desktop I'm going to go do that so let me just make some room on my desktop to here okay all right so I got some nice room on my desktop I'm going to make a new folder here and I'm just going to call it um Azure uh because we keep doing things with the storage bucket so we'll just say Azure SDK example uh you can name it title case lowercase however you want to name it but uh just make sure there's no spaces in it I know that's a bit hard to read on my background here but we now have a folder and that's just going to give us a place to start working with so I'm going to go ahead and say file open folder and this is point to my sites directory so I'm going to go back and I'm going to say desktop I think that's we have a desktop there right and um I'm going to say show local so it'll just open it up here make our lives a little bit easier I'll click on desktop here I'm going to choose Azure SDK example select that folder and so it's going to open that folder up and it's opening up my whole desktop which is really not what I wanted to do um that is totally wrong so give me two seconds okay all right so what I'm thinking is what we'll have to do is try this again so we'll say open folder and we'll go to desktop and we'll double click into that folder make sure we're double clicked into it and say select folder there we go so we're in that folder looks like we're not in there but it's here uh in the top and you know again I'm not going to go super heavy into this because this is a completely separate discipline but do your best to follow along so we want to create a new file you can do that by going to file new text file up here you can also click this little icon here to do that so we'll go ahead and say new text file and the question is is what are we going to write our code in because um we're going to need to uh write this in some kind of language and so I'm just trying to decide what we can use here um so that is a another question as well so just give me a second to think about it okay you know instead of thinking about it what I want to do is I'm just going to go ask um go ahead and take a look quickly so we'll say it's probably in the slides but I you know I can't remember all these things off the top of my head AZ dek languages and so we'll go here and we'll take a look and we have uh Android C go C C++ iOS Java JavaScript python no Ruby which I mean I think there's Ruby somewhere but uh they haven't been maintaining it very well so we do have a few options here uh the question is which one do we want to use uh I don't really like any of these languages um but but we're going to have to make a choice and so I guess we could use C so maybe what we'll do is go ahead and use C I almost feel like I'm going to regret using that so um all right so anyway what I want to show you here is um yeah we'll write some C code and actually we're going to cheat we're going to go use chat GPT because I really don't want to uh spend forever uh figuring how to do it so we'll say uh um using the Azure SDK for C uh let's deploy a new Resource Group or a new storage account in a new Resource Group group for blob storage okay so we'll go ahead and hit enter and we'll see what it produces deploy a new aure storage account for blob storage in a new Resource Group using Azure SDK you're going to need the following so it's going to say install the Azure SDK okay and so we'll just give it a moment to uh uh spit out some stuff all right so it's produced some code here and so just taking a look here we have our code example it's explaining everything here but I don't need that and so the idea here is that we first are doing our Imports most programming languages are going to have you require import resources um so obviously resource manager for uh uh uh creating the resource and then we need storage for storage accounts um identity for probably connecting to Azure um that's most likely what it is system is for system stuff so maybe for doing outputs and things like that and right away we can see that we need to create our uh credentials and then from there it's saying initialize the arm client so arm stands for Azure resource manager so I imagine um that has something to do with um maybe resource grips we'll see here in a moment so we create the Azure resource manager client and from there we can get our default subscription that makes sense and from the subscription we'll get our resource groups and we'll create or update a new one here and so here it looks like it's going to create our Resource Group the next we have um our storage management client so it looks like that's how we create our storage account or at least it's the the manager for it anyway and then um create we're creating our storage account okay that makes sense if this looks very verbose and uh tricky it is um it's just the nature of c c is a great language um but I'm just going to say that the way they choose to name things here I even find a bit confusing and I work with every single programming language but we do have some code here and so the idea is that we can go ahead and copy this code and I'm going to go ahead and paste this into Visual Studio code now I do want to point out that um in order to run this program we actually have to have C installed and I'm not even sure if I actually have that installed on this computer um so we're going to have to see what we can do uh there so I'm going to go ahead and just save this file and I'm just going to name it uh we'll just say storage new storage account uh. CS because that is the extension for C and so it says do you want to install the recommended C extension for the language we'll say install so the thing is is that Visual Studio code on the left hand side they have extensions and they have extensions for everything and and I just want to point out that Azure because uh Microsoft created this project and Microsoft owns GitHub and all this stuff is uh Visual Studio code has tons of synergies with um with Azure and in fact you can create resources and other things uh via uh Visual Studio code directly um so here it says the net cor SDK could not be located um and so we can go here and say get the SDK says do you want to uh uh want to code to open the external website yes and it's complaining because it's saying hey you don't have this installed it's not going to work and so we could go ahead and install it here that is one way to do it um but the thing is it really depends on what kind of machine you're on if you're on Windows or Linux or Mac OS it's going to be a different installation process so we can do it this way but there's another option and the other option that um I'm going to recommend is to not do it locally but do it in a cloud developer environment now most um um cloud service providers have have a cloud developer environment uh adab us has Cloud9 gcp has um I forget what it's called project idx and they even have one built into their uh their platform but for whatever reason all we get is cloud shell in Azure so um I like to think of github's code spaces as azure's um Cloud developer environment why it's not directly integrated with Azure I have no idea so what I'm going to do is I'm going to go over to GitHub and you are going to have to create a GitHub account and they're free and you should absolutely have one because every person that's working in Tech should have a GitHub account but I'm going to go ahead and log into mine I'll be back here in just a moment and if you don't have one go ahead and create yourself a GitHub all right so I'm in my GitHub account and what I'm going to do is I'm going to create myself a new repository uh and again don't worry if you don't know all of this just do your best to follow along um because there is a lot to learn here and I'm not trying to overwhelm you but let's go ahead I'm going to choose um the owner is myself so you would have chosen a username when when you signed up mine is Omen King I also have like another account called exam Pro Co I probably should use that one and we're going to just say Azure SDK C example uh so you can name it exactly the same uh these are you uh you can have the same name for repo that someone else has because it's going to be based on the scope of your name here we can make it private or public I'm going to make it public uh that that way everyone's going to see it I'm going to add a read me here as well and we're going to go ahead and create this repository so go ahead and create that and we'll just give it a moment and so now that that's been created um you're not going to have this get pod button here but what I'm going to do is drop this down and it's sorry code I want the code button here and we have this option called code spaces and so here um code spaces does have a free tier or they should have a free tier anyway yeah up here and the free tier is going to let us run for a short period of time I'm not going to get fully into that because because we're not going to be doing enough coding to even worry about that but we're going to go ahead and create ourselves a code space on Main and U honestly I actually prefer git pod for cloud developer environments the reason I'm using codes spaces is because um Visual Studio code has a Marketplace so if we go ahead and type in Visual Studio code Marketplace and um these are extensions for visual studio code it's when we're over here on the Le hand side and we're installing uh fun plugins or extensions they're coming from this Marketplace and even though I prefer git pod um uh this portal this is or this Marketplace is provided by Microsoft and it's a proprietary um Marketplace so all of the official Microsoft Integrations are here and if you use um uh a git pod you're not going to be able to access the full Suite of these you could technically use them if you opened G pod within local Visual Studio code I'm not going to do that here today we're going to just go ahead and use um code spaces and I don't use code spaces that often but we're going to use it here the first thing I want to do is change the theme because I do not want to look at white so I'm going to go all the way down to the bottom to this Cog here and I'm going to go and go to settings or themes here we go and we'll choose color theme and I'm just going to go and say dark Visual Studio code and now my eyes are thanking me for uh putting that effort in and so what I want to do is create a new file so we can upload new files here by dragging them so on our desktop here uh we have this folder uh and this file so I'm going to go ahead and just drag this file on over okay and the thing about uh codes spaces and and G pod is that they should have a lot of these things preinstalled so down below here it says do you want to install the recommended C dev kit yes please I would love to have the dev kit so the devkit helps you manage your code with a Solutions Explorer and test your code sounds great to me and we're going to go Ahad ahead and let that install now I want to point out that the way these Cloud developer environments work is as long as you are running them they are consuming spend so if you are trying to walk away and go get coffee or or food please please please make sure you close the tab um so that it's not just running and you're uh exped uh utilizing uh credits or usage uh again you're on a free tier but let's make sure we don't use up all that free tier so I think that extension is now installed and so uh we should start to be able to use uh C so what we'll do is go back over here and we have our new file and it's right here uh and so we have our program uh and so we should be able to run it so there's a few values we need we need our subscription ID our Resource Group name our storage account our location okay so these are the few things we're going to want to fill out um so I'm going to go here and yeah I'll take West us I don't care it doesn't matter we'll say West us then we have our storage account name remember that has to be very unique so I'm just going to say hello world and I'm going to put a bunch of numbers here and I'm going to say AB remember to keep it lowercase and not any trouble here and here for the resource resource Group we're going to say my um SDK did we already create one no we didn't so we'll say my SDK um RG and then we need our subscription ID so we'll go over here subscription ID is is going to be um if we click uh into our subscriptions it's right here so we'll go ahead and copy that in okay and we'll make our way back over to here I'm going to go ahead and paste that in we'll say allow good we'll click oops try not to add any additional characters by accident be very careful but yeah that looks fine to me and so I filled in all the things that it's say saying that I need I also want to point out that you know chat chapt generated the code but it doesn't always give you good code so just understand that we could run this and it it could possibly not work um and it might even give us things that we don't want so always make sure you can understand what you're reading so here it's saying it's using the standard lrs which is good it's using storage version two so everything that we've been doing up to this point and so now I want to run this code um so uh again I don't run C code a lot but sometimes it uses mono sometimes it uses um different engines for running but let's go take a look at our extensions and we'll click into this one and see if there's any options to start running it so it does say there's like build and run options here um so it says command shift net build so it's possibly we can build it that way and that's probably the way I'd like to build it so we'll go back over here and the thing is that we have haven't logged into anything so it's my assumption that this isn't going to work okay so what I want to do is I want to open up the command pallet so I believe we go down here to the bottom left corner click the Cog if we do if we type in shift uh uh control shift p or click this button it'll open the command pallet and what we're looking for is that net build so I'm going to go ahead and do net build and see if that works I did click it we'll try this again command pallet says we used itm build and I'm not seeing anything happening so did it build I'm not sure so give me just a moment all right so I went over and I asked chbt how can I just run it and it was not helpful whatsoever um it did tell us that we should probably have the a uh the um the Azure seall which I absolutely agree so this is a great opportunity for us to uh do that here in fact it might already pre be preinstalled so if we just type in a is it here here no it does not um so maybe that's something we can go do so I'm going to go type in AZ CLI install and we'll go get the instructions for that and so I want to install this for Linux uh we're probably on Ubuntu or Debian so I'm going to go ahead and click that and I'm going to go to install Azure C and so we want this on line command I've done this a lot of time so I know it's this on line command so we'll go ahead and copy that and we'll go back over to GitHub code spaces and we'll go and paste that in there now I realize this font might be a little bit small so while that is installing I'm going to go ahead and increase our font so I'll go ahead and increase our font size I'm going to type in here terminal and if you're finding that I'm going really fast the great thing is you can always go back and watch the video I really do encourage you to try to work through the steps and try to figure out what it is that I'm doing um of course I could go a little bit slower but um the best learning is the part where you're going to go out and uh you know try to really figure out what it is that I'm doing here so that's why I'm not being super super detailed and slow with these steps um but uh you know just be aware of that so I'm just typing terminal font in here because I want to increase that font uh there it is and so we'll just say 24 there we go that might be a little bit too big we'll go down to 20 okay and so the CLI is now installed so if we type in AZ um it will now should prompt us and so now the next thing we want to do is log in so I'm going to type in a login and so what it did is it as soon as we typed in a login it popped up a new browser window and it's allowing us to connect to Microsoft Azure so I click this and uh even though it's not going anywhere that's totally okay we'll go back over here and it didn't work because we are not doing this on our local machine we are doing this within a browser so it says if uh if no browser is available or if the web browser fails to open use the device code below so that's what we're going to do we're going to actually do that instead so I'm going to type in a login hyphen hyphen user device code and hit enter okay and we're going to give it a moment here oh and then it says copy this link so we're going to go to this link here and hit enter and it's going to say enter this code in and so we'll go ahead and enter in this code that it want okay and we'll hit next and then we'll pick our account are you trying to log with the a CLI we absolutely are we'll go back over to here and it now gives us output so we are now logged into Azure CLI so now that the CLI is installed um we're in better shape the thing is when you when you log into the Azure CLI uh I don't know where it is but it's probably dumping some kind of file locally onto this computer onto this workspace if I type in LS so somewhere in here I'm not sure where but somewhere in the in the in this on the storage of this workspace in the cloud it's storing the credentials to log Us in so we don't have to pass in or we shouldn't have to pass in credentials here and when we run the script it's going to rely on that local file uh and it should pull it from these default credentials so the next thing I want to do is run this program and it really did not tell us how to do that so um I I should know how because I do have uh my own uh unpublished thing so I'm going to go take a look and find those instructions all right so I just want to point out that you will not have access to this this is totally private but I'm just trying to find notes from it and I also wanted to prove that I actually do know all the programming languages for cloud um but knowing them uh when I say I know them I mean like I've used them all and I've made really good notes notes and so when I need to go back to them I can always look it up and so somewhere here we should have some notes for c um and because there's a few different ways we can run it there's a program called CSC uh which is the turbo compiler um so it depends on what we want to utilize and we could use nougat we could have also created a net uh a net project that's probably what we should have done um so that's probably what we should have done is we probably should have created ourselves a net project because now that I'm um remembering that's pretty much the way that we do it okay and that's going to make our life a lot easier for um utilizing so what I'm going to do is just take a look here and let's go back to chat 2bt and say okay um how do we use the Azure SDK C and we create a new new uh uhet project okay and so this should be more in line in terms of what we want so chbt is only good if you know what to ask it and it's talking about new get packages and that definitely is what it looks like I was doing there before so we'll give it a moment here to help us uh see what's going on I just want those commands and it's asking us to do this through it's it's like telling us to click through it's going it's saying like go up here and click click click like create a new create a new project in there but that's not how I want to do it I want to do it via the um the CLI and all I wanted to know was whoops I just closed that tab we actually needed that tab um but what I wanted to know was what framework version does it want us to use because uh that could matter right and that's what we're not getting answer uh for so that's kind of important so we'll go back over to here and it's really really really not helping us this is not helpful whatsoever so I'm just going to tell it to stop talking because I know it's not helping us and I'm just going to pull up that example again just give me a moment all right so I have this pulled up again I'm going to go back to my hello world again you're not going to have this you don't need you don't need to have direct access to this it's fine um and then down below there is the thing here so we need to create ourselves a new project we're going to say new console because it's a console project and we're going to want to have that package so I'm just going to drag this off screen so I can see it and type it and then you'll just have to follow along here with me okay just give me just two seconds to be able to see this here and okay so what we're going to do is go back over to here to our project and and I'm going to try this I'm going to typee in new new console hyphen n we're going to say package. net and we're going to try framework net 60 even if there was a newer version of the framework we could use for um C or for net sometimes it doesn't like the latest version um so even over here like I made a note I said even though net is the latest neither fake nor bogus works with net 7.0 so you know I'm going to try to use seven and hopefully we're not going to run into issues here and so it did a bunch of stuff and it created this uh package over here so it actually created a folder called package. net if we open it up uh we have a program and so that's where our code has to go so I'm going to go ahead and I know this is a bit of a mess but I'm going to go ahead and copy this over here and I'm going to take all of this and we're going to cut this we're go over this program and we're we're going to paste it into here okay and I'll delete the old file here so now we have um our package um and we're in better shape so now we can probably use those net commands to um build the package that's probably what we can do here so that's what I would like to do next so I have to find that command um I believe it's just net run so if we type in netrun um that should probably do it couldn't find a project so we probably have to CD into that folder so I'll type in CD package h.net enter I'm going to type in LS to see what's in there I'm going to type in cleer clear to clear the screen I'm going to go ahead and type Inn net run okay and hopefully it's just going to run it now we didn't install any uh packages for it so I don't know how we would know how to run these it looks like it's actually complaining it's saying uh the typer namespace name Azure could not be found it's talking about this up here so normally you like in programming languages you have to install packages or libraries and every single um programming language usually has its own package manager and I believe the one for um uh net or the the one for that one is called nougat n u g so there's probably a way to add it and it's actually probably part of because I'm looking at my commands here it's probably part of um uh n get's probably part of net so I'm going to type in net add package and we need to figure out what the package name is so I'm going just type in Azure because it's probably what it is I'm going to go ahead and hit enter and uh we have to actually spell net correctly for that to work again this is just me totally guessing but I believe that's what's going to work and so I go up here and it looks like it's trying to install something it's talking about this falling back here and then it says error there is no version available for the package Azure so clearly there is uh something more to this here so Azure uh net net n get package and version so that's what I'm looking for here okay and I'm just trying to find what it is so I don't want to search the internet for that so I want to install the Azure SDK via net add package what is the command okay once you know programming chat GPT is great because you can narrow it down and help you save you some time but uh it's not always easy and sometimes it just doesn't tell you what you want to hear right away so here it's saying Azure identity ah so it looks like we might have to do do them individually okay so let's go give that a try so I'm going to go back over to uh GitHub uh in our uh code spaces now let's try each of these individually so I'm hitting up I'm going to try identity let's see what happens it looks like it's installing that looks great okay great so we're on to something here excellent so we have that one the next one is resource manager so I'll paste that in there enter just going to bring this over here um I don't know if we need to specify these individually underneath so I'm just going to copy them anyway and just try them again I don't know if we have to do that often when you have the top level one you get them all but since um doing the top level Azure didn't work I don't trust it and it did install something so that looked like that work we'll do storage next and these two are not going to do because these are builin packages we don't have to go ahead and and install them very common for most languages so I'm going to type in clear here to clear on our screen I'm going to hit up up up till we get back to that run command and we're going to try that it says there is no given argument that corresponds to the required parameter data um here and it's saying on line 2490 so we're going to go down below and look at line 24 and it's complaining about this uh saying something about data so there's no argument given that responds to the required parameter data um and so probably what might be happening here is either well chbt gave us bad code um or it it's looking at Old documentation so it's not that it purposely gave us bad code it just doesn't know what's the latest there's a few other errors here like the name s s KU name does not exist in the current context the kind does not exist in the current context and it's talking about this here so it really looks like like um uh chat GPT lied to us okay so what we can do is we can just go ahead and paste this into chat GPT and see if it can try to solve it for us if not we can go look it up ourselves uh we get the following errors uh from the code provided earlier in this chat okay so uh for me like I would just go out to the documentation go fix it um I'm trying to show you how you would do this if you don't have the same kind of uh programming skills so here it's saying the errors you encountered uh project suggest some issues great so it's just going to tell us what problems it had and then we're going to wait just a moment and find out um what it is make sure you have the latest packages well we just installed them so it should be correct okay well the other thing is that we don't know what versions uh Azure was using right so that might be the issue check the latest SDK documentation of course yeah so it's okay the suggest code changes like come on you're not really helping me today chat GPT all right and we'll take a look here at what it's saying so looking at this very carefully here it says uh new Resource Group data and then this one here is saying create or async um so it looks slightly different the meth seems to require additional parameter okay it's guessing it doesn't know what it's doing so I really don't trust it anymore and so what we'll do is we'll go back here and take a look at our code the first one it failed on was line 24 all right and so that's on here so um we need to go figure this out I'm going to close some of these tabs because we're kind of getting overwhelmed with tabs here and I'm going to go type in Azure SDK C and we'll go over here uh we'll say storage accounts and we're going to try to figure out if we can find some official docs okay ay login we've already done this here they're using visual studio we're not using uh well this this is how it did it over here which is fine um but we just want to see the reference docs so yeah it's talking about blob storage which is great let's go to reference Azure uh it might be whoops might be over here Azure SDK C reference documentation we'll go over here and uh we're looking for these commands so the first one it it mucked up on was line 24 so I believe this one's okay uh this is for creating a resource Group so we'll go here and I'm going to search Resource Group it's probably under resource manager and here showing that we add that net package so that makes sense uh and so we have this line here so if we go back to our code do we have that line Looks like we do right new arm client uh yeah it's down here sorry new arm client so that's right now we get a resource Group collection so this one's slightly different it's trying to do it all in one go um which that's one way of coding it but I actually kind of prefer what they're doing here in the documentation so I'm going to go ahead and grab this so that we assign this to its own variable okay in coding you can do things uh multiple ways so um you know one code can do the exact same thing as something else and be written differently that can make it very confusing if you don't know what you're looking at we'll go ahead and paste this one NE uh in next so uh looks like I cut off a bit of that code there okay and so this is now the equivalent of this so that gets that part and then this is equivalent of that so that's that part and so next thing we need to do is this create or async thing so we'll go to the next step and we already have uh these two things set up here as strings this one set as an Azure location so we probably want to do what they're doing here too okay so I'm going to go up here and paste this in like this instead okay um and it really depends on what the thing wants so maybe in the older the older SDK it took a string but now it looks like it takes a a variable data type of azure location that's why I'm doing it this way okay um so that looks fine there the next part is Resource Group data so that looks very similar to our code here notice it's not doing a create or async update I mean that's probably one way of doing it and probably a good way of doing it make sure you put these semicolons on the end here um C really likes these some languages don't care but this one does and then it does it on the next step here so it does it here okay so it's still doing that operation so we'll paste that in and I don't know where it went didn't really go where I wanted to go we'll go ahead and paste that in again here and we'll hit enter so we have arm operation uh I don't feel like explaining this part but that's a feature of C coding uh that's like an interface I believe I think that's what they call it uh so we have to create or upsate uh update or async so wait until it's done uh pass in the resource Group name which is that up here and then pass in the resource Group data which is that here and so that takes care of this part okay so we've now replaced that part of the code um so that is fine that will create our Resource Group and the next thing we need to do is uh create our storage um our storage account so to be honest because this code is so hard to do I'm going to make it a lot easier for us I'm just going to wipe this part out because if we can just make a resource Group we've kind of done enough coding here but uh the whole process we went through in terms of of uh you know think like starting with a single file and having to work with it and then we moved over to the CD uh um uh uh GitHub codes spaces which is a cloud developer environment and we had to do some research this is totally normal this is what happens every single day so I'm really happy that we're able to uh show that even if it is a bit of a mess but let's go ahead and see if uh this works um the only thing I'm wondering is about this Azure location how does it know about it because we didn't have any requirement up here but we'll go ahead and we'll try to do a net run and it might complain about that so it says the variable subscription ID is assigned but the value is never used and that's true we don't actually ever use it anywhere here the variable storage name account is a sign but it's the value is never used and that's because we don't ever use these so um these are warnings they're not errors but I'm going to go ahead and delete this one up because we're actually not using a storage account name whoops that's a bit too much and we should probably be using a description ID but for the time being I'm going to comment that out I'm going to assume that it can in uh infer the subcription ID based on when we did the a login so we're going to go and go up here a bit it says the typ or name space aure location could not be found that's what I I thought was going to happen so how would we include that in here um we already have resource manager in here right we do and we're not really using these other ones anymore um so this one I'm not 100% sure so we'll say add meure location and we'll go back over to here because they this is the thing with tutorials they don't always tell you all of the code they're sometimes missing something so uh we need to go figure that out and I'm going to go back over here okay so it cannot be found and we'll use y old Google for this because it should be smart enough to do this it's not telling us here so we'll go and try chat GPT um Azure location is not found uh in my C script what package do I need to install you'd think it'd be the resource manager one okay just tell me what I want to install it does say Azure resource manager so coming back over to here in our code we have it right here and we have those two there yep I mean I'm pretty sure we installed that uh we probably still need the re resources one in so I'm going to bring that back whoops whoops whoops whoops and we'll go ahead and paste that in we'll save that um yeah this one's quite the pickle so the Azure location does not exist in the current context all right let me go figure it out okay all right so I'm not getting uh much luck here but I imagine that this might be actually olving as a string anyway I'm not 100% sure so I'm going to try to cheat and I'm going to try to make this a string and see what happens and it might work uh but I'm not 100% sure so I'm going to go ahead and just say um West us here I'm going to go ahead and comment this out and fingers crossed that it's going to let us do this programming is not always easy um it's it's sometimes like this it says the client does not exist in the current context the the name name wait until does not exist in the current context wow it's really making our lives super super super difficult here it's talking about these um and it's frustrating because it's not showing us in this code example all the stuff so I'm going to go ahead and copy this code example go back to chat gbt um uh uh can you show me what using statements are missing and should be added to get this code to work very very often programs do not show you all those things and it drives me crazy okay and it could be because like if you're using visual uh Visual Studio which is not the same thing as Visual Studio code it would automatically add those in there okay and so here it's saying okay we got to use models for Azure location okay but what about but what about um some of these other ones like well anyway we're going to go ahead and copy them in and we're going to give it a go we didn't have this Azure core here before that probably is very important so we go ahead and paste that in and I'm going to go ahead and uh do net uh package uh was it new or install or it's add Azure core we'll do that you know what if we did python or JavaScript we have been done this a long time ago but uh you know I would say that getting exposure to net is probably the best one for uh working with Azure here so I don't know if it installed all of these we'll try resources we probably don't need the model part um oh sorry this is resource manager resources and then we'll go here and we'll say resources models again I don't know if we really need all the the end ones like that I don't think so yeah there's no versions of it so probably the upper ones is the one that works we'll go ahead and try this again please please please work or give me something different the name client does not exist in the current context it is killing me this program client where is that here let's search for that let's look for that client right here client um well maybe it's because this one's named a bit differently so we're coming back to code this one's called client right here this one is called arm client so we'll just change this to client okay we'll save that we'll hit up please please work getting closer we have this wait until say what about wait until see if you figures that one out and it's telling me to use Azure in the top level that seems kind of uh exhaustive the wait until uh you need to include Azure name space okay I mean that doesn't sound right to me but we'll go ahead and do that anyway unless it's saying I mean if it's in that Nam space couldn't we just say Azure do wait until I'm not really sure but we'll go ahead people that are probably like better C programmers than me are just cringing watching me do this but go ahead and uh try to see if that we get that working here we still say run please tell me you don't need me to install Azure as well because we have it installed like 10 different ways please please please work it's taking time so I mean that's probably a good indication oh it worked okay so I'm going to go back over here I cannot believe that worked that was so so hard and we never even created a storage count within it so this one's called my SDK RG um so what we're going to do why does it say St oh because the comment still says that down here below so just say uh Resource Group here and for all our hard work let's save that so um we never have to look for that again it's trying to include a lot of junk in here um so I don't want all this stuff otherwise uh that'd be too much to commit so I'm going to go here and make a new dog ignore file dog ignore okay and I want to ignore this uh Bin directory and this probably object directory no just the bin directory um make sure we spell this right dotg ignore and in here I'm going to say ignore I want to ignore package. net bin uh and then Aster so it should ignore that entire directory if we go over here and we give this a refresh um just going to make sure this is all correct here there's a lot of stuff in here I don't think we should be seeing that much so I'm going to go here and do package. net for SL obj debug so I have a feeling that it's trying to include all this stuff in here there we go and so this looks a lot more manageable to me I don't know if we want to include uh this file this looks like it should be in there yeah I'm going to go ahead and just go ahead and add this code and we'll just say uh create an measure Resource Group using the C SDK if you were able to get to the end here pat yourself on the back because that was uh quite the challenge uh if you're just able to watch the video that's totally fine as well um here it should commit and push so I've pushed my code I'm going to go back over to um uh the the repo in GitHub so go back over here and I'm going to search for Azure what do we call this this is under exam Pro for you you it might be different I called it this here Azure SDK C I just want to make sure my code is here it is if you are trying to do this and you do not want to struggle you can go find my code and copy it here but again I'm just trying to get you exposure to this stuff I'm not trying to make you super programmers so it's not a big deal um we're done with this uh code space so I do want to shut it down and I don't do this very often with code spaces let's see if there's like shut down close stop okay here it is code spaces stop current codes space I'm going to go ahead and click that and notice that is now stopping the workspace that's going to stop the spend all right we're going to go over here this Resource Group has nothing in it but we'll go ahead and delete it and there there we go we'll go ahead and delete that and we're finally done I really didn't think it would take this long but anyway we are done and I'll see you in the next one okay all right so let's take a quick introduction into Azure resource manager which is short for arm and is a service that allows you to manage Azure resources and one thing that really confused me about the service when I first sted using Azure was that you couldn't just type in Azure resource manager and the reason why is because it's actually a collection of services and it makes up what we call this management layer it allows you to do things like create update delete resources apply management features such as access controls locks and tags uh writing infrastructure is code via Json templates and there are very specific features we're going to be looking at that make up the armed layer and it's going to be the following so you're going to be looking at subscriptions management groups resource groups uh resource providers resource locks Azure blueprints resource tags access control so also known as IM uh Ro base access controls Azure policies and arm templates uh I don't know why I don't have tenant in there I might have in another slide but it's not a big deal but that is what we're going to be covering in this Azure resource manager section all right so let's take a quick look at uh the use case for Azure resource manager and this is just to kind of give you a visualization because it is an abstract thing so I just want you to have some kind of picture in your head of what it is so here I have this diagram and just to follow up with this Tech think of azure resource manager as a gatekeeper and all requests flow through arm and it decides whether that request can be performed on a resource and so on the left hand side you have your requests and so requests could be happening in the Azure portal VI the Azure Powershell the CLI or the rest client which would be the API uh and then you can see the two middle ones would use the Azure SDK and in the middle that's the gatekeeper and so we have Azure resource manager that's going to work in conjunction with your authentication uh authentication which generally should be active directory I don't think you can swap that out for anything else and then on the right hand side you're going to get access to resources so this could be virtual machines containers databases and storage there's obviously a lot of uh Azure services but that is what it is in a snapshot so let's understand understand the concept of scoping because this is going to help you understand all the components that are involved with azurus resource manager so what is a scope a scope is a boundary of control for Azure resources and it is a way to govern your resources by placing resources within a logical grouping applying logical restrictions in the form of rules uh and so let's now go break down um what uh these Scopes are and so the first scope we're going to talk about is management groups and this is a logical grouping of multiple subscriptions uh just because you can have a lot of subscriptions in your account and you might want a subscription to um a collection of subscriptions to belong to some kind of domain so maybe it's for development or business or uh data Sciences whatever you want then you have a subscription and this grants you access to Azure Services based on a billing and support agreement um so the idea is that uh when you launch resources you're going to choose what subscription to go under it's just going to determine the billing okay under that um things you're going to pay for uh then you have re groups this is a logical grouping of multiple resources within a subscription then you have resources this is um the actual service itself like Azure virtual machine and I just want you to know that we're going to revisit the scope when we go look at robased access controls because that's going to really help it uh make a lot more sense okay but uh let's just go jump into some of these Scopes in specific and talk about them a bit more so let's take a look at arm templates uh and before we jump into it let's just make sure we're familiar with infrastructure is code cuz that's what arm templates are all about and this is the process of managing and provisioning computer center uh data centers such as Azure through machine readable definition files such as adjacent file and in this case an arm template because that's all it is ajason file and rather than physical Hardware configuration or interactive configuration tools and just to simplify that even further basically you're writing a script that's going to set up your cloud services for you and with iac's they usually come in two different flavors we have declarative that's where uh exactly what you write is what you get and imperative so you're going to generally Define what you want and then the service will guess uh what you want it's going to fill in the blanks to save you a lot of time writing those scripts uh and so uh arm templates are Json files that are def that Define Azure resources that you want to provision uh and Azure services that you want to configure and with arm templates they are going to be declarative so you get exactly what you define uh they're going to stand end up tear down or share entire architectures in minutes and they're going to reduce configuration mistakes and you know exactly what you have defined for a stack to establish an architectural Baseline for compliance so you definitely want to use Arm templates or IAC whenever you can and try to avoid using the console unless you're doing development or test workloads but let's just run through the big list of what you can do with an arm template I know this is a big boring list but let's just get it uh get through it as quickly as possible just so we know what we can do with armed templates so with armed templates that are declarative so what you see is what you get you can stand up tear down share entire environment minutes you can reduce configuration mistakes you can establish an architectural Baseline for compliance there uh modular so you can break up your architecture in multiple files and reuse them they're extendable so you can add Powershell and Bash scripts to your templates uh it has testing so you can use the arm ttk uh to test make sure exactly what uh what you've deployed is what you wanted um you have preview changes so before uh you create infrastructure via templates you see what it will create builtin validation so it will only deploy your template if it passes track deployments keep track of changes to your architecture over time policy is code so apply Azure policies to ensure you you remain compliant uh and then you have Microsoft blueprints which we we did Cover here uh which establishes relationships between resources and templates so it's just one step further where arm templates don't have any relationship with the resources where blueprints like a better version of arm templates and then you have cicd integration exportable code so exporting the current state of the resource groups and resources uh authoring tools I believe is the last on our list here so you can use Visual Studio code that has advanced features for authoring arm templates makes it a lot easier to write them so there you go okay so now what I want to do is cover infrastructure as code for Azure so there are two uh primary ways of doing infrastructures code we have arm templates the arm stands for Azure resource manager and the other one is azure biceps we're going to focus on the first one uh infrastructure as a code is the concept of um uh defining all your infrastructure as code uh and that might be confusing because that might sound like s the SDK or the CLI and uh it is confusing until you start working with it but the key difference is that when you use the CLI or the SDK uh to programmatically create resources they don't keep uh track of the State uh and so that is the key difference between that whereas if you ran a CLI command to create uh let's say a virtual machine and you ran it again with the same parameters and the same name it would attempt to create a second um virtual machine whereas with infrastructure as code if it's already there it's going to either update it or say hey you can't update it there's already one that exists so the idea is that um uh it's different in that process or in that sense uh there is a word for it um I believe the word is IDP poent uh I always have a hard time saying it but um that is the key difference between those programming methods and iic so what I want to show you is uh arm templates and um arm again stands for Azure resource manager it's part of resource groups so if we type in arm here we're not going to really get uh a service or anything like that we say azure or as your resource manager okay you're just not going to uh exactly get that because um it is it is something that's there but it really is talking about resource groups so when you deploy a resource Group it will always create an arm template for you no matter if you do click Ops um you'll always get an arm template and this is something that is very different from other providers so like when you use ads or gcp um when you launch a resource it doesn't necessarily will produce a uh a template for you but Azure is very unique in that sense that they will do that so what I want to do is I want to go ahead and explore some things with arm templates so you're very aware of how they work and I believe that uh there is a way to uh deploy if we type in template here there should be something like deploy a custom template whoops and that's how you would go about deploying a custom template and they actually already have some common templates here so maybe we can uh take a look at one as a quick start and try to understand uh what the templates look like another key difference between other cloud service providers is that it's not very common to write arm templates by hand um in fact it's very tedious and you would not necessarily want to do it as opposed to ads where you have cloud formation it's totally normal to do and that's why um having a layer on top of uh arm makes it so much easier like using again Azure bicep or terraform let's go ahead and create a Linux virtual machine here and notice that I select the template and it has some options here so um what I want to show you here this looks like the usual process for setting up a um a virtual machine but if we go here we can edit the template and then it's going to allow us to see what this template looks like so arm templates this is what it looks like and I believe that uh they're only Jason I kind of forget Let's go ask chat GPT so are arm templates uh in Azure only Jason or can they also be yaml the reason why I I don't remember is because I work with a lot of cloud service providers usually they'll provide both options um but generally uh I always remember that arm templates are only Json so there is no yaml support for it but of course you could use yaml locally and then convert it over back to Json but anyway so if we look at this here we have some things we have the schema that describes what the format of this Json should be um we have some metadata which probably gets autogenerated or is additional U information to attach the template we uh we have parameters so these are going to be values that we're inputting that allow us to uh make our template reusable and if we scroll on down um yeah we got variables which is probably um the modification of parameters and then we have our resources down below here and you know again if you've seen cloud formation templates or uh deployment manager gcp deployment uh scripts these are going to look very very similar so we we Define the type for the res ource uh we have a name for it then it has its properties uh and then it can depend on other resources to say what order uh they're performed in but anyway my point is is that uh this is a template and we can go ahead and actually uh deploy this template but I'm not that interested in that part of it because this is not that exciting what's more exciting is what happens when you do click offs so I'm going to go over uh over here and uh deploy a virtual machine m yeah I mean we could do virtual machine I'm just trying to think what's easier maybe we'll go ahead and actually do I've changed my mind we're going to actually go ahead and do uh storage accounts again I'm still in the free tier and I'm just trying to make things easy for you as well um and virtu virtual machines will spin up a lot of resources so maybe I don't want something that complicated uh for this example but what I want to do is I want to launch a virtual uh a storage account and then I want to see how we can look at the template and maybe we'll attempt to repport the template at at and then delete the storage account and recreate it so go here and I'm going to hit create and we're going to create ourselves a new Resource Group I'm going to call this Resource Group um uh my uh arm RG so arm for Azure resource manager and today it's really thinking I don't know if I'm having internet issues here or if it's just really complaining or if Azure slow Azure uh sometimes their UI is not always responsive and we have to give this a name of course we have to make sure this is very unique so I'm going say my um storage account a bunch of numbers and then my initials and it probably has too many letters so it's complaining there we go and I'll just let it choose whatever region wants we'll have it on standard that's totally fine I'm going to go ahead and go to review where we can see all of our options looks fine to me we'll go down the bottom hit create and we'll give it a moment here to create so I'll be back in just a second all right so that deployment is complete and what I'm interested in is checking out uh the resource Group but notice that when we've deployed this we have our inputs it shows us what we've inputed and we looked at the uh parameters of a template before so it is creating literally an arm template and then inputting the parameters it's showing this the outputs of uh that arm template and then here's the template itself so every time you deploy as your resources it is creating uh these IAC code for you and that is one of the greatest advantages of azure as much as I complain about Azure this is one of their really really good features and there's a few things you can do like it looks like we can add this to our library we can download this we can deploy it again let's go ahead I usually don't uh fiddle with these too much but we can um import this template and I can say uh my Resource Group but just remember you could have a lot of resources and really make that uh uh ret templated I'm going to choose the same um area here and this will just be version 1.0.0 down here I'm going to go to next it shows me the template next uh we can do some tagging I'm going to ignore that for now review and create and so now we have our own uh template so that's kind of cool um if we go back to here I'm not exactly sure where they oh we have to hit create maybe first it's not super clear but uh so that is now uh template has been saved but where did it save to uh just says it's a template spec it is really taking its time to load here okay and so we have our template here I'm not sure if we if we typed in templates here if they'd show up here they I guess they show up under template specs uh we'll refresh this not sure why it doesn't show up we know that we created it and you know I've said this in other videos where Azure doesn't always propagate things right away and you have to wait so you have to have confidence in waiting for things to show up an Azure so even though it's not here I know I created one okay so we go over here it says template spec succeeded so it really really I think it would show up here um and I I really want to prove that it will show up here eventually so what I'm going to do is just take a break and I'm going to give it like 10 15 minutes I'm going to give it a good chunk of time here and we'll come back and see if it appears um just to give you validation and confidence that patience always uh pays off here in Azure okay all right so I've waited a good chunk of time was just talking to Bo and um so I'm now I'm back and let's see if it is here we're going to give a refresh and look it's here so I told you you got to be really really patient with Azure it is really known for being slow for uh some particular resources and I when I say some I mean a lot so you know just have that patience there but anyway what I want to do is I'm going to open up another tab we're going to go back over every time I open that new tab and wants me log in that's great um but what I want to do is go over to our resource groups and we're going to go into that new one that we created and what I want to do is I just want to delete this resource here um and I want to see what happens if we attempt to redeploy our uh template there I assume we're going to have to I mean we don't have to delete this one but um I just want to remve it completely and just try utilizing an arm template so we'll give it a moment there and oh notice we have an upgrade button this is uh definitely new we might be going through our not sure why it's uh appearing all of a sudden I've actually never seen that button before so it's really interesting and NOP I guess it's just maybe after a while they just kind of poke you and over here we're getting our prompt so um it looks like we're starting to get some spend and you know I said earlier that Azure is really good about telling us about um alerts and things like that much better than other providers um and so you know here it's showing in Canadian dollars that uh we've already uh consumed half our spend not sure how I did that because I haven't really done a whole lot but um what we'll do is we'll try to figure out where that that uh free spend has been going um still again that's a lot um so maybe it's overestimating that or I left something running maybe that Kuan a cluster is still running I don't think so let's go double check and but anyway I wanted that to happen so I could go back and show a video of of that kind of stuff because all we created is a couple virtual machines and some other things yeah we don't have anything else running that should be costing us spend but we'll go take a look there and see what we can figure out so anyway I'm going to go back here give this a refresh and um that resource is gone what's interesting is it also got rid of the template why did it get rid of the template that that was something we created separately and so I guess it was linked to the resource Group and so that kind of defeats the purpose of us uploading our arm template so that's a shame um I guess what we could do is we could go and M I don't know we could go and use the custom provider and launch a template but there's not much interest in that so uh I'm not really interested in doing that yeah I think we're pretty much done here I think we've we've proved the point that Azure is really good at producing These Arm templates you're not going to want to write them by hand um you could ask CH PT to do it but I again I would probably not do that myself but I think that satisfies this video for arm templates so we'll see you in the next one okay all right so we looked at uh utilizing arm templates and I think it' also be really great to look at Azure bicep um because that is a more productive way to write infrastructure as code um and honestly I really like Azure bicep I think it's really really cool uh so what I want to do is I want to go ahead and go over back to GitHub we looked at creating a GitHub or creating a repoing GitHub uh back in our SDK video that was a really messy video I'm really hoping that it's not as crazy as that one but I don't like editing out any of the challenges uh here cuz I want to give you uh the full idea of of what it looks like when trying to work through these things what I'm going to do is go over to GitHub and you should of course go ahead and create yourself a GitHub account has a free tier uh and once you have your GitHub account we'll make a new repo I'm going to uh drop down uh here and go to exam Pro and of course you'll just have one name here if I have multiple accounts so there's a lot for me to create stuff in and what I'm going to do is make a new repo called um Azure bicep example you can call yours whatever you like I'm going to make this public so that you can see the code uh you can make yours private if uh private is available to you there but I'm going to make it public because if you want to go find this repo at exampro here and copy it and work with it you can so we're going to go ahead and use code spaces and codes spaces does have uh free credit usage you could do this locally um on your local computer but you'd have to install a bunch of stuff uh I like using Cloud developer environments and Azure does not have one built into their portal um most other ones do but I think the reason why Azure doesn't is because Microsoft owns GitHub and so you could just go over here and use code spaces instead so this to me is like using Azure okay so we're going to go ahead and create a uh code spaces on Main here and understand as long as the code space is running we are consuming uh so if you want to stop it you could always go up to to the command pallet here and we can just say uh stop or uh it's code spaces it should be there should be something here called stop um shut down I did this the other uh the other day when we did did that yeah it is code spaces whoops it's loading so it's it's bumping things out here but if we go code spaces there is an option to stop the current Works uh code space so I'm not doing that right now uh I want my theme to be dark so I'm going to go to this Cog down here go to themes go to color and we'll switch to um GitHub dark and we'll give it a moment to think because it's a bit slower loading I greatly greatly prefer git pod the reason I'm using Code spaces is because um the extensions are going to use the official ones with Microsoft and it's just going to be easier to show you this here in most other courses I use git pod um so anyway once that is loaded and we have changed our theme if that matters to you uh we're going to want to do some Azure bicep stuff so on the left hand side I want you to go to extensions and we're going to search Azure bicep I don't use Azure bicep a lot but I definitely know how to use it when we need to so I know they have a really good extension for it and it's like it writes code for you it was it's the nicest experience I've ever had with a um an i tool and this is the thing because Microsoft um built Visual Studio code and you know their they own GitHub they can have really amazing synergies for developers um so a lot of times I find it easier to work in vs code and use their extensions to interact with Azure than it is to use Azure portal itself and there are specific services like Azure functions where you really have to use Visual Studio code so it's essential that you get used to using uh Visual Studio code whether it's local or in a cloud developer environment so I'm installing that this Azure bicep um extension and this thing will help us write a lot of uh code um uh and it has like templates and other stuff like that so that's what I want to uh take advantage of it um I don't remember the extension for Azure bicep file so we'll just go to the Azure bicep website I'm sure they'll have like a quick start and we'll work through it here together so I want to go here and I just want to know what the extension is it's bicep so that's what it is so we're going to go here and make a new file we're going to call it main. bicep and something we didn't do before and this is what I wanted to do in the SDK one but we didn't actually have a use for it is there's probably like an Azure um like kit Azure tools there we go and this is something you might want to install a lot of these down below here see how there's like one for databases resources functions if you install tools it installs all these other ones you even have one for C tools and and um it's possible that uh yeah see like this this one will autocomplete Azure commands it'll do all sorts of fun stuff even for Azure storage and everything there's something but the reason we want Azure tools is because we can install Azure accounts and this will allow us to quickly log in to our Azure account remember before we typed in a login and then we had to get a device code and plug that in uh well if we have this installed uh we can just use the command pallet and log in very quickly and that's what I want to do here so I'm going to go to the bottom left corner I'm going to pull up command pallet and we'll try to do Azure signin now to be fair I mean this is not going to do much difference down here but I think it installed the um the CLI for us because before we had to manually install it right so we'll go here and we're going to have to choose device code we have signed into Azure Cloud let's try this one first see if that works and then we're going to say uh just so you know Azure has different ones there like Azure China Azure Germany Azure US Government so generally we always want to choose Azure unless you live in one of these other regions and you have to use that one and this is going to open up and we will sign in we can now close this window and I believe we are now logged into Azure also notice on the leth hand side we have this little Azure icon here on the left hand side it will allow us to see our resources we can also sign in from here we should be signed in maybe it didn't work I'll try this one more time extension as your resources wants to sign in we'll say allow maybe it has to sign in separately I don't know we'll close this there we are so now we see our subscription we are in here which is great and we can see a bunch of our services um so you know if we had storage accounts and we do have some storage accounts we can see them here this one I think is for our uh Cloud shell that's why it starts with cs and it has a random number afterwards if we had virtual machines and other things we could see them here but yeah working with functions you often use them here um we could also probably right click this and create a resource and so here there's a lot of ways to uh create some stuff we create a resource Group and and some other particular things but uh yeah that's that's interesting I also wonder if like these are these are obviously uh things that were installed there could be other extensions that we didn't install like Azure uh machine learning service or other stuff that could end up showing up there on the left hand side so I'm just kind of scrolling through here seeing what might not be installed so Azure container apps was not installed or maybe it was and it's these other ones that have these little install words on here but anyway enough about that let's stay on track here and let's write some Azure biceps so now that we have uh that installed we want to start writing it so I just need to see a little bit of code to get a reminder here um so yeah if we start typing it should start suggesting and this is what we want to do is make a storage account so let's go ahead and start typing that in so I'm going to type in resource uh and so already notice that it is autocom completing and then uh let's just go check here so the next thing is going to be storage account and it should autocomplete so yeah I remember this being really good at autoc completing just give me two seconds and let's go figure that out one sec yeah so I'm looking at it here and it's supposed to just start autoc completing when we type so I'm not sure why it's not exact doing that we'll go back here sometimes Visual Studio code doesn't do what we want it to do which is totally fine storage account and it's not really autocom completing so I'm going to go ahead and save this for a second well there it's autoc completing so resource storage am I typing it wrong is it supposed to be uh with the resources no no it's this so it's really interesting that it's not Auto completing but we could just copy this in here okay I just wanted to show you how powerful it was cuz I was so impressed the first time I I saw it uh writing all the code for me which is um not what the other ones do that's for sure so we'll just paste this in here and if I put a period here yeah I guess I was expecting a little bit more from it um but uh whatever I guess we'd have to work with it a bit more to find out again I don't work with it every single day but I am always very excited to use it um but you know the thing that I want to uh take a look at is let's look at where the actual reference documentation is and so we'll go to Resource reference here on the left hand side and I'm really interested to see uh where everything is so if you know the resource type you can just type it here in the Le hand side that's fine so we have all our resources here on the left and so we are trying to create a storage account so we can go over here here and look for storage account so that be storage and storage accounts and so here it says to create a uh to create a resource add the folling to your Azure bicep so um just kind of getting familiar with it it looks like this is going to be its logical name and this is actually going to define the resource itself and these are all its properties and it looks like there are some that are required and some that are not so it looks like I think that if we can find this tab back I think we can name this whatever we want here this doesn't actually have to be called storage account so we can go here it's just a logical name that we reference within this resource so I can go here and say like storage account AB it shouldn't matter um what's really interesting up here is that it's going to looks like it's going to grab the resource Group ID and then what does it do here creates a deterministic hash based on the string so it uses the resource ID to make a random string and then it's going to say toy launch in the front of it so I don't want toy launch I'm just going to put in here bicep and so um I think we can do hyphens actually I don't think we can and so we should get an Azure storage account that's going to be bicep and some random value after this and then up here this is going to pull in the resource Group now what's interesting is we haven't created a resource Group it says return the current Resource Group scope so I'm not sure how this is going to work if we don't have an existing Resource Group but anyway we've written our Azure bicep and we probably want to go ahead and uh deploy this now so we could probably just type in bicep down below that's probably what the command is nope that's not what it is um maybe it's what is it I don't know so let's go over to um back over here for a second and let's see what the CLI commands are oh boy we'll say bicep CLI what is the commands just tell me what the commands are please we could use the command pallet because they're probably all there like if we're if we were to go into the command pallet and type in bicep like we get all those commands but I I really want to know what the um CLI commands are I really thought it would be bicep it is a z bicep of course so looks like we can do um a bicep and then just specify the template probably main is the default so if we do nothing or probably will pick that up I'm going to go ahead and type in that and so it's interesting we installed the extension and we were able to log in but we still don't actually have uh the CLI so it looks like we do actually have to install the Azure CLI in here which is fine it's always great to get more practice so we'll go ahead and type in Azure CLI install we'll go to the Microsoft learn website we will scroll to Linux we'll go to auntu Debian um because that's generally what G pod or code space is or what have you will be using we'll go down look for that one liner and we'll copy it we'll go back over to um code spaces we'll paste this in hit enter and that'll go ahead and install the uh Azure C now we are logged in in this um uh invidual Studio code and it could be storing the same credential files wherever on the local machine um so maybe we don't have to necessarily log in twice it might be also interesting to see where that um that file is so maybe we can go ask chat gbt where does um where does okay so when you log into the Azure CLI where does it store the credentials what folder and file on the Linux machine that's what we want to know MH and the only thing I don't like about ch BT is that you can't go away from uh this tab while it's generating and then sometimes it just uh gets a bit slow but it goes out to the Internet so I think that's the reason why it's uh been slower than previous I like previous models where it wasn't out on the internet because it could generate out faster but uh yeah this one's hanging on me so let's go to 3.5 let's just ask this one I want it fast okay so it's saying it's in the Azure folder so that's something that we might want to take a quick look at the Azure CLI is installed I'm going to just type in a um account um account list and see if we can list our accounts okay so we are not logged in so us logging in here uh wherever it's storing it's definitely not storing in the same place but let's go take a look at that Azure profile directory so I'm going to bump up the font a bit I realized it's really small and I'm going to go ahead and say CD and then make a Tilda that is above your tab key and you have to press shift to make it it's called a Tilda it's like a little squiggly we'll do a for slash I'm going to do period for a hidden folder and we're start start typing Azure and so that folder is there we'll hit enter I'm going to do LS to list out the contents and we have stuff here I can do LS hyphen LA to list it in a nice beautiful list and uh if we don't want no that looks fine and so I'm kind of interested where it's storing uh that configuration probably in the config directory so I'm going to just CD into config uh oh maybe it's not a folder I thought that was a folder it is not a folder okay so let's do cat to print out the contents cat stands for C Cate I think and so that doesn't store it does a does the a uh Jason file have it no that doesn't have it but to be fair we haven't logged in yet so maybe the file will appear after after we log in so that's okay what I'm going to do is go ahead and type in a login and we'll say use device code because I believe that's the flag we have to use and we'll go ahead and copy this link we'll go to the top here and paste it in to one of our available tabs we have to go back and uh provide this code and we'll go click next and we'll click on our account we'll say continue we'll go back over to here and we'll give it a moment to think there we go we are logged in so now what I want to do is type in LS and looks like there's more stuff there it looks like there is and did we have this before um let's see here one 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 11 12 yeah there's definitely more stuff here um the new thing that's here is Cloud's config so I'm just going to cat that let's see what's in there so least tells us this is our default subscription so we at least know where that's coming from let's cat the config let's see if anything's changed in there that's the same let's cat a Json Json there's still nothing in there so it'd be really nice to know exactly where it is normally other ones will tell you exactly where they are uh and you can literally open them up and see see the information there I guess we could also just cat out the session no nothing so anyway it is stored somewhere where it is I don't know does it really matter no but it's nice to know exactly where it is so that uh let's say you wanted to delete it off your computer or something but it's stored somewhere anyway um we are we should now be logged into Azure so we'll go ahead and type in Azure a bicep I still feel like it should have told us the commands even if we weren't logged in and I was hoping that it would print us out the sub commands let's try to do help and see if it actually does that okay so it does you just have to give it the help flag and so we have a few options we can do build a bicep file um build the bicep pramp file decompile so if we already had an arm template we could turn it back into a bicep file that sounds really cool I like that idea format a bicep file you know if there's something wrong with it it could tell us as the format's correct install uh the bicep CLI which I thought it already was installed let's go ahead and try that first because maybe that's why I couldn't just type in bicep okay so now what happens if I type in bicep no so why did I install it if it was already like that um bicep I'm hitting tab to autocomplete to see if anything's there bicep CLI well whatever I mean we kind of still already have it so that's totally fine so we'll go ahead and type in bicep a uh uh AZ bicep build and and it wants a file totally fine so we're going to give it a file um build the file build a file and print all of its outputs to SD out I don't think it matters if we print them out so before we do that I just did control C to uh break that we need to get back to our main folder so I'm doing CD dot dot and I'm doing LS where is this folder CD for uh Aster for uh for slash I'm so used to using git pod I can't remember where uh this directory is I'm just going to scroll up here and take a look it is workspaces okay so to get back to this folder okay we're going to go to CD slw workspaces I'm hitting tab to autocomplete and then this one's called Azure bicep um is really not autoc completing here today oh I spelled Azure wrong okay that explains that I'll go fix that in the um the git pod I'll just rename it but now we're back into here so um typing clear so we're going to go Azure bicep file and we're going to provide it main TF or I'm thinking terraform bicep we'll hit enter and so that's going to go ahead and build it um is misspelled or does not recognize is not recognized by the system um okay we'll type in LS I mean it's right there let's go back and and take a look at the documentation and see what it wants sometimes it might want um uh like the file information but I don't think so it just shows main bicep I'll copy this command oh I forgot the word build up here that's why so um it looks like it's now built and so we now have a main Json we'll take a look here it's generated us an arm template at least that's what it looks like y yep that's what it is so that looks pretty good um I'm noticing that yeah we have parameters up here so now we can go ahead and deploy this so it builds it see here uh we can build our build pram file not interested in that generate prams and install the commands to your CLI oh publish maybe that's it the publish command adds a module to the registry the Azure container registry exists I'm not sure if that's useful I think that's if we want to reuse a template for later kind of like how we had those template specs I think okay so if asure bicep just generates out the files I'd imagine that we just probably deploy it the regular way using arm templates so I'll be back in just a moment most other I tools like they'll let you build and deploy but maybe Azure bicep just compiles out templates just give me a moment yeah so I just quickly asked um chat gbt and yes it did confirm it I my suspicions were correct as your bicep is just draining out the resource template and it looks like we're going to have to deploy it the regular uh or oldfashioned way here um so now here's a question could we actually use um Visual Studio code to deploy this so if I right click this could we deploy somewhere with this so that's what I'm really curious about let me go find all right so I believe there's a few ways we can do this of course we could go and just deploy it the uh the oldfashioned way by using this AZ deployment group um I was looking around myself and I just typed in bicep here and I also noticed that they had um uh a deploy step so maybe it can do a direct deploy not maybe not through the CLI but maybe it can do it through Visual Studio code there should be one for arm templates in here it's not showing up I mean chat TBT seems to think that it can but maybe there is a another extension we're missing so let's type in uh Azure so we have Azure tools is there one for developer um let's go back here and take a look so there's one here it says Azure resource manager oh it's an extens well I thought that be installed ready then that would be a really useful one to have here so we'll say Azure resource manager I thought it was there but I didn't see it on the side so this seems like a really good plugin this is probably something I'd want to have let's go ahead and install this one 1.5 million views yeah I believe so it's by Microsoft I'm surprised it doesn't get installed with the tools oh it's in preview okay so I imagine when this is out of preview I bet when you install Azure tools it will uh be installed there now I've said previously if there's a preview tool you should should try to avoid it because it might not be there in the future um this one I think we can kind of get away with utilizing it it might be the future and it's no longer in preview so we'll go over back over to here and do we have any changes here no but if we go into our Command pallet let's type in arm deploy now it was saying that uh that something we could do as your resource manager uh install this extension type in arm deploy in our Command pallet we did that yeah so it doesn't show up so you know preview feature uh chbt might be telling us something else we are using 3.5 so it might not be telling us the full truth there and and I don't really see any changes on here so I guess we're not going to worry about that but I would like to try the um the bicep deploy so we'll type in just deploy here and scroll on down we have deploy bicep file let's see what happens if we do that and so please enter the name of the deployment sure we have to name the deployment good um create a resource Group because remember that we didn't specify Resource Group so we'll have to create one on the Fly here so let's do that we'll call this my bicep RG RG for Resource Group it's now going to go ahead and deploy that it says deploy failed uh provider subcription does not have the resource type resource groups okay that is something I was not expecting let's go let's go ask Chach BT and try to save us some time says check your bicep template file ensure that you have defined the resources correctly that is not useful um maybe it's because it's not registered so maybe when we use the CL uh when we use the the UI it will automatically register things when we use it but we create resource groups all the time so it's kind of surprising if that wouldn't be registered so we'll go over to our subscription and I'm just going to double check this here but I'm not sure if it's going to make a difference we'll over to our yeah we're in our subscription I'm looking for providers there it is resource providers sometimes there's like another extra um blade they call these blades over here by the way and so I was getting a bit confused and so Chachi BT is suggesting maybe resources is not registered which to me seems czy crazy oh it is it's right there uh so I'm not exactly sure what it's complaining about the other thing is that maybe Azure bicep isn't logged in so I mean that seems like a possible option so maybe we'll just go stick with uh the usual way which is using the Azure um the this Azure deploy method so I'm going to scroll back up here and we have this command now we did install in here uh in extensions or I think it it came installed was the Azure CLI and and what that will do is it when we write it out Azure CLI commands I believe it will autocomplete for us so here's scrapbooks for developing running commands with a CLI create an Azure CLI files and use the following features oh okay so there's actually a thing called an Azure CLI file that's new to me um but what we'll do is we'll go ahead and we'll just say um new file so we'll just say commands and I'll just put that there rename that like that that's what it's saying to do and you'll say uh deploy an arm template and we'll go back over here and we'll see if it starts to autocomplete so we have AZ uh deploy it's not really completing correctly as just demonstrated we'll go back over here and take a look at that again so yeah this one says demo. asli they're making a comment so Intel sense for commands and their arguments stiip and commands scrapbooks for uh developing running commands in the Azure CLI okay then work properly please maybe it's not installed oh we have to install it sorry I thought we already had it installed that's why so we'll go back over here and so now our common is showing up so we'll type a deployment um I mean we probably want to create right it will have to have a name so we'll just say my RG my bicep um deployment we'll probably have to have a location so let's just say probably should place it in the same place as this one this does not have a particular location so probably default to wherever the resource Group is yep so we'll say um it's East us there we go there's probably something else we need uh I'm not really sure let's go back and see what chat GPT was asking for uh the template of course um we'll say template and it technically is a file so we'll go here and say main J Json and by the way we could bring these down onto new lines with this backslash that allows us to have multiple lines in our bash terminal okay and it also probably wants the resource Group so we'll go here and type in resource it can't do multiline it is not autocomp completing anymore Resource Group maybe we just hit the limit of it there uh so I I assume that it could handle multiline but I guess when we're doing multiline then uh the Intel sense the auto completion is it can't handle it so we'll go back over to here and I just forgot what we called that Resource Group we actually did create one uh but Azure bicep did fail the deploy because of some kind of permissions or settings so I just want to go quickly find that name again notice that sometimes an Azure you have to be patient super super super common uh to wait around for for Azure um because of propagations in their UI super common my internet's totally fine it's it's Azure and it's back here says an error occurred when trying to fetch resources additional details from the underlying API might be helpful are we having an issue with service so sometimes that happens so we go like uh Microsoft status page sometimes that happens and I got to walk away come back to my computer but uh maybe it's not because my internet seems to be funny so but if that's the case then oh yeah it's me I'll be back in a moment all right so uh my internet should be back here I'm just reopening my connection here to my code spaces and I'm going to go back over to here and we'll give it a refresh and so I guess that Resource Group did not create so we do definitely have to create a resource group first otherwise it's not going to know what to deploy into and I'm hoping that this uh reconnects or it's still running so but uh what I'll do here while we're waiting is I'm going to create a new Resource Group I'm going to call this one my bicep RG and we'll go ahead and review and create and we'll go ahead and create that we'll go back over to our other tab here I would really like it to reopen here um not sure what it's doing to figure this out going to go at the top just type in that previously working code space environment so it's here it is active I'm going to go back and say open in the browser notice you can launch this in Visual Studio code locally or if you want to use Jupiter Labs let's say you're doing something with AI or something or machine learning you could do that so this should open back up our environment there we go that's great and um so we created that new Resource Group that's called this here so I'm going to go ahead and copy that and I'm going to paste it into here sometimes it's good to put double quotations around these things I'm not doing that unless that gives us problems so I think this is everything we need we need to know um the resource Group uh it's probably recommended to provideed a name we'll have our location and our template file so I'm going to go ahead and copy this and fingers crossed this works uh of course we didn't really look anything up um oh this one says a deployment group create so maybe we should make sure that's correct but it did autocomplete create so maybe maybe that's okay well wait why is one deployment group wouldn't that create hold on we can hover over here and get some stuff manage the a your resource template uh deployment at the resource Group okay oh that's really cool if you hover over it tells you everything there well what happens if I take this name out then does this still complete starts a deployment at the subscription scope so maybe both both Works let's just see what happens it's really nice that it shows everything like that I really like that we'll go ahead and paste that in we'll hit enter and um it's showing we're missing an argument Resource Group arguments it doesn't like that one starts a deployment creates a deployment the resource Group okay so here we have a create and then we have starts a deployment the subscription scope creates a deployment at the resource Group from a local file template so it looks like if we already have one maybe this one would have created a resource Group for us so what I'm going to do is take this one out as I really thought we needed to have it but I'm going to go and see what happens if we do this the template resource location at line 12 uh line 17 is not is invalid the template function Resource Group is not expected at this location um okay it's it's not there I didn't put it in the template so okay well what I'm going to do is undo and type in group so I guess you got to be really careful when entering stuff in because it's going to give you some trouble and this one looks a little bit more normal with the group create so we have template file Resource Group I don't know if it needs a name so maybe I'll just take the name out and then we'll try this one and we'll hit enter and unrecognized arguments no location well I mean this one has it and this one doesn't okay we'll take the location out we'll try this well I guess we don't have to specify a location because we've already created the resource Group that's why so we'll try this again makeing a lot of trouble here but it's a good way to learn this is how you should learn and this is this is what Cloud's like just moing around till get till we get it to work and then hopefully it's it's the right way um so this is going to go ahead and run and we'll wait here I'm not going to make you uh watch watch it here I'll be back uh here in a moment okay all right after a little bit of waiting um our terminal has produced some stuff for us so it's suggesting it probably created the resource so we're in good shape let's go back over to Azure and we're going to go into our bicep RG and we now have our resource so we've success successfully used um as your biceps so let's go ahead and delete this Resource Group we are all done here um we're going to go ahead and commit what we have so that uh any future folks that are trying to do the same thing as us can just go get that code base uh good stuff here go ahead hit commit sync the changes we'll say okay that will push the changes excellent and I'm going to want to stop this workspace we'll open up the command pallet we'll say stop uh so say code spaces stop Cod C spaces stop current workspace there we go and that will stop the current workspace so that is all good right there um and I'm going to fix the name here because it really should be named correctly so that you can easily find it in the future just be more patient and make sure you don't make mistakes and try to fix them the best you can but yeah that is azure bicep and we'll see you in the next one okay all right so we are back we showed you how to uh utilize an arm template as your bicep I want to show you another way to do infrastructures code that's very popular and it's with a uh thirdparty um uh technology called terraform super popular because terraform can work with every single cloud provider and it's simply the most popular I tool um and it doesn't get a whole lot of attention with Azure so I figured we should throw that in in here because you're most likely to encounter it uh on the job as Azure bicep and arm templates aren't as used as much as terraform surprisingly so what I want to do is go over to um GitHub and we're going to make another repo if it will let me see where that button is sometimes it's a bit funny so I'll go to the top right corner create a new repo there's lots of ways to create repos in here going to go to exam Pro I'm going to make sure I type Azure right this time we'll say Azure terraform example I'm making mine public you can make yours private um again it's better for you to make it private because that way you might uh you won't expose information by accident and not sure why this looks a little bit different maybe GitHub just changed something on me but what we'll do because there used to be like a a code button here maybe because I didn't create the read me that's why normally supposed to have a readme I'm going to go ahead and just click that button to create the read me commit that and oh unexpected what are you talking about well now it is here so I think GitHub is just having some hiccups anyway we have a code code button here we'll go ahead and create our code spaces and we'll launch that up and we're going to have to go install the terraform CLI so I'm going to look up terraform CLI install and we'll go to the hashy cor website hash car is what makes terraform and somewhere in here they'll have one for Linux we'll go over here and we need to follow these commands here very straightforward not a a oneline command but they have additional commands here for security purposes so uh this environment's opening let's go to the bottom left corner and we'll pick out a nicer theme we'll choose a uh GitHub dark I'll just bump up the font a little bit and we'll go back over to here and we'll copy the installation command so we're uh uh copying the first one here we say allow okay we'll try this again and is not letting me copy paste sometimes you got to go up to this clipboard make sure it allows it is on continue copy right click there we go and this is going to install um usually it's good practice to do an update on your packages we didn't do that for the other the Azure CLI but very common practice on Linux do that so that's what they're doing first then we'll go over here and we will grab the gpg key um gpg is a security key that does something this output is normal you should be seeing this why it prints it like that I don't know but I know it's okay you can ignore it we will paste in the next one and that one was weird that didn't look right so I'll try this one more time paste it again hit enter oh I had to hit control C when you see this like this here it usually means it's expecting more input so I had to do um contr C on my keyboard that's when that shows up so I'm going to try that one more time I think what it did was when I hit up it it broughten that stuff so we'll go back over here I know it's a bit finicky it's a bit frustrating and so this looks normal this is what I want it's confirming the key so verify the so download the key and then verify it's fingerprint and then the next thing we can do is this will install the source for hashy Corp so it can actually install the p package and notice that sometimes when you copy paste you get some funny stuff so you got to be really careful with your copy paste okay I'm just going to type clear here I'm going to try this again copy right click paste there we go okay so now it's acting normally you know I've been coding for 20 years and copy and paste gets me all the time it's uh not much you can do about it now we can go ahead and install it so I know that's a lot of steps we probably could have just ran this and it probably would have worked okay also knows here it accidentally downloaded this weird file I'm going to go ahead and delete that not sure why it did that but make sure you don't end up with junk files by accident so now terraform is installed so uh terraform the way it works is you have the terraform command we hit hit enter here I recently did a terraform boot camp so terraform is fresh in my mind whereas you notice Azure bicep was a bit more Rusty but we'll go ahead and make a main.tf file that is how we create a terraform file we'll go to extensions on the left hand side there's probably a terraform extension and here is one um this there's this one and this one this one is by Anton and I know Anton he's super nice and then we also have uh the official one we'll go the official one here today sorry Anton don't get upset with me they're both great I just chose the official one for this uh video demonstration Anton's um maintains uh the terraform modules for ads and a lot of other stuff so he he's very good at terraform but now that we have this installed it should gives us some syntax highlighting and autoc completion um and so uh what we need to do is we need to get some code now the reason I like Azure bicep is because it really does generate everything in place but with terraform you have to do a little bit of work we're going to type in terraform registry and this is where um we can find everything so here it's the registry. terraform doio and we're going to go to Providers providers is our established connection to our specific provider we're going to choose Azure and in here in the top right corner they have this purple button and it's going to give us the code that we need to start working with we're going to go ahead and copy this and we're going to go over here back to our code we'll paste it into our main TF file so what this is going to do it's going to say install the the uh the ads or sorry the Azure RM provider so that we can interact with Azure through terraform and then we can configure Azure down here below normally the way it works for uh configuration if we go to documentation it will tell us in the first page how do we establish a connection so we can authenticate using the Azure CLI which is something that we have done we can also use a manage service or a service principle um so I mean the the azure C is the easiest way to do it at some point you will have to learn how to create a service principle so I kind of want to do that like that's kind of what I'm preferred to do at this at this stage here um but uh I have to make sure that this makes sense so service principal and client secret so this would be with a password so let's click into this one and I'm just trying to see where the syntax is here I'm just looking at the code so first log into here here create rbac no no I'll just do it the easy way I won't make it too complicated for everybody here I'll just use the Azure U the Azure CLI so what we'll do is we'll need to go ahead and install the Azure CLI so you probably know by this routine now so we'll go Azure CLI install and we'll go over here and we'll go down we'll go to the Ubuntu Debian and we'll scroll on down grab the single line go back over to code spaces which is here we'll drag this up we'll go ahead and paste this in and we'll hit enter and that will install us the Azure CLI won't take too long but it will get installed here in a moment and so I'm thinking that if the CLI is installed it should automatically or uh it should already know how to deploy um so while that is installing let's go back over to uh the terraform registry and we'll look at um uh trying to launch something in Azure so if we click back and we go back to the documentation it has all the resources here on the uh uh left hand side so we've been doing storage accounts quite a bit here so I'm just going to look for that on the left hand side there so we'll type in storage here and we'll go into storage and in here I'm looking for a storage account so it's right here and we have some example code so this is going to create us a resource Group and then a storage account so we'll copy this code and we'll bring it on over to here and we'll just paste it on below I'm going to have to jump this down a couple sizes here so I can see what I'm doing and so we'll paste that on in there and so now we have our uh Resource Group with a logical name of example um I'm going to rename this to be something other than this so we'll say uh my uh terraform RG I don't want West EUR Europe I want uh something in North America West us is that what it would be I'm not sure if this will actually autocomplete for me if it messes up it'll throw an error we need to give this a name so we will provide uh some name here we're not doing complex terraform of course you can pass in parameters with separate files and variables we didn't do that with uh bicep either um that's something we would do at a more advanced level but let's go ahead and change this name here and we'll put something else in so we'll say um uh my storage account bunch of numbers and then AB okay so this should work replication doesn't need to be on RGS but that's still fine it's a standard that's fine I guess we have some tags we don't need tags but that's fine so now what we'll want to do is go down below here and we'll have to do an ay login sorry I meant to say ay login hyphen hyen Ed device code okay and so we'll have to go to this address down below and we'll open it on one of these other tabs we don't care about and we'll go back here and grab the code we'll say next and we'll click this we'll say continue great we'll go back over to here and so we have ADD your Cloud we are now logged in so we should be able to deploy to terraform it should know that we're going to deploy to that subscription remember earlier we checked the um that Azure file uh in our uh Azure config I'm just going to show you really quickly Tilda sl. aure tab tab tab and we're going to look in the config directory it wasn't that one maybe it was something else Cloud's config and that's how it knows what subscription is going to Target where those credential files are somewhere in that folder we still don't know and uh the terminal's kind of messing up here there we go I had to just kind of wiggle it to get it to act normally and so what I want to do is type A terraform and nit so that's going to install the terraform plugins the actual Azure provider for us to establish connection I'm going to type a terraform plan that's how you um determine if your plan will work it says insufficient feature blocks at least one features block are required what the heck is a features block I don't I don't remember there being one there uh there before maybe it just wants us to remove the configuration complet completely let's see if that works um no it wants it so we'll go back here I don't remember there being a features block before but again things change all the time on uh on me here and so we'll go back to the provider it doesn't show anything here go back to the documentation features the features block allow configuration behavior for the a provider for more information go to the dedicated page sounds good to me and here it says uh this allows different users to select behaviors they require for example some users may wish to use the OS dis virtual machine While others might want to do other stuff so here looks like you're supposed to have a features block and then there are some settings you can set um additional settings so that's kind of cool uh I don't remember that before but let's just give it empty features because I don't really want to uh do anything fancy okay we'll go ahead and save and we'll say terraform plan we'll give it a moment here it's thinking it's really thinking that's a good thing right and usually doesn't take this long um what is going on here I'll be back in a moment okay all right so I thought there might be an issue with it but we had to wait a very long time and it says insufficient feature blocks um so at least one features blocks are required so I guess there's no way around it we have to include a feature so I guess I'll carefully look here and figure out what it wants um so here's all possible uh features they say they're all optional then why do I have to why do I have to provide one if if they're all optional okay well if there was one that we're going to do let's go ahead and grab the resource Group because we are using it we are technically creating a resource Group um so maybe that's a good idea to um have that one in there really surprised that we have to but whatever so it says prevent deletion if contains resource uh false I mean you might want it true but the thing is we're doing this temporarily and I want to be able to tear things down and I don't want to have any prevention on so we'll go ahead and try terraform plan again maybe it'll be faster that'd be really nice and we did do what it asked us to do so and again I'm going to spare you the waiting I'm just going to uh pause oh no there we go so what it's done is it's saying um and I'll just zoom out a bit more so it's a bit easier or Zoom back so the way it works is when you run it it's going to say yeah we are going to create these resources to see those pluses that's what it's going to go ahead and create and there might be even more than what you expect there to be um but nope it's it's good so now that we're ready we can go ahead and do a terraform apply terraform apply it's going to ask us to confirm it'll say like yes or no we'll definitely say yes we'll give it a moment okay other providers like adus and gcp are a lot more responsive I think it's just the time it takes to go talk to Azure we'll type in yes we'll give it a moment here again it's thinking it's thinking and it's creating the resources great so I'll be back here when it's done it might just take a couple minutes might take 30 seconds but I'll be back when it is uh created all right so like about a minute took to create um so what we'll do is we'll go take a look at and by the way we really don't want to um um we really don't want to uh leave this you really want to stick with this and uh after we deploy it so we can tear it down because the state file is all here so when you use um uh arm uh as your arm templates and bicep with which just produces arm templates the state of the the infrastructure is on the cloud provider so Azure has uh the Azure resource manager and it stores some kind of state file you don't see it we don't know what format it's in um uh but with terraform because it is an agnostic provider uh it stores the state file here now we could use ter from cloud which has a free tier and we could put it up there but uh for our purpose we just have it in here you do not want to commit this ever to your repo it could have sensitive information in it so just be aware of that in fact we should have an ignore file in here so that we not running into problems so I'm going to go ahead here and just type in get ignore it's probably the first thing we should have done but uh you know sometimes we do things out of order here get ignore uh terraform so we'll just go grab that because it'll give us the best stuff GitHub has a um a recommended ignore file we'll go ahead and copy that and we'll go back here and paste this in here and Save it and that way um that state file will not be part of the source code so notice it's not going to commit it but the lock file will be there which is fine let's go over to uh Azure and make sure that that resource was created so if we go to storage accounts we have an additional one there my uh storage account Etc it's there so um it's there so if we were to lose that state file we would actually have to manually delete the resource Group because it would no longer be able to track it but we do have the state file here and so we can go ahead and delete those resources so we'll go ahead and type in terraform destroy and we'll hit enter and that will um tear down terraform okay we'll give it a moment it's just thinking it is thinking real hard there we go we'll type in yes and we'll have to wait for it to destroy the resource I'll see you back here when it's done destroying okay all right so after a short little wait there uh that stuff has been torn down I'm going to go ahead and commit these files so uh changes we'll just make a quick commit message there we'll sync those changes we'll say okay make sure those changes get pushed if you need to look at my code it's going to be in that repo so just go back and look for it on the GitHub exam proo aure bicep example um yeah we're good there let's make sure we just uh turn off this workspace here so we'll say stop okay and we have now stopped this workspace we are in good shape and we'll see you in the next one okay all right so um I've been in the free tier here and I've been Gathering a bit of spend while just clicking through resources I was actually surprised how much spend uh has occurred considering I haven't really done anything but let's go take a look at in our subscription and see if we can figure out what's going on with our spend here uh of course you know if you are in your paid tier that could be problematic uh but I'm hopefully you are utilizing the free tier just as I am um and also we might be bringing through the free tier quicker because they're not treating um not giving us the free uh the free tier usage and they're just treating everything as as if it's it's fully paid so here it says we have2 200 remaining out our $500 still I find that kind of crazy we have spending rate and forecast uh cost of course we have no cost so we're probably more interested in usage but let's go take a look and see what's been causing this issue so we'll go into uh here into our cost analysis and there is there is really no real cost it's more just like us using uh resources so I'm trying to make sense of this it Mak it's a lot easier when it's real money and not uh pretend money so we'll have to see here we'll go cost by resource let's see if we can make sense of this breakdown and uh I mean these are all under a dollar so I'm not exactly sure what it means here so this is not going to be very useful in our free tier maybe what we can do is go over uh to back over to uh our subscriptions here because really we shouldn't really have any kind of spend it's uh I think it's Azure tricking us because I know all the resources we've been spitting up and they're not uh we have not had them up for very long and there's no way they could be uh uh as much as it's reporting here so maybe a better thing might be usage uh if usage gives us some indication here I rarely ever have free tier so it's not always very clear to me uh what's going on here and so what we're seeing here is this is the um uh the quotas or usage of resources so if you were to exceed this you might have to uh request a a quot increase so this is not uh that useful uh this is more about current usage and usage there so yeah I'm not 100% sure where um uh free spend occurs so just give me a moment and I'll go find out okay all right so um Microsoft is suggesting some things here I don't necessarily mean that I believe that this is where it is but let's go take a look and see if they're being honest with us here so we're in our subscription and it's suggesting that we go over to where um spending r forecast so that's what we were on earlier if we go back over to the right tab it was we go back over to overview it was this here we go to view details and I was trying to break it down a different way okay so we'll go back over here cost by resource show the cost of individual resources uh top free services by usage uh this only uh this area only appears for free count so if you don't have a free count the isn't shown well I'd love to see that that sounds very useful to me so let's see if we can I'm going to close this tab it keeps messing me up if we can see that here I mean I'm not really seeing that here all right let me really carefully read it okay all right I think what it's saying is that on that overview page it'll have that on the right hand side I don't think I saw saw that but I was going pretty darn quick so to be fair it could be my fault and we're just going to go back to subscriptions here on our overview it's over here so we'll view all free uh uh Services they say this only is provided in our free services for 12 months so no this is talking about all usage over uh over 12 months and uh we can sort this based on usage I suppose and we're only seeing usage here so you can see that we're not really uh utilizing much like Cosmos DB has a free tier that's something we spun up earlier virtual machines has a free tier I don't think AKs has a free tier but where is all this money going that's what I want to know how do we go from $500 to $200 in a day uh it's oh your remaining $200 of free credits expire in ETC maybe we only get 200 free maybe it's not $500 and I'm just I'm just crazy um let's go ask chbt how many credits do I get in Azure for the first 30 days maybe it's just 200 I mean that sounds more reasonable than 500 I think I'm just uh kind of forgetting I remember gcp once had like a lot of free credits like thousands and uh chat GPT is really taking their time here so let's go out to the internet and oh no here we go it's $200 okay so all right our spend isn't crazy it's just down by a little a little amount of money it's still not showing us what is fully outstanding again it's so hard to see this when the spend is so low so I guess we really are not spending a whole lot there we can go back to notifications and see it uh I mean it did show up here notifications and notifications is taking time here to today that's great come on notifications you can do it it's really not appearing here today and I can't go back there we go yeah so I guess maybe it wouldn't show up there maybe it would show up in the advisory so um uh most providers have advisories and that's maybe where that popup came from so we'll go back to subscriptions I think I saw it here on the left hand side we had like uh ad recommendations and we have none right now okay so that's okay um all I wanted to know was do we know where we can see our spend and apparently in the free tier we can go over here uh and see stuff since we're not in the pay tier there's not a whole lot of information that is interesting that we can see but maybe make note of this that when you want when you are in your first 12 months of your account go over here and check and just uh see what your utilization is looking at and just be very aware of what you have access to so clearly we have Cosmos DB we have storage we have some virtual Machines of very particular sizing we get some SQL database which is really nice uh public IP addresses this is something that was not charged for uh previously I don't know when Azure started charging for it but all providers now charge for ipv4 uh addresses um so that's another additional uh expense cognitive Services which we do a lot in the AI 900 so that's a lot of AI stuff you got a load balancer for free which is nice um um and a bunch of databases down here below and more virtual machines so one's probably L Linux one's probably windows so a lot of fun stuff there but anyway hopefully that gives you an idea of spend a little bit more but of course it' look a lot nicer if we had more spend and maybe I'll make a separate video showing uh more spend okay see you in the next one ciao so asure monitor is uh quite a beefy service there's a lot going on in it and so it's a comprehensive solution for collecting analyzing acting on tele data from your cloud and on premise environment so here's an example of one of the things it can do which is provide you a visual dashboard but it can create smart alerts automate actions log monitoring and a lot of different things and many Azure Services by default are already sending their data to Azure monitor so you can use it right away now I just want to introduce you to the concept of the pillars of observability this isn't a thing specific to Azure but it's something that in devops that you need to understand and it's just going to help you contextualize the offerings of azure Monitor and other cloud service providers so what is observability that is the ability to measure and understand how internal systems work in order to answer questions regarding performance tolerance security and faults with a system and application and in order to uh obtain observability you need three things you need metrics logs and traces uh and you have to use them together using them in isolate does not gain you a observability so let's go Define those three things the first thing is metrics and that is a number that that is measured over a period of time if we measured the CPU usage and aggregated it over a period of time then we would have the average CPU metric then you have logs these are text files where each line contains event data about what happened at a certain time and then you have um traces and this is a history of requests that is that is uh that travels through multiple apps and services so we can pinpoint performance or failures and I like to make the joke that it looks kind of like the Triforce observability once you've constructed it there at the end let's look at the anatomy of azure monitor which is a little bit complex but I'm sure we can work our way through it so the first thing is that we need uh sources of data so these this is what uh what data can be sent into Azure so you probably want application data operating system data uh data from Azure resources at your subscription level your tenant level which is going to be associated with active directory and custom sources and once you get those into Azure monitor you have to store them somewhere you're going to put them in logs and monitors and these are just data stores that are within Azure monitor that you're going to be able to work with and once you have that data in there you're going to be able to leverage different services that do different things um and so we will call these functions so you can perform insights uh visualizations uh analysis uh response and integration so what we' look at insights uh we're getting insights into our virtual machines our containers our applications uh for visualization you might be making d dashboards uh you could be using powerbi or creating workbooks for analysis you might be using the log analysis or the metrical analysis tools for responses uh you might want to create alerts or start Auto scaling and for Integrations you might want to use logic apps or export apis to connect things up so there you go I want to quickly touch on log analytics uh and so this is a tool used to edit and run queries within Azure monitor logs and and so the idea is it kind of looks like um something you use to connect to a database cuz it really is structured like a database with tables and columns and things like that and it has this uh its own query language called kql and the idea is that you input uh um your queries and it's going to Output results for you and that's something we're going to look uh in Greater detail is that uh kql language so that we know how to use that panel let's go talk about workspaces so um when you use log analytics you're going to probably want a workspace and this is a unique environment uh for Azure monitor log data each workspace has its own data repository and configuration and data sources and solutions and are configured to store their data in a particular workspace so it's really interesting because if you go over to Azure monitor you can use uh uh log analytics without creating a workspace but I believe that if you want to um uh isolate a lot of your data and uh install like maybe like collect data outside of a your services for other things you're going to need a workspace and it's going to also have a lot more robust options so that's something you're going to end up doing is uh creating work spaces and it's a good habit to do um but there's not a lot to talk about there but let's move on to actual the query language which is really the meat of log analytics let's take a look here at Azure alerts and this helps us uh be notified when there are issues found within the infrastructure or application and this allows us to identify and address is before the users of your system notice them and so they come in three flavors we got metric alerts log alerts and activity log alerts and when alert is triggered you can be notified or have it take action so here is kind of the anatomy of an alert and we have the alert rule this defines who we should monitor like the the service and uh like the the definition of when it is triggered which is going to be the next part here so a resource such as a virtual machine uh designated as a Target resource will emit signals so it's going to be em emitting a data payload and it could be of the following types it could be a metric a log activity log application insights you can kind of see how that ties to the types of alerts then you have the criteria or logical uh tests this gets evaluated and determines are we in a triggered state it could be like percentage CPU greater than 70% then you have your Action Group which contains actions um and those actions uh will be uh performed when it is triggered and actions could be things like run uh run an automation run book use Azure functions itsm logic app web hooks or secure web hook on the other side there we have um this box over here and this is all about the state of your alert and so we have monitor condition Al Alert state so monitor condition is set by the system and Alert state is set by the user but the idea that is there is so you can Define where it is because you might want to uh have a history of saying okay I've resolved this issue so I'm marking this as closed and that' be like an alert State there um and so there you go let's take a look here at application insights and this is an application Performance Management Service so it's an APM and it's a subservice of azure monitor let's talk about what apms are so these are monitoring and and um uh they do monitoring and management of performance and availability for software apps APM strives to detect diagnosed complex application performance problems to maintain an expected level of performance so why use application insights will automatically text performance anomalies and includes powerful analytics tools to help you diagnose issues and to understand what users do with your app designed to help you continuously improve performance and usability works for apps for.net node GS Java python hosted on on premise hybrid or any uh public cloud and I know that it works for uh other ones that are not part of the supported languages so there's one for Ruby but the thing is is like um Azure is only providing official support for a bunch of languages but you might still have libraries out there for them and it integrates with your devops processes and can monitor analyze uh Telemetry from mobile apps by integrating with visual studio app center and if you're running an app you definitely want to have an APM installed if you ever use data dog or Skylight or New Relic that's what apms are or what those um providers offer but let's take a closer look here and this is kind of an example of uh an application and what you're going to see is that we have a front end a backend and workers just to kind of represent uh how you can instrument your applications and when we say instrument it just means install like this piece of code that runs on it to send data back to uh application insights uh and the idea is that when you instrument it you're just installing the instrument uh package STK or in some cases you can just turn it on where it's supported so you don't necessarily uh have to install it an app you might just press a button and it will uh install it within uh Azure services and there's many ways that you can view your telemetry data so the idea is that the agent send that information to application insights and then you're going to be able to leverage that in alerts powerbi Visual Studio rest API continuous exports a lot of a lot of services can ingest application sit so apps can be instrumented from anywhere so if if you running on AWS you can install it on your servers there when you set up application sites monitoring for your web apps you create an application site resource in Microsoft Azure so it's a physical resource and you open this resource in the Azure portal in order to see and analyze Telemetry collected from your app and the resources identified by the instrumentation key also known as the I key and I just got a big old list here just to tell you all the things you can do with it so what does application Insight monitor well request rates response time failure rates dependency rates response times failure rates exceptions page views load performance Ajax calls user and sessions count performance counters host Diagnostics diagnostic Trace uh logs custom events metrics uh uh so there you go that's a big old list and on the right hand side is where can I see my Telemetry and we saw a little list but let's go through the big list and that's uh smart detection manual alerts application map profiler user uh usage analysis diagnostic search for instance data metrics Explorer for aggregated data dashboards live metric streams analytics Visual Studio snapshot debugger powerbi rest API continuous export and there you go so you can see that it can collect and you can use it in a lot of places definitely definitely install if you're using or you running a web application
