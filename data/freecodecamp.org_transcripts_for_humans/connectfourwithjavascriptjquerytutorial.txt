With timestamps:

00:00 - hey everyone i'm cody and welcome to a
00:02 - video where i'm going to show you how to
00:03 - build a js
00:05 - a javascript connect 4 game
00:08 - using jquery javascript
00:10 - html5 css whatnot and um let's go ahead
00:13 - and just get started right so
00:15 - obviously you know what connect four is
00:16 - or you should so if you don't i'll go to
00:17 - connect four
00:20 - go to images
00:23 - you know connect four is this game where
00:24 - you have this grid and each player can
00:26 - alternate taking terms placing their
00:28 - color circle
00:30 - so we're gonna try to build that which
00:32 - basically whenever you get four in a row
00:34 - you win the game so
00:36 - that's kind of a reference that we can
00:37 - go off of
00:39 - um let's go ahead and get started so on
00:41 - the left i have an empty project over
00:43 - here which has absolutely no files in it
00:45 - it's just a blank git repo and on the
00:47 - right i have that project hosted using
00:50 - http hyphen server which is a node
00:53 - module you can use if you want to host
00:55 - um
00:55 - [Music]
00:56 - like html files or whatnot
00:58 - that's kind of my setup
01:00 - so to start off how would you build
01:03 - a website or a web page which displays a
01:06 - grid
01:07 - that has this type of a structure in it
01:09 - like here is a good example i guess we
01:10 - can go off of
01:12 - so to start off we need to first
01:15 - build up a blank html file
01:18 - so if i go over here and just say new
01:19 - file index.html
01:22 - here we can actually write our html file
01:24 - if you want to and say build an html we
01:27 - need a head
01:30 - and we need a body
01:34 - inside the head i'll just go ahead and
01:35 - get the title and call it connect 4
01:38 - and also inside here we can start
01:40 - including some things the first thing
01:41 - i'm going to do is include a style sheet
01:44 - i'm going to say there's a local style
01:46 - sheet hosted in this folder which we can
01:49 - add in one second
01:51 - now called style.css
01:54 - go ahead and make this font a little bit
01:55 - smaller so we can see it
01:58 - so this page is going to load in
01:59 - style.css which we haven't created yet
02:01 - so i'll go ahead and just create a
02:03 - dial.css
02:05 - and i'm also going to create a
02:08 - main.js file
02:11 - so inside our index we can just go ahead
02:13 - and import that as well
02:15 - up here i'm going to go to
02:17 - add a new element called script
02:19 - i'm going to first include main.js
02:24 - down here i can just do something
02:26 - simpler like hello world just to make
02:29 - sure this is working
02:30 - and if i were to refresh the page we
02:32 - have hello world printing out
02:34 - and inside the console
02:36 - my dev tools if i were to go to the
02:38 - console over here
02:40 - i want to make sure that this main.js
02:42 - thing is loading and running correctly i
02:44 - can go over to my main.js file and say
02:46 - console.log
02:48 - here save that file
02:51 - and refresh this page and we get here
02:54 - printed out
02:57 - all right so we have our basic setup
02:59 - going
03:00 - and again we can just test to make sure
03:01 - that the body is working so i can say
03:03 - background color is orange save that and
03:06 - it is refreshing the screen
03:08 - using live reload on the background
03:12 - so if you remember i did mention that
03:13 - we're going to be using jquery and i'm
03:15 - mainly using jquery because it has a lot
03:16 - of helper functions
03:18 - which allow us to do our job much more
03:20 - efficiently than using vanilla
03:21 - javascript
03:23 - might be kind of overkill but i like to
03:25 - use it just because it's
03:27 - really easy to select stuff and change
03:30 - data on stuff and whatnot so i'm going
03:31 - to go ahead and go to cdnjs
03:33 - and search for jquery and i'll go ahead
03:35 - and grab the jquery min.js copy this
03:39 - and then over here i can just
03:41 - first of all close my editor
03:44 - i can load that script in here
03:48 - and to verify that it is working i can
03:50 - say
03:51 - document
03:52 - ready
03:53 - it's going to go ahead and print out
03:56 - working
03:57 - if that isn't
03:58 - if that is indeed working
04:02 - all right so it says money sign is not
04:03 - defined
04:05 - that's because i loaded jquery
04:07 - after main so of course you need to load
04:09 - it before you run your script and now we
04:11 - get working printed out to the console
04:13 - so now we have jquery working we have
04:14 - our style sheets hooked up
04:16 - and we have our main.js file running as
04:19 - expected
04:21 - so to start off what we want to do
04:24 - is we want
04:26 - get rid of that body background color
04:28 - is we want to first figure out a way to
04:30 - dynamically build up a grid
04:33 - so inside our body if we were to just go
04:35 - ahead and make a div
04:37 - and call it connect 4 or something
04:42 - we want to populate that connect for div
04:45 - with some rows and columns that kind of
04:47 - show a grid that looks like this
04:50 - if you notice you have 1 2 3 4 5 6 7
04:54 - columns and six rows
04:58 - so what we can do in our main js file
05:02 - is i'm going to go ahead and just clear
05:04 - out those console logs
05:06 - and just do a little to do here so is it
05:08 - to do draw a grid
05:11 - and they kind of help abstract this into
05:14 - different modules what i'm going to do
05:15 - first of all
05:17 - is make a connect 4
05:19 - file
05:20 - and also include that right above main
05:23 - and what we're going to do inside
05:24 - connect 4.
05:28 - include connect 4 as a script
05:31 - and i have connect 4 over here basically
05:33 - what connect4 is going to do is declare
05:36 - a class called connect4 which we can use
05:37 - in our main file
05:39 - so i'm going to go ahead and just type
05:40 - this out i'll make a class called
05:42 - connect4
05:44 - i'll give it a constructor
05:47 - i'll say this dot rows is equal to
05:51 - six and this dot columns is equal to
05:54 - seven
05:58 - over here on main i could just say make
06:00 - us a new grid
06:02 - our new connect four object so up here i
06:04 - can say const
06:08 - connect four is equal to new connect
06:10 - four and i'm gonna go ahead and pass it
06:11 - some type of selector so i'm just gonna
06:12 - do a string and you know this is up to
06:14 - us this is we can customize it however
06:16 - we want to but our constructor is going
06:17 - to take a selector so over here i'm
06:20 - gonna pass in selector
06:23 - but it knows where to render the grid
06:26 - if you remember on our html file we have
06:28 - an id called connect4 so what we want to
06:30 - do is inside main.js
06:32 - we're gonna pass that element or that id
06:35 - of connect 4 into this new connect4
06:37 - object
06:38 - and what we want our connect for class
06:40 - to do is just go ahead and build up a
06:42 - grid
06:44 - so to kind of just show you what exactly
06:46 - is going on and kind of jumping around
06:48 - first thing i'm going to do is just to
06:49 - demonstrate i can say
06:52 - grid is equal to use jquery and grab
06:54 - that selector
06:56 - and then i can say grid.html is equal to
07:00 - hello
07:02 - so now when i say this notice that what
07:04 - it's doing is main is running
07:06 - it's creating this connect4 object
07:08 - passing the selector
07:10 - then the connect4 class is grabbing the
07:12 - selector
07:13 - grabbing the div and then adding html to
07:15 - the
07:16 - inside of that div
07:18 - all right so that's pretty awesome so
07:19 - what we want to do at this point again
07:21 - is we're trying to build that six by
07:23 - seven grid
07:24 - so i'm going to go ahead and create a
07:26 - method on this connect four class called
07:28 - create grid
07:30 - and the purpose of this function
07:33 - is to basically build up a bunch of divs
07:35 - like you know six different rows
07:37 - inside each row we have seven different
07:39 - columns
07:41 - and we're going to go ahead and call dot
07:42 - this dot create grid here
07:45 - so whenever this
07:46 - connect4 object initializes we're gonna
07:48 - go ahead and create the html for the
07:50 - grid
07:51 - and i'm gonna go ahead and just get rid
07:52 - of these things
07:54 - um and keep track of that selector that
07:56 - was passed in
08:01 - so to start off how would we create a
08:03 - grid
08:04 - the first thing i want to do is i want
08:05 - to grab
08:07 - that dom element so i can say const
08:09 - board is equal to
08:10 - jquery of this dot selector
08:13 - and that should give us if i were to
08:14 - print this out
08:16 - that should give us the div of connect
08:19 - 4.
08:20 - and inside of this connect 4 div
08:23 - we want to go ahead and just loop over
08:26 - and create
08:27 - six rows
08:29 - the one way you could do that is
08:30 - obviously use a
08:31 - for loop so set let row is equal to zero
08:34 - and i'll say row is less than this dot
08:35 - rows and row plus plus
08:38 - i'll do the same thing with the columns
08:40 - here
08:42 - so instead of let row i'll say let
08:43 - column
08:50 - in fact i'll take a step back so i don't
08:52 - want to confuse you all yet so let's
08:54 - just start with the row so for each row
08:57 - what we're going to do is create a new
08:59 - div so i'll say constant row and the way
09:01 - i kind of use this money sign in front
09:03 - of variable names it's just so i know
09:05 - that it's a jquery object
09:07 - this is just my convention you don't
09:08 - have to follow this
09:09 - but it just easily
09:11 - lets me know that hey this is a jquery
09:12 - object that we're messing with
09:14 - so we're saying const money sign row is
09:16 - equal to i'm going to create a new div
09:18 - using jquery
09:20 - and to do that you just do money sign
09:22 - and pass it the
09:24 - name of the dom element you want to
09:25 - create in this case it's div
09:27 - and i'm just going to go ahead and add a
09:28 - class to it called row
09:33 - and then of course i can say board dot
09:35 - append
09:36 - row
09:40 - and now if i were to print out
09:42 - the board after here
09:46 - we see that the board has actually put
09:48 - out the html of the board
09:52 - the board now has a bunch of rows nested
09:54 - inside of it and in course i can go here
09:57 - just kind of demonstrate that we have a
09:58 - div called id connect four
10:00 - and inside that we're creating six rows
10:03 - so six divs with the class row inside
10:05 - here
10:06 - so that's step one right we need to
10:08 - create six rows and the second step is
10:10 - we need to create
10:11 - seven columns inside of each of those
10:13 - rows so instead
10:14 - i can add another for loop here
10:18 - and again the one i put out a second ago
10:20 - i'm just going to loop over the columns
10:21 - now
10:27 - and for every iteration of this for loop
10:29 - i'm going to say constant call is equal
10:30 - to
10:31 - and then let's go ahead and create
10:32 - another div
10:35 - this one's going to have a class of call
10:37 - and empty
10:39 - so we can kind of style it and you know
10:40 - give it a style when it is empty versus
10:42 - when it has a red or a black token
10:44 - inside of it
10:47 - and i think that should be good for
10:50 - there and i need to append that column
10:53 - if i say money assign row dot append and
10:56 - then i pin the column onto the row
10:59 - and then for each row we append into the
11:00 - board if i were to save this now
11:04 - and go into the body we have a div
11:05 - called connect four it has six rows and
11:08 - each side each row it has seven columns
11:11 - so the dom element structure is there
11:14 - ready to go but we still don't really
11:16 - visualize it
11:17 - so what we can do at this point is we
11:18 - can dive into the style.css
11:21 - and the first thing i want to do is just
11:22 - add a couple of attributes
11:25 - to first of all connect four object
11:27 - which is our grid and we want to set the
11:29 - background color to yellow
11:32 - and we want to make it display in line
11:34 - block
11:36 - the body i'm just going to go text align
11:37 - center so that the grid is centered
11:40 - so again this made everything centered
11:43 - and this made the
11:46 - grid with the background color of yellow
11:47 - which we can't see right now because it
11:48 - has no height
11:50 - um
11:51 - but we will visualize that in one second
11:54 - so for every column that we have on the
11:56 - page we want to give it a particular
11:58 - width and height so we'll say
12:01 - width is equal to 70 pixels i do height
12:04 - is equal to 70 pixels
12:06 - save that
12:08 - and then so you saw here it kind of
12:10 - created all those but they're all on one
12:13 - like column which is not what we want so
12:15 - we can just go ahead and do a display
12:17 - inline block on the columns and that
12:19 - makes them all appear on the same row
12:22 - um or to hover over them you see that we
12:24 - have these columns side by side and
12:26 - that's because we added display inline
12:27 - block on line 13.
12:31 - almost done with this first let's set
12:32 - the background color to white
12:34 - and i'm going to add a border radius of
12:37 - 50 to make it round
12:40 - and finally we could probably add some
12:42 - margin
12:44 - over all the
12:46 - slots just so it looks more like a grid
12:50 - awesome so that wasn't too difficult let
12:52 - me just do a really quick recap so we're
12:54 - not really confused as to what just
12:56 - happened
12:58 - so inside this connect4
13:00 - class we
13:02 - all create grid when the constructor is
13:03 - called
13:04 - and inside this constructor we basically
13:06 - loop over every row
13:08 - and create a div called row which you
13:10 - can see here
13:12 - and then inside of every row we just
13:14 - append seven different columns
13:17 - and then we went ahead and just add a
13:18 - bunch of different styles so it makes it
13:20 - look more like a connect four grid so
13:23 - not not too difficult right and jquery
13:25 - allows us to do
13:26 - this type of logic much more simple than
13:29 - just using vanilla js where you have to
13:30 - do like
13:31 - dot query selector and if you want to
13:33 - add a class or remove a class you'd have
13:35 - to do a bunch of other
13:36 - um in my opinion just like hacky ways to
13:39 - do it versus jquery just gives you
13:41 - really useful utility functions to do
13:43 - with the same thing
13:46 - just go ahead and minimize this a little
13:47 - bit so we have a grid again and what we
13:49 - can do at this point the next
13:51 - thing we're trying to achieve
13:56 - in fact before i go too much further let
13:57 - me just go ahead and commit
13:59 - what i have so i'll say added the grid
14:02 - or initial
14:04 - setup of grid
14:06 - add that
14:13 - go ahead and omit that or push that i
14:15 - mean
14:21 - and again as we work through this
14:22 - project i'm going to be committing and
14:23 - pushing stuff to our repo
14:25 - so if you were to go here and you wanted
14:27 - to actually kind of walk through how we
14:29 - did this stuff you could just look
14:31 - through all the different commits here
14:32 - and then first one i did initial setup
14:34 - of grid
14:35 - which has all these different changes
14:38 - and of course i'll add a read mean a
14:39 - little bit so you can actually run this
14:42 - um just do read me md really quick
14:50 - and we'll come back to that at the very
14:51 - end and i'll explain how you can run
14:52 - this easily on your computer
14:56 - alrighty so now for the next step what
14:59 - we want to do
15:01 - is as you hover over the
15:05 - cells in this grid
15:06 - we want to go ahead and just drop
15:08 - different colors
15:09 - so the easiest way to do that or at
15:11 - least the way i'm going to do it in this
15:12 - tutorial is i'm going to create another
15:14 - function inside this class
15:16 - which is going to set up event listeners
15:21 - and again there's more than one way to
15:23 - hold this up so if you find a better way
15:25 - to do this or if you think of a more
15:27 - elegant solution feel free to do it and
15:29 - give me feedback but this is just the
15:30 - way that i feel
15:31 - is a decent solution of this project so
15:34 - the first thing we want to do
15:36 - is call set up event listeners here
15:41 - so basically when we create the grid
15:42 - we're going to create a bunch of event
15:44 - listeners which are going to listen to
15:45 - different things such as hover events
15:47 - click events or whatnot
15:50 - um so the first thing
15:52 - i think would be useful
15:55 - is we want to kind of when we we enter
15:57 - one of these columns or cells
16:00 - we want to place an indicator as to
16:02 - where the piece is going to drop
16:05 - because again if you have like three
16:06 - pieces here already and you're hovering
16:07 - over this column it should drop it at
16:09 - this location
16:13 - so the first thing let's just go ahead
16:14 - and do
16:15 - const board is equal to
16:17 - this dot selector
16:20 - again i'm just grabbing that dom element
16:23 - called connect 4 or id of connect 4 and
16:26 - we're going to do a different
16:27 - listeners on that so i can say the first
16:29 - one is board dot
16:30 - on mouse enter
16:33 - and then this is a
16:34 - jquery method where you pass it the
16:37 - event you want to listen to
16:38 - the second argument is going to be
16:40 - the selector
16:42 - that you're going to listen to as well
16:43 - so i'm saying whenever we click on or
16:46 - hover over sorry an empty column
16:48 - let's invoke a function
16:52 - make this font a little bit smaller so
16:54 - we can see everything on one page
16:57 - in fact i could probably
16:59 - just a little bit because we're not
17:00 - going to be using more than that grid
17:09 - okay so basically when we enter one of
17:11 - these cells so i'll say
17:14 - here print out
17:16 - the cell that we've entered
17:19 - go ahead and go to the console now
17:22 - as we hover over these cells notice that
17:24 - it's printing out
17:25 - the different cells that we've heard
17:27 - over
17:29 - that's kind of how you'd add event
17:31 - listeners using jquery on
17:33 - different dom elements
17:35 - and again these are set up when
17:37 - the constructor is ran for connect four
17:39 - so basically the moment we call
17:42 - new connect four and pass a selector
17:43 - it's going to set up those event
17:44 - listeners
17:46 - okay so again what we're trying to do is
17:48 - when you hover over one of these pieces
17:50 - it's going to put an indicator at the
17:51 - bottom
17:52 - so how do we do that
17:55 - the first thing i think you need to know
17:57 - is
17:58 - how do we know which column or row that
18:00 - we've hovered over in this case we just
18:02 - need to know the column id right
18:04 - so we can't really you know do
18:07 - there's not really good ways to do that
18:08 - i guess so what we can do is go back to
18:10 - when we're creating the grid and we can
18:12 - add different attributes to the column
18:14 - so here i could say
18:16 - add
18:17 - attribute
18:19 - actually in fact it's just attr instead
18:21 - of add it's attr and i can pass the
18:24 - attribute i want to add so i can say
18:26 - data call
18:27 - and then of course we want to give it
18:28 - the attribute of column index and then
18:30 - here for row which we'll use later on
18:33 - we're going to go ahead and give it the
18:35 - the row index here so here you have
18:38 - the row index which will be 0 through
18:40 - 5 and then here would be the column
18:42 - index which is zero through six
18:46 - now at this point if i save this and we
18:48 - were to hover over we see that now every
18:50 - time we hover over a different column
18:52 - we have a easy way to grab you know
18:54 - which index like zero zero being the top
18:57 - left as we go down we get the zero five
18:59 - and as we go to the far bottom right
19:01 - corner we get to six five
19:04 - so again we use these two attribute
19:07 - methods in jquery to just go ahead and
19:08 - add an attribute to the cell
19:11 - and then over here
19:12 - what we could easily do is just
19:16 - print those out
19:18 - so if i were to say
19:19 - on to column is equal to
19:21 - money sign this dot data of column
19:26 - then print out what column is equal to
19:29 - and go ahead and save that notice that
19:31 - it's going to print out
19:33 - 0 1 2 3 4 5 6
19:35 - as i hover over things
19:40 - you might ask okay so what was the
19:41 - purpose of that why do we why do we need
19:42 - to get the column index so again we need
19:44 - to kind of when we hover over column
19:46 - let's say one
19:48 - we need to grab all of the
19:50 - cells in that column and loop it
19:52 - backwards over them until we find an
19:53 - empty one and once we do find an empty
19:55 - one we can just go ahead and change the
19:57 - look of that column
20:00 - it might not make too much sense let me
20:01 - just go ahead and start working on
20:03 - coding it up and we will see what i mean
20:08 - so what we want to do again is
20:10 - as we hover over
20:12 - one of these cells we want to get the
20:14 - last
20:15 - empty cell that's in that column
20:18 - so let's just first assume that we have
20:20 - a method that we can do that so we use a
20:21 - con's last empty cell
20:23 - is equal to find last empty cell and
20:26 - then pass it the column index
20:29 - and so up here inside set up event
20:31 - listeners we can just go ahead and
20:32 - declare that function
20:37 - and assuming that it does return
20:39 - something that we can use
20:42 - we could just go ahead and add a class
20:43 - to it so last empty cell
20:46 - dot add class
20:50 - is equal to
20:52 - i'm just going to do something called
20:53 - next
20:55 - i'll say red
20:58 - and we'll probably change the name of
20:59 - this later in a second
21:02 - but of course if we had a style called
21:05 - next red we could just change the
21:07 - background color
21:10 - to
21:10 - [Music]
21:12 - a red value with some opacity
21:16 - i'll make it a really really really
21:17 - faint red
21:19 - if we hover over
21:21 - one of the columns
21:24 - rearrange this
21:27 - okay so now we want to implement that
21:28 - fine last empty cell method which we
21:31 - defined up here on line 29
21:33 - so to do that
21:35 - remember what we're trying to do is we
21:37 - need to grab all of these cells in that
21:39 - column that we selected so the way to do
21:40 - that using jquery is we we can say const
21:43 - cells is equal to and then using jquery
21:46 - say grab me all the columns
21:48 - that have the same attribute data hyphen
21:50 - column
21:51 - if you remember we added that earlier on
21:54 - equal to the column index that we passed
21:56 - in
21:58 - if i were to print out what cells is at
22:00 - this point we should get an array of a
22:02 - lot of different elements as we hover
22:04 - over stuff
22:06 - um let's see add class of
22:08 - well right now i'll count that out
22:09 - because it's not going to work as
22:10 - intended
22:12 - but now i hovered over something and i
22:14 - go here and we have a
22:19 - i'm not 100 sure this is working yet
22:21 - because i forgot to put a
22:23 - a colon there or a comma there
22:27 - okay there
22:30 - so i added this single quote
22:32 - here and that fixed the bug and
22:33 - basically now when we hover over one of
22:35 - these columns it's going to show us all
22:37 - of the cells that are in that column and
22:40 - so kind of visualizing here what we need
22:41 - to do programmatically
22:44 - is we just need to start at the very end
22:45 - and just keep looping backwards until we
22:47 - find an empty one
22:48 - it turns out in all these cases these
22:50 - are all empty so we can just grab the
22:52 - last one if it's empty we just add a
22:54 - class or remove a class empty from it
22:56 - and we could just add something else to
22:58 - it
23:00 - so in this one i'll say
23:02 - loop over all of these things
23:05 - backwards
23:10 - and then grab the cell that we're
23:12 - currently at i'll say cells of i
23:15 - basically again we loop over backwards
23:17 - we get the jquery representation of the
23:20 - cell that we're at and we say if the
23:22 - cell has a class of empty
23:26 - we want to just go ahead and return that
23:28 - cell and otherwise we just return
23:30 - null
23:33 - but now this method will just return as
23:34 - the last jquery instance that has an
23:36 - empty class attached to it if i were to
23:39 - go down here and then of course add that
23:40 - new class
23:45 - notice that as we hover it's going to
23:46 - add
23:48 - kind of a placeholder at the bottom and
23:49 - of course we need to add a a mouse leave
23:52 - event to kind of remove that class
23:55 - so let's go ahead and just work on
23:56 - fixing that bug and it shouldn't be too
23:58 - difficult
24:00 - basically inside the setup event
24:02 - listeners what we can do is add another
24:04 - on
24:05 - callback function so i'll say on
24:07 - mouse leave
24:09 - and if this is invoked on any column we
24:12 - could just say
24:13 - all a function
24:15 - and then of course we can say remove all
24:17 - of the classes
24:20 - that have next red attached to them
24:25 - now as we hover over
24:27 - notice that it's going to remove
24:30 - the last one that it added and of course
24:31 - there's probably other ways to do this
24:34 - but um this is a decent way that comes
24:36 - to mind just from coding so let's go
24:37 - ahead and commit this to the repo
24:40 - this is a good um
24:42 - some good functionality we added so i'm
24:44 - going to go ahead and say
24:45 - edit functionality for hovering over
24:49 - columns
24:50 - go ahead and add that
24:53 - go ahead and push that
25:00 - and just make sure that it's here now
25:01 - and we have
25:04 - just now we updated some stuff
25:09 - so now if you want to see the
25:10 - functionality changes from setting up
25:12 - the initial grid to seeing these event
25:14 - listeners you can do so by just simply
25:16 - clicking commits here
25:19 - and then viewing the commits
25:23 - to um sorry so now at this point what we
25:25 - can do is if we were to click on one of
25:26 - these columns
25:27 - we want to go ahead and just place a
25:29 - piece
25:30 - in the bottom row or wherever the next
25:32 - quote-unquote slot should be
25:36 - again we could just add another listener
25:40 - which is going to be
25:41 - money sign board on click
25:44 - and then if we click on an empty
25:48 - cell
25:49 - or empty dom element that has the class
25:51 - empty
25:53 - what we can do is again
25:54 - we know what we clicked on so we can get
25:56 - the column and the row so i'll say cons
25:58 - to call is equal to this of data call
26:03 - and then same thing with row so we know
26:05 - which column in row was clicked
26:10 - in fact i'm not sure if we even need
26:12 - this at this point but it would be good
26:14 - to know
26:17 - um so remember yeah if we were to let's
26:18 - say an example if we were hovering over
26:20 - this one here
26:22 - and we click it
26:23 - we want to place the
26:26 - player's token or the circle at the very
26:28 - last one so we can call that same method
26:30 - called find last empty cell
26:35 - and pass it the column index which will
26:36 - give us that last empty cell
26:39 - and then what we can do is just simply
26:42 - remove the empty from it so i can say
26:44 - last empty cell remove class of empty
26:49 - move class empty and then last empty
26:52 - cell
26:53 - i could add a class of
26:56 - red
26:58 - in fact i'll get rid of row for now we
27:00 - don't really even need row
27:02 - so just to demonstrate what's going on
27:03 - if i again were to try this out and just
27:05 - click on one of these
27:07 - we should now have a class of red
27:09 - attached to that which we do but we
27:11 - didn't actually declare a style for it
27:13 - so let's go back here and say
27:15 - all of red
27:16 - is equal to background color of red
27:21 - so notice here we get a red every time
27:23 - we click
27:29 - which is pretty awesome so
27:31 - secondly let's go ahead and make a
27:32 - column of black
27:34 - because we know we're gonna have red in
27:35 - a black player
27:38 - and again i'll do a next black
27:46 - so at this point what we want to do is
27:48 - kind of alternate between if i was
27:50 - player um red or if i was player black
27:53 - so
27:54 - up here we can just go ahead and add
27:56 - another member to this class and i'll
27:58 - say player is equal to red so we start
28:00 - off as player red
28:02 - and then after we drop
28:05 - that cell into um
28:07 - the grid
28:08 - we just need to kind of
28:10 - switch around
28:12 - the player
28:15 - so if i wanted to kind of switch from
28:17 - player red player black on this member
28:20 - here
28:21 - we first need access or we need to keep
28:23 - reference
28:24 - to the original object so a little
28:27 - hack if you're familiar with javascript
28:29 - you typically have to do something like
28:30 - this
28:31 - to retain access to the original this
28:34 - attribute
28:36 - um
28:37 - you may say okay why don't you just use
28:39 - a fat arrow here but the issue is i also
28:41 - need access to
28:42 - the
28:43 - event called this and this function
28:47 - so instead on line 29 i'm just going to
28:49 - say const that is equal to this and then
28:50 - down here i can say
28:52 - that dot player
28:55 - is equal to and then if player is
28:57 - already equal to red
28:58 - i'm going to change it to black
29:00 - otherwise i'll change it to red this is
29:02 - going to kind of alternate between
29:05 - placing a red piece and a black piece
29:08 - and of course here we can say that dot
29:10 - player instead of just placing red every
29:12 - single time
29:14 - and up here
29:16 - outside these two functions instead of
29:17 - placing um
29:20 - red every time we hover
29:21 - or removing red every time we hover
29:24 - we could instead just say
29:26 - uh that dot player as well
29:35 - so again recap we added a player
29:37 - attribute to the class
29:39 - which is going to be either the string
29:40 - red or the string black
29:43 - and then as we enter or leave or click
29:46 - on these different columns we're going
29:47 - to be using that to remove classes and
29:50 - add classes so the first thing is if
29:52 - we're player red
29:55 - actually one second there's an issue so
29:56 - as we hover we see that we are placing
29:58 - next hyphen black
30:00 - but i think the color is not what
30:05 - because
30:07 - 255 is white
30:09 - let me change it to black
30:12 - so now as we hover over we have black
30:14 - okay
30:17 - so start over
30:18 - first player that goes is red and when
30:20 - he clicks
30:21 - it's going to place a red piece and now
30:23 - when i move over it's going to be an
30:24 - indicator of a black
30:26 - when i click it's going to place a black
30:28 - piece
30:31 - so i can just go ahead and just keep
30:32 - alternating between these which is
30:33 - pretty cool
30:35 - um one thing i noticed is that when i
30:38 - click
30:40 - the indicator doesn't show up anymore
30:42 - and also there should be a pointer so
30:45 - the first thing i'm going to do here is
30:46 - go back to
30:48 - column i'll say column of empty
30:52 - a pointer or cursor is equal to pointer
30:59 - now when we hover over empty cells it's
31:01 - going to be a pointer
31:04 - and the second bug i'm trying to fix is
31:05 - once you click i want the indicator to
31:07 - show up automatically again for the next
31:10 - player
31:11 - so to fix that bug
31:15 - look at the code really quick and try to
31:16 - understand what's going on
31:18 - i think basically
31:20 - we all we need to do is just kind of
31:23 - force the
31:24 - event mouse enter to trigger
31:27 - on the piece that we just
31:31 - laced i believe
31:33 - so the last empty cell
31:36 - obviously need to remove that we can
31:38 - also remove um
31:42 - at next
31:43 - that dot player
31:46 - and just go ahead and change that to
31:48 - back tick
31:50 - so we can interpolate the string there
31:52 - and then update player at the very end
31:54 - and then of course
31:56 - we need to
31:57 - [Music]
31:59 - just invoke that mouse leave or mouse
32:01 - enter function on that column
32:03 - like say this dot mouse or
32:06 - this dot trigger
32:08 - mouse enter
32:11 - see if that kind of fixes the issue
32:16 - okay which it kind of does
32:20 - but one issue is that we're retaining
32:22 - [Music]
32:24 - that last piece that we
32:27 - okay so did
32:27 - spent some time trying to figure out
32:28 - what the issue was and i think it's
32:29 - because i'm adding
32:31 - um mouse enter trigger right before we
32:34 - switch the player and instead we need to
32:35 - do it after
32:37 - so if i were to do this
32:40 - okay i think that's working as is
32:45 - cool so now we have the functionality to
32:48 - alternate between the different players
32:50 - so red player and black player
32:52 - and at this point i think this is a good
32:53 - stopping point to again commit our
32:55 - changes so i'm gonna go ahead and say
32:58 - alternate
32:59 - alternating between players
33:03 - go ahead and add that
33:04 - push that to the repo
33:09 - cool so we have a really cool connect 4
33:11 - grid that we can click and play around
33:13 - with to alternate between red and black
33:16 - so now the next step is
33:19 - once we place
33:21 - these pieces
33:24 - how do we know if a player wins when
33:26 - they connect four
33:30 - um so basically whenever we click a
33:32 - piece right after that we need to check
33:34 - the grid
33:35 - see if someone has one or not
33:39 - so to do so let's go ahead and just
33:40 - start off with making another function
33:43 - and that function i'm going to call is
33:45 - check for
33:46 - winner
33:49 - and inside this function
33:52 - as two parameters or arguments is going
33:54 - to take is the row and the column that
33:57 - you last clicked
33:59 - so for example let's say we were to
34:01 - click on this column here
34:03 - and place that black one at this point
34:06 - we need to then check if there's a
34:08 - diagonal or a vertical or a horizontal
34:12 - row
34:13 - or line which allows that last piece
34:16 - which was black to win
34:17 - so if i were to click and check in those
34:20 - directions if that last piece dropped
34:22 - wins then we know that the game's over
34:26 - so basically what we can do
34:29 - is inside the click method
34:31 - before we change the player
34:33 - we could just do
34:36 - a const winner is equal to
34:38 - that
34:39 - dot check for winner
34:41 - and i'm going to pass in
34:44 - the row and the column
34:46 - so here i can say row and then i can say
34:48 - column here
34:50 - and in fact we could just go ahead and
34:52 - parse these as ins
34:57 - i'm not sure if we need the parts those
34:58 - as in
35:00 - um
35:05 - yeah when we click on the cell we just
35:08 - go ahead and check for winner of row and
35:09 - column
35:10 - and then down here we can say if there
35:11 - is a winner we can just do
35:14 - some stuff
35:16 - [Music]
35:17 - and in fact i'll just do an alert and
35:19 - say game over
35:22 - do backtick so we can do a string
35:24 - interpolation so game over
35:26 - player
35:27 - that dot player
35:30 - as one
35:32 - and just go ahead and return out of that
35:35 - um and we can also kind of keep track of
35:38 - well
35:39 - do something like that later okay so
35:40 - whenever there is a winner which in this
35:42 - case this function doesn't return
35:43 - anything
35:44 - so if this function does return a string
35:46 - or a boolean or something that's
35:48 - equivalent to true then it's going to
35:50 - print out this alert
35:53 - so to implement this function let's go
35:55 - ahead and go down to check for winner
35:58 - and what we want to do
36:01 - is we kind of want to check on all the
36:03 - different directions
36:05 - so
36:06 - horizontally vertically or diagonally
36:08 - if there are four in a row
36:12 - so to kind of start off
36:14 - i'm just going to write a
36:16 - first function so i'll say return
36:19 - check verticals
36:22 - so that assumes that we have a function
36:23 - called check verticals
36:24 - up here i'll say function check
36:26 - verticals
36:27 - and what check verticals is going to do
36:29 - is we want to have it return
36:31 - a call to a function called check when
36:35 - so inside here i'm just going to pass it
36:38 - some directions
36:40 - like remember we were to so if we take a
36:42 - step back and just think let's say we
36:44 - pass in row
36:45 - of two and column of two
36:48 - if we were to check the verticals
36:51 - we know that we need to check in the
36:52 - direction
36:53 - up in the direction down
36:56 - so here for check when we're just going
36:58 - to assume that there's a function called
36:59 - check when
37:01 - and that's going to have direction a and
37:02 - direction b
37:05 - and
37:06 - in this case for verticals we can just
37:08 - pass in i of negative one and j of zero
37:12 - and then again we can check in the
37:15 - down direction so i of one and j of zero
37:18 - as well
37:20 - and that's going to kind of pass in
37:23 - a direction
37:24 - which is going up in this case and the
37:27 - direction b would be going down in this
37:28 - case
37:34 - and so at this point the function check
37:36 - when is what we need to do
37:38 - is kind of sum up all of the
37:41 - tokens or cells that match the current
37:44 - player's
37:45 - color
37:48 - up here i'll say that is equal to this
37:50 - just so we can keep track of that just
37:52 - in case we need player
37:54 - um
37:55 - i'm inside here we're going to say keep
37:56 - track of the total which is going to be
38:00 - equal to 1
38:02 - plus we're going to have another match
38:03 - called check direction
38:05 - of a
38:07 - and then we're gonna also check the
38:08 - direction of
38:10 - b
38:11 - and so what we mean by this is
38:13 - obviously the piece we just placed down
38:16 - is going to be
38:18 - equivalent to one we know that there's
38:20 - already one piece that's red now we need
38:22 - to check in the up direction in this
38:23 - case
38:25 - which is i negative one and then we also
38:27 - need to check in the down directions
38:28 - which is going to be i of one and j of
38:31 - 0.
38:32 - and so if the total added up you know 1
38:36 - plus everything above which is also red
38:39 - and everything below which is also red
38:40 - is equal to 4 or greater so i say if
38:43 - total is greater than equal to 4
38:45 - we know that we can just return the
38:47 - player that we found so i could say that
38:49 - dot player
38:51 - and then otherwise
38:53 - we could just return
38:55 - null because we haven't found an actual
38:57 - player who has one yet
38:59 - um so to get to the player that is at
39:02 - the cell that we just clicked on
39:06 - right now that dot player may not
39:09 - let's see if that player is fine
39:11 - pick for winner yeah because we don't
39:13 - change the player until after
39:15 - so this is fine
39:18 - the next method we need to do is a check
39:20 - direction method
39:22 - so i'll say direction
39:25 - inside the track direction
39:27 - method what we need to do is basically
39:29 - increment in that direction while we're
39:31 - still inside the grid and check
39:33 - if the color that we just hit
39:35 - also matches the color that we're
39:37 - looking for
39:39 - so i'm going to say let total is equal
39:40 - to 1 let's keep track of the number of
39:42 - slots that we found that are the exact
39:44 - same color that we're looking for
39:45 - so let i is equal to um
39:49 - that's going to be equal to the row thus
39:51 - passed in
39:52 - plus the direction in the i direction
39:55 - and then let j is equal to the column
39:58 - plus the direction in the j direction
40:00 - now this
40:01 - point if let's say we were checking the
40:03 - direction up
40:05 - we're just going to go ahead and add in
40:06 - like one step further
40:09 - and check it
40:10 - and then we can just go ahead and get
40:12 - the cell
40:13 - so
40:14 - we don't really have a method to do that
40:15 - so let's just go ahead and write a
40:16 - function called get cell
40:18 - ticks in a row and a column
40:20 - and what we can do is just return using
40:23 - jquery
40:26 - same row which matches that so if i were
40:29 - to do this
40:31 - in fact i'll do
40:33 - i and i'll do j
40:35 - give me the row that is equal to the i
40:39 - and then give me the column
40:40 - which is equal to
40:43 - j
40:47 - now we have a method for getting the
40:48 - jquery cell
40:50 - i'll do money sign get cell and then
40:52 - here i can say let cell is equal to get
40:54 - cell of i and j
40:59 - so this point we've gotten the cell
41:02 - which is one iteration above the current
41:05 - one that we dropped
41:06 - again if we were to click here it will
41:08 - grab us this one above
41:10 - and what we want to do is just keep on
41:11 - doing this logic while we're still in
41:13 - bounds so i can say while i is equal to
41:15 - 0
41:17 - and
41:18 - i is less than to that dot rows
41:21 - and
41:22 - j is greater than equal to zero
41:26 - and of course j is equal to that dot
41:28 - columns
41:30 - or j is less than that dot columns and
41:34 - then finally i can say
41:35 - while the player
41:37 - that we're
41:38 - currently looking at
41:39 - is still equal to the player that we
41:41 - just dropped
41:43 - we need to keep incrementing and doing
41:44 - this loop again so i can say total plus
41:46 - plus
41:47 - the i is plus equal to step of i
41:50 - same thing with j
42:00 - and of course increment next
42:02 - the next is equal to get the cell of
42:05 - i and j
42:10 - change that to next instead of that
42:15 - one thing i'm not sure if we're adding
42:16 - to the actual cell that we dropped is
42:18 - the player
42:19 - so i'm going to say last empty cell dot
42:21 - data of player is equal to that dot
42:23 - player
42:24 - but we actually know what
42:26 - you know cell is set to what player
42:31 - um
42:35 - so that was a win in the vertical
42:37 - direction
42:39 - let's go ahead and see if this is going
42:40 - to crash when we're just playing around
42:41 - with it
42:43 - we're already getting an error so let me
42:44 - go to the console
42:46 - thing a is not defined
42:50 - because i did not put direction a and
42:52 - direction b there
42:56 - okay
43:01 - all right so check direction step is not
43:03 - defined
43:08 - that should be called direction not sure
43:10 - why i did step
43:12 - let's try it again
43:18 - all right so now we're running into an
43:19 - issue where it's not saying the game is
43:21 - over when it should
43:23 - um so what we can do is a little bit of
43:24 - debugging here and say
43:27 - obviously the winner is not being set
43:28 - correctly
43:31 - so let's see
43:32 - probably because i'm not returning the
43:34 - total here
43:40 - again keep on trying
43:44 - cool so it actually checks in the
43:45 - vertical direction and it says player
43:47 - red has one
43:48 - and in this case the game is over but we
43:50 - can keep on placing crap because we
43:51 - haven't added like a an ending condition
43:53 - to our game
43:56 - so let's try to do the same thing with
43:57 - the other directions so we need to check
43:59 - the horizontals as well
44:00 - [Music]
44:03 - so if i add another function
44:05 - and just call it
44:06 - check horizontals
44:12 - and this one's going to be
44:14 - static in the row direction but we're
44:16 - going to go from left
44:18 - to right
44:21 - i'm just going to go ahead and say call
44:22 - check verticals in
44:24 - or or with check horizontal so that
44:27 - if any of these return a string it's
44:28 - just going to go ahead and return the
44:30 - string otherwise it's going to return
44:31 - null and we know that there's no winner
44:33 - if that's the
44:34 - case so now by simply adding that method
44:37 - here we should be able to check wins in
44:39 - the horizontal direction
44:41 - so if i were to just do the same thing
44:43 - like this
44:45 - oops black has one all right so there's
44:47 - a bug where it made player black win
44:49 - even though we only dropped
44:51 - three
44:53 - let me refresh the page and try to
44:57 - test out the horizontals again
45:02 - so there's a bug going on let me just
45:04 - double check what's going on
45:08 - so sometimes when you run into issues
45:10 - like this it just helps to
45:12 - start running the debugger
45:14 - so here i'm just going to go ahead and
45:15 - add a debugger here so we can kind of
45:16 - step through our logic try to figure out
45:19 - what's going on
45:21 - every time we place a key
45:27 - i'm gonna stop in our debugger and we
45:28 - can walk through what the issue may be
45:32 - x is a little bit too big so let's go
45:34 - ahead and do that
45:45 - i'm basically just setting it up so i
45:47 - can just
45:48 - check that last case where i do a
45:49 - horizontal
45:53 - so here when i place this piece
45:56 - we're into the debugger now and we can
45:57 - kind of step through and try to figure
45:59 - out where we're going so i is in the
46:00 - zero direction
46:02 - j is in the one direction
46:04 - which means it's going to go to the
46:05 - right and check remember the last piece
46:07 - we put was this one right here
46:10 - then we go ahead and grab the cell here
46:13 - which is not finding anything
46:29 - so that might be our issue
46:41 - some reason this is negative one
46:45 - which it shouldn't be and this is one
46:48 - um
46:52 - let's step forward and see if we can
46:54 - find something here
46:58 - the row and column
47:00 - is zero in
47:10 - okay so i think the issue is row and
47:12 - column for some reason they're zero and
47:13 - one
47:14 - but they should be set to whatever this
47:16 - down here was which was like five and
47:18 - two or something
47:20 - so if i were to go back to check for
47:22 - winner and find out what exactly we're
47:24 - passing into it
47:31 - out row and column
47:36 - go ahead and refresh this page
47:40 - when we click this it should be printing
47:42 - out
47:48 - not that value
47:51 - 0 and 2.
47:54 - the column is correct but the row is not
47:55 - correct this should be row 0 1 2 3 4 5.
48:00 - i must be adding the incorrect data
48:03 - to row here
48:10 - that is added
48:11 - somewhere up here i believe when we
48:13 - create
48:17 - the data of row
48:21 - set to row
48:22 - [Music]
48:24 - data of column is set to call
48:30 - oh i know why because i'm i'm passing in
48:32 - the one that i clicked instead of the
48:34 - last empty one
48:37 - right so what i need to do instead
48:42 - is i need to pass in
48:44 - here
48:47 - a last empty cell
48:50 - dot data of row
48:52 - and a last in cell of data of column
49:00 - let's go ahead and save that
49:07 - get rid of the debugger because that
49:08 - might just have fixed the issue there
49:24 - cool so now horizontals seem to be
49:25 - working fine
49:31 - and the last thing we need to do
49:34 - is check the diagonals
49:36 - so there's going to be two functions we
49:37 - need to do for the diagonals there is a
49:39 - bottom left the top right so i'll say
49:40 - check
49:41 - diagonal
49:44 - bottom left to top right
49:47 - and then here we can just return check
49:48 - when and if we know the directions we
49:50 - say i
49:51 - need to go down and then j we need to go
49:53 - negative so to the left
49:56 - so that would be
49:57 - from the point that we clicked go down
49:59 - to the left
50:01 - and then also both positive up
50:04 - into the right
50:09 - and of course we need to use that
50:11 - they check diagonals here
50:18 - and we could add that last method which
50:20 - is going to be called check diagonal
50:22 - of top left to bottom right
50:26 - and the difference is this is going to
50:28 - go up
50:29 - right
50:31 - sorry down to the right and then
50:34 - up
50:35 - left
50:37 - and of course i'll just call it down
50:38 - here
50:41 - so now when i say this we should be able
50:43 - to check if diagonals are working so
50:45 - let's go ahead and
50:46 - make layer redwin
50:51 - and it works in the top right diagonal
50:53 - and let's try it again
50:55 - with the other diagonal
51:06 - and it's working there as well
51:10 - in fact i don't think i've checked it
51:12 - with black so let me just
51:14 - take black one
51:18 - cool so that's working as well
51:20 - all right so now we have the
51:21 - functionality to check who won by
51:23 - checking the horizontals the verticals
51:25 - and the diagonals that are from top left
51:27 - to bottom right and from bottom left to
51:29 - top right
51:31 - and we ran into a little bit of issues
51:32 - debugging
51:33 - because i named some stuff wrong but
51:36 - luckily we got to see how to debug stuff
51:38 - in the debugger
51:40 - um i think
51:42 - now at this point what we want to do is
51:44 - we're we're seeing some issues so even
51:46 - though the game is over we can still
51:47 - place crap down
51:51 - so what we want to do now is we can say
51:53 - add a new
51:55 - member called is game over set equal to
51:57 - false when the game starts
51:59 - and then what we can do is down here
52:01 - when we've won we can say this dot
52:05 - sorry that dot is game over is equal to
52:06 - true
52:09 - and then whenever this is true
52:12 - we could just return our stuff so
52:14 - if the game is already over we don't
52:16 - want to be able to click on anything
52:18 - if the game is over we don't want to be
52:20 - able to do any of this mouse enter stuff
52:28 - so let's see if i were to save this now
52:30 - and then just go ahead in the game
52:35 - notice that i can no longer place
52:38 - and when i hover over stuff nothing
52:40 - happens
52:41 - then one more thing i'm noticing is that
52:42 - the hover for empty is still there so
52:44 - i'm just going to go ahead and remove
52:45 - every class
52:47 - that has it so when the game is set to
52:53 - true i can just go ahead and say grab me
52:55 - all the empty
52:58 - cells or columns so i say call empty
53:01 - i'll say remove class of
53:09 - all right so let's try to make a redwin
53:12 - and now i don't have that pointer cursor
53:14 - anymore when i hover over the empty
53:16 - cells
53:18 - yeah so that i think that basically
53:19 - wraps up the connect four i mean the
53:21 - last thing i could probably do is i
53:22 - could add a restart method to this class
53:26 - so i can say restart and i could say
53:29 - this dot create grid
53:32 - um
53:33 - inside create grid i can say this is
53:35 - game over it's equal to false
53:38 - desktop player equal to red again
53:47 - see i'm not sure there's anything else
53:50 - so inside index html we just go ahead
53:52 - and add a restart button
53:55 - so i say button
53:57 - restart
54:00 - within a new line
54:03 - all right so when we click it
54:06 - inside main.js we can just say
54:10 - um whenever we click the restart button
54:14 - just call connect4 dot restart
54:22 - of course i'll add an id called restart
54:24 - to this
54:26 - so if i were to place a bunch of stuff
54:28 - down and then restart
54:30 - oh so now it's placing two grids i
54:32 - forgot to um
54:34 - what we need to do is just empty out
54:36 - the container that we have so on connect
54:38 - four if i were to say
54:40 - great grid i could just say board
54:43 - dot empty
54:45 - and that's going to go ahead and remove
54:46 - all the html elements from the board
54:48 - when we restart
54:54 - all right so that's pretty cool
54:56 - it's still working
54:59 - um i think okay so the last thing i'm
55:01 - going to do is i want to be able to
55:02 - display instead of hello world like
55:04 - when it's your turn like it's player
55:06 - red's turn or whatever so if i go back
55:09 - to index.html
55:12 - and inside here if i say it's
55:15 - a span id of
55:18 - player just start off with like red or
55:21 - something or i can keep it blank
55:24 - actually no i will keep it with red
55:28 - i'll say it players or it's red's
55:31 - turn
55:33 - when i save this it says it's red's turn
55:41 - is red's turn okay so now
55:43 - [Music]
55:44 - we click we need to switch it to
55:46 - whatever the player was so here
55:48 - what we could do is just add like a
55:49 - callback listener so i could say connect
55:52 - four on player
55:55 - booth
55:56 - set it equal to some function
55:59 - and i can say
56:02 - set the player text
56:04 - to connect
56:06 - or not player
56:09 - of course we don't actually have an on
56:10 - player move called anywhere in connect
56:12 - four so if i were to go here inside the
56:14 - constructor and say create a new
56:16 - function
56:18 - hold on player move and then whenever i
56:20 - click
56:21 - and place something inside the cell i
56:23 - could just say
56:25 - that dot on player move and call it
56:29 - so now when i click
56:31 - notice that it is rotating
56:35 - in fact it's off by one it's saying the
56:37 - wrong thing so instead i'm going to do
56:39 - it
56:40 - there after we change the player so
56:42 - right now says it's red's turn click it
56:44 - says it's black's turn
56:46 - i can keep alternating
56:48 - between the different players
56:50 - and i can restart
56:58 - so that's an issue when i restart it's
57:00 - not actually changing the
57:06 - player up here
57:11 - so what we could do is
57:13 - again
57:14 - just call bat whenever we create the
57:16 - grid
57:18 - or whenever we restart so create the
57:20 - grid
57:20 - let's say this dot
57:22 - or that dot on player move
57:26 - let's see what happens if we do this
57:34 - so i'll go ahead and commit this stuff
57:36 - so i'll say final stages
57:39 - of
57:40 - allowing
57:41 - alternate
57:43 - players to check if someone
57:46 - is one
57:49 - go ahead and push that to the repo
57:58 - yeah so i don't know if that was maybe
58:00 - that was too quick hopefully that was
58:01 - well explained or if it wasn't too
58:02 - confusing but i'll do a really quick
58:04 - recap one more time um
58:06 - basically we create an html file which
58:09 - has
58:10 - it's h4 so we can display its redstone
58:12 - or black turn
58:14 - and we're changing that every time we
58:15 - click or place a piece
58:18 - we have this connect four div
58:20 - which basically our connect4 class is
58:23 - going to render stuff into
58:24 - and then of course we have a restart
58:25 - button which basically will just restart
58:27 - the state of our game
58:29 - then inside connect four
58:31 - when the grade is created we create the
58:33 - grid and we set up some event listeners
58:36 - and then on every time we click on a
58:38 - cell
58:38 - or column we're going to just do
58:40 - different things so like if it is player
58:42 - red's turn
58:43 - we're going to place a red token
58:46 - or if it's player black's turn we place
58:48 - a black token
58:49 - and then same thing when we hover over
58:52 - different columns we again just change
58:55 - the hover state
58:58 - um every time we click after we click we
59:00 - check to see if someone has one or the
59:02 - last pers
59:03 - last player who went to see if they won
59:05 - if they have we just display an alert
59:07 - and say the game's over
59:08 - and then we switch players from black to
59:11 - red here
59:12 - um we trigger
59:14 - al's enter just because that fixes a bug
59:16 - with the hover states
59:19 - um yeah so
59:21 - again feel free to leave me feedback let
59:23 - me know if this tutorial was way too
59:25 - fast or fast paced
59:27 - i should have slowed it down in the
59:28 - future um i didn't want this thing to
59:30 - take too long to do but i think right
59:32 - now we're pushing around an hour
59:34 - and again feel free to grab the
59:37 - project from my repo so js hyphen
59:40 - connect hyphen 4 and again i'll put this
59:42 - on youtube so you can easily just grab
59:44 - it and use it
59:45 - or i'll put a link in the youtube
59:47 - description so you can play around with
59:48 - it
59:49 - um
59:51 - yeah hopefully the tutorial was useful
59:53 - uh feel free to subscribe and look
59:55 - forward to new videos in the future
59:57 - alright thanks for watching

Cleaned transcript:

hey everyone i'm cody and welcome to a video where i'm going to show you how to build a js a javascript connect 4 game using jquery javascript html5 css whatnot and um let's go ahead and just get started right so obviously you know what connect four is or you should so if you don't i'll go to connect four go to images you know connect four is this game where you have this grid and each player can alternate taking terms placing their color circle so we're gonna try to build that which basically whenever you get four in a row you win the game so that's kind of a reference that we can go off of um let's go ahead and get started so on the left i have an empty project over here which has absolutely no files in it it's just a blank git repo and on the right i have that project hosted using http hyphen server which is a node module you can use if you want to host um like html files or whatnot that's kind of my setup so to start off how would you build a website or a web page which displays a grid that has this type of a structure in it like here is a good example i guess we can go off of so to start off we need to first build up a blank html file so if i go over here and just say new file index.html here we can actually write our html file if you want to and say build an html we need a head and we need a body inside the head i'll just go ahead and get the title and call it connect 4 and also inside here we can start including some things the first thing i'm going to do is include a style sheet i'm going to say there's a local style sheet hosted in this folder which we can add in one second now called style.css go ahead and make this font a little bit smaller so we can see it so this page is going to load in style.css which we haven't created yet so i'll go ahead and just create a dial.css and i'm also going to create a main.js file so inside our index we can just go ahead and import that as well up here i'm going to go to add a new element called script i'm going to first include main.js down here i can just do something simpler like hello world just to make sure this is working and if i were to refresh the page we have hello world printing out and inside the console my dev tools if i were to go to the console over here i want to make sure that this main.js thing is loading and running correctly i can go over to my main.js file and say console.log here save that file and refresh this page and we get here printed out all right so we have our basic setup going and again we can just test to make sure that the body is working so i can say background color is orange save that and it is refreshing the screen using live reload on the background so if you remember i did mention that we're going to be using jquery and i'm mainly using jquery because it has a lot of helper functions which allow us to do our job much more efficiently than using vanilla javascript might be kind of overkill but i like to use it just because it's really easy to select stuff and change data on stuff and whatnot so i'm going to go ahead and go to cdnjs and search for jquery and i'll go ahead and grab the jquery min.js copy this and then over here i can just first of all close my editor i can load that script in here and to verify that it is working i can say document ready it's going to go ahead and print out working if that isn't if that is indeed working all right so it says money sign is not defined that's because i loaded jquery after main so of course you need to load it before you run your script and now we get working printed out to the console so now we have jquery working we have our style sheets hooked up and we have our main.js file running as expected so to start off what we want to do is we want get rid of that body background color is we want to first figure out a way to dynamically build up a grid so inside our body if we were to just go ahead and make a div and call it connect 4 or something we want to populate that connect for div with some rows and columns that kind of show a grid that looks like this if you notice you have 1 2 3 4 5 6 7 columns and six rows so what we can do in our main js file is i'm going to go ahead and just clear out those console logs and just do a little to do here so is it to do draw a grid and they kind of help abstract this into different modules what i'm going to do first of all is make a connect 4 file and also include that right above main and what we're going to do inside connect 4. include connect 4 as a script and i have connect 4 over here basically what connect4 is going to do is declare a class called connect4 which we can use in our main file so i'm going to go ahead and just type this out i'll make a class called connect4 i'll give it a constructor i'll say this dot rows is equal to six and this dot columns is equal to seven over here on main i could just say make us a new grid our new connect four object so up here i can say const connect four is equal to new connect four and i'm gonna go ahead and pass it some type of selector so i'm just gonna do a string and you know this is up to us this is we can customize it however we want to but our constructor is going to take a selector so over here i'm gonna pass in selector but it knows where to render the grid if you remember on our html file we have an id called connect4 so what we want to do is inside main.js we're gonna pass that element or that id of connect 4 into this new connect4 object and what we want our connect for class to do is just go ahead and build up a grid so to kind of just show you what exactly is going on and kind of jumping around first thing i'm going to do is just to demonstrate i can say grid is equal to use jquery and grab that selector and then i can say grid.html is equal to hello so now when i say this notice that what it's doing is main is running it's creating this connect4 object passing the selector then the connect4 class is grabbing the selector grabbing the div and then adding html to the inside of that div all right so that's pretty awesome so what we want to do at this point again is we're trying to build that six by seven grid so i'm going to go ahead and create a method on this connect four class called create grid and the purpose of this function is to basically build up a bunch of divs like you know six different rows inside each row we have seven different columns and we're going to go ahead and call dot this dot create grid here so whenever this connect4 object initializes we're gonna go ahead and create the html for the grid and i'm gonna go ahead and just get rid of these things um and keep track of that selector that was passed in so to start off how would we create a grid the first thing i want to do is i want to grab that dom element so i can say const board is equal to jquery of this dot selector and that should give us if i were to print this out that should give us the div of connect 4. and inside of this connect 4 div we want to go ahead and just loop over and create six rows the one way you could do that is obviously use a for loop so set let row is equal to zero and i'll say row is less than this dot rows and row plus plus i'll do the same thing with the columns here so instead of let row i'll say let column in fact i'll take a step back so i don't want to confuse you all yet so let's just start with the row so for each row what we're going to do is create a new div so i'll say constant row and the way i kind of use this money sign in front of variable names it's just so i know that it's a jquery object this is just my convention you don't have to follow this but it just easily lets me know that hey this is a jquery object that we're messing with so we're saying const money sign row is equal to i'm going to create a new div using jquery and to do that you just do money sign and pass it the name of the dom element you want to create in this case it's div and i'm just going to go ahead and add a class to it called row and then of course i can say board dot append row and now if i were to print out the board after here we see that the board has actually put out the html of the board the board now has a bunch of rows nested inside of it and in course i can go here just kind of demonstrate that we have a div called id connect four and inside that we're creating six rows so six divs with the class row inside here so that's step one right we need to create six rows and the second step is we need to create seven columns inside of each of those rows so instead i can add another for loop here and again the one i put out a second ago i'm just going to loop over the columns now and for every iteration of this for loop i'm going to say constant call is equal to and then let's go ahead and create another div this one's going to have a class of call and empty so we can kind of style it and you know give it a style when it is empty versus when it has a red or a black token inside of it and i think that should be good for there and i need to append that column if i say money assign row dot append and then i pin the column onto the row and then for each row we append into the board if i were to save this now and go into the body we have a div called connect four it has six rows and each side each row it has seven columns so the dom element structure is there ready to go but we still don't really visualize it so what we can do at this point is we can dive into the style.css and the first thing i want to do is just add a couple of attributes to first of all connect four object which is our grid and we want to set the background color to yellow and we want to make it display in line block the body i'm just going to go text align center so that the grid is centered so again this made everything centered and this made the grid with the background color of yellow which we can't see right now because it has no height um but we will visualize that in one second so for every column that we have on the page we want to give it a particular width and height so we'll say width is equal to 70 pixels i do height is equal to 70 pixels save that and then so you saw here it kind of created all those but they're all on one like column which is not what we want so we can just go ahead and do a display inline block on the columns and that makes them all appear on the same row um or to hover over them you see that we have these columns side by side and that's because we added display inline block on line 13. almost done with this first let's set the background color to white and i'm going to add a border radius of 50 to make it round and finally we could probably add some margin over all the slots just so it looks more like a grid awesome so that wasn't too difficult let me just do a really quick recap so we're not really confused as to what just happened so inside this connect4 class we all create grid when the constructor is called and inside this constructor we basically loop over every row and create a div called row which you can see here and then inside of every row we just append seven different columns and then we went ahead and just add a bunch of different styles so it makes it look more like a connect four grid so not not too difficult right and jquery allows us to do this type of logic much more simple than just using vanilla js where you have to do like dot query selector and if you want to add a class or remove a class you'd have to do a bunch of other um in my opinion just like hacky ways to do it versus jquery just gives you really useful utility functions to do with the same thing just go ahead and minimize this a little bit so we have a grid again and what we can do at this point the next thing we're trying to achieve in fact before i go too much further let me just go ahead and commit what i have so i'll say added the grid or initial setup of grid add that go ahead and omit that or push that i mean and again as we work through this project i'm going to be committing and pushing stuff to our repo so if you were to go here and you wanted to actually kind of walk through how we did this stuff you could just look through all the different commits here and then first one i did initial setup of grid which has all these different changes and of course i'll add a read mean a little bit so you can actually run this um just do read me md really quick and we'll come back to that at the very end and i'll explain how you can run this easily on your computer alrighty so now for the next step what we want to do is as you hover over the cells in this grid we want to go ahead and just drop different colors so the easiest way to do that or at least the way i'm going to do it in this tutorial is i'm going to create another function inside this class which is going to set up event listeners and again there's more than one way to hold this up so if you find a better way to do this or if you think of a more elegant solution feel free to do it and give me feedback but this is just the way that i feel is a decent solution of this project so the first thing we want to do is call set up event listeners here so basically when we create the grid we're going to create a bunch of event listeners which are going to listen to different things such as hover events click events or whatnot um so the first thing i think would be useful is we want to kind of when we we enter one of these columns or cells we want to place an indicator as to where the piece is going to drop because again if you have like three pieces here already and you're hovering over this column it should drop it at this location so the first thing let's just go ahead and do const board is equal to this dot selector again i'm just grabbing that dom element called connect 4 or id of connect 4 and we're going to do a different listeners on that so i can say the first one is board dot on mouse enter and then this is a jquery method where you pass it the event you want to listen to the second argument is going to be the selector that you're going to listen to as well so i'm saying whenever we click on or hover over sorry an empty column let's invoke a function make this font a little bit smaller so we can see everything on one page in fact i could probably just a little bit because we're not going to be using more than that grid okay so basically when we enter one of these cells so i'll say here print out the cell that we've entered go ahead and go to the console now as we hover over these cells notice that it's printing out the different cells that we've heard over that's kind of how you'd add event listeners using jquery on different dom elements and again these are set up when the constructor is ran for connect four so basically the moment we call new connect four and pass a selector it's going to set up those event listeners okay so again what we're trying to do is when you hover over one of these pieces it's going to put an indicator at the bottom so how do we do that the first thing i think you need to know is how do we know which column or row that we've hovered over in this case we just need to know the column id right so we can't really you know do there's not really good ways to do that i guess so what we can do is go back to when we're creating the grid and we can add different attributes to the column so here i could say add attribute actually in fact it's just attr instead of add it's attr and i can pass the attribute i want to add so i can say data call and then of course we want to give it the attribute of column index and then here for row which we'll use later on we're going to go ahead and give it the the row index here so here you have the row index which will be 0 through 5 and then here would be the column index which is zero through six now at this point if i save this and we were to hover over we see that now every time we hover over a different column we have a easy way to grab you know which index like zero zero being the top left as we go down we get the zero five and as we go to the far bottom right corner we get to six five so again we use these two attribute methods in jquery to just go ahead and add an attribute to the cell and then over here what we could easily do is just print those out so if i were to say on to column is equal to money sign this dot data of column then print out what column is equal to and go ahead and save that notice that it's going to print out 0 1 2 3 4 5 6 as i hover over things you might ask okay so what was the purpose of that why do we why do we need to get the column index so again we need to kind of when we hover over column let's say one we need to grab all of the cells in that column and loop it backwards over them until we find an empty one and once we do find an empty one we can just go ahead and change the look of that column it might not make too much sense let me just go ahead and start working on coding it up and we will see what i mean so what we want to do again is as we hover over one of these cells we want to get the last empty cell that's in that column so let's just first assume that we have a method that we can do that so we use a con's last empty cell is equal to find last empty cell and then pass it the column index and so up here inside set up event listeners we can just go ahead and declare that function and assuming that it does return something that we can use we could just go ahead and add a class to it so last empty cell dot add class is equal to i'm just going to do something called next i'll say red and we'll probably change the name of this later in a second but of course if we had a style called next red we could just change the background color to a red value with some opacity i'll make it a really really really faint red if we hover over one of the columns rearrange this okay so now we want to implement that fine last empty cell method which we defined up here on line 29 so to do that remember what we're trying to do is we need to grab all of these cells in that column that we selected so the way to do that using jquery is we we can say const cells is equal to and then using jquery say grab me all the columns that have the same attribute data hyphen column if you remember we added that earlier on equal to the column index that we passed in if i were to print out what cells is at this point we should get an array of a lot of different elements as we hover over stuff um let's see add class of well right now i'll count that out because it's not going to work as intended but now i hovered over something and i go here and we have a i'm not 100 sure this is working yet because i forgot to put a a colon there or a comma there okay there so i added this single quote here and that fixed the bug and basically now when we hover over one of these columns it's going to show us all of the cells that are in that column and so kind of visualizing here what we need to do programmatically is we just need to start at the very end and just keep looping backwards until we find an empty one it turns out in all these cases these are all empty so we can just grab the last one if it's empty we just add a class or remove a class empty from it and we could just add something else to it so in this one i'll say loop over all of these things backwards and then grab the cell that we're currently at i'll say cells of i basically again we loop over backwards we get the jquery representation of the cell that we're at and we say if the cell has a class of empty we want to just go ahead and return that cell and otherwise we just return null but now this method will just return as the last jquery instance that has an empty class attached to it if i were to go down here and then of course add that new class notice that as we hover it's going to add kind of a placeholder at the bottom and of course we need to add a a mouse leave event to kind of remove that class so let's go ahead and just work on fixing that bug and it shouldn't be too difficult basically inside the setup event listeners what we can do is add another on callback function so i'll say on mouse leave and if this is invoked on any column we could just say all a function and then of course we can say remove all of the classes that have next red attached to them now as we hover over notice that it's going to remove the last one that it added and of course there's probably other ways to do this but um this is a decent way that comes to mind just from coding so let's go ahead and commit this to the repo this is a good um some good functionality we added so i'm going to go ahead and say edit functionality for hovering over columns go ahead and add that go ahead and push that and just make sure that it's here now and we have just now we updated some stuff so now if you want to see the functionality changes from setting up the initial grid to seeing these event listeners you can do so by just simply clicking commits here and then viewing the commits to um sorry so now at this point what we can do is if we were to click on one of these columns we want to go ahead and just place a piece in the bottom row or wherever the next quoteunquote slot should be again we could just add another listener which is going to be money sign board on click and then if we click on an empty cell or empty dom element that has the class empty what we can do is again we know what we clicked on so we can get the column and the row so i'll say cons to call is equal to this of data call and then same thing with row so we know which column in row was clicked in fact i'm not sure if we even need this at this point but it would be good to know um so remember yeah if we were to let's say an example if we were hovering over this one here and we click it we want to place the player's token or the circle at the very last one so we can call that same method called find last empty cell and pass it the column index which will give us that last empty cell and then what we can do is just simply remove the empty from it so i can say last empty cell remove class of empty move class empty and then last empty cell i could add a class of red in fact i'll get rid of row for now we don't really even need row so just to demonstrate what's going on if i again were to try this out and just click on one of these we should now have a class of red attached to that which we do but we didn't actually declare a style for it so let's go back here and say all of red is equal to background color of red so notice here we get a red every time we click which is pretty awesome so secondly let's go ahead and make a column of black because we know we're gonna have red in a black player and again i'll do a next black so at this point what we want to do is kind of alternate between if i was player um red or if i was player black so up here we can just go ahead and add another member to this class and i'll say player is equal to red so we start off as player red and then after we drop that cell into um the grid we just need to kind of switch around the player so if i wanted to kind of switch from player red player black on this member here we first need access or we need to keep reference to the original object so a little hack if you're familiar with javascript you typically have to do something like this to retain access to the original this attribute um you may say okay why don't you just use a fat arrow here but the issue is i also need access to the event called this and this function so instead on line 29 i'm just going to say const that is equal to this and then down here i can say that dot player is equal to and then if player is already equal to red i'm going to change it to black otherwise i'll change it to red this is going to kind of alternate between placing a red piece and a black piece and of course here we can say that dot player instead of just placing red every single time and up here outside these two functions instead of placing um red every time we hover or removing red every time we hover we could instead just say uh that dot player as well so again recap we added a player attribute to the class which is going to be either the string red or the string black and then as we enter or leave or click on these different columns we're going to be using that to remove classes and add classes so the first thing is if we're player red actually one second there's an issue so as we hover we see that we are placing next hyphen black but i think the color is not what because 255 is white let me change it to black so now as we hover over we have black okay so start over first player that goes is red and when he clicks it's going to place a red piece and now when i move over it's going to be an indicator of a black when i click it's going to place a black piece so i can just go ahead and just keep alternating between these which is pretty cool um one thing i noticed is that when i click the indicator doesn't show up anymore and also there should be a pointer so the first thing i'm going to do here is go back to column i'll say column of empty a pointer or cursor is equal to pointer now when we hover over empty cells it's going to be a pointer and the second bug i'm trying to fix is once you click i want the indicator to show up automatically again for the next player so to fix that bug look at the code really quick and try to understand what's going on i think basically we all we need to do is just kind of force the event mouse enter to trigger on the piece that we just laced i believe so the last empty cell obviously need to remove that we can also remove um at next that dot player and just go ahead and change that to back tick so we can interpolate the string there and then update player at the very end and then of course we need to just invoke that mouse leave or mouse enter function on that column like say this dot mouse or this dot trigger mouse enter see if that kind of fixes the issue okay which it kind of does but one issue is that we're retaining that last piece that we okay so did spent some time trying to figure out what the issue was and i think it's because i'm adding um mouse enter trigger right before we switch the player and instead we need to do it after so if i were to do this okay i think that's working as is cool so now we have the functionality to alternate between the different players so red player and black player and at this point i think this is a good stopping point to again commit our changes so i'm gonna go ahead and say alternate alternating between players go ahead and add that push that to the repo cool so we have a really cool connect 4 grid that we can click and play around with to alternate between red and black so now the next step is once we place these pieces how do we know if a player wins when they connect four um so basically whenever we click a piece right after that we need to check the grid see if someone has one or not so to do so let's go ahead and just start off with making another function and that function i'm going to call is check for winner and inside this function as two parameters or arguments is going to take is the row and the column that you last clicked so for example let's say we were to click on this column here and place that black one at this point we need to then check if there's a diagonal or a vertical or a horizontal row or line which allows that last piece which was black to win so if i were to click and check in those directions if that last piece dropped wins then we know that the game's over so basically what we can do is inside the click method before we change the player we could just do a const winner is equal to that dot check for winner and i'm going to pass in the row and the column so here i can say row and then i can say column here and in fact we could just go ahead and parse these as ins i'm not sure if we need the parts those as in um yeah when we click on the cell we just go ahead and check for winner of row and column and then down here we can say if there is a winner we can just do some stuff and in fact i'll just do an alert and say game over do backtick so we can do a string interpolation so game over player that dot player as one and just go ahead and return out of that um and we can also kind of keep track of well do something like that later okay so whenever there is a winner which in this case this function doesn't return anything so if this function does return a string or a boolean or something that's equivalent to true then it's going to print out this alert so to implement this function let's go ahead and go down to check for winner and what we want to do is we kind of want to check on all the different directions so horizontally vertically or diagonally if there are four in a row so to kind of start off i'm just going to write a first function so i'll say return check verticals so that assumes that we have a function called check verticals up here i'll say function check verticals and what check verticals is going to do is we want to have it return a call to a function called check when so inside here i'm just going to pass it some directions like remember we were to so if we take a step back and just think let's say we pass in row of two and column of two if we were to check the verticals we know that we need to check in the direction up in the direction down so here for check when we're just going to assume that there's a function called check when and that's going to have direction a and direction b and in this case for verticals we can just pass in i of negative one and j of zero and then again we can check in the down direction so i of one and j of zero as well and that's going to kind of pass in a direction which is going up in this case and the direction b would be going down in this case and so at this point the function check when is what we need to do is kind of sum up all of the tokens or cells that match the current player's color up here i'll say that is equal to this just so we can keep track of that just in case we need player um i'm inside here we're going to say keep track of the total which is going to be equal to 1 plus we're going to have another match called check direction of a and then we're gonna also check the direction of b and so what we mean by this is obviously the piece we just placed down is going to be equivalent to one we know that there's already one piece that's red now we need to check in the up direction in this case which is i negative one and then we also need to check in the down directions which is going to be i of one and j of 0. and so if the total added up you know 1 plus everything above which is also red and everything below which is also red is equal to 4 or greater so i say if total is greater than equal to 4 we know that we can just return the player that we found so i could say that dot player and then otherwise we could just return null because we haven't found an actual player who has one yet um so to get to the player that is at the cell that we just clicked on right now that dot player may not let's see if that player is fine pick for winner yeah because we don't change the player until after so this is fine the next method we need to do is a check direction method so i'll say direction inside the track direction method what we need to do is basically increment in that direction while we're still inside the grid and check if the color that we just hit also matches the color that we're looking for so i'm going to say let total is equal to 1 let's keep track of the number of slots that we found that are the exact same color that we're looking for so let i is equal to um that's going to be equal to the row thus passed in plus the direction in the i direction and then let j is equal to the column plus the direction in the j direction now this point if let's say we were checking the direction up we're just going to go ahead and add in like one step further and check it and then we can just go ahead and get the cell so we don't really have a method to do that so let's just go ahead and write a function called get cell ticks in a row and a column and what we can do is just return using jquery same row which matches that so if i were to do this in fact i'll do i and i'll do j give me the row that is equal to the i and then give me the column which is equal to j now we have a method for getting the jquery cell i'll do money sign get cell and then here i can say let cell is equal to get cell of i and j so this point we've gotten the cell which is one iteration above the current one that we dropped again if we were to click here it will grab us this one above and what we want to do is just keep on doing this logic while we're still in bounds so i can say while i is equal to 0 and i is less than to that dot rows and j is greater than equal to zero and of course j is equal to that dot columns or j is less than that dot columns and then finally i can say while the player that we're currently looking at is still equal to the player that we just dropped we need to keep incrementing and doing this loop again so i can say total plus plus the i is plus equal to step of i same thing with j and of course increment next the next is equal to get the cell of i and j change that to next instead of that one thing i'm not sure if we're adding to the actual cell that we dropped is the player so i'm going to say last empty cell dot data of player is equal to that dot player but we actually know what you know cell is set to what player um so that was a win in the vertical direction let's go ahead and see if this is going to crash when we're just playing around with it we're already getting an error so let me go to the console thing a is not defined because i did not put direction a and direction b there okay all right so check direction step is not defined that should be called direction not sure why i did step let's try it again all right so now we're running into an issue where it's not saying the game is over when it should um so what we can do is a little bit of debugging here and say obviously the winner is not being set correctly so let's see probably because i'm not returning the total here again keep on trying cool so it actually checks in the vertical direction and it says player red has one and in this case the game is over but we can keep on placing crap because we haven't added like a an ending condition to our game so let's try to do the same thing with the other directions so we need to check the horizontals as well so if i add another function and just call it check horizontals and this one's going to be static in the row direction but we're going to go from left to right i'm just going to go ahead and say call check verticals in or or with check horizontal so that if any of these return a string it's just going to go ahead and return the string otherwise it's going to return null and we know that there's no winner if that's the case so now by simply adding that method here we should be able to check wins in the horizontal direction so if i were to just do the same thing like this oops black has one all right so there's a bug where it made player black win even though we only dropped three let me refresh the page and try to test out the horizontals again so there's a bug going on let me just double check what's going on so sometimes when you run into issues like this it just helps to start running the debugger so here i'm just going to go ahead and add a debugger here so we can kind of step through our logic try to figure out what's going on every time we place a key i'm gonna stop in our debugger and we can walk through what the issue may be x is a little bit too big so let's go ahead and do that i'm basically just setting it up so i can just check that last case where i do a horizontal so here when i place this piece we're into the debugger now and we can kind of step through and try to figure out where we're going so i is in the zero direction j is in the one direction which means it's going to go to the right and check remember the last piece we put was this one right here then we go ahead and grab the cell here which is not finding anything so that might be our issue some reason this is negative one which it shouldn't be and this is one um let's step forward and see if we can find something here the row and column is zero in okay so i think the issue is row and column for some reason they're zero and one but they should be set to whatever this down here was which was like five and two or something so if i were to go back to check for winner and find out what exactly we're passing into it out row and column go ahead and refresh this page when we click this it should be printing out not that value 0 and 2. the column is correct but the row is not correct this should be row 0 1 2 3 4 5. i must be adding the incorrect data to row here that is added somewhere up here i believe when we create the data of row set to row data of column is set to call oh i know why because i'm i'm passing in the one that i clicked instead of the last empty one right so what i need to do instead is i need to pass in here a last empty cell dot data of row and a last in cell of data of column let's go ahead and save that get rid of the debugger because that might just have fixed the issue there cool so now horizontals seem to be working fine and the last thing we need to do is check the diagonals so there's going to be two functions we need to do for the diagonals there is a bottom left the top right so i'll say check diagonal bottom left to top right and then here we can just return check when and if we know the directions we say i need to go down and then j we need to go negative so to the left so that would be from the point that we clicked go down to the left and then also both positive up into the right and of course we need to use that they check diagonals here and we could add that last method which is going to be called check diagonal of top left to bottom right and the difference is this is going to go up right sorry down to the right and then up left and of course i'll just call it down here so now when i say this we should be able to check if diagonals are working so let's go ahead and make layer redwin and it works in the top right diagonal and let's try it again with the other diagonal and it's working there as well in fact i don't think i've checked it with black so let me just take black one cool so that's working as well all right so now we have the functionality to check who won by checking the horizontals the verticals and the diagonals that are from top left to bottom right and from bottom left to top right and we ran into a little bit of issues debugging because i named some stuff wrong but luckily we got to see how to debug stuff in the debugger um i think now at this point what we want to do is we're we're seeing some issues so even though the game is over we can still place crap down so what we want to do now is we can say add a new member called is game over set equal to false when the game starts and then what we can do is down here when we've won we can say this dot sorry that dot is game over is equal to true and then whenever this is true we could just return our stuff so if the game is already over we don't want to be able to click on anything if the game is over we don't want to be able to do any of this mouse enter stuff so let's see if i were to save this now and then just go ahead in the game notice that i can no longer place and when i hover over stuff nothing happens then one more thing i'm noticing is that the hover for empty is still there so i'm just going to go ahead and remove every class that has it so when the game is set to true i can just go ahead and say grab me all the empty cells or columns so i say call empty i'll say remove class of all right so let's try to make a redwin and now i don't have that pointer cursor anymore when i hover over the empty cells yeah so that i think that basically wraps up the connect four i mean the last thing i could probably do is i could add a restart method to this class so i can say restart and i could say this dot create grid um inside create grid i can say this is game over it's equal to false desktop player equal to red again see i'm not sure there's anything else so inside index html we just go ahead and add a restart button so i say button restart within a new line all right so when we click it inside main.js we can just say um whenever we click the restart button just call connect4 dot restart of course i'll add an id called restart to this so if i were to place a bunch of stuff down and then restart oh so now it's placing two grids i forgot to um what we need to do is just empty out the container that we have so on connect four if i were to say great grid i could just say board dot empty and that's going to go ahead and remove all the html elements from the board when we restart all right so that's pretty cool it's still working um i think okay so the last thing i'm going to do is i want to be able to display instead of hello world like when it's your turn like it's player red's turn or whatever so if i go back to index.html and inside here if i say it's a span id of player just start off with like red or something or i can keep it blank actually no i will keep it with red i'll say it players or it's red's turn when i save this it says it's red's turn is red's turn okay so now we click we need to switch it to whatever the player was so here what we could do is just add like a callback listener so i could say connect four on player booth set it equal to some function and i can say set the player text to connect or not player of course we don't actually have an on player move called anywhere in connect four so if i were to go here inside the constructor and say create a new function hold on player move and then whenever i click and place something inside the cell i could just say that dot on player move and call it so now when i click notice that it is rotating in fact it's off by one it's saying the wrong thing so instead i'm going to do it there after we change the player so right now says it's red's turn click it says it's black's turn i can keep alternating between the different players and i can restart so that's an issue when i restart it's not actually changing the player up here so what we could do is again just call bat whenever we create the grid or whenever we restart so create the grid let's say this dot or that dot on player move let's see what happens if we do this so i'll go ahead and commit this stuff so i'll say final stages of allowing alternate players to check if someone is one go ahead and push that to the repo yeah so i don't know if that was maybe that was too quick hopefully that was well explained or if it wasn't too confusing but i'll do a really quick recap one more time um basically we create an html file which has it's h4 so we can display its redstone or black turn and we're changing that every time we click or place a piece we have this connect four div which basically our connect4 class is going to render stuff into and then of course we have a restart button which basically will just restart the state of our game then inside connect four when the grade is created we create the grid and we set up some event listeners and then on every time we click on a cell or column we're going to just do different things so like if it is player red's turn we're going to place a red token or if it's player black's turn we place a black token and then same thing when we hover over different columns we again just change the hover state um every time we click after we click we check to see if someone has one or the last pers last player who went to see if they won if they have we just display an alert and say the game's over and then we switch players from black to red here um we trigger al's enter just because that fixes a bug with the hover states um yeah so again feel free to leave me feedback let me know if this tutorial was way too fast or fast paced i should have slowed it down in the future um i didn't want this thing to take too long to do but i think right now we're pushing around an hour and again feel free to grab the project from my repo so js hyphen connect hyphen 4 and again i'll put this on youtube so you can easily just grab it and use it or i'll put a link in the youtube description so you can play around with it um yeah hopefully the tutorial was useful uh feel free to subscribe and look forward to new videos in the future alright thanks for watching
