With timestamps:

00:00 - in the shopping cart project we're going
00:02 - to look at how we can add a javascript
00:04 - functionality to add items to the cart
00:07 - as you can see first we have the button
00:10 - that will kind of show the cart so we're
00:12 - going to add first the functionality to
00:14 - show the card itself and here you can
00:16 - see that we have heart coded items and
00:19 - here would be a total so notice what we
00:21 - have we have two items and then 49 again
00:24 - hard coded and then we would have ten
00:26 - dollars which obviously doesn't match
00:28 - the items that we have now if we're
00:30 - going to scroll down and we're going to
00:32 - see the items then we're going to have
00:34 - the little icon that's going to be
00:36 - showing up when once we're going to
00:38 - click the cart icon we're going to have
00:40 - a alert that's going to say the item has
00:42 - added to the card now let's add one more
00:45 - just so we can see that it's for sure
00:47 - working so again we have a item added to
00:50 - the card and if we're going to scroll up
00:52 - first you're going to notice that we'll
00:54 - have four items right now because we're
00:56 - counting all the items even the
00:58 - hard-coded ones but obviously later on
01:00 - once you're done with the project you
01:02 - can just delete the hard-coded ones and
01:05 - also we have the value so it's counting
01:07 - all the dollars that we have for the
01:09 - items and if you notice that we have the
01:11 - exactly two items that we selected from
01:15 - our store items list and they have been
01:18 - added to the cart
01:19 - the project setup files are located on
01:22 - my github so you can either go directly
01:25 - and just find by the project's name or
01:29 - you can follow the link that i have left
01:31 - in the description of the video once we
01:33 - get a hold of the source files we have
01:36 - the folder and within the folder as
01:39 - always we have all the images the css
01:42 - that's necessary for the bootstrap and
01:44 - also the font awesome so here we can
01:46 - just check it out first what we have in
01:48 - the index.html and so far since there is
01:51 - no functionality we can click all day
01:54 - long and the cart itself is not going to
01:56 - be showing and also the items are not
01:58 - going to be added to the cart as we're
02:00 - clicking on the icon because obviously
02:03 - this is the purpose of the project so
02:05 - now let's open up the same folder in our
02:07 - favorite text editor and as you can see
02:10 - that i'm sitting in my index.html now
02:12 - i'm not going to show right now each and
02:14 - every id or class that we're looking for
02:17 - because there's going to be quite a few
02:19 - of them so as we're going along i'm just
02:22 - going to switch back and forth and i'm
02:24 - going to show you where exactly i'm
02:26 - finding the either the id or the class
02:29 - so now let's right away switch to mjs
02:32 - here let's make a comment that this is
02:35 - going to be a show card so first let's
02:37 - start with showing the card and also as
02:40 - always we're going to do everything in
02:42 - the immediately involved function
02:43 - expressions because in this case you'll
02:45 - show that we're going to separate the
02:48 - issues so first we're going to work in
02:50 - our first immediately invoked function
02:53 - expression where we're going to deal
02:54 - with the card and then we're going to
02:56 - create another one which is going to
02:58 - hold the items added to the card so
03:01 - we're going to make sure that we're not
03:03 - sharing the global scope with our
03:05 - variables so let's start with declaring
03:08 - a
03:09 - immediately invoked function expression
03:11 - which is going to have the syntax of
03:13 - parentheses then the function keyword
03:16 - then again another set of parentheses
03:17 - and then the curly braces for the block
03:20 - of code were all going to be working now
03:22 - here i'm going to invoke the immediately
03:24 - invoked function expression and now
03:26 - we're ready to start working now like i
03:28 - said first we would want to select the
03:31 - cart info which is going to show our
03:34 - card so if we're going to switch back we
03:36 - are targeting this button and after that
03:39 - we're targeting the actual card so if
03:42 - we're going to switch back to index.html
03:45 - and we can either use the command f so
03:48 - that way we can find and if we type cart
03:51 - info we're going to see that we're
03:53 - looking for the id of card info so this
03:55 - would be the button which we would want
03:57 - to target now i cannot see this in a
03:59 - smaller screen this is why during this
04:02 - tutorial we're going to switch back and
04:03 - forth to a bigger screen and also we
04:06 - would want to show the cart so the card
04:08 - itself is right here so this is below
04:12 - the
04:12 - header and here the card is sitting now
04:15 - we're using the position absolute this
04:17 - is why we cannot see the card right now
04:19 - and the way we're going to do this we're
04:21 - going to target the cart info we're
04:24 - going to attach the event listener and
04:26 - then we're going to use this class of
04:28 - show card because if you notice we have
04:31 - for the card for the actual card that
04:33 - we're going to be showing the width
04:34 - right now is zero
04:36 - and once we click the button we're going
04:38 - to add this class of show a cart to the
04:40 - cart and then we're going to be showing
04:42 - because notice that with the show of
04:44 - card class the width is 18 rems so right
04:48 - now the width is zero and overflow is
04:50 - hidden this is why we cannot see the
04:52 - card also and then we're gonna attach
04:54 - this class with a javascript so let's go
04:57 - back to the mjs
04:59 - first let's name our variable this is
05:01 - going to be cart info because this is
05:03 - the same thing as we're going to be
05:04 - targeting
05:05 - so here we'll have a document then we
05:08 - would want to use document get element
05:09 - by id and like i said the id was cart
05:13 - info so cart dash info and now once we
05:17 - have our object back since we know that
05:19 - once we're targeting something we're
05:21 - getting back return as an object we can
05:24 - do event listener now before we do an
05:26 - event listener let's right away select
05:28 - the card itself so for the cart we're
05:30 - gonna have the element by id of cart so
05:34 - the card is gonna be again the same
05:36 - thing document
05:37 - get element by id and we're going to be
05:40 - selecting the card so the name of the id
05:42 - is going to be the card like i said
05:44 - right now we would want to attach the
05:45 - event listener to a cart info button so
05:49 - let's do a cart info since that is the
05:52 - name of the variable then since we have
05:54 - the object we can use the method of add
05:56 - event listener and the first parameter
05:59 - we are expecting what kind of event
06:01 - we're listening to which is going to be
06:03 - the click event and the second one is
06:05 - going to be the callback function which
06:07 - will be executed once the event fires
06:10 - and like i said we're going to do a very
06:13 - simple thing we're going to select the
06:14 - cart that we have targeted before then
06:17 - we're going to use the class list
06:19 - property and then we're going to have a
06:21 - toggle now for the toggle we're going to
06:24 - specifically write what kind of class
06:26 - we're going to toggle so instead of
06:28 - checking whether the cart has the class
06:31 - of show card or doesn't have we have an
06:33 - option of using a toggle
06:35 - now for the toggle we're going to have
06:37 - to write what class we are looking for
06:40 - and then javascript is going to decide
06:42 - if the cart has the class of show card
06:46 - then we're going to remove the clasp
06:48 - once we're clicking the icon and then if
06:50 - it's the opposite then obviously we're
06:52 - going to be hiding so once we save it
06:54 - and once we're going to go again to the
06:56 - bigger screen because this is where
06:57 - we're going to be able to see this once
06:59 - i click it notice now the cart is
07:01 - showing and now we're hiding the card
07:04 - now i added few things in the css it's
07:07 - not just the width now i also see that
07:09 - we're rotating a little bit and some
07:11 - other things and obviously if you like
07:14 - to you can go ahead over here and
07:16 - explore what we're doing but now that we
07:19 - have the card this would be our first
07:21 - thing that we would like to achieve and
07:24 - the second one is going to be working
07:26 - within items now items we're going to
07:28 - have a little bit more code and maybe in
07:30 - order again to avoid naming the same
07:33 - variables and them colliding who's going
07:35 - to create another immediately invoked
07:38 - function expression so here let's call
07:40 - add
07:41 - items to the cart so this is going to be
07:44 - our comment and then we're going to do
07:46 - the same thing where we have parentheses
07:48 - then we have another set of parentheses
07:50 - then the code where we're going to be
07:52 - placing our code and then we're going to
07:54 - invoke it right away so again we can
07:56 - close it out and we can start writing
07:58 - whatever functionality we would like
08:01 - now first let's select store item icon
08:05 - now what is store item icon well first i
08:08 - can show you in the html this would be
08:11 - this icon you notice here we have the
08:14 - cart and it's showing only as i'm
08:16 - hovering over the image of the store
08:18 - item so let's go to index.html let's
08:22 - write the name so this would be
08:25 - store item and we have the icon now this
08:30 - this would be the store item like i said
08:32 - that is within the column then here we
08:34 - have the card then this would be the
08:36 - image then i'm sorry this would be
08:39 - actually the image container then this
08:41 - would be the image that's sitting within
08:43 - the image container and then here still
08:45 - within the container we're going to have
08:47 - this pan
08:48 - and the span is going to hold the value
08:50 - of font awesome icon which would be the
08:53 - shopping cart so what we're doing is
08:55 - we're targeting all of these spans with
08:59 - the class of store item icon and we
09:01 - would want to attach the event listener
09:03 - to them so here let's do a const we're
09:06 - going to call this a cart btn and let's
09:09 - set it equal to document then we're
09:11 - going to do query selector all because
09:13 - there's going to be more than one cart
09:16 - icon and then we're going to target
09:18 - again the class of store
09:21 - icon
09:22 - and we're gonna have the store item icon
09:24 - sorry store item icon so quite a long
09:28 - name with a two dashes we obviously
09:31 - could have maybe named it with a camel
09:34 - case but let's just go along with it
09:36 - like it is right now so once we have
09:38 - selected the store item icons then we
09:40 - would want to attach the event listener
09:42 - now before we do that let's open up the
09:45 - google developer tools just so we can
09:47 - see that everything is working and since
09:50 - we're going to be traversing a dom a lot
09:52 - we will going to be using console.log
09:54 - today a lot now before we start typing
09:56 - all the functionality i just want to let
09:58 - you know right away that in general
10:01 - there is a way better way how to do this
10:04 - than what we were going to do it now the
10:06 - reason for this is this is a javascript
10:09 - dom project
10:10 - so therefore we're going to be
10:11 - traversing a dom more than we would want
10:13 - to just so we can get a practice in
10:16 - general we're going to add some kind of
10:17 - attribute over here that gets hold the
10:20 - of the id that's showing and then
10:23 - instead of just getting all the items
10:25 - with traversing the dom which we will
10:27 - going to do in this project you're just
10:29 - going to get an id and you're just going
10:31 - to contact the database and get all the
10:33 - information and then place it in the
10:34 - card so this is not technically the best
10:37 - way how to do it but again like i said
10:39 - since this is a javascript dom project
10:42 - we're going to do it a little bit long
10:45 - way so let's go back over here to app.js
10:48 - and let's start working with a cart
10:50 - button
10:51 - now like i said for the cart button we
10:53 - would want to add a for each because we
10:55 - are getting back a known list so we
10:58 - would want to attach this event listener
11:00 - to all of them so we're going to do for
11:02 - each so we're going to loop through all
11:04 - of them and here for each and one of
11:06 - them we're going to have a callback
11:07 - function whereas a parameter we're
11:09 - passing the button that we're looping
11:12 - through so each and every element of
11:14 - this card button node list and here we
11:17 - would want to first figure out what
11:19 - we're getting at so why am i saying is
11:21 - what we're getting at well i would want
11:23 - to figure out what i'm actually clicking
11:26 - on so instead of event listener first
11:29 - let's do a btn add event listener and
11:33 - let's do btn
11:34 - and event listener so now i'm targeting
11:37 - the exact button each and every time as
11:40 - i'm looking through there right and now
11:41 - i would want to hatch attach a click
11:43 - event so for all of them we would attach
11:46 - the click event and here we're going to
11:48 - write a callback function which will
11:50 - fire as the click event happens so if
11:53 - we're going to click on any of these
11:55 - card
11:56 - icons then the event is going to fire
12:00 - and the callback function is going to be
12:01 - the call so here let's do a code block
12:04 - and now let's decide what we're working
12:06 - on now we passed in here the event as
12:09 - the object because we were going to use
12:11 - this to traverse it down and let's start
12:13 - very simple let's do console.log and
12:16 - let's do event target now we have the
12:18 - event object and we also have the
12:20 - property of target now the property of
12:23 - target is going to let us know what
12:25 - element we're clicking on so once i save
12:27 - it
12:28 - and once i'm going to go back in smaller
12:30 - screen notice if i click it you see that
12:33 - i'm clicking on the i which would be the
12:36 - font awesome icon however i also have
12:39 - the option of clicking on the span of
12:42 - the store item icon and what we would
12:45 - want to do is we would want to set up
12:47 - that we are reading only when we're
12:49 - clicking on the actual icon on the
12:52 - little font awesome icon over here
12:54 - because it's going to be easier for us
12:56 - to set up the if statement that way
12:58 - because we only need to care about one
12:59 - thing
13:00 - now once we know this we know that if i
13:03 - would want to set up for the icon i
13:06 - would need to somehow check that the
13:08 - event target has the parent element that
13:11 - has this class so we know that we have
13:13 - the event target however also we can use
13:16 - the property of parent element which is
13:18 - going to look for a parent element and
13:21 - then we're going to look for the parent
13:22 - element that has the class of store item
13:25 - icon so that way i'm just making sure
13:27 - that
13:28 - only the event fires if i click on the
13:30 - actual card icon instead of somewhere
13:33 - here in the span so let's do again the
13:35 - event target and then maybe let's
13:37 - comment it out so we still have it just
13:39 - in case we want to look at it and then
13:41 - let's do an if statement and then like i
13:43 - said we're going to target event target
13:45 - so whatever element we're clicking on
13:47 - then we're looking for a parent element
13:50 - and we're making sure that this parent
13:52 - element has a class list of store item
13:55 - icon so again this way we're making sure
13:58 - that the event fires only once we click
14:00 - it on the icon so the class list we're
14:03 - going to be looking for the class over
14:04 - here now we can either grab it from here
14:07 - or we can just write it so let's write a
14:09 - parenthesis and we have store
14:12 - item and icon so now we're going to be
14:15 - firing the event only if we're clicking
14:18 - on the icon
14:19 - now once we have selected the icon now
14:21 - the interesting part starts and like i
14:24 - said this is going to be a little bit a
14:25 - long way but this will going to make us
14:28 - practice a traversing to them so first
14:30 - things first again let's start looking
14:33 - what we would need well i would need to
14:35 - get somehow the source of the image that
14:38 - i have right now so if we're going to go
14:40 - back to index.html we notice that i have
14:43 - my span
14:44 - so this pan has the phantasm icon
14:47 - now
14:48 - the next element right next to the span
14:51 - is going to be the image
14:53 - so then we need to start traversing the
14:55 - dom where once we click the icon then we
14:59 - would want to look for a parent element
15:02 - and then we would want to look for
15:04 - previous elements sibling so then we're
15:07 - looking for the sibling what is in the
15:09 - dom because if you notice the image and
15:12 - the span are both children of image
15:15 - container the image container has two
15:17 - children and once we know that we can
15:19 - select the parent element of my phantasm
15:22 - icon i know that i can select a previous
15:26 - element sibling which would be sibling
15:28 - right next to it and previous is
15:30 - obviously because this is the first
15:31 - child and this is the second one and
15:33 - then we can select the source but it's
15:35 - going to be maybe a little bit easier if
15:37 - we do a console log that way we can see
15:40 - everything that we're doing so let me do
15:42 - again a log now within this console.log
15:44 - we're going to do event then we're going
15:46 - to have a target so whatever we're
15:49 - clicking on then we're going to have a
15:51 - parent element and then let's have a
15:53 - look what we have in the parent element
15:55 - so let's save this once i click on the
15:58 - icon notice that it says well parent
16:01 - element class list is not actually
16:03 - defined so let's go back over here and
16:06 - let's figure out where is the problem
16:08 - now the problem is that we have a class
16:10 - list but we need to make sure that this
16:12 - class list contains so we're using a
16:15 - property of classlist and then we're
16:17 - checking with a contains so my apologies
16:20 - i had a little little bug so once i
16:23 - click it and again it says contains is
16:25 - not a function and over here again the
16:27 - problem is because i misspelled it so
16:30 - the name actually is contains and
16:32 - hopefully with a third time this is
16:34 - going to be the charm and sure enough
16:36 - now i'm getting back the span so now i'm
16:39 - getting back to span however i know that
16:42 - there is a sibling for this pen which
16:44 - would be the image now let me show you
16:47 - by attaching one more time the property
16:49 - of parent element and now let's see what
16:51 - we have so we click the icon and then
16:55 - you notice i'm getting the image
16:56 - container and the reason for that is
16:58 - this is a parent container for our span
17:01 - so once i open it up notice i have the
17:03 - image and i have the span now i know how
17:06 - to get to the span using event target
17:08 - parent element now i would need to
17:10 - decide how i can get to this image and
17:12 - grab the source so let's do a previous
17:15 - element sibling which would be another
17:17 - property so previous
17:20 - previous let me make sure that i'm
17:23 - actually spelling this correctly because
17:25 - this is not going to work if it's not
17:27 - written correctly so element and then
17:30 - we're going to have sibling so this
17:31 - would be a property name and here since
17:34 - i know that this is the image all right
17:36 - right away can do a source now maybe
17:38 - let's before we do the source let me
17:40 - just check that this property is written
17:43 - correctly and once we click it
17:45 - we have you see we have the image so
17:47 - this would be previous element sibling
17:49 - now like i said i would be interested in
17:52 - the source so let me click a source and
17:55 - i should be getting back the source so
17:57 - once we click it we should have the
17:59 - undefined
18:00 - because obviously again
18:02 - very clever from my part and let me save
18:05 - this and let me click it and sure enough
18:07 - now i'm getting back to source so if i'm
18:09 - going to scroll down let's say the suite
18:10 - item again run it and this is showing us
18:13 - the sweets too so we know we're getting
18:15 - back the different source so now i would
18:17 - want to set it up equal to some kind of
18:20 - element so some kind of variable so
18:23 - first let's say that this is going to be
18:24 - let and we're going to call this full
18:27 - path so this is going to be my variable
18:29 - let me delete the parentheses over here
18:31 - because now i'm just setting equal to
18:33 - whatever getting back to a full path
18:36 - now once we have the full path there is
18:39 - a little bit of an issue because you
18:41 - notice i'm going to open up a sidebar i
18:44 - have the image
18:45 - but i have the image card what is the
18:48 - reason for this image card well you see
18:50 - when we're going to be opening up the
18:52 - cart i have a smaller images i have
18:55 - images that are only 50x50 there's no
18:57 - point for me to grab this massive image
19:00 - and place it in the card so i have two
19:02 - sets of images one is going to be the
19:04 - big image that's showing within my items
19:07 - and the second one is the small one
19:09 - that's displayed in the card so this
19:12 - full path right now is not good enough
19:14 - for me i would need only the part where
19:17 - it says what kind of image it is in here
19:20 - because i'm going to change this first
19:21 - part you notice i have sweets too and
19:24 - cupcake one this is what i'm interested
19:26 - so let me close the sidebar and let me
19:30 - start manipulating with a string that i
19:32 - have back so here let's set up a new
19:35 - variable and i'm going to call this
19:36 - position and now i'm going to use the
19:38 - variable that i have for the full path
19:40 - and i'm going to find the position of
19:42 - the image of this string of image so i'm
19:45 - going to have a
19:47 - full path this would be the name of my
19:49 - string then i'm going to use the index
19:52 - of a method and this method is going to
19:55 - help me to find what is the position of
19:58 - the image so if i'm going to go back and
20:00 - if i'm going to say image now i should
20:02 - be getting back the image so let's do
20:04 - again a console log just so we can
20:06 - always see what is happening so if i'm
20:08 - going to go back and click it on the
20:11 - item i should be getting back a 22. so i
20:14 - know that in the full path i'm getting
20:17 - back the index of 22. so index of image
20:21 - is going to be 22. now i'm going to use
20:24 - another method which would be slice so
20:27 - here we're going to use the image that
20:28 - we're getting back and we would be
20:30 - slicing
20:31 - however before we slice the idea is that
20:34 - i would want to take off all the text
20:37 - that is including the image and before
20:39 - the image because if you remember the
20:41 - full path and maybe again let's comment
20:44 - this out just so it's a little bit
20:46 - easier to see so if we're going to go
20:47 - back
20:48 - refresh the page and once i click it you
20:50 - notice i would want to do a slice which
20:53 - would be a method that i can use on a
20:55 - string and i would want to take off all
20:57 - this text starting from this forward
20:59 - slash so i want to take everything off
21:01 - and then i'm going to switch this
21:03 - instead of image you notice that if we
21:06 - have a cart image this is the folder
21:08 - that i would want to set it up for so
21:10 - image card now if we see in the
21:12 - index.html right now we're having image
21:15 - suites one now in this case we're just
21:18 - going to flip it so in the cart it's
21:20 - going to be image cart instead of this
21:22 - folder so let's go back again to app.js
21:25 - and let's change this and the reason why
21:27 - i added three these three characters
21:29 - because this image is three strings long
21:33 - so this string is three characters long
21:36 - so since i would wanna remove everything
21:38 - then in this case i know that i'm just
21:40 - gonna use these three characters so i'm
21:42 - adding them over here and once we have
21:44 - the position now let's do the slice
21:47 - method and we're going to have the slice
21:50 - method of partial path so we're going to
21:52 - name another variable so partial path
21:55 - and we're going to set it equal to again
21:57 - a full path this time then we're going
22:00 - to use the slice and a slice would need
22:03 - a index so where we would want to start
22:06 - removing and then the second parameter
22:09 - is how many characters however if i
22:11 - don't add any characters i'm going to be
22:14 - taking off everything till the end of
22:15 - the string so i think it's going to be a
22:17 - little bit easier to show you so let's
22:19 - do again partial path and now let's have
22:22 - it as a console log and partial path
22:25 - just so we can see for sure what's
22:26 - happening now once again we can't log it
22:29 - if i click it i should be getting back
22:31 - the image now here it says partial path
22:34 - is not defined and here you can see that
22:36 - i added h
22:37 - so let me fix that and now everything
22:40 - should be working so once i click it
22:42 - notice i'm only getting back the sweets
22:44 - or i'm only getting back the kick now
22:46 - again the point for this number of three
22:49 - was if i would remove it notice what
22:51 - would happen so i'm going to save it and
22:54 - now once we again refresh and once we
22:56 - click notice i'm getting back the image
22:58 - so i'm getting the index of the position
23:01 - and i can still do the slice however i'm
23:03 - including the image but since i'm going
23:05 - to use the image cart folder then in
23:07 - this case i would want to get rid of the
23:09 - image also so it's going to add again
23:11 - three and then i'm just going to be
23:13 - getting the name of the image that i
23:15 - have so let me close the sidebar and now
23:18 - we have the full path well the partial
23:20 - path after we have gotten a full path
23:24 - now over here again let's just delete
23:26 - this console log
23:28 - because we have been console logging and
23:30 - then now let's set up a
23:32 - object that we're going to be placing in
23:35 - my card because if we're going to go
23:37 - back and if we notice in the card i have
23:39 - the image which we just got the image so
23:42 - we we good with an image however also i
23:46 - have the cart name and here we'll have a
23:49 - price so i'm going to set up a object
23:51 - that's going to hold all these values so
23:53 - first let's just call this item and
23:55 - we're going to set it up to a empty
23:57 - object
23:59 - so the object literal syntax would be
24:01 - just a curly braces and once we create a
24:05 - object with a object literal we're just
24:08 - going to add a properties to it now
24:11 - obviously we can write the properties
24:13 - right away as we're making this object
24:15 - literal but since there is no right or
24:18 - wrong way of doing it we can just add
24:20 - the properties later so in our case
24:21 - we're just going to have the properties
24:23 - later now i'm going to call my first
24:25 - property an image now this image is
24:27 - going to be equal to a template string
24:29 - then i'm going to use the folder where
24:30 - i'm
24:31 - be getting the images from and now i'm
24:33 - going to use again the variable since
24:36 - i'm using a template string we're going
24:37 - to use a dollar sign and then we're
24:39 - going to look for this partial path
24:41 - because this is going to be the image
24:42 - that we're getting back each and every
24:44 - time on a different icon where we're
24:46 - clicking so here let's do a partial and
24:49 - we're going to call this path now again
24:51 - just to make sure that everything is
24:52 - working correctly let's do a console log
24:55 - only in this case let's do the item
24:57 - since there's going to be other things
24:58 - that we're going to be looking at so let
25:00 - me save it and once we're going to click
25:02 - on the cart notice i'm getting the image
25:05 - and now this would be the path that i'm
25:07 - looking for so we flipped around with an
25:09 - image now we have the image card
25:12 - now image would be one thing now next i
25:15 - would be looking for a element
25:18 - the name and then over here for the
25:20 - price and again we're going to have to
25:22 - do a little bit of dom traversing to get
25:25 - there so here we have the console.log
25:28 - item and let's just keep this item
25:30 - because we're going to be adding the
25:31 - properties later on anyway so we might
25:33 - as well have it right now so let's have
25:36 - it first as a name and we're going to
25:38 - set it equal to let
25:39 - name now name is going to be equal to
25:41 - what well first we're going to start
25:43 - again with a event target then we're
25:45 - going to have the parent element so
25:47 - we're first looking for a parent element
25:50 - which would be what which would be spam
25:52 - so we have a parent element then we're
25:55 - going to look for another parent element
25:58 - so we're going to have another parent
25:59 - element and then we're going to have a
26:01 - next element sibling and let me show you
26:04 - why we're doing it this way so we have a
26:06 - another parent element and then we'll
26:09 - have a next
26:10 - element
26:12 - sibling
26:13 - sibling over here and for now let's just
26:15 - put a semicolon and let's cancel luggage
26:18 - so we can see again what's happening so
26:20 - we have the name and if i'm going to
26:23 - click it notice what i'm getting back so
26:25 - here i'm getting back the card body now
26:28 - what is in the card body well in the
26:30 - card body we have the name and the
26:33 - dollar sign so if we're going to go back
26:34 - to index html notice what happened
26:37 - so we started traversing from the font
26:40 - awesome icon then we got to the span
26:42 - which was the parent element
26:44 - then we got to a parent element which
26:47 - was image container
26:49 - now the image container
26:51 - is a child of the card now the card has
26:55 - also a child of card body so i have two
26:57 - of them i have image container and card
27:00 - body so the same way how previously we
27:02 - were looking for the image we used
27:04 - instead of previous element sibling now
27:07 - we're using next element sibling so now
27:09 - i got a hold of this card body now in
27:12 - the card body again we're going to be
27:14 - looking for children because this text
27:17 - is sitting where it is sitting within
27:20 - the first child so we're going to be
27:21 - looking for a children and then within a
27:25 - first child we also have the first child
27:28 - of cupcake item so store item name and
27:31 - like i said let me repeat this is why we
27:34 - would use a different way when we're
27:36 - doing this normally but again this is a
27:39 - project on javascript dom so we'll have
27:42 - to traverse it down so like i said now
27:45 - we have next element sibling then we're
27:47 - going to be looking for a children now
27:49 - children is going to return in our case
27:52 - an array and i know that this is going
27:54 - to be the first child well in fact this
27:56 - is going to be the only chat we're still
27:58 - going to have a note list so in this
28:00 - case let's do zero so now we're
28:03 - selecting the card text and then since
28:06 - this card text also has a child we're
28:08 - looking for a first child notice over
28:11 - here the cupcake item so let's do a dot
28:14 - then again let's do children and then
28:16 - let's have it as a zero
28:19 - and here let's set it equal to text
28:21 - content
28:22 - so that
28:24 - text
28:25 - text content now the text content should
28:28 - return us the property now if everything
28:31 - goes correctly i'm going to save it and
28:34 - let's notice what we have so if i'm
28:36 - going to click it what do i have i have
28:38 - the cupcake item then if we're going to
28:40 - scroll down again we're going to have
28:42 - the donut item so i'm getting back the
28:44 - name so everything is working fine
28:47 - now what's left well i would want to set
28:50 - up again the item dot name so the
28:52 - property and i would add it i would want
28:54 - to add it to the item so again let me do
28:57 - the same way where we have the item and
28:59 - then we're going to have the name so
29:01 - item
29:02 - name this would be the property and
29:04 - we're going to set it equal to name so
29:06 - both of the properties now once we
29:08 - cancel log the item and maybe we can
29:10 - just
29:10 - comment out a log of name once we click
29:14 - it sure enough now we have not only the
29:16 - image card we also have the name now
29:19 - after that there's going to be the price
29:21 - which is going to have a very very very
29:24 - similar way so we can might as well copy
29:27 - and paste it now the only difference
29:29 - we're going to be changing the children
29:31 - because remember this card body had
29:34 - first a child and then let me maybe show
29:36 - you in the index.html notice we had card
29:40 - body which we got with a next sibling
29:43 - then we went to children which would be
29:45 - the first child with the a index of zero
29:48 - and then since we're looking for a text
29:51 - with a children zero so first child of
29:54 - card text
29:56 - then we were gonna look here for a
29:59 - children one so this would be the second
30:01 - in the note list and therefore we're
30:04 - gonna access it with the children one so
30:06 - let's go back and let me just change
30:08 - this so let me grab this let me just
30:10 - copy and paste this however let's change
30:13 - around a little bit and here first of
30:15 - all this is going to be the price
30:17 - so we're going to be looking for a price
30:19 - and second we're not going to be looking
30:21 - for children one we're going to be
30:22 - looking for a second child so we're
30:24 - going to flip this around and let's do
30:26 - again a council log just so we can see
30:28 - what's happening and let's council lock
30:30 - the price
30:31 - so
30:32 - again scroll down maybe to a different
30:34 - item and let's see what we have so far
30:37 - so as i click it now i'm getting back
30:39 - the value of 15. so if i'm going to go
30:41 - somewhere where's 10 again let's click
30:44 - and here we're going to have it 10. so
30:45 - we know that everything is working
30:47 - however we have this dollar sign over
30:49 - here and also you notice that i have the
30:51 - space
30:52 - now i don't want a space and i wouldn't
30:55 - want a dollar sign so there's a couple
30:57 - of things that i would need to fix
31:00 - around so let's do again maybe let's do
31:03 - another variable
31:04 - now the variable name is going to be
31:06 - final
31:07 - final price so final price and this is
31:10 - going to be equal again to a few methods
31:14 - we can use on the strings well first
31:15 - we're going to be selecting the string
31:17 - so what string we would want well we
31:19 - would want a price string where we have
31:20 - the value of fifteen dollars or ten
31:22 - dollars in our case then we're gonna
31:24 - gonna do again the slice so now we're
31:26 - gonna be slicing now since i know that a
31:30 - dollar sign is going to be the character
31:32 - of zero then the space over here is
31:35 - going to be the character one i would
31:37 - want to use the slice and if i'm saying
31:39 - that starting from the first one so i
31:41 - want to get back everything that i have
31:44 - starting from the index of one now index
31:47 - of one is going to be the space and then
31:49 - i'm going to be getting back to 15. now
31:51 - just to make sure that i have no white
31:53 - spaces also we're going to add another
31:55 - method which would be trim which we're
31:58 - going to remove all the extra white
31:59 - space
32:00 - so instead of price let's console log
32:02 - the final price
32:04 - so final price let's save this let's
32:07 - maybe i don't know scroll up and down
32:08 - somewhere
32:10 - where we have our famous cart and sure
32:12 - enough now i'm getting back to that so
32:14 - now everything is working i have the 10.
32:17 - now the last thing again let's do the
32:18 - same thing where we have the item and
32:21 - instead of a price we're going to have a
32:24 - final price so we can do item
32:27 - then price
32:28 - and the price is going to be equal to a
32:31 - final price so again we can do the same
32:34 - thing where we
32:35 - comment out the final price in the
32:37 - console log and now we're going to be
32:39 - getting back what we have the then item
32:41 - so again let's scroll somewhere where is
32:43 - the first cake
32:45 - we're going to click it now i have the
32:47 - image the name and the price now the
32:50 - price is still going to be the strength
32:52 - but don't worry about it we're going to
32:53 - fix it later we don't need to worry
32:55 - about it right now
32:56 - now next on our agenda is going to be
32:59 - creating an element
33:01 - that we're inserting in our cart so
33:04 - notice we have a structure over here and
33:06 - this is the hard coded part but we're
33:09 - going to use this
33:10 - so we have the element we have the name
33:13 - then we have the price and then we have
33:15 - the icon that's going to be used later
33:17 - on not in this tutorial but later on
33:20 - to delete this so let's go back and
33:22 - let's figure out what we're doing well
33:25 - first of all we need to see what's
33:26 - happening well we have the log so log is
33:29 - fine maybe we can just comment it out so
33:32 - it's not in our way and now we would
33:34 - want to create a new item now what kind
33:36 - of item we're going to be creating well
33:39 - if i'm going to go back and i'm going to
33:41 - look in the nav bar where i have my
33:43 - items then i should notice that first i
33:46 - have the card info which was a button
33:49 - and then i'm going to look i have to
33:50 - look for the card
33:51 - now notice here i have the card so we
33:54 - selected the card and this would be the
33:56 - card item now this is the div that we
33:58 - would be creating
34:00 - now we're going to be using a template
34:01 - string so we don't have to recreate
34:03 - everything that's the good thing of
34:05 - coding this in the html that now with
34:07 - the template strings we can just reuse a
34:10 - lot of things and just change the values
34:12 - over here but i would first need to
34:14 - create that div so let me go back in the
34:17 - app.js and let me first create a div so
34:20 - const then we're going to have cart item
34:22 - so this would be the name of our item
34:25 - and we're going to do a
34:27 - document
34:28 - create element so we're going to be
34:30 - creating an element and we're going to
34:31 - be creating a div
34:33 - now since you noticed that within a div
34:36 - i have what i have few of the classes
34:38 - over here so first let me just grab this
34:41 - whole div with a whole comments and
34:43 - everything now we're going to be
34:44 - deleting them later but for now we
34:46 - should just have it and here let's do a
34:48 - template string so let's set it up over
34:50 - here like a template string and then let
34:52 - me just copy and paste this because we
34:54 - will going to be reusing this so now
34:56 - like i said i have the div
34:58 - i'm going to be creating a class list so
35:00 - i'm going to select the same thing card
35:02 - item then we're going to use a class
35:05 - list since i would want to add these
35:06 - classes because even though i'm creating
35:08 - a div i still want to add these classes
35:10 - now for the class list we can just
35:13 - rewrite the same thing so if i would
35:15 - want a cart item let me write over here
35:18 - that i would want card item then we can
35:20 - do comma then the next one is going to
35:22 - be d flex and after that we're going to
35:25 - have a justify
35:27 - content
35:28 - and between them i'm just making sure
35:30 - that i'm not misspelling something
35:32 - because it's going to be painful to look
35:34 - for mistakes
35:35 - text capitalize and as you already know
35:37 - if you're watching my tutorials i'm
35:40 - quite infamous for making
35:42 - mistakes like that with a misspelling
35:44 - and the last one is going to be my3 so
35:47 - these are the classes that we're adding
35:49 - now again like i said we were going to
35:51 - be using template strings ourselves so
35:53 - we don't need to retype everything i can
35:55 - just delete these comments because i
35:57 - don't need them in the template string
35:59 - and now i can just use a inner html and
36:02 - i can set this to to the inner html so
36:05 - first let me close this and now i can
36:07 - say that i would want for the cart item
36:10 - and i would want to set it to in inner
36:12 - html so we're going to have the dot of
36:14 - inner html and we're going to set it
36:16 - equal to the same template string so
36:18 - again maybe let me just save this so
36:21 - that way it's going to be a little bit
36:23 - better formatted so notice
36:25 - now i created a card item i added all
36:28 - the classes that i had in my div they
36:30 - already hard coded in my html and next i
36:34 - just use dnr html and everything that
36:38 - was already in my html i just applied in
36:41 - my app.js because i can use the template
36:44 - string i can directly place whatever
36:46 - html i have so now the last thing that i
36:49 - would want is just change the values
36:51 - because obviously i don't want the
36:53 - hard-coded values we're going to have a
36:55 - dollar sign then remember the item that
36:57 - we created the object that's holding all
36:59 - the values every time that's changing as
37:02 - we're clicking on a different item now
37:04 - we're going to use that item so first
37:06 - we're going to do item image since we're
37:08 - looking for the image
37:10 - then we're going to look for the name
37:12 - so where's the name so here's the price
37:14 - and we should have somewhere a name so
37:16 - we have again i cannot find it name for
37:18 - some reason okay because it's sitting so
37:21 - sneakily over here so let's delete this
37:24 - and again let's use a dollar sign in
37:26 - this case let's do item and this would
37:29 - be the item name and the last one is
37:31 - going to be the item price so again
37:33 - dollar sign
37:34 - and we're going to be targeting the item
37:37 - and the price so now we have created
37:41 - this car item now the last thing that's
37:44 - left is to target the cart remember we
37:47 - have the card so the items are sitting
37:49 - within the card and then i would want to
37:51 - insert this in the card however we're
37:54 - not going to do the up end and the
37:56 - reason for that is notice i have the
37:58 - item i have the item and then i have the
38:00 - total so if we're going to use the
38:02 - method of appending the child
38:05 - then these items are going to be
38:06 - somewhere here in the bottom so instead
38:08 - we need to use the insert before
38:12 - so let's go back again
38:14 - and let's figure out what we have so we
38:16 - have the app.js and like i said we have
38:19 - the inner html now once we're done with
38:22 - the inner html maybe let's do a comma
38:25 - where we have a select
38:28 - cart and now we would want to select the
38:30 - card
38:31 - so let's create a variable this is going
38:33 - to be cart
38:34 - document get element by id
38:38 - the id is going to be the cart
38:40 - then we're going to have another
38:42 - variable with a name of total so we're
38:44 - going to have const
38:46 - total and here we're going to use a
38:48 - query selector
38:49 - so document
38:52 - query
38:53 - selector and then the the i the id no
38:57 - not the id the
38:58 - class is going to be cart
39:01 - total
39:02 - container and i'm going to show you in a
39:04 - second where i'm getting this from
39:06 - container
39:08 - and once i have selected like i said
39:10 - we're going to use the method of insert
39:12 - before so we're going to use cart since
39:14 - we're selecting the cart then the method
39:17 - name is going to be insert before so
39:20 - let's go down and let's use insert
39:22 - before now insert before is going to use
39:24 - two parameters
39:26 - first is going to be what item we would
39:28 - want to insert so we would want to
39:30 - insert the cart item and then we would
39:32 - want to say where we would want to
39:34 - insert before which item so here we're
39:36 - going to use the total now let me save
39:38 - this and let me show you where i'm
39:39 - getting back to total now if i'm going
39:41 - to go down we have the card item card
39:43 - item now notice we have the card total
39:46 - so the point of this i want to insert
39:47 - before the card total so the card total
39:50 - is going to be all the way in the bottom
39:52 - now maybe the last thing just to show
39:55 - the customer that everything has
39:57 - happened correctly we can just do add
39:59 - the alert now obviously we could
40:01 - probably
40:02 - name something here better within the
40:04 - html it would be nicer if we would have
40:06 - some kind of element showing up over
40:08 - here but for the sake of this exercise
40:11 - let's just do alert and if some of you
40:13 - are annoyed by alert you can obviously
40:15 - go ahead and create your own element
40:17 - over here and show it and let's do item
40:20 - added
40:22 - to the cart so we're just going to use
40:24 - one of those alert boxes so if
40:26 - everything works correctly if we're
40:27 - going to go back
40:28 - we will going to have items in our cart
40:31 - so let's go back
40:33 - let's refresh and let's scroll down so
40:36 - we're going to have a suite item now the
40:38 - suite item has the cart now once i click
40:41 - it something is wrong something is not
40:43 - working because i don't have my alert so
40:45 - again let's figure out where is an issue
40:47 - so either we're targeting something
40:49 - wrong or there is some kind of mistake
40:52 - somewhere so again let's check it out
40:54 - what we have in the console and let's
40:56 - check it out on the smaller screen
40:57 - because and here it says cart item class
41:00 - list is not a function so let's figure
41:03 - out where we have the issue so we have a
41:06 - cart item class list and this is not a
41:09 - function and here instead of class list
41:12 - we'll just need to have add so again my
41:15 - apologies we have the classlist property
41:18 - and then i'm going to be using the
41:19 - method of add so we would want to add
41:22 - these classes over here and you see this
41:24 - is the nice thing about consoling log so
41:27 - we know for sure what we're getting back
41:28 - because we can do all this code and then
41:31 - start scrambling for the answers where
41:33 - is an issue so again my apologies i
41:35 - should have added a method of add and
41:37 - then here the para parameters are all
41:39 - the classes that we're adding to the
41:41 - card item so let's go back let's refresh
41:45 - and hopefully everything works fine this
41:46 - time so once i click it it says the item
41:49 - has been added to the cart okay let's
41:51 - scroll down let's maybe do the sweets
41:54 - again let's click it it says that it's
41:55 - added to the card now let's scroll up
41:58 - and the moment of truth
42:00 - sure enough we have the sweet item which
42:02 - was five bucks and then we have the
42:04 - another sweet item which was 15. well
42:06 - that'd be a little bit suspicious so
42:08 - again maybe let's do a cake
42:11 - maybe let's do not another cake maybe
42:13 - let's do a doughnut this time so now i
42:15 - have all these items so let's go up and
42:18 - everything is working fine so once we
42:20 - have figured out how to work within
42:22 - items there's one more thing that we
42:24 - would want and we would want to display
42:27 - what is the total so the money total
42:30 - that we have and then we would want to
42:32 - display how many items we have over here
42:35 - so let's go back again to our app.js
42:39 - let's scroll down
42:41 - and after the alert let's call this
42:43 - function let's say that this function's
42:46 - name is going to be show
42:48 - totals however i'm not going to write
42:50 - this function right now i'm not going to
42:52 - write it within this
42:54 - event listener so here we're just going
42:56 - to call this function once we have added
42:59 - the items however we're going to go all
43:00 - the way in the bottom so still within
43:03 - our immediately invoked function
43:05 - expression however all the way in the
43:07 - bottom so after the event listener and
43:10 - let's write the function so let's write
43:12 - that we would want to add totals so
43:15 - show totals and let's maybe start very
43:18 - simple let's say it has a function
43:21 - then show totals and let's just cancel
43:23 - log and just for sure we know that
43:25 - everything is working because again we
43:26 - don't want to spend another 10 minutes
43:28 - writing something and then scrambling
43:31 - for the answers so hello and once we
43:34 - save it if everything is correct we
43:36 - should have a console log of hello so
43:38 - once we open it up and it says the alert
43:40 - you see the alert runs we're adding item
43:42 - to the card and here would be hello so
43:45 - now we know that we have the function so
43:47 - now we just need to figure out the
43:48 - functionality of the function
43:50 - then let's start first by creating an
43:53 - array that's going to hold the total of
43:55 - my values and how we're going to do this
43:58 - well we're going to set up again a query
44:01 - selector hall
44:02 - so i'm going to be looking for all these
44:04 - prices you notice i have the price price
44:06 - and all these prices now we will going
44:08 - to be still counting whatever we
44:10 - hard-coded over here because this just
44:12 - makes sense now obviously if you want
44:14 - you can just go ahead and delete them
44:16 - for now since you already have all the
44:18 - items you have all the structure and
44:20 - everything but we're going to be still
44:21 - counting them so each and every time
44:23 - we're going to be still counting them
44:25 - now we're not going to count them as we
44:27 - refresh the page because we haven't set
44:29 - up anything in the local storage but as
44:31 - we add the item we're all going to be
44:33 - getting the correct total and the way
44:36 - we're going to do this we're going to
44:37 - create an empty array
44:39 - then we're going to select all these
44:41 - prices and then we're going to loop
44:43 - through them and then we're going to add
44:44 - them to an array and then we're going to
44:47 - use the reduce function to
44:50 - get one value and then we're going to do
44:52 - the same thing for this value so let's
44:55 - go back again and let's like i said
44:57 - first create an empty array so const
45:00 - total now this is going to be empty over
45:03 - here but it's going to be an array then
45:05 - let's look for the items so the items
45:08 - and the items like i said is going to be
45:09 - document
45:10 - then here we're going to be looking for
45:12 - a query selector all since there's going
45:14 - to be more than one we know that we
45:17 - might be getting i don't know 20 values
45:19 - and the class name is going to be cart
45:21 - item price now again let me show you
45:23 - where we're getting back and let me make
45:25 - sure that i have the dot so that way i
45:27 - know that everything is working so let's
45:30 - save this
45:31 - let's look at index.html
45:33 - notice we have the id of card item price
45:36 - and the class notice this is the item
45:39 - and here this would be the price so
45:41 - we're using the query selector all to
45:43 - get all the prices so let's go back to
45:45 - the app.js now once i have the items
45:49 - then i would want to loop through them
45:51 - so items for each so as i'm looping in
45:54 - the callback function we're going to
45:55 - write what we would want to do with each
45:57 - and every item so the item is going to
45:59 - be passed as a parameter and now we're
46:01 - going to say total so the array that we
46:04 - have and we can use the push method and
46:06 - we can add the item text content now why
46:10 - we're getting the text content because
46:12 - the text content is going to be holding
46:13 - the value now obviously this is the
46:15 - hard-coded value as we're inserting them
46:17 - with our own javascript this is that
46:20 - happening dynamically so i cannot show
46:22 - you right now you can just see it here
46:24 - so this is what we're looking for now
46:26 - let's go back but the problem is that
46:29 - this is a text value whatever we're
46:31 - getting back from text one content is
46:33 - going to be the string so we also would
46:35 - need to use a method of parse float
46:38 - which is going to take a string and set
46:41 - it as a math operation basically it's
46:44 - going to set it as a number now first
46:46 - let's do text item text content that
46:49 - we're getting back on and let's just
46:51 - cancel log it just so you can see that
46:53 - what i'm saying makes sense so log and
46:56 - let's do total just so we can see what
46:58 - we have in a total so once i'm going to
47:00 - refresh it
47:02 - if we'll scroll down and once again
47:04 - click on the item we're going to say you
47:06 - see we have 1099 1099 so hard coded
47:09 - values and the value that we added but
47:11 - you notice we have quotation marks so it
47:13 - is a string so now let's do a parsed
47:16 - float so that way we're making sure that
47:18 - this is going to be the number so parse
47:22 - and float and since this is a method
47:24 - we're going to add this item
47:27 - context content in parentheses and now
47:30 - in our case if we're going to scroll
47:31 - down again we're going to look for the
47:33 - value i'm going to click it again we're
47:35 - going to add it and now we have the
47:36 - numbers so this is what we want so
47:39 - everything is working correctly
47:41 - now here we can again maybe comment out
47:43 - a total and let's keep on working now
47:45 - let's get a total money
47:48 - so let's do a cons so new variable
47:51 - total money now for the total money this
47:54 - is going to be equal to a total so the
47:57 - name of our array
48:00 - and we're going to have it as a total
48:02 - reduce and we're going to use the reduce
48:04 - function now for the i'm sorry method so
48:07 - for the reduced method
48:08 - we are looking for a callback function
48:11 - this is going to be called however the
48:14 - reduce method
48:16 - callback function requires two
48:18 - parameters so the first one is going to
48:20 - be the total or accumulator and the
48:22 - second one is going to be the current or
48:24 - in our case it's going to be the item so
48:26 - the total is going to be what we are
48:29 - returning at the end of the reduce and
48:32 - the item is each and every item as we're
48:35 - looping through because even though this
48:37 - is a reduce we're still looping through
48:40 - all the items that we have in total so
48:43 - let's go back and let's just add a curly
48:45 - braces and remember that with a reduce
48:49 - we need to have an initial value so
48:51 - since i'm going to be using numbers
48:52 - we're going to set it as a 0. now what
48:54 - we're going to write in a cold block
48:56 - well first we always need to remember
48:58 - that we need to return the total
49:00 - otherwise we're not going to get our
49:02 - accumulated value and once we have
49:04 - returned a total now let's just do what
49:07 - we're doing each and every time as we're
49:09 - looping through well it's going to be
49:10 - very simple we're going to say total so
49:12 - total whatever we have and just plus
49:15 - equals so we're adding we're not
49:17 - rewriting each time and then we're just
49:18 - going to say item and then once we have
49:21 - the total money again we can just find
49:23 - out what is happening so in our case
49:26 - let's do a console log and let's call
49:29 - this total money since this is a name of
49:34 - our variable and notice that something
49:36 - is wrong i have one mon i
49:40 - not money so let's save this
49:42 - and if everything is working correctly
49:45 - let's add one value
49:47 - and let's add another value i'm getting
49:49 - the totals however there is an issue you
49:51 - notice we're using the floats and using
49:54 - the floats is nice we could have used
49:55 - the parse integer and then we wouldn't
49:58 - get these however let's imagine that
50:00 - whatever store we're going to be using
50:02 - they're all going to be using some kind
50:03 - of sense not every store is going to
50:05 - have the even numbers so we could have
50:08 - used the parse int instead of float but
50:11 - it is better if we're using the flow i
50:13 - purposely use the float now we need to
50:15 - fix this somehow we don't want to show
50:17 - in a card these kind of ridiculous
50:19 - numbers and the way we do that and again
50:21 - we're going to do the new variable so
50:23 - const final money and we're going to set
50:26 - it equal to a total money so the
50:28 - variable that we have right now and
50:30 - we're going to use another method and
50:32 - the method is going to be 2 fixed now
50:35 - for the fixed we need to pass the
50:36 - parameter so how many numbers after the
50:39 - dot so in my case i'm going to use two
50:41 - and then we just can do instead of total
50:44 - money let's have it as a final
50:47 - money let's save this and now let's add
50:50 - again a few items over here let's add
50:53 - one to the card
50:54 - and notice i have 31.98
50:57 - instead of these ridiculous
50:59 - 10 numbers behind the dot and now we
51:01 - have 36. so everything is working now
51:04 - the last thing what's left is just
51:06 - insert these values so if i'm going to
51:08 - go back what i'm trying it to do is
51:10 - insert the value over here in the total
51:13 - and insert the value on the top and
51:16 - we're also going to use the items and
51:17 - here this is going to be very simple
51:19 - we're just going to get the length of an
51:21 - array so it's going to see how many
51:23 - items we have and then these would be
51:25 - the items that are displayed now let's
51:28 - go back and let's just target these and
51:31 - then once we have targeted them we just
51:33 - would want to insert the final money so
51:35 - here it's going to be very simple
51:37 - let's do a document and there's going to
51:40 - be document by id
51:42 - document query selector and another id
51:44 - so let's last thing document
51:48 - get element by id now i'm looking for
51:51 - the cart total and i'm going to show you
51:53 - all these values right now let's just
51:55 - type them first and then we're going to
51:56 - see where they're at so text content is
51:58 - going to be equal to a final money so
52:01 - the final money i would want to show
52:03 - like i said we're going to copy and
52:04 - paste this because a lot of things are
52:06 - going to be the same then we can do
52:08 - the item count so this is going to be
52:11 - another id that we're looking for
52:14 - and here the text content we're just
52:16 - going to use like i said the array
52:17 - length so if we want to show how many
52:19 - items we have the only thing we need to
52:21 - show we we know that we have the array
52:22 - that's holding all the values so let's
52:24 - do total length since i know that this
52:27 - is going to be referencing how many
52:28 - items i have the an array and last thing
52:31 - the final money text content however
52:34 - here we're going to be looking for item
52:35 - total
52:36 - so the class of item total and since i'm
52:39 - using the class i would need to change
52:41 - this to query selector and now let's go
52:43 - in the index.html i'm going to show you
52:46 - where i'm getting all this
52:47 - let me just show let me just fix this
52:50 - query selector let's save this now if
52:52 - we're going to go back to index.html now
52:55 - first things first let's scroll down to
52:57 - a total so card total so what i'm
53:00 - looking for you notice i have a clear
53:02 - card and a checkout however the cart
53:05 - total is the one that's holding the
53:07 - total so this is why in app.js we were
53:09 - targeting the element by a d of cartoon
53:12 - now the second one is going to be where
53:14 - we go up and this is going to be the
53:15 - info so again we're going to scroll
53:18 - somewhere this would be the cart we are
53:20 - too low
53:22 - notice we have the cart info and then
53:24 - again we have the item total and like i
53:26 - said this would be the class this why we
53:29 - have the class and therefore we're using
53:32 - the id now let me see item total i'm
53:35 - using the class so everything is correct
53:38 - however
53:39 - for the
53:40 - item count there has to be an id so let
53:43 - me just check that it is id
53:45 - so item count item yeah the id is item
53:48 - count so now we know where we're getting
53:50 - all the values now the last thing is
53:52 - just to go and refresh and hopefully
53:55 - everything works fine like i said these
53:57 - are hardcoded values now obviously we
53:59 - would be probably putting zero and zero
54:01 - but i just wanted to put something like
54:03 - two items in 1049 or whatever now let's
54:06 - scroll down and again let's maybe add
54:08 - like six items just so we know that
54:10 - everything is working correct
54:12 - another this guy
54:14 - another this guy
54:16 - and let's do another this guy
54:20 - now everything is working fine let's go
54:22 - up and sure enough we have the value of
54:24 - 56. do we have six items yes we do so
54:27 - one two three four five six and i'm not
54:30 - gonna take my calculator out but i think
54:33 - that this should be a correct value if
54:35 - not obviously correct me

Cleaned transcript:

in the shopping cart project we're going to look at how we can add a javascript functionality to add items to the cart as you can see first we have the button that will kind of show the cart so we're going to add first the functionality to show the card itself and here you can see that we have heart coded items and here would be a total so notice what we have we have two items and then 49 again hard coded and then we would have ten dollars which obviously doesn't match the items that we have now if we're going to scroll down and we're going to see the items then we're going to have the little icon that's going to be showing up when once we're going to click the cart icon we're going to have a alert that's going to say the item has added to the card now let's add one more just so we can see that it's for sure working so again we have a item added to the card and if we're going to scroll up first you're going to notice that we'll have four items right now because we're counting all the items even the hardcoded ones but obviously later on once you're done with the project you can just delete the hardcoded ones and also we have the value so it's counting all the dollars that we have for the items and if you notice that we have the exactly two items that we selected from our store items list and they have been added to the cart the project setup files are located on my github so you can either go directly and just find by the project's name or you can follow the link that i have left in the description of the video once we get a hold of the source files we have the folder and within the folder as always we have all the images the css that's necessary for the bootstrap and also the font awesome so here we can just check it out first what we have in the index.html and so far since there is no functionality we can click all day long and the cart itself is not going to be showing and also the items are not going to be added to the cart as we're clicking on the icon because obviously this is the purpose of the project so now let's open up the same folder in our favorite text editor and as you can see that i'm sitting in my index.html now i'm not going to show right now each and every id or class that we're looking for because there's going to be quite a few of them so as we're going along i'm just going to switch back and forth and i'm going to show you where exactly i'm finding the either the id or the class so now let's right away switch to mjs here let's make a comment that this is going to be a show card so first let's start with showing the card and also as always we're going to do everything in the immediately involved function expressions because in this case you'll show that we're going to separate the issues so first we're going to work in our first immediately invoked function expression where we're going to deal with the card and then we're going to create another one which is going to hold the items added to the card so we're going to make sure that we're not sharing the global scope with our variables so let's start with declaring a immediately invoked function expression which is going to have the syntax of parentheses then the function keyword then again another set of parentheses and then the curly braces for the block of code were all going to be working now here i'm going to invoke the immediately invoked function expression and now we're ready to start working now like i said first we would want to select the cart info which is going to show our card so if we're going to switch back we are targeting this button and after that we're targeting the actual card so if we're going to switch back to index.html and we can either use the command f so that way we can find and if we type cart info we're going to see that we're looking for the id of card info so this would be the button which we would want to target now i cannot see this in a smaller screen this is why during this tutorial we're going to switch back and forth to a bigger screen and also we would want to show the cart so the card itself is right here so this is below the header and here the card is sitting now we're using the position absolute this is why we cannot see the card right now and the way we're going to do this we're going to target the cart info we're going to attach the event listener and then we're going to use this class of show card because if you notice we have for the card for the actual card that we're going to be showing the width right now is zero and once we click the button we're going to add this class of show a cart to the cart and then we're going to be showing because notice that with the show of card class the width is 18 rems so right now the width is zero and overflow is hidden this is why we cannot see the card also and then we're gonna attach this class with a javascript so let's go back to the mjs first let's name our variable this is going to be cart info because this is the same thing as we're going to be targeting so here we'll have a document then we would want to use document get element by id and like i said the id was cart info so cart dash info and now once we have our object back since we know that once we're targeting something we're getting back return as an object we can do event listener now before we do an event listener let's right away select the card itself so for the cart we're gonna have the element by id of cart so the card is gonna be again the same thing document get element by id and we're going to be selecting the card so the name of the id is going to be the card like i said right now we would want to attach the event listener to a cart info button so let's do a cart info since that is the name of the variable then since we have the object we can use the method of add event listener and the first parameter we are expecting what kind of event we're listening to which is going to be the click event and the second one is going to be the callback function which will be executed once the event fires and like i said we're going to do a very simple thing we're going to select the cart that we have targeted before then we're going to use the class list property and then we're going to have a toggle now for the toggle we're going to specifically write what kind of class we're going to toggle so instead of checking whether the cart has the class of show card or doesn't have we have an option of using a toggle now for the toggle we're going to have to write what class we are looking for and then javascript is going to decide if the cart has the class of show card then we're going to remove the clasp once we're clicking the icon and then if it's the opposite then obviously we're going to be hiding so once we save it and once we're going to go again to the bigger screen because this is where we're going to be able to see this once i click it notice now the cart is showing and now we're hiding the card now i added few things in the css it's not just the width now i also see that we're rotating a little bit and some other things and obviously if you like to you can go ahead over here and explore what we're doing but now that we have the card this would be our first thing that we would like to achieve and the second one is going to be working within items now items we're going to have a little bit more code and maybe in order again to avoid naming the same variables and them colliding who's going to create another immediately invoked function expression so here let's call add items to the cart so this is going to be our comment and then we're going to do the same thing where we have parentheses then we have another set of parentheses then the code where we're going to be placing our code and then we're going to invoke it right away so again we can close it out and we can start writing whatever functionality we would like now first let's select store item icon now what is store item icon well first i can show you in the html this would be this icon you notice here we have the cart and it's showing only as i'm hovering over the image of the store item so let's go to index.html let's write the name so this would be store item and we have the icon now this this would be the store item like i said that is within the column then here we have the card then this would be the image then i'm sorry this would be actually the image container then this would be the image that's sitting within the image container and then here still within the container we're going to have this pan and the span is going to hold the value of font awesome icon which would be the shopping cart so what we're doing is we're targeting all of these spans with the class of store item icon and we would want to attach the event listener to them so here let's do a const we're going to call this a cart btn and let's set it equal to document then we're going to do query selector all because there's going to be more than one cart icon and then we're going to target again the class of store icon and we're gonna have the store item icon sorry store item icon so quite a long name with a two dashes we obviously could have maybe named it with a camel case but let's just go along with it like it is right now so once we have selected the store item icons then we would want to attach the event listener now before we do that let's open up the google developer tools just so we can see that everything is working and since we're going to be traversing a dom a lot we will going to be using console.log today a lot now before we start typing all the functionality i just want to let you know right away that in general there is a way better way how to do this than what we were going to do it now the reason for this is this is a javascript dom project so therefore we're going to be traversing a dom more than we would want to just so we can get a practice in general we're going to add some kind of attribute over here that gets hold the of the id that's showing and then instead of just getting all the items with traversing the dom which we will going to do in this project you're just going to get an id and you're just going to contact the database and get all the information and then place it in the card so this is not technically the best way how to do it but again like i said since this is a javascript dom project we're going to do it a little bit long way so let's go back over here to app.js and let's start working with a cart button now like i said for the cart button we would want to add a for each because we are getting back a known list so we would want to attach this event listener to all of them so we're going to do for each so we're going to loop through all of them and here for each and one of them we're going to have a callback function whereas a parameter we're passing the button that we're looping through so each and every element of this card button node list and here we would want to first figure out what we're getting at so why am i saying is what we're getting at well i would want to figure out what i'm actually clicking on so instead of event listener first let's do a btn add event listener and let's do btn and event listener so now i'm targeting the exact button each and every time as i'm looking through there right and now i would want to hatch attach a click event so for all of them we would attach the click event and here we're going to write a callback function which will fire as the click event happens so if we're going to click on any of these card icons then the event is going to fire and the callback function is going to be the call so here let's do a code block and now let's decide what we're working on now we passed in here the event as the object because we were going to use this to traverse it down and let's start very simple let's do console.log and let's do event target now we have the event object and we also have the property of target now the property of target is going to let us know what element we're clicking on so once i save it and once i'm going to go back in smaller screen notice if i click it you see that i'm clicking on the i which would be the font awesome icon however i also have the option of clicking on the span of the store item icon and what we would want to do is we would want to set up that we are reading only when we're clicking on the actual icon on the little font awesome icon over here because it's going to be easier for us to set up the if statement that way because we only need to care about one thing now once we know this we know that if i would want to set up for the icon i would need to somehow check that the event target has the parent element that has this class so we know that we have the event target however also we can use the property of parent element which is going to look for a parent element and then we're going to look for the parent element that has the class of store item icon so that way i'm just making sure that only the event fires if i click on the actual card icon instead of somewhere here in the span so let's do again the event target and then maybe let's comment it out so we still have it just in case we want to look at it and then let's do an if statement and then like i said we're going to target event target so whatever element we're clicking on then we're looking for a parent element and we're making sure that this parent element has a class list of store item icon so again this way we're making sure that the event fires only once we click it on the icon so the class list we're going to be looking for the class over here now we can either grab it from here or we can just write it so let's write a parenthesis and we have store item and icon so now we're going to be firing the event only if we're clicking on the icon now once we have selected the icon now the interesting part starts and like i said this is going to be a little bit a long way but this will going to make us practice a traversing to them so first things first again let's start looking what we would need well i would need to get somehow the source of the image that i have right now so if we're going to go back to index.html we notice that i have my span so this pan has the phantasm icon now the next element right next to the span is going to be the image so then we need to start traversing the dom where once we click the icon then we would want to look for a parent element and then we would want to look for previous elements sibling so then we're looking for the sibling what is in the dom because if you notice the image and the span are both children of image container the image container has two children and once we know that we can select the parent element of my phantasm icon i know that i can select a previous element sibling which would be sibling right next to it and previous is obviously because this is the first child and this is the second one and then we can select the source but it's going to be maybe a little bit easier if we do a console log that way we can see everything that we're doing so let me do again a log now within this console.log we're going to do event then we're going to have a target so whatever we're clicking on then we're going to have a parent element and then let's have a look what we have in the parent element so let's save this once i click on the icon notice that it says well parent element class list is not actually defined so let's go back over here and let's figure out where is the problem now the problem is that we have a class list but we need to make sure that this class list contains so we're using a property of classlist and then we're checking with a contains so my apologies i had a little little bug so once i click it and again it says contains is not a function and over here again the problem is because i misspelled it so the name actually is contains and hopefully with a third time this is going to be the charm and sure enough now i'm getting back the span so now i'm getting back to span however i know that there is a sibling for this pen which would be the image now let me show you by attaching one more time the property of parent element and now let's see what we have so we click the icon and then you notice i'm getting the image container and the reason for that is this is a parent container for our span so once i open it up notice i have the image and i have the span now i know how to get to the span using event target parent element now i would need to decide how i can get to this image and grab the source so let's do a previous element sibling which would be another property so previous previous let me make sure that i'm actually spelling this correctly because this is not going to work if it's not written correctly so element and then we're going to have sibling so this would be a property name and here since i know that this is the image all right right away can do a source now maybe let's before we do the source let me just check that this property is written correctly and once we click it we have you see we have the image so this would be previous element sibling now like i said i would be interested in the source so let me click a source and i should be getting back the source so once we click it we should have the undefined because obviously again very clever from my part and let me save this and let me click it and sure enough now i'm getting back to source so if i'm going to scroll down let's say the suite item again run it and this is showing us the sweets too so we know we're getting back the different source so now i would want to set it up equal to some kind of element so some kind of variable so first let's say that this is going to be let and we're going to call this full path so this is going to be my variable let me delete the parentheses over here because now i'm just setting equal to whatever getting back to a full path now once we have the full path there is a little bit of an issue because you notice i'm going to open up a sidebar i have the image but i have the image card what is the reason for this image card well you see when we're going to be opening up the cart i have a smaller images i have images that are only 50x50 there's no point for me to grab this massive image and place it in the card so i have two sets of images one is going to be the big image that's showing within my items and the second one is the small one that's displayed in the card so this full path right now is not good enough for me i would need only the part where it says what kind of image it is in here because i'm going to change this first part you notice i have sweets too and cupcake one this is what i'm interested so let me close the sidebar and let me start manipulating with a string that i have back so here let's set up a new variable and i'm going to call this position and now i'm going to use the variable that i have for the full path and i'm going to find the position of the image of this string of image so i'm going to have a full path this would be the name of my string then i'm going to use the index of a method and this method is going to help me to find what is the position of the image so if i'm going to go back and if i'm going to say image now i should be getting back the image so let's do again a console log just so we can always see what is happening so if i'm going to go back and click it on the item i should be getting back a 22. so i know that in the full path i'm getting back the index of 22. so index of image is going to be 22. now i'm going to use another method which would be slice so here we're going to use the image that we're getting back and we would be slicing however before we slice the idea is that i would want to take off all the text that is including the image and before the image because if you remember the full path and maybe again let's comment this out just so it's a little bit easier to see so if we're going to go back refresh the page and once i click it you notice i would want to do a slice which would be a method that i can use on a string and i would want to take off all this text starting from this forward slash so i want to take everything off and then i'm going to switch this instead of image you notice that if we have a cart image this is the folder that i would want to set it up for so image card now if we see in the index.html right now we're having image suites one now in this case we're just going to flip it so in the cart it's going to be image cart instead of this folder so let's go back again to app.js and let's change this and the reason why i added three these three characters because this image is three strings long so this string is three characters long so since i would wanna remove everything then in this case i know that i'm just gonna use these three characters so i'm adding them over here and once we have the position now let's do the slice method and we're going to have the slice method of partial path so we're going to name another variable so partial path and we're going to set it equal to again a full path this time then we're going to use the slice and a slice would need a index so where we would want to start removing and then the second parameter is how many characters however if i don't add any characters i'm going to be taking off everything till the end of the string so i think it's going to be a little bit easier to show you so let's do again partial path and now let's have it as a console log and partial path just so we can see for sure what's happening now once again we can't log it if i click it i should be getting back the image now here it says partial path is not defined and here you can see that i added h so let me fix that and now everything should be working so once i click it notice i'm only getting back the sweets or i'm only getting back the kick now again the point for this number of three was if i would remove it notice what would happen so i'm going to save it and now once we again refresh and once we click notice i'm getting back the image so i'm getting the index of the position and i can still do the slice however i'm including the image but since i'm going to use the image cart folder then in this case i would want to get rid of the image also so it's going to add again three and then i'm just going to be getting the name of the image that i have so let me close the sidebar and now we have the full path well the partial path after we have gotten a full path now over here again let's just delete this console log because we have been console logging and then now let's set up a object that we're going to be placing in my card because if we're going to go back and if we notice in the card i have the image which we just got the image so we we good with an image however also i have the cart name and here we'll have a price so i'm going to set up a object that's going to hold all these values so first let's just call this item and we're going to set it up to a empty object so the object literal syntax would be just a curly braces and once we create a object with a object literal we're just going to add a properties to it now obviously we can write the properties right away as we're making this object literal but since there is no right or wrong way of doing it we can just add the properties later so in our case we're just going to have the properties later now i'm going to call my first property an image now this image is going to be equal to a template string then i'm going to use the folder where i'm be getting the images from and now i'm going to use again the variable since i'm using a template string we're going to use a dollar sign and then we're going to look for this partial path because this is going to be the image that we're getting back each and every time on a different icon where we're clicking so here let's do a partial and we're going to call this path now again just to make sure that everything is working correctly let's do a console log only in this case let's do the item since there's going to be other things that we're going to be looking at so let me save it and once we're going to click on the cart notice i'm getting the image and now this would be the path that i'm looking for so we flipped around with an image now we have the image card now image would be one thing now next i would be looking for a element the name and then over here for the price and again we're going to have to do a little bit of dom traversing to get there so here we have the console.log item and let's just keep this item because we're going to be adding the properties later on anyway so we might as well have it right now so let's have it first as a name and we're going to set it equal to let name now name is going to be equal to what well first we're going to start again with a event target then we're going to have the parent element so we're first looking for a parent element which would be what which would be spam so we have a parent element then we're going to look for another parent element so we're going to have another parent element and then we're going to have a next element sibling and let me show you why we're doing it this way so we have a another parent element and then we'll have a next element sibling sibling over here and for now let's just put a semicolon and let's cancel luggage so we can see again what's happening so we have the name and if i'm going to click it notice what i'm getting back so here i'm getting back the card body now what is in the card body well in the card body we have the name and the dollar sign so if we're going to go back to index html notice what happened so we started traversing from the font awesome icon then we got to the span which was the parent element then we got to a parent element which was image container now the image container is a child of the card now the card has also a child of card body so i have two of them i have image container and card body so the same way how previously we were looking for the image we used instead of previous element sibling now we're using next element sibling so now i got a hold of this card body now in the card body again we're going to be looking for children because this text is sitting where it is sitting within the first child so we're going to be looking for a children and then within a first child we also have the first child of cupcake item so store item name and like i said let me repeat this is why we would use a different way when we're doing this normally but again this is a project on javascript dom so we'll have to traverse it down so like i said now we have next element sibling then we're going to be looking for a children now children is going to return in our case an array and i know that this is going to be the first child well in fact this is going to be the only chat we're still going to have a note list so in this case let's do zero so now we're selecting the card text and then since this card text also has a child we're looking for a first child notice over here the cupcake item so let's do a dot then again let's do children and then let's have it as a zero and here let's set it equal to text content so that text text content now the text content should return us the property now if everything goes correctly i'm going to save it and let's notice what we have so if i'm going to click it what do i have i have the cupcake item then if we're going to scroll down again we're going to have the donut item so i'm getting back the name so everything is working fine now what's left well i would want to set up again the item dot name so the property and i would add it i would want to add it to the item so again let me do the same way where we have the item and then we're going to have the name so item name this would be the property and we're going to set it equal to name so both of the properties now once we cancel log the item and maybe we can just comment out a log of name once we click it sure enough now we have not only the image card we also have the name now after that there's going to be the price which is going to have a very very very similar way so we can might as well copy and paste it now the only difference we're going to be changing the children because remember this card body had first a child and then let me maybe show you in the index.html notice we had card body which we got with a next sibling then we went to children which would be the first child with the a index of zero and then since we're looking for a text with a children zero so first child of card text then we were gonna look here for a children one so this would be the second in the note list and therefore we're gonna access it with the children one so let's go back and let me just change this so let me grab this let me just copy and paste this however let's change around a little bit and here first of all this is going to be the price so we're going to be looking for a price and second we're not going to be looking for children one we're going to be looking for a second child so we're going to flip this around and let's do again a council log just so we can see what's happening and let's council lock the price so again scroll down maybe to a different item and let's see what we have so far so as i click it now i'm getting back the value of 15. so if i'm going to go somewhere where's 10 again let's click and here we're going to have it 10. so we know that everything is working however we have this dollar sign over here and also you notice that i have the space now i don't want a space and i wouldn't want a dollar sign so there's a couple of things that i would need to fix around so let's do again maybe let's do another variable now the variable name is going to be final final price so final price and this is going to be equal again to a few methods we can use on the strings well first we're going to be selecting the string so what string we would want well we would want a price string where we have the value of fifteen dollars or ten dollars in our case then we're gonna gonna do again the slice so now we're gonna be slicing now since i know that a dollar sign is going to be the character of zero then the space over here is going to be the character one i would want to use the slice and if i'm saying that starting from the first one so i want to get back everything that i have starting from the index of one now index of one is going to be the space and then i'm going to be getting back to 15. now just to make sure that i have no white spaces also we're going to add another method which would be trim which we're going to remove all the extra white space so instead of price let's console log the final price so final price let's save this let's maybe i don't know scroll up and down somewhere where we have our famous cart and sure enough now i'm getting back to that so now everything is working i have the 10. now the last thing again let's do the same thing where we have the item and instead of a price we're going to have a final price so we can do item then price and the price is going to be equal to a final price so again we can do the same thing where we comment out the final price in the console log and now we're going to be getting back what we have the then item so again let's scroll somewhere where is the first cake we're going to click it now i have the image the name and the price now the price is still going to be the strength but don't worry about it we're going to fix it later we don't need to worry about it right now now next on our agenda is going to be creating an element that we're inserting in our cart so notice we have a structure over here and this is the hard coded part but we're going to use this so we have the element we have the name then we have the price and then we have the icon that's going to be used later on not in this tutorial but later on to delete this so let's go back and let's figure out what we're doing well first of all we need to see what's happening well we have the log so log is fine maybe we can just comment it out so it's not in our way and now we would want to create a new item now what kind of item we're going to be creating well if i'm going to go back and i'm going to look in the nav bar where i have my items then i should notice that first i have the card info which was a button and then i'm going to look i have to look for the card now notice here i have the card so we selected the card and this would be the card item now this is the div that we would be creating now we're going to be using a template string so we don't have to recreate everything that's the good thing of coding this in the html that now with the template strings we can just reuse a lot of things and just change the values over here but i would first need to create that div so let me go back in the app.js and let me first create a div so const then we're going to have cart item so this would be the name of our item and we're going to do a document create element so we're going to be creating an element and we're going to be creating a div now since you noticed that within a div i have what i have few of the classes over here so first let me just grab this whole div with a whole comments and everything now we're going to be deleting them later but for now we should just have it and here let's do a template string so let's set it up over here like a template string and then let me just copy and paste this because we will going to be reusing this so now like i said i have the div i'm going to be creating a class list so i'm going to select the same thing card item then we're going to use a class list since i would want to add these classes because even though i'm creating a div i still want to add these classes now for the class list we can just rewrite the same thing so if i would want a cart item let me write over here that i would want card item then we can do comma then the next one is going to be d flex and after that we're going to have a justify content and between them i'm just making sure that i'm not misspelling something because it's going to be painful to look for mistakes text capitalize and as you already know if you're watching my tutorials i'm quite infamous for making mistakes like that with a misspelling and the last one is going to be my3 so these are the classes that we're adding now again like i said we were going to be using template strings ourselves so we don't need to retype everything i can just delete these comments because i don't need them in the template string and now i can just use a inner html and i can set this to to the inner html so first let me close this and now i can say that i would want for the cart item and i would want to set it to in inner html so we're going to have the dot of inner html and we're going to set it equal to the same template string so again maybe let me just save this so that way it's going to be a little bit better formatted so notice now i created a card item i added all the classes that i had in my div they already hard coded in my html and next i just use dnr html and everything that was already in my html i just applied in my app.js because i can use the template string i can directly place whatever html i have so now the last thing that i would want is just change the values because obviously i don't want the hardcoded values we're going to have a dollar sign then remember the item that we created the object that's holding all the values every time that's changing as we're clicking on a different item now we're going to use that item so first we're going to do item image since we're looking for the image then we're going to look for the name so where's the name so here's the price and we should have somewhere a name so we have again i cannot find it name for some reason okay because it's sitting so sneakily over here so let's delete this and again let's use a dollar sign in this case let's do item and this would be the item name and the last one is going to be the item price so again dollar sign and we're going to be targeting the item and the price so now we have created this car item now the last thing that's left is to target the cart remember we have the card so the items are sitting within the card and then i would want to insert this in the card however we're not going to do the up end and the reason for that is notice i have the item i have the item and then i have the total so if we're going to use the method of appending the child then these items are going to be somewhere here in the bottom so instead we need to use the insert before so let's go back again and let's figure out what we have so we have the app.js and like i said we have the inner html now once we're done with the inner html maybe let's do a comma where we have a select cart and now we would want to select the card so let's create a variable this is going to be cart document get element by id the id is going to be the cart then we're going to have another variable with a name of total so we're going to have const total and here we're going to use a query selector so document query selector and then the the i the id no not the id the class is going to be cart total container and i'm going to show you in a second where i'm getting this from container and once i have selected like i said we're going to use the method of insert before so we're going to use cart since we're selecting the cart then the method name is going to be insert before so let's go down and let's use insert before now insert before is going to use two parameters first is going to be what item we would want to insert so we would want to insert the cart item and then we would want to say where we would want to insert before which item so here we're going to use the total now let me save this and let me show you where i'm getting back to total now if i'm going to go down we have the card item card item now notice we have the card total so the point of this i want to insert before the card total so the card total is going to be all the way in the bottom now maybe the last thing just to show the customer that everything has happened correctly we can just do add the alert now obviously we could probably name something here better within the html it would be nicer if we would have some kind of element showing up over here but for the sake of this exercise let's just do alert and if some of you are annoyed by alert you can obviously go ahead and create your own element over here and show it and let's do item added to the cart so we're just going to use one of those alert boxes so if everything works correctly if we're going to go back we will going to have items in our cart so let's go back let's refresh and let's scroll down so we're going to have a suite item now the suite item has the cart now once i click it something is wrong something is not working because i don't have my alert so again let's figure out where is an issue so either we're targeting something wrong or there is some kind of mistake somewhere so again let's check it out what we have in the console and let's check it out on the smaller screen because and here it says cart item class list is not a function so let's figure out where we have the issue so we have a cart item class list and this is not a function and here instead of class list we'll just need to have add so again my apologies we have the classlist property and then i'm going to be using the method of add so we would want to add these classes over here and you see this is the nice thing about consoling log so we know for sure what we're getting back because we can do all this code and then start scrambling for the answers where is an issue so again my apologies i should have added a method of add and then here the para parameters are all the classes that we're adding to the card item so let's go back let's refresh and hopefully everything works fine this time so once i click it it says the item has been added to the cart okay let's scroll down let's maybe do the sweets again let's click it it says that it's added to the card now let's scroll up and the moment of truth sure enough we have the sweet item which was five bucks and then we have the another sweet item which was 15. well that'd be a little bit suspicious so again maybe let's do a cake maybe let's do not another cake maybe let's do a doughnut this time so now i have all these items so let's go up and everything is working fine so once we have figured out how to work within items there's one more thing that we would want and we would want to display what is the total so the money total that we have and then we would want to display how many items we have over here so let's go back again to our app.js let's scroll down and after the alert let's call this function let's say that this function's name is going to be show totals however i'm not going to write this function right now i'm not going to write it within this event listener so here we're just going to call this function once we have added the items however we're going to go all the way in the bottom so still within our immediately invoked function expression however all the way in the bottom so after the event listener and let's write the function so let's write that we would want to add totals so show totals and let's maybe start very simple let's say it has a function then show totals and let's just cancel log and just for sure we know that everything is working because again we don't want to spend another 10 minutes writing something and then scrambling for the answers so hello and once we save it if everything is correct we should have a console log of hello so once we open it up and it says the alert you see the alert runs we're adding item to the card and here would be hello so now we know that we have the function so now we just need to figure out the functionality of the function then let's start first by creating an array that's going to hold the total of my values and how we're going to do this well we're going to set up again a query selector hall so i'm going to be looking for all these prices you notice i have the price price and all these prices now we will going to be still counting whatever we hardcoded over here because this just makes sense now obviously if you want you can just go ahead and delete them for now since you already have all the items you have all the structure and everything but we're going to be still counting them so each and every time we're going to be still counting them now we're not going to count them as we refresh the page because we haven't set up anything in the local storage but as we add the item we're all going to be getting the correct total and the way we're going to do this we're going to create an empty array then we're going to select all these prices and then we're going to loop through them and then we're going to add them to an array and then we're going to use the reduce function to get one value and then we're going to do the same thing for this value so let's go back again and let's like i said first create an empty array so const total now this is going to be empty over here but it's going to be an array then let's look for the items so the items and the items like i said is going to be document then here we're going to be looking for a query selector all since there's going to be more than one we know that we might be getting i don't know 20 values and the class name is going to be cart item price now again let me show you where we're getting back and let me make sure that i have the dot so that way i know that everything is working so let's save this let's look at index.html notice we have the id of card item price and the class notice this is the item and here this would be the price so we're using the query selector all to get all the prices so let's go back to the app.js now once i have the items then i would want to loop through them so items for each so as i'm looping in the callback function we're going to write what we would want to do with each and every item so the item is going to be passed as a parameter and now we're going to say total so the array that we have and we can use the push method and we can add the item text content now why we're getting the text content because the text content is going to be holding the value now obviously this is the hardcoded value as we're inserting them with our own javascript this is that happening dynamically so i cannot show you right now you can just see it here so this is what we're looking for now let's go back but the problem is that this is a text value whatever we're getting back from text one content is going to be the string so we also would need to use a method of parse float which is going to take a string and set it as a math operation basically it's going to set it as a number now first let's do text item text content that we're getting back on and let's just cancel log it just so you can see that what i'm saying makes sense so log and let's do total just so we can see what we have in a total so once i'm going to refresh it if we'll scroll down and once again click on the item we're going to say you see we have 1099 1099 so hard coded values and the value that we added but you notice we have quotation marks so it is a string so now let's do a parsed float so that way we're making sure that this is going to be the number so parse and float and since this is a method we're going to add this item context content in parentheses and now in our case if we're going to scroll down again we're going to look for the value i'm going to click it again we're going to add it and now we have the numbers so this is what we want so everything is working correctly now here we can again maybe comment out a total and let's keep on working now let's get a total money so let's do a cons so new variable total money now for the total money this is going to be equal to a total so the name of our array and we're going to have it as a total reduce and we're going to use the reduce function now for the i'm sorry method so for the reduced method we are looking for a callback function this is going to be called however the reduce method callback function requires two parameters so the first one is going to be the total or accumulator and the second one is going to be the current or in our case it's going to be the item so the total is going to be what we are returning at the end of the reduce and the item is each and every item as we're looping through because even though this is a reduce we're still looping through all the items that we have in total so let's go back and let's just add a curly braces and remember that with a reduce we need to have an initial value so since i'm going to be using numbers we're going to set it as a 0. now what we're going to write in a cold block well first we always need to remember that we need to return the total otherwise we're not going to get our accumulated value and once we have returned a total now let's just do what we're doing each and every time as we're looping through well it's going to be very simple we're going to say total so total whatever we have and just plus equals so we're adding we're not rewriting each time and then we're just going to say item and then once we have the total money again we can just find out what is happening so in our case let's do a console log and let's call this total money since this is a name of our variable and notice that something is wrong i have one mon i not money so let's save this and if everything is working correctly let's add one value and let's add another value i'm getting the totals however there is an issue you notice we're using the floats and using the floats is nice we could have used the parse integer and then we wouldn't get these however let's imagine that whatever store we're going to be using they're all going to be using some kind of sense not every store is going to have the even numbers so we could have used the parse int instead of float but it is better if we're using the flow i purposely use the float now we need to fix this somehow we don't want to show in a card these kind of ridiculous numbers and the way we do that and again we're going to do the new variable so const final money and we're going to set it equal to a total money so the variable that we have right now and we're going to use another method and the method is going to be 2 fixed now for the fixed we need to pass the parameter so how many numbers after the dot so in my case i'm going to use two and then we just can do instead of total money let's have it as a final money let's save this and now let's add again a few items over here let's add one to the card and notice i have 31.98 instead of these ridiculous 10 numbers behind the dot and now we have 36. so everything is working now the last thing what's left is just insert these values so if i'm going to go back what i'm trying it to do is insert the value over here in the total and insert the value on the top and we're also going to use the items and here this is going to be very simple we're just going to get the length of an array so it's going to see how many items we have and then these would be the items that are displayed now let's go back and let's just target these and then once we have targeted them we just would want to insert the final money so here it's going to be very simple let's do a document and there's going to be document by id document query selector and another id so let's last thing document get element by id now i'm looking for the cart total and i'm going to show you all these values right now let's just type them first and then we're going to see where they're at so text content is going to be equal to a final money so the final money i would want to show like i said we're going to copy and paste this because a lot of things are going to be the same then we can do the item count so this is going to be another id that we're looking for and here the text content we're just going to use like i said the array length so if we want to show how many items we have the only thing we need to show we we know that we have the array that's holding all the values so let's do total length since i know that this is going to be referencing how many items i have the an array and last thing the final money text content however here we're going to be looking for item total so the class of item total and since i'm using the class i would need to change this to query selector and now let's go in the index.html i'm going to show you where i'm getting all this let me just show let me just fix this query selector let's save this now if we're going to go back to index.html now first things first let's scroll down to a total so card total so what i'm looking for you notice i have a clear card and a checkout however the cart total is the one that's holding the total so this is why in app.js we were targeting the element by a d of cartoon now the second one is going to be where we go up and this is going to be the info so again we're going to scroll somewhere this would be the cart we are too low notice we have the cart info and then again we have the item total and like i said this would be the class this why we have the class and therefore we're using the id now let me see item total i'm using the class so everything is correct however for the item count there has to be an id so let me just check that it is id so item count item yeah the id is item count so now we know where we're getting all the values now the last thing is just to go and refresh and hopefully everything works fine like i said these are hardcoded values now obviously we would be probably putting zero and zero but i just wanted to put something like two items in 1049 or whatever now let's scroll down and again let's maybe add like six items just so we know that everything is working correct another this guy another this guy and let's do another this guy now everything is working fine let's go up and sure enough we have the value of 56. do we have six items yes we do so one two three four five six and i'm not gonna take my calculator out but i think that this should be a correct value if not obviously correct me
