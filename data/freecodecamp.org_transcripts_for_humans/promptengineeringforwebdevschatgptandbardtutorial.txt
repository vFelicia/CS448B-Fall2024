With timestamps:

00:00 - not quite getting the results you want
00:01 - from chat GPT wondering how you can use
00:04 - AI language models to your advantage
00:06 - then this course is for you if you have
00:08 - spent any amount of time with AI
00:10 - language models like chat GPT and Google
00:13 - bard you may have noticed the results
00:15 - can sometimes be a little frustrating
00:18 - effective prompt engineering is the
00:20 - secret sauce for getting the most out of
00:22 - AI in this course treasure por will
00:25 - teach you the Art and Science of
00:27 - effective prompt engineering to get the
00:30 - most out of AI language models and help
00:32 - you become a better web developer
00:35 - treasure is a software engineer and
00:37 - she's a technical content developer at
00:39 - scrimba hi free code Camp Learners
00:42 - welcome to my course on prompt
00:44 - engineering for web developers prompt
00:46 - engineering is the Art and Science of
00:48 - communicating with AI to yield better
00:51 - more precise more robust results AI
00:54 - interfaces like chat GPT and Google bar
00:56 - do a little bit of everything from
00:58 - writing silly poems to to summarizing
01:00 - large text to generating code Snippets
01:03 - this course is designed specifically
01:05 - with web developers in mind so it's
01:07 - packed with ideas strategies and
01:09 - practice challenges that are going to
01:11 - help you get the most out of AI language
01:13 - models as a coder you're going to learn
01:15 - how to use prompt engineering to
01:17 - transform an AI language model into a
01:19 - par programming partner a personal
01:21 - coding tutor and even a career in
01:23 - interview coach with the help of AI
01:25 - you're going to be coding better and
01:27 - faster than you ever have before so I
01:29 - hope you're excited to get the most out
01:31 - of this course you should have some
01:33 - experience writing JavaScript and react
01:35 - but whether you're a senior Dev or just
01:38 - starting out there's something in this
01:39 - course for you so thank you so much for
01:41 - joining me and let's get
01:43 - [Music]
01:49 - started hello prompt Engineers welcome
01:52 - to my course on prompt engineering
01:54 - created specifically for web developers
01:56 - we are entering a future in which web
01:58 - development is so much more than writing
02:00 - code it's about leveraging artificial
02:02 - intelligence to supercharge your coding
02:04 - skills to build smarter and faster and
02:06 - this course is all about showing you how
02:08 - firstly though hello my name is treasure
02:10 - I've been a friend and developer since
02:12 - 2015 and a teacher and instructor for
02:14 - even longer than that I switched careers
02:16 - after going through a boot camp and I
02:18 - love traveling karaoke and singing in a
02:20 - choir I've done hundreds of hours of
02:22 - research coding and experimentation with
02:24 - AI language models and I'm really
02:26 - excited to share what I've learned with
02:27 - you there's been so much Buzz about AI
02:29 - recently that you've probably heard a
02:31 - lot about language models like chat GPT
02:33 - or Google bard by now so I'm going to
02:35 - give you a very Lightning Fast
02:36 - definition language models are
02:38 - artificial intelligence tools that allow
02:40 - you to have humanlike conversations with
02:42 - a computer language models like chat GPT
02:44 - can help humans do pretty much anything
02:46 - involving words whether it's ad copy
02:48 - poetry or helping you brainstorm a list
02:50 - of names for your new cat I've split
02:53 - this course into three sections the
02:55 - first section covers many tips tricks
02:57 - and strategies to design and refine your
02:59 - AI prompts to get the most out of
03:01 - interacting with AI language models the
03:03 - second section is a collection of prompt
03:05 - ideas and examples exploring how you as
03:07 - a developer can use AI language models
03:10 - to generate document and debug your code
03:12 - as well as use it as an Interactive
03:14 - Learning tool you'll learn some
03:15 - practices to help you use AI as a PA
03:17 - programming partner a rubber ducky if
03:19 - you will that not only listens to you
03:21 - but helps you find Solutions and the
03:23 - last section is all about using AI
03:25 - language models to enhance your job
03:27 - search I'll show you examples of how to
03:30 - use AI for everything from finding
03:31 - places to apply to learning and
03:33 - practicing algorithmic coding challenges
03:35 - to generating and practicing behavioral
03:37 - interview questions for this course
03:39 - we'll mostly be using open ai's public
03:42 - interface commonly known as chat GPT
03:45 - with a little bit of Google barge
03:46 - sprinkled in I highly recommend that you
03:48 - follow along and experiment with your
03:50 - own prompts and you can click on the
03:52 - logos to visit the public interfaces for
03:54 - these AI language models and sign up for
03:56 - an openingi account if you need to
03:58 - before we go into any further I want to
04:00 - quickly address a common question that
04:02 - pops up when people start learning about
04:04 - AI will AI replace developers or make it
04:07 - harder for me to break into the tech
04:09 - industry tragically I'm not a time
04:11 - traveler or a psychic or even an expert
04:13 - on industry Trends so I can't
04:15 - definitively answer this question but
04:17 - what I can say is that being a developer
04:19 - is so much more than being able to spit
04:21 - out code it's about understanding the
04:23 - user and how to create products and
04:25 - services that are intuitive Pleasant to
04:26 - use fast and that solve real world
04:29 - problems to make people's lives easier
04:31 - it's about empathy and creative problem
04:33 - solving and Innovation working as part
04:34 - of a team and the list goes on at this
04:36 - moment in time we still need humans to
04:38 - do that and right now language models
04:40 - are really only good at one thing and
04:42 - that is guessing what word should come
04:44 - next giving a sequence of words at the
04:47 - end of the day language models are
04:48 - simply trying to predict which words
04:50 - should come next AI language models are
04:52 - also only as good as the data they're
04:55 - trained on they are prone to making
04:57 - things up and they become less effective
04:59 - as the complexity of your problems or
05:02 - your code bases goes up so the short
05:04 - answer is no in my opinion AI is unfit
05:07 - to replace developers anytime soon
05:10 - language models are best used as tools
05:12 - to streamline the most tedious rote
05:14 - tasks of a developer bringing us up to
05:16 - focus on bigger more complex more
05:18 - interesting problems now that that's
05:20 - settled and you know what you're in for
05:22 - let's talk a bit about prequisites it's
05:24 - important to note that while you don't
05:26 - have to be an expert you should have
05:27 - some experience with JavaScript and
05:29 - reactive be successful in this course as
05:31 - long as you've done some basic coding
05:33 - this course should give you a wealth of
05:34 - ideas for how to harness the power of AI
05:36 - in your webd Dev workflow so let's go
05:38 - let's do
05:43 - it the first step to getting the most
05:45 - out of AI is learning effective prompt
05:48 - engineering so let's talk about what
05:50 - prompt engineering actually is this is a
05:52 - relatively new term that you may have
05:54 - heard out in the wild in all of the talk
05:56 - about AI recently and at first glance
05:58 - you might assume like I did that prompt
06:00 - engineering is a way to say software
06:02 - engineering via prompting a language
06:04 - model but it's actually a much more
06:05 - generalized term prompt engineering
06:07 - means crafting prompts to effectively
06:09 - guide a language model's responses
06:12 - here's another definition designing and
06:14 - refining inputs to obtain your desired
06:17 - output I like to think of prompt
06:18 - engineering as The Art of Getting AI to
06:21 - do what you want whether you want AI to
06:23 - write an essay or make art or produce
06:25 - code for you how you engineer prompts
06:27 - depends largely on what you want the
06:29 - language model to produce in our case
06:32 - we're going to talk about prompt
06:33 - engineering specifically for front-end
06:35 - development and our desired output is
06:37 - code or information about code when it
06:39 - comes to AI assisted coding a
06:41 - well-engineered prompt ensures gpt's
06:43 - output is tailored to your specific
06:45 - needs and it's going to mean hours of
06:47 - development time saved from repetitive
06:50 - boilerplate code debugging and a lot
06:52 - more for the next part of the course
06:53 - we're going to discuss prompt
06:55 - engineering specifically for frontend
06:56 - development and here's a sneak peek of
06:58 - the basic Strat strategies for Effective
07:00 - prompt engineering we need to be
07:02 - specific use technical terms provide
07:04 - context give examples and perhaps most
07:06 - importantly iterate so we're going to go
07:08 - through each one of these strategies
07:10 - look at a ton of examples and you're
07:11 - going to learn a wealth of great tips
07:13 - and tricks it's going to be great so
07:15 - let's dive into it I'll meet you in the
07:17 - next
07:20 - scrim let's talk about the basics of
07:23 - writing effective prompts it's very much
07:25 - a worthy Endeavor to take the time to
07:27 - craft a great prompt when working with
07:28 - language models like GPT a great prompt
07:31 - can mean the difference between Broad
07:33 - and largely unhelpful responses from the
07:36 - AI to finally tuned outputs that save
07:38 - you potentially hours of time I highly
07:41 - encourage you to follow along with me
07:43 - and try all of these prompt examples out
07:45 - yourself and you can click on this image
07:47 - to go to gpt's public interface keep in
07:50 - mind as we start looking at examples
07:52 - that there's a certain Randomness to how
07:54 - chat GPT outputs information so even if
07:58 - you enter in the exact same prompt your
08:00 - output is probably going to be a little
08:03 - different from what chat GPT has given
08:05 - me how it responds depends on a variety
08:07 - of factors like I said Randomness and it
08:10 - can also vary depending on your prompt
08:12 - history and which model you're using so
08:14 - just keep that in mind the responses
08:16 - will be similar most likely but probably
08:19 - not exactly the same let's talk about
08:21 - strategies for Effective prompt
08:23 - engineering the first three are be
08:25 - specific use technical terms and provide
08:28 - context here's an example of a not so
08:31 - great prompt how do I Center something a
08:33 - slightly better example of this prompt
08:35 - would be how do I Center an element on a
08:37 - web page and an even better example is
08:39 - what's the best way to Center div
08:41 - element horizontally and vertically
08:43 - using CSS let's see what happens when we
08:46 - enter this into GPT when I use the broad
08:49 - prompt how do I Center something GPT
08:52 - says well I need more context what are
08:54 - you trying to Center and how are you
08:56 - trying to center it are you talking
08:57 - about physical space or a digital
08:59 - environment are you centering a word
09:01 - processor on a website graphic design
09:04 - software more information please so then
09:06 - I prompt again with something a little
09:08 - bit more specific and a little more
09:10 - technical I'm saying I want to Center an
09:13 - element on a web page now GPT responds
09:17 - with well you can use cascading
09:19 - stylesheets there are several ways to
09:21 - achieve this but it recommends that we
09:23 - use flexbox or css grid notice here the
09:26 - assumptions that GPT is making based on
09:29 - our prompt it's perhaps assuming that we
09:31 - may not know what cascading stylesheets
09:34 - are it then provides us with some code
09:37 - for the HTML and CSS for flexbox and for
09:40 - grid let's see what happens if I refine
09:42 - The Prompt even further this time I'm
09:44 - going to say what's the best way to
09:45 - center a div element horizontally and
09:48 - vertically using CSS so I'm providing
09:50 - more context I'm saying I want to know
09:52 - what the best way is I'm also being more
09:54 - specific I'm saying I want specifically
09:57 - a div element and I want to Center it
09:59 - both horizontally and vertically and I'm
10:02 - also specifying the technology that I
10:06 - want chat GPT to respond with which is
10:09 - CSS this results in a similar response
10:12 - so it's still suggesting that we use
10:13 - flexbox or css grid but this time it
10:17 - gives us some pros and cons for flexbox
10:20 - as well as some sample code and some
10:23 - pros and cons for grid so you can see
10:25 - how even the slightest tweak to a prompt
10:28 - can result in in very different outputs
10:31 - from GPT let's look at another example
10:33 - I'm going to start with the really broad
10:35 - prompt how do I use reduce with this
10:37 - prompt GPT responds by explaining that
10:40 - reduce is a function that takes two
10:43 - arguments but looking down a little
10:45 - further you'll see that because we
10:46 - didn't specify a technology it is
10:48 - providing an explanation of reduce in
10:51 - Python followed by some sample code on
10:54 - how to use reduce in Python so here's a
10:56 - small challenge for you think about how
10:58 - you would engineer The Prompt if you
11:00 - wanted a JavaScript example think about
11:02 - how you would engineer The Prompt if you
11:04 - wanted to understand what javascript's
11:06 - reduced method is used for in other
11:08 - words some use cases and also think
11:10 - about how you would engineer a prompt if
11:12 - you were a beginner and you wanted to
11:14 - make sure that GPT responds with simpler
11:17 - instructions and also think about how
11:19 - you would engineer a prompt if you
11:21 - wanted GPT to incorporate all three of
11:23 - these assumptions go ahead and pause
11:26 - this scrim go to chat gpt's public
11:28 - interface face and play around with
11:30 - prompting based on these assumptions and
11:32 - when you return I will show you my
11:35 - inputs and
11:38 - outputs welcome back hopefully you found
11:41 - that exercise to be helpful let's have a
11:43 - look at how I engineered my prompts
11:45 - first I'm making sure to provide context
11:47 - be more specific and use technical terms
11:50 - by specifying the technology I want to
11:52 - use the specific method that I want to
11:54 - learn about and I'm asking GPT to
11:57 - provide examples of what I might use the
12:00 - reduce method for GPT responds with a
12:03 - definition of what reduce is followed by
12:06 - a stepbystep example of how you can use
12:08 - it great it also very helpfully provides
12:11 - the example in a single code block so
12:14 - that I could copy and paste this into a
12:16 - scrim if I wanted it also goes on to
12:18 - provide a more advanced use case of
12:20 - reduce which is when it takes in an
12:22 - array of objects and transforms that
12:25 - array of objects into something else in
12:28 - my next prompt I again am specific about
12:31 - what language that I want to discuss the
12:33 - reduce method in but this time I'm
12:36 - asking for its use cases specifically so
12:39 - again it provides a definition of reduce
12:43 - and then provides five instances in
12:45 - which it might be helpful to use reduce
12:48 - so calculating the sum of an array of
12:50 - elements finding the product of an array
12:52 - of elements counting the occurrences of
12:55 - elements in an array flattening a nested
12:57 - array and transforming an array of
13:00 - objects into an object with a specific
13:02 - structure which happens to be the
13:05 - example that it showed us last time and
13:07 - in my final example I'm again asking for
13:09 - javascript's produce method and I'm
13:11 - asking gbt to explain it to me as if I'm
13:14 - a beginning developer just learning how
13:16 - to code I'm also asking for a very
13:19 - specific example I want to know how I
13:21 - can use reduce to calculate the total
13:23 - price of several items in a shopping
13:26 - cart you'll notice that the result is
13:28 - that GB output is a much longer and more
13:31 - detailed explanation of reduce using
13:34 - slightly less technical language it
13:37 - reminds us what arrays are and carefully
13:40 - explains how the reduce method works by
13:42 - going through each element in the array
13:44 - one by one and applying a function that
13:46 - you define it then provides a
13:48 - step-by-step shopping cart example just
13:51 - like we asked for pretty cool this has
13:53 - been just a few examples of how we can
13:55 - use specificity technical language and
13:57 - context to tweak gpt's output to get as
14:00 - close as possible to the information
14:03 - that we desire we've seen how to use
14:05 - these strategies to get information
14:07 - about code and code samples now join me
14:09 - in the next scrim to discuss how we can
14:11 - use these principles to use GPT to
14:13 - produce usable code I'll see you
14:18 - there let's talk about using specific
14:21 - Technical and contextual prompts to get
14:24 - GPT to generate code as an example let's
14:27 - start with a very broad non-specific
14:31 - non-technical prompt with no context and
14:34 - that prompt is how do I create a form
14:36 - GPT trying to be as helpful as possible
14:39 - responds that well there's lots of ways
14:41 - to make a form you can use a form in
14:44 - HTML for a web page you can use Google
14:46 - forms or you can even create a form in
14:48 - Microsoft Word then also continues to
14:51 - try to be helpful by providing examples
14:53 - of how you might get started creating a
14:56 - form using all three of these Avenues so
14:58 - here is a challenge for you think about
15:01 - how you would improve this prompt so
15:03 - that it is specific Technical and
15:06 - provides context and here is your
15:09 - context you want to create a form that
15:12 - displays the reverse of whatever the
15:14 - user inputs into the form go ahead and
15:17 - pause go to gpt's public interface and
15:20 - play around with how you would engineer
15:22 - a prompt to produce this code and when
15:24 - you return I'll show you the prompt that
15:26 - I
15:27 - crafted
15:30 - welcome back were you able to create a
15:31 - form here's how I did it I started by
15:34 - saying please create a form in
15:36 - JavaScript with one input that accepts a
15:38 - string and on submit prints that word to
15:41 - the web page in Reverse so I'm being
15:44 - specific about what I want the form to
15:47 - do I'm specifying that I want the form
15:50 - to be in JavaScript and that I intend to
15:52 - use it on a web page GPT responds with
15:55 - the HTML and JavaScript that I need to
15:58 - complete this
15:59 - form let's quickly copy and paste this
16:02 - code in and see if it works so I have my
16:06 - HTML and my JavaScript and let's run
16:09 - this and because I put my JavaScript
16:12 - into a file called index.js I'm going to
16:15 - have to make sure to go ahead and change
16:17 - that in the HTML it
16:19 - generated this is another way that we
16:21 - could improve the specificity of the
16:23 - prompt by the way is we can say please
16:25 - assume that we have a Javascript file
16:28 - called
16:29 - index.js and that way GPT will change
16:32 - its code samples accordingly but let's
16:34 - just go ahead and change it manually
16:36 - this
16:37 - time and see if this
16:39 - works I'm going to type this is
16:44 - backwards and we'll submit and there we
16:47 - go whatever we enter into the field is
16:49 - printed to the page backwards exactly
16:52 - what we wanted let's look at another
16:54 - quick example this is a less broad
16:57 - prompt with a little little bit of
16:59 - context I'm saying please show me an
17:01 - example react component and GPT responds
17:04 - making the assumption that I'm starting
17:06 - from ground zero so it's saying first
17:09 - make sure that you have node installed
17:11 - on your system and use create react app
17:14 - navigate to the project directory then
17:16 - open the source folder and put this into
17:19 - appjs and it gives us an example of a
17:22 - little greeting component it then tells
17:25 - us to run our create react app that we
17:27 - need to PM start so it's trying to be as
17:30 - helpful as possible but this may end up
17:32 - being way more information than we're
17:34 - looking for and that is another thing to
17:36 - keep in mind when engineering as
17:38 - specific prompt and providing the proper
17:41 - context so take a moment to think about
17:43 - how you might improve upon this prompt I
17:46 - want you to try to engineer a prompt
17:48 - based on all three of the following
17:50 - assumptions you want GPT to assume that
17:52 - you already have a react project set up
17:55 - let's assume that you want to see an
17:56 - example of use effect in this example
17:59 - react component and let's also assume
18:01 - that you want an atypical example and
18:03 - not the same examples that you see
18:05 - everywhere like a counter component that
18:08 - simply increments a number by one every
18:11 - time you click a button or a react
18:13 - component that simply says hello world
18:15 - so go ahead and pause the scrim now go
18:16 - to gpt's public interface and engineer a
18:20 - prompt that addresses all three of these
18:22 - assumptions I'll see you when you get
18:27 - back welcome back hopefully you were
18:29 - able to engineer a prompt that got you
18:31 - some helpful results let's have a look
18:33 - at my prompt so my prompt is please
18:36 - create an example react component that
18:38 - takes at least one prop and demonstrates
18:40 - how to use hooks like use State and use
18:43 - effect now I've done something that can
18:45 - be incredibly helpful when prompt
18:47 - engineering I'm specifying what I don't
18:50 - want GPT to respond with so I'm saying
18:53 - the example should not be a typical
18:55 - hello world example like a counter or a
18:58 - greeting and I'm saying assume that I
19:01 - have already set up a react project so
19:03 - this time given the specificity of our
19:05 - prompt GPT skips all of the setup
19:08 - instructions that it included before and
19:10 - it gives us this theme switcher example
19:13 - which arguably could be the third most
19:16 - common example that is used when
19:18 - teaching react but that's okay it didn't
19:20 - give us what we specifically said we
19:22 - didn't want so this is an area where we
19:24 - could play around and try to improve
19:26 - this prompt a little more pi get an
19:28 - example that's perhaps a little more
19:30 - interesting but other than that it's
19:31 - given us what we wanted we have a react
19:33 - example that uses use State and use
19:36 - effect we also get a pretty good
19:37 - explanation of how the example is
19:39 - working and some instruction on how to
19:42 - use it in our existing react project
19:45 - when it comes to prompt engineering
19:46 - specifically for coding or learning to
19:49 - code specificity technical language and
19:51 - providing context will take you a long
19:54 - way but there's still a bunch more to
19:56 - learn and a ton of new examples to try
19:58 - and all sorts of ways that you can tweak
20:00 - your prompts to get as close to exactly
20:03 - what you want so I look forward to
20:05 - seeing you in the next scrim where we'll
20:07 - continue to talk about more prompt
20:08 - engineering tips I will see you
20:13 - there now for a quiz and a bit of
20:16 - practice I really encourage you as
20:18 - you're going through this course to
20:19 - spend as much time as you can trying out
20:22 - different prompts in chat GPT if you
20:24 - need a link to open ai's chat GPT
20:26 - interface I've included that right here
20:28 - so keep in mind when you're actively
20:29 - practicing rather than passively
20:31 - watching the scrims you're much more
20:33 - likely to retain the information I've
20:35 - sprinkled challenges and opportunities
20:36 - for practice like this throughout the
20:38 - course so do take your time to get your
20:39 - hands dirty like I said it's going to
20:41 - really help you remember everything that
20:43 - you've learned so we have a short quiz
20:46 - question for you to answer and a few
20:47 - less than ideal prompts that I'd like
20:49 - you to improve based on what you've
20:51 - learned so far go ahead and pause the
20:53 - scrim now and work on the quiz and
20:56 - practice welcome back hopefully
20:58 - hopefully that went well let's go over
20:59 - some possible answers our quiz question
21:02 - is what are the three basic components
21:04 - of an effective prompt and those are to
21:07 - be specific use technical terms and
21:11 - provide
21:12 - context if we look at these suboptimal
21:15 - prompts they are missing one or all of
21:17 - these things so let's look at the first
21:19 - one I need to Loop through an array help
21:22 - how could we rewrite this so that it's
21:23 - more specific uses technical terms and
21:26 - provides context your answer is will
21:28 - most likely be a little different than
21:30 - mine but let me show you the prompts
21:32 - that I came up with for this one I added
21:34 - some context and Technical Language by
21:36 - saying in JavaScript how can I utilize
21:38 - the for each method to iterate over an
21:40 - array of objects and extract a specific
21:43 - property from each so I'm being specific
21:45 - about the language I want to work in and
21:47 - providing some context about what I want
21:49 - to do for this second question I want my
21:52 - website to look good on phones 2o my
21:54 - prompt was what are the recommended CSS
21:56 - media query breakpoints for for mobile
21:58 - tablet and desktop views to ensure my
22:00 - website is responsive across various
22:03 - devices so again more specificity more
22:06 - context and more specificity around
22:08 - technical terms our third prompt is I'm
22:10 - having issues bringing data into my
22:13 - react app my prompt for this is how can
22:15 - I use the use effect hook in react to
22:17 - fetch data from a rest API endpoint and
22:20 - store the results in a local state using
22:22 - the used State hook this is maybe a
22:25 - little more specific than I needed to be
22:27 - so if you find your s aren't quite so
22:29 - specific that's totally fine as long as
22:31 - the basic elements are there you're more
22:32 - likely to get more precise results and
22:35 - that's it for the quiz in practice to
22:37 - take this a little further you can try
22:38 - entering both the vague prompt and the
22:40 - prompt you came up with into chat GPT
22:42 - and note the differences between the two
22:44 - the vague prompt might accidentally be
22:46 - correct or somewhat correct or help you
22:48 - get to your desired answer but generally
22:51 - a more precise prompt is going to save
22:53 - you time by yielding more precise
22:56 - results
23:00 - this is one of my very favorite tips
23:02 - because there is so much that you can do
23:04 - with it so let's talk about all the ways
23:06 - you can fine-tune gpt's responses by
23:10 - controlling the length and format
23:12 - especially when you're trying to learn
23:13 - something new with GPT these are some
23:15 - really effective ways to get as much or
23:18 - as little information as you want in
23:20 - some formats you may not have thought
23:22 - about before let's look at some examples
23:24 - I could request information like this I
23:26 - could say provide a brief two step
23:28 - explanation of creating a custom
23:30 - JavaScript event and GPT responds with
23:33 - an explanation that has exactly two
23:36 - steps I can say something like please
23:38 - compare CSS grid and flexbox
23:41 - highlighting their main differences and
23:42 - use cases in a tabular format so I'm
23:46 - requesting the response as a table and
23:49 - gbt responds with this great little
23:51 - table that compares grid to flex box in
23:54 - the way that I've specified it's pretty
23:57 - awesome I can also get extremely
23:59 - specific so I want to know why inner
24:02 - HTML should be avoided why we shouldn't
24:04 - use it so I'll ask GPT to summarize in
24:08 - exactly three bullet points why in HTML
24:11 - shouldn't be used I also want each
24:13 - bullet point to be followed by a short
24:15 - explanation and a code example of what I
24:18 - should use instead here's gpt's response
24:21 - I get exactly three bullet points we
24:24 - shouldn't use inner HTML due to security
24:26 - risks performance ISS issues and
24:28 - accessibility issues it can cause
24:31 - problems for screen readers and other
24:33 - assistive Technologies GPT recommends
24:36 - some other things that we can use and
24:38 - shows us an example as we've requested
24:40 - this is a really good example of how
24:42 - granular we can be when controlling the
24:44 - length and formatting of a response from
24:46 - GPT a question that we get asked a lot
24:49 - here at scrimba is how much Java Script
24:52 - should I know and be comfortable with
24:54 - before I start learning react let's see
24:56 - what GPT thinks my prompt is please list
24:59 - the five most important JavaScript
25:00 - Concepts a beginning developer should be
25:02 - comfortable with before learning react I
25:05 - want the response to be brief though so
25:07 - I'm going to be really specific about
25:09 - the kind of response that I want so I'll
25:11 - go on to say please provide a one
25:13 - sentence explanation of each concept and
25:16 - one sentence about why it is important
25:19 - for learning react let's see how it
25:21 - worked out this is fairly close to what
25:24 - we requested we have exactly five
25:26 - JavaScript Concepts variables and data
25:29 - types functions and scope arrays and
25:32 - objects troll flow and conditionals and
25:34 - asynchronous programming and promises
25:37 - and then we get a one- sentence
25:39 - explanation of what that JavaScript
25:42 - concept is and why it is important to
25:45 - learn for react so for example
25:47 - understanding how to work with
25:48 - asynchronous code using callbacks and
25:50 - Promises is crucial for handling events
25:53 - making API calls and handling State
25:55 - updates in react this is an exactly what
25:58 - we asked for but it's pretty close and
26:00 - if we wanted to we could go back and
26:02 - refine The Prompt a little bit if that's
26:04 - what we wanted to do I can also ask GPT
26:07 - to create flowcharts so here I've asked
26:09 - please create a flowchart describing how
26:11 - to submit a poll request using GitHub
26:14 - and it creates a text-based flowchart
26:16 - outlining all of the steps from forking
26:19 - the repository all the way down to
26:21 - creating a new pull request on GitHub
26:24 - and choosing which branches I want to
26:26 - merge if you ask me this is a really
26:28 - cool way to begin to understand a
26:30 - concept with a ton of steps I can also
26:32 - ask GPT to create pseudo code please
26:35 - create pseudo code in the form of code
26:37 - comments describing how I can write a
26:39 - react component that displays the time
26:41 - in a user's local time zone I'm
26:43 - requesting that pseudo code in the form
26:45 - of code comments because I've discovered
26:48 - that when I ask for pseudo code it tends
26:50 - to give me code that sort of looks like
26:52 - Python and what I want are step-by-step
26:54 - instructions for how I can code this
26:56 - function myself and code comments are
26:58 - what's most effective for me so let's
27:00 - see what GPT did in the form of code
27:03 - comments it's broken down into small
27:06 - steps with even more specific
27:08 - instructions so this would be great if I
27:10 - really want to make sure that I'm
27:12 - writing my own code but I desire some
27:15 - stepbystep help to help me think through
27:18 - how I might structure my code here are
27:20 - even more examples I can control the
27:22 - length by requesting a definition in one
27:25 - paragraph or one sentence I can even
27:28 - specify that I want a response in so
27:31 - many words or less this is also one of
27:34 - my favorites I can request a tldr of a
27:37 - topic which if you're not familiar
27:39 - stands for too long didn't read it's
27:42 - basically another way of saying give me
27:44 - a short explanation so I can say tldr
27:47 - explain the difference between let and
27:49 - const in JavaScript I can request a
27:52 - specific task in a specific technology
27:55 - but request the solution without using
27:57 - any external tools or libraries I can
28:00 - ask for explanations in the form of
28:02 - analogies and metaphors I can also copy
28:05 - and paste GPT some code and ask for an
28:07 - explanation via code comments on every
28:10 - line explaining what the code does and
28:13 - finally here's another one that I use a
28:15 - lot and we will see more of later I can
28:17 - prompt GPT with in your response please
28:19 - only include the code that needs to be
28:22 - modified and this is really helpful if
28:24 - you're having GPT generate some more
28:26 - complex code for you it does have a
28:28 - tendency to print out all of the code
28:31 - every single time and this way you can
28:33 - ask for just what needs to be modified
28:35 - we will talk much more about this in
28:38 - later scrims now that we've looked at
28:40 - quite a few examples please take a
28:42 - second to think about how prompting to
28:44 - control the length and format of the
28:46 - response can be helpful to you go ahead
28:49 - really quick think of a topic that
28:51 - you're unfamiliar with or that you've
28:53 - always meant to look more into and ask
28:55 - GPT for an overview in whichever format
28:58 - you feel would be helpful and definitely
29:00 - use the examples on this list or the
29:02 - other examples that we've looked at for
29:04 - inspiration for example I was recently
29:07 - contributing to an open- source project
29:09 - that uses Redux which I'm not very
29:11 - familiar with pause now give it a try
29:13 - and when you come back I will show you
29:15 - yet another example of how I prompted to
29:17 - get the response in the exact format I
29:20 - was looking
29:22 - for welcome back hopefully that was a
29:25 - really good exploration so as I said I
29:28 - wanted to know more about Redux so my
29:30 - prompt was please explain how to use
29:32 - Redux step by step using a simple code
29:35 - example such as tracking whether or not
29:38 - a user is logged in so I'm asking for a
29:41 - response in a step-by-step format using
29:43 - a specific code example and then I'm
29:46 - getting even more granular by requesting
29:49 - one sentence that explains each step
29:52 - then once GPT has provided me with a
29:55 - step-by-step explanation of reduct with
29:57 - the code sample that I've specified I
30:00 - wanted to make up an acronym for me
30:02 - that's going to help me remember all of
30:03 - the steps I need to remember to use
30:05 - Redux if you're at all familiar with
30:07 - Redux or have ever tried to learn it
30:09 - there are a lot a lot a lot of steps
30:12 - let's look at the response I was able to
30:14 - get GPT says here's a step-by-step guide
30:17 - on how to use Redux with a simple code
30:19 - example to track user login status thank
30:22 - you that's exactly what I asked for
30:24 - we'll use the acronym carts as a
30:26 - reminder of of the steps it's a pretty
30:28 - good acronym it's easy to remember it's
30:30 - an actual word so then using This
30:32 - Acronym it breaks down the steps we're
30:35 - going to create a redex door do some
30:37 - action craters and then here is the one
30:40 - sentence explanation of each step that I
30:42 - requested it goes on and shows me the
30:45 - rest of the steps and then at the end it
30:47 - says remember the acronym cards to help
30:49 - you remember the steps for using redex
30:52 - in a react application and it goes on to
30:54 - summarize the acronym that I requested
30:57 - prompting GPT in a way that controls the
31:00 - format and length of its responses is a
31:03 - super powerful way to use GPT both as a
31:06 - learning tool and as a timesaver when
31:08 - coding up features this is really worth
31:10 - getting comfortable with so I really
31:12 - encourage you to just take some time
31:14 - right now before moving on to the next
31:16 - scrim to choose a few coding Concepts
31:18 - you've always meant to look into a bit
31:19 - more and explore them with GPT using a
31:22 - variety of formats definitely refer back
31:25 - to the slides and to the list of examp
31:27 - this is going to get you familiar with
31:29 - all the many ways you can prompt GPT to
31:31 - share information with
31:36 - you time for a bit of a challenge you're
31:39 - going to design some prompts to build a
31:41 - small application that generates haikus
31:44 - if you're unfamiliar with haikus it is a
31:46 - poem with a 575 syllable structure so if
31:49 - we take a look at this example I asked
31:51 - chat GPT to generate a houp for me that
31:54 - was about prompt engineering and this is
31:56 - what it came up with crafting questions
31:57 - sharp guiding thought with Precision
31:59 - answers clearer shine if you were to
32:01 - count the syllables in this poem you
32:03 - would find that the first line has five
32:05 - syllables the second line has seven
32:07 - syllables and the third line again has
32:10 - five syllables your task will be to
32:12 - prompt chat GPT to write you code for a
32:14 - very simple application where you'll
32:16 - push a button here in the mini browser
32:18 - and it will generate and display a
32:20 - randomly generated Hau so I've given you
32:22 - three vague suboptimal prompts that I
32:25 - want you to improve you'll improve these
32:27 - prompts using all of the techniques that
32:29 - you've learned so far and then use those
32:31 - prompts with chat GPT to generate some
32:33 - code you can then copy and paste the
32:35 - code you've generated right here in the
32:36 - scrim into this JS file to make sure
32:39 - that your prompts have yielded code that
32:41 - does what you expect let's quickly read
32:43 - over the prompts that you'll be
32:45 - improving the first is make some lists
32:47 - of phrases for a haiku I want them to be
32:50 - about artificial intelligence the second
32:53 - is combine the phrases into Haiku and
32:55 - the third suboptimal prompt is make the
32:58 - hius show up when I press a button I've
33:00 - asked for hius about artificial
33:02 - intelligence here but feel free to
33:03 - generate Haus about whatever subject you
33:06 - want rainbows unicorns math it's up to
33:08 - you also these prompts don't give you a
33:10 - ton of hints as far as how to structure
33:12 - your code so if you need some help on
33:13 - that you can go ahead and take a look at
33:15 - this hints MD file for some guidance
33:18 - before you get started I have one final
33:20 - important disclaimer you may have
33:22 - noticed that the title of this scrim and
33:24 - this file is Huish gener and that is
33:28 - because for reasons unknown chat GPT is
33:30 - not great at counting syllables and will
33:32 - sometimes produce phrases that are a
33:34 - syllable or two off for the purposes of
33:36 - this challenge we're not going to worry
33:38 - about that but if you want to ensure
33:40 - 100% accurate results you can manually
33:43 - count the number of syllables in the
33:45 - list of phrases that you generate or ask
33:46 - chat gbt to break down each line and
33:48 - count the syllables for you have fun
33:50 - with this go ahead and pause the scrim
33:52 - now and get started on the
33:55 - challenge welcome back I hope you had a
33:58 - fun time generating hauz let me show you
34:00 - the prompts that I came up with the
34:02 - first prompt that I wanted you to
34:03 - improve is make some lists of phrases
34:05 - for a h cou i want them to be about
34:07 - artificial intelligence here is my
34:09 - improved prompt generate three
34:11 - JavaScript arrays for a hou generator
34:13 - where each array represents a line of
34:15 - the ha cou the first and third arrays
34:17 - should contain phrases with five
34:18 - syllables and the second array should
34:20 - contain phrases with seven syllables all
34:22 - the phrases should relate to artificial
34:24 - intelligence here are the lines for my
34:27 - Huish generator that chat BT came up
34:29 - with we have an array of phrases for
34:31 - each line of the poem The phrases for
34:34 - line one contain more or less five
34:36 - syllables the phrases for line two
34:38 - contain more or less seven syllables and
34:40 - the phrases for the third line of the
34:42 - poem contain more or less five syllables
34:45 - the second prompt that we needed to
34:46 - improve was combine the phrases into a
34:48 - ha coup this is my improved prompt for
34:51 - that write a JavaScript function to
34:53 - randomly select one string from the
34:56 - three arrays of strings and return a
34:58 - combined string where each Haiku is on a
35:01 - separate line this prompt yielded the
35:03 - following function so we have this
35:05 - generate ha cou function that takes in
35:07 - three arrays containing phrases for
35:09 - possible ha cus there is a get random
35:13 - line function that takes in an array and
35:16 - chooses a random item from that array in
35:18 - this case a random line for a poem and
35:20 - it then calls the get random line
35:22 - function three times one for each line
35:25 - of the poem it saves each line into its
35:27 - own variable and finally returns a
35:30 - string containing the three randomly
35:32 - chosen lines
35:34 - concatenated with a line break in
35:36 - between each the third and final prompt
35:39 - that I asked you to improve was make the
35:42 - haikus show up when I press a button my
35:44 - improved prompt for this was create a
35:47 - button in JavaScript that when clicked
35:49 - triggers the generate Hau function and
35:51 - displays the Haiku to the web page from
35:54 - this prompt I was able to get an
35:56 - eventless listen ER that is attached to
35:58 - an element with the ID of generate
36:00 - button and when clicked it calls the
36:03 - generate hi cou function and sets the
36:05 - text content of an element with the ID
36:08 - of hi cou output to the results of the
36:11 - generate hi cou function it also
36:13 - generated a couple of lines of HTML
36:15 - which I will copy and paste into my
36:18 - index we have a button with the ID of
36:20 - generate button and a
36:25 - pre-tagged when I click it I get random
36:29 - Haus fantastic in this Grim you've built
36:32 - a haiku generator application in just
36:35 - three prompts if you've spent any amount
36:37 - of time with chat gbt you may be
36:39 - thinking well this could have been done
36:40 - with just one prompt and well that's
36:42 - most likely true when you're using chat
36:44 - gbt it's good practice to always be
36:46 - thinking about how to split projects
36:48 - into smaller tasks more on that in the
36:50 - next scrim excellent work on this
36:52 - challenge or in the form of a hi cou
36:55 - challenge met with Grace generator
36:57 - speaks in verse student claims their
36:59 - place see you in the next
37:04 - one with the right prompts AI is
37:07 - surprisingly sometimes frighteningly
37:09 - capable and because it's so capable our
37:11 - first impulse might be to stretch it out
37:13 - as far as it can go how much can I make
37:15 - it do how few prompts can I get away
37:17 - with can I get a whole app with a single
37:19 - prompt the answer is yes you probably
37:22 - can but the results might be a little me
37:24 - think of it this way say you're building
37:26 - a brick wall like this adorable little
37:28 - penguin if you were to build it by hand
37:29 - you'd probably go Brick by Brick right
37:31 - making sure that each element was in its
37:34 - place before moving on to the next one
37:35 - you wouldn't throw all the bricks and
37:37 - all the mortar into a pile and smear it
37:39 - around until it sort of resembled a wall
37:41 - but one of the pitfalls of AI is that
37:43 - it's tempting to do this with code it's
37:45 - really tempting to hand AI a list of
37:48 - instructions and try to mold whatever it
37:49 - spits out into a workable application
37:52 - this is why I advocate instead that when
37:53 - you build with AI you break everything
37:55 - down into small smaller chunks and that
37:57 - means the tasks that you're trying to
37:59 - accomplish with AI as well as the
38:01 - instructions that you prompt the AI with
38:03 - and the features that you choose to
38:05 - build I also can't stress enough the
38:06 - importance of taking time to read and
38:09 - understand the code that AI generates
38:10 - along the way so why should you do this
38:13 - breaking it down into smaller steps is
38:14 - going to be better for manageability for
38:16 - Learning and understanding the code and
38:18 - for isolating bugs and other issues it
38:20 - is possible to get AI to spit out a
38:23 - whole react app in one go but the more
38:25 - complex the thing you ask for the more
38:26 - likely there are to be errors and
38:28 - inconsistencies and the less likely you
38:30 - are to understand the code or feel any
38:32 - sense of ownership over it so it's
38:34 - really easy to get trapped in a cycle
38:35 - where you don't understand the code
38:37 - you're working with you ask chat gbt to
38:38 - debug it it solves one issue but
38:40 - introduces another and on and on until
38:42 - the brick wall crumbles and you storm
38:44 - away frustrated am I speaking from
38:46 - experience yes let me show you an
38:48 - example so what I'm after is to build
38:50 - this budget tracker basically in the
38:52 - form you can put a budget title your
38:54 - budget how much of that budget you've
38:56 - actually spent and then you can add it
38:58 - to this nice little visualizer that
39:00 - represents your budget versus how much
39:02 - you've spent as a progress bar here's
39:04 - what happens when I try to do this in
39:06 - one big prompt so we're going to read
39:08 - all of this really quick my huge prompt
39:10 - is help me build a small react
39:12 - application to help users visualize
39:13 - their budget the application should
39:15 - consist of a form with three inputs a
39:17 - budget title a total budget and current
39:19 - expenditures when the user submits the
39:21 - form a progress bar should be added to
39:23 - the page the progress bar should be
39:24 - green if less than 50% of the budget has
39:26 - been reached orange if more than 75% of
39:29 - the budget has been reached and red if
39:30 - 100% or more of the budget has been
39:32 - reached the app should keep track of the
39:34 - total budget and total expenditures and
39:36 - display a large progress bar with this
39:38 - info at the top of the page users should
39:40 - also be able to delete and edit progress
39:42 - bars create Json for four example budget
39:44 - progress bars and assume I already have
39:46 - react project set up this is a very tall
39:48 - order there is a lot of stuff and the AI
39:50 - is smart but telling it to do all of
39:52 - this at once is going to make it more
39:54 - apt to forget things so I ended up with
39:56 - something like this as you can see this
39:58 - somewhat resembles what I asked for we
40:00 - have some budgets we have the total
40:02 - budget and the amount spent we have a
40:04 - little form and it does work but the
40:06 - following things are wrong there are no
40:08 - progress bars and that is because AI
40:10 - forgot to set a height for the progress
40:12 - bar so they're there but they're
40:14 - invisible it also completely ignored my
40:16 - request for ADD and delete functionality
40:18 - which is honestly understandable because
40:20 - that adds a great deal of complexity to
40:22 - the application and it ignored my
40:24 - request for a main larger progress bar
40:27 - that represents the total overall budget
40:29 - not spectacular results so take a second
40:32 - and think about how you would break this
40:34 - down I don't think that there's
40:36 - necessarily a right answer here I think
40:37 - it's going to depend a lot on how your
40:39 - brain works and how you tend to build
40:41 - code in the first place but some
40:43 - suggestions are you could break the task
40:45 - down by structure and style as then you
40:47 - could do all the HTML and then the CSS
40:49 - and then worry about functionality this
40:51 - is a react app so you could build each
40:54 - component one by one you could
40:55 - concentrate on certain features or any
40:58 - other number of possibilities but let me
41:00 - show you how I did it I'm going to
41:02 - concentrate first on building the budget
41:04 - form component my prompt is helped me
41:06 - build a small react application that
41:07 - helps users visualize their budget make
41:09 - sure it meets the following requirements
41:11 - and then I'm breaking down tasks into a
41:14 - list making a list makes it a little bit
41:16 - less likely that AI is going to leave
41:19 - things out so this is another component
41:21 - of breaking things down into smaller
41:23 - tasks within a prompt so I say number
41:25 - one and include a form component with
41:27 - three inputs and number two I'm going to
41:29 - describe the functionality when the form
41:31 - is submitted add the new budget to an
41:33 - array of budgets here's what the output
41:35 - look like and this is what we end up
41:37 - with so it's pretty simple so far but I
41:40 - can add a budget let's say rent and it
41:43 - simply adds the budget with the total
41:46 - amount of the budget and how much we
41:47 - spent now I want to make the form look
41:49 - nice so I'll say add styles to the form
41:52 - with three bullet points it should be
41:53 - responsive I want the form fields to be
41:55 - stacked and the fields are styled
41:57 - similar to bootstrap Fields but don't
41:59 - use any outside libraries and that
42:01 - yields some CSS which I will go ahead
42:03 - and drop into the CSS file and that is a
42:06 - pretty nice looking form with just a
42:08 - couple of prompts I'll now move on to
42:10 - displaying my budgets in a progress bar
42:12 - so using this same format I'm going to
42:15 - say each progress bar component should
42:17 - have the following and then I'll make a
42:18 - list I want to display the budget title
42:20 - the budget versus how much we've spent
42:22 - below the progress bar and then the
42:24 - color scheme that I wanted for the
42:26 - progress bar so if you're close to
42:28 - reaching your budget it'll be red if you
42:30 - haven't spent much of your budget it'll
42:31 - be green then I specify that my progress
42:33 - bar should be thick with rounded Corners
42:36 - this yields some progress bar CSS which
42:39 - I will put in my CSS file it also gave
42:42 - me some progress bar code which I
42:43 - already have in this file called
42:45 - progress bar and finally inside of my
42:48 - app it instructed me to rewrite this map
42:51 - function to use the progress bar rather
42:53 - than simply mapping through the array so
42:56 - we'll go ahead and replace all of this
42:58 - code and what's happening now is we are
43:01 - collecting the budget data from the
43:03 - budget Forum we're adding it to this
43:06 - hook that is keeping track of all of the
43:08 - budget objects inside of an array we're
43:10 - then mapping through the array of
43:12 - budgets and passing that information to
43:15 - a progress bar that has all of the
43:17 - progress bar Styles and information
43:19 - about how we want to display it let's
43:21 - run and add a budget and there we go we
43:23 - have a working budget tracker that
43:25 - displays a progress bar I can then
43:27 - continue to iterate on this project in
43:30 - small steps for example I can ask it to
43:33 - create some dummy data so that we can
43:35 - see what our application looks like with
43:37 - a bunch of budgets add that here here
43:40 - are our budgets with a bunch of dummy
43:41 - data and then finally I can take care of
43:44 - a couple of bugs as you can see the
43:46 - progress bar gets too long if you go
43:48 - over budget so for our entertainment
43:50 - budget we've overs spent by $50 making
43:53 - the progress bar too wide I also want to
43:56 - to change these harsh colors so I'll ask
43:58 - it for one final task before we wrap up
44:00 - this scrim the width of the progress bar
44:02 - should never exceed 100% if the spent
44:04 - amount exceeds the budget amount make
44:06 - the budget SLS spent progress bar text
44:08 - red display the spent budget text as a
44:11 - dollar amount and use dark pastel colors
44:13 - for the progress bars so let's copy and
44:16 - paste the refactored code and run and
44:19 - this is pretty close to what I had in
44:20 - mind this gr has been about building
44:22 - iteratively and breaking up complex
44:24 - tasks into smaller steps as the the task
44:26 - you complete with AI grow more complex
44:28 - remember to ask yourself how can I keep
44:30 - breaking it
44:33 - down let's pause for a second to take a
44:36 - quick quiz to help things stick a little
44:38 - better read through the quiz questions
44:40 - and answer them to the best of your
44:42 - ability go ahead and pause the scrim now
44:43 - and start working on
44:46 - it welcome back so why can it be helpful
44:50 - to break down a project into smaller
44:52 - steps even if the language model is
44:54 - smart enough to handle it my answer
44:55 - answer is that overall it makes the
44:57 - project more manageable it helps you to
44:59 - more thoroughly understand the code and
45:01 - more effectively discover bugs and other
45:04 - issues it helps you avoid a situation
45:06 - where you have a lot of code that you
45:08 - are unfamiliar with and not sure how it
45:10 - works because Chachi BT has generated
45:12 - all of it for you the second question is
45:14 - how would you break down the following
45:16 - prompt into smaller tasks and as I said
45:18 - you didn't have to worry about actually
45:20 - writing the prompts I just wanted you to
45:21 - think about how the app could be broken
45:23 - down in a highlevel way to be built Inc
45:25 - mentally with the help of chat GPT
45:28 - there's going to be a lot of variations
45:29 - and answers here because everyone's a
45:31 - little different but here's how I would
45:33 - break it up I would start with the pet
45:35 - list and layout part of the application
45:38 - whether or not I wanted the list to
45:39 - display as a gallery or as a straight
45:41 - vertical list and all of the components
45:44 - that I might need for that then I would
45:46 - worry about the responsiveness of the
45:48 - pet list and
45:51 - layout I then move on to accessibility
45:55 - finally I would look at filtering the
45:57 - list of pets building a pet detail page
46:01 - and finally I would worry about styling
46:04 - this isn't all-inclusive of course and
46:06 - some of this could be broken down into
46:08 - substeps but hopefully that gives you a
46:10 - general idea so that's it for this quiz
46:12 - thanks for taking the time and great
46:17 - work when you're using a language model
46:19 - like chat GPT to help you build an
46:21 - application it might be tempting to
46:23 - assume that when you ask chat GPT to
46:25 - produce something for you and it fails
46:27 - that the language model is simply not
46:29 - capable of that task and sure there are
46:31 - plenty of things that chat gbt is not
46:33 - great at like the time I tried to get it
46:35 - to write fiction GH not good but I'm
46:37 - sure with the right prompts you could
46:38 - get close to chat GPT doing even that
46:41 - because making a few tweaks to your
46:43 - prompts can make a huge difference this
46:45 - is a strategy called iterative prompting
46:47 - iterative prompting is the process of
46:49 - prompting evaluating the ai's response
46:51 - and either revising your prompts to get
46:53 - as close to your desired outcome as
46:55 - possible or clarifying what you want
46:56 - with a follow-up prompt let's look at a
46:58 - couple of simple examples I have an HTML
47:01 - table that has some information about
47:03 - board games let's say that it represents
47:05 - the inventory for a store called Roll
47:08 - With It games I start with the prompt
47:10 - please create a product web page based
47:12 - on this HTML table and the result looks
47:14 - something like this it isn't bad it's
47:16 - simple bold colors I like the addition
47:19 - of a buy now button I think that makes a
47:21 - lot of sense but what I really had in
47:22 - mind was more of a gallery layout where
47:25 - each board game is a card in a row of
47:27 - cards also if you were to look at the
47:29 - code example you would notice that this
47:31 - is all hardcoded and the HTML and CSS is
47:34 - Allin one file which isn't exactly what
47:36 - I want so I'm going to iterate on my
47:37 - prompt tweaking it to be a little more
47:39 - specific I kept my original prompt
47:41 - please create a web page based on this
47:43 - HTML table now I'm going to add use a
47:45 - responsive Gallery format where each
47:47 - product is a tile then I'll say convert
47:49 - the data in the HTML table to Json and
47:52 - use JavaScript to Loop through and
47:54 - display each game so that will take take
47:55 - care of my problem with it being
47:57 - hardcoded here's where things start to
47:59 - get a little messy it starts by
48:00 - converting my HTML table to Json but
48:03 - then if you look at the code it gives me
48:05 - everything is still in the same file
48:06 - which is fine I didn't specify that I
48:08 - wanted it to be split but it also added
48:10 - a second games array of objects I have
48:14 - this whole Json file that isn't being
48:16 - used so there are sort of two ways that
48:18 - you can iterate on a prompt and this is
48:19 - the first one wherein I have clicked
48:21 - this edit button and simply changed the
48:23 - prompt and had the AI completely
48:25 - regenerate a response if you're
48:27 - unfamiliar with the interface you can
48:29 - then use these right and left arrows to
48:31 - Rifle through all of the prompts and
48:33 - responses which can be pretty handy in
48:35 - some cases and by the way this says
48:37 - three out of three because on my second
48:39 - attempt chat gbt errored out and I had
48:41 - to regenerate because of that revising a
48:43 - prompt like this can be really helpful
48:45 - if what you generated is not close to
48:48 - what you want however in this case let's
48:51 - take a look at the output so in some
48:53 - ways this is closer to what I wanted I
48:55 - have each game as a tile I have some
48:58 - issues with responsiveness that I would
49:00 - need to work on as you can see because
49:01 - there are four cards one is kind of in
49:03 - the middle of the second row which may
49:05 - or may not be what I want but I've also
49:06 - lost the buy now buttons and the color
49:08 - scheme that I was kind of fond of so
49:10 - maybe I didn't really want to start all
49:13 - over what I can do is I can go back to
49:15 - my original prompt so I'll click back
49:17 - through to my original prompt and I can
49:20 - continue the conversation with this
49:22 - prompt and instead of revising it I'm
49:24 - going to add a follow-up prompt and my
49:26 - follow-up prompt will break down all of
49:28 - the changes that I want to make so as a
49:30 - list I would like the AI to break the
49:32 - code into separate CSS JS and HTML files
49:35 - I want to extract the data from the HTML
49:37 - table into a Json file and I want to
49:40 - create a function to Loop through the
49:41 - Json and display each game as a card in
49:44 - a responsive Gallery format and so
49:46 - through iterating with a follow-up
49:48 - prompt here's what I end up with I have
49:51 - the best of both worlds which is the
49:53 - gallery format that I was after plus the
49:55 - buying Now button and the green color
49:57 - scheme so to wrap things up remember
49:59 - that iterative prompting is all about
50:01 - trial and error plus a bit of creativity
50:03 - and persistence if you follow this
50:05 - process prompting evaluating the output
50:07 - and either revising or writing a
50:09 - follow-up prompt it's going to make it
50:10 - that much easier to achieve smoother
50:13 - more predictable
50:17 - results let's learn a little prompt
50:19 - engineering Inception using AI to
50:21 - optimize and improve your prompts and
50:23 - then feed those prompts back into the AI
50:26 - for the most effective results the
50:28 - strategy involves two stages the first
50:30 - is asking chat GPT to interview you
50:32 - about your needs so it can then craft
50:34 - and optimize prompt for you based on
50:36 - those needs stage two is using the
50:38 - prompt to prompt chadt to maximize the
50:41 - quality of your desired output let's
50:43 - look at an example my first prompt will
50:45 - be I'm going to give you a prompt and I
50:47 - want you to help me optimize it ask me
50:48 - clarifying questions then suggest a more
50:50 - effective prompt that will yield a more
50:52 - accurate and detailed output chat GPT
50:55 - says absolutely I'd be happy to help you
50:57 - optimize your prompt please share it
50:58 - with me I'll then give it the prompt
51:00 - please give me some example code for
51:02 - react accordion menu now that I've asked
51:04 - chat gbt to interview me it will come
51:07 - back with a list of clarifying questions
51:08 - that's going to help me be more specific
51:10 - about what I'm looking for and this is
51:12 - cool because not only will it result in
51:14 - a more refined prompt but it's also kind
51:16 - of like a built-in brainstorming session
51:18 - so Chad jpt says to optimize it I'd like
51:20 - to ask a few clarifying questions would
51:22 - you prefer that the accordion menu be
51:24 - made of class components or functional
51:26 - components using hooks are there any
51:28 - specific features you'd like the
51:29 - accordion menu to have like multiple
51:31 - sections open at the same time
51:33 - animations or accessibility features
51:35 - will there be any specific data
51:36 - structure for the content of the
51:38 - accordion or will it be text only and
51:40 - finally would you like to use a specific
51:42 - styling strategy followed by some
51:44 - suggestions for styling strategies that
51:46 - I could use I'm going to go down the
51:48 - list and answer each question I want
51:50 - functional components for my features
51:51 - I'll say I want a smooth open and close
51:53 - animation I want only one one section to
51:55 - be open at a time and I'd like to use
51:57 - the open Sans Google font I want my
52:00 - accordion to accept Json data and I also
52:03 - going to ask the AI to generate some
52:05 - dummy data for me and finally I'll tell
52:07 - it I just want to use a regular external
52:09 - stylesheet I've given chat TBT a lot of
52:12 - detail about what I want here this
52:14 - strategy has helped me provide a lot of
52:16 - clarification on what I actually want
52:18 - chat gbt responds could you provide me
52:21 - with example code for react accordion
52:23 - menu that meets the following
52:24 - requirements followed by a summary of
52:27 - the requirements based on my answers
52:28 - from the previous prompt so I can now
52:30 - dump this back into chat GPT as a much
52:33 - more specific contextual refined prompt
52:36 - so that's what I'm going to do I'm now
52:37 - going to prompt with this optimized
52:39 - prompt chat gbt responds with some
52:41 - example code for an accordion which I
52:44 - have copied and pasted into the scrim so
52:47 - let's take a look we have the dummy data
52:49 - we asked for we are using a functional
52:51 - component with hooks and a regular
52:54 - stylesheet just like we asked for and as
52:56 - you can see this is a pretty good
52:59 - looking accordion menu for a couple of
53:02 - minutes worth of work let's do a little
53:04 - review of what we've just done I'm going
53:07 - to come over to my accordion. jsx file
53:10 - these are the steps I just went through
53:11 - to optimize my prompt first I prompted
53:14 - chat gbt to ask clarifying questions
53:16 - about my prompt I then answered chat
53:19 - gpt's clarifying questions and when chat
53:21 - GPT returned an optimized prompt I then
53:24 - fed it back to chat GPT and the result
53:27 - is hopefully a more finely tuned code
53:29 - snippet that includes all of the
53:30 - features that you were after definitely
53:32 - try this strategy out for yourself I
53:34 - find that it works really well when I'm
53:36 - trying to do something relatively
53:38 - complex or when I'm murky or undecided
53:40 - on the details of what I need a function
53:42 - or react component to
53:47 - do time for a quick review and some more
53:50 - practice we've just talked about a
53:52 - strategy for optimizing a prompt and we
53:54 - did this in three steps your first
53:56 - prompt should be an overview of what
53:58 - you're trying to accomplish and a
54:00 - request for chat gbt to ask you
54:02 - clarifying questions your second prompt
54:05 - will be answers to chat gbt's clarifying
54:08 - questions and after you answer the
54:09 - questions chat gbt will output and
54:11 - optimize prompt which will then feed
54:14 - back into chat GPT let's practice this
54:16 - by instructing chat GPT to help us build
54:19 - a simple modal window if you're
54:21 - unfamiliar a modal is generally a
54:23 - secondary window that opens up on hover
54:25 - or buttonclick on a website so think
54:27 - about a popup payment form or a box that
54:29 - pops up where you might enter a username
54:32 - and password but I'd like you to do is
54:34 - starting with this prompt show me a code
54:36 - snippet for modal in react go to chat
54:38 - GPT I've included the link right here
54:41 - and follow the steps to create a more
54:43 - optimized prompt then just for fun I set
54:46 - up this scrim so that you can enter your
54:48 - code into this model. jsx file just to
54:51 - test it out and see if it works modal
54:53 - windows can have a lot of options and
54:55 - those will be up to you but my advice
54:57 - would be to keep it as simple as
54:58 - possible for example I'm going to prompt
55:00 - for a modal that displays a box of text
55:03 - on button click and that's really all
55:04 - it's going to do go ahead and pause the
55:06 - scrim now and start working on this
55:09 - challenge all right we are back let me
55:12 - show you the prompt that I came up with
55:14 - my prompt was I'm going to give you a
55:16 - prompt and I want you to ask me
55:17 - clarifying questions to help optimize
55:19 - The Prompt suggest a more effective
55:21 - prompt based on my answer here's the
55:23 - prompt show me a code snippet for modal
55:25 - in react and here are the clarifying
55:27 - questions that chat gbt asked me yours
55:29 - will probably be a bit different but the
55:31 - general idea should be the same that GPT
55:34 - wants me to clarify if I want a
55:36 - functional component or a class
55:38 - component in react do I want the model
55:39 - to be styled with play CSS scss or a
55:43 - specific Library like styled components
55:45 - do I want the model to open and close
55:46 - based on a button click are there any
55:49 - specific content types that I want
55:50 - inside the model like text images or a
55:53 - form do I want want any transition
55:56 - effects for when the modal appears or
55:58 - disappears and am I using any State
56:00 - Management tools like Redux or do I want
56:03 - to use local component State here are my
56:05 - quick answers to these clarifying
56:07 - questions I want a functional component
56:09 - I want to use an external CSS stylesheet
56:13 - yes I want the modal to open and close
56:15 - on buttonclick just displaying text is
56:18 - fine for now I want my modal to use a
56:20 - simple fade in and Fade Out effect and
56:23 - finally I just want to use local
56:25 - component State based on the answers to
56:28 - these questions here is the optimized
56:30 - prompt that chat gbt came up with that
56:33 - prompt is provide a react functional
56:35 - component code snippet for a modal that
56:37 - utilizes an external CSS stylesheet the
56:40 - modal should display text content and
56:41 - open close based on a button click it
56:44 - should have a simple fade in-out
56:45 - transition effect and manage its
56:47 - visibility using local component State
56:50 - just for fun let's look at the modal
56:51 - code that chat GPT output based on my
56:54 - optimized prompt so I'll go to model.
56:56 - jsx and copy and paste that code in so
56:58 - we have a clickable button that says
57:00 - toggle modal and then we have some jsx
57:03 - for the modal code that's based on the
57:05 - local component state is open which our
57:07 - toggle modal function toggles from True
57:10 - to false notice that we do have
57:13 - hardcoded modal info here so that's
57:15 - something that we'd want to iteratively
57:16 - improve upon but this is certainly a
57:18 - good start chat GPT also provided some
57:20 - CSS which I will copy and paste into the
57:23 - CSS file so we have some styles to make
57:26 - sure it has a semi-transparent
57:28 - background when it's open and some key
57:30 - frames for some simple transition
57:32 - effects let's go ahead and open the mini
57:34 - browser and run this to test it out got
57:37 - my toggle modal button and when I press
57:39 - it there we go a very simple modal in
57:41 - this challenge we've learned how to get
57:42 - chat GPT working for us to create more
57:45 - effective prompts well
57:51 - done let's talk about a really
57:53 - interesting way to plan learn and create
57:55 - with AI it's called role-based prompting
57:58 - role based prompting is a strategy in
58:00 - which you ask a language model like chat
58:02 - jpt to put on a costume so to speak you
58:04 - instruct the AI to take on a specific
58:06 - Persona while interacting with you for
58:08 - example you might start a prompt with
58:10 - act as a or you are a and as we'll see
58:13 - you can have it act as a variety of
58:15 - things that will help you as a software
58:16 - engineer like product manager software
58:18 - architect or even career coach which
58:20 - we'll talk about in a later scrim let me
58:23 - show you how you can use role-based
58:24 - prompting to plan out basically an
58:26 - entire application I'm going to start by
58:28 - asking the AI to act as an expert in
58:31 - system design and architecture and
58:32 - advise me on how to design the front end
58:34 - of a react application that helps users
58:36 - keep track of how often to water and
58:38 - fertilize their house plants this is a
58:40 - big comprehensive list it's kind of
58:42 - Broad and not super helpful right now
58:44 - but it will be in just a moment so my
58:46 - next prompt in the same chat window is
58:49 - going to be you're now a product owner
58:51 - tasked with Gathering requirements for
58:53 - this project what features andun
58:54 - functionality should this application
58:56 - have ask me clarifying questions if
58:58 - necessary this is a really good strategy
59:01 - when you need AI to help you brainstorm
59:04 - or when you want to try to get a
59:05 - different perspective than you might be
59:07 - able to come up with on your own I'm
59:08 - instructing the AI to actually interview
59:10 - me about what I want out of my project
59:13 - the AI immediately assumes the Persona
59:16 - of a product owner and says it's my
59:18 - responsibility to ensure that the
59:20 - product we're creating truly meets the
59:21 - needs of our end users great it then
59:23 - makes a list of of basic functionalities
59:26 - and ask me some questions so do we need
59:28 - user accounts what kind of plant
59:30 - information should the app include water
59:32 - and fertilizer reminders should there be
59:35 - a catalog of plants to choose from and
59:38 - what about user preferences so this is
59:40 - all good to think about but very
59:42 - overwhelming at the moment so I'm going
59:43 - to prompt again kind of drill down I'm
59:46 - going to say let's concentrate on plant
59:48 - information first that's the second one
59:51 - on the list and the question was what
59:52 - type of information should be tracked
59:54 - for for each plant for instance do we
59:55 - need to track only watering and
59:57 - fertilizing schedules or should we
59:58 - include other details like sunlight
60:00 - needs optimal temperature plant species
60:03 - Etc so as part of my prompt I will say
60:05 - let's include the nickname and image the
60:07 - watering and fertilizer frequency the
60:09 - last time that the plant was watered the
60:12 - last time it was fertilized and also an
60:14 - additional place for notes the AI then
60:16 - provides fleshed out requirements for
60:18 - the plant information functionality as
60:21 - well as some information about the
60:23 - overall plant display the date should be
60:26 - localized the information should be
60:28 - presented in an intuitive and
60:30 - userfriendly format that's great but
60:32 - this is all still a little bit broad to
60:34 - be helpful to me so I going to prompt
60:36 - again to drill down even more I'm going
60:38 - to now ask the AI to assume a third role
60:41 - I'm going to say I now want you to act
60:43 - as a product manager please wrate user
60:45 - stories based on the above requirements
60:47 - if you're not familiar with what a user
60:49 - story is it's basically a way to explain
60:52 - how a software feature should work from
60:54 - the perspective of a user or a customer
60:56 - so notice that I did not ask for a
60:58 - specific number of user stories so the
61:01 - AI comes back with 13 user stories which
61:04 - is very thorough so you see we have as a
61:06 - user I want the app to calculate and
61:08 - display the number of days since each of
61:10 - my plants was last watered or fertilized
61:12 - so that I can easily see when they need
61:14 - care next that's great another example
61:16 - is as a user I want to edit notes I've
61:18 - added for each plant so I can keep them
61:20 - current and useful this is great there
61:22 - are a lot of good ideas here but this is
61:24 - still a huge long list and as a software
61:26 - developer I'm still overwhelmed I don't
61:28 - really know where to start I'm going to
61:30 - do another role based prompt you are the
61:32 - product manager of this application
61:34 - please advise me as a software engineer
61:37 - which stories are most necessary to
61:39 - create an MVP for prototyping and demo
61:41 - purposes so basically this prompt is
61:43 - asking the AI to pair down the list for
61:46 - me what are the most important things
61:48 - that I should concentrate on first so it
61:50 - picks six user stories assigning a
61:52 - nickname uploading an image of a plant
61:55 - setting the watering and fertilizing
61:57 - frequency and so on so if I'm looking to
61:59 - build a demo or a personal project to
62:01 - put in my portfolio or something I now
62:03 - have a really well-defined place to
62:05 - start which is pretty cool now if I want
62:07 - some more advice on where to start how
62:09 - to structure what technologies to use
62:12 - I've had AI help me determine and plan
62:14 - so much of my application at this point
62:16 - that I can do one final role-based
62:18 - prompt we're going to bring it back to
62:19 - the software architect and say act as a
62:22 - software architect and give me advice on
62:24 - how to design the front end of a react
62:26 - application based on the following user
62:28 - stories I'm then going to copy and paste
62:30 - the six user stories that the AI just
62:33 - determined for me and get some advice
62:35 - based on these user stories that I've
62:37 - worked with the UI to create the chat
62:40 - GPT then suggests a component hierarchy
62:43 - to start with as well as some advice
62:44 - about all sorts of things like State
62:46 - Management handling images calculating
62:49 - dates and some user interface and ux
62:51 - stuff so this will give me some really
62:53 - good ideas about how to get started and
62:55 - then here is one of my favorite things I
62:57 - can now do another rooll base prompt
63:00 - that says you and I are a software
63:01 - engineering team discuss the
63:03 - requirements for the first three user
63:05 - stories and turn them into tickets to be
63:07 - entered in jira and now ai say sure
63:10 - let's break down these user stories into
63:12 - individual tasks that can be created as
63:14 - tickets in jira so I have my user story
63:16 - I have the tasks that go with it and the
63:19 - acceptance criteria so with role-based
63:21 - prompting I've gotten some ideas about
63:23 - how to structure my app I have
63:25 - determined the most important features
63:27 - I've determined what I need for an MVP
63:29 - and I've generated tickets for jir now I
63:32 - can be Off to the Races building my app
63:35 - so this has been a scrim about how to
63:36 - leverage AI to plan out an application
63:38 - using ro-based prompt engineering now
63:41 - this method may not work for software
63:43 - engineering teams building software out
63:45 - in the real world it's often much much
63:48 - more complicated than that and there's a
63:50 - lot of back and forth and a lot of cooks
63:51 - in the kitchen when it comes to building
63:54 - soft soft ware but if you're looking to
63:55 - build a portfolio of personal projects
63:57 - for the purposes of getting a job for
63:59 - example or if you're a oneperson startup
64:02 - company this can be a really effective
64:03 - way to use chat GPT as an idea engine
64:06 - and as a partner in brainstorming so I
64:08 - hope you found this useful happy role
64:14 - playing let's do a quick review of
64:16 - role-based prompting followed by a
64:19 - little exercise role-based prompting is
64:21 - when you use phrases like act as a or
64:23 - you ra to prompt chat gbt to assume a
64:26 - certain role while assuming the role of
64:28 - an expert you can prompt chat gbt to ask
64:31 - clarifying questions and you can also
64:33 - ask chat gbt to assume a role to help
64:36 - you define Technologies determine key
64:38 - features and write user stories when
64:40 - you're planning a project so here's the
64:43 - scenario for the exercise you want to
64:46 - use chat GPT to help you build an MVP
64:48 - for a booking website that displays
64:50 - information on hotel resorts an MVP if
64:53 - you aren't familiar stands for minimum
64:55 - viable product and it's way to describe
64:56 - an app that has the most barebone
64:58 - features that you'll need in a working
65:00 - application so you can think about like
65:02 - a very simple prototype of Airbnb or
65:04 - Expedia with no bells and whistles all
65:07 - you can do is view information about
65:09 - Resorts even an MVP of this type is
65:11 - going to be fairly complex once you
65:13 - think about all the pieces so we're not
65:14 - going to try to get chat GPT to build
65:17 - this site we're just going to get a
65:18 - little bit of practice using role-based
65:20 - prompting to plan an application so once
65:23 - again you're going use role-based
65:24 - prompting to get advice from chat GPT on
65:27 - how to create an MVP for a booking
65:30 - website that simply displays information
65:32 - on hotel resorts you'll want to start by
65:34 - writing a prompt that will yield a broad
65:36 - overview of all the things you might
65:38 - need to think about for an MVP chances
65:40 - are chat gbt is going to point out a lot
65:43 - of things that you'll need to think
65:45 - about when planning this type of
65:46 - application so just pick one area of
65:49 - focus and prompt chat gbt to keep
65:52 - assuming a role and ask you clarify
65:54 - ifying questions to help you drill down
65:56 - into the area that you want to
65:58 - concentrate on planning and once you've
65:59 - drilled that down use chat gbt to create
66:02 - five user stories for that area of focus
66:05 - don't forget to use role-based prompting
66:06 - here as well go ahead and pause the
66:08 - scrim now and start working on this
66:12 - challenge welcome back I hope you came
66:14 - up with some great user stories let me
66:17 - show you my prompts The Prompt I started
66:19 - with is I want to build a simple booking
66:22 - website for resort hotels act as a
66:24 - product manager and help me identify
66:26 - features I should include in an MVP as
66:29 - expected chat gbt came back with a lot
66:32 - of information going to copy and paste
66:34 - that in and as you can see there is a
66:36 - whole lot to think about here user
66:37 - authentication search functionality
66:39 - Resort listings booking process the list
66:42 - goes on and on so the one that I'm going
66:43 - to choose to focus on is Resort listings
66:46 - so let me actually get rid of all of
66:49 - this other stuff so that we can better
66:52 - focus on Resort list listings here's a
66:55 - prompt I use to get chat GPT to help me
66:57 - narrow down what I want to do with
66:59 - Resort listings my prompt was let's
67:02 - focus on Resort listings acting as a
67:04 - product manager decide on the five most
67:06 - important features and write user
67:08 - stories for them as requested chat gbt
67:11 - gives me five user stories that includes
67:14 - seeing a Details page high quality
67:18 - images the ability to read reviews and
67:21 - see ratings clear information on room
67:24 - availability types and their pricing and
67:26 - so on in this Grim we've narrowed down a
67:29 - plan to start working on a complex
67:31 - application and written some user
67:32 - stories in just a few prompts this can
67:35 - be a really helpful strategy for
67:36 - starting to plan an application and
67:38 - especially if you're a new developer
67:39 - just starting out and trying to maybe
67:41 - build portfolio projects it can also
67:43 - help you realize the scope of a project
67:45 - that you have in mind and help you
67:47 - narrow it or expand it accordingly so
67:49 - great job on this
67:52 - challenge
67:55 - one of the most effective ways to
67:56 - engineer a good prompt for chat GPT is
67:59 - to show and not tell in other words
68:02 - prompting with examples of what you want
68:04 - chat GPT to do let me show you a couple
68:07 - of examples I'm in a prompt chat GPT to
68:10 - write a function to Total an array of
68:12 - numbers and return the value as a dollar
68:15 - amount rather than fiddling with this
68:17 - prompt and wondering if it's clear
68:19 - enough and if GPT is going to be able to
68:22 - parse what I'm saying I'm going to
68:23 - include with my prompt an example input
68:26 - and an example output so my input is an
68:29 - array of numbers some with decimal
68:31 - points and my example output is
68:35 - 172.5 formatted as US currency GPT then
68:39 - responds with this function and even
68:42 - gives us a line of code with our example
68:44 - input so that we can test it so let's
68:46 - copy and paste that into the scrim and
68:48 - see how it works after I pasted it I'll
68:50 - run and as you can see using the example
68:53 - input that we provided the output is
68:57 - 17250 which is the output we expected
69:00 - just for fun let's try some different
69:03 - numbers so five and five should be $10
69:06 - great what if we just have one number in
69:09 - here that'll be
69:10 - $8 and if we have an empty array we get
69:14 - back $0 great let's look at one more
69:17 - example first I'm going to ask chat GPT
69:20 - to generate some dummy Json data for me
69:23 - I specify that I want it to be for music
69:24 - events and I'm going to give it an
69:26 - example of all of the properties that I
69:28 - want my Json to contain so band name the
69:32 - event date and time ticket cost venue
69:34 - and genre I'll then request that it only
69:37 - generate dummy data for two bands
69:40 - because I don't want the Json data to be
69:42 - too long GPT responds with some Json
69:45 - data I'm going to go ahead and comment
69:48 - out this first example and copy and
69:50 - paste this Json data looks good we have
69:53 - a little error because this isn't a Json
69:55 - file but that's okay we'll fix that in a
69:58 - second I then copied and pasted that
70:00 - Json data back into a prompt and my
70:03 - prompt is considering the following Json
70:06 - data so considering this example Json
70:09 - data please write a function that will
70:11 - take in this data and return a new
70:13 - object where the event date time is
70:15 - converted to a human readable format I
70:19 - then include an example that has an
70:21 - additional property and you'll notice
70:23 - that actually made a little typo here I
70:26 - write formatted data time when I meant
70:28 - formatted date time but as you'll see
70:31 - chat gbt was actually smart enough to
70:33 - correct this for me so this is my
70:36 - example output I want the event date
70:39 - time to be converted to this nice human
70:41 - readable time wherein instead of a
70:43 - jumble of letters and numbers you can
70:46 - see that it says nicely may5 2023 at
70:49 - 8:00 p.m. GPT responds with this format
70:52 - event data function it puts my data into
70:55 - a variable for me and logs it out let's
70:58 - copy and paste this into the scrim and
71:00 - see how it did get rid of my example
71:04 - Json and let's run and you'll notice
71:07 - that it is taking in this array of
71:10 - objects that has five properties band
71:13 - name genre event date time ticket cost
71:16 - and venue and it is returning an array
71:19 - of objects with six properties because
71:22 - despite my type of it has added a
71:26 - property called formatted date time and
71:29 - that is the power of prompt engineering
71:31 - with examples if there is a way that you
71:34 - can show chat GPT exactly what you would
71:38 - like your output to be I highly
71:40 - recommend you do so now stay tuned for a
71:42 - fun little challenge where we'll prompt
71:44 - with examples to build a Seltzer flavor
71:46 - generator I'll see you in the next
71:51 - one welcome back prompt Engineers here
71:54 - is a fun little challenge that will give
71:56 - you some practice prompting by example I
71:59 - don't know about you but in my area of
72:01 - the world flavored seltzer water is
72:03 - extremely popular and there are hundreds
72:07 - of flavors ranging from pretty simple
72:10 - like black cherry or pomegranate to kind
72:13 - of out there like raspberry Rose
72:16 - hibiscus cloudberry and mango Cherry
72:19 - bliss all the way to downright bizaar
72:22 - this is a real seltzer water flavor it's
72:25 - called Yeti Mischief they also have one
72:27 - called unicorn kisses and one called
72:30 - Dragon Whispers I've had all three and
72:32 - of course I don't know what a real
72:34 - dragon whisper tastes like but I guess I
72:36 - can believe that it tastes like a fruit
72:38 - bomb with a tropical punch it was good
72:41 - for this challenge you will prompt GPT
72:44 - to create a function that generates
72:46 - random salzer Water flavors some
72:48 - examples might be funky raspberry
72:50 - pineapple wacky strawberry whipped cream
72:53 - Zippy pineapple mango the format that
72:55 - you want to follow here is adjective
72:57 - followed by a flavor followed by another
73:00 - flavor and the flavor titles should be
73:03 - capitalized so make sure that the code
73:05 - that you generate with chat GPT
73:07 - capitalizes these flavors you'll want to
73:09 - give GPT example inputs and outputs the
73:13 - function that you produce should take in
73:14 - an array of adjectives and an adjective
73:17 - is a describing word like funky or Zippy
73:21 - or blue and it should ALS o take an
73:24 - array of flavors so pineapple mango
73:27 - strawberry whipped cream all examples of
73:30 - flavors go ahead and ask GPT to generate
73:33 - these two arrays the array of adjectives
73:36 - and the array of flavors you decide if
73:38 - you want your flavors to be delicious
73:40 - weird bizarre icky inedible it's your
73:44 - choice have fun with it and then finally
73:46 - test the function that GPT outputs and
73:49 - if it doesn't work or if GPT doesn't
73:51 - produce exactly what you've asked for
73:53 - keep iterating on your prompt until you
73:55 - get the result that you want grab a
73:57 - mermaid song flavored Seltzer and get
73:59 - started I'll see you in the next scrim
74:00 - with the
74:04 - solution hey there this is the solution
74:07 - to the flavor generator challenge your
74:09 - challenge was to prompt GPT to create a
74:12 - function to generate weird wacky or
74:14 - delicious random salzer Water flavors in
74:17 - the following format an adjective
74:19 - followed by a flavor followed by another
74:22 - flavor here's some examp examples funky
74:24 - raspberry pineapple wacky strawberry
74:26 - whipped cream Etc you were also to
74:28 - ensure that chat GPT gave you the output
74:31 - you expected by giving example inputs
74:34 - and outputs let's take a look at the
74:36 - prompt that I wrote create a function
74:38 - that suggests new Selzer Water flavors
74:41 - I'm then going to be very specific about
74:43 - the arguments that the function should
74:45 - accept so the function should accept two
74:47 - arguments an array of flavors and an
74:49 - array of adjectives the function should
74:51 - pick two flavors at random and return a
74:53 - new flavor in this format adjective
74:56 - flavor flavor I give it an example input
74:58 - which is two arrays one of flavors and
75:01 - one of adjectives and then in my output
75:04 - I make sure to follow the format I
75:06 - specified an adjective followed by two
75:09 - flavors let's take a look at the code
75:12 - that chat GPT generated based on this
75:14 - prompt copy and paste it into my
75:17 - index.js file as you can see it
75:20 - commented things nicely for me which is
75:22 - helpful it tends to do this randomly so
75:25 - it can be really helpful to specify
75:27 - whether or not you want comments when
75:29 - you're asking GPT to generate a function
75:32 - for you so inside the suggest new flavor
75:35 - function we have a function to get a
75:38 - random index we then use the function to
75:41 - get a random number between zero and the
75:43 - length of the adjective array and save
75:45 - it to a constant and then we use that
75:48 - random number to choose an adjective
75:51 - from the adjectives array we're then
75:52 - doing something something very similar
75:54 - to select the two flavors we're using
75:56 - the get random index function to get two
75:59 - random numbers that we can then use to
76:01 - choose something out of the flavors
76:03 - array now it seems confusing at first
76:05 - why it decided to save one to a const
76:08 - and one to a let but that is because on
76:10 - the next line of code we're looking at
76:12 - both of the random numbers that were
76:14 - chosen and we're ensuring that they
76:16 - aren't the same so we don't end up with
76:19 - a double flavor like wacky apple apple
76:22 - or something because that wouldn't make
76:24 - sense it's really cool that chat GPT
76:26 - checked for this on its own but this is
76:28 - definitely a potential bug that you
76:30 - would want to consider so finally it
76:32 - selects two flavors from the flavors
76:34 - array and returns a string in my
76:37 - requested format adjective flavor it
76:40 - also provides me with some example usage
76:42 - which is great so let's go ahead and
76:45 - call this
76:46 - function run and open the console and
76:49 - see what we end up with I want to make
76:51 - sure that I am locked fogging out the
76:53 - result of this function let's run again
76:56 - we get sour grapefruit orange Tangy
76:58 - Orange grapefruit cool Orange grapefruit
77:01 - so it looks like we're getting the
77:03 - result we expected which is great but
77:05 - now I want chat TBT to generate me some
77:08 - fun flavor ideas so next I prompted
77:11 - please generate 20 sweet or dessert-like
77:13 - foods for the flavors array I'm again
77:15 - going to give it some examples like cake
77:18 - pineapple and whipped cream then I say
77:20 - generate 20 wacky and fun adjectives the
77:23 - adjective array for example tart fresh
77:25 - and Smokey keep in mind that this prompt
77:27 - is based on the fact that I have just in
77:30 - the last interaction as chat GPT to
77:33 - generate a function for me so I'm not
77:35 - referring to that function I'm counting
77:37 - on it to remember the code that we're
77:39 - talking about but there are many
77:41 - instances where you might want to refer
77:43 - to the function as part of your prompt
77:45 - so as you can see it gives me a list but
77:48 - that's not what I want I want to be a
77:49 - lazy programmer and I want these as
77:52 - arrays I I want to turn them into a
77:53 - raise myself so I'm going to update my
77:56 - prompt and be a little more specific and
77:59 - deliberate so I'm going to explicitly
78:01 - say please generate two JavaScript
78:03 - arrays the first one I want 20 sweet or
78:06 - dessert like foods for the flavors array
78:08 - and then I give my examples and then
78:10 - number two 20 wacky and fun adjectives
78:13 - for the adjective array with some
78:14 - examples like buttery luscious and
78:17 - artisanal this time it does exactly what
78:19 - I ask it to do it gives me 20 flavors
78:21 - and 20 weird adjectives let's copy and
78:24 - paste these into the scrim so I will
78:27 - replace these shorter arrays and let's
78:30 - run see what we come up with Whimsical
78:33 - banana whipped cream interesting zesty
78:35 - caramel Cherry vibrant Cherry mango all
78:39 - right so we've got the result that we
78:41 - wanted but I see a little issue here I
78:43 - want these flavors to be capitalized
78:46 - quickly I'm going to say please write a
78:48 - function that capitalizes each word in
78:50 - the Seltzer flavor this is something
78:53 - iterative and incremental I'm again
78:55 - going to provide an example so here is
78:58 - an all lowercase sour orange apple and I
79:01 - want the first letter of each word to be
79:04 - uppercase so it gives me this
79:06 - capitalized word function so we'll copy
79:08 - and paste this code in right underneath
79:11 - our other
79:13 - function and it did provide me with an
79:15 - example usage but instead of using that
79:19 - I'm going to come down here and I'm
79:20 - going to wrap my suggest new FL Flor
79:23 - function into this capitalized word
79:25 - function and that's how we'll test to
79:27 - see if it works I'll run Zippy cake
79:29 - cinnamon interesting flavor and with
79:32 - that my salzer water generator is
79:34 - complete showing versus telling and
79:36 - using examples when it comes to working
79:38 - with chat GPT is incredibly valuable
79:41 - it's a great skill to learn so thanks
79:43 - for practicing with me hope you enjoy it
79:45 - let's continue on to the next prompt
79:47 - engineering
79:51 - tip in earlier scrims I talked a little
79:54 - bit about the dangers of chat GPT
79:57 - hallucinating hallucinating is language
80:00 - models tendency to sometimes simply make
80:03 - things up things that can sound
80:05 - perfectly plausible and true but just
80:07 - aren't chat jpt can rather randomly make
80:10 - up facts misquote people or give false
80:13 - information so what I'd like to do in
80:15 - this scrim is show you an example of a
80:17 - time that chat GPT hallucinated while I
80:20 - was trying to work with it as well as
80:21 - talk about why GPT hallucinates and what
80:24 - you can do if it hallucinates or how to
80:27 - try to prevent it from happening so one
80:29 - day I was working with chat GPT to
80:31 - create an interactive timeline which is
80:34 - basically a web graphic that you can
80:35 - click on it will show certain years on a
80:37 - timeline and you can click on that year
80:39 - for more information when I asked chat
80:41 - GPT to help me with this it immediately
80:43 - gave me an accordion menu which was not
80:46 - exactly what I wanted so here was my
80:48 - follow-up prompt what suggestion do you
80:49 - have for a more Dynamic user interface I
80:52 - was hoping for some something a little
80:53 - more graphically interesting than a
80:54 - simple accordion menu notice that my
80:57 - prompt is not very specific it's pretty
80:59 - open-ended and it's almost like I'm
81:01 - asking the language model to tell me
81:03 - what it thinks like I'm asking it for
81:05 - its opinion rather than requesting it
81:07 - perform a concrete task and I think that
81:09 - might be one of the reasons that it
81:11 - began to hallucinate so its response was
81:14 - for a more Dynamic and Visually
81:16 - appealing user interface I suggest using
81:18 - a horizontal timeline layout with a
81:20 - sliding effect so what it's suggesting
81:21 - is something that is a photo Carousel
81:23 - where you can cycle through a collection
81:25 - of photos or other information by
81:27 - clicking on right and left arrows so it
81:29 - suggests this open-source Library called
81:32 - Chronos slider notice it even gives me
81:35 - the GitHub URL and it claims that this
81:37 - library is lightweight and very easy to
81:39 - integrate it then gives me instructions
81:42 - and Sample code but guess what when I go
81:44 - to this GitHub link I get a 404 it
81:47 - doesn't exist when chat TPT does make
81:49 - mistakes it can be pretty good at
81:51 - correcting itself so I'm going to ask it
81:53 - to confirm its own information my next
81:56 - prompt was I get a 404 error when I try
81:58 - to visit the Kronos slider GitHub
82:00 - repository can you check the URL and
82:02 - then chat gbt is like oh apologies for
82:04 - the confusion I made an error in my
82:06 - response it seems that the Chronos
82:08 - slider Library does not exist and then
82:10 - it suggests another Library which does
82:13 - in fact exist and not only does it exist
82:15 - but it turns out to be a little closer
82:17 - to what I was actually looking for so
82:19 - that's what happened Chachi BT
82:20 - completely fabricated a library and
82:22 - instructions for how to use it let's
82:24 - talk about why this happens why do
82:26 - language models hallucinate can be for a
82:29 - few reasons it can be limited or
82:30 - incorrect training data a
82:32 - misinterpretation of your prompt or and
82:35 - probably most likely for the example
82:37 - that I went through it has to do with
82:39 - the way GPT works I've heard GPT
82:41 - described as an incredibly sophisticated
82:44 - autocorrect basically the way that it
82:46 - comes up with responses is that it tries
82:48 - to determine the likelihood of the next
82:51 - word given a sequence of words so it's
82:54 - trying to optimize and guess what the
82:56 - next word is going to be and that
82:58 - sometimes causes the model to prioritize
83:01 - coherence over correctness in other
83:03 - words it will occasionally pick
83:04 - something that sounds good over
83:06 - something that's actually true at this
83:08 - point I have spent many hundreds of
83:10 - hours with chat gbt and it's only
83:12 - hallucinated a few times to my knowledge
83:15 - so this isn't an error that happens
83:17 - constantly but it is something that is
83:19 - helpful to be aware of here are some
83:21 - things you can do when chat TPT
83:23 - hallucinates as I showed you you can
83:24 - prompt the model to double check its
83:26 - response and or you can confirm the
83:29 - response for yourself sometimes it can
83:31 - be good to do both breaking questions or
83:34 - tasks into smaller chunks can be really
83:36 - helpful and it's been shown that the
83:38 - smaller that you break down the tasks
83:40 - the more accurate the response whether
83:43 - that means into smaller prompts or
83:45 - breaking stuff down into lists of things
83:48 - as well as encouraging the model to show
83:50 - its own work or Justify the choice
83:52 - choices that it's making in the context
83:54 - of code as we'll see later sometimes
83:56 - that can mean add code comments
83:58 - explaining what you've done and why
83:59 - you've chosen to do it that way and then
84:01 - finally you can rephrase the question to
84:03 - ask it in a different way be more
84:05 - specific or provide more context so
84:07 - those are some tips to mitigate tat GPT
84:10 - hallucinating tat GPT is an amazing tool
84:13 - that if you remain just a little bit
84:15 - critical of the information that it's
84:16 - giving
84:20 - you congrat ulations go ahead and give
84:23 - yourself a nice pat on the back because
84:25 - you've learned a number of strategies
84:27 - for more effective prompt Engineering in
84:29 - this section we covered how to refine
84:31 - prompts with specificity context and
84:33 - Technical language we learned how to
84:35 - gain more refined control over the
84:37 - length and formatting of the ai's
84:39 - responses we've covered breaking down
84:41 - tasks and prompting iteratively
84:43 - optimizing prompts rule-based prompting
84:46 - and prompting by example I've included
84:48 - in this scrim a markdown file with a lot
84:51 - of the examples that we covered and you
84:52 - can go ahead and use this as a reference
84:54 - if you'd like to save it you can click
84:56 - on this little gear here and download
84:58 - the file as a zip you can then open it
85:01 - up in a text editor like VSS code next
85:04 - up in the next section of the course
85:05 - we'll go over ideas and strategies for
85:07 - using AI to accelerate your coding
85:09 - workflow I'll see you
85:14 - there now that we've gotten comfortable
85:16 - with all the facets of effective prompt
85:18 - engineering let's explore some ways AI
85:20 - language models can help you be a faster
85:22 - and more effective developer here's just
85:25 - a short list of some of the ways you can
85:27 - use AI for web development you can use
85:29 - it to generate project ideas plan
85:31 - projects write user stories and even
85:33 - Jura tickets you can generate code and
85:35 - code Snippets generate mock data debug
85:38 - get code review and suggestions for
85:40 - refactor convert code from one format to
85:42 - another like from python to JavaScript
85:45 - for example you can write tests and
85:46 - documentation and find that you can
85:48 - learn new technologies and advanced
85:50 - topics faster than ever before in this
85:53 - next section of the course I'm going to
85:54 - show you a wealth of examples and ideas
85:56 - for how you can use prompt engineering
85:58 - to generate code in a precise and
86:00 - incremental way as well as how to use AI
86:03 - to explore learn and study web
86:05 - development topics so let's go let's do
86:11 - it as we've seen in previous scrims you
86:13 - can accomplish a lot with a well-crafted
86:15 - prompt by describing in detail exactly
86:18 - what the code should accomplish
86:19 - generating code from pseudo code is
86:21 - another effective strategy to maximize
86:23 - your specificity and fine-tune your
86:26 - results pseudo code is an informal way
86:28 - to describe what your code should do in
86:30 - plain English and that could mean a
86:31 - bulleted list of procedural steps or
86:34 - very simplified code that doesn't follow
86:36 - the syntax of any particular language
86:39 - and this tip is going to be especially
86:40 - helpful if you're wanting to accomplish
86:42 - a coding task in a specific way if
86:44 - you're trying to generate code in a
86:46 - language you're unfamiliar with or if
86:47 - you simply want to code without worrying
86:49 - about precise syntax so let me show you
86:52 - an example let's say I wanted to write a
86:54 - function to find a book in a book array
86:56 - by the book's ID my prompt will look
86:59 - something like this I'll start by
87:01 - specifying that I want the prompt to be
87:02 - written in JavaScript now I'll go ahead
87:05 - and start my pseudo code with something
87:07 - that pretty much looks like JavaScript
87:10 - I'll say I want to take two arguments a
87:12 - book array and an ID but now instead of
87:15 - writing a function I'm just going to do
87:16 - some quick pseudo code so I'll say for
87:19 - each book in the book array if book. ID
87:23 - equals the ID that we're passing into
87:26 - the function then return that book from
87:30 - the array else return an error object
87:33 - with a message notbook found that's my
87:37 - prompt and here is the result as you can
87:40 - see this is pretty much exactly what I
87:42 - asked for we are looping through the
87:45 - book array we're comparing each book ID
87:47 - to the ID that we're passing into the
87:48 - function and if they match we're
87:50 - returning that book and if we don't find
87:52 - trying to match we're returning an error
87:54 - object no book found I then want to be
87:57 - able to test this function so I'm going
87:59 - to write another quick prompt that is
88:02 - just generate some funny book mock data
88:05 - to test this function chat GPT returns
88:08 - some fun book data and I can test my
88:11 - function by passing in this books array
88:13 - and an ID of five so let's run and open
88:17 - up the console and that results in the
88:19 - book with an ID of five so we know that
88:21 - this function is working great so that's
88:23 - one method of pseudo code that we can do
88:26 - just basically it looks like code but
88:28 - with no formal syntax but I can also
88:30 - write pseudo code that is a little more
88:32 - conversational so for example here is
88:35 - another prompt where I'm basically
88:37 - asking for the same thing in a longer
88:39 - form write a JavaScript function find
88:41 - book by ID so I'm calling it find book
88:43 - by ID instead of get book this time and
88:46 - this function should take two arguments
88:47 - book array and the ID for each book in
88:50 - the book array compare each book array
88:51 - ID ID with the past in ID if found
88:54 - return book if not found return error
88:56 - object sorry no book found I'll copy and
88:59 - paste the function that chat GPT
89:01 - generates and as you can see it is
89:04 - almost exactly the same We're looping
89:06 - through the books comparing the IDS
89:08 - returning the book if we find it and
89:09 - returning an error if we don't find it
89:12 - I'll call this function with the same
89:14 - array of books let's try a different
89:16 - number how about book number four great
89:20 - and let's try it if we enter a book ID
89:22 - that doesn't exist we get an error
89:25 - message perfect we've covered in this
89:27 - scrim how you can quickly create and
89:29 - test a function using pseudo code to
89:31 - more finely controlled output if you'd
89:33 - like some practice here in index.js I
89:36 - have a few suggestions for functions you
89:38 - can prompt AI to generate with pseudo
89:40 - code so you want to write detailed
89:42 - pseudo code for the following functions
89:43 - and prompt jat GPT to write those
89:45 - functions for you we have a function
89:47 - that adds two numbers a function that
89:49 - adds all the numbers in an array a
89:51 - function that that looks for a user ID
89:53 - in a user array and returns an error if
89:55 - not found a function to count vowels in
89:57 - a string and a function that finds the
89:59 - highest number in an array go ahead and
90:02 - practice prompting with pseudo code if
90:04 - you want to and as I said before this is
90:06 - a really helpful strategy if you're
90:07 - trying to generate code in a language
90:09 - you aren't familiar with if you want to
90:10 - have more control over how a function is
90:12 - written or maybe you're still new to
90:13 - coding and want to work through the
90:14 - logic yourself and not have the AI do
90:17 - too much
90:20 - work
90:22 - for precise communication with chat GPT
90:25 - you can create a pseudo language which
90:27 - is basically an agreement that you are
90:29 - going to prompt chat GPT in a certain
90:32 - way and you expect it to respond in a
90:34 - certain way let me show you what I mean
90:36 - I'm going to come over here to this
90:38 - counter MD file and here is the prompt
90:41 - that I shared with chat GPT I want to
90:43 - build my own react component library
90:45 - with common components like form Fields
90:47 - nav barss and an accordion menu then I
90:49 - break down two instructions create a
90:51 - pseudo language similar to markdown that
90:53 - will help me quickly describe a react
90:55 - component so that you can convert it to
90:57 - example code respond with the template I
90:59 - can use as well as an example component
91:01 - keep the template and the component as
91:03 - simple as possible I added this last
91:05 - line here because in my experimentation
91:07 - chat tobt did tend to over complicate
91:09 - things here's the template it gave me
91:11 - this is our agreement of how I'm going
91:13 - to Define react components so that chat
91:16 - GPT can provide me with the code for
91:18 - these components I'm going to name the
91:20 - component I'm going to Define it State
91:22 - props what it should render and the
91:24 - event handlers that it has in this
91:27 - format under State I'll Define any and
91:29 - all state variables with their initial
91:32 - values under props I'll list all the
91:34 - props that my components will take with
91:35 - the prop type I'll describe what I want
91:37 - the component to render and I'll list
91:39 - event handlers with a Handler name and
91:41 - the description of what the Handler
91:43 - should do here is the example that chat
91:45 - GPT provided for me so it gave me a
91:47 - simple counter example we're going to
91:49 - keep track of one piece of State called
91:51 - count with with an initial value of zero
91:53 - as a prop we're going to take in an
91:54 - increment value which is a number the
91:57 - increment of the count so instead of
91:59 - incrementing by one we could increment
92:01 - by five or 10 or 15 or 7 or whatever we
92:03 - want to do the component should render a
92:05 - button that displays the current count
92:07 - and each click increases the count by
92:10 - the increment value which is the prop
92:12 - that our component is taking in finally
92:14 - we have an event handler called handle
92:16 - increment and that increases the count
92:17 - state by the increment value this is a
92:19 - fairly detailed description of what we
92:21 - want this component to do so let's see
92:23 - how it works I'll go to my counter. jsx
92:26 - file here's the code chat gbt generated
92:28 - I'll go to index.js and we'll import
92:32 - this component finally we'll render it
92:34 - in our app component run and see if it
92:37 - works excellent we have established a
92:40 - pseudo language with chat GPT to
92:42 - describe in detail the components that
92:44 - we want to build this does have its
92:45 - limitations chat jpt is only going to
92:48 - remember this agreement for so long so
92:49 - you will have to periodically mind it
92:52 - but this is just one more way that you
92:54 - can communicate with chat GPT with
92:56 - Precision let's try creating another
92:58 - component I'm going to go to my navbar
93:00 - markdown file and copy and paste in my
93:03 - pseudo language template I want to fill
93:05 - this out so that I can prompt chat GPT
93:07 - to create a simple navigation bar for me
93:10 - before I show you how I filled this out
93:11 - I'd encourage you to pause the scrim for
93:14 - a second and fill this out yourself
93:16 - think about how you would describe how
93:18 - to build a nav bar you can copy and
93:20 - paste this in the chat gbt and say hey
93:22 - this is the pseudo language I want to
93:24 - use to create react components and I
93:25 - want you to create a navbar component
93:28 - pause the scrim now and when you're
93:29 - ready come back and I'll show you how I
93:31 - did
93:33 - it welcome back I hope you found that
93:36 - educational let me show you how I
93:37 - approach this I'm going to start with my
93:40 - render statement because for me it makes
93:42 - sense to describe first what I want the
93:44 - component to do so I'm going to say that
93:46 - the component accepts an array of
93:48 - objects each representing a link in the
93:51 - nav menu I want each object to contain
93:56 - URL name and I'll give an example here
93:59 - like home about or contact us Etc and of
94:03 - course we want the URL we want our Navar
94:06 - component to render the list of links I
94:09 - know I want to keep track of which link
94:11 - is currently active so I'm going to have
94:13 - a piece of State called active link and
94:15 - that's going to keep track of the index
94:17 - of the menu item so I want the initial
94:19 - value to be zero I want my nav bar to
94:22 - take in an array of Link objects as I've
94:26 - specified here I'm going to refer to
94:28 - that as nav links and the prop type will
94:31 - be object then I'll handle clicks on the
94:35 - link and when a nav menu item is clicked
94:38 - I want its index to become the active
94:40 - link a better way to say this might be
94:44 - update active link with nav menu item
94:47 - index let's look at the code that
94:50 - resulted from this prompt I'll go to my
94:52 - navb bar. jsx file and paste it in we
94:55 - have this Navar which is pretty much
94:57 - exactly what I described it Loops
94:59 - through an array of navlink objects and
95:01 - for each renders a list item with a link
95:04 - which when clicked sets that link to
95:07 - active let's import this into appjs and
95:10 - try it out before we can test it out
95:12 - we're going to have to come up with some
95:13 - links to pass as a prop to the Navar I
95:16 - prompted gbt to generate this for us I
95:20 - asked it for some learning to code
95:22 - themed links here's what it came up with
95:25 - we'll pass the nav links array of
95:27 - objects to navbar as a prop just like
95:30 - that run here's a simple nav bar that we
95:34 - generated using a pseudo language with
95:36 - chat GPT this could use some styling of
95:39 - course but I think it's a pretty good
95:44 - start welcome to another challenge where
95:47 - you are going to develop a pseudo
95:49 - language with chat GPT to help you gener
95:51 - generate forms first you'll prompt chat
95:53 - gbt to create a pseudo language for
95:55 - creating HTML forms and secondly if you
95:58 - like the suggestions go ahead and use
95:59 - the pseudo language to create a form can
96:01 - ask for adjustments if necessary and if
96:03 - the pseudo language it comes up with is
96:05 - too complicated reprompt with an
96:07 - instruction to keep it simple I've
96:09 - noticed that this is an area where chat
96:10 - TBT tends to want to provide you with a
96:12 - very comprehensive solution it's going
96:14 - to account for everything you might
96:15 - possibly want to do with the pseudo
96:17 - language which is great but for the
96:19 - purpose of this exercise we want to keep
96:20 - it as simple as possible so it might be
96:22 - beneficial for you to instruct Chach BT
96:24 - to go for Simplicity go ahead and pause
96:26 - now and start working on the
96:30 - challenge welcome back I hope that went
96:32 - well for you here is my prompt create a
96:35 - pseudo language that will help me
96:36 - quickly describe to you how to provide
96:38 - sample code and styles for an HTML form
96:41 - respond with the template I can use as
96:43 - well as a sample element here is the
96:45 - pseudo language that chat gbt came up
96:48 - with so we have a form we can specify an
96:50 - action a mage method and the types of
96:53 - inputs that we want and within inputs we
96:55 - can specify a type label any attributes
96:58 - and styles and down here you can see we
97:00 - can also specify styles for the form
97:03 - itself so this looks pretty good to me
97:05 - I'm now going to scroll down a little
97:07 - bit and I'll show you the example that
97:10 - it gave me so we have a form where the
97:11 - action is submit form we're going to
97:13 - post and it has a text input for a
97:17 - username and a submit button and then
97:19 - also some styles to give it a border
97:21 - I'll show you the result when I use this
97:24 - pseudo language to make a prompt that I
97:26 - fed right back to chat GPT I'm going to
97:29 - go to the index.html and I'll go ahead
97:31 - and paste my form code here and into my
97:34 - CSS file I will paste the CSS let's go
97:37 - ahead and run and test this out and
97:39 - there we go a nice simple little form in
97:41 - just a few steps using this strategy you
97:44 - can create a session with chat gbt where
97:46 - you can use this template over and over
97:48 - to quickly and precisely create a number
97:50 - of web components just keep in mind that
97:52 - chat gbt's memory is short and you may
97:54 - need to remind it of your template after
97:56 - every seven or 10 interactions or so
97:59 - thank you for trying out this challenge
98:01 - fantastic
98:05 - work there's a lot to think about when
98:07 - you're writing a function there's so
98:09 - many edge cases that you need to account
98:11 - for and it can take a lot of practice to
98:13 - be able to identify what those edge
98:15 - cases are luckily this is something that
98:17 - chat GPT really excels at we can use it
98:19 - to identify edge cases and generate
98:21 - inputs so that you can test your
98:23 - function against those edge cases this
98:25 - strategy can be super informative and
98:27 - educational especially if you're new to
98:29 - programming so let's take a look
98:30 - starting in my remove dupes MD file I'm
98:33 - first going to prompt chat GPT to write
98:36 - a JavaScript function that takes in an
98:38 - array and returns a new array with any
98:39 - duplicate items removed I'll now jump to
98:42 - my remove dupes JS file and here's what
98:44 - that function looks like the function is
98:46 - creating a set out of the array because
98:49 - set automatically removes duplicates and
98:51 - then we're turning it back into an array
98:53 - using array. from so basically we're
98:55 - going to pass the array into set set
98:57 - removes all the duplicates then we're
98:59 - converting it back into an array and
99:01 - saving it to a variable called unique
99:03 - array and then returning that array
99:04 - where all the duplicates are removed
99:06 - returning to remove dupes let me show
99:08 - you my second prompt and that is list
99:10 - eight edge cases this function should
99:12 - account for and provide test cases for
99:14 - each you may want to ask it for all the
99:17 - edge cases or however many edge cases
99:19 - you want I specify eight edge cases just
99:21 - to keep it from going on and on and on
99:23 - this is gpt's response and it did
99:25 - include a definition of each which I
99:27 - erase just for the sake of brevity so
99:30 - the edge cases we want to account for
99:31 - are an empty array an array with a
99:33 - single element an array with all
99:35 - elements that are the same an array with
99:37 - different types of elements like num
99:39 - strings and booleans an array with
99:40 - nested arrays Chad gbt sort of disclaims
99:43 - here that the function that it gave us
99:45 - won't work as expected because
99:47 - JavaScript only allows comparisons of
99:49 - simple data types so so if we wanted to
99:51 - check for duplicate arrays we would need
99:53 - another solution the six case is an
99:55 - array with objects then a non-array
99:58 - dealing with what the function should do
99:59 - if it receives an input that's not an
100:01 - array at all and finally arrays with
100:03 - special numbers like not a number and
100:06 - infinity it also included with this
100:08 - response an additional disclaimer the
100:10 - function provided doesn't handle nested
100:12 - arrays objects or non-array inputs
100:15 - that's just fine for our purposes so
100:17 - let's return to remove dupes DJs here I
100:20 - made an additional prompt because I
100:22 - wanted the output to be in a specific
100:24 - format I asked for the edge cases in a
100:26 - single code block just for ease of copy
100:28 - and pasting and I ask it to denote the
100:31 - edge cases as part of the console log so
100:33 - here's an example of what I want each
100:35 - test or each Edge case to look like
100:38 - before we call the function inside the
100:40 - console log with whatever our test case
100:42 - is I want what we're testing for to be
100:44 - denoted as a string here are the test
100:47 - cases as you can see they're in exactly
100:49 - the format that I requested that's great
100:52 - so let's head to index.html really quick
100:55 - and I'm going to add remov dupes DJs as
100:59 - my script Source let's return to remove
101:02 - dupes JS run and see how we go and open
101:05 - the console here are all of our tests
101:07 - and our results this is really helpful
101:10 - cuz if you take a look at an array with
101:12 - a single element it's passing into one
101:15 - and we can see that our result is an
101:17 - array with one inside of it so we're
101:19 - dealing with that edge case as expected
101:21 - but take a look at non-array inputs in
101:24 - which we're passing in a string and
101:26 - you'll notice that we have two T's a
101:28 - capital t and a lowercase T which this
101:31 - function considers two different
101:33 - characters so they are not considered
101:35 - duplicates depending on your purposes
101:37 - that's an edge case that you might want
101:38 - to account for let's do one more example
101:40 - I'm going to go up here to count
101:42 - frequency. JS and paste in a prompt as
101:45 - well as the function that chat gbt
101:47 - responded with so I prompted write a
101:49 - JavaScript function that counts the
101:50 - frequency of characters in a string this
101:53 - function creates an object it checks
101:55 - through every character in a string if
101:57 - it finds the character it increments the
102:00 - character count by one and if it doesn't
102:01 - find it it creates it in the Char count
102:04 - object what I'd like you to do is pause
102:07 - the scrim now and ask GPT for five edge
102:10 - cases and then test this function
102:12 - against those edge cases when you return
102:14 - I'll show you my prompt and output I'll
102:16 - see you in a
102:17 - sec welcome back hope it went well here
102:20 - is my prompt my prompt is what are five
102:23 - edge cases this function should account
102:25 - for please list the edge cases followed
102:27 - by a single code block with tests for
102:30 - those edge cases here's what it came up
102:32 - with because I have already requested a
102:35 - similar task chat GPT is going to give
102:38 - me a very similar format to before which
102:41 - is great that's exactly what I want you
102:43 - may have needed to tweak it a little bit
102:45 - that is completely okay I'm going to
102:47 - return to index.html and change my
102:49 - script source to to count
102:52 - frequency run and see our result in the
102:55 - console you can see the five test cases
102:57 - for these edge cases and their results
103:00 - as I said I think this strategy can be
103:02 - pretty helpful to almost anybody but
103:04 - especially if you're new this can be
103:06 - really really educational chat GPT can
103:09 - really open your eyes to edge cases and
103:11 - things that your function might need to
103:13 - do that you may have never thought about
103:15 - definitely use this to your advantage
103:17 - and join me in the next scrim to talk a
103:19 - bit more about test
103:24 - cases language models can be extremely
103:27 - helpful when it comes to testing your
103:29 - code it's great at coming up with random
103:31 - inputs with which to test your function
103:33 - it can help you write tests using test
103:35 - Suites like justest and can even help
103:37 - you refactor based on those tests here
103:40 - in my scrim I have this password Checker
103:42 - function it checks if a password is
103:44 - valid and a password is considered valid
103:47 - if it has 10 or more characters includes
103:49 - at least one capital letter and and
103:50 - contains one special character like a
103:53 - star an ampersand a dollar sign or an
103:55 - exclamation point say I just wanted to
103:57 - call this function with a bunch of
103:59 - different inputs to get a feel for how
104:02 - it will handle different inputs so I can
104:04 - ask for some really simple tests call
104:06 - the following function with 10 test
104:07 - inputs and console log the results and
104:09 - then I have an example of what I want
104:11 - the console log to look like I want to
104:13 - call the function with a random input
104:15 - and I want a label that lets me know
104:18 - what input went into this function and
104:20 - then of of course I reference in my
104:21 - prompt the function that I want to test
104:23 - let's take a look at gpt's response as
104:25 - you can see it's made up 10 random
104:27 - passwords some of which are valid and
104:30 - some of which are not let's open the
104:32 - console and run this and we see the
104:35 - output of our various tests as I said
104:37 - GPT can also generate tests for specific
104:40 - test Suites and head over to my is even
104:43 - JS file we have this really simple
104:45 - function that takes in a number as an
104:48 - input and uses the modulus operator to
104:50 - to divide it by two to determine whether
104:52 - or not it's even if I wanted to generate
104:54 - some just tests for this I can prompt to
104:57 - chat GPT something like please write
104:59 - eight tests for this JS function using
105:01 - just it spits out some functions using
105:04 - the just syntax and also makes some
105:06 - really good assumptions about the types
105:08 - of input and edge cases that we should
105:11 - test this function with for example it
105:13 - tests with zero with positive numbers
105:16 - negative even and odd numbers and so on
105:18 - now say that I wanted to generate some
105:20 - test that look like just but I want to
105:22 - be able to run them quickly in my
105:24 - browser or in a scrim to do that all
105:26 - prompt please write 10 tests for this
105:28 - function that look like Jess but that I
105:30 - can run in my browser and then going to
105:32 - reference the function that I want it to
105:33 - write the test for and it responds
105:35 - certainly here's an approach for a very
105:37 - basic just like testing setup that you
105:39 - can run in your browser's console we
105:41 - have a test function that is going to
105:43 - run a test callback and print the result
105:45 - of each test with a check if it passes
105:48 - and an X if it doesn't pass we'll take a
105:51 - closer look at this in a second but it
105:53 - goes on to make a bunch of just like
105:55 - tests for all sorts of inputs decimals
105:58 - negative decimals positive even numbers
106:01 - negative odd numbers and even a string
106:03 - and note down here that it says
106:04 - JavaScript is a dynamically typed
106:06 - language and does type coercion so 12
106:09 - the string is coerced to 12 the number
106:11 - which means that the string 12 will
106:13 - return true as our function is currently
106:16 - written let's have a closer look at the
106:17 - response in the scrim copy and paste
106:20 - here we have a couple of helper
106:22 - functions that help us to create a
106:23 - justlike environment and a bunch of
106:25 - tests so I'm going to go to my
106:27 - index.html I'm going to make sure that
106:30 - the right script is uncommented then we
106:32 - can return to is even and run these
106:34 - tests all of our just like tests have
106:37 - passed but once again this draws my
106:40 - attention to the fact that the string 12
106:42 - will be coerced into the number 12 and
106:44 - therefore will return true as my
106:47 - function is written so based on the
106:50 - results of my tests let's say that I
106:52 - decide that I actually don't want that
106:54 - to happen I want my function to only
106:57 - accept numbers as input so to GPT I'm
107:01 - going to prompt please refactor my
107:03 - iseven function so that string inputs
107:06 - are invalid it suggests a couple of
107:08 - Alternatives one where it returns false
107:11 - if the input is not a number and one
107:13 - that will throw an error if the input is
107:15 - not a number with just a couple of
107:16 - prompts I've been able to generate a
107:18 - test suite and refactor my function to
107:21 - cover more test cases based on the
107:22 - results of that test Suite I'm going to
107:24 - choose this first alternative which will
107:26 - return false if the input is not a
107:28 - number let's go back to the scrim and
107:30 - I'll comment out our old function and
107:32 - copy and paste in the new function let's
107:35 - run the test again and now this last
107:37 - test doesn't pass let's scroll down to
107:40 - this test and I'm going to change this
107:42 - because I now expect that is even will
107:45 - return false if the input is a string
107:48 - and so I would expect that when is even
107:50 - is called with the string I would expect
107:52 - that to be false I can run again and all
107:55 - of my tests are passing this has been a
107:57 - few ways that you can use a language
107:59 - model to generate all sorts of input
108:01 - data and tests and also refactor quickly
108:04 - and with just a few
108:09 - prompts in this little challenge you'll
108:11 - jump in and use chat GPT to test a
108:14 - function and generate some edge cases
108:16 - especially for you new developers out
108:18 - there this is great practice getting
108:19 - familiar with all the different
108:21 - possibilities your functions may need to
108:23 - account for so here we have a small
108:25 - function that takes an array and a chunk
108:27 - size and returns a new array of
108:30 - subarrays for that chunk size so here's
108:32 - a little example we have this array
108:34 - containing the numbers 1 2 3 4 we ask
108:37 - for a chunk size of two so this function
108:39 - then splits up the array into two arrays
108:42 - with two items each so the first thing
108:45 - I'd like you to do is go ahead and read
108:47 - through the function make sure that you
108:49 - understand what it's doing then ask chat
108:51 - GPT to generate some test inputs for
108:53 - your function just so that you can make
108:55 - sure that it's working correctly then
108:56 - you'll ask chat GPT for five edge cases
108:59 - go ahead and read through those edge
109:01 - cases that it generates and pick a
109:03 - couple that you want to revise your
109:04 - function to account for some of the
109:06 - things that may involve infinite Loops
109:08 - so don't jump right in running the edge
109:11 - cases be sure to read through them and
109:13 - revise the function first once you've
109:16 - chosen a couple of edge cases you'll ask
109:18 - chat GPT to revise the function
109:20 - based on those edge cases and you'll
109:22 - want to make sure to instruct chat GPT
109:24 - on how you would like to deal with those
109:27 - edge cases whether that's returning
109:28 - humanfriendly errors or returning false
109:31 - or returning one single error saying
109:34 - something went wrong it's up to you how
109:35 - you would like to handle errors so go
109:37 - ahead and end pause now and start
109:39 - working through these
109:42 - steps welcome back let's go ahead and
109:45 - generate some test cases I'm going to
109:47 - delete this example test case we have
109:49 - here and my prompt was call this
109:52 - function with three test inputs and
109:55 - console.log the results and I included
109:57 - the function in my prompt here are the
109:59 - test cases that chat GPT came up with we
110:02 - have three test cases the first is an
110:04 - array with nine items and we're asking
110:06 - for a chunk size of three and our
110:09 - expected output is that we split this
110:11 - array into three chunks of three items
110:14 - each in the second we have some strings
110:17 - and we want a chunk size of two but
110:19 - since we have five items we end up with
110:21 - two items being chunked together in an
110:23 - array and then one item by itself and in
110:26 - the third test case we are asking for a
110:29 - chunk size of one so each item in the
110:31 - array ends up in an array all by itself
110:34 - so that looks good let's go ahead and
110:36 - now generate some edge cases going to
110:38 - scroll down so we have a little bit of
110:40 - room and here was my prompt kept it
110:42 - simple generate five edge cases this
110:44 - function should account for and again I
110:46 - copied and pasted the function along
110:48 - with my prompt chat gbt suggested
110:51 - following edge cases if the input array
110:53 - is null or undefined so if we get a null
110:57 - instead of an array if the chunk size is
110:59 - zero or negative that's going to cause
111:01 - an infinite Loop because if we look at
111:04 - our function we're incrementing I by the
111:07 - size of our chunk each time so it won't
111:10 - increment and we'll keep going and going
111:12 - and going not exactly what we want and
111:14 - then finally an edge case that we might
111:16 - need to account for is if the chunk size
111:19 - is null or or is not a number so for
111:21 - example if we tried to input the string
111:23 - two so I can see from these edge cases
111:25 - that we're going to have a problem if
111:27 - this function is called with types we
111:28 - aren't expecting if the first argument
111:31 - isn't an array or if the second argument
111:33 - is anything but a positive integer based
111:35 - on that knowledge here is the prompt
111:38 - that I gave chat GPT to ask it to revise
111:40 - the function my prompt was revise the
111:43 - function based on the edge cases above
111:45 - and I'm saying above here because I am
111:46 - still in the same session with chat GPT
111:49 - so I can count on it knowing the
111:51 - function that I'm referring to throw a
111:52 - userfriendly error if the first argument
111:54 - is not an array or if the second
111:56 - argument is not a positive integer so up
111:59 - here I'm going to delete my old function
112:01 - and replace it with my revised function
112:04 - designed to deal with these edge cases
112:06 - let's run this with our current test
112:08 - cases looks like we're getting our
112:10 - expected results with this revised
112:12 - function so that's great now let's
112:14 - scroll back down and uncomment these
112:17 - edge cases so we can test them one by
112:20 - one the first argument is null let's go
112:23 - ahead and comment out these tests just
112:25 - so we can see clearly the first comment
112:28 - is null then we get the error the first
112:30 - argument must be in Array that's great
112:32 - test the second one this is the one that
112:35 - was in danger of causing an infinite
112:36 - Loop so instead we get an error that
112:38 - says the second argument must be a
112:40 - positive integer great that's what we
112:42 - want now let's test what happens if the
112:45 - chunk size or the second argument is
112:47 - null we get the error about the second
112:49 - argument
112:50 - we get that same error if we try to
112:52 - enter a string or anything that isn't a
112:55 - positive integer in this Grim you've
112:57 - practiced using chat GPT to test and
112:59 - generate edge cases for a function so
113:01 - really great job I hope this will come
113:03 - in handy for the
113:06 - future perhaps you've already discovered
113:09 - in your experimentation with chat GPT
113:11 - and other language models how easy it
113:13 - can be to find errors and bugs in your
113:15 - code for example I have this function
113:18 - here and it takes some information about
113:21 - blog previews and it uses it to
113:23 - construct the HTML for a Blog preview
113:26 - element so as you can see it takes in a
113:28 - parent ID a card ID a card class a title
113:31 - and some content and it makes HTML
113:34 - elements that look a little something
113:36 - like this however without having any
113:38 - idea what this function does I could
113:41 - copy and paste it into chat GPT and say
113:44 - hey chat jpt what's wrong with this
113:45 - function and it will indeed come back
113:47 - with a list of everything that's wrong
113:49 - with the function and it'll even correct
113:51 - the mistakes for you in an easily copy
113:53 - pastable code block don't look at this
113:55 - for too long it contains spoilers this
113:57 - is a perfectly great strategy as long as
114:00 - your code isn't too complex what I'm
114:03 - going to suggest you in the scrim is a
114:05 - strategy to get language models to
114:07 - communicate with you about errors in a
114:09 - way that's going to let you better keep
114:11 - track of the changes that chat GPT has
114:13 - made so what I'd like you to do now is
114:15 - prompt GPT to fix the errors in this
114:18 - function by using these steps first run
114:20 - the function and copy and paste any
114:22 - error messages that you might get into
114:24 - chat gbt along with the function then
114:26 - I'd like you to ask the AI to explain
114:28 - the errors to you as code comments this
114:31 - can be a good thing to do because it
114:33 - helps you keep track of what's going on
114:34 - with your code and also making chat GPT
114:37 - break down the changes and explain them
114:39 - is going to help you minimize the
114:40 - chances that it will make a mistake as
114:42 - we've discussed the more you can break
114:44 - down a task the better so go ahead pause
114:46 - the scrim now and debug this function
114:51 - welcome back hopefully you have some
114:53 - nice blog previews in your mini browser
114:55 - let me show you what I prompted so my
114:58 - prompt was this function should return
115:00 - the HTML for a new blog preview post so
115:02 - I'm being really clear about what I
115:04 - expect the function to do and I go on to
115:06 - save but instead I'm getting the
115:07 - following error and I copy and paste my
115:09 - error and then I res followed with
115:11 - please fix the errors and explain the
115:12 - fixes with code comments chat TBT
115:15 - responds with the following I have a
115:17 - couple of problems in your code here is
115:19 - the correct code but rather than
115:20 - spitting out the corrected code or
115:23 - giving me paragraphs of explanation
115:25 - about what it changed it's right here
115:27 - conveniently in the code comments let's
115:29 - have a look at this in the scrim I'll go
115:32 - ahead and delete my old code and replace
115:34 - it with the new so I know after taking a
115:37 - look at this that I forgot to call get
115:39 - element by ID as a function and I didn't
115:43 - pass anything into it I was trying to
115:45 - append the content of the card
115:47 - incorrectly and I had an error down down
115:49 - here because of the way that I was
115:52 - incorrectly calling get element by ID
115:54 - chat TPT provided an extra paragraph
115:57 - explaining what happened if you would
115:59 - like to pause and read that you're
116:00 - welcome to I actually found the code
116:02 - comments a little hard to read so I
116:05 - amended my prompt a little bit right
116:07 - after please fix the errors and explain
116:09 - the fixes with code comments I say
116:11 - comment out the old code rather than
116:13 - replacing it so I can better see how you
116:15 - fixed it gbt then responds first with a
116:19 - list of of issues that it addressed this
116:22 - is helpful for understanding the problem
116:24 - if you want to read through it but let's
116:25 - see how this amendment changed chat
116:27 - gpt's code output going to go ahead and
116:30 - replace my function again and let's
116:32 - close the console so now we have the old
116:35 - code so this was our old line of code
116:37 - and you see that we are assigning
116:45 - [Music]
116:48 - document.getelementsbytagname ID with
116:50 - parent ID as an argument so this is the
116:52 - corrected code and this way we can
116:54 - compare the old code to the new code to
116:57 - really understand what happened these
116:59 - are just a few examples of how you can
117:01 - tweak your prompts just a little bit to
117:03 - get some really incremental and helpful
117:06 - information out of chat gpt's responses
117:09 - see you in the next
117:13 - Grim AI can be so so helpful at
117:16 - performing a variety of timeconsuming
117:17 - detailed rote tasks and one of those
117:20 - tasks is code conversion let's look at a
117:22 - few examples I can give the AI an API
117:25 - call and ask it to convert it to python
117:28 - I can convert from language to language
117:30 - for example this is an API call in
117:32 - JavaScript and I'm asking chat jpt to
117:35 - convert it to Python and this is what
117:37 - that looks like I can also this is one
117:40 - of my favorites convert CSS to Tailwind
117:42 - I just have this blob of CSS as part of
117:45 - my prompt chat GPT spits out some
117:47 - Tailwind this came in really handy
117:49 - recently when I was working on a project
117:51 - the tailwind and I just wanted to make a
117:53 - small change without having to learn it
117:55 - right away real time saer I can also
117:57 - convert CSS to a styled component in
118:01 - react this is a really easy and often
118:03 - accurate conversion that I have found
118:05 - myself using a lot you can also convert
118:08 - data from one format to another so here
118:11 - I have a CSV file about sitcom from the
118:14 - 9s and I want chat GPT to convert it to
118:17 - Json note that I do have to give it some
118:19 - instructions so that the Json looks how
118:21 - I want it to so I instruct it to
118:23 - lowercase and concat the headers these
118:25 - are the headers title main actors year
118:28 - and average rating and if it is two
118:30 - words I have asked chat chbt to convert
118:32 - it to one snake cased word I've also
118:34 - requested that it convert the main
118:36 - actors's column to an array so I want an
118:39 - array of actors and I've also specified
118:41 - a type that I want for the year and
118:43 - average rating columns and note that
118:45 - this is also serving as an example of
118:47 - what I want the column names to be and
118:50 - quick as a flash I have converted the
118:51 - data to Json with the specified property
118:54 - names and types to review here are some
118:56 - of the ways that you can use AI to
118:58 - convert code from one thing to another
119:01 - you can do language to language like
119:03 - JavaScript to python file to file format
119:05 - like CSV to markdown or to Json
119:08 - framework to framework like converting a
119:11 - react component to view this can be
119:12 - really helpful if you're trying to pick
119:14 - up a new framework maybe you have a
119:15 - piece of react code that you're really
119:17 - familiar with and you want to see what
119:19 - that looks like converted to view so you
119:21 - can start to use view there's a lot of
119:23 - possibilities here and then of course my
119:25 - favorite chat gp4 in particular is a
119:28 - really great CSS converter CSS to scss
119:32 - or to SAS or to Tailwind or styled
119:34 - components again a lot of stuff you can
119:36 - do I'm sure there are a lot more ways
119:38 - that you can use this capability so keep
119:40 - this in mind as you're considering ways
119:41 - to make your development tasks
119:46 - faster here I have a little application
119:49 - that ideally when you click on this
119:51 - Blast Off button will count down from
119:52 - three and send this little rocket
119:54 - blasting off into space unfortunately
119:57 - the spaceship can't launch because it's
119:58 - programmed in jQuery and Tailwind which
120:02 - our scrim is not currently set up to
120:04 - handle so here's your task you'll want
120:07 - to prompt chat GPT to convert the jQuery
120:10 - to plain JavaScript and the Tailwind
120:12 - code in index.css to plain CSS then
120:16 - you'll click last off to see if the
120:17 - button works and if you've converted Ed
120:19 - it successfully clicking the blast up
120:21 - button should start a countdown timer
120:23 - and the rocket ship should take off when
120:25 - the countdown reaches zero go ahead and
120:27 - pause the scrim now and work on this
120:31 - challenge welcome back hopefully you
120:34 - have liftoff here was my prompt to
120:36 - convert the jQuery to plain JavaScript
120:39 - pretty simple please convert this jQuery
120:41 - to plain JavaScript and then I copied
120:44 - and pasted the jQuery code in with my
120:46 - prompt I'll go ahead and replace my
120:48 - jQuery with my converted plain
120:50 - JavaScript code we're selecting various
120:52 - elements in our HTML adding an event
120:55 - listener which starts a countdown on
120:57 - click and also calls this rocket blast
120:59 - function which uses the transform
121:01 - property to move the rocket off screen
121:04 - that looks good let's now go to our
121:05 - index.css and convert this Tailwind code
121:09 - my prompt here was also pretty
121:11 - straightforward please convert this
121:12 - Tailwind code into an external CSS
121:15 - stylesheet I'll go ahead and replace
121:17 - this Tailwind with my output from chat
121:19 - jpt so you'll see that it has styled
121:22 - everything nicely for me and now this
121:24 - should work so let's click run and the
121:27 - Blast Off button to see if this works 3
121:29 - 2 1 zero we have liftoff which means
121:32 - we've used chachy BT to successfully
121:35 - convert the code great
121:40 - work it might seem like there's not too
121:43 - much to say about documenting code with
121:45 - AI you can use chat gbt to document a
121:47 - function or other small bits of code
121:49 - simply by copying and pasting the code
121:51 - into the prompt and saying hey document
121:54 - this for example take this little
121:55 - function that creates SEO friendly slugs
121:58 - if you're not familiar a slug is a
121:59 - unique identifier for a link to a web
122:01 - page and if it's optimized for SEO it
122:04 - uses keywords and is often quite
122:06 - descriptive here is our AI generated
122:08 - documentation and as you can see this
122:10 - function takes the title of the web page
122:12 - and converts it to a slug you can see
122:15 - down here in this little example that if
122:16 - you pass it the string hello world it's
122:18 - going to return hello world with no
122:21 - capitalization and a hyphen between it
122:23 - and this would become part of a URL to
122:26 - uniquely identify the hello world page
122:28 - so with chat gbt you can request
122:30 - specific formats of documentation like
122:33 - we've requested JS Doc and so it's going
122:35 - to document the parameters that the
122:38 - function takes as well as a description
122:40 - of what it returns and its type it also
122:42 - really neatly describes everything that
122:44 - the function is doing so it converts the
122:46 - title to lowercase it trims the leading
122:48 - and trailing whites space it replaces
122:50 - symbols and other non-alpha numeric
122:52 - characters like commas or quotation
122:54 - marks with hyphens and finally it
122:56 - removes any leading or trailing hyphens
122:59 - so that is some nice thorough AI
123:01 - generated documentation another example
123:03 - of a specific format you could ask for
123:05 - documentation is prompting GPT with a
123:07 - react component and asking how do I
123:09 - document this using storybook and then
123:11 - chat GPT will provide you with some
123:14 - boilerplate code and you can start
123:16 - having a conversation with it about how
123:17 - you might do that so documentation is
123:19 - pretty much as easy as asking for it so
123:22 - Ai and language models really excel at
123:24 - helping you create all sorts of
123:26 - different types of documentation mostly
123:28 - for smaller bits of code like isolated
123:30 - functions and the like but here's a fun
123:32 - little strategy for when you have a
123:33 - longer piece of documentation you'd like
123:35 - AI to help you with I'm going to prompt
123:37 - chat gbt to interview me about my
123:39 - thoughts and opinions on style
123:41 - conventions and best practices and I'm
123:43 - going to have it use my answers to
123:44 - generate a style guide so my prompt is I
123:47 - want to create a simple JavaScript style
123:48 - guide guide ask me 10 questions about
123:50 - best practices and style conventions and
123:52 - use my answers to write a style guide
123:54 - chat gbt says great here are some
123:57 - questions it ask me 10 numbered
123:59 - questions so pretty standard stuff like
124:01 - do you prefer constant let over VAR
124:03 - should we use semicolons what maximum
124:05 - line length do you prefer single quotes
124:08 - double quotes the dreaded tabs or spaces
124:11 - debate Arrow functions and so on so the
124:13 - way I'm going to answer this is I'm
124:15 - going to create my own list from 1
124:16 - through 10 and answer each and notice
124:19 - that there are places in my answer where
124:21 - I defer to the wisdom of others so for
124:24 - questions five and six I say use
124:26 - whatever is in GitHub style guide and
124:28 - for number nine which is what is your
124:30 - position on trailing commas and objects
124:32 - and array literals I'm just going to say
124:35 - go ahead and use whatever is in Google
124:37 - style guide keeping in mind that this
124:38 - will be information from chat gbt's cut
124:41 - off in 2021 it is pretty cool though
124:44 - that I'm able to pull in other sources
124:46 - here to create my own style guide here
124:49 - is the response to my answers it's my
124:51 - own little style guide and now that I
124:53 - have this file I could ask chat jpt to
124:55 - convert it to markdown or something so
124:57 - that I could put it on GitHub although
124:58 - fair warning it doesn't do markdown
125:00 - perfectly because the response text is
125:03 - already formatting and that tends to
125:04 - cause issues but the point is that in
125:06 - just a few minutes I've generated at
125:08 - least a starter document for a project
125:10 - that most likely would have taken me
125:12 - much longer if I were doing it manually
125:14 - or maybe if I worked for a small team at
125:16 - a busy startup I may not have ever done
125:18 - documented anything at all as a
125:20 - developer I've spent probably years of
125:22 - my life pouring over code that is
125:24 - minimally documented or not documented
125:26 - at all so let's all keep this tool in
125:28 - mind and put those days behind us happy
125:34 - documenting AI can be a really powerful
125:37 - tool for learning in a personalized and
125:39 - interactive way in this scrim we'll talk
125:41 - over a few quick tips on how to use a
125:43 - language model like chat GPT to learn a
125:46 - new topic or technology as well as
125:48 - create highly tailored learning
125:50 - experiences so for example you can use
125:52 - chat TBT to summarize and explain info
125:54 - in a variety of ways find learning
125:56 - resources create a study guide Andor a
125:59 - study schedule and also to test yourself
126:01 - so let's go over these one by one and
126:03 - look at some examples as far as
126:05 - explanations and summaries go my advice
126:08 - is to start broad by asking chat gbt
126:11 - about a general topic then drilling down
126:13 - into more and more detail as you're
126:14 - exploring a topic you can instruct chat
126:16 - GPC to summarize information and provide
126:19 - explanations by specific Audience by
126:21 - specific experience or skill level or by
126:24 - asking for metaphors and specific
126:26 - examples so let's say I've been studying
126:28 - JavaScript and I'm ready to tackle more
126:30 - advanced topics I can prompt something
126:32 - like please suggest four Advanced
126:34 - JavaScript topics that every junior or
126:36 - intermediate developer should study the
126:38 - result is a long list of advanced
126:40 - JavaScript topics that I can study like
126:43 - asynchronous programming Advanced Dom
126:45 - manipulation design patterns functional
126:47 - programming whole bunch of stuff so I'm
126:49 - going to go ahead and pick one let's
126:51 - concentrate on async programming here in
126:53 - the explanatory paragraph it says
126:55 - familiarize yourself with Concepts like
126:57 - callbacks promises and async aake so
126:59 - I'll just start with please tell me more
127:01 - about callbacks explain the concept as
127:03 - if I'm a beginner and include a code
127:05 - sample so I'm requesting a specific
127:07 - audience and a specific example we get a
127:10 - nice explanation of callbacks that is
127:13 - relatively simple and jargon free along
127:16 - with a couple of simple examples let's
127:18 - say I read through this explanation and
127:20 - I still don't quite grasp it I can ask
127:22 - chat TBT to use a metaphor or provide
127:25 - use cases I still don't quite understand
127:27 - can you explain callbacks using a
127:29 - metaphor and can you provide a couple
127:31 - more use cases the AI comes up with this
127:34 - metaphor of a waiter in a restaurant
127:36 - being like a callback you can go ahead
127:39 - and pause the scrim if you'd like to
127:41 - read through this and then it gives us a
127:43 - couple more examples like reading a file
127:46 - asynchronously and making an a API call
127:49 - but what if I really really still don't
127:51 - quite understand or more realistically
127:53 - what if I want to start with a shortest
127:55 - most simplified conceptual explanation
127:57 - that I could get one strategy is to ask
128:00 - chat TBT to explain something to you
128:02 - like your five which is a really popular
128:04 - thing to do on Reddit there's a whole
128:05 - subreddit called explain to me like I'm
128:07 - five so I'll prompt please explain
128:09 - JavaScript call back functions to me as
128:11 - if I am 5 years old AI comes up with
128:14 - this example about you're a kid playing
128:17 - with your toys you can can go ahead and
128:18 - pause if you'd like to read through it
128:20 - another helpful strategy is to ask for
128:22 - an explanation based on a specific
128:24 - audience or skill level or Persona or
128:26 - all three as in this example you are a
128:28 - senior engineer and I am a junior
128:30 - engineer please explain JavaScript
128:31 - promises to me in detail so you'll
128:33 - notice that if you pause and read
128:35 - through this example the result is a
128:38 - quite long and detailed explanation of
128:41 - promises that is more Technical and
128:44 - detailed than than the explanations that
128:46 - we've gotten so far because we've been
128:48 - really specific about our skill level
128:51 - and the skill level of the Persona that
128:53 - we want to have explain the concept to
128:55 - us this prompting strategy can be really
128:57 - helpful for learning especially if
128:59 - you're a person like me who needs a
129:00 - variety of different explanations to
129:02 - really grasp a new subject finally you
129:04 - can ask for explanations using very
129:06 - specific examples so say I want to learn
129:08 - more about JavaScript classes but I
129:10 - don't want to look at another Fubar or
129:13 - car example because they're so common so
129:15 - I can prompt the AI explain JavaScript
129:17 - classes to me using an example class
129:20 - called pet then I can get an explanation
129:22 - that gives me a pet example or if I want
129:24 - to have even more fun I can say explain
129:26 - using mythical creatures like dragons
129:28 - and unicorns and chat GPT explains
129:31 - classes to me using this mythical
129:33 - creature class where we create dragons
129:35 - and unicorns named Smog and Twilight
129:38 - just a way to keep it fun especially if
129:40 - you're not a big fan of arbitrary Fubar
129:43 - examples so that's it for this scrim
129:45 - we've talked about how to learn with AI
129:47 - by exploring broad topics and drilling
129:50 - down asking for summaries and to explain
129:52 - info in a variety of ways now join me in
129:55 - the next Grim to discover more ways to
129:57 - learn with chat gbt including how to
129:59 - find learning resources create study
130:01 - guides and test your
130:06 - knowledge welcome back we've talked
130:08 - about strategies for getting info from
130:10 - chat GPT in a more personalized and
130:12 - tailored way now let's talk about a few
130:14 - more ways that you can use chat GPT for
130:16 - learning this includes finding Learning
130:17 - Resource creating a study guide or a
130:19 - study schedule or using the AI to test
130:22 - your knowledge you can use AI to find
130:23 - articles blogs YouTube videos and whole
130:26 - platforms like scrimba for example just
130:28 - about anything you're interested in
130:30 - learning so for example I could prompt
130:32 - something like list five great articles
130:34 - I can read to understand dynamic
130:35 - programming this can be any number of
130:37 - Articles and any topic another thing you
130:40 - could do is prompt for articles that are
130:42 - targeted towards beginner or
130:43 - intermediate or Advanced Learners on a
130:46 - certain topic so asking for articles
130:48 - will yield not only the links but short
130:50 - summaries of the Articles which can come
130:52 - in very handy and it's not necessarily
130:54 - something that you could get from
130:55 - Googling or I could ask for YouTube
130:57 - videos or Forum posts or book
131:00 - recommendations and again get a list
131:02 - with some links I could also ask for a
131:04 - mix of videos Forum posts blogs
131:07 - basically whatever I want you could
131:08 - argue that this is a lot like Googling
131:11 - but I think first of all it's nice to
131:12 - have all this information in one place
131:15 - and I think it's a little easier to
131:16 - tailor your list of learning mat
131:18 - materials to your specific needs and
131:20 - skill level without having to do a ton
131:22 - of searching AI can also help you
131:24 - structure your learning for example I
131:26 - can use it to create a study guide or a
131:28 - schedule so here I'm prompting write me
131:30 - a study guide on typescript including
131:32 - outside resources for further study
131:34 - assume I already have a strong grasp of
131:37 - JavaScript so I'm requesting a topic I'm
131:39 - providing more information about the
131:41 - kinds of information that I want and I'm
131:44 - specifying a certain skill level or a
131:46 - certain level of knowledge and it gives
131:48 - me this beautifully formatted study
131:51 - guide for typescript that is broken down
131:53 - by topic and subtopic we also have some
131:56 - Advanced topics learning typescript with
131:58 - framework some books additional tips and
132:01 - so on pretty useful I can then follow up
132:03 - this prompt with something like based on
132:04 - the study guide please create a study
132:06 - schedule for me assume I want to spend
132:08 - about 10 hours a week studying the topic
132:10 - for each study session include the
132:12 - topics I should study along with
132:13 - additional resources and practice
132:16 - exercises and this gives me a really
132:18 - really nice study plan broken down by
132:20 - week and by session and also links to
132:23 - resources where I can read about these
132:25 - suggested topics so this could come in
132:27 - really handy if you need to learn a new
132:29 - subject and you're not sure where to
132:31 - begin this probably isn't going to
132:32 - replace a curated course or even a
132:35 - really good YouTube video but it is a
132:37 - place to start if you just need a little
132:39 - bit of structure to your study now I
132:41 - have a warning as you are seeking
132:43 - resources from chat GPT or really any
132:45 - other language model keep in mind that
132:48 - that asking for resources there's
132:50 - definitely a danger of the AI
132:52 - hallucinating giving incorrect info
132:55 - outdated sources especially in the case
132:57 - of chat GPT because as we have discussed
133:00 - at the time of this recording it only
133:02 - has access to information from November
133:05 - 2021 and nothing after that there's also
133:08 - a danger again of hallucinating and
133:10 - completely making up non-existent
133:13 - sources so just keep in mind that this
133:15 - strategy is a good place to start but
133:17 - right now ai model are often too wrong
133:19 - too unpredictable and too outdated to be
133:21 - anything but a supplementary learning
133:24 - tool so always take the time to fact
133:25 - check and seek out multiple sources now
133:28 - let's go to our final way to learn and
133:30 - that is testing yourself so this is as
133:32 - simple as prompting something like I've
133:34 - been studying typescript generics quiz
133:36 - me on my knowledge all we need is a
133:39 - specific topic and a request for a quiz
133:42 - chat gbt does exactly that I could also
133:45 - say something like give me five small
133:46 - coding problems to practice practice and
133:48 - test my knowledge of some topics such as
133:51 - higher order functions in JavaScript and
133:53 - it generates some map filter and reduce
133:56 - problems that we could use for practice
133:59 - so in the last couple of scrims we've
134:01 - talked about the various ways that you
134:02 - can use AI to study web development
134:05 - including strategies to get more
134:07 - specific and tailored responses ways to
134:09 - create learning schedules finding
134:11 - resources using AI to help you structure
134:14 - your learning and testing your knowledge
134:16 - I hope you found this useful and see you
134:18 - in the next
134:21 - scrim time for a bit of review and
134:24 - practice we've just talked about how you
134:26 - can use chat GPT to study web
134:28 - development and here's some of the stuff
134:30 - we covered you can start with a broad
134:31 - topic and narrow it down you can request
134:34 - explanations based on a specific
134:36 - audience skill level or experience level
134:39 - you can request specific examples to
134:41 - help you better understand Concepts you
134:43 - can request learning resources like
134:46 - YouTube videos and articles and finally
134:48 - you can generate study plans and
134:50 - practice questions here's a quick
134:52 - opportunity for practice I won't be
134:54 - going over the solution for this because
134:56 - it's going to be very particular to you
134:58 - but what I'd like you to do is first ask
135:00 - chat TBT to quiz you on your react
135:03 - knowledge based on your skill level keep
135:05 - going with your quiz until chat GPT asks
135:08 - you a question that you're not sure
135:09 - about or don't know then go ahead and
135:11 - use the steps above to learn more about
135:13 - that topic until you feel confident
135:15 - giving an answer chat GPT is a really
135:17 - great tool for learning so I do hope
135:19 - that you tried this out and I hope you
135:21 - find it very
135:25 - educational a big part of front-end
135:27 - development is learning and interacting
135:29 - with a variety of restful apis and using
135:31 - AI language models is a fun and
135:33 - interactive way to explore the
135:35 - possibilities as I walk you through an
135:36 - example of how to explore apis and
135:38 - generate API calls we're going to switch
135:40 - it up a little bit and use bar which is
135:42 - Google's interactive AI to go to Bard
135:44 - and try it out yourself you can go ahead
135:46 - and click on this image and it will take
135:48 - you right to the site so your first
135:50 - question might be what is the difference
135:52 - between Bard and chat GPT and when might
135:55 - I use one versus the other so here are
135:57 - some key differences at the time of this
135:59 - recording Chad gpt's training data in
136:02 - other words all the information that it
136:03 - has access to stops in late 2021 in
136:06 - other words anything that's happened
136:08 - since then chat jpt has no idea about B
136:11 - on the other hand has access to
136:13 - upto-date and current information it's
136:15 - also said to excel at simplifying
136:17 - information and being conversational
136:19 - there are a ton of chat GPT versus B
136:22 - articles out there so I'll let you make
136:24 - your own decision about that but what we
136:27 - do know is that Bard has access to
136:29 - up-to-date current information so it's
136:31 - great to use when you need to find out
136:33 - information that's timely for example I
136:36 - can ask it what's the most popular
136:37 - front-end framework today and it
136:39 - responds with as of June 2023 and that
136:42 - is the year and month that I'm recording
136:44 - this scrim the most popular front-end
136:46 - framework is reactjs and then it goes on
136:48 - to give us a bunch more relevant
136:50 - information for this reason Bard can be
136:52 - a great tool to explore API
136:54 - documentation because it's changing all
136:56 - the time and we want to make sure we
136:57 - have the most updated information I
136:59 - unfortunately learned this the hard way
137:01 - by trying to ask chat GPT questions
137:04 - about open AIS apis it gave me outdated
137:07 - information and I ended up spending a
137:09 - ton of time debugging so all that said
137:11 - let's use Bard to explore the GitHub API
137:14 - starting off here's an important tip
137:16 - when you're using Bard you'll get the
137:17 - best results if you're very direct about
137:19 - telling it exactly what you'd like it to
137:21 - do so I started off by prompting I want
137:23 - to explore the GitHub API what are 10
137:26 - end points I can access and Bard
137:28 - responds I'm not able to help with that
137:30 - as I'm only a language model I think
137:32 - maybe what hangs it up is the fact that
137:34 - I sort of asked if I can access 10 end
137:37 - points so so I'll revise my prompt a
137:39 - little bit and say please help me
137:41 - explore the GitHub API list five
137:43 - available endpoints and what information
137:45 - I can get from those endpoints and as
137:47 - you can see this time Bard is able to
137:49 - provide me with the list of endpoints to
137:51 - get information about repos issues poll
137:54 - requests commits and branches and also
137:56 - list what I can do with him so the
137:58 - repost endpoint is useful for finding
137:59 - out what projects a user is working on
138:02 - issues can be useful for tracking the
138:04 - progress of a project and finding out
138:05 - about any bugs or problems and so on so
138:08 - now that I have an idea of what I can do
138:10 - let's say that I want to get some issues
138:12 - from a specific repo I'll ask Bard
138:14 - please write an example API call showing
138:16 - how to retrieve issues from the core
138:18 - react repository then I'm going to
138:20 - specify that I want to use fetch because
138:22 - it does tend towards using the axios
138:25 - library B generates me an example API
138:27 - call so let's paste it into the scrim
138:30 - and see how it works so it's given me
138:31 - the URL to Facebooks react repo set up
138:35 - my fetch options gotten the response for
138:37 - me as Json and then it says I can do
138:39 - something with the issues so for now
138:42 - let's just console log the issues see if
138:45 - this works I'll run and open the console
138:47 - and the response is a bunch of issues
138:49 - from the react code base Bard goes on to
138:51 - say here's an example of how the issues
138:53 - object can be used to display a list of
138:55 - issues so here is some sample code that
138:58 - if I create a UL class called issues
139:01 - list then I can Loop through each issue
139:04 - create an Li element get the title of
139:06 - the issue and append it to my UL so
139:09 - let's do that I'll get rid of my console
139:11 - log and replace it with some code to
139:14 - create a list then I'll make sure to
139:16 - grab this issues list that we're trying
139:18 - to append list items to and in the body
139:21 - I will create a UL with the class of
139:23 - issues list let run and open up the mini
139:27 - browser and in just a couple of seconds
139:30 - we have written an API call to retrieve
139:33 - a list of issues from the react codebase
139:35 - and display them pretty cool I can
139:37 - continue to explore the API by asking
139:40 - for different information from a
139:41 - different repo so I'm going to say Show
139:43 - an example of how to request the star
139:45 - count of a repository from the GitHub
139:47 - API use free code Camp's main repository
139:50 - as an example and also use fetch this
139:52 - gives me an example API call for how to
139:54 - get the star count of any repository
139:57 - that I want but also a specific
139:58 - repository to test this out so let's do
140:01 - that I'll go back to index.js and I'm
140:03 - going to comment out my first API call
140:06 - and we'll paste the new one in here and
140:09 - run go ahead and minimize this and we'll
140:11 - open up the console and it looks like
140:13 - free code Camp has
140:15 - 368,000 stars impressive so now that
140:18 - I've explored the API a little bit I can
140:21 - start getting more specific and more
140:23 - complex about what I would like from the
140:26 - GitHub API so this time I'll prompt I
140:28 - would like to build a tool that
140:29 - interacts with the GitHub API where I
140:31 - can send a search term and get back the
140:33 - name star count and URL of the top five
140:37 - matching repositories with the most
140:39 - stars can you give me an example API
140:41 - call using JavaScript and the fetch API
140:44 - C gives me an example function that
140:46 - takes in as search term uses the GitHub
140:49 - api's search feature to search the
140:51 - repositories for my term then grabs the
140:54 - first five and gets all the information
140:56 - from it and console logs it so let's try
140:59 - out this code I'll comment this out
141:02 - paste the new code and then I'm going to
141:03 - need to call my function with a search
141:06 - term which I'll do down here call this
141:08 - with the search term react run and open
141:11 - the console back up again and we get
141:13 - five repository names star counts and
141:16 - URLs I do think we have a little bug
141:18 - here I don't think that this is the top
141:20 - five with the most stars I think this
141:23 - might be the first five that the API
141:25 - returned but this is a good lesson in
141:27 - staying Vigilant paying attention to
141:29 - what the code is doing and making sure
141:31 - that you know how it works and that it's
141:33 - doing what you expect that is how you
141:35 - can use a language model to start
141:37 - exploring an API as you can see it's not
141:40 - necessarily a good replacement for
141:42 - reading the documentation but it is a
141:44 - fun and interactive way to get to know a
141:47 - new API and start using it right away
141:49 - have fun seeing what you can do with
141:51 - Bard and the GitHub API and I will see
141:54 - you in the next
141:57 - scrim hello again in my last traditional
142:00 - software engineering role I had a
142:02 - wonderful co-worker who I could go to
142:04 - with all of my questions about git and
142:07 - GitHub and that was great for me because
142:08 - Version Control can get so complex lucky
142:12 - for us now everyone can have a Version
142:14 - Control expert right at their fingertips
142:16 - and of course that expert is chat jpt
142:18 - let's look at a few examples of how chat
142:20 - jpt can be a huge help with Git and
142:22 - GitHub you can ask it to remind you of
142:24 - everyday commands like what's the get
142:26 - command to create a new Branch you can
142:28 - lowkey ask it to explain Version Control
142:30 - Concepts to you with prompts like my
142:32 - tech lead has ask me to rebase my Branch
142:34 - but I don't know what that means can you
142:36 - explain chat gbt without judgment will
142:38 - say certainly and explain rebasing in as
142:41 - fine a detail as you require you can ask
142:43 - questions about using Version Control
142:44 - with specific Technologies like how do I
142:46 - resolve merge conflicts using vs code
142:49 - and again it'll give you step-by-step
142:50 - instructions for how to do that you can
142:52 - ask it to help you problem solve
142:54 - specific scenarios such as I want to
142:56 - open a pull request but I only want
142:58 - certain commits to be a part of this
142:59 - pull request what can I do you can get
143:02 - as detailed and specific as you want and
143:05 - chat GPT is still going to help you out
143:06 - so this prompt is very very specific to
143:09 - my situation I say give me a stepbystep
143:11 - guide to submitting a PR for an
143:13 - open-source project I've cloned the repo
143:15 - locally my branch is called blah blah
143:17 - blah fix broken link and I want to PR
143:19 - into the main branch of a project called
143:21 - super awesome project as you can see
143:23 - down here it's giving us some commands
143:26 - that are personalized to the information
143:28 - that we gave it very very handy also
143:30 - notice that we have a very detailed
143:32 - step-by-step guide here that'll walk you
143:34 - through it in much more detail than
143:36 - maybe even a coworker would this can
143:38 - make once intimidating tasks like trying
143:40 - to contribute to an open- source project
143:43 - that much less intimidating can also
143:45 - help you write pull requests if you're
143:46 - work workplace or the project that
143:48 - you're working on doesn't already have a
143:50 - process for how they want pull requests
143:52 - to be written I find this to be a really
143:53 - helpful prompt ask me questions about my
143:55 - PR and use my answers to generate a PR
143:58 - description it then generates six
144:00 - answers what's the purpose of your poll
144:01 - request what issue or feature does it
144:03 - address what specific changes did you
144:05 - make are there any important
144:07 - considerations or instructions for
144:08 - reviewers have you tested your changes
144:10 - and do you have any additional comments
144:12 - or information that would be helpful for
144:13 - the reviewers so I answer each question
144:15 - one by one and enter that as a prompt
144:18 - and here is a full pull request
144:19 - description in just a couple of minutes
144:21 - it's a super timesaver so next time you
144:23 - have a question about Version Control
144:25 - git or GitHub keep chat GPT in mind see
144:28 - you
144:31 - later so you finished an amazing project
144:33 - and now you need to figure out how
144:35 - you're going to get it up on the
144:36 - internet this is another area where
144:37 - language models can be extremely helpful
144:40 - deploying is an area where the
144:41 - information tends to change quite a bit
144:43 - so we're going to use Bard for this
144:45 - scrim to make sure that we have the most
144:47 - most updated information on how to
144:49 - deploy let's say that I'm not even sure
144:51 - at first where I want to deploy my
144:53 - project or what I can even use so I'm
144:55 - going to start with the prompt list five
144:57 - Services I can use to deploy a front-end
144:59 - project we get back five suggestions
145:01 - here netlify versell Cloud flare Pages
145:04 - GitHub pages and
145:06 - surge.sh let's say I read all of these
145:09 - and the ones that I'm most curious about
145:11 - our versell and GitHub pages I can then
145:13 - dig down a little deeper with the prompt
145:15 - what are the benefits of deploying an
145:16 - application on forell versus GitHub
145:18 - pages so we can see quickly that forsell
145:20 - has automatic deployments free SSL Sears
145:23 - performance and integration things where
145:26 - GitHub Pages has free hosting a simple
145:28 - setup and integration with GitHub which
145:30 - makes it easy to manage the website from
145:33 - within GitHub it then goes on to even
145:34 - create a helpful table comparing the two
145:37 - so once I've made my decision let's say
145:39 - I want to keep it simple and I want to
145:40 - use GitHub Pages now I can drill down
145:42 - even further with the prompt please give
145:44 - me a step-by-step guide on how to deploy
145:46 - my project with GitHub pages so we get a
145:48 - full step-by-step breakdown with some
145:50 - additional details about each step so I
145:53 - read through this I get a little bit
145:54 - familiar with deploying to GitHub pages
145:57 - and now I'm asking myself well what if I
145:58 - have a react project so I can ask for
146:00 - more information my prompt is is there
146:02 - anything special I need to do to deploy
146:04 - to GitHub Pages a react project versus
146:07 - an HTML CSS JS project and Bard says yes
146:11 - there are some things that you need to
146:12 - do like building your files configuring
146:15 - GitHub in a certain way EX ET so you can
146:17 - start to see how you can use a language
146:19 - model to get the sort of information
146:21 - that you're looking for from here I
146:22 - could ask the language model to tell me
146:24 - more about what a build process is or
146:26 - more about how to configure or really
146:28 - anything that I'm curious about I'm just
146:29 - going to keep asking questions and
146:31 - that's how I can sort of run my own
146:33 - investigation about the specific tasks
146:36 - that I'm trying to accomplish because
146:37 - Bard has access to the internet and more
146:40 - updated information it's also good for
146:42 - asking about specific services so say I
146:45 - have an old Heroku project and I know
146:47 - that I had at one point deployed it
146:50 - using the CLI but I can't quite remember
146:52 - how it works and this is definitely a
146:54 - true story something that's happened to
146:56 - me before so I could say something like
146:57 - list some commands I can use to interact
146:59 - with the Heroku CLI to deploy a project
147:02 - and it'll remind me of all the things I
147:03 - can do very handy I can also ask it for
147:06 - advice on comparing different deployment
147:08 - services like for example should I use
147:10 - netlify drop or netlify continuous
147:12 - deployment it explains what those two
147:14 - things are provides a table that
147:15 - compares them along with some advice
147:17 - about some additional things to consider
147:19 - when I make my choice so let's say I
147:21 - choose continuous deployment with Neto I
147:23 - can then ask how do I set that up and
147:25 - again it'll give me some really handy
147:27 - step-by-step instructions I'd like to
147:30 - point out here too that you can use this
147:31 - technique not just for deployment but
147:33 - for anything that you're unfamiliar with
147:35 - the idea is to start Broad and drill
147:38 - down into specific subjects as your
147:40 - needs require happy deploying I'll see
147:42 - you in the next
147:45 - grim
147:47 - let's talk about an important skill when
147:48 - using AI to assist with your coding and
147:51 - that is knowing when to stop AI tools
147:53 - like chat TBT can be a huge help but
147:55 - there comes a certain point where they
147:56 - can start getting in the way and
147:58 - becoming really frustrating let's go
148:00 - over a few examples number one when you
148:02 - aren't getting the results you want
148:03 - after several iterations if you f- tuned
148:06 - to prompt several times and simply
148:07 - aren't getting the results you're aiming
148:09 - for it might be time to take a step back
148:11 - number two this is a big one when you no
148:13 - longer understand the code if you're
148:15 - finding that the code generat by AI is
148:17 - so complex or convoluted that you're
148:19 - struggling to understand it that is a
148:21 - really good signal to pause related to
148:24 - this is being caught in a cycle of what
148:27 - I like to call copy paste and prey this
148:29 - is the term I use to describe the
148:31 - following scenario you've had the AI
148:33 - generate code for you and the code has
148:35 - some errors you've asked AI about the
148:37 - errors and the AI spits out more code
148:39 - and that new code may or may not have
148:41 - fixed the original error but has
148:43 - introduced a new error so you ask it to
148:45 - fix that error and before before you
148:46 - know it you're copying and pasting big
148:48 - swatches of code into the AI without a
148:50 - solid understanding of what the code is
148:52 - doing a really good sign of this is if
148:54 - the AI is saying things like apologies
148:56 - for the misunderstanding or I see the
148:58 - problem now over and over again but it's
149:00 - not actually helping you move forward
149:02 - this is why I can't stress enough it's
149:04 - really important to take the time to
149:06 - read and understand what any code you
149:08 - generate with AI is doing it's really
149:10 - easy to get trapped in this Loop another
149:13 - time it might be time to step back from
149:14 - AI is when the AI seem seems dumber than
149:17 - usual sometimes for reasons I can't
149:19 - explain an AI language model will just
149:21 - seem off the answers might be off base
149:24 - verbose or less coherent than usual or
149:27 - just missing the mark and this could be
149:28 - due to many reasons including the way
149:31 - that you're phrasing your prompts or
149:33 - some underlying issue with the AI when
149:35 - this happens best give it a break and
149:37 - lastly when the AI seems forgetful AI
149:40 - models like chat tobt don't have a
149:42 - memory in the same way humans do so if
149:44 - you notice the AI seems to be forgetting
149:46 - the cont text of your interaction or not
149:48 - following the logical sequence of a
149:50 - conversation it might be time to prompt
149:52 - with reminders or the specific code that
149:54 - you're working for or asking for
149:56 - step-by-step instructions so remember
149:58 - that AI is a tool not a replacement for
150:00 - your own understanding and problem
150:02 - solving skills take the time to read
150:04 - your code and know when it's time to
150:06 - take over as a human being and stop
150:08 - relying on the AI for
150:13 - help well done for finishing the second
150:15 - of three for this prompt engineering
150:18 - course we've covered a lot of ideas and
150:19 - strategies for how to use AI language
150:21 - models in Daily coding tasks to free up
150:24 - time and improve your productivity we've
150:26 - learned that you can use AI to
150:27 - accomplish a huge number of tasks to
150:29 - generate project ideas plan projects
150:31 - write user stories and jur tickets
150:33 - generate code and code Snippets generate
150:35 - mock data debug get refactor suggestions
150:38 - convert code from one format to another
150:41 - write tests and documentation and learn
150:43 - new technologies and advanced topics
150:45 - faster in the the next and final section
150:47 - of this course we'll talk about how to
150:49 - use AI to make job searching a little
150:51 - easier great work so far and I'll see
150:53 - you in the next
150:56 - section hello again this next section of
150:59 - the course covers a variety of tips and
151:01 - strategies for leveraging AI during a
151:03 - job search we're going to cover ways to
151:05 - generate learn and practice common DS
151:08 - and algo problems use role-based
151:10 - prompting to simulate a live coding
151:12 - interview generate and practice
151:14 - behavioral interview questions and write
151:16 - and personalized job docs such as
151:18 - resumés cover letters and elevator
151:20 - speeches come with me to learn how to
151:22 - use AI to tailor your resume talk
151:24 - yourself up and interview like a
151:28 - champ the live coding interview is
151:31 - arguably one of the most intimidating
151:33 - aspects of becoming a developer in these
151:35 - interviews you have a limited amount of
151:36 - time to solve an algorithmic coding
151:38 - challenge while sharing your thought
151:40 - process allowed in front of another
151:41 - developer for the next few scrims we're
151:43 - going to talk about how AI can help
151:45 - beginners learn learn about solve and
151:47 - optimize easy level lead code style
151:50 - algorithmic coding challenges as well as
151:52 - help you practice and improve Live code
151:54 - interviewing skills before we start I
151:56 - have a couple of small disclaimers first
151:59 - of all these strategies work much better
152:01 - with chat gp4 and Beyond I've noticed
152:04 - that version 3.5 and below is much more
152:07 - prone to Broad unhelpful or verbose
152:10 - answers or misunderstanding what you
152:12 - want it to do or simply giving you the
152:14 - solution even if you specifically ask it
152:16 - not to so if you can and you want to
152:18 - follow along with me I recommend using
152:21 - chat GPT 4 or newer my second disclaimer
152:24 - is that these strategies are also best
152:26 - for easy and maybe some medium level
152:28 - lead code questions even for the newer
152:31 - versions of the language models the more
152:33 - complex the problem the more likely AI
152:35 - is to make mistakes and get things wrong
152:37 - if you're a relative beginner at leak
152:39 - code style challenges then this scrim is
152:41 - for you so if your desire is to get
152:44 - better at data structure and algorithm
152:47 - problems here are all the ways that you
152:49 - can use chat GPT to learn and improve
152:52 - firstly yes chat GPT can just solve a
152:55 - challenge for you directly you can
152:56 - definitely just dump an algorithmic
152:58 - coding challenge in chat gbt and it will
153:00 - solve it for you at least most of the
153:02 - easy and medium challenges but it's my
153:05 - opinion that learning DS and algo
153:07 - problems with AI is best done
153:09 - iteratively and incrementally so you can
153:12 - use AI to generate code challenges
153:14 - generate pseudo code or step-by-step
153:16 - instructions for how to solve the code
153:18 - challenges you can learn about and
153:19 - analyze sample Solutions and one of the
153:21 - most helpful things in my opinion you
153:23 - can use it to study common patterns for
153:26 - solving algo problems more about that
153:28 - later let's start by asking chat gbt to
153:31 - generate some algo problems for us so my
153:33 - prompt is going to be give me three easy
153:35 - level algorithmic coding interview
153:37 - problems chat GPT suggests these three
153:40 - problems the two sum problem reversing a
153:42 - string and palindrome number I'm going
153:44 - to choose the two sum problem as an
153:46 - example because it is fairly common and
153:49 - it's one of the first problems that
153:50 - you'll run into when you're studying
153:52 - leak code style problems now because our
153:54 - goal for this course is much more about
153:56 - learning how to use AI to solve algo
153:58 - problems and not learning about any
154:00 - specific problem I'm not going to go
154:02 - into too much detail about what the
154:04 - tuome problem is and how it works and
154:06 - how you solve it but I do have
154:08 - suggestions for how you can use AI to to
154:10 - start to learn and familiarize yourself
154:12 - with these types of problems first I
154:14 - prompt chat GPT for a short short
154:16 - explanation explain the goal and
154:18 - solution of the two suum problem to a
154:19 - beginner in 150 words or less if this is
154:22 - a really new subject for you I would
154:24 - recommend that you pause the video here
154:26 - and read through this so go ahead and do
154:28 - that now if you need to but here's the
154:30 - gist two sum is an exercise where you
154:32 - look at an array of numbers and you want
154:34 - to find a pair of numbers that adds up
154:36 - to a Target so in this example our
154:38 - Target is nine so we would want to write
154:41 - a function that looks at all of the
154:42 - numbers in the array and figures out if
154:45 - they add up to nine this is easy to do
154:47 - by site with a small array 7 + 2 is 9
154:50 - and you'll notice that part of the
154:51 - problem is to find the indices of the
154:53 - two numbers so the index of two is zero
154:56 - and the index of seven is one so we
154:58 - would want to write a function that
155:00 - returns 01 the index of the two numbers
155:03 - that add up to the Target to understand
155:06 - this problem further I could ask the AI
155:08 - to generate an explanation in a variety
155:10 - of tones or ask it specifically to use
155:13 - example and metaphor so I could write a
155:15 - prompt like please explain the twosome
155:17 - problem succinctly using a metaphor It
155:19 - won't always come up with a great
155:21 - metaphor this one is a little iffy but
155:23 - it's basically uses the metaphor of
155:26 - trying to find two items at a yard sale
155:28 - that add up to exactly the amount of
155:30 - money that you have if you're the type
155:32 - of person who learns best from real
155:34 - world examples you could also prompt
155:35 - something like please explain the toome
155:37 - problem using a real world scenario so
155:40 - it says imagine you're at a supermarket
155:41 - doing your grocery shopping you're
155:43 - trying to stick to a budget and you only
155:44 - want to buy two items for dinner you
155:46 - have $15 and your task is to find
155:49 - exactly two items that add up to $15 of
155:52 - course in real life it might be okay if
155:55 - you went to the grocery store and only
155:56 - spent
155:58 - $14.97 but sometimes putting these types
156:00 - of problems that can feel a little
156:02 - arbitrary into a more real world
156:04 - scenario can help you with your
156:06 - understanding so definitely something
156:07 - that is worth giving a try so after you
156:10 - have taken some time to understand a
156:12 - certain leak code problem you can also
156:14 - use the AI to start figuring out how to
156:17 - solve it one of my favorite ways to do
156:19 - that is to ask for pseudo code pseudo
156:21 - code can mean step-by-step instructions
156:23 - for how to solve a problem or it could
156:25 - be as detailed as something that looks
156:27 - like code but doesn't quite have the
156:30 - syntax of an actual programming language
156:32 - and I'm going to show you an example of
156:33 - both so my prompt is give me pseudo code
156:35 - that will help me solve the following
156:37 - algorithmic coding problem that I'm
156:39 - going to include as part of my prompt
156:40 - the problem statement for the tuome
156:42 - problem I'm going to ask that chat GPT
156:44 - assume that I will use JV JavaScript to
156:46 - solve it and I'm going to explicitly
156:48 - state that it should not give away the
156:50 - answer this can be unpredictable
156:52 - sometimes it will do it anyway
156:53 - especially if it is chat GPT version 3.5
156:57 - or below chat GPT responds with nice
157:00 - step-by-step instructions for how I can
157:03 - solve this problem and if you'd like to
157:05 - read through the pseudo code I have
157:07 - included it in this Tu sum MD file so I
157:10 - can ask for pseudo code or I could ask
157:12 - the AI to generate and explain to me a
157:14 - variety of different Solutions so for
157:17 - example I could prompt walk me through a
157:19 - Brute Force solution and an optimized
157:21 - solution to the two sum problem a Brute
157:23 - Force solution is a solution that works
157:26 - but might take up a lot of computing
157:27 - space or take a long time to finish its
157:29 - process in other words it's a less
157:31 - efficient way to solve coding problem
157:34 - this prompt is going to result in an
157:36 - explanation of the Brute Force solution
157:39 - of the two sum problem as well as some
157:41 - more minimalist pseudo code your results
157:44 - will of course vary on this but but in
157:46 - general you should get an explanation of
157:48 - the approach as well as some sample code
157:50 - and I should mention here that I got a
157:52 - little bit lucky because I didn't
157:54 - explicitly request pseudo code because I
157:57 - wrote this prompt just a couple of steps
158:00 - after I had told chat gbt not to give
158:02 - away the answer but it probably would
158:04 - have been a stronger prompt to
158:06 - specifically state that I wanted a
158:08 - pseudo code brute force and optimized
158:10 - solution so along with the Brute Force
158:12 - solution it provides an optimized
158:14 - solution and some code and if you'd like
158:16 - to take a closer look at that I've also
158:18 - included it in the two sum MD file yet
158:22 - another way to start to understand how
158:23 - to solve aite code problem is to prompt
158:26 - for a solution in your language of
158:28 - choice with a line byline explanation of
158:30 - how it works so my prompt is generate a
158:32 - JavaScript solution to the tuome problem
158:35 - and explain line by line in code
158:37 - comments how it works and then I can
158:38 - look at a solution with some comments
158:41 - that will explain to me exactly what
158:43 - it's doing now some of you might be
158:45 - saying but treasure isn't this cheating
158:47 - and that is definitely Up For Debate but
158:50 - in my opinion no a lot of it is about
158:53 - learning the steps to problem solving or
158:55 - learning a trick to solve a specific
158:57 - problem so I think that it's completely
158:59 - fine to look at a solution but it can be
159:01 - really helpful to first set aside some
159:03 - time trying to figure out how to solve
159:05 - the problem without any help at the end
159:07 - of the day people who are successful at
159:10 - this type of interview generally are
159:12 - successful by solving similar problems
159:14 - over and over and over again and it's
159:16 - mostly a skill that takes a lot of
159:18 - practice in the next Grim we'll go over
159:20 - more strategies to generate learn and
159:22 - practice elgo problems I'll see you
159:26 - there to solve data structure and
159:29 - algorithm problems it's really crucial
159:31 - to understand the different patterns and
159:33 - tricks and approaches for how to crack
159:34 - them so one pertinent question to ask
159:36 - might be what are five common patterns I
159:38 - should be familiar with to get better at
159:40 - solving algorithmic coding challenges
159:42 - chat gbt comes back with a list of
159:45 - commonly used patterns and says getting
159:47 - better at solving algorithmic coding
159:49 - challenges often involves recognizing
159:51 - and applying some common patterns here
159:53 - are five the one we'll concentrate on is
159:55 - the sliding window pattern and as it
159:58 - says here this pattern is often used
159:59 - when dealing with arrays or lists where
160:01 - you're asked to find a sub range that
160:03 - satisfies a certain condition so a good
160:05 - example of this would be if you're given
160:07 - an array and you need to find the sum of
160:10 - three items in that array that are right
160:12 - next to each other the point here is
160:14 - there are a lot of problems that you'll
160:16 - find on lead code and similar sites that
160:18 - can be solved using this sliding window
160:20 - pattern if I wanted to get really
160:22 - comfortable with solving problems using
160:24 - the sliding window pattern I could use
160:25 - chat GPT to generate numerous example
160:28 - problems and that's going to give me
160:29 - much finer control over my learning
160:31 - experience that I might get on a website
160:33 - dedicated to these sorts of problems so
160:35 - I'm in a prompt give me one example of a
160:37 - problem you can solve using the sliding
160:39 - window pattern that's going to give me a
160:41 - problem called maximum sum subarray of
160:44 - size K and this this is a version of the
160:46 - problem that I just described given an
160:48 - array of positive numbers and the
160:49 - positive integer K find the maximum sum
160:51 - of any contiguous subarray of size K it
160:55 - then goes on to explain step by step how
160:58 - you could solve this problem but let's
160:59 - say that I have read this and found it
161:01 - jargony and a little hard to understand
161:04 - it's fairly common for these types of
161:06 - questions to be jargony or obtusely
161:08 - worded so to try to understand it a
161:10 - little better I'm going to prompt please
161:12 - restate the problem statement for
161:13 - beginners and avoid jarg GPT says sure
161:16 - I'll break it down so you have a list of
161:18 - numbers for example this array your task
161:20 - is to find the highest total you can get
161:22 - by adding up any three numbers that are
161:24 - right next to each other in the list so
161:26 - you would add 2 + 1 + 5 1 + 5 + 1 5 + 1
161:32 - + 3 until you checked all combinations
161:34 - in the array and found the highest sum
161:37 - so I can tell by looking at this that
161:39 - the highest sum of three numbers is
161:41 - probably going to be nine and as you can
161:43 - see it very helpfully walks you through
161:44 - this so if you add up the first three
161:46 - numbers you get eight if you add up the
161:48 - last three numbers you get six and the
161:50 - answer that we're looking for is the
161:51 - highest total so if you add up five 1
161:54 - and three you get nine which is the
161:55 - highest possible total so hopefully that
161:57 - makes a little bit more sense than find
162:00 - the maximum sum of any contiguous
162:02 - subarray of size K I can also do the
162:05 - opposite and start with an algo problem
162:06 - then ask what pattern I can use to solve
162:08 - it here I'm throwing into the AI an
162:10 - explanation of a problem that's pretty
162:12 - similar to the twosome problem that we
162:14 - talked about in a previous is scrim and
162:16 - I'm prompting what pattern can I use to
162:17 - solve the following algorithmic coding
162:19 - problem the key difference in this
162:21 - problem statement is that we're dealing
162:23 - with ass sorted array meaning all the
162:25 - numbers are in ascending order but we're
162:28 - still looking to add up two numbers in
162:30 - the array and see if they add up to a
162:32 - Target sum which in this case is six and
162:34 - we'll get back some information about an
162:36 - optimal pattern to solve this challenge
162:39 - which is the two pointers pattern as
162:41 - well as some instructions on how to go
162:43 - about it if you want to learn more and
162:44 - take this a little further I've included
162:46 - the problem statement for this sorted
162:48 - toome problem here in the scrim and
162:50 - here's what you can do to take it
162:51 - further you can read through the
162:52 - explanation down here and if necessary
162:55 - ask for an explanation of the problem
162:57 - statement in a variety of tones with
162:58 - less jargon or with examples or with
163:01 - examples and metaphors whatever you
163:02 - think is going to help you out the most
163:04 - then use the AI to generate pseudo code
163:06 - to help you solve the problem ask about
163:08 - brute force and optimize Solutions ask
163:10 - chat TBT to generate a solution and
163:12 - explain to you how it works and as for
163:14 - other problems that can be solved using
163:16 - the two pointers pattern and this is
163:18 - kind of a good skeleton for a process
163:20 - that you can go through with any variety
163:22 - of L code style
163:27 - challenges for this challenge you're
163:29 - going to use chat GPT to generate and
163:31 - solve the simple classic fizzbuzz
163:33 - problem what you'll do is ask chat BT to
163:36 - give you the fizzbuzz problem and
163:38 - remember to specify that you do not want
163:40 - the solution because the second step is
163:42 - to attempt to solve it yourself if
163:44 - you've already solved pH buzz in the
163:46 - past and you feel pretty comfortable
163:47 - with it feel free to go through these
163:49 - steps using the problem of your choice
163:51 - if you solved the problem go ahead and
163:52 - ask chat GPT for advice on how to
163:55 - improve your solution and if you don't
163:57 - solve ask chat GPT to help you solve it
164:00 - using some of the techniques we've
164:01 - learned in earlier scrims go ahead and
164:03 - pause now and start working on the
164:05 - fizzbuzz
164:09 - challenge welcome back I hope that you
164:11 - had a good experience solving the
164:13 - fizzbuzz problem so I prompted chat GPT
164:16 - to give me the FSB problem and here is
164:19 - what it output the instructions are to
164:21 - write a program that prints the numbers
164:23 - from one to 100 but for multiples of
164:26 - three instead of the number print Fizz
164:28 - and for the multiples of five print Buzz
164:30 - for numbers which are multiples of both
164:32 - three and five print fizzbuzz that's the
164:35 - classic fizzbuzz problem best of luck
164:37 - solving it thank you chat GPT so here is
164:40 - my very quick solution to the fizzbuzz
164:43 - problem it's a series of condition
164:45 - statements for every number between one
164:48 - and 100 we're going to check the number
164:50 - and if it's divisible by 15 meaning it's
164:53 - divisible by both three and five we're
164:55 - going to print fizzbuzz else if it's
164:57 - divisible by three we're going to print
165:00 - Fizz and if it's divisible by five we're
165:02 - going to print buzz and if none of these
165:05 - conditions are true we will simply print
165:07 - the number let's call this really quick
165:09 - so that we can make sure it works run
165:12 - and open up the console and if you go
165:14 - ahead and scroll to the bottom you'll
165:16 - see that it is working as expected my
165:19 - next prompt was how can I improve my
165:21 - solution so that it's more succinct and
165:24 - efficient to which chat GPT responded
165:27 - the solution of the fizzbuzz problem is
165:29 - already quite good the logic is clear
165:32 - and it's easy to follow however if
165:33 - you're looking to make it a tad more
165:35 - succinct without sacrificing readability
165:38 - you might consider the following so it
165:40 - suggests a solution in which we are
165:42 - keeping track of the output so if the
165:44 - number number is divisible by three then
165:46 - the output will be Fizz if it's
165:48 - divisible by five the output will be
165:50 - buzz and if it's divisible by both
165:52 - they'll be concatenated together into
165:54 - fizzbuzz and then we'll console.log the
165:57 - output or the number if the output is an
166:01 - empty string because if the output is an
166:03 - empty string that means that none of
166:05 - these conditions were met I'm going to
166:07 - replace my old solution with the new one
166:10 - and we'll uncomment and see if it works
166:13 - open the console and if you this looks
166:15 - like it is working as expected great
166:18 - Chachi BT did have one final comment
166:21 - which was that the efficiency
166:22 - Improvement here is minor since the
166:24 - complexity remains o of n however the
166:26 - solution is somewhat more concise in
166:29 - this gr you've gotten some valuable
166:30 - practice using chat TPT to generate and
166:33 - solve the simple classic fizzbuzz
166:35 - problem really great work you are doing
166:40 - excellent especially if you aspire to
166:42 - work in big Tech learning about time and
166:45 - space efficiency in algorithmic and data
166:47 - structure focused coding problems is an
166:49 - unavoidable part of interviewing so
166:51 - let's talk about Big O notation if
166:53 - you're not familiar with Big O it's
166:55 - beyond the scope of the scrim to teach
166:56 - it to you but I can suggest a few ways
166:58 - you can leverage AI to start
167:00 - familiarizing yourself with the concept
167:02 - for example you can ask for a succinct
167:04 - beginner focused explanation let's go
167:06 - ahead and read through this bigo
167:08 - notation is a way to express how the
167:10 - time or space used by a programmer
167:12 - algorithm grows relative to the size of
167:15 - the input it provides a high level
167:18 - understanding of which parts of your
167:19 - code might become bottlenecks as your
167:21 - data gets larger you can also ask for a
167:23 - slightly longer explanation with some
167:25 - examples go ahead and pause here if you
167:27 - want to read through the
167:28 - explanation or you can ask for an
167:30 - explanation with specific JavaScript
167:33 - examples here are a couple of
167:34 - explanations pause now if you want to
167:36 - read through them the shortest and
167:37 - simplest explanation of bigo is that it
167:39 - has to do with measuring how long it
167:41 - takes your function to run or how much
167:43 - space it takes up in Compu computer
167:45 - memory AI like chat GPT can help you out
167:47 - not only by reviewing your DS and algo
167:49 - code for efficiency but by analyzing the
167:51 - time and space complexity of your
167:53 - Solutions take this example my prompt is
167:56 - this is my solution to the two sum
167:58 - problem please do a code review of the
167:59 - solution analyze the time complexity and
168:02 - provide suggestions for improvement and
168:03 - I include a solution to the two sum
168:06 - problem chat gbt outputs a nice little
168:08 - review here comments on readability
168:11 - correctness efficiency and code style
168:14 - and make makes suggestions for a more
168:16 - efficient solution as you can see here
168:18 - under efficiency is where it says hm
168:21 - here's where your code can be improved
168:23 - because as you may have noticed my
168:24 - solution to the tuome problem was a
168:26 - Brute Force solution basically it uses
168:28 - nested Loops to check every single
168:30 - element in the array and chat gpt's
168:33 - suggestion for a more efficient solution
168:35 - goes through the array and uses an
168:37 - object to keep track of the array items
168:39 - that we've already looked at it's faster
168:41 - to look something up in an object
168:42 - because you can go straight to it
168:44 - without having to to examine every
168:45 - single item in the array so a prompt
168:48 - like this is one way you can use AI as a
168:51 - tool for code review just be aware that
168:53 - there may be some inaccuracies from time
168:55 - to time and that you'll probably want to
168:57 - seek review from human eyes as well here
169:00 - is another way you can learn about or
169:01 - familiarize yourself with bigo using
169:03 - chat GPT as we've seen I can give chat
169:06 - GPT a specific solution and ask it for a
169:08 - review but another thing I can do is
169:10 - have it generate different solutions
169:13 - that I can study so I can prompt some
169:15 - like this show me three example
169:16 - JavaScript solutions to the two sum
169:18 - problem each with a different time
169:20 - complexity include comments explaining
169:22 - each solution and its time complexity
169:24 - this will give me three different
169:26 - solutions to the two sum problem along
169:28 - with code samples so I have a Brute
169:31 - Force solution a solution using a
169:33 - hashmap and a solution where it first
169:36 - sorts the array and uses a method called
169:38 - two pointers to look through the array
169:40 - in a more efficient way and just a
169:42 - reminder at any time you can pause the
169:44 - scrim to to look at these examples more
169:46 - closely asking for different solutions
169:48 - can be a really great thing to do once
169:49 - you've done the work of solving the
169:51 - problem yourself or of it least
169:53 - attempted to and now you want to study
169:54 - different solutions so that you can
169:56 - become familiar with different
169:57 - approaches and how to talk about them as
169:59 - well as becoming familiar with their
170:01 - time and space complexity and be able to
170:03 - talk about it in terms of Big O notation
170:06 - let's quickly go over what we've covered
170:08 - in the scrim which is a variety of ways
170:10 - that you can use chat GPT to review and
170:12 - analyze your code you can use it to
170:14 - generate code reviews to make General
170:16 - improvements ask questions about
170:18 - efficiency and to learn and study time
170:21 - and space complexity and to start
170:23 - recognizing how to describe the time and
170:25 - space complexity of different solutions
170:27 - using big on notation you can also use
170:30 - chat GPT to generate and study multiple
170:32 - solutions to the same DS an algo
170:34 - problems and ask for Solutions with
170:36 - different time and space complexities
170:39 - because a good way to become familiar
170:41 - with Solutions in Big O is to look at a
170:44 - lot of Solutions and a lot of examples
170:46 - none of this will take the place of
170:48 - practicing these kind of problems really
170:50 - the only way to master it is to practice
170:52 - solving a variety of questions over and
170:54 - over again but AI might help you get
170:56 - there faster and contribute to a more
170:58 - well-rounded understanding of how to
170:59 - approach DS and algo
171:04 - problems what I have for you here is a
171:06 - problem statement and a solution to the
171:10 - palindrome number problem let's quickly
171:12 - read through the problem given an IND
171:15 - write a function to determine if it is a
171:17 - palindrome a palindrome is a number That
171:19 - Remains the Same when its digits are
171:20 - reversed in other words it reads the
171:22 - same backward and forward return true if
171:25 - the number is a palindrome otherwise
171:27 - return false so if we look at this
171:30 - solution it basically takes a number
171:32 - reverses it then compares the original
171:35 - number with the reverse number and if
171:38 - they are the same it returns true
171:39 - because that means we have a palindrome
171:41 - else it returns false no palindrome so
171:44 - so down here we are calling the is
171:46 - palindrome function with the number 414
171:49 - so if I run it will return number is a
171:52 - palindrome if I enter a random sequence
171:54 - of numbers and run number is not a
171:57 - palindrome what I'd like you to do with
171:59 - this is first you'll prompt chat GPT to
172:03 - review the solution describe its time
172:05 - and space complexity and suggest
172:07 - improvements and then ask chat TPT to
172:10 - provide an explanation an example for a
172:12 - more efficient solution go ahead and
172:14 - pause now and complete this
172:19 - practice welcome back hopefully you have
172:21 - a much improved version of this is
172:23 - palindrome function if you had a look at
172:26 - it I'm sure that you may have noticed
172:28 - that we have some variables that don't
172:30 - have great names and maybe some of the
172:32 - logic could be shorter so let's see what
172:34 - chat GPT came up with I'm actually going
172:36 - to create a new file called code review
172:39 - MD so we can have a look at chat gpt's
172:42 - response my prompt that I came up with
172:44 - was this is my solution to the
172:47 - palindrome number problem please do a
172:49 - code review analyze the time complexity
172:52 - and provide suggestions for improvement
172:54 - and I made sure to include my is
172:55 - palindrome function with the prompt here
172:57 - is chat gpt's code review go ahead and
173:00 - pause now if you'd like to read through
173:01 - the whole
173:02 - thing but basically as I pointed out
173:05 - before it says you could have some
173:07 - better variable names could rewrite your
173:09 - if else block to be a little shorter and
173:12 - that you should probably handle negative
173:13 - numbers it also had some things to say
173:16 - about time complexity but said your
173:18 - approach is already quite optimal for
173:20 - this problem the improvements are more
173:21 - about readability and handling potential
173:24 - edge cases fair enough so let me go
173:26 - ahead and go back to
173:27 - index.js and we will replace the is
173:30 - palindrome function with the improved
173:32 - solution that chat gbt suggested in my
173:35 - opinion this is much easier to read so
173:37 - first we're going to make sure that is
173:39 - palindrome returns false if the input is
173:42 - a negative number then we'll set two
173:44 - variables one for the original number
173:45 - and one for the reverse number do some
173:47 - work to reverse the digits of every
173:49 - number and then finally we'll compare
173:51 - the original number to the reverse
173:53 - number and this equality operator will
173:55 - return true if these two variables are
173:58 - equal or false if they are not let's go
174:01 - ahead and try this out I'm going to
174:03 - click run we still have our jumble of
174:05 - numbers in here and you can see that it
174:08 - said number is not a palindrome now
174:10 - let's try a palindrome just to make sure
174:12 - we'll say 919 or run again number is a
174:16 - palindrome so we have a nice little
174:19 - improved function that is working as
174:21 - expected Chach GPT is extremely helpful
174:24 - when it comes to finding potential
174:26 - problems and inefficiencies in your code
174:28 - so I really encourage you to use that to
174:30 - your advantage excellent
174:33 - work the idea of using text based AI to
174:37 - practice Live code interviewing might
174:38 - seem a little strange and sure it's not
174:40 - going to be the same as practicing with
174:42 - a live person or come close to
174:44 - simulating the nail-biting experience of
174:47 - an actual Live code interview but it can
174:50 - definitely help and that's what we're
174:51 - going to talk about in this scrim in a
174:53 - live coding interview you'll likely be
174:55 - expected to ask clarifying questions
174:56 - about the possible constraints and edge
174:58 - cases of the challenge plan out a
175:00 - solution and talk through the problem as
175:01 - you're solving it so let's take a look
175:03 - at how AI can help you practice these
175:05 - activities via role-based prompting to
175:07 - review role based prompting it's it's
175:09 - generally when you engineer a prompt
175:11 - that begins with act as a or Ur to
175:15 - encourage the AI model to take on a
175:17 - certain role here's a prompt designed to
175:19 - help you brainstorm some clarifying
175:21 - questions that you might ask during a
175:23 - Live code interview act as if you a
175:25 - developer in a live coding interview and
175:27 - you've been given the problem below and
175:29 - ask me clarifying questions about the
175:31 - problem is if I am conducting the
175:32 - interview we have this palindrome number
175:34 - problem and this is basically a number
175:36 - that reads the same forward or backward
175:38 - here is an example of a palindrome
175:40 - number because forwards it is 121 and
175:43 - back backwards it is 121 chat GPT will
175:46 - generate a list of possible questions
175:48 - that you might ask an interviewer during
175:50 - a live interview some examples are what
175:53 - should the function's behavior be with
175:54 - negative numbers since negative numbers
175:57 - have a negative sign in front of them
175:59 - they won't read the same backwards so
176:01 - should I assume that all negative
176:03 - numbers aren't palindromes good question
176:05 - how should the function handle singled
176:06 - digigit numbers how should the function
176:08 - deal with zero what about large numbers
176:11 - should it return a Boolean value and
176:13 - should I aim for a certain level of time
176:16 - or space complexity the cool thing here
176:18 - is that after chat gbt has generated
176:21 - these questions I can then ask it to
176:23 - switch roles and answer these questions
176:25 - so my prompt will be now answer the
176:27 - above questions as if you are the
176:29 - interviewer assume the candidate is
176:30 - applying for an entrylevel position this
176:33 - will hopefully give us some ideas about
176:35 - questions an interviewer might ask based
176:37 - on the experience level of the
176:39 - interviewee so here are some answers as
176:41 - if chat GPT is the interviewer that's a
176:44 - great Point negative numbers are not
176:46 - palindromes so you're correct that you
176:47 - can return false for any negative input
176:50 - then if we jump down to six here we can
176:51 - see that probably because this is for an
176:53 - entrylevel person it says try to come up
176:56 - with the most efficient solution you can
176:58 - but the most important thing is that
177:00 - it's correct once it's correct you can
177:01 - think about optimizing for efficiency in
177:03 - this way you can create a back and forth
177:05 - with the AI where you're almost like a
177:07 - fly on the wall of an actual live coding
177:10 - interview of course it's going to be
177:11 - hard to vouch for any kind of accur y as
177:14 - far as these simulated interviews go but
177:17 - it is really good for brainstorming and
177:19 - getting ideas of things that you might
177:21 - say and things that you might be asked
177:24 - here's another potential strategy based
177:25 - on the above exchange write a script
177:27 - that models how an interviewee might
177:29 - successfully solve this problem while
177:31 - reasoning loud and communicating well
177:33 - with the interviewer TBT will then write
177:35 - you a whole script filled with things
177:38 - that an interviewee might say as part of
177:40 - a successful interview so the
177:42 - conversation kind of picks up where it
177:44 - left off the interviewer has clarified
177:46 - the answer to the interview's questions
177:48 - and the interviewee says all right
177:50 - thanks for the clarifications now that
177:52 - we've established that we're only
177:53 - dealing with non- negative numbers we
177:54 - can start to plan our solution one way
177:56 - to check if a number is a pol androme is
177:58 - by reversing the number and then
177:59 - comparing the reverse number with the
178:01 - original number and then they go on to
178:03 - talk about their initial approach which
178:04 - you can pause if you want to read more
178:06 - about this so this might not be the
178:08 - greatest or most accurate portrayal of
178:11 - how a person would talk to another
178:12 - person but this is definitely an
178:14 - effective way to get tidbits of
178:16 - information or angles that maybe you
178:18 - wouldn't have thought of or haven't
178:19 - thought of before so think of it as a
178:21 - good brainstorming tool and those are
178:23 - some creative ways that you can use chat
178:25 - GPT to help you get better at Live code
178:30 - interviewing how much do you love
178:32 - writing resumés and cover letters if
178:35 - you're anything like me probably not
178:37 - very much luckily what better use for an
178:39 - AI language model than to generate words
178:41 - you can use AI to write all sorts of job
178:44 - search docs you can get help with
178:45 - writing résumés cover letters elevator
178:47 - pitches or one of my favorites using it
178:50 - to help you talk about your
178:51 - accomplishments that said it's good to
178:53 - keep in mind that AI when it comes to
178:55 - writing job docs especially résumés it's
178:57 - a good starting place but certainly not
178:59 - a destination I would not recommend
179:01 - having AI fully write your resume but
179:04 - but you can use it to work on improving
179:06 - bits and pieces of it which I'm going to
179:07 - show you today so I'm going to use a
179:09 - couple of strategies here I'm going to
179:11 - provide some context I'm a frontend of
179:13 - developer who needs a general resume
179:15 - then I'll do a role-based prompt act as
179:17 - a resumé writing expert and ask me
179:19 - questions about my current job interview
179:22 - me as a resumé writing expert and then
179:24 - use my answers to create two resumé
179:26 - sections one about my work experience
179:28 - and the other about my technical
179:30 - expertise chat gbt will then ask me a
179:33 - few questions about my work experience
179:35 - like my job title and what company I
179:37 - worked for how long I've been there my
179:39 - main responsibilities key achievements
179:41 - and what technology tools are language
179:44 - that I used and I find that this format
179:46 - of having AI ask you questions be really
179:49 - helpful if you kind of have blank screen
179:52 - syndrome and when you sit down to write
179:54 - a resume you're just kind of staring at
179:55 - the document not knowing what to write
179:58 - in this way AI is a really good idea
180:00 - machine so it then goes on to ask me
180:03 - about my technical expertise and then
180:05 - and I'm going to go ahead and make up
180:07 - some answers so I was a front-end
180:08 - developer at excellent software company
180:10 - for 2 years then you'll notice that I
180:12 - wasn't exactly sure how to answer this
180:14 - second question can you describe your
180:16 - main responsibilities so I'll say I want
180:18 - you to ask me more questions to help me
180:21 - describe my main responsibilities I also
180:23 - asked for some help talking about my key
180:25 - achievements or projects that I'm proud
180:27 - of I'm simply going to answer I can't
180:29 - think of any what are some examples
180:30 - based on my job title so again using AI
180:33 - as a brainstorming tool then I make up
180:35 - some stuff quickly for the technical
180:37 - questions and chat gbt says great thank
180:40 - you for the information let's dig a
180:41 - Little Deeper so it asks me questions
180:43 - about my main responsibilities and key
180:46 - achievements I go ahead and jot down
180:47 - some quick answers to these questions
180:50 - and from our interview session chat gbt
180:52 - generates a section that I can put on my
180:54 - resume I was a friend and developer at
180:56 - excellent software company at these
180:58 - dates and here are the things that I did
181:00 - based on the information that I gave the
181:03 - AI so a lot of this sounds pretty good
181:05 - specialize in optimizing web pages for
181:07 - maximum speed and scalability ensuring
181:09 - high quality graphic standards and brand
181:11 - consistency leading code review
181:13 - processes is maintaining code quality
181:14 - and encouraging best practices Mentor
181:17 - interns guiding them through technical
181:18 - processes and providing valuable
181:20 - industry insights your own results will
181:23 - vary and you'll definitely want to go
181:24 - through and personalize this but look at
181:26 - all of the resume fodder that I was able
181:28 - to generate in just a couple of minutes
181:30 - super useful it then gives me a list of
181:32 - key achievements and Technical expertise
181:35 - and like I said you're probably going to
181:36 - have to work on the formatting and to
181:38 - decide for yourself where you would want
181:40 - to put this information on your resume
181:42 - but especially if you're someone who who
181:43 - struggles to talk about their
181:45 - achievements these are some good
181:46 - guidelines this is also great for
181:48 - brainstorming if you have little to no
181:50 - experience like for example if you've
181:52 - just finished a boot camp and you want
181:55 - advice on how to talk about things on
181:57 - your resume I prompt I'm a front-end
181:58 - developer who is looking for my first
182:00 - job I have experienced working on a
182:02 - project management application as part
182:04 - of a six-week internship as well as
182:06 - several completed boot camp projects act
182:08 - as a resumé expert and make suggestions
182:10 - for how I can craft resume we look at
182:13 - the outp puts advice is as a new front
182:15 - end developer looking for your first job
182:17 - your resume should focus on your
182:18 - relevant project skills and education
182:20 - and offers some suggestions for
182:22 - structuring your resume some of this
182:24 - advice is arguable I don't know about
182:26 - putting an objective statement on your
182:28 - resume I've heard that that is getting
182:30 - to be a little old-fashioned but again
182:32 - that's something that you would want to
182:33 - check for yourself and your own specific
182:35 - needs and so these are just basically
182:37 - suggestions for sections that you could
182:39 - put on your resume and here's an example
182:41 - of what it might look like so front and
182:43 - developer intern company name dates
182:46 - along with a description of the things
182:47 - you did and any certifications that
182:49 - you've earned another thing you can do
182:51 - that comes in really handy is I have
182:53 - gotten these qualifications from some
182:55 - job ad on LinkedIn and I am going to
182:58 - dump it into chat GPT and say I want to
183:00 - apply for this job here's a description
183:02 - of my current position please make
183:04 - suggestions for how I can tailor this
183:06 - section for the job that I want ask
183:08 - clarifying questions if necessary and
183:10 - then here is where you might put in a
183:12 - description of your current job job but
183:14 - I'm using the fake one that I use chat
183:15 - GPT to generate for me so I think this
183:18 - is pretty cool this prompts chat GPT to
183:20 - ask me questions about my experience
183:23 - related to the job qualifications that I
183:26 - gave it do you have experience with web
183:28 - accessibility standards or guidelines
183:30 - how comfortable are you with working
183:32 - independently and so on so I'll go ahead
183:34 - and answer all of these questions and
183:37 - chat GPT will use that to tailor my
183:40 - resume this could potentially be a
183:42 - really huge timesaver at this point I've
183:44 - spent a long time having a conversation
183:47 - with chat TBT about my skills and
183:49 - experience going to take advantage of
183:51 - the back and forth we've had so far and
183:53 - ask it to write me an elevator pitch
183:55 - while prompt I have a phone screen with
183:57 - the recruiter next week based on all the
183:59 - information I've given you so far write
184:00 - a 30-second elevator pitch that I can
184:02 - use to introduce myself pause this and
184:05 - read through it if you want it writes me
184:07 - a nice short speech that I can use to
184:10 - introduce myself and talk about my
184:12 - skills in a really succinct way I can
184:14 - also take advantage of this conversation
184:16 - by starting to ask chat GPT how I can
184:19 - answer certain interview questions
184:22 - especially one that a lot of recruiters
184:24 - ask which is tell me about yourself and
184:26 - it gives me some suggestions for how to
184:28 - do that but stay tuned because we'll
184:30 - talk a lot more in the next roomm about
184:32 - how to use AI to practice interviewing
184:34 - so see you
184:38 - there we've previously discussed ways
184:40 - that AI can help you with technical
184:42 - interviewing but it can also o help you
184:44 - with behavioral interviewing which can
184:46 - sometimes be just as big of a challenge
184:48 - to find out how chat gbt can help with
184:50 - behavioral questions I decided to start
184:52 - by asking it how can you help me as a
184:54 - friend and developer practice behavioral
184:57 - job interviews it responds behavioral
184:59 - interviews typically involve questions
185:01 - about your past work experience and how
185:02 - you handled specific situations in the
185:05 - workplace and it says it can help us do
185:07 - mock interviews use the star method
185:09 - which is a way to structure your
185:11 - interview answer questions it can give
185:13 - feedback information about industry
185:15 - Trends and knowledge and can also review
185:18 - your interview questions the first thing
185:20 - it says it can help with is mock
185:21 - interview questions so I'm going to say
185:23 - let's start with some practice questions
185:26 - the result is a list of questions based
185:28 - on teamwork problem solving technical
185:30 - skill leadership and so on these are all
185:32 - broad topics so I'll start by
185:34 - concentrating on one of these areas
185:36 - first then I'll say I want to
185:38 - specifically practice the star method
185:41 - please give me a star method example for
185:43 - the first question if you're not
185:44 - familiar with the star method hopefully
185:46 - this will help you understand it so our
185:47 - response is absolutely here's an example
185:50 - of how you might use the star method to
185:51 - respond to the question can you tell me
185:53 - about a time you had a conflict with a
185:55 - team member how did you handle it so you
185:57 - first explain a situation the example is
186:00 - that I was working at excellent software
186:02 - company we were working on a large
186:04 - project with a tight deadline and a team
186:06 - member let's call him Bob who is
186:08 - constantly missing our daily standups
186:11 - and failing to meet his coding deadlines
186:13 - the task is that we felt we had to
186:15 - address the issue and this is the action
186:17 - that we took we had a one-on-one meeting
186:19 - with Bob to discuss my observations and
186:21 - then you talk about the results Bob was
186:23 - initially defensive but he appreciated
186:25 - my Approach and opened up about some
186:27 - personal issues that were affecting his
186:29 - work and after our talk Bob's
186:31 - participation and output improved
186:32 - considerably way to go Bob so it can be
186:35 - pretty difficult to think of scenarios
186:37 - to talk about during a job interview so
186:39 - I find these examples to be very helpful
186:42 - and in my interviewing EXP experience
186:43 - some companies will actually ask you
186:45 - specifically to use the star method it
186:48 - is a really worthy Endeavor to get used
186:50 - to how it structured and get used to
186:52 - answering interview questions that way
186:54 - I've seen an example I understand the
186:55 - star method a little bit better now I
186:58 - need help brainstorming some scenarios
187:00 - that I can use to answer this question
187:02 - what are some situations where a front-
187:03 - end developer might have conflict with a
187:06 - team member this is a way that I can
187:08 - start to think about my own personal
187:10 - story so hopefully the AI is going to
187:12 - come back with something that will
187:13 - remind me of something that happened to
187:15 - me at work so that I will have a good
187:17 - answer for the question how do I deal
187:19 - with conflict with a team member comes
187:21 - up with several good possibilities
187:22 - differing opinions on design code
187:24 - quality misalignment on priorities
187:27 - project Direction disagreements
187:28 - communication issues and workload
187:30 - imbalance hopefully a list like this
187:32 - will help you think of situations that
187:35 - happened in your own work experiences
187:37 - that you can talk about during a
187:39 - behavioral interview I can also ask for
187:41 - behavioral interview questions related
187:43 - to a specific area that I want to work
187:45 - on say I'm looking for a job as a lead
187:48 - developer or an engineering manager and
187:51 - I want to practice talking about my
187:52 - leadership experience I can prompt
187:54 - please ask me five behavioral interview
187:57 - questions related to my leadership
187:58 - experience and AI has a lot of good
188:01 - ideas for that taking initiative
188:03 - resolving conflict making decisions
188:05 - mentoring or leading a project it then
188:08 - reminds you that a really good way to
188:10 - practice answering these questions is by
188:12 - using the method I can ask for example
188:15 - answers based on my experience level I'm
188:18 - asked the question what are your
188:19 - strengths and weaknesses not only can
188:21 - this be a really difficult question to
188:22 - answer because you're never quite sure
188:24 - what they're looking for when they ask
188:26 - this question but your answer might be
188:27 - different if you're an entrylevel
188:29 - developer versus a principal level
188:31 - engineer so the prompt is I'm
188:33 - interviewing for an entry-level web
188:34 - developer position how can I answer the
188:36 - question what are your strengths and
188:38 - weaknesses the AI comes back with as an
188:40 - entry-level candidate you want to
188:41 - highlight your strengths and weakness
188:43 - NES in a way that communicates your
188:44 - potential for growth your ability to
188:46 - learn and your dedication to the
188:48 - profession so your strengths might be
188:49 - more focused on your education
188:51 - internship or personal traits that will
188:53 - help you succeed in the role and here's
188:55 - an example of how you might answer and
188:56 - you can pause if you'd like to read
188:58 - through it the some of the same ideas
188:59 - for answering the weakness portion of
189:01 - the question and posits that the key is
189:03 - to show that you are aware of areas
189:05 - Improvement and that you are actively
189:07 - working on them so it uses the example
189:10 - of working on my familiarity with
189:12 - certain web develop ment tools and
189:13 - Frameworks there's still a lot for me to
189:15 - learn but here's all the things that I'm
189:17 - doing to make sure that I'm learning and
189:18 - getting hands-on experience this is some
189:20 - pretty decent advice but of course
189:22 - you'll want to tailor it to your
189:24 - specific situation as we're just using
189:26 - the AI to generate ideas and jumping off
189:28 - points here's a prompt that will
189:30 - encourage chat GPT to act as your
189:33 - interview coach I am interviewing for a
189:35 - junior front and developer position and
189:36 - I want to practice answering questions
189:38 - about my technical knowledge acting as
189:41 - my interview coach ask me questions and
189:43 - provide me with feedback on my answers
189:45 - with this kind of prompt you can get an
189:47 - endless number of questions essentially
189:50 - about your technical skills and get a
189:51 - lot of practice answering a variety of
189:54 - different questions so this is a really
189:55 - powerful tool the back and forth goes
189:57 - something like this it starts with a
189:59 - double and triple equals equality
190:01 - question which I would say is pretty
190:03 - appropriate for a junior level developer
190:05 - so I went ahead and made up an answer to
190:08 - the question talking about type checking
190:10 - and type coercion chat gbt says my
190:13 - explanation is great thanks chat GPT and
190:16 - then goes on to ask me another question
190:18 - the question that it asks is can you
190:20 - explain how CSS flexbox works and give
190:23 - an example of a scenario where you
190:25 - choose to use it in my opinion this is a
190:27 - super cool thing about AI if I were
190:29 - reading this off a list that I found on
190:31 - Google and I didn't know the answer I
190:33 - would simply have to move on to the next
190:34 - question or do some research and
190:37 - formulate an answer without a lot of
190:39 - feedback so let's pretend that I don't
190:40 - know quite how to answer this question
190:42 - so my follow-up prompt will be I'm
190:44 - actually not sure how to succinctly
190:46 - explain how flexbox Works can you give
190:48 - me an example of a solid brief answer
190:51 - and that will help me answer it a little
190:53 - better or collect my thoughts so I can
190:54 - answer it a little better next time then
190:56 - moves on to a third question how would
190:59 - you approach making a website more
191:00 - accessible what are some key
191:02 - considerations to keep in mind this time
191:04 - I'm going to answer this question
191:06 - incorrectly my answer is to make a
191:08 - website accessible you want to make sure
191:09 - that you have a really good URL that
191:11 - closely matches the matter of your
191:13 - website otherwise your customers might
191:15 - have trouble finding it chat GPT
191:17 - responds that's a great Point regarding
191:19 - search engine optimization but when we
191:21 - talk about accessibility and web
191:22 - development we're generally referring to
191:24 - making web content usable for people of
191:26 - all abilities and disabilities and then
191:28 - it gives us some pointers for how to
191:30 - enhance a website's accessibility what I
191:32 - think is really cool about using AI to
191:35 - practice interview questions is that you
191:37 - could easily go on Google and find a
191:39 - list of these questions somewhere and
191:41 - maybe even read the answers but what you
191:43 - can't get is Real Time feedback or help
191:46 - with how you might go about answering
191:48 - the question and you might be able to
191:49 - find the answer to the question but it's
191:51 - not going to feel as interactive so I
191:53 - find this a lot more fun and engaging
191:55 - way to practice these kind of interview
191:57 - questions I hope you found these ideas
191:59 - useful I personally find behavioral
192:02 - interviewing to be really tough and I
192:03 - appreciate having a brainstorming buddy
192:05 - like chat GPT so happy interviewing and
192:08 - I'll see you
192:11 - later
192:14 - congratulations you finished the course
192:15 - and are now a capable prompt engineer
192:18 - and superpowered developer who can
192:19 - harness the power of AI to accomplish a
192:21 - huge variety of tasks let's go ahead and
192:23 - recap a little bit of what you've
192:25 - learned we covered the basics of prompt
192:27 - engineering specificity context
192:30 - technical language controlling the
192:31 - length and formatting of responses
192:33 - breaking down tasks and prompts
192:35 - iteratively optimizing prompts
192:37 - rule-based prompting and prompting by
192:39 - example we also covered AI assisted
192:42 - coding that's using natural language
192:44 - models to generate code with pseudo code
192:46 - and pseudo language also generating test
192:49 - cases and edge cases debugging
192:51 - converting and documenting code and
192:52 - avoiding pitfalls like hallucinating and
192:55 - copypaste loops and finally we looked at
192:57 - how you can use AI to help in your job
192:59 - search including learning generating and
193:01 - practicing DS and algo coding challenges
193:04 - tailoring resumés and cover letters and
193:06 - practicing interviewing you've done an
193:08 - incredible job now go forth and prompt
193:10 - engineer something amazing

Cleaned transcript:

not quite getting the results you want from chat GPT wondering how you can use AI language models to your advantage then this course is for you if you have spent any amount of time with AI language models like chat GPT and Google bard you may have noticed the results can sometimes be a little frustrating effective prompt engineering is the secret sauce for getting the most out of AI in this course treasure por will teach you the Art and Science of effective prompt engineering to get the most out of AI language models and help you become a better web developer treasure is a software engineer and she's a technical content developer at scrimba hi free code Camp Learners welcome to my course on prompt engineering for web developers prompt engineering is the Art and Science of communicating with AI to yield better more precise more robust results AI interfaces like chat GPT and Google bar do a little bit of everything from writing silly poems to to summarizing large text to generating code Snippets this course is designed specifically with web developers in mind so it's packed with ideas strategies and practice challenges that are going to help you get the most out of AI language models as a coder you're going to learn how to use prompt engineering to transform an AI language model into a par programming partner a personal coding tutor and even a career in interview coach with the help of AI you're going to be coding better and faster than you ever have before so I hope you're excited to get the most out of this course you should have some experience writing JavaScript and react but whether you're a senior Dev or just starting out there's something in this course for you so thank you so much for joining me and let's get started hello prompt Engineers welcome to my course on prompt engineering created specifically for web developers we are entering a future in which web development is so much more than writing code it's about leveraging artificial intelligence to supercharge your coding skills to build smarter and faster and this course is all about showing you how firstly though hello my name is treasure I've been a friend and developer since 2015 and a teacher and instructor for even longer than that I switched careers after going through a boot camp and I love traveling karaoke and singing in a choir I've done hundreds of hours of research coding and experimentation with AI language models and I'm really excited to share what I've learned with you there's been so much Buzz about AI recently that you've probably heard a lot about language models like chat GPT or Google bard by now so I'm going to give you a very Lightning Fast definition language models are artificial intelligence tools that allow you to have humanlike conversations with a computer language models like chat GPT can help humans do pretty much anything involving words whether it's ad copy poetry or helping you brainstorm a list of names for your new cat I've split this course into three sections the first section covers many tips tricks and strategies to design and refine your AI prompts to get the most out of interacting with AI language models the second section is a collection of prompt ideas and examples exploring how you as a developer can use AI language models to generate document and debug your code as well as use it as an Interactive Learning tool you'll learn some practices to help you use AI as a PA programming partner a rubber ducky if you will that not only listens to you but helps you find Solutions and the last section is all about using AI language models to enhance your job search I'll show you examples of how to use AI for everything from finding places to apply to learning and practicing algorithmic coding challenges to generating and practicing behavioral interview questions for this course we'll mostly be using open ai's public interface commonly known as chat GPT with a little bit of Google barge sprinkled in I highly recommend that you follow along and experiment with your own prompts and you can click on the logos to visit the public interfaces for these AI language models and sign up for an openingi account if you need to before we go into any further I want to quickly address a common question that pops up when people start learning about AI will AI replace developers or make it harder for me to break into the tech industry tragically I'm not a time traveler or a psychic or even an expert on industry Trends so I can't definitively answer this question but what I can say is that being a developer is so much more than being able to spit out code it's about understanding the user and how to create products and services that are intuitive Pleasant to use fast and that solve real world problems to make people's lives easier it's about empathy and creative problem solving and Innovation working as part of a team and the list goes on at this moment in time we still need humans to do that and right now language models are really only good at one thing and that is guessing what word should come next giving a sequence of words at the end of the day language models are simply trying to predict which words should come next AI language models are also only as good as the data they're trained on they are prone to making things up and they become less effective as the complexity of your problems or your code bases goes up so the short answer is no in my opinion AI is unfit to replace developers anytime soon language models are best used as tools to streamline the most tedious rote tasks of a developer bringing us up to focus on bigger more complex more interesting problems now that that's settled and you know what you're in for let's talk a bit about prequisites it's important to note that while you don't have to be an expert you should have some experience with JavaScript and reactive be successful in this course as long as you've done some basic coding this course should give you a wealth of ideas for how to harness the power of AI in your webd Dev workflow so let's go let's do it the first step to getting the most out of AI is learning effective prompt engineering so let's talk about what prompt engineering actually is this is a relatively new term that you may have heard out in the wild in all of the talk about AI recently and at first glance you might assume like I did that prompt engineering is a way to say software engineering via prompting a language model but it's actually a much more generalized term prompt engineering means crafting prompts to effectively guide a language model's responses here's another definition designing and refining inputs to obtain your desired output I like to think of prompt engineering as The Art of Getting AI to do what you want whether you want AI to write an essay or make art or produce code for you how you engineer prompts depends largely on what you want the language model to produce in our case we're going to talk about prompt engineering specifically for frontend development and our desired output is code or information about code when it comes to AI assisted coding a wellengineered prompt ensures gpt's output is tailored to your specific needs and it's going to mean hours of development time saved from repetitive boilerplate code debugging and a lot more for the next part of the course we're going to discuss prompt engineering specifically for frontend development and here's a sneak peek of the basic Strat strategies for Effective prompt engineering we need to be specific use technical terms provide context give examples and perhaps most importantly iterate so we're going to go through each one of these strategies look at a ton of examples and you're going to learn a wealth of great tips and tricks it's going to be great so let's dive into it I'll meet you in the next scrim let's talk about the basics of writing effective prompts it's very much a worthy Endeavor to take the time to craft a great prompt when working with language models like GPT a great prompt can mean the difference between Broad and largely unhelpful responses from the AI to finally tuned outputs that save you potentially hours of time I highly encourage you to follow along with me and try all of these prompt examples out yourself and you can click on this image to go to gpt's public interface keep in mind as we start looking at examples that there's a certain Randomness to how chat GPT outputs information so even if you enter in the exact same prompt your output is probably going to be a little different from what chat GPT has given me how it responds depends on a variety of factors like I said Randomness and it can also vary depending on your prompt history and which model you're using so just keep that in mind the responses will be similar most likely but probably not exactly the same let's talk about strategies for Effective prompt engineering the first three are be specific use technical terms and provide context here's an example of a not so great prompt how do I Center something a slightly better example of this prompt would be how do I Center an element on a web page and an even better example is what's the best way to Center div element horizontally and vertically using CSS let's see what happens when we enter this into GPT when I use the broad prompt how do I Center something GPT says well I need more context what are you trying to Center and how are you trying to center it are you talking about physical space or a digital environment are you centering a word processor on a website graphic design software more information please so then I prompt again with something a little bit more specific and a little more technical I'm saying I want to Center an element on a web page now GPT responds with well you can use cascading stylesheets there are several ways to achieve this but it recommends that we use flexbox or css grid notice here the assumptions that GPT is making based on our prompt it's perhaps assuming that we may not know what cascading stylesheets are it then provides us with some code for the HTML and CSS for flexbox and for grid let's see what happens if I refine The Prompt even further this time I'm going to say what's the best way to center a div element horizontally and vertically using CSS so I'm providing more context I'm saying I want to know what the best way is I'm also being more specific I'm saying I want specifically a div element and I want to Center it both horizontally and vertically and I'm also specifying the technology that I want chat GPT to respond with which is CSS this results in a similar response so it's still suggesting that we use flexbox or css grid but this time it gives us some pros and cons for flexbox as well as some sample code and some pros and cons for grid so you can see how even the slightest tweak to a prompt can result in in very different outputs from GPT let's look at another example I'm going to start with the really broad prompt how do I use reduce with this prompt GPT responds by explaining that reduce is a function that takes two arguments but looking down a little further you'll see that because we didn't specify a technology it is providing an explanation of reduce in Python followed by some sample code on how to use reduce in Python so here's a small challenge for you think about how you would engineer The Prompt if you wanted a JavaScript example think about how you would engineer The Prompt if you wanted to understand what javascript's reduced method is used for in other words some use cases and also think about how you would engineer a prompt if you were a beginner and you wanted to make sure that GPT responds with simpler instructions and also think about how you would engineer a prompt if you wanted GPT to incorporate all three of these assumptions go ahead and pause this scrim go to chat gpt's public interface face and play around with prompting based on these assumptions and when you return I will show you my inputs and outputs welcome back hopefully you found that exercise to be helpful let's have a look at how I engineered my prompts first I'm making sure to provide context be more specific and use technical terms by specifying the technology I want to use the specific method that I want to learn about and I'm asking GPT to provide examples of what I might use the reduce method for GPT responds with a definition of what reduce is followed by a stepbystep example of how you can use it great it also very helpfully provides the example in a single code block so that I could copy and paste this into a scrim if I wanted it also goes on to provide a more advanced use case of reduce which is when it takes in an array of objects and transforms that array of objects into something else in my next prompt I again am specific about what language that I want to discuss the reduce method in but this time I'm asking for its use cases specifically so again it provides a definition of reduce and then provides five instances in which it might be helpful to use reduce so calculating the sum of an array of elements finding the product of an array of elements counting the occurrences of elements in an array flattening a nested array and transforming an array of objects into an object with a specific structure which happens to be the example that it showed us last time and in my final example I'm again asking for javascript's produce method and I'm asking gbt to explain it to me as if I'm a beginning developer just learning how to code I'm also asking for a very specific example I want to know how I can use reduce to calculate the total price of several items in a shopping cart you'll notice that the result is that GB output is a much longer and more detailed explanation of reduce using slightly less technical language it reminds us what arrays are and carefully explains how the reduce method works by going through each element in the array one by one and applying a function that you define it then provides a stepbystep shopping cart example just like we asked for pretty cool this has been just a few examples of how we can use specificity technical language and context to tweak gpt's output to get as close as possible to the information that we desire we've seen how to use these strategies to get information about code and code samples now join me in the next scrim to discuss how we can use these principles to use GPT to produce usable code I'll see you there let's talk about using specific Technical and contextual prompts to get GPT to generate code as an example let's start with a very broad nonspecific nontechnical prompt with no context and that prompt is how do I create a form GPT trying to be as helpful as possible responds that well there's lots of ways to make a form you can use a form in HTML for a web page you can use Google forms or you can even create a form in Microsoft Word then also continues to try to be helpful by providing examples of how you might get started creating a form using all three of these Avenues so here is a challenge for you think about how you would improve this prompt so that it is specific Technical and provides context and here is your context you want to create a form that displays the reverse of whatever the user inputs into the form go ahead and pause go to gpt's public interface and play around with how you would engineer a prompt to produce this code and when you return I'll show you the prompt that I crafted welcome back were you able to create a form here's how I did it I started by saying please create a form in JavaScript with one input that accepts a string and on submit prints that word to the web page in Reverse so I'm being specific about what I want the form to do I'm specifying that I want the form to be in JavaScript and that I intend to use it on a web page GPT responds with the HTML and JavaScript that I need to complete this form let's quickly copy and paste this code in and see if it works so I have my HTML and my JavaScript and let's run this and because I put my JavaScript into a file called index.js I'm going to have to make sure to go ahead and change that in the HTML it generated this is another way that we could improve the specificity of the prompt by the way is we can say please assume that we have a Javascript file called index.js and that way GPT will change its code samples accordingly but let's just go ahead and change it manually this time and see if this works I'm going to type this is backwards and we'll submit and there we go whatever we enter into the field is printed to the page backwards exactly what we wanted let's look at another quick example this is a less broad prompt with a little little bit of context I'm saying please show me an example react component and GPT responds making the assumption that I'm starting from ground zero so it's saying first make sure that you have node installed on your system and use create react app navigate to the project directory then open the source folder and put this into appjs and it gives us an example of a little greeting component it then tells us to run our create react app that we need to PM start so it's trying to be as helpful as possible but this may end up being way more information than we're looking for and that is another thing to keep in mind when engineering as specific prompt and providing the proper context so take a moment to think about how you might improve upon this prompt I want you to try to engineer a prompt based on all three of the following assumptions you want GPT to assume that you already have a react project set up let's assume that you want to see an example of use effect in this example react component and let's also assume that you want an atypical example and not the same examples that you see everywhere like a counter component that simply increments a number by one every time you click a button or a react component that simply says hello world so go ahead and pause the scrim now go to gpt's public interface and engineer a prompt that addresses all three of these assumptions I'll see you when you get back welcome back hopefully you were able to engineer a prompt that got you some helpful results let's have a look at my prompt so my prompt is please create an example react component that takes at least one prop and demonstrates how to use hooks like use State and use effect now I've done something that can be incredibly helpful when prompt engineering I'm specifying what I don't want GPT to respond with so I'm saying the example should not be a typical hello world example like a counter or a greeting and I'm saying assume that I have already set up a react project so this time given the specificity of our prompt GPT skips all of the setup instructions that it included before and it gives us this theme switcher example which arguably could be the third most common example that is used when teaching react but that's okay it didn't give us what we specifically said we didn't want so this is an area where we could play around and try to improve this prompt a little more pi get an example that's perhaps a little more interesting but other than that it's given us what we wanted we have a react example that uses use State and use effect we also get a pretty good explanation of how the example is working and some instruction on how to use it in our existing react project when it comes to prompt engineering specifically for coding or learning to code specificity technical language and providing context will take you a long way but there's still a bunch more to learn and a ton of new examples to try and all sorts of ways that you can tweak your prompts to get as close to exactly what you want so I look forward to seeing you in the next scrim where we'll continue to talk about more prompt engineering tips I will see you there now for a quiz and a bit of practice I really encourage you as you're going through this course to spend as much time as you can trying out different prompts in chat GPT if you need a link to open ai's chat GPT interface I've included that right here so keep in mind when you're actively practicing rather than passively watching the scrims you're much more likely to retain the information I've sprinkled challenges and opportunities for practice like this throughout the course so do take your time to get your hands dirty like I said it's going to really help you remember everything that you've learned so we have a short quiz question for you to answer and a few less than ideal prompts that I'd like you to improve based on what you've learned so far go ahead and pause the scrim now and work on the quiz and practice welcome back hopefully hopefully that went well let's go over some possible answers our quiz question is what are the three basic components of an effective prompt and those are to be specific use technical terms and provide context if we look at these suboptimal prompts they are missing one or all of these things so let's look at the first one I need to Loop through an array help how could we rewrite this so that it's more specific uses technical terms and provides context your answer is will most likely be a little different than mine but let me show you the prompts that I came up with for this one I added some context and Technical Language by saying in JavaScript how can I utilize the for each method to iterate over an array of objects and extract a specific property from each so I'm being specific about the language I want to work in and providing some context about what I want to do for this second question I want my website to look good on phones 2o my prompt was what are the recommended CSS media query breakpoints for for mobile tablet and desktop views to ensure my website is responsive across various devices so again more specificity more context and more specificity around technical terms our third prompt is I'm having issues bringing data into my react app my prompt for this is how can I use the use effect hook in react to fetch data from a rest API endpoint and store the results in a local state using the used State hook this is maybe a little more specific than I needed to be so if you find your s aren't quite so specific that's totally fine as long as the basic elements are there you're more likely to get more precise results and that's it for the quiz in practice to take this a little further you can try entering both the vague prompt and the prompt you came up with into chat GPT and note the differences between the two the vague prompt might accidentally be correct or somewhat correct or help you get to your desired answer but generally a more precise prompt is going to save you time by yielding more precise results this is one of my very favorite tips because there is so much that you can do with it so let's talk about all the ways you can finetune gpt's responses by controlling the length and format especially when you're trying to learn something new with GPT these are some really effective ways to get as much or as little information as you want in some formats you may not have thought about before let's look at some examples I could request information like this I could say provide a brief two step explanation of creating a custom JavaScript event and GPT responds with an explanation that has exactly two steps I can say something like please compare CSS grid and flexbox highlighting their main differences and use cases in a tabular format so I'm requesting the response as a table and gbt responds with this great little table that compares grid to flex box in the way that I've specified it's pretty awesome I can also get extremely specific so I want to know why inner HTML should be avoided why we shouldn't use it so I'll ask GPT to summarize in exactly three bullet points why in HTML shouldn't be used I also want each bullet point to be followed by a short explanation and a code example of what I should use instead here's gpt's response I get exactly three bullet points we shouldn't use inner HTML due to security risks performance ISS issues and accessibility issues it can cause problems for screen readers and other assistive Technologies GPT recommends some other things that we can use and shows us an example as we've requested this is a really good example of how granular we can be when controlling the length and formatting of a response from GPT a question that we get asked a lot here at scrimba is how much Java Script should I know and be comfortable with before I start learning react let's see what GPT thinks my prompt is please list the five most important JavaScript Concepts a beginning developer should be comfortable with before learning react I want the response to be brief though so I'm going to be really specific about the kind of response that I want so I'll go on to say please provide a one sentence explanation of each concept and one sentence about why it is important for learning react let's see how it worked out this is fairly close to what we requested we have exactly five JavaScript Concepts variables and data types functions and scope arrays and objects troll flow and conditionals and asynchronous programming and promises and then we get a one sentence explanation of what that JavaScript concept is and why it is important to learn for react so for example understanding how to work with asynchronous code using callbacks and Promises is crucial for handling events making API calls and handling State updates in react this is an exactly what we asked for but it's pretty close and if we wanted to we could go back and refine The Prompt a little bit if that's what we wanted to do I can also ask GPT to create flowcharts so here I've asked please create a flowchart describing how to submit a poll request using GitHub and it creates a textbased flowchart outlining all of the steps from forking the repository all the way down to creating a new pull request on GitHub and choosing which branches I want to merge if you ask me this is a really cool way to begin to understand a concept with a ton of steps I can also ask GPT to create pseudo code please create pseudo code in the form of code comments describing how I can write a react component that displays the time in a user's local time zone I'm requesting that pseudo code in the form of code comments because I've discovered that when I ask for pseudo code it tends to give me code that sort of looks like Python and what I want are stepbystep instructions for how I can code this function myself and code comments are what's most effective for me so let's see what GPT did in the form of code comments it's broken down into small steps with even more specific instructions so this would be great if I really want to make sure that I'm writing my own code but I desire some stepbystep help to help me think through how I might structure my code here are even more examples I can control the length by requesting a definition in one paragraph or one sentence I can even specify that I want a response in so many words or less this is also one of my favorites I can request a tldr of a topic which if you're not familiar stands for too long didn't read it's basically another way of saying give me a short explanation so I can say tldr explain the difference between let and const in JavaScript I can request a specific task in a specific technology but request the solution without using any external tools or libraries I can ask for explanations in the form of analogies and metaphors I can also copy and paste GPT some code and ask for an explanation via code comments on every line explaining what the code does and finally here's another one that I use a lot and we will see more of later I can prompt GPT with in your response please only include the code that needs to be modified and this is really helpful if you're having GPT generate some more complex code for you it does have a tendency to print out all of the code every single time and this way you can ask for just what needs to be modified we will talk much more about this in later scrims now that we've looked at quite a few examples please take a second to think about how prompting to control the length and format of the response can be helpful to you go ahead really quick think of a topic that you're unfamiliar with or that you've always meant to look more into and ask GPT for an overview in whichever format you feel would be helpful and definitely use the examples on this list or the other examples that we've looked at for inspiration for example I was recently contributing to an open source project that uses Redux which I'm not very familiar with pause now give it a try and when you come back I will show you yet another example of how I prompted to get the response in the exact format I was looking for welcome back hopefully that was a really good exploration so as I said I wanted to know more about Redux so my prompt was please explain how to use Redux step by step using a simple code example such as tracking whether or not a user is logged in so I'm asking for a response in a stepbystep format using a specific code example and then I'm getting even more granular by requesting one sentence that explains each step then once GPT has provided me with a stepbystep explanation of reduct with the code sample that I've specified I wanted to make up an acronym for me that's going to help me remember all of the steps I need to remember to use Redux if you're at all familiar with Redux or have ever tried to learn it there are a lot a lot a lot of steps let's look at the response I was able to get GPT says here's a stepbystep guide on how to use Redux with a simple code example to track user login status thank you that's exactly what I asked for we'll use the acronym carts as a reminder of of the steps it's a pretty good acronym it's easy to remember it's an actual word so then using This Acronym it breaks down the steps we're going to create a redex door do some action craters and then here is the one sentence explanation of each step that I requested it goes on and shows me the rest of the steps and then at the end it says remember the acronym cards to help you remember the steps for using redex in a react application and it goes on to summarize the acronym that I requested prompting GPT in a way that controls the format and length of its responses is a super powerful way to use GPT both as a learning tool and as a timesaver when coding up features this is really worth getting comfortable with so I really encourage you to just take some time right now before moving on to the next scrim to choose a few coding Concepts you've always meant to look into a bit more and explore them with GPT using a variety of formats definitely refer back to the slides and to the list of examp this is going to get you familiar with all the many ways you can prompt GPT to share information with you time for a bit of a challenge you're going to design some prompts to build a small application that generates haikus if you're unfamiliar with haikus it is a poem with a 575 syllable structure so if we take a look at this example I asked chat GPT to generate a houp for me that was about prompt engineering and this is what it came up with crafting questions sharp guiding thought with Precision answers clearer shine if you were to count the syllables in this poem you would find that the first line has five syllables the second line has seven syllables and the third line again has five syllables your task will be to prompt chat GPT to write you code for a very simple application where you'll push a button here in the mini browser and it will generate and display a randomly generated Hau so I've given you three vague suboptimal prompts that I want you to improve you'll improve these prompts using all of the techniques that you've learned so far and then use those prompts with chat GPT to generate some code you can then copy and paste the code you've generated right here in the scrim into this JS file to make sure that your prompts have yielded code that does what you expect let's quickly read over the prompts that you'll be improving the first is make some lists of phrases for a haiku I want them to be about artificial intelligence the second is combine the phrases into Haiku and the third suboptimal prompt is make the hius show up when I press a button I've asked for hius about artificial intelligence here but feel free to generate Haus about whatever subject you want rainbows unicorns math it's up to you also these prompts don't give you a ton of hints as far as how to structure your code so if you need some help on that you can go ahead and take a look at this hints MD file for some guidance before you get started I have one final important disclaimer you may have noticed that the title of this scrim and this file is Huish gener and that is because for reasons unknown chat GPT is not great at counting syllables and will sometimes produce phrases that are a syllable or two off for the purposes of this challenge we're not going to worry about that but if you want to ensure 100% accurate results you can manually count the number of syllables in the list of phrases that you generate or ask chat gbt to break down each line and count the syllables for you have fun with this go ahead and pause the scrim now and get started on the challenge welcome back I hope you had a fun time generating hauz let me show you the prompts that I came up with the first prompt that I wanted you to improve is make some lists of phrases for a h cou i want them to be about artificial intelligence here is my improved prompt generate three JavaScript arrays for a hou generator where each array represents a line of the ha cou the first and third arrays should contain phrases with five syllables and the second array should contain phrases with seven syllables all the phrases should relate to artificial intelligence here are the lines for my Huish generator that chat BT came up with we have an array of phrases for each line of the poem The phrases for line one contain more or less five syllables the phrases for line two contain more or less seven syllables and the phrases for the third line of the poem contain more or less five syllables the second prompt that we needed to improve was combine the phrases into a ha coup this is my improved prompt for that write a JavaScript function to randomly select one string from the three arrays of strings and return a combined string where each Haiku is on a separate line this prompt yielded the following function so we have this generate ha cou function that takes in three arrays containing phrases for possible ha cus there is a get random line function that takes in an array and chooses a random item from that array in this case a random line for a poem and it then calls the get random line function three times one for each line of the poem it saves each line into its own variable and finally returns a string containing the three randomly chosen lines concatenated with a line break in between each the third and final prompt that I asked you to improve was make the haikus show up when I press a button my improved prompt for this was create a button in JavaScript that when clicked triggers the generate Hau function and displays the Haiku to the web page from this prompt I was able to get an eventless listen ER that is attached to an element with the ID of generate button and when clicked it calls the generate hi cou function and sets the text content of an element with the ID of hi cou output to the results of the generate hi cou function it also generated a couple of lines of HTML which I will copy and paste into my index we have a button with the ID of generate button and a pretagged when I click it I get random Haus fantastic in this Grim you've built a haiku generator application in just three prompts if you've spent any amount of time with chat gbt you may be thinking well this could have been done with just one prompt and well that's most likely true when you're using chat gbt it's good practice to always be thinking about how to split projects into smaller tasks more on that in the next scrim excellent work on this challenge or in the form of a hi cou challenge met with Grace generator speaks in verse student claims their place see you in the next one with the right prompts AI is surprisingly sometimes frighteningly capable and because it's so capable our first impulse might be to stretch it out as far as it can go how much can I make it do how few prompts can I get away with can I get a whole app with a single prompt the answer is yes you probably can but the results might be a little me think of it this way say you're building a brick wall like this adorable little penguin if you were to build it by hand you'd probably go Brick by Brick right making sure that each element was in its place before moving on to the next one you wouldn't throw all the bricks and all the mortar into a pile and smear it around until it sort of resembled a wall but one of the pitfalls of AI is that it's tempting to do this with code it's really tempting to hand AI a list of instructions and try to mold whatever it spits out into a workable application this is why I advocate instead that when you build with AI you break everything down into small smaller chunks and that means the tasks that you're trying to accomplish with AI as well as the instructions that you prompt the AI with and the features that you choose to build I also can't stress enough the importance of taking time to read and understand the code that AI generates along the way so why should you do this breaking it down into smaller steps is going to be better for manageability for Learning and understanding the code and for isolating bugs and other issues it is possible to get AI to spit out a whole react app in one go but the more complex the thing you ask for the more likely there are to be errors and inconsistencies and the less likely you are to understand the code or feel any sense of ownership over it so it's really easy to get trapped in a cycle where you don't understand the code you're working with you ask chat gbt to debug it it solves one issue but introduces another and on and on until the brick wall crumbles and you storm away frustrated am I speaking from experience yes let me show you an example so what I'm after is to build this budget tracker basically in the form you can put a budget title your budget how much of that budget you've actually spent and then you can add it to this nice little visualizer that represents your budget versus how much you've spent as a progress bar here's what happens when I try to do this in one big prompt so we're going to read all of this really quick my huge prompt is help me build a small react application to help users visualize their budget the application should consist of a form with three inputs a budget title a total budget and current expenditures when the user submits the form a progress bar should be added to the page the progress bar should be green if less than 50% of the budget has been reached orange if more than 75% of the budget has been reached and red if 100% or more of the budget has been reached the app should keep track of the total budget and total expenditures and display a large progress bar with this info at the top of the page users should also be able to delete and edit progress bars create Json for four example budget progress bars and assume I already have react project set up this is a very tall order there is a lot of stuff and the AI is smart but telling it to do all of this at once is going to make it more apt to forget things so I ended up with something like this as you can see this somewhat resembles what I asked for we have some budgets we have the total budget and the amount spent we have a little form and it does work but the following things are wrong there are no progress bars and that is because AI forgot to set a height for the progress bar so they're there but they're invisible it also completely ignored my request for ADD and delete functionality which is honestly understandable because that adds a great deal of complexity to the application and it ignored my request for a main larger progress bar that represents the total overall budget not spectacular results so take a second and think about how you would break this down I don't think that there's necessarily a right answer here I think it's going to depend a lot on how your brain works and how you tend to build code in the first place but some suggestions are you could break the task down by structure and style as then you could do all the HTML and then the CSS and then worry about functionality this is a react app so you could build each component one by one you could concentrate on certain features or any other number of possibilities but let me show you how I did it I'm going to concentrate first on building the budget form component my prompt is helped me build a small react application that helps users visualize their budget make sure it meets the following requirements and then I'm breaking down tasks into a list making a list makes it a little bit less likely that AI is going to leave things out so this is another component of breaking things down into smaller tasks within a prompt so I say number one and include a form component with three inputs and number two I'm going to describe the functionality when the form is submitted add the new budget to an array of budgets here's what the output look like and this is what we end up with so it's pretty simple so far but I can add a budget let's say rent and it simply adds the budget with the total amount of the budget and how much we spent now I want to make the form look nice so I'll say add styles to the form with three bullet points it should be responsive I want the form fields to be stacked and the fields are styled similar to bootstrap Fields but don't use any outside libraries and that yields some CSS which I will go ahead and drop into the CSS file and that is a pretty nice looking form with just a couple of prompts I'll now move on to displaying my budgets in a progress bar so using this same format I'm going to say each progress bar component should have the following and then I'll make a list I want to display the budget title the budget versus how much we've spent below the progress bar and then the color scheme that I wanted for the progress bar so if you're close to reaching your budget it'll be red if you haven't spent much of your budget it'll be green then I specify that my progress bar should be thick with rounded Corners this yields some progress bar CSS which I will put in my CSS file it also gave me some progress bar code which I already have in this file called progress bar and finally inside of my app it instructed me to rewrite this map function to use the progress bar rather than simply mapping through the array so we'll go ahead and replace all of this code and what's happening now is we are collecting the budget data from the budget Forum we're adding it to this hook that is keeping track of all of the budget objects inside of an array we're then mapping through the array of budgets and passing that information to a progress bar that has all of the progress bar Styles and information about how we want to display it let's run and add a budget and there we go we have a working budget tracker that displays a progress bar I can then continue to iterate on this project in small steps for example I can ask it to create some dummy data so that we can see what our application looks like with a bunch of budgets add that here here are our budgets with a bunch of dummy data and then finally I can take care of a couple of bugs as you can see the progress bar gets too long if you go over budget so for our entertainment budget we've overs spent by $50 making the progress bar too wide I also want to to change these harsh colors so I'll ask it for one final task before we wrap up this scrim the width of the progress bar should never exceed 100% if the spent amount exceeds the budget amount make the budget SLS spent progress bar text red display the spent budget text as a dollar amount and use dark pastel colors for the progress bars so let's copy and paste the refactored code and run and this is pretty close to what I had in mind this gr has been about building iteratively and breaking up complex tasks into smaller steps as the the task you complete with AI grow more complex remember to ask yourself how can I keep breaking it down let's pause for a second to take a quick quiz to help things stick a little better read through the quiz questions and answer them to the best of your ability go ahead and pause the scrim now and start working on it welcome back so why can it be helpful to break down a project into smaller steps even if the language model is smart enough to handle it my answer answer is that overall it makes the project more manageable it helps you to more thoroughly understand the code and more effectively discover bugs and other issues it helps you avoid a situation where you have a lot of code that you are unfamiliar with and not sure how it works because Chachi BT has generated all of it for you the second question is how would you break down the following prompt into smaller tasks and as I said you didn't have to worry about actually writing the prompts I just wanted you to think about how the app could be broken down in a highlevel way to be built Inc mentally with the help of chat GPT there's going to be a lot of variations and answers here because everyone's a little different but here's how I would break it up I would start with the pet list and layout part of the application whether or not I wanted the list to display as a gallery or as a straight vertical list and all of the components that I might need for that then I would worry about the responsiveness of the pet list and layout I then move on to accessibility finally I would look at filtering the list of pets building a pet detail page and finally I would worry about styling this isn't allinclusive of course and some of this could be broken down into substeps but hopefully that gives you a general idea so that's it for this quiz thanks for taking the time and great work when you're using a language model like chat GPT to help you build an application it might be tempting to assume that when you ask chat GPT to produce something for you and it fails that the language model is simply not capable of that task and sure there are plenty of things that chat gbt is not great at like the time I tried to get it to write fiction GH not good but I'm sure with the right prompts you could get close to chat GPT doing even that because making a few tweaks to your prompts can make a huge difference this is a strategy called iterative prompting iterative prompting is the process of prompting evaluating the ai's response and either revising your prompts to get as close to your desired outcome as possible or clarifying what you want with a followup prompt let's look at a couple of simple examples I have an HTML table that has some information about board games let's say that it represents the inventory for a store called Roll With It games I start with the prompt please create a product web page based on this HTML table and the result looks something like this it isn't bad it's simple bold colors I like the addition of a buy now button I think that makes a lot of sense but what I really had in mind was more of a gallery layout where each board game is a card in a row of cards also if you were to look at the code example you would notice that this is all hardcoded and the HTML and CSS is Allin one file which isn't exactly what I want so I'm going to iterate on my prompt tweaking it to be a little more specific I kept my original prompt please create a web page based on this HTML table now I'm going to add use a responsive Gallery format where each product is a tile then I'll say convert the data in the HTML table to Json and use JavaScript to Loop through and display each game so that will take take care of my problem with it being hardcoded here's where things start to get a little messy it starts by converting my HTML table to Json but then if you look at the code it gives me everything is still in the same file which is fine I didn't specify that I wanted it to be split but it also added a second games array of objects I have this whole Json file that isn't being used so there are sort of two ways that you can iterate on a prompt and this is the first one wherein I have clicked this edit button and simply changed the prompt and had the AI completely regenerate a response if you're unfamiliar with the interface you can then use these right and left arrows to Rifle through all of the prompts and responses which can be pretty handy in some cases and by the way this says three out of three because on my second attempt chat gbt errored out and I had to regenerate because of that revising a prompt like this can be really helpful if what you generated is not close to what you want however in this case let's take a look at the output so in some ways this is closer to what I wanted I have each game as a tile I have some issues with responsiveness that I would need to work on as you can see because there are four cards one is kind of in the middle of the second row which may or may not be what I want but I've also lost the buy now buttons and the color scheme that I was kind of fond of so maybe I didn't really want to start all over what I can do is I can go back to my original prompt so I'll click back through to my original prompt and I can continue the conversation with this prompt and instead of revising it I'm going to add a followup prompt and my followup prompt will break down all of the changes that I want to make so as a list I would like the AI to break the code into separate CSS JS and HTML files I want to extract the data from the HTML table into a Json file and I want to create a function to Loop through the Json and display each game as a card in a responsive Gallery format and so through iterating with a followup prompt here's what I end up with I have the best of both worlds which is the gallery format that I was after plus the buying Now button and the green color scheme so to wrap things up remember that iterative prompting is all about trial and error plus a bit of creativity and persistence if you follow this process prompting evaluating the output and either revising or writing a followup prompt it's going to make it that much easier to achieve smoother more predictable results let's learn a little prompt engineering Inception using AI to optimize and improve your prompts and then feed those prompts back into the AI for the most effective results the strategy involves two stages the first is asking chat GPT to interview you about your needs so it can then craft and optimize prompt for you based on those needs stage two is using the prompt to prompt chadt to maximize the quality of your desired output let's look at an example my first prompt will be I'm going to give you a prompt and I want you to help me optimize it ask me clarifying questions then suggest a more effective prompt that will yield a more accurate and detailed output chat GPT says absolutely I'd be happy to help you optimize your prompt please share it with me I'll then give it the prompt please give me some example code for react accordion menu now that I've asked chat gbt to interview me it will come back with a list of clarifying questions that's going to help me be more specific about what I'm looking for and this is cool because not only will it result in a more refined prompt but it's also kind of like a builtin brainstorming session so Chad jpt says to optimize it I'd like to ask a few clarifying questions would you prefer that the accordion menu be made of class components or functional components using hooks are there any specific features you'd like the accordion menu to have like multiple sections open at the same time animations or accessibility features will there be any specific data structure for the content of the accordion or will it be text only and finally would you like to use a specific styling strategy followed by some suggestions for styling strategies that I could use I'm going to go down the list and answer each question I want functional components for my features I'll say I want a smooth open and close animation I want only one one section to be open at a time and I'd like to use the open Sans Google font I want my accordion to accept Json data and I also going to ask the AI to generate some dummy data for me and finally I'll tell it I just want to use a regular external stylesheet I've given chat TBT a lot of detail about what I want here this strategy has helped me provide a lot of clarification on what I actually want chat gbt responds could you provide me with example code for react accordion menu that meets the following requirements followed by a summary of the requirements based on my answers from the previous prompt so I can now dump this back into chat GPT as a much more specific contextual refined prompt so that's what I'm going to do I'm now going to prompt with this optimized prompt chat gbt responds with some example code for an accordion which I have copied and pasted into the scrim so let's take a look we have the dummy data we asked for we are using a functional component with hooks and a regular stylesheet just like we asked for and as you can see this is a pretty good looking accordion menu for a couple of minutes worth of work let's do a little review of what we've just done I'm going to come over to my accordion. jsx file these are the steps I just went through to optimize my prompt first I prompted chat gbt to ask clarifying questions about my prompt I then answered chat gpt's clarifying questions and when chat GPT returned an optimized prompt I then fed it back to chat GPT and the result is hopefully a more finely tuned code snippet that includes all of the features that you were after definitely try this strategy out for yourself I find that it works really well when I'm trying to do something relatively complex or when I'm murky or undecided on the details of what I need a function or react component to do time for a quick review and some more practice we've just talked about a strategy for optimizing a prompt and we did this in three steps your first prompt should be an overview of what you're trying to accomplish and a request for chat gbt to ask you clarifying questions your second prompt will be answers to chat gbt's clarifying questions and after you answer the questions chat gbt will output and optimize prompt which will then feed back into chat GPT let's practice this by instructing chat GPT to help us build a simple modal window if you're unfamiliar a modal is generally a secondary window that opens up on hover or buttonclick on a website so think about a popup payment form or a box that pops up where you might enter a username and password but I'd like you to do is starting with this prompt show me a code snippet for modal in react go to chat GPT I've included the link right here and follow the steps to create a more optimized prompt then just for fun I set up this scrim so that you can enter your code into this model. jsx file just to test it out and see if it works modal windows can have a lot of options and those will be up to you but my advice would be to keep it as simple as possible for example I'm going to prompt for a modal that displays a box of text on button click and that's really all it's going to do go ahead and pause the scrim now and start working on this challenge all right we are back let me show you the prompt that I came up with my prompt was I'm going to give you a prompt and I want you to ask me clarifying questions to help optimize The Prompt suggest a more effective prompt based on my answer here's the prompt show me a code snippet for modal in react and here are the clarifying questions that chat gbt asked me yours will probably be a bit different but the general idea should be the same that GPT wants me to clarify if I want a functional component or a class component in react do I want the model to be styled with play CSS scss or a specific Library like styled components do I want the model to open and close based on a button click are there any specific content types that I want inside the model like text images or a form do I want want any transition effects for when the modal appears or disappears and am I using any State Management tools like Redux or do I want to use local component State here are my quick answers to these clarifying questions I want a functional component I want to use an external CSS stylesheet yes I want the modal to open and close on buttonclick just displaying text is fine for now I want my modal to use a simple fade in and Fade Out effect and finally I just want to use local component State based on the answers to these questions here is the optimized prompt that chat gbt came up with that prompt is provide a react functional component code snippet for a modal that utilizes an external CSS stylesheet the modal should display text content and open close based on a button click it should have a simple fade inout transition effect and manage its visibility using local component State just for fun let's look at the modal code that chat GPT output based on my optimized prompt so I'll go to model. jsx and copy and paste that code in so we have a clickable button that says toggle modal and then we have some jsx for the modal code that's based on the local component state is open which our toggle modal function toggles from True to false notice that we do have hardcoded modal info here so that's something that we'd want to iteratively improve upon but this is certainly a good start chat GPT also provided some CSS which I will copy and paste into the CSS file so we have some styles to make sure it has a semitransparent background when it's open and some key frames for some simple transition effects let's go ahead and open the mini browser and run this to test it out got my toggle modal button and when I press it there we go a very simple modal in this challenge we've learned how to get chat GPT working for us to create more effective prompts well done let's talk about a really interesting way to plan learn and create with AI it's called rolebased prompting role based prompting is a strategy in which you ask a language model like chat jpt to put on a costume so to speak you instruct the AI to take on a specific Persona while interacting with you for example you might start a prompt with act as a or you are a and as we'll see you can have it act as a variety of things that will help you as a software engineer like product manager software architect or even career coach which we'll talk about in a later scrim let me show you how you can use rolebased prompting to plan out basically an entire application I'm going to start by asking the AI to act as an expert in system design and architecture and advise me on how to design the front end of a react application that helps users keep track of how often to water and fertilize their house plants this is a big comprehensive list it's kind of Broad and not super helpful right now but it will be in just a moment so my next prompt in the same chat window is going to be you're now a product owner tasked with Gathering requirements for this project what features andun functionality should this application have ask me clarifying questions if necessary this is a really good strategy when you need AI to help you brainstorm or when you want to try to get a different perspective than you might be able to come up with on your own I'm instructing the AI to actually interview me about what I want out of my project the AI immediately assumes the Persona of a product owner and says it's my responsibility to ensure that the product we're creating truly meets the needs of our end users great it then makes a list of of basic functionalities and ask me some questions so do we need user accounts what kind of plant information should the app include water and fertilizer reminders should there be a catalog of plants to choose from and what about user preferences so this is all good to think about but very overwhelming at the moment so I'm going to prompt again kind of drill down I'm going to say let's concentrate on plant information first that's the second one on the list and the question was what type of information should be tracked for for each plant for instance do we need to track only watering and fertilizing schedules or should we include other details like sunlight needs optimal temperature plant species Etc so as part of my prompt I will say let's include the nickname and image the watering and fertilizer frequency the last time that the plant was watered the last time it was fertilized and also an additional place for notes the AI then provides fleshed out requirements for the plant information functionality as well as some information about the overall plant display the date should be localized the information should be presented in an intuitive and userfriendly format that's great but this is all still a little bit broad to be helpful to me so I going to prompt again to drill down even more I'm going to now ask the AI to assume a third role I'm going to say I now want you to act as a product manager please wrate user stories based on the above requirements if you're not familiar with what a user story is it's basically a way to explain how a software feature should work from the perspective of a user or a customer so notice that I did not ask for a specific number of user stories so the AI comes back with 13 user stories which is very thorough so you see we have as a user I want the app to calculate and display the number of days since each of my plants was last watered or fertilized so that I can easily see when they need care next that's great another example is as a user I want to edit notes I've added for each plant so I can keep them current and useful this is great there are a lot of good ideas here but this is still a huge long list and as a software developer I'm still overwhelmed I don't really know where to start I'm going to do another role based prompt you are the product manager of this application please advise me as a software engineer which stories are most necessary to create an MVP for prototyping and demo purposes so basically this prompt is asking the AI to pair down the list for me what are the most important things that I should concentrate on first so it picks six user stories assigning a nickname uploading an image of a plant setting the watering and fertilizing frequency and so on so if I'm looking to build a demo or a personal project to put in my portfolio or something I now have a really welldefined place to start which is pretty cool now if I want some more advice on where to start how to structure what technologies to use I've had AI help me determine and plan so much of my application at this point that I can do one final rolebased prompt we're going to bring it back to the software architect and say act as a software architect and give me advice on how to design the front end of a react application based on the following user stories I'm then going to copy and paste the six user stories that the AI just determined for me and get some advice based on these user stories that I've worked with the UI to create the chat GPT then suggests a component hierarchy to start with as well as some advice about all sorts of things like State Management handling images calculating dates and some user interface and ux stuff so this will give me some really good ideas about how to get started and then here is one of my favorite things I can now do another rooll base prompt that says you and I are a software engineering team discuss the requirements for the first three user stories and turn them into tickets to be entered in jira and now ai say sure let's break down these user stories into individual tasks that can be created as tickets in jira so I have my user story I have the tasks that go with it and the acceptance criteria so with rolebased prompting I've gotten some ideas about how to structure my app I have determined the most important features I've determined what I need for an MVP and I've generated tickets for jir now I can be Off to the Races building my app so this has been a scrim about how to leverage AI to plan out an application using robased prompt engineering now this method may not work for software engineering teams building software out in the real world it's often much much more complicated than that and there's a lot of back and forth and a lot of cooks in the kitchen when it comes to building soft soft ware but if you're looking to build a portfolio of personal projects for the purposes of getting a job for example or if you're a oneperson startup company this can be a really effective way to use chat GPT as an idea engine and as a partner in brainstorming so I hope you found this useful happy role playing let's do a quick review of rolebased prompting followed by a little exercise rolebased prompting is when you use phrases like act as a or you ra to prompt chat gbt to assume a certain role while assuming the role of an expert you can prompt chat gbt to ask clarifying questions and you can also ask chat gbt to assume a role to help you define Technologies determine key features and write user stories when you're planning a project so here's the scenario for the exercise you want to use chat GPT to help you build an MVP for a booking website that displays information on hotel resorts an MVP if you aren't familiar stands for minimum viable product and it's way to describe an app that has the most barebone features that you'll need in a working application so you can think about like a very simple prototype of Airbnb or Expedia with no bells and whistles all you can do is view information about Resorts even an MVP of this type is going to be fairly complex once you think about all the pieces so we're not going to try to get chat GPT to build this site we're just going to get a little bit of practice using rolebased prompting to plan an application so once again you're going use rolebased prompting to get advice from chat GPT on how to create an MVP for a booking website that simply displays information on hotel resorts you'll want to start by writing a prompt that will yield a broad overview of all the things you might need to think about for an MVP chances are chat gbt is going to point out a lot of things that you'll need to think about when planning this type of application so just pick one area of focus and prompt chat gbt to keep assuming a role and ask you clarify ifying questions to help you drill down into the area that you want to concentrate on planning and once you've drilled that down use chat gbt to create five user stories for that area of focus don't forget to use rolebased prompting here as well go ahead and pause the scrim now and start working on this challenge welcome back I hope you came up with some great user stories let me show you my prompts The Prompt I started with is I want to build a simple booking website for resort hotels act as a product manager and help me identify features I should include in an MVP as expected chat gbt came back with a lot of information going to copy and paste that in and as you can see there is a whole lot to think about here user authentication search functionality Resort listings booking process the list goes on and on so the one that I'm going to choose to focus on is Resort listings so let me actually get rid of all of this other stuff so that we can better focus on Resort list listings here's a prompt I use to get chat GPT to help me narrow down what I want to do with Resort listings my prompt was let's focus on Resort listings acting as a product manager decide on the five most important features and write user stories for them as requested chat gbt gives me five user stories that includes seeing a Details page high quality images the ability to read reviews and see ratings clear information on room availability types and their pricing and so on in this Grim we've narrowed down a plan to start working on a complex application and written some user stories in just a few prompts this can be a really helpful strategy for starting to plan an application and especially if you're a new developer just starting out and trying to maybe build portfolio projects it can also help you realize the scope of a project that you have in mind and help you narrow it or expand it accordingly so great job on this challenge one of the most effective ways to engineer a good prompt for chat GPT is to show and not tell in other words prompting with examples of what you want chat GPT to do let me show you a couple of examples I'm in a prompt chat GPT to write a function to Total an array of numbers and return the value as a dollar amount rather than fiddling with this prompt and wondering if it's clear enough and if GPT is going to be able to parse what I'm saying I'm going to include with my prompt an example input and an example output so my input is an array of numbers some with decimal points and my example output is 172.5 formatted as US currency GPT then responds with this function and even gives us a line of code with our example input so that we can test it so let's copy and paste that into the scrim and see how it works after I pasted it I'll run and as you can see using the example input that we provided the output is 17250 which is the output we expected just for fun let's try some different numbers so five and five should be $10 great what if we just have one number in here that'll be $8 and if we have an empty array we get back $0 great let's look at one more example first I'm going to ask chat GPT to generate some dummy Json data for me I specify that I want it to be for music events and I'm going to give it an example of all of the properties that I want my Json to contain so band name the event date and time ticket cost venue and genre I'll then request that it only generate dummy data for two bands because I don't want the Json data to be too long GPT responds with some Json data I'm going to go ahead and comment out this first example and copy and paste this Json data looks good we have a little error because this isn't a Json file but that's okay we'll fix that in a second I then copied and pasted that Json data back into a prompt and my prompt is considering the following Json data so considering this example Json data please write a function that will take in this data and return a new object where the event date time is converted to a human readable format I then include an example that has an additional property and you'll notice that actually made a little typo here I write formatted data time when I meant formatted date time but as you'll see chat gbt was actually smart enough to correct this for me so this is my example output I want the event date time to be converted to this nice human readable time wherein instead of a jumble of letters and numbers you can see that it says nicely may5 2023 at 800 p.m. GPT responds with this format event data function it puts my data into a variable for me and logs it out let's copy and paste this into the scrim and see how it did get rid of my example Json and let's run and you'll notice that it is taking in this array of objects that has five properties band name genre event date time ticket cost and venue and it is returning an array of objects with six properties because despite my type of it has added a property called formatted date time and that is the power of prompt engineering with examples if there is a way that you can show chat GPT exactly what you would like your output to be I highly recommend you do so now stay tuned for a fun little challenge where we'll prompt with examples to build a Seltzer flavor generator I'll see you in the next one welcome back prompt Engineers here is a fun little challenge that will give you some practice prompting by example I don't know about you but in my area of the world flavored seltzer water is extremely popular and there are hundreds of flavors ranging from pretty simple like black cherry or pomegranate to kind of out there like raspberry Rose hibiscus cloudberry and mango Cherry bliss all the way to downright bizaar this is a real seltzer water flavor it's called Yeti Mischief they also have one called unicorn kisses and one called Dragon Whispers I've had all three and of course I don't know what a real dragon whisper tastes like but I guess I can believe that it tastes like a fruit bomb with a tropical punch it was good for this challenge you will prompt GPT to create a function that generates random salzer Water flavors some examples might be funky raspberry pineapple wacky strawberry whipped cream Zippy pineapple mango the format that you want to follow here is adjective followed by a flavor followed by another flavor and the flavor titles should be capitalized so make sure that the code that you generate with chat GPT capitalizes these flavors you'll want to give GPT example inputs and outputs the function that you produce should take in an array of adjectives and an adjective is a describing word like funky or Zippy or blue and it should ALS o take an array of flavors so pineapple mango strawberry whipped cream all examples of flavors go ahead and ask GPT to generate these two arrays the array of adjectives and the array of flavors you decide if you want your flavors to be delicious weird bizarre icky inedible it's your choice have fun with it and then finally test the function that GPT outputs and if it doesn't work or if GPT doesn't produce exactly what you've asked for keep iterating on your prompt until you get the result that you want grab a mermaid song flavored Seltzer and get started I'll see you in the next scrim with the solution hey there this is the solution to the flavor generator challenge your challenge was to prompt GPT to create a function to generate weird wacky or delicious random salzer Water flavors in the following format an adjective followed by a flavor followed by another flavor here's some examp examples funky raspberry pineapple wacky strawberry whipped cream Etc you were also to ensure that chat GPT gave you the output you expected by giving example inputs and outputs let's take a look at the prompt that I wrote create a function that suggests new Selzer Water flavors I'm then going to be very specific about the arguments that the function should accept so the function should accept two arguments an array of flavors and an array of adjectives the function should pick two flavors at random and return a new flavor in this format adjective flavor flavor I give it an example input which is two arrays one of flavors and one of adjectives and then in my output I make sure to follow the format I specified an adjective followed by two flavors let's take a look at the code that chat GPT generated based on this prompt copy and paste it into my index.js file as you can see it commented things nicely for me which is helpful it tends to do this randomly so it can be really helpful to specify whether or not you want comments when you're asking GPT to generate a function for you so inside the suggest new flavor function we have a function to get a random index we then use the function to get a random number between zero and the length of the adjective array and save it to a constant and then we use that random number to choose an adjective from the adjectives array we're then doing something something very similar to select the two flavors we're using the get random index function to get two random numbers that we can then use to choose something out of the flavors array now it seems confusing at first why it decided to save one to a const and one to a let but that is because on the next line of code we're looking at both of the random numbers that were chosen and we're ensuring that they aren't the same so we don't end up with a double flavor like wacky apple apple or something because that wouldn't make sense it's really cool that chat GPT checked for this on its own but this is definitely a potential bug that you would want to consider so finally it selects two flavors from the flavors array and returns a string in my requested format adjective flavor it also provides me with some example usage which is great so let's go ahead and call this function run and open the console and see what we end up with I want to make sure that I am locked fogging out the result of this function let's run again we get sour grapefruit orange Tangy Orange grapefruit cool Orange grapefruit so it looks like we're getting the result we expected which is great but now I want chat TBT to generate me some fun flavor ideas so next I prompted please generate 20 sweet or dessertlike foods for the flavors array I'm again going to give it some examples like cake pineapple and whipped cream then I say generate 20 wacky and fun adjectives the adjective array for example tart fresh and Smokey keep in mind that this prompt is based on the fact that I have just in the last interaction as chat GPT to generate a function for me so I'm not referring to that function I'm counting on it to remember the code that we're talking about but there are many instances where you might want to refer to the function as part of your prompt so as you can see it gives me a list but that's not what I want I want to be a lazy programmer and I want these as arrays I I want to turn them into a raise myself so I'm going to update my prompt and be a little more specific and deliberate so I'm going to explicitly say please generate two JavaScript arrays the first one I want 20 sweet or dessert like foods for the flavors array and then I give my examples and then number two 20 wacky and fun adjectives for the adjective array with some examples like buttery luscious and artisanal this time it does exactly what I ask it to do it gives me 20 flavors and 20 weird adjectives let's copy and paste these into the scrim so I will replace these shorter arrays and let's run see what we come up with Whimsical banana whipped cream interesting zesty caramel Cherry vibrant Cherry mango all right so we've got the result that we wanted but I see a little issue here I want these flavors to be capitalized quickly I'm going to say please write a function that capitalizes each word in the Seltzer flavor this is something iterative and incremental I'm again going to provide an example so here is an all lowercase sour orange apple and I want the first letter of each word to be uppercase so it gives me this capitalized word function so we'll copy and paste this code in right underneath our other function and it did provide me with an example usage but instead of using that I'm going to come down here and I'm going to wrap my suggest new FL Flor function into this capitalized word function and that's how we'll test to see if it works I'll run Zippy cake cinnamon interesting flavor and with that my salzer water generator is complete showing versus telling and using examples when it comes to working with chat GPT is incredibly valuable it's a great skill to learn so thanks for practicing with me hope you enjoy it let's continue on to the next prompt engineering tip in earlier scrims I talked a little bit about the dangers of chat GPT hallucinating hallucinating is language models tendency to sometimes simply make things up things that can sound perfectly plausible and true but just aren't chat jpt can rather randomly make up facts misquote people or give false information so what I'd like to do in this scrim is show you an example of a time that chat GPT hallucinated while I was trying to work with it as well as talk about why GPT hallucinates and what you can do if it hallucinates or how to try to prevent it from happening so one day I was working with chat GPT to create an interactive timeline which is basically a web graphic that you can click on it will show certain years on a timeline and you can click on that year for more information when I asked chat GPT to help me with this it immediately gave me an accordion menu which was not exactly what I wanted so here was my followup prompt what suggestion do you have for a more Dynamic user interface I was hoping for some something a little more graphically interesting than a simple accordion menu notice that my prompt is not very specific it's pretty openended and it's almost like I'm asking the language model to tell me what it thinks like I'm asking it for its opinion rather than requesting it perform a concrete task and I think that might be one of the reasons that it began to hallucinate so its response was for a more Dynamic and Visually appealing user interface I suggest using a horizontal timeline layout with a sliding effect so what it's suggesting is something that is a photo Carousel where you can cycle through a collection of photos or other information by clicking on right and left arrows so it suggests this opensource Library called Chronos slider notice it even gives me the GitHub URL and it claims that this library is lightweight and very easy to integrate it then gives me instructions and Sample code but guess what when I go to this GitHub link I get a 404 it doesn't exist when chat TPT does make mistakes it can be pretty good at correcting itself so I'm going to ask it to confirm its own information my next prompt was I get a 404 error when I try to visit the Kronos slider GitHub repository can you check the URL and then chat gbt is like oh apologies for the confusion I made an error in my response it seems that the Chronos slider Library does not exist and then it suggests another Library which does in fact exist and not only does it exist but it turns out to be a little closer to what I was actually looking for so that's what happened Chachi BT completely fabricated a library and instructions for how to use it let's talk about why this happens why do language models hallucinate can be for a few reasons it can be limited or incorrect training data a misinterpretation of your prompt or and probably most likely for the example that I went through it has to do with the way GPT works I've heard GPT described as an incredibly sophisticated autocorrect basically the way that it comes up with responses is that it tries to determine the likelihood of the next word given a sequence of words so it's trying to optimize and guess what the next word is going to be and that sometimes causes the model to prioritize coherence over correctness in other words it will occasionally pick something that sounds good over something that's actually true at this point I have spent many hundreds of hours with chat gbt and it's only hallucinated a few times to my knowledge so this isn't an error that happens constantly but it is something that is helpful to be aware of here are some things you can do when chat TPT hallucinates as I showed you you can prompt the model to double check its response and or you can confirm the response for yourself sometimes it can be good to do both breaking questions or tasks into smaller chunks can be really helpful and it's been shown that the smaller that you break down the tasks the more accurate the response whether that means into smaller prompts or breaking stuff down into lists of things as well as encouraging the model to show its own work or Justify the choice choices that it's making in the context of code as we'll see later sometimes that can mean add code comments explaining what you've done and why you've chosen to do it that way and then finally you can rephrase the question to ask it in a different way be more specific or provide more context so those are some tips to mitigate tat GPT hallucinating tat GPT is an amazing tool that if you remain just a little bit critical of the information that it's giving you congrat ulations go ahead and give yourself a nice pat on the back because you've learned a number of strategies for more effective prompt Engineering in this section we covered how to refine prompts with specificity context and Technical language we learned how to gain more refined control over the length and formatting of the ai's responses we've covered breaking down tasks and prompting iteratively optimizing prompts rulebased prompting and prompting by example I've included in this scrim a markdown file with a lot of the examples that we covered and you can go ahead and use this as a reference if you'd like to save it you can click on this little gear here and download the file as a zip you can then open it up in a text editor like VSS code next up in the next section of the course we'll go over ideas and strategies for using AI to accelerate your coding workflow I'll see you there now that we've gotten comfortable with all the facets of effective prompt engineering let's explore some ways AI language models can help you be a faster and more effective developer here's just a short list of some of the ways you can use AI for web development you can use it to generate project ideas plan projects write user stories and even Jura tickets you can generate code and code Snippets generate mock data debug get code review and suggestions for refactor convert code from one format to another like from python to JavaScript for example you can write tests and documentation and find that you can learn new technologies and advanced topics faster than ever before in this next section of the course I'm going to show you a wealth of examples and ideas for how you can use prompt engineering to generate code in a precise and incremental way as well as how to use AI to explore learn and study web development topics so let's go let's do it as we've seen in previous scrims you can accomplish a lot with a wellcrafted prompt by describing in detail exactly what the code should accomplish generating code from pseudo code is another effective strategy to maximize your specificity and finetune your results pseudo code is an informal way to describe what your code should do in plain English and that could mean a bulleted list of procedural steps or very simplified code that doesn't follow the syntax of any particular language and this tip is going to be especially helpful if you're wanting to accomplish a coding task in a specific way if you're trying to generate code in a language you're unfamiliar with or if you simply want to code without worrying about precise syntax so let me show you an example let's say I wanted to write a function to find a book in a book array by the book's ID my prompt will look something like this I'll start by specifying that I want the prompt to be written in JavaScript now I'll go ahead and start my pseudo code with something that pretty much looks like JavaScript I'll say I want to take two arguments a book array and an ID but now instead of writing a function I'm just going to do some quick pseudo code so I'll say for each book in the book array if book. ID equals the ID that we're passing into the function then return that book from the array else return an error object with a message notbook found that's my prompt and here is the result as you can see this is pretty much exactly what I asked for we are looping through the book array we're comparing each book ID to the ID that we're passing into the function and if they match we're returning that book and if we don't find trying to match we're returning an error object no book found I then want to be able to test this function so I'm going to write another quick prompt that is just generate some funny book mock data to test this function chat GPT returns some fun book data and I can test my function by passing in this books array and an ID of five so let's run and open up the console and that results in the book with an ID of five so we know that this function is working great so that's one method of pseudo code that we can do just basically it looks like code but with no formal syntax but I can also write pseudo code that is a little more conversational so for example here is another prompt where I'm basically asking for the same thing in a longer form write a JavaScript function find book by ID so I'm calling it find book by ID instead of get book this time and this function should take two arguments book array and the ID for each book in the book array compare each book array ID ID with the past in ID if found return book if not found return error object sorry no book found I'll copy and paste the function that chat GPT generates and as you can see it is almost exactly the same We're looping through the books comparing the IDS returning the book if we find it and returning an error if we don't find it I'll call this function with the same array of books let's try a different number how about book number four great and let's try it if we enter a book ID that doesn't exist we get an error message perfect we've covered in this scrim how you can quickly create and test a function using pseudo code to more finely controlled output if you'd like some practice here in index.js I have a few suggestions for functions you can prompt AI to generate with pseudo code so you want to write detailed pseudo code for the following functions and prompt jat GPT to write those functions for you we have a function that adds two numbers a function that adds all the numbers in an array a function that that looks for a user ID in a user array and returns an error if not found a function to count vowels in a string and a function that finds the highest number in an array go ahead and practice prompting with pseudo code if you want to and as I said before this is a really helpful strategy if you're trying to generate code in a language you aren't familiar with if you want to have more control over how a function is written or maybe you're still new to coding and want to work through the logic yourself and not have the AI do too much work for precise communication with chat GPT you can create a pseudo language which is basically an agreement that you are going to prompt chat GPT in a certain way and you expect it to respond in a certain way let me show you what I mean I'm going to come over here to this counter MD file and here is the prompt that I shared with chat GPT I want to build my own react component library with common components like form Fields nav barss and an accordion menu then I break down two instructions create a pseudo language similar to markdown that will help me quickly describe a react component so that you can convert it to example code respond with the template I can use as well as an example component keep the template and the component as simple as possible I added this last line here because in my experimentation chat tobt did tend to over complicate things here's the template it gave me this is our agreement of how I'm going to Define react components so that chat GPT can provide me with the code for these components I'm going to name the component I'm going to Define it State props what it should render and the event handlers that it has in this format under State I'll Define any and all state variables with their initial values under props I'll list all the props that my components will take with the prop type I'll describe what I want the component to render and I'll list event handlers with a Handler name and the description of what the Handler should do here is the example that chat GPT provided for me so it gave me a simple counter example we're going to keep track of one piece of State called count with with an initial value of zero as a prop we're going to take in an increment value which is a number the increment of the count so instead of incrementing by one we could increment by five or 10 or 15 or 7 or whatever we want to do the component should render a button that displays the current count and each click increases the count by the increment value which is the prop that our component is taking in finally we have an event handler called handle increment and that increases the count state by the increment value this is a fairly detailed description of what we want this component to do so let's see how it works I'll go to my counter. jsx file here's the code chat gbt generated I'll go to index.js and we'll import this component finally we'll render it in our app component run and see if it works excellent we have established a pseudo language with chat GPT to describe in detail the components that we want to build this does have its limitations chat jpt is only going to remember this agreement for so long so you will have to periodically mind it but this is just one more way that you can communicate with chat GPT with Precision let's try creating another component I'm going to go to my navbar markdown file and copy and paste in my pseudo language template I want to fill this out so that I can prompt chat GPT to create a simple navigation bar for me before I show you how I filled this out I'd encourage you to pause the scrim for a second and fill this out yourself think about how you would describe how to build a nav bar you can copy and paste this in the chat gbt and say hey this is the pseudo language I want to use to create react components and I want you to create a navbar component pause the scrim now and when you're ready come back and I'll show you how I did it welcome back I hope you found that educational let me show you how I approach this I'm going to start with my render statement because for me it makes sense to describe first what I want the component to do so I'm going to say that the component accepts an array of objects each representing a link in the nav menu I want each object to contain URL name and I'll give an example here like home about or contact us Etc and of course we want the URL we want our Navar component to render the list of links I know I want to keep track of which link is currently active so I'm going to have a piece of State called active link and that's going to keep track of the index of the menu item so I want the initial value to be zero I want my nav bar to take in an array of Link objects as I've specified here I'm going to refer to that as nav links and the prop type will be object then I'll handle clicks on the link and when a nav menu item is clicked I want its index to become the active link a better way to say this might be update active link with nav menu item index let's look at the code that resulted from this prompt I'll go to my navb bar. jsx file and paste it in we have this Navar which is pretty much exactly what I described it Loops through an array of navlink objects and for each renders a list item with a link which when clicked sets that link to active let's import this into appjs and try it out before we can test it out we're going to have to come up with some links to pass as a prop to the Navar I prompted gbt to generate this for us I asked it for some learning to code themed links here's what it came up with we'll pass the nav links array of objects to navbar as a prop just like that run here's a simple nav bar that we generated using a pseudo language with chat GPT this could use some styling of course but I think it's a pretty good start welcome to another challenge where you are going to develop a pseudo language with chat GPT to help you gener generate forms first you'll prompt chat gbt to create a pseudo language for creating HTML forms and secondly if you like the suggestions go ahead and use the pseudo language to create a form can ask for adjustments if necessary and if the pseudo language it comes up with is too complicated reprompt with an instruction to keep it simple I've noticed that this is an area where chat TBT tends to want to provide you with a very comprehensive solution it's going to account for everything you might possibly want to do with the pseudo language which is great but for the purpose of this exercise we want to keep it as simple as possible so it might be beneficial for you to instruct Chach BT to go for Simplicity go ahead and pause now and start working on the challenge welcome back I hope that went well for you here is my prompt create a pseudo language that will help me quickly describe to you how to provide sample code and styles for an HTML form respond with the template I can use as well as a sample element here is the pseudo language that chat gbt came up with so we have a form we can specify an action a mage method and the types of inputs that we want and within inputs we can specify a type label any attributes and styles and down here you can see we can also specify styles for the form itself so this looks pretty good to me I'm now going to scroll down a little bit and I'll show you the example that it gave me so we have a form where the action is submit form we're going to post and it has a text input for a username and a submit button and then also some styles to give it a border I'll show you the result when I use this pseudo language to make a prompt that I fed right back to chat GPT I'm going to go to the index.html and I'll go ahead and paste my form code here and into my CSS file I will paste the CSS let's go ahead and run and test this out and there we go a nice simple little form in just a few steps using this strategy you can create a session with chat gbt where you can use this template over and over to quickly and precisely create a number of web components just keep in mind that chat gbt's memory is short and you may need to remind it of your template after every seven or 10 interactions or so thank you for trying out this challenge fantastic work there's a lot to think about when you're writing a function there's so many edge cases that you need to account for and it can take a lot of practice to be able to identify what those edge cases are luckily this is something that chat GPT really excels at we can use it to identify edge cases and generate inputs so that you can test your function against those edge cases this strategy can be super informative and educational especially if you're new to programming so let's take a look starting in my remove dupes MD file I'm first going to prompt chat GPT to write a JavaScript function that takes in an array and returns a new array with any duplicate items removed I'll now jump to my remove dupes JS file and here's what that function looks like the function is creating a set out of the array because set automatically removes duplicates and then we're turning it back into an array using array. from so basically we're going to pass the array into set set removes all the duplicates then we're converting it back into an array and saving it to a variable called unique array and then returning that array where all the duplicates are removed returning to remove dupes let me show you my second prompt and that is list eight edge cases this function should account for and provide test cases for each you may want to ask it for all the edge cases or however many edge cases you want I specify eight edge cases just to keep it from going on and on and on this is gpt's response and it did include a definition of each which I erase just for the sake of brevity so the edge cases we want to account for are an empty array an array with a single element an array with all elements that are the same an array with different types of elements like num strings and booleans an array with nested arrays Chad gbt sort of disclaims here that the function that it gave us won't work as expected because JavaScript only allows comparisons of simple data types so so if we wanted to check for duplicate arrays we would need another solution the six case is an array with objects then a nonarray dealing with what the function should do if it receives an input that's not an array at all and finally arrays with special numbers like not a number and infinity it also included with this response an additional disclaimer the function provided doesn't handle nested arrays objects or nonarray inputs that's just fine for our purposes so let's return to remove dupes DJs here I made an additional prompt because I wanted the output to be in a specific format I asked for the edge cases in a single code block just for ease of copy and pasting and I ask it to denote the edge cases as part of the console log so here's an example of what I want each test or each Edge case to look like before we call the function inside the console log with whatever our test case is I want what we're testing for to be denoted as a string here are the test cases as you can see they're in exactly the format that I requested that's great so let's head to index.html really quick and I'm going to add remov dupes DJs as my script Source let's return to remove dupes JS run and see how we go and open the console here are all of our tests and our results this is really helpful cuz if you take a look at an array with a single element it's passing into one and we can see that our result is an array with one inside of it so we're dealing with that edge case as expected but take a look at nonarray inputs in which we're passing in a string and you'll notice that we have two T's a capital t and a lowercase T which this function considers two different characters so they are not considered duplicates depending on your purposes that's an edge case that you might want to account for let's do one more example I'm going to go up here to count frequency. JS and paste in a prompt as well as the function that chat gbt responded with so I prompted write a JavaScript function that counts the frequency of characters in a string this function creates an object it checks through every character in a string if it finds the character it increments the character count by one and if it doesn't find it it creates it in the Char count object what I'd like you to do is pause the scrim now and ask GPT for five edge cases and then test this function against those edge cases when you return I'll show you my prompt and output I'll see you in a sec welcome back hope it went well here is my prompt my prompt is what are five edge cases this function should account for please list the edge cases followed by a single code block with tests for those edge cases here's what it came up with because I have already requested a similar task chat GPT is going to give me a very similar format to before which is great that's exactly what I want you may have needed to tweak it a little bit that is completely okay I'm going to return to index.html and change my script source to to count frequency run and see our result in the console you can see the five test cases for these edge cases and their results as I said I think this strategy can be pretty helpful to almost anybody but especially if you're new this can be really really educational chat GPT can really open your eyes to edge cases and things that your function might need to do that you may have never thought about definitely use this to your advantage and join me in the next scrim to talk a bit more about test cases language models can be extremely helpful when it comes to testing your code it's great at coming up with random inputs with which to test your function it can help you write tests using test Suites like justest and can even help you refactor based on those tests here in my scrim I have this password Checker function it checks if a password is valid and a password is considered valid if it has 10 or more characters includes at least one capital letter and and contains one special character like a star an ampersand a dollar sign or an exclamation point say I just wanted to call this function with a bunch of different inputs to get a feel for how it will handle different inputs so I can ask for some really simple tests call the following function with 10 test inputs and console log the results and then I have an example of what I want the console log to look like I want to call the function with a random input and I want a label that lets me know what input went into this function and then of of course I reference in my prompt the function that I want to test let's take a look at gpt's response as you can see it's made up 10 random passwords some of which are valid and some of which are not let's open the console and run this and we see the output of our various tests as I said GPT can also generate tests for specific test Suites and head over to my is even JS file we have this really simple function that takes in a number as an input and uses the modulus operator to to divide it by two to determine whether or not it's even if I wanted to generate some just tests for this I can prompt to chat GPT something like please write eight tests for this JS function using just it spits out some functions using the just syntax and also makes some really good assumptions about the types of input and edge cases that we should test this function with for example it tests with zero with positive numbers negative even and odd numbers and so on now say that I wanted to generate some test that look like just but I want to be able to run them quickly in my browser or in a scrim to do that all prompt please write 10 tests for this function that look like Jess but that I can run in my browser and then going to reference the function that I want it to write the test for and it responds certainly here's an approach for a very basic just like testing setup that you can run in your browser's console we have a test function that is going to run a test callback and print the result of each test with a check if it passes and an X if it doesn't pass we'll take a closer look at this in a second but it goes on to make a bunch of just like tests for all sorts of inputs decimals negative decimals positive even numbers negative odd numbers and even a string and note down here that it says JavaScript is a dynamically typed language and does type coercion so 12 the string is coerced to 12 the number which means that the string 12 will return true as our function is currently written let's have a closer look at the response in the scrim copy and paste here we have a couple of helper functions that help us to create a justlike environment and a bunch of tests so I'm going to go to my index.html I'm going to make sure that the right script is uncommented then we can return to is even and run these tests all of our just like tests have passed but once again this draws my attention to the fact that the string 12 will be coerced into the number 12 and therefore will return true as my function is written so based on the results of my tests let's say that I decide that I actually don't want that to happen I want my function to only accept numbers as input so to GPT I'm going to prompt please refactor my iseven function so that string inputs are invalid it suggests a couple of Alternatives one where it returns false if the input is not a number and one that will throw an error if the input is not a number with just a couple of prompts I've been able to generate a test suite and refactor my function to cover more test cases based on the results of that test Suite I'm going to choose this first alternative which will return false if the input is not a number let's go back to the scrim and I'll comment out our old function and copy and paste in the new function let's run the test again and now this last test doesn't pass let's scroll down to this test and I'm going to change this because I now expect that is even will return false if the input is a string and so I would expect that when is even is called with the string I would expect that to be false I can run again and all of my tests are passing this has been a few ways that you can use a language model to generate all sorts of input data and tests and also refactor quickly and with just a few prompts in this little challenge you'll jump in and use chat GPT to test a function and generate some edge cases especially for you new developers out there this is great practice getting familiar with all the different possibilities your functions may need to account for so here we have a small function that takes an array and a chunk size and returns a new array of subarrays for that chunk size so here's a little example we have this array containing the numbers 1 2 3 4 we ask for a chunk size of two so this function then splits up the array into two arrays with two items each so the first thing I'd like you to do is go ahead and read through the function make sure that you understand what it's doing then ask chat GPT to generate some test inputs for your function just so that you can make sure that it's working correctly then you'll ask chat GPT for five edge cases go ahead and read through those edge cases that it generates and pick a couple that you want to revise your function to account for some of the things that may involve infinite Loops so don't jump right in running the edge cases be sure to read through them and revise the function first once you've chosen a couple of edge cases you'll ask chat GPT to revise the function based on those edge cases and you'll want to make sure to instruct chat GPT on how you would like to deal with those edge cases whether that's returning humanfriendly errors or returning false or returning one single error saying something went wrong it's up to you how you would like to handle errors so go ahead and end pause now and start working through these steps welcome back let's go ahead and generate some test cases I'm going to delete this example test case we have here and my prompt was call this function with three test inputs and console.log the results and I included the function in my prompt here are the test cases that chat GPT came up with we have three test cases the first is an array with nine items and we're asking for a chunk size of three and our expected output is that we split this array into three chunks of three items each in the second we have some strings and we want a chunk size of two but since we have five items we end up with two items being chunked together in an array and then one item by itself and in the third test case we are asking for a chunk size of one so each item in the array ends up in an array all by itself so that looks good let's go ahead and now generate some edge cases going to scroll down so we have a little bit of room and here was my prompt kept it simple generate five edge cases this function should account for and again I copied and pasted the function along with my prompt chat gbt suggested following edge cases if the input array is null or undefined so if we get a null instead of an array if the chunk size is zero or negative that's going to cause an infinite Loop because if we look at our function we're incrementing I by the size of our chunk each time so it won't increment and we'll keep going and going and going not exactly what we want and then finally an edge case that we might need to account for is if the chunk size is null or or is not a number so for example if we tried to input the string two so I can see from these edge cases that we're going to have a problem if this function is called with types we aren't expecting if the first argument isn't an array or if the second argument is anything but a positive integer based on that knowledge here is the prompt that I gave chat GPT to ask it to revise the function my prompt was revise the function based on the edge cases above and I'm saying above here because I am still in the same session with chat GPT so I can count on it knowing the function that I'm referring to throw a userfriendly error if the first argument is not an array or if the second argument is not a positive integer so up here I'm going to delete my old function and replace it with my revised function designed to deal with these edge cases let's run this with our current test cases looks like we're getting our expected results with this revised function so that's great now let's scroll back down and uncomment these edge cases so we can test them one by one the first argument is null let's go ahead and comment out these tests just so we can see clearly the first comment is null then we get the error the first argument must be in Array that's great test the second one this is the one that was in danger of causing an infinite Loop so instead we get an error that says the second argument must be a positive integer great that's what we want now let's test what happens if the chunk size or the second argument is null we get the error about the second argument we get that same error if we try to enter a string or anything that isn't a positive integer in this Grim you've practiced using chat GPT to test and generate edge cases for a function so really great job I hope this will come in handy for the future perhaps you've already discovered in your experimentation with chat GPT and other language models how easy it can be to find errors and bugs in your code for example I have this function here and it takes some information about blog previews and it uses it to construct the HTML for a Blog preview element so as you can see it takes in a parent ID a card ID a card class a title and some content and it makes HTML elements that look a little something like this however without having any idea what this function does I could copy and paste it into chat GPT and say hey chat jpt what's wrong with this function and it will indeed come back with a list of everything that's wrong with the function and it'll even correct the mistakes for you in an easily copy pastable code block don't look at this for too long it contains spoilers this is a perfectly great strategy as long as your code isn't too complex what I'm going to suggest you in the scrim is a strategy to get language models to communicate with you about errors in a way that's going to let you better keep track of the changes that chat GPT has made so what I'd like you to do now is prompt GPT to fix the errors in this function by using these steps first run the function and copy and paste any error messages that you might get into chat gbt along with the function then I'd like you to ask the AI to explain the errors to you as code comments this can be a good thing to do because it helps you keep track of what's going on with your code and also making chat GPT break down the changes and explain them is going to help you minimize the chances that it will make a mistake as we've discussed the more you can break down a task the better so go ahead pause the scrim now and debug this function welcome back hopefully you have some nice blog previews in your mini browser let me show you what I prompted so my prompt was this function should return the HTML for a new blog preview post so I'm being really clear about what I expect the function to do and I go on to save but instead I'm getting the following error and I copy and paste my error and then I res followed with please fix the errors and explain the fixes with code comments chat TBT responds with the following I have a couple of problems in your code here is the correct code but rather than spitting out the corrected code or giving me paragraphs of explanation about what it changed it's right here conveniently in the code comments let's have a look at this in the scrim I'll go ahead and delete my old code and replace it with the new so I know after taking a look at this that I forgot to call get element by ID as a function and I didn't pass anything into it I was trying to append the content of the card incorrectly and I had an error down down here because of the way that I was incorrectly calling get element by ID chat TPT provided an extra paragraph explaining what happened if you would like to pause and read that you're welcome to I actually found the code comments a little hard to read so I amended my prompt a little bit right after please fix the errors and explain the fixes with code comments I say comment out the old code rather than replacing it so I can better see how you fixed it gbt then responds first with a list of of issues that it addressed this is helpful for understanding the problem if you want to read through it but let's see how this amendment changed chat gpt's code output going to go ahead and replace my function again and let's close the console so now we have the old code so this was our old line of code and you see that we are assigning document.getelementsbytagname ID with parent ID as an argument so this is the corrected code and this way we can compare the old code to the new code to really understand what happened these are just a few examples of how you can tweak your prompts just a little bit to get some really incremental and helpful information out of chat gpt's responses see you in the next Grim AI can be so so helpful at performing a variety of timeconsuming detailed rote tasks and one of those tasks is code conversion let's look at a few examples I can give the AI an API call and ask it to convert it to python I can convert from language to language for example this is an API call in JavaScript and I'm asking chat jpt to convert it to Python and this is what that looks like I can also this is one of my favorites convert CSS to Tailwind I just have this blob of CSS as part of my prompt chat GPT spits out some Tailwind this came in really handy recently when I was working on a project the tailwind and I just wanted to make a small change without having to learn it right away real time saer I can also convert CSS to a styled component in react this is a really easy and often accurate conversion that I have found myself using a lot you can also convert data from one format to another so here I have a CSV file about sitcom from the 9s and I want chat GPT to convert it to Json note that I do have to give it some instructions so that the Json looks how I want it to so I instruct it to lowercase and concat the headers these are the headers title main actors year and average rating and if it is two words I have asked chat chbt to convert it to one snake cased word I've also requested that it convert the main actors's column to an array so I want an array of actors and I've also specified a type that I want for the year and average rating columns and note that this is also serving as an example of what I want the column names to be and quick as a flash I have converted the data to Json with the specified property names and types to review here are some of the ways that you can use AI to convert code from one thing to another you can do language to language like JavaScript to python file to file format like CSV to markdown or to Json framework to framework like converting a react component to view this can be really helpful if you're trying to pick up a new framework maybe you have a piece of react code that you're really familiar with and you want to see what that looks like converted to view so you can start to use view there's a lot of possibilities here and then of course my favorite chat gp4 in particular is a really great CSS converter CSS to scss or to SAS or to Tailwind or styled components again a lot of stuff you can do I'm sure there are a lot more ways that you can use this capability so keep this in mind as you're considering ways to make your development tasks faster here I have a little application that ideally when you click on this Blast Off button will count down from three and send this little rocket blasting off into space unfortunately the spaceship can't launch because it's programmed in jQuery and Tailwind which our scrim is not currently set up to handle so here's your task you'll want to prompt chat GPT to convert the jQuery to plain JavaScript and the Tailwind code in index.css to plain CSS then you'll click last off to see if the button works and if you've converted Ed it successfully clicking the blast up button should start a countdown timer and the rocket ship should take off when the countdown reaches zero go ahead and pause the scrim now and work on this challenge welcome back hopefully you have liftoff here was my prompt to convert the jQuery to plain JavaScript pretty simple please convert this jQuery to plain JavaScript and then I copied and pasted the jQuery code in with my prompt I'll go ahead and replace my jQuery with my converted plain JavaScript code we're selecting various elements in our HTML adding an event listener which starts a countdown on click and also calls this rocket blast function which uses the transform property to move the rocket off screen that looks good let's now go to our index.css and convert this Tailwind code my prompt here was also pretty straightforward please convert this Tailwind code into an external CSS stylesheet I'll go ahead and replace this Tailwind with my output from chat jpt so you'll see that it has styled everything nicely for me and now this should work so let's click run and the Blast Off button to see if this works 3 2 1 zero we have liftoff which means we've used chachy BT to successfully convert the code great work it might seem like there's not too much to say about documenting code with AI you can use chat gbt to document a function or other small bits of code simply by copying and pasting the code into the prompt and saying hey document this for example take this little function that creates SEO friendly slugs if you're not familiar a slug is a unique identifier for a link to a web page and if it's optimized for SEO it uses keywords and is often quite descriptive here is our AI generated documentation and as you can see this function takes the title of the web page and converts it to a slug you can see down here in this little example that if you pass it the string hello world it's going to return hello world with no capitalization and a hyphen between it and this would become part of a URL to uniquely identify the hello world page so with chat gbt you can request specific formats of documentation like we've requested JS Doc and so it's going to document the parameters that the function takes as well as a description of what it returns and its type it also really neatly describes everything that the function is doing so it converts the title to lowercase it trims the leading and trailing whites space it replaces symbols and other nonalpha numeric characters like commas or quotation marks with hyphens and finally it removes any leading or trailing hyphens so that is some nice thorough AI generated documentation another example of a specific format you could ask for documentation is prompting GPT with a react component and asking how do I document this using storybook and then chat GPT will provide you with some boilerplate code and you can start having a conversation with it about how you might do that so documentation is pretty much as easy as asking for it so Ai and language models really excel at helping you create all sorts of different types of documentation mostly for smaller bits of code like isolated functions and the like but here's a fun little strategy for when you have a longer piece of documentation you'd like AI to help you with I'm going to prompt chat gbt to interview me about my thoughts and opinions on style conventions and best practices and I'm going to have it use my answers to generate a style guide so my prompt is I want to create a simple JavaScript style guide guide ask me 10 questions about best practices and style conventions and use my answers to write a style guide chat gbt says great here are some questions it ask me 10 numbered questions so pretty standard stuff like do you prefer constant let over VAR should we use semicolons what maximum line length do you prefer single quotes double quotes the dreaded tabs or spaces debate Arrow functions and so on so the way I'm going to answer this is I'm going to create my own list from 1 through 10 and answer each and notice that there are places in my answer where I defer to the wisdom of others so for questions five and six I say use whatever is in GitHub style guide and for number nine which is what is your position on trailing commas and objects and array literals I'm just going to say go ahead and use whatever is in Google style guide keeping in mind that this will be information from chat gbt's cut off in 2021 it is pretty cool though that I'm able to pull in other sources here to create my own style guide here is the response to my answers it's my own little style guide and now that I have this file I could ask chat jpt to convert it to markdown or something so that I could put it on GitHub although fair warning it doesn't do markdown perfectly because the response text is already formatting and that tends to cause issues but the point is that in just a few minutes I've generated at least a starter document for a project that most likely would have taken me much longer if I were doing it manually or maybe if I worked for a small team at a busy startup I may not have ever done documented anything at all as a developer I've spent probably years of my life pouring over code that is minimally documented or not documented at all so let's all keep this tool in mind and put those days behind us happy documenting AI can be a really powerful tool for learning in a personalized and interactive way in this scrim we'll talk over a few quick tips on how to use a language model like chat GPT to learn a new topic or technology as well as create highly tailored learning experiences so for example you can use chat TBT to summarize and explain info in a variety of ways find learning resources create a study guide Andor a study schedule and also to test yourself so let's go over these one by one and look at some examples as far as explanations and summaries go my advice is to start broad by asking chat gbt about a general topic then drilling down into more and more detail as you're exploring a topic you can instruct chat GPC to summarize information and provide explanations by specific Audience by specific experience or skill level or by asking for metaphors and specific examples so let's say I've been studying JavaScript and I'm ready to tackle more advanced topics I can prompt something like please suggest four Advanced JavaScript topics that every junior or intermediate developer should study the result is a long list of advanced JavaScript topics that I can study like asynchronous programming Advanced Dom manipulation design patterns functional programming whole bunch of stuff so I'm going to go ahead and pick one let's concentrate on async programming here in the explanatory paragraph it says familiarize yourself with Concepts like callbacks promises and async aake so I'll just start with please tell me more about callbacks explain the concept as if I'm a beginner and include a code sample so I'm requesting a specific audience and a specific example we get a nice explanation of callbacks that is relatively simple and jargon free along with a couple of simple examples let's say I read through this explanation and I still don't quite grasp it I can ask chat TBT to use a metaphor or provide use cases I still don't quite understand can you explain callbacks using a metaphor and can you provide a couple more use cases the AI comes up with this metaphor of a waiter in a restaurant being like a callback you can go ahead and pause the scrim if you'd like to read through this and then it gives us a couple more examples like reading a file asynchronously and making an a API call but what if I really really still don't quite understand or more realistically what if I want to start with a shortest most simplified conceptual explanation that I could get one strategy is to ask chat TBT to explain something to you like your five which is a really popular thing to do on Reddit there's a whole subreddit called explain to me like I'm five so I'll prompt please explain JavaScript call back functions to me as if I am 5 years old AI comes up with this example about you're a kid playing with your toys you can can go ahead and pause if you'd like to read through it another helpful strategy is to ask for an explanation based on a specific audience or skill level or Persona or all three as in this example you are a senior engineer and I am a junior engineer please explain JavaScript promises to me in detail so you'll notice that if you pause and read through this example the result is a quite long and detailed explanation of promises that is more Technical and detailed than than the explanations that we've gotten so far because we've been really specific about our skill level and the skill level of the Persona that we want to have explain the concept to us this prompting strategy can be really helpful for learning especially if you're a person like me who needs a variety of different explanations to really grasp a new subject finally you can ask for explanations using very specific examples so say I want to learn more about JavaScript classes but I don't want to look at another Fubar or car example because they're so common so I can prompt the AI explain JavaScript classes to me using an example class called pet then I can get an explanation that gives me a pet example or if I want to have even more fun I can say explain using mythical creatures like dragons and unicorns and chat GPT explains classes to me using this mythical creature class where we create dragons and unicorns named Smog and Twilight just a way to keep it fun especially if you're not a big fan of arbitrary Fubar examples so that's it for this scrim we've talked about how to learn with AI by exploring broad topics and drilling down asking for summaries and to explain info in a variety of ways now join me in the next Grim to discover more ways to learn with chat gbt including how to find learning resources create study guides and test your knowledge welcome back we've talked about strategies for getting info from chat GPT in a more personalized and tailored way now let's talk about a few more ways that you can use chat GPT for learning this includes finding Learning Resource creating a study guide or a study schedule or using the AI to test your knowledge you can use AI to find articles blogs YouTube videos and whole platforms like scrimba for example just about anything you're interested in learning so for example I could prompt something like list five great articles I can read to understand dynamic programming this can be any number of Articles and any topic another thing you could do is prompt for articles that are targeted towards beginner or intermediate or Advanced Learners on a certain topic so asking for articles will yield not only the links but short summaries of the Articles which can come in very handy and it's not necessarily something that you could get from Googling or I could ask for YouTube videos or Forum posts or book recommendations and again get a list with some links I could also ask for a mix of videos Forum posts blogs basically whatever I want you could argue that this is a lot like Googling but I think first of all it's nice to have all this information in one place and I think it's a little easier to tailor your list of learning mat materials to your specific needs and skill level without having to do a ton of searching AI can also help you structure your learning for example I can use it to create a study guide or a schedule so here I'm prompting write me a study guide on typescript including outside resources for further study assume I already have a strong grasp of JavaScript so I'm requesting a topic I'm providing more information about the kinds of information that I want and I'm specifying a certain skill level or a certain level of knowledge and it gives me this beautifully formatted study guide for typescript that is broken down by topic and subtopic we also have some Advanced topics learning typescript with framework some books additional tips and so on pretty useful I can then follow up this prompt with something like based on the study guide please create a study schedule for me assume I want to spend about 10 hours a week studying the topic for each study session include the topics I should study along with additional resources and practice exercises and this gives me a really really nice study plan broken down by week and by session and also links to resources where I can read about these suggested topics so this could come in really handy if you need to learn a new subject and you're not sure where to begin this probably isn't going to replace a curated course or even a really good YouTube video but it is a place to start if you just need a little bit of structure to your study now I have a warning as you are seeking resources from chat GPT or really any other language model keep in mind that that asking for resources there's definitely a danger of the AI hallucinating giving incorrect info outdated sources especially in the case of chat GPT because as we have discussed at the time of this recording it only has access to information from November 2021 and nothing after that there's also a danger again of hallucinating and completely making up nonexistent sources so just keep in mind that this strategy is a good place to start but right now ai model are often too wrong too unpredictable and too outdated to be anything but a supplementary learning tool so always take the time to fact check and seek out multiple sources now let's go to our final way to learn and that is testing yourself so this is as simple as prompting something like I've been studying typescript generics quiz me on my knowledge all we need is a specific topic and a request for a quiz chat gbt does exactly that I could also say something like give me five small coding problems to practice practice and test my knowledge of some topics such as higher order functions in JavaScript and it generates some map filter and reduce problems that we could use for practice so in the last couple of scrims we've talked about the various ways that you can use AI to study web development including strategies to get more specific and tailored responses ways to create learning schedules finding resources using AI to help you structure your learning and testing your knowledge I hope you found this useful and see you in the next scrim time for a bit of review and practice we've just talked about how you can use chat GPT to study web development and here's some of the stuff we covered you can start with a broad topic and narrow it down you can request explanations based on a specific audience skill level or experience level you can request specific examples to help you better understand Concepts you can request learning resources like YouTube videos and articles and finally you can generate study plans and practice questions here's a quick opportunity for practice I won't be going over the solution for this because it's going to be very particular to you but what I'd like you to do is first ask chat TBT to quiz you on your react knowledge based on your skill level keep going with your quiz until chat GPT asks you a question that you're not sure about or don't know then go ahead and use the steps above to learn more about that topic until you feel confident giving an answer chat GPT is a really great tool for learning so I do hope that you tried this out and I hope you find it very educational a big part of frontend development is learning and interacting with a variety of restful apis and using AI language models is a fun and interactive way to explore the possibilities as I walk you through an example of how to explore apis and generate API calls we're going to switch it up a little bit and use bar which is Google's interactive AI to go to Bard and try it out yourself you can go ahead and click on this image and it will take you right to the site so your first question might be what is the difference between Bard and chat GPT and when might I use one versus the other so here are some key differences at the time of this recording Chad gpt's training data in other words all the information that it has access to stops in late 2021 in other words anything that's happened since then chat jpt has no idea about B on the other hand has access to uptodate and current information it's also said to excel at simplifying information and being conversational there are a ton of chat GPT versus B articles out there so I'll let you make your own decision about that but what we do know is that Bard has access to uptodate current information so it's great to use when you need to find out information that's timely for example I can ask it what's the most popular frontend framework today and it responds with as of June 2023 and that is the year and month that I'm recording this scrim the most popular frontend framework is reactjs and then it goes on to give us a bunch more relevant information for this reason Bard can be a great tool to explore API documentation because it's changing all the time and we want to make sure we have the most updated information I unfortunately learned this the hard way by trying to ask chat GPT questions about open AIS apis it gave me outdated information and I ended up spending a ton of time debugging so all that said let's use Bard to explore the GitHub API starting off here's an important tip when you're using Bard you'll get the best results if you're very direct about telling it exactly what you'd like it to do so I started off by prompting I want to explore the GitHub API what are 10 end points I can access and Bard responds I'm not able to help with that as I'm only a language model I think maybe what hangs it up is the fact that I sort of asked if I can access 10 end points so so I'll revise my prompt a little bit and say please help me explore the GitHub API list five available endpoints and what information I can get from those endpoints and as you can see this time Bard is able to provide me with the list of endpoints to get information about repos issues poll requests commits and branches and also list what I can do with him so the repost endpoint is useful for finding out what projects a user is working on issues can be useful for tracking the progress of a project and finding out about any bugs or problems and so on so now that I have an idea of what I can do let's say that I want to get some issues from a specific repo I'll ask Bard please write an example API call showing how to retrieve issues from the core react repository then I'm going to specify that I want to use fetch because it does tend towards using the axios library B generates me an example API call so let's paste it into the scrim and see how it works so it's given me the URL to Facebooks react repo set up my fetch options gotten the response for me as Json and then it says I can do something with the issues so for now let's just console log the issues see if this works I'll run and open the console and the response is a bunch of issues from the react code base Bard goes on to say here's an example of how the issues object can be used to display a list of issues so here is some sample code that if I create a UL class called issues list then I can Loop through each issue create an Li element get the title of the issue and append it to my UL so let's do that I'll get rid of my console log and replace it with some code to create a list then I'll make sure to grab this issues list that we're trying to append list items to and in the body I will create a UL with the class of issues list let run and open up the mini browser and in just a couple of seconds we have written an API call to retrieve a list of issues from the react codebase and display them pretty cool I can continue to explore the API by asking for different information from a different repo so I'm going to say Show an example of how to request the star count of a repository from the GitHub API use free code Camp's main repository as an example and also use fetch this gives me an example API call for how to get the star count of any repository that I want but also a specific repository to test this out so let's do that I'll go back to index.js and I'm going to comment out my first API call and we'll paste the new one in here and run go ahead and minimize this and we'll open up the console and it looks like free code Camp has 368,000 stars impressive so now that I've explored the API a little bit I can start getting more specific and more complex about what I would like from the GitHub API so this time I'll prompt I would like to build a tool that interacts with the GitHub API where I can send a search term and get back the name star count and URL of the top five matching repositories with the most stars can you give me an example API call using JavaScript and the fetch API C gives me an example function that takes in as search term uses the GitHub api's search feature to search the repositories for my term then grabs the first five and gets all the information from it and console logs it so let's try out this code I'll comment this out paste the new code and then I'm going to need to call my function with a search term which I'll do down here call this with the search term react run and open the console back up again and we get five repository names star counts and URLs I do think we have a little bug here I don't think that this is the top five with the most stars I think this might be the first five that the API returned but this is a good lesson in staying Vigilant paying attention to what the code is doing and making sure that you know how it works and that it's doing what you expect that is how you can use a language model to start exploring an API as you can see it's not necessarily a good replacement for reading the documentation but it is a fun and interactive way to get to know a new API and start using it right away have fun seeing what you can do with Bard and the GitHub API and I will see you in the next scrim hello again in my last traditional software engineering role I had a wonderful coworker who I could go to with all of my questions about git and GitHub and that was great for me because Version Control can get so complex lucky for us now everyone can have a Version Control expert right at their fingertips and of course that expert is chat jpt let's look at a few examples of how chat jpt can be a huge help with Git and GitHub you can ask it to remind you of everyday commands like what's the get command to create a new Branch you can lowkey ask it to explain Version Control Concepts to you with prompts like my tech lead has ask me to rebase my Branch but I don't know what that means can you explain chat gbt without judgment will say certainly and explain rebasing in as fine a detail as you require you can ask questions about using Version Control with specific Technologies like how do I resolve merge conflicts using vs code and again it'll give you stepbystep instructions for how to do that you can ask it to help you problem solve specific scenarios such as I want to open a pull request but I only want certain commits to be a part of this pull request what can I do you can get as detailed and specific as you want and chat GPT is still going to help you out so this prompt is very very specific to my situation I say give me a stepbystep guide to submitting a PR for an opensource project I've cloned the repo locally my branch is called blah blah blah fix broken link and I want to PR into the main branch of a project called super awesome project as you can see down here it's giving us some commands that are personalized to the information that we gave it very very handy also notice that we have a very detailed stepbystep guide here that'll walk you through it in much more detail than maybe even a coworker would this can make once intimidating tasks like trying to contribute to an open source project that much less intimidating can also help you write pull requests if you're work workplace or the project that you're working on doesn't already have a process for how they want pull requests to be written I find this to be a really helpful prompt ask me questions about my PR and use my answers to generate a PR description it then generates six answers what's the purpose of your poll request what issue or feature does it address what specific changes did you make are there any important considerations or instructions for reviewers have you tested your changes and do you have any additional comments or information that would be helpful for the reviewers so I answer each question one by one and enter that as a prompt and here is a full pull request description in just a couple of minutes it's a super timesaver so next time you have a question about Version Control git or GitHub keep chat GPT in mind see you later so you finished an amazing project and now you need to figure out how you're going to get it up on the internet this is another area where language models can be extremely helpful deploying is an area where the information tends to change quite a bit so we're going to use Bard for this scrim to make sure that we have the most most updated information on how to deploy let's say that I'm not even sure at first where I want to deploy my project or what I can even use so I'm going to start with the prompt list five Services I can use to deploy a frontend project we get back five suggestions here netlify versell Cloud flare Pages GitHub pages and surge.sh let's say I read all of these and the ones that I'm most curious about our versell and GitHub pages I can then dig down a little deeper with the prompt what are the benefits of deploying an application on forell versus GitHub pages so we can see quickly that forsell has automatic deployments free SSL Sears performance and integration things where GitHub Pages has free hosting a simple setup and integration with GitHub which makes it easy to manage the website from within GitHub it then goes on to even create a helpful table comparing the two so once I've made my decision let's say I want to keep it simple and I want to use GitHub Pages now I can drill down even further with the prompt please give me a stepbystep guide on how to deploy my project with GitHub pages so we get a full stepbystep breakdown with some additional details about each step so I read through this I get a little bit familiar with deploying to GitHub pages and now I'm asking myself well what if I have a react project so I can ask for more information my prompt is is there anything special I need to do to deploy to GitHub Pages a react project versus an HTML CSS JS project and Bard says yes there are some things that you need to do like building your files configuring GitHub in a certain way EX ET so you can start to see how you can use a language model to get the sort of information that you're looking for from here I could ask the language model to tell me more about what a build process is or more about how to configure or really anything that I'm curious about I'm just going to keep asking questions and that's how I can sort of run my own investigation about the specific tasks that I'm trying to accomplish because Bard has access to the internet and more updated information it's also good for asking about specific services so say I have an old Heroku project and I know that I had at one point deployed it using the CLI but I can't quite remember how it works and this is definitely a true story something that's happened to me before so I could say something like list some commands I can use to interact with the Heroku CLI to deploy a project and it'll remind me of all the things I can do very handy I can also ask it for advice on comparing different deployment services like for example should I use netlify drop or netlify continuous deployment it explains what those two things are provides a table that compares them along with some advice about some additional things to consider when I make my choice so let's say I choose continuous deployment with Neto I can then ask how do I set that up and again it'll give me some really handy stepbystep instructions I'd like to point out here too that you can use this technique not just for deployment but for anything that you're unfamiliar with the idea is to start Broad and drill down into specific subjects as your needs require happy deploying I'll see you in the next grim let's talk about an important skill when using AI to assist with your coding and that is knowing when to stop AI tools like chat TBT can be a huge help but there comes a certain point where they can start getting in the way and becoming really frustrating let's go over a few examples number one when you aren't getting the results you want after several iterations if you f tuned to prompt several times and simply aren't getting the results you're aiming for it might be time to take a step back number two this is a big one when you no longer understand the code if you're finding that the code generat by AI is so complex or convoluted that you're struggling to understand it that is a really good signal to pause related to this is being caught in a cycle of what I like to call copy paste and prey this is the term I use to describe the following scenario you've had the AI generate code for you and the code has some errors you've asked AI about the errors and the AI spits out more code and that new code may or may not have fixed the original error but has introduced a new error so you ask it to fix that error and before before you know it you're copying and pasting big swatches of code into the AI without a solid understanding of what the code is doing a really good sign of this is if the AI is saying things like apologies for the misunderstanding or I see the problem now over and over again but it's not actually helping you move forward this is why I can't stress enough it's really important to take the time to read and understand what any code you generate with AI is doing it's really easy to get trapped in this Loop another time it might be time to step back from AI is when the AI seem seems dumber than usual sometimes for reasons I can't explain an AI language model will just seem off the answers might be off base verbose or less coherent than usual or just missing the mark and this could be due to many reasons including the way that you're phrasing your prompts or some underlying issue with the AI when this happens best give it a break and lastly when the AI seems forgetful AI models like chat tobt don't have a memory in the same way humans do so if you notice the AI seems to be forgetting the cont text of your interaction or not following the logical sequence of a conversation it might be time to prompt with reminders or the specific code that you're working for or asking for stepbystep instructions so remember that AI is a tool not a replacement for your own understanding and problem solving skills take the time to read your code and know when it's time to take over as a human being and stop relying on the AI for help well done for finishing the second of three for this prompt engineering course we've covered a lot of ideas and strategies for how to use AI language models in Daily coding tasks to free up time and improve your productivity we've learned that you can use AI to accomplish a huge number of tasks to generate project ideas plan projects write user stories and jur tickets generate code and code Snippets generate mock data debug get refactor suggestions convert code from one format to another write tests and documentation and learn new technologies and advanced topics faster in the the next and final section of this course we'll talk about how to use AI to make job searching a little easier great work so far and I'll see you in the next section hello again this next section of the course covers a variety of tips and strategies for leveraging AI during a job search we're going to cover ways to generate learn and practice common DS and algo problems use rolebased prompting to simulate a live coding interview generate and practice behavioral interview questions and write and personalized job docs such as resumés cover letters and elevator speeches come with me to learn how to use AI to tailor your resume talk yourself up and interview like a champ the live coding interview is arguably one of the most intimidating aspects of becoming a developer in these interviews you have a limited amount of time to solve an algorithmic coding challenge while sharing your thought process allowed in front of another developer for the next few scrims we're going to talk about how AI can help beginners learn learn about solve and optimize easy level lead code style algorithmic coding challenges as well as help you practice and improve Live code interviewing skills before we start I have a couple of small disclaimers first of all these strategies work much better with chat gp4 and Beyond I've noticed that version 3.5 and below is much more prone to Broad unhelpful or verbose answers or misunderstanding what you want it to do or simply giving you the solution even if you specifically ask it not to so if you can and you want to follow along with me I recommend using chat GPT 4 or newer my second disclaimer is that these strategies are also best for easy and maybe some medium level lead code questions even for the newer versions of the language models the more complex the problem the more likely AI is to make mistakes and get things wrong if you're a relative beginner at leak code style challenges then this scrim is for you so if your desire is to get better at data structure and algorithm problems here are all the ways that you can use chat GPT to learn and improve firstly yes chat GPT can just solve a challenge for you directly you can definitely just dump an algorithmic coding challenge in chat gbt and it will solve it for you at least most of the easy and medium challenges but it's my opinion that learning DS and algo problems with AI is best done iteratively and incrementally so you can use AI to generate code challenges generate pseudo code or stepbystep instructions for how to solve the code challenges you can learn about and analyze sample Solutions and one of the most helpful things in my opinion you can use it to study common patterns for solving algo problems more about that later let's start by asking chat gbt to generate some algo problems for us so my prompt is going to be give me three easy level algorithmic coding interview problems chat GPT suggests these three problems the two sum problem reversing a string and palindrome number I'm going to choose the two sum problem as an example because it is fairly common and it's one of the first problems that you'll run into when you're studying leak code style problems now because our goal for this course is much more about learning how to use AI to solve algo problems and not learning about any specific problem I'm not going to go into too much detail about what the tuome problem is and how it works and how you solve it but I do have suggestions for how you can use AI to to start to learn and familiarize yourself with these types of problems first I prompt chat GPT for a short short explanation explain the goal and solution of the two suum problem to a beginner in 150 words or less if this is a really new subject for you I would recommend that you pause the video here and read through this so go ahead and do that now if you need to but here's the gist two sum is an exercise where you look at an array of numbers and you want to find a pair of numbers that adds up to a Target so in this example our Target is nine so we would want to write a function that looks at all of the numbers in the array and figures out if they add up to nine this is easy to do by site with a small array 7 + 2 is 9 and you'll notice that part of the problem is to find the indices of the two numbers so the index of two is zero and the index of seven is one so we would want to write a function that returns 01 the index of the two numbers that add up to the Target to understand this problem further I could ask the AI to generate an explanation in a variety of tones or ask it specifically to use example and metaphor so I could write a prompt like please explain the twosome problem succinctly using a metaphor It won't always come up with a great metaphor this one is a little iffy but it's basically uses the metaphor of trying to find two items at a yard sale that add up to exactly the amount of money that you have if you're the type of person who learns best from real world examples you could also prompt something like please explain the toome problem using a real world scenario so it says imagine you're at a supermarket doing your grocery shopping you're trying to stick to a budget and you only want to buy two items for dinner you have $15 and your task is to find exactly two items that add up to $15 of course in real life it might be okay if you went to the grocery store and only spent $14.97 but sometimes putting these types of problems that can feel a little arbitrary into a more real world scenario can help you with your understanding so definitely something that is worth giving a try so after you have taken some time to understand a certain leak code problem you can also use the AI to start figuring out how to solve it one of my favorite ways to do that is to ask for pseudo code pseudo code can mean stepbystep instructions for how to solve a problem or it could be as detailed as something that looks like code but doesn't quite have the syntax of an actual programming language and I'm going to show you an example of both so my prompt is give me pseudo code that will help me solve the following algorithmic coding problem that I'm going to include as part of my prompt the problem statement for the tuome problem I'm going to ask that chat GPT assume that I will use JV JavaScript to solve it and I'm going to explicitly state that it should not give away the answer this can be unpredictable sometimes it will do it anyway especially if it is chat GPT version 3.5 or below chat GPT responds with nice stepbystep instructions for how I can solve this problem and if you'd like to read through the pseudo code I have included it in this Tu sum MD file so I can ask for pseudo code or I could ask the AI to generate and explain to me a variety of different Solutions so for example I could prompt walk me through a Brute Force solution and an optimized solution to the two sum problem a Brute Force solution is a solution that works but might take up a lot of computing space or take a long time to finish its process in other words it's a less efficient way to solve coding problem this prompt is going to result in an explanation of the Brute Force solution of the two sum problem as well as some more minimalist pseudo code your results will of course vary on this but but in general you should get an explanation of the approach as well as some sample code and I should mention here that I got a little bit lucky because I didn't explicitly request pseudo code because I wrote this prompt just a couple of steps after I had told chat gbt not to give away the answer but it probably would have been a stronger prompt to specifically state that I wanted a pseudo code brute force and optimized solution so along with the Brute Force solution it provides an optimized solution and some code and if you'd like to take a closer look at that I've also included it in the two sum MD file yet another way to start to understand how to solve aite code problem is to prompt for a solution in your language of choice with a line byline explanation of how it works so my prompt is generate a JavaScript solution to the tuome problem and explain line by line in code comments how it works and then I can look at a solution with some comments that will explain to me exactly what it's doing now some of you might be saying but treasure isn't this cheating and that is definitely Up For Debate but in my opinion no a lot of it is about learning the steps to problem solving or learning a trick to solve a specific problem so I think that it's completely fine to look at a solution but it can be really helpful to first set aside some time trying to figure out how to solve the problem without any help at the end of the day people who are successful at this type of interview generally are successful by solving similar problems over and over and over again and it's mostly a skill that takes a lot of practice in the next Grim we'll go over more strategies to generate learn and practice elgo problems I'll see you there to solve data structure and algorithm problems it's really crucial to understand the different patterns and tricks and approaches for how to crack them so one pertinent question to ask might be what are five common patterns I should be familiar with to get better at solving algorithmic coding challenges chat gbt comes back with a list of commonly used patterns and says getting better at solving algorithmic coding challenges often involves recognizing and applying some common patterns here are five the one we'll concentrate on is the sliding window pattern and as it says here this pattern is often used when dealing with arrays or lists where you're asked to find a sub range that satisfies a certain condition so a good example of this would be if you're given an array and you need to find the sum of three items in that array that are right next to each other the point here is there are a lot of problems that you'll find on lead code and similar sites that can be solved using this sliding window pattern if I wanted to get really comfortable with solving problems using the sliding window pattern I could use chat GPT to generate numerous example problems and that's going to give me much finer control over my learning experience that I might get on a website dedicated to these sorts of problems so I'm in a prompt give me one example of a problem you can solve using the sliding window pattern that's going to give me a problem called maximum sum subarray of size K and this this is a version of the problem that I just described given an array of positive numbers and the positive integer K find the maximum sum of any contiguous subarray of size K it then goes on to explain step by step how you could solve this problem but let's say that I have read this and found it jargony and a little hard to understand it's fairly common for these types of questions to be jargony or obtusely worded so to try to understand it a little better I'm going to prompt please restate the problem statement for beginners and avoid jarg GPT says sure I'll break it down so you have a list of numbers for example this array your task is to find the highest total you can get by adding up any three numbers that are right next to each other in the list so you would add 2 + 1 + 5 1 + 5 + 1 5 + 1 + 3 until you checked all combinations in the array and found the highest sum so I can tell by looking at this that the highest sum of three numbers is probably going to be nine and as you can see it very helpfully walks you through this so if you add up the first three numbers you get eight if you add up the last three numbers you get six and the answer that we're looking for is the highest total so if you add up five 1 and three you get nine which is the highest possible total so hopefully that makes a little bit more sense than find the maximum sum of any contiguous subarray of size K I can also do the opposite and start with an algo problem then ask what pattern I can use to solve it here I'm throwing into the AI an explanation of a problem that's pretty similar to the twosome problem that we talked about in a previous is scrim and I'm prompting what pattern can I use to solve the following algorithmic coding problem the key difference in this problem statement is that we're dealing with ass sorted array meaning all the numbers are in ascending order but we're still looking to add up two numbers in the array and see if they add up to a Target sum which in this case is six and we'll get back some information about an optimal pattern to solve this challenge which is the two pointers pattern as well as some instructions on how to go about it if you want to learn more and take this a little further I've included the problem statement for this sorted toome problem here in the scrim and here's what you can do to take it further you can read through the explanation down here and if necessary ask for an explanation of the problem statement in a variety of tones with less jargon or with examples or with examples and metaphors whatever you think is going to help you out the most then use the AI to generate pseudo code to help you solve the problem ask about brute force and optimize Solutions ask chat TBT to generate a solution and explain to you how it works and as for other problems that can be solved using the two pointers pattern and this is kind of a good skeleton for a process that you can go through with any variety of L code style challenges for this challenge you're going to use chat GPT to generate and solve the simple classic fizzbuzz problem what you'll do is ask chat BT to give you the fizzbuzz problem and remember to specify that you do not want the solution because the second step is to attempt to solve it yourself if you've already solved pH buzz in the past and you feel pretty comfortable with it feel free to go through these steps using the problem of your choice if you solved the problem go ahead and ask chat GPT for advice on how to improve your solution and if you don't solve ask chat GPT to help you solve it using some of the techniques we've learned in earlier scrims go ahead and pause now and start working on the fizzbuzz challenge welcome back I hope that you had a good experience solving the fizzbuzz problem so I prompted chat GPT to give me the FSB problem and here is what it output the instructions are to write a program that prints the numbers from one to 100 but for multiples of three instead of the number print Fizz and for the multiples of five print Buzz for numbers which are multiples of both three and five print fizzbuzz that's the classic fizzbuzz problem best of luck solving it thank you chat GPT so here is my very quick solution to the fizzbuzz problem it's a series of condition statements for every number between one and 100 we're going to check the number and if it's divisible by 15 meaning it's divisible by both three and five we're going to print fizzbuzz else if it's divisible by three we're going to print Fizz and if it's divisible by five we're going to print buzz and if none of these conditions are true we will simply print the number let's call this really quick so that we can make sure it works run and open up the console and if you go ahead and scroll to the bottom you'll see that it is working as expected my next prompt was how can I improve my solution so that it's more succinct and efficient to which chat GPT responded the solution of the fizzbuzz problem is already quite good the logic is clear and it's easy to follow however if you're looking to make it a tad more succinct without sacrificing readability you might consider the following so it suggests a solution in which we are keeping track of the output so if the number number is divisible by three then the output will be Fizz if it's divisible by five the output will be buzz and if it's divisible by both they'll be concatenated together into fizzbuzz and then we'll console.log the output or the number if the output is an empty string because if the output is an empty string that means that none of these conditions were met I'm going to replace my old solution with the new one and we'll uncomment and see if it works open the console and if you this looks like it is working as expected great Chachi BT did have one final comment which was that the efficiency Improvement here is minor since the complexity remains o of n however the solution is somewhat more concise in this gr you've gotten some valuable practice using chat TPT to generate and solve the simple classic fizzbuzz problem really great work you are doing excellent especially if you aspire to work in big Tech learning about time and space efficiency in algorithmic and data structure focused coding problems is an unavoidable part of interviewing so let's talk about Big O notation if you're not familiar with Big O it's beyond the scope of the scrim to teach it to you but I can suggest a few ways you can leverage AI to start familiarizing yourself with the concept for example you can ask for a succinct beginner focused explanation let's go ahead and read through this bigo notation is a way to express how the time or space used by a programmer algorithm grows relative to the size of the input it provides a high level understanding of which parts of your code might become bottlenecks as your data gets larger you can also ask for a slightly longer explanation with some examples go ahead and pause here if you want to read through the explanation or you can ask for an explanation with specific JavaScript examples here are a couple of explanations pause now if you want to read through them the shortest and simplest explanation of bigo is that it has to do with measuring how long it takes your function to run or how much space it takes up in Compu computer memory AI like chat GPT can help you out not only by reviewing your DS and algo code for efficiency but by analyzing the time and space complexity of your Solutions take this example my prompt is this is my solution to the two sum problem please do a code review of the solution analyze the time complexity and provide suggestions for improvement and I include a solution to the two sum problem chat gbt outputs a nice little review here comments on readability correctness efficiency and code style and make makes suggestions for a more efficient solution as you can see here under efficiency is where it says hm here's where your code can be improved because as you may have noticed my solution to the tuome problem was a Brute Force solution basically it uses nested Loops to check every single element in the array and chat gpt's suggestion for a more efficient solution goes through the array and uses an object to keep track of the array items that we've already looked at it's faster to look something up in an object because you can go straight to it without having to to examine every single item in the array so a prompt like this is one way you can use AI as a tool for code review just be aware that there may be some inaccuracies from time to time and that you'll probably want to seek review from human eyes as well here is another way you can learn about or familiarize yourself with bigo using chat GPT as we've seen I can give chat GPT a specific solution and ask it for a review but another thing I can do is have it generate different solutions that I can study so I can prompt some like this show me three example JavaScript solutions to the two sum problem each with a different time complexity include comments explaining each solution and its time complexity this will give me three different solutions to the two sum problem along with code samples so I have a Brute Force solution a solution using a hashmap and a solution where it first sorts the array and uses a method called two pointers to look through the array in a more efficient way and just a reminder at any time you can pause the scrim to to look at these examples more closely asking for different solutions can be a really great thing to do once you've done the work of solving the problem yourself or of it least attempted to and now you want to study different solutions so that you can become familiar with different approaches and how to talk about them as well as becoming familiar with their time and space complexity and be able to talk about it in terms of Big O notation let's quickly go over what we've covered in the scrim which is a variety of ways that you can use chat GPT to review and analyze your code you can use it to generate code reviews to make General improvements ask questions about efficiency and to learn and study time and space complexity and to start recognizing how to describe the time and space complexity of different solutions using big on notation you can also use chat GPT to generate and study multiple solutions to the same DS an algo problems and ask for Solutions with different time and space complexities because a good way to become familiar with Solutions in Big O is to look at a lot of Solutions and a lot of examples none of this will take the place of practicing these kind of problems really the only way to master it is to practice solving a variety of questions over and over again but AI might help you get there faster and contribute to a more wellrounded understanding of how to approach DS and algo problems what I have for you here is a problem statement and a solution to the palindrome number problem let's quickly read through the problem given an IND write a function to determine if it is a palindrome a palindrome is a number That Remains the Same when its digits are reversed in other words it reads the same backward and forward return true if the number is a palindrome otherwise return false so if we look at this solution it basically takes a number reverses it then compares the original number with the reverse number and if they are the same it returns true because that means we have a palindrome else it returns false no palindrome so so down here we are calling the is palindrome function with the number 414 so if I run it will return number is a palindrome if I enter a random sequence of numbers and run number is not a palindrome what I'd like you to do with this is first you'll prompt chat GPT to review the solution describe its time and space complexity and suggest improvements and then ask chat TPT to provide an explanation an example for a more efficient solution go ahead and pause now and complete this practice welcome back hopefully you have a much improved version of this is palindrome function if you had a look at it I'm sure that you may have noticed that we have some variables that don't have great names and maybe some of the logic could be shorter so let's see what chat GPT came up with I'm actually going to create a new file called code review MD so we can have a look at chat gpt's response my prompt that I came up with was this is my solution to the palindrome number problem please do a code review analyze the time complexity and provide suggestions for improvement and I made sure to include my is palindrome function with the prompt here is chat gpt's code review go ahead and pause now if you'd like to read through the whole thing but basically as I pointed out before it says you could have some better variable names could rewrite your if else block to be a little shorter and that you should probably handle negative numbers it also had some things to say about time complexity but said your approach is already quite optimal for this problem the improvements are more about readability and handling potential edge cases fair enough so let me go ahead and go back to index.js and we will replace the is palindrome function with the improved solution that chat gbt suggested in my opinion this is much easier to read so first we're going to make sure that is palindrome returns false if the input is a negative number then we'll set two variables one for the original number and one for the reverse number do some work to reverse the digits of every number and then finally we'll compare the original number to the reverse number and this equality operator will return true if these two variables are equal or false if they are not let's go ahead and try this out I'm going to click run we still have our jumble of numbers in here and you can see that it said number is not a palindrome now let's try a palindrome just to make sure we'll say 919 or run again number is a palindrome so we have a nice little improved function that is working as expected Chach GPT is extremely helpful when it comes to finding potential problems and inefficiencies in your code so I really encourage you to use that to your advantage excellent work the idea of using text based AI to practice Live code interviewing might seem a little strange and sure it's not going to be the same as practicing with a live person or come close to simulating the nailbiting experience of an actual Live code interview but it can definitely help and that's what we're going to talk about in this scrim in a live coding interview you'll likely be expected to ask clarifying questions about the possible constraints and edge cases of the challenge plan out a solution and talk through the problem as you're solving it so let's take a look at how AI can help you practice these activities via rolebased prompting to review role based prompting it's it's generally when you engineer a prompt that begins with act as a or Ur to encourage the AI model to take on a certain role here's a prompt designed to help you brainstorm some clarifying questions that you might ask during a Live code interview act as if you a developer in a live coding interview and you've been given the problem below and ask me clarifying questions about the problem is if I am conducting the interview we have this palindrome number problem and this is basically a number that reads the same forward or backward here is an example of a palindrome number because forwards it is 121 and back backwards it is 121 chat GPT will generate a list of possible questions that you might ask an interviewer during a live interview some examples are what should the function's behavior be with negative numbers since negative numbers have a negative sign in front of them they won't read the same backwards so should I assume that all negative numbers aren't palindromes good question how should the function handle singled digigit numbers how should the function deal with zero what about large numbers should it return a Boolean value and should I aim for a certain level of time or space complexity the cool thing here is that after chat gbt has generated these questions I can then ask it to switch roles and answer these questions so my prompt will be now answer the above questions as if you are the interviewer assume the candidate is applying for an entrylevel position this will hopefully give us some ideas about questions an interviewer might ask based on the experience level of the interviewee so here are some answers as if chat GPT is the interviewer that's a great Point negative numbers are not palindromes so you're correct that you can return false for any negative input then if we jump down to six here we can see that probably because this is for an entrylevel person it says try to come up with the most efficient solution you can but the most important thing is that it's correct once it's correct you can think about optimizing for efficiency in this way you can create a back and forth with the AI where you're almost like a fly on the wall of an actual live coding interview of course it's going to be hard to vouch for any kind of accur y as far as these simulated interviews go but it is really good for brainstorming and getting ideas of things that you might say and things that you might be asked here's another potential strategy based on the above exchange write a script that models how an interviewee might successfully solve this problem while reasoning loud and communicating well with the interviewer TBT will then write you a whole script filled with things that an interviewee might say as part of a successful interview so the conversation kind of picks up where it left off the interviewer has clarified the answer to the interview's questions and the interviewee says all right thanks for the clarifications now that we've established that we're only dealing with non negative numbers we can start to plan our solution one way to check if a number is a pol androme is by reversing the number and then comparing the reverse number with the original number and then they go on to talk about their initial approach which you can pause if you want to read more about this so this might not be the greatest or most accurate portrayal of how a person would talk to another person but this is definitely an effective way to get tidbits of information or angles that maybe you wouldn't have thought of or haven't thought of before so think of it as a good brainstorming tool and those are some creative ways that you can use chat GPT to help you get better at Live code interviewing how much do you love writing resumés and cover letters if you're anything like me probably not very much luckily what better use for an AI language model than to generate words you can use AI to write all sorts of job search docs you can get help with writing résumés cover letters elevator pitches or one of my favorites using it to help you talk about your accomplishments that said it's good to keep in mind that AI when it comes to writing job docs especially résumés it's a good starting place but certainly not a destination I would not recommend having AI fully write your resume but but you can use it to work on improving bits and pieces of it which I'm going to show you today so I'm going to use a couple of strategies here I'm going to provide some context I'm a frontend of developer who needs a general resume then I'll do a rolebased prompt act as a resumé writing expert and ask me questions about my current job interview me as a resumé writing expert and then use my answers to create two resumé sections one about my work experience and the other about my technical expertise chat gbt will then ask me a few questions about my work experience like my job title and what company I worked for how long I've been there my main responsibilities key achievements and what technology tools are language that I used and I find that this format of having AI ask you questions be really helpful if you kind of have blank screen syndrome and when you sit down to write a resume you're just kind of staring at the document not knowing what to write in this way AI is a really good idea machine so it then goes on to ask me about my technical expertise and then and I'm going to go ahead and make up some answers so I was a frontend developer at excellent software company for 2 years then you'll notice that I wasn't exactly sure how to answer this second question can you describe your main responsibilities so I'll say I want you to ask me more questions to help me describe my main responsibilities I also asked for some help talking about my key achievements or projects that I'm proud of I'm simply going to answer I can't think of any what are some examples based on my job title so again using AI as a brainstorming tool then I make up some stuff quickly for the technical questions and chat gbt says great thank you for the information let's dig a Little Deeper so it asks me questions about my main responsibilities and key achievements I go ahead and jot down some quick answers to these questions and from our interview session chat gbt generates a section that I can put on my resume I was a friend and developer at excellent software company at these dates and here are the things that I did based on the information that I gave the AI so a lot of this sounds pretty good specialize in optimizing web pages for maximum speed and scalability ensuring high quality graphic standards and brand consistency leading code review processes is maintaining code quality and encouraging best practices Mentor interns guiding them through technical processes and providing valuable industry insights your own results will vary and you'll definitely want to go through and personalize this but look at all of the resume fodder that I was able to generate in just a couple of minutes super useful it then gives me a list of key achievements and Technical expertise and like I said you're probably going to have to work on the formatting and to decide for yourself where you would want to put this information on your resume but especially if you're someone who who struggles to talk about their achievements these are some good guidelines this is also great for brainstorming if you have little to no experience like for example if you've just finished a boot camp and you want advice on how to talk about things on your resume I prompt I'm a frontend developer who is looking for my first job I have experienced working on a project management application as part of a sixweek internship as well as several completed boot camp projects act as a resumé expert and make suggestions for how I can craft resume we look at the outp puts advice is as a new front end developer looking for your first job your resume should focus on your relevant project skills and education and offers some suggestions for structuring your resume some of this advice is arguable I don't know about putting an objective statement on your resume I've heard that that is getting to be a little oldfashioned but again that's something that you would want to check for yourself and your own specific needs and so these are just basically suggestions for sections that you could put on your resume and here's an example of what it might look like so front and developer intern company name dates along with a description of the things you did and any certifications that you've earned another thing you can do that comes in really handy is I have gotten these qualifications from some job ad on LinkedIn and I am going to dump it into chat GPT and say I want to apply for this job here's a description of my current position please make suggestions for how I can tailor this section for the job that I want ask clarifying questions if necessary and then here is where you might put in a description of your current job job but I'm using the fake one that I use chat GPT to generate for me so I think this is pretty cool this prompts chat GPT to ask me questions about my experience related to the job qualifications that I gave it do you have experience with web accessibility standards or guidelines how comfortable are you with working independently and so on so I'll go ahead and answer all of these questions and chat GPT will use that to tailor my resume this could potentially be a really huge timesaver at this point I've spent a long time having a conversation with chat TBT about my skills and experience going to take advantage of the back and forth we've had so far and ask it to write me an elevator pitch while prompt I have a phone screen with the recruiter next week based on all the information I've given you so far write a 30second elevator pitch that I can use to introduce myself pause this and read through it if you want it writes me a nice short speech that I can use to introduce myself and talk about my skills in a really succinct way I can also take advantage of this conversation by starting to ask chat GPT how I can answer certain interview questions especially one that a lot of recruiters ask which is tell me about yourself and it gives me some suggestions for how to do that but stay tuned because we'll talk a lot more in the next roomm about how to use AI to practice interviewing so see you there we've previously discussed ways that AI can help you with technical interviewing but it can also o help you with behavioral interviewing which can sometimes be just as big of a challenge to find out how chat gbt can help with behavioral questions I decided to start by asking it how can you help me as a friend and developer practice behavioral job interviews it responds behavioral interviews typically involve questions about your past work experience and how you handled specific situations in the workplace and it says it can help us do mock interviews use the star method which is a way to structure your interview answer questions it can give feedback information about industry Trends and knowledge and can also review your interview questions the first thing it says it can help with is mock interview questions so I'm going to say let's start with some practice questions the result is a list of questions based on teamwork problem solving technical skill leadership and so on these are all broad topics so I'll start by concentrating on one of these areas first then I'll say I want to specifically practice the star method please give me a star method example for the first question if you're not familiar with the star method hopefully this will help you understand it so our response is absolutely here's an example of how you might use the star method to respond to the question can you tell me about a time you had a conflict with a team member how did you handle it so you first explain a situation the example is that I was working at excellent software company we were working on a large project with a tight deadline and a team member let's call him Bob who is constantly missing our daily standups and failing to meet his coding deadlines the task is that we felt we had to address the issue and this is the action that we took we had a oneonone meeting with Bob to discuss my observations and then you talk about the results Bob was initially defensive but he appreciated my Approach and opened up about some personal issues that were affecting his work and after our talk Bob's participation and output improved considerably way to go Bob so it can be pretty difficult to think of scenarios to talk about during a job interview so I find these examples to be very helpful and in my interviewing EXP experience some companies will actually ask you specifically to use the star method it is a really worthy Endeavor to get used to how it structured and get used to answering interview questions that way I've seen an example I understand the star method a little bit better now I need help brainstorming some scenarios that I can use to answer this question what are some situations where a front end developer might have conflict with a team member this is a way that I can start to think about my own personal story so hopefully the AI is going to come back with something that will remind me of something that happened to me at work so that I will have a good answer for the question how do I deal with conflict with a team member comes up with several good possibilities differing opinions on design code quality misalignment on priorities project Direction disagreements communication issues and workload imbalance hopefully a list like this will help you think of situations that happened in your own work experiences that you can talk about during a behavioral interview I can also ask for behavioral interview questions related to a specific area that I want to work on say I'm looking for a job as a lead developer or an engineering manager and I want to practice talking about my leadership experience I can prompt please ask me five behavioral interview questions related to my leadership experience and AI has a lot of good ideas for that taking initiative resolving conflict making decisions mentoring or leading a project it then reminds you that a really good way to practice answering these questions is by using the method I can ask for example answers based on my experience level I'm asked the question what are your strengths and weaknesses not only can this be a really difficult question to answer because you're never quite sure what they're looking for when they ask this question but your answer might be different if you're an entrylevel developer versus a principal level engineer so the prompt is I'm interviewing for an entrylevel web developer position how can I answer the question what are your strengths and weaknesses the AI comes back with as an entrylevel candidate you want to highlight your strengths and weakness NES in a way that communicates your potential for growth your ability to learn and your dedication to the profession so your strengths might be more focused on your education internship or personal traits that will help you succeed in the role and here's an example of how you might answer and you can pause if you'd like to read through it the some of the same ideas for answering the weakness portion of the question and posits that the key is to show that you are aware of areas Improvement and that you are actively working on them so it uses the example of working on my familiarity with certain web develop ment tools and Frameworks there's still a lot for me to learn but here's all the things that I'm doing to make sure that I'm learning and getting handson experience this is some pretty decent advice but of course you'll want to tailor it to your specific situation as we're just using the AI to generate ideas and jumping off points here's a prompt that will encourage chat GPT to act as your interview coach I am interviewing for a junior front and developer position and I want to practice answering questions about my technical knowledge acting as my interview coach ask me questions and provide me with feedback on my answers with this kind of prompt you can get an endless number of questions essentially about your technical skills and get a lot of practice answering a variety of different questions so this is a really powerful tool the back and forth goes something like this it starts with a double and triple equals equality question which I would say is pretty appropriate for a junior level developer so I went ahead and made up an answer to the question talking about type checking and type coercion chat gbt says my explanation is great thanks chat GPT and then goes on to ask me another question the question that it asks is can you explain how CSS flexbox works and give an example of a scenario where you choose to use it in my opinion this is a super cool thing about AI if I were reading this off a list that I found on Google and I didn't know the answer I would simply have to move on to the next question or do some research and formulate an answer without a lot of feedback so let's pretend that I don't know quite how to answer this question so my followup prompt will be I'm actually not sure how to succinctly explain how flexbox Works can you give me an example of a solid brief answer and that will help me answer it a little better or collect my thoughts so I can answer it a little better next time then moves on to a third question how would you approach making a website more accessible what are some key considerations to keep in mind this time I'm going to answer this question incorrectly my answer is to make a website accessible you want to make sure that you have a really good URL that closely matches the matter of your website otherwise your customers might have trouble finding it chat GPT responds that's a great Point regarding search engine optimization but when we talk about accessibility and web development we're generally referring to making web content usable for people of all abilities and disabilities and then it gives us some pointers for how to enhance a website's accessibility what I think is really cool about using AI to practice interview questions is that you could easily go on Google and find a list of these questions somewhere and maybe even read the answers but what you can't get is Real Time feedback or help with how you might go about answering the question and you might be able to find the answer to the question but it's not going to feel as interactive so I find this a lot more fun and engaging way to practice these kind of interview questions I hope you found these ideas useful I personally find behavioral interviewing to be really tough and I appreciate having a brainstorming buddy like chat GPT so happy interviewing and I'll see you later congratulations you finished the course and are now a capable prompt engineer and superpowered developer who can harness the power of AI to accomplish a huge variety of tasks let's go ahead and recap a little bit of what you've learned we covered the basics of prompt engineering specificity context technical language controlling the length and formatting of responses breaking down tasks and prompts iteratively optimizing prompts rulebased prompting and prompting by example we also covered AI assisted coding that's using natural language models to generate code with pseudo code and pseudo language also generating test cases and edge cases debugging converting and documenting code and avoiding pitfalls like hallucinating and copypaste loops and finally we looked at how you can use AI to help in your job search including learning generating and practicing DS and algo coding challenges tailoring resumés and cover letters and practicing interviewing you've done an incredible job now go forth and prompt engineer something amazing
