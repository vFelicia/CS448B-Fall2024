With timestamps:

00:00 - today we're gonna see another tutorial
00:01 - about javascript and we're gonna create
00:04 - the floppy bird game using pure
00:06 - javascript so this tutorial will be in
00:09 - two different parts the first one will
00:12 - be the about the logic of the
00:14 - of the game
00:17 - and then the part two will will be about
00:20 - writing the code so we now go
00:22 - directly to write the code because we
00:24 - have to know the
00:26 - logic
00:28 - behind everything first
00:30 - now let's go and see the logic about the
00:33 - game
00:35 - so uh here what we need in html5 all we
00:39 - need is to create our canvas giving us
00:42 - on
00:42 - id and then a widget and the height
00:46 - so in our web browser in our page we'll
00:49 - get something like this
00:51 - so here is
00:52 - the widget and here is the height now
00:55 - everything else
00:57 - well created using javascript to create
01:00 - games we just
01:02 - just have to draw images to the canvas
01:04 - continuously and
01:07 - and changing their positions so
01:11 - first we're gonna select our canvas
01:12 - using document.getelementbyid
01:15 - of the canvas
01:16 - and we don't have to write all this line
01:19 - every time so we're gonna set this to a
01:21 - variable and then using the get context
01:24 - that gives us a lot of methods and
01:26 - properties that
01:29 - gives us us access to the canvas to
01:31 - write or to draw anything we want in the
01:34 - canvas so we'll get the context of our
01:36 - canvas and we said that a variable set x
01:41 - context
01:43 - so we won't have to write the line again
01:47 - now we have to load the images first to
01:50 - load an image we say var
01:52 - we will give the image a name and then
01:54 - we will say new
01:56 - the object image
01:58 - and then we have to give the image a
02:00 - source so we will say image name that
02:02 - source src
02:04 - equals the emission sound for example
02:07 - images
02:08 - slash image.png
02:12 - and the same thing for the audio when we
02:15 - when we need to
02:17 - download an audio file
02:19 - now to draw an image we will say ctx dot
02:23 - draw image function this function
02:26 - gets a lot of arguments so we'll just
02:29 - give it for now for the example just
02:31 - five
02:32 - arguments which are the image name its x
02:36 - position its y position its width and
02:39 - its height
02:41 - same for example
02:44 - we have the bird image then we give it
02:47 - 100
02:48 - pixels for the x position and 150
02:52 - pixels for the y position and its width
02:55 - is 50 pixels the height is 50. so here
02:58 - in the left in our canvas we will get
03:01 - something like this so this is the y
03:03 - position
03:04 - this is the x position and this is the
03:07 - height
03:08 - and this is the width
03:09 - so our image will be right here
03:12 - to move our bird here we just have to to
03:16 - change the values of y and x positions
03:19 - now to draw our images to the canvas we
03:22 - will use
03:23 - everything inside the function called
03:26 - draw
03:27 - so the first thing i'm going to draw is
03:29 - the background so i'm going to set
03:30 - x.draw image
03:32 - background and i'm giving it an x
03:34 - position equals to zero the y position
03:37 - equals the
03:38 - zero
03:39 - and i'm not giving it a width and the
03:41 - height because i already set all the
03:43 - width and the height of images
03:46 - using photoshop
03:48 - so this line of code will give us
03:50 - something like this in our canvas
03:52 - and then we will say settings.draw image
03:54 - now we will draw the pipe north and the
03:57 - pipe knot has a
03:59 - pipe x position and the pipe y position
04:02 - so we'll get something like this
04:04 - and for the pipe south
04:06 - remember you have the same
04:09 - pipe x position
04:10 - but for the
04:12 - pipe y position we will add the constant
04:15 - to the pipe south
04:18 - so we will get something like this and
04:20 - this is the constant
04:23 - so the constant here is the pipe
04:26 - height
04:26 - plus a gap
04:29 - now we're gonna draw a front
04:32 - ground so the front graph has a zero
04:35 - position and this y
04:38 - position
04:40 - so this is the canvas height and this is
04:44 - the foreground height and this is the
04:48 - canvas height minus the foreground
04:50 - height so our so our foreground will be
04:54 - in this place
04:56 - now we're gonna draw
04:58 - our bird our bird has
05:00 - a an x position and the y position so it
05:04 - will be here now we have to draw the
05:06 - images continuously so for that we will
05:09 - use a callback function so we will use
05:12 - the request animation frame
05:14 - so this function here
05:17 - so this function here we call the draw
05:19 - function then the draw function executes
05:22 - then it's called the request animation
05:24 - frame again the request animation frame
05:27 - called the draw function again and so on
05:30 - and this code will be run again and
05:32 - again and again so we will have to call
05:35 - the draw function just once now as you
05:38 - remember this is the bird y position
05:42 - so our bird here will go
05:44 - down by the gravity
05:46 - the gravity here is a number
05:48 - and we increment
05:51 - the bird y position by the number
05:53 - and when our uh player
05:56 - press a k on the keyboard the bird will
06:00 - goes up so we will decrement the bird y
06:03 - position
06:05 - so in our code we will get something
06:07 - like this so the bird y
06:10 - we will increment it by the gravity the
06:12 - gravity may equal to one or two or one
06:15 - pound five and on key down event we will
06:18 - decrement the y position by 20 for
06:21 - example and we can change it
06:24 - in our game
06:25 - now for our game we will need a lot of
06:27 - pipes
06:29 - so for that we will set
06:32 - an array called pipe
06:34 - and we will initiate
06:36 - this
06:38 - array with this coordinates so the x
06:41 - position will be the canvas with it and
06:43 - the y position is zero
06:45 - now inside our draw function
06:49 - beside the code we already typed
06:52 - so we use a full loop to loop
06:55 - all over the pipe array
06:58 - so we will draw the pipe node
07:01 - and its position is the pipe
07:04 - of i that x and its y position is this
07:08 - so we get
07:09 - for example the pipe north right here
07:12 - because the pipe 0 for example
07:15 - the x have this
07:18 - x position and the pipe zero that y will
07:21 - have a zero position
07:24 - and for the pipe south
07:27 - it could be
07:28 - right here
07:29 - now to move our pipes we will say pipe
07:33 - of i dot x minus minus so our pipe here
07:37 - will go from the
07:38 - right to the left
07:40 - just like this
07:43 - now this is our canvas with that this is
07:45 - for example
07:47 - 188 pixels so we
07:50 - so what i want to say here is when our
07:53 - pipe reaches this
07:55 - position we have to add new coordinates
07:59 - to our pipe array
08:03 - so we will say f the pipe either x
08:05 - equals canvas that we did minus
08:08 - 188 means when our pipe reaches this
08:12 - place we have
08:14 - to push near coordinates to our pipe
08:18 - again we will say x covers the wooded so
08:20 - we'll create our pipe just right here
08:24 - and then
08:25 - we have to to set a new y position
08:29 - so to set a new y position here
08:32 - different y positions we need to use the
08:35 - random function so we'll use the matrix
08:37 - random and demand that floor demanded
08:40 - random one gives us a number between
08:42 - zero and one
08:43 - and method flow will gives us or we
08:47 - return an integer
08:49 - now we need numbers between zero
08:53 - so this is the maximum y position and
08:56 - minus
08:57 - the height of this
08:59 - pipe
09:02 - so for that we'll say we'll multiply our
09:05 - math at random by
09:07 - the pipe north dot height
09:10 - so now we will get
09:12 - we will get zero if the map that random
09:15 - return zero and we will get the pipe not
09:18 - that height if demanded random returns
09:22 - one then we say minus the pipe north
09:25 - that height
09:26 - so in this case we will get
09:29 - numbers between
09:31 - zero
09:32 - and minus the pipeline dot height and so
09:36 - then we'll get new pipes for example
09:39 - right here
09:41 - and so on when these pipes reaches this
09:44 - position we will push new coordinates to
09:48 - our pipe array
09:50 - now let's set our game over rules
09:54 - remember this is our bird x position
09:58 - this is our bird y position and this is
10:00 - our burnt x position plus the builder
10:03 - with it and this is the bird y position
10:06 - plus beard height
10:09 - now this is the pipe x position and this
10:12 - is the pipe y position
10:14 - and this is the pipe x position plus
10:18 - pipe down with it
10:20 - now this place is the pipe y position
10:23 - plus its height
10:27 - and here is the pipe y position plus the
10:30 - constant and here is the covers that
10:32 - height minus the foreground that height
10:36 - now it's a game over f
10:39 - for example if our bird touches the
10:42 - front of the pipe
10:44 - which means the bird x plus bird that
10:46 - with it is greater than or equal to the
10:51 - pipe x
10:52 - so this is the first rule
10:54 - and if our bird is in this place
11:01 - and then if our
11:03 - bird x plus bird with it
11:05 - is less than the
11:08 - pipe x that the pipe x plus the pipe
11:11 - down with it
11:14 - and
11:15 - f
11:17 - in this case this is the
11:20 - bird y position
11:22 - is less than
11:23 - the pipe wire plus pipe height
11:27 - or
11:28 - for example
11:29 - in this case
11:31 - if the bird y plus bird height
11:35 - is greater than the pipe y plastic
11:38 - constant
11:42 - and the last one we will see all
11:46 - if
11:47 - the third wire plus the bird dot height
11:50 - is greater than the canvas the height
11:53 - minus the foreground dot height
12:00 - so this is it
12:01 - for the game over rolls
12:05 - now
12:06 - this is the end of the logic about the
12:08 - floppy bird game
12:10 - now let's go and write our code
12:14 - now guys let's go and write our code
12:17 - so in the description you will find the
12:19 - starter template
12:22 - which has
12:24 - some images the background
12:28 - image
12:29 - this is its resolution so will be our
12:32 - canvas
12:34 - and the other images
12:39 - and apply
12:41 - dot mp3
12:43 - and the score does mp3
12:47 - and then the index.html
12:51 - and the floppybird.js for our javascript
12:55 - code
12:57 - i'm gonna run my file
13:00 - and i will create the compass
13:02 - giving it an id
13:05 - then with it
13:07 - and the height
13:10 - so here is my canvas
13:13 - now i'm gonna link
13:16 - my
13:16 - html file to my javascript
13:21 - i'll go now to my floppy dab floppy
13:24 - bird.js i'm gonna test if it works
13:27 - and yes
13:30 - now let's create
13:32 - our canvas variable
13:35 - to select the canvas
13:38 - then
13:39 - the context
13:46 - now we will load the images
13:50 - so i create variables
13:53 - different variables for every image
13:56 - so i'm gonna create one for the bird and
13:58 - one for the background
14:00 - one for the front ground and then one
14:03 - the one
14:04 - and then two for the pipe mouth and the
14:07 - pipes so for all of them you'll see
14:09 - equals the new
14:10 - the object image
14:14 - so for each one
14:20 - now i will
14:22 - give them a source
14:24 - send.src equals
14:27 - i'm going to copy this
14:33 - and the last one is for the pipe itself
14:37 - now so i'm gonna save the images so my
14:39 - folder images then the bird.png
14:44 - all my images are in the same
14:47 - directory
14:58 - and the last one
15:01 - i'm gonna check now if my images are
15:03 - loaded
15:05 - and yes
15:08 - now
15:08 - we will draw our images
15:12 - so we're gonna set a new function trowel
15:16 - first i'm gonna draw the the background
15:19 - i'm gonna set x draw image i'm giving it
15:22 - the
15:23 - background
15:24 - object
15:25 - and then
15:26 - the x position under one position
15:30 - and i'm gonna call the draw function
15:33 - now i'm gonna
15:34 - draw the pipe
15:36 - north and south
15:40 - take the draw ms so the pipe north
15:43 - i'm gonna use
15:44 - some uh
15:46 - x and do i positions
15:48 - for now
15:50 - here's my pipe now
15:53 - pipe south
15:54 - and for the pipe
15:57 - uh
15:58 - and for the pipe salt we're gonna add
16:00 - the not
16:02 - pipe dot height
16:06 - plus the gap
16:09 - so i'm gonna say just constant
16:13 - and i'm gonna create some variables
16:16 - right here
16:17 - and say
16:18 - the var the constant here
16:21 - equals the pipe not that height
16:26 - plus the gap and the car position
16:29 - to 70 or 75 pixels
16:33 - i'm gonna copy this to the bottom
16:37 - and now if we refresh i will get my pipe
16:40 - south i'm going to set
16:42 - 80 for the gap
16:45 - or 85
16:47 - it looks great
16:52 - now let's go and
16:54 - draw the
16:56 - the front ground
17:00 - i'm going to set x that
17:02 - draw image
17:04 - the foreground
17:06 - zero and zero now if i say zero one zero
17:10 - for the y position
17:12 - it is at the top so i'm gonna say
17:13 - converted height minus the front ground
17:16 - at height so it's in its place
17:21 - now i will draw the bird
17:33 - i'm going to say for example 10 pixels
17:35 - for the exposition and 150
17:39 - for the
17:40 - y position
17:43 - now we will change the x and y position
17:46 - later
17:47 - so i'm going to say
17:50 - bird x
17:52 - for the x position and bird y for the y
17:55 - position
17:59 - i'm going to change them in my code
18:03 - this line
18:08 - now our
18:10 - now our bird will will fall continuously
18:16 - because of the gravity
18:17 - so we will say
18:20 - the bird y
18:23 - plus
18:24 - and the gravity
18:27 - so we'll increment it by the gravity so
18:30 - we will set the gravity to
18:33 - to 1 for now
18:36 - let's refresh now the budget is now
18:38 - moving so we have to
18:42 - request the animation frame
18:44 - for the draw function
18:49 - now the bird is falling
18:52 - cool
18:53 - so the request animation here
18:56 - called the draw and the draw called the
18:58 - request animation and then it calls the
19:00 - draw
19:01 - again and again and again
19:03 - now let's go and
19:05 - now if our
19:09 - player hits or
19:11 - press ok
19:13 - and the keyboard
19:20 - then the birds will move up so
19:23 - set a new function called move up
19:26 - so the
19:28 - bird y will decrement by
19:31 - 20 for example
19:33 - for now
19:35 - so if i hit or if i press ok you see the
19:38 - bird goes up
19:40 - and then goes down by the gravity again
19:46 - now let's go and
19:49 - declare the pipe coordinates it's an
19:52 - array
19:53 - as we saw before
19:56 - so i'm going to see if our pipe equals
19:57 - an empty array
19:59 - and then pipe
20:03 - then pipe of zero
20:07 - equals so i'm going to give it an x
20:09 - coordinate
20:12 - so the pipe will be there
20:15 - and do y equals zero
20:20 - now we're gonna use a full loop
20:23 - to print or to draw
20:25 - all the pipes
20:32 - i'm gonna copy this inside the loop
20:38 - and i'm going to change
20:41 - the x val values
20:44 - with the pipe
20:47 - of i
20:51 - dot x
20:52 - so this is the x position for every
20:56 - i in the pipe array
20:59 - so the pipe nut and the pipe side has
21:02 - the same positions for the x positions
21:08 - and here is the y position now we'll say
21:11 - pipe
21:12 - of i
21:14 - minus minus to move uh
21:17 - to move the the pipe to the left
21:20 - to the to the left here
21:23 - now my pipes are moving to the
21:27 - to the left
21:29 - now i have to add
21:31 - new pipes to my
21:34 - array
21:35 - so i'm going to say f
21:37 - the pipe
21:38 - of i that x equals 125
21:43 - example you can use whatever
21:46 - value you want i will push a new
21:50 - object
21:51 - to my array pipe
21:53 - so the x position is always
21:56 - covers that with it and the white
21:58 - position here
21:59 - is a random position so we'll use the
22:02 - math floor and the matte random
22:07 - multiply by
22:09 - the piping off
22:12 - that
22:13 - height
22:14 - minus
22:15 - the pipe north
22:17 - dot height
22:20 - and here is the result
22:30 - i have to change the gravity here
22:35 - so the ground i'm going to say 1.5 for
22:37 - the gravity
22:39 - and 25 for the
22:42 - for the move up function
22:46 - to make things easier
22:52 - so that's good now
22:57 - now let's
22:58 - detect if there's a collision
23:02 - so if
23:05 - if there is a collision we will reload
23:08 - the page
23:34 - and now let's check that there's
23:36 - equation also equation
23:38 - now we'll say and for the white
23:40 - positions if the
23:42 - position is less than
23:43 - the pipe
23:45 - the pipeline
23:47 - plus the height of the pipe
23:50 - oh
23:54 - the dead y is greater than or equal to
23:58 - the height of that point
24:00 - plus extra
24:02 - exposure now i'm gonna check that
24:09 - cool
24:11 - but if i go through the gap
24:16 - if i go through the the gap nothing
24:18 - happens
24:20 - that's cool
24:23 - now when our bird hits the
24:26 - the fog the front ground
24:29 - it's a game over also so let's say if
24:31 - the bird
24:33 - y plus the bird dot height
24:36 - is greater than or equal
24:39 - to
24:40 - canvas height minus the front ground
24:42 - height
24:44 - so whenever it touches the front ground
24:46 - it's a game over
24:48 - now if
24:50 - the pipe i the x equals a five will
24:54 - increment the score
24:55 - by one
24:58 - and and will go and
25:01 - print that to the
25:02 - to the canvas
25:04 - so we're gonna give it a style a color
25:07 - for our text
25:08 - and a font
25:10 - a font size on the font family
25:14 - and then
25:16 - we're going to use ctx dot
25:18 - felt text
25:20 - to print the text to our
25:23 - canvas so here we're giving it the text
25:26 - to show a string and then the x position
25:30 - i'm going to say for 10 and then 20 for
25:34 - the y position
25:35 - now it's at the top i'm going to
25:38 - move it to the bottom i'm going to say
25:40 - canvas height minus 20. now it's at the
25:43 - bottom
25:49 - now the score increment
25:51 - 2
25:52 - 3
25:55 - oh that's a game over
25:57 - now let's add some sounds to the game
26:07 - let's first create audio files so i'm
26:09 - going to save our fly when our bird fly
26:12 - we will make this sound
26:14 - and win the score increment we will use
26:17 - this
26:18 - sound
26:21 - so i'm gonna give it the source of the
26:24 - files
26:25 - so i'm gonna say sounds
26:29 - fly does mp3
26:33 - and then for the score
26:35 - it's
26:36 - score does mp3
26:40 - so
26:41 - when i move up the bird
26:44 - it means when the bird flies
26:47 - then
26:48 - i will play the the fly sound so i'm
26:51 - going to say fly
26:53 - dot play
26:59 - and now if the score increments then we
27:02 - will say skull
27:04 - dot play
27:08 - now you can hear the sound when i
27:11 - press ok on the keyboard and doing the
27:14 - score increments
27:17 - if i pass through the gap
27:20 - so this is the guys for this tutorial

Cleaned transcript:

today we're gonna see another tutorial about javascript and we're gonna create the floppy bird game using pure javascript so this tutorial will be in two different parts the first one will be the about the logic of the of the game and then the part two will will be about writing the code so we now go directly to write the code because we have to know the logic behind everything first now let's go and see the logic about the game so uh here what we need in html5 all we need is to create our canvas giving us on id and then a widget and the height so in our web browser in our page we'll get something like this so here is the widget and here is the height now everything else well created using javascript to create games we just just have to draw images to the canvas continuously and and changing their positions so first we're gonna select our canvas using document.getelementbyid of the canvas and we don't have to write all this line every time so we're gonna set this to a variable and then using the get context that gives us a lot of methods and properties that gives us us access to the canvas to write or to draw anything we want in the canvas so we'll get the context of our canvas and we said that a variable set x context so we won't have to write the line again now we have to load the images first to load an image we say var we will give the image a name and then we will say new the object image and then we have to give the image a source so we will say image name that source src equals the emission sound for example images slash image.png and the same thing for the audio when we when we need to download an audio file now to draw an image we will say ctx dot draw image function this function gets a lot of arguments so we'll just give it for now for the example just five arguments which are the image name its x position its y position its width and its height same for example we have the bird image then we give it 100 pixels for the x position and 150 pixels for the y position and its width is 50 pixels the height is 50. so here in the left in our canvas we will get something like this so this is the y position this is the x position and this is the height and this is the width so our image will be right here to move our bird here we just have to to change the values of y and x positions now to draw our images to the canvas we will use everything inside the function called draw so the first thing i'm going to draw is the background so i'm going to set x.draw image background and i'm giving it an x position equals to zero the y position equals the zero and i'm not giving it a width and the height because i already set all the width and the height of images using photoshop so this line of code will give us something like this in our canvas and then we will say settings.draw image now we will draw the pipe north and the pipe knot has a pipe x position and the pipe y position so we'll get something like this and for the pipe south remember you have the same pipe x position but for the pipe y position we will add the constant to the pipe south so we will get something like this and this is the constant so the constant here is the pipe height plus a gap now we're gonna draw a front ground so the front graph has a zero position and this y position so this is the canvas height and this is the foreground height and this is the canvas height minus the foreground height so our so our foreground will be in this place now we're gonna draw our bird our bird has a an x position and the y position so it will be here now we have to draw the images continuously so for that we will use a callback function so we will use the request animation frame so this function here so this function here we call the draw function then the draw function executes then it's called the request animation frame again the request animation frame called the draw function again and so on and this code will be run again and again and again so we will have to call the draw function just once now as you remember this is the bird y position so our bird here will go down by the gravity the gravity here is a number and we increment the bird y position by the number and when our uh player press a k on the keyboard the bird will goes up so we will decrement the bird y position so in our code we will get something like this so the bird y we will increment it by the gravity the gravity may equal to one or two or one pound five and on key down event we will decrement the y position by 20 for example and we can change it in our game now for our game we will need a lot of pipes so for that we will set an array called pipe and we will initiate this array with this coordinates so the x position will be the canvas with it and the y position is zero now inside our draw function beside the code we already typed so we use a full loop to loop all over the pipe array so we will draw the pipe node and its position is the pipe of i that x and its y position is this so we get for example the pipe north right here because the pipe 0 for example the x have this x position and the pipe zero that y will have a zero position and for the pipe south it could be right here now to move our pipes we will say pipe of i dot x minus minus so our pipe here will go from the right to the left just like this now this is our canvas with that this is for example 188 pixels so we so what i want to say here is when our pipe reaches this position we have to add new coordinates to our pipe array so we will say f the pipe either x equals canvas that we did minus 188 means when our pipe reaches this place we have to push near coordinates to our pipe again we will say x covers the wooded so we'll create our pipe just right here and then we have to to set a new y position so to set a new y position here different y positions we need to use the random function so we'll use the matrix random and demand that floor demanded random one gives us a number between zero and one and method flow will gives us or we return an integer now we need numbers between zero so this is the maximum y position and minus the height of this pipe so for that we'll say we'll multiply our math at random by the pipe north dot height so now we will get we will get zero if the map that random return zero and we will get the pipe not that height if demanded random returns one then we say minus the pipe north that height so in this case we will get numbers between zero and minus the pipeline dot height and so then we'll get new pipes for example right here and so on when these pipes reaches this position we will push new coordinates to our pipe array now let's set our game over rules remember this is our bird x position this is our bird y position and this is our burnt x position plus the builder with it and this is the bird y position plus beard height now this is the pipe x position and this is the pipe y position and this is the pipe x position plus pipe down with it now this place is the pipe y position plus its height and here is the pipe y position plus the constant and here is the covers that height minus the foreground that height now it's a game over f for example if our bird touches the front of the pipe which means the bird x plus bird that with it is greater than or equal to the pipe x so this is the first rule and if our bird is in this place and then if our bird x plus bird with it is less than the pipe x that the pipe x plus the pipe down with it and f in this case this is the bird y position is less than the pipe wire plus pipe height or for example in this case if the bird y plus bird height is greater than the pipe y plastic constant and the last one we will see all if the third wire plus the bird dot height is greater than the canvas the height minus the foreground dot height so this is it for the game over rolls now this is the end of the logic about the floppy bird game now let's go and write our code now guys let's go and write our code so in the description you will find the starter template which has some images the background image this is its resolution so will be our canvas and the other images and apply dot mp3 and the score does mp3 and then the index.html and the floppybird.js for our javascript code i'm gonna run my file and i will create the compass giving it an id then with it and the height so here is my canvas now i'm gonna link my html file to my javascript i'll go now to my floppy dab floppy bird.js i'm gonna test if it works and yes now let's create our canvas variable to select the canvas then the context now we will load the images so i create variables different variables for every image so i'm gonna create one for the bird and one for the background one for the front ground and then one the one and then two for the pipe mouth and the pipes so for all of them you'll see equals the new the object image so for each one now i will give them a source send.src equals i'm going to copy this and the last one is for the pipe itself now so i'm gonna save the images so my folder images then the bird.png all my images are in the same directory and the last one i'm gonna check now if my images are loaded and yes now we will draw our images so we're gonna set a new function trowel first i'm gonna draw the the background i'm gonna set x draw image i'm giving it the background object and then the x position under one position and i'm gonna call the draw function now i'm gonna draw the pipe north and south take the draw ms so the pipe north i'm gonna use some uh x and do i positions for now here's my pipe now pipe south and for the pipe uh and for the pipe salt we're gonna add the not pipe dot height plus the gap so i'm gonna say just constant and i'm gonna create some variables right here and say the var the constant here equals the pipe not that height plus the gap and the car position to 70 or 75 pixels i'm gonna copy this to the bottom and now if we refresh i will get my pipe south i'm going to set 80 for the gap or 85 it looks great now let's go and draw the the front ground i'm going to set x that draw image the foreground zero and zero now if i say zero one zero for the y position it is at the top so i'm gonna say converted height minus the front ground at height so it's in its place now i will draw the bird i'm going to say for example 10 pixels for the exposition and 150 for the y position now we will change the x and y position later so i'm going to say bird x for the x position and bird y for the y position i'm going to change them in my code this line now our now our bird will will fall continuously because of the gravity so we will say the bird y plus and the gravity so we'll increment it by the gravity so we will set the gravity to to 1 for now let's refresh now the budget is now moving so we have to request the animation frame for the draw function now the bird is falling cool so the request animation here called the draw and the draw called the request animation and then it calls the draw again and again and again now let's go and now if our player hits or press ok and the keyboard then the birds will move up so set a new function called move up so the bird y will decrement by 20 for example for now so if i hit or if i press ok you see the bird goes up and then goes down by the gravity again now let's go and declare the pipe coordinates it's an array as we saw before so i'm going to see if our pipe equals an empty array and then pipe then pipe of zero equals so i'm going to give it an x coordinate so the pipe will be there and do y equals zero now we're gonna use a full loop to print or to draw all the pipes i'm gonna copy this inside the loop and i'm going to change the x val values with the pipe of i dot x so this is the x position for every i in the pipe array so the pipe nut and the pipe side has the same positions for the x positions and here is the y position now we'll say pipe of i minus minus to move uh to move the the pipe to the left to the to the left here now my pipes are moving to the to the left now i have to add new pipes to my array so i'm going to say f the pipe of i that x equals 125 example you can use whatever value you want i will push a new object to my array pipe so the x position is always covers that with it and the white position here is a random position so we'll use the math floor and the matte random multiply by the piping off that height minus the pipe north dot height and here is the result i have to change the gravity here so the ground i'm going to say 1.5 for the gravity and 25 for the for the move up function to make things easier so that's good now now let's detect if there's a collision so if if there is a collision we will reload the page and now let's check that there's equation also equation now we'll say and for the white positions if the position is less than the pipe the pipeline plus the height of the pipe oh the dead y is greater than or equal to the height of that point plus extra exposure now i'm gonna check that cool but if i go through the gap if i go through the the gap nothing happens that's cool now when our bird hits the the fog the front ground it's a game over also so let's say if the bird y plus the bird dot height is greater than or equal to canvas height minus the front ground height so whenever it touches the front ground it's a game over now if the pipe i the x equals a five will increment the score by one and and will go and print that to the to the canvas so we're gonna give it a style a color for our text and a font a font size on the font family and then we're going to use ctx dot felt text to print the text to our canvas so here we're giving it the text to show a string and then the x position i'm going to say for 10 and then 20 for the y position now it's at the top i'm going to move it to the bottom i'm going to say canvas height minus 20. now it's at the bottom now the score increment 2 3 oh that's a game over now let's add some sounds to the game let's first create audio files so i'm going to save our fly when our bird fly we will make this sound and win the score increment we will use this sound so i'm gonna give it the source of the files so i'm gonna say sounds fly does mp3 and then for the score it's score does mp3 so when i move up the bird it means when the bird flies then i will play the the fly sound so i'm going to say fly dot play and now if the score increments then we will say skull dot play now you can hear the sound when i press ok on the keyboard and doing the score increments if i pass through the gap so this is the guys for this tutorial
