With timestamps:

00:03 - [Music]
00:10 - thank you it's fantastic to be back in
00:12 - paris uh so
00:14 - 22 years ago uh in
00:17 - in may i did 10 days of hard work i
00:19 - didn't sleep much
00:21 - but
00:22 - before that in february i was recruited
00:25 - my friends said you know come out to the
00:28 - coast we'll have a few laughs
00:30 - do scheme in the browser
00:32 - and by the time i got there of course it
00:34 - was supposed to look like java and as
00:35 - kristoff said b
00:37 - a little language
00:39 - i knew after i got into the netscape 2
00:41 - that it would either die quickly and
00:43 - microsoft would completely replace it
00:46 - or it would be around for 20 or years or
00:48 - longer and i said this to my cubicle
00:50 - mate at netscape jeff weinstein so he
00:52 - can testify to that
00:54 - but people get impatient and they get
00:58 - tempted by things like you know
01:00 - windows on the pc and you think the web
01:02 - will die every 10 years and it
01:04 - doesn't it just keeps going and that's
01:06 - why i like this quote from ian hickson
01:08 - things that are impossible just take
01:09 - longer
01:10 - i'm going to cover why that is
01:12 - necessarily so with the web and the best
01:14 - way to cope with that fact
01:17 - i've been around a long time so there
01:18 - was netscape javascript i found in
01:21 - mozilla with jamie zwinsky other people
01:24 - did firefox which restarted the browser
01:26 - market nobody thought that was possible
01:28 - taught google how to do chrome and for
01:30 - me the interesting innovation is now
01:32 - going into peer-to-peer networks that
01:33 - are not just for downloading songs but
01:36 - but now for things like uh
01:38 - cryptocurrencies and involved in those
01:41 - as well as in uh ad blocking traction
01:44 - protection and privacy by design i think
01:47 - privacy tech is going to be big in the
01:48 - next 10 years i'm glad that europe is
01:50 - doing its part there
01:52 - how do we cope with the fact that in any
01:56 - regime of web browsers you're going to
01:59 - have competition
02:01 - you might have a near-death experience
02:03 - where internet explorer takes 95 of the
02:05 - market but firefox showed how to restart
02:07 - it and i think that will be a lesson
02:09 - that is not forgotten
02:10 - that means you'll have competing
02:12 - browsers working in standards bodies and
02:14 - they have to find a modis vivendi they
02:18 - have to get along and the best way that
02:20 - i've learned to do it is just not smoke
02:22 - but to socialize
02:24 - and this has been going on with
02:26 - javascript since
02:28 - 1996 november when netscape took
02:31 - javascript to the ecma
02:33 - standards body at that time it was the
02:35 - european computer manufacturers
02:36 - association uh here's the secretary
02:39 - general of the time of bon vivant i
02:40 - remember fondly he's retired now um
02:44 - he lived in geneva he has a
02:46 - dutch surname but he's belgian-born
02:49 - polymath
02:51 - raconteur a really fun guy and that i
02:54 - think taught me something that we've
02:56 - tried to keep going in this committee
02:57 - that you have dinners together and you
02:59 - you try not to hold grudges or let
03:01 - personality conflicts which are
03:03 - inevitable get the better of you um and
03:05 - and netscape
03:07 - while it lasted did that and microsoft
03:09 - even played relatively fair as they took
03:11 - the browser market but then they shut it
03:13 - all down so with firefox we brought it
03:15 - back and we actually restarted it i went
03:18 - to geneva in 2005 after firefox 10 came
03:21 - out in november of 2004
03:23 - and i said beyond let's let's bring the
03:25 - band back together it's time to improve
03:27 - javascript again and you know microsoft
03:29 - was kind of like oh do we really have to
03:31 - we're doing c sharp
03:33 - but
03:34 - macromedia had used a version of
03:36 - javascript called actionscript in the
03:38 - flash player and so we formed an
03:39 - alliance with them and this led to a
03:41 - bunch of
03:42 - learning and
03:44 - socializing and philosophizing that i
03:46 - think is important i use this famous
03:49 - painting by raphael
03:50 - there's a detail from it um
03:53 - that's doug crockford on the left and me
03:56 - on the right
03:58 - doug's always pointing up and i'm like
04:01 - keep it real um
04:04 - there are bad problems in committees
04:06 - it's inevitable because you get um
04:09 - conflicts of personality and conflicts
04:10 - of style and and sort of
04:13 - deep deeply held beliefs that aren't
04:15 - fully unpacked into chains of reasoning
04:17 - it's hard to reason together
04:19 - if people come from really different
04:21 - schools of thought
04:22 - so
04:23 - we've learned how to cope with this by
04:25 - not rushing to any conclusion when
04:27 - you're doing language design you're
04:28 - solving many problems which
04:30 - cross cut or trade off against each
04:32 - other you have to take the the
04:34 - hermeneutic spiral
04:37 - as it's called you have to be willing to
04:39 - go around several times before you close
04:42 - on a design
04:43 - and sometimes you have to throw things
04:44 - out and start over again that's happened
04:46 - for instance with es6 proxies
04:48 - you have to avoid the temptation to say
04:50 - well i have developers that are solving
04:52 - this complex
04:54 - compound problems so i'm just going to
04:56 - give them a complex compound solution
04:57 - that's kind of a fixed
04:59 - composite function because that usually
05:01 - doesn't work it's usually
05:03 - the case that when you decompose it you
05:04 - find that you've got
05:06 - uncomposable
05:08 - parts and what we'd rather do is what
05:10 - the scheme
05:11 - scheme in the browser the scheme
05:13 - report says in its very first paragraph
05:15 - it says
05:16 - break the language down into orthogonal
05:18 - primitives that work well together so
05:20 - that's been the job of the committee and
05:22 - coming to an understanding of those
05:23 - primitives and minimizing the choice of
05:26 - primitives choice of axioms has been
05:27 - important then there's the ugly uh i
05:30 - shouldn't linger on it tuko um
05:34 - you find people sometimes let their
05:36 - competitive interests get the better of
05:38 - them and so they they use um
05:40 - essentially bad faith arguing they find
05:42 - sort of vague um excuses for not doing
05:44 - something and they all have some truth
05:47 - and they're all half truths you ain't
05:48 - gonna need it don't scare the junior
05:51 - people you know don't make it
05:54 - into java but
05:55 - you have to actually get into the
05:57 - concrete
05:58 - aspects to get past those objections
06:00 - because that could be true of many
06:01 - things that we want and while we don't
06:02 - want to make javascript into java
06:04 - languages grow there's a great talk by
06:06 - guy steele where he starts with a subset
06:08 - of the english language in presenting
06:09 - the talk and then he grows his subset as
06:11 - he gives the talk languages grow that's
06:13 - how they how they progress
06:16 - so
06:17 - we've had to cope with the good the bad
06:18 - and the ugly and we've made progress
06:21 - the old days were
06:23 - when netscape had some market power
06:24 - which was going away and we got es1 done
06:27 - based on my work in netscape 2 and 3.
06:32 - ecmascript 2 just historical curiosity
06:34 - was the iso version of es1 es3 was the
06:37 - big one it had a bunch of new things it
06:39 - had fully nested functions and closures
06:40 - function expressions
06:43 - a lot of you may have heard about es4 i
06:45 - spent many years on that that's where we
06:46 - with macromedia which got bought by
06:48 - adobe tried to really get microsoft to
06:51 - sit up and pay attention by doing the
06:52 - big language that had been envisioned
06:55 - even in 1999 uh by somebody named
06:57 - walmart horwat
06:59 - of netscape who i gave the keys to the
07:01 - kingdom too he designed this language
07:03 - action swift 3 has a lot of aspects of
07:05 - it
07:06 - it actually got implemented by microsoft
07:08 - on the server side in 2000 but they they
07:10 - never promoted it and did not
07:12 - standardize it es4 failed but the
07:14 - failure was important because the
07:15 - committee then
07:17 - with my code name harmony found a way to
07:20 - come together and work on es5 which was
07:23 - the no new syntax
07:24 - 3.1 kind of
07:26 - incremental step from es3 that had been
07:28 - started concurrently with the s4
07:30 - doug crockford and others dissenting
07:32 - from es4 in public
07:34 - we pulled everybody together and we've
07:36 - been operating in much better mode since
07:38 - then es6 obviously is a big leap forward
07:40 - a lot of backlog had to be absorbed
07:43 - but uh now we've got on to a better
07:45 - cadence uh there's a backstory some of
07:47 - this is you've heard about scheme in the
07:49 - browser it was a lie uh
07:52 - it was a vain hope let's say um
07:55 - there were other things that i did in
07:57 - hurry in the 90s that i do regret um
08:00 - you know do while switch try catch
08:02 - that's all okay i think that worked out
08:03 - um regular expressions
08:06 - uh
08:07 - thoughts demu i based on pro 4.
08:09 - sorry
08:11 - i met larry wall in 97 and i said hey
08:13 - i'm putting pro regular expressions in
08:14 - javascript and he turned green he looked
08:17 - very unhappy um
08:19 - he was changing them for pro 5.
08:21 - uh and pro 6 is even even different
08:23 - because he had could do a clean slate
08:25 - language um
08:26 - the restarting of of tc39 i mentioned
08:30 - that
08:30 - that was painful because microsoft
08:32 - didn't want to do much to the language
08:34 - until they did and when they did it was
08:36 - still this sort of half-hearted thing
08:38 - until i think chrome came out and that
08:40 - really woke them up
08:41 - so um
08:43 - we had you know amazing performance work
08:45 - in javascript engines uh we even had um
08:48 - google say that javascript cannot be
08:50 - repaired so we'll do
08:52 - dash now dart um
08:54 - and i told him it wouldn't work they
08:56 - didn't listen
08:57 - uh that actually leaked through
09:00 - an accidental global message uh post by
09:03 - somebody on the tc39 committee whose
09:05 - name is on it he's not the author of
09:07 - that dash memo but he he turned white
09:10 - and went over to another googler during
09:11 - the november 2010 meeting and tapped
09:13 - them on the shoulder in theatrical
09:15 - fashion and they all all the googlers
09:17 - decamped the hall and we said what's
09:18 - going on is the singularity arrived has
09:21 - has sergey or larry cancelled free you
09:23 - know cookies um
09:25 - only later did we learn that
09:27 - my friend on the committee from google
09:29 - had accidentally posted this this
09:30 - internal memo which javascript must be
09:32 - replaced it was like we love javascript
09:34 - but it must be replaced
09:36 - and it's just really hard to replace
09:38 - there's something like successful um dna
09:40 - about javascript once it's in there
09:42 - you're kind of hard they're getting rid
09:43 - of it another thing i'm particularly
09:45 - proud of in the last 10 years was this
09:47 - sort of discovery
09:49 - carving nature at the joint as plato
09:50 - said of science of asim.js inside of
09:54 - javascript
09:55 - if you look at c code and some of you
09:56 - probably know c code you have
09:58 - you have a statically typed language
10:00 - with machine types and there is fast c
10:02 - code notably games games are always
10:05 - torturing the hardware um
10:07 - can you map that to javascript it turns
10:08 - out you can and this was discovered the
10:10 - first i think by elon zakai
10:12 - maybe by others concurrently or a little
10:14 - bit before adobe labs
10:17 - and the trick is to use the bitwise
10:19 - operators that i put in most of them
10:20 - come from c one of them comes from java
10:22 - so i'm really glad i put those those
10:24 - like vertical bar operator in because
10:26 - that
10:27 - if it
10:28 - hadn't been in there from 1995 it would
10:30 - have been hard to add later and the fact
10:32 - that it was there all along meant we
10:34 - could do incredibly fast javascript also
10:36 - needed typed arrays from webgl
10:38 - and this is this is not meant for
10:40 - reading but just the dynamic nature of
10:42 - javascript has led to a common
10:44 - architecture in all i think all the top
10:46 - engines now the open source engines
10:47 - where you have interpreting and you have
10:49 - sort of a fast just-in-time compiler
10:51 - baseline compiler and then you have a
10:53 - much more aggressive
10:55 - compiler that operates when there's
10:57 - really hot code running and
10:59 - the fast subset of javascript that is
11:02 - asm.js the statically typed fast subset
11:05 - allows bypassing the baseline jit and
11:08 - the interpreter which has paved the way
11:11 - for what is webassembly which we're all
11:12 - excited about um
11:15 - a little more backstory i
11:16 - i realized after alan where's brock did
11:19 - a great job uh as editor of atlanta 262
11:23 - and as we we got
11:25 - es5 done that he was not happy at
11:27 - microsoft so i recruited him to mozilla
11:29 - and we did es6 that was a a coup and i
11:31 - was uh glad to have alan on the crew at
11:33 - mozilla there
11:35 - the formalization of asm.js
11:38 - as a type system was by dave herman the
11:40 - exploratory compiler driven work was by
11:42 - elon zakai and luke wagner did the
11:44 - amazing compiler that bypasses those
11:46 - jits and does a sort of whole module
11:48 - compilation to machine code and it all
11:51 - came together in one week in the fall of
11:53 - 2012 in raleigh north carolina epic um
11:59 - games unreal engine 3 was ported in four
12:02 - days
12:03 - you know you had to get the audio
12:04 - working uh using open el map to web
12:07 - audio you had to get opengl map to webgl
12:09 - fix a few compiler boxes suddenly this
12:11 - game is running at 60 frames a second
12:14 - tim sweeney the founder of epic said he
12:15 - thought it would take years to get there
12:17 - i think this pretty much killed the
12:18 - portable native client and other such
12:20 - approaches it was at that point
12:21 - inevitable that web assembly would
12:22 - emerge babel.js was interesting because
12:25 - 10 or 20 years ago people would say i'm
12:27 - never writing
12:29 - code with a compiler i'm writing
12:30 - javascript to the metal
12:32 - and and now they've gotten used to using
12:34 - tools and i think that's beneficial
12:36 - linting but even type systems type
12:38 - script and so on
12:41 - and at some point i think the committee
12:42 - will standardize some kind of type
12:44 - system we have a new proposal from some
12:45 - folks at google it's going to take a
12:47 - while it there's disagreement between
12:49 - flow and typescript and there's
12:51 - a lot of evolution and exploration to do
12:54 - you know how modern software works on a
12:56 - rapid release cycle like six-week cycle
12:58 - for you know firefox chrome brave
13:02 - some of their browsers are more like an
13:03 - annual cycle the ethnic committee is now
13:05 - going on an annual cadence which is good
13:07 - because it gets rid of that scheduled
13:08 - chicken problem where if people feel
13:10 - like they're going to miss they can just
13:11 - go to the next year they don't try to
13:13 - hold up everything to jam and something
13:15 - doesn't fit um
13:17 - and and as predicted google threw in the
13:19 - towel on dart
13:22 - and around the same time i think threw
13:23 - in the towel on portable native client
13:24 - was not going to go across browser you
13:26 - know webassembly was out in 2015 june
13:28 - so
13:29 - there's been a lot of interesting
13:30 - backstory that you may not hear
13:31 - everywhere i sometimes try to share this
13:33 - this is at a brooklyn js meetup where i
13:35 - said uh
13:37 - you know something's changed some stay
13:38 - the same
13:40 - apple is still apple
13:42 - other companies sort of trade roles and
13:44 - and attitudes
13:46 - and and right after that of course
13:48 - microsoft open source their chakra core
13:50 - javascript engine we're still waiting
13:51 - for edge but it could happen
13:53 - it was a good move um
13:56 - i'll just share in detail one of the new
13:58 - things that's coming into um es2018 or
14:01 - something i don't know what it'll be um
14:03 - it's it's getting implemented in all the
14:04 - engines now uh all the open source
14:06 - engines
14:07 - and that's big and you know how when you
14:09 - you start counting up in javascript you
14:11 - get past 53-bit integer you lose
14:13 - precision um i didn't have time to do
14:16 - any other number types and i did put in
14:18 - those bitwise operators so
14:20 - implicit in javascript are 32-bit
14:22 - assigned in unsigned integers other than
14:24 - that you're out of luck and if you want
14:26 - to go to really big numbers like the
14:28 - finance people do you end up using your
14:30 - own
14:31 - big decimal or big integer library but
14:33 - we're putting big into the language and
14:35 - it'll have nice end suffix for literal
14:37 - syntax they'll have operators that work
14:38 - sensibly
14:39 - even
14:41 - with some
14:42 - safe conversions for comparisons um
14:45 - it will have the ability to name
14:47 - property keys and
14:49 - cast to narrow or integer types which is
14:51 - important for asm.js because bigint will
14:53 - matter there this is how we're going to
14:55 - project
14:57 - 64-bit types uh
14:59 - through javascript big-ins back into
15:01 - 64-bit machine types in azim js i i had
15:03 - to get this ball rolling by saying let's
15:05 - do 64-bit types and a couple of people
15:07 - um dan ehrenberg notably um
15:10 - said let's let's let's do big ins and we
15:12 - can make it just as fast and it'll be
15:13 - better and darth had big in so we know
15:15 - it's better so that's good um i'll put
15:18 - these slides up you can see the links
15:19 - here's an example fibonacci function in
15:21 - javascript nicely using
15:23 - uh destructuring
15:24 - and computing fibonacci numbers and if
15:27 - you go up to fib 79 you run out of 53
15:30 - bits of mantissa and ieee double
15:33 - everyone blames me for for ieee's
15:35 - floating point problems like not a
15:36 - number somebody put a tweet up with a
15:39 - oscilloscope with not a number this is
15:41 - like a tektronix or hp oscilloscope and
15:43 - they said it's javascript and i said no
15:45 - it's not it's c code it's it's um
15:48 - it's ieee but i'll take the blame uh
15:50 - with bigint
15:51 - we get rid of this we get the true
15:53 - answer in green
15:55 - instead of the wrong one and ready
15:56 - just to show you that the committee is
15:58 - is not messing around these are a
15:59 - selection of the stage three proposals
16:02 - those union node
16:04 - realize import as a function is hard to
16:06 - do statically but it's coming it's
16:08 - thanks to dominic google
16:10 - dominic denicola so dynamic import
16:13 - pretty big
16:14 - michael fitcar is championing flat map
16:17 - and flattening for all the functional
16:19 - fans out there um
16:22 - facebook is doing um
16:25 - rest and spread for objects that's what
16:26 - the third line shows
16:28 - we're evolving classes and uh actually i
16:31 - think other things to have private
16:33 - fields and methods and and
16:35 - uh
16:36 - the design is more like ruby i think um
16:39 - there's still some details being debated
16:41 - there but this is at stage three uh
16:43 - synchronous iterations so you can do for
16:45 - a weight of and you can totally efface
16:48 - the the pain of promises a bunch of
16:50 - regular expression fixes look behind
16:52 - back in 1997 just missed
16:54 - es3
16:56 - it was just being added to pearl when we
16:58 - were cutting off the es3 regular
17:00 - expression
17:01 - features so finally getting a look
17:02 - behind assertions and unicode is getting
17:05 - help and named property groups
17:07 - uh the slash s flag on regular
17:09 - expressions and there's there's much
17:11 - more
17:12 - small proposals some bigger ones i
17:14 - didn't cover here
17:16 - they all have to go through a
17:18 - rigorous process to get into the next
17:19 - version of language but it in the annual
17:21 - cycle we're going at javascript will
17:23 - continue to evolve
17:25 - and that's why i say almost bet on js
17:27 - and
17:28 - i have to treat webassembly fairly
17:30 - because it's another input language for
17:31 - the same javascript vm that we all enjoy
17:33 - in multiple browsers
17:36 - and
17:36 - oh yeah webpack's pretty cool too thank
17:38 - you very much
17:47 - [Music]
17:48 - [Applause]
17:51 - [Music]

Cleaned transcript:

thank you it's fantastic to be back in paris uh so 22 years ago uh in in may i did 10 days of hard work i didn't sleep much but before that in february i was recruited my friends said you know come out to the coast we'll have a few laughs do scheme in the browser and by the time i got there of course it was supposed to look like java and as kristoff said b a little language i knew after i got into the netscape 2 that it would either die quickly and microsoft would completely replace it or it would be around for 20 or years or longer and i said this to my cubicle mate at netscape jeff weinstein so he can testify to that but people get impatient and they get tempted by things like you know windows on the pc and you think the web will die every 10 years and it doesn't it just keeps going and that's why i like this quote from ian hickson things that are impossible just take longer i'm going to cover why that is necessarily so with the web and the best way to cope with that fact i've been around a long time so there was netscape javascript i found in mozilla with jamie zwinsky other people did firefox which restarted the browser market nobody thought that was possible taught google how to do chrome and for me the interesting innovation is now going into peertopeer networks that are not just for downloading songs but but now for things like uh cryptocurrencies and involved in those as well as in uh ad blocking traction protection and privacy by design i think privacy tech is going to be big in the next 10 years i'm glad that europe is doing its part there how do we cope with the fact that in any regime of web browsers you're going to have competition you might have a neardeath experience where internet explorer takes 95 of the market but firefox showed how to restart it and i think that will be a lesson that is not forgotten that means you'll have competing browsers working in standards bodies and they have to find a modis vivendi they have to get along and the best way that i've learned to do it is just not smoke but to socialize and this has been going on with javascript since 1996 november when netscape took javascript to the ecma standards body at that time it was the european computer manufacturers association uh here's the secretary general of the time of bon vivant i remember fondly he's retired now um he lived in geneva he has a dutch surname but he's belgianborn polymath raconteur a really fun guy and that i think taught me something that we've tried to keep going in this committee that you have dinners together and you you try not to hold grudges or let personality conflicts which are inevitable get the better of you um and and netscape while it lasted did that and microsoft even played relatively fair as they took the browser market but then they shut it all down so with firefox we brought it back and we actually restarted it i went to geneva in 2005 after firefox 10 came out in november of 2004 and i said beyond let's let's bring the band back together it's time to improve javascript again and you know microsoft was kind of like oh do we really have to we're doing c sharp but macromedia had used a version of javascript called actionscript in the flash player and so we formed an alliance with them and this led to a bunch of learning and socializing and philosophizing that i think is important i use this famous painting by raphael there's a detail from it um that's doug crockford on the left and me on the right doug's always pointing up and i'm like keep it real um there are bad problems in committees it's inevitable because you get um conflicts of personality and conflicts of style and and sort of deep deeply held beliefs that aren't fully unpacked into chains of reasoning it's hard to reason together if people come from really different schools of thought so we've learned how to cope with this by not rushing to any conclusion when you're doing language design you're solving many problems which cross cut or trade off against each other you have to take the the hermeneutic spiral as it's called you have to be willing to go around several times before you close on a design and sometimes you have to throw things out and start over again that's happened for instance with es6 proxies you have to avoid the temptation to say well i have developers that are solving this complex compound problems so i'm just going to give them a complex compound solution that's kind of a fixed composite function because that usually doesn't work it's usually the case that when you decompose it you find that you've got uncomposable parts and what we'd rather do is what the scheme scheme in the browser the scheme report says in its very first paragraph it says break the language down into orthogonal primitives that work well together so that's been the job of the committee and coming to an understanding of those primitives and minimizing the choice of primitives choice of axioms has been important then there's the ugly uh i shouldn't linger on it tuko um you find people sometimes let their competitive interests get the better of them and so they they use um essentially bad faith arguing they find sort of vague um excuses for not doing something and they all have some truth and they're all half truths you ain't gonna need it don't scare the junior people you know don't make it into java but you have to actually get into the concrete aspects to get past those objections because that could be true of many things that we want and while we don't want to make javascript into java languages grow there's a great talk by guy steele where he starts with a subset of the english language in presenting the talk and then he grows his subset as he gives the talk languages grow that's how they how they progress so we've had to cope with the good the bad and the ugly and we've made progress the old days were when netscape had some market power which was going away and we got es1 done based on my work in netscape 2 and 3. ecmascript 2 just historical curiosity was the iso version of es1 es3 was the big one it had a bunch of new things it had fully nested functions and closures function expressions a lot of you may have heard about es4 i spent many years on that that's where we with macromedia which got bought by adobe tried to really get microsoft to sit up and pay attention by doing the big language that had been envisioned even in 1999 uh by somebody named walmart horwat of netscape who i gave the keys to the kingdom too he designed this language action swift 3 has a lot of aspects of it it actually got implemented by microsoft on the server side in 2000 but they they never promoted it and did not standardize it es4 failed but the failure was important because the committee then with my code name harmony found a way to come together and work on es5 which was the no new syntax 3.1 kind of incremental step from es3 that had been started concurrently with the s4 doug crockford and others dissenting from es4 in public we pulled everybody together and we've been operating in much better mode since then es6 obviously is a big leap forward a lot of backlog had to be absorbed but uh now we've got on to a better cadence uh there's a backstory some of this is you've heard about scheme in the browser it was a lie uh it was a vain hope let's say um there were other things that i did in hurry in the 90s that i do regret um you know do while switch try catch that's all okay i think that worked out um regular expressions uh thoughts demu i based on pro 4. sorry i met larry wall in 97 and i said hey i'm putting pro regular expressions in javascript and he turned green he looked very unhappy um he was changing them for pro 5. uh and pro 6 is even even different because he had could do a clean slate language um the restarting of of tc39 i mentioned that that was painful because microsoft didn't want to do much to the language until they did and when they did it was still this sort of halfhearted thing until i think chrome came out and that really woke them up so um we had you know amazing performance work in javascript engines uh we even had um google say that javascript cannot be repaired so we'll do dash now dart um and i told him it wouldn't work they didn't listen uh that actually leaked through an accidental global message uh post by somebody on the tc39 committee whose name is on it he's not the author of that dash memo but he he turned white and went over to another googler during the november 2010 meeting and tapped them on the shoulder in theatrical fashion and they all all the googlers decamped the hall and we said what's going on is the singularity arrived has has sergey or larry cancelled free you know cookies um only later did we learn that my friend on the committee from google had accidentally posted this this internal memo which javascript must be replaced it was like we love javascript but it must be replaced and it's just really hard to replace there's something like successful um dna about javascript once it's in there you're kind of hard they're getting rid of it another thing i'm particularly proud of in the last 10 years was this sort of discovery carving nature at the joint as plato said of science of asim.js inside of javascript if you look at c code and some of you probably know c code you have you have a statically typed language with machine types and there is fast c code notably games games are always torturing the hardware um can you map that to javascript it turns out you can and this was discovered the first i think by elon zakai maybe by others concurrently or a little bit before adobe labs and the trick is to use the bitwise operators that i put in most of them come from c one of them comes from java so i'm really glad i put those those like vertical bar operator in because that if it hadn't been in there from 1995 it would have been hard to add later and the fact that it was there all along meant we could do incredibly fast javascript also needed typed arrays from webgl and this is this is not meant for reading but just the dynamic nature of javascript has led to a common architecture in all i think all the top engines now the open source engines where you have interpreting and you have sort of a fast justintime compiler baseline compiler and then you have a much more aggressive compiler that operates when there's really hot code running and the fast subset of javascript that is asm.js the statically typed fast subset allows bypassing the baseline jit and the interpreter which has paved the way for what is webassembly which we're all excited about um a little more backstory i i realized after alan where's brock did a great job uh as editor of atlanta 262 and as we we got es5 done that he was not happy at microsoft so i recruited him to mozilla and we did es6 that was a a coup and i was uh glad to have alan on the crew at mozilla there the formalization of asm.js as a type system was by dave herman the exploratory compiler driven work was by elon zakai and luke wagner did the amazing compiler that bypasses those jits and does a sort of whole module compilation to machine code and it all came together in one week in the fall of 2012 in raleigh north carolina epic um games unreal engine 3 was ported in four days you know you had to get the audio working uh using open el map to web audio you had to get opengl map to webgl fix a few compiler boxes suddenly this game is running at 60 frames a second tim sweeney the founder of epic said he thought it would take years to get there i think this pretty much killed the portable native client and other such approaches it was at that point inevitable that web assembly would emerge babel.js was interesting because 10 or 20 years ago people would say i'm never writing code with a compiler i'm writing javascript to the metal and and now they've gotten used to using tools and i think that's beneficial linting but even type systems type script and so on and at some point i think the committee will standardize some kind of type system we have a new proposal from some folks at google it's going to take a while it there's disagreement between flow and typescript and there's a lot of evolution and exploration to do you know how modern software works on a rapid release cycle like sixweek cycle for you know firefox chrome brave some of their browsers are more like an annual cycle the ethnic committee is now going on an annual cadence which is good because it gets rid of that scheduled chicken problem where if people feel like they're going to miss they can just go to the next year they don't try to hold up everything to jam and something doesn't fit um and and as predicted google threw in the towel on dart and around the same time i think threw in the towel on portable native client was not going to go across browser you know webassembly was out in 2015 june so there's been a lot of interesting backstory that you may not hear everywhere i sometimes try to share this this is at a brooklyn js meetup where i said uh you know something's changed some stay the same apple is still apple other companies sort of trade roles and and attitudes and and right after that of course microsoft open source their chakra core javascript engine we're still waiting for edge but it could happen it was a good move um i'll just share in detail one of the new things that's coming into um es2018 or something i don't know what it'll be um it's it's getting implemented in all the engines now uh all the open source engines and that's big and you know how when you you start counting up in javascript you get past 53bit integer you lose precision um i didn't have time to do any other number types and i did put in those bitwise operators so implicit in javascript are 32bit assigned in unsigned integers other than that you're out of luck and if you want to go to really big numbers like the finance people do you end up using your own big decimal or big integer library but we're putting big into the language and it'll have nice end suffix for literal syntax they'll have operators that work sensibly even with some safe conversions for comparisons um it will have the ability to name property keys and cast to narrow or integer types which is important for asm.js because bigint will matter there this is how we're going to project 64bit types uh through javascript bigins back into 64bit machine types in azim js i i had to get this ball rolling by saying let's do 64bit types and a couple of people um dan ehrenberg notably um said let's let's let's do big ins and we can make it just as fast and it'll be better and darth had big in so we know it's better so that's good um i'll put these slides up you can see the links here's an example fibonacci function in javascript nicely using uh destructuring and computing fibonacci numbers and if you go up to fib 79 you run out of 53 bits of mantissa and ieee double everyone blames me for for ieee's floating point problems like not a number somebody put a tweet up with a oscilloscope with not a number this is like a tektronix or hp oscilloscope and they said it's javascript and i said no it's not it's c code it's it's um it's ieee but i'll take the blame uh with bigint we get rid of this we get the true answer in green instead of the wrong one and ready just to show you that the committee is is not messing around these are a selection of the stage three proposals those union node realize import as a function is hard to do statically but it's coming it's thanks to dominic google dominic denicola so dynamic import pretty big michael fitcar is championing flat map and flattening for all the functional fans out there um facebook is doing um rest and spread for objects that's what the third line shows we're evolving classes and uh actually i think other things to have private fields and methods and and uh the design is more like ruby i think um there's still some details being debated there but this is at stage three uh synchronous iterations so you can do for a weight of and you can totally efface the the pain of promises a bunch of regular expression fixes look behind back in 1997 just missed es3 it was just being added to pearl when we were cutting off the es3 regular expression features so finally getting a look behind assertions and unicode is getting help and named property groups uh the slash s flag on regular expressions and there's there's much more small proposals some bigger ones i didn't cover here they all have to go through a rigorous process to get into the next version of language but it in the annual cycle we're going at javascript will continue to evolve and that's why i say almost bet on js and i have to treat webassembly fairly because it's another input language for the same javascript vm that we all enjoy in multiple browsers and oh yeah webpack's pretty cool too thank you very much
