With timestamps:

00:00 - jonathan rue has created many popular
00:02 - and best-selling software courses in
00:04 - this free course he will teach you how
00:06 - to use the kivy library to create games
00:08 - with python
00:10 - you already learned the python
00:12 - programming language you have the basics
00:14 - and you are able to create your own
00:16 - programs with python but now what are
00:20 - the next steps how to improve your
00:22 - skills to the next level and be able to
00:24 - create more powerful applications with a
00:27 - graphical user interface that can run on
00:29 - any platforms ios android mac windows
00:34 - yes it's possible to create games
00:36 - desktop and mobile applications with one
00:39 - single long-wait python and for that we
00:42 - are going to use the tv library tv lets
00:45 - you create games desktop and mobile
00:47 - applications by sharing the same source
00:50 - code in python for every platform that's
00:53 - very powerful in this tutorial i will
00:55 - teach you everything you need to know
00:57 - about tv step by step you will learn
01:00 - about the widgets to create user
01:02 - interfaces with buttons labels images
01:04 - and so on you will use all kinds of
01:07 - layouts for placement strategies and ui
01:10 - that can automatically adapt to every
01:12 - screen sizes mobile desktop and tablets
01:15 - and you will also learn about the canvas
01:17 - so you can draw anything you want on the
01:19 - screen lines rectangle circles at 60
01:22 - frames per second and finally you will
01:25 - practice your new skills with a real
01:27 - world project that we will create from a
01:29 - to z
01:30 - the galaxy project galaxy
01:34 - galaxy is a perspective game where you
01:36 - need to keep your spaceship on the track
01:39 - you will learn how to display everything
01:41 - in perspective how to create an
01:42 - algorithm to generate the land how to
01:44 - manage screen touch keypress and how to
01:46 - play sounds and all of this runs on mac
01:49 - windows ios and android so are you ready
01:53 - let's start
01:55 - [Music]
02:02 - hi i'm jonathan with python you can
02:05 - create graphical user interfaces with
02:07 - many different libraries you have tick
02:10 - inter which automatically comes with the
02:12 - installation of python it's easy but not
02:14 - very powerful you have qt which is good
02:17 - to make feature-rich interfaces with
02:19 - many kind of widgets but it comes with a
02:21 - commercial license there is also pygame
02:24 - which is more specific to 2d games for
02:26 - windows and mac and finally there is kv
02:30 - it's based on opengl so the graphics are
02:32 - fast and it supports all the platforms
02:34 - linux windows mac os android ios and
02:38 - even raspberry that's the library i
02:40 - choose to teach you here because it's
02:42 - easy versatile and powerful this
02:45 - tutorial is made up of two parts part
02:47 - one you will learn the kiwi library with
02:50 - the lab project that will be our
02:52 - programming laboratory part two you will
02:55 - practice your skills with the galaxy
02:57 - project in the lab project you are going
02:59 - to learn how to use the layouts the
03:01 - widgets and the canvas for the galaxy
03:04 - project we will progress with three
03:06 - versions version one we will manage the
03:08 - perspective the movements and the key
03:10 - press version two we will generate the
03:13 - land display the spaceship and manage
03:15 - the collisions and version three we will
03:17 - finalize the project with a menu add the
03:20 - game over state manage the score display
03:22 - images and play sounds but just before i
03:25 - will show you the installation and setup
03:27 - of qv for your project so that you will
03:29 - have a basic structure that you can
03:31 - always reuse for any project also you
03:34 - can follow this tutorial for pc windows
03:37 - or mac to follow this tutorial you have
03:40 - to know the basics of python the
03:42 - variables the functions the conditions
03:44 - the classes the loops and also you have
03:46 - to be familiar with a programming
03:48 - environment like visual studio code or
03:51 - pycharm if that's not the case i invite
03:53 - you to look at my python beginner
03:55 - tutorial on my youtube channel code with
03:58 - jonathan you will find the link in the
04:00 - description or you can find also some
04:02 - python tutorials here on freecodecamp ok
04:05 - let's start with the project creation
04:07 - and installation of tv let's do it
04:14 - i am going to show you how to create
04:15 - your project and how to install kivy in
04:18 - this course i will use pycharm but i
04:20 - will also show you with visual studio
04:22 - code and you can follow the same steps
04:24 - on mac or pc windows if you are on
04:27 - visual studio code you create a new file
04:29 - you create a new folder
04:33 - lab ok and you will name your file main
04:36 - dot py for every project you will name
04:39 - your file main dot py okay with pycharm
04:43 - you will click on new project then we
04:45 - will call it qv the lab i advise you to
04:48 - use the virtual environment but if you
04:51 - are on pc windows it's better to use an
04:53 - interpreter directly because it was some
04:56 - issues with the virtual off and of
04:58 - course you need to select a version of
05:00 - python python 3 dot something minimal
05:03 - version 3.7 you can use 3.7 3.8 3.9 3.10
05:08 - if you have no interpreter here you can
05:10 - click on this button system interpreter
05:12 - and then you select your version of
05:14 - python of course if python is not
05:16 - installed on your machine i advise you
05:18 - to go on my youtube channel called with
05:21 - jonathan there is a tutorial here that
05:23 - will explain you all the steps to set up
05:25 - your machine and to install python okay
05:27 - in my case i will select the virtual
05:29 - environment and i will take a version of
05:31 - python 3.9 create you will get this
05:35 - interface so in some case it will create
05:37 - a main.py directly if it's not the case
05:39 - you can right click here on your project
05:42 - and make a new python file that you will
05:44 - call main.py in our case we are just
05:47 - going to remove the breakpoint here and
05:49 - to remove all the code okay now we are
05:52 - going to install the kivy library i will
05:54 - show you first on pycharm and then on
05:56 - visual studio code you will click here
05:59 - on terminal and then you will type ice
06:02 - on minus minus version in my case it's
06:06 - 3.9.2 that's correct we need to be sure
06:08 - we use a python 3 version and then i
06:11 - will type pip install qv enter when it's
06:16 - complete you will type pip lists
06:19 - enter and then you can see on the list
06:22 - that kivi has been installed on visual
06:24 - studio code you will click here on
06:26 - terminal new terminal and you will have
06:29 - this interface here you will type python
06:32 - minus minus version and as you can see i
06:36 - have a version of python 2.7 as a
06:39 - default because i am on mac on pc
06:42 - windows normally you should have
06:43 - installed python version 3 something but
06:46 - if you are on mac you will need to type
06:48 - python 3 minus minus version ok in my
06:53 - case it displays python 3.9.2
06:56 - so take care here you will need to make
06:58 - sure that visual studio code is using
07:00 - the same version here on the lower left
07:03 - part here i need to select a python
07:06 - 3.9.2 so if i scroll down you can see i
07:09 - have two versions of python 3.9.2 i need
07:12 - to use the right one to do that i will
07:14 - type which python3 and i can see the
07:18 - right path here python.framework so this
07:20 - is this version that i will select here
07:23 - if you are on pc windows which does not
07:25 - exist but you can type where python to
07:29 - get the pass of your python interpreter
07:31 - also in visual studio code make sure
07:33 - that you have installed the python
07:35 - extension here else you will not have
07:37 - the possibility to play the file again i
07:40 - explain you all of that in my python
07:42 - tutorial on my youtube channel ok now we
07:45 - are going to write some code that is
07:46 - going to be the basic structure that you
07:49 - will always use with any project with tv
07:52 - i will write it on pycharm if you are on
07:55 - visual studio code you just write the
07:57 - same lines of code the first thing is to
08:00 - create a class and that will be the base
08:02 - class of our application and we are
08:04 - going to call it the lab and for every
08:08 - applications with kv you need to add
08:11 - app at the end so it's going to be the
08:14 - lab app okay take care of the upper case
08:17 - then we will inherit from the app class
08:20 - define in kivy i add semicolon and this
08:24 - class is going to be empty at the
08:26 - beginning okay you can see that we have
08:28 - to include the app it's not referenced
08:30 - yet so for this either you click here
08:33 - import qv up app but if you are on
08:35 - visual studio code you will need to
08:37 - write this manually take care because
08:39 - this is kv.app lowercase import app with
08:43 - an uppercase and then we are going to
08:45 - start our empty application so we will
08:48 - have an empty screen we will do this so
08:50 - that we can test if our application can
08:52 - initialize properly so what you will do
08:54 - is that you will take zlab app and you
08:57 - will add some parenthesis dot run
09:00 - parenthesis take care because if you
09:03 - forget the parenthesis here and if you
09:05 - write this it's not going to work you
09:07 - need to instantiate the class create an
09:09 - object and on this object you will run
09:12 - it okay on visual studio code you do
09:14 - exactly the same thing and then you will
09:17 - click on the play if you don't have the
09:19 - play here at the first time you will do
09:20 - a right click and click run okay and in
09:23 - my case i have a black screen that means
09:25 - everything is working fine on visual
09:28 - studio code you do the exact same thing
09:30 - and then you click on the play and if it
09:32 - says no module name kivy that means you
09:34 - forgot to install kivy in that case you
09:36 - need to type pip install remember that
09:39 - on the mac you need to type pip3
09:42 - install tv okay and then i can click on
09:45 - the play and i get this black screen
09:47 - which means everything is okay at this
09:50 - stage if you cannot get the black screen
09:52 - and if you get an error that says cannot
09:54 - get a window provider that means you
09:57 - have a problem with your graphic display
09:59 - first you have to know that you cannot
10:01 - start tv in a virtual machine it's not
10:04 - going to work and sometimes you cannot
10:06 - start tv on an external display and also
10:10 - if it's not working on windows you can
10:12 - upgrade your graphic card drivers okay
10:15 - just before we continue we are going to
10:17 - define the main interface of our program
10:20 - and we are going to call it the main
10:22 - widget you will write class
10:24 - main widget
10:26 - and it will inherit from the widget
10:29 - class semicolon pass
10:32 - and you need to include kv dot uix dot
10:36 - widget dot widget again take care here
10:40 - it's an upper case and if you are on
10:42 - visual studio code you will need to
10:43 - write this line here we still need to
10:47 - complete a few steps you are going to
10:48 - create a new file you will right click
10:51 - on the name of your project don't right
10:53 - click on vrv but create your new file
10:56 - here it's not going to be a python file
10:58 - it's a file and you will call it with
11:00 - the exact same name of your application
11:03 - the lab but you don't put app after you
11:07 - will just put dot kv like kivy this file
11:12 - make sure that this file is in the same
11:14 - directory as the main python file
11:16 - this file will be the definition of our
11:19 - graphical interface it's inside that
11:21 - file that we will explain what we want
11:23 - to display it's also possible to create
11:26 - our graphical interface and directly
11:28 - from the code but you will see that it's
11:29 - more easy to do it directly from the kv
11:32 - file and it's also interesting because
11:34 - you will make a separation between your
11:37 - graphical definitions and the logic of
11:40 - your code inside this kv file we are
11:42 - going to explain what is the main
11:45 - interface and for us the main interface
11:47 - is this main widget in the next video i
11:50 - will show you how to add buttons and
11:52 - labels inside our main widget but for
11:54 - now we are going to keep it empty so i
11:56 - will just take main widget and i will
11:59 - put it here at the beginning of the file
12:01 - and put a semicolon so this says that
12:03 - the main interface is the main widget if
12:06 - you start your program you can still see
12:08 - an empty screen this is normal because
12:10 - we did not define anything to display
12:12 - that's all for the base structure of
12:14 - your kv project if you look at some code
12:16 - on internet you will see some
12:17 - differences for example we don't need to
12:20 - call it main widget and also we can use
12:22 - some layouts directly here instead of
12:25 - the widget i will show you how to do
12:26 - that later and also it's not mandatory
12:29 - to use a kv file you can do everything
12:32 - inside the code and in that case you
12:34 - will need to use a function that is
12:35 - called build and that will return
12:37 - directly the main widget however i
12:40 - recommend you to do exactly what we did
12:42 - here and to use a kv file and that's all
12:45 - for the configuration of our project
12:47 - let's continue
12:48 - everything is okay for the installation
12:50 - of tv at this stage if you had any
12:53 - issues first try to search for your
12:55 - error on google and if you don't find
12:57 - any information write a comment just
13:00 - below this video with your exact error
13:02 - message and i will reply you okay just
13:05 - before we continue let's download the
13:07 - resources pack for this tutorial you
13:10 - will find the link in the description or
13:12 - you can directly go to my website code
13:14 - with jonathan.net resources tv in this
13:18 - zip file you will find some images
13:20 - sounds and fonts that we will need later
13:23 - and also all the source code of the
13:24 - project so that it can also help if you
13:26 - are getting some errors because you can
13:28 - compare your source code and mine and
13:31 - spot any differences okay let's move to
13:34 - part number one in the lab project i
13:36 - will first tell you more about that
13:38 - project and then we will go straight
13:39 - into the code let's do it
13:42 - [Music]
13:49 - the lab project layout version this is a
13:53 - beginner project i'm going to show you a
13:56 - demo of this project right now first we
13:58 - will learn how to display some widget on
14:00 - the screen like buttons and labels and
14:03 - to change some properties like the
14:05 - colors the position and the size then we
14:08 - will create some examples on how to
14:10 - organize our content stacking vertically
14:13 - stacking horizontally using some grids
14:16 - and embedding previous content and also
14:18 - generating items by writing some codes
14:21 - and to use a scroll view the objective
14:24 - is to start your practice about kivy you
14:27 - will learn about the base structure of a
14:29 - kv project and you will learn how to use
14:31 - kv files where we can describe our user
14:34 - interface then i will show you how to
14:37 - use some basic widgets like the button
14:39 - and the label and to modify some of
14:41 - their properties but the most important
14:44 - is to learn how to create interface that
14:46 - can adapt to every screen size desktop
14:49 - mobile and tablet and that's where we
14:52 - are going to learn and focus mainly
14:54 - about the layouts also as a good
14:57 - practice we will use size and position
14:59 - that use only density independent pixels
15:03 - i will explain you how to do that the
15:05 - steps first create the project and learn
15:08 - about the base structure of qv project
15:11 - then i will show you how to display some
15:13 - widgets and then we will focus on
15:15 - placement strategies layouts concerning
15:19 - the layout we will progress in six steps
15:22 - step number one box layout box layout
15:26 - makes it possible to stack the elements
15:28 - vertically or horizontally second step
15:31 - onshore layout you can put your content
15:34 - in every corner of the screen or in the
15:37 - center third step grid layout you
15:40 - organize your content with a number of
15:42 - columns or a number of rows step number
15:46 - four stack layout stack layout is
15:48 - another way of stacking the items but
15:50 - you will go to a next line and it can
15:53 - also stack items of different size step
15:56 - number five i will show you how to use a
15:58 - scroll view to be able to scroll when
16:00 - the content is bigger than the window
16:02 - size we can scroll vertically or
16:05 - horizontally and step number six page
16:08 - layout i will show you how to reuse some
16:10 - of the previous examples that we have
16:12 - created and to show them like a book we
16:15 - will be able to slide from one side to
16:17 - another to display all different layouts
16:20 - other layouts exist in kivy you have the
16:22 - float layout the relative layout and the
16:25 - scatter layout concerning the front
16:27 - layout it's quite close to what we are
16:29 - going to see in the first part by using
16:31 - the widget so i did not reuse it here in
16:34 - the examples the relative layout has
16:36 - only an interest when using with a
16:39 - canvas so we will use that layout in the
16:42 - canvas section of this project and the
16:44 - scatter layout is very specific to
16:47 - particular use that is not relevant here
16:50 - so i did not use it in my list are you
16:53 - ready to start with this project let's
16:55 - do it
17:00 - now we are going to see how to display
17:02 - something in the screen we have our
17:04 - black screen and now we want to add some
17:07 - content i will show you how to add a
17:09 - button and also a label and we are going
17:12 - to add that inside our main widget
17:14 - because our main widget is our main
17:16 - interface so now i'm going to show you
17:19 - how to define the main widget and how to
17:21 - explain what we want to display inside
17:24 - our widget to do this we are going to
17:26 - use this syntax to explain this is the
17:29 - definition of our main widget and inside
17:33 - i'm going to use the tab and then i will
17:35 - say we have a button so you will use
17:38 - button with a b
17:39 - uppercase semicolon and inside the
17:42 - button again you use the tabs you can
17:45 - use some properties for example text
17:48 - semicolon and then we put a value for
17:51 - the text for example hello
17:53 - take care because in the kv file we
17:56 - never use the equal sign we don't write
17:59 - that we use only the semicolon okay
18:02 - let's start this
18:03 - you can see that in our window we have
18:05 - our hello button at the bottom here and
18:08 - we can click on it we don't have any
18:10 - action on the click button yet i will
18:12 - show you later how to manage the click
18:15 - of the button just a small thing before
18:17 - i comment on the button sometimes with
18:20 - spy charm you will see that when you
18:21 - start your program your window will not
18:23 - be selected it's going to be greyed here
18:26 - and it's not going to be possible to
18:28 - click on the button if this happens you
18:30 - just select pycharm again and select
18:34 - your window again and it will be okay
18:36 - this is only related to pycharm and this
18:39 - does not affect the fact that your
18:40 - program is working correctly okay let's
18:43 - go back to the button you can see the
18:45 - button is displayed on the lower left
18:47 - part of the screen and even if i resize
18:50 - my window it's always the case that's
18:52 - because the default coordinates are 0 0
18:56 - 0 for the x and 0 for the y when you
18:59 - increase the y you will go upper and
19:02 - when you increase the x you will go on
19:04 - the right the default size for the
19:06 - button is 100 pixels and 100 pixels so
19:09 - let's change that for example i can use
19:12 - the size property and i can give 400
19:14 - pixels width and 200 pixels height let's
19:18 - try it you can see that this time my
19:20 - button is bigger okay and we can also
19:23 - move the button by using position
19:26 - position for example 100 for the x
19:29 - and 200 for the y okay so we change 100
19:33 - here and 200 here perfect
19:35 - let me show you something important all
19:38 - the dimensions here the size and the
19:41 - positions are in pixels but because we
19:43 - are going to work on multiple platforms
19:45 - computers mobile phones tablets you will
19:48 - see that the screens have different
19:50 - pixels density and for example 400
19:53 - pixels will be displayed very big in
19:56 - some screens or very small in other
19:58 - screens depending on the pixel density
20:01 - and we don't want such difference
20:03 - between every display we want something
20:05 - more homogeneous so you are not going to
20:08 - use the pixels but always the mdp done
20:11 - ct independent pixels to use the dp you
20:14 - are going to use this syntax dp 400dp
20:19 - dp okay and for the position it's going
20:22 - to be the same 100 p 200 dp so 400 dp is
20:26 - a lot and i'm going to show you 40 by
20:29 - 40. the size ndp corresponds to a
20:32 - physical size for example if i use 40 by
20:35 - 40 dp for my button and if i start this
20:39 - it's going to be the size of a finger
20:41 - you see this my window is like
20:43 - deactivated so if it happens to you you
20:46 - click on pycharm window and then you
20:49 - click again on your window and now it's
20:51 - working and now i can click on my button
20:53 - that's what i told you previously so to
20:55 - go back to the dp 40 dp by 40 dp is the
20:58 - size of a finger touch okay and it's
21:01 - going to be the exact same size on every
21:04 - device if we start this on a mobile
21:06 - phone on the tablet it's going to be
21:08 - always the same physical size okay let's
21:11 - have a bigger size here 100 and for
21:13 - example 80.
21:15 - and let's add another button to do this
21:18 - i'm just going to copy paste this button
21:20 - and i will say
21:22 - text hello to if i restart my program
21:26 - you can see that we only see hello to
21:28 - button and that's because it is at the
21:31 - same position and the same size of the
21:33 - first hello button it's just on top of
21:36 - the previous button and this is because
21:38 - you first draw this button and then this
21:41 - second button on top so we need to
21:44 - change the position for example for
21:45 - position 200 and 300 and let's see what
21:50 - it gives so now my second button is
21:52 - displayed here let's continue so now we
21:55 - use only the button widget i'm going to
21:57 - show you how to use a label for example
21:59 - i'm going to change this button by a
22:02 - label the label only displayed text on
22:05 - the screen and it used the same
22:06 - properties as the button so we can reuse
22:09 - text property and the size and the
22:11 - position and if i start this you can see
22:14 - that now i display a label the label
22:17 - does not have any interaction with the
22:19 - user it's just a display on the screen
22:21 - we can use also some other properties
22:23 - like the color color is going to be rgb
22:27 - a g b red green blue and a alpha so you
22:32 - need to separate with a comma and for
22:35 - each component you are going to give a
22:37 - value between 0 and 100
22:40 - so it's going to be between 0 and 1. and
22:42 - if you want to be halfway it's going to
22:44 - be 0.5 for example here i want to
22:46 - display a right color so i'm going to
22:49 - give 100 red zero percent green and zero
22:53 - percent blue and for the alpha i will
22:55 - say that it's 100 percent visible if i
22:58 - do this you can see that my label is
23:01 - displayed in red i can also apply this
23:03 - property for the button so i can copy
23:06 - paste this and let's say that for the
23:08 - button we want something blue so i will
23:10 - put blue here red green blue okay and
23:14 - you can see that the text of my button
23:16 - is blue for the background of the button
23:18 - i will show you later in this course how
23:20 - to change the color or how to display an
23:23 - image in the button that's all for now
23:25 - for the display of these first controls
23:27 - i will show you later how to use other
23:29 - widgets and also how to use other
23:31 - properties but now let's focus on the
23:34 - layouts because you can see that if i
23:36 - resize my window then the controls size
23:38 - and positions are not adapted to the
23:41 - window and that maybe i cannot see
23:43 - everything that i want to display with
23:45 - the layouts we are going to have a
23:47 - placement strategy to have a display
23:49 - that adapts to every screen size
23:56 - let's start with the layout first i will
23:58 - show you how to use a box layout and i
24:01 - will show you how to use it by writing
24:03 - the code in python and also by using the
24:05 - kv file so you will see the two syntax
24:08 - let's go back to the project previously
24:10 - we have created our main widget it's our
24:13 - main interface here and we have
24:15 - displayed a button and a label so now we
24:18 - are going to create a new class that is
24:21 - going to be our box layout
24:24 - example which is not a widget but its
24:28 - box layout okay and i can write pass for
24:31 - now we need to import box layout in key
24:35 - ui x and box i would import box layout
24:38 - okay how can i change my main interface
24:41 - if i start my program i can still see my
24:44 - button and my label coming from the main
24:46 - widget so i need to replace my main
24:48 - interface by the box layout example the
24:52 - main interface can be either a widget or
24:54 - either a layout if i restart this time i
24:57 - have an empty screen so now we are going
25:00 - to add some buttons inside our box
25:02 - layout i will first show you how to do
25:04 - this with the code and then with the kv
25:06 - file usually we only use the kv file but
25:09 - here i want to show you the two syntax
25:11 - and you will see that in some case it's
25:12 - useful because later with the stack
25:14 - layout for example i will show you how
25:16 - to add 100 button and we will use a loop
25:20 - inside the code so for some specific
25:22 - case it's useful to know the syntax in
25:25 - the code first let's create the init
25:27 - function def init our constructor take
25:30 - care because with kv the constructor
25:33 - takes also another argument star star
25:36 - key w args we are not going to use this
25:40 - argument but it is for the internal
25:42 - working of kiwi so it's like this when
25:45 - you use super but init and you also pass
25:49 - star star kw arcs okay here in the init
25:54 - i will create a first button for example
25:56 - i can use b1 variable it is going to be
25:59 - a button and button we need to import it
26:03 - in tv uix button so this line also i can
26:07 - pass some properties to my button i can
26:10 - pass them directly in the constructor of
26:11 - the button for example text equal a you
26:15 - remember previously that we created
26:17 - button in the kv file this way we use a
26:20 - text property but we use semicolon to
26:23 - give the value here in the code we use
26:25 - the equal sign the names of the widgets
26:28 - and the name of the properties are the
26:30 - same with the kv file okay so let's
26:34 - create also a second button button
26:37 - number two with the text b how can i add
26:40 - these buttons inside my layout so myself
26:43 - self this class is a box layout so we
26:46 - can do self dot add widget i want to add
26:50 - a widget inside my layout i add the
26:52 - button one and also i can add the
26:55 - button too let's restart our program and
26:58 - see what it give you can see we have our
27:00 - two buttons button a and button b and
27:03 - they are very big that's because in fact
27:05 - the layout will use all the space of the
27:08 - window because and that's our main
27:10 - interface here it will take all the
27:12 - window space the box rear root is going
27:15 - to stack the different elements first we
27:17 - gave the button one with a and then we
27:20 - gave the button b so it's going to stack
27:22 - the different elements horizontally as a
27:25 - default behavior but we can also change
27:27 - the orientation i will show you how to
27:29 - do that for example if i add a third
27:32 - button button c that is the number three
27:35 - okay you can see that this next button
27:37 - has been stacked on the right and you
27:39 - can also see that if i resize my window
27:41 - everything is adapted correctly also as
27:44 - a default for the size of the different
27:46 - buttons the size will be equal between
27:49 - all the buttons but we will see how to
27:51 - change that later also the order of the
27:53 - add widget is important for example if i
27:55 - do add widget at the end you will see
27:58 - that the button a is on the right
28:00 - because first i added button b then the
28:02 - c and then the a okay
28:05 - let's go back to this configuration and
28:07 - i'm going to show you how to use the
28:08 - orientation property if i want to change
28:11 - the orientation of my box layout i can
28:13 - do a self dot orientation as a default
28:17 - it's horizontal but if i put vertical
28:20 - you can see that now i'm stacking
28:22 - vertically my different elements okay
28:25 - let's comment all this code and let's do
28:27 - the equivalent of this inside the kv
28:30 - file so i will comment using this syntax
28:34 - okay and because i have removed all the
28:36 - code i need to put pass
28:39 - to say that it's normal that we don't
28:40 - have any code here okay so now if i
28:43 - restart i have an empty screen in the kv
28:46 - file how can i add buttons to my box iot
28:49 - example i'm going to copy this and i'm
28:51 - going to define
28:53 - my box layout example and i will say
28:55 - that inside i have a button button a
28:59 - okay if i restart you can see we have
29:02 - one button taking all the screen then i
29:05 - can add button
29:07 - b and button c
29:09 - and you can see it stacking my three
29:12 - buttons okay and i can also use the
29:15 - orientation property orientation to
29:18 - vertical if i want to stack vertically
29:22 - okay so here we only used buttons in the
29:25 - layout but you can use also other
29:27 - widgets for example i can use label here
29:30 - instead i can use any widget in my
29:33 - layout but i will mostly use the button
29:36 - because it has a background and we can
29:37 - really see where it is located also it's
29:40 - possible to embed other layouts inside a
29:43 - layout instead of putting a button b
29:46 - here i can put another box layout or i
29:49 - can put another kind of layout here we
29:51 - will do that in the next lecture also
29:54 - how can i resize a button you can see
29:56 - that the layout is taking care of the
29:58 - position of the elements and of the size
30:00 - of the element but can i change that
30:03 - previously we saw how to use the size
30:05 - for example so if i say that my button a
30:08 - has a size of 40 dp
30:10 - width and 40dp height is it going to
30:13 - work let's try and you can see that it's
30:16 - not working at all it totally ignored
30:19 - this property it was working in the
30:21 - widget in the widget we could use the
30:23 - size and the post properties and it was
30:25 - working fine that's because a widget is
30:28 - not taking care of the position and the
30:30 - size of the element the layout does so
30:33 - it will as a default ignore post and
30:36 - size properties but you may say yes but
30:38 - we still want to control the size for
30:40 - example we want this button to be
30:42 - smaller than the other button and we may
30:44 - want to change also its position we can
30:47 - do that and that's what we are going to
30:49 - do in the next lecture
30:54 - previously we saw how to use a box
30:56 - layout by adding some widget inside it
30:58 - and you also learned that the layout is
31:01 - responsible for the position and the
31:03 - size of the different widgets and also
31:05 - we saw that we could not use the size
31:07 - property it was not working inside the
31:10 - layout because the layout is controlling
31:12 - the size here i'm going to show you how
31:14 - to use new properties so we can control
31:16 - the size and the position of the
31:18 - elements inside a layout and for this
31:21 - you are not going to use size and
31:23 - position but you are going to use
31:25 - size hint
31:27 - first you can see that i can use the
31:28 - hash sign to do some commands in the kv
31:31 - file size hint is going to be a
31:33 - proportion for example i'm going to give
31:36 - 80 percent for the width and
31:39 - 50 for the height so what do we have you
31:42 - can see that for my a button i get
31:44 - eighty percent of the original reads and
31:47 - i get also 50
31:49 - compared to the other controls so the
31:52 - percentage is a proportion with the
31:54 - other controls
31:56 - b has a height that is twice the height
31:58 - of a as a default you will have one and
32:02 - one if i go back to one and one i get
32:05 - the normal behavior and for example
32:08 - let's say that i'm going to get
32:10 - only 50 percent height like i just did
32:13 - previously
32:14 - okay and now i'm going to say that b
32:17 - will have twice the height
32:19 - and you can see that now b is twice the
32:22 - height of c height of c is one height of
32:24 - b is two and height of a is 0 5 these
32:28 - size are proportions and you can see
32:30 - that the proportions are kept if i
32:32 - resize the window is it possible to use
32:34 - fixed value for the size you can do that
32:37 - but you need to say you go in manual
32:39 - mode that means you say to the layout
32:41 - you don't want him to manage the size
32:43 - and to do this you are going to use none
32:46 - so i'm going to put none for the reads
32:48 - and for the hate and that way i can use
32:51 - the size property is going to take it
32:53 - into account now if i restart you can
32:56 - see my button is 40 by 40 or for example
32:59 - i can use
33:01 - 160 for example and you can see that the
33:05 - size is fixed for example if i resize
33:07 - the window it's not changing the size
33:09 - also i want to show you that we can
33:11 - write this line a different way and i
33:13 - will comment it okay if i restart my
33:16 - program i will have the default size 100
33:18 - per 100 okay i can specify separately
33:22 - the width and the height i can write
33:24 - widths
33:25 - 100 dp and i can write the height
33:28 - 60 dp okay let's try it and you can see
33:32 - i get the size that we get previously
33:35 - but now let's say i want to have 100
33:38 - weeds and only have a fixed height
33:41 - so i can mix between the two i will keep
33:44 - my
33:45 - fixed height of 60 dp but for the width
33:49 - i will keep 100
33:51 - okay let's try it you can see i have one
33:53 - hundred percent width and i have fixed
33:55 - height
33:56 - now i'm going to show you that we can
33:58 - also change the position for example if
34:00 - i put a width of 50
34:02 - you can see that my button is display on
34:04 - the left how can i move it to the right
34:07 - i can use plus hint
34:10 - pause hint is also a percentage but it's
34:12 - going to be a different syntax it's a
34:14 - dictionary you will use some components
34:17 - x
34:18 - center x and right for the horizontal
34:22 - and y
34:23 - center y and top for the vertical for
34:27 - horizontal or vertical you need to pick
34:30 - only one you cannot specify x and also
34:33 - the right at the same time and for the
34:35 - vertical you can also pick only one of
34:37 - the three in my case i want to control
34:39 - the horizontal position for these
34:41 - components you need to give a percentage
34:43 - between 0 and 100 it's going to be a
34:46 - value between 0 and 1. for example if i
34:50 - use x and i say x is equal to 0 then my
34:54 - button is displayed on the left like we
34:56 - have previously because the x is the
34:59 - left part of the button and we say it is
35:01 - equal to zero now i say that x is
35:04 - for example ten percent you can see that
35:07 - my button moved to ten percent of the
35:09 - width of the window now i can move to
35:12 - fifty percent
35:14 - now my button is on the right because
35:15 - the width of my button is 50 and because
35:18 - i gave the position of the x to be the
35:20 - center of the window 50
35:22 - the button is displayed here if i give
35:26 - 75 percent for example you can see my
35:28 - button begins to be drawn at 75 percent
35:31 - and it's a little bit out of the window
35:34 - and of course if i give one 100 percent
35:37 - the button is totally out of the window
35:40 - because the left part of the button is
35:42 - just here at 100
35:44 - the same way i can use right
35:46 - and right is not the left part of the
35:48 - button but the right part of the button
35:50 - and if i give 100 for the right part my
35:54 - button is displayed here because the
35:56 - right part is here it's at 100 percent
35:58 - and if i give it to 50
36:01 - you can see my button is here because
36:03 - the right part is at 50 percent of the
36:06 - screen okay i can use also center x to
36:10 - 50 percent now the button is centered
36:13 - because the center x is the center of
36:15 - the button and we say that the center of
36:17 - the button is at 50 percent of the
36:19 - window and it's going to work the same
36:21 - way for the vertical part so for example
36:24 - if i stack horizontally i can just
36:26 - command this or i can write horizontal
36:29 - okay i will remove this property and i
36:32 - will just comment everything here so we
36:34 - get
36:35 - for example just 50
36:37 - and 50
36:39 - okay we have something like this and i'm
36:41 - going to say i want to draw my button at
36:43 - the top of the window i can use a post
36:46 - hint and put top to one
36:49 - so the top of my button is at the top of
36:52 - the window 100
36:54 - i can also use center y equal 0.5 for
36:58 - example okay so it's the same logic for
37:01 - the vertical part that's all concerning
37:03 - the size hint and the pause hint
37:05 - remember that you need to use these
37:07 - properties to control the position and
37:09 - the size inside the layout and if you
37:11 - want to use a fixed size you use a
37:14 - non-value and then you can use size
37:16 - property let's continue on the project
37:19 - you will see that the kv syntax is a
37:21 - good way to build up your interface very
37:23 - quickly and it's also possible to create
37:25 - widgets and layouts directly from the
37:28 - code i will show you that in a bit later
37:30 - you might ask me but what can we do with
37:33 - is it only for games or can we make a
37:34 - full application and also is it possible
37:37 - to customize all the interface
37:39 - yes i will show you a bit later how to
37:41 - customize the colors the fonts and the
37:44 - styles of any widget but let me show you
37:46 - first some of the projects that i did
37:48 - with kivy i already told you about the
37:51 - galaxy project that we will do together
37:53 - in this tutorial it mainly uses canvas
37:56 - for drawing the game and some layouts
37:58 - and widgets for the menu another project
38:00 - that i created is mr beat it's a
38:03 - software bitbox that uses real-time
38:06 - audio so that you can play any resumes
38:08 - with any sounds that you want this
38:10 - project is from my python full course if
38:13 - you are interested you can find the link
38:15 - in the description and it will also
38:17 - appear here it uses more widgets and
38:20 - more layouts also the interface is
38:22 - totally styled and polished we have this
38:25 - lcd effect here you can light the
38:28 - buttons it also uses a scroll view for
38:30 - the tracks and it perfectly adapts to
38:33 - any screen sizes the ui is made from a
38:36 - combination of kv syntax and python code
38:39 - it's a good project if you want to go a
38:41 - step further with the tv library also i
38:44 - have published the galaxy and mrbit
38:46 - project on the ios and android store so
38:49 - you can download them and try them right
38:52 - now okay let me show you a last project
38:55 - the pizza project it looks more simple
38:57 - but it is more focused on the data
39:00 - management the pizza menu that you see
39:02 - comes from a web server developed with
39:04 - django so the app is not static it will
39:07 - display the updated data if you add a
39:09 - new pizza or if you change the price of
39:11 - a pizza for example the complete project
39:13 - jungle server plus the tv app is also
39:16 - part of my full python course ok let's
39:19 - go back to our code i will show you how
39:22 - to combine multiple layouts
39:28 - i am going to show you how to embed a
39:30 - layout inside a layout for example here
39:33 - we are going to replace the b button
39:36 - with a box layout containing four
39:38 - buttons stacked vertically how we can do
39:41 - that you remember that our main layout
39:44 - here is stacking three elements button a
39:47 - button b and label c button b we want to
39:50 - replace it and we are going to stack a
39:53 - box layout here instead
39:56 - inside this box layout we are going to
39:58 - put a button b1 a button
40:01 - b2 b3 and b4 and we are going to stack
40:05 - them vertically so i'm going to use
40:08 - orientation in this box layout to
40:11 - vertical if i start it you can see i
40:14 - have my a button first then i stack this
40:17 - box layout containing
40:19 - four buttons and then i stack my c label
40:23 - for this box layout it's only stacking
40:25 - three elements in this button this box
40:28 - layout and this label and inside this
40:30 - box layout we stack all different
40:32 - elements here i have used a box layout
40:35 - inside the box layout but of course you
40:37 - can mix and use different kinds of
40:39 - layouts and also you can embed at
40:41 - different levels inside this box layout
40:44 - i can also put another layout inside and
40:46 - inside so you can have multiple levels
40:48 - of embedding one last thing i want to
40:51 - show you is that we can use a spacing
40:53 - property to space the different items
40:55 - for example here for the box i hoot i
40:58 - can type spacing and give 10 dp so let's
41:02 - see what it gives and you can see i have
41:05 - some space between my different elements
41:08 - and that's all for the embedding of the
41:09 - layout let's continue
41:14 - we have completed the first step with
41:17 - the box tryout and we move to the second
41:19 - step onshore layout so we are going to
41:22 - create a new class class that we are
41:24 - going to call onshore layout example
41:28 - that come from an onshore layout and you
41:31 - will need to import it
41:33 - import qvuix onto our layout onshore
41:36 - layout okay and i will write pass
41:39 - then i will go back to my kv file and i
41:42 - will say that it's going to be the main
41:44 - interface of course if i restart now i
41:47 - don't have anything in my window and of
41:49 - course we are not losing what we did
41:51 - previously if i want to see my main
41:53 - widget i can just replace my main
41:55 - interface here and i can see the
41:57 - previous examples that we did previously
42:00 - okay and later in this course i will
42:02 - show you how to create a menu with
42:04 - multiple screens and we will be able to
42:07 - navigate inside the application to all
42:09 - our different examples but for now we
42:12 - just do it manually okay i'm going to
42:15 - start on the onshore layout let's define
42:18 - it
42:18 - inside it i'm going to put a button with
42:21 - a text
42:23 - that is a okay let's try it you can see
42:27 - that my onshore layout took all the
42:29 - space that will be the case every time
42:31 - for the layout and inside it i put a
42:33 - button that also took all the space so
42:36 - it's not interesting here because i want
42:38 - to change the position of that button
42:40 - inside the screen so we need to give a
42:42 - size to this a button
42:44 - how can i do that i will need to use
42:46 - size
42:48 - hint and i will say i give 10 percent
42:50 - reads and 10 percent hate okay let's try
42:54 - it you see that as a default on the
42:57 - button is at the center of the layout
43:00 - now i'm going to show you new properties
43:02 - that we are going to use only for the
43:04 - onshore layout it's unsure x and unsure
43:09 - y
43:10 - and these properties can get different
43:12 - values for example right left and center
43:16 - for the x and bottom
43:19 - top center for the y as a default it's
43:22 - center and center so let's say that for
43:25 - the x for example i give right
43:28 - and that i don't define
43:31 - the answer y what is it going to give
43:33 - you can see that now my button is on the
43:36 - right
43:36 - and as a default we are still in the
43:39 - center of the wire take care because the
43:41 - onshore layout takes all the space and
43:45 - this
43:46 - just defines where he will place the
43:49 - child elements the widget we put inside
43:52 - but of course if we use two buttons for
43:55 - example button a and button b they are
43:58 - going to occupy the same space it's no
44:01 - stacking here it's not like a box layout
44:03 - the behavior of this layout is different
44:06 - so button b is just above the button a
44:09 - you can see that if i use two
44:12 - and two here my button a is just below
44:16 - okay but for now let's just go back to
44:18 - the previous positions so i'm just going
44:20 - to comment on the button b okay so my
44:23 - button a is on the right center of the
44:26 - screen how can i display it to the top
44:28 - left corner for example in the x i will
44:31 - use
44:32 - left and then i will activate onshore y
44:36 - and i will give top
44:38 - okay
44:39 - so it's top left
44:41 - good okay i can use for example the
44:44 - bottom here
44:45 - and the center for the x
44:48 - bottom center okay
44:50 - so let's keep for example the top
44:53 - and center horizontally this one so i
44:56 - previously show you that the difference
44:58 - elements are not stacked so how can i
45:00 - display two buttons then i can stack my
45:03 - two buttons in a box layout okay and
45:08 - this box layout is going to be displayed
45:11 - at the top center of course i need to
45:13 - give a size to my box layout so i'm
45:15 - going to
45:16 - give size hand to this box layout and to
45:19 - remove
45:20 - size hint in the buttons okay let's try
45:24 - that you see i have my box layout taking
45:27 - 20 percent and 20
45:29 - of the screen size and inside it i have
45:32 - my two buttons that's all that i wanted
45:34 - to show you for the onshore layout
45:41 - we have completed the step 2 onshore
45:43 - layout and we move to the grid layout
45:46 - with the grid layout you can organize
45:48 - content with columns and rows so let's
45:52 - create our new example grid
45:54 - layout example that comes from a grid
45:58 - layout ok so again you will need to
46:00 - import it import import kv uix grid
46:04 - layout okay so now let's change the main
46:07 - interface with the grid layout and let's
46:10 - define
46:11 - our grid layout example first i want to
46:14 - show you something new we are not
46:16 - obliged to do this we did this to
46:19 - explain that our grid layout example is
46:22 - a grid layout and we need that in the kv
46:25 - file else he will not know about our
46:27 - grid layout example but we can use a
46:29 - small shortcut if we don't want to use
46:32 - the coding python and that's the case
46:34 - here because we will keep it with pass
46:36 - we can just command that and give the
46:39 - parent class directly here in the
46:41 - definition by using the add sign and put
46:45 - the parent class directly that's exactly
46:48 - the same so this time we don't need to
46:49 - use that and of course we could do that
46:51 - with our other example previously except
46:54 - with the box layout example because we
46:56 - wanted to use some code here so finally
46:59 - if you change your miner if you want to
47:01 - implement some code you will go you will
47:02 - need to revert and to remove that and to
47:06 - uncommand this code and write your code
47:07 - here but in this case we will keep it
47:09 - like this
47:10 - grid layout let's add some content
47:13 - button text
47:15 - a and we are going to add a few buttons
47:18 - b and c okay if i start like this it's
47:21 - not really working you can see that the
47:23 - buttons are displayed here because this
47:25 - layout needs two mandatory properties
47:28 - it's rows number of rows or number of
47:32 - columns you must specify one of these
47:36 - two properties for example
47:38 - we say that we have two columns in that
47:40 - case i have a b and then c we have two
47:44 - columns of course if i say only
47:47 - one colon it's going to behave like a
47:50 - box layout we have only one column and
47:52 - if i say we have three columns it's also
47:56 - going to be the same as a box layout
47:58 - except that we stack horizontally so i'm
48:01 - going to put more buttons inside d
48:05 - e and f
48:07 - okay i keep the three columns and in
48:09 - that case i get a grid like this and i
48:12 - can also use the rows it's going to work
48:16 - the same way so i can use rows and say
48:19 - for example we have two rows
48:21 - and i'm going to get this result okay
48:24 - that's fine now let's say that we want
48:26 - to change the size of this first column
48:30 - how can i do that i can resize the a
48:32 - button with a size hint and i'm going to
48:35 - give 50 horizontally and 100 vertically
48:40 - if i restart you see that it's not
48:42 - working because the d button still have
48:45 - a 100 percent so the colon will still
48:48 - use 100 but if i copy this to the d
48:52 - button
48:53 - then because i have the a and the d
48:55 - button to 50
48:57 - the colon can resize to 50 percent so
49:00 - it's still a proportion but we can have
49:03 - a fixed value if i use none instead and
49:07 - if i use a reads for example
49:10 - 16dp and i copy paste that on the d
49:13 - button let's try it you can see that
49:16 - this time it's fixed value on the left
49:20 - the last thing i want to show you is
49:21 - that again we can embed a layout inside
49:24 - the gray layout and for example we are
49:26 - going to replace the b button so we
49:29 - already know that we can replace that by
49:31 - a box layout for example but we can do
49:33 - even better than that if i go back to my
49:36 - previous examples and for example if i
49:39 - get the box layout example box layout
49:41 - example is also a box layout so i can
49:45 - pick it directly and put it in my grid
49:48 - layout instead of the button b i will
49:51 - put my box layout example and if i
49:54 - restart this you can see that in this
49:57 - cell i have my box i wrote example
50:00 - stacking the a button this second box
50:02 - diode and the c label and this second
50:05 - box layout that stacks the elements
50:07 - vertically so you can see that this is
50:09 - very easy and very powerful that's all
50:12 - that i wanted to show you with the grid
50:14 - layout let's continue on the project
50:21 - we have completed the third step on the
50:23 - grid layout and we move on to the stack
50:25 - layout i will create my new stack layout
50:29 - example and this time i will also create
50:31 - it in the code because we are going to
50:32 - use a kv file but also we are going to
50:35 - write some code so i will do stack
50:38 - layout from stack layout and of course
50:42 - you need to import it okay then i will
50:45 - change my main interface and i will
50:48 - define my stack layout example the stack
50:50 - layout is stacking the elements but not
50:53 - the same way as a box layout the box
50:55 - layout is only in one line and it will
50:58 - make all the elements fit in this one
51:01 - line or one row but the stack layout
51:04 - will stack the items on multiple lines
51:06 - and you need to give the size of each
51:09 - item and each item can have a different
51:11 - size and also i will show you how to
51:14 - change the orientation so let's start by
51:16 - putting a button text and it's going to
51:19 - be a button okay so if i start you can
51:23 - see that here i have an error and why do
51:26 - i have an error can you see it says it
51:29 - cannot parse this line because you
51:31 - should never use uppercase on properties
51:34 - so it's text with a small t okay let's
51:38 - restart you can see that my button is
51:40 - taking all the space because the stack
51:42 - layout does not manage the size of the
51:44 - items so we need to specify a size with
51:47 - size hint and let's say that this button
51:50 - will take only 20 percent horizontally
51:53 - and vertically let's try it so i have my
51:56 - a button at the top left corner and we
51:59 - are going to add some more buttons
52:02 - b
52:02 - and c b
52:04 - c you can see it's stacking the elements
52:07 - this way and if i resize the window the
52:09 - buttons are always 20
52:12 - of the size of the window so what
52:14 - happens if i add three more buttons d
52:19 - e
52:19 - and f
52:21 - you can see he was able to stack five
52:24 - button of twenty percent because it
52:26 - makes one hundred percent and then he
52:28 - went to the next line perfect so now
52:31 - let's continue and let's add some more
52:33 - buttons but i want to add them with the
52:35 - code because for example i want to add
52:37 - 10 button or 100 buttons so we are going
52:40 - to use a loop so i will keep all my
52:42 - buttons here in the kv file but i will
52:44 - also begin to write some code here def
52:47 - init
52:48 - with also the star star kw x and you
52:52 - have to call super init
52:55 - by passing the kwx okay this is a basic
52:59 - structure for the constructor then i can
53:02 - begin to write my code how to create a
53:05 - button and to add it in my stack layout
53:07 - and we saw that previously i can create
53:09 - a button b
53:11 - button and i can give some properties
53:13 - here so text for example is going to be
53:16 - z and i want to add it in my layout so i
53:19 - can do self dot add widget and i add
53:22 - this b button if i start that you can
53:25 - see that the z button is taking all the
53:28 - space because as a default he will use a
53:31 - size hand of 1 n1 so we need to change
53:34 - that and i can use a comma and size
53:36 - hint equal to tuple that is 20
53:40 - and 20
53:42 - let's try again what's interesting here
53:45 - is that you can see that the z button
53:47 - was the first one i did in the layout
53:50 - then i had the abcd and that's because
53:53 - init is called at first so first you
53:56 - will do that and after
53:59 - he will do what is in the kv file okay
54:02 - so just to make it more simple here i
54:04 - will delete what i have in the kv file
54:07 - and i will keep only my
54:09 - z button okay now i want to create
54:12 - multiple buttons so i will use a loop i
54:15 - will loop here for i in
54:18 - range let's say we want to create 10
54:20 - buttons 0 to 10 and inside my loop for
54:24 - each time we loop we will create a
54:26 - button and we will add it in the layout
54:28 - of course for the text i want to change
54:30 - and i want to display the value of i
54:34 - and because i don't want to start with 0
54:36 - i'm going to display i plus one to start
54:39 - from one so let's try again you can see
54:42 - i have
54:42 - ten buttons and i can resize my window
54:45 - perfect now our buttons use twenty
54:48 - percent width and twenty percent height
54:51 - what happens if i use a fixed value for
54:54 - the size i'm going to do that so i'm
54:56 - going to put none
54:57 - and none for the size hint and i'm going
55:00 - to give a size property equal to a tuple
55:05 - and it's going to be for example 100 dp
55:08 - in the code you need to use ndp
55:10 - parenthesis 100 and you need to import
55:13 - that import
55:15 - from qv.matrix
55:17 - okay and then i will use a comma for the
55:20 - height and use dp of 100 okay let's try
55:26 - it i restart my program and i have my 10
55:29 - buttons but if i resize the window you
55:32 - can see that the elements are stacked
55:34 - differently because it's a fixed size of
55:36 - the elements actually i don't need to
55:39 - stack elements of the same size and for
55:42 - example if i change the size here and
55:44 - let's say we use a size variable that is
55:47 - going to be dp of 100 plus
55:51 - we are going to use the value of i
55:54 - multiplied by 10 for example so we have
55:57 - different size for our buttons so i'm
56:00 - going to change that here and you will
56:02 - see that it every button has a different
56:05 - size and we have something like this
56:08 - okay anyway let's go back to a fixed
56:11 - size so i'm going to put back size equal
56:14 - dp 100 size is not the property here
56:17 - it's just a local variable okay i can
56:20 - use any name for this variable so i want
56:22 - to show you a few more things the
56:25 - orientation you can see that we begin to
56:27 - stack from the left to the right and
56:29 - from the top to the bottom but we can
56:32 - change that behavior with orientation
56:35 - property so i can use the orientation
56:37 - property from the code directly or from
56:40 - the kv file on my stack layout i will
56:43 - start with the kv file orientation
56:46 - orientation is not only horizontal or
56:48 - vertical for the stack layout it's a
56:50 - little bit more complex than that you
56:52 - can select two stack you can select to
56:55 - stack from left to right and also from
56:58 - top to bottom and you are going to give
57:01 - a string that is a contraction of that
57:04 - that is
57:05 - left to right and top to bottom this is
57:08 - the default orientation but if i want to
57:11 - start from
57:13 - right to left
57:14 - i can change that and it's going to
57:16 - stack from right to left and top to
57:19 - bottom okay if i change here to bottom
57:23 - to top
57:24 - you can see that it's taking from right
57:26 - to left and from bottom to top and of
57:29 - course i can do the last one from left
57:31 - to right and from bottom to top left to
57:34 - right and bottom to top okay and it's
57:37 - also possible to use this in the code so
57:40 - i'm going to show you the equivalent of
57:41 - that you will do here in your init
57:44 - self dot orientation equal and you put
57:48 - the same value that we did previously
57:50 - okay next thing i want to show you is
57:53 - that we can use a padding value a
57:55 - padding is an internal margin so we can
57:58 - use padding and you will give 4 value
58:01 - the top
58:02 - padding 20 dp the left padding 20 dp
58:06 - then the top padding 40 dp is going to
58:09 - be a clockwise from
58:11 - left top right bottom okay but usually
58:14 - we put the same values for the different
58:17 - area so i'm going to put 20 dp all
58:19 - around and we're going to try that now
58:22 - you can see in this padding effect this
58:24 - internal margin okay
58:26 - so i'm going to remove it and i'm going
58:29 - to show you a last thing we saw
58:31 - previously the spacing with the box
58:34 - layout to put some space between the
58:36 - different elements and i can give a
58:37 - spacing horizontally and vertically for
58:40 - example 20 dp horizontally and 20 dp
58:45 - vertically okay let's try it and you can
58:49 - see i have a margin between all my
58:52 - different elements okay one last thing
58:55 - for example i will go back to the
58:57 - default orientation so i will command
58:59 - that and i will also comment the spacing
59:03 - so we go back to our 10 buttons like
59:06 - this and what happens if i decide to put
59:09 - 100 buttons let's try it you can see i
59:12 - don't have enough space in my window i
59:15 - can expand the window to display more
59:17 - items but
59:19 - i cannot display the 100 items to solve
59:22 - that we are going to use what we call a
59:24 - scroll view that will make the
59:26 - possibility to scroll in the window and
59:28 - that's what we are going to do in the
59:30 - next lecture
59:35 - we have completed the step number four
59:36 - with the stack layout and now we move to
59:39 - the scroll view previously we have
59:41 - created a stack layout and we have 100
59:44 - items that we cannot display in the
59:47 - window so we are going to add a scroll
59:49 - view so we are able to scroll and see
59:51 - all the items i will go to the kv file
59:54 - and i'm going to create my
59:56 - scroll
59:57 - view example that comes from a scroll
60:02 - view okay inside the scroll view i'm
60:04 - going to put my stack layout example you
60:07 - can see that scroll view does not have a
60:10 - name of layout that's because it's a bit
60:12 - different because it can take only one
60:15 - child in our case the child is stuck
60:17 - layout example so let's move to this
60:20 - interface scroll view example and
60:22 - restart our program we can still see our
60:25 - stack layout but we can still not scroll
60:28 - and that's because we need to explain to
60:30 - the scroll view what is the size of the
60:32 - content so the scroll view can compute
60:35 - how much it has to scroll how can we
60:37 - give the size of the content we need to
60:39 - give a size
60:41 - hint to our stack layout example as a
60:44 - default it has the same size of the
60:46 - window so the scroll view thinks that
60:48 - the content is the size of the window so
60:51 - it does not scroll so we are going to
60:53 - change that and here we want to scroll
60:56 - vertically only so for horizontal i will
60:59 - keep 100
61:00 - and for the vertical i'm going to say
61:03 - none and i'm going to give a value for
61:05 - example i can give a very big height i'm
61:09 - going to give
61:10 - 4000 pixel as you hate and let's see
61:13 - what it gives so you can see that now i
61:16 - can scroll okay but i'm scrolling too
61:18 - much because in reality the height of my
61:21 - content is smaller than four thousand
61:24 - but it's even worse than that because if
61:26 - i resize my window this way you can see
61:29 - that now the height of my content is
61:31 - more than four thousand so i can still
61:33 - not see all the content what we are
61:36 - missing is to get the height of the
61:38 - content of the stack layout and this
61:40 - height change when we change the size of
61:42 - the window in kivy this height is
61:44 - computed in the stack layout as the
61:46 - minimum height we can use it by doing
61:49 - self dot me minimum
61:52 - height
61:53 - this value is computed in the stack
61:55 - layout and it corresponds to the actual
61:58 - height of the content in the stack
62:00 - layout let's try it again and you can
62:03 - see that this time my scroll is correct
62:06 - and it's just stopping at the end and if
62:08 - i resize my window i can still scroll to
62:11 - the end of the content also the scroll
62:13 - view can work with any kind of layouts
62:15 - but you have to make sure that you
62:17 - specify the size so it can scroll
62:19 - properly and you can choose to scroll
62:21 - vertically like we did or also to scroll
62:24 - horizontally that's all that i wanted to
62:26 - show you with the scroll view let's
62:28 - continue on the project
62:33 - we have finished on the scroll view and
62:35 - we move to the page layout the page
62:38 - layout makes it possible to go from a
62:40 - layout to another one just like a book
62:42 - so we can go from the right to left to
62:45 - go to the next one or to go back by
62:47 - sliding on the other side i'm going to
62:49 - show you that so we are going to create
62:51 - a page layout example which is a page
62:55 - layout and it's going to be our main
62:59 - interface inside we just put a different
63:02 - layout that are going to be displayed as
63:04 - a page so for example we first display
63:08 - the main widget it's not a layout it's a
63:10 - widget but it's going to work also main
63:13 - widget and then we can go with our box
63:16 - layout example and then for example we
63:19 - can go with the onshore layout example
63:22 - and then we will put a last one maybe
63:25 - the grid layout example okay so let's
63:29 - try this you can see that we get some
63:31 - kind of weird animation at the start and
63:34 - i will explain you why we have some
63:36 - strange display with this page layout so
63:38 - first we have our main widget with the
63:41 - hello button and the hello to label okay
63:44 - and you can see that we have something
63:46 - on this side that we can just
63:48 - slide
63:49 - and then we move to the next one which
63:52 - is the box layout example but we can
63:54 - still see that something is displayed on
63:57 - the background especially if i move it
63:59 - here that's because the black parts that
64:01 - you see here it's not black color in
64:04 - fact it's transparent and because we
64:06 - don't have any color in the background
64:08 - of our layouts then it makes some
64:11 - strange display it's something we are
64:13 - going to solve when we will see the
64:16 - canvas section of this project then you
64:18 - can see i can go back by sliding from
64:21 - this side or i can move to the next one
64:24 - and the next one is the onshore layout
64:26 - so once again all of this part is
64:29 - transparent so we can still see the
64:31 - previous layout which is a box the hot
64:34 - example but i cannot click on them
64:36 - anymore and then we can move to the next
64:38 - one so i will show you in this course
64:40 - how to improve the display of this page
64:42 - layout by adding some background colors
64:45 - and also in this course we will see how
64:47 - to create different screens in our
64:49 - applications that's not really the case
64:52 - here here is just a special layout that
64:55 - takes other layouts inside but i will
64:57 - show you how to really make different
65:00 - screen and how to navigate between these
65:03 - different screens and that's all for the
65:05 - page layout
65:10 - let's conclude on the first part of this
65:12 - project so we saw many examples about
65:15 - the layouts it may be a lot of
65:17 - information that we saw here but you
65:19 - don't need to remember everything what
65:21 - is the most important is to understand
65:23 - how works a box layout for example and
65:27 - then i advise you to practice on your
65:29 - site to recreate a new project and to
65:31 - use a box layout to put some elements to
65:34 - change the size to experiment on your
65:36 - side it's very important the syntax of
65:39 - the kv file is the most important also
65:42 - we learn about the syntax in the python
65:44 - code it's something that we will use in
65:46 - some other project but it's something
65:48 - that is less common that using directly
65:51 - the kv file and you can see that the
65:53 - syntax is very efficient and that in a
65:56 - few lines we can display some content of
65:58 - course here the content that will
66:00 - display is not very graphical not very
66:02 - beautiful but that was not the objective
66:05 - the objective was to learn how to place
66:08 - the different content and with all that
66:10 - layout strategies we will know later how
66:13 - to create a screen from a graphical
66:16 - design and that's what we will do inside
66:18 - this project later when we will create
66:21 - the menu for example so practice on your
66:23 - site and also if you want to have more
66:25 - informations you can type on google tv
66:28 - layout and you will find this first link
66:31 - and then you can search in the official
66:33 - documentation if you want to get more
66:35 - details or to see more properties like
66:37 - for example if i go to the box layout
66:39 - they have some examples in python code
66:41 - or they have some examples in the kv
66:44 - file so you may find some extra
66:46 - informations but all the most important
66:48 - information is what i already show you
66:51 - in this section we will continue to
66:53 - practice with the layouts inside this
66:55 - project and also in other project but
66:57 - next we are going to focus on the
66:59 - widgets because now we only use the
67:01 - button and the label widget but many
67:04 - other widgets are available like the
67:06 - image the slider and so on and that's
67:08 - what we are going to see in the next
67:10 - section everything is complete for the
67:12 - layouts but just before jumping to the
67:15 - widgets let me show you a practical
67:17 - example if we look at the mrbits screen
67:20 - how do you think i have created this
67:23 - layout in fact this screen is mostly a
67:26 - combination of box layouts and relative
67:28 - layouts first we have a vertical box
67:31 - layout that allows us to stack what i
67:34 - call the top layout and the bottom
67:36 - layout the top layout is a relative
67:39 - layout so we can use the post hint
67:41 - property to center or to align on the
67:44 - side on the left we have the logo image
67:46 - then for the play and stop buttons we
67:48 - have a box layout centered horizontally
67:51 - and for the bpm it's a box layout
67:53 - aligned to the right for the bottom
67:55 - layout we stack vertically a play
67:58 - indicator widget it's a widget that we
68:00 - create in this project and that uses a
68:02 - horizontal unboxing yield the play
68:05 - indicator shows where you are currently
68:07 - playing
68:09 - and then we have a scroll view it only
68:10 - scrolls vertically and it includes a
68:13 - vertical box layout so that we can
68:15 - insert all the different tracks each
68:17 - track reject is dynamically built from
68:19 - the code so that we can easily change
68:21 - the number of steps that's the buttons
68:23 - you see here and it will stack them
68:25 - horizontally with the mrbit project you
68:28 - will practice your skills both on the
68:30 - kivy library and on the python language
68:33 - we will develop some algorithms to
68:35 - manage the audio part we will create a
68:37 - real-time audio engine we will mix all
68:40 - the sounds and all will be perfectly
68:42 - synchronized at the sample precision we
68:45 - will also analyze our code and rework it
68:47 - to optimize the performances of our
68:50 - program and you will see that it will
68:52 - make a huge difference i already told
68:54 - you this project is only available on my
68:57 - python full course okay let's continue
69:00 - on our project with the widgets section
69:04 - let's do it
69:06 - [Music]
69:12 - zola project widget version let me show
69:16 - you a demo of that project you will
69:18 - learn how to use toggle buttons to
69:20 - enable or disable other controls then
69:23 - you will learn how to manage the click
69:25 - of a button and interact with other
69:28 - controls here in this label we use a
69:30 - custom font and then you will learn
69:32 - about the switch and the slider the
69:35 - progress bar and also text input after
69:39 - that i will show you how to add some
69:40 - image and how to control the display the
69:44 - objective is to continue learning about
69:46 - kivy and we are going to practice around
69:48 - the widget how to manage the click of a
69:51 - button we are going to learn how to use
69:53 - new widgets like the toggle button the
69:55 - switch on the slider and how to display
69:58 - images i will show you new things about
70:01 - the kv file syntax like using the
70:04 - properties and the use of the id
70:07 - property to connect different controls
70:10 - we are going to progress with four steps
70:12 - first step is to implement a counter you
70:15 - will see how to manage the click of a
70:16 - button how to use a custom font i will
70:19 - also show you the toggle button and the
70:21 - disable state step number two i will
70:24 - show you the id syntax in the kv file
70:27 - and you will also learn about the switch
70:29 - the slider and the progress bar step
70:32 - number three we will see how to input
70:33 - some text and step number four we will
70:36 - display some images let's start with the
70:38 - step number one
70:44 - let's start to practice with the widgets
70:46 - and the first thing you are going to
70:47 - learn is how to manage the click of a
70:50 - button so we are going to create a
70:52 - layout to put our different widgets for
70:54 - now we are just going to use a button
70:56 - and a label but when we will click on
70:59 - the button we will be able to change the
71:01 - text of the label so let's start and we
71:04 - are going to call this
71:05 - widgets
71:07 - example and we are going to use a grid
71:09 - layout so it's going to be easy to put
71:12 - many widgets inside the grid okay let's
71:14 - say that we have three columns and i
71:17 - will add a button with a text so i need
71:20 - to put the semicolon here with the text
71:23 - click here and we are going to put a
71:26 - label
71:27 - with the text
71:28 - hello and i will change the main
71:30 - interface with my widgets example let's
71:34 - try it you see i have my button click
71:36 - here and i have my text hello now we are
71:39 - going to see how to manage the click of
71:41 - the button and at first we are just
71:43 - going to print a trace here and after i
71:46 - will show you how to change the text of
71:48 - the label when we click on the button on
71:50 - the button you have a property called on
71:53 - press so we are going to add that on
71:55 - press and here we can give some python
71:58 - code so we will call a function here but
72:01 - first we are going to create that
72:03 - function for that i will need to define
72:05 - the class of widgets example so i go
72:08 - back to my main py and i will create
72:11 - that class class
72:12 - with that example it's a grid
72:15 - layout okay so i can remove this from
72:18 - the kv file because the class is defined
72:21 - so shall i define the init function i
72:24 - don't really need the init function
72:26 - because we don't want to create some
72:28 - graphics inside that class we are just
72:30 - using the kv file for the graphic but we
72:32 - want to create a function to manage the
72:34 - click of the button so let's create this
72:36 - function def and we can use the name
72:39 - that we want for example on button click
72:43 - ok inside this function i will just
72:45 - print
72:46 - button clicked and i will use this
72:50 - function name in my kv file on the on
72:53 - press on the on place i want to say that
72:55 - i want to call this on button click
72:57 - function and i need to use a parenthesis
73:00 - here because it's like python code we
73:02 - don't give the name of the function we
73:04 - give the python code that we want to
73:06 - execute when we click on the button the
73:09 - on button click function is defined
73:11 - inside the widgets example inside this
73:14 - one so should i use self no not really
73:19 - because self concern the button if i
73:22 - want to speak about widgets example i
73:24 - need to use
73:25 - root okay let's try it and you can see
73:29 - that if i click on the button i have my
73:31 - button click trace
73:33 - that is displayed here okay we can try
73:36 - multiple times perfect so now let's
73:38 - change the text of the label when we
73:40 - click on the button and for this you are
73:43 - going to use a custom property so let's
73:46 - say that in the widgets example we have
73:48 - a property called my text and that is
73:51 - equal to a string property you need to
73:54 - import that
73:55 - import kiwi properties from qv
73:58 - properties import string property a
74:01 - string property is working like a string
74:03 - so we can give a default value for
74:05 - example hello and i will add an
74:08 - exclamation sign okay
74:10 - so now let's say that my text is used by
74:14 - the label so the label text is going to
74:17 - be my text and again we need to put
74:20 - root.mytext we say that we have a
74:23 - binding that means that the text of the
74:26 - label will always be the content of my
74:29 - text property even if my text property
74:32 - is changed even if you change the
74:34 - content of my text property it's going
74:36 - to be automatically linked here and
74:39 - that's why this kv syntax is very easy
74:42 - and very powerful if i restart
74:45 - you can see that now i have hello with
74:48 - exclamation sign but when i click on my
74:51 - button i will change my text
74:54 - so take care because you need to use
74:56 - self
74:57 - dot my text if you forget to yourself
75:00 - it's going to be a local variable and
75:01 - it's not going to work save my text we
75:04 - can use it like
75:05 - we can use it like a standard string i
75:08 - can do equal to something and i will say
75:11 - you clicked okay let's try it and you
75:15 - can see that if i click on my button i
75:17 - can see you clicked it's as simple as
75:21 - this
75:22 - so remember that this is a binding when
75:25 - i update the content it's going to be
75:27 - automatically updated on the property of
75:29 - my control and also remember the on
75:32 - press property on the button and that
75:34 - you have to give some python code here
75:36 - so don't forget to put the parenthesis
75:39 - that's all for the click of the button
75:41 - let's continue on the project
75:49 - for this exercise you are going to
75:50 - change the code that we have developed
75:52 - here so that we can count when we click
75:55 - on the button so at first it will be
75:57 - displayed one and when you click then it
76:00 - will be two and then three four five
76:03 - okay what you need to do is only to
76:05 - change the code here in the python file
76:08 - you will not change anything in the kv
76:10 - file we don't change the graphics here
76:12 - in your python code you will need to add
76:14 - a new variable count that you will
76:16 - initialize to the value 1 when you click
76:19 - on the button you will increment this
76:21 - variable and you have to make sure that
76:22 - you display the content of your int
76:25 - variable in my text property it's your
76:28 - time it's your time to practice and
76:30 - after i will show you the solution
76:33 - [Music]
76:39 - first thing to do is to create our
76:40 - variable so i'm going to create the
76:42 - count variable that i will initialize to
76:45 - 1. then for the text we are also going
76:48 - to display one at first when we click on
76:51 - the button we are going to increment
76:54 - this variable so for example i can use
76:56 - count plus equal one and take care you
77:00 - need to put self to use this variable
77:03 - okay how can i display the content of
77:05 - this variable in self my text i can say
77:09 - it's equal to self dot count how can i
77:12 - convert a hint to a string i can use the
77:16 - str
77:17 - function okay so let's try it you can
77:20 - see i have one when i click on the
77:23 - button i still have one so we have a
77:25 - little bug here but when i click again
77:28 - it begins to count two three four five
77:31 - can you see where is the bug in reality
77:34 - count is equal to one so when i click
77:37 - for the first time i will still display
77:39 - one and i will increment the variable
77:42 - after so i need to increment it
77:45 - before so it's going to be two and then
77:48 - i will display two at the first click
77:50 - let's try it one more time you can see i
77:52 - have one two three so my counter is
77:55 - working great i'm just going to change a
77:57 - little bit text here and i will say
78:00 - count
78:01 - ok so everything is complete for this
78:04 - exercise let's move on to the next
78:06 - lecture
78:10 - i am going to show you a few things
78:12 - about the label and we are going to use
78:15 - a custom font you have access to the
78:17 - download link of this resource folder
78:19 - where you have the fonts directory and
78:21 - this file
78:23 - lcd.ttf you will need to copy that
78:26 - inside your project here in pycharm you
78:28 - can use the main file and do a right
78:30 - click and you will see that option
78:32 - reveal in finder on pc windows it's show
78:35 - in explorer ok so i will open my folder
78:39 - reveal in finder and here i will copy
78:42 - this fonts directory inside my project
78:45 - ok when it's done you will see this
78:47 - fonts directory appearing here inside
78:49 - your project if you are on visual studio
78:52 - code you just go to the folder of your
78:54 - project and you copy paste this folder
78:57 - inside your project folder you will not
78:59 - see this folder appearing in your
79:01 - project but if you have copied the files
79:04 - correctly it's going to work anyway so
79:06 - now let's use a property on the label to
79:09 - use this custom font i'm going to use
79:11 - font
79:12 - name and the name of the file is lcd.ttf
79:17 - with an uppercase here but we also need
79:20 - to give the name of the directory font
79:22 - so i'm going to write fonts
79:25 - slash lcd dot ttf okay let's try it you
79:29 - can see that now my label is displayed a
79:32 - bit and differently but it's very small
79:34 - so let's increase the size of the text
79:37 - font size
79:38 - and let's say we want something quite
79:40 - big so 80 dp for example let's try it so
79:45 - now we have our lcd font displayed on
79:48 - the label okay and i can still continue
79:50 - to change the color for example if i
79:52 - want to use a different color i can say
79:55 - 100 red half green and 100 percent blue
80:00 - and totally visible okay and it's still
80:04 - working well that's all that i wanted to
80:06 - show you about the label and the font
80:08 - let's continue on the project
80:14 - i am going to show you how to use a new
80:16 - widget which is the toggle button the
80:19 - toggle button is like a button but it
80:21 - has a state like a switch on and off
80:24 - let's add this toggle button as the
80:26 - first element toggle button and we are
80:29 - just going to put a text that is going
80:31 - to be toggled so let's see how this
80:34 - button behaves you can see that from the
80:36 - display perspective it's exactly like a
80:39 - button but if i click on it you can see
80:41 - it has a state it's activated and
80:43 - deactivated okay and the standard button
80:46 - is just a click button but it has no
80:49 - state so how can we manage the state of
80:51 - the button to manage the state of the
80:53 - button we are not going to use onpress
80:55 - but we are going to use on state when
80:59 - the state of the button changed we are
81:00 - going to call a function for example
81:03 - root dot on toggle button states ok and
81:08 - i will need to create this new function
81:11 - inside my widget example dev on toggle
81:14 - button state and i will print toggle
81:17 - state let's try it you can see that now
81:20 - when i click on my toggle button i have
81:22 - this toggle state print that is
81:25 - displayed okay but how can i get the
81:27 - state of the button how can i know that
81:29 - it is activated or deactivated inside
81:32 - the toggle button there is a property
81:34 - called state and we want to get that
81:37 - value inside our function so how can i
81:40 - get that i'm going to do something that
81:42 - we are going to use again and again it's
81:44 - to pass the self argument here i'm going
81:48 - to pass the toggle button itself in my
81:51 - function if you go to my function we
81:54 - have self here but self here is for the
81:56 - object oriented programming it's
81:58 - concerning the widget example but the
82:00 - argument itself
82:02 - is going to be the toggle button so i
82:04 - can write toggle button for example or i
82:07 - can rename it to
82:09 - widget and you will see that we will
82:10 - often do that passing the self and
82:13 - getting the widget here so now i can use
82:16 - my widget dot state the state is a
82:19 - string of characters so i can just
82:21 - display it and let's see what we have so
82:24 - you can see that when i click on it when
82:27 - it's activated we have the state down
82:30 - and when it's deactivated we have the
82:32 - state normal so it's not activated
82:35 - deactivated it's normal and down okay so
82:38 - for example let's change the text of the
82:40 - button to on and off how can i do that i
82:43 - can test if
82:45 - with jet dot state is equal to normal
82:49 - then it's going to be the off case
82:52 - else it's going to be the on case how
82:56 - can i change the text of my button
82:59 - previously we saw how to do that with a
83:01 - custom property but look here we already
83:04 - have the widget so we can use widget
83:07 - dot text and change the text property to
83:10 - off directly and i will do the same for
83:13 - on here if i retry you can see that when
83:17 - i click on it i have on then off on and
83:20 - off okay so now i'm going to improve a
83:22 - little bit my display i want to
83:24 - initialize directly the text to off and
83:28 - also to change the size to be 100 dp
83:31 - reads so let's do that at first i will
83:34 - display off and i'm going to have a
83:36 - fixed width of 100 dp so i can use size
83:40 - hint
83:41 - and use none
83:42 - for the width and one for the height 100
83:45 - percent and for the width i will give
83:48 - 100 dp okay let's try that
83:51 - it's initialized to off and then on and
83:53 - then off okay perfect in the next video
83:56 - we are going to continue to practice on
83:59 - the toggle button with an exercise
84:06 - for this exercise you will use the
84:08 - toggle button on or off to activate or
84:11 - deactivate the counter in every case it
84:14 - will be possible to click on the com
84:16 - button even if it is off but in the case
84:19 - it's off when you will click on it it
84:21 - will not increment the counter it should
84:24 - only be possible to increment it when
84:26 - the toggle button is on i'll let you
84:28 - practice on this exercise it's time to
84:30 - practice on your side
84:32 - [Music]
84:38 - when we click on the button we need to
84:41 - know the state of the toggle button
84:43 - because if the toggle button is in
84:45 - normal mode displaying off we should not
84:48 - increment the count and not update the
84:51 - text of the label so we can use a new
84:54 - variable for example count enabled that
84:57 - is going to be false as a default and
85:00 - when we click on the toggle button
85:02 - self dot count enabled is going to be
85:05 - true and it's going to be false again if
85:08 - we switch to off false and then only if
85:12 - count is enabled i will do these lines
85:16 - so i add a condition if self dot count
85:19 - if self dot count enabled
85:22 - then i will increment and i will update
85:24 - the text let's try it you can see that
85:27 - as a default it's off i can click on the
85:29 - button but it's not incrementing now i
85:32 - activate the counter and now it's
85:35 - working i can switch it back to off at
85:37 - any time and on again everything is okay
85:40 - for this exercise
85:45 - let's go a little bit further on what we
85:47 - did previously you can see that you can
85:50 - see that when the toggle is off we can
85:52 - still click on the button i am going to
85:55 - show you how to disable this button so
85:57 - it's not going to be possible anymore to
86:00 - click on it when we are in the off state
86:02 - if i go back to the kv file and if i go
86:05 - to my button i can use the disabled
86:09 - property as a default disable is false
86:13 - that means the button is enabled but if
86:15 - i put disable to true then in this case
86:18 - it's no more possible to click on the
86:21 - button so we are going to change that
86:23 - disabled state depending on the state of
86:26 - the toggle button how can we do that we
86:28 - already have a variable that says if the
86:31 - count is enabled or not so we want to
86:33 - use this inside the kv file for this
86:36 - disabled property to do that i need to
86:38 - have a property so we can use a boolean
86:42 - property and we need to import that so
86:45 - it's kv properties boolean property now
86:48 - that we have a property we can use it in
86:51 - the kv file i will take count enabled
86:54 - and i will use it in the disable here
86:56 - root dot count enable when the count is
87:00 - enabled it's going to be true it means
87:02 - the button is going to be disabled so
87:05 - that's not what we want to do we will
87:07 - need to do the opposite when the count
87:09 - is enabled we want to put false in
87:11 - disable to enable the button but let's
87:14 - just try it like this you can see that
87:16 - in the off state my button is enabled
87:18 - and in the on state my button is
87:20 - disabled how can i do the opposite as
87:23 - this i can use
87:25 - not
87:25 - in front of the property to invert the
87:28 - boolean if it's true it's going to be
87:30 - false and if it's false it's going to be
87:32 - true okay if i retry you can see that in
87:35 - the off state i cannot click on the
87:37 - button and in the on state i can click
87:40 - on it and i can count and also you can
87:42 - use this disabled property on other
87:45 - widgets that has user interaction that's
87:48 - all for the disabled property let's move
87:51 - on to the next lecture
87:56 - we have completed the step number one
87:58 - and we move to the step number two let's
88:00 - continue and i'm going to show you how
88:02 - to use a new widget the switch the
88:05 - switch is working a bit like the toggle
88:07 - button it's going to switch between on
88:10 - and off it will have a different display
88:12 - and also it will use in different
88:14 - properties let's add the switch in our
88:17 - layout i will write switch and then we
88:20 - start to see what we have we have our
88:22 - switch displayed here and we can see we
88:25 - can change it from on to off okay
88:27 - perfect now we have a small display
88:30 - problem here you remember that we gave
88:31 - 100 dp for this button so i will need to
88:35 - give 100 gp for this switch so that the
88:38 - column can have a width of 100 db so
88:41 - let's do that i will copy this size hint
88:44 - and the width and paste it inside the
88:46 - switch let's try it okay so this time my
88:49 - colon is 100 dp and now we want to get
88:52 - the state of that switch it's not going
88:55 - to be your own state it's going to be on
88:57 - active so i will use on active and i
89:01 - will call a function
89:03 - on the widget example that we will call
89:06 - on
89:06 - switch active and i will create that
89:10 - function inside the code here at the
89:12 - bottom def on switch active and because
89:16 - we pass the self which is the switch
89:18 - itself we will get this widget parameter
89:22 - and then i will print the active
89:24 - property print
89:26 - switch
89:27 - plus widget dot active the active
89:31 - property is a boolean so i will convert
89:33 - it to a string with str okay let's try
89:37 - that you can see that if i click on my
89:39 - switch it's going to be true and then
89:42 - false so i can get the state of my
89:44 - switch perfect in the next lecture we
89:47 - are going to use this switch to enable
89:49 - or disable some other controls the same
89:52 - way that we did for the count button
89:54 - that's all for the switch let's continue
90:00 - i am going to show you how to use the
90:02 - slider widget slider widget can be a
90:05 - horizontal bar to select a value between
90:07 - a minimum generally 0 and a maximum 100
90:11 - or it can be also a vertical bar so
90:15 - let's use the slider i will put it just
90:17 - after the switch
90:18 - slider and we are going to give minimum
90:22 - zero also i need to put semicolon here
90:25 - okay
90:26 - maximum 100
90:28 - these are the default values okay
90:31 - and let's try it like this so if i
90:33 - restart here we can see that the slider
90:36 - is here i will show you how to get the
90:38 - value but before you can see that at
90:41 - first the position was totally on the
90:43 - left so totally on the left means zero
90:46 - and totally on the right means 100 what
90:49 - happens if i put a default value
90:53 - value to 50 for example then you can see
90:56 - that the position of the slider is on
90:59 - 50. and also i can change the
91:01 - orientation or orientation to
91:05 - vertical okay so now let's get the value
91:08 - of the slider
91:10 - we can use the
91:11 - on value and we are going to call a new
91:14 - function in our class so i will call it
91:18 - on
91:18 - slider value and i will pass the slider
91:22 - here again inside the widgets example
91:25 - class we are going to go totally at the
91:27 - bottom and to use def on slider value
91:31 - self widget
91:33 - and i will print
91:35 - slider and we are going to print the
91:37 - value widget dot
91:40 - value the value of course is not a
91:42 - string it's a number so i need to
91:44 - convert it with str let's try this if i
91:48 - change the value you can see i get the
91:50 - value displayed here so it's 0 at the
91:53 - bottom and it's 100 at the top and we
91:57 - can also see that it's a float value how
92:00 - can i convert it to a hint i can use
92:03 - int here just before the conversion to
92:05 - the string and then if i restart again
92:09 - this time i get an int value okay that's
92:12 - all for now let's continue
92:19 - for this exercise you are going to add a
92:21 - label here and to display the value of
92:24 - the slider so when we will change the
92:26 - slider you will display the int value of
92:29 - the slider that we currently print and
92:32 - you will display it here you will need
92:34 - to add a label in the kv file and you
92:37 - will need to use a new property string
92:40 - property that you will call
92:42 - slider
92:43 - value
92:45 - txt it's your time to practice
92:48 - [Music]
92:54 - first thing i will do is to create the
92:56 - new label label and i will put text
93:00 - slider value okay if i restart
93:04 - we can see that we have our label here
93:06 - and we need to display the value to do
93:09 - that we are going to create a new
93:11 - property slider value text
93:14 - which is going to be equal to default
93:17 - value of
93:18 - value for example and we are going to
93:21 - use that in the label text root dot
93:25 - slider value text of course i need to
93:28 - update my slider value text
93:30 - when we change the value it's on the
93:32 - slider value i will do self dot slider
93:36 - value text equal to str int of the
93:41 - widget value okay let's try it we can
93:43 - see that if i change the slider i can
93:46 - see the value of my slider that was the
93:49 - objective of the exercise but now i'm
93:51 - going to go further and i'm going to
93:53 - show you a new syntax that is more
93:55 - efficient and that will avoid using this
93:59 - new property so i will just go backward
94:02 - and comment this also comment this slide
94:06 - and i will use a fixed value in my label
94:09 - for example value okay i start again and
94:13 - you can see that value is displayed and
94:15 - it's no more working ok i am going to
94:18 - use something new it's called id id
94:21 - makes it possible to use a kind of
94:23 - variable inside the kv file and i will
94:26 - say that slider is my
94:29 - slider then i can directly use my slider
94:33 - inside the text property of the label
94:36 - and i can say that i want to bind my
94:38 - slider dot value and of course i need to
94:42 - convert it to a string as simple as this
94:46 - let's try it and you can see that i can
94:49 - change the value of my slider and i can
94:51 - see the value here of course i can
94:53 - convert it to hint if i want it's going
94:56 - to work okay let's try again okay it's
94:59 - working fine and also you can see that
95:02 - we don't need anymore the on value here
95:04 - i will just comment it we are just using
95:07 - it for the print but i'm going to
95:09 - comment it and you can see that it is
95:13 - still working perfect so what we did is
95:17 - to use id and to put a name you can put
95:19 - the name that you want here like a
95:21 - variable and inside my label when i do
95:25 - this we do a binding so automatically
95:28 - when the value of my slider is changing
95:31 - the text of the label will be updated
95:34 - that's a very simple and very efficient
95:36 - syntax
95:37 - that's all for this exercise
95:45 - you are now going to use the switch to
95:47 - enable or disable the slider and you are
95:51 - going to do this only in the kv file for
95:54 - this exercise i don't want any
95:56 - modifications in the python file you
95:59 - will need to use id syntax like we did
96:02 - previously you will need to use disable
96:05 - property and also to use active property
96:08 - of the switch also i want the switch to
96:11 - be activated as a default when we start
96:14 - the program it's your time to practice
96:17 - [Music]
96:23 - i want to enable or disable the slider
96:26 - so i will use the disabled property we
96:29 - need to put something here what do we
96:31 - need to put we need to put something
96:33 - depending on the active property of the
96:36 - switch you remember that we use
96:38 - previously this active property which is
96:40 - a boolean and so i will need to use an
96:43 - id on the switch
96:45 - my switch for example okay so here in
96:48 - the slider disabled i will use my switch
96:52 - dot active if the switch is active it
96:56 - will be true so it means disable is true
96:59 - that means the slider will be disabled
97:02 - that's not what we want so we will do
97:04 - not before to have the opposite let's
97:07 - try that okay
97:09 - you can see that the switch is off i
97:11 - cannot use the slider it's disabled when
97:14 - the switch is on i can use it perfect so
97:17 - now i want the switch to be on the on
97:19 - position as as a default so we are going
97:23 - to use active
97:25 - and put it to true and because it's a
97:27 - binding when i will start the program
97:30 - the slider is going to be also activated
97:33 - that's all for this exercise
97:38 - i will show you how to display and use a
97:41 - progress bar and this progress bar we
97:43 - are going to link it to the value of the
97:46 - slider so i want to display it just
97:49 - under the label how we can do that we
97:52 - can stack the label and the progress bar
97:55 - inside a box layout and this box layout
98:00 - is going to be vertical so i will use
98:02 - orientation vertical okay below the
98:06 - label i'm going to add a progress
98:09 - bar
98:10 - for now i don't use any properties let's
98:13 - have a look okay you can see my progress
98:15 - bar is displayed here for now it's just
98:18 - a line but if i use some properties like
98:21 - for example the maximum value to 100 the
98:25 - minimum value in the progress bar is
98:27 - always zero you cannot customize it okay
98:30 - but for the max i give 100 and for
98:32 - example i can use value and give 25 so
98:37 - if i start you can see that the progress
98:39 - bar is at 25 percent now i want to use
98:44 - the value of the slider to be displayed
98:46 - in the progress bar how can i do that i
98:49 - can just copy
98:51 - my slider dot value and paste that in
98:54 - the value of the progress bar let's try
98:57 - it now you can see that we start at 50
99:01 - and that the value is changing with the
99:04 - slider and that's all for the progress
99:07 - bar
99:11 - we have completed step number two we go
99:13 - to step number three text input
99:16 - we are going to use the text input so
99:19 - that the user can input some text in the
99:21 - interface and we are going to use that
99:24 - just below the box layout i will write
99:27 - text input okay and we are going to
99:30 - start it just like this so we can see
99:32 - this box here where i can enter some
99:34 - text and because we want to keep this
99:37 - column of 100 dp i'm going to resize my
99:40 - text input i will copy size hint and the
99:44 - reads just here ok so i have my text
99:48 - input here and you can see i can type
99:51 - some text i will show you how to put a
99:54 - default text and also how to get the
99:56 - text and display it on a label so let's
99:59 - do that for example the default text is
100:02 - going to be fu so if i restart you can
100:06 - see that the default text is displayed
100:08 - here and i can also change it okay
100:11 - and when i press enter i can change the
100:14 - lines so it's a multiple line as a
100:17 - default i will show you later how to
100:19 - change that but first let's use a label
100:23 - so here i will add a label how can i
100:26 - display the text of my text input inside
100:29 - my label i will use text
100:32 - and here i will use an id my text input
100:37 - and i will use this id my text input not
100:41 - text
100:41 - and if i do that you see that i have a
100:44 - binding that means i display foo and
100:47 - when i change the text input it's
100:49 - automatically updated even if i use
100:52 - multiple lines perfect now let's say
100:55 - that we want to change the behavior and
100:57 - that we want to use only one line in the
101:00 - text input but i will update and i will
101:03 - also update the label only when i will
101:07 - press enter here to confirm the line so
101:10 - let's do that i can use the property
101:13 - multiline and set it to false as a
101:17 - default the text input is multi-line if
101:21 - i do this you can see that now if i
101:24 - change the content here and if i press
101:27 - enter the color is changing a little bit
101:30 - i don't go to a next line but the text
101:32 - has been validated but i want to change
101:35 - a bit this behavior because you can see
101:37 - that when i update the text the label is
101:40 - automatically updated i want to update
101:42 - the label only when i will press enter
101:46 - for this we are going to use on text
101:50 - validate
101:51 - this on text validate and we are going
101:53 - to define a new function that is going
101:56 - to be called only when we validate the
101:58 - text that means when we press enter on
102:01 - the line root dot on text validate and i
102:05 - will give the text input with the self
102:07 - and i will create this new function at
102:10 - the end of the widget example class and
102:13 - f on text validate with widget okay i am
102:17 - going to change this binding so i'm
102:19 - going to remove that and we are going to
102:21 - create a new string property in the code
102:24 - so i will copy paste that and i will
102:26 - call it text
102:27 - input str as a default we are going to
102:30 - put foo
102:32 - okay
102:32 - text input str is what i'm going to
102:35 - display in my label so i'm going to
102:37 - write root dot text input str okay
102:41 - so now text input str i'm going to
102:44 - update it only when i validate my text
102:47 - when i press enter so here i will have
102:50 - self
102:51 - text input str is going to take the new
102:54 - text of the widget equal widget dot
102:57 - equal widget dot text okay let's try it
103:02 - so now you can see i have full if i
103:04 - update some content here it's not
103:06 - updating the label but if i press enter
103:09 - it's updated and also what we can do is
103:13 - for example in the text i can add
103:15 - another string here i can concatenate
103:17 - with a string and i can say
103:19 - your name is okay so if i do that your
103:24 - name is fu if i write brian enter your
103:28 - name is brian that's all for the text
103:31 - input
103:35 - we have completed the step number three
103:38 - and we move to the images first thing
103:41 - you will copy the image folder to your
103:43 - project like we did previously you will
103:45 - find that folder inside the resource
103:47 - folder that you have downloaded when
103:50 - it's complete you will see image folder
103:53 - appearing inside your project we are
103:55 - going to start with a new example
103:57 - because previously we have added many
103:59 - things inside the screen so i want to go
104:01 - back from an empty screen we are going
104:03 - to create a new example
104:05 - image
104:06 - example and it's going to be a great
104:09 - layout i'm going to reuse the same thing
104:12 - with three columns and it's going to be
104:15 - my main interface so if i restart and we
104:18 - have an empty screen okay inside i will
104:21 - add an image and to select the image
104:24 - file you will use the source property we
104:27 - are going to display the cake you will
104:30 - first need to put the folder name
104:33 - slash
104:34 - cake dot jpeg okay let's start this you
104:39 - can see that the cake is displayed if i
104:42 - resize the window the image is resized
104:45 - and you can also see that the ratio
104:47 - aspect of the image is preserved so if i
104:50 - reduce the width it's reduced and also
104:53 - if i reduce the height it's also resized
104:56 - but you can see that when i expand the
104:58 - window it's going to be resized of its
105:01 - original size in the file it's not going
105:04 - to expand i am going to show you how to
105:06 - do that by using some new properties so
105:09 - first let's copy this image three times
105:12 - okay so we have something like this and
105:15 - i'm going to use a new property and that
105:18 - is
105:18 - hello
105:19 - stretch
105:20 - and i'm going to give true okay let's
105:23 - see what happens
105:25 - you can see that the second image is now
105:28 - able to straight that means to expand to
105:30 - a bigger size than the original size and
105:34 - why it's not stretching to the first
105:36 - image it's because the three elements
105:38 - have the same size here so it's actually
105:41 - expanding to the size that the layout
105:43 - give to the image okay let's continue
105:46 - with some other properties and i'm going
105:48 - to show you how to use keep
105:51 - ratio
105:52 - as a default keep ratio is true now we
105:55 - are going to give false to say that we
105:58 - don't need to keep the aspect ratio of
106:00 - that image and we apply this to the
106:02 - third image if i restart you can see
106:05 - that strangely it's no effect on that
106:09 - image and that's because this property
106:11 - can only be used with a low straight so
106:14 - you need to specify a low stretch to
106:17 - true and also combine it with the keep
106:20 - ratio to false and let's retry and this
106:23 - time you can see that the ratio is not
106:25 - preserved but the image will take all
106:28 - the allocated space so it's not really
106:31 - rendering well for that kind of image
106:32 - but it's going to be useful for
106:34 - background image like gradients if you
106:36 - look at the files here you see we have
106:38 - this jpeg file and we have also png
106:41 - files and that we will use later in this
106:44 - project the difference between png and
106:46 - jpeg is that png can have transparency
106:50 - jpeg cannot have transparency but it can
106:52 - compress better than the png and that's
106:55 - all concerning the images
106:57 - that's all for the widgets you might ask
107:00 - me is it possible to create an
107:02 - application with multiple screens and
107:04 - how can we go from one screen to another
107:07 - yes it's possible and that's what we
107:09 - call the navigation
107:10 - in qv there is a class named the screen
107:13 - manager you can search on google for
107:16 - screen manager tv and you will find some
107:18 - examples in my python full course i will
107:21 - cover the navigation you will learn how
107:24 - to create multiple screens how to manage
107:27 - navigation stack so you can push new
107:29 - screens and also pop to go back to the
107:32 - previous screen we will also use the
107:34 - action bar and all of this works for
107:37 - every platforms including ios and
107:40 - android okay let's go back to our
107:42 - project and we move to the canvas
107:44 - section you will learn how to draw lines
107:46 - and shapes on the screen let's do it
107:50 - [Music]
107:57 - the la project canvas version let me
108:00 - show you a demonstration of that project
108:02 - you can see a new button here canvas and
108:06 - we can access to all the canvas examples
108:08 - that we are going to create together
108:11 - canvas makes it possible to draw some
108:13 - shapes on the screen for example here an
108:15 - ellipse rectangle and also a spring that
108:19 - can adapt to the window widths you will
108:21 - see how to center items how to change
108:24 - the colors and also how to move some
108:26 - shapes on the screen the objective is to
108:29 - learn how to display graphical
108:31 - instructions on the screen like a line
108:34 - rectangles circles and so on you will
108:37 - understand the interaction of the canvas
108:40 - with the widgets you will see how to
108:42 - move instructions on the screen like we
108:44 - will do for the ball and also you will
108:47 - see how to call a function at a regular
108:50 - interval of time we will create an
108:52 - update function that we will call 60
108:54 - times per second concerning the
108:57 - instructions you will learn how to draw
108:58 - a rectangle by giving a position and a
109:01 - size same for the ellipse position and
109:04 - size and also you will learn how to use
109:06 - the line instructions to draw lines from
109:10 - multiple points and also to draw
109:12 - rectangle and to draw ellipse then you
109:15 - will see the color instruction and give
109:17 - the three components red green blue we
109:20 - are going to add instructions in the kv
109:23 - file but also in the code concerning the
109:26 - kv file you have a sample here you can
109:28 - see that we add the graphical
109:30 - instructions inside a canvas and the
109:33 - canvas is inside a widget it can be any
109:36 - widget like a layout or it can be a
109:38 - button what is important is to remember
109:41 - that the instructions is like a list the
109:44 - order of the instructions are important
109:46 - for example here we have a red color and
109:50 - here we have a blue color on the screen
109:53 - you can see that the circle and the
109:55 - ellipse are red but the rectangle is
109:59 - blue here i have the width which is
110:02 - here the circle is drawn at 200 x and
110:06 - 200 y
110:07 - and 100 radius the width is the
110:11 - thickness of the line in the code it's
110:13 - going to be the same principle but the
110:16 - syntax is different for example here we
110:18 - are going to draw an ellipse at a
110:20 - position and the size and what is
110:22 - important is that we can
110:24 - remember the instruction inside a
110:27 - variable here the ball variable and it's
110:30 - possible to update the instruction for
110:33 - example here we can update the position
110:36 - of the instruction so at the start the
110:38 - ball is drawn at 100 100 but then by
110:42 - just changing the position property on
110:44 - the ball the ball is going to move at
110:47 - 200 100
110:49 - we don't need to call again ellipse
110:51 - ellipse is already in the screen but the
110:54 - instruction automatically knows that it
110:56 - needs to be redrawn when we change the
110:59 - properties we are going to go forward in
111:01 - multiple steps first step i'm going to
111:04 - show you how to use the instructions in
111:05 - the kv file like the rectangle the
111:08 - ellipse the line and the color then we
111:11 - are going to do that inside the code
111:13 - then i will show you how to do movement
111:15 - like the poll and i will explain you the
111:18 - coordinates system we will see the
111:20 - exception with the relative layout and
111:24 - finally we will improve the page layout
111:26 - by adding backgrounds to the different
111:28 - pages and also we will create the menu
111:31 - for the different canvas examples are
111:33 - you ready to start let's do it
111:39 - okay let's start with the canvas section
111:41 - first thing we will do is to define a
111:43 - canvas example number one so in your
111:46 - main.py you will add a new class
111:48 - class canvas
111:50 - example1 and it's going to be a widget
111:54 - ok and i will add pass inside this class
111:57 - in the kv file you are going to create
112:00 - this example canvas
112:03 - example
112:04 - one okay and inside i will do tab canvas
112:09 - semicolon and i will define this new
112:11 - canvas example as the main interface
112:15 - okay so take care because this first
112:17 - line here is very important that is what
112:20 - we call the main interface so when we
112:22 - will do some other examples like canvas
112:24 - example 2 canvas example 3 you will need
112:27 - to replace it on this first line here to
112:30 - change your main interface okay now have
112:33 - a look because for the remaining of this
112:35 - tutorial the list of files is going to
112:37 - be different it's because the videos are
112:39 - extracted from my full python course
112:42 - however i did not include the navigation
112:44 - part in these tutorials so the list of
112:46 - files is going to be different but it
112:48 - will be very simple because instead of
112:50 - working in canvas example.kv
112:53 - and
112:54 - canvasexample.py you will always work in
112:56 - the main.py and the lab.kv so for
113:00 - example here in
113:02 - canvasexample.kv you will not create new
113:05 - file you will not create this file but
113:06 - you will do this in your thelab.kv file
113:09 - just like we did previously and for the
113:12 - canvas example.py also you will not
113:14 - create this file and you will not use
113:16 - vsi but you will just put your class
113:19 - inside your main.py let's continue and
113:22 - you can see that canvas example1 is a
113:25 - widget that means that for every widget
113:27 - or every layout it's possible to add a
113:30 - canvas section even inside the button a
113:33 - button is a widget so we can add canvas
113:35 - inside a button if you want inside
113:38 - canvas you are going to write the
113:39 - graphical instructions for example
113:42 - rectangle if we start this
113:45 - you can see a white rectangle on the
113:47 - lower left of your screen as a default
113:50 - the color is white and also as a default
113:53 - the size is 100 pixels per 100 pixels we
113:56 - can change the position and the size by
113:59 - using
114:00 - post property and here i will put the
114:02 - position in dp dp of 100 ndp of 200 for
114:07 - the y and for the size i can give dp 150
114:11 - and also ndp 150 to get a square so
114:15 - let's try it
114:16 - okay we have our rectangle here 100 dp
114:19 - 200 dp and 150 for the size of course we
114:23 - can use pixels directly and sometimes in
114:25 - the examples i will use only pixels but
114:28 - as a good practice use always in dp but
114:31 - as a good practice use always in dp in
114:34 - your programs also take care because the
114:36 - syntax inside the canvas is different
114:38 - than the syntax directly inside the
114:41 - widget let's continue how can i display
114:43 - my rectangle at the center of the screen
114:47 - i can change the position and use self
114:49 - dot center but you can see that if i do
114:53 - that in fact my rectangle is not
114:55 - centered because the position
114:57 - corresponds to the lower left point so i
115:00 - will need to subtract the half of the
115:02 - width and the half of the height so
115:04 - let's do that but before i want to show
115:06 - you something new it's possible in the
115:08 - kv file to define some variables and the
115:11 - syntax is hash semicolon set and then
115:15 - the name of the variable for us it's
115:17 - going to be the size so we can say s
115:20 - and we give the value dp of 150 so here
115:24 - i can replace by s
115:26 - and s so if i restart you can see we
115:30 - still have the same thing concerning the
115:32 - center i can use center x and self dot
115:37 - center y still i will have
115:40 - the same thing here but now it's going
115:43 - to be easy to subtract the values x i'm
115:46 - going to subtract the half s divided by
115:48 - 2 and the same for the y let's try it
115:51 - you can see that this time my square is
115:55 - centered in the window and because you
115:57 - are in the kv file its bindings so when
116:00 - i resize the window
116:02 - my position is automatically updated i
116:05 - show you another instruction which is
116:07 - the ellipse with the ellipse you can
116:09 - draw circle or ellipse and it's working
116:12 - the same way you give the position and
116:15 - also the size for the position for
116:17 - example i will give 200 pixels and 500
116:20 - for the y and for the size i can give
116:24 - for the width s and for the height s
116:26 - divided by two let's try it you can see
116:29 - the ellipse is displayed here that's all
116:31 - for this first part let's continue
116:37 - i am going to show you how to draw lines
116:40 - with the line instruction the line
116:43 - instruction use different properties we
116:45 - are going to define some points with
116:47 - points and it's going to be a tuple of x
116:51 - and y and x2 y2 to define the different
116:55 - points so let's start from 0 to 0 and go
116:59 - to second point which is located to x
117:02 - equal 100 and y equal 100 let's try this
117:06 - you see that we have a line here
117:08 - starting from 0 0 lower left and going
117:11 - to 100 100 but then we can add some
117:15 - other points for example i can write 200
117:18 - 0. so we have here another segment
117:21 - located at 200 okay
117:24 - and we can also say we want to go to the
117:26 - width of the window self not reads to be
117:30 - totally on the right and go at 100 okay
117:34 - let's try that you can see that we have
117:36 - a last segment that will depend on the
117:39 - window width we can go further in this
117:42 - example and draw a spring that will
117:44 - adapt on the window widths let's do that
117:47 - for example i'm going to create points
117:49 - at every quarter of the window so i will
117:51 - use self width divided by 4 and go to
117:55 - 100
117:56 - then i will have
117:57 - self width divided by 2 going to 0 then
118:02 - self width multiply by 3 divided by 4
118:05 - and go to 100 and finally width going to
118:09 - 0 let's try it and you can see we have
118:13 - the spring that adapts to the window
118:15 - width perfect we can also use another
118:17 - property to change the width of the line
118:20 - and i can use here grids and i can say
118:23 - two and you can see that the line is
118:26 - thicker that's all for this example
118:28 - concerning the line
118:35 - let's do an exercise first we are going
118:37 - to create the canvas example 2 so we are
118:40 - going to define this in the kv file with
118:45 - canvas inside ok in the python file we
118:48 - are going to create canvas example two
118:51 - okay let's start the program you can see
118:54 - that we have an empty screen for this
118:56 - exercise you will need to draw a cross
118:59 - you will have a vertical line centered
119:02 - in the screen and you will have a
119:04 - horizontal line centered in the screen
119:07 - and of course if you resize the window
119:09 - it has to adapt always to the center of
119:12 - the screen it's time to practice on your
119:14 - side
119:21 - inside canvas example.kv i'm going to
119:24 - write the lines instruction first line
119:27 - is going to be for example the
119:29 - horizontal line so i'm going to give the
119:31 - points and we are going to start on the
119:33 - left of the window for the x i'm going
119:35 - to have 0 and for the y i'm going to
119:38 - have self dot heights
119:40 - divided by 2. to get the point on the
119:42 - right i use self dot
119:45 - width and also height divided by two
119:48 - okay and we can keep the width to two so
119:51 - the line is more visible let's try that
119:54 - you can see we have the horizontal line
119:56 - and when i resize the window it's always
119:58 - centered vertically perfect let's add
120:02 - the vertical line i'm going to copy this
120:04 - instruction i will delete all the points
120:07 - for the vertical line i start in the
120:10 - middle of the screen so it's going to be
120:11 - self dot reads divided by two if we
120:15 - start from the bottom y is going to be
120:17 - equal to zero then we go to several
120:20 - tweets divided by two and to the point
120:22 - totally at the top of the screen self
120:25 - dot 8
120:26 - so we have the vertical line and the
120:28 - horizontal line we have the cross that's
120:31 - all for the exercise
120:36 - we continue on the examples you are
120:38 - going to create canvas example number
120:40 - three and i'm going to show you how to
120:42 - draw a rectangle circle and ellipse by
120:45 - using the line previously we already saw
120:48 - how to draw rectangle and ellipse but it
120:50 - was filled of colors now we are going to
120:53 - draw only the line so let's create a
120:55 - canvas example tree and i will go to the
120:58 - python file to create example number
121:01 - three inside canvas example tree i will
121:04 - write canvas and then i will use the
121:07 - line instruction in the line instruction
121:09 - we are not going to use the points but
121:11 - we are going to use new properties like
121:14 - circle circle is a tuple and you will
121:16 - give center x
121:18 - center y
121:20 - and the radius for example i give 200
121:24 - and 200 for the position and 100 for the
121:28 - radius and i can use the width property
121:31 - let's try that so you can see i have the
121:34 - circle here and i can continue with an
121:37 - ellipse so i will copy that
121:39 - for the ellipse
121:41 - it's almost the same but it's going to
121:43 - be radius x and radius y
121:47 - so here for example you are going to
121:48 - change the position to
121:50 - 500 and 300
121:53 - and for the radius let's say 100 for the
121:56 - x and 200 for the y and for example we
121:59 - can change the width let's try that
122:02 - we can see the ellipse here okay 100
122:05 - radius for the x and 200 for the y and
122:08 - also i can draw a rectangle for the
122:11 - rectangle it's going to be the x y
122:15 - width and height
122:16 - so let's try 800 and 100 for the
122:19 - position and for the size 300 width and
122:23 - 208 okay i will keep with
122:26 - two let's try that
122:28 - and we have a rectangle just here
122:31 - perfect now i want to show you how to
122:33 - use the colors color is an instruction i
122:37 - can add my color here inside the canvas
122:40 - color and i will specify air gb
122:43 - red green blue
122:45 - if you want a red color we will give 100
122:48 - red 0 and 0 for the blue okay if i start
122:52 - this
122:53 - you can see that all the shapes are red
122:55 - and that's because we change the color
122:57 - here and all the graphical instructions
123:00 - after the coloring section that's
123:02 - because the color instructions was
123:04 - before all the other graphical
123:06 - instructions but if i move this one just
123:10 - after the circle then you can see that
123:13 - the circle is white default color and
123:16 - only the ellipse and the rectangle are
123:18 - red okay i will put it back at the
123:20 - beginning and i will show you something
123:22 - more i can use also rgb a with alpha
123:26 - component as a default it's 100
123:29 - visible but i can use for example 30
123:33 - and we have something like this also if
123:35 - i want to change only the color of the
123:37 - rectangle i can use another color
123:40 - instruction and let's say that we want
123:43 - to display the rectangle in blue so i
123:45 - will use 0 for red and 100 blue and also
123:50 - 100
123:51 - visible okay so this time the rectangle
123:53 - is blue previously we use color as a
123:56 - property on the widget but inside the
123:59 - canva color is an instruction it's not a
124:02 - property that you will apply to your
124:04 - circle or your ellipse directly it's a
124:06 - global color property and all the other
124:09 - graphical instructions after it will
124:11 - take this color that's all for this
124:14 - example let's continue
124:19 - i'm going to show you how to use the
124:21 - canvas inside the python code we are
124:23 - going to create a new example canvas
124:26 - example four okay why do we want to use
124:29 - the canvas inside the code for example
124:31 - in some cases you will want to use a
124:33 - loop to display many shapes in the
124:35 - canvas i am going to show you how to use
124:38 - it and we are going to do similar
124:40 - instructions that we did previously
124:42 - inside the kv file we are going to
124:44 - create the init function f init and we
124:47 - are going to call super
124:49 - super init with
124:51 - kw args
124:53 - okay
124:54 - if you want to use the canvas you write
124:56 - with
124:57 - safe canvas and you write the canvas
125:00 - instructions inside this code block for
125:02 - example line instruction with points
125:05 - property and we give the tuple of points
125:08 - 100 for x and y of the first point and
125:13 - 400 500 for the second point also you
125:17 - need to import the line instruction
125:19 - kv-graphics vertex instruction ok let's
125:23 - try that
125:24 - you can see we have the line here and
125:26 - also it's possible to add other
125:28 - properties like the widths equal to okay
125:31 - let's try this we have width equal to
125:34 - perfect i can also continue and use a
125:37 - color instruction color here i will use
125:40 - a green color 0 red 100 grid and 0 blue
125:45 - you need to import color from kv
125:48 - graphics
125:49 - this one okay and i'm going to draw a
125:52 - circle line you remember that for circle
125:55 - we need to use center x for example 400
125:58 - 200 and the radius 80 and i'm going to
126:02 - keep reads equal to okay let's try this
126:06 - here i have an error because circle is a
126:09 - property so you need to use circle equal
126:12 - the tuple with information let's try
126:15 - again okay i have the circle here in
126:18 - green perfect and we can continue we can
126:21 - draw a rectangle the same way that we
126:23 - did previously rectangle it's really the
126:26 - equivalent that we did here if you look
126:29 - at circle it's the same name of the
126:30 - property and it's the same logic
126:33 - concerning the different values for the
126:35 - rectangle it's going to be the same x y
126:37 - width and height
126:39 - so for example 700 for the x
126:42 - 500 for the y and 150 widths and 100
126:47 - height and we can change the width for
126:49 - example to five and i get a rectangle
126:52 - here okay if we want to draw a rectangle
126:55 - filled with some colors we need to use
126:58 - the rectangle
127:00 - instruction like we did in the kv file
127:03 - at the beginning and we have to give
127:05 - both and size properties so i will give
127:08 - both equal
127:10 - the position for example 700 and 200
127:14 - and size property equal 150 100 and you
127:19 - need to import
127:20 - rectangle okay let's try that you can
127:24 - see the field rectangle displayed here
127:27 - that's all for this first part
127:28 - concerning the use of the canvas inside
127:30 - the code
127:35 - we are able to draw some instructions on
127:37 - the screen now i will show you how to
127:39 - update the instructions to move them and
127:42 - for example we are going to move this
127:44 - rectangle on the right so let's do that
127:47 - we will add a button on the interface
127:49 - and every time we will click on that
127:51 - button the rectangle will move from 10
127:53 - db on the right first thing we are going
127:55 - to do is to add the button in the
127:57 - interface i will define the canvas
128:00 - example in the kv file canvas example 4
128:04 - and i will add a button position for
128:06 - example 100 and 400 and for the text
128:10 - i will say a okay let's try that so now
128:14 - we have a button on the interface and we
128:17 - will need to manage the click of the
128:19 - button by using the on press property we
128:23 - have to create a new function in canvas
128:26 - example four for example on
128:28 - button a click ok
128:31 - so let's create this function i go back
128:34 - to the python file inside canvas example
128:37 - four i'm going to write dev on button a
128:40 - click let's just see if it works so i'm
128:43 - going to add a print
128:45 - foo okay let's try that and you can see
128:48 - that if i click on the button we have
128:50 - foo appearing here so the click of the
128:52 - button is working let's continue now i
128:55 - want to update the position of this
128:58 - rectangle to do this we need to remember
129:01 - the instruction inside a variable for
129:04 - example wrecked variable and it's going
129:06 - to be an instance variable so i can use
129:10 - it in another function here on the
129:13 - button click to update the instruction i
129:15 - have to update the properties on it here
129:18 - it's the position so i will write
129:20 - self.track.pos
129:22 - equal something it needs to be a tuple
129:25 - with x and y and for our first example i
129:28 - will put 100
129:29 - 100. let's try that you see that if i
129:32 - click on the button the rectangle moves
129:35 - to the 100 and 100 position when you
129:38 - update properties on instructions the
129:41 - canva detects that he has to redraw the
129:44 - instruction let's improve that so we can
129:47 - move the rectangle on the right with x
129:49 - and y i can do this get the x and y from
129:53 - the current position and i want to
129:55 - update the value of the x x plus equal
129:59 - for example
130:00 - 10 db and you need to import dp from the
130:04 - matrix okay and now i will build a new
130:07 - tuple with x and y of course it's not
130:11 - possible to do something like this to
130:13 - access to the first item of the tuple
130:16 - and to increment it why because the
130:18 - tuple is immutable you cannot change the
130:21 - tuple so the only way to do this is to
130:24 - assign the property a new tuple here i
130:27 - will give same value of the y but i will
130:30 - update the x to be 10 db more on the
130:32 - right so let's try this when i click on
130:35 - the button you see the rectangle is
130:38 - moving and i can click again and again
130:41 - that's all for this step
130:47 - we are able to move the rectangle on the
130:50 - side but you can see that the rectangle
130:52 - can also go out of the window and we
130:55 - want to avoid that we want that at most
130:57 - it's going to be aligned to the right of
130:59 - the screen and that's what you are going
131:01 - to do as an exercise
131:04 - [Music]
131:10 - i'm going to add some variables here we
131:12 - are going to add w for the width and the
131:15 - height of the rectangle and it's going
131:17 - to be right dot size okay also i will
131:21 - add an increment variable that is as a
131:24 - default dp of 10 and that we will use to
131:27 - change the x value and you will need to
131:29 - add a condition to modify the content of
131:31 - this variable so sometimes it's only 5dp
131:34 - if you have only 5dp remaining on the
131:37 - right and it will be 0dp if you are
131:40 - already aligned on the right for the
131:42 - computation you will use self dot reads
131:46 - which is the reads of the window and you
131:48 - will use also x which is the left part
131:51 - of the rectangle
131:52 - and w which is the width of the
131:55 - rectangle so for the right border of the
131:57 - rectangle it's x plus w it's time for
132:02 - you to practice on this exercise i will
132:04 - compute the remaining space with a new
132:07 - variable diff so diff is going to be
132:10 - safe not to it
132:11 - minus the position of the right border
132:13 - the position of the right border is x
132:16 - plus w
132:17 - so let's write this diff equal self dot
132:21 - width
132:22 - minus
132:23 - x plus w
132:26 - the right position of the border and the
132:29 - window width okay if
132:32 - div
132:33 - is less
132:34 - than what we want to increment so it
132:36 - means we don't have much space left we
132:39 - are just going to increment by what we
132:41 - have remaining and maybe it's already
132:44 - zero so in the case this is zero we are
132:47 - not going to move our position it means
132:49 - we are already on the right but if we
132:51 - have only five dp remaining we are just
132:54 - going to move to five more dp to be
132:56 - aligned on the right of the window and
132:58 - if we have enough space we will not go
133:00 - inside this condition and we will move
133:02 - of 10 db let's try this you can see that
133:06 - the rectangle can move and when it
133:08 - reaches the right of the window it just
133:11 - stay here okay if i resize the window
133:14 - it's going to work because self.width is
133:17 - updated okay and if i get a smaller
133:20 - window and if i click on the button we
133:22 - will compute also the right position and
133:25 - that's all for this exercise
133:30 - we saw how to move a rectangle by
133:32 - objecting the position property and now
133:35 - i'm going to show you how to move a
133:37 - shape automatically we are going to call
133:40 - a function with a time interval in this
133:42 - new example canvas example
133:45 - 5 we are going to draw a ball that will
133:48 - move in the screen and that will rebound
133:50 - on the borders canvas example 5 i'm
133:53 - going to take the first lines of the
133:55 - canvas example 4 with the init function
133:57 - and
133:58 - with canvas ok we are going to draw the
134:02 - ball to draw the ball we use ellipse and
134:05 - we use the position for example 100 100
134:09 - and also the size for example
134:12 - 50 dp and
134:14 - 50db perfect
134:16 - you need to import ellipse here
134:20 - okay so if i start this
134:23 - we can see the ball on the screen
134:26 - i am going to improve the code here i
134:28 - want to define a variable that will be
134:30 - the size of the ball so i will write
134:32 - self dot ball
134:35 - size equal
134:36 - dp 50 perfect and i will replace this
134:40 - inside my code self ball size now i want
134:44 - to display my ball in the center of the
134:47 - window i can use position equal
134:51 - self dot center but you can see that if
134:54 - i use this it's not going to work and
134:57 - that's because in the init function we
134:59 - don't have the size of the window
135:01 - already it's too early in the
135:03 - initialization of the graphics so as a
135:05 - default the window size is only 100 per
135:09 - 100 pixels at that time so we get only
135:11 - 50 and 50 position here and if i resize
135:15 - the window it's not going to change
135:17 - because it's not a binding here it's not
135:20 - like in the kv file it's not going to
135:22 - update automatically it's just a line of
135:24 - code and it has been executed only one
135:27 - time in the init function so we will
135:30 - need to use another function and there
135:32 - is a function that is called on size and
135:34 - that it is called when we change the
135:35 - size of the window so i will write this
135:38 - def
135:39 - on size and it use arg
135:42 - ok and we are going to add a print to
135:45 - print the size of the window on size
135:49 - and i will add width str of self
135:52 - dot reads
135:54 - and
135:55 - the height
135:56 - str
135:57 - 7.8 okay let's try that you can see that
136:01 - when we started the program we get on
136:04 - size with the right size of the window
136:06 - because on size is called later after
136:09 - the init and when i change the size of
136:11 - the window we get the print that is
136:14 - called with the new size of the window
136:16 - so how can i update my code to make the
136:18 - ball displayed at the center of the
136:20 - window i can use an instance variable
136:23 - self dot
136:24 - ball and i will update the position of
136:27 - the ball when we change the size of the
136:30 - window
136:31 - self.ball dot position
136:33 - equal self dot center let's try this you
136:37 - can see it is working but that the ball
136:39 - is not totally in the center of the
136:41 - window because the position is the
136:44 - lowest left point so we will need to
136:46 - subtract the half of the size of the
136:48 - ball so let's do that ball position is a
136:51 - tuple with self center x and self center
136:55 - y and we are going to subtract self ball
136:59 - size divided by 2 and do the same for
137:02 - the y and if i restart this you can see
137:05 - that the ball is totally centered
137:08 - now how can i move the ball we are going
137:10 - to use something new to call a function
137:12 - regularly with an amount of time at the
137:15 - end of the init function we are going to
137:18 - add a new line clock dot schedule
137:21 - interval and we will need to create a
137:23 - new function that we will call update
137:26 - function
137:27 - self.update and we give the time
137:29 - interval if i put one it's going to be
137:33 - called every one second you need to
137:36 - import clock take care here it's not kv
137:39 - clock it's kv properties clock from kv
137:43 - dot properties import clock okay and we
137:47 - need to create the new function def
137:49 - update you can use the name that you
137:51 - want for this function but take care
137:53 - because every function call with
137:54 - schedule needs to have a parameter which
137:57 - is dt
137:58 - delta time i will explain you how to use
138:01 - this parameter in the galaxy project
138:04 - here i will add a print and i will say
138:07 - update if i start the program
138:10 - you can see that the print update is
138:12 - called every second how can i speed up
138:15 - this i can say for example
138:18 - 0.5 so it's going to be called every
138:21 - half second or two times per second if i
138:25 - restart you can see that it is more
138:27 - frequent here so let's change the
138:29 - position of the ball in this update
138:32 - function
138:33 - self ball position
138:35 - equal so i have x and y here and i will
138:39 - say
138:40 - x plus 10 and y okay if i restart you
138:45 - can see the ball is changing but this is
138:47 - quite slow so how can we update that
138:51 - that's because we call it only two times
138:53 - per second and you know that for games
138:55 - we usually refresh 60 times per second
138:59 - 60 frames per second so here i will
139:02 - write 1 divided by 60 and i have my ball
139:06 - moving quite quickly also you can change
139:09 - the speed of the ball by changing the
139:11 - amount that you increment every time for
139:13 - example 4 and you see the ball is moving
139:16 - in the screen that's all for this step
139:25 - the ball can move but now we want that
139:27 - the ball does not goes out of the window
139:30 - that the ball can rebound and that's
139:32 - what we are going to do here the ball is
139:34 - going to move on the x and on the y and
139:37 - has to rebound on the four sides of the
139:39 - screen but first i'm going to define the
139:42 - speed of the ball self.velocity
139:45 - x
139:46 - equal
139:47 - 3dp and for the y
139:50 - it's going to be
139:51 - 4dp and of course every time we call the
139:54 - update function here i will remove the
139:56 - plus 4. the x
139:58 - will be plus equal to
140:01 - v self.vx and the y plus equal to
140:04 - self dot v y and you can see that this
140:07 - time
140:08 - the ball is moving on the x and the y
140:11 - axis perfect
140:12 - for this exercise you will need to add
140:15 - some conditions and you will need to
140:17 - test if the ball is going out of the
140:20 - window remember that x and y are the
140:22 - lower left part of the ball if you want
140:25 - to get the right part and the top part
140:28 - of the ball you will need to use the
140:30 - self dot ball
140:32 - size and you will need to test with self
140:35 - reads the width of the window and self
140:38 - hate the height of the window when you
140:41 - want to rebound we are going to say that
140:43 - the speed is going to be the opposite
140:46 - okay so for example if your ball goes
140:48 - out of the screen on the right you are
140:50 - going to invert the speed so that every
140:53 - time you go to the update function you
140:54 - are going to increment with something
140:56 - negative so you will go to the left side
141:00 - and you are going to do the same
141:01 - principle with the v y it's your time to
141:04 - practice on this exercise
141:06 - [Music]
141:12 - if i start the program you can see that
141:15 - first and the ball goes out of the
141:16 - screen on the top so we are going to add
141:18 - this first condition if
141:21 - the y of the ball and i want to get the
141:23 - top of the ball so it's y plus
141:26 - self ball size
141:28 - it's greater than the height of the
141:30 - window 7.8
141:32 - then we are going to go on the other
141:35 - direction self dot v y equal minus
141:39 - seven v y also the maximum value of the
141:42 - y for the ball is going to be self dot
141:45 - height
141:46 - minus the ball size so if you are above
141:49 - this value i just put the limit on the y
141:52 - and we go to the other side and we
141:54 - rebound let's try this you can see that
141:57 - the ball rebounds and then goes out of
141:59 - the screen on the right so i will add
142:01 - this condition if x
142:04 - plus the right part of the ball so x
142:06 - plus ball size is greater than self dot
142:10 - width then again the maximum value for
142:13 - the x is several tweets minus
142:17 - the ball size and i'm going to invert
142:20 - the v x
142:22 - okay let's try this
142:24 - so now we rebound on the top and we
142:26 - rebound on the right we need to add the
142:28 - two more conditions for the bottom if
142:32 - y is less than zero then y equal 0 and
142:36 - we rebound on the y axis same thing for
142:40 - the x
142:41 - if x is less than 0 then x equals 0 and
142:46 - we rebound on the x axis let's try that
142:50 - okay we rebound also on the bottom again
142:54 - on the top and on the left and if i
142:56 - resize my window we kept the ball
142:58 - position equal center of the window but
143:00 - if i release it's moving again
143:03 - everything is complete for this exercise
143:10 - we are going to create a new example
143:12 - canvas example 6
143:15 - and i'm going to do some experiments
143:17 - with the coordinates of the canvas and
143:20 - also using the canvas with some other
143:22 - widgets that we use previously like the
143:24 - button and we are also going to use the
143:26 - relative layout so let's do that canvas
143:29 - example 6 pass
143:32 - and then i go to the kv file and i
143:35 - create canvas example 6. we are going to
143:38 - start with a button so i will write
143:41 - button with text
143:44 - a ok i start and i have a button on the
143:48 - lower left of the window button is a
143:50 - widget so i can add a canvas inside my
143:54 - button canvas and i will display a
143:56 - rectangle if we try this
143:59 - we can see that the rectangle is
144:01 - displayed on top of the button and that
144:03 - the rectangle is displayed at the
144:05 - coordinate 0 0. this is because the
144:08 - order of the instructions matters first
144:11 - the button has been drawn and after we
144:14 - have added the instruction of the
144:15 - rectangle we can change the order of the
144:18 - instructions i can use canvas
144:21 - b4 to move this instruction before the
144:25 - instructions of the button in that case
144:28 - the button is displayed on top of the
144:31 - rectangle and also you have canvas dot
144:33 - after i will go back with canvas if i
144:37 - move the button with position for
144:39 - example position 100
144:41 - 100 you can see that only the button
144:45 - moved and not the rectangle however the
144:49 - rectangle is inside the canvas of the
144:51 - button but you need to understand
144:53 - something important here the canvas is
144:56 - always drawn at position 0 0 always it's
145:01 - going to be one exception with a
145:03 - relative layout and i'm going to show
145:05 - you that but first you can see that this
145:08 - is not related to the button if i use a
145:11 - box layout for example i will comment
145:13 - this property you can see that the
145:16 - canvas of the box iot even if we change
145:18 - the position to 100 100 is always at
145:21 - zero zero the only difference will be
145:24 - for the
145:26 - relative layout in that case you can see
145:30 - that the rectangle moved and actually
145:33 - it's not exactly what you think the
145:35 - canvas position is still at 0 0 but the
145:39 - relative layout moved the canvas space
145:42 - to its position the relative layout is
145:46 - the only exception that does this i show
145:49 - you another example if here i use a box
145:53 - layout and i add two button button with
145:57 - text
145:57 - a and button with text b if i restart
146:03 - you can see that strangely the box
146:04 - layout has a small size here of 100 per
146:08 - 100 that's because canvas example is a
146:11 - widget it's not a layout a widget does
146:14 - not takes care about the position or the
146:17 - size of the children so he will give a
146:19 - default size for the box i would which
146:21 - is 100 per 100 if you want to occupy all
146:25 - the window widths we have to do
146:27 - explicitly size equal to the root dot
146:31 - size in the previous layout examples
146:33 - that we did we did not have to do that
146:35 - because it was directly a layout and it
146:38 - was not a layout inside a widget okay
146:41 - but here if i take the size of the
146:43 - widget explicitly my box layout takes
146:46 - all the size of the window perfect now i
146:49 - want to draw a rectangle instead of the
146:51 - a button i can use an empty widget if i
146:55 - replace button by widget i have an empty
146:58 - widget here and i can use a canvas on
147:01 - this widget canvas and i will draw a
147:03 - rectangle okay let's try it we have the
147:07 - rectangle at 0 0 in the canvas and i can
147:10 - use size
147:12 - on the rectangle to get the size of the
147:15 - widget
147:16 - self dot size take care it's not root
147:20 - note size because root is canvas example
147:22 - six
147:23 - root size will be all the size of the
147:25 - window but we want to use only self.size
147:28 - because we want to use only the size of
147:31 - this widget if i restart you see that we
147:34 - have a white rectangle and i can change
147:37 - the color by using a color instruction
147:40 - inside the canvas rgb for example green
147:43 - color zero one zero okay i have a green
147:47 - rectangle how can i do the same for the
147:50 - b button i want to draw a blue rectangle
147:53 - i'm going to copy all this section and
147:56 - replace button by a widget
147:59 - with a rectangle that is
148:01 - blue and you will see that this time the
148:04 - blue rectangle is displayed on the left
148:07 - because the canvas always starts at 0
148:11 - zero so if you want to move the
148:13 - rectangle we need to give a position to
148:16 - the rectangle and we are going to give
148:18 - self.position to get the position of the
148:20 - widget
148:21 - this time it's working i have the green
148:24 - rectangle on the left and the blue
148:26 - rectangle on the right also we can do
148:29 - the same thing with a relative layout
148:31 - for example if i replace widget by
148:34 - relative
148:35 - layout i can remove the position here
148:38 - because the relative layout will move
148:41 - its canvas to its position you can see
148:44 - that the blue rectangle is still here
148:46 - it's drawn at 0 0 but because of the
148:50 - relative layout it moved to its position
148:53 - that's all that i wanted to show you
148:55 - concerning the coordinates and the
148:56 - relative layout
149:03 - for this exercise i'm going to ask you
149:05 - to draw 3 rectangle blue white and red
149:10 - like the french flag you will create a
149:13 - new example canvas example 7 but this
149:18 - example is going to be directly a box
149:21 - layout and not a widget so i will write
149:24 - box layout here canvas example 7 take
149:27 - care because you need to import box
149:30 - layout ok so you will do this exercise
149:33 - remember that for the white color you
149:36 - need to use one one and one it's your
149:38 - time to practice
149:40 - [Music]
149:46 - okay i will add the first rectangle i
149:49 - will copy this relative layout that i
149:51 - will put in the box layout and it's blue
149:55 - then i will use a
149:57 - white one with one and one also you can
150:01 - see that if i add only this one it's
150:03 - going to take all the space of the
150:05 - window automatically because we start
150:08 - with a box layout and not with a widget
150:10 - okay then i add the white one and also
150:14 - the red one everything is okay for this
150:17 - exercise
150:19 - you have completed the lab project
150:21 - congratulations you are now able to
150:23 - create user interfaces in python with
150:26 - the tv library but let's go a bit
150:29 - further with kivy by creating a
150:31 - real-world project
150:33 - part number two the galaxy project
150:36 - version one
150:37 - let's start
150:39 - [Music]
150:46 - welcome to the galaxy project it is an
150:49 - advanced project that means you had to
150:51 - follow the previous video of this course
150:54 - and also be able to do all the exercise
150:57 - if that's not the case practice a little
150:59 - bit more and when you are ready you can
151:01 - start on this project what is galaxy
151:04 - it's a game in three dimension or in
151:06 - perspective mode and the player has to
151:09 - move the spaceship on the left and on
151:11 - the right to stay on the track if you go
151:13 - out of the track you will have a game
151:15 - over let me show you a demo of the
151:17 - project
151:19 - so you can see we have a menu we have
151:21 - also sound that says galaxy and when i
151:24 - press start
151:26 - the game is starting with some
151:27 - background music
151:29 - i can go on the left on the right and
151:31 - follow the land i also have the score
151:33 - which is updated
151:36 - and if i go out of the track
151:38 - i go into the game over and i can also
151:42 - restart the program
151:46 - again and again the objectives of the
151:49 - project is to create a desktop windows
151:52 - linux or mac os or mobile game ios and
151:55 - android
151:56 - from a to z you will practice on apps
151:59 - development with kivy especially on the
152:01 - canvas you will learn how to structure
152:04 - your code and to organize it you will
152:06 - improve your debugging skills especially
152:09 - on the errors but also when we want to
152:11 - improve some behaviors of the game so
152:14 - you will need to do some investigation
152:16 - we will need to create some algorithm so
152:18 - you will practice on the land generation
152:21 - but also on the perspective display you
152:24 - will also need to create and implement
152:26 - all the game elements like the land and
152:28 - the ship and you will code all the game
152:30 - logic user actions what we have to do
152:33 - when the user press left when the user
152:35 - goes out of the track you will display
152:37 - the score and trigger the different
152:39 - sounds at the right moment we will
152:41 - progress on three steps first version
152:44 - you will display the grid in two
152:46 - dimensions and then you will transform
152:48 - the display to display it in perspective
152:51 - and finally we will also add the
152:53 - movement to go forward into the level
152:56 - and also to be able to go on the left
152:59 - and on the right step number two we will
153:02 - generate the land i mean the track that
153:05 - we have to follow we will also display
153:07 - the ship and we will manage the
153:09 - collisions that mean we will observe if
153:12 - the ship is still on the track or if it
153:15 - is out of the track and in that case we
153:17 - will just print game over on the v3 we
153:20 - will finalize our project to display the
153:22 - menu trigger the different sounds
153:25 - display the background image and manage
153:27 - the score why did i choose to create
153:29 - this game i did not want it to create
153:31 - another pong or a flappy bird or a
153:33 - classic snake i wanted to create
153:36 - something new i started from this
153:37 - concept of a car game in two-dimension
153:40 - with a land generation and i like this
153:42 - idea to practice on the land generation
153:45 - algorithm so i kept this id but i was
153:48 - thinking of something using a grid so we
153:50 - can have different algorithm concerning
153:52 - the land but then i also thought about
153:54 - the visual aspect and i was thinking why
153:57 - not transforming this 2d aspect to a
154:00 - perspective mode then i change my
154:03 - concept of the car to a spaceship and
154:06 - have something in the space and have a
154:08 - kind of different levels where you need
154:10 - to reach a planet something like that so
154:12 - this choice is to avoid the classics
154:15 - like the pongs the snakes to have this
154:17 - learned generation algorithm which is
154:20 - very interesting to learn and to
154:22 - practice on to have an interesting
154:24 - visual aspect and also i don't mean that
154:27 - i created a new game concept it's other
154:30 - games like this that already exist but i
154:33 - never saw any existing tutorials about
154:35 - it so it's something new and exclusive
154:38 - that you will learn into that course how
154:40 - does it works in fact we are going to
154:42 - work in a 2d mode with a grid and then
154:45 - we are going to transform that into a
154:48 - perspective mode we will implement this
154:50 - function later transform perspective do
154:53 - you need to be good at math to do this
154:56 - in fact not really i simplified
154:58 - everything so you just need to
155:00 - understand the compute of proportions
155:02 - for example if i tell you that one us
155:05 - dollar equals 90 of euro
155:09 - how much is one euro in us dollar in
155:12 - that case is 1 divided by 0.9 1.111
155:17 - if you understand this concept you can
155:19 - follow the mathematics behind the
155:20 - perspective transform else if you really
155:23 - cannot follow mathematic concepts you
155:25 - will be able to follow these tutorials
155:27 - in 2d mode because all of the logic of
155:30 - the game is done in 2d and the
155:32 - perspective is only to change the
155:34 - coordinates for the display how does we
155:36 - have this movement of going forward into
155:39 - the game in reality we are just going to
155:41 - offset the grid vertically so for
155:44 - example if we start with this grid i put
155:46 - two lines in color we will shift it
155:49 - downstairs so we have this impression to
155:51 - go forward into the game again and again
155:54 - and when we will reach this point at the
155:57 - base we will just loop to go back at the
155:59 - initial position so that we have this
156:02 - illusion that the game is always going
156:04 - forward i will explain you that in more
156:06 - details later concerning the ship
156:09 - movement on the left and on the right in
156:12 - fact the ship will be always displayed
156:14 - in the center of the screen and for
156:16 - example if the user press the right key
156:18 - we are going to move the land on the
156:20 - left so that we have this illusion that
156:23 - the ship moves on the right and this
156:25 - principle is going to work also when we
156:27 - press on the left concerning the land
156:30 - generation i have prepared a simple
156:32 - algorithm you will be able to go forward
156:35 - to go on the right or to go on the left
156:38 - and it's going to be random so we will
156:40 - have three patterns just going forward
156:43 - going on the right and going on the left
156:46 - so that we can generate a random and
156:48 - also infinite because when we go forward
156:50 - into the game we have some part of the
156:52 - pass that will go out of the screen so
156:55 - we will recycle it to generate new
156:58 - elements at the top and this is going to
157:00 - be displayed perfectly in perspective so
157:03 - that the player will have to move on the
157:04 - left and on the right to stay on the
157:06 - track we are going to start right now
157:09 - with the v1 you are going to create the
157:11 - project to define the coordinates of the
157:14 - perspective point to generate the grid
157:17 - with the vertical and horizontal lines
157:19 - we will also create the transformation
157:21 - of the coordinates that we can go from
157:23 - the 2d grid to the perspective mode
157:27 - finally we will also implement the
157:29 - forward movement and also the movement
157:31 - on the left and on the right when the
157:33 - user press the keyboard keys on computer
157:36 - or press the screen on mobile are you
157:38 - ready to start let's do it
157:44 - let's create our new project i put the
157:47 - name galaxy and i will use the same
157:50 - options as usual i will click on the
157:52 - create button when it's ready we will
157:55 - add the new python file main and i will
157:58 - begin to write some code
158:00 - class
158:01 - galaxy app
158:03 - coming from the app class and i will put
158:06 - nothing inside i need to import
158:09 - the
158:10 - tv.app not app okay and i will add my
158:13 - main widget
158:14 - class
158:16 - main widget coming from widget and i
158:19 - will put pass inside and import this
158:22 - import kv uix widget
158:25 - ok and of course i need to instantiate
158:28 - my application so i need to use
158:31 - parenthesis dot run okay and i will also
158:34 - add my kv file so i need to add not in
158:38 - the vf but put it here new
158:41 - file galaxy dot kv with the same name as
158:46 - app without app okay galaxy dot kv make
158:49 - sure it is in the same directory as the
158:51 - main.py and my main interface is going
158:54 - to be my main widget so i'm going to put
158:57 - main widget semicolon
158:59 - okay i save it
159:01 - and i can start my application by using
159:04 - the right click run and i have a black
159:06 - screen everything is ready for the
159:08 - creation of the project
159:13 - i want to define the coordinates of our
159:15 - perspective points and the perspective
159:18 - point will be at the center horizontally
159:21 - and at 75 percent of the head here and
159:25 - of course when we will resize the window
159:27 - it will automatically update the
159:29 - coordinates of our perspective points so
159:31 - let's begin by creating some variables
159:35 - perspective
159:37 - point x
159:38 - and let's say it's a numeric property so
159:40 - we'll be able to also modify it from the
159:43 - kv file why not let's see if we need
159:45 - that numeric property 0 and i'm going to
159:50 - copy paste this with y
159:53 - and import numeric property okay so we
159:57 - need to get the size of the window can
159:59 - we get the size of the window from the
160:01 - init
160:02 - let's try def in it and i'm going to
160:06 - call super
160:07 - main widget
160:09 - self
160:10 - dot init
160:11 - okay and i will add a trace print
160:14 - in it
160:15 - i will put my reads it's going to be str
160:18 - from the self dot width okay and the
160:22 - same thing for the height
160:24 - plus str
160:25 - self
160:26 - 8 okay let's try it you see that if i
160:29 - start my program i have init function
160:32 - that is called but we have a width and a
160:34 - height of 100 because it is a default
160:37 - size but of course it does not match the
160:40 - size of my window and also if i resize
160:42 - my window it's not going to work is it
160:45 - going to work from the on parent let's
160:47 - try we get parent on parent is called
160:51 - when we just attach the widget to the
160:54 - app in our case so i'm going to call the
160:57 - same thing here the trace and i'm going
161:00 - to put on parent okay let's try it
161:03 - you can see that i still don't have the
161:05 - size of my window here but anyway let's
161:08 - keep this function because we will need
161:10 - to use them in the project i'm just
161:12 - going to comment in the print
161:14 - and because i have no code here i need
161:16 - to add pass in this function okay it's
161:20 - another function called the
161:22 - on size with star
161:25 - arcs okay and let's try it on on size
161:29 - function on size here you see that i get
161:32 - a size of 1600 and 1200 which matches
161:35 - the size of my window and if i resize it
161:39 - i have the new size and that is
161:41 - appearing here okay so this is a good
161:43 - candidate to compute our perspective
161:45 - point i can say that on size
161:48 - self
161:50 - dot perspective points don't forget to
161:52 - use self here okay equal
161:55 - self dot reads that i'm going to divide
161:58 - by two i want to be at center
162:00 - horizontally and i'm going to use
162:03 - perspective point y is going to be self
162:06 - dot 8 at 75 percent so i multiply by 0
162:10 - dot 75
162:12 - and how can i observe when the property
162:15 - change i can use a function name that
162:17 - will be automatically called because
162:19 - it's a property and that is on
162:23 - the name of the property on perspective
162:26 - point x when the value of this property
162:28 - change is automatically called and we
162:31 - need to provide widget and value
162:32 - parameters so value is going to be the
162:34 - new value i can add a print and i will
162:38 - say perspective x and i will print the
162:42 - value the new value okay and i will do
162:45 - the same for on the y okay p
162:48 - y equal this new value let's try it so
162:51 - you can see 1600 1200 and i have 800 for
162:55 - x which is correct and 900 for the y
162:58 - which is also correct so my point is
163:01 - here and it's going to automatically
163:03 - adapt when i change the size of the
163:06 - window is it possible to do it in a
163:09 - different way yes we can do that from
163:12 - the kv file so i'm going to comment
163:15 - these two lines and i will use the
163:17 - equivalent on the kv file here we have
163:19 - our main interface which is the main
163:21 - widget and i'm going also to define my
163:24 - main widget inside my main widget i have
163:27 - these properties so i can use them
163:30 - perspective point x directly in my kv
163:33 - file and i'm going to give a value which
163:36 - is self dot width divided by 2 and
163:40 - perspective point y which is going to be
163:43 - 7.8
163:45 - multiplied by 0 75 and if i start again
163:49 - my program you can see that it's still
163:52 - going to work you see that the values of
163:55 - my perspective point are automatically
163:57 - updated how is it possible because here
164:00 - we give the value of the width on the
164:01 - head it's because it's a binding when
164:03 - you write something like this in the kv
164:05 - file it will automatically update the
164:08 - value of the property
164:10 - when saved.reads and
164:12 - self.hate will be modified and of course
164:15 - these two functions are going to be
164:17 - called whether the value of the property
164:20 - is changed from the python file or from
164:22 - the kv file so that's all for the
164:24 - perspective point i'm going just to
164:26 - comment the prints and we need to put
164:29 - pass
164:30 - because we have no code inside functions
164:32 - okay and then we can move to the next
164:35 - video
164:40 - now we want to display our vertical line
164:42 - so we are going to display the vertical
164:44 - lines into two dimension first and then
164:46 - we will apply a transform to have the
164:49 - perspective and we will display your
164:50 - line totally from the bottom zero to the
164:54 - height of the window we will have a line
164:56 - at the center and we will have other
164:58 - vertical lines spaced by the same amount
165:01 - that we will compute by a percentage on
165:04 - the width of the window we want our game
165:06 - to adapt to the size of the window so
165:09 - let's do this but first we are going to
165:11 - display only one line to make a first
165:14 - test
165:15 - so i'm going to
165:17 - create a function in it
165:19 - vertical lines that i'm going to call
165:23 - from the
165:24 - init function
165:25 - self not init vertical lines okay i'm
165:28 - going to add a line instruction in the
165:30 - canvas
165:31 - with
165:33 - self.canvas and all the lines will be
165:35 - displayed in white so i will put a color
165:39 - instruction with one one one for white i
165:41 - need to import this tv graphics context
165:45 - instructions don't take this one okay
165:48 - and i will add a line instruction with
165:51 - points
165:52 - take care it's an s at points equal and
165:56 - we are going to give a list of points i
165:57 - need to import this line instruction kv
166:01 - graphics vertex instructions first to
166:03 - make a test we want to make a vertical
166:05 - line that will be at x with 100 so we
166:09 - are going to give x1 100 y1 0 x2 100
166:15 - y2 100 okay let's save and try this so
166:20 - you can see we have our vertical line at
166:24 - the good coordinates okay i can resize
166:26 - my window it's still display here let's
166:28 - do something more let's display this
166:30 - line always at the center of the window
166:34 - so even when we resize the window it's
166:36 - going to be updated to the right
166:38 - position depending on the window reads
166:41 - how can i do that
166:44 - i have to save this line instruction and
166:47 - i need to create a new variable line
166:50 - equal node and i will do
166:52 - self not line equal line and from that
166:57 - this line instruction is already in the
166:58 - canvas i will just update my line so i'm
167:01 - going to create a function
167:04 - update
167:05 - vertical lines and what i want to do is
167:08 - to give my lines new points points equal
167:12 - my new points and i want to display it
167:14 - at the center of the window so you may
167:16 - say why i don't put the center here like
167:18 - for example self dot weights divided by
167:22 - two yeah why not so let's try that and
167:24 - see what it gave and you can see that my
167:27 - line is displayed here and not in the
167:29 - center of the window why because it took
167:32 - the value 100 divided by 250 that is
167:36 - available at the init here because we
167:38 - call it from because we call it from
167:40 - here or you may say we need to call this
167:42 - function on the on size
167:44 - no we should not do that because if we
167:47 - do that it's going to create over and
167:49 - over new instructions in the canvas and
167:52 - that's not what we want to do we want to
167:54 - create only one instructions so i'm
167:57 - going to remove that from here we want
167:59 - to call it from the init that's correct
168:02 - we create our instruction and then we
168:03 - will just update the coordinates but
168:05 - never call that anymore so i'm just
168:07 - going to update the coordinates in the
168:09 - update vertical lines and this function
168:12 - yes i will call it from the unsize
168:14 - function self dot update vertical lines
168:17 - so what i give x1 i want to give the
168:20 - width here i can go back to 100 for
168:24 - example and here i will compute the
168:26 - center x which is
168:29 - simpler to it divided by two and you
168:31 - need to give hints coordinates else if
168:34 - you have some decimals in the
168:35 - coordinates and the line will be drawn
168:37 - but not totally well so you have to take
168:39 - care about that x1 it's the center x and
168:43 - 0 for the y
168:45 - and then we go to the same x but 100 in
168:48 - our example let's see if it's working
168:51 - well you see that it's at the center of
168:53 - the window and if i resize my window i
168:56 - can see the line is moving and always
168:58 - align to the center of the window so we
169:02 - can just by assigning new points to this
169:04 - line you can see that the display is
169:07 - updated
169:08 - and you may say okay but why we did not
169:11 - update it only the y here and do like
169:13 - points of zero equals something because
169:17 - if you do that it will not trigger the
169:19 - update of the display so what you need
169:21 - to do is to give a new value to this
169:24 - points property okay so now that we have
169:26 - one line working and adapting to the
169:29 - size of the window we want to have our
169:31 - multiple vertical lines and we are going
169:34 - to start from the center line but we
169:36 - will have lines on the left and lines on
169:38 - the right we are going to define the
169:40 - total number of lines and we are going
169:43 - to define also the spacing between the
169:45 - different lines and it's going to be in
169:47 - our case 10 percent of the total width
169:50 - of the window okay let's do this i can
169:53 - delete my line because we will now
169:55 - manage multiple vertical
169:58 - lines it's going to be a list of lines
170:00 - and i'm going to create different
170:02 - numbers that we want vertical and b
170:05 - lines for example seven lights of course
170:08 - we will be able to change that numbers
170:10 - laters if we want and vertical lines
170:13 - spacing that's space between the
170:15 - different lines and why i don't give a
170:18 - value in dp are in pixels because
170:20 - imagine if you're on an ipad or phone
170:22 - it's going to be different display size
170:24 - so we need to adapt the size of our game
170:27 - depending on the size of the window so i
170:29 - have to give a percentage on the width
170:32 - of the window i will say that it's going
170:34 - to be 10
170:35 - 0.1 percentage in screen
170:39 - widths okay perfect in the init i will
170:42 - initialize my different lines so here i
170:45 - don't want to do that anymore but i will
170:48 - just add the different instructions in
170:49 - the canva i will not give any points i
170:51 - just want to create my lines and later
170:54 - in the updates i will reassign the
170:56 - points to each line so here i just want
170:59 - to do a new line and in a loop of course
171:02 - for i in range 0 2 and b
171:07 - vertical and b lines i will create a
171:10 - line that i will add in my vertical
171:12 - lines up and i put self
171:15 - so in my vertical lines i will have
171:18 - seven lines in our case now when i go to
171:21 - the update function i want to reassign
171:23 - my points to each line so i'm going to
171:25 - command that and of course i will loop
171:28 - same loop for every lines i need to
171:31 - assign the points of this vertical line
171:34 - of the index dot points equal something
171:38 - how can we compute that what we can
171:40 - compute is the x of the central line we
171:43 - can rename that to central line x
171:47 - and what's going to happen for example
171:49 - is that we are going to have this
171:51 - central line here but we need to draw
171:53 - also lines on the left and lines on the
171:56 - right and we will have three lines on
171:58 - the left plus this one four and three
172:01 - lines on the right to go to seven okay
172:04 - so what we can do is to have an offset
172:07 - that will be negative at the beginning
172:10 - and that will be the half of nb lines so
172:13 - we can do divided by two in our case if
172:17 - i do int of this it's going to be three
172:20 - so i'm going to start on the left
172:23 - and in my loop i will increment this
172:25 - offset so i have a kind of index of the
172:28 - number of the line it's going to be the
172:30 - negative 3 line totally on the left
172:32 - negative 2 negative 1
172:34 - then 0 1 2 3 and i will then compute the
172:39 - x of the line from the central line and
172:42 - the offset so i can compute it here
172:45 - line x
172:47 - is equal to
172:48 - central line x
172:50 - plus the offset the offset is negative
172:53 - first so it's going to be on the left
172:54 - first multiply by the spacing between
172:58 - the different lines so it's going to be
173:00 - self dot v lines spacing but line
173:04 - spacing is a percentage on the window
173:06 - width so we first need to compute the
173:08 - spacing i'm going to write it here
173:10 - spacing is equal to self dot
173:13 - v line spacing multiply by self
173:16 - dot width okay and i will multiply my
173:19 - spacing here okay so first in the first
173:22 - loop i get my offset minus three i get
173:26 - central line x
173:28 - plus minus three the spacing so it's
173:30 - going to be the line totally on the left
173:32 - then i increment my offset so from minus
173:35 - three i go to minus 2 so it's going to
173:38 - be the next vertical line then minus 1.
173:41 - then the center is going to be 0 in the
173:44 - offset so it's going to be at the
173:46 - central line and then we have plus 1
173:49 - spacing plus 2 plus 3. of course now i
173:51 - need to give my points so x is a line x
173:54 - and i give a 0 for the y then again line
173:57 - x and i'm going to give the self dot 8
174:01 - so we can draw the line totally to the
174:03 - top let's try that okay you can see i
174:06 - have my different lines something i'm
174:09 - missing you can see that the drawing of
174:11 - the line is a bit weird like we have
174:13 - some lines that are more visible than
174:15 - others is because we need to put the
174:18 - hint
174:18 - here in the coordinates it's important
174:22 - not to have floating numbers okay let's
174:24 - try again so now you see it's better and
174:27 - we have our lines that are displayed and
174:29 - that adapts to the width of the window
174:32 - it's perfect of course we can change
174:35 - these numbers for example i can put less
174:38 - here zero
174:39 - four let's say and we have
174:41 - more lines okay so why do i put a odd
174:45 - number here for example if i put four
174:47 - lines and i go back to my zero one
174:50 - what's going to happen it's because it's
174:52 - not going to be balanced from the center
174:54 - line we have two lines on the left and
174:56 - only one here to make four lines so for
174:59 - this to work we need to have an odd
175:02 - number like 5 7 11 for example so let's
175:06 - keep these values that's all for the
175:09 - vertical lines and let's continue on the
175:11 - project
175:16 - we were able to display our vertical
175:18 - lines in a two dimensional space we use
175:21 - the vertical lines spacing to define the
175:25 - equal space between the different lines
175:27 - and we also defined the vertical number
175:30 - of lines for example here 5 our vertical
175:33 - lines start from a y of 0 to the height
175:37 - of the screen how can we transform that
175:40 - display to a perspective display we
175:43 - already have our perspective point
175:45 - perspective x and perspective y and we
175:47 - want to display our vertical lines this
175:50 - way on the axis when y equals zero we
175:53 - are going to keep the same value of the
175:55 - v line spacing but the more we go closer
175:58 - to the vertical points the more the
176:00 - horizontal axis is going to be smaller
176:04 - to do this we are going to implement a
176:06 - function that we will call transform
176:08 - perspective it will take the 2d
176:10 - coordinates as an input and it will
176:12 - return the transform coordinates for
176:14 - example if i take this line which is
176:17 - going to be displayed here in the
176:19 - perspective i have two points i have
176:21 - this point here point number one and
176:24 - point number two you can see that my
176:26 - point number one is going to be
176:28 - displayed here at the same position but
176:31 - the point number two will be displayed
176:34 - at the same position as a perspective
176:36 - point to go from here to here is what i
176:38 - call the version number one of our
176:41 - transformation function because it's
176:43 - going to evolve in the project we will
176:45 - see that later so how are we going to go
176:47 - from here to here it's going to be
176:49 - mathematical computation of linear
176:52 - proportions if i go back to my
176:54 - perspective representation i have my x
176:57 - and y axis starting from 0 and going to
177:00 - the maximum y of height and maximum x of
177:04 - width
177:05 - this is my display
177:07 - this represents my window i have my
177:09 - perspective x here for this line and
177:12 - perspective y here for the example we
177:15 - are going to take this blue line it has
177:18 - two points point number one here x one
177:20 - x1 y1 this line in the two-dimensional
177:23 - space is display as this red line so the
177:27 - other point is here point x2 y2 these 2d
177:32 - coordinates is what i will give to my
177:34 - transformation function as an input
177:36 - first thing we can compute is about the
177:38 - y transformation i want that when the y
177:41 - is at the maximum value which is 8 and
177:44 - which is the case for my point 2 i want
177:47 - it to be at a maximum of perspective y
177:50 - so i'm going to make a proportion here
177:53 - if it is 0 we keep 0 if it is 8 we
177:56 - divide by the height and we multiply by
177:59 - perspective y to be here so my
178:02 - transformation y equal point y
178:05 - divided by the maximum height and
178:08 - multiply by the perspective y also in
178:11 - the chord we will add some condition to
178:13 - avoid going above the perspective y even
178:16 - if you are above the height so if i
178:18 - apply this transform y my point 2 is
178:21 - here now we want to compute the x and
178:24 - you can see that the x is going to be
178:26 - closer and closer to the perspective x
178:29 - here i have my div x and here i have my
178:32 - diff y
178:33 - d x is the same value for point one and
178:37 - point two it's going to be the point x
178:39 - minus the perspective x concerning d f y
178:43 - i'm going to use the transform y so for
178:46 - the point one it's going to be
178:48 - perspective y
178:50 - minus zero so we have the maximum value
178:53 - here which is perspective y for the
178:56 - point two my point two with the
178:58 - transform y is already here so it's
179:00 - going to be zero perspective y
179:03 - minus perspective y d f y equal
179:07 - perspective y minus the transform y how
179:11 - can i compute my x to compute the value
179:14 - of the x you need to understand that the
179:17 - delta of x
179:18 - depends on the y
179:20 - the more we go closer to the perspective
179:24 - points vertically the more my d x will
179:28 - be smaller and if i go halfway
179:30 - vertically my div x will have a value of
179:34 - 50 percent so what we want to have is a
179:37 - proportion variable that is one when
179:40 - diff y is the maximum value perspective
179:43 - y and that is 50 percent when my d5 is
179:47 - at halfway and we are going to apply
179:49 - this vertical proportion to the
179:52 - difference of x and we will call that as
179:55 - a factor y factor y equals the
179:59 - difference y divided by the maximum
180:02 - value perspective y factor y equals 1 in
180:05 - the case of the point number 1 and it
180:08 - equal zero in the case of point number
180:11 - two because we have zero in factor y for
180:14 - the point number two so transform x will
180:17 - not have any difference with the
180:19 - perspective x transform x equal
180:22 - perspective x plus
180:24 - the d x
180:26 - at the proportion
180:28 - of the factor y so multiply by factor y
180:31 - that means that the x for point number
180:34 - one will be here perspective x plus the
180:37 - full and difference because we have a
180:39 - full factor y then for this point in the
180:42 - middle we are going to be starting from
180:44 - perspective x plus the half of the diff
180:48 - x and for the point number two we are
180:51 - going to be here plus
180:53 - zero because of factor y is equal to
180:55 - zero and of course for the points on the
180:58 - left we are going to have a d x and that
181:00 - is a negative so we will add this
181:03 - negative value for the left part this is
181:06 - correct and finally we will return that
181:09 - transform coordinates take the time on
181:11 - your site to look about this and maybe
181:14 - watch again this video and when you are
181:17 - ready we are going to move to the next
181:19 - video to implement this transformation
181:22 - function
181:26 - we have our vertical lines and we have
181:28 - our perspective point and now we want to
181:31 - display the lines in perspective so how
181:34 - can we do that you may say we can take
181:36 - this coordinate here and then we take
181:38 - the coordinate of the perspective point
181:40 - and that's it we trace our lines okay
181:43 - but that's not what i want to do because
181:45 - we will need to trace also the
181:47 - horizontal lines and other elements on
181:49 - the display so i choose to have another
181:52 - approach which is to have a transform
181:54 - function we are going to have a function
181:56 - that will take the input coordinates x
182:00 - and y so we will give the two dimension
182:02 - coordinates in the input and on the
182:04 - output we will get the coordinates in
182:06 - perspective that means if you give this
182:09 - coordinate for example you will have the
182:12 - same in the output but if we give this
182:14 - coordinate here with which correspond to
182:18 - where we trace our 2d line then you will
182:21 - get this coordinate in the output
182:23 - tracing the line like this and by using
182:26 - a transform function we will be able to
182:29 - use multiple transform function that
182:31 - will makes it possible to have a
182:33 - standard 2d transform that will not
182:35 - transform the coordinates and another
182:37 - function to transform in perspective so
182:39 - it's going to be easy to change the
182:41 - display from 2d to perspective very
182:44 - easily i will show you concretely how it
182:46 - works so first what we are going to do
182:48 - is to define a new function that is
182:51 - going to be transform and we will give x
182:54 - and y and this is going to return
182:57 - something and this something is the
183:00 - result of a transform
183:02 - function so we will have transform 2d
183:05 - that will also take x and y
183:07 - and this one does not change anything so
183:09 - it just returns
183:11 - x and y okay so our transform function
183:15 - does not do anything for now but the
183:18 - interest is that we can have another one
183:21 - which is going to be the transform
183:23 - perspective and this we need to
183:27 - implement it okay that's what we're
183:29 - going to do in this video and why do i
183:32 - do this of course the transform function
183:34 - we will need to call it before we
183:36 - display the light we are going to do
183:37 - that but why i do this because
183:40 - we can
183:41 - use either our 2d transform or transform
183:46 - perspective so we can go easily from
183:50 - perspective or from two-dimension okay
183:53 - so of course here i return the same
183:55 - coordinate so if i just use the
183:58 - transform perspective it's not going to
184:00 - change anything so interest is what is
184:03 - that we will compute all the coordinates
184:06 - in 2d but just before going to the
184:09 - display we are going to transform the
184:11 - coordinates and how can we do that we
184:14 - are going to compute x1 and y1 that is
184:18 - going to be a self dot transform and it
184:22 - will take the 2d coordinates line x
184:25 - and 0 in our case okay and here we will
184:28 - display x1 and
184:30 - y1 and for x2 and y2 we are going to
184:35 - take the same input so align x for x and
184:38 - save that 8 for the y okay so i can put
184:42 - x 2 and y 2. ok so if i start my program
184:47 - again of course it's going to be the
184:49 - same thing because we don't change the
184:51 - coordinates here perfect
184:54 - so let's begin to write this function
184:57 - and what we want to do is this instead
184:59 - of drawing until the top we want to draw
185:02 - until the perspective x and y first
185:05 - let's compute the y
185:08 - so for the y if we give 0 we will still
185:10 - stay here but if we give the window
185:13 - height it's going to have a result of
185:16 - the perspective y okay so we need to
185:19 - make a proportion to go to this maximum
185:22 - value that means here i will write
185:24 - transform y
185:26 - that is equal to my value of the y that
185:30 - i'm going to divide by the self dot hate
185:33 - self hate is the height of the window
185:35 - okay so when the y equals the maximum
185:38 - value which is the height of the window
185:41 - it's going to be a value of 1 here
185:44 - 7.8 divided by 7.8 equal one and this
185:48 - value of one i want to multiply it by
185:51 - the self not perspective point y so when
185:55 - i reach the maximum of the window in
185:57 - fact the return coordinates in fact the
185:59 - return y of the transform function will
186:02 - be here and if i go above then i'm going
186:05 - to be stuck here okay so if the
186:08 - transform y
186:10 - is greater than the self perspective
186:13 - point y is going to be equal to that we
186:17 - cannot go after the perspective point
186:20 - okay so i can begin to return this new
186:23 - coordinate here in my transform
186:25 - perspective make sure that you use this
186:28 - transform perspective function and if i
186:30 - try it you can see that this time i'm
186:33 - stuck here okay it's no more going to
186:36 - the top of the window but to 75 percent
186:39 - perfect also i'm going always to return
186:42 - inch coordinates in the 2d and in the
186:45 - transform perspective so we are sure we
186:48 - use
186:49 - non-floating coordinates ok it will not
186:52 - change much in my case perfect now let's
186:55 - compute for the x position what do we
186:58 - want to do for the x position for
187:01 - example if we take this line you can see
187:03 - that the more we go to the right to
187:06 - reach this x point of the perspective
187:09 - point and how can we compute that what
187:11 - we will look is at this
187:14 - x coordinate of the perspective point
187:16 - and we will compute the difference here
187:19 - it's what we will call the d x is going
187:22 - to be 100 percent
187:24 - when the diff
187:26 - y because the d5 is going to be
187:28 - perspective y minus the current y
187:31 - coordinate is going to be equal to the
187:34 - maximum value which is perspective y so
187:37 - when we have 100 percent difference and
187:40 - the more we decrease the percentage of
187:43 - hate
187:44 - proportionally the more we are going to
187:46 - decrease the difference of the if x
187:50 - so let's write the diff x and diff y
187:53 - d f
187:54 - x
187:55 - it's going to be the value of my x for
187:59 - example this value here that is greater
188:02 - than the x of the perspective points so
188:04 - it's going to be x minus first minus f
188:08 - dot perspective point x
188:10 - but if
188:12 - y is going to be
188:13 - perspective point y because this is a
188:17 - greater value here
188:19 - and our y is smaller minus
188:22 - r
188:23 - t l y not the y because the y can go to
188:27 - the window height
188:28 - but we want to have the proportion until
188:31 - the perspective point y so that's why we
188:34 - need to use the tier y
188:37 - what is the proportion
188:39 - why proportional will be equal to 1
188:43 - when
188:44 - we are at the bottom when d f y
188:46 - equal to perspective point y okay and
188:50 - it's going to be equal to zero when
188:53 - if y equals zero so it's a proportion we
188:56 - want to compute for
188:58 - a y here on this axis how much
189:01 - proportion we have here is going to be
189:02 - 100 percent here is going to be 50
189:05 - percent
189:06 - and here it's going to be 75 percent and
189:09 - 0
189:10 - the more we go to the perspective point
189:12 - we must we decrease this proportion
189:15 - because we are going to multiply the
189:17 - different x by this proportion here on
189:20 - the y axis so this proportion y
189:23 - is equal to my coordinate try that i'm
189:27 - going to divide is going to be my diff y
189:31 - that i'm going to divide by perspective
189:34 - point y and you can see that
189:38 - when my div y is zero my proportion is
189:40 - zero but when my diff y is maximum is
189:44 - going to have this value perspective
189:45 - point y so it's going to have a value of
189:48 - 1 okay so my proportion is correct here
189:52 - how can i compute my transformation x
189:55 - we are going to start from perspective
189:58 - point
189:58 - x and we are going to add the difference
190:01 - but the difference is going to be a
190:03 - factor of this y proportion okay so
190:07 - let's try that okay so we agree that we
190:10 - start from here perspective point x and
190:13 - we will add the difference which is the
190:15 - compute here of the difference multiply
190:18 - by the factor of the heights that means
190:20 - if i'm at 50 percent my difference here
190:24 - is only 50 which makes a point here okay
190:28 - so let's try that and you can see that
190:30 - this time
190:31 - it's working well so i can resize my
190:34 - window in every dimensions it's working
190:37 - well i can also change the number of
190:41 - lines and the spacing between the line
190:43 - if i put for example 25 percent between
190:46 - the different lines i have something
190:48 - like this which is more interesting and
190:51 - i can also add more lines for example 15
190:54 - okay so we have something good and what
190:57 - is interesting of course is that we can
191:00 - change
191:01 - the transformation here i just can
191:04 - uncomment transform 2d and command the
191:07 - perspective so i go back to my 2d
191:09 - display and it's going to be useful when
191:11 - we want to do the development because
191:13 - all the logic of the program will be in
191:15 - 2d and at the very last moment we will
191:17 - transform the coordinates to the
191:20 - perspective so it's going to be far more
191:22 - easy to work like that i just go back to
191:25 - perspective and back to the previous
191:27 - numbers here 7 and 10 percent and that's
191:31 - it for the perspective transform and we
191:34 - move on to the next video
191:40 - we have our perspective line okay i want
191:43 - to do a slight modification i don't want
191:46 - to have a line here i want to have a way
191:49 - here i want this to be centered because
191:52 - for our game we will have our spaceship
191:55 - on the way and not on the line so what
191:57 - you will do for this exercise is that
192:00 - you will shift the x coordinates so that
192:03 - not a line is centered but away
192:06 - first i suggest you that you go back to
192:09 - the 2d transforms so you go to transform
192:12 - and you uncomment the 2d and you go back
192:15 - here and for example you are going to
192:16 - reduce the number of lines of course
192:18 - it's going to work not with a nod number
192:21 - of lines this time but with an even
192:23 - number of lines so i'm going to put four
192:26 - you can see that this line is centered
192:29 - but i wanted to shift everything to the
192:32 - right of the half of the spacing i let
192:35 - you do the exercise and i will show you
192:37 - after the solution
192:39 - [Music]
192:45 - so i want this part this way to be
192:48 - centered and not this line so we need to
192:50 - shift by the half of a line spacing to
192:54 - the right how can we do that of course
192:57 - it's not going to be in the transform
193:00 - all the logic of the game is going to be
193:02 - transformed at the end just for the
193:04 - display but we need to modify the
193:06 - coordinates of the lines that we draw in
193:09 - the update vertical lines and for
193:11 - example we can turn the central line x
193:14 - coordinate that's possible to add
193:16 - a half of the spacing here okay or we
193:19 - can just change the offset and to say
193:22 - that the offset is a plus 0.5 plus a
193:26 - half of line because the offset is going
193:28 - to be multiplied by the spacing so in
193:30 - case of starting at minus 2 because in
193:33 - our case we have 4 here it's going to be
193:36 - minus 1.5
193:38 - then minus 0 5 then plus 0 5 and plus
193:43 - 1.5 okay so you may say yes but i say
193:46 - that we don't use a floating point in
193:48 - the coordinates yes but it's okay here
193:50 - because we are going to multiply by the
193:52 - spacing and after that we are going to
193:55 - remove the floating points so at that
193:57 - stage it's going to be multiplied first
193:59 - by a spacing that is going to be a quite
194:02 - high number here okay so let's try that
194:06 - this time we have a way centered in the
194:08 - window okay it's perfect
194:10 - and we can go back to the perspective
194:12 - mode and this time you can see that we
194:15 - are centered with a way in the middle
194:18 - it's perfect let's add more lines for
194:21 - example 10 lines and a little bit more
194:24 - of spacing and this time you can
194:26 - understand that it's far better
194:28 - concerning our game so we will put
194:29 - spaceship here and we will be able to
194:32 - move it horizontally i will show you
194:34 - that later that's all for the exercise
194:36 - and we continue on the project
194:42 - we have our vertical lines we can
194:44 - display them in perspective it's nice
194:46 - and now we want to display also the
194:48 - horizontal lines i'm going to go back to
194:51 - the 2d display so i will comment that
194:55 - okay and i will reduce the number of
194:57 - lines just so that it's more clear what
195:00 - we are doing here i'm going to go back
195:02 - to four lines and 10 percent spacing so
195:05 - we have this
195:07 - and what we want to do is to display
195:10 - some horizontal lines we are going to
195:12 - have the same logic as the vertical
195:14 - lines we are going to have a number of
195:16 - lines we will start from y equal zero
195:20 - from here and then we will define the
195:22 - spacing for the horizontal lines we will
195:24 - not start from zero to the reads but we
195:26 - will need to compute the x min and x max
195:29 - which will depend on the vertical lines
195:32 - and we will display our different lines
195:35 - with the same spacing so let's do that
195:39 - i'm going to copy paste what we did for
195:41 - the vertical lines and it's going to be
195:43 - h horizontal number of lines i'm going
195:46 - to keep this value 4
195:48 - and horizontal lines spacing for example
195:52 - 0.2 20
195:53 - percentage in screen
195:55 - height and i'm going to call that
195:58 - horizontal lines
196:00 - okay and i will have the same logic init
196:02 - function and update function so i'm just
196:05 - going to copy paste that and it's going
196:08 - to be horizontal and the same here for
196:11 - the update function oh re horizontal
196:14 - okay and i will go to take this init and
196:17 - update function and i just copy paste in
196:20 - this code that we will of course
196:22 - change so first the name of the function
196:25 - horizontal
196:26 - okay and the same for the update
196:29 - function in the init it's going to be
196:31 - quite straightforward because it's going
196:33 - to be almost the same thing we are going
196:35 - to loop on the number of horizontal
196:38 - lines and we are going to add in our
196:41 - whole re horizontal lines list the
196:45 - different lines okay that's done for the
196:47 - init function for the update function
196:50 - it's going to be different so i'm going
196:52 - just to remove all this code update
196:54 - horizontal lines i want to loop on the
196:57 - number of horizontal line and what is
197:00 - going to be the line
197:02 - y
197:02 - and the line y is going to start from
197:05 - zero
197:06 - plus something from the index that we
197:09 - are going to multiply what do we need to
197:11 - multiply by
197:13 - the spacing
197:15 - h line spacing which is twenty percent
197:19 - self dot h spacing twenty percent of
197:22 - the screen height
197:24 - yes it's called horizontal but it's for
197:27 - the horizontal line but this spacing is
197:30 - vertical so it depends so it's twenty
197:33 - percent of the height of the window it
197:36 - depends on the height okay i don't need
197:38 - to put a zero plus here i can just
197:41 - delete it so we will need to compute the
197:43 - x min and the x max for now we just put
197:47 - some values in it x mean zero x max
197:51 - equal self dot reads okay we will change
197:54 - that later so here i can put my
197:56 - coordinates we start from the point one
197:59 - is at x min and the line y for both of
198:03 - them and the point two is at x max okay
198:07 - i don't have any offset in this case
198:10 - and that's it
198:12 - so let's try it and see what it gives i
198:15 - don't have my vertical lines anymore and
198:18 - this is maybe because i have replaced
198:20 - some code here update vertical lines
198:23 - update horizontal lines and that's
198:25 - correct it's because i forgot to change
198:28 - here the points of my horizontal
198:32 - lines okay so i was raising my vertical
198:34 - lines make sure you don't have v here
198:37 - and that it's horizontal lines in the
198:39 - horizontal function okay let's try it
198:41 - one more time and now you can see we
198:43 - have our horizontal lines and it's
198:45 - adapting to the height of the window
198:48 - that's good what we need to do now is to
198:50 - compute the x min and the x max because
198:53 - i don't want this part here i want to
198:55 - stop here and this depends on the
198:57 - vertical lines if you look at the code
199:00 - for the update vertical lines you will
199:02 - see that we first compute this offset
199:05 - so we know the position of the x of the
199:08 - line totally on the left so we can reuse
199:11 - that and we are going to keep this
199:14 - computation for the minimum x and the
199:17 - line totally on the left and we will put
199:19 - a minus for the opposite direction of
199:22 - the offset for the maximum for the x max
199:25 - so i'm going to copy these three lines
199:28 - and to paste them here of course in the
199:32 - same logic here i can define
199:34 - a spacing
199:36 - y variable that is going to be my
199:39 - horizontal line spacing multiplied by
199:41 - the height of the window okay i can do
199:44 - that it's the same thing but to go back
199:46 - to the computation of x-men and x-max
199:49 - i'm going to use the central line x
199:53 - plus the offset which is negative it's
199:56 - good because we go to the left it's
199:58 - x-min multiply by the spacing and for
200:01 - the max i'm going to do the same
200:04 - but i'm going to go to the other
200:06 - direction for the maximum offset you may
200:08 - think it's strange because x minions on
200:10 - the left so why i add something we add
200:12 - something because the offset is negative
200:15 - you can change the logic if you want we
200:17 - can change the size and put plus and
200:19 - minus here and to invert the signs here
200:22 - if you want it's going to be the same
200:25 - thing let's start it and see what it
200:27 - gives so now you can see we have the
200:29 - good result we display the vertical
200:31 - lines and it's stopping at the right
200:33 - position it's correct let's try it in
200:36 - the perspective mode i go back to my
200:38 - transformation function and i'm going to
200:41 - and comment the perspective mode we have
200:43 - something like that which is quite good
200:46 - but you may see that it's a bit strange
200:48 - what we have here so let's add some more
200:51 - lines to better see what is the problem
200:53 - that we have put 15 okay let's try that
200:58 - so it's quite nice but you may think why
201:00 - this style is smaller this one seems to
201:03 - be longer yes so we will need to solve
201:07 - that that's one of the problems that we
201:08 - have it's because we have a constant
201:11 - spacing between the different lines here
201:13 - you may think that this spacing is
201:15 - higher than this one but in fact that's
201:17 - not the case if you put your finger on
201:19 - the screen you can see that the spacing
201:22 - is constant here for example i can show
201:24 - you i can measure the height between
201:26 - these two points is going to be
201:29 - 60
201:30 - 58 pixels and if i go between these two
201:34 - points it's also 58 pixels but to have a
201:38 - good perspective impression we will need
201:40 - to change that we will need to update
201:42 - our transform function so we don't have
201:44 - that phenomenon and we will need to
201:46 - change the spacing between the different
201:48 - tiles so that the spacing is not
201:50 - constant i'm going to explain you that
201:52 - in the next videos
201:57 - we have defined a spacing between the
201:59 - different lines and the number of
202:02 - horizontal lines and then we use our
202:04 - transformation function to display it in
202:07 - the perspective space but we have this
202:09 - phenomenon that is we think that the
202:11 - tiles at the front are shorter than the
202:14 - deeper tiles and this is because we kept
202:17 - a constant
202:18 - spacing between the horizontal lines we
202:22 - are going to change that to get another
202:24 - result to get something like this on the
202:26 - right so we have a kind of attraction to
202:29 - the perspective the more we go closer to
202:32 - it the more we get attracted so the
202:34 - spacing is bigger on the front and it
202:36 - gets smaller and smaller between the
202:38 - different slides we previously spoke
202:41 - about the factor y factor y is a
202:44 - proportional vertical factor that means
202:47 - 100 percent
202:48 - of distance from the perspective point
202:51 - and the more we go closer to the
202:54 - perspective point the more the factor
202:56 - will decrease eighty percent from it
202:58 - sixty percent from it forty percent how
203:01 - can we get something like we have on the
203:03 - right the idea is to get a factor why
203:06 - that is smaller than expected that means
203:08 - it's going to go faster to the
203:11 - perspective point so you may say yeah we
203:14 - can multiply it by something that is
203:17 - less than one for example 0.5 so instead
203:20 - of 0.8 we get 0.4 but if we do that and
203:24 - if we multiply 1 by 0.5 we are going to
203:27 - start at 0.5 so it's only going to make
203:30 - the display smaller it's not going to
203:33 - make something like this we want to keep
203:35 - factor 1 for the maximum but we want it
203:38 - to decrease faster than linearly so i
203:41 - had the idea to make the factor multiply
203:44 - so i had the idea to multiply the factor
203:47 - by himself for example instead of having
203:50 - 0.8 here for this line we are going to
203:53 - have 0.8 multiply by 0.8 and it's going
203:58 - to be smaller than 0.8 and this is
204:01 - called the factor squared factor y
204:04 - multiplied by itself so if i take this
204:07 - first value i get 0 64. so it's going to
204:11 - be displayed here 0 6 multiplied by 0 6
204:14 - equals 0 36 we are going to go faster to
204:18 - the perspective point it's a kind of
204:21 - attraction behavior for this formula
204:23 - this formula makes a kind of attraction
204:25 - behavior and we are going to apply this
204:27 - to our transformation function this is a
204:30 - compute number 2. how does it works so
204:34 - we agree that we have perspective y here
204:37 - this is the maximum value that we can
204:39 - have for the
204:40 - vertical spacing and it's going to be a
204:42 - factor of one i put in yellow the
204:45 - modifications in the transform function
204:47 - i just rename this variable because we
204:48 - will use it as an intermediate value so
204:51 - before i call it the try but now it's a
204:54 - linear y lean y because that's the
204:57 - linear proportion of the y value from
205:00 - the screen head to the perspective y
205:03 - okay so we just use it as an
205:05 - intermediate value but most important is
205:08 - this new line the factor y is multiplied
205:11 - by himself then i get my trx which is
205:14 - the same thing as before perspective x
205:17 - plus the difference multiplied by the
205:20 - factor but the compute is going to be
205:23 - different because the factor has changed
205:25 - okay and most important this new line to
205:28 - compute the try we start from
205:31 - perspective y and we are going to
205:33 - subtract because this is the biggest
205:35 - value we are going to subtract the
205:38 - factor y
205:39 - multiplied by the perspective y that
205:42 - means if we are here with a factor of 1
205:45 - we are going to start from perspective y
205:47 - minus
205:48 - 1 multiplied by perspective y which is
205:51 - 0. concerning this second line i will
205:54 - start from here perspective y
205:57 - multiply by the factor of 0 64 on this
206:01 - total height so it's going to be here
206:04 - and then we will return these new
206:06 - coordinates let's implement that in the
206:08 - code right now i go back to the project
206:11 - and we previously saw that we had this
206:14 - strange behavior of smaller tiles here
206:17 - okay let's change the transform
206:19 - perspective function it's not going to
206:21 - change anything for the 2d display of
206:23 - course because we are inside our
206:25 - perspective function so i'm just going
206:28 - to rename this value a linear y okay and
206:32 - i'm going to use it here we have a
206:34 - factor y in fact where is our factor y
206:37 - it's what we called previously
206:39 - proportion y so i'm going just to rename
206:42 - this also factor y okay
206:45 - now the new line is going to be factor y
206:48 - equal factor y multiply by factor y okay
206:52 - and i'm also going to compute my t r y
206:55 - which is
206:57 - self perspective y minus is a factor
207:02 - multiplied by the maximum height
207:05 - so yes of course here you may say we can
207:08 - put
207:09 - 1 minus
207:11 - factor and the total multiplied by this
207:14 - is going to be the same thing okay
207:17 - anyway i want to keep like i put on the
207:19 - slide but it's going to give the same
207:21 - results and let's try that
207:24 - so you can see that this time we have
207:27 - this perspective effect we don't have
207:29 - this previous problem but also i want to
207:32 - show you something we can accentuate the
207:35 - attraction because here what we did is
207:37 - to multiply two times factor y but we
207:40 - can also multiply it three times or four
207:42 - times if we want or we can also use a
207:44 - power function paul power function takes
207:48 - the value and we give how many times we
207:51 - want to multiply it for example by two
207:53 - times is what we did before that means
207:56 - this is the same as doing factor y
207:59 - multiplied by factor y two times and we
208:01 - can put for example four times to
208:03 - accentuate the attraction let's try this
208:07 - so the problem is that the spacing is
208:08 - very high between the horizontal lines
208:10 - so we can just change it a bit
208:12 - horizontal line spacing let's put zero
208:15 - one for example okay so we have
208:18 - something like that and we can also have
208:20 - more spacing on the vertical lines for
208:23 - example.25
208:25 - okay so we have something like this we
208:27 - have a real effect of perspective which
208:30 - is really nice we are going to keep it
208:32 - like this and we continue on the project
208:38 - now we want to have this animation of
208:40 - moving forward into the game how are we
208:44 - going to do that we are going to change
208:46 - the display of all horizontal lines and
208:48 - we are going to shift them downstairs
208:51 - that means we are going to subtract on
208:53 - the y coordinate when we begin to move
208:57 - forward then we shift everything and
208:59 - down you can see that this yellow line
209:02 - goes here and that this blue line goes
209:04 - out of the display
209:06 - and then we continue like this but you
209:08 - can see that if we continue and continue
209:11 - to shift the line after a moment we will
209:13 - have no more lines to display because
209:16 - all the lines will be out of the display
209:18 - that's why we will need to implement a
209:20 - kind of looping mechanism that means
209:23 - when we shift more than the spacing than
209:26 - the vertical spacing between two lines
209:29 - then we go back to the original position
209:32 - to make this shifting possible we are
209:33 - going to implement a new variable that
209:36 - we are going to call current offset y
209:38 - and we are going to apply this offset to
209:41 - all the y coordinates of the horizontal
209:43 - lines we will also need to have an
209:45 - update function that will be called
209:47 - regularly 60 times per second this is
209:51 - our number of frames 60 frames per
209:53 - second and every time our update
209:56 - function is called we will update the
209:58 - offset to increment it and to have the
210:01 - condition also of the loop of course we
210:03 - can also control the speed of the
210:05 - movement for example we can increment
210:07 - per one at every update or increment per
210:09 - two or three so we are going also to
210:11 - define a speed variable are you ready so
210:14 - let's do that right now i go back to the
210:16 - code and i'm going to create my update
210:19 - function so i go totally at the bottom
210:22 - here in the main widget and i will
210:24 - create a new function
210:25 - update function it's a function that we
210:27 - will call in a clock schedule so it's
210:30 - going to give us a delta time variable
210:33 - i'm just going to add a print update
210:36 - okay now we need to call this function
210:38 - regularly so i'm going to go to the init
210:41 - function here and after the init of my
210:43 - lines i'm going to add a clock not
210:46 - schedule
210:47 - interval and i'm going to call my update
210:50 - function with the time interval if i put
210:53 - 1 it's going to be called one time per
210:55 - second if i put 10 it's going to be
210:58 - called every 10 seconds so i want it to
211:01 - be called 60 times per second so i need
211:05 - to
211:06 - divide the time of one second by 60. you
211:10 - have to import cloud from tv properties
211:13 - take care of not taking this one but
211:17 - from qv properties okay if i start my
211:19 - program i can see that the update
211:22 - function is called regularly okay so now
211:25 - what are we going to do in the update
211:27 - function we are going to call the update
211:30 - vertical and horizontal lines in case we
211:32 - want to change the coordinates of these
211:34 - lines we need to update the coordinates
211:36 - so we will do that in the update
211:38 - functions we don't need to do this in
211:39 - the on size anymore take care of putting
211:42 - the pass here because we don't have code
211:45 - anymore why we can do that because even
211:47 - if you resize the window the update
211:49 - function is going to be called anyway so
211:51 - it's going to be refreshed here okay i'm
211:54 - going to comment on the print let's just
211:57 - start the program and see that we did
211:59 - not broke anything okay the behavior is
212:02 - working fine i can still resize my
212:04 - window and it's working so now i want to
212:07 - shift my horizontal lines in the update
212:10 - horizontal line which is called
212:12 - regularly now i'm going to add something
212:14 - so i go to this function update
212:17 - horizontal lines and you see that we
212:20 - compute the coordinates and we have the
212:22 - line y
212:23 - and in the line y i want to add or
212:26 - subtract something because we will go
212:28 - downstairs so i'm going to subtract my
212:31 - self current
212:33 - offset
212:34 - y we need to define this variable and
212:37 - the value of this variable is going to
212:39 - evolve in the update function so each
212:41 - time we will call this update horizontal
212:43 - lines it's going to have different
212:45 - coordinates so let's initialize our
212:47 - current offset y i'm going to give the
212:49 - value
212:50 - of zero here and in the update function
212:54 - i'm going to increment by one this value
212:58 - i need to use self here okay so if i
213:01 - start my program what's happening you
213:04 - can see that it's working okay i go back
213:06 - to the 2d mode okay you can see that we
213:10 - have our lines going down
213:12 - it's nice but what's happening if i put
213:15 - just a little bit lines here for example
213:17 - only five lines you can see that it's
213:20 - going down and after a moment i have
213:22 - nothing more to display because all the
213:25 - lines are out of the screen so i need to
213:28 - do something like a kind of looping but
213:31 - also the speed is quite low so i want to
213:33 - change the speed let's put eight lines
213:35 - for example so we have something like
213:38 - that okay and i want to increase the
213:40 - speed how can i do that instead of
213:43 - adding plus one i'm going to add
213:45 - something else here and it's going to be
213:47 - a value that i will define as the
213:50 - speed and let's say we give four okay
213:53 - then i will increment by
213:56 - self dot speed and it's going to be
213:59 - faster okay and if i go back to the
214:02 - perspective mode you can see that it's
214:05 - also working well and after a moment i
214:08 - have nothing more to display okay
214:10 - so i go back to the 2d mode and we have
214:13 - to implement this looping mechanism i
214:16 - want to go back in the past when my
214:18 - offset is greater or equal
214:21 - than the vertical spacing between two
214:23 - horizontal lines if i go to my update
214:25 - horizontal lines you can see that the
214:27 - spacing is here
214:29 - between two lines okay so i'm going to
214:32 - get this value and if i'm just
214:36 - using an offset
214:37 - with
214:38 - this value of the spacing i can just go
214:40 - back upstairs to that value and it's
214:42 - going to make the illusion of the loop
214:45 - for example i can test
214:47 - if
214:48 - offset is greater or equal than the
214:50 - spacing it's working because the spacing
214:53 - between two lines is always the same and
214:55 - you may think yes but in perspective
214:58 - it's no more the case yes of course but
215:00 - the perspective function is called at
215:02 - the end so we don't care about that we
215:04 - always do all the compute in two
215:06 - dimension and the perspective will be
215:09 - called at the end so for us the spacing
215:11 - between two horizontal line is always
215:14 - constant and always this value if the
215:16 - offset is greater than the spacing what
215:19 - do we do we go back
215:21 - and it's like we shift from one level
215:24 - okay and now if i start my program again
215:28 - you can see that when i go down it's
215:30 - putting a line again here so from this
215:32 - point of view it's always looping and if
215:35 - i add more lines and going above the top
215:37 - of the screen i will not see this
215:39 - phenomenon so here if i do for example
215:43 - 15 lines you see that i have the
215:46 - illusion that it's always looping and
215:48 - it's going to work also in perspective
215:50 - mode of course okay let's try it okay so
215:53 - it's working well my screen recording is
215:56 - in 15 frames per second so it may not
215:59 - look very freed on the video but on my
216:01 - computer it looks very freed at 60
216:04 - frames per second the behavior is good
216:06 - that's all for this video and let's
216:08 - continue on the project
216:13 - our program is working fine okay we can
216:16 - move forward in the level that's nice
216:18 - but we need to change something very
216:21 - important
216:22 - look in the update function we have this
216:24 - parameter the dt
216:27 - delta time and i did not explain you why
216:30 - we have this in delta time here and how
216:32 - we can use it in fact you remember we
216:35 - said that we want to call this function
216:38 - update 60 times per second in fact it's
216:42 - 1 16
216:44 - in fact it's going to be called one time
216:46 - every 1 16 of second but it's not going
216:50 - to be as precise as this because maybe
216:53 - your computer or your smartphone will be
216:56 - busy to do something else and when he
216:58 - will trigger the call to the update
217:00 - function maybe it's not going to be as
217:02 - precise as this timing and so you may go
217:05 - from 60 frames per second to a little
217:08 - bit less than that 50 or 30 frames on
217:12 - old machines for example but the problem
217:14 - is that in that case because the update
217:16 - function will be called less regularly
217:19 - the game especially in the speed
217:22 - at which we go forward in the level is
217:25 - going to go slower and so the game is
217:28 - going to be far more easy to play on
217:30 - older machines and we don't want that we
217:33 - want the game to have the same speed in
217:36 - the level even if we don't have the
217:37 - exact number of frames per second how
217:40 - are we going to manage that we are going
217:42 - to use this delta time which is a
217:44 - precise value and of course if finally
217:47 - we spend twice the time that we expected
217:50 - between two calls of the update function
217:53 - we should go forward twice in the time
217:56 - so this is proportional to the delta
217:59 - time let's print the delta time value
218:01 - and see what we have delta time and
218:04 - let's
218:05 - print str of delta time and also i want
218:09 - to print
218:10 - the
218:11 - expected value which is 1 divided by 60
218:15 - str 1.0 divided by 60.0 okay let's run
218:21 - this and see what we have so i expand
218:23 - the window here okay i stop the program
218:26 - and i go upstairs and i see i get
218:29 - different value of delta time the
218:31 - reference value is 0.016
218:34 - okay so here we can see that it's almost
218:38 - the right value that's correct
218:40 - so the delta time is a time difference
218:42 - with the previous call of the update
218:45 - function so you can see that it's quite
218:47 - irregular sometimes it's a little bit
218:50 - more sometimes a little bit less
218:52 - sometimes more sometimes less
218:55 - so it's not totally perfect
218:58 - but anyway we want to take this factor
219:00 - into account you see that if i multiply
219:03 - by 60 especially 1 divided by 60 if i
219:06 - multiply it by 60 it's going to be 1
219:08 - it's going to be around 1 for the delta
219:10 - time so we can try that
219:12 - delta time multiplied by 60 and i'm
219:15 - going to remove the remaining here okay
219:18 - let's try again okay i stopped my
219:20 - program and you see that we have
219:23 - something around 1 sometime a bit above
219:26 - and as i told you for example if you
219:28 - have 1.5 it's like we spend 50 percent
219:31 - more time
219:33 - than expected so instead of using this
219:37 - value saved speed we are going to
219:39 - multiply it by the time factor and for
219:42 - us
219:43 - the time factor is delta time multiplied
219:47 - by 60. okay i'm going to comment on the
219:50 - print you agree that normally time
219:52 - factor should be always 1. but in
219:54 - reality if we spend more time between
219:57 - two update calls for example twice the
219:59 - time let's say 30 frames per second the
220:02 - time factor is going to be equal to two
220:04 - so we are going to add twice
220:07 - the value of the speed because we are
220:09 - twice slower on the machine so at the
220:12 - end per unit of time that means after
220:15 - one second we will make the same
220:17 - progression whatever the frame per
220:19 - second so we need to take this time
220:21 - factor into account even if i think on
220:24 - your machine you will not really see the
220:26 - difference here in fact it's far better
220:28 - to manage the time to have a consistent
220:30 - game on every devices that's perfect and
220:33 - let's move on to the next lecture
220:41 - for this exercise i'm going to ask you
220:43 - to add movement on the horizontal
220:45 - position
220:46 - that means in the same way of using an
220:49 - offset y you will need to use also an
220:52 - offset x to get something that looks
220:55 - like this so we are going to move on the
220:58 - left or on the right up to you okay you
221:00 - will add this movement on the update
221:03 - function and you will need to create
221:06 - these variables
221:07 - speed
221:08 - x for example 3 and
221:11 - current offset
221:13 - x equals zero you need to use this
221:16 - variable in the code of course you will
221:18 - not use it in the transform function but
221:20 - you need to apply it to the vertical
221:22 - lines and also to the horizontal lines
221:26 - you will not need to have a loop
221:28 - mechanism because when we will go at the
221:30 - end of the track it's okay we'll go out
221:33 - of the track that's not a problem we do
221:36 - this exercise because later we will
221:38 - manage the press of the keys so that we
221:40 - can move on the left or on the right i
221:43 - let you do this exercise on your side
221:45 - and after that i will show you the
221:47 - solution
221:48 - [Music]
221:54 - so i'm going to define these two
221:56 - variables speed x and current offset x
222:00 - of course if i go to my update function
222:03 - i need to upgrade my offset so i'm going
222:06 - to do self dot current offset x plus
222:09 - equal to
222:11 - the same thing here except that it's
222:13 - going to be speed x
222:15 - so we have our vertical speed which is
222:18 - speed and or horizontal speed okay now
222:22 - where should i use that i should use it
222:25 - to offset the vertical lines so if i go
222:28 - to update vertical lines you can see
222:31 - that we compute the line x
222:33 - so i can also use that to make a plus
222:36 - and put a current offset x in here is
222:39 - not mandatory because we already do that
222:42 - in the transform function okay so let's
222:45 - try that
222:46 - it's almost good you can see that we
222:48 - have this good behavior
222:50 - but we also have a problem for the
222:52 - horizontal lines you see that they are
222:54 - not aligned with the vertical lines
222:56 - anymore and that's because we need to
222:58 - use also this offset in the compute of
223:02 - the x min and x max in the update
223:05 - horizontal lines function so i'm going
223:07 - also to add this offset here and this
223:10 - time you can see that if i start my
223:12 - program again i have the right behavior
223:14 - so you also see that every time i need
223:17 - to resize my window so it's a little bit
223:20 - thing i want to add here you are going
223:22 - to type on google tv window size and you
223:25 - will find this first link on stack
223:27 - overflow and you will see that you have
223:30 - this config set graphic width and hate
223:33 - so you will copy these three lines from
223:36 - kvconfig import config you copy these
223:38 - three lines
223:40 - and you put it at the very top of the
223:42 - file here before any other kv import and
223:46 - that's important so graphic weeds we are
223:48 - going to put 900 and 400 for the height
223:53 - okay let's try that now i start my
223:55 - project this is working and the window
223:57 - size is good that's all for the exercise
224:00 - and let's move on to the next video
224:07 - for this exercise we are going to
224:09 - control the horizontal movement by
224:11 - pressing on the screen on the left or on
224:14 - the right of course it's going to be
224:16 - useful for mobile's phone but for the
224:18 - computer we want to manage the keyboard
224:20 - key press on the left and on the right
224:22 - but we will do that later for now it's
224:25 - just going to be pressing on the screen
224:27 - just before doing the exercise i'm going
224:29 - to prepare some code first i'm going to
224:31 - comment this line of code so we start
224:34 - without any movement when you will press
224:37 - on the left you will go on the left of
224:39 - the land and on the right you will go on
224:42 - the right so i'm going to write some
224:44 - functions here to manage the touch on
224:46 - the screen
224:47 - def on touch down
224:50 - then i will not do anything
224:52 - yet def on
224:54 - touch
224:55 - up
224:56 - when i release the finger okay
224:59 - so here on touchdown you need to know if
225:02 - you pressed on the left or on the right
225:04 - of the screen and what you can do you
225:07 - can look at touch.x
225:09 - which is less than
225:12 - self width divided by two for example if
225:16 - that's the case we go on the left so i'm
225:18 - just going to add a print
225:20 - okay with an arrow and else
225:23 - we go on the right if i do a touch up
225:26 - i'm also going to add a trace up okay
225:30 - let's try that you can see that if i
225:32 - press on the left
225:34 - i see left then up when i release my
225:37 - button and on the right i can see right
225:40 - then up when i release so of course
225:43 - when you keep the button pressed on the
225:45 - left
225:46 - you will move to the left direction
225:49 - until you release your button and on the
225:51 - right it's going to be the same and when
225:53 - you release your button you have no
225:55 - movement on the horizontal axis
225:58 - that means this line that we commented
226:02 - will sometimes add zero or sometime add
226:05 - a value or sometime decrease the value
226:08 - depending on what you are doing here and
226:10 - for that you will need to use an
226:13 - intermediate variable that is going to
226:16 - be the current
226:18 - speed x and it's going to be in zero as
226:21 - a default and on the update function
226:24 - you are going to increment this
226:27 - current speed x self okay
226:30 - so i let you do the exercise right now
226:32 - you need to give the right value for
226:34 - this variable depending on what you are
226:36 - doing here with a touch do the exercise
226:39 - and then i will show you the solution
226:41 - [Music]
226:47 - so we need to give a value to the
226:50 - current speed x
226:51 - of course if we release the button we
226:54 - don't want any movement anymore so it's
226:56 - going to be a speed of zero but if we
226:59 - press on the left we are going to give a
227:02 - value here it's going to be the self
227:05 - speed x
227:06 - and on the opposite direction is going
227:09 - to be
227:10 - minus self speed x
227:12 - let's see if it is working correctly
227:15 - okay i press on the left i go to the
227:18 - left in reality the land is moving to
227:21 - the right so i have this impression that
227:24 - i'm moving to the left because the
227:25 - spaceship will be always at the middle
227:28 - of the window okay if i press on the
227:30 - right i go on the right and if i release
227:32 - i have no movement but it's a little bit
227:35 - slow so what we can do is to improve
227:38 - this speed x by 20 by 12 for example
227:42 - okay so i have a speed on the left and
227:46 - on the right this is correct but on the
227:48 - computer we also want to manage the
227:50 - keyboard the left key and the right key
227:53 - so we are going to do that in the next
227:55 - video that's all for this exercise and
227:57 - let's continue
228:03 - let's add the keyboard management in our
228:05 - project on computer we want to be able
228:08 - to press the left and the right key on
228:10 - the keyboard to move in the game in the
228:13 - same way when we press on the screen if
228:15 - you go to google and you type tv
228:17 - keyboard key you will find the first
228:20 - link here how do you check for keyboard
228:22 - events in kivy and then you will see an
228:24 - example that we can use so you can see
228:27 - we get keyboard here with a window
228:29 - request keyboard and then we bind the on
228:32 - key drawn that is in this function and
228:34 - we also give a function when the
228:36 - keyboard is closed because on mobile the
228:38 - keyboard can be open and close
228:41 - but we will add something after so that
228:43 - we only use the keyboard configuration
228:46 - on computer and not on mobile this is
228:49 - because on mobile the keyboard will be
228:51 - displayed on the screen and that's
228:52 - something we don't want so i will show
228:55 - you how to do that first we are going to
228:57 - copy these lines of codes okay and we
229:00 - are going to adapt this so i copy this
229:03 - and i go back to my init function here
229:06 - i'm going to paste at the end of my init
229:08 - function okay but we are going to move
229:11 - the clock schedule at the end of the
229:13 - function i want the clock schedule to
229:15 - start the update when everything has
229:17 - been initialized the window we need to
229:20 - import a window from tv core window okay
229:25 - i don't like this underscore before the
229:28 - function name so i'm just going to
229:29 - change that
229:31 - here and here we need to register the on
229:33 - key up also so i'm going to duplicate
229:36 - this line and put on key up because we
229:39 - need to know when we release the key on
229:41 - keyboard up prototype of the function
229:44 - i'm going to copy paste the on keyboard
229:46 - on is almost the same as the on keyboard
229:49 - on except we don't have the last two
229:51 - parameters on keyboard up
229:54 - and i'm going to put pass inside i don't
229:57 - want to manage this key but i want the
230:01 - left key and the
230:03 - right key and inside we will need to
230:05 - write our own code of course that we
230:08 - will replace in a moment so i'm just
230:10 - going to remove
230:12 - these
230:13 - okay and i have to return true to say
230:15 - okay i have manage and this keypress we
230:18 - are going to do the same on the on
230:19 - keyboard app okay also something i need
230:22 - to add is the unbind of the on key up
230:26 - here okay perfect
230:28 - so what do i want to do in this function
230:32 - the same thing that we do when we press
230:35 - on the screen so i'm just going to cut
230:37 - these to function and to paste it close
230:40 - to the on touchdown and untouch up on
230:44 - keyboard down when we press left we are
230:46 - going to do this current speed equal
230:50 - speed x
230:51 - and also i will comment the prints here
230:54 - we don't use them anymore okay so i'm
230:56 - going to do the same thing here and i
230:59 - will do
231:00 - the opposite here with a minus like we
231:03 - do here and on the on touch up i'm going
231:06 - to put the speed to zero in the on
231:10 - keyboard up okay
231:12 - so let's try it i'm going to start my
231:14 - program first thing i can see is that my
231:17 - window size is not the one we have
231:19 - specified so it's something that has
231:22 - been broken here we are going to have a
231:23 - look at that but if i press on the left
231:27 - arrow key on my keyboard on the left
231:29 - it's working and on the right it's
231:31 - working too and i can still click on the
231:34 - window and it's also still working
231:37 - that's fine so why do i have a problem
231:40 - with the windowwidth if i go totally up
231:43 - in my file i can see that this line has
231:46 - been inserted automatically when i
231:48 - wanted to import the window and i told
231:50 - you we need to do this before any other
231:53 - kv import so i need to move this line
231:56 - just below
231:58 - and i will keep this if i restart you
232:01 - can see that this time my window size is
232:03 - correct okay one more thing i want to
232:06 - add is i don't want to configure the
232:09 - keyboard in the case we are on mobile so
232:12 - we need to define a function
232:14 - that will say if we are on desktop
232:16 - computer or if we are on mobile
232:19 - dev is
232:20 - desktop and for this we are going to use
232:23 - something that is called platform so we
232:26 - can do if platform and you can see that
232:30 - i can import this from kv dot platform
232:34 - okay of course we will check that this
232:37 - is going to be after the kv config here
232:41 - okay perfect platform will contain the
232:44 - name of the platform we are running the
232:46 - program that means it can be linux
232:48 - windows mac os ios android so we will
232:52 - check if platform
232:54 - in
232:55 - linux or
232:57 - windows
232:58 - or
232:59 - mac os
233:01 - x
233:02 - then we will return true we will say yes
233:05 - it's a desktop computer and in every
233:08 - other case it's going to be false
233:11 - okay so i'm going to call this function
233:14 - here if self dot sorry i need to add a
233:18 - tab okay is desktop and in that case we
233:21 - are going to configure the keyboard we
233:24 - don't want to do that in the case of
233:26 - mobile okay and also i will add a
233:28 - breakpoint here so we will analyze what
233:30 - do we have in the platform here i will
233:32 - press on the debugging mode okay so if i
233:35 - put my mouse over here i have the mac os
233:38 - x value so if i step it's going to be
233:42 - true in my case okay this is correct i
233:45 - just restart my program to see if it is
233:47 - still working correctly and i can press
233:50 - my left and right arrow on the keyboard
233:52 - it's working well and also
233:54 - when i touch the screen everything is
233:57 - working perfectly that's all for this
233:59 - video
234:02 - [Music]
234:09 - galaxy project version number two at the
234:13 - end of this version two the project will
234:15 - look like this so you can see we have a
234:18 - pass generation i can also move and when
234:21 - we detect that the ship is out of the
234:24 - pass you can see this in game over but
234:26 - the game is still continuing also the
234:29 - speed is very slow here but it's on
234:31 - purpose for this version 2 we will first
234:34 - organize and structure our code we will
234:37 - be able to display the path first we
234:39 - will display one tile then we will be
234:42 - able to display multiple tiles and after
234:44 - that we will generate our pass with the
234:47 - land generation algorithm we will also
234:50 - display the spaceship and check if the
234:53 - spaceship is still on the track if
234:56 - that's not the case we will display game
234:58 - over but the game will still continue at
235:00 - that stage are you ready to start let's
235:03 - do it
235:07 - before starting let's clean and organize
235:10 - our code a little bit because on the
235:13 - main widget we have a lot of functions
235:16 - and a lot of code so i want to separate
235:18 - a bit some functions in some other
235:21 - python files and for example we can move
235:24 - all these transform functions
235:26 - to another file so you are going to
235:28 - create a new python file and you will
235:31 - call it
235:32 - transforms okay now when i go back here
235:35 - i will take transform 2d and transform
235:38 - perspective and i will cut that and i
235:42 - will paste it directly in the
235:44 - transform.py and now you can see that if
235:46 - you try to start the program it's not
235:49 - working anymore because it says main
235:51 - widget has no attribute transform so we
235:54 - need to tell the main widget that it has
235:57 - to include these functions
236:00 - so we need to go inside as a main widget
236:02 - so you can go anywhere inside the class
236:04 - but not outside and we'll just write the
236:07 - code here at the first line inside the
236:09 - main widget and we will write from
236:12 - transforms that's the name of the file
236:15 - import and the name of the functions
236:18 - transform2d and transform perspective
236:21 - okay now i can start my program it's
236:23 - working fine what else can we move i
236:27 - want to move all the user interactions
236:29 - all the keyboards and touch functions
236:32 - so if i go a little bit downstairs i
236:34 - have on keyboard down on keyboard app on
236:37 - touchdown and touch up i want to move
236:40 - these functions on a new file that we
236:43 - will call user
236:45 - actions and i will paste that inside the
236:48 - same way i have to import this from the
236:51 - main widget so from user actions import
236:57 - keyboard up on keyboard down and onto
237:00 - chop on touchdown i can also move
237:04 - the keyboard close function okay and i
237:07 - will paste it at the beginning of the
237:09 - file i also need to import it
237:12 - so i go back here and i will add import
237:16 - keyboard closed perfect let's start
237:18 - again to see if it is still working okay
237:21 - perfect and before we finish on this
237:24 - video i want to clean a bit my code so i
237:26 - will remove some functions that we don't
237:28 - use for example on parent
237:31 - on size and on perspective point x and y
237:35 - we don't use them so let's delete all
237:37 - these functions now that our code is
237:39 - more organized and clean we can continue
237:42 - on the project
237:46 - we want to be able to display the tiles
237:48 - in our games so how are we going to do
237:50 - that here i display the vertical lines
237:53 - for example four vertical lines and four
237:56 - horizontal lines let's say that if i
237:59 - want to display this style we will say
238:01 - that this one is a tile zero and the one
238:05 - just on the right will be the tile one
238:07 - zero it's going to be a coordinate
238:09 - system with x and y for the tiles so
238:12 - this one will be zero one this one minus
238:14 - one 0 2 and this is what i call the tile
238:18 - index t i x t i y and it will be useful
238:22 - to have a function and get tile
238:24 - coordinates that takes this index and
238:27 - that will return the actual x and y
238:30 - coordinates of this lower and left point
238:34 - because if we have this lower left point
238:36 - we can also have the upper right point
238:39 - if we give the plus one x index and plus
238:41 - one y index here so from these two
238:45 - coordinates it will be easy to draw the
238:47 - tile on the screen to implement this
238:49 - function we need to get the coordinates
238:51 - of the different lines and for that we
238:53 - are going to assign some index to the
238:55 - different lines for example on this line
238:58 - we will say that it is a line zero this
239:00 - one the line minus one this one the plus
239:03 - one and the plus two of course if we
239:05 - have more lines we will have the minus
239:06 - two minus three plus four etc concerning
239:09 - the vertical lines it's going to be the
239:11 - same line index 0 line index 1 index 2
239:15 - ok first we will get the x coordinates
239:18 - of the different vertical lines and we
239:20 - will write this function
239:22 - get line x from index for example if i
239:26 - give index 0 i'm going to get the x
239:29 - coordinate of this line if i give index
239:32 - 2 i will get the x coordinate of this
239:35 - line and after we will also implement
239:37 - the get line y from index for the
239:40 - horizontal lines and this will makes it
239:42 - far more easy to implement get tile
239:45 - coordinates and also we will use this
239:47 - new function to rework the code inside
239:49 - update vertical lines and update
239:51 - horizontal lines so how can we implement
239:54 - this new function here you can see we
239:56 - have the central line x and we have the
239:59 - spacing between two different lines the
240:02 - spacing is the v line's spacing
240:05 - multiplied by the self width if i have
240:08 - an index of 0 you can see that i'm not
240:10 - aligned in the center of the screen but
240:13 - i'm halfway on the left
240:15 - so we will compute an offset that will
240:17 - be index
240:18 - minus 0.5 so the line x will be the
240:23 - central line x
240:25 - plus the offset multiplied by the
240:28 - spacing if i have the index of 0 i have
240:30 - the offset of minus 0.5 so i start from
240:34 - my central line x
240:36 - and then i go left 0.5 times of the
240:39 - spacing and i arrive here if my index is
240:42 - minus 1 i will have the offset of minus
240:45 - 1.5 and that if i start from the central
240:48 - line x i am at minus 1.5 the spacing
240:53 - okay and we also need to add the current
240:55 - offset x which is a global offset when
240:57 - we press on the left and right keys
241:00 - let's go back to the project and let's
241:02 - implement this new function i'm going to
241:04 - write this new function just above this
241:06 - update vertical lines
241:08 - def
241:09 - get a line x
241:11 - from index
241:13 - and so we have this index parameter i
241:16 - will take what we did here okay we have
241:19 - our central line x that we compute from
241:21 - the center of the screen finally i think
241:24 - it would be better to take the
241:26 - perspective x because perspective x is
241:28 - also at the middle of the screen but it
241:31 - will allow us maybe later to change the
241:34 - position of the perspective point so it
241:36 - will be better to write here self dot
241:39 - perspective point x
241:41 - okay we have the spacing and for the
241:44 - offset it's going to be different it's
241:46 - going to be index
241:48 - minus 0.5
241:50 - when the index is 0 i want to be halfway
241:53 - on the left
241:54 - so my line x
241:57 - will be central line x plus the offset
242:01 - multiplied by the spacing and also plus
242:04 - the current of set x so we have our
242:07 - offset when we want to go to the left
242:09 - and the right when we press the keys
242:11 - okay and i will return this line x of
242:14 - course i can rework my function here so
242:17 - i can delete all of that and i will get
242:20 - the line x from the get line x from
242:23 - index here okay so i don't need to use
242:25 - offset anymore here so what is the index
242:28 - i have to pass here you can see that we
242:30 - have to rework this and the minimum
242:33 - index
242:34 - should not be zero else we will see
242:36 - lines only on the right but it should
242:38 - start halfway of the number of lines for
242:41 - example
242:42 - if we have four lines we'll have minus
242:45 - one
242:46 - zero
242:47 - one and two so we can compute this start
242:51 - index
242:52 - which will be here okay
242:55 - start index is going to be the half of
242:59 - number of lines i'm just going to put
243:01 - int okay so if i have 4 i'm going to get
243:05 - 2 for the start index so i will put
243:08 - minus two but in that case you see that
243:11 - we don't start at minus two we start at
243:14 - minus one so i need to put plus one for
243:17 - my start index and what is my end index
243:21 - and the index is going to be the start
243:23 - index plus the number of lines so for
243:27 - example here the start index is minus
243:29 - one the number of lines is four minus
243:32 - one equals three so i will get three for
243:35 - this value here but that's correct
243:37 - because in the range we will never reach
243:39 - 3 for the i we will reach 2. so we will
243:43 - have this it's going to work if we give
243:46 - from index
243:47 - i let's try it ok so it is still working
243:51 - fine i just want to simplify a bit the
243:54 - program here i want to go to the
243:55 - transform and enable the 2d transform
243:59 - so we can really see what we are doing
244:01 - here and also we are going to disable
244:04 - any movement so i'm going to comment the
244:06 - offset y
244:08 - and the offset x in the update function
244:11 - just for the time that we are working on
244:13 - the coordinates for the tiles and also i
244:15 - will put less vertical lines i will put
244:18 - four vertical lines and zero dot one for
244:20 - the spacing okay so now i have something
244:24 - like this it's correct and also i can
244:28 - update the update horizontal lines
244:31 - because we copy paste what we did
244:33 - previously on the update vertical lines
244:36 - so we can delete that
244:38 - and we are going to compute x min and x
244:40 - max from the new function self dot
244:44 - get line x from index okay the start
244:48 - index we have it
244:49 - it's this value the line totally on the
244:52 - left okay so i can put start index here
244:55 - and for the end index and index
244:59 - it's going to be the start index plus
245:02 - number of lines so for example i have
245:06 - number of lines four start index is
245:08 - minus one so it's going to be three but
245:11 - the maximum index i want here is two so
245:15 - i need to put minus one in this case so
245:18 - i have my end index here okay i can
245:21 - restart my program and everything is
245:24 - working fine
245:30 - for this exercise you are going to
245:32 - implement this function get line y from
245:35 - index so if i give index 0 is going to
245:38 - return 0 if i give index 1 is going to
245:42 - be spacing y and then index 2 is going
245:45 - to be the y value for this line etc okay
245:49 - and so on don't forget to use the
245:52 - current offset y and also you will need
245:54 - to rework the update horizontal line
245:57 - function to use your new function i let
246:00 - you practice on your side and then i
246:02 - will show you the solution
246:04 - [Music]
246:10 - just below this function i'm going to
246:12 - implement the new function get line y
246:15 - from index okay if i go to update
246:18 - horizontal lines you can see that we
246:21 - have here's spacing y and that we have
246:24 - already this computation of the line y
246:27 - so i'm just going to copy
246:29 - these lines and that i'm going to paste
246:32 - that okay spacing y equal
246:34 - h line spacing set the distance between
246:38 - two horizontal lines that's correct
246:40 - multiply by the height okay i'm going to
246:42 - delete four
246:44 - and then the line y is the index
246:48 - multiplied by the spacing
246:50 - okay if we have index zero we will start
246:53 - from 0 minus the current of set y you
246:56 - remember that this is offset that we use
246:59 - so that we have this illusion that we go
247:01 - forward into the game and then i return
247:04 - a line y now i'm going to use this
247:07 - function from the
247:08 - update horizontal lines i will replace
247:11 - this line of code with self dot get line
247:14 - wind and i will pass the index i don't
247:17 - need the spacing y anymore so i can just
247:20 - clean it from the code let's start the
247:22 - program to see if it is working well
247:25 - everything is correct and that's all for
247:26 - the exercise
247:31 - let's display our first tile how can we
247:35 - do that for example if you want to
247:37 - display the tile 0 we need to first
247:39 - implement this and get tile coordinates
247:42 - function so we can get lower left
247:45 - coordinate x min and y min if we pass to
247:49 - this function
247:50 - plus one and plus one you are going to
247:53 - get the x max and y max so it's going to
247:56 - be easy to be able to display this tile
248:00 - concerning the canvas are we going to
248:02 - display this with a rectangle not really
248:06 - because in the perspective mode we will
248:08 - need to display something like this so
248:10 - we will need to give four coordinates
248:12 - and for that we are going to use the
248:14 - quad it's not possible with a rectangle
248:17 - because the rectangle use a width and a
248:19 - height only here with the quad we will
248:22 - give 4 points how does the quad works so
248:26 - we have our x mean y min that we get
248:29 - from the get type coordinates zero in
248:31 - that case
248:32 - if you want to get the x max y max we
248:35 - get it from
248:36 - plus one and plus one okay you can see
248:39 - that we have also two other points x min
248:43 - and y max and x max and y min we need to
248:47 - give the four points to the quad so the
248:50 - quad will get a points list in which
248:53 - orders we need to give the points that's
248:55 - up to us but we need to rotate in a way
248:57 - or in the other way but we cannot go
248:59 - from that point to this one or something
249:03 - like this we need to take a point and
249:04 - rotate so in our case this will be point
249:08 - number one number two number three and
249:11 - number four so at first we will put x
249:14 - min y min then this one and then x max y
249:18 - min of course we will need to call our
249:19 - transform function at the last moment
249:22 - that means we will need to use
249:24 - intermediate variable like x1 and y1 so
249:28 - x1 y1 will be the transformation of
249:31 - x-min and y-min and so on let's
249:34 - implement this and display our first
249:36 - style so first thing i'm going to do is
249:39 - to implement this get tile coordinates
249:41 - function so if i go just below that i'm
249:44 - going to write def
249:47 - get
249:48 - tile
249:48 - coordinate
249:50 - and it will take the tile index x and
249:53 - tile index y i need to return the x and
249:56 - y of the tile so x is going to be
249:59 - finally
250:00 - the get line x from the index t i x
250:05 - and the y it's going to be the get line
250:08 - y from the tile index y and we need to
250:12 - return this okay for this first example
250:15 - we are going to display only one tile
250:18 - but of course in the game we will need
250:20 - to display multiple tiles so let's just
250:22 - define only one tile for now so i'm just
250:25 - going to write tile equal none and we
250:28 - are going to give the coordinates here t
250:30 - i x equals zero of course we will change
250:33 - that later so we can check if the
250:35 - different positions are working well
250:36 - okay then i will do the same principle
250:39 - as a vertical and horizontal line i will
250:41 - have a init function
250:43 - so self init tiles and i will have an
250:46 - update function for initials i'm going
250:48 - to copy paste the init vertical lines
250:51 - function
250:52 - so it's going to be init
250:54 - tiles and i don't need to do that okay i
250:57 - will display it as white it's correct
251:00 - and here i will do my self
251:03 - tile it's going to be the quad so i just
251:05 - write quad and i need to import it okay
251:09 - then i will do my update function so i
251:11 - go a little bit downstairs update tiles
251:14 - of course i will need to call this
251:16 - function in the update function so i
251:18 - will just do it right now self not
251:21 - update tiles okay i go back here i want
251:25 - first to get my x min
251:28 - and y min how can i get this i can call
251:32 - self dot and get tile coordinates and i
251:34 - can give the coordinates of my tile t i
251:38 - x and t i y
251:40 - ok also i can get the x max and y max
251:45 - by putting a plus 1 and plus one in the
251:49 - index now i want to give the points to
251:51 - my tile to my quad so it's going to be
251:55 - points equal and i'm going to give the
251:58 - list of points i'm going to have here x1
252:01 - y1 then x2 y2 then x3 y3 and 4 okay so i
252:08 - need to compute all of this
252:10 - x1 y1 it's self dot transform and you
252:15 - remember that
252:16 - the first point i'm going to put a
252:18 - command here is going to be the one at
252:21 - the bottom left and then the second one
252:24 - is at top left and then we get third
252:27 - point and the fourth point so this one
252:30 - it's x min and y min i'm going to copy
252:33 - paste this line for three times so we
252:36 - have
252:37 - two two three
252:40 - and four okay
252:42 - point number two x min y max
252:46 - it's upstairs point number three x max
252:50 - y max and point number four x
252:54 - max y min okay so i will give all of
252:57 - this
252:58 - let's try it and see what it gives okay
253:01 - my tile at 0 is displayed here that's
253:04 - correct let's change the coordinates so
253:07 - if i go here i will give x equal 1 for
253:11 - example okay we can see it's correct
253:13 - it's displayed at one and zero and i'm
253:16 - going to display at one two okay one two
253:20 - it's correct let's go in the perspective
253:23 - mode to see if it is still good okay i
253:26 - can see it's still one two everything is
253:29 - correct and we move on to the next
253:31 - lecture
253:35 - we are able to display our tile
253:37 - correctly now if i enable the animation
253:40 - again is it still working correctly so
253:42 - let's try it i go back to my update
253:45 - function and here i will enable the y
253:49 - current of set y and here i will
253:51 - uncomment this line with a current
253:53 - offset y okay we can keep this line
253:56 - commented for now but here we will go
253:59 - forward into the level and also i will
254:02 - change a bit the speed here i want to
254:04 - have a speed only of one so we can see
254:07 - what's really happening let's try it you
254:10 - can see that my tile is going back after
254:13 - a moment every time we loop every time
254:15 - the line is coming here at the bottom of
254:18 - the screen we have this loop effect and
254:21 - this is because you remember in the
254:23 - update function we have this looping
254:26 - mechanism so the horizontal lines of the
254:28 - level are always displayed when we reach
254:31 - the spacing between two lines we go back
254:34 - to the initial position
254:36 - and in fact the position of my tile is
254:38 - always correct it's always 0 x and 2 for
254:42 - the y so how can we make the tile going
254:45 - forward every time we loop we need to
254:48 - remember that we loop so we will have a
254:50 - loop index that we will call the current
254:53 - y loop and it's going to be plus equal
254:56 - one i'm going to declare this variable
254:59 - so here current
255:02 - while loop equal zero okay so you can
255:05 - see that if i add a print
255:07 - loop and i can display
255:09 - the value of this loop and i can put it
255:12 - on the screen okay so you see every time
255:15 - we loop the tile go back in the screen
255:18 - so what we are going to do is every time
255:20 - we loop we are going to change the index
255:23 - of the tile on the y axis initially our
255:26 - tile is on index 2 for the y but then
255:28 - when we will first look it's going to go
255:30 - to index 1 then index 0 and so on
255:34 - so we need to subtract the index of our
255:37 - tile from the current loop we already
255:40 - have a function that returns the
255:41 - coordinates of the tile it's get tile
255:44 - coordinates so i can look at this
255:47 - variable inside this function and we
255:49 - will use it to offset
255:51 - the index of the tile t i y equal t i y
255:56 - minus the current y loop so the first
256:00 - time we will loop with the loop we'll
256:01 - have a value of one then we offset the
256:04 - index so here we do the index minus one
256:08 - so the tile will not jump again but
256:10 - we'll go to the next line let's start
256:12 - the program again and you can see that
256:15 - this time every time i loop my tile is
256:17 - evolving in the level and it's working
256:20 - perfectly
256:26 - let's write some code to display
256:28 - multiple tiles how can we do that we
256:31 - need to change this part of code because
256:34 - here we manage only one tile and we put
256:36 - some coordinates here so we are going to
256:38 - change that and to have a collection of
256:41 - tiles with a list here so tiles is going
256:44 - to be the list of the quads and we also
256:47 - need to have the number of tiles for
256:50 - example four tiles and also we need to
256:52 - remove these coordinates because the
256:55 - different types will have different
256:56 - coordinates so we need to have a list of
256:59 - coordinates tiles coordinates
257:02 - okay we will write a new function to
257:05 - generate the tile coordinates but at
257:07 - first it's going to be a very simple
257:09 - generation i want to generate the tiles
257:12 - in the middle of the screen so the first
257:14 - tile will be at 0
257:16 - then the second one will be at
257:19 - 0 1
257:20 - 0 2
257:22 - and so on it's going to be a straight
257:24 - line in the middle and of course later
257:27 - we will change that generation function
257:29 - so that we can generate the length of
257:31 - the game okay so let's write the code
257:33 - first i need to change my init function
257:35 - because i need to loop on n beta tiles
257:38 - to initialize the different quads so i
257:40 - go to inside any tiles i need to loop
257:43 - here so for
257:45 - i in range
257:47 - zero to self ambitize i will create quad
257:51 - but i will add it in my tiles list tiles
257:55 - append quad okay and i need to be inside
257:58 - the loop of course we will need to
258:00 - rework the update function because we
258:02 - need to use the tile coordinates but
258:04 - first let's generate the tile
258:06 - coordinates i will write a new function
258:08 - f g narrate
258:10 - tiles coordinates i will use the same
258:14 - loop on the number of tiles and inside
258:17 - the tile coordinates i will append some
258:19 - coordinates inside this list i need to
258:22 - append some tuples so inside the
258:24 - parenthesis i'm going to add more
258:26 - parenthesis for this first generation
258:29 - it's going to be very simple
258:31 - all the x index is 0 and the y index is
258:35 - going to be i
258:36 - so the first tile will be at 0 then the
258:40 - next one at 0 1 0 2 ok to build this
258:44 - straight line of course i need to call
258:47 - this function at the beginning so i'm
258:49 - going to copy that and to paste it here
258:53 - self dot generate tiles coordinates okay
258:56 - just below initials next thing we need
258:59 - to do is to adapt the update function
259:02 - update tiles previously we use this
259:04 - variable t i x and t i y now we need to
259:09 - loop and update the points for every
259:11 - tile so again i need to loop on i
259:14 - in range 0 to nb tiles okay and i will
259:19 - put everything
259:20 - inside the loop my coordinates are in
259:23 - self
259:24 - tie coordinates of i and you remember
259:27 - what we did we put a tuple for each tile
259:31 - that means for each coordinate the index
259:34 - 0 is x and the index 1 is a y index t i
259:39 - x t i y so in my tuple here i will call
259:42 - it
259:43 - tile coordinate local variable and here
259:47 - i will get the x from the index 0 of my
259:51 - tuple and the y from the index 1 of my
259:55 - tuple and to get the x max and y max i
259:58 - will do the same
259:59 - plus one okay now i need to update the
260:03 - tile so it's going to be in the tiles i
260:06 - can do the same as here i will say that
260:09 - my tile is a self dot tiles at index
260:14 - okay so tile dot points equal all the
260:18 - points let's try it okay so you can see
260:21 - i have four tiles displayed in a
260:24 - straight line and of course i can change
260:27 - the number of tiles for example i can
260:29 - put eight
260:30 - and it's going to generate more tiles
260:33 - everything is working correctly and
260:35 - let's move on to the next video
260:41 - let's improve this function to generate
260:43 - infinite tiles so now we are just going
260:45 - to keep the straight line but you can
260:48 - see that after a moment the straight
260:50 - line disappears because we have a
260:52 - limited number of ties so what we are
260:55 - going to do is that all the tiles that
260:57 - are no more visible that are out of the
260:59 - screen we are going to clean them from
261:02 - the tile coordinates and that will make
261:04 - new space to add new coordinates that we
261:07 - will add after so we will make a
261:09 - mechanism to generate new tiles on the
261:12 - fly for example here if i reduce the
261:15 - number of tiles to 4 and when we will
261:17 - implement this solution
261:19 - you will see that new tiles will appear
261:22 - after each loop so we will generate this
261:25 - straight line an infinite way how can we
261:29 - do that you remember that in the update
261:31 - function we have this loop indicator so
261:34 - we will compare
261:36 - does the tie index y is less than this
261:40 - loop then we will clean it from the
261:42 - coordinates and of course we will need
261:43 - to call our generation function each
261:46 - time we change this variable now the
261:48 - generation function has been done in a
261:50 - way we should only call it at one time
261:53 - in the init but we will change it so we
261:56 - can call it in the update function every
261:58 - time we increment the loop so first
262:01 - thing we are going to do is to clean
262:04 - the coordinates
262:05 - that are out of the screen and the
262:10 - condition is at the tile index y so this
262:13 - is what we have in the tile coordinates
262:15 - at one and the condition is that the
262:17 - tile index y is going to be less than
262:20 - the self
262:21 - current y loop okay when i increment
262:24 - this variable it means that the tile
262:26 - that was at 0 is already out of the
262:28 - screen so at the next call of this
262:31 - function we are going to clean it let's
262:33 - implement that and then we will debug to
262:36 - see if it is working correctly so we are
262:38 - going to loop on this style coordinates
262:40 - and because we are going to delete some
262:42 - elements inside this list we are going
262:44 - to start from the end
262:46 - so i will write 4
262:48 - i in
262:49 - range what is the end is the
262:52 - number
262:53 - of elements in the list
262:55 - minus 1 else we will be out of the list
262:58 - okay and then i will put -1 here because
263:02 - i want to decrement i will start from
263:04 - the maximum value and go to the minimum
263:07 - value but for the minimum value we also
263:10 - want to go to the zero index and because
263:13 - in the range we will never reach the
263:15 - zero here we need to put a minus one so
263:18 - that we can reach zero okay the
263:21 - condition is that if
263:23 - tile coordinates at the index
263:26 - and we select the y
263:28 - it's less
263:29 - than the current y loop then it
263:32 - disappears it's out of the screen so in
263:35 - that case
263:36 - we will just delete it okay and because
263:39 - we will call this function again and
263:41 - again we should not start from zero
263:43 - every time and happen many coordinates
263:45 - we should look how much space we have
263:47 - left in the tile coordinate so we are
263:50 - going to start not from zero but from
263:53 - the number of elements okay of course
263:55 - the first time it will be zero so first
263:58 - time we will fill everything and i'm
264:00 - going to put a print full so we can have
264:03 - a breakpoint here and we will see what
264:05 - happens of course this function we need
264:07 - to call it again every time the current
264:09 - while loop change
264:10 - so it's going to be called one time at
264:13 - the beginning to generate the first four
264:16 - coordinates here this code will not do
264:18 - anything because at first current while
264:20 - loop is zero and of course we don't have
264:22 - any elements in tile coordinates
264:24 - so we are not going to do anything here
264:26 - but here the length of type coordinate
264:28 - is zero so we will happen all the
264:30 - elements at the first call then for the
264:33 - next call we will see what happens so i
264:35 - will need to call it in the update
264:38 - function just after we have updated the
264:41 - current while loop generate tile
264:43 - coordinates okay
264:45 - let's have a look
264:46 - and let's put a break point i will have
264:49 - foo one and four two through one
264:53 - just after the deletion of the elements
264:56 - and foot okay
264:58 - so let's have a look at what we have in
265:00 - self tile coordinates at the beginning
265:03 - we don't have anything okay if i press
265:05 - continue then we generate the elements
265:08 - and we have our four elements zero one
265:10 - zero two zero three it's correct and we
265:13 - have the current while loop which is
265:15 - zero then i will continue the execution
265:19 - we enter the function again we did our
265:22 - clean with current while loop equal to
265:24 - one
265:25 - so now what we have in the list is only
265:28 - three elements because we remove the
265:30 - zero in the y is less than current while
265:33 - loop which is now one okay but now
265:36 - what's happening we want to generate a
265:37 - new element because we have one space so
265:40 - we want to add a zero four and look what
265:44 - will happen here if i step
265:46 - i'm going to add one element because i
265:49 - have the space to add one element but
265:51 - i'm going to add the element at the
265:53 - index
265:54 - i which is not the right value which is
265:57 - 3. so here i will add again the same
266:00 - tile and what i need to do is to have
266:03 - another variable which is going to be
266:05 - the last y so we are going to look in
266:08 - the list what was the last element and
266:11 - we are going to take its y which is 3 in
266:14 - that case and add a plus one and then we
266:17 - will add the zero four and every time
266:20 - we'll take the last one and make a plus
266:22 - one so we can continue the generation
266:24 - this way so let's do that let's say that
266:28 - at first
266:29 - the last y is zero when we start and
266:32 - when we don't have any elements it's
266:34 - going to be zero that's what i'm going
266:37 - to use here instead of the index and of
266:40 - course i need to use last y plus equal
266:43 - one okay
266:44 - but that's not enough for the first time
266:46 - it's going to work and when we remove
266:48 - one element and in that case it means in
266:51 - that case we want to take the last
266:53 - element and takes its y value plus one
266:56 - so let's do that if we have some
266:58 - elements if the length of tile
267:00 - coordinates isn't greater than zero then
267:03 - we are going to take the last
267:05 - coordinates which is in python at the
267:09 - index minus one okay and last coordinate
267:13 - is going to have the x value
267:16 - and the y value and we are going to take
267:19 - its y value in the last y but of course
267:22 - we need to add a plus
267:25 - one so that we can generate
267:27 - next tile okay let's put again the
267:30 - breakpoints and try it okay again the
267:32 - first time we did not generate anything
267:35 - yet tile coordinate has nothing i press
267:39 - continue then i generate my first tiles
267:42 - okay let's continue
267:44 - this time i clean the first one and i
267:47 - got the last y which is four because i
267:50 - took the value three plus one so i get
267:53 - four and now if i step i'm going to add
267:57 - the zero four
267:59 - and then next time it will be the zero
268:02 - five zero six so i will have an infinite
268:04 - line
268:05 - let's continue the execution and you can
268:08 - see that the way is generated
268:10 - automatically and infinitely
268:15 - let's generate the land for our game and
268:17 - we want to generate a random path now we
268:20 - just generate a straight line but we
268:22 - want something that goes on the left or
268:24 - that goes on the right so how can we do
268:26 - that for example if i get a random
268:28 - number and if i say okay we always get a
268:31 - x of zero but if you want to go on the
268:34 - left we'll get x of minus one or plus
268:36 - one so let's try to get a random number
268:40 - that is between minus one and plus one
268:42 - if i type
268:43 - r like random equal
268:46 - random dot
268:48 - round int you need to import
268:51 - random this one we will put the minimum
268:53 - value of minus one and the maximum of
268:56 - plus one both value can be returned in
268:58 - the result it's included okay so i will
269:01 - put this value as a r and let's see what
269:04 - it gives you can see that i have a kind
269:06 - of land generation but we don't get
269:09 - really a pass so it's not going to work
269:11 - well with a ship because for example we
269:13 - cannot go from here to here it's going
269:16 - to be a game over and of course we need
269:18 - to share more than just a corner between
269:20 - some tiles so we will need to add some
269:22 - more tiles to make a real pass so for
269:24 - example what we can do is to choose what
269:27 - we want to do for example go forward
269:30 - it's going to be
269:31 - this first choice just to add the tile
269:33 - and that's what we are doing here if we
269:35 - go on the right it's going to be
269:37 - this style that we use to go for one the
269:40 - same one then a next style on the right
269:43 - and then a next style forward so it's
269:46 - going to be
269:47 - this pattern okay and then we can
269:49 - continue and if you want to go on the
269:52 - left we generate one tile forward as
269:54 - usual
269:55 - and then one tile on the left and then
269:58 - one tile forward so we will have also
270:01 - this pattern what we are going to do is
270:03 - to get a random number 0 1 or 2 and
270:07 - depending on the value of this random
270:09 - number we will generate a different
270:11 - pattern in the coordinates but you can
270:13 - see that for every pattern we still need
270:16 - to generate the next tile the one that
270:18 - goes forward it is common to all
270:20 - patterns in the case we go on the right
270:22 - we'll generate this style on the x and y
270:25 - then on the x plus one and y
270:29 - and then on the x plus one and y plus
270:31 - one okay and so on so let's do it let's
270:34 - say that when we go forward it will be
270:36 - zero when we go on the right it will be
270:38 - one and on the left it will be two so
270:40 - let's implement this solution i'm going
270:42 - to get a random number between
270:44 - 0 and
270:46 - 2. in all case i will need to generate
270:49 - and that one of course it's not r it's
270:52 - the last x we need to manage the last
270:55 - value of the x to continue the pass so
270:58 - in the same way that we have the last y
271:00 - i'm going to have my last x equal 0 and
271:03 - we will also get it from the last tile
271:06 - last x is going to be we don't need to
271:09 - use plus one for this one because we
271:11 - keep the same x and
271:13 - we put zero to get the x coordinate okay
271:16 - now i want to test if
271:19 - r equal one i will go on the right let's
271:23 - put a command here so let's say that 0
271:25 - is
271:26 - straight that 1 is on the right and that
271:31 - 2 is the left
271:33 - so if r equal 1 then we need to generate
271:37 - a next tile and that will be just on its
271:40 - right you remember the pattern it's like
271:43 - this we have the tile then we have this
271:45 - next style close to it and on top of
271:48 - that we will have the next one so i need
271:50 - to get the last x
271:52 - plus equal one and then i will need to
271:54 - generate the one that goes forward so i
271:57 - will need to have the last y plus equal
272:00 - one and
272:01 - generate my tile okay in the case of r
272:05 - equal to i do a last x is
272:08 - minus one and i will do the same thing
272:12 - so let's start let's try it okay i have
272:15 - a land generation it's quite slow and
272:17 - also what i want to say is that
272:20 - previously is that in this loop
272:22 - we look how much space we have in this
272:25 - tile coordinate for example if we
272:26 - already have three coordinates and we
272:29 - have a maximum number of tile of four we
272:31 - will have only one space but before we
272:34 - used to only open one tile in every loop
272:37 - now it can happen we add three tiles and
272:40 - that we go above the number of tiles but
272:43 - it's okay we will just have more
272:46 - coordinates here than the number of
272:48 - tiles but anyway when the old
272:50 - coordinates the one out of the screen
272:52 - will be cleaned we will make more space
272:55 - and because we check the length of tile
272:56 - coordinates yes it will happen that this
272:59 - value will be sometime greater than the
273:01 - number of tiles but it's okay because on
273:03 - the update function we just loop on the
273:06 - number of tiles and we will just ignore
273:08 - the extra coordinates so we can do that
273:11 - but we need to speed up a bit the game
273:14 - and
273:14 - let's say we put four and also because
273:17 - we need to display more tiles i'm going
273:19 - to put for example eight here okay so
273:22 - now we have really a land generation
273:24 - which is interesting because we have a
273:26 - pass of course we have this effect of
273:28 - generation so if you don't want this
273:31 - effect you add more tiles for example 16
273:34 - and this time you will not see the
273:35 - generation because it's going to be done
273:37 - very far so we have two issues because
273:40 - you can see that the land generation can
273:42 - go totally out of the track so we need
273:45 - to solve that and also when we just
273:48 - start the program it will be nice to
273:50 - have first a straight line and after
273:52 - begin the land generation else it's
273:54 - going to be too difficult for the player
273:57 - also i want to try by enabling again the
273:59 - keys so i'm going to uncomment
274:01 - this line to be able to go on the left
274:04 - and on the right to see if everything is
274:06 - working well okay i can go on the left
274:10 - and on the right we really have a
274:12 - beginning of game here that's all for
274:14 - this video and let's continue on the
274:16 - project
274:22 - you can see that the land generation can
274:25 - go out of the grid here and i'm going to
274:28 - ask you for this exercise to make it
274:30 - impossible but first let's change a bit
274:32 - the parameters because the grid with
274:34 - only four vertical lines is not
274:37 - interesting for the game so we'll put
274:39 - eight and we will put more spacing dot
274:42 - okay let's try it again so you can see
274:45 - that sometimes the land generation goes
274:48 - here out of the grid and i want you to
274:50 - solve this problem how to solve this you
274:53 - remember that in a function on the
274:56 - update
274:57 - horizontal lines we have this start
275:00 - index variable and end index it gives
275:04 - the index of the line totally on the
275:06 - left and the line totally on the right
275:08 - so you will take these two lines you
275:11 - will copy that in the land generation
275:13 - and you will compare to your last x
275:16 - if your last x is already less or equal
275:20 - to the start index then you will need to
275:22 - go on the right because you are already
275:24 - too much on the left and to go on the
275:26 - right you will force the value of the
275:28 - random value you will not take the
275:30 - random value but you will override it to
275:32 - go on the right
275:34 - and here you will do the same to go on
275:36 - the left i let you do the exercise and
275:38 - then i will show you the solution
275:40 - [Music]
275:47 - so first thing i will do is to take
275:49 - these two lines and go back to the land
275:52 - generation in the generate tiles
275:54 - coordinates when i get the random value
275:57 - here i will first have a look okay does
276:00 - my
276:01 - last x
276:03 - is less or equal than the start index
276:06 - that means i'm already totally on the
276:08 - left and in that case i will not take
276:11 - this random value
276:13 - but i will say
276:14 - go on the right so i will force the
276:16 - value of one on the other side if my
276:19 - last x
276:20 - is greater or equal
276:23 - than the end index that means i'm too
276:25 - much on the right i will go back on the
276:28 - left so i will give value two let's try
276:30 - it okay you can see that here i reached
276:33 - the maximum but i did not go over
276:36 - and you will see that even if you wait
276:38 - for a while you will never go out of the
276:40 - grid and that's all for this exercise
276:48 - we are going to improve our game by
276:50 - adding first a straight line and after a
276:54 - moment we will really begin the
276:56 - generation of the pass as it's going to
276:58 - be too difficult for the player if we
277:00 - start directly with a pattern so you
277:02 - will add this straight line of 10 tiles
277:06 - and after that you will begin the
277:07 - generation for this you are going to
277:09 - create a new function
277:11 - that i will call
277:13 - pre fill tiles coordinate
277:17 - okay you will implement this function
277:19 - and you will add 10 tiles in a straight
277:24 - line of course i need to call this
277:26 - function we will call this function only
277:28 - one time in the init and just before the
277:31 - generate tiles coordinate i let you do
277:34 - the exercise and then i will show you
277:36 - the solution
277:37 - [Music]
277:44 - so here i will loop
277:46 - for i in range
277:48 - 0 to 10 and i will add some coordinates
277:51 - in self tile coordinates at the
277:53 - beginning this list is empty so i will
277:56 - just append some coordinates inside i
277:59 - need to put my tuple so it's going to be
278:01 - parenthesis inside parentheses because
278:04 - it's a straight line in the center we
278:06 - use 0 for x and we use i for the range
278:10 - and we use i for the y so here i will
278:12 - get 0 1 until 0 9 straight line and
278:17 - after that we will get some code to
278:19 - generate tile coordinates at first it
278:22 - will not generate anything because we
278:24 - already have too much coordinates we are
278:27 - already over the number of tiles but
278:29 - after a moment it will remove some
278:31 - coordinates that are no more displayed
278:33 - on the screen and when we will have more
278:35 - space then we will begin to generate new
278:38 - tiles let's try it
278:40 - you can see i have my straight line and
278:42 - after moment i can begin to play
278:45 - everything is correct for this exercise
278:47 - and let's continue on the project
278:55 - let's display our spaceship on the
278:57 - screen the spaceship is going to be a
279:00 - triangle and we will place it at the
279:02 - bottom and center horizontally of the
279:05 - screen self.width divided by two we will
279:08 - define new variables to define the width
279:10 - of the ship in a percentage of the
279:12 - screen width also the height and also
279:16 - the base y so that it is not totally at
279:19 - the bottom of the screen concerning the
279:21 - canvas we are going to use the triangle
279:23 - instruction we will need three points
279:26 - point number one number two and number
279:28 - three for this exercise you are going to
279:31 - implement the coordinates of these three
279:34 - points for the ship and to add it in the
279:37 - new ship variable that will be our
279:40 - triangle instruction first we will write
279:42 - some code together and then you will do
279:45 - the exercise i'm going to define the new
279:47 - variables so i go at the top of the main
279:49 - widget and here i will create the new
279:52 - ship variable that is unknown and that
279:54 - will contain the triangle instructions
279:57 - so we will need to create an init ship
280:00 - function also i will define the ship
280:02 - width that is going to be 10 percent of
280:05 - the screen so i give you some values
280:07 - that i tested previously that makes the
280:10 - display nice but you can change them of
280:12 - course ship hate which is 0.035
280:17 - and chip base y equal
280:21 - 0.04 okay let's create the init ship
280:25 - function in it ship we want to use the
280:28 - canvas and this time we are not going to
280:31 - use a white color because the ship will
280:33 - be displayed in black so we will put
280:36 - zero and of course we want to create our
280:38 - triangle instruction and this is going
280:42 - to be saved in our ship variable and we
280:45 - need to import that okay now we need
280:47 - also to create the update function so
280:50 - you may say yes but the ship is not
280:52 - moving it's in the land which is moving
280:54 - yes but the ship is displayed at the
280:56 - middle of the screen because we can
280:58 - resize the window the middle of the
281:00 - screen may change so we need to update
281:02 - the coordinates of the ship dev update
281:05 - ship and this is what you will need to
281:08 - do for this exercise you will need to
281:10 - compute the coordinates and at the end
281:12 - you will do self.ship not points equal
281:17 - x1 y1 x2 y2 x3
281:22 - y3 and you need to give this different
281:25 - value x1 equal something from the slide
281:28 - you remember that point number one is
281:31 - lowest left and point number two is here
281:35 - at the center and then we have point
281:37 - number three don't forget to use the
281:40 - transform function because here we
281:43 - display on the screen so you will need
281:45 - to call this self transform to help you
281:48 - i'm going to give you some intermediate
281:49 - variable center x
281:52 - is a self dot width divided by two base
281:57 - y which is a y coordinate for the point
282:00 - one and point three it's going to be
282:02 - self dot
282:03 - ship base y multiplied by seven hate and
282:07 - again we don't give pixel dimensions for
282:10 - the ship because if the screen is bigger
282:12 - then the ship will look very small so we
282:15 - need to give percentage on the width and
282:17 - the height of the screen you can also
282:19 - have the ship widths which is going to
282:22 - be self dot
282:24 - sheep weeds multiply by self width but
282:28 - in fact what is going to be interesting
282:30 - for you here is to have the half of the
282:33 - weeds so we will write ship half
282:36 - width and we are going to divide this by
282:39 - two it's time for you to do this
282:41 - exercise and then i will show you the
282:43 - solution
282:44 - [Music]
282:50 - so we may write x1 equal center x
282:55 - minus the half width of the ship okay
282:59 - and then we will have y1 equal the base
283:02 - y but take care because we need to call
283:04 - the transform function so what we need
283:06 - to do here is to call it from here
283:09 - transform and so i'm going to give the x
283:12 - coordinate and the y coordinate okay so
283:16 - i can do the same for the other points
283:18 - i'm going to copy paste this x2 y2
283:22 - x3
283:24 - y3 for x2 it is at the center x and for
283:29 - the height we take base y and we need to
283:32 - compute the height of the ship so it's
283:34 - going to be ship height equal self ship
283:37 - height multiply by self hate so it's
283:41 - going to be base y plus ship height
283:44 - and for the last one it's going to be
283:46 - the same as the first one but we do a
283:48 - plus on the half width let's try it we
283:52 - see it's not displayed and why it is not
283:55 - displayed because we did not call our
283:57 - functions and let's call the init
283:59 - function should we call our init ship
284:02 - function before the initials or afters
284:05 - initialize in fact it is very important
284:08 - because if we call it before the ship is
284:11 - going to be displayed under the path
284:15 - because the order of instructions
284:16 - matters here so we need to display the
284:19 - ship after any tiles so the ship is
284:22 - above the pass self
284:25 - not in it ship
284:27 - also we need to call the update function
284:30 - update ship that we will call in the
284:33 - update function here just after update
284:36 - tiles
284:37 - self dot update ship okay let's try it
284:41 - you see that this time it's working we
284:43 - have the ship displayed of course we
284:45 - will need to adjust all the speed of the
284:48 - game because now it's not really
284:49 - playable but that's it for the exercise
284:52 - and let's continue
284:59 - maybe you saw that we have a big issue
285:02 - in our game look if i start it
285:05 - if i resize the window especially if the
285:08 - window is very small the game is faster
285:12 - and if i get the window bigger
285:14 - the game is very slow so why do we have
285:18 - this problem for this exercise i'm going
285:20 - to ask you to investigate and fix this
285:24 - issue i give you one hint it's not a
285:27 - problem of performance it's really a
285:29 - problem in our code so try to
285:32 - investigate and at least try to find
285:34 - where does it come from and then try to
285:37 - fix this problem so that the speed is
285:39 - constant
285:40 - when we resize the window practice on
285:42 - your side and then i will show you the
285:44 - solution
285:46 - [Music]
285:52 - so clearly why do we have a difference
285:54 - when we change the size of the window
285:56 - and what defines the speed of our game
285:59 - the speed of the game is defined by this
286:02 - variable speed which is the speed on the
286:05 - y axis
286:06 - and also the speed x on the x axis so
286:09 - for example here we have a speed of 4
286:12 - where do we use it we use it every time
286:15 - in the update function here it means
286:19 - that every time we display a frame of
286:21 - the game we increment our y by this
286:24 - constant value and also we multiply it
286:27 - by the time factor but this is okay so
286:30 - why is there a problem here because we
286:32 - have a constant value for the speed of 4
286:35 - in this case and 4 is a very big value
286:38 - for a small screen that means for a
286:41 - small screen we increment the y of 4
286:44 - every time but 4 is a very small value
286:48 - for a big screen so that's why we have a
286:51 - difference here it's because the speed
286:53 - does not depends on the
286:55 - size of the window and that's what we
286:57 - are going to change we need to make the
286:59 - speed depend on the size of the window
287:02 - because we see the speed on the y-axis
287:04 - we need to multiply it by the height of
287:07 - the window
287:08 - so let's do that we are going to define
287:10 - a new variable speed y equal to the
287:13 - speed multiplied by self hate and you
287:17 - may say yes but
287:19 - 4 multiplied by the height of the screen
287:22 - it's a big value yes of course we need
287:24 - to adjust the value of the speed
287:26 - variable and we will need to put
287:27 - something very small so let's take this
287:30 - and multiply by time factor okay we have
287:33 - to do the same for the x
287:36 - so speed x is going to be the current
287:39 - speed x and you remember that current
287:41 - speed x is in fact speed x but it
287:44 - depends sometime it's speed x or
287:46 - sometimes it's zero depending on if we
287:49 - press on a key or not so it's going to
287:51 - be current speed x multiplied by self
287:54 - width okay so now i go back upstairs and
287:59 - i'm going to put a very small value
288:02 - here and see what it gives okay so for
288:05 - the y it's going quite quickly and for
288:07 - the x it's a bit small also what we can
288:11 - do here is that we can multiply by 100
288:14 - so we will have 1 and 1. it's going to
288:16 - be more relevant value so what we can do
288:18 - in the formula downstairs is to divide
288:22 - by 100 speed y divided by 100 and speed
288:26 - x
288:27 - divided by 100 that means my
288:30 - value here has to be multiplied by 100
288:33 - so i have one dot zero i said that the
288:36 - speed on the y axis is a bit high so i'm
288:39 - going to put a smaller
288:40 - value dot 8 and for the x we need more
288:43 - speed 3 for example let's try it and
288:46 - let's expand a bit the width of the
288:48 - tiles dot 4. okay so we have something
288:52 - like this you can see i can clearly play
288:54 - in the game it's a bit difficult but i
288:56 - can't play it can i still play it if the
288:59 - window is smaller you can see that the
289:02 - speed is still the same and i can
289:04 - continue to play my game okay if i
289:07 - expand the window it's going to be also
289:10 - the same speed so we fixed our problem
289:13 - and that's all for the exercise
289:18 - let's detect that the ship is still on
289:21 - the track and if that's not the case it
289:24 - will be game over at first we will just
289:26 - print game over to know that the ship is
289:29 - still on the track we will say that at
289:31 - least one of the three points of the
289:34 - triangle is going to collide with one of
289:37 - the tiles i'm just going to put a very
289:40 - small speed for
289:42 - x and y
289:44 - and to show you what it gives in 2d so
289:47 - let's go back in two dimension and let's
289:49 - start the program okay we'll also reduce
289:52 - spacing here between the vertical lines
289:55 - okay we have something like this and
289:58 - what we want to do is to look at the
290:00 - three points of the triangle if at least
290:03 - one point is still on the track it's
290:06 - okay but if the three points are out of
290:09 - the track it's going to be a game over
290:11 - but now we are going to print in a loop
290:13 - game over and later we will implement a
290:16 - proper game over so do we need to test
290:19 - all the tile no we just need to test the
290:21 - tiles that are at the bottom of the
290:23 - screen because the spaceship is always
290:25 - at the bottom of the screen so we will
290:27 - just test the first two ranks here that
290:31 - are defined by the current y loop so
290:34 - we'll test current while loop plus one
290:37 - and of course if at least one of the
290:39 - tile makes a collision what i call a
290:42 - collision is when one of the three
290:43 - points is contained on a tile at least
290:47 - only one tile is needed to say it's okay
290:50 - we are still on the track so let's do
290:52 - that and first we will implement a
290:54 - function to test if the spaceship is
290:57 - colliding with
290:58 - one tile and after that we will make
291:00 - another function to make the test for
291:02 - different tiles okay so i will just
291:05 - write my function just under the update
291:08 - chip and it's going to be def check
291:12 - ship collision with tile and i will give
291:16 - the tile index x and tile index y you
291:19 - remember that we can get the tile
291:21 - coordinates from this function self
291:23 - get tile coordinates and i give the i x
291:27 - and t i y and i will get so
291:31 - x min and y min and if i want to get the
291:35 - max i can just add plus one so i'm going
291:38 - to do like this
291:40 - plus one and plus one okay so now i want
291:45 - to get the coordinates of the spaceship
291:47 - and we have three points so i need to
291:49 - get a new variable to store the
291:51 - different points of the ship and we are
291:53 - going to call that ship
291:55 - coordinates
291:57 - equal and it's going to be a list of
291:59 - three points that i will initialize here
292:02 - first point second point and third point
292:05 - ship coordinates where do we have the
292:07 - ship coordinates in the update function
292:10 - here so we are going to change the bit
292:12 - what we do here to store the different
292:15 - coordinates and of course we want to get
292:17 - the coordinates before the transform
292:20 - after the transform is just for the
292:22 - display but before the transform is for
292:25 - the logic and of course the coordinate
292:27 - we get for the tile are before the
292:28 - transform very important so here what we
292:31 - will do is save that ship coordinates
292:34 - for the first point
292:36 - we want this tuple containing this value
292:40 - for the y and because we don't want to
292:41 - do a copy paste of the same code i'm
292:44 - going to use this value
292:47 - here
292:48 - now if i copy that it's not going to
292:50 - work like that because the transform
292:52 - function needs two arguments x and y and
292:56 - this is seen as only one argument
292:59 - containing a tuple as one argument which
293:02 - is a tuple so we need to expand the
293:05 - tuple so i will put a star and this is
293:09 - going to put directly this first
293:11 - argument and this second argument okay
293:14 - let's do the same for the two other
293:17 - points
293:18 - one and two this one is center x and
293:21 - base y plus the height
293:24 - and the last one is the same but just a
293:26 - plus on the x okay so let's copy paste
293:30 - all of this
293:31 - and we do one and two so check that your
293:35 - index are correct here okay
293:38 - so now we have all three points in ship
293:40 - coordinates and i'm going to loop for
293:42 - these different points for i in range
293:46 - 0 to 3 i will loop on ship coordinates
293:49 - of index and i will get the point x and
293:53 - point y now i need to see
293:56 - does my point is inside this tile
294:00 - so i can check if it is contained and if
294:03 - that's the case i will return true and i
294:06 - will say okay we are colliding i just
294:08 - need at least one point that is
294:10 - colliding when it's the case i will just
294:12 - exit the function and return true but if
294:15 - we loop for all the points and we did
294:17 - not collide with anything we will return
294:19 - false so how can i test that my x must
294:22 - be contained between x min and x max so
294:25 - i'm going to write my point x must be
294:28 - greater than the x mean and it should be
294:31 - lower or equal than the x max also i can
294:35 - simplify this expression to write it
294:38 - like this my point x is between x min
294:41 - and x max included and
294:44 - we are going to have the same for the py
294:47 - is contained in y min and y max
294:51 - if that's the case we return true yes we
294:55 - are inside this style and we are not
294:57 - going to continue the loop even if
294:59 - that's the case for the first point
295:01 - the function returns true and we exit
295:03 - the function here okay if that was not
295:06 - the case we continue to the next point
295:08 - and the next point and if that was not
295:10 - the case for every point
295:12 - we will return false okay now we want to
295:15 - do that but for
295:17 - all the tiles that are on the two first
295:19 - rank so we can write our function
295:22 - check
295:23 - ship call lesia ok this function will
295:27 - return true if the ship is on the track
295:29 - and it will return false if that's not
295:31 - the case in that case we will say game
295:33 - over where are the tile coordinates it's
295:36 - in self
295:37 - tile coordinates okay so what i can do
295:40 - is to loop
295:42 - on these coordinates in range
295:45 - 0 to length of this
295:49 - but i told you we are not going to test
295:51 - all the tiles it's not necessary so we
295:54 - will add an exit condition here but
295:57 - first let's get our tile index x
296:01 - and tile index y from the tile
296:03 - coordinates at index okay i get my tile
296:08 - what is the exit condition if my tile
296:10 - index y
296:12 - is greater
296:13 - than the current while loop plus one it
296:16 - means i don't need to test the tiles
296:18 - that are above the first two ranks
296:21 - because the ship is always at the bottom
296:22 - of the screen anyway so this will avoid
296:25 - that we do unnecessary tests if my tile
296:28 - index y is greater than the self current
296:32 - while loop plus one because i want to
296:34 - test the first two ranks of ties if
296:38 - that's the case i will say that
296:40 - i return false i could not return 1
296:44 - because i did not return true because it
296:46 - means i did not return true on the
296:49 - previous tiles the types that are in the
296:51 - first two ranks now i will check my tile
296:54 - if check ship collision with the tile
296:57 - that we want to test here if we have a
297:00 - collision then it's okay everything is
297:03 - finished we return true that's okay we
297:06 - are still on the track but if we loop
297:09 - and we test all the tiles and we go
297:11 - after the first two ranks
297:13 - and then the story is finished or if we
297:16 - go at the end of the function
297:18 - it means we did not collide and that's a
297:21 - return false let's call this function on
297:23 - the update function so we go to the
297:26 - bottom of the code in the update
297:27 - function and then i will call this rdn
297:30 - self
297:31 - check ship collision if
297:34 - not
297:35 - if we return false in this function that
297:37 - means we are in a game over conditions
297:39 - so for now we will just print
297:42 - game over okay let's try it okay you can
297:46 - see i'm on the track everything is fine
297:49 - here i am still on the track because i
297:51 - have two points colliding still here i
297:54 - have still one point colliding but if i
297:56 - go totally out we can see game over okay
297:59 - if i go back it's still working fine so
298:02 - let's go back in perspective mode to see
298:05 - that everything is okay
298:07 - transform i go in perspective mode and
298:10 - i'm going to put back some
298:12 - better value here so line spacing 0.4
298:16 - and speed x little bit greater for
298:19 - example 3 let's try that it's far too
298:22 - slow i'm going to have point 8
298:25 - so now you can see it's good and when i
298:27 - go out of the track we can see in game
298:29 - over here okay everything is correct and
298:32 - let's move on to the next lecture
298:38 - [Music]
298:45 - galaxy project version number three our
298:48 - project will look like this we will have
298:49 - a menu we will be able to start the
298:51 - project to play
298:54 - and to go into the game over also we
298:57 - have the score that is displayed here in
299:00 - this version we will first manage the
299:02 - game states the game will not start by
299:05 - itself but we will press the button to
299:07 - start the game and also when we will
299:10 - have a game over the game will stop we
299:12 - will display this menu that will be
299:15 - displayed when we start the game and
299:16 - also when we get into the game over and
299:19 - we will finalize by displaying the
299:21 - background image by playing the
299:23 - different sounds and also displaying the
299:26 - score and i will finish on that project
299:28 - by sharing with you my different ideas
299:31 - and how to improve this game are you
299:33 - ready to start let's do it
299:39 - let's add a game over state to our game
299:42 - now we detect the game over but we still
299:44 - continue to play for example here we
299:46 - display game over in the trace but we
299:49 - can still continue we want to stop the
299:51 - game when we get a game over so we are
299:54 - going to add a new variable that i call
299:56 - the
299:57 - state
299:58 - game over and as a default our game is
300:02 - not in game over but when i will have no
300:04 - collision with the tiles i will go in
300:08 - game over mod
300:09 - self not stay game over equal to also i
300:12 - want to print this trace only one time
300:16 - so i will test if no collisions okay and
300:19 - we were not
300:21 - in a game over already okay so this will
300:24 - be executed only one time also i want to
300:27 - stop the game so if we are in a game
300:30 - over mode we are going to stop doing few
300:33 - things in the update function for
300:36 - example here we continue to go forward
300:38 - in the game so we are going to do that
300:40 - if not game over if you are in game over
300:44 - we will stop going forward into the game
300:47 - also i want to stop doing the loop
300:50 - because anyway we don't move into the
300:52 - game anymore and also i want to remove
300:54 - the possibility to go on the left and on
300:57 - the right so all of this block is under
301:00 - this condition when we are in game over
301:03 - all of this will be disabled let's try
301:06 - it
301:06 - so you can see i can play
301:09 - but as soon as i go out of the track the
301:11 - game is freezed and i can see game over
301:14 - so it seems it's working well but i'm
301:17 - going to show you a small case where
301:19 - it's not really working well it's
301:21 - especially if we put very high speed
301:24 - here for example two and you will see
301:26 - what happened here i just start the game
301:29 - you can see i'm not in a game over but
301:31 - you can see that the game is freezed
301:33 - already and if i look you can see i got
301:35 - a game over so why does i have a game
301:39 - over while i'm not in a game over
301:41 - condition this is because when we start
301:44 - our game here we go in the init and we
301:47 - prepare many things we initialize all of
301:50 - this and at the end we do the clock
301:52 - schedule to call the update function in
301:55 - fact kivy did not finish to initialize
301:58 - everything he need to initialize the
302:00 - screen and many other things so the call
302:02 - to the update function is going to take
302:04 - more time than expected at the beginning
302:06 - and so for the first calls we are going
302:08 - to have a big delta time here look if i
302:11 - enable again the trace of the delta time
302:14 - you can see here in the trace that
302:17 - normally we should have something around
302:19 - 1
302:20 - and that's mostly the case except at the
302:22 - beginning if you look the first delta
302:24 - time is very high 29 it's because kv was
302:28 - starting so it took more time than
302:30 - expected but in our case what happened
302:33 - we took that delta time and then we
302:35 - compute our time factor from the time
302:38 - factor we used it in the computation of
302:40 - the current of set y so we made a big
302:44 - step in one time and because of this we
302:47 - were a bit ahead of the computation of
302:50 - the loop because in the condition we
302:52 - check if this current offset y is
302:55 - greater than the spacing y and in that
302:58 - case yes we increment the loop and we
303:00 - remove spacing y
303:02 - but what happened here is that because
303:04 - of the big value that we put at once we
303:07 - were far greater than the spacing y even
303:11 - greater than two times or three times
303:13 - the spacing y and so normally we should
303:15 - be in the current while loop of maybe
303:17 - three or four but we just increment by
303:19 - one and so in the computation of the
303:23 - check ship collision we are going to
303:25 - compare the collision with tiles that
303:27 - are already out of the screen and that's
303:29 - why we don't get any collision and that
303:31 - we get a game over directly so the bug
303:35 - is here in this condition in fact we
303:37 - should do that as much as we need and
303:40 - that's why you should replace it with a
303:42 - while current offset is greater than
303:45 - spacing y we will subtract it and we
303:48 - will increment the loop okay let's start
303:50 - the program again you could see i got a
303:52 - game over but it is a real game over
303:54 - this time because it was very quick
303:57 - so i'm going to comment this trace and
304:00 - i'm going to reduce a bit and the speed
304:04 - to 0.8 okay so this time everything is
304:08 - working fine
304:12 - we want to improve our game by adding a
304:15 - menu so that we have a button to start
304:18 - the game and not having this behavior of
304:20 - the game that is starting automatically
304:22 - okay so we will click to start the game
304:25 - and when we will have a menu again to
304:27 - restart the game the menu widget will be
304:30 - very simple it's going to be a title a
304:33 - button and have another lay that is
304:36 - going to be a dark overlay and we are
304:39 - going to use the same menu for the start
304:41 - of the game and for the game over the
304:43 - difference will be the title and the
304:45 - text of the button that will be modified
304:48 - so let's just create this menu we need
304:51 - to create a new python file that we will
304:54 - call menu and we will need also to
304:56 - create the kv file menu
304:58 - dot kv make sure that all the files are
305:02 - here in the same directory in the menu
305:04 - python file i will create
305:07 - my menu widget and because you are going
305:10 - to use all the screen size let's make a
305:13 - relative layout so i don't need to
305:16 - specify manually the size that would be
305:19 - the case if it was a widget so i just
305:21 - use a relative layout so i will also
305:23 - change the main widget and take it from
305:26 - a relative layout okay so now that we
305:29 - have this we can define the menu widget
305:32 - in rkv file so menu widget it's a
305:36 - relative layout but i still call it
305:38 - widget that's okay so what do we have
305:40 - inside we have a label and we have a
305:43 - button for the label i'm going to put a
305:45 - text for the text we will do that later
305:48 - so now i put title and for the button i
305:52 - will put ok concerning the position i
305:55 - want to put it in the center of the
305:57 - screen so i will put
306:00 - center
306:01 - x
306:02 - dot 5
306:03 - and center y
306:05 - i'm not going to put dot 5 because i
306:07 - want to put the button just below so i
306:09 - put it just a bit upstairs so i'm going
306:12 - to put it at 60
306:13 - 0.6 and the button i will put it a
306:16 - little bit downstairs at 1.4 okay so now
306:20 - let's take this menu widget and let's
306:22 - put it in our galaxy.kv i put it inside
306:26 - my main widget here but you will see
306:29 - that if i want to start my program right
306:31 - now i have an error because you don't
306:33 - know my new widget i am missing an
306:36 - import statement here import menu okay
306:40 - so now you can see the menu is not
306:42 - displayed and that is because we have
306:45 - the menu.kv file i need to say to kivy
306:48 - to take this file into account so in the
306:51 - main just before the main widget i will
306:53 - write builder dot
306:56 - load
306:57 - file and it's going to be menu dot kv
307:00 - okay i need to import this
307:03 - kv long builder
307:05 - let's try it
307:06 - so you see the menu is appearing and the
307:09 - button is very big so it's because we
307:12 - did not specify any size for the button
307:14 - so let's do that back to the menu.kv i'm
307:17 - going to give a
307:18 - size hint to my button and i will put
307:22 - twenty percent horizontally and ten
307:25 - percent vertically let's have a look so
307:27 - you can see i have my title so the title
307:30 - is in white so we cannot see it here but
307:32 - we could show it a little bit and i have
307:35 - my button another thing we want to do is
307:37 - to put a black overlay almost black
307:40 - overlay like 80
307:41 - so we can still see the game but have
307:44 - this darkened background when we have
307:46 - the menu so we can do that in our
307:48 - menu.kv in the canvas so i'm going to
307:51 - write canvas
307:53 - and i want to use this as the first
307:55 - instruction so i will use canvas before
307:58 - i will use color that is going to be
308:00 - rgba so we have a black color zero and
308:04 - for the alpha we are going to use eighty
308:06 - percent this color i will use it with a
308:09 - rectangle and it will take all the size
308:13 - self.size okay let's try it
308:16 - so now you can see that we have our menu
308:18 - with a dark overlay in the next video we
308:21 - will add the state to our game to avoid
308:24 - starting the game directly and we will
308:26 - also use the action on the button to
308:28 - start the game and when we will have a
308:30 - game over we will display the menu again
308:36 - we are going to implement the first part
308:38 - of the menu so we will start our game
308:41 - only when we click on the ok button
308:44 - and we will need also to hide the menu
308:46 - in that case and of course we will need
308:48 - to show the menu again when we are in
308:50 - game over so let's add a new state so
308:53 - that the game is not started directly we
308:56 - will have
308:57 - state
308:58 - game
308:59 - has
309:00 - started and we are going to put
309:03 - false
309:04 - so when the game is not started we are
309:07 - not going to do everything in the update
309:10 - function like we do in the game over if
309:13 - not game over we do that
309:16 - and
309:17 - self started and we should do it only if
309:21 - the game has started that means if the
309:23 - game has not started we are not going to
309:25 - do anything here so if i start again you
309:28 - can see that this time the game is not
309:30 - starting automatically now i need to
309:32 - manage the click on the button for the
309:35 - button i can go to my menu and i can add
309:39 - on press
309:41 - event and i will create a function on
309:44 - menu button
309:46 - pressed okay we need to put the
309:48 - parenthesis here because it's a call is
309:50 - it going to be root dot on menu button
309:53 - pressed not really because in that case
309:56 - we want to define this function not in
309:58 - the menu widget but inside the parent
310:01 - inside the main widget directly so it's
310:04 - going to be root dot parent dot on menu
310:08 - button pressed and i'm going to define
310:10 - this function in the main widget so i'm
310:13 - going to go totally at the end of the
310:15 - main widget
310:17 - and i will create this function i will
310:19 - just put a print
310:21 - button okay so now is it working if i
310:25 - start when i click the button i should
310:28 - see my trace and you see that the button
310:32 - is not working i don't see any button
310:35 - trace and i don't see any lightning on
310:37 - the button it's like the button doesn't
310:39 - get any touch and why so it's because if
310:43 - you look what we did in the main widget
310:45 - in the user action we have this function
310:47 - will manage the touch and if we put a
310:50 - breakpoint here and if i restart
310:53 - even when i click on the button we will
310:55 - go into this function and the problem
310:58 - that we have here is that this function
311:00 - overrides the default behavior but will
311:03 - not transmit the touch to the other
311:05 - widget and this is because we did not
311:08 - call the
311:09 - super
311:10 - and we need to call super with the type
311:13 - main widget in our case
311:16 - self dot
311:17 - and untouched down and giving the touch
311:20 - okay i'm just going to clean some traces
311:24 - okay so now you will see that we are
311:26 - going to have one issue because we need
311:29 - main widgets you see but if we import it
311:33 - user actions will need main widget but
311:36 - main widget already needs user action so
311:39 - we have a problem of mutual inclusions
311:42 - so what we can do here is to give the
311:44 - parent class of the main
311:46 - widget is relative layout so you see
311:49 - here the import from user actions is
311:51 - here okay so we can take relative layout
311:55 - and put it instead here in the super and
311:58 - i will import the relative layout you
312:01 - will see that this time when i start the
312:03 - program i can click on the button and
312:06 - when i click on the button i want to
312:08 - start the game and to hide the menu so
312:10 - let's do that
312:12 - back in the main widget in my button
312:14 - click i will start the game so i put my
312:19 - self
312:20 - state
312:21 - has started to true but i also need to
312:25 - hide the menu how can i hide the menu i
312:27 - can use opacity equal zero the menu is
312:31 - inside the main widget here and i need
312:33 - to assign a property to it so i will use
312:36 - id
312:37 - menu widget
312:39 - and i will need to create a new property
312:41 - in the main widget okay i assign this
312:43 - new property so we will need to define
312:46 - it menu widget okay so now in the main
312:49 - widget i go back to the top and i will
312:52 - need to create
312:54 - i will go here with other properties my
312:57 - menu widget which is an object property
313:00 - okay i need to import object property so
313:04 - now that i have my menu widget
313:06 - i can just use it in the click of the
313:10 - button and i will do self dot menu
313:12 - widget dot opacity equals zero let's try
313:17 - it
313:18 - so you can see that if i click the game
313:21 - is starting but also you see it moved my
313:23 - player
313:24 - and okay after a while i get the game
313:26 - over and so we have two issues first
313:29 - when i click on the button also the main
313:31 - widget is taking the click on the window
313:34 - to move on the right or on the left so
313:37 - we need to change that and when we have
313:39 - the game over we need to display the
313:41 - menu again so why we have this first
313:44 - issue it's because on the user actions
313:47 - on touchdown we should do that only
313:50 - when we are in the right state and if
313:52 - you remember we have two states here
313:56 - game over and game has started that
313:58 - means we want to do that only when we
314:01 - are not in game over i'm going to
314:03 - comment that
314:04 - so if i'm not in
314:07 - game over i can allow to
314:10 - do the touch actions and
314:12 - also that the game has started i can do
314:16 - that okay first thing second thing we
314:19 - need to change
314:21 - is from the game over
314:23 - so but before that i want to show you
314:26 - the other thing we need to change is to
314:28 - display the menu again when we have the
314:30 - game over but i want to show you another
314:32 - issue that we have so this time you see
314:35 - that i can start and it's not moving
314:38 - okay it's correct and okay i will lose
314:41 - so now i'm in the game over but you see
314:43 - that if i still click here even if the
314:46 - menu is not displayed i still get my
314:49 - button action and this is going to be a
314:52 - problem on mobile when we are playing
314:54 - and pressing the screen it may trigger
314:56 - the action of the button and why is this
314:59 - because we just use opacity on the menu
315:02 - but the menu is still here and the
315:05 - button is still here but not visible so
315:07 - we need to handle that and what we can
315:10 - do is that in the untouched buttons on
315:12 - the on touchdown so i'm going to copy
315:15 - this
315:16 - function and i'm going to manage that on
315:19 - the menu and i will say to the menu so
315:21 - i'm going to delete all of this i will
315:23 - say that when we touch something on the
315:26 - menu and if the menu
315:28 - if self opacity is equal to zero
315:32 - we are not going to do anything with the
315:34 - touch so i'm just going to return false
315:37 - okay if the menu is not visible we
315:39 - ignore the touch else we transmit the
315:42 - touch
315:43 - okay let's try that again okay i start
315:46 - here i click again on the button but you
315:48 - see that we don't have this button trace
315:50 - so this is correct now i need to manage
315:53 - the game over when we are in a game over
315:56 - i want to show the menu again so i will
315:58 - put opacity to one i copy this and here
316:02 - in the game over
316:04 - state i'm also going to put my menu back
316:08 - visible okay so let's see i start
316:13 - okay and i'm going to lose and then i
316:15 - have the menu again and the next step we
316:18 - need to implement is to be able to
316:20 - restart the game from the top when we
316:23 - click on the button and that's what we
316:25 - are going to do next
316:30 - we would like to be able to reset our
316:32 - game here when we start our game okay
316:35 - and when we have a game over when we
316:38 - click it's not restarting the game
316:40 - correctly so we need to develop
316:42 - something to restart from zero and it's
316:45 - going to be a reset function so i'm
316:46 - going to add
316:48 - this reset game function so we need to
316:52 - define it so we will reset the game to
316:54 - zero and we will put the right state and
316:57 - remove the menu let's define this new
317:00 - function so i'm going to go
317:02 - just below the init here of the main
317:05 - widget and i will put def
317:07 - reset game in a reset game of course we
317:11 - need to reset the state of the main
317:13 - widget so it will concern all the
317:15 - variables that we have here and of
317:17 - course i will need to put game over to
317:19 - false
317:20 - game self.gameover equal false but you
317:22 - will do that at the end of the function
317:24 - because you remember that clock schedule
317:26 - interval is running so the fact that we
317:28 - are in game over equal to our game has
317:31 - not started it will prevent from
317:33 - executing this part of code so let's
317:36 - keep this part of code disabled and we
317:38 - will enable it again at the end by
317:41 - putting game over equal false because
317:43 - here we will reset different variables
317:46 - so let's do that
317:48 - what do we need to reset ship
317:50 - coordinates it's okay because it's going
317:52 - to be recomputed in the update the ship
317:55 - has been initialized so we don't touch
317:57 - it style coordinates we need to reset
317:59 - tile coordinates because we need to
318:01 - start with a straight line
318:03 - so we want to put self tile coordinates
318:07 - equal
318:08 - an empty list and we will need to call
318:10 - the prefill tile coordinates so we will
318:14 - restart from a straight line and also we
318:16 - will need to generate
318:18 - the tile coordinates at the beginning
318:21 - okay i continue
318:22 - so tiles it's okay has been initialized
318:25 - so we keep it but concerning the speed
318:27 - here current offset y current offset one
318:30 - is our y position so we need to reset it
318:33 - to go back at the beginning of the game
318:35 - and current while loop also and it's
318:37 - going to be the same for the x variables
318:39 - here we need to start with a speed of
318:41 - zero and to be in the center of the
318:44 - screen so let's copy all of this and i
318:46 - will put a zero for all these variables
318:50 - okay self current while loop i will
318:52 - remove this one and i put everything to
318:56 - zero what else do we have horizontal
318:59 - line okay it has been initialized we
319:01 - don't need to touch it vertical lines
319:03 - also and perspective point and menu
319:05 - widget okay so all of this we don't
319:07 - touch it so we reset everything and we
319:10 - put back the tiles to zero and because
319:13 - we put our current while loop to zero
319:15 - before regenerating it's going to
319:17 - regenerate
319:19 - coordinates starting at zero so let's
319:22 - try it and also you see that because we
319:24 - call these two functions
319:26 - we can also replace these two lines by
319:29 - reset game so we can do that it's not
319:32 - going to change anything but we can
319:34 - change the code like this let's try it i
319:37 - start the game i lose and i can click
319:40 - again and the game is restarting from
319:42 - the top okay everything is working fine
319:45 - and let's continue
319:50 - let's finalize our menu first thing we
319:53 - want to do is to put the right title and
319:55 - the right text for the button so when we
319:57 - will start we want to display galaxy for
319:59 - the title and start for the button and
320:02 - also when we will be in game over we
320:05 - will change the title by game over and
320:07 - the text button by restart so how can we
320:11 - do that if i go back to the menu we have
320:13 - our label with default text and the
320:16 - button with the text so you may say i
320:18 - can put galaxy here as a default text
320:21 - and then put an id on this label and get
320:24 - a property to
320:25 - change the text of my label but we can
320:27 - do something easier than this we can
320:29 - directly put a string property here for
320:32 - the title and that's what we are going
320:34 - to do i'm going to write menu title and
320:37 - it's a property we are going to define
320:39 - in the main widget so it's going to be
320:41 - root not parent dot menu title and we
320:45 - are going to do the same for the button
320:47 - it's going to be menu button title so i
320:51 - have to define that in my main widget
320:54 - here i will say menu title is a string
320:57 - property so i need to import that and i
321:00 - will do the same for the menu
321:03 - button title i can give a default value
321:06 - here so the default value is going to be
321:10 - galaxy and it's going to be start for
321:12 - the button also for the title we want to
321:15 - expand a bit the different letters so
321:17 - i'm going to put three spaces between
321:20 - every letters let's try it so i have
321:23 - galaxy and start button but when i'm in
321:26 - game over i want to display game over
321:28 - and restart so let's do that i have to
321:31 - change the value of menu title and menu
321:34 - button title
321:35 - when we get the game over at the end of
321:38 - the update function
321:40 - here so i'm going to make self dot menu
321:44 - title equal game over and self dot menu
321:49 - button title equal restart
321:52 - and for the game over i'm going to
321:54 - expand the letters but only by two
321:56 - spaces this time because this word is
321:59 - longer in the middle i put four
322:02 - and two okay let's try start and
322:06 - game over restart okay it's working well
322:10 - so now let's add some style to our menu
322:12 - and you will need to use the file i gave
322:14 - you in the resource folder that you can
322:16 - download you will find three folders
322:19 - audio with the different sounds that we
322:21 - will add later now we will use the fonts
322:24 - so it's going to be this font for the
322:26 - title and euro still for the button and
322:29 - also you will get the background image
322:31 - so let's copy these three folders at the
322:34 - root of your project you can use a right
322:37 - click on a file and this option reveal
322:39 - in finder and then you just copy your
322:42 - three folders here it will appear in the
322:45 - project okay
322:47 - so let's use this font for the title how
322:50 - can we use a custom font for the label
322:53 - we use font name and we need to give the
322:56 - directory which is fonts
322:58 - slash and this name of file suckers go
323:03 - tick std light dot ttf okay and also we
323:07 - are going to make bigger letters so it's
323:10 - going to be a font size
323:12 - and let's put 60
323:14 - dp okay let's try it so that looks nice
323:18 - for the title let's style the button for
323:21 - the button i'm going to use also these
323:23 - two properties font size that you are
323:25 - going to put half 30 and for the font
323:28 - name i'm going to use the other font
323:31 - your row still okay
323:33 - so what do we have this time we have
323:35 - something that looks great i want to
323:37 - expand a bit the height of the button
323:40 - and also to position it a bit lower and
323:43 - we will add some color to this button so
323:45 - first thing the size is ten percent
323:48 - height i'm going to give 15 percent and
323:50 - i want to display it a bit lower so i'm
323:53 - going to put it at 30 percent of the
323:55 - screen now i want to add a background
323:58 - color so i can use a background color
324:01 - and i prepare the color code for
324:03 - something quite red so it's going to be
324:05 - 100 red and 30 percent green
324:09 - 40 percent blue and i put it at 85
324:13 - percent opacity so let's try that and
324:16 - you can see that my color is not really
324:18 - vivid it's because it is multiplied by
324:20 - the default button column which is a
324:22 - gray so to remove this texture we need
324:25 - to use background normal and to reset
324:28 - the texture and this time it's going to
324:31 - look nice ok
324:33 - perfect i can start my game and then i
324:35 - get game over everything is good
324:37 - concerning the menu
324:45 - for this exercise i'm going to ask you
324:46 - to display the background image this one
324:51 - bg1.jpg in the background of the main
324:54 - widget so we just place the game above
324:56 - all of this you will need to add this
324:58 - image in the main widget but you are
325:01 - going to add that in the kv file here
325:04 - i don't give you more instructions it's
325:07 - your turn to do the exercise and then i
325:09 - will show you the solution
325:11 - [Music]
325:18 - can we display this image can we use an
325:21 - image here not really because the image
325:23 - is going to be drawn over the canva so
325:26 - we need to display it in the background
325:29 - and what we can use is a canvas before
325:33 - and inside we will use a rectangle that
325:35 - will use this file as a texture so we
325:39 - will use the source property on a
325:41 - rectangle that will take all the window
325:43 - and because we are in canvas before it's
325:45 - the first thing we are going to draw on
325:47 - the screen and we will draw everything
325:49 - else on top and that's what we want to
325:51 - do so i'm going to put a rectangle that
325:54 - will take all the space so it's going to
325:56 - be a size of self dot size and i will
326:00 - use the source image
326:02 - images
326:04 - slash vg1 dot jpeg let's try it you can
326:08 - see that the image is displayed and i
326:11 - can start the game okay everything is
326:13 - correct let's continue on the project
326:21 - let's display the score in our game
326:23 - what is the score and what will be the
326:26 - score in our case i have decided that
326:29 - the score will be the number of loop
326:30 - defines how long we could go into the
326:33 - pass so it's going to increment and it's
326:36 - going to be finally the value of the
326:38 - score so where can we display the score
326:41 - i want to display the score in the game
326:43 - window at the top left and we are going
326:45 - to add it directly in the main widget so
326:48 - first we will write some code together
326:50 - and after you will do an exercise so i
326:52 - go to the galaxy.kv and i want to add a
326:56 - label should i add the score label
326:58 - before the menu widget or after it it's
327:01 - going to be an important choice but i'm
327:03 - going to start by putting it before the
327:05 - menu widget label for the text i'm just
327:08 - going to try with a placeholder text
327:10 - it's going to be score
327:12 - 120 for example and also i'm going to
327:15 - put a style so for the style i'm going
327:17 - to copy paste these two lines from the
327:19 - button of the menu and i'm going to
327:22 - paste it here i'm going to use a font
327:23 - size of 20 and to keep this font name er
327:27 - still so what does it makes right now if
327:29 - i start it i cannot see it but if i
327:32 - start the game you can see that the
327:33 - score is displayed in the middle of the
327:35 - screen because it takes all the space
327:38 - so we need to define the size hint for
327:41 - example 20
327:43 - and
327:44 - 20
327:45 - okay so what do we have we have
327:47 - something here
327:49 - but i want to display it at the top left
327:52 - so i'm going to use
327:54 - a pos hint
327:56 - that will be
327:57 - x
327:58 - 0 so that one was implicit that was
328:01 - already here but most important is to
328:04 - have the top
328:05 - to one totally at the top so let's see
328:09 - yes it's displayed here so that's
328:11 - correct and i just want to reduce a bit
328:13 - of margins here so i will reduce a
328:15 - little bit the size to 18
328:18 - okay so we have something good and when
328:20 - we start the game we will display the
328:22 - score so it's going to be your exercise
328:25 - you need to display the real score here
328:28 - and you will use a property for the text
328:30 - that we will call score txt okay
328:34 - because we are in the main widget we are
328:36 - going to use root dot directly we don't
328:39 - use root parent we needed to use parent
328:42 - from the menu because the parent of the
328:44 - menu is the main widget but since we are
328:47 - in the main widget directly it's going
328:48 - to be root score txt for this exercise
328:52 - you will define this new property and in
328:55 - this property you will need to use the
328:57 - value of the current loop to display the
329:00 - actual score do this exercise on your
329:02 - side and when it's done i will show you
329:04 - the solution
329:05 - [Music]
329:11 - so what we need to do is to define this
329:14 - score property i go to the main widget
329:17 - at the top and here i will define string
329:20 - property because we need to display
329:21 - score and then the value of the score
329:24 - score text is going to change when we
329:27 - change the value of the loop so i go
329:30 - back in the update function here when we
329:32 - increment the current while loop and we
329:35 - are going to do the score equal to score
329:39 - and then the value of this current while
329:42 - okay let's try that so you can see that
329:45 - at the beginning i don't see the score
329:47 - because we did not give a default value
329:50 - for the property okay but when i start
329:52 - it i get one two three four five and we
329:55 - begin to see the score and when i have a
329:58 - game over i can still see the score but
330:00 - not really well because of the overlay
330:03 - of the menu and also if i click on
330:06 - restart you can see i still see 23 and
330:09 - then one two three four five so i want
330:11 - to display score zero and display score
330:15 - zero we are going to put this line also
330:17 - in the reset function so it's going to
330:20 - be more clean here i can put score zero
330:24 - directly and remove that part or i can
330:26 - keep that part and because current while
330:28 - loop is reset to zero it's going to make
330:30 - the same thing okay let's try it so this
330:33 - time you can see i see score zero when i
330:36 - start i have zero one two three and when
330:39 - i lose i have again 0 1 2 3. it's more
330:42 - clean now i want to change something i
330:44 - want to see the score correctly because
330:47 - here we cannot see it much because of
330:49 - the overlay how can we solve that
330:51 - finally in the galaxy.kb we need to
330:55 - display the label on top of the menu and
330:58 - not the opposite so if i
331:01 - do that this way i'm going to display
331:04 - the score on top of the menu so it's
331:07 - always displayed correctly okay that's
331:10 - all for this exercise
331:17 - let's play the sounds in our game you
331:20 - see in the audio folder that we have
331:22 - many wave sounds so we are going to play
331:25 - these sounds in our game and at first
331:26 - i'm going to write some code with you
331:29 - and for the exercise you will trigger
331:31 - the sounds at the right moment so let's
331:33 - initialize the sounds we will create a
331:35 - new function init audio and we will use
331:39 - the sound
331:41 - loader dot load and give the name of the
331:44 - function sound loader you need to import
331:46 - it from tv core audio sound loader here
331:50 - we need to give the name of the
331:51 - different files so i will start with the
331:53 - first one
331:54 - begin dot wave and i need to provide
331:58 - the directory name so it's going to be
332:01 - audio slash begin.wave and this sound we
332:04 - need to save it in a variable so we can
332:07 - use play or stop on this variable later
332:10 - so it's going to be a self dot
332:13 - sound
332:14 - begin equal this
332:16 - i will need to define all my different
332:18 - variables here none okay
332:22 - so i need to copy paste this line for
332:24 - every sound that we have so we have
332:26 - still one two three four five other
332:28 - sounds okay and i will copy paste and i
332:31 - will write down
332:32 - the name of the different files you can
332:35 - see i have a completion here
332:37 - game over impact
332:40 - game over voice
332:41 - music one
332:43 - why i call it music one because maybe
332:45 - you will want to add some more music in
332:47 - the game later so i just call it music
332:50 - one instead of music and restart
332:53 - okay so let's rename the variables
332:55 - galaxy game over impact
332:58 - game over voice music one
333:01 - and restart and i will copy all of this
333:05 - so i can create the
333:07 - different variables equal none so begin
333:10 - we have it galaxy equal none impact
333:14 - voice
333:15 - music and restart okay and i will remove
333:18 - the self in the front perfect
333:21 - so now my init audio function i need to
333:25 - call it from the init of the game so i
333:27 - will call it at first init audio okay
333:31 - and i'm going to add something we can
333:33 - control the volume of the different
333:35 - sounds so for the music sound music 1 we
333:39 - can do dot volume equal 1 is the maximum
333:43 - it's 100 percent for all the voices like
333:47 - begin galaxy and and the other ones you
333:50 - are going to give a volume of 25 percent
333:54 - so i will copy paste that and for the
333:57 - sound galaxy i'm going to do the same
333:59 - this is an impact song and this one is a
334:03 - voice sound and restart also okay for
334:06 - the sound of impact we are going to give
334:09 - 60
334:11 - so you can adjust the volume of the
334:13 - different sounds for me i will keep
334:15 - these values now it's your turn you have
334:18 - to do an exercise you need to trigger
334:20 - the different sounds at the right moment
334:23 - so you will need to call the play
334:25 - function and also sometimes the stop
334:27 - function the galaxy voice is called
334:30 - totally at the beginning when we start
334:32 - the game it will say galaxy and when we
334:35 - will press start
334:37 - it will say
334:38 - begin okay and it will also start the
334:41 - music
334:42 - then later when you will get a game over
334:44 - you will play the impact of the sound
334:47 - and you will also need to stop the music
334:49 - and you will also play the game over
334:51 - voice but then the button now is not
334:54 - start it's restart so when the user will
334:57 - click on the restart button you will
334:59 - need to play restart sound it's your
335:02 - turn to practice and when it's done i
335:04 - will show you the solution
335:06 - [Music]
335:12 - so first thing i will do is i will use
335:15 - this begin sound the begging sound is
335:18 - when we click on the button on menu
335:21 - button pressed okay i can play my sound
335:24 - when i click on the button let's try it
335:27 - here i press start and it says begin but
335:30 - i have a problem in the game over i'm
335:32 - going to click on the same button and i
335:34 - want to say restart but it says begin
335:38 - because here we need to test the state
335:42 - if
335:43 - we are in
335:44 - state game over
335:46 - then we will play the restart sound else
335:51 - i'm in the first case and i will play
335:53 - sound begin let's try that okay begin
335:57 - game over
335:58 - begin so it's not working and why it's
336:01 - not working because you remember that we
336:03 - already reset the state game over in the
336:06 - reset function so we don't have that
336:08 - information anymore we need to move this
336:11 - part of code before the reset function
336:14 - so we have still this state game over
336:17 - let's try it begin okay restart okay
336:20 - that's correct
336:22 - now let's start the music when we click
336:24 - on this button we are going to start the
336:26 - music so i'm going to do sound music one
336:30 - dot play okay and i'm going to group all
336:33 - the sounds together so i'm going to play
336:35 - it here so whether we are in the first
336:37 - case or in the game over we are going to
336:40 - play the music when we click in the
336:41 - button in every case okay it's working
336:45 - but in the game over i want to stop
336:47 - playing the music
336:49 - so when we get the game over we have
336:51 - multiple things to do we need to stop
336:54 - the music stop but we also need to play
336:57 - some other sounds because we have the
337:00 - sound of impact game over impact that we
337:03 - are going to play and we have also the
337:05 - voice
337:06 - sound game of our voice that we need to
337:09 - play so let's see what it gives and i
337:12 - got to crash let's see why
337:15 - float object has no attribute play and
337:18 - we get a problem on that sound game over
337:20 - impact it says it's a float object why i
337:24 - think i know why it's when we put the
337:26 - volume i think i forgot to put volume in
337:29 - front let's see init audio and here you
337:33 - see
337:34 - sound game over impact dot
337:37 - volume is equal to zero six okay let's
337:41 - try again and then you could hear
337:43 - the music stop i get the impact sound
337:46 - and we also hear the game over that was
337:49 - quite low and we are going to improve
337:52 - that later i'm going to show you how to
337:54 - delay the sound but just to finish the
337:55 - exercise i need also to play the galaxy
337:59 - sound at the beginning so i'm going to
338:00 - take that and on the init of the game
338:04 - after init audio i will put it at the
338:06 - end of the init function
338:08 - i will play
338:10 - the galaxy sound so when i start the
338:12 - game we can hear galaxy then we can
338:15 - start and then i get the game of
338:17 - restart game over okay so that's all for
338:21 - the exercise and now i'm going to show
338:23 - you how to improve it a little bit i
338:25 - want to have the impact sound on the
338:27 - game over immediately
338:29 - but a few seconds later like three
338:31 - seconds later i want to play the sound
338:34 - game over so let's do that when i get my
338:38 - game over i'm in the update function
338:41 - here so when i play game of voice
338:45 - that's voice on i want to delay it
338:48 - so i'm going to define a new function
338:50 - play
338:51 - game over
338:53 - voice
338:54 - sound okay so we are going to play the
338:57 - sound and this function we need to delay
339:00 - it from here so i'm going to use clock
339:03 - dot schedule
339:05 - once we want to start it only one time
339:07 - this function
339:09 - self dot play game over voice sound okay
339:12 - and i will specify the delay for example
339:14 - three seconds and because this function
339:17 - is used inside the schedule function i
339:19 - need to give the delta time parameter so
339:23 - let's try it
339:24 - so you could hear i got the impact and
339:27 - then a few seconds later we could hear
339:29 - game over but in fact we have a small
339:32 - look for example if i restart
339:34 - you can hear game over while i'm playing
339:36 - the game and this is because when we get
339:38 - the game over we trigger that function
339:41 - that will happen three seconds later
339:44 - okay so we trigger that but before it
339:46 - happens
339:47 - i click quickly on the button here so i
339:50 - had time to restart the game and when
339:52 - i'm playing then after a few seconds
339:54 - this is going to play so i will hear
339:57 - game over
339:58 - while i'm playing so this is clearly a
340:00 - bug so what we can do is to test here if
340:04 - we are still in a game of our state if
340:07 - self dot state
340:09 - game over then only in that case i will
340:11 - play the game of the song let's try it
340:14 - again and you can hear that this time i
340:17 - didn't hear the game of her song i will
340:19 - only hear it when i wait
340:21 - this one so everything is good for our
340:24 - game you have completed the galaxy
340:26 - project and you have reached the end of
340:28 - this tutorial congratulations you might
340:31 - ask me so now where do i go from here
340:33 - what's next
340:35 - i advise you to practice by doing some
340:38 - personal projects
340:39 - let me share with you some ideas why not
340:42 - creating a simple game or a simple
340:44 - application like a currency converter or
340:47 - a password generator or why not trying
340:50 - to add some features to the galaxy game
340:52 - for example store and display the best
340:55 - score or manage multiple levels or
340:58 - increase the speed over time or other
341:01 - difficulty choice easy medium hard
341:04 - and also we can stay in touch you can
341:06 - subscribe to my youtube channel code
341:08 - with jonathan so that you will know when
341:10 - i post new tutorials and if you like to
341:13 - learn from me you can check out my full
341:15 - python course that includes more than
341:17 - 300 videos and 27 hours of content
341:21 - thanks again and see you soon

Cleaned transcript:

jonathan rue has created many popular and bestselling software courses in this free course he will teach you how to use the kivy library to create games with python you already learned the python programming language you have the basics and you are able to create your own programs with python but now what are the next steps how to improve your skills to the next level and be able to create more powerful applications with a graphical user interface that can run on any platforms ios android mac windows yes it's possible to create games desktop and mobile applications with one single longwait python and for that we are going to use the tv library tv lets you create games desktop and mobile applications by sharing the same source code in python for every platform that's very powerful in this tutorial i will teach you everything you need to know about tv step by step you will learn about the widgets to create user interfaces with buttons labels images and so on you will use all kinds of layouts for placement strategies and ui that can automatically adapt to every screen sizes mobile desktop and tablets and you will also learn about the canvas so you can draw anything you want on the screen lines rectangle circles at 60 frames per second and finally you will practice your new skills with a real world project that we will create from a to z the galaxy project galaxy galaxy is a perspective game where you need to keep your spaceship on the track you will learn how to display everything in perspective how to create an algorithm to generate the land how to manage screen touch keypress and how to play sounds and all of this runs on mac windows ios and android so are you ready let's start hi i'm jonathan with python you can create graphical user interfaces with many different libraries you have tick inter which automatically comes with the installation of python it's easy but not very powerful you have qt which is good to make featurerich interfaces with many kind of widgets but it comes with a commercial license there is also pygame which is more specific to 2d games for windows and mac and finally there is kv it's based on opengl so the graphics are fast and it supports all the platforms linux windows mac os android ios and even raspberry that's the library i choose to teach you here because it's easy versatile and powerful this tutorial is made up of two parts part one you will learn the kiwi library with the lab project that will be our programming laboratory part two you will practice your skills with the galaxy project in the lab project you are going to learn how to use the layouts the widgets and the canvas for the galaxy project we will progress with three versions version one we will manage the perspective the movements and the key press version two we will generate the land display the spaceship and manage the collisions and version three we will finalize the project with a menu add the game over state manage the score display images and play sounds but just before i will show you the installation and setup of qv for your project so that you will have a basic structure that you can always reuse for any project also you can follow this tutorial for pc windows or mac to follow this tutorial you have to know the basics of python the variables the functions the conditions the classes the loops and also you have to be familiar with a programming environment like visual studio code or pycharm if that's not the case i invite you to look at my python beginner tutorial on my youtube channel code with jonathan you will find the link in the description or you can find also some python tutorials here on freecodecamp ok let's start with the project creation and installation of tv let's do it i am going to show you how to create your project and how to install kivy in this course i will use pycharm but i will also show you with visual studio code and you can follow the same steps on mac or pc windows if you are on visual studio code you create a new file you create a new folder lab ok and you will name your file main dot py for every project you will name your file main dot py okay with pycharm you will click on new project then we will call it qv the lab i advise you to use the virtual environment but if you are on pc windows it's better to use an interpreter directly because it was some issues with the virtual off and of course you need to select a version of python python 3 dot something minimal version 3.7 you can use 3.7 3.8 3.9 3.10 if you have no interpreter here you can click on this button system interpreter and then you select your version of python of course if python is not installed on your machine i advise you to go on my youtube channel called with jonathan there is a tutorial here that will explain you all the steps to set up your machine and to install python okay in my case i will select the virtual environment and i will take a version of python 3.9 create you will get this interface so in some case it will create a main.py directly if it's not the case you can right click here on your project and make a new python file that you will call main.py in our case we are just going to remove the breakpoint here and to remove all the code okay now we are going to install the kivy library i will show you first on pycharm and then on visual studio code you will click here on terminal and then you will type ice on minus minus version in my case it's 3.9.2 that's correct we need to be sure we use a python 3 version and then i will type pip install qv enter when it's complete you will type pip lists enter and then you can see on the list that kivi has been installed on visual studio code you will click here on terminal new terminal and you will have this interface here you will type python minus minus version and as you can see i have a version of python 2.7 as a default because i am on mac on pc windows normally you should have installed python version 3 something but if you are on mac you will need to type python 3 minus minus version ok in my case it displays python 3.9.2 so take care here you will need to make sure that visual studio code is using the same version here on the lower left part here i need to select a python 3.9.2 so if i scroll down you can see i have two versions of python 3.9.2 i need to use the right one to do that i will type which python3 and i can see the right path here python.framework so this is this version that i will select here if you are on pc windows which does not exist but you can type where python to get the pass of your python interpreter also in visual studio code make sure that you have installed the python extension here else you will not have the possibility to play the file again i explain you all of that in my python tutorial on my youtube channel ok now we are going to write some code that is going to be the basic structure that you will always use with any project with tv i will write it on pycharm if you are on visual studio code you just write the same lines of code the first thing is to create a class and that will be the base class of our application and we are going to call it the lab and for every applications with kv you need to add app at the end so it's going to be the lab app okay take care of the upper case then we will inherit from the app class define in kivy i add semicolon and this class is going to be empty at the beginning okay you can see that we have to include the app it's not referenced yet so for this either you click here import qv up app but if you are on visual studio code you will need to write this manually take care because this is kv.app lowercase import app with an uppercase and then we are going to start our empty application so we will have an empty screen we will do this so that we can test if our application can initialize properly so what you will do is that you will take zlab app and you will add some parenthesis dot run parenthesis take care because if you forget the parenthesis here and if you write this it's not going to work you need to instantiate the class create an object and on this object you will run it okay on visual studio code you do exactly the same thing and then you will click on the play if you don't have the play here at the first time you will do a right click and click run okay and in my case i have a black screen that means everything is working fine on visual studio code you do the exact same thing and then you click on the play and if it says no module name kivy that means you forgot to install kivy in that case you need to type pip install remember that on the mac you need to type pip3 install tv okay and then i can click on the play and i get this black screen which means everything is okay at this stage if you cannot get the black screen and if you get an error that says cannot get a window provider that means you have a problem with your graphic display first you have to know that you cannot start tv in a virtual machine it's not going to work and sometimes you cannot start tv on an external display and also if it's not working on windows you can upgrade your graphic card drivers okay just before we continue we are going to define the main interface of our program and we are going to call it the main widget you will write class main widget and it will inherit from the widget class semicolon pass and you need to include kv dot uix dot widget dot widget again take care here it's an upper case and if you are on visual studio code you will need to write this line here we still need to complete a few steps you are going to create a new file you will right click on the name of your project don't right click on vrv but create your new file here it's not going to be a python file it's a file and you will call it with the exact same name of your application the lab but you don't put app after you will just put dot kv like kivy this file make sure that this file is in the same directory as the main python file this file will be the definition of our graphical interface it's inside that file that we will explain what we want to display it's also possible to create our graphical interface and directly from the code but you will see that it's more easy to do it directly from the kv file and it's also interesting because you will make a separation between your graphical definitions and the logic of your code inside this kv file we are going to explain what is the main interface and for us the main interface is this main widget in the next video i will show you how to add buttons and labels inside our main widget but for now we are going to keep it empty so i will just take main widget and i will put it here at the beginning of the file and put a semicolon so this says that the main interface is the main widget if you start your program you can still see an empty screen this is normal because we did not define anything to display that's all for the base structure of your kv project if you look at some code on internet you will see some differences for example we don't need to call it main widget and also we can use some layouts directly here instead of the widget i will show you how to do that later and also it's not mandatory to use a kv file you can do everything inside the code and in that case you will need to use a function that is called build and that will return directly the main widget however i recommend you to do exactly what we did here and to use a kv file and that's all for the configuration of our project let's continue everything is okay for the installation of tv at this stage if you had any issues first try to search for your error on google and if you don't find any information write a comment just below this video with your exact error message and i will reply you okay just before we continue let's download the resources pack for this tutorial you will find the link in the description or you can directly go to my website code with jonathan.net resources tv in this zip file you will find some images sounds and fonts that we will need later and also all the source code of the project so that it can also help if you are getting some errors because you can compare your source code and mine and spot any differences okay let's move to part number one in the lab project i will first tell you more about that project and then we will go straight into the code let's do it the lab project layout version this is a beginner project i'm going to show you a demo of this project right now first we will learn how to display some widget on the screen like buttons and labels and to change some properties like the colors the position and the size then we will create some examples on how to organize our content stacking vertically stacking horizontally using some grids and embedding previous content and also generating items by writing some codes and to use a scroll view the objective is to start your practice about kivy you will learn about the base structure of a kv project and you will learn how to use kv files where we can describe our user interface then i will show you how to use some basic widgets like the button and the label and to modify some of their properties but the most important is to learn how to create interface that can adapt to every screen size desktop mobile and tablet and that's where we are going to learn and focus mainly about the layouts also as a good practice we will use size and position that use only density independent pixels i will explain you how to do that the steps first create the project and learn about the base structure of qv project then i will show you how to display some widgets and then we will focus on placement strategies layouts concerning the layout we will progress in six steps step number one box layout box layout makes it possible to stack the elements vertically or horizontally second step onshore layout you can put your content in every corner of the screen or in the center third step grid layout you organize your content with a number of columns or a number of rows step number four stack layout stack layout is another way of stacking the items but you will go to a next line and it can also stack items of different size step number five i will show you how to use a scroll view to be able to scroll when the content is bigger than the window size we can scroll vertically or horizontally and step number six page layout i will show you how to reuse some of the previous examples that we have created and to show them like a book we will be able to slide from one side to another to display all different layouts other layouts exist in kivy you have the float layout the relative layout and the scatter layout concerning the front layout it's quite close to what we are going to see in the first part by using the widget so i did not reuse it here in the examples the relative layout has only an interest when using with a canvas so we will use that layout in the canvas section of this project and the scatter layout is very specific to particular use that is not relevant here so i did not use it in my list are you ready to start with this project let's do it now we are going to see how to display something in the screen we have our black screen and now we want to add some content i will show you how to add a button and also a label and we are going to add that inside our main widget because our main widget is our main interface so now i'm going to show you how to define the main widget and how to explain what we want to display inside our widget to do this we are going to use this syntax to explain this is the definition of our main widget and inside i'm going to use the tab and then i will say we have a button so you will use button with a b uppercase semicolon and inside the button again you use the tabs you can use some properties for example text semicolon and then we put a value for the text for example hello take care because in the kv file we never use the equal sign we don't write that we use only the semicolon okay let's start this you can see that in our window we have our hello button at the bottom here and we can click on it we don't have any action on the click button yet i will show you later how to manage the click of the button just a small thing before i comment on the button sometimes with spy charm you will see that when you start your program your window will not be selected it's going to be greyed here and it's not going to be possible to click on the button if this happens you just select pycharm again and select your window again and it will be okay this is only related to pycharm and this does not affect the fact that your program is working correctly okay let's go back to the button you can see the button is displayed on the lower left part of the screen and even if i resize my window it's always the case that's because the default coordinates are 0 0 0 for the x and 0 for the y when you increase the y you will go upper and when you increase the x you will go on the right the default size for the button is 100 pixels and 100 pixels so let's change that for example i can use the size property and i can give 400 pixels width and 200 pixels height let's try it you can see that this time my button is bigger okay and we can also move the button by using position position for example 100 for the x and 200 for the y okay so we change 100 here and 200 here perfect let me show you something important all the dimensions here the size and the positions are in pixels but because we are going to work on multiple platforms computers mobile phones tablets you will see that the screens have different pixels density and for example 400 pixels will be displayed very big in some screens or very small in other screens depending on the pixel density and we don't want such difference between every display we want something more homogeneous so you are not going to use the pixels but always the mdp done ct independent pixels to use the dp you are going to use this syntax dp 400dp dp okay and for the position it's going to be the same 100 p 200 dp so 400 dp is a lot and i'm going to show you 40 by 40. the size ndp corresponds to a physical size for example if i use 40 by 40 dp for my button and if i start this it's going to be the size of a finger you see this my window is like deactivated so if it happens to you you click on pycharm window and then you click again on your window and now it's working and now i can click on my button that's what i told you previously so to go back to the dp 40 dp by 40 dp is the size of a finger touch okay and it's going to be the exact same size on every device if we start this on a mobile phone on the tablet it's going to be always the same physical size okay let's have a bigger size here 100 and for example 80. and let's add another button to do this i'm just going to copy paste this button and i will say text hello to if i restart my program you can see that we only see hello to button and that's because it is at the same position and the same size of the first hello button it's just on top of the previous button and this is because you first draw this button and then this second button on top so we need to change the position for example for position 200 and 300 and let's see what it gives so now my second button is displayed here let's continue so now we use only the button widget i'm going to show you how to use a label for example i'm going to change this button by a label the label only displayed text on the screen and it used the same properties as the button so we can reuse text property and the size and the position and if i start this you can see that now i display a label the label does not have any interaction with the user it's just a display on the screen we can use also some other properties like the color color is going to be rgb a g b red green blue and a alpha so you need to separate with a comma and for each component you are going to give a value between 0 and 100 so it's going to be between 0 and 1. and if you want to be halfway it's going to be 0.5 for example here i want to display a right color so i'm going to give 100 red zero percent green and zero percent blue and for the alpha i will say that it's 100 percent visible if i do this you can see that my label is displayed in red i can also apply this property for the button so i can copy paste this and let's say that for the button we want something blue so i will put blue here red green blue okay and you can see that the text of my button is blue for the background of the button i will show you later in this course how to change the color or how to display an image in the button that's all for now for the display of these first controls i will show you later how to use other widgets and also how to use other properties but now let's focus on the layouts because you can see that if i resize my window then the controls size and positions are not adapted to the window and that maybe i cannot see everything that i want to display with the layouts we are going to have a placement strategy to have a display that adapts to every screen size let's start with the layout first i will show you how to use a box layout and i will show you how to use it by writing the code in python and also by using the kv file so you will see the two syntax let's go back to the project previously we have created our main widget it's our main interface here and we have displayed a button and a label so now we are going to create a new class that is going to be our box layout example which is not a widget but its box layout okay and i can write pass for now we need to import box layout in key ui x and box i would import box layout okay how can i change my main interface if i start my program i can still see my button and my label coming from the main widget so i need to replace my main interface by the box layout example the main interface can be either a widget or either a layout if i restart this time i have an empty screen so now we are going to add some buttons inside our box layout i will first show you how to do this with the code and then with the kv file usually we only use the kv file but here i want to show you the two syntax and you will see that in some case it's useful because later with the stack layout for example i will show you how to add 100 button and we will use a loop inside the code so for some specific case it's useful to know the syntax in the code first let's create the init function def init our constructor take care because with kv the constructor takes also another argument star star key w args we are not going to use this argument but it is for the internal working of kiwi so it's like this when you use super but init and you also pass star star kw arcs okay here in the init i will create a first button for example i can use b1 variable it is going to be a button and button we need to import it in tv uix button so this line also i can pass some properties to my button i can pass them directly in the constructor of the button for example text equal a you remember previously that we created button in the kv file this way we use a text property but we use semicolon to give the value here in the code we use the equal sign the names of the widgets and the name of the properties are the same with the kv file okay so let's create also a second button button number two with the text b how can i add these buttons inside my layout so myself self this class is a box layout so we can do self dot add widget i want to add a widget inside my layout i add the button one and also i can add the button too let's restart our program and see what it give you can see we have our two buttons button a and button b and they are very big that's because in fact the layout will use all the space of the window because and that's our main interface here it will take all the window space the box rear root is going to stack the different elements first we gave the button one with a and then we gave the button b so it's going to stack the different elements horizontally as a default behavior but we can also change the orientation i will show you how to do that for example if i add a third button button c that is the number three okay you can see that this next button has been stacked on the right and you can also see that if i resize my window everything is adapted correctly also as a default for the size of the different buttons the size will be equal between all the buttons but we will see how to change that later also the order of the add widget is important for example if i do add widget at the end you will see that the button a is on the right because first i added button b then the c and then the a okay let's go back to this configuration and i'm going to show you how to use the orientation property if i want to change the orientation of my box layout i can do a self dot orientation as a default it's horizontal but if i put vertical you can see that now i'm stacking vertically my different elements okay let's comment all this code and let's do the equivalent of this inside the kv file so i will comment using this syntax okay and because i have removed all the code i need to put pass to say that it's normal that we don't have any code here okay so now if i restart i have an empty screen in the kv file how can i add buttons to my box iot example i'm going to copy this and i'm going to define my box layout example and i will say that inside i have a button button a okay if i restart you can see we have one button taking all the screen then i can add button b and button c and you can see it stacking my three buttons okay and i can also use the orientation property orientation to vertical if i want to stack vertically okay so here we only used buttons in the layout but you can use also other widgets for example i can use label here instead i can use any widget in my layout but i will mostly use the button because it has a background and we can really see where it is located also it's possible to embed other layouts inside a layout instead of putting a button b here i can put another box layout or i can put another kind of layout here we will do that in the next lecture also how can i resize a button you can see that the layout is taking care of the position of the elements and of the size of the element but can i change that previously we saw how to use the size for example so if i say that my button a has a size of 40 dp width and 40dp height is it going to work let's try and you can see that it's not working at all it totally ignored this property it was working in the widget in the widget we could use the size and the post properties and it was working fine that's because a widget is not taking care of the position and the size of the element the layout does so it will as a default ignore post and size properties but you may say yes but we still want to control the size for example we want this button to be smaller than the other button and we may want to change also its position we can do that and that's what we are going to do in the next lecture previously we saw how to use a box layout by adding some widget inside it and you also learned that the layout is responsible for the position and the size of the different widgets and also we saw that we could not use the size property it was not working inside the layout because the layout is controlling the size here i'm going to show you how to use new properties so we can control the size and the position of the elements inside a layout and for this you are not going to use size and position but you are going to use size hint first you can see that i can use the hash sign to do some commands in the kv file size hint is going to be a proportion for example i'm going to give 80 percent for the width and 50 for the height so what do we have you can see that for my a button i get eighty percent of the original reads and i get also 50 compared to the other controls so the percentage is a proportion with the other controls b has a height that is twice the height of a as a default you will have one and one if i go back to one and one i get the normal behavior and for example let's say that i'm going to get only 50 percent height like i just did previously okay and now i'm going to say that b will have twice the height and you can see that now b is twice the height of c height of c is one height of b is two and height of a is 0 5 these size are proportions and you can see that the proportions are kept if i resize the window is it possible to use fixed value for the size you can do that but you need to say you go in manual mode that means you say to the layout you don't want him to manage the size and to do this you are going to use none so i'm going to put none for the reads and for the hate and that way i can use the size property is going to take it into account now if i restart you can see my button is 40 by 40 or for example i can use 160 for example and you can see that the size is fixed for example if i resize the window it's not changing the size also i want to show you that we can write this line a different way and i will comment it okay if i restart my program i will have the default size 100 per 100 okay i can specify separately the width and the height i can write widths 100 dp and i can write the height 60 dp okay let's try it and you can see i get the size that we get previously but now let's say i want to have 100 weeds and only have a fixed height so i can mix between the two i will keep my fixed height of 60 dp but for the width i will keep 100 okay let's try it you can see i have one hundred percent width and i have fixed height now i'm going to show you that we can also change the position for example if i put a width of 50 you can see that my button is display on the left how can i move it to the right i can use plus hint pause hint is also a percentage but it's going to be a different syntax it's a dictionary you will use some components x center x and right for the horizontal and y center y and top for the vertical for horizontal or vertical you need to pick only one you cannot specify x and also the right at the same time and for the vertical you can also pick only one of the three in my case i want to control the horizontal position for these components you need to give a percentage between 0 and 100 it's going to be a value between 0 and 1. for example if i use x and i say x is equal to 0 then my button is displayed on the left like we have previously because the x is the left part of the button and we say it is equal to zero now i say that x is for example ten percent you can see that my button moved to ten percent of the width of the window now i can move to fifty percent now my button is on the right because the width of my button is 50 and because i gave the position of the x to be the center of the window 50 the button is displayed here if i give 75 percent for example you can see my button begins to be drawn at 75 percent and it's a little bit out of the window and of course if i give one 100 percent the button is totally out of the window because the left part of the button is just here at 100 the same way i can use right and right is not the left part of the button but the right part of the button and if i give 100 for the right part my button is displayed here because the right part is here it's at 100 percent and if i give it to 50 you can see my button is here because the right part is at 50 percent of the screen okay i can use also center x to 50 percent now the button is centered because the center x is the center of the button and we say that the center of the button is at 50 percent of the window and it's going to work the same way for the vertical part so for example if i stack horizontally i can just command this or i can write horizontal okay i will remove this property and i will just comment everything here so we get for example just 50 and 50 okay we have something like this and i'm going to say i want to draw my button at the top of the window i can use a post hint and put top to one so the top of my button is at the top of the window 100 i can also use center y equal 0.5 for example okay so it's the same logic for the vertical part that's all concerning the size hint and the pause hint remember that you need to use these properties to control the position and the size inside the layout and if you want to use a fixed size you use a nonvalue and then you can use size property let's continue on the project you will see that the kv syntax is a good way to build up your interface very quickly and it's also possible to create widgets and layouts directly from the code i will show you that in a bit later you might ask me but what can we do with is it only for games or can we make a full application and also is it possible to customize all the interface yes i will show you a bit later how to customize the colors the fonts and the styles of any widget but let me show you first some of the projects that i did with kivy i already told you about the galaxy project that we will do together in this tutorial it mainly uses canvas for drawing the game and some layouts and widgets for the menu another project that i created is mr beat it's a software bitbox that uses realtime audio so that you can play any resumes with any sounds that you want this project is from my python full course if you are interested you can find the link in the description and it will also appear here it uses more widgets and more layouts also the interface is totally styled and polished we have this lcd effect here you can light the buttons it also uses a scroll view for the tracks and it perfectly adapts to any screen sizes the ui is made from a combination of kv syntax and python code it's a good project if you want to go a step further with the tv library also i have published the galaxy and mrbit project on the ios and android store so you can download them and try them right now okay let me show you a last project the pizza project it looks more simple but it is more focused on the data management the pizza menu that you see comes from a web server developed with django so the app is not static it will display the updated data if you add a new pizza or if you change the price of a pizza for example the complete project jungle server plus the tv app is also part of my full python course ok let's go back to our code i will show you how to combine multiple layouts i am going to show you how to embed a layout inside a layout for example here we are going to replace the b button with a box layout containing four buttons stacked vertically how we can do that you remember that our main layout here is stacking three elements button a button b and label c button b we want to replace it and we are going to stack a box layout here instead inside this box layout we are going to put a button b1 a button b2 b3 and b4 and we are going to stack them vertically so i'm going to use orientation in this box layout to vertical if i start it you can see i have my a button first then i stack this box layout containing four buttons and then i stack my c label for this box layout it's only stacking three elements in this button this box layout and this label and inside this box layout we stack all different elements here i have used a box layout inside the box layout but of course you can mix and use different kinds of layouts and also you can embed at different levels inside this box layout i can also put another layout inside and inside so you can have multiple levels of embedding one last thing i want to show you is that we can use a spacing property to space the different items for example here for the box i hoot i can type spacing and give 10 dp so let's see what it gives and you can see i have some space between my different elements and that's all for the embedding of the layout let's continue we have completed the first step with the box tryout and we move to the second step onshore layout so we are going to create a new class class that we are going to call onshore layout example that come from an onshore layout and you will need to import it import qvuix onto our layout onshore layout okay and i will write pass then i will go back to my kv file and i will say that it's going to be the main interface of course if i restart now i don't have anything in my window and of course we are not losing what we did previously if i want to see my main widget i can just replace my main interface here and i can see the previous examples that we did previously okay and later in this course i will show you how to create a menu with multiple screens and we will be able to navigate inside the application to all our different examples but for now we just do it manually okay i'm going to start on the onshore layout let's define it inside it i'm going to put a button with a text that is a okay let's try it you can see that my onshore layout took all the space that will be the case every time for the layout and inside it i put a button that also took all the space so it's not interesting here because i want to change the position of that button inside the screen so we need to give a size to this a button how can i do that i will need to use size hint and i will say i give 10 percent reads and 10 percent hate okay let's try it you see that as a default on the button is at the center of the layout now i'm going to show you new properties that we are going to use only for the onshore layout it's unsure x and unsure y and these properties can get different values for example right left and center for the x and bottom top center for the y as a default it's center and center so let's say that for the x for example i give right and that i don't define the answer y what is it going to give you can see that now my button is on the right and as a default we are still in the center of the wire take care because the onshore layout takes all the space and this just defines where he will place the child elements the widget we put inside but of course if we use two buttons for example button a and button b they are going to occupy the same space it's no stacking here it's not like a box layout the behavior of this layout is different so button b is just above the button a you can see that if i use two and two here my button a is just below okay but for now let's just go back to the previous positions so i'm just going to comment on the button b okay so my button a is on the right center of the screen how can i display it to the top left corner for example in the x i will use left and then i will activate onshore y and i will give top okay so it's top left good okay i can use for example the bottom here and the center for the x bottom center okay so let's keep for example the top and center horizontally this one so i previously show you that the difference elements are not stacked so how can i display two buttons then i can stack my two buttons in a box layout okay and this box layout is going to be displayed at the top center of course i need to give a size to my box layout so i'm going to give size hand to this box layout and to remove size hint in the buttons okay let's try that you see i have my box layout taking 20 percent and 20 of the screen size and inside it i have my two buttons that's all that i wanted to show you for the onshore layout we have completed the step 2 onshore layout and we move to the grid layout with the grid layout you can organize content with columns and rows so let's create our new example grid layout example that comes from a grid layout ok so again you will need to import it import import kv uix grid layout okay so now let's change the main interface with the grid layout and let's define our grid layout example first i want to show you something new we are not obliged to do this we did this to explain that our grid layout example is a grid layout and we need that in the kv file else he will not know about our grid layout example but we can use a small shortcut if we don't want to use the coding python and that's the case here because we will keep it with pass we can just command that and give the parent class directly here in the definition by using the add sign and put the parent class directly that's exactly the same so this time we don't need to use that and of course we could do that with our other example previously except with the box layout example because we wanted to use some code here so finally if you change your miner if you want to implement some code you will go you will need to revert and to remove that and to uncommand this code and write your code here but in this case we will keep it like this grid layout let's add some content button text a and we are going to add a few buttons b and c okay if i start like this it's not really working you can see that the buttons are displayed here because this layout needs two mandatory properties it's rows number of rows or number of columns you must specify one of these two properties for example we say that we have two columns in that case i have a b and then c we have two columns of course if i say only one colon it's going to behave like a box layout we have only one column and if i say we have three columns it's also going to be the same as a box layout except that we stack horizontally so i'm going to put more buttons inside d e and f okay i keep the three columns and in that case i get a grid like this and i can also use the rows it's going to work the same way so i can use rows and say for example we have two rows and i'm going to get this result okay that's fine now let's say that we want to change the size of this first column how can i do that i can resize the a button with a size hint and i'm going to give 50 horizontally and 100 vertically if i restart you see that it's not working because the d button still have a 100 percent so the colon will still use 100 but if i copy this to the d button then because i have the a and the d button to 50 the colon can resize to 50 percent so it's still a proportion but we can have a fixed value if i use none instead and if i use a reads for example 16dp and i copy paste that on the d button let's try it you can see that this time it's fixed value on the left the last thing i want to show you is that again we can embed a layout inside the gray layout and for example we are going to replace the b button so we already know that we can replace that by a box layout for example but we can do even better than that if i go back to my previous examples and for example if i get the box layout example box layout example is also a box layout so i can pick it directly and put it in my grid layout instead of the button b i will put my box layout example and if i restart this you can see that in this cell i have my box i wrote example stacking the a button this second box diode and the c label and this second box layout that stacks the elements vertically so you can see that this is very easy and very powerful that's all that i wanted to show you with the grid layout let's continue on the project we have completed the third step on the grid layout and we move on to the stack layout i will create my new stack layout example and this time i will also create it in the code because we are going to use a kv file but also we are going to write some code so i will do stack layout from stack layout and of course you need to import it okay then i will change my main interface and i will define my stack layout example the stack layout is stacking the elements but not the same way as a box layout the box layout is only in one line and it will make all the elements fit in this one line or one row but the stack layout will stack the items on multiple lines and you need to give the size of each item and each item can have a different size and also i will show you how to change the orientation so let's start by putting a button text and it's going to be a button okay so if i start you can see that here i have an error and why do i have an error can you see it says it cannot parse this line because you should never use uppercase on properties so it's text with a small t okay let's restart you can see that my button is taking all the space because the stack layout does not manage the size of the items so we need to specify a size with size hint and let's say that this button will take only 20 percent horizontally and vertically let's try it so i have my a button at the top left corner and we are going to add some more buttons b and c b c you can see it's stacking the elements this way and if i resize the window the buttons are always 20 of the size of the window so what happens if i add three more buttons d e and f you can see he was able to stack five button of twenty percent because it makes one hundred percent and then he went to the next line perfect so now let's continue and let's add some more buttons but i want to add them with the code because for example i want to add 10 button or 100 buttons so we are going to use a loop so i will keep all my buttons here in the kv file but i will also begin to write some code here def init with also the star star kw x and you have to call super init by passing the kwx okay this is a basic structure for the constructor then i can begin to write my code how to create a button and to add it in my stack layout and we saw that previously i can create a button b button and i can give some properties here so text for example is going to be z and i want to add it in my layout so i can do self dot add widget and i add this b button if i start that you can see that the z button is taking all the space because as a default he will use a size hand of 1 n1 so we need to change that and i can use a comma and size hint equal to tuple that is 20 and 20 let's try again what's interesting here is that you can see that the z button was the first one i did in the layout then i had the abcd and that's because init is called at first so first you will do that and after he will do what is in the kv file okay so just to make it more simple here i will delete what i have in the kv file and i will keep only my z button okay now i want to create multiple buttons so i will use a loop i will loop here for i in range let's say we want to create 10 buttons 0 to 10 and inside my loop for each time we loop we will create a button and we will add it in the layout of course for the text i want to change and i want to display the value of i and because i don't want to start with 0 i'm going to display i plus one to start from one so let's try again you can see i have ten buttons and i can resize my window perfect now our buttons use twenty percent width and twenty percent height what happens if i use a fixed value for the size i'm going to do that so i'm going to put none and none for the size hint and i'm going to give a size property equal to a tuple and it's going to be for example 100 dp in the code you need to use ndp parenthesis 100 and you need to import that import from qv.matrix okay and then i will use a comma for the height and use dp of 100 okay let's try it i restart my program and i have my 10 buttons but if i resize the window you can see that the elements are stacked differently because it's a fixed size of the elements actually i don't need to stack elements of the same size and for example if i change the size here and let's say we use a size variable that is going to be dp of 100 plus we are going to use the value of i multiplied by 10 for example so we have different size for our buttons so i'm going to change that here and you will see that it every button has a different size and we have something like this okay anyway let's go back to a fixed size so i'm going to put back size equal dp 100 size is not the property here it's just a local variable okay i can use any name for this variable so i want to show you a few more things the orientation you can see that we begin to stack from the left to the right and from the top to the bottom but we can change that behavior with orientation property so i can use the orientation property from the code directly or from the kv file on my stack layout i will start with the kv file orientation orientation is not only horizontal or vertical for the stack layout it's a little bit more complex than that you can select two stack you can select to stack from left to right and also from top to bottom and you are going to give a string that is a contraction of that that is left to right and top to bottom this is the default orientation but if i want to start from right to left i can change that and it's going to stack from right to left and top to bottom okay if i change here to bottom to top you can see that it's taking from right to left and from bottom to top and of course i can do the last one from left to right and from bottom to top left to right and bottom to top okay and it's also possible to use this in the code so i'm going to show you the equivalent of that you will do here in your init self dot orientation equal and you put the same value that we did previously okay next thing i want to show you is that we can use a padding value a padding is an internal margin so we can use padding and you will give 4 value the top padding 20 dp the left padding 20 dp then the top padding 40 dp is going to be a clockwise from left top right bottom okay but usually we put the same values for the different area so i'm going to put 20 dp all around and we're going to try that now you can see in this padding effect this internal margin okay so i'm going to remove it and i'm going to show you a last thing we saw previously the spacing with the box layout to put some space between the different elements and i can give a spacing horizontally and vertically for example 20 dp horizontally and 20 dp vertically okay let's try it and you can see i have a margin between all my different elements okay one last thing for example i will go back to the default orientation so i will command that and i will also comment the spacing so we go back to our 10 buttons like this and what happens if i decide to put 100 buttons let's try it you can see i don't have enough space in my window i can expand the window to display more items but i cannot display the 100 items to solve that we are going to use what we call a scroll view that will make the possibility to scroll in the window and that's what we are going to do in the next lecture we have completed the step number four with the stack layout and now we move to the scroll view previously we have created a stack layout and we have 100 items that we cannot display in the window so we are going to add a scroll view so we are able to scroll and see all the items i will go to the kv file and i'm going to create my scroll view example that comes from a scroll view okay inside the scroll view i'm going to put my stack layout example you can see that scroll view does not have a name of layout that's because it's a bit different because it can take only one child in our case the child is stuck layout example so let's move to this interface scroll view example and restart our program we can still see our stack layout but we can still not scroll and that's because we need to explain to the scroll view what is the size of the content so the scroll view can compute how much it has to scroll how can we give the size of the content we need to give a size hint to our stack layout example as a default it has the same size of the window so the scroll view thinks that the content is the size of the window so it does not scroll so we are going to change that and here we want to scroll vertically only so for horizontal i will keep 100 and for the vertical i'm going to say none and i'm going to give a value for example i can give a very big height i'm going to give 4000 pixel as you hate and let's see what it gives so you can see that now i can scroll okay but i'm scrolling too much because in reality the height of my content is smaller than four thousand but it's even worse than that because if i resize my window this way you can see that now the height of my content is more than four thousand so i can still not see all the content what we are missing is to get the height of the content of the stack layout and this height change when we change the size of the window in kivy this height is computed in the stack layout as the minimum height we can use it by doing self dot me minimum height this value is computed in the stack layout and it corresponds to the actual height of the content in the stack layout let's try it again and you can see that this time my scroll is correct and it's just stopping at the end and if i resize my window i can still scroll to the end of the content also the scroll view can work with any kind of layouts but you have to make sure that you specify the size so it can scroll properly and you can choose to scroll vertically like we did or also to scroll horizontally that's all that i wanted to show you with the scroll view let's continue on the project we have finished on the scroll view and we move to the page layout the page layout makes it possible to go from a layout to another one just like a book so we can go from the right to left to go to the next one or to go back by sliding on the other side i'm going to show you that so we are going to create a page layout example which is a page layout and it's going to be our main interface inside we just put a different layout that are going to be displayed as a page so for example we first display the main widget it's not a layout it's a widget but it's going to work also main widget and then we can go with our box layout example and then for example we can go with the onshore layout example and then we will put a last one maybe the grid layout example okay so let's try this you can see that we get some kind of weird animation at the start and i will explain you why we have some strange display with this page layout so first we have our main widget with the hello button and the hello to label okay and you can see that we have something on this side that we can just slide and then we move to the next one which is the box layout example but we can still see that something is displayed on the background especially if i move it here that's because the black parts that you see here it's not black color in fact it's transparent and because we don't have any color in the background of our layouts then it makes some strange display it's something we are going to solve when we will see the canvas section of this project then you can see i can go back by sliding from this side or i can move to the next one and the next one is the onshore layout so once again all of this part is transparent so we can still see the previous layout which is a box the hot example but i cannot click on them anymore and then we can move to the next one so i will show you in this course how to improve the display of this page layout by adding some background colors and also in this course we will see how to create different screens in our applications that's not really the case here here is just a special layout that takes other layouts inside but i will show you how to really make different screen and how to navigate between these different screens and that's all for the page layout let's conclude on the first part of this project so we saw many examples about the layouts it may be a lot of information that we saw here but you don't need to remember everything what is the most important is to understand how works a box layout for example and then i advise you to practice on your site to recreate a new project and to use a box layout to put some elements to change the size to experiment on your side it's very important the syntax of the kv file is the most important also we learn about the syntax in the python code it's something that we will use in some other project but it's something that is less common that using directly the kv file and you can see that the syntax is very efficient and that in a few lines we can display some content of course here the content that will display is not very graphical not very beautiful but that was not the objective the objective was to learn how to place the different content and with all that layout strategies we will know later how to create a screen from a graphical design and that's what we will do inside this project later when we will create the menu for example so practice on your site and also if you want to have more informations you can type on google tv layout and you will find this first link and then you can search in the official documentation if you want to get more details or to see more properties like for example if i go to the box layout they have some examples in python code or they have some examples in the kv file so you may find some extra informations but all the most important information is what i already show you in this section we will continue to practice with the layouts inside this project and also in other project but next we are going to focus on the widgets because now we only use the button and the label widget but many other widgets are available like the image the slider and so on and that's what we are going to see in the next section everything is complete for the layouts but just before jumping to the widgets let me show you a practical example if we look at the mrbits screen how do you think i have created this layout in fact this screen is mostly a combination of box layouts and relative layouts first we have a vertical box layout that allows us to stack what i call the top layout and the bottom layout the top layout is a relative layout so we can use the post hint property to center or to align on the side on the left we have the logo image then for the play and stop buttons we have a box layout centered horizontally and for the bpm it's a box layout aligned to the right for the bottom layout we stack vertically a play indicator widget it's a widget that we create in this project and that uses a horizontal unboxing yield the play indicator shows where you are currently playing and then we have a scroll view it only scrolls vertically and it includes a vertical box layout so that we can insert all the different tracks each track reject is dynamically built from the code so that we can easily change the number of steps that's the buttons you see here and it will stack them horizontally with the mrbit project you will practice your skills both on the kivy library and on the python language we will develop some algorithms to manage the audio part we will create a realtime audio engine we will mix all the sounds and all will be perfectly synchronized at the sample precision we will also analyze our code and rework it to optimize the performances of our program and you will see that it will make a huge difference i already told you this project is only available on my python full course okay let's continue on our project with the widgets section let's do it zola project widget version let me show you a demo of that project you will learn how to use toggle buttons to enable or disable other controls then you will learn how to manage the click of a button and interact with other controls here in this label we use a custom font and then you will learn about the switch and the slider the progress bar and also text input after that i will show you how to add some image and how to control the display the objective is to continue learning about kivy and we are going to practice around the widget how to manage the click of a button we are going to learn how to use new widgets like the toggle button the switch on the slider and how to display images i will show you new things about the kv file syntax like using the properties and the use of the id property to connect different controls we are going to progress with four steps first step is to implement a counter you will see how to manage the click of a button how to use a custom font i will also show you the toggle button and the disable state step number two i will show you the id syntax in the kv file and you will also learn about the switch the slider and the progress bar step number three we will see how to input some text and step number four we will display some images let's start with the step number one let's start to practice with the widgets and the first thing you are going to learn is how to manage the click of a button so we are going to create a layout to put our different widgets for now we are just going to use a button and a label but when we will click on the button we will be able to change the text of the label so let's start and we are going to call this widgets example and we are going to use a grid layout so it's going to be easy to put many widgets inside the grid okay let's say that we have three columns and i will add a button with a text so i need to put the semicolon here with the text click here and we are going to put a label with the text hello and i will change the main interface with my widgets example let's try it you see i have my button click here and i have my text hello now we are going to see how to manage the click of the button and at first we are just going to print a trace here and after i will show you how to change the text of the label when we click on the button on the button you have a property called on press so we are going to add that on press and here we can give some python code so we will call a function here but first we are going to create that function for that i will need to define the class of widgets example so i go back to my main py and i will create that class class with that example it's a grid layout okay so i can remove this from the kv file because the class is defined so shall i define the init function i don't really need the init function because we don't want to create some graphics inside that class we are just using the kv file for the graphic but we want to create a function to manage the click of the button so let's create this function def and we can use the name that we want for example on button click ok inside this function i will just print button clicked and i will use this function name in my kv file on the on press on the on place i want to say that i want to call this on button click function and i need to use a parenthesis here because it's like python code we don't give the name of the function we give the python code that we want to execute when we click on the button the on button click function is defined inside the widgets example inside this one so should i use self no not really because self concern the button if i want to speak about widgets example i need to use root okay let's try it and you can see that if i click on the button i have my button click trace that is displayed here okay we can try multiple times perfect so now let's change the text of the label when we click on the button and for this you are going to use a custom property so let's say that in the widgets example we have a property called my text and that is equal to a string property you need to import that import kiwi properties from qv properties import string property a string property is working like a string so we can give a default value for example hello and i will add an exclamation sign okay so now let's say that my text is used by the label so the label text is going to be my text and again we need to put root.mytext we say that we have a binding that means that the text of the label will always be the content of my text property even if my text property is changed even if you change the content of my text property it's going to be automatically linked here and that's why this kv syntax is very easy and very powerful if i restart you can see that now i have hello with exclamation sign but when i click on my button i will change my text so take care because you need to use self dot my text if you forget to yourself it's going to be a local variable and it's not going to work save my text we can use it like we can use it like a standard string i can do equal to something and i will say you clicked okay let's try it and you can see that if i click on my button i can see you clicked it's as simple as this so remember that this is a binding when i update the content it's going to be automatically updated on the property of my control and also remember the on press property on the button and that you have to give some python code here so don't forget to put the parenthesis that's all for the click of the button let's continue on the project for this exercise you are going to change the code that we have developed here so that we can count when we click on the button so at first it will be displayed one and when you click then it will be two and then three four five okay what you need to do is only to change the code here in the python file you will not change anything in the kv file we don't change the graphics here in your python code you will need to add a new variable count that you will initialize to the value 1 when you click on the button you will increment this variable and you have to make sure that you display the content of your int variable in my text property it's your time it's your time to practice and after i will show you the solution first thing to do is to create our variable so i'm going to create the count variable that i will initialize to 1. then for the text we are also going to display one at first when we click on the button we are going to increment this variable so for example i can use count plus equal one and take care you need to put self to use this variable okay how can i display the content of this variable in self my text i can say it's equal to self dot count how can i convert a hint to a string i can use the str function okay so let's try it you can see i have one when i click on the button i still have one so we have a little bug here but when i click again it begins to count two three four five can you see where is the bug in reality count is equal to one so when i click for the first time i will still display one and i will increment the variable after so i need to increment it before so it's going to be two and then i will display two at the first click let's try it one more time you can see i have one two three so my counter is working great i'm just going to change a little bit text here and i will say count ok so everything is complete for this exercise let's move on to the next lecture i am going to show you a few things about the label and we are going to use a custom font you have access to the download link of this resource folder where you have the fonts directory and this file lcd.ttf you will need to copy that inside your project here in pycharm you can use the main file and do a right click and you will see that option reveal in finder on pc windows it's show in explorer ok so i will open my folder reveal in finder and here i will copy this fonts directory inside my project ok when it's done you will see this fonts directory appearing here inside your project if you are on visual studio code you just go to the folder of your project and you copy paste this folder inside your project folder you will not see this folder appearing in your project but if you have copied the files correctly it's going to work anyway so now let's use a property on the label to use this custom font i'm going to use font name and the name of the file is lcd.ttf with an uppercase here but we also need to give the name of the directory font so i'm going to write fonts slash lcd dot ttf okay let's try it you can see that now my label is displayed a bit and differently but it's very small so let's increase the size of the text font size and let's say we want something quite big so 80 dp for example let's try it so now we have our lcd font displayed on the label okay and i can still continue to change the color for example if i want to use a different color i can say 100 red half green and 100 percent blue and totally visible okay and it's still working well that's all that i wanted to show you about the label and the font let's continue on the project i am going to show you how to use a new widget which is the toggle button the toggle button is like a button but it has a state like a switch on and off let's add this toggle button as the first element toggle button and we are just going to put a text that is going to be toggled so let's see how this button behaves you can see that from the display perspective it's exactly like a button but if i click on it you can see it has a state it's activated and deactivated okay and the standard button is just a click button but it has no state so how can we manage the state of the button to manage the state of the button we are not going to use onpress but we are going to use on state when the state of the button changed we are going to call a function for example root dot on toggle button states ok and i will need to create this new function inside my widget example dev on toggle button state and i will print toggle state let's try it you can see that now when i click on my toggle button i have this toggle state print that is displayed okay but how can i get the state of the button how can i know that it is activated or deactivated inside the toggle button there is a property called state and we want to get that value inside our function so how can i get that i'm going to do something that we are going to use again and again it's to pass the self argument here i'm going to pass the toggle button itself in my function if you go to my function we have self here but self here is for the object oriented programming it's concerning the widget example but the argument itself is going to be the toggle button so i can write toggle button for example or i can rename it to widget and you will see that we will often do that passing the self and getting the widget here so now i can use my widget dot state the state is a string of characters so i can just display it and let's see what we have so you can see that when i click on it when it's activated we have the state down and when it's deactivated we have the state normal so it's not activated deactivated it's normal and down okay so for example let's change the text of the button to on and off how can i do that i can test if with jet dot state is equal to normal then it's going to be the off case else it's going to be the on case how can i change the text of my button previously we saw how to do that with a custom property but look here we already have the widget so we can use widget dot text and change the text property to off directly and i will do the same for on here if i retry you can see that when i click on it i have on then off on and off okay so now i'm going to improve a little bit my display i want to initialize directly the text to off and also to change the size to be 100 dp reads so let's do that at first i will display off and i'm going to have a fixed width of 100 dp so i can use size hint and use none for the width and one for the height 100 percent and for the width i will give 100 dp okay let's try that it's initialized to off and then on and then off okay perfect in the next video we are going to continue to practice on the toggle button with an exercise for this exercise you will use the toggle button on or off to activate or deactivate the counter in every case it will be possible to click on the com button even if it is off but in the case it's off when you will click on it it will not increment the counter it should only be possible to increment it when the toggle button is on i'll let you practice on this exercise it's time to practice on your side when we click on the button we need to know the state of the toggle button because if the toggle button is in normal mode displaying off we should not increment the count and not update the text of the label so we can use a new variable for example count enabled that is going to be false as a default and when we click on the toggle button self dot count enabled is going to be true and it's going to be false again if we switch to off false and then only if count is enabled i will do these lines so i add a condition if self dot count if self dot count enabled then i will increment and i will update the text let's try it you can see that as a default it's off i can click on the button but it's not incrementing now i activate the counter and now it's working i can switch it back to off at any time and on again everything is okay for this exercise let's go a little bit further on what we did previously you can see that you can see that when the toggle is off we can still click on the button i am going to show you how to disable this button so it's not going to be possible anymore to click on it when we are in the off state if i go back to the kv file and if i go to my button i can use the disabled property as a default disable is false that means the button is enabled but if i put disable to true then in this case it's no more possible to click on the button so we are going to change that disabled state depending on the state of the toggle button how can we do that we already have a variable that says if the count is enabled or not so we want to use this inside the kv file for this disabled property to do that i need to have a property so we can use a boolean property and we need to import that so it's kv properties boolean property now that we have a property we can use it in the kv file i will take count enabled and i will use it in the disable here root dot count enable when the count is enabled it's going to be true it means the button is going to be disabled so that's not what we want to do we will need to do the opposite when the count is enabled we want to put false in disable to enable the button but let's just try it like this you can see that in the off state my button is enabled and in the on state my button is disabled how can i do the opposite as this i can use not in front of the property to invert the boolean if it's true it's going to be false and if it's false it's going to be true okay if i retry you can see that in the off state i cannot click on the button and in the on state i can click on it and i can count and also you can use this disabled property on other widgets that has user interaction that's all for the disabled property let's move on to the next lecture we have completed the step number one and we move to the step number two let's continue and i'm going to show you how to use a new widget the switch the switch is working a bit like the toggle button it's going to switch between on and off it will have a different display and also it will use in different properties let's add the switch in our layout i will write switch and then we start to see what we have we have our switch displayed here and we can see we can change it from on to off okay perfect now we have a small display problem here you remember that we gave 100 dp for this button so i will need to give 100 gp for this switch so that the column can have a width of 100 db so let's do that i will copy this size hint and the width and paste it inside the switch let's try it okay so this time my colon is 100 dp and now we want to get the state of that switch it's not going to be your own state it's going to be on active so i will use on active and i will call a function on the widget example that we will call on switch active and i will create that function inside the code here at the bottom def on switch active and because we pass the self which is the switch itself we will get this widget parameter and then i will print the active property print switch plus widget dot active the active property is a boolean so i will convert it to a string with str okay let's try that you can see that if i click on my switch it's going to be true and then false so i can get the state of my switch perfect in the next lecture we are going to use this switch to enable or disable some other controls the same way that we did for the count button that's all for the switch let's continue i am going to show you how to use the slider widget slider widget can be a horizontal bar to select a value between a minimum generally 0 and a maximum 100 or it can be also a vertical bar so let's use the slider i will put it just after the switch slider and we are going to give minimum zero also i need to put semicolon here okay maximum 100 these are the default values okay and let's try it like this so if i restart here we can see that the slider is here i will show you how to get the value but before you can see that at first the position was totally on the left so totally on the left means zero and totally on the right means 100 what happens if i put a default value value to 50 for example then you can see that the position of the slider is on 50. and also i can change the orientation or orientation to vertical okay so now let's get the value of the slider we can use the on value and we are going to call a new function in our class so i will call it on slider value and i will pass the slider here again inside the widgets example class we are going to go totally at the bottom and to use def on slider value self widget and i will print slider and we are going to print the value widget dot value the value of course is not a string it's a number so i need to convert it with str let's try this if i change the value you can see i get the value displayed here so it's 0 at the bottom and it's 100 at the top and we can also see that it's a float value how can i convert it to a hint i can use int here just before the conversion to the string and then if i restart again this time i get an int value okay that's all for now let's continue for this exercise you are going to add a label here and to display the value of the slider so when we will change the slider you will display the int value of the slider that we currently print and you will display it here you will need to add a label in the kv file and you will need to use a new property string property that you will call slider value txt it's your time to practice first thing i will do is to create the new label label and i will put text slider value okay if i restart we can see that we have our label here and we need to display the value to do that we are going to create a new property slider value text which is going to be equal to default value of value for example and we are going to use that in the label text root dot slider value text of course i need to update my slider value text when we change the value it's on the slider value i will do self dot slider value text equal to str int of the widget value okay let's try it we can see that if i change the slider i can see the value of my slider that was the objective of the exercise but now i'm going to go further and i'm going to show you a new syntax that is more efficient and that will avoid using this new property so i will just go backward and comment this also comment this slide and i will use a fixed value in my label for example value okay i start again and you can see that value is displayed and it's no more working ok i am going to use something new it's called id id makes it possible to use a kind of variable inside the kv file and i will say that slider is my slider then i can directly use my slider inside the text property of the label and i can say that i want to bind my slider dot value and of course i need to convert it to a string as simple as this let's try it and you can see that i can change the value of my slider and i can see the value here of course i can convert it to hint if i want it's going to work okay let's try again okay it's working fine and also you can see that we don't need anymore the on value here i will just comment it we are just using it for the print but i'm going to comment it and you can see that it is still working perfect so what we did is to use id and to put a name you can put the name that you want here like a variable and inside my label when i do this we do a binding so automatically when the value of my slider is changing the text of the label will be updated that's a very simple and very efficient syntax that's all for this exercise you are now going to use the switch to enable or disable the slider and you are going to do this only in the kv file for this exercise i don't want any modifications in the python file you will need to use id syntax like we did previously you will need to use disable property and also to use active property of the switch also i want the switch to be activated as a default when we start the program it's your time to practice i want to enable or disable the slider so i will use the disabled property we need to put something here what do we need to put we need to put something depending on the active property of the switch you remember that we use previously this active property which is a boolean and so i will need to use an id on the switch my switch for example okay so here in the slider disabled i will use my switch dot active if the switch is active it will be true so it means disable is true that means the slider will be disabled that's not what we want so we will do not before to have the opposite let's try that okay you can see that the switch is off i cannot use the slider it's disabled when the switch is on i can use it perfect so now i want the switch to be on the on position as as a default so we are going to use active and put it to true and because it's a binding when i will start the program the slider is going to be also activated that's all for this exercise i will show you how to display and use a progress bar and this progress bar we are going to link it to the value of the slider so i want to display it just under the label how we can do that we can stack the label and the progress bar inside a box layout and this box layout is going to be vertical so i will use orientation vertical okay below the label i'm going to add a progress bar for now i don't use any properties let's have a look okay you can see my progress bar is displayed here for now it's just a line but if i use some properties like for example the maximum value to 100 the minimum value in the progress bar is always zero you cannot customize it okay but for the max i give 100 and for example i can use value and give 25 so if i start you can see that the progress bar is at 25 percent now i want to use the value of the slider to be displayed in the progress bar how can i do that i can just copy my slider dot value and paste that in the value of the progress bar let's try it now you can see that we start at 50 and that the value is changing with the slider and that's all for the progress bar we have completed step number two we go to step number three text input we are going to use the text input so that the user can input some text in the interface and we are going to use that just below the box layout i will write text input okay and we are going to start it just like this so we can see this box here where i can enter some text and because we want to keep this column of 100 dp i'm going to resize my text input i will copy size hint and the reads just here ok so i have my text input here and you can see i can type some text i will show you how to put a default text and also how to get the text and display it on a label so let's do that for example the default text is going to be fu so if i restart you can see that the default text is displayed here and i can also change it okay and when i press enter i can change the lines so it's a multiple line as a default i will show you later how to change that but first let's use a label so here i will add a label how can i display the text of my text input inside my label i will use text and here i will use an id my text input and i will use this id my text input not text and if i do that you see that i have a binding that means i display foo and when i change the text input it's automatically updated even if i use multiple lines perfect now let's say that we want to change the behavior and that we want to use only one line in the text input but i will update and i will also update the label only when i will press enter here to confirm the line so let's do that i can use the property multiline and set it to false as a default the text input is multiline if i do this you can see that now if i change the content here and if i press enter the color is changing a little bit i don't go to a next line but the text has been validated but i want to change a bit this behavior because you can see that when i update the text the label is automatically updated i want to update the label only when i will press enter for this we are going to use on text validate this on text validate and we are going to define a new function that is going to be called only when we validate the text that means when we press enter on the line root dot on text validate and i will give the text input with the self and i will create this new function at the end of the widget example class and f on text validate with widget okay i am going to change this binding so i'm going to remove that and we are going to create a new string property in the code so i will copy paste that and i will call it text input str as a default we are going to put foo okay text input str is what i'm going to display in my label so i'm going to write root dot text input str okay so now text input str i'm going to update it only when i validate my text when i press enter so here i will have self text input str is going to take the new text of the widget equal widget dot equal widget dot text okay let's try it so now you can see i have full if i update some content here it's not updating the label but if i press enter it's updated and also what we can do is for example in the text i can add another string here i can concatenate with a string and i can say your name is okay so if i do that your name is fu if i write brian enter your name is brian that's all for the text input we have completed the step number three and we move to the images first thing you will copy the image folder to your project like we did previously you will find that folder inside the resource folder that you have downloaded when it's complete you will see image folder appearing inside your project we are going to start with a new example because previously we have added many things inside the screen so i want to go back from an empty screen we are going to create a new example image example and it's going to be a great layout i'm going to reuse the same thing with three columns and it's going to be my main interface so if i restart and we have an empty screen okay inside i will add an image and to select the image file you will use the source property we are going to display the cake you will first need to put the folder name slash cake dot jpeg okay let's start this you can see that the cake is displayed if i resize the window the image is resized and you can also see that the ratio aspect of the image is preserved so if i reduce the width it's reduced and also if i reduce the height it's also resized but you can see that when i expand the window it's going to be resized of its original size in the file it's not going to expand i am going to show you how to do that by using some new properties so first let's copy this image three times okay so we have something like this and i'm going to use a new property and that is hello stretch and i'm going to give true okay let's see what happens you can see that the second image is now able to straight that means to expand to a bigger size than the original size and why it's not stretching to the first image it's because the three elements have the same size here so it's actually expanding to the size that the layout give to the image okay let's continue with some other properties and i'm going to show you how to use keep ratio as a default keep ratio is true now we are going to give false to say that we don't need to keep the aspect ratio of that image and we apply this to the third image if i restart you can see that strangely it's no effect on that image and that's because this property can only be used with a low straight so you need to specify a low stretch to true and also combine it with the keep ratio to false and let's retry and this time you can see that the ratio is not preserved but the image will take all the allocated space so it's not really rendering well for that kind of image but it's going to be useful for background image like gradients if you look at the files here you see we have this jpeg file and we have also png files and that we will use later in this project the difference between png and jpeg is that png can have transparency jpeg cannot have transparency but it can compress better than the png and that's all concerning the images that's all for the widgets you might ask me is it possible to create an application with multiple screens and how can we go from one screen to another yes it's possible and that's what we call the navigation in qv there is a class named the screen manager you can search on google for screen manager tv and you will find some examples in my python full course i will cover the navigation you will learn how to create multiple screens how to manage navigation stack so you can push new screens and also pop to go back to the previous screen we will also use the action bar and all of this works for every platforms including ios and android okay let's go back to our project and we move to the canvas section you will learn how to draw lines and shapes on the screen let's do it the la project canvas version let me show you a demonstration of that project you can see a new button here canvas and we can access to all the canvas examples that we are going to create together canvas makes it possible to draw some shapes on the screen for example here an ellipse rectangle and also a spring that can adapt to the window widths you will see how to center items how to change the colors and also how to move some shapes on the screen the objective is to learn how to display graphical instructions on the screen like a line rectangles circles and so on you will understand the interaction of the canvas with the widgets you will see how to move instructions on the screen like we will do for the ball and also you will see how to call a function at a regular interval of time we will create an update function that we will call 60 times per second concerning the instructions you will learn how to draw a rectangle by giving a position and a size same for the ellipse position and size and also you will learn how to use the line instructions to draw lines from multiple points and also to draw rectangle and to draw ellipse then you will see the color instruction and give the three components red green blue we are going to add instructions in the kv file but also in the code concerning the kv file you have a sample here you can see that we add the graphical instructions inside a canvas and the canvas is inside a widget it can be any widget like a layout or it can be a button what is important is to remember that the instructions is like a list the order of the instructions are important for example here we have a red color and here we have a blue color on the screen you can see that the circle and the ellipse are red but the rectangle is blue here i have the width which is here the circle is drawn at 200 x and 200 y and 100 radius the width is the thickness of the line in the code it's going to be the same principle but the syntax is different for example here we are going to draw an ellipse at a position and the size and what is important is that we can remember the instruction inside a variable here the ball variable and it's possible to update the instruction for example here we can update the position of the instruction so at the start the ball is drawn at 100 100 but then by just changing the position property on the ball the ball is going to move at 200 100 we don't need to call again ellipse ellipse is already in the screen but the instruction automatically knows that it needs to be redrawn when we change the properties we are going to go forward in multiple steps first step i'm going to show you how to use the instructions in the kv file like the rectangle the ellipse the line and the color then we are going to do that inside the code then i will show you how to do movement like the poll and i will explain you the coordinates system we will see the exception with the relative layout and finally we will improve the page layout by adding backgrounds to the different pages and also we will create the menu for the different canvas examples are you ready to start let's do it okay let's start with the canvas section first thing we will do is to define a canvas example number one so in your main.py you will add a new class class canvas example1 and it's going to be a widget ok and i will add pass inside this class in the kv file you are going to create this example canvas example one okay and inside i will do tab canvas semicolon and i will define this new canvas example as the main interface okay so take care because this first line here is very important that is what we call the main interface so when we will do some other examples like canvas example 2 canvas example 3 you will need to replace it on this first line here to change your main interface okay now have a look because for the remaining of this tutorial the list of files is going to be different it's because the videos are extracted from my full python course however i did not include the navigation part in these tutorials so the list of files is going to be different but it will be very simple because instead of working in canvas example.kv and canvasexample.py you will always work in the main.py and the lab.kv so for example here in canvasexample.kv you will not create new file you will not create this file but you will do this in your thelab.kv file just like we did previously and for the canvas example.py also you will not create this file and you will not use vsi but you will just put your class inside your main.py let's continue and you can see that canvas example1 is a widget that means that for every widget or every layout it's possible to add a canvas section even inside the button a button is a widget so we can add canvas inside a button if you want inside canvas you are going to write the graphical instructions for example rectangle if we start this you can see a white rectangle on the lower left of your screen as a default the color is white and also as a default the size is 100 pixels per 100 pixels we can change the position and the size by using post property and here i will put the position in dp dp of 100 ndp of 200 for the y and for the size i can give dp 150 and also ndp 150 to get a square so let's try it okay we have our rectangle here 100 dp 200 dp and 150 for the size of course we can use pixels directly and sometimes in the examples i will use only pixels but as a good practice use always in dp but as a good practice use always in dp in your programs also take care because the syntax inside the canvas is different than the syntax directly inside the widget let's continue how can i display my rectangle at the center of the screen i can change the position and use self dot center but you can see that if i do that in fact my rectangle is not centered because the position corresponds to the lower left point so i will need to subtract the half of the width and the half of the height so let's do that but before i want to show you something new it's possible in the kv file to define some variables and the syntax is hash semicolon set and then the name of the variable for us it's going to be the size so we can say s and we give the value dp of 150 so here i can replace by s and s so if i restart you can see we still have the same thing concerning the center i can use center x and self dot center y still i will have the same thing here but now it's going to be easy to subtract the values x i'm going to subtract the half s divided by 2 and the same for the y let's try it you can see that this time my square is centered in the window and because you are in the kv file its bindings so when i resize the window my position is automatically updated i show you another instruction which is the ellipse with the ellipse you can draw circle or ellipse and it's working the same way you give the position and also the size for the position for example i will give 200 pixels and 500 for the y and for the size i can give for the width s and for the height s divided by two let's try it you can see the ellipse is displayed here that's all for this first part let's continue i am going to show you how to draw lines with the line instruction the line instruction use different properties we are going to define some points with points and it's going to be a tuple of x and y and x2 y2 to define the different points so let's start from 0 to 0 and go to second point which is located to x equal 100 and y equal 100 let's try this you see that we have a line here starting from 0 0 lower left and going to 100 100 but then we can add some other points for example i can write 200 0. so we have here another segment located at 200 okay and we can also say we want to go to the width of the window self not reads to be totally on the right and go at 100 okay let's try that you can see that we have a last segment that will depend on the window width we can go further in this example and draw a spring that will adapt on the window widths let's do that for example i'm going to create points at every quarter of the window so i will use self width divided by 4 and go to 100 then i will have self width divided by 2 going to 0 then self width multiply by 3 divided by 4 and go to 100 and finally width going to 0 let's try it and you can see we have the spring that adapts to the window width perfect we can also use another property to change the width of the line and i can use here grids and i can say two and you can see that the line is thicker that's all for this example concerning the line let's do an exercise first we are going to create the canvas example 2 so we are going to define this in the kv file with canvas inside ok in the python file we are going to create canvas example two okay let's start the program you can see that we have an empty screen for this exercise you will need to draw a cross you will have a vertical line centered in the screen and you will have a horizontal line centered in the screen and of course if you resize the window it has to adapt always to the center of the screen it's time to practice on your side inside canvas example.kv i'm going to write the lines instruction first line is going to be for example the horizontal line so i'm going to give the points and we are going to start on the left of the window for the x i'm going to have 0 and for the y i'm going to have self dot heights divided by 2. to get the point on the right i use self dot width and also height divided by two okay and we can keep the width to two so the line is more visible let's try that you can see we have the horizontal line and when i resize the window it's always centered vertically perfect let's add the vertical line i'm going to copy this instruction i will delete all the points for the vertical line i start in the middle of the screen so it's going to be self dot reads divided by two if we start from the bottom y is going to be equal to zero then we go to several tweets divided by two and to the point totally at the top of the screen self dot 8 so we have the vertical line and the horizontal line we have the cross that's all for the exercise we continue on the examples you are going to create canvas example number three and i'm going to show you how to draw a rectangle circle and ellipse by using the line previously we already saw how to draw rectangle and ellipse but it was filled of colors now we are going to draw only the line so let's create a canvas example tree and i will go to the python file to create example number three inside canvas example tree i will write canvas and then i will use the line instruction in the line instruction we are not going to use the points but we are going to use new properties like circle circle is a tuple and you will give center x center y and the radius for example i give 200 and 200 for the position and 100 for the radius and i can use the width property let's try that so you can see i have the circle here and i can continue with an ellipse so i will copy that for the ellipse it's almost the same but it's going to be radius x and radius y so here for example you are going to change the position to 500 and 300 and for the radius let's say 100 for the x and 200 for the y and for example we can change the width let's try that we can see the ellipse here okay 100 radius for the x and 200 for the y and also i can draw a rectangle for the rectangle it's going to be the x y width and height so let's try 800 and 100 for the position and for the size 300 width and 208 okay i will keep with two let's try that and we have a rectangle just here perfect now i want to show you how to use the colors color is an instruction i can add my color here inside the canvas color and i will specify air gb red green blue if you want a red color we will give 100 red 0 and 0 for the blue okay if i start this you can see that all the shapes are red and that's because we change the color here and all the graphical instructions after the coloring section that's because the color instructions was before all the other graphical instructions but if i move this one just after the circle then you can see that the circle is white default color and only the ellipse and the rectangle are red okay i will put it back at the beginning and i will show you something more i can use also rgb a with alpha component as a default it's 100 visible but i can use for example 30 and we have something like this also if i want to change only the color of the rectangle i can use another color instruction and let's say that we want to display the rectangle in blue so i will use 0 for red and 100 blue and also 100 visible okay so this time the rectangle is blue previously we use color as a property on the widget but inside the canva color is an instruction it's not a property that you will apply to your circle or your ellipse directly it's a global color property and all the other graphical instructions after it will take this color that's all for this example let's continue i'm going to show you how to use the canvas inside the python code we are going to create a new example canvas example four okay why do we want to use the canvas inside the code for example in some cases you will want to use a loop to display many shapes in the canvas i am going to show you how to use it and we are going to do similar instructions that we did previously inside the kv file we are going to create the init function f init and we are going to call super super init with kw args okay if you want to use the canvas you write with safe canvas and you write the canvas instructions inside this code block for example line instruction with points property and we give the tuple of points 100 for x and y of the first point and 400 500 for the second point also you need to import the line instruction kvgraphics vertex instruction ok let's try that you can see we have the line here and also it's possible to add other properties like the widths equal to okay let's try this we have width equal to perfect i can also continue and use a color instruction color here i will use a green color 0 red 100 grid and 0 blue you need to import color from kv graphics this one okay and i'm going to draw a circle line you remember that for circle we need to use center x for example 400 200 and the radius 80 and i'm going to keep reads equal to okay let's try this here i have an error because circle is a property so you need to use circle equal the tuple with information let's try again okay i have the circle here in green perfect and we can continue we can draw a rectangle the same way that we did previously rectangle it's really the equivalent that we did here if you look at circle it's the same name of the property and it's the same logic concerning the different values for the rectangle it's going to be the same x y width and height so for example 700 for the x 500 for the y and 150 widths and 100 height and we can change the width for example to five and i get a rectangle here okay if we want to draw a rectangle filled with some colors we need to use the rectangle instruction like we did in the kv file at the beginning and we have to give both and size properties so i will give both equal the position for example 700 and 200 and size property equal 150 100 and you need to import rectangle okay let's try that you can see the field rectangle displayed here that's all for this first part concerning the use of the canvas inside the code we are able to draw some instructions on the screen now i will show you how to update the instructions to move them and for example we are going to move this rectangle on the right so let's do that we will add a button on the interface and every time we will click on that button the rectangle will move from 10 db on the right first thing we are going to do is to add the button in the interface i will define the canvas example in the kv file canvas example 4 and i will add a button position for example 100 and 400 and for the text i will say a okay let's try that so now we have a button on the interface and we will need to manage the click of the button by using the on press property we have to create a new function in canvas example four for example on button a click ok so let's create this function i go back to the python file inside canvas example four i'm going to write dev on button a click let's just see if it works so i'm going to add a print foo okay let's try that and you can see that if i click on the button we have foo appearing here so the click of the button is working let's continue now i want to update the position of this rectangle to do this we need to remember the instruction inside a variable for example wrecked variable and it's going to be an instance variable so i can use it in another function here on the button click to update the instruction i have to update the properties on it here it's the position so i will write self.track.pos equal something it needs to be a tuple with x and y and for our first example i will put 100 100. let's try that you see that if i click on the button the rectangle moves to the 100 and 100 position when you update properties on instructions the canva detects that he has to redraw the instruction let's improve that so we can move the rectangle on the right with x and y i can do this get the x and y from the current position and i want to update the value of the x x plus equal for example 10 db and you need to import dp from the matrix okay and now i will build a new tuple with x and y of course it's not possible to do something like this to access to the first item of the tuple and to increment it why because the tuple is immutable you cannot change the tuple so the only way to do this is to assign the property a new tuple here i will give same value of the y but i will update the x to be 10 db more on the right so let's try this when i click on the button you see the rectangle is moving and i can click again and again that's all for this step we are able to move the rectangle on the side but you can see that the rectangle can also go out of the window and we want to avoid that we want that at most it's going to be aligned to the right of the screen and that's what you are going to do as an exercise i'm going to add some variables here we are going to add w for the width and the height of the rectangle and it's going to be right dot size okay also i will add an increment variable that is as a default dp of 10 and that we will use to change the x value and you will need to add a condition to modify the content of this variable so sometimes it's only 5dp if you have only 5dp remaining on the right and it will be 0dp if you are already aligned on the right for the computation you will use self dot reads which is the reads of the window and you will use also x which is the left part of the rectangle and w which is the width of the rectangle so for the right border of the rectangle it's x plus w it's time for you to practice on this exercise i will compute the remaining space with a new variable diff so diff is going to be safe not to it minus the position of the right border the position of the right border is x plus w so let's write this diff equal self dot width minus x plus w the right position of the border and the window width okay if div is less than what we want to increment so it means we don't have much space left we are just going to increment by what we have remaining and maybe it's already zero so in the case this is zero we are not going to move our position it means we are already on the right but if we have only five dp remaining we are just going to move to five more dp to be aligned on the right of the window and if we have enough space we will not go inside this condition and we will move of 10 db let's try this you can see that the rectangle can move and when it reaches the right of the window it just stay here okay if i resize the window it's going to work because self.width is updated okay and if i get a smaller window and if i click on the button we will compute also the right position and that's all for this exercise we saw how to move a rectangle by objecting the position property and now i'm going to show you how to move a shape automatically we are going to call a function with a time interval in this new example canvas example 5 we are going to draw a ball that will move in the screen and that will rebound on the borders canvas example 5 i'm going to take the first lines of the canvas example 4 with the init function and with canvas ok we are going to draw the ball to draw the ball we use ellipse and we use the position for example 100 100 and also the size for example 50 dp and 50db perfect you need to import ellipse here okay so if i start this we can see the ball on the screen i am going to improve the code here i want to define a variable that will be the size of the ball so i will write self dot ball size equal dp 50 perfect and i will replace this inside my code self ball size now i want to display my ball in the center of the window i can use position equal self dot center but you can see that if i use this it's not going to work and that's because in the init function we don't have the size of the window already it's too early in the initialization of the graphics so as a default the window size is only 100 per 100 pixels at that time so we get only 50 and 50 position here and if i resize the window it's not going to change because it's not a binding here it's not like in the kv file it's not going to update automatically it's just a line of code and it has been executed only one time in the init function so we will need to use another function and there is a function that is called on size and that it is called when we change the size of the window so i will write this def on size and it use arg ok and we are going to add a print to print the size of the window on size and i will add width str of self dot reads and the height str 7.8 okay let's try that you can see that when we started the program we get on size with the right size of the window because on size is called later after the init and when i change the size of the window we get the print that is called with the new size of the window so how can i update my code to make the ball displayed at the center of the window i can use an instance variable self dot ball and i will update the position of the ball when we change the size of the window self.ball dot position equal self dot center let's try this you can see it is working but that the ball is not totally in the center of the window because the position is the lowest left point so we will need to subtract the half of the size of the ball so let's do that ball position is a tuple with self center x and self center y and we are going to subtract self ball size divided by 2 and do the same for the y and if i restart this you can see that the ball is totally centered now how can i move the ball we are going to use something new to call a function regularly with an amount of time at the end of the init function we are going to add a new line clock dot schedule interval and we will need to create a new function that we will call update function self.update and we give the time interval if i put one it's going to be called every one second you need to import clock take care here it's not kv clock it's kv properties clock from kv dot properties import clock okay and we need to create the new function def update you can use the name that you want for this function but take care because every function call with schedule needs to have a parameter which is dt delta time i will explain you how to use this parameter in the galaxy project here i will add a print and i will say update if i start the program you can see that the print update is called every second how can i speed up this i can say for example 0.5 so it's going to be called every half second or two times per second if i restart you can see that it is more frequent here so let's change the position of the ball in this update function self ball position equal so i have x and y here and i will say x plus 10 and y okay if i restart you can see the ball is changing but this is quite slow so how can we update that that's because we call it only two times per second and you know that for games we usually refresh 60 times per second 60 frames per second so here i will write 1 divided by 60 and i have my ball moving quite quickly also you can change the speed of the ball by changing the amount that you increment every time for example 4 and you see the ball is moving in the screen that's all for this step the ball can move but now we want that the ball does not goes out of the window that the ball can rebound and that's what we are going to do here the ball is going to move on the x and on the y and has to rebound on the four sides of the screen but first i'm going to define the speed of the ball self.velocity x equal 3dp and for the y it's going to be 4dp and of course every time we call the update function here i will remove the plus 4. the x will be plus equal to v self.vx and the y plus equal to self dot v y and you can see that this time the ball is moving on the x and the y axis perfect for this exercise you will need to add some conditions and you will need to test if the ball is going out of the window remember that x and y are the lower left part of the ball if you want to get the right part and the top part of the ball you will need to use the self dot ball size and you will need to test with self reads the width of the window and self hate the height of the window when you want to rebound we are going to say that the speed is going to be the opposite okay so for example if your ball goes out of the screen on the right you are going to invert the speed so that every time you go to the update function you are going to increment with something negative so you will go to the left side and you are going to do the same principle with the v y it's your time to practice on this exercise if i start the program you can see that first and the ball goes out of the screen on the top so we are going to add this first condition if the y of the ball and i want to get the top of the ball so it's y plus self ball size it's greater than the height of the window 7.8 then we are going to go on the other direction self dot v y equal minus seven v y also the maximum value of the y for the ball is going to be self dot height minus the ball size so if you are above this value i just put the limit on the y and we go to the other side and we rebound let's try this you can see that the ball rebounds and then goes out of the screen on the right so i will add this condition if x plus the right part of the ball so x plus ball size is greater than self dot width then again the maximum value for the x is several tweets minus the ball size and i'm going to invert the v x okay let's try this so now we rebound on the top and we rebound on the right we need to add the two more conditions for the bottom if y is less than zero then y equal 0 and we rebound on the y axis same thing for the x if x is less than 0 then x equals 0 and we rebound on the x axis let's try that okay we rebound also on the bottom again on the top and on the left and if i resize my window we kept the ball position equal center of the window but if i release it's moving again everything is complete for this exercise we are going to create a new example canvas example 6 and i'm going to do some experiments with the coordinates of the canvas and also using the canvas with some other widgets that we use previously like the button and we are also going to use the relative layout so let's do that canvas example 6 pass and then i go to the kv file and i create canvas example 6. we are going to start with a button so i will write button with text a ok i start and i have a button on the lower left of the window button is a widget so i can add a canvas inside my button canvas and i will display a rectangle if we try this we can see that the rectangle is displayed on top of the button and that the rectangle is displayed at the coordinate 0 0. this is because the order of the instructions matters first the button has been drawn and after we have added the instruction of the rectangle we can change the order of the instructions i can use canvas b4 to move this instruction before the instructions of the button in that case the button is displayed on top of the rectangle and also you have canvas dot after i will go back with canvas if i move the button with position for example position 100 100 you can see that only the button moved and not the rectangle however the rectangle is inside the canvas of the button but you need to understand something important here the canvas is always drawn at position 0 0 always it's going to be one exception with a relative layout and i'm going to show you that but first you can see that this is not related to the button if i use a box layout for example i will comment this property you can see that the canvas of the box iot even if we change the position to 100 100 is always at zero zero the only difference will be for the relative layout in that case you can see that the rectangle moved and actually it's not exactly what you think the canvas position is still at 0 0 but the relative layout moved the canvas space to its position the relative layout is the only exception that does this i show you another example if here i use a box layout and i add two button button with text a and button with text b if i restart you can see that strangely the box layout has a small size here of 100 per 100 that's because canvas example is a widget it's not a layout a widget does not takes care about the position or the size of the children so he will give a default size for the box i would which is 100 per 100 if you want to occupy all the window widths we have to do explicitly size equal to the root dot size in the previous layout examples that we did we did not have to do that because it was directly a layout and it was not a layout inside a widget okay but here if i take the size of the widget explicitly my box layout takes all the size of the window perfect now i want to draw a rectangle instead of the a button i can use an empty widget if i replace button by widget i have an empty widget here and i can use a canvas on this widget canvas and i will draw a rectangle okay let's try it we have the rectangle at 0 0 in the canvas and i can use size on the rectangle to get the size of the widget self dot size take care it's not root note size because root is canvas example six root size will be all the size of the window but we want to use only self.size because we want to use only the size of this widget if i restart you see that we have a white rectangle and i can change the color by using a color instruction inside the canvas rgb for example green color zero one zero okay i have a green rectangle how can i do the same for the b button i want to draw a blue rectangle i'm going to copy all this section and replace button by a widget with a rectangle that is blue and you will see that this time the blue rectangle is displayed on the left because the canvas always starts at 0 zero so if you want to move the rectangle we need to give a position to the rectangle and we are going to give self.position to get the position of the widget this time it's working i have the green rectangle on the left and the blue rectangle on the right also we can do the same thing with a relative layout for example if i replace widget by relative layout i can remove the position here because the relative layout will move its canvas to its position you can see that the blue rectangle is still here it's drawn at 0 0 but because of the relative layout it moved to its position that's all that i wanted to show you concerning the coordinates and the relative layout for this exercise i'm going to ask you to draw 3 rectangle blue white and red like the french flag you will create a new example canvas example 7 but this example is going to be directly a box layout and not a widget so i will write box layout here canvas example 7 take care because you need to import box layout ok so you will do this exercise remember that for the white color you need to use one one and one it's your time to practice okay i will add the first rectangle i will copy this relative layout that i will put in the box layout and it's blue then i will use a white one with one and one also you can see that if i add only this one it's going to take all the space of the window automatically because we start with a box layout and not with a widget okay then i add the white one and also the red one everything is okay for this exercise you have completed the lab project congratulations you are now able to create user interfaces in python with the tv library but let's go a bit further with kivy by creating a realworld project part number two the galaxy project version one let's start welcome to the galaxy project it is an advanced project that means you had to follow the previous video of this course and also be able to do all the exercise if that's not the case practice a little bit more and when you are ready you can start on this project what is galaxy it's a game in three dimension or in perspective mode and the player has to move the spaceship on the left and on the right to stay on the track if you go out of the track you will have a game over let me show you a demo of the project so you can see we have a menu we have also sound that says galaxy and when i press start the game is starting with some background music i can go on the left on the right and follow the land i also have the score which is updated and if i go out of the track i go into the game over and i can also restart the program again and again the objectives of the project is to create a desktop windows linux or mac os or mobile game ios and android from a to z you will practice on apps development with kivy especially on the canvas you will learn how to structure your code and to organize it you will improve your debugging skills especially on the errors but also when we want to improve some behaviors of the game so you will need to do some investigation we will need to create some algorithm so you will practice on the land generation but also on the perspective display you will also need to create and implement all the game elements like the land and the ship and you will code all the game logic user actions what we have to do when the user press left when the user goes out of the track you will display the score and trigger the different sounds at the right moment we will progress on three steps first version you will display the grid in two dimensions and then you will transform the display to display it in perspective and finally we will also add the movement to go forward into the level and also to be able to go on the left and on the right step number two we will generate the land i mean the track that we have to follow we will also display the ship and we will manage the collisions that mean we will observe if the ship is still on the track or if it is out of the track and in that case we will just print game over on the v3 we will finalize our project to display the menu trigger the different sounds display the background image and manage the score why did i choose to create this game i did not want it to create another pong or a flappy bird or a classic snake i wanted to create something new i started from this concept of a car game in twodimension with a land generation and i like this idea to practice on the land generation algorithm so i kept this id but i was thinking of something using a grid so we can have different algorithm concerning the land but then i also thought about the visual aspect and i was thinking why not transforming this 2d aspect to a perspective mode then i change my concept of the car to a spaceship and have something in the space and have a kind of different levels where you need to reach a planet something like that so this choice is to avoid the classics like the pongs the snakes to have this learned generation algorithm which is very interesting to learn and to practice on to have an interesting visual aspect and also i don't mean that i created a new game concept it's other games like this that already exist but i never saw any existing tutorials about it so it's something new and exclusive that you will learn into that course how does it works in fact we are going to work in a 2d mode with a grid and then we are going to transform that into a perspective mode we will implement this function later transform perspective do you need to be good at math to do this in fact not really i simplified everything so you just need to understand the compute of proportions for example if i tell you that one us dollar equals 90 of euro how much is one euro in us dollar in that case is 1 divided by 0.9 1.111 if you understand this concept you can follow the mathematics behind the perspective transform else if you really cannot follow mathematic concepts you will be able to follow these tutorials in 2d mode because all of the logic of the game is done in 2d and the perspective is only to change the coordinates for the display how does we have this movement of going forward into the game in reality we are just going to offset the grid vertically so for example if we start with this grid i put two lines in color we will shift it downstairs so we have this impression to go forward into the game again and again and when we will reach this point at the base we will just loop to go back at the initial position so that we have this illusion that the game is always going forward i will explain you that in more details later concerning the ship movement on the left and on the right in fact the ship will be always displayed in the center of the screen and for example if the user press the right key we are going to move the land on the left so that we have this illusion that the ship moves on the right and this principle is going to work also when we press on the left concerning the land generation i have prepared a simple algorithm you will be able to go forward to go on the right or to go on the left and it's going to be random so we will have three patterns just going forward going on the right and going on the left so that we can generate a random and also infinite because when we go forward into the game we have some part of the pass that will go out of the screen so we will recycle it to generate new elements at the top and this is going to be displayed perfectly in perspective so that the player will have to move on the left and on the right to stay on the track we are going to start right now with the v1 you are going to create the project to define the coordinates of the perspective point to generate the grid with the vertical and horizontal lines we will also create the transformation of the coordinates that we can go from the 2d grid to the perspective mode finally we will also implement the forward movement and also the movement on the left and on the right when the user press the keyboard keys on computer or press the screen on mobile are you ready to start let's do it let's create our new project i put the name galaxy and i will use the same options as usual i will click on the create button when it's ready we will add the new python file main and i will begin to write some code class galaxy app coming from the app class and i will put nothing inside i need to import the tv.app not app okay and i will add my main widget class main widget coming from widget and i will put pass inside and import this import kv uix widget ok and of course i need to instantiate my application so i need to use parenthesis dot run okay and i will also add my kv file so i need to add not in the vf but put it here new file galaxy dot kv with the same name as app without app okay galaxy dot kv make sure it is in the same directory as the main.py and my main interface is going to be my main widget so i'm going to put main widget semicolon okay i save it and i can start my application by using the right click run and i have a black screen everything is ready for the creation of the project i want to define the coordinates of our perspective points and the perspective point will be at the center horizontally and at 75 percent of the head here and of course when we will resize the window it will automatically update the coordinates of our perspective points so let's begin by creating some variables perspective point x and let's say it's a numeric property so we'll be able to also modify it from the kv file why not let's see if we need that numeric property 0 and i'm going to copy paste this with y and import numeric property okay so we need to get the size of the window can we get the size of the window from the init let's try def in it and i'm going to call super main widget self dot init okay and i will add a trace print in it i will put my reads it's going to be str from the self dot width okay and the same thing for the height plus str self 8 okay let's try it you see that if i start my program i have init function that is called but we have a width and a height of 100 because it is a default size but of course it does not match the size of my window and also if i resize my window it's not going to work is it going to work from the on parent let's try we get parent on parent is called when we just attach the widget to the app in our case so i'm going to call the same thing here the trace and i'm going to put on parent okay let's try it you can see that i still don't have the size of my window here but anyway let's keep this function because we will need to use them in the project i'm just going to comment in the print and because i have no code here i need to add pass in this function okay it's another function called the on size with star arcs okay and let's try it on on size function on size here you see that i get a size of 1600 and 1200 which matches the size of my window and if i resize it i have the new size and that is appearing here okay so this is a good candidate to compute our perspective point i can say that on size self dot perspective points don't forget to use self here okay equal self dot reads that i'm going to divide by two i want to be at center horizontally and i'm going to use perspective point y is going to be self dot 8 at 75 percent so i multiply by 0 dot 75 and how can i observe when the property change i can use a function name that will be automatically called because it's a property and that is on the name of the property on perspective point x when the value of this property change is automatically called and we need to provide widget and value parameters so value is going to be the new value i can add a print and i will say perspective x and i will print the value the new value okay and i will do the same for on the y okay p y equal this new value let's try it so you can see 1600 1200 and i have 800 for x which is correct and 900 for the y which is also correct so my point is here and it's going to automatically adapt when i change the size of the window is it possible to do it in a different way yes we can do that from the kv file so i'm going to comment these two lines and i will use the equivalent on the kv file here we have our main interface which is the main widget and i'm going also to define my main widget inside my main widget i have these properties so i can use them perspective point x directly in my kv file and i'm going to give a value which is self dot width divided by 2 and perspective point y which is going to be 7.8 multiplied by 0 75 and if i start again my program you can see that it's still going to work you see that the values of my perspective point are automatically updated how is it possible because here we give the value of the width on the head it's because it's a binding when you write something like this in the kv file it will automatically update the value of the property when saved.reads and self.hate will be modified and of course these two functions are going to be called whether the value of the property is changed from the python file or from the kv file so that's all for the perspective point i'm going just to comment the prints and we need to put pass because we have no code inside functions okay and then we can move to the next video now we want to display our vertical line so we are going to display the vertical lines into two dimension first and then we will apply a transform to have the perspective and we will display your line totally from the bottom zero to the height of the window we will have a line at the center and we will have other vertical lines spaced by the same amount that we will compute by a percentage on the width of the window we want our game to adapt to the size of the window so let's do this but first we are going to display only one line to make a first test so i'm going to create a function in it vertical lines that i'm going to call from the init function self not init vertical lines okay i'm going to add a line instruction in the canvas with self.canvas and all the lines will be displayed in white so i will put a color instruction with one one one for white i need to import this tv graphics context instructions don't take this one okay and i will add a line instruction with points take care it's an s at points equal and we are going to give a list of points i need to import this line instruction kv graphics vertex instructions first to make a test we want to make a vertical line that will be at x with 100 so we are going to give x1 100 y1 0 x2 100 y2 100 okay let's save and try this so you can see we have our vertical line at the good coordinates okay i can resize my window it's still display here let's do something more let's display this line always at the center of the window so even when we resize the window it's going to be updated to the right position depending on the window reads how can i do that i have to save this line instruction and i need to create a new variable line equal node and i will do self not line equal line and from that this line instruction is already in the canvas i will just update my line so i'm going to create a function update vertical lines and what i want to do is to give my lines new points points equal my new points and i want to display it at the center of the window so you may say why i don't put the center here like for example self dot weights divided by two yeah why not so let's try that and see what it gave and you can see that my line is displayed here and not in the center of the window why because it took the value 100 divided by 250 that is available at the init here because we call it from because we call it from here or you may say we need to call this function on the on size no we should not do that because if we do that it's going to create over and over new instructions in the canvas and that's not what we want to do we want to create only one instructions so i'm going to remove that from here we want to call it from the init that's correct we create our instruction and then we will just update the coordinates but never call that anymore so i'm just going to update the coordinates in the update vertical lines and this function yes i will call it from the unsize function self dot update vertical lines so what i give x1 i want to give the width here i can go back to 100 for example and here i will compute the center x which is simpler to it divided by two and you need to give hints coordinates else if you have some decimals in the coordinates and the line will be drawn but not totally well so you have to take care about that x1 it's the center x and 0 for the y and then we go to the same x but 100 in our example let's see if it's working well you see that it's at the center of the window and if i resize my window i can see the line is moving and always align to the center of the window so we can just by assigning new points to this line you can see that the display is updated and you may say okay but why we did not update it only the y here and do like points of zero equals something because if you do that it will not trigger the update of the display so what you need to do is to give a new value to this points property okay so now that we have one line working and adapting to the size of the window we want to have our multiple vertical lines and we are going to start from the center line but we will have lines on the left and lines on the right we are going to define the total number of lines and we are going to define also the spacing between the different lines and it's going to be in our case 10 percent of the total width of the window okay let's do this i can delete my line because we will now manage multiple vertical lines it's going to be a list of lines and i'm going to create different numbers that we want vertical and b lines for example seven lights of course we will be able to change that numbers laters if we want and vertical lines spacing that's space between the different lines and why i don't give a value in dp are in pixels because imagine if you're on an ipad or phone it's going to be different display size so we need to adapt the size of our game depending on the size of the window so i have to give a percentage on the width of the window i will say that it's going to be 10 0.1 percentage in screen widths okay perfect in the init i will initialize my different lines so here i don't want to do that anymore but i will just add the different instructions in the canva i will not give any points i just want to create my lines and later in the updates i will reassign the points to each line so here i just want to do a new line and in a loop of course for i in range 0 2 and b vertical and b lines i will create a line that i will add in my vertical lines up and i put self so in my vertical lines i will have seven lines in our case now when i go to the update function i want to reassign my points to each line so i'm going to command that and of course i will loop same loop for every lines i need to assign the points of this vertical line of the index dot points equal something how can we compute that what we can compute is the x of the central line we can rename that to central line x and what's going to happen for example is that we are going to have this central line here but we need to draw also lines on the left and lines on the right and we will have three lines on the left plus this one four and three lines on the right to go to seven okay so what we can do is to have an offset that will be negative at the beginning and that will be the half of nb lines so we can do divided by two in our case if i do int of this it's going to be three so i'm going to start on the left and in my loop i will increment this offset so i have a kind of index of the number of the line it's going to be the negative 3 line totally on the left negative 2 negative 1 then 0 1 2 3 and i will then compute the x of the line from the central line and the offset so i can compute it here line x is equal to central line x plus the offset the offset is negative first so it's going to be on the left first multiply by the spacing between the different lines so it's going to be self dot v lines spacing but line spacing is a percentage on the window width so we first need to compute the spacing i'm going to write it here spacing is equal to self dot v line spacing multiply by self dot width okay and i will multiply my spacing here okay so first in the first loop i get my offset minus three i get central line x plus minus three the spacing so it's going to be the line totally on the left then i increment my offset so from minus three i go to minus 2 so it's going to be the next vertical line then minus 1. then the center is going to be 0 in the offset so it's going to be at the central line and then we have plus 1 spacing plus 2 plus 3. of course now i need to give my points so x is a line x and i give a 0 for the y then again line x and i'm going to give the self dot 8 so we can draw the line totally to the top let's try that okay you can see i have my different lines something i'm missing you can see that the drawing of the line is a bit weird like we have some lines that are more visible than others is because we need to put the hint here in the coordinates it's important not to have floating numbers okay let's try again so now you see it's better and we have our lines that are displayed and that adapts to the width of the window it's perfect of course we can change these numbers for example i can put less here zero four let's say and we have more lines okay so why do i put a odd number here for example if i put four lines and i go back to my zero one what's going to happen it's because it's not going to be balanced from the center line we have two lines on the left and only one here to make four lines so for this to work we need to have an odd number like 5 7 11 for example so let's keep these values that's all for the vertical lines and let's continue on the project we were able to display our vertical lines in a two dimensional space we use the vertical lines spacing to define the equal space between the different lines and we also defined the vertical number of lines for example here 5 our vertical lines start from a y of 0 to the height of the screen how can we transform that display to a perspective display we already have our perspective point perspective x and perspective y and we want to display our vertical lines this way on the axis when y equals zero we are going to keep the same value of the v line spacing but the more we go closer to the vertical points the more the horizontal axis is going to be smaller to do this we are going to implement a function that we will call transform perspective it will take the 2d coordinates as an input and it will return the transform coordinates for example if i take this line which is going to be displayed here in the perspective i have two points i have this point here point number one and point number two you can see that my point number one is going to be displayed here at the same position but the point number two will be displayed at the same position as a perspective point to go from here to here is what i call the version number one of our transformation function because it's going to evolve in the project we will see that later so how are we going to go from here to here it's going to be mathematical computation of linear proportions if i go back to my perspective representation i have my x and y axis starting from 0 and going to the maximum y of height and maximum x of width this is my display this represents my window i have my perspective x here for this line and perspective y here for the example we are going to take this blue line it has two points point number one here x one x1 y1 this line in the twodimensional space is display as this red line so the other point is here point x2 y2 these 2d coordinates is what i will give to my transformation function as an input first thing we can compute is about the y transformation i want that when the y is at the maximum value which is 8 and which is the case for my point 2 i want it to be at a maximum of perspective y so i'm going to make a proportion here if it is 0 we keep 0 if it is 8 we divide by the height and we multiply by perspective y to be here so my transformation y equal point y divided by the maximum height and multiply by the perspective y also in the chord we will add some condition to avoid going above the perspective y even if you are above the height so if i apply this transform y my point 2 is here now we want to compute the x and you can see that the x is going to be closer and closer to the perspective x here i have my div x and here i have my diff y d x is the same value for point one and point two it's going to be the point x minus the perspective x concerning d f y i'm going to use the transform y so for the point one it's going to be perspective y minus zero so we have the maximum value here which is perspective y for the point two my point two with the transform y is already here so it's going to be zero perspective y minus perspective y d f y equal perspective y minus the transform y how can i compute my x to compute the value of the x you need to understand that the delta of x depends on the y the more we go closer to the perspective points vertically the more my d x will be smaller and if i go halfway vertically my div x will have a value of 50 percent so what we want to have is a proportion variable that is one when diff y is the maximum value perspective y and that is 50 percent when my d5 is at halfway and we are going to apply this vertical proportion to the difference of x and we will call that as a factor y factor y equals the difference y divided by the maximum value perspective y factor y equals 1 in the case of the point number 1 and it equal zero in the case of point number two because we have zero in factor y for the point number two so transform x will not have any difference with the perspective x transform x equal perspective x plus the d x at the proportion of the factor y so multiply by factor y that means that the x for point number one will be here perspective x plus the full and difference because we have a full factor y then for this point in the middle we are going to be starting from perspective x plus the half of the diff x and for the point number two we are going to be here plus zero because of factor y is equal to zero and of course for the points on the left we are going to have a d x and that is a negative so we will add this negative value for the left part this is correct and finally we will return that transform coordinates take the time on your site to look about this and maybe watch again this video and when you are ready we are going to move to the next video to implement this transformation function we have our vertical lines and we have our perspective point and now we want to display the lines in perspective so how can we do that you may say we can take this coordinate here and then we take the coordinate of the perspective point and that's it we trace our lines okay but that's not what i want to do because we will need to trace also the horizontal lines and other elements on the display so i choose to have another approach which is to have a transform function we are going to have a function that will take the input coordinates x and y so we will give the two dimension coordinates in the input and on the output we will get the coordinates in perspective that means if you give this coordinate for example you will have the same in the output but if we give this coordinate here with which correspond to where we trace our 2d line then you will get this coordinate in the output tracing the line like this and by using a transform function we will be able to use multiple transform function that will makes it possible to have a standard 2d transform that will not transform the coordinates and another function to transform in perspective so it's going to be easy to change the display from 2d to perspective very easily i will show you concretely how it works so first what we are going to do is to define a new function that is going to be transform and we will give x and y and this is going to return something and this something is the result of a transform function so we will have transform 2d that will also take x and y and this one does not change anything so it just returns x and y okay so our transform function does not do anything for now but the interest is that we can have another one which is going to be the transform perspective and this we need to implement it okay that's what we're going to do in this video and why do i do this of course the transform function we will need to call it before we display the light we are going to do that but why i do this because we can use either our 2d transform or transform perspective so we can go easily from perspective or from twodimension okay so of course here i return the same coordinate so if i just use the transform perspective it's not going to change anything so interest is what is that we will compute all the coordinates in 2d but just before going to the display we are going to transform the coordinates and how can we do that we are going to compute x1 and y1 that is going to be a self dot transform and it will take the 2d coordinates line x and 0 in our case okay and here we will display x1 and y1 and for x2 and y2 we are going to take the same input so align x for x and save that 8 for the y okay so i can put x 2 and y 2. ok so if i start my program again of course it's going to be the same thing because we don't change the coordinates here perfect so let's begin to write this function and what we want to do is this instead of drawing until the top we want to draw until the perspective x and y first let's compute the y so for the y if we give 0 we will still stay here but if we give the window height it's going to have a result of the perspective y okay so we need to make a proportion to go to this maximum value that means here i will write transform y that is equal to my value of the y that i'm going to divide by the self dot hate self hate is the height of the window okay so when the y equals the maximum value which is the height of the window it's going to be a value of 1 here 7.8 divided by 7.8 equal one and this value of one i want to multiply it by the self not perspective point y so when i reach the maximum of the window in fact the return coordinates in fact the return y of the transform function will be here and if i go above then i'm going to be stuck here okay so if the transform y is greater than the self perspective point y is going to be equal to that we cannot go after the perspective point okay so i can begin to return this new coordinate here in my transform perspective make sure that you use this transform perspective function and if i try it you can see that this time i'm stuck here okay it's no more going to the top of the window but to 75 percent perfect also i'm going always to return inch coordinates in the 2d and in the transform perspective so we are sure we use nonfloating coordinates ok it will not change much in my case perfect now let's compute for the x position what do we want to do for the x position for example if we take this line you can see that the more we go to the right to reach this x point of the perspective point and how can we compute that what we will look is at this x coordinate of the perspective point and we will compute the difference here it's what we will call the d x is going to be 100 percent when the diff y because the d5 is going to be perspective y minus the current y coordinate is going to be equal to the maximum value which is perspective y so when we have 100 percent difference and the more we decrease the percentage of hate proportionally the more we are going to decrease the difference of the if x so let's write the diff x and diff y d f x it's going to be the value of my x for example this value here that is greater than the x of the perspective points so it's going to be x minus first minus f dot perspective point x but if y is going to be perspective point y because this is a greater value here and our y is smaller minus r t l y not the y because the y can go to the window height but we want to have the proportion until the perspective point y so that's why we need to use the tier y what is the proportion why proportional will be equal to 1 when we are at the bottom when d f y equal to perspective point y okay and it's going to be equal to zero when if y equals zero so it's a proportion we want to compute for a y here on this axis how much proportion we have here is going to be 100 percent here is going to be 50 percent and here it's going to be 75 percent and 0 the more we go to the perspective point we must we decrease this proportion because we are going to multiply the different x by this proportion here on the y axis so this proportion y is equal to my coordinate try that i'm going to divide is going to be my diff y that i'm going to divide by perspective point y and you can see that when my div y is zero my proportion is zero but when my diff y is maximum is going to have this value perspective point y so it's going to have a value of 1 okay so my proportion is correct here how can i compute my transformation x we are going to start from perspective point x and we are going to add the difference but the difference is going to be a factor of this y proportion okay so let's try that okay so we agree that we start from here perspective point x and we will add the difference which is the compute here of the difference multiply by the factor of the heights that means if i'm at 50 percent my difference here is only 50 which makes a point here okay so let's try that and you can see that this time it's working well so i can resize my window in every dimensions it's working well i can also change the number of lines and the spacing between the line if i put for example 25 percent between the different lines i have something like this which is more interesting and i can also add more lines for example 15 okay so we have something good and what is interesting of course is that we can change the transformation here i just can uncomment transform 2d and command the perspective so i go back to my 2d display and it's going to be useful when we want to do the development because all the logic of the program will be in 2d and at the very last moment we will transform the coordinates to the perspective so it's going to be far more easy to work like that i just go back to perspective and back to the previous numbers here 7 and 10 percent and that's it for the perspective transform and we move on to the next video we have our perspective line okay i want to do a slight modification i don't want to have a line here i want to have a way here i want this to be centered because for our game we will have our spaceship on the way and not on the line so what you will do for this exercise is that you will shift the x coordinates so that not a line is centered but away first i suggest you that you go back to the 2d transforms so you go to transform and you uncomment the 2d and you go back here and for example you are going to reduce the number of lines of course it's going to work not with a nod number of lines this time but with an even number of lines so i'm going to put four you can see that this line is centered but i wanted to shift everything to the right of the half of the spacing i let you do the exercise and i will show you after the solution so i want this part this way to be centered and not this line so we need to shift by the half of a line spacing to the right how can we do that of course it's not going to be in the transform all the logic of the game is going to be transformed at the end just for the display but we need to modify the coordinates of the lines that we draw in the update vertical lines and for example we can turn the central line x coordinate that's possible to add a half of the spacing here okay or we can just change the offset and to say that the offset is a plus 0.5 plus a half of line because the offset is going to be multiplied by the spacing so in case of starting at minus 2 because in our case we have 4 here it's going to be minus 1.5 then minus 0 5 then plus 0 5 and plus 1.5 okay so you may say yes but i say that we don't use a floating point in the coordinates yes but it's okay here because we are going to multiply by the spacing and after that we are going to remove the floating points so at that stage it's going to be multiplied first by a spacing that is going to be a quite high number here okay so let's try that this time we have a way centered in the window okay it's perfect and we can go back to the perspective mode and this time you can see that we are centered with a way in the middle it's perfect let's add more lines for example 10 lines and a little bit more of spacing and this time you can understand that it's far better concerning our game so we will put spaceship here and we will be able to move it horizontally i will show you that later that's all for the exercise and we continue on the project we have our vertical lines we can display them in perspective it's nice and now we want to display also the horizontal lines i'm going to go back to the 2d display so i will comment that okay and i will reduce the number of lines just so that it's more clear what we are doing here i'm going to go back to four lines and 10 percent spacing so we have this and what we want to do is to display some horizontal lines we are going to have the same logic as the vertical lines we are going to have a number of lines we will start from y equal zero from here and then we will define the spacing for the horizontal lines we will not start from zero to the reads but we will need to compute the x min and x max which will depend on the vertical lines and we will display our different lines with the same spacing so let's do that i'm going to copy paste what we did for the vertical lines and it's going to be h horizontal number of lines i'm going to keep this value 4 and horizontal lines spacing for example 0.2 20 percentage in screen height and i'm going to call that horizontal lines okay and i will have the same logic init function and update function so i'm just going to copy paste that and it's going to be horizontal and the same here for the update function oh re horizontal okay and i will go to take this init and update function and i just copy paste in this code that we will of course change so first the name of the function horizontal okay and the same for the update function in the init it's going to be quite straightforward because it's going to be almost the same thing we are going to loop on the number of horizontal lines and we are going to add in our whole re horizontal lines list the different lines okay that's done for the init function for the update function it's going to be different so i'm going just to remove all this code update horizontal lines i want to loop on the number of horizontal line and what is going to be the line y and the line y is going to start from zero plus something from the index that we are going to multiply what do we need to multiply by the spacing h line spacing which is twenty percent self dot h spacing twenty percent of the screen height yes it's called horizontal but it's for the horizontal line but this spacing is vertical so it depends so it's twenty percent of the height of the window it depends on the height okay i don't need to put a zero plus here i can just delete it so we will need to compute the x min and the x max for now we just put some values in it x mean zero x max equal self dot reads okay we will change that later so here i can put my coordinates we start from the point one is at x min and the line y for both of them and the point two is at x max okay i don't have any offset in this case and that's it so let's try it and see what it gives i don't have my vertical lines anymore and this is maybe because i have replaced some code here update vertical lines update horizontal lines and that's correct it's because i forgot to change here the points of my horizontal lines okay so i was raising my vertical lines make sure you don't have v here and that it's horizontal lines in the horizontal function okay let's try it one more time and now you can see we have our horizontal lines and it's adapting to the height of the window that's good what we need to do now is to compute the x min and the x max because i don't want this part here i want to stop here and this depends on the vertical lines if you look at the code for the update vertical lines you will see that we first compute this offset so we know the position of the x of the line totally on the left so we can reuse that and we are going to keep this computation for the minimum x and the line totally on the left and we will put a minus for the opposite direction of the offset for the maximum for the x max so i'm going to copy these three lines and to paste them here of course in the same logic here i can define a spacing y variable that is going to be my horizontal line spacing multiplied by the height of the window okay i can do that it's the same thing but to go back to the computation of xmen and xmax i'm going to use the central line x plus the offset which is negative it's good because we go to the left it's xmin multiply by the spacing and for the max i'm going to do the same but i'm going to go to the other direction for the maximum offset you may think it's strange because x minions on the left so why i add something we add something because the offset is negative you can change the logic if you want we can change the size and put plus and minus here and to invert the signs here if you want it's going to be the same thing let's start it and see what it gives so now you can see we have the good result we display the vertical lines and it's stopping at the right position it's correct let's try it in the perspective mode i go back to my transformation function and i'm going to and comment the perspective mode we have something like that which is quite good but you may see that it's a bit strange what we have here so let's add some more lines to better see what is the problem that we have put 15 okay let's try that so it's quite nice but you may think why this style is smaller this one seems to be longer yes so we will need to solve that that's one of the problems that we have it's because we have a constant spacing between the different lines here you may think that this spacing is higher than this one but in fact that's not the case if you put your finger on the screen you can see that the spacing is constant here for example i can show you i can measure the height between these two points is going to be 60 58 pixels and if i go between these two points it's also 58 pixels but to have a good perspective impression we will need to change that we will need to update our transform function so we don't have that phenomenon and we will need to change the spacing between the different tiles so that the spacing is not constant i'm going to explain you that in the next videos we have defined a spacing between the different lines and the number of horizontal lines and then we use our transformation function to display it in the perspective space but we have this phenomenon that is we think that the tiles at the front are shorter than the deeper tiles and this is because we kept a constant spacing between the horizontal lines we are going to change that to get another result to get something like this on the right so we have a kind of attraction to the perspective the more we go closer to it the more we get attracted so the spacing is bigger on the front and it gets smaller and smaller between the different slides we previously spoke about the factor y factor y is a proportional vertical factor that means 100 percent of distance from the perspective point and the more we go closer to the perspective point the more the factor will decrease eighty percent from it sixty percent from it forty percent how can we get something like we have on the right the idea is to get a factor why that is smaller than expected that means it's going to go faster to the perspective point so you may say yeah we can multiply it by something that is less than one for example 0.5 so instead of 0.8 we get 0.4 but if we do that and if we multiply 1 by 0.5 we are going to start at 0.5 so it's only going to make the display smaller it's not going to make something like this we want to keep factor 1 for the maximum but we want it to decrease faster than linearly so i had the idea to make the factor multiply so i had the idea to multiply the factor by himself for example instead of having 0.8 here for this line we are going to have 0.8 multiply by 0.8 and it's going to be smaller than 0.8 and this is called the factor squared factor y multiplied by itself so if i take this first value i get 0 64. so it's going to be displayed here 0 6 multiplied by 0 6 equals 0 36 we are going to go faster to the perspective point it's a kind of attraction behavior for this formula this formula makes a kind of attraction behavior and we are going to apply this to our transformation function this is a compute number 2. how does it works so we agree that we have perspective y here this is the maximum value that we can have for the vertical spacing and it's going to be a factor of one i put in yellow the modifications in the transform function i just rename this variable because we will use it as an intermediate value so before i call it the try but now it's a linear y lean y because that's the linear proportion of the y value from the screen head to the perspective y okay so we just use it as an intermediate value but most important is this new line the factor y is multiplied by himself then i get my trx which is the same thing as before perspective x plus the difference multiplied by the factor but the compute is going to be different because the factor has changed okay and most important this new line to compute the try we start from perspective y and we are going to subtract because this is the biggest value we are going to subtract the factor y multiplied by the perspective y that means if we are here with a factor of 1 we are going to start from perspective y minus 1 multiplied by perspective y which is 0. concerning this second line i will start from here perspective y multiply by the factor of 0 64 on this total height so it's going to be here and then we will return these new coordinates let's implement that in the code right now i go back to the project and we previously saw that we had this strange behavior of smaller tiles here okay let's change the transform perspective function it's not going to change anything for the 2d display of course because we are inside our perspective function so i'm just going to rename this value a linear y okay and i'm going to use it here we have a factor y in fact where is our factor y it's what we called previously proportion y so i'm going just to rename this also factor y okay now the new line is going to be factor y equal factor y multiply by factor y okay and i'm also going to compute my t r y which is self perspective y minus is a factor multiplied by the maximum height so yes of course here you may say we can put 1 minus factor and the total multiplied by this is going to be the same thing okay anyway i want to keep like i put on the slide but it's going to give the same results and let's try that so you can see that this time we have this perspective effect we don't have this previous problem but also i want to show you something we can accentuate the attraction because here what we did is to multiply two times factor y but we can also multiply it three times or four times if we want or we can also use a power function paul power function takes the value and we give how many times we want to multiply it for example by two times is what we did before that means this is the same as doing factor y multiplied by factor y two times and we can put for example four times to accentuate the attraction let's try this so the problem is that the spacing is very high between the horizontal lines so we can just change it a bit horizontal line spacing let's put zero one for example okay so we have something like that and we can also have more spacing on the vertical lines for example.25 okay so we have something like this we have a real effect of perspective which is really nice we are going to keep it like this and we continue on the project now we want to have this animation of moving forward into the game how are we going to do that we are going to change the display of all horizontal lines and we are going to shift them downstairs that means we are going to subtract on the y coordinate when we begin to move forward then we shift everything and down you can see that this yellow line goes here and that this blue line goes out of the display and then we continue like this but you can see that if we continue and continue to shift the line after a moment we will have no more lines to display because all the lines will be out of the display that's why we will need to implement a kind of looping mechanism that means when we shift more than the spacing than the vertical spacing between two lines then we go back to the original position to make this shifting possible we are going to implement a new variable that we are going to call current offset y and we are going to apply this offset to all the y coordinates of the horizontal lines we will also need to have an update function that will be called regularly 60 times per second this is our number of frames 60 frames per second and every time our update function is called we will update the offset to increment it and to have the condition also of the loop of course we can also control the speed of the movement for example we can increment per one at every update or increment per two or three so we are going also to define a speed variable are you ready so let's do that right now i go back to the code and i'm going to create my update function so i go totally at the bottom here in the main widget and i will create a new function update function it's a function that we will call in a clock schedule so it's going to give us a delta time variable i'm just going to add a print update okay now we need to call this function regularly so i'm going to go to the init function here and after the init of my lines i'm going to add a clock not schedule interval and i'm going to call my update function with the time interval if i put 1 it's going to be called one time per second if i put 10 it's going to be called every 10 seconds so i want it to be called 60 times per second so i need to divide the time of one second by 60. you have to import cloud from tv properties take care of not taking this one but from qv properties okay if i start my program i can see that the update function is called regularly okay so now what are we going to do in the update function we are going to call the update vertical and horizontal lines in case we want to change the coordinates of these lines we need to update the coordinates so we will do that in the update functions we don't need to do this in the on size anymore take care of putting the pass here because we don't have code anymore why we can do that because even if you resize the window the update function is going to be called anyway so it's going to be refreshed here okay i'm going to comment on the print let's just start the program and see that we did not broke anything okay the behavior is working fine i can still resize my window and it's working so now i want to shift my horizontal lines in the update horizontal line which is called regularly now i'm going to add something so i go to this function update horizontal lines and you see that we compute the coordinates and we have the line y and in the line y i want to add or subtract something because we will go downstairs so i'm going to subtract my self current offset y we need to define this variable and the value of this variable is going to evolve in the update function so each time we will call this update horizontal lines it's going to have different coordinates so let's initialize our current offset y i'm going to give the value of zero here and in the update function i'm going to increment by one this value i need to use self here okay so if i start my program what's happening you can see that it's working okay i go back to the 2d mode okay you can see that we have our lines going down it's nice but what's happening if i put just a little bit lines here for example only five lines you can see that it's going down and after a moment i have nothing more to display because all the lines are out of the screen so i need to do something like a kind of looping but also the speed is quite low so i want to change the speed let's put eight lines for example so we have something like that okay and i want to increase the speed how can i do that instead of adding plus one i'm going to add something else here and it's going to be a value that i will define as the speed and let's say we give four okay then i will increment by self dot speed and it's going to be faster okay and if i go back to the perspective mode you can see that it's also working well and after a moment i have nothing more to display okay so i go back to the 2d mode and we have to implement this looping mechanism i want to go back in the past when my offset is greater or equal than the vertical spacing between two horizontal lines if i go to my update horizontal lines you can see that the spacing is here between two lines okay so i'm going to get this value and if i'm just using an offset with this value of the spacing i can just go back upstairs to that value and it's going to make the illusion of the loop for example i can test if offset is greater or equal than the spacing it's working because the spacing between two lines is always the same and you may think yes but in perspective it's no more the case yes of course but the perspective function is called at the end so we don't care about that we always do all the compute in two dimension and the perspective will be called at the end so for us the spacing between two horizontal line is always constant and always this value if the offset is greater than the spacing what do we do we go back and it's like we shift from one level okay and now if i start my program again you can see that when i go down it's putting a line again here so from this point of view it's always looping and if i add more lines and going above the top of the screen i will not see this phenomenon so here if i do for example 15 lines you see that i have the illusion that it's always looping and it's going to work also in perspective mode of course okay let's try it okay so it's working well my screen recording is in 15 frames per second so it may not look very freed on the video but on my computer it looks very freed at 60 frames per second the behavior is good that's all for this video and let's continue on the project our program is working fine okay we can move forward in the level that's nice but we need to change something very important look in the update function we have this parameter the dt delta time and i did not explain you why we have this in delta time here and how we can use it in fact you remember we said that we want to call this function update 60 times per second in fact it's 1 16 in fact it's going to be called one time every 1 16 of second but it's not going to be as precise as this because maybe your computer or your smartphone will be busy to do something else and when he will trigger the call to the update function maybe it's not going to be as precise as this timing and so you may go from 60 frames per second to a little bit less than that 50 or 30 frames on old machines for example but the problem is that in that case because the update function will be called less regularly the game especially in the speed at which we go forward in the level is going to go slower and so the game is going to be far more easy to play on older machines and we don't want that we want the game to have the same speed in the level even if we don't have the exact number of frames per second how are we going to manage that we are going to use this delta time which is a precise value and of course if finally we spend twice the time that we expected between two calls of the update function we should go forward twice in the time so this is proportional to the delta time let's print the delta time value and see what we have delta time and let's print str of delta time and also i want to print the expected value which is 1 divided by 60 str 1.0 divided by 60.0 okay let's run this and see what we have so i expand the window here okay i stop the program and i go upstairs and i see i get different value of delta time the reference value is 0.016 okay so here we can see that it's almost the right value that's correct so the delta time is a time difference with the previous call of the update function so you can see that it's quite irregular sometimes it's a little bit more sometimes a little bit less sometimes more sometimes less so it's not totally perfect but anyway we want to take this factor into account you see that if i multiply by 60 especially 1 divided by 60 if i multiply it by 60 it's going to be 1 it's going to be around 1 for the delta time so we can try that delta time multiplied by 60 and i'm going to remove the remaining here okay let's try again okay i stopped my program and you see that we have something around 1 sometime a bit above and as i told you for example if you have 1.5 it's like we spend 50 percent more time than expected so instead of using this value saved speed we are going to multiply it by the time factor and for us the time factor is delta time multiplied by 60. okay i'm going to comment on the print you agree that normally time factor should be always 1. but in reality if we spend more time between two update calls for example twice the time let's say 30 frames per second the time factor is going to be equal to two so we are going to add twice the value of the speed because we are twice slower on the machine so at the end per unit of time that means after one second we will make the same progression whatever the frame per second so we need to take this time factor into account even if i think on your machine you will not really see the difference here in fact it's far better to manage the time to have a consistent game on every devices that's perfect and let's move on to the next lecture for this exercise i'm going to ask you to add movement on the horizontal position that means in the same way of using an offset y you will need to use also an offset x to get something that looks like this so we are going to move on the left or on the right up to you okay you will add this movement on the update function and you will need to create these variables speed x for example 3 and current offset x equals zero you need to use this variable in the code of course you will not use it in the transform function but you need to apply it to the vertical lines and also to the horizontal lines you will not need to have a loop mechanism because when we will go at the end of the track it's okay we'll go out of the track that's not a problem we do this exercise because later we will manage the press of the keys so that we can move on the left or on the right i let you do this exercise on your side and after that i will show you the solution so i'm going to define these two variables speed x and current offset x of course if i go to my update function i need to upgrade my offset so i'm going to do self dot current offset x plus equal to the same thing here except that it's going to be speed x so we have our vertical speed which is speed and or horizontal speed okay now where should i use that i should use it to offset the vertical lines so if i go to update vertical lines you can see that we compute the line x so i can also use that to make a plus and put a current offset x in here is not mandatory because we already do that in the transform function okay so let's try that it's almost good you can see that we have this good behavior but we also have a problem for the horizontal lines you see that they are not aligned with the vertical lines anymore and that's because we need to use also this offset in the compute of the x min and x max in the update horizontal lines function so i'm going also to add this offset here and this time you can see that if i start my program again i have the right behavior so you also see that every time i need to resize my window so it's a little bit thing i want to add here you are going to type on google tv window size and you will find this first link on stack overflow and you will see that you have this config set graphic width and hate so you will copy these three lines from kvconfig import config you copy these three lines and you put it at the very top of the file here before any other kv import and that's important so graphic weeds we are going to put 900 and 400 for the height okay let's try that now i start my project this is working and the window size is good that's all for the exercise and let's move on to the next video for this exercise we are going to control the horizontal movement by pressing on the screen on the left or on the right of course it's going to be useful for mobile's phone but for the computer we want to manage the keyboard key press on the left and on the right but we will do that later for now it's just going to be pressing on the screen just before doing the exercise i'm going to prepare some code first i'm going to comment this line of code so we start without any movement when you will press on the left you will go on the left of the land and on the right you will go on the right so i'm going to write some functions here to manage the touch on the screen def on touch down then i will not do anything yet def on touch up when i release the finger okay so here on touchdown you need to know if you pressed on the left or on the right of the screen and what you can do you can look at touch.x which is less than self width divided by two for example if that's the case we go on the left so i'm just going to add a print okay with an arrow and else we go on the right if i do a touch up i'm also going to add a trace up okay let's try that you can see that if i press on the left i see left then up when i release my button and on the right i can see right then up when i release so of course when you keep the button pressed on the left you will move to the left direction until you release your button and on the right it's going to be the same and when you release your button you have no movement on the horizontal axis that means this line that we commented will sometimes add zero or sometime add a value or sometime decrease the value depending on what you are doing here and for that you will need to use an intermediate variable that is going to be the current speed x and it's going to be in zero as a default and on the update function you are going to increment this current speed x self okay so i let you do the exercise right now you need to give the right value for this variable depending on what you are doing here with a touch do the exercise and then i will show you the solution so we need to give a value to the current speed x of course if we release the button we don't want any movement anymore so it's going to be a speed of zero but if we press on the left we are going to give a value here it's going to be the self speed x and on the opposite direction is going to be minus self speed x let's see if it is working correctly okay i press on the left i go to the left in reality the land is moving to the right so i have this impression that i'm moving to the left because the spaceship will be always at the middle of the window okay if i press on the right i go on the right and if i release i have no movement but it's a little bit slow so what we can do is to improve this speed x by 20 by 12 for example okay so i have a speed on the left and on the right this is correct but on the computer we also want to manage the keyboard the left key and the right key so we are going to do that in the next video that's all for this exercise and let's continue let's add the keyboard management in our project on computer we want to be able to press the left and the right key on the keyboard to move in the game in the same way when we press on the screen if you go to google and you type tv keyboard key you will find the first link here how do you check for keyboard events in kivy and then you will see an example that we can use so you can see we get keyboard here with a window request keyboard and then we bind the on key drawn that is in this function and we also give a function when the keyboard is closed because on mobile the keyboard can be open and close but we will add something after so that we only use the keyboard configuration on computer and not on mobile this is because on mobile the keyboard will be displayed on the screen and that's something we don't want so i will show you how to do that first we are going to copy these lines of codes okay and we are going to adapt this so i copy this and i go back to my init function here i'm going to paste at the end of my init function okay but we are going to move the clock schedule at the end of the function i want the clock schedule to start the update when everything has been initialized the window we need to import a window from tv core window okay i don't like this underscore before the function name so i'm just going to change that here and here we need to register the on key up also so i'm going to duplicate this line and put on key up because we need to know when we release the key on keyboard up prototype of the function i'm going to copy paste the on keyboard on is almost the same as the on keyboard on except we don't have the last two parameters on keyboard up and i'm going to put pass inside i don't want to manage this key but i want the left key and the right key and inside we will need to write our own code of course that we will replace in a moment so i'm just going to remove these okay and i have to return true to say okay i have manage and this keypress we are going to do the same on the on keyboard app okay also something i need to add is the unbind of the on key up here okay perfect so what do i want to do in this function the same thing that we do when we press on the screen so i'm just going to cut these to function and to paste it close to the on touchdown and untouch up on keyboard down when we press left we are going to do this current speed equal speed x and also i will comment the prints here we don't use them anymore okay so i'm going to do the same thing here and i will do the opposite here with a minus like we do here and on the on touch up i'm going to put the speed to zero in the on keyboard up okay so let's try it i'm going to start my program first thing i can see is that my window size is not the one we have specified so it's something that has been broken here we are going to have a look at that but if i press on the left arrow key on my keyboard on the left it's working and on the right it's working too and i can still click on the window and it's also still working that's fine so why do i have a problem with the windowwidth if i go totally up in my file i can see that this line has been inserted automatically when i wanted to import the window and i told you we need to do this before any other kv import so i need to move this line just below and i will keep this if i restart you can see that this time my window size is correct okay one more thing i want to add is i don't want to configure the keyboard in the case we are on mobile so we need to define a function that will say if we are on desktop computer or if we are on mobile dev is desktop and for this we are going to use something that is called platform so we can do if platform and you can see that i can import this from kv dot platform okay of course we will check that this is going to be after the kv config here okay perfect platform will contain the name of the platform we are running the program that means it can be linux windows mac os ios android so we will check if platform in linux or windows or mac os x then we will return true we will say yes it's a desktop computer and in every other case it's going to be false okay so i'm going to call this function here if self dot sorry i need to add a tab okay is desktop and in that case we are going to configure the keyboard we don't want to do that in the case of mobile okay and also i will add a breakpoint here so we will analyze what do we have in the platform here i will press on the debugging mode okay so if i put my mouse over here i have the mac os x value so if i step it's going to be true in my case okay this is correct i just restart my program to see if it is still working correctly and i can press my left and right arrow on the keyboard it's working well and also when i touch the screen everything is working perfectly that's all for this video galaxy project version number two at the end of this version two the project will look like this so you can see we have a pass generation i can also move and when we detect that the ship is out of the pass you can see this in game over but the game is still continuing also the speed is very slow here but it's on purpose for this version 2 we will first organize and structure our code we will be able to display the path first we will display one tile then we will be able to display multiple tiles and after that we will generate our pass with the land generation algorithm we will also display the spaceship and check if the spaceship is still on the track if that's not the case we will display game over but the game will still continue at that stage are you ready to start let's do it before starting let's clean and organize our code a little bit because on the main widget we have a lot of functions and a lot of code so i want to separate a bit some functions in some other python files and for example we can move all these transform functions to another file so you are going to create a new python file and you will call it transforms okay now when i go back here i will take transform 2d and transform perspective and i will cut that and i will paste it directly in the transform.py and now you can see that if you try to start the program it's not working anymore because it says main widget has no attribute transform so we need to tell the main widget that it has to include these functions so we need to go inside as a main widget so you can go anywhere inside the class but not outside and we'll just write the code here at the first line inside the main widget and we will write from transforms that's the name of the file import and the name of the functions transform2d and transform perspective okay now i can start my program it's working fine what else can we move i want to move all the user interactions all the keyboards and touch functions so if i go a little bit downstairs i have on keyboard down on keyboard app on touchdown and touch up i want to move these functions on a new file that we will call user actions and i will paste that inside the same way i have to import this from the main widget so from user actions import keyboard up on keyboard down and onto chop on touchdown i can also move the keyboard close function okay and i will paste it at the beginning of the file i also need to import it so i go back here and i will add import keyboard closed perfect let's start again to see if it is still working okay perfect and before we finish on this video i want to clean a bit my code so i will remove some functions that we don't use for example on parent on size and on perspective point x and y we don't use them so let's delete all these functions now that our code is more organized and clean we can continue on the project we want to be able to display the tiles in our games so how are we going to do that here i display the vertical lines for example four vertical lines and four horizontal lines let's say that if i want to display this style we will say that this one is a tile zero and the one just on the right will be the tile one zero it's going to be a coordinate system with x and y for the tiles so this one will be zero one this one minus one 0 2 and this is what i call the tile index t i x t i y and it will be useful to have a function and get tile coordinates that takes this index and that will return the actual x and y coordinates of this lower and left point because if we have this lower left point we can also have the upper right point if we give the plus one x index and plus one y index here so from these two coordinates it will be easy to draw the tile on the screen to implement this function we need to get the coordinates of the different lines and for that we are going to assign some index to the different lines for example on this line we will say that it is a line zero this one the line minus one this one the plus one and the plus two of course if we have more lines we will have the minus two minus three plus four etc concerning the vertical lines it's going to be the same line index 0 line index 1 index 2 ok first we will get the x coordinates of the different vertical lines and we will write this function get line x from index for example if i give index 0 i'm going to get the x coordinate of this line if i give index 2 i will get the x coordinate of this line and after we will also implement the get line y from index for the horizontal lines and this will makes it far more easy to implement get tile coordinates and also we will use this new function to rework the code inside update vertical lines and update horizontal lines so how can we implement this new function here you can see we have the central line x and we have the spacing between two different lines the spacing is the v line's spacing multiplied by the self width if i have an index of 0 you can see that i'm not aligned in the center of the screen but i'm halfway on the left so we will compute an offset that will be index minus 0.5 so the line x will be the central line x plus the offset multiplied by the spacing if i have the index of 0 i have the offset of minus 0.5 so i start from my central line x and then i go left 0.5 times of the spacing and i arrive here if my index is minus 1 i will have the offset of minus 1.5 and that if i start from the central line x i am at minus 1.5 the spacing okay and we also need to add the current offset x which is a global offset when we press on the left and right keys let's go back to the project and let's implement this new function i'm going to write this new function just above this update vertical lines def get a line x from index and so we have this index parameter i will take what we did here okay we have our central line x that we compute from the center of the screen finally i think it would be better to take the perspective x because perspective x is also at the middle of the screen but it will allow us maybe later to change the position of the perspective point so it will be better to write here self dot perspective point x okay we have the spacing and for the offset it's going to be different it's going to be index minus 0.5 when the index is 0 i want to be halfway on the left so my line x will be central line x plus the offset multiplied by the spacing and also plus the current of set x so we have our offset when we want to go to the left and the right when we press the keys okay and i will return this line x of course i can rework my function here so i can delete all of that and i will get the line x from the get line x from index here okay so i don't need to use offset anymore here so what is the index i have to pass here you can see that we have to rework this and the minimum index should not be zero else we will see lines only on the right but it should start halfway of the number of lines for example if we have four lines we'll have minus one zero one and two so we can compute this start index which will be here okay start index is going to be the half of number of lines i'm just going to put int okay so if i have 4 i'm going to get 2 for the start index so i will put minus two but in that case you see that we don't start at minus two we start at minus one so i need to put plus one for my start index and what is my end index and the index is going to be the start index plus the number of lines so for example here the start index is minus one the number of lines is four minus one equals three so i will get three for this value here but that's correct because in the range we will never reach 3 for the i we will reach 2. so we will have this it's going to work if we give from index i let's try it ok so it is still working fine i just want to simplify a bit the program here i want to go to the transform and enable the 2d transform so we can really see what we are doing here and also we are going to disable any movement so i'm going to comment the offset y and the offset x in the update function just for the time that we are working on the coordinates for the tiles and also i will put less vertical lines i will put four vertical lines and zero dot one for the spacing okay so now i have something like this it's correct and also i can update the update horizontal lines because we copy paste what we did previously on the update vertical lines so we can delete that and we are going to compute x min and x max from the new function self dot get line x from index okay the start index we have it it's this value the line totally on the left okay so i can put start index here and for the end index and index it's going to be the start index plus number of lines so for example i have number of lines four start index is minus one so it's going to be three but the maximum index i want here is two so i need to put minus one in this case so i have my end index here okay i can restart my program and everything is working fine for this exercise you are going to implement this function get line y from index so if i give index 0 is going to return 0 if i give index 1 is going to be spacing y and then index 2 is going to be the y value for this line etc okay and so on don't forget to use the current offset y and also you will need to rework the update horizontal line function to use your new function i let you practice on your side and then i will show you the solution just below this function i'm going to implement the new function get line y from index okay if i go to update horizontal lines you can see that we have here's spacing y and that we have already this computation of the line y so i'm just going to copy these lines and that i'm going to paste that okay spacing y equal h line spacing set the distance between two horizontal lines that's correct multiply by the height okay i'm going to delete four and then the line y is the index multiplied by the spacing okay if we have index zero we will start from 0 minus the current of set y you remember that this is offset that we use so that we have this illusion that we go forward into the game and then i return a line y now i'm going to use this function from the update horizontal lines i will replace this line of code with self dot get line wind and i will pass the index i don't need the spacing y anymore so i can just clean it from the code let's start the program to see if it is working well everything is correct and that's all for the exercise let's display our first tile how can we do that for example if you want to display the tile 0 we need to first implement this and get tile coordinates function so we can get lower left coordinate x min and y min if we pass to this function plus one and plus one you are going to get the x max and y max so it's going to be easy to be able to display this tile concerning the canvas are we going to display this with a rectangle not really because in the perspective mode we will need to display something like this so we will need to give four coordinates and for that we are going to use the quad it's not possible with a rectangle because the rectangle use a width and a height only here with the quad we will give 4 points how does the quad works so we have our x mean y min that we get from the get type coordinates zero in that case if you want to get the x max y max we get it from plus one and plus one okay you can see that we have also two other points x min and y max and x max and y min we need to give the four points to the quad so the quad will get a points list in which orders we need to give the points that's up to us but we need to rotate in a way or in the other way but we cannot go from that point to this one or something like this we need to take a point and rotate so in our case this will be point number one number two number three and number four so at first we will put x min y min then this one and then x max y min of course we will need to call our transform function at the last moment that means we will need to use intermediate variable like x1 and y1 so x1 y1 will be the transformation of xmin and ymin and so on let's implement this and display our first style so first thing i'm going to do is to implement this get tile coordinates function so if i go just below that i'm going to write def get tile coordinate and it will take the tile index x and tile index y i need to return the x and y of the tile so x is going to be finally the get line x from the index t i x and the y it's going to be the get line y from the tile index y and we need to return this okay for this first example we are going to display only one tile but of course in the game we will need to display multiple tiles so let's just define only one tile for now so i'm just going to write tile equal none and we are going to give the coordinates here t i x equals zero of course we will change that later so we can check if the different positions are working well okay then i will do the same principle as a vertical and horizontal line i will have a init function so self init tiles and i will have an update function for initials i'm going to copy paste the init vertical lines function so it's going to be init tiles and i don't need to do that okay i will display it as white it's correct and here i will do my self tile it's going to be the quad so i just write quad and i need to import it okay then i will do my update function so i go a little bit downstairs update tiles of course i will need to call this function in the update function so i will just do it right now self not update tiles okay i go back here i want first to get my x min and y min how can i get this i can call self dot and get tile coordinates and i can give the coordinates of my tile t i x and t i y ok also i can get the x max and y max by putting a plus 1 and plus one in the index now i want to give the points to my tile to my quad so it's going to be points equal and i'm going to give the list of points i'm going to have here x1 y1 then x2 y2 then x3 y3 and 4 okay so i need to compute all of this x1 y1 it's self dot transform and you remember that the first point i'm going to put a command here is going to be the one at the bottom left and then the second one is at top left and then we get third point and the fourth point so this one it's x min and y min i'm going to copy paste this line for three times so we have two two three and four okay point number two x min y max it's upstairs point number three x max y max and point number four x max y min okay so i will give all of this let's try it and see what it gives okay my tile at 0 is displayed here that's correct let's change the coordinates so if i go here i will give x equal 1 for example okay we can see it's correct it's displayed at one and zero and i'm going to display at one two okay one two it's correct let's go in the perspective mode to see if it is still good okay i can see it's still one two everything is correct and we move on to the next lecture we are able to display our tile correctly now if i enable the animation again is it still working correctly so let's try it i go back to my update function and here i will enable the y current of set y and here i will uncomment this line with a current offset y okay we can keep this line commented for now but here we will go forward into the level and also i will change a bit the speed here i want to have a speed only of one so we can see what's really happening let's try it you can see that my tile is going back after a moment every time we loop every time the line is coming here at the bottom of the screen we have this loop effect and this is because you remember in the update function we have this looping mechanism so the horizontal lines of the level are always displayed when we reach the spacing between two lines we go back to the initial position and in fact the position of my tile is always correct it's always 0 x and 2 for the y so how can we make the tile going forward every time we loop we need to remember that we loop so we will have a loop index that we will call the current y loop and it's going to be plus equal one i'm going to declare this variable so here current while loop equal zero okay so you can see that if i add a print loop and i can display the value of this loop and i can put it on the screen okay so you see every time we loop the tile go back in the screen so what we are going to do is every time we loop we are going to change the index of the tile on the y axis initially our tile is on index 2 for the y but then when we will first look it's going to go to index 1 then index 0 and so on so we need to subtract the index of our tile from the current loop we already have a function that returns the coordinates of the tile it's get tile coordinates so i can look at this variable inside this function and we will use it to offset the index of the tile t i y equal t i y minus the current y loop so the first time we will loop with the loop we'll have a value of one then we offset the index so here we do the index minus one so the tile will not jump again but we'll go to the next line let's start the program again and you can see that this time every time i loop my tile is evolving in the level and it's working perfectly let's write some code to display multiple tiles how can we do that we need to change this part of code because here we manage only one tile and we put some coordinates here so we are going to change that and to have a collection of tiles with a list here so tiles is going to be the list of the quads and we also need to have the number of tiles for example four tiles and also we need to remove these coordinates because the different types will have different coordinates so we need to have a list of coordinates tiles coordinates okay we will write a new function to generate the tile coordinates but at first it's going to be a very simple generation i want to generate the tiles in the middle of the screen so the first tile will be at 0 then the second one will be at 0 1 0 2 and so on it's going to be a straight line in the middle and of course later we will change that generation function so that we can generate the length of the game okay so let's write the code first i need to change my init function because i need to loop on n beta tiles to initialize the different quads so i go to inside any tiles i need to loop here so for i in range zero to self ambitize i will create quad but i will add it in my tiles list tiles append quad okay and i need to be inside the loop of course we will need to rework the update function because we need to use the tile coordinates but first let's generate the tile coordinates i will write a new function f g narrate tiles coordinates i will use the same loop on the number of tiles and inside the tile coordinates i will append some coordinates inside this list i need to append some tuples so inside the parenthesis i'm going to add more parenthesis for this first generation it's going to be very simple all the x index is 0 and the y index is going to be i so the first tile will be at 0 then the next one at 0 1 0 2 ok to build this straight line of course i need to call this function at the beginning so i'm going to copy that and to paste it here self dot generate tiles coordinates okay just below initials next thing we need to do is to adapt the update function update tiles previously we use this variable t i x and t i y now we need to loop and update the points for every tile so again i need to loop on i in range 0 to nb tiles okay and i will put everything inside the loop my coordinates are in self tie coordinates of i and you remember what we did we put a tuple for each tile that means for each coordinate the index 0 is x and the index 1 is a y index t i x t i y so in my tuple here i will call it tile coordinate local variable and here i will get the x from the index 0 of my tuple and the y from the index 1 of my tuple and to get the x max and y max i will do the same plus one okay now i need to update the tile so it's going to be in the tiles i can do the same as here i will say that my tile is a self dot tiles at index okay so tile dot points equal all the points let's try it okay so you can see i have four tiles displayed in a straight line and of course i can change the number of tiles for example i can put eight and it's going to generate more tiles everything is working correctly and let's move on to the next video let's improve this function to generate infinite tiles so now we are just going to keep the straight line but you can see that after a moment the straight line disappears because we have a limited number of ties so what we are going to do is that all the tiles that are no more visible that are out of the screen we are going to clean them from the tile coordinates and that will make new space to add new coordinates that we will add after so we will make a mechanism to generate new tiles on the fly for example here if i reduce the number of tiles to 4 and when we will implement this solution you will see that new tiles will appear after each loop so we will generate this straight line an infinite way how can we do that you remember that in the update function we have this loop indicator so we will compare does the tie index y is less than this loop then we will clean it from the coordinates and of course we will need to call our generation function each time we change this variable now the generation function has been done in a way we should only call it at one time in the init but we will change it so we can call it in the update function every time we increment the loop so first thing we are going to do is to clean the coordinates that are out of the screen and the condition is at the tile index y so this is what we have in the tile coordinates at one and the condition is that the tile index y is going to be less than the self current y loop okay when i increment this variable it means that the tile that was at 0 is already out of the screen so at the next call of this function we are going to clean it let's implement that and then we will debug to see if it is working correctly so we are going to loop on this style coordinates and because we are going to delete some elements inside this list we are going to start from the end so i will write 4 i in range what is the end is the number of elements in the list minus 1 else we will be out of the list okay and then i will put 1 here because i want to decrement i will start from the maximum value and go to the minimum value but for the minimum value we also want to go to the zero index and because in the range we will never reach the zero here we need to put a minus one so that we can reach zero okay the condition is that if tile coordinates at the index and we select the y it's less than the current y loop then it disappears it's out of the screen so in that case we will just delete it okay and because we will call this function again and again we should not start from zero every time and happen many coordinates we should look how much space we have left in the tile coordinate so we are going to start not from zero but from the number of elements okay of course the first time it will be zero so first time we will fill everything and i'm going to put a print full so we can have a breakpoint here and we will see what happens of course this function we need to call it again every time the current while loop change so it's going to be called one time at the beginning to generate the first four coordinates here this code will not do anything because at first current while loop is zero and of course we don't have any elements in tile coordinates so we are not going to do anything here but here the length of type coordinate is zero so we will happen all the elements at the first call then for the next call we will see what happens so i will need to call it in the update function just after we have updated the current while loop generate tile coordinates okay let's have a look and let's put a break point i will have foo one and four two through one just after the deletion of the elements and foot okay so let's have a look at what we have in self tile coordinates at the beginning we don't have anything okay if i press continue then we generate the elements and we have our four elements zero one zero two zero three it's correct and we have the current while loop which is zero then i will continue the execution we enter the function again we did our clean with current while loop equal to one so now what we have in the list is only three elements because we remove the zero in the y is less than current while loop which is now one okay but now what's happening we want to generate a new element because we have one space so we want to add a zero four and look what will happen here if i step i'm going to add one element because i have the space to add one element but i'm going to add the element at the index i which is not the right value which is 3. so here i will add again the same tile and what i need to do is to have another variable which is going to be the last y so we are going to look in the list what was the last element and we are going to take its y which is 3 in that case and add a plus one and then we will add the zero four and every time we'll take the last one and make a plus one so we can continue the generation this way so let's do that let's say that at first the last y is zero when we start and when we don't have any elements it's going to be zero that's what i'm going to use here instead of the index and of course i need to use last y plus equal one okay but that's not enough for the first time it's going to work and when we remove one element and in that case it means in that case we want to take the last element and takes its y value plus one so let's do that if we have some elements if the length of tile coordinates isn't greater than zero then we are going to take the last coordinates which is in python at the index minus one okay and last coordinate is going to have the x value and the y value and we are going to take its y value in the last y but of course we need to add a plus one so that we can generate next tile okay let's put again the breakpoints and try it okay again the first time we did not generate anything yet tile coordinate has nothing i press continue then i generate my first tiles okay let's continue this time i clean the first one and i got the last y which is four because i took the value three plus one so i get four and now if i step i'm going to add the zero four and then next time it will be the zero five zero six so i will have an infinite line let's continue the execution and you can see that the way is generated automatically and infinitely let's generate the land for our game and we want to generate a random path now we just generate a straight line but we want something that goes on the left or that goes on the right so how can we do that for example if i get a random number and if i say okay we always get a x of zero but if you want to go on the left we'll get x of minus one or plus one so let's try to get a random number that is between minus one and plus one if i type r like random equal random dot round int you need to import random this one we will put the minimum value of minus one and the maximum of plus one both value can be returned in the result it's included okay so i will put this value as a r and let's see what it gives you can see that i have a kind of land generation but we don't get really a pass so it's not going to work well with a ship because for example we cannot go from here to here it's going to be a game over and of course we need to share more than just a corner between some tiles so we will need to add some more tiles to make a real pass so for example what we can do is to choose what we want to do for example go forward it's going to be this first choice just to add the tile and that's what we are doing here if we go on the right it's going to be this style that we use to go for one the same one then a next style on the right and then a next style forward so it's going to be this pattern okay and then we can continue and if you want to go on the left we generate one tile forward as usual and then one tile on the left and then one tile forward so we will have also this pattern what we are going to do is to get a random number 0 1 or 2 and depending on the value of this random number we will generate a different pattern in the coordinates but you can see that for every pattern we still need to generate the next tile the one that goes forward it is common to all patterns in the case we go on the right we'll generate this style on the x and y then on the x plus one and y and then on the x plus one and y plus one okay and so on so let's do it let's say that when we go forward it will be zero when we go on the right it will be one and on the left it will be two so let's implement this solution i'm going to get a random number between 0 and 2. in all case i will need to generate and that one of course it's not r it's the last x we need to manage the last value of the x to continue the pass so in the same way that we have the last y i'm going to have my last x equal 0 and we will also get it from the last tile last x is going to be we don't need to use plus one for this one because we keep the same x and we put zero to get the x coordinate okay now i want to test if r equal one i will go on the right let's put a command here so let's say that 0 is straight that 1 is on the right and that 2 is the left so if r equal 1 then we need to generate a next tile and that will be just on its right you remember the pattern it's like this we have the tile then we have this next style close to it and on top of that we will have the next one so i need to get the last x plus equal one and then i will need to generate the one that goes forward so i will need to have the last y plus equal one and generate my tile okay in the case of r equal to i do a last x is minus one and i will do the same thing so let's start let's try it okay i have a land generation it's quite slow and also what i want to say is that previously is that in this loop we look how much space we have in this tile coordinate for example if we already have three coordinates and we have a maximum number of tile of four we will have only one space but before we used to only open one tile in every loop now it can happen we add three tiles and that we go above the number of tiles but it's okay we will just have more coordinates here than the number of tiles but anyway when the old coordinates the one out of the screen will be cleaned we will make more space and because we check the length of tile coordinates yes it will happen that this value will be sometime greater than the number of tiles but it's okay because on the update function we just loop on the number of tiles and we will just ignore the extra coordinates so we can do that but we need to speed up a bit the game and let's say we put four and also because we need to display more tiles i'm going to put for example eight here okay so now we have really a land generation which is interesting because we have a pass of course we have this effect of generation so if you don't want this effect you add more tiles for example 16 and this time you will not see the generation because it's going to be done very far so we have two issues because you can see that the land generation can go totally out of the track so we need to solve that and also when we just start the program it will be nice to have first a straight line and after begin the land generation else it's going to be too difficult for the player also i want to try by enabling again the keys so i'm going to uncomment this line to be able to go on the left and on the right to see if everything is working well okay i can go on the left and on the right we really have a beginning of game here that's all for this video and let's continue on the project you can see that the land generation can go out of the grid here and i'm going to ask you for this exercise to make it impossible but first let's change a bit the parameters because the grid with only four vertical lines is not interesting for the game so we'll put eight and we will put more spacing dot okay let's try it again so you can see that sometimes the land generation goes here out of the grid and i want you to solve this problem how to solve this you remember that in a function on the update horizontal lines we have this start index variable and end index it gives the index of the line totally on the left and the line totally on the right so you will take these two lines you will copy that in the land generation and you will compare to your last x if your last x is already less or equal to the start index then you will need to go on the right because you are already too much on the left and to go on the right you will force the value of the random value you will not take the random value but you will override it to go on the right and here you will do the same to go on the left i let you do the exercise and then i will show you the solution so first thing i will do is to take these two lines and go back to the land generation in the generate tiles coordinates when i get the random value here i will first have a look okay does my last x is less or equal than the start index that means i'm already totally on the left and in that case i will not take this random value but i will say go on the right so i will force the value of one on the other side if my last x is greater or equal than the end index that means i'm too much on the right i will go back on the left so i will give value two let's try it okay you can see that here i reached the maximum but i did not go over and you will see that even if you wait for a while you will never go out of the grid and that's all for this exercise we are going to improve our game by adding first a straight line and after a moment we will really begin the generation of the pass as it's going to be too difficult for the player if we start directly with a pattern so you will add this straight line of 10 tiles and after that you will begin the generation for this you are going to create a new function that i will call pre fill tiles coordinate okay you will implement this function and you will add 10 tiles in a straight line of course i need to call this function we will call this function only one time in the init and just before the generate tiles coordinate i let you do the exercise and then i will show you the solution so here i will loop for i in range 0 to 10 and i will add some coordinates in self tile coordinates at the beginning this list is empty so i will just append some coordinates inside i need to put my tuple so it's going to be parenthesis inside parentheses because it's a straight line in the center we use 0 for x and we use i for the range and we use i for the y so here i will get 0 1 until 0 9 straight line and after that we will get some code to generate tile coordinates at first it will not generate anything because we already have too much coordinates we are already over the number of tiles but after a moment it will remove some coordinates that are no more displayed on the screen and when we will have more space then we will begin to generate new tiles let's try it you can see i have my straight line and after moment i can begin to play everything is correct for this exercise and let's continue on the project let's display our spaceship on the screen the spaceship is going to be a triangle and we will place it at the bottom and center horizontally of the screen self.width divided by two we will define new variables to define the width of the ship in a percentage of the screen width also the height and also the base y so that it is not totally at the bottom of the screen concerning the canvas we are going to use the triangle instruction we will need three points point number one number two and number three for this exercise you are going to implement the coordinates of these three points for the ship and to add it in the new ship variable that will be our triangle instruction first we will write some code together and then you will do the exercise i'm going to define the new variables so i go at the top of the main widget and here i will create the new ship variable that is unknown and that will contain the triangle instructions so we will need to create an init ship function also i will define the ship width that is going to be 10 percent of the screen so i give you some values that i tested previously that makes the display nice but you can change them of course ship hate which is 0.035 and chip base y equal 0.04 okay let's create the init ship function in it ship we want to use the canvas and this time we are not going to use a white color because the ship will be displayed in black so we will put zero and of course we want to create our triangle instruction and this is going to be saved in our ship variable and we need to import that okay now we need also to create the update function so you may say yes but the ship is not moving it's in the land which is moving yes but the ship is displayed at the middle of the screen because we can resize the window the middle of the screen may change so we need to update the coordinates of the ship dev update ship and this is what you will need to do for this exercise you will need to compute the coordinates and at the end you will do self.ship not points equal x1 y1 x2 y2 x3 y3 and you need to give this different value x1 equal something from the slide you remember that point number one is lowest left and point number two is here at the center and then we have point number three don't forget to use the transform function because here we display on the screen so you will need to call this self transform to help you i'm going to give you some intermediate variable center x is a self dot width divided by two base y which is a y coordinate for the point one and point three it's going to be self dot ship base y multiplied by seven hate and again we don't give pixel dimensions for the ship because if the screen is bigger then the ship will look very small so we need to give percentage on the width and the height of the screen you can also have the ship widths which is going to be self dot sheep weeds multiply by self width but in fact what is going to be interesting for you here is to have the half of the weeds so we will write ship half width and we are going to divide this by two it's time for you to do this exercise and then i will show you the solution so we may write x1 equal center x minus the half width of the ship okay and then we will have y1 equal the base y but take care because we need to call the transform function so what we need to do here is to call it from here transform and so i'm going to give the x coordinate and the y coordinate okay so i can do the same for the other points i'm going to copy paste this x2 y2 x3 y3 for x2 it is at the center x and for the height we take base y and we need to compute the height of the ship so it's going to be ship height equal self ship height multiply by self hate so it's going to be base y plus ship height and for the last one it's going to be the same as the first one but we do a plus on the half width let's try it we see it's not displayed and why it is not displayed because we did not call our functions and let's call the init function should we call our init ship function before the initials or afters initialize in fact it is very important because if we call it before the ship is going to be displayed under the path because the order of instructions matters here so we need to display the ship after any tiles so the ship is above the pass self not in it ship also we need to call the update function update ship that we will call in the update function here just after update tiles self dot update ship okay let's try it you see that this time it's working we have the ship displayed of course we will need to adjust all the speed of the game because now it's not really playable but that's it for the exercise and let's continue maybe you saw that we have a big issue in our game look if i start it if i resize the window especially if the window is very small the game is faster and if i get the window bigger the game is very slow so why do we have this problem for this exercise i'm going to ask you to investigate and fix this issue i give you one hint it's not a problem of performance it's really a problem in our code so try to investigate and at least try to find where does it come from and then try to fix this problem so that the speed is constant when we resize the window practice on your side and then i will show you the solution so clearly why do we have a difference when we change the size of the window and what defines the speed of our game the speed of the game is defined by this variable speed which is the speed on the y axis and also the speed x on the x axis so for example here we have a speed of 4 where do we use it we use it every time in the update function here it means that every time we display a frame of the game we increment our y by this constant value and also we multiply it by the time factor but this is okay so why is there a problem here because we have a constant value for the speed of 4 in this case and 4 is a very big value for a small screen that means for a small screen we increment the y of 4 every time but 4 is a very small value for a big screen so that's why we have a difference here it's because the speed does not depends on the size of the window and that's what we are going to change we need to make the speed depend on the size of the window because we see the speed on the yaxis we need to multiply it by the height of the window so let's do that we are going to define a new variable speed y equal to the speed multiplied by self hate and you may say yes but 4 multiplied by the height of the screen it's a big value yes of course we need to adjust the value of the speed variable and we will need to put something very small so let's take this and multiply by time factor okay we have to do the same for the x so speed x is going to be the current speed x and you remember that current speed x is in fact speed x but it depends sometime it's speed x or sometimes it's zero depending on if we press on a key or not so it's going to be current speed x multiplied by self width okay so now i go back upstairs and i'm going to put a very small value here and see what it gives okay so for the y it's going quite quickly and for the x it's a bit small also what we can do here is that we can multiply by 100 so we will have 1 and 1. it's going to be more relevant value so what we can do in the formula downstairs is to divide by 100 speed y divided by 100 and speed x divided by 100 that means my value here has to be multiplied by 100 so i have one dot zero i said that the speed on the y axis is a bit high so i'm going to put a smaller value dot 8 and for the x we need more speed 3 for example let's try it and let's expand a bit the width of the tiles dot 4. okay so we have something like this you can see i can clearly play in the game it's a bit difficult but i can't play it can i still play it if the window is smaller you can see that the speed is still the same and i can continue to play my game okay if i expand the window it's going to be also the same speed so we fixed our problem and that's all for the exercise let's detect that the ship is still on the track and if that's not the case it will be game over at first we will just print game over to know that the ship is still on the track we will say that at least one of the three points of the triangle is going to collide with one of the tiles i'm just going to put a very small speed for x and y and to show you what it gives in 2d so let's go back in two dimension and let's start the program okay we'll also reduce spacing here between the vertical lines okay we have something like this and what we want to do is to look at the three points of the triangle if at least one point is still on the track it's okay but if the three points are out of the track it's going to be a game over but now we are going to print in a loop game over and later we will implement a proper game over so do we need to test all the tile no we just need to test the tiles that are at the bottom of the screen because the spaceship is always at the bottom of the screen so we will just test the first two ranks here that are defined by the current y loop so we'll test current while loop plus one and of course if at least one of the tile makes a collision what i call a collision is when one of the three points is contained on a tile at least only one tile is needed to say it's okay we are still on the track so let's do that and first we will implement a function to test if the spaceship is colliding with one tile and after that we will make another function to make the test for different tiles okay so i will just write my function just under the update chip and it's going to be def check ship collision with tile and i will give the tile index x and tile index y you remember that we can get the tile coordinates from this function self get tile coordinates and i give the i x and t i y and i will get so x min and y min and if i want to get the max i can just add plus one so i'm going to do like this plus one and plus one okay so now i want to get the coordinates of the spaceship and we have three points so i need to get a new variable to store the different points of the ship and we are going to call that ship coordinates equal and it's going to be a list of three points that i will initialize here first point second point and third point ship coordinates where do we have the ship coordinates in the update function here so we are going to change the bit what we do here to store the different coordinates and of course we want to get the coordinates before the transform after the transform is just for the display but before the transform is for the logic and of course the coordinate we get for the tile are before the transform very important so here what we will do is save that ship coordinates for the first point we want this tuple containing this value for the y and because we don't want to do a copy paste of the same code i'm going to use this value here now if i copy that it's not going to work like that because the transform function needs two arguments x and y and this is seen as only one argument containing a tuple as one argument which is a tuple so we need to expand the tuple so i will put a star and this is going to put directly this first argument and this second argument okay let's do the same for the two other points one and two this one is center x and base y plus the height and the last one is the same but just a plus on the x okay so let's copy paste all of this and we do one and two so check that your index are correct here okay so now we have all three points in ship coordinates and i'm going to loop for these different points for i in range 0 to 3 i will loop on ship coordinates of index and i will get the point x and point y now i need to see does my point is inside this tile so i can check if it is contained and if that's the case i will return true and i will say okay we are colliding i just need at least one point that is colliding when it's the case i will just exit the function and return true but if we loop for all the points and we did not collide with anything we will return false so how can i test that my x must be contained between x min and x max so i'm going to write my point x must be greater than the x mean and it should be lower or equal than the x max also i can simplify this expression to write it like this my point x is between x min and x max included and we are going to have the same for the py is contained in y min and y max if that's the case we return true yes we are inside this style and we are not going to continue the loop even if that's the case for the first point the function returns true and we exit the function here okay if that was not the case we continue to the next point and the next point and if that was not the case for every point we will return false okay now we want to do that but for all the tiles that are on the two first rank so we can write our function check ship call lesia ok this function will return true if the ship is on the track and it will return false if that's not the case in that case we will say game over where are the tile coordinates it's in self tile coordinates okay so what i can do is to loop on these coordinates in range 0 to length of this but i told you we are not going to test all the tiles it's not necessary so we will add an exit condition here but first let's get our tile index x and tile index y from the tile coordinates at index okay i get my tile what is the exit condition if my tile index y is greater than the current while loop plus one it means i don't need to test the tiles that are above the first two ranks because the ship is always at the bottom of the screen anyway so this will avoid that we do unnecessary tests if my tile index y is greater than the self current while loop plus one because i want to test the first two ranks of ties if that's the case i will say that i return false i could not return 1 because i did not return true because it means i did not return true on the previous tiles the types that are in the first two ranks now i will check my tile if check ship collision with the tile that we want to test here if we have a collision then it's okay everything is finished we return true that's okay we are still on the track but if we loop and we test all the tiles and we go after the first two ranks and then the story is finished or if we go at the end of the function it means we did not collide and that's a return false let's call this function on the update function so we go to the bottom of the code in the update function and then i will call this rdn self check ship collision if not if we return false in this function that means we are in a game over conditions so for now we will just print game over okay let's try it okay you can see i'm on the track everything is fine here i am still on the track because i have two points colliding still here i have still one point colliding but if i go totally out we can see game over okay if i go back it's still working fine so let's go back in perspective mode to see that everything is okay transform i go in perspective mode and i'm going to put back some better value here so line spacing 0.4 and speed x little bit greater for example 3 let's try that it's far too slow i'm going to have point 8 so now you can see it's good and when i go out of the track we can see in game over here okay everything is correct and let's move on to the next lecture galaxy project version number three our project will look like this we will have a menu we will be able to start the project to play and to go into the game over also we have the score that is displayed here in this version we will first manage the game states the game will not start by itself but we will press the button to start the game and also when we will have a game over the game will stop we will display this menu that will be displayed when we start the game and also when we get into the game over and we will finalize by displaying the background image by playing the different sounds and also displaying the score and i will finish on that project by sharing with you my different ideas and how to improve this game are you ready to start let's do it let's add a game over state to our game now we detect the game over but we still continue to play for example here we display game over in the trace but we can still continue we want to stop the game when we get a game over so we are going to add a new variable that i call the state game over and as a default our game is not in game over but when i will have no collision with the tiles i will go in game over mod self not stay game over equal to also i want to print this trace only one time so i will test if no collisions okay and we were not in a game over already okay so this will be executed only one time also i want to stop the game so if we are in a game over mode we are going to stop doing few things in the update function for example here we continue to go forward in the game so we are going to do that if not game over if you are in game over we will stop going forward into the game also i want to stop doing the loop because anyway we don't move into the game anymore and also i want to remove the possibility to go on the left and on the right so all of this block is under this condition when we are in game over all of this will be disabled let's try it so you can see i can play but as soon as i go out of the track the game is freezed and i can see game over so it seems it's working well but i'm going to show you a small case where it's not really working well it's especially if we put very high speed here for example two and you will see what happened here i just start the game you can see i'm not in a game over but you can see that the game is freezed already and if i look you can see i got a game over so why does i have a game over while i'm not in a game over condition this is because when we start our game here we go in the init and we prepare many things we initialize all of this and at the end we do the clock schedule to call the update function in fact kivy did not finish to initialize everything he need to initialize the screen and many other things so the call to the update function is going to take more time than expected at the beginning and so for the first calls we are going to have a big delta time here look if i enable again the trace of the delta time you can see here in the trace that normally we should have something around 1 and that's mostly the case except at the beginning if you look the first delta time is very high 29 it's because kv was starting so it took more time than expected but in our case what happened we took that delta time and then we compute our time factor from the time factor we used it in the computation of the current of set y so we made a big step in one time and because of this we were a bit ahead of the computation of the loop because in the condition we check if this current offset y is greater than the spacing y and in that case yes we increment the loop and we remove spacing y but what happened here is that because of the big value that we put at once we were far greater than the spacing y even greater than two times or three times the spacing y and so normally we should be in the current while loop of maybe three or four but we just increment by one and so in the computation of the check ship collision we are going to compare the collision with tiles that are already out of the screen and that's why we don't get any collision and that we get a game over directly so the bug is here in this condition in fact we should do that as much as we need and that's why you should replace it with a while current offset is greater than spacing y we will subtract it and we will increment the loop okay let's start the program again you could see i got a game over but it is a real game over this time because it was very quick so i'm going to comment this trace and i'm going to reduce a bit and the speed to 0.8 okay so this time everything is working fine we want to improve our game by adding a menu so that we have a button to start the game and not having this behavior of the game that is starting automatically okay so we will click to start the game and when we will have a menu again to restart the game the menu widget will be very simple it's going to be a title a button and have another lay that is going to be a dark overlay and we are going to use the same menu for the start of the game and for the game over the difference will be the title and the text of the button that will be modified so let's just create this menu we need to create a new python file that we will call menu and we will need also to create the kv file menu dot kv make sure that all the files are here in the same directory in the menu python file i will create my menu widget and because you are going to use all the screen size let's make a relative layout so i don't need to specify manually the size that would be the case if it was a widget so i just use a relative layout so i will also change the main widget and take it from a relative layout okay so now that we have this we can define the menu widget in rkv file so menu widget it's a relative layout but i still call it widget that's okay so what do we have inside we have a label and we have a button for the label i'm going to put a text for the text we will do that later so now i put title and for the button i will put ok concerning the position i want to put it in the center of the screen so i will put center x dot 5 and center y i'm not going to put dot 5 because i want to put the button just below so i put it just a bit upstairs so i'm going to put it at 60 0.6 and the button i will put it a little bit downstairs at 1.4 okay so now let's take this menu widget and let's put it in our galaxy.kv i put it inside my main widget here but you will see that if i want to start my program right now i have an error because you don't know my new widget i am missing an import statement here import menu okay so now you can see the menu is not displayed and that is because we have the menu.kv file i need to say to kivy to take this file into account so in the main just before the main widget i will write builder dot load file and it's going to be menu dot kv okay i need to import this kv long builder let's try it so you see the menu is appearing and the button is very big so it's because we did not specify any size for the button so let's do that back to the menu.kv i'm going to give a size hint to my button and i will put twenty percent horizontally and ten percent vertically let's have a look so you can see i have my title so the title is in white so we cannot see it here but we could show it a little bit and i have my button another thing we want to do is to put a black overlay almost black overlay like 80 so we can still see the game but have this darkened background when we have the menu so we can do that in our menu.kv in the canvas so i'm going to write canvas and i want to use this as the first instruction so i will use canvas before i will use color that is going to be rgba so we have a black color zero and for the alpha we are going to use eighty percent this color i will use it with a rectangle and it will take all the size self.size okay let's try it so now you can see that we have our menu with a dark overlay in the next video we will add the state to our game to avoid starting the game directly and we will also use the action on the button to start the game and when we will have a game over we will display the menu again we are going to implement the first part of the menu so we will start our game only when we click on the ok button and we will need also to hide the menu in that case and of course we will need to show the menu again when we are in game over so let's add a new state so that the game is not started directly we will have state game has started and we are going to put false so when the game is not started we are not going to do everything in the update function like we do in the game over if not game over we do that and self started and we should do it only if the game has started that means if the game has not started we are not going to do anything here so if i start again you can see that this time the game is not starting automatically now i need to manage the click on the button for the button i can go to my menu and i can add on press event and i will create a function on menu button pressed okay we need to put the parenthesis here because it's a call is it going to be root dot on menu button pressed not really because in that case we want to define this function not in the menu widget but inside the parent inside the main widget directly so it's going to be root dot parent dot on menu button pressed and i'm going to define this function in the main widget so i'm going to go totally at the end of the main widget and i will create this function i will just put a print button okay so now is it working if i start when i click the button i should see my trace and you see that the button is not working i don't see any button trace and i don't see any lightning on the button it's like the button doesn't get any touch and why so it's because if you look what we did in the main widget in the user action we have this function will manage the touch and if we put a breakpoint here and if i restart even when i click on the button we will go into this function and the problem that we have here is that this function overrides the default behavior but will not transmit the touch to the other widget and this is because we did not call the super and we need to call super with the type main widget in our case self dot and untouched down and giving the touch okay i'm just going to clean some traces okay so now you will see that we are going to have one issue because we need main widgets you see but if we import it user actions will need main widget but main widget already needs user action so we have a problem of mutual inclusions so what we can do here is to give the parent class of the main widget is relative layout so you see here the import from user actions is here okay so we can take relative layout and put it instead here in the super and i will import the relative layout you will see that this time when i start the program i can click on the button and when i click on the button i want to start the game and to hide the menu so let's do that back in the main widget in my button click i will start the game so i put my self state has started to true but i also need to hide the menu how can i hide the menu i can use opacity equal zero the menu is inside the main widget here and i need to assign a property to it so i will use id menu widget and i will need to create a new property in the main widget okay i assign this new property so we will need to define it menu widget okay so now in the main widget i go back to the top and i will need to create i will go here with other properties my menu widget which is an object property okay i need to import object property so now that i have my menu widget i can just use it in the click of the button and i will do self dot menu widget dot opacity equals zero let's try it so you can see that if i click the game is starting but also you see it moved my player and okay after a while i get the game over and so we have two issues first when i click on the button also the main widget is taking the click on the window to move on the right or on the left so we need to change that and when we have the game over we need to display the menu again so why we have this first issue it's because on the user actions on touchdown we should do that only when we are in the right state and if you remember we have two states here game over and game has started that means we want to do that only when we are not in game over i'm going to comment that so if i'm not in game over i can allow to do the touch actions and also that the game has started i can do that okay first thing second thing we need to change is from the game over so but before that i want to show you the other thing we need to change is to display the menu again when we have the game over but i want to show you another issue that we have so this time you see that i can start and it's not moving okay it's correct and okay i will lose so now i'm in the game over but you see that if i still click here even if the menu is not displayed i still get my button action and this is going to be a problem on mobile when we are playing and pressing the screen it may trigger the action of the button and why is this because we just use opacity on the menu but the menu is still here and the button is still here but not visible so we need to handle that and what we can do is that in the untouched buttons on the on touchdown so i'm going to copy this function and i'm going to manage that on the menu and i will say to the menu so i'm going to delete all of this i will say that when we touch something on the menu and if the menu if self opacity is equal to zero we are not going to do anything with the touch so i'm just going to return false okay if the menu is not visible we ignore the touch else we transmit the touch okay let's try that again okay i start here i click again on the button but you see that we don't have this button trace so this is correct now i need to manage the game over when we are in a game over i want to show the menu again so i will put opacity to one i copy this and here in the game over state i'm also going to put my menu back visible okay so let's see i start okay and i'm going to lose and then i have the menu again and the next step we need to implement is to be able to restart the game from the top when we click on the button and that's what we are going to do next we would like to be able to reset our game here when we start our game okay and when we have a game over when we click it's not restarting the game correctly so we need to develop something to restart from zero and it's going to be a reset function so i'm going to add this reset game function so we need to define it so we will reset the game to zero and we will put the right state and remove the menu let's define this new function so i'm going to go just below the init here of the main widget and i will put def reset game in a reset game of course we need to reset the state of the main widget so it will concern all the variables that we have here and of course i will need to put game over to false game self.gameover equal false but you will do that at the end of the function because you remember that clock schedule interval is running so the fact that we are in game over equal to our game has not started it will prevent from executing this part of code so let's keep this part of code disabled and we will enable it again at the end by putting game over equal false because here we will reset different variables so let's do that what do we need to reset ship coordinates it's okay because it's going to be recomputed in the update the ship has been initialized so we don't touch it style coordinates we need to reset tile coordinates because we need to start with a straight line so we want to put self tile coordinates equal an empty list and we will need to call the prefill tile coordinates so we will restart from a straight line and also we will need to generate the tile coordinates at the beginning okay i continue so tiles it's okay has been initialized so we keep it but concerning the speed here current offset y current offset one is our y position so we need to reset it to go back at the beginning of the game and current while loop also and it's going to be the same for the x variables here we need to start with a speed of zero and to be in the center of the screen so let's copy all of this and i will put a zero for all these variables okay self current while loop i will remove this one and i put everything to zero what else do we have horizontal line okay it has been initialized we don't need to touch it vertical lines also and perspective point and menu widget okay so all of this we don't touch it so we reset everything and we put back the tiles to zero and because we put our current while loop to zero before regenerating it's going to regenerate coordinates starting at zero so let's try it and also you see that because we call these two functions we can also replace these two lines by reset game so we can do that it's not going to change anything but we can change the code like this let's try it i start the game i lose and i can click again and the game is restarting from the top okay everything is working fine and let's continue let's finalize our menu first thing we want to do is to put the right title and the right text for the button so when we will start we want to display galaxy for the title and start for the button and also when we will be in game over we will change the title by game over and the text button by restart so how can we do that if i go back to the menu we have our label with default text and the button with the text so you may say i can put galaxy here as a default text and then put an id on this label and get a property to change the text of my label but we can do something easier than this we can directly put a string property here for the title and that's what we are going to do i'm going to write menu title and it's a property we are going to define in the main widget so it's going to be root not parent dot menu title and we are going to do the same for the button it's going to be menu button title so i have to define that in my main widget here i will say menu title is a string property so i need to import that and i will do the same for the menu button title i can give a default value here so the default value is going to be galaxy and it's going to be start for the button also for the title we want to expand a bit the different letters so i'm going to put three spaces between every letters let's try it so i have galaxy and start button but when i'm in game over i want to display game over and restart so let's do that i have to change the value of menu title and menu button title when we get the game over at the end of the update function here so i'm going to make self dot menu title equal game over and self dot menu button title equal restart and for the game over i'm going to expand the letters but only by two spaces this time because this word is longer in the middle i put four and two okay let's try start and game over restart okay it's working well so now let's add some style to our menu and you will need to use the file i gave you in the resource folder that you can download you will find three folders audio with the different sounds that we will add later now we will use the fonts so it's going to be this font for the title and euro still for the button and also you will get the background image so let's copy these three folders at the root of your project you can use a right click on a file and this option reveal in finder and then you just copy your three folders here it will appear in the project okay so let's use this font for the title how can we use a custom font for the label we use font name and we need to give the directory which is fonts slash and this name of file suckers go tick std light dot ttf okay and also we are going to make bigger letters so it's going to be a font size and let's put 60 dp okay let's try it so that looks nice for the title let's style the button for the button i'm going to use also these two properties font size that you are going to put half 30 and for the font name i'm going to use the other font your row still okay so what do we have this time we have something that looks great i want to expand a bit the height of the button and also to position it a bit lower and we will add some color to this button so first thing the size is ten percent height i'm going to give 15 percent and i want to display it a bit lower so i'm going to put it at 30 percent of the screen now i want to add a background color so i can use a background color and i prepare the color code for something quite red so it's going to be 100 red and 30 percent green 40 percent blue and i put it at 85 percent opacity so let's try that and you can see that my color is not really vivid it's because it is multiplied by the default button column which is a gray so to remove this texture we need to use background normal and to reset the texture and this time it's going to look nice ok perfect i can start my game and then i get game over everything is good concerning the menu for this exercise i'm going to ask you to display the background image this one bg1.jpg in the background of the main widget so we just place the game above all of this you will need to add this image in the main widget but you are going to add that in the kv file here i don't give you more instructions it's your turn to do the exercise and then i will show you the solution can we display this image can we use an image here not really because the image is going to be drawn over the canva so we need to display it in the background and what we can use is a canvas before and inside we will use a rectangle that will use this file as a texture so we will use the source property on a rectangle that will take all the window and because we are in canvas before it's the first thing we are going to draw on the screen and we will draw everything else on top and that's what we want to do so i'm going to put a rectangle that will take all the space so it's going to be a size of self dot size and i will use the source image images slash vg1 dot jpeg let's try it you can see that the image is displayed and i can start the game okay everything is correct let's continue on the project let's display the score in our game what is the score and what will be the score in our case i have decided that the score will be the number of loop defines how long we could go into the pass so it's going to increment and it's going to be finally the value of the score so where can we display the score i want to display the score in the game window at the top left and we are going to add it directly in the main widget so first we will write some code together and after you will do an exercise so i go to the galaxy.kv and i want to add a label should i add the score label before the menu widget or after it it's going to be an important choice but i'm going to start by putting it before the menu widget label for the text i'm just going to try with a placeholder text it's going to be score 120 for example and also i'm going to put a style so for the style i'm going to copy paste these two lines from the button of the menu and i'm going to paste it here i'm going to use a font size of 20 and to keep this font name er still so what does it makes right now if i start it i cannot see it but if i start the game you can see that the score is displayed in the middle of the screen because it takes all the space so we need to define the size hint for example 20 and 20 okay so what do we have we have something here but i want to display it at the top left so i'm going to use a pos hint that will be x 0 so that one was implicit that was already here but most important is to have the top to one totally at the top so let's see yes it's displayed here so that's correct and i just want to reduce a bit of margins here so i will reduce a little bit the size to 18 okay so we have something good and when we start the game we will display the score so it's going to be your exercise you need to display the real score here and you will use a property for the text that we will call score txt okay because we are in the main widget we are going to use root dot directly we don't use root parent we needed to use parent from the menu because the parent of the menu is the main widget but since we are in the main widget directly it's going to be root score txt for this exercise you will define this new property and in this property you will need to use the value of the current loop to display the actual score do this exercise on your side and when it's done i will show you the solution so what we need to do is to define this score property i go to the main widget at the top and here i will define string property because we need to display score and then the value of the score score text is going to change when we change the value of the loop so i go back in the update function here when we increment the current while loop and we are going to do the score equal to score and then the value of this current while okay let's try that so you can see that at the beginning i don't see the score because we did not give a default value for the property okay but when i start it i get one two three four five and we begin to see the score and when i have a game over i can still see the score but not really well because of the overlay of the menu and also if i click on restart you can see i still see 23 and then one two three four five so i want to display score zero and display score zero we are going to put this line also in the reset function so it's going to be more clean here i can put score zero directly and remove that part or i can keep that part and because current while loop is reset to zero it's going to make the same thing okay let's try it so this time you can see i see score zero when i start i have zero one two three and when i lose i have again 0 1 2 3. it's more clean now i want to change something i want to see the score correctly because here we cannot see it much because of the overlay how can we solve that finally in the galaxy.kb we need to display the label on top of the menu and not the opposite so if i do that this way i'm going to display the score on top of the menu so it's always displayed correctly okay that's all for this exercise let's play the sounds in our game you see in the audio folder that we have many wave sounds so we are going to play these sounds in our game and at first i'm going to write some code with you and for the exercise you will trigger the sounds at the right moment so let's initialize the sounds we will create a new function init audio and we will use the sound loader dot load and give the name of the function sound loader you need to import it from tv core audio sound loader here we need to give the name of the different files so i will start with the first one begin dot wave and i need to provide the directory name so it's going to be audio slash begin.wave and this sound we need to save it in a variable so we can use play or stop on this variable later so it's going to be a self dot sound begin equal this i will need to define all my different variables here none okay so i need to copy paste this line for every sound that we have so we have still one two three four five other sounds okay and i will copy paste and i will write down the name of the different files you can see i have a completion here game over impact game over voice music one why i call it music one because maybe you will want to add some more music in the game later so i just call it music one instead of music and restart okay so let's rename the variables galaxy game over impact game over voice music one and restart and i will copy all of this so i can create the different variables equal none so begin we have it galaxy equal none impact voice music and restart okay and i will remove the self in the front perfect so now my init audio function i need to call it from the init of the game so i will call it at first init audio okay and i'm going to add something we can control the volume of the different sounds so for the music sound music 1 we can do dot volume equal 1 is the maximum it's 100 percent for all the voices like begin galaxy and and the other ones you are going to give a volume of 25 percent so i will copy paste that and for the sound galaxy i'm going to do the same this is an impact song and this one is a voice sound and restart also okay for the sound of impact we are going to give 60 so you can adjust the volume of the different sounds for me i will keep these values now it's your turn you have to do an exercise you need to trigger the different sounds at the right moment so you will need to call the play function and also sometimes the stop function the galaxy voice is called totally at the beginning when we start the game it will say galaxy and when we will press start it will say begin okay and it will also start the music then later when you will get a game over you will play the impact of the sound and you will also need to stop the music and you will also play the game over voice but then the button now is not start it's restart so when the user will click on the restart button you will need to play restart sound it's your turn to practice and when it's done i will show you the solution so first thing i will do is i will use this begin sound the begging sound is when we click on the button on menu button pressed okay i can play my sound when i click on the button let's try it here i press start and it says begin but i have a problem in the game over i'm going to click on the same button and i want to say restart but it says begin because here we need to test the state if we are in state game over then we will play the restart sound else i'm in the first case and i will play sound begin let's try that okay begin game over begin so it's not working and why it's not working because you remember that we already reset the state game over in the reset function so we don't have that information anymore we need to move this part of code before the reset function so we have still this state game over let's try it begin okay restart okay that's correct now let's start the music when we click on this button we are going to start the music so i'm going to do sound music one dot play okay and i'm going to group all the sounds together so i'm going to play it here so whether we are in the first case or in the game over we are going to play the music when we click in the button in every case okay it's working but in the game over i want to stop playing the music so when we get the game over we have multiple things to do we need to stop the music stop but we also need to play some other sounds because we have the sound of impact game over impact that we are going to play and we have also the voice sound game of our voice that we need to play so let's see what it gives and i got to crash let's see why float object has no attribute play and we get a problem on that sound game over impact it says it's a float object why i think i know why it's when we put the volume i think i forgot to put volume in front let's see init audio and here you see sound game over impact dot volume is equal to zero six okay let's try again and then you could hear the music stop i get the impact sound and we also hear the game over that was quite low and we are going to improve that later i'm going to show you how to delay the sound but just to finish the exercise i need also to play the galaxy sound at the beginning so i'm going to take that and on the init of the game after init audio i will put it at the end of the init function i will play the galaxy sound so when i start the game we can hear galaxy then we can start and then i get the game of restart game over okay so that's all for the exercise and now i'm going to show you how to improve it a little bit i want to have the impact sound on the game over immediately but a few seconds later like three seconds later i want to play the sound game over so let's do that when i get my game over i'm in the update function here so when i play game of voice that's voice on i want to delay it so i'm going to define a new function play game over voice sound okay so we are going to play the sound and this function we need to delay it from here so i'm going to use clock dot schedule once we want to start it only one time this function self dot play game over voice sound okay and i will specify the delay for example three seconds and because this function is used inside the schedule function i need to give the delta time parameter so let's try it so you could hear i got the impact and then a few seconds later we could hear game over but in fact we have a small look for example if i restart you can hear game over while i'm playing the game and this is because when we get the game over we trigger that function that will happen three seconds later okay so we trigger that but before it happens i click quickly on the button here so i had time to restart the game and when i'm playing then after a few seconds this is going to play so i will hear game over while i'm playing so this is clearly a bug so what we can do is to test here if we are still in a game of our state if self dot state game over then only in that case i will play the game of the song let's try it again and you can hear that this time i didn't hear the game of her song i will only hear it when i wait this one so everything is good for our game you have completed the galaxy project and you have reached the end of this tutorial congratulations you might ask me so now where do i go from here what's next i advise you to practice by doing some personal projects let me share with you some ideas why not creating a simple game or a simple application like a currency converter or a password generator or why not trying to add some features to the galaxy game for example store and display the best score or manage multiple levels or increase the speed over time or other difficulty choice easy medium hard and also we can stay in touch you can subscribe to my youtube channel code with jonathan so that you will know when i post new tutorials and if you like to learn from me you can check out my full python course that includes more than 300 videos and 27 hours of content thanks again and see you soon
