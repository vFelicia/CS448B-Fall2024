With timestamps:

00:00 - in this mstat course nickel will guide
00:03 - you step by step in building a
00:05 - state-of-the-art AI chatbot similar to
00:08 - chat GPT through this Hands-On tutorial
00:11 - you'll Master the depths of the M Stack
00:14 - Implement Advanced authentication
00:16 - mechanisms and seamlessly integrate open
00:19 - ai's capabilities into your full stack
00:22 - application by the course's end you'll
00:25 - have a production ready scalable and
00:28 - secure SAS chatbot PL platform
00:30 - underpinned by the latest in web
00:32 - development best
00:34 - practices hi everyone my name is Nel and
00:37 - welcome to a usest project on a channel
00:39 - so in this tutorial you will Master the
00:42 - monack and you will build a fully
00:44 - secured AI software as a service project
00:47 - with a mon stack so this is an AI
00:49 - chatbot built with the open a and the
00:51 - mon stack so users can ask their queries
00:54 - and their doubts to the chatbot and
00:56 - chatbot will come up with an answer so
00:58 - this is similar to theat chat GPD as
01:00 - well so this application includes a
01:03 - fully responsive web page with a modern
01:05 - design so it is completely responsive on
01:07 - any screen size you can check the
01:08 - responsiveness as well and this
01:10 - application starts from the home screen
01:13 - so anyone can log in and register and
01:15 - they can start their conversations with
01:17 - the chat B so they just need to click on
01:19 - the login they can provide the
01:20 - credentials over there they can click on
01:22 - the login and after that the user would
01:24 - be logged in and we would be restoring
01:26 - all of the chats of the user with the
01:28 - chatbot and the conversations would be
01:31 - stored in the database so anyone can
01:33 - access their chats any time so you can
01:35 - see this is a UI for the chatbot and
01:37 - this is similar to the chat GPT like
01:39 - thing you can see if you ask any
01:41 - question like show me how can I declare
01:43 - variables in JavaScript so this chatbot
01:45 - will come up with an answer and it will
01:47 - also show you the code blocks as well so
01:49 - if you need any code blocks so it is
01:51 - capable of showing all of the code
01:53 - blocks to the
01:54 - user and the users have the
01:57 - functionality so they can clear the
01:58 - conversation with the chat Bo as well so
02:00 - they just need to click on the clear
02:02 - conversation and all of the chats of the
02:04 - user would be deleted and the user
02:06 - session will be active till the 7 days
02:09 - so we'll be storing the cookies inside
02:11 - the browser we'll be storing the HTTP
02:13 - only cookies and we'll be storing the
02:14 - tokens inside that and they can't be
02:17 - accessed by the JavaScript so they
02:18 - cannot be accessed by the JavaScript so
02:21 - they can only be accessed via the back
02:24 - end so users do not need to log in
02:27 - within the 7 Days of logging in so after
02:30 - only 7 days they are required to login
02:32 - again to generate a new
02:34 - token and we'll be using the openi
02:36 - conversational model GP 3.5 turbo and4
02:39 - and on every chat message the user needs
02:42 - to verify their session and the
02:44 - authorization details as per the
02:45 - security because the security is on top
02:48 - priority so that's the demo of this
02:51 - application that we have created and
02:53 - this is our homepage the user can move
02:54 - on to the register page as well so sign
02:57 - up will look similar to the login so
02:59 - this is all for the demo and now let's
03:02 - understand the text TX that we'll be
03:05 - [Music]
03:09 - using so we will be using the nodejs
03:13 - express for the back end for creating
03:15 - the rest API and we'll be using the
03:17 - mongodb database for storing the data
03:19 - efficiently and on the front end side
03:21 - we'll be using the V for fast Dynamic
03:24 - and reliable application and for the
03:26 - authentication and authorization we'll
03:29 - be using the password encryption using
03:31 - the BP we'll be using the jwd Json web
03:34 - tokens and their authorization we'll be
03:36 - using the HTTP only cookies which can
03:39 - only be accessed by the server and we'll
03:41 - be using the validations as well we'll
03:43 - be using multiple middleware checks for
03:45 - the security and much more and for the
03:48 - design and the UI for this application
03:50 - we'll be using the material UI Library
03:53 - which is the best UI component Library
03:55 - out there for react and we'll be using
03:58 - the context API for the re react for
04:00 - providing the authentication as
04:02 - authentication provider as a rapper for
04:04 - whole application and with integrating
04:07 - all these Technologies we can build a
04:09 - modern fully secured and a full stack AI
04:12 - chatbot similar to the chat gity service
04:15 - with mon
04:18 - stack and with the openi integration
04:21 - we'll be using the openi for chat
04:23 - completions with the nodejs and we will
04:25 - take care of the security measures for
04:28 - this application and will take care of
04:30 - the API keys that are being kept as a
04:32 - environment variable and all of these
04:34 - things working with the open Ai and we
04:36 - will explain each and everything that
04:38 - how you can integrate the openai with a
04:41 - M Stack application and in terms of the
04:43 - scalability this application is
04:45 - completely scalable to anything so in
04:48 - future if you want to integrate the
04:50 - image completion audio completion video
04:52 - generation as well so this application
04:54 - will work completely fine with all of
04:56 - these things so react and the nodejs is
04:58 - completely scalable and and our back end
05:00 - is completely scalable for that and if
05:02 - you want me to scale that application to
05:05 - create the image completion audio
05:06 - generation and video then please comment
05:08 - down within the video and I will help
05:10 - you out so I think that's enough for the
05:13 - short introduction and let's get our
05:15 - hands dirty into testing this
05:17 - application and seeing the demo once
05:18 - again and then we will move on into the
05:21 - project so let's move on to the project
05:22 - once again so you can see this is our
05:24 - homepage we are using the animations
05:26 - over there we have some animations we
05:28 - are just giving some designs over there
05:30 - and we have built with love by Indian
05:31 - coders so this is my channel this is my
05:34 - YouTube channel and there you can see
05:36 - the login screen is there the signup
05:37 - screen is there so the user will be
05:39 - logged in and they can ask any question
05:41 - like we can send hi over there to the
05:43 - chat bot and the chatbot will come up
05:45 - with an answer like hello how can I
05:47 - assist you today and if the user
05:49 - refreshes the page so the user session
05:51 - will be active till 7 days so user does
05:54 - not need to log in again you can see now
05:56 - we have a message of loading chats so on
05:58 - every refresh all of the chats of the
06:00 - user would be restored and the users
06:02 - have the functionality of clearing the
06:04 - conversation as well so with the help of
06:06 - this they can clear the conversations
06:08 - and it's completely responsive so you
06:10 - can open it in any
06:12 - device like this you can see you can
06:14 - open it in any device you can see it
06:16 - will work perfectly fine over there and
06:19 - then the user can move on it is
06:20 - completely secure and it is completely
06:22 - responsive over there they can click on
06:24 - the login as well so you can see as for
06:26 - the design it is completely responsive
06:29 - and it is completely secure and you can
06:32 - check the cookies as well for the user
06:33 - so once the user locks in so the cookies
06:35 - would be stored there you can see now we
06:37 - have the authentication token so these
06:39 - cookies are HTTP only cookies so they
06:41 - cannot be accessed by the JavaScript so
06:44 - this is a complete demo for this
06:45 - application and now we will be moving on
06:48 - into the
06:49 - project so have a cup of tea or a coffee
06:52 - and let's start building this project
06:55 - and yeah I know now you want to build
06:56 - this project but before that I want to
06:58 - introduce you to my YouTube channel so
07:00 - if you are new here this is my YouTube
07:02 - channel and I create the videos on the
07:04 - web development so I request you to
07:06 - please like this video and please
07:08 - subscribe to the channel as well because
07:10 - it keeps me motivated to create the
07:12 - videos like this and it helps me now
07:14 - that's enough for the introduction and
07:16 - now let's move on into the
07:18 - project hi everyone and I welcome you
07:21 - all to the course so in this section now
07:24 - we'll have a deep introduction that what
07:26 - exactly are we going to do and what
07:28 - technologies that we'll be using
07:29 - and we'll be having the technical
07:31 - overview of the concepts as well so
07:33 - let's start so what exactly are we going
07:36 - to do so we are going to build our own
07:38 - AI chatbot with the help of open AI so
07:41 - it's a AI chatbot so that's why we are
07:43 - using the open aai and we all know about
07:45 - the openai platform so almost all of the
07:47 - modern AI applications are built and
07:50 - hosted on the open AI so we are also
07:52 - going to create around chatbot it is
07:54 - similar to the chat GPD so we are going
07:56 - to create that with the open Ai and it
07:58 - is a full stack application so each and
08:01 - every record would be stored inside the
08:03 - database and it can have the correct
08:04 - operations of the database as well so we
08:07 - are going to create a chat gbt type
08:09 - application with the open Ai and now
08:11 - let's just move on let's just understand
08:13 - the technical overview of the course
08:15 - that what technologies we'll be using
08:17 - that why should we use the Technologies
08:19 - if we have other Stacks as well so let's
08:21 - just understand about these so now let's
08:24 - move on and let's just understand that
08:26 - what exactly is the month stack so mon
08:29 - stack is a comprehensive and Powerful
08:31 - web development framework that combines
08:33 - four key Technologies the mongodb
08:36 - express react and the node so it's not
08:39 - exactly the framework but it's a
08:41 - collection of JavaScript technologies
08:43 - that work together to make a full stack
08:46 - web development environment so mongodb
08:48 - serves as the database system allows the
08:51 - user for the efficient data storage and
08:52 - retrieval Express is a backend web
08:55 - application framework that manages the
08:56 - routing the server aspects the metal WS
08:59 - throughout the nodejs application we
09:01 - have a react which is a front end
09:02 - library that enables the creation of
09:05 - dynamic and interactive user interfaces
09:08 - and we have the nodejs which is used on
09:09 - the server site to execute the
09:11 - JavaScript and to handle the request and
09:13 - manage the applications backend
09:15 - operations so it all includes the
09:18 - mongodb express react and the node and
09:20 - it creates the full stack web
09:22 - development environment and the
09:23 - integration of these Technologies
09:25 - enables the developers to construct
09:27 - modern full stack applications
09:29 - effectively and efficiently with using
09:31 - the one single code base which is the
09:33 - JavaScript so all of these Technologies
09:35 - uses the JavaScript as their internal
09:37 - code base so we'll be using JavaScript
09:39 - only to create a full stack application
09:42 - with using the mon stack so now let's
09:44 - just understand that why should we use
09:47 - the mon stack so we have other
09:48 - Frameworks as well that can be the nexts
09:51 - T3 stack it is currently in the demand
09:52 - as well like the mon stack we have the
09:54 - lamp stack as well with using the PHP
09:57 - and we have golang as well so why should
09:58 - we use the mon stack so let's just
10:00 - understand that why should we use this
10:02 - so first option that we have is the full
10:05 - stack compatibility so mon stack offers
10:07 - you the full stack compatibility so it
10:09 - covers both front-end and backend
10:11 - development using the JavaScript and
10:13 - this leads to a consistent code base and
10:16 - it makes it easier to collaborate and
10:18 - switch between different parts of the
10:20 - application whether that's a front end
10:23 - or whether it's a back end and now let's
10:25 - move on so we have the modern web
10:27 - application development so it's a
10:29 - completely modern development with using
10:30 - the react which allows the creation of
10:33 - dynamic and responsive user interfaces
10:36 - while the Express and the node handles
10:37 - the backend operations and it's a high
10:39 - performance backend services with using
10:41 - the node and the express and currently
10:43 - mongodb is the most used database for
10:45 - now so it's a modern fullstack web
10:47 - development and we have the scalability
10:49 - as well so nodejs which is used in the
10:51 - monack is known for the scalability it
10:53 - can handle a large number of
10:55 - simultaneous connections efficiently
10:57 - with using the event Loop and and it
10:59 - makes it suitable for applications with
11:01 - growing user bases and same with the
11:03 - react so you can create any type of
11:05 - application with the react and now let's
11:07 - move on so we have the realtime
11:09 - applications as well so Monch offers you
11:11 - the realtime applications as well with
11:13 - using the sockets with using some chat
11:15 - applications and all so we have a
11:17 - completely real-time application so we
11:18 - are not going to use the socket inside
11:20 - this application but I'm just explaining
11:22 - you the examples that why should we use
11:24 - the monack and now let's see we have the
11:26 - crossplatform so monack can be used to
11:29 - develop web applications that works
11:31 - across different platforms and devices
11:34 - so you can also use the monack with the
11:35 - mobile devices as well what you can do
11:38 - so instead of the react you can use the
11:40 - react native for building the UI part
11:43 - and now we have the open source so this
11:44 - is the last feature that should be use
11:46 - the mon stack so all components of the M
11:49 - are open-source Technologies so you do
11:51 - not need to pay anything because the
11:53 - mongod DB is like a premium purpose so
11:55 - if you want to use the mongod DB then
11:57 - there's a very nominal charge but but
11:59 - only in the production and during the
12:01 - development you do not need to pay
12:02 - anything to the mongod DV and you have
12:04 - the react which is open source the node
12:06 - and the express they open source
12:07 - applications and you have the access to
12:10 - their source code as well so these are
12:12 - the options that help us to understand
12:14 - that why should we choose the mon stack
12:16 - over other different
12:19 - Frameworks and now let's move on and
12:21 - let's just again have a very deep
12:23 - introduction about this course so what
12:26 - we are going to do so we'll be having a
12:28 - modern a project which will use the open
12:31 - a API so we are going to use the openai
12:33 - API to create an AI and realtime chatbot
12:36 - and it is similar to the chat GPD so the
12:39 - application is a full stack application
12:41 - which stores the users chats in a
12:43 - database to keep track of the
12:45 - conversations but a user can delete them
12:47 - any time so we have a CED functionality
12:49 - of the users as well in which we'll be
12:51 - having the users we'll be having the
12:52 - chats of the users and user can delete
12:55 - their chats as well anytime and the UI
12:57 - is capable of showing the the code
12:59 - blocks as well if requested by the user
13:01 - so as you saw in the demo so we can also
13:03 - show the code blocks to the user as well
13:05 - with this project so it's a modern AI
13:08 - project and we'll be using the advanced
13:10 - authentication and authorization system
13:12 - with the realtime chatbot so we'll be
13:14 - using the JWT tokens the HTTP only
13:16 - cookies and these cookies would be
13:18 - stored inside the users browser but they
13:20 - won't be able to access that and they
13:22 - need to send those cookies once they
13:24 - request for a new chat so it's a
13:27 - completely secure and modern application
13:29 - with the modern a platforms so now let's
13:32 - move on and let's just see that how we
13:34 - can start building this project and now
13:36 - we can start building the back end of
13:38 - this project so now let's move on so
13:40 - first step that we have is to set up the
13:42 - note express application with the types
13:44 - script so this is our first step for
13:47 - building this application so now let's
13:49 - move on to the coding part so for quick
13:52 - start for this course so I'm going to
13:54 - provide you the link inside the
13:55 - description so it's a GitHub link so you
13:57 - can directly move on to the GitHub link
13:59 - and then what you can do so you can
14:01 - download this source code and then you
14:03 - can paste that into your folder so you
14:05 - can move on you can just copy all these
14:07 - files and then you can paste them into
14:09 - the visual studio code so I have opened
14:11 - the folder in the vs code which is a m
14:12 - opening I chatbot so let's create
14:14 - another folder that can be the quick
14:16 - start for the back end then we can paste
14:18 - all of these files
14:20 - here so now I have these files over
14:22 - there and let's start building this
14:24 - project so this is a overview so now
14:27 - after just pasting all of these files
14:29 - now you can move on you can press contrl
14:31 - and J on your system if you're on the
14:32 - Windows you can press control and J so
14:35 - you need to just open the terminal so
14:37 - you can move on to the back end folder
14:38 - over there and then you can press the
14:40 - command of the npm install so it will
14:42 - install all of the dependencies that are
14:44 - required so let's start moving on so
14:47 - here we have the source file and inside
14:48 - that we have the index.ts so here inside
14:51 - that you can see we have a lock
14:52 - statement like this is a starter kit for
14:54 - this amazing project with love binding
14:56 - encoders then we have the envirment file
14:58 - as as well and inside there we have a
15:00 - couple of Secrets couple of the we have
15:02 - the database URLs as well we have the
15:04 - cookie secret JWT Secrets then we have
15:06 - the package.json as well and inside the
15:08 - package.json it contains the information
15:11 - about our back end you can see the name
15:13 - of the application we have the back end
15:14 - over there we have the main we have the
15:16 - index.ts it is there inside the source
15:18 - with the type of the module then we have
15:20 - the scripts as well so we have the dev
15:22 - command and we are going to use the
15:23 - concurrently package so it's a open
15:25 - source npm package that we can use so it
15:28 - allows you to run multiple commands
15:30 - inside the scripts inside the terminal
15:32 - so first we are going to compile the
15:33 - typescript to the JavaScript in the
15:35 - watch mode then we are going to run the
15:37 - compiled version of the JavaScript then
15:39 - we have the build command as well so it
15:40 - is currently same so after the build I
15:43 - think that could be the Run command so
15:45 - it's a run command or it can be the
15:47 - start command over there and for the
15:48 - build command I think we can move on we
15:51 - can have a new command that could be for
15:53 - the build so we have the build command
15:55 - over there and inside the build command
15:56 - now what do we need to do so build
15:58 - command will be just having the TSC
16:00 - which will compile the Javas which will
16:02 - compile the typescript to the JavaScript
16:04 - so here we have the build command over
16:05 - there and that's how it's going to work
16:07 - and after that you can see now we have
16:09 - the start command which will start the
16:11 - production ready application which will
16:12 - start the compiled version with the note
16:15 - index.js then we have the test command
16:17 - as well and this is not required so what
16:19 - we can do so we can remove the test
16:20 - command over there and after that you
16:22 - can see there are a couple of
16:23 - dependencies that we'll be using the
16:25 - first one is the BP which is used for
16:27 - the password encryption and comparing
16:28 - the decrypted password then we have the
16:31 - concurrently package which is used to
16:32 - run multiple commands concurrently with
16:35 - have the cookie passer which is used to
16:36 - set cookies directly from the back end
16:38 - to the front end we'll be using the
16:39 - course package which enables the cross
16:41 - origin resource sharing which means like
16:44 - you can make a request to a different
16:45 - server and there won't be an issue we'll
16:47 - be whitelisting that thing over there we
16:49 - have the EnV to use the EnV files over
16:52 - there we have the express application
16:53 - over there we'll be using the Express
16:55 - package we have the validator for the
16:57 - express so it means now we'll be having
16:58 - the data validation checks as well
17:00 - before moving on to the database we have
17:02 - the Json web token for the JWT tokens we
17:05 - have the mongos which uh which is a
17:07 - package which is used to work with the
17:08 - mongod DB we have the open AI Library so
17:11 - we have the open a library to work with
17:13 - the open a systems and now let's move on
17:15 - let's have the configuration file of the
17:18 - typescript so here we have the
17:19 - configuration file and here we have the
17:21 - error we can just move on we can have
17:23 - the es I think we can have the node next
17:25 - to over there like this so I think we
17:27 - can move on we can have the next so the
17:29 - error would be gone and now you can see
17:31 - inside this we include all of the files
17:33 - for the typescript which are into the
17:35 - source folder so inside source inside
17:37 - any of the subfolders so if you find an
17:39 - ATS file so it would be compiled inside
17:41 - the build directory and this is the
17:43 - build directly which is the disc and
17:45 - this is a build directory which is a
17:47 - disc so you can move on you can create a
17:49 - new folder that could be for the disc
17:51 - and inside this file the new compile
17:53 - file would be created so that's how it's
17:56 - going to work and after that what you
17:57 - can do so you can just run the npm Run
18:00 - Dev so first time you should get an
18:02 - error your compiler would not find the
18:04 - dis index.js file but after you compile
18:07 - then it would create the index.js file
18:09 - then you can again move on you can clear
18:11 - the screen then you can again press npm
18:13 - run Dev now you will see the lock
18:15 - statement over there which is this is a
18:17 - starter kit for this amazing project
18:19 - with law ban coders so with the help of
18:22 - this now we have created the very basic
18:24 - setup of our application and now we want
18:26 - to move on so you can see now we just
18:28 - have the lock statement now we can
18:29 - remove the lock statement and now before
18:31 - moving on to the next steps what I'm
18:33 - going to show you is I'm going to show
18:35 - you that how to create the basic node
18:37 - and express application with the
18:40 - typescript so we are going to create the
18:42 - very basic node and the express
18:43 - application so we'll be using the
18:45 - routing with the express so we create
18:47 - the very basic application so let's move
18:49 - on so how we going to do that so first
18:51 - we want to import the express so we can
18:52 - import the express directly from the
18:54 - Express package so that should be from
18:56 - the express then we can move on what we
18:59 - need to do then we can just provide the
19:01 - const we can have the app variable so
19:03 - that should be equals to the express so
19:05 - now the app variable holds the
19:06 - functionality of the express application
19:09 - and now what do we want to do so after
19:11 - that we want to open the development
19:12 - server as well of the application we can
19:14 - have the app we can have the listen we
19:16 - can have the app. listen and inside the
19:18 - first parameter we need to provide the
19:20 - number of the port so on which Port we
19:22 - are going to create the application
19:24 - server so suppose that can be the 5,000
19:27 - so it would open on the Local Host Port
19:29 - of the 5,000 and then we would be having
19:31 - the call back as well after that so
19:33 - inside the call back what we going to do
19:35 - so we can have the lock statement we can
19:36 - have the console dot we can have the log
19:38 - so that should be equals to what we can
19:40 - use over there we have the console.log
19:43 - that should be we can have the server
19:44 - open so we have the lock statement as
19:46 - well so you can see once we save this
19:49 - file so node modon would dedu the code
19:51 - changes then it will automatically rerun
19:53 - reopen your development server you can
19:56 - see now you see a file which is a server
19:57 - open and everything seems to be working
19:59 - perfectly
20:01 - fine so this is a very basic application
20:04 - but this application does not accept any
20:06 - of the route so let's create the routes
20:08 - as well and some middle Wars as well so
20:10 - what we're going to do here so first we
20:12 - need to register a new route that should
20:14 - be we can have the app. get request so
20:16 - if you want to create a get request so
20:18 - if you don't know about this type of
20:19 - requests like the get post patch put
20:22 - delete so I'm going to show you as well
20:24 - so there are four type of requests which
20:26 - are mainly used inside the backend
20:28 - velopment so there are four type of
20:30 - requests which are mainly used inside
20:31 - the backend development so these four
20:33 - request are so first request that we
20:35 - have is the get request it means like we
20:38 - want to get some data from this backend
20:40 - or from the database so that's why we
20:42 - send the get request and then we have
20:45 - the put request in which if we want to
20:47 - update or modify or mutate some data
20:49 - then we use the put request and there
20:52 - are are post request as well like if you
20:53 - want to send some data like if you want
20:55 - to create a new blog post or something
20:57 - so that's we use the post request and
21:00 - there's delete as well so we have the
21:01 - delete so I think the spelling is wrong
21:04 - so we have the delete request as well so
21:06 - inside the delete request if we want to
21:08 - send some data to delete something so
21:10 - that's why we use the delete statement
21:12 - over there so these are just the HTTP
21:14 - verbs for incoming request so these are
21:17 - the major four HTTP verbs that we'll be
21:19 - using and after that now what do we want
21:21 - to do so now we want to have some routes
21:23 - over this application so now we want to
21:25 - generate some endpoints in which we can
21:26 - make a new request so first endpoint
21:29 - could be we can have the app do we can
21:30 - have the get so get directly you can use
21:33 - directly the app.get over there then you
21:35 - can provide here the URL so URL can be
21:38 - slash it means the Local Host 5,000 SL
21:41 - nothing and if you provide the hello
21:42 - over there suppose that going be the
21:43 - hello it means now you want to make a
21:45 - request on Local Host 5,000 /hello and
21:49 - after that what you need to do so you
21:50 - can move on so you can have a call back
21:52 - function so inside the call back
21:54 - function you have the three parameters
21:56 - the first is the request second second
21:58 - is the response the third would be the
22:00 - next so these three are the call back
22:02 - parameters that you get over there and
22:04 - these three call back parameters have a
22:06 - reason the first is the request object
22:08 - so if the front end or client has
22:10 - requested you something so it is there
22:13 - inside the request and we have the
22:15 - response as well response means if the
22:17 - client has requested something then it's
22:20 - a duty to send back some response so
22:22 - that's why we use the response over
22:24 - there and we have the next as well so
22:26 - next is used to move on to to the next
22:28 - available middle WS so all of the middle
22:30 - WS that we Define so these are just the
22:32 - middle WS inside the express so Express
22:34 - handles it as a middle W so if you don't
22:37 - know about the middle W so after this
22:38 - chapter now we'll be having the deep
22:40 - understanding that what is the middle
22:42 - wave so middle W are just the functions
22:44 - which handle the request so this is also
22:47 - a middle W so next is used to move on to
22:49 - the next middle W this is a simple route
22:51 - and you can see suppose you make a
22:53 - request on/ and if you want to send
22:55 - something to the client then you can use
22:57 - the the return statement then you can
22:59 - have the response then we can have the
23:01 - send you can have the response. send if
23:03 - you want to send some static string over
23:05 - there that can be weaken at the hello it
23:07 - means once you make a request to app.get
23:10 - /hello it means now you will be
23:12 - receiving the hello over there and for
23:14 - testing that you can move on you can
23:16 - download the postman so Postman is a API
23:18 - testing platform for testing any type of
23:20 - API that could be the graphql API that
23:22 - could be the normal API so you can use
23:24 - that over
23:26 - there and after that now what do we want
23:28 - to do so let's make the request so we
23:30 - can add the
23:35 - HTTP that could be the Local Host the
23:38 - port of 5,000 SL we can the hello so
23:41 - let's see what happens if we make the
23:42 - get request on this Endo so let's just
23:45 - click on the send so now you can see now
23:47 - you received the hello over there so it
23:48 - means everything seems to be working
23:50 - perfectly fine you can see now you are
23:52 - making the request to the hello it means
23:53 - now you are getting the response as well
23:55 - so you can say this is a get request but
23:58 - if you send the post request over there
24:00 - now you won't receive anything if you
24:01 - click on the send you can see error
24:03 - cannot post this because now this route
24:06 - is not registered over there so you are
24:08 - registering only get route so it will
24:11 - only work with the get and now let's
24:13 - just use the post as well suppose I
24:15 - change this to the post over there
24:16 - suppose that could be the post and
24:18 - mainly the post is used to send some
24:20 - data along with the request so we send
24:23 - some data with the help of the body so
24:25 - inside the body we can send these data
24:27 - like the form data if you want to use
24:29 - the forms we can have the binary data
24:31 - the raw data and here inside this
24:33 - application we'll be using the raw and
24:35 - we'll be using the Json object we'll be
24:37 - using the Json so for the input output
24:39 - for this application we'll be using the
24:41 - Json type of data so let's just send
24:43 - some Json data like that can be the name
24:46 - so name can be that should be equals to
24:47 - we can have the Nik over there it's my
24:49 - name so let's just click on the send so
24:51 - you can see if you just click on the
24:53 - send of the hello so you can see if you
24:54 - will move on if you will just click on
24:56 - the send you will receive the hello over
24:58 - there because now you are doing so you
25:01 - can see you are just returning the
25:02 - response. send which is a hello but if
25:04 - you want to read this data like whatever
25:07 - data that the front end or client is
25:08 - sending so if you want to read this data
25:11 - you can move on so you need to add
25:13 - another middleware of the express you
25:15 - need to add another middleware so which
25:17 - is we can have the app do we can have
25:19 - the use so we can have the app do use so
25:22 - app. use is used to define a middleware
25:24 - and the middleware that we use to define
25:26 - is the express we can have the Json so
25:29 - it tells this application that will be
25:31 - using the Json for the incoming and the
25:33 - outgoing requests for this application
25:35 - so it will pass all of the incoming data
25:37 - to the Json so after that you can move
25:39 - on you can just lock something like you
25:42 - can have a log that should be equals to
25:44 - we can have the request so you are
25:45 - sending the body so you are sending the
25:47 - body over there right so you can have
25:49 - the request do we can have the body and
25:51 - you are sending the Json data it will be
25:53 - passed to the Json then you can just
25:55 - directly access the key of the name you
25:58 - can have the response body do name if
26:00 - you click on the send so let's see what
26:02 - happens this time so if you move on if
26:05 - you just click on the send you can see
26:06 - now you see the nickel over there inside
26:08 - the terminal so everything seems to be
26:10 - working perfectly fine so this is a post
26:13 - request and now let's just understand
26:15 - the put request as well so put is also
26:17 - same that you send some data directly
26:19 - from the front end so put is just a verb
26:21 - in which it is used to modify something
26:23 - into our back end suppose that can be
26:25 - the database operation modify some
26:27 - socket and all so it is used for the put
26:30 - so it works same so if you use the put
26:31 - over there it also accepts the data as
26:34 - well if you click on the send then still
26:36 - you will see the nickel over there and
26:37 - that's how it's going to work and after
26:40 - that let's move on let's have a delete
26:41 - as well so we can have the delete so
26:43 - delete also works same so you can send
26:45 - along some data as well with the delete
26:47 - if you click on the send if you just
26:49 - click on the delete if you just click on
26:50 - the send now you will be seeing the Nik
26:52 - over there so it is same but the put and
26:55 - the delete and the get there is some
26:57 - something so you can say this was a
26:59 - static route it means now that's a
27:01 - static route that can be the hello but
27:03 - what if there are millions of users
27:05 - inside the database and you want to
27:07 - access only one users record then how
27:10 - can you do that so there are two options
27:12 - first you can send some data so inside
27:14 - the data you can send the ID of the user
27:16 - inside this and then you can fetch the
27:18 - user directly from the database then you
27:20 - can send the response but the second
27:22 - operation would be instead of sending
27:24 - the ID into this you can send the ID
27:26 - into the URL so that would be a dynamic
27:28 - route so inside the URL you can send the
27:31 - ID so suppose that can be SL hello
27:33 - suppose that can be slash we can have
27:35 - the user that can be/ ID of the user
27:38 - that can be 1 2 3 4 5 it means now you
27:41 - want to fetch the record of the user and
27:43 - the ID of the user is 1 2 3 4 5 that can
27:46 - be the ID as well that can be the
27:47 - username as well so let's move on so if
27:50 - you want to accept the dynamic route it
27:52 - means now we don't know that what would
27:54 - be there after the user then there is
27:56 - one thing inside the express which is
27:58 - known as the dynamic routing so that
28:00 - could be app. delete SL we can up the
28:02 - user because the base URL structure has
28:04 - a user then you can declare a parameter
28:07 - inside the endpoint that could be colon
28:10 - that can be the ID so this is the
28:12 - parameter now so after the user if
28:14 - there's anything in so after the user if
28:17 - there is anything inside the URL then it
28:19 - would be stored inside the ID so this is
28:22 - a variable now so now what you need to
28:24 - do and to access this ID you can move on
28:26 - you can have the request
28:27 - to we can have the params and inside the
28:29 - params you will get the ID over there so
28:32 - you get the ID over there inside the
28:33 - params so let's just see so if you just
28:35 - click on the send you can see now you
28:37 - got the params ID which is you can see
28:40 - now you got the 1 2 3 4 5 and there you
28:42 - can see this is the ID you can name it
28:44 - whatever you want but if you name is
28:46 - like user ID or anything like that so
28:48 - you need to accept same thing over there
28:50 - you need to accept the same thing
28:52 - because this is a variable and this
28:54 - cannot be renamed here so we have the
28:56 - request. ps. idid if you just click on
28:58 - the send you can see that's a dynamic
29:01 - request so you can see this was a very
29:03 - simple application and this was a very
29:04 - basic tutorial of using the express with
29:07 - the nodejs you can see we created a
29:09 - couple of routes we created Dynamic
29:10 - routes and you can see we got the param
29:13 - ID we got the data as well directly from
29:15 - the client so you can see that's how we
29:17 - can create the applications with the
29:18 - monag with the nodejs and now let's move
29:21 - on so now this was a very basic
29:23 - application and now we are going to
29:24 - remove that so what we're going to do so
29:27 - we we going to remove this request over
29:28 - there and we want to remove this as well
29:31 - so you can see now we just have the app.
29:33 - use we have the express. Json we have
29:35 - the middle be over there we have the
29:37 - middle
29:38 - be and you can see that's how it's going
29:40 - to work and there we have the
29:43 - connection we have the connections over
29:45 - there and listen
29:47 - n we have the connections and we have
29:50 - the listen not over there and that's how
29:52 - it's going to work you can see now we
29:54 - have the connection and listeners now we
29:56 - have this now we have the Edition and
29:58 - now let's move on let's just create some
29:59 - folder directories as well inside this
30:01 - application so inside the source now
30:03 - what do we need to do so first we would
30:05 - create the folder for all of the models
30:07 - inside this application so what models
30:09 - do we'll be having so we'll be having
30:10 - the models over there so we can have the
30:12 - models over there we have the models and
30:15 - then we can move on so after the models
30:17 - then we want to create another folder
30:19 - for the routes so instead the routes
30:20 - we'll be having all of the routes of
30:22 - this application then we can move on
30:24 - then we can have the controllers as well
30:27 - so here we have the controller functions
30:29 - so these are the functions which are the
30:31 - Handler functions so we create the
30:32 - functions so we create the route end
30:34 - points inside the routes and the
30:35 - controller functions would control all
30:37 - of the incoming API request then what do
30:40 - we need to do then we can create another
30:42 - folder that could be we can have the
30:43 - utils over there so these are the
30:45 - utility functions and then we would
30:47 - create another folder that could be for
30:49 - the config as well which is used for the
30:51 - configurations inside this course so you
30:54 - can see now we have created the very
30:55 - basic setup of this application so if
30:57 - you see the first step over there we
30:59 - have created uh we have seted up the
31:01 - node express application with the
31:02 - typescript and everything is going to
31:04 - work perfectly fine and now we want to
31:07 - move on to the next step which is
31:08 - integrate the mongodb database
31:09 - connection inside our application so it
31:12 - would be so it would be very simple so
31:15 - what we need to do so after logging on
31:17 - into the mongod DV now you can move on
31:19 - you can just open this drop down you can
31:21 - move on you can click on the create
31:22 - project so with the help of this you can
31:24 - create a new brand new mongodb project
31:26 - with this and after that you can see now
31:28 - you want to name your project as well so
31:30 - what would be your project name so you
31:32 - can have the M we can have the AI we can
31:34 - have the chatbot over there so we have
31:37 - the name of this project then we can
31:38 - click on the next and after that we can
31:40 - just uh skip these things then we can
31:42 - just directly click on create project so
31:44 - it will create the brand new mongodb
31:46 - project for us and after that it will
31:48 - ask you for a couple of questions as
31:49 - well after that so first you can see
31:52 - first we have a screen of the deployment
31:53 - so now we want to deploy a database so
31:56 - here we'll be using the Cloud version of
31:57 - the mongodb so we won't be installing
31:59 - the mongodb and Compass over there to
32:01 - create the CMS type but here we'll be
32:03 - using the cloud version so we can just
32:04 - directly click on the
32:08 - create and after that you can see there
32:10 - are three options for us we have the M10
32:12 - option which is 0.08 per hour and you
32:15 - have the storage of around 10 GB you
32:17 - have the 2 GB of RAM the memory then you
32:20 - have the two virtual CPUs then you have
32:22 - the serverless approach as well which is
32:24 - $0.10 per 1 million RS then you have the
32:27 - storage uh sorry it's a type of scalable
32:29 - database you have the storage of up to 1
32:31 - TV you have the auto scalable Ram Auto
32:33 - scalable virtual CPUs then there is free
32:36 - version as well which is the m0 which is
32:38 - used for Learning and exploring the
32:40 - mongodb in a cloud environment so we'll
32:42 - be using the m0 as well and I will keep
32:44 - these settings as default now we will
32:46 - just click on the create so now we'll be
32:48 - creating around mongodb Cloud deployed
32:51 - version database and it is asking for a
32:53 - couple of things over there we can just
32:55 - click on the verify so let's see what
32:58 - happens bicycles we can click on the
33:02 - verify now we are verified now we can
33:04 - move on so there we have a security
33:06 - quick start as well so inside this it is
33:08 - very required thing you can see now you
33:09 - want to provide the username in which
33:11 - now we want to connect to this database
33:13 - so username can be we can have the
33:15 - anadani over there we have the anadani
33:17 - for the username then we can click on
33:19 - autogenerate secure password so it will
33:21 - just generate a secure password for us
33:23 - then we can copy that password somewhere
33:25 - so we can copy that password where
33:27 - inside the EnV so for a temporary now
33:30 - I'll be using this password over there
33:32 - now you can see now you can just click
33:34 - on create user so with the help of this
33:36 - now you'll be creating your brand new
33:37 - user and after that you can see now you
33:39 - have the my local environment Cloud
33:41 - environment so what you need to do so
33:43 - after that you just need to click on
33:44 - finish and close and then you can move
33:47 - on to the go to
33:48 - overview and after that again you can
33:50 - move on one time to the network exess so
33:53 - only from this IP address so this is
33:55 - your IP so only from this IP address now
33:57 - you are going to connect to this mongod
33:59 - database but if you want to allow it
34:01 - from anywhere you can click on this
34:03 - button allow access from anywhere then
34:05 - you can just click on the confirm so
34:06 - with the help of this you can have the
34:08 - allow access from anywhere so now you
34:09 - can connect to the mongodb database from
34:11 - any network from any IP address now you
34:15 - are set it up and ready now you can just
34:17 - click on the database and then you can
34:19 - see now if you click on the connect and
34:21 - there you can see after clicking on the
34:22 - connect then you can move on you can
34:24 - click on the drivers and then you can
34:26 - just copy this URL so here you have the
34:28 - connection URL and from this URL now you
34:31 - are going to connect to this mongodb
34:33 - database so you can move on you can just
34:35 - copy that URL over there and there's a
34:37 - note as well you need to replace the
34:39 - password for the anadani user so you can
34:42 - see we have copied this password and do
34:44 - not use my password because I'll be
34:46 - changing this password after creating
34:47 - this video so what you're going to do so
34:50 - you need to copy this connection string
34:52 - you need to paste that over there inside
34:53 - the mongodb URL so now you have the
34:57 - connection string over there and instead
34:59 - of this password you need to use this
35:01 - password over there so you can cut this
35:03 - and you can place this password in place
35:05 - of that and then you can see now you
35:07 - want to provide the database name as
35:08 - well so after this slash now you need to
35:11 - provide the database name that could be
35:12 - we can have the test or we can have the
35:15 - we can have the chatot over there we
35:16 - have the chat bot like this so this is a
35:18 - mongodb URL it is set it up and ready
35:21 - and now to use the environment files and
35:23 - the environment variables inside our
35:25 - application so there's one thing that
35:26 - you need to do so you need to import
35:28 - something from the en EnV import
35:31 - something from that should be from the
35:33 - EnV and the something that you want to
35:35 - use would be we can have the config so
35:37 - you need to import the config and then
35:39 - you need to run the configuration of
35:41 - this so you just need to run the
35:42 - configuration and with the help of this
35:44 - now you can connect to the mongodb
35:46 - database securely and everything seems
35:48 - to be working fine and after that inside
35:50 - the source you can create another folder
35:52 - that could be we can have inside the
35:54 - source you can create another folder
35:56 - that could be we can have the DB and
35:58 - inside the DB you can just create a new
36:00 - file that could be we can have the
36:01 - connection do we can have the TS and
36:03 - after this now what do we need to do so
36:05 - here we want to use the package to
36:08 - connect to the mongodb database and if
36:11 - you don't know about the mongus you can
36:12 - just directly move on to the mongus so
36:15 - first I'm going to use the test profile
36:16 - over there so that should be we can have
36:18 - the mongus over there so it's a odm
36:21 - which is object data modeling with the
36:22 - mongodb so elegant mongodb object
36:25 - modeling for the nodejs so you can see
36:27 - it is used to write the mongodb
36:29 - validation casting creating business
36:31 - logic B plate and all the things you can
36:34 - see first you need to require the mongos
36:36 - this is a complete setup of the mongos
36:38 - you can say in just five lines first you
36:40 - want to require the mongos then you want
36:41 - to connect to mongodb URL you can
36:43 - provide the connection string then you
36:45 - create a model that could be const Cat
36:47 - that should be mongos model the name of
36:50 - the model and then it will be created a
36:52 - collection so the collection would be
36:53 - created as a cat then you have the name
36:55 - that should be the string
36:58 - and then you can see now if you want to
36:59 - create a brand new cat you can have the
37:01 - const you can have the kitty over there
37:03 - that should be a new cat and then you
37:05 - can provide the name inside this because
37:07 - the name was required you can see the
37:09 - name was there so now you can see after
37:11 - that you can have the KY do save so you
37:14 - just need to call the save function
37:15 - directly from the mongos to save a
37:17 - record inside the database and it is
37:19 - completely open source and it completely
37:21 - free and it is very easy to work with so
37:24 - now let's move on so here we want to
37:26 - just export a function from which we can
37:28 - connect to mongodb database and after
37:30 - that we have the connect to database and
37:32 - this is an asynchronous function so we
37:34 - need to write the async over there and
37:36 - that's how it's going to work because
37:38 - it's a database operations so we need to
37:39 - wait for this task and after that we
37:41 - need to import something from the mongus
37:44 - to connect to the database so you can
37:46 - move on to the top you can have the
37:48 - import statement you can import
37:49 - something from we can have the mongus
37:51 - over there we have the mongos and
37:53 - something that you want to use would be
37:55 - we can have the connect so connect
37:57 - function is there inside the mongos to
37:59 - connect with the mongodb
38:01 - database and after that now what do we
38:03 - want to do so you can move on so inside
38:05 - this what you need to do so you can move
38:08 - on so you can have the track catch block
38:10 - over there you have the track catch
38:11 - block and there you have the error and
38:13 - after the try now what do we need to do
38:15 - so we just need to await for this we
38:17 - need to await for a task which is we can
38:19 - of the connect so inside the connect you
38:21 - need to provide the URI as well so the
38:23 - URI is already there inside the
38:25 - environment you can just grab this
38:27 - mongod URL you of the process the
38:29 - current process of the nodejs dot we can
38:32 - have with the environment so envirment
38:34 - variables of the current process dot we
38:36 - can have the mongodb URL so it will help
38:38 - you to grab the mongodb URL and the
38:41 - connect function will connect to the
38:42 - mongodb database and after that you have
38:44 - the catch error so if you get an error
38:46 - then you can have the throw we can have
38:48 - the new error so you can have the throw
38:49 - a new error or that should be equals to
38:52 - we can you can use anything like we can
38:54 - have to throw new error that should be
38:56 - equals to we can have we cannot
38:59 - connect to
39:02 - MB like this so we can have the Mong TB
39:05 - like this so you have the new error over
39:07 - there like that and everything seems to
39:09 - be working fine and you can log this
39:11 - error as well that what was the error so
39:13 - you can have a console.log that should
39:15 - be the error so that's how it's going to
39:17 - work and I think what you can do so
39:19 - instead of the default export you can
39:20 - remove the export default from there now
39:22 - you have this function we can create
39:24 - another function if you want to
39:25 - disconnect from the database and it will
39:27 - help us inside the error handling so we
39:30 - can create another function we can have
39:31 - the sing we can have the function we can
39:34 - have the
39:36 - disconnect we can have the disconnect
39:38 - from we can have the DB as well and we
39:40 - do not need any param over there and
39:42 - this will also be an a synchronous
39:43 - function and after that now what do we
39:45 - need to do here so inside this we need
39:47 - to move on we can have the try catch
39:49 - once again so inside the try now what we
39:51 - need to do we can add the weight and we
39:53 - want to import another function from the
39:55 - wongus that could be we we can have the
39:56 - disconnect and it is also a promise I
39:58 - think right then we can have the await
40:00 - we can have the disconnect so if
40:02 - anything wrong happens within our
40:04 - application inside our application then
40:06 - we'll be disconnecting our application
40:07 - from the database as well and that's a
40:09 - secure approach because we want to
40:11 - create a completely secure application
40:13 - so we want to take care of the security
40:15 - parameters and after that if we get an
40:17 - error again we can just move on we can
40:19 - just have these errors over there we can
40:21 - just log the error connect to mongodb
40:23 - and these are the functions that we want
40:25 - to use and after that what do we want to
40:27 - do so after that we can just export
40:28 - these functions so we can export these
40:30 - functions directly from here we can have
40:32 - the connect to database then we can have
40:35 - the disconnect from database so that's
40:37 - how it's going to work and after that
40:39 - now what do we need to do so I think we
40:41 - can just manage this application folder
40:42 - structure once again so this is a root
40:44 - file of the index.ts now we can create
40:47 - another file over there that could be we
40:48 - can have the app dot we can have the TS
40:51 - and now all of the applications code
40:52 - would be then handled inside the app TS
40:55 - so let's move on so let's just copy all
40:57 - of that and let's just paste that inside
40:59 - the appts so only this only till this
41:02 - the app. use so all of the middle and
41:04 - all would be defined inside the app. TS
41:07 - and then we'll be having the export I
41:08 - think we can have the export we can have
41:10 - the default and that should be we can
41:12 - have the app over there we have the
41:14 - export default app and then we want to
41:16 - import the app directly from here we can
41:18 - have the import I think we can just
41:20 - directly use the app so we'll be using
41:22 - the import app from app and there you
41:23 - can see now we have the lock statement
41:25 - over there and that's how it's going to
41:27 - work and then you get an error so you
41:30 - need to write the GS over there you uh
41:32 - you need to write the GS like this and
41:34 - you can see now your application server
41:35 - is over open and everything seems to be
41:38 - working perfectly fine so you can see
41:40 - now we are managing our application code
41:41 - now we are dividing the code to increase
41:43 - the readability of our code and
41:45 - everything seems to be working perfectly
41:47 - fine and now we only want to open the
41:49 - application server once our application
41:51 - is connected to database so first we
41:53 - need to have the connect to database
41:55 - over there connect to to database and
41:57 - after that only now we want to open the
41:59 - development server so we can move on so
42:02 - we can have the app. listen over
42:04 - there app. listen over there then we can
42:07 - have the catch as well so we can have
42:08 - the catch if we get an error then we can
42:10 - move on we can have the console do we
42:12 - can have the log we can have the error
42:14 - over there and after that in the end
42:16 - we'll be having some error handling as
42:17 - well that will be stopping the terminal
42:19 - as well so we need to use that as well
42:22 - so you can see now our application is
42:23 - connected to database and you can see
42:25 - now we do not have any
42:26 - and after that we have the server open
42:29 - and we can have the
42:31 - connected so I think we can use this
42:34 - string over there you can see now we
42:35 - have the string over there we have the
42:37 - server open and connected to database so
42:38 - you can see now we have the handshake as
42:40 - well so that's how we are going to
42:41 - working so you can see now we have
42:43 - defined the port number as well so
42:45 - suppose if this port is not available
42:46 - inside this so we can move on to the
42:49 - application inside the invironment we
42:50 - can Define the port over there as well
42:52 - we can have the application Port so that
42:55 - should be we can have the 5 ,000 for the
42:56 - port and then we can use the port as
42:58 - well so inside the index.ts once again
43:01 - so we can use the port as well so before
43:04 - this we can have the const the port and
43:07 - that should be equals to we can have the
43:08 - process we can have the environment do
43:11 - we can have the port over there and if
43:12 - the port is not available then only we
43:14 - want to use the 5,000 over there so we
43:17 - can have the port instead of the 5,000
43:19 - directly so that's how we are going to
43:21 - working so that's how we'll be working
43:22 - with the node and the express
43:24 - application and there you can see now we
43:25 - have the message of the server open and
43:27 - connected to database and everything
43:28 - seems to be working perfectly fine so
43:31 - now we have connected the MP database
43:33 - inside our application and it is working
43:35 - totally fine and now we want to see The
43:37 - Next Step which is now we want to
43:38 - register or login on the open portal and
43:41 - we want to get the API Keys directly
43:43 - from the so you can see now we'll be
43:46 - creating the application from open we'll
43:48 - be using their API so we want to get the
43:50 - API keys for that so what we need to do
43:53 - so you can move on to the openi platform
43:55 - you can move on to platform. open.com
43:58 - you have the apps you can see all of the
43:59 - modern apps are created on the openai
44:02 - then you can move on you can just click
44:03 - on the API because we'll be using the
44:05 - integrating we'll be using the
44:07 - integrating the openai models into our
44:08 - application so let's click on this and
44:11 - there you can see after that we need to
44:13 - use that what type of API that we'll be
44:14 - using and after that now you need to
44:17 - move on to the personal section you can
44:18 - move on to the profile and after that
44:20 - you can just move on you can have the
44:22 - view API keys and after that you can
44:24 - create a new API key as well so you can
44:26 - just click on create new API key you can
44:28 - provide the name as well so we can have
44:30 - the AI we can have the chatbot over
44:32 - there we have the AI chatbot you can
44:34 - just click on create a secret key so
44:36 - after that what you need to do so there
44:38 - would be the keys generated and you need
44:40 - to copy this key because you won't be
44:42 - able to view it again you can just copy
44:44 - that and then you can just paste that
44:45 - into your envirment file and do not use
44:48 - my secret again because I'll be just
44:50 - deleting this secret after recording
44:52 - this video so that's my open a secret as
44:55 - well and there you can see that's how
44:56 - it's going to work and then you can just
44:58 - move on and you need a paid account as
45:00 - well for using this so you need to
45:01 - provide a credit card or the debit card
45:03 - but it is very nominal charge so you so
45:07 - you hardly pay for this because it is
45:09 - very nominal charge for using the chat
45:10 - GPT over there and after that you can
45:12 - just close that because now you got the
45:14 - API key but you can move on to the
45:16 - settings as well so you can get the
45:17 - organization ID as well so you need this
45:20 - as well you can just copy that you can
45:22 - just again paste that over there we can
45:23 - have the open AI we can have the
45:25 - organization
45:28 - we can have the
45:33 - organization we can have the open
45:35 - organization ID that should be this ID
45:36 - over there we have this ID over there so
45:39 - now we need this ID as well for
45:40 - connecting to the open and that's how
45:42 - it's going to work so we just need the
45:44 - secrets and the organization ID and
45:46 - that's it so now we want to move on so
45:49 - now you can see now we have registered
45:50 - and the logged in on the open AI portal
45:52 - now we got the API Keys now we want to
45:54 - move on to the development so now we
45:56 - want to build a secure authentication
45:58 - with the web tokens with the HTTP only
46:00 - cookies and we want to create some end
46:02 - points for us so let's move on and let's
46:04 - just start building the CPI endpoints
46:06 - for our application so let's move on so
46:08 - here you can see first we need to move
46:10 - on to the app. TS and here we want to
46:12 - define the middle WS that we'll be using
46:14 - so first you need to just stop the
46:16 - terminal so either you can open another
46:18 - terminal as well you can have the CD and
46:21 - inside the backend folder you can
46:22 - install a dependency which is a Morgan
46:24 - so we can add the npm install we can
46:26 - have the Morgan over there so what
46:28 - Morgan package will do so it will just
46:30 - dis so it will just uh give you some log
46:32 - description that what type of request
46:34 - was handled and what was the response
46:36 - and what was the status code so we have
46:39 - the Morgan as well so what we need to do
46:41 - so we can import this we can have the
46:42 - import we can have the Morgan over there
46:45 - that should be from we can have the
46:46 - Morgan like that we can have the Morgan
46:48 - over there and here what we need to do
46:50 - so after this Json then we can have
46:52 - another middle that could be app. use
46:55 - then we can the Morgan over there we can
46:57 - have the
46:59 - Morgan and after that now what do we
47:01 - want to do so here we have the Morgan
47:03 - over there so after the Morgan then we
47:06 - need to provide a string that could be
47:08 - we can have the dev over there we have
47:09 - the Morgan that should be equals to the
47:11 - dev and after that if we make an API
47:13 - call to this back end then we'll be
47:14 - seeing the lock message as well so we
47:16 - want to remove it inside the production
47:18 - so once we build this application we
47:20 - want to remove this as
47:24 - well
47:27 - so we only want to use this inside the
47:29 - development mode and once we enter the
47:30 - production then we want to remove this
47:32 - as well and after that now what do we
47:34 - want to do now we want to generate the
47:35 - middleware over there so now we want to
47:37 - create the middleware for our
47:38 - application we can have the first
47:40 - middleware we can have the app. use that
47:42 - could be we can have the API structure
47:44 - for our application that could be Local
47:46 - Host 5,000 or any domain slash we can
47:49 - have the API over there SL we can have
47:50 - the API SL we can have the version as
47:52 - well we can have the API slash we can
47:54 - have the V1 and after that we can create
47:56 - the route Handler file which can be the
47:58 - main route Handler so inside the routes
48:00 - we can have the index so we can have the
48:03 - index do we can have the TS over there
48:05 - and set the routes and after that now
48:06 - what do we need to do so we can move on
48:09 - we can have the import we can have
48:11 - something from we can have the express
48:14 - and we want to import the routing from
48:15 - the express so we can have the router
48:17 - from the express to use the routing and
48:19 - after that we can have the const we can
48:21 - have the app we can have the
48:23 - router the whole application rout AO and
48:26 - that should be equals to we can have the
48:27 - router from the express so now we have
48:29 - the router Express and after that now
48:32 - what do we want to do so now we'll be
48:33 - having the export we can have the
48:35 - default so that should be this router
48:38 - sorry and that should be this app router
48:40 - over there because now we want to export
48:42 - this app router as well and now we want
48:44 - to use this app router so after we make
48:46 - a request on app so after we make a
48:49 - request on/ API slv1 then it will be
48:52 - handled to this app router so that's how
48:55 - it's going to work so after this so
48:57 - after the express will move on to this
48:59 - endpoint so it will handle so the app
49:01 - router will handle this type of endpoint
49:03 - over there and after that now we want to
49:05 - create the structure of our routes as
49:06 - well so we can have the app router dot
49:09 - we can have again the use we can again
49:10 - use the use over there because here we
49:12 - want to generate a middleware so on the
49:14 - use if the request is made to/ user then
49:17 - we'll be moving on and then we'll be
49:19 - using the users's routes over there
49:21 - let's create the routes for the user so
49:23 - we can move on so we can have the user
49:26 - SL we can have the routes dot we can
49:28 - have the TS over there and after that we
49:30 - need to Define these routes so again we
49:32 - can use the import that should be we can
49:34 - have something we can have the router
49:37 - like this router from Express then we
49:39 - can have the cons we can have the user
49:41 - routes so that should be equals to we
49:44 - can again use the router over there we
49:46 - can have the router like this we want to
49:48 - router class then we can have the export
49:52 - uh we can have the default and that
49:53 - should be we can have the user routes
49:55 - over there
49:56 - so then if we make a request to/ user
49:58 - then we want the user router to handle
50:01 - those incoming request and that's how to
50:03 - handle those incoming request and that's
50:05 - how it's going to happen and then we can
50:07 - create another router over there for the
50:08 - chats as well so we can have the chats
50:11 - we can have the
50:14 - routes dot we can have the TS and now we
50:16 - want to follow the same thing for the
50:18 - chats as well so we can move on we can
50:20 - just copy that and then we can just
50:22 - paste that over there so now we can have
50:24 - the chat routes
50:34 - so here we have the chat routes so you
50:36 - can see I'm doing this because I want to
50:38 - increase the readability of the code you
50:40 - can see now we have the index.ts and
50:42 - then we can again copy that we can paste
50:44 - we can have slash we can have the chats
50:46 - over there we have the SL chats then we
50:48 - can have the chat router over there we
50:50 - have the chat routes so it means now
50:53 - once we move on to the domain
50:56 - slash we can have the API slash we can
50:58 - have the V1 because this is a version
51:00 - one and then we can move on to the app.
51:02 - TS you can see once we move on to this
51:04 - API endpoint so then the request would
51:06 - be transferred to this app router so
51:09 - then we have this request and if the
51:11 - request is to/ user then this user
51:14 - routes would handle this request and if
51:16 - this request is on the chat if the
51:19 - request is on the chat over there like
51:21 - this so if it is on the chat then the
51:24 - chat would be handling that
51:25 - so then we have the chats over there
51:27 - like this so then the chat routes would
51:29 - handle that request so the chat routes
51:32 - would handle that request so that's how
51:34 - it's going to work and now we can
51:35 - finally move on to the user router and
51:37 - now we can Define all of the HTTP verbs
51:39 - that will be accepting inside this
51:41 - application so you can see it falls a
51:43 - bit complicated process but it increases
51:45 - the readability of the code that we want
51:47 - to use inside this application so now
51:49 - you can see now we have the user router
51:51 - let's just create the request over there
51:52 - we can have the user routes or we can
51:54 - have the get request so suppose that
51:56 - could be get we can have the slash over
51:58 - there and after this slash now what do
52:00 - we want to do so after this slash then
52:02 - we can have the controller function as
52:04 - well so now we don't want to create all
52:06 - of the controllers and the routes over
52:08 - there so for the Handler functions for
52:09 - handling this request we want to move on
52:11 - to the controllers we can have the user
52:14 - we can have the
52:15 - controllers do we can have the TS so now
52:18 - we want the users's controller to handle
52:19 - the incoming requests for the users so
52:22 - suppose that a get request so what do we
52:24 - need to do so we want to create a
52:26 - function we can have the export cost we
52:28 - can have the get all we can have the
52:30 - users like that so that would be equals
52:32 - to a function like that so from this now
52:34 - we want to get all of the users from the
52:36 - back end so that's how it's going to
52:38 - work and after that now what do we want
52:40 - to do so now we want to get all users
52:42 - directly from the database and then you
52:45 - can see that's how it's going to happen
52:46 - so we have the get route and after that
52:48 - we can just assign this function over
52:50 - there we can assign to get all users
52:52 - directly from the controller so
52:54 - everything seems to be working perfectly
52:56 - fine inside our application you can see
52:58 - now we have defined the routes as well
52:59 - inside this application and everything
53:01 - seems to be working perfectly
53:04 - fine so welcome back and now before
53:07 - moving ahead into the routes and all so
53:09 - let's just Define the models that we'll
53:10 - be using inside our application so now
53:13 - we would be using some models as well
53:14 - the database models which are the
53:15 - schemas so we need to Define them as
53:18 - well so for defining the model let's
53:20 - just see that what will be the fields of
53:22 - the user model so here comes a new topic
53:24 - about the database models so we'll be
53:26 - having the model of the user and after
53:28 - that the model user will contain the
53:30 - name we'll be having the email of the
53:32 - model user we'll be having the password
53:34 - as well and then we'll be having the
53:35 - chats as well so chat will not be a new
53:38 - collection or a new model so we'll be
53:40 - creating a brand new object type schema
53:42 - for the chat so all of the users chats
53:45 - would be there inside the chat and this
53:47 - would be an array of the chat schema so
53:49 - these are the database models that we'll
53:50 - be defining so let's just move on to the
53:52 - application so inside the models what we
53:55 - can do so we can create a new file that
53:57 - could be we can have the user dot we can
53:59 - have the TS and after that we need to
54:01 - create a new schema so like we use the
54:03 - mongus so like initially we showed you
54:05 - the mongus that how The mongus Works to
54:07 - create the schema so that's how you're
54:09 - going to create that so we can have the
54:11 - import we can have the mongos over there
54:13 - we can import the full mongos library
54:15 - and after that now what do we want to do
54:17 - so we can have the const we can have the
54:19 - user schema like that we can have the
54:21 - user schema so that should be equals to
54:23 - new instance of the mongus do we can
54:25 - have the schema so we can have the
54:27 - mongus do schema class so we can make an
54:29 - instance of that and after that we need
54:31 - to provide the schema definitions so
54:34 - schema definitions can contain the first
54:36 - field that we want to provide would be
54:37 - the ID I think the ID would be
54:39 - automatically generated from the mongodb
54:41 - so we don't want to generate that so we
54:43 - can have the name over there so we can
54:44 - have the each user can contain a name so
54:47 - for the name we can have the type for
54:48 - the name so that should be at the string
54:50 - over there and it should be a required
54:52 - field for creating a brand new user so
54:54 - we can have the required validation over
54:56 - there and after that we'll be having the
54:57 - email as well so it is same so we can
55:00 - have the type that should be we can have
55:01 - the string over there and then we would
55:03 - be having the required property so that
55:05 - should be we can have the true for that
55:07 - and then the email should be unique so
55:09 - for that we can have the unique as well
55:11 - we have the unique so that should be
55:13 - equals to the true so this is not a
55:15 - validation but it creates some indexes
55:17 - for the email to search quickly then we
55:19 - can have the password as well so we can
55:21 - have the password over there we can have
55:23 - the password we can have the type over
55:24 - there
55:25 - like this so we can again have the type
55:27 - of that should be inside the string and
55:29 - then we can move on so it also required
55:32 - so we can have required like this and
55:34 - that should be to the true so these are
55:36 - the three fields that we required for
55:38 - the user schema and then the main field
55:40 - is the chats over there the chats so
55:42 - chats would be an array so it would be
55:44 - an array of a new schema so we can
55:46 - Define the chat schema as well before
55:48 - the
55:49 - user so we can have the cons we can have
55:51 - the chat schema over there like that we
55:53 - can have chat schema like that and that
55:55 - should be again equals to new we can
55:57 - have the mongus do we can have the
55:59 - schema over there we can have mos.
56:01 - schema and after that we can just create
56:03 - the ID of the chat so mongodb provides
56:05 - you the ID automatically so if you don't
56:07 - want to provide the ID so it's up to you
56:10 - but if you want to provide the ID then
56:11 - you can just use the ID over there you
56:13 - can have the ID you can again move on to
56:15 - the ID you can Define the type over
56:17 - there that should be inside you can have
56:19 - the string over there inside the type
56:21 - and then you can move on you can have
56:23 - the default as well of the ID so default
56:25 - should be you can import a package from
56:27 - the nodejs so we can have import
56:29 - something from we can have the crypto so
56:33 - directly from the crypto you can get
56:34 - something which is we can have the
56:36 - random uu ID so it will help you to
56:39 - generate a new ID so we can have the
56:41 - random U ID for that so it will just
56:43 - create a new uu ID for us and after that
56:46 - what we can do so we can just define the
56:48 - role so inside this now we want to
56:49 - define the role so there are two roles
56:52 - for using the open a platform that can
56:54 - be the the AI chatbot that is a
56:56 - assistant and there can be the user so
56:58 - there are two roles for that so we can
57:00 - have the type so that should be we can
57:03 - have the string over there and then we
57:04 - want to move on so that should be the
57:06 - required property that should be the
57:08 - required and that should be again equals
57:09 - to the true because the role are
57:11 - required and after the role there's
57:13 - another thing which is a Content so what
57:16 - would be the content content is actually
57:17 - the message so it is also required so we
57:20 - can move on we can just copy the type
57:22 - required and we have the require we have
57:24 - uh we have the type string we have the
57:25 - required which is the true you can see
57:27 - now we have schema for the chats so the
57:29 - two main properties are the role and the
57:31 - content role is the assistant of the
57:33 - user the content is the message property
57:35 - of the
57:36 - user and after that the chats would be
57:39 - the schema so we can have the chats
57:40 - schema inside the array it means now the
57:42 - chats would be having the array of the
57:44 - chat schema inside that and that's how
57:47 - it's going to work and you can see the
57:49 - chat is not required the chats is not
57:50 - required because some users won't be
57:52 - having the chats over there and that's
57:54 - how it's going to work and after that
57:56 - the final thing that we want to do is
57:57 - now we want to export this as well so we
58:00 - can have the export we can have the
58:02 - default that should be equals to we can
58:04 - have the mongus we can have the model
58:06 - over there we can have the mongus model
58:09 - that should be we can have the user so
58:10 - now we have the user model for that and
58:12 - then we want to Prov the scheme as well
58:14 - so we can have the user schema so that's
58:16 - how it's going to work so now we have
58:18 - the new model we have the mongos start
58:20 - model that could be for the user and
58:22 - everything seems to be working perfectly
58:24 - fine over do and if you want to add some
58:27 - validations for the mongus do model so
58:29 - like suppose like in the next year
58:31 - applications what happens is sometimes
58:33 - it creates multiple instances of the
58:35 - mongus model so you can Pro the
58:37 - validation like you can the mongus do we
58:39 - can have the connections over there you
58:41 - have the connections or you can the
58:43 - mongos or we can the models over there
58:45 - the models SL we can have the user like
58:47 - that so if you have the mongus do models
58:50 - user then you don't need to create a new
58:51 - model but here inside the nodejs it
58:53 - doesn't create that it only have one
58:55 - single instance so there won't be an
58:57 - issue and after that you can see
58:59 - everything seems to be working fine over
59:00 - there now you have the mongus model of
59:02 - the user and now you will be having a
59:04 - new collection inside the database of/
59:06 - users so everything seems to be working
59:08 - perfectly fine and now what we need to
59:11 - do so now again we can move back to the
59:13 - users controller and now we can close
59:15 - this as well the PowerPoint because now
59:17 - it will take some time to get back into
59:19 - the PowerPoint again now you can see now
59:22 - we have the get all users so now if
59:24 - suppose make a request to get all users
59:26 - now it means now we want to get all of
59:28 - the users now we want to find all of the
59:30 - users from the database it means now we
59:32 - can again run the try catch block over
59:34 - there so this is a very simple route so
59:36 - we can have the try catch block and
59:38 - inside the try now what do we want to do
59:41 - we can have the const we can have the
59:42 - users so that should be equals to the
59:44 - weight then we can have the user model
59:47 - we can just directly refer to the user
59:49 - model so that equ to the find so we have
59:52 - a function inside the mongus model which
59:53 - is the find so it works on the query so
59:56 - if we provide any query params if we
59:58 - provide any query inside the find then
60:00 - it will find out of the records matching
60:02 - that specific query but if we do not
60:05 - provide any query it will find all of
60:07 - the records from the database and it
60:09 - will give you all of that records so
60:11 - that's how it's going to work and we
60:13 - have an eror for the await because it's
60:15 - not an async function let's just make it
60:17 - as an async and after that now we have
60:19 - the users then you can see now we have
60:21 - the users over there and everything
60:22 - seems to be working fine now we can move
60:24 - on so we can have the return we can have
60:27 - the response so we want to define the
60:29 - variables as well the request response
60:31 - and the next as we did inside the
60:33 - initial application so the request is
60:35 - actually the request object it should be
60:37 - imported from the express the response
60:40 - also should be a response type object it
60:42 - should be imported from the express then
60:44 - we have the next function we have the
60:46 - next over there so we can have the next
60:47 - over there like that and that's how it's
60:50 - going to work and after that you can see
60:52 - now we have the users that should be
60:53 - equals to the await user. find and after
60:56 - that we can just move on we can have the
60:57 - return we can have the response or we
60:59 - can have the status over there that
61:01 - should be we can have the 200 which is
61:03 - okay then we can send the Json message
61:05 - over there we can send the Json over
61:07 - there so that's how we can send the Json
61:09 - response first we Define the status or
61:11 - status is optional if you want to Define
61:13 - then you can just directly refer to the
61:15 - Json you can Define the message like
61:17 - that you can have the message that could
61:18 - be we can okay then we can send all of
61:21 - the users like that so that's how it's
61:23 - going to work and if you get an error
61:25 - you can again send a customizer response
61:27 - for that you can just copy that over
61:28 - there you can just paste that over there
61:30 - you have the message we can have the
61:32 - error like that and then you have the
61:35 - users so instead of this you can send
61:37 - the error message like you can have the
61:39 - message error and then what you need to
61:41 - do you can have the cause over
61:43 - there cause and that should be we can
61:46 - have the error dot we can have the
61:47 - message over there so you uh so you have
61:50 - a message property inside the error so
61:51 - you will be getting the cause over there
61:53 - and now you can just log the error as
61:55 - well you can just log the complete error
61:57 - and that's how it's going to work so you
61:59 - can see this was our first API request
62:01 - for getting all of the users from the
62:03 - database and let's just test it out so
62:05 - we can move on to the postman we can
62:07 - create another collection over there we
62:08 - can just click on that we have a new
62:10 - collection so we can have the name of
62:12 - the collection that could be uh we can
62:15 - have the M AI we can have the chatbot
62:17 - over there m at chatbot and after that
62:20 - let's create another request click on
62:21 - that click on add a request so that
62:23 - would be a new request that would be get
62:26 - all we can have the users like that that
62:28 - would be a request of get all users and
62:30 - inside this we have a get type of
62:31 - request we can provide the parameters
62:35 - HTTP Local
62:38 - Host the port of 5,000 slash we can have
62:42 - the API slash we can have the V1 slash
62:46 - we can have with the users so instead of
62:49 - writing the Local Host 5000 API what we
62:52 - can do is we can make this as a variable
62:55 - we can have API V1 so we can make this
62:58 - as a variable I think we can make this
63:00 - like this so you can see now we have
63:01 - this set a variable so we can have the
63:03 - set a variable it means now we want to
63:05 - have the back
63:09 - end Base address we can have the back
63:12 - and Base address like that so we can
63:14 - have the Local Host 5,000 over there we
63:17 - can I think we can just copy full string
63:21 - over there like that 5,000 SL
63:26 - API 5,000 API then we can just click on
63:29 - create a variable that could be set a
63:31 - new variable the variable name could be
63:33 - we can have the
63:34 - backend base we can have URL like that
63:38 - backend base URL and we can have the
63:40 - scope as well or I think we can just
63:42 - Define the base URL over there the base
63:46 - URL and we can Define the scope that
63:49 - should be we can have the local inside
63:51 - just the collection of the money chatbot
63:53 - we can have the/ API SL we can have the
63:56 - V1 as well so that was my mistake
63:58 - because I didn't add the V1 over there
64:00 - so that was the values over there we
64:02 - have the API / V1 and after that we can
64:04 - just click on this save and now we can
64:06 - move on to get all users so now we have
64:07 - the base URL SL we can have the user
64:09 - over there SL we can have nothing
64:12 - because we don't have anything after the
64:13 - user so let's just click on the send and
64:15 - let's see what happens so you can see
64:17 - now we got something we got the message
64:19 - that is okay then we got the users as
64:21 - well which is an array but you can see
64:23 - we do not have any any value inside the
64:25 - array so because now you can see now we
64:28 - do not have any record inside the
64:29 - database and there you can see that's
64:30 - how it's going to work and you can see
64:33 - you got another lock statement which is
64:34 - you can see now you got the get and the
64:37 - and sorry the API end point was API /v/
64:40 - user and then you can see the status of
64:42 - the requests was 200 and you can see the
64:45 - response the time it took for the
64:48 - response you can say it is just around
64:49 - so we have 323 milliseconds for that and
64:51 - you can say this is a unique number so
64:54 - it is coming via the Morgan package so
64:56 - we have added the Morgan over there if
64:58 - we move on to the app. TS so it is
65:00 - coming via this and that's how it's
65:01 - going to
65:03 - work so now everything seems to be
65:05 - working perfectly fine and now we need
65:07 - to move on to the next things so here we
65:09 - have created the very first request
65:11 - which is a get request and now we want
65:13 - to create another request of the user
65:15 - sign up so now let's create that request
65:17 - as well and that would be a post request
65:20 - so what we can do so here we can just
65:22 - write the user routes dot we can have
65:25 - the post over there because that's a
65:26 - post route and then the URL can be we
65:29 - can have slash we can have the sign up
65:31 - so it means/ user SL sign up and now we
65:34 - want to create the controller function
65:36 - as well again so we can move on to the
65:38 - users controllers and what we can do so
65:40 - we can just copy this and then we can
65:42 - just paste that over there and here
65:44 - instead of get all users it could be the
65:46 - user slash we can have the sign up we
65:48 - have the user sign up and after that
65:50 - again we can move on to the user routes
65:53 - and that could be we we can have the
65:54 - user sign up like this so everything
65:57 - seems to be working perfectly fine so
65:59 - now we have the user sign up request and
66:01 - if we will make the user sign up request
66:03 - then this function this controller
66:05 - function is going to be executed and now
66:07 - let's move on so in the user sign up
66:10 - what we will do so we'll send some data
66:12 - along with the request as well so we'll
66:15 - move on to the postman so from the
66:16 - postman we will be sending some body
66:19 - data along with the request because we
66:21 - need some data so for creating a new
66:23 - user we need need the user's email name
66:25 - and the password so we need that data
66:27 - directly from the client so what we can
66:30 - do so here we have the user sign up so
66:32 - here first we will get the data and how
66:34 - we can get the data so as you know that
66:36 - we'll be sending the data along with the
66:38 - body so we'll be sending the body and
66:40 - we'll be sending some raw Json along
66:42 - with the body so let me create another
66:44 - request for the Post sign up as well so
66:47 - let's move on so inside this you can
66:49 - just right click on that you can have
66:51 - the add requests and that could be you
66:53 - can rename that and you can rename you
66:55 - can have the new user or you can have
66:56 - the user like this you can have the user
66:59 - you can have the sign up like this so
67:01 - here we have the user sign up requests
67:02 - and now let's move on and this could be
67:04 - the post request so the URL should be
67:07 - the base URL for this should be the same
67:09 - like this API V1 and after that we'll be
67:12 - having the user slash we can have this
67:14 - sign up like that we have the user sign
67:16 - up like this so now we have this request
67:19 - and now we need to send some body data
67:20 - along with it so we can move on to the
67:22 - body we can click on the
67:24 - and then we can send some Json data
67:26 - along with it so inside the Json data we
67:28 - need to send the name of the user the
67:30 - name could be we can send my name as
67:32 - well like I will send my name like we
67:34 - can have the N we can have the Tani over
67:36 - there then we can send the email of the
67:38 - user as well so that could be the email
67:41 - like that and email should be we can
67:43 - have the
67:44 - anadani at theate we can have the test
67:47 - dot we can have the com then we can move
67:49 - on we can have the password as well so
67:52 - that could be the password password and
67:54 - it could be we can send any password
67:56 - like 1 2 3 4 5 so this is my password so
67:59 - we'll be sending these details by the
68:01 - postman or any client and now we want to
68:03 - get this data as well inside the back
68:05 - end and how we can get that so we are
68:07 - sending from the body so we need to
68:09 - extract that directly from the body so
68:11 - instead of get all users it means now we
68:14 - want to create the user sign up and this
68:17 - could be we can have the const we can
68:19 - destructure all of these properties like
68:20 - the name email and the password directly
68:22 - from the body of the request
68:24 - we can destructure this directly from
68:26 - the request. we can have the body and
68:29 - now inside the destructuring we can
68:31 - destructure the name the
68:33 - email the password directly from these
68:36 - things so we have the name email and the
68:37 - password and now what do we need to do
68:40 - so here we have three requests over
68:42 - there and now what do we need to do now
68:44 - we need to create a brand new user so
68:46 - for doing that so we can have the const
68:49 - we could have the user we can create a
68:50 - new instance so we can have the user
68:52 - that should be equals to a new user
68:54 - models instance so now we need to create
68:56 - the instance and we need to provide the
68:58 - fields that are required that could be
69:00 - the name that could be the email and
69:02 - that could be the password so we can
69:05 - send the password along with it but this
69:08 - is the same password that the user is
69:10 - sending so inside the back end we don't
69:13 - usually store these passwords which the
69:14 - user directly send so we don't store the
69:17 - same strings that we get directly from
69:19 - the front end so we encrypt the
69:20 - passwords and there are many security
69:22 - reasons that we should always encrypt
69:24 - the password before storing into the
69:26 - database so that if an employee so I'm
69:29 - giving you one example so suppose if an
69:31 - employee is working inside the database
69:33 - company so they can see everyone's
69:35 - password inside the database so before
69:37 - that inside the backend so back end has
69:39 - the responsibility to encrypt the
69:41 - password before storing it into the
69:43 - database so we have the password and for
69:46 - encrypting that password now what we
69:48 - will do so we'll use a package which is
69:50 - a bcrypt so we have already added that
69:53 - package inside the package.json so if
69:55 - you move on to the package.json you will
69:57 - find the BPT package over there we have
69:59 - the bcrypt and the bcrypt is used for
70:01 - encrypting the user string it so sorry
70:04 - it can be used to encrypt any string and
70:06 - then we can compare the string with the
70:08 - original string if that string same or
70:10 - not so let's encrypt the password before
70:13 - storing it directly into the database so
70:16 - we can have the
70:17 - import something from we can have the B
70:19 - Crypt over there and something that we
70:21 - need to use is uh we need to use us the
70:24 - hash so hash is used to Hash a password
70:26 - is used to encrypt a password and now we
70:29 - have the con new user and for before and
70:31 - before creating a new user what do we
70:33 - need to do so we can have the const we
70:36 - can have um we can have the hash
70:38 - password like
70:40 - this and that should be equals to what
70:43 - we need to do so we can have the hash
70:45 - over there that could be the hash and
70:46 - the first parameter that we need to
70:48 - provide would be the data and that could
70:50 - be a string or a buffer so we have the
70:52 - same string of the password we we can
70:53 - use the same string so we can have the
70:55 - password and inside the second parameter
70:57 - we need to provide the rounds like how
70:59 - many rounds they are used with the
71:01 - encryption so as many rounds as you
71:03 - provide here the more encrypted password
71:06 - you will get so here we need to provide
71:08 - here the 10 because now this is are
71:10 - default rounds as well so you can
71:12 - provide any number of rounds so it has
71:14 - some techniques to generate the hash
71:16 - password with the rounds and now we have
71:18 - the hash and that's a promise so we need
71:19 - to await for this task as well so we
71:22 - have here the await over there and
71:23 - instead of storing the same password
71:25 - directly receiving from the user we can
71:27 - just store your the hashed password as
71:29 - well we have the hashed password and
71:31 - that's our it's going to work and after
71:33 - that the new instance of the user would
71:34 - be created and now the final thing that
71:37 - we want to do is we want to move on we
71:39 - can have the a wait we can have the user
71:41 - do we can have the save so now we want
71:44 - to save the user so for creating and for
71:46 - saving a new record inside the database
71:48 - we use the user do we can have the save
71:51 - over there to save a record and after
71:53 - after that we have the return statement
71:55 - as well so inside the return statement
71:56 - we have the message okay and then we can
71:58 - send the brand new user or we can send
72:00 - the email of the user we can or what we
72:03 - can do we can send the ID of the user
72:05 - like we can have the ID that should be
72:07 - we can have the user do we can have the
72:09 - ID like this we can have the underscore
72:13 - uh we can have the underscore ID of the
72:14 - user and Dot we can have the two string
72:17 - over there because the ID is in I think
72:19 - the object ID format so before uh
72:22 - directly giving the response to the
72:23 - front end we should use the two string
72:25 - to convert that into a string and now
72:27 - let's move on so now we have these three
72:29 - Fields the name email and the password
72:31 - and everything seems to be working
72:33 - perfectly fine so now let's wait till
72:35 - the database is connected and let's move
72:37 - on to the postman once
72:39 - again so the server open and database is
72:42 - connected and now we can move on to the
72:44 - postman let's just click on send so
72:46 - let's see what happens so there you can
72:48 - see now we have the ID there so you can
72:50 - see now we have the ID it means now the
72:52 - user is already created in inside the
72:53 - database and everything seems to be
72:55 - working perfectly fine and now let's
72:58 - move on to the get all users so let's
72:59 - see that what is happening over there so
73:01 - if we just make a new request to the get
73:03 - all users so now we should be receiving
73:05 - one user yes so here we are receiving a
73:08 - new user we have the side of the user
73:10 - 650 or anything we have the name email
73:12 - and the password and you can see this is
73:14 - the password which the BP has generated
73:16 - so that's how it creates the encryption
73:18 - of the passwords so now the user has
73:20 - signed up successfully and there you can
73:22 - see now we have a post request as well
73:23 - we have the 200 and everything seems to
73:25 - be working perfectly fine but there you
73:27 - can see now before sending all of these
73:29 - fields to the database so we should have
73:32 - some uh so we should have some
73:33 - validation checks as well so suppose if
73:36 - the name was empty so suppose if the
73:38 - email was not exactly the email or it
73:40 - was the incorrect string or if the
73:42 - password was not following the length of
73:44 - the password like the modern password
73:46 - should have around six num should have
73:48 - the length of around six so if they do
73:50 - not follow all of the validations then
73:53 - it would could create some errors inside
73:54 - the database so what we need to do so
73:57 - before coming to the user signup
73:58 - function so we could add another middle
74:01 - whe inside the user routes inside this
74:03 - request so before directly jumping into
74:06 - the user signup request we should have
74:08 - the validation check of the data so that
74:11 - would be our approach so we'll be using
74:13 - the concept of the middle WS to do that
74:16 - so that would be a middle W for checking
74:18 - the data validation that will send
74:20 - directly from the front
74:22 - end and before doing that I want to
74:25 - introduce you to a topic which is a
74:27 - middle W so what are the middle wers so
74:29 - the middle WS are just a functions and
74:31 - they get executed before a request is
74:34 - processed so between the request and the
74:37 - response it acts as a bridge between
74:39 - them to modify request to modify
74:42 - response into them and inside the node
74:44 - and the express so middle can be used to
74:47 - check the Json Vol validations the
74:49 - tokens or sending some cookie
74:50 - validations directly from the front end
74:52 - the parms of the the request because we
74:54 - are using the rest API there can be the
74:56 - data validation checks and more
74:57 - according to the requirements so how the
74:59 - middle work so let's move on to the
75:01 - paint and let's just identify so here
75:04 - suppose that's a request oh sorry there
75:07 - should be the square box so suppose it's
75:10 - a request that the user is sending
75:12 - directly from the front end so this is a
75:15 - client so let's move on so that's a
75:18 - client over there and the client is
75:20 - sending some requests along with some
75:22 - data and now it sends a new request to
75:24 - the backend so suppose it is sending a
75:27 - new request to the back end so I'm not
75:29 - using any illustrations over there so
75:31 - this is just the normal pin tool and now
75:33 - suppose that's a backend right so this
75:36 - is a back end and the client
75:37 - communicates to the back end and the
75:39 - back end communicates to the database so
75:41 - that's how the structure works and now
75:43 - let's move on so inside the back end
75:44 - suppose the client sends a sign up
75:47 - request so it's sign up and inside this
75:50 - sign up we'll be sending some data along
75:52 - with it so there there could be some
75:53 - data like there can be the name email
75:56 - and the password because it is there
75:57 - inside the signup and before moving on
76:00 - directly into the database and store
76:01 - that data we should add we should add
76:04 - another middle in which we need to
76:06 - verify the data like this can be the
76:09 - middle function in which first we need
76:11 - to verify all of the data so we can
76:13 - again move on we can have a
76:16 - verify all data before just moving on
76:19 - and before just saving the record of the
76:21 - user and then let's move on and and then
76:23 - let's create another middle W so there
76:25 - can be another middle W in which the
76:27 - user should be stored inside the
76:29 - database so let's move on so there can
76:32 - be another middleware over there so that
76:34 - could be the final middle ware in which
76:36 - now we want to store the user inside the
76:38 - database so let's move on let and that
76:41 - could be uh we can have the final middle
76:46 - ra to store users
76:50 - information we can have the users
76:54 - info like this so we can have the users
76:56 - info like that so we need to store the
76:58 - final users information into that and
77:01 - that's how it's going to work so first
77:03 - if it will move on to this so I'm using
77:05 - a pencil so first the client makes a
77:08 - request to the back end so first the
77:10 - request would be moved on to verify all
77:12 - data right so the request would be moved
77:14 - on to verify all data and if the
77:16 - verification is successful of the user
77:18 - then only it will be moved on to the
77:21 - next middle W and if the validation was
77:23 - wrong if there was some errors during
77:25 - the data inside the data then it will
77:27 - just move back to the client and it will
77:29 - send them that the data is incorrect and
77:31 - you need to send the exact data that we
77:34 - required so that's how it's going to
77:35 - work if the data is not correct and if
77:38 - the data is correct then we'll move on
77:40 - to the final middleware function to
77:42 - store the information of the user so
77:45 - this is the concept of the middleware
77:47 - and you can take the screenshot of it as
77:48 - well because this could help you if you
77:50 - do not come about the middle inside any
77:52 - application so inside web development
77:54 - this is a concept of the middle W so
77:56 - whether it's any framework like the node
77:58 - it can be the C as well ASP as well Java
78:00 - as well so this is only the concept of
78:03 - the middle WS so let's move on so now
78:06 - let's use the middle WS for the data
78:07 - validation checks and now let's move on
78:10 - so we will be using the express valid
78:12 - dat package for using the middle and
78:15 - this has a set of Express GS metal WS
78:17 - that wraps the extensive collection of
78:20 - validators and sanitizers offered by the
78:22 - Val data.js so it adds some middleware
78:25 - between the request and the response
78:27 - that we can use so it has already
78:29 - included in our package so now let's use
78:31 - it and now let's move on so we'll be
78:33 - having the validation chains and we'll
78:35 - be having a customized validator
78:37 - function so we'll be having the
78:39 - validation chain inside the validation
78:40 - chains we'll be having multiple
78:42 - validations like if there is a sign up
78:44 - request then we need to verify the email
78:46 - we need to verify the name of the user
78:48 - we need to verify the password so there
78:50 - are three functions that we need to
78:51 - verify name and the password and then
78:54 - there could be the final validator
78:55 - function so it will check all of those
78:58 - validations and if there was something
79:00 - wrong during the validation check then
79:02 - it will just send back the response to
79:04 - the client that there was something
79:05 - wrong with the data and it will send the
79:08 - exact error message as well and if
79:10 - everything was successful then we'll be
79:12 - moved on to the final function then
79:14 - we'll be moved on to the final
79:15 - middleware function to execute and to
79:17 - store the users information so let's
79:20 - move on uh so what we can do so inside
79:23 - the utils let's create another file that
79:26 - can be we can have the
79:27 - validators do we can have the TS so
79:30 - that's a validators dots and here first
79:33 - what we can do so we can Define some
79:35 - validators for the sign up so we can
79:37 - have the con we can have the sign up
79:39 - valid data like that sign up valid
79:42 - data so that could be an array so inside
79:45 - the array now we want to store a couple
79:46 - of validation checks so inside the sign
79:48 - up validator there can be three fields
79:51 - that are required the first would would
79:52 - be we can have the body we can import
79:54 - the body directly from the Express
79:56 - validator and the body should contain
79:59 - the name right so a name is a required
80:02 - field so it should contain the name so
80:04 - then we can have the name do we can have
80:07 - the not empty like that it should not be
80:09 - empty and then what we can do then we
80:11 - can have the required like this so we
80:13 - can have is required I think so if it is
80:16 - not empty so I think required B like
80:20 - that uh let's check that
80:25 - so I think the required is not there so
80:27 - I think the not empty would work
80:28 - perfectly fine so name should not be
80:30 - empty and then let's move on so we can
80:32 - add the uh response message as well if
80:34 - the name was empty then we can have the
80:36 - function which is with message we can
80:38 - part A customize error message if the
80:40 - name field was empty we can have the
80:42 - name is required like this so this is
80:46 - our first function of the body then we
80:48 - can use that two more times for the
80:49 - email and the password so we can have
80:51 - the email then then we can have the
80:54 - password over there like that that could
80:56 - be the password like
80:58 - that and inside the email we can first
81:01 - trim the record of the email we can trim
81:03 - we can remove the white spaces from both
81:05 - uh front and the back from both front
81:07 - and the rear and then we have the trim
81:09 - then what we can use so after the trim
81:12 - we can just use your is email like this
81:14 - so we can have the is email so it will
81:16 - verify if the email was actually the
81:18 - email or not and then we can again use
81:20 - the with message over there like this so
81:22 - so we can finally again move on we can
81:26 - have a width message like that we can
81:28 - have the width message and after that we
81:30 - can have the email is required so we can
81:33 - have the email is required then the same
81:34 - should be used for the password so first
81:37 - what we can use so we can again use the
81:39 - triam over there and then we can use
81:41 - another function that could be we can
81:42 - have the is length something we can have
81:44 - the is length so it will verify if the
81:46 - password has the desired length or not
81:48 - so we can have the minimum so we can
81:50 - provide the minimum length to the
81:51 - password and that could be somewhere
81:53 - around six so if the password length was
81:56 - not matched then we'll be having the
81:57 - error inside the response then we'll
81:59 - send back the same response to the
82:01 - client so we have the with message over
82:03 - there then we can have the
82:06 - password should
82:08 - contain at least six
82:12 - character so we can have this string
82:14 - over there and that's how it's going to
82:15 - work so now we have defined the
82:17 - validator function and everything seems
82:19 - to be working perfectly fine but now we
82:21 - need to see that how we can verify these
82:24 - functions how we can verify so we can
82:26 - create our customized function we can
82:28 - create a customized validator function
82:30 - in which we will verify all of these
82:32 - details so what we can do so we can have
82:34 - a function we can have the cons we can
82:36 - have the validate over there like this
82:38 - valid date and that could be equals to
82:41 - we can have the arrow function over
82:42 - there that could be the arrow function
82:44 - it should not be the sync so we have the
82:46 - Val so we have the validation function
82:48 - over there and inside the params we need
82:50 - to get the signup validator we need to
82:52 - get all of the these validators whether
82:53 - it's a sign up or there can be multiple
82:55 - validators over there so we can have the
82:57 - validations like this so we can have the
82:59 - validations and the type for this is
83:01 - already defined inside the express
83:03 - validator the type is the validation
83:05 - chain like this so we have the type of
83:06 - the validation chain and that could also
83:08 - be the validation chain over there and
83:10 - that could be this function and now it
83:13 - would be an array of the validation
83:14 - chains because these are the chains and
83:17 - now let's move on so you know that the
83:19 - validate function so all of the metal
83:20 - wheels inside the express are required
83:23 - and they should have the request
83:24 - response and the next inside that so how
83:27 - we can do that so here we want to return
83:29 - a new asynchronous function we can have
83:31 - the return aing we can have the function
83:33 - over there Arrow function that could
83:35 - have the request and the request could
83:37 - be the same request format that are
83:39 - required from the express then we can
83:41 - have the response the response should be
83:43 - what we can do response can have the
83:45 - response directly from we can have the
83:47 - express JS and then we'll be having the
83:49 - next function as well which is used to
83:51 - move on to the next middle will we can
83:53 - have the next function over there and
83:55 - that's how it's going to work and that
83:57 - could be an aror function over there and
83:59 - now inside this now what do we want to
84:00 - do so here we need to run a loop so
84:03 - we'll be running a loop over there in
84:05 - which we will verify all of these
84:07 - conditions we'll verify all of these
84:08 - conditions and if there was an error
84:10 - then we'll send back the same error to
84:12 - the client so let's move on so here we
84:15 - can have the for Loop over there
84:16 - directly we can have the cons we can
84:18 - have the validation like that we can the
84:21 - validation or we can have the
84:23 - validations like that validation of
84:25 - validations and then we can move on so
84:28 - what we can do so we can have the await
84:30 - over there or what we can do we can
84:31 - verify the conditions from here as well
84:33 - we can have the const we can have the
84:35 - result and that should be equals to we
84:37 - can have thewait then we can have the
84:39 - validation so we can have this
84:42 - validation
84:43 - function validation like that dot we can
84:47 - have the Run we have a function of the
84:48 - run to run a validation and this should
84:51 - have the request so we have the request
84:53 - inside the validator of the express so
84:56 - we'll so inside the middleware of the
84:57 - express we have the request as well we
84:59 - need to send the same request over there
85:01 - that we received directly from the
85:03 - client and it's an um it's a promise so
85:06 - we should wait for this task as well so
85:08 - that's why we have used your wait over
85:09 - there and now let's move on so then we
85:11 - can check another Val check that could
85:13 - be very simple like if we have the
85:16 - result we can have the errors like that
85:18 - I think they have removed the property
85:20 - so what we can do instead so we can
85:22 - remove the result property as well or we
85:25 - can have directly the errors like we can
85:27 - have the if we can have the
85:28 - result like that dot we can have I
85:32 - think uh we can have the is empty so
85:36 - result means this time the errors so if
85:39 - the result do errors are not empty then
85:41 - what we can do then we can break the
85:43 - loop so that's what we need to do for
85:45 - this for Loop and after that now what do
85:47 - we want to do so after the for Loop now
85:49 - we will verify if there was an error or
85:51 - not so if there would be error so it
85:54 - will automatically break the loop and
85:56 - now let's move on so here now what do we
85:57 - want to do so we can have the cons we
85:59 - can have the errors so that should be
86:01 - equals to we can have the validation we
86:03 - can have the result so this is defined
86:06 - inside the express
86:07 - validator the validation result so this
86:10 - is the final result of the validations
86:13 - so it will give you the property of the
86:14 - errors so we need to provide the request
86:16 - as well here so that could be the
86:18 - request and now the final thing that we
86:20 - want to verify is if there was the
86:22 - errors then we don't need to move on to
86:25 - next middle Ware and if there was no any
86:27 - error then we need to move on to next
86:29 - middleware function which could be the
86:30 - final middle W to store some data let's
86:33 - move on so we can have if we can have
86:35 - the errors like this if the errors to we
86:38 - can have S uh what we can do we can have
86:41 - the is errors do is empty it means
86:44 - everything was working fine then we can
86:46 - move on to next middleware function so
86:49 - here the next means that we want to move
86:51 - on to next middle that could be this
86:53 - final user signup function and now let's
86:56 - move on so if there was some errors if
86:58 - we do not pass this validation check
87:01 - then we can move on then we can have the
87:02 - response do we can have the status over
87:05 - there that could be we can have the 422
87:07 - which is unprocessable entity it means
87:09 - that data cannot be processed further
87:12 - then we can have the Json over there we
87:14 - can send the errors directly we can send
87:15 - the errors and that could be we can have
87:17 - the errors to we can convert them to the
87:19 - array so that's how it's going to work
87:22 - and we need to return that as well we
87:23 - need to return this response so that's
87:26 - how these things going of work so that
87:28 - is the final validate function and now
87:31 - let's move on to the user route and here
87:33 - inside this so inside the sign up first
87:35 - we need to add this we have the valed
87:38 - function we can have the validate
87:39 - function directly from the validators
87:41 - and then what we want to validate is the
87:44 - validation chain we can have the sign up
87:46 - validator we can have the sign up
87:48 - validator for
87:51 - that
87:53 - and that's how it's going to work so now
87:55 - you can see everything seems to be
87:56 - working perfectly fine and now let's
87:58 - move on so suppose from the postman if
88:01 - we move on to the user sign up once
88:02 - again so suppose that's not an email
88:05 - right so we have added that validation
88:06 - check over there inside the validators
88:09 - like if this was a email or not is email
88:12 - so let's move on so suppose this is a
88:14 - normal string I remove the adate and.com
88:18 - over there let's just click on the send
88:20 - and let's see what happens so there you
88:22 - can see now we got the errors array you
88:24 - can see we got the status as well we
88:26 - have the erors you can see the type of
88:28 - the field we have the value andani and
88:30 - you have the message that email is
88:32 - required you can see everything seems to
88:35 - be working perfectly fine over there and
88:37 - everything seems to be working fine you
88:38 - can see and now you can see the minimum
88:40 - length of the password is six so suppose
88:42 - we send the five characters if we click
88:44 - on the send so now you can see now with
88:45 - the password should contain at least six
88:48 - characters so everything seems to be
88:50 - working perfectly fine over there
88:53 - so let's create another record as well
88:54 - so that could be name we can have the
88:59 - James Marshall like that we have the
89:01 - James Marshall and the M should be
89:03 - Capital then we can have the email we
89:06 - can have the James test.com we can have
89:08 - the password of 1 2 3 4 5 6 so let's
89:11 - just click on the send so now the new
89:12 - user should be created and here we have
89:14 - the ID of the user and everything seems
89:16 - to be working perfectly fine and another
89:19 - thing that I just noticed is now we can
89:21 - move on to the controllers and if we
89:23 - create a new user then the status should
89:25 - be the 2011 so that is the status of the
89:28 - created it should be 2011 like that and
89:31 - everything seems to be working fine so
89:32 - now we have completed the sign up
89:34 - request and now we need to move on to
89:35 - the login function as well so let's move
89:38 - on to the user routes let's create the
89:40 - similar type of request for the user
89:42 - router do post that could be we can have
89:44 - the login we have the validate and this
89:47 - time there could be different functions
89:48 - for the validator let's just copy and
89:51 - let's just paste before that and I will
89:54 - and I will tell you about this that why
89:56 - before that so that could be we can have
89:58 - the
90:00 - login we can have the Valor so now you
90:02 - can see inside the login and inside the
90:04 - sign up so you can see the email and the
90:07 - password as similar Fields so right the
90:10 - email and the password are similar
90:11 - Fields inside both login and inside the
90:14 - signup so what we can do so inside the
90:16 - login what we can do we can remove the
90:19 - name directly from here right we can
90:21 - remove the name and from this sign up we
90:24 - can remove the both email and the
90:26 - password right and before the and after
90:28 - the name now what we can do so we can
90:30 - just use the login validator right so
90:34 - because the login validator is just the
90:36 - array of the validation functions so now
90:38 - what we have so inside the sign up we
90:40 - have the name then we have the email
90:41 - then we have the password and that's how
90:43 - it's going to
90:45 - work and now let's move on to the users
90:47 - controller so here let's move on to the
90:49 - user routes once again so now it could
90:52 - be we can have the login valid dat like
90:53 - that and let's move on to the user sign
90:55 - up again so inside this now what do we
90:57 - need to do so let's create another
90:59 - request for the user login so it could
91:02 - be we can have the
91:06 - user login like that and here now what
91:09 - do we need to do so that's a sign up it
91:10 - could be user we can have the login and
91:12 - here there could be different fields we
91:14 - don't need the name over there and the
91:16 - the things would be different so let's
91:18 - just remove all of that and let's just
91:20 - see what happens we can Rec commend this
91:22 - out as well and after we get the email
91:24 - and the password directly from this
91:26 - let's move on and here now what we want
91:28 - to do so first we need to find the user
91:31 - by its email so let's have this vage and
91:33 - check we can have the con we can have
91:35 - the
91:37 - existing user like that or we can have
91:40 - directly the user property we can have
91:41 - the const user that could be we can have
91:43 - the weight then we can have the user do
91:46 - we can have the find one we can find one
91:49 - user of the record and then what we can
91:52 - do we can send the filter over there we
91:54 - can send the filter of the email that
91:56 - this email should match this email we
91:58 - want to find one user that this email
92:00 - should match this email and after
92:03 - creating this so I have one thing in my
92:05 - mind so let's move on to the user sign
92:07 - up so before creating a brand new user
92:09 - we need to also verify if there was a
92:12 - same email inside the database if there
92:13 - was a same user inside the database with
92:16 - the same email so let's move on so
92:18 - before even creating the hash password
92:20 - let's move on so we can have the cons we
92:22 - can have the user we can have the
92:24 - existing user like this so that could be
92:27 - equals to the await then we can have the
92:29 - user so we can find a user again we can
92:32 - you have a find one of the user then
92:34 - what we can do so we can again provide
92:36 - the email so that's our is going to work
92:38 - so now we have the find one of the email
92:40 - and then we'll verify if we have the
92:42 - existing user then it means now the user
92:45 - is already there with the same email
92:47 - then we can again send the response to
92:49 - we can have the status that could be we
92:51 - can have have around 401 which is
92:52 - unauthorized then we can send the Json
92:55 - or we can just directly use the send
92:57 - function that we can have the user
92:59 - already
93:02 - register we can send this validation
93:04 - check so I missed this thing so now we
93:08 - have added that and everything should
93:09 - work perfectly fine now and now what do
93:11 - we want to do so here first we'll verify
93:13 - the user we need to verify if the user
93:16 - is there or not so if there was the user
93:19 - we can verify if there was no user then
93:21 - we want to send the return message we
93:23 - can have the response dot status that
93:26 - could be 401 dot we can send here the
93:29 - send over there and then we can have the
93:32 - user not we can have the register like
93:35 - that and now we have the user right now
93:37 - we have the validation if we don't have
93:39 - the user then we'll be sending this
93:40 - response message but what if and what
93:44 - after that when we have the user now we
93:46 - want to verify the password of the user
93:48 - for the authentication purposes now we
93:50 - want to verify the password but let's
93:52 - move on so how can we do that so from
93:54 - the bcrypt we have a function of the
93:56 - compare as well so we cannot directly
93:58 - decrypt the password of the user and
94:00 - then we can verify because it requires a
94:02 - lot a lot of calculations so either what
94:05 - we can do so compare is very easy so we
94:08 - can compare the password with the actual
94:10 - string so let's move on so we can have
94:13 - the cons we can have the is password
94:17 - correct and that should be equals to we
94:19 - can add the a wait then we can have what
94:22 - was the function name so it was a
94:24 - compare so we can have the we that
94:26 - should be we can have the compare over
94:28 - there and inside the compare we need to
94:29 - provide the data which is the string
94:31 - which is the actual string so actual
94:33 - string is the password and then the
94:36 - thing that we want to compare is with
94:37 - the encrypted string so from the
94:40 - encrypted string now we want to verify
94:41 - encrypted string is there directly
94:43 - inside the user object we have the user
94:46 - dot we can have the password over there
94:47 - so that's how it's going to work so this
94:49 - will give you a Boolean value you you
94:51 - can see the Promise resolved with a
94:53 - Boolean and then we'll verify that if
94:55 - the password was correct or not let's
94:57 - move on so we can have if we can have is
94:59 - password correct we can have if the
95:02 - password was not correct then what we
95:04 - can do we can have the return response
95:07 - we can have the status that could
95:09 - be and that could be we the 403 which is
95:12 - forbidden then we can send a new message
95:15 - we can have the send and inside this we
95:17 - can have the incorrect password like
95:20 - this
95:24 - we have the incorrect password and
95:25 - that's how it's going to work and after
95:27 - that now what do we want to do so once
95:29 - the password is correct once everything
95:31 - is fine then it means now the user has
95:33 - successfully authenticated so let's move
95:36 - on so after that now what do you want to
95:38 - do so after the password is verified
95:41 - after the user's email is verified then
95:43 - we know that the user is the actual user
95:45 - then we can send the response. status of
95:47 - that should be 200 we can send the
95:49 - message of the okay then we can send the
95:51 - the ID of the user and that's how it's
95:53 - going to work so let's just try this
95:55 - login function so you can see we created
95:58 - this signup request over there the James
96:00 - Marshall James test.com with the email
96:03 - with the password let's move on let's
96:05 - create another request over there let's
96:06 - click on ADD request that could be we
96:09 - can have a a
96:12 - login and I will share you the postman
96:14 - collection as well don't worry so here
96:16 - we have the user login we can move on to
96:18 - the body inside the raw inside the Json
96:21 - now we want to provide the fields like
96:23 - the email and the password we can copy
96:25 - from this we can paste that directly
96:28 - inside the login over there so we have
96:30 - the email and the password and now we
96:32 - want to send the URL as well so the URL
96:35 - could be again we can copy that we can
96:38 - paste and instead of the sign up that
96:40 - could be the login and the request is
96:42 - the post so let's just try it out let's
96:44 - just click on this end so let's see what
96:47 - happens so now we have a
96:49 - message so
96:51 - why this message is coming so let's move
96:54 - on to the user routes so there you can
96:56 - see that is an error because here you
96:58 - can see the user is already there the
97:00 - email is already there so we cannot
97:02 - create this user so you can see what we
97:04 - can do so instead of the user sign up
97:06 - that could be we can have the user login
97:08 - I made another mistake with that so this
97:10 - could be the user login over there now
97:12 - let's move on let's just try it out once
97:13 - again click on the send so now you can
97:16 - see message we have the okay it means
97:17 - everything is working perfectly fine and
97:19 - there you can see if the password was
97:21 - incorrect if we send another string over
97:23 - there like the one so let's just try it
97:25 - out clicking on the send so you can see
97:27 - now we got the message like incorrect
97:28 - password and everything seems to be
97:30 - working perfectly fine over there you
97:32 - can see now everything is working
97:35 - fine so with this stab you can see now
97:37 - we have completed the basic user
97:39 - authentication system with the mon stack
97:41 - we have created the sign up request the
97:43 - login requests and everything seems to
97:45 - be working perfectly fine so this was
97:47 - the basic things of creating the some
97:49 - requests of the authentication of the
97:50 - user user management now we want to move
97:53 - on to the authentication right now we
97:56 - want to move on to the authentication
97:57 - systems like now after the user has
97:59 - logged in or the sign up then we want to
98:02 - generate a token for the user a token
98:05 - can be the ID card for the user to show
98:07 - something to access some resource so
98:10 - let's move on and let's just understand
98:12 - that and now let's learn that how we can
98:15 - authenticate the user inside this
98:17 - application so let's learn that what
98:20 - exactly is the authentication first so
98:22 - what is the user authentication as you
98:24 - know the user authentication is a step
98:27 - in which the user needs to verify their
98:30 - identity so user needs to verify their
98:32 - identity and user can verify the
98:34 - identity by providing the same
98:36 - credentials that the user used during
98:39 - the registration process and for this
98:41 - application as well the user needs to
98:43 - provide the email and the password and
98:44 - if the email and the password are
98:47 - correct it means the user is
98:49 - successfully authenticated and
98:50 - everything should work perfectly fine
98:52 - but what after the authentication so
98:55 - authentication is just step one of the
98:57 - user authentication so there a complete
99:00 - package of the authentication so
99:01 - providing the email and the password is
99:04 - just a very first and very simple step
99:06 - of creating the authentication but now
99:08 - there will be another step in which the
99:10 - user would be provided a token so
99:14 - suppose you joined a company right so
99:16 - you joined a company you correct the
99:17 - interview and now you joined a company
99:19 - so after joining a company you will be
99:21 - provided an ID card right so suppose you
99:25 - are the suppose you are a database
99:26 - developer so you have provided the ID
99:28 - card and after that you will be
99:30 - allocated a seat and now you want to
99:33 - show the ID card at the time of sitting
99:35 - into a seat so for accessing the
99:38 - resource you need to provide the ID card
99:40 - and the security guard will verify if
99:42 - you are entitled to sit in that seat and
99:44 - you need to show the ID card to the
99:45 - security guard and if you are accessed
99:48 - and if you're entitled to access a
99:50 - particular resource it means now you are
99:52 - authorized so now we want to move on to
99:54 - the process of authorization so the user
99:56 - will be provided a token after the
99:58 - authentication process and here comes a
100:00 - new chapter of the authorization now
100:03 - after the user needs to sit on their
100:05 - bench now user needs to show their ID
100:07 - card which has provided so in this
100:10 - application we'll be using the token so
100:12 - to access a resource the user needs to
100:14 - show a token that was sent during the
100:16 - authentication so this ensures that the
100:19 - user is entitled to a source so that's
100:22 - the complete package of the
100:23 - authentication and authorization so once
100:26 - the user authenticates he's provided
100:28 - token and now to access a resource the
100:30 - user needs to show the same token that
100:33 - was sent during authentication so this
100:35 - ensures and this means now the user is
100:38 - entitled to a particular resource that
100:39 - can be protected or a particular
100:41 - resource and in this application so we
100:44 - have a chat based application so for
100:46 - sending and for accessing any chat the
100:48 - user needs to show back the user needs
100:50 - to send back the same token that was
100:52 - provided to the user and now we need to
100:55 - provide the token so we'll be using the
100:57 - JWT so JWT is a library it's exactly the
101:01 - library which is built by the ozero so
101:03 - JWT means the Json web token so there's
101:06 - a token which has the Json encrypted
101:09 - data into it so it is used to encrypt a
101:12 - payload into a signed token so there's a
101:14 - signed token in which all of your
101:16 - payload would be converted into a signed
101:18 - string that has the permissions or
101:21 - authorities or some data of the user so
101:23 - in this application we'll be having a
101:25 - different requirements like we can send
101:27 - the ID the email the permissions or
101:29 - authorities of the user so we'll be
101:30 - using that but how we need to send the
101:33 - token to the user so we'll be sending
101:35 - the token to the user with the help of
101:37 - the HTTP only cookies so HTTP only
101:40 - cookies are a type of web cookie that
101:43 - comes with a special security attribute
101:46 - so they are same like the web cookies so
101:48 - you can move on to the browser
101:49 - application tab to see all of these
101:50 - cookies but the HTTP only cookies comes
101:53 - with a special security attribute that
101:56 - restricts the cookies from being
101:58 - accessed by the JavaScript so you cannot
102:00 - access those cookies by the JavaScript
102:02 - code inside the web browsers and this
102:04 - prevents the xss attacks as well so what
102:08 - are these attacks so suppose you have a
102:10 - form inside a web application so suppose
102:12 - there's a hacker and it moves on into
102:14 - your form and it enters Some Like It
102:17 - enters some script into your form so
102:19 - that string would be then validated by
102:21 - the JavaScript so the JavaScript doesn't
102:23 - have full security so it gets validated
102:25 - by the JavaScript so suppose the hacker
102:27 - add the alert statement so then you will
102:29 - be seeing an alert statement on the top
102:31 - of the window through the form and
102:33 - that's how if the user or like if the
102:35 - attacker can show the alert they can
102:38 - also steal your JWT token from the
102:40 - cookies so that's why we use the HTTP
102:43 - only cookies so these are not visible by
102:45 - the JavaScript so these are only enabled
102:47 - by the exos with credentials property so
102:50 - once we make the HTTP request so these
102:52 - cookies are automatically sent to the
102:54 - backend and once the backend receives
102:57 - the cookie it will validate the cookie
102:58 - like it will validate if the token was
103:00 - valid or not and that's how we can
103:02 - prevent this attacks and that's how we
103:05 - can create the fully authenticated and
103:07 - authorized
103:08 - application so let's move on and let's
103:11 - just Implement all of that so if I want
103:13 - to summarize that what exactly will be
103:15 - happening so this is the authentication
103:17 - process the user would be authenticated
103:19 - and then he would be provided a token
103:22 - right so we'll be having the token with
103:24 - the HTTP only cookies so these are the
103:26 - signed cookies and then the user would
103:28 - be provided the HTTP only signed cookie
103:30 - along with the jwd token so we'll send
103:33 - the exess token directly in the form of
103:34 - cookies and then the user would be
103:36 - having those cookies now the user have
103:38 - the cookies and the user have the token
103:40 - inside the cookie and and now let's see
103:43 - that how to access the protected
103:44 - resource over there and to access a
103:46 - particular resource or a protected
103:47 - resource so the user send back the same
103:50 - cookie and then we verify like if and
103:53 - then we verify like if the cookie
103:55 - matches and if the token is validated or
103:57 - we can check if the Cookie doesn't
103:59 - matches or if the token is invalid and
104:02 - on the basis of that we'll be moved on
104:04 - and we'll provide and process the
104:06 - request and that's how the
104:08 - authentication design works so user
104:10 - needs to send back those cookies and if
104:12 - the token is valid then we'll process
104:14 - the request for further requirements
104:16 - suppose like sending the chat to the
104:17 - user but if the token was not valid if
104:20 - the token was expired or if the Cookie
104:23 - doesn't match then what do we need to do
104:25 - so we need to the operation of the
104:26 - user so that's how it's going to
104:29 - work and now we want to implement that
104:32 - as well so let's move on and let's just
104:34 - Implement that so here after the user is
104:37 - logged in then we want to send those
104:39 - cookies and then we want to send the jwd
104:42 - data inside the cookies let's move on
104:44 - and let's just create a new file inside
104:47 - this inside the utils so we can move on
104:49 - into I think inside the utils folder and
104:52 - then we can create a new file that could
104:54 - be we can have the token we can have the
104:57 - manager dot we can have the TS so we
104:59 - have this file over there which will
105:01 - manage all of the tokens so here we'll
105:03 - create a function that will create a
105:05 - token from the data so let's move on so
105:07 - we can have the export we can have the
105:10 - create we can have the token over there
105:12 - so that should be equals to a function
105:14 - and inste this we'll be requiring the ID
105:16 - of the user we can have the ID that
105:18 - should be in the form of the string we
105:19 - can have the email that should also be
105:21 - in the form of the string and then we'll
105:23 - be having another property which is
105:25 - expires in so after how much duration
105:27 - the token would be expired so we can
105:29 - have the expires we can have the inov
105:31 - there and that would be a normal Arrow
105:33 - function so this is a normal Arrow
105:36 - function then we can create a new token
105:38 - so first we need to get this data the ID
105:40 - and the email so what we can do so we
105:43 - can have the cons we can the payload
105:44 - over there so that could be an object
105:47 - and the object can have the ID the
105:49 - object can have the email
105:51 - and after that let's move on so after
105:53 - that we need to move on so we can have
105:54 - the cons we can have the token so now we
105:57 - want to create a new token so con token
105:59 - would be equals to now we want to use
106:01 - the jwd package so it's already there if
106:04 - you have followed my tutorial so let's
106:06 - move on to the top we can import JWT
106:10 - directly from we can have the Json web
106:12 - token and then now what do we want to do
106:15 - so here we can have the JWT Json web
106:18 - token dot we can have the sign so now we
106:21 - want to sign a token and we want to send
106:23 - the payload so payload that could be we
106:25 - can have the object so here the payload
106:27 - would also be required so we have
106:29 - already declared the payload so that
106:31 - could be a payload and now we want to
106:33 - move on so after the payload the second
106:35 - parameter that we want to Define is the
106:37 - secret key so there's a key required
106:40 - inside the hashing algorithms so now the
106:43 - secret key should be there to sign a
106:45 - token to encrypt a token so secret key
106:47 - is like a private key which is used to
106:49 - encrypt something so we'll be using that
106:51 - secret over there so we need to move on
106:53 - to the environment and here you can see
106:55 - you can already see the JWT secret so we
106:58 - need to provide the secret over there so
107:00 - the secret can be any string like that
107:01 - so it can be any string so this is my
107:03 - JWT secret and this should not be
107:06 - shareed to anyone because if anyone has
107:08 - your JWT secret it means now they can
107:10 - access your payload data over there now
107:13 - you have the payload data and inside the
107:14 - second parameter you can provide the
107:16 - process over there so inside the second
107:18 - parameter you can again use process
107:21 - do we can again use the environment over
107:22 - there process. environment do we can
107:25 - have the JWT underscore we can have the
107:27 - secret now you have the JWT secret and
107:30 - at the time of verifying the token as
107:32 - well still you need the same secret
107:34 - which was used during encryption because
107:36 - only one private key can be used to
107:38 - encrypt and decrypt something and then
107:40 - inside third parameter there are some
107:42 - options that we want to provide so third
107:44 - option that we have so the main option
107:46 - that we want to provide is expires in so
107:48 - after how much duration the
107:50 - the token would be expired so it can be
107:52 - any string so if you hover over the
107:54 - expir thing you can see you can provide
107:56 - like suppose that can be 2 days 10 hours
107:58 - or 7 days so the chat gbt how the chat
108:01 - gbt works so it moves on and it expires
108:03 - in 7 days so we can provide the same
108:06 - validity we can have the seven days and
108:08 - after the 7 Days the token would be
108:10 - expired and that's how it's going to
108:12 - work so now we have the token and now
108:15 - the final thing that we want to do is
108:16 - now we want to return the token over
108:17 - there so now we have the token inside
108:19 - the string you you can see now we the
108:21 - token as the string now we can just
108:23 - directly move on to the users controller
108:24 - over there right and here now what do we
108:27 - want to do so here we need to follow
108:29 - process so after the password was
108:31 - correct then what we can do we can just
108:33 - create a new token over there so we can
108:36 - have the cons we can have the token over
108:38 - there so that should be equals to what
108:40 - we can do we can have the create
108:42 - token we can use the create token we can
108:45 - provide data so like we can have the ID
108:48 - we can provide the ID of the user that
108:49 - could be the user dot we can have the ID
108:51 - over there like we can have the
108:53 - underscore ID dot we can have the to
108:55 - string over there and after that the
108:58 - second property that want to provide is
108:59 - the email of the user so we can have the
109:02 - user dot we can have the email property
109:04 - then inside the third parameter we need
109:06 - to provide the 7D so that could be the
109:08 - 7D over there so now let's move on to
109:10 - the create token so here you can see we
109:12 - haven't used the expir in so that could
109:15 - be the expires in only like that and I
109:17 - showed you just for the example so now
109:19 - we have the expir in and everything
109:20 - should work perfectly fine over there
109:22 - and it is of type of this string over
109:24 - there let's move on to the users
109:26 - controller so now we have the token
109:28 - inside this format inside the string now
109:31 - the final thing that we want to do is
109:33 - very very simple and now we want to send
109:36 - the token in the form of cookies so
109:39 - that's how it's going to work so let's
109:41 - move on so here you can see after we
109:43 - have the token over there we want to use
109:45 - a cookie and how we can set the cookies
109:48 - directly from the back end to front end
109:50 - we need to use a package which is a
109:52 - cookie passer so it is already there
109:54 - inside the package.json so cookie passer
109:56 - is used to send the cookies from the
109:58 - back end to the front end let's move on
110:01 - to the appts which is the main file and
110:03 - here we want to add the middleware for
110:05 - using the cookies as well so after the
110:07 - express. Json we can have the app dot we
110:09 - can have the use so that should be
110:11 - equals to we can have the cookie passo
110:13 - so here you can see now we have the
110:14 - cooki passord and here you can see now
110:16 - we want to provide the secret key as
110:17 - well for the Ki so we can use the secret
110:19 - key
110:20 - again we can move on to the environment
110:22 - we can provide the secret key of the
110:23 - cookie that could be again any secret
110:25 - that we want to provide so here we have
110:27 - the cookie secret now we want to provide
110:30 - the secret to this as well we can have
110:32 - the process do environment dot we can
110:35 - have the cookies secret over there we
110:38 - have the cookie secret and now you can
110:40 - see now we have the cookie secret as
110:41 - well and everything seems to be working
110:43 - perfectly fine over there like this now
110:46 - we have the cookie secret and now we
110:48 - want to move on again to the users
110:49 - controller
110:50 - and now to send the cookie to send the
110:53 - cookie from the back end to front end we
110:55 - use the response variable we can have
110:56 - the response and in set the response we
110:58 - have the cookie over there we have the
111:00 - response. cookie to set the cookie right
111:03 - and now we want to provide the name of
111:04 - the cookie name can be we can have the O
111:07 - we can have the token over there we can
111:09 - have the Au token and then inside the
111:11 - second parameter we need to provide the
111:13 - value so value could be the same token
111:15 - that we have so value should be the
111:17 - token so if you just use the respon
111:20 - cookie now what will happen is the
111:22 - cookie would be created inside the
111:24 - browser and then we want to provide some
111:26 - options object as well so inside the
111:27 - third parameter there are the options
111:29 - that we want to provide so first
111:31 - parameter that is we want to provide the
111:33 - path so where could be the cookie stored
111:35 - so the path should be weaken of the
111:37 - slash so inside the root directory of
111:39 - the cookies we want to show the cookies
111:41 - then we can move on the second parameter
111:43 - could be weaken of the domain so as of
111:45 - now we are working inside the Local Host
111:47 - so we'll be using the Local Host over
111:48 - there like this we can have the local we
111:51 - can have the host because our front end
111:53 - would also be there inside the local
111:54 - host for now but if you deploy this
111:56 - application then this could be your
111:58 - domain like suppose that can be my
112:00 - domain like indian.in that could be a
112:02 - domain and now let's move on let's
112:04 - provide the third parameter which is the
112:06 - expires so when the cookie would be
112:08 - expired so we so you can see the token
112:11 - validation is around 7 days so cookie
112:14 - should have same type of validation so
112:16 - let's create a validation for the 7 Days
112:18 - let's create the time for that so we can
112:21 - have the const so we can have the const
112:23 - we can have the expires that could be
112:25 - equal to the new date then we can have
112:27 - the expires to we can have the set date
112:29 - and that should be equals to first we
112:31 - need to grab the current date so we can
112:33 - have the expires to we can have the get
112:36 - date like this expires. get date after
112:39 - that we can use plus 7even so after this
112:41 - date plus 7 days now we'll be having the
112:43 - expires property and the same property
112:46 - could be used here instead of the
112:47 - expires over there inside the expires
112:50 - and that's how it's going to work and
112:51 - after that we need to add the HTTP on
112:53 - flag so we can have the HTTP only that
112:55 - could be equals to again that could be
112:57 - the true then we can use the signed as
112:59 - well so one so now we want to sign the
113:01 - cookie as well so we can sign the whole
113:03 - cookie so we can have the sign that
113:05 - should be equals to the true so the sign
113:07 - would again reencrypt the cookie inside
113:09 - the sign format so now we have this
113:11 - cookie and everything should work
113:12 - perfectly fine this time and now what do
113:15 - we want to do as the next step so after
113:17 - creating these cookies so now once the
113:19 - user moves to the login now we want to
113:21 - remove the cookies of the user as well
113:23 - so suppose if the user logs in again so
113:25 - now first we want to remove the previous
113:27 - cookies of the user and then we want to
113:29 - set the current cookie so for that we
113:31 - can have the response or we can have the
113:33 - clear cookie like this we can provide
113:35 - the name of the cookie we can have the
113:37 - name like this we can have the JWT we
113:40 - can have the aut token over there and we
113:41 - should store these names inside the
113:43 - constant so we can move on to the util
113:45 - let's create a new file that could we
113:47 - can have the constants like that
113:51 - that could be constants TS so that could
113:53 - be equals to con we have
113:57 - your cookie we can have the name over
113:59 - there we have the cookie name that
114:01 - should be equals to we can have the Au
114:02 - token like that and we should export
114:04 - that as well we have the export con of
114:06 - the cookie name so now let's move on so
114:09 - we have the users controller now that
114:11 - should be equals to the sponsor. cookie
114:13 - we can have the cookie name over there
114:14 - like that we have the cookie name and
114:16 - the same should be used here as well
114:18 - inside the token it should be the cookie
114:21 - as well we have the cookie name and now
114:23 - that's how it's going to work and that's
114:25 - how it's going to work now we have the
114:26 - clear cookie and and here we need to
114:28 - provide additional step as well and the
114:29 - additional step that we want to provide
114:31 - here that could be we can move on we can
114:33 - have the HTTP only that should be again
114:35 - equals to the true then we can move on
114:37 - we can have the domain that should be
114:38 - again we can just use some same
114:40 - properties like that we can use same
114:42 - properties like the domain and these
114:45 - things over there we can use these
114:46 - things over there like this so we have
114:48 - the HTTP only true expir is not required
114:51 - the domain and the local host and the
114:52 - sign are required and we want to part
114:55 - the path as well so we can have the path
114:56 - that should be equals to slash so it
114:58 - will clear the cookie of the response of
115:01 - the user and that's how it's going to
115:02 - work and after that now what do we want
115:04 - to do so we want to do same thing once
115:07 - the user signs up as well we can copy
115:10 - and then we can paste that here as well
115:13 - after the user has been saved and that's
115:15 - how it's going to work over there we can
115:17 - add the comment as well we can have the
115:19 - store
115:20 - we can have the create token and store
115:25 - cookie so we can have this code over
115:27 - there and that's how it's going to work
115:29 - over there you can see this was very
115:31 - simple for creating this cookies and
115:32 - that's how it works inside the modern
115:34 - application and inside this application
115:36 - we are not required to use the refresh
115:38 - token as well because here the cookie
115:40 - can be stored for 7 days and after 7
115:42 - Days the user needs to relog in and
115:45 - that's how it
115:46 - works so now let's try it out in the
115:49 - postman as well well so in the postman
115:50 - the cookies can be visible but only in
115:52 - the browsers you can see those cookies
115:54 - that the cookies are being set or not so
115:57 - after this Postman testing of this login
115:59 - function now we'll be moving on to the
116:01 - front end so now before doing anything
116:03 - else now we want to move on to the front
116:05 - end and now we want to design the login
116:07 - system of the front end as well so let's
116:10 - move on so here we have the James
116:12 - test.com let's just click on the send
116:14 - and after that you can see the message
116:16 - is we can have the okay but inside the
116:18 - cookies we have one parameter you can
116:20 - see now we have the O token over there
116:22 - we have the O token we have the value so
116:24 - you can see this is the value of the
116:25 - token you can see that was our token
116:27 - over there you can see it is encrypted
116:29 - in a string we have the domain of the
116:31 - Local Host we have the path of the slash
116:33 - we have the expires as well you can see
116:34 - current date is 15th of September and it
116:37 - will be expired in Friday 22 September
116:40 - hi everyone and welcome back so now we
116:42 - have completed the login controllers the
116:45 - signup controllers over there you can
116:46 - see now the authentication functionality
116:48 - is working fine and we have tested that
116:50 - in the postman as well and now before
116:52 - moving directly into the back end into
116:54 - the chats and all we want to create the
116:56 - front end as well in which first we'll
116:58 - be having the login system so that the
117:00 - user can be logged in and then we'll
117:02 - dive into the chat B into the chat GPT
117:04 - apis so let's move on so here we have
117:06 - the back end folder now what we can do
117:08 - so first we can move on to the terminal
117:10 - and we can stop this terminal over there
117:12 - you can press controll C on your system
117:15 - and command C on the Mac OS and now you
117:17 - can move on you can create a new folder
117:19 - that could be for the front end over
117:20 - there so we can have the front end and
117:23 - after that we can have the CD into we
117:25 - can have the two dots over there to move
117:27 - back to the root directory then we can
117:29 - have the CD change directory and it
117:31 - should be to the front end and after
117:33 - that we can just move on and we can
117:35 - initialize a new react application and
117:38 - for using the react application here
117:40 - what we will do so we'll move on and
117:41 - we'll use the V so this time we'll be
117:44 - using the V over there and you can also
117:45 - use the plane react as well the next JS
117:47 - as well but here the V is super
117:50 - preferred for our application so that's
117:52 - why I will be using the V so after that
117:54 - we need to move on and we can click on
117:56 - the get started and it is completely
117:59 - fast as compared to the normal react or
118:00 - the nextjs application so wheat is very
118:03 - fast so that's why I have chosen the
118:05 - wheat for this application so we can
118:07 - click on get started and after that we
118:09 - want to create a new vat application so
118:11 - you can use pnpm Yan or the npm so I'm
118:15 - using the npm over there so what we can
118:17 - do we can copy this command then we can
118:20 - move on to the application or what we
118:22 - can do so we can delete the front end
118:24 - folder directly from this and we can
118:25 - just create the front end application
118:27 - directly from the whe so we can again
118:29 - move back to the root directory and then
118:32 - we can run the command of the uh npm we
118:34 - can paste that command as well we can
118:37 - paste that command so npm create V at
118:40 - theate latest we can hit enter and after
118:42 - that it will ask you a couple of
118:44 - questions as well like what's your
118:45 - project name and here we can provide the
118:47 - front end so now we can hit enter after
118:49 - that we need to select the template that
118:51 - we'll be using so we'll be using the
118:52 - react so we can hit on the react now we
118:55 - can choose any framework as well so both
118:57 - typescript and the JavaScript are
118:58 - preferred so in this application we can
119:00 - use the typescript as well and the S swc
119:02 - is the latest in which we'll be having
119:04 - the F reloading so we can hit on the
119:06 - typescript plus s swc and then after
119:09 - that now we can move on and then again
119:11 - we can move on to CD into the front end
119:13 - and now we can just install all of these
119:15 - dependencies and as compared to the next
119:17 - JS of the react it um what happens is it
119:21 - has very less dependencies to work with
119:23 - so you can see now inside this you have
119:25 - a very less dependencies as compared to
119:27 - react you can see you only have the
119:29 - react and the react Dom inside that and
119:31 - now let's move on so we can have the npm
119:33 - install to install all these
119:35 - dependencies on our end and now let's
119:38 - wait till it install all that and that
119:41 - we can get the overview of this app U so
119:44 - till then we can get some overview as
119:45 - well of the front end so in the public
119:47 - directory we can uh provide some or we
119:49 - can locate some assets which are
119:51 - publicly available that could be some
119:53 - logos that could be some images audio
119:55 - files video files over there then we
119:57 - have the source directory in which we'll
119:58 - be having our code files we can have the
120:00 - assets so in the assets you can also use
120:02 - some images which are not publicly
120:04 - available but you can use some assets
120:06 - like SVG icons or you can have the
120:08 - normal assets then you can have the CSS
120:10 - file for a component you can see you
120:12 - have the app. TSX which is the main file
120:14 - over there and here you can see what you
120:16 - have so you are just using the state you
120:18 - have the count variable over there and
120:21 - you can see this is a boiler plate then
120:23 - we can move on to the index. CSS here
120:25 - are some root stylings over there and we
120:27 - can directly move on to the main so this
120:29 - is the entry point of your application
120:31 - of your V application and from this
120:33 - application you create the root and if
120:36 - you are coming from normal create react
120:38 - app or the nextjs so this is a main app
120:41 - file so in the app router we have the
120:43 - page. T6 the main page and inside the
120:45 - normal react application with the create
120:47 - react app template it is the index. TS
120:49 - file which is renamed as the main and
120:51 - from here we are rendering the app
120:53 - component and now let's move on so here
120:55 - we have the app component and you have
120:57 - some environment files over there and
120:58 - you can see now we have the es link file
121:00 - which allows you for the linting
121:02 - purposes sometimes there are vulnerab Le
121:04 - in your code so it fixes all of them and
121:06 - we have the G ignore file in which once
121:08 - we will publish our application to the
121:10 - GitHub so once we will push all of our
121:12 - code so this will just ignore all of
121:14 - these files that could be some log files
121:16 - some non modules some disc folder of the
121:18 - build up application there can be some
121:20 - envirment files as well so it just
121:22 - ignores all of these files and it
121:24 - doesn't include these files over there
121:26 - and all of the files except this will be
121:28 - pushed to the GitHub then we have the
121:30 - HTML file in which we have the div ID
121:32 - equals to the root and where all of your
121:34 - react application converts to the
121:36 - JavaScript and then inject it into the
121:38 - root and there you can see now we have
121:40 - the package.json which contains some
121:42 - information about our application that
121:44 - could be some commands like there would
121:46 - be a Dev command there would be the
121:47 - build command there would be the L
121:49 - printing the preview and all then you
121:51 - have the readme file which contains the
121:52 - readme of your application you can also
121:54 - change the readme as well then you have
121:56 - the configuration for the typescript so
121:59 - here you have some configurations over
122:00 - there for the typescript and there we
122:02 - have the TS config node over there for
122:04 - running some backend quote over there
122:06 - because it is made on the Node envirment
122:09 - then we have the V configuration file as
122:10 - well in which there are some
122:12 - configurations to run the react over
122:14 - there and now the packages are now
122:16 - installed and now we can move back to
122:18 - our application
122:19 - so now we can run this application as
122:21 - well we can run the command of the npm
122:23 - we can have the Run we can have the dev
122:25 - to open the development server and there
122:27 - you can see in just 235 milliseconds now
122:30 - your development server is open and it
122:32 - is open on the Local Host Port of 5173
122:35 - so we can control and click on that and
122:37 - there you can see now we have the vend
122:39 - react application ready and there you
122:40 - can see it is very fast as compared to
122:42 - the nextjs and the react and now let's
122:44 - move on so here we have the ball plate
122:46 - code we can mutate the ball plate code
122:48 - code as well we can move on to the app.
122:50 - TSX we can remove everything from it so
122:53 - we can just remove the full fragment
122:55 - over there we can just render here the
122:57 - main over there like this we can have
122:58 - the main and inside that we can render
123:00 - the hello world over there to have this
123:03 - starting project for us now we can
123:05 - remove the state variables as well we
123:07 - can remove all of these variables
123:08 - because these are not required in our
123:10 - application so let's save all of that
123:12 - and let's move on to the application you
123:14 - can see now we have the hello world but
123:16 - maybe there are some CSS Styles over
123:19 - there uh you can see inside the index.
123:20 - CSS you have some CSS Styles so you can
123:23 - remove all of these Styles and then what
123:25 - you can do so you can provide the HTML
123:27 - over there you can have the HTML and you
123:28 - can have the body and inside that what
123:31 - you can do is you can just provide the
123:33 - margin that should be equals to we can
123:35 - have the zero like this so there you can
123:37 - see now you do not have any Styles
123:38 - overridden into that and after that we
123:40 - need a different font family for this
123:42 - application so what we can do so we can
123:45 - move on to the Google fonts over there
123:47 - so we can move on to the Google fonts
123:49 - and from there we can search some fonts
123:52 - like what we can do so first you can
123:54 - move on to the fonts and then you can
123:56 - just search for the
123:58 - Roboto slab over there so we have the
124:01 - Roboto slab and then we need this Styles
124:03 - over there we can choose the styles of
124:06 - around 300 400 500 600 and we can have
124:09 - the 800 so they are already there and
124:12 - then what we can do so we can move on we
124:14 - can have the work sense as well so we
124:16 - can have the
124:17 - work uh we can have the sense over there
124:20 - so this is also great font for us so we
124:22 - can choose them and we need the 400 for
124:26 - the work sense and that's how it's going
124:27 - to work and I think we can use the
124:30 - normal 400 with that so we have the
124:32 - regular 400 we can click on that and
124:34 - after that you can see after you click
124:36 - on that then you will be seeing the use
124:38 - on web and then you can select the
124:39 - import over there and then you need to
124:41 - copy the full import statement you can
124:44 - copy the import statement and then you
124:46 - can move back to your application CSS
124:47 - file the root CSS file then at the top
124:50 - of your CSS file then you need to paste
124:53 - that and there you can see that's how
124:55 - it's going to work and I think the uh I
124:58 - think the swap is there for this so
125:01 - maybe something was wrong with that
125:03 - display equals to swap maybe it's okay
125:06 - and now let's move on so inside the root
125:08 - CSS file now we can provide some more
125:10 - classes like that so we have the margin
125:13 - zero we can the padding that should be
125:15 - we can have the Zero from all sides we
125:17 - can have a different background for our
125:19 - application that should be we can have
125:21 - the 0 51 01 C we have a darkish
125:25 - background for our application we can
125:27 - have the color of the text and all of
125:29 - the components that should be the white
125:31 - we can have the font family the default
125:33 - font family for our application could be
125:34 - we can have
125:35 - Roboto slap or we can have the siif if
125:39 - we do not find that so that's how it's
125:41 - going to work over there and now let's
125:43 - move on so there you can see now what we
125:46 - need to do so now if we move on to the
125:47 - application once again you can see now
125:49 - we have the hello world and we have a
125:50 - different font family for us so let's
125:53 - move on let's just select this element
125:55 - you can see now we have the font family
125:57 - of the Roboto and that's how it's going
125:59 - to work over there and after that now we
126:01 - want to install a couple of dependencies
126:03 - as well that we'll be using so for
126:05 - styling this application we'll be using
126:07 - the material UI so we can move on to the
126:09 - mui
126:11 - docomo and library for with the react
126:13 - for with the GSX so we can use these
126:16 - components so you can see there are a
126:17 - couple of components that are completely
126:19 - free to use and if you write these
126:22 - components directly from scratch it will
126:24 - cost you a lot of time you can see there
126:25 - are some accordian components the
126:27 - temperature range you can have these
126:29 - buttons layouts and all of the things so
126:31 - you can say it has a great design
126:32 - library and it is the most preferred
126:34 - react Library anywhere in the world you
126:36 - can see all of the major companies are
126:38 - using that as well we can click on the
126:40 - get started and then you can just move
126:42 - on to the installation and after that
126:44 - now what do we need to do so you need to
126:46 - move on you need to copy this command
126:48 - over there you can paste that here so
126:50 - you can stop this terminal for a couple
126:51 - of minutes you can add these
126:53 - dependencies over there and after the
126:55 - material UI after the styling then we
126:57 - need the icons as well so for the icons
126:59 - we'll be using the react icons over
127:01 - there so here we have the react icons so
127:05 - we can copy this over there so we only
127:08 - need the name of the react icons that's
127:10 - it we can paste that here and after the
127:12 - react icons now we can move on so we
127:14 - need the routing functionality as well
127:16 - so we'll be using the react router Dom
127:19 - for the routing we can move on and the
127:22 - current version is 6.16 so you can use
127:25 - that and after that now I think the
127:27 - current version is 6.4 now let's use
127:29 - that so what we need to do so we can
127:32 - just have the
127:34 - react router that should be we can have
127:37 - the Dom we so here we have the react
127:38 - router Dom and I think we need some
127:40 - notifications as well within this
127:42 - application so that should be we can
127:43 - have the react
127:46 - hot toast so that's a lab ready for the
127:48 - notifications so you can move on to
127:50 - their website and there you can see
127:52 - there are two options so if you click on
127:54 - make me a toast you can see you will be
127:56 - having this type of notifications as
127:58 - well so let's move on and let's just use
128:00 - all of that so here you can see this is
128:02 - the name of the package react H toast
128:05 - then you need to enter that as well so
128:07 - there you can see there are a couple of
128:08 - styles over there there are a couple of
128:10 - dependencies that we'll be using so now
128:12 - we need to hit
128:13 - enter and after that now let's move on
128:16 - so now let's move on to the main. txx
128:18 - and have some like a couple of theming
128:20 - as well for the material UI so let's
128:22 - move on let's create a new theme for our
128:24 - material UI so we can have the cons we
128:26 - can have the theme and you can use the
128:28 - pre- default theme of the material UI as
128:30 - well it doesn't matter now you now oh
128:33 - sorry here we'll be creating our round
128:34 - customized theme so we can have the
128:36 - create
128:37 - theme so we need to use the create theme
128:40 - directly from uh imported from the
128:42 - material and here we only want to use a
128:44 - theme for the typography so we can have
128:46 - the typography over there and inside
128:48 - that inside we can use the font family
128:50 - and that should be we can have the
128:52 - Roboto slab over there and after that
128:54 - we'll be using the siif as well after
128:56 - that if we do not find that so we can
128:58 - have this s and after that we have
129:01 - multiple variants for the typography and
129:02 - for all of these variants so we can use
129:05 - a color and that should be we can have
129:07 - the white over there so we have a white
129:08 - color for all of these variants and now
129:11 - we have the customized theme for the
129:12 - material UI uh and now we need to move
129:14 - on so here after this strict mode then
129:17 - we can just render theme as well for
129:19 - this so we can use the theme provider
129:21 - directly from the material UI so here we
129:25 - can use a theme provider like this so we
129:27 - have a theme provider and then we need
129:29 - to use the theme provider over there to
129:30 - wrap the app component with the theme
129:33 - and let's wrap it up and let's provide
129:36 - the theme as well so it needs a theme
129:39 - object and that's a theme and after that
129:41 - now let's move on so let's set the
129:43 - routing functionalities as well within
129:44 - this application so you need to import
129:46 - something from the react router Dom so
129:48 - you can import something from reactdom
129:51 - and something would be equals to what we
129:54 - need to do so you need to use the
129:55 - browser router which adds the
129:57 - functionality which adds the wrapping
129:59 - functionality inside the browsers to use
130:01 - the routing over there inside the react
130:03 - application and it should be there
130:04 - inside the top again so we can have the
130:06 - browser router and everything should be
130:08 - wrapped between them over there from the
130:11 - theme provider till here so you can wrap
130:13 - all of that so that's how it's going to
130:15 - work now we have the browser router and
130:17 - then we have the theme provider and
130:19 - after that now we need to move on so now
130:21 - we can move on to the app. TSX so here
130:23 - we can just register some of the routes
130:25 - of the application as well so let's move
130:27 - on so here we have the main tag over
130:29 - there and after the main now what we can
130:31 - do so we can remove all of that and then
130:33 - we can just render here the header of
130:35 - the application so what we can do so
130:37 - inside the source we can create a new
130:39 - file that could be we can have the
130:40 - components over there and inside the
130:42 - components we can create a new component
130:44 - that should be header. TSX over there we
130:47 - can rent the RF fce for the default
130:49 - setup and default ball update code for
130:51 - that we have the RFC and after that
130:54 - let's create another folder inside the
130:55 - source that could be we can have the
130:57 - pages so this should contain all of the
130:59 - pages all of the routes of our
131:01 - application so let's have the home as
131:03 - well we have the home. TSX over there
131:05 - and we can again use the RFC for the
131:07 - default B plate code then we can move on
131:10 - so after that we can move on we can have
131:13 - the chat do we have the TSX over there
131:16 - chat. TSX and it also contain the ball
131:19 - plate code then we can move on and then
131:21 - we can have your the login page as well
131:24 - login do we have the TSX over there that
131:27 - should contain the normal login page we
131:29 - can have the sign up as well we can have
131:31 - the sign up do we have the TSX over
131:34 - there sign up. TSX it should also
131:36 - contain the RFC for the default ball
131:38 - plate code then I think there could be
131:40 - another page in which if their
131:43 - application so like suppose if the user
131:45 - enters a route which is not registered
131:47 - inside the this application so we need
131:49 - to register that route as well so that
131:51 - we can show a not found page so we can
131:53 - have the not found do we have the TSX
131:57 - over there in which we can show to the
131:58 - user that this route is not registered
132:01 - inside this application so we have the
132:03 - RFC for the default bate
132:05 - code and now we can move on so again we
132:08 - can move on to the app. TSX so here we
132:10 - have the main and inside the there would
132:12 - be very simple things so first we need
132:14 - to renter the header of this application
132:16 - here we have the header over there so
132:18 - inside the header after so that should
132:21 - be a self closing component so here we
132:23 - have the header and after that now we
132:24 - need to register all of the routes so
132:26 - first we need to import something from
132:28 - the react rout Dom so we can import
132:32 - something from we have the Rea rout Dom
132:35 - and something that we need to import
132:37 - would be equals to we need to import the
132:39 - routes so all of the routes should be
132:41 - there inside the routes so that is a
132:43 - container for all of the routes and to
132:45 - enter each route and to register each of
132:47 - the route you need to use a route
132:49 - component so it's a container and it's a
132:51 - route so let's move on let's add these
132:53 - things over there so here we have the
132:55 - routes over there that's a container and
132:57 - that should be equals to we can have the
132:58 - route and inside that we can provide the
133:01 - path so path of this should be we can
133:03 - have the Slash and we can have the
133:05 - element as well element should be we can
133:07 - have the homepage so we can have the
133:09 - home so home should be the inside the
133:12 - slasher out and after that let's copy
133:14 - let's paste it so that should be we can
133:17 - have the login as well we have the route
133:18 - of the login and the element should be
133:20 - there for the login here and then we can
133:23 - again move on we can again copy that we
133:25 - can have the route SL we can have this
133:27 - sign up and this signup should contain
133:30 - this sign up route over there sign up
133:32 - page then we can again move on we can
133:35 - register a new route that should be we
133:37 - can have slash we can have the chat so
133:40 - this should have the chat page and the
133:42 - element that we want to render should be
133:43 - the chat over there the chat component
133:46 - and if there is any route which which
133:48 - are not there inside these routes which
133:49 - are any route after that so that's how
133:52 - it's going to work so there you can see
133:53 - now we have a couple of routes inside
133:55 - this application and that's how it's
133:56 - going to work we have around six routes
133:58 - over there and that's how it's going to
134:00 - work and now let's move on and now let's
134:02 - move on to the header and now let's
134:04 - build the header of this application as
134:06 - well and for using the header we'll be
134:08 - using the component of the material UI
134:10 - so inside this we should be using the
134:12 - app
134:13 - bar we can have the app we can have the
134:16 - bar and we can import that directly from
134:18 - mui as well we can import app bar over
134:21 - there directly from we should have the
134:24 - mui SL material SL we can have the app
134:26 - bar like this so here we should be using
134:28 - the app bar over there like this and the
134:31 - app bar is just like a basic nav tag
134:33 - with some predefined Styles and after
134:35 - that below that we can use a toolbar as
134:37 - well so we can have the toolbar we can
134:40 - again import something from mui and that
134:42 - should be equals to we can have the
134:43 - toolbar like this so that should have
134:46 - the toolbar and it should should also be
134:48 - imported directly from the toolbar
134:49 - package so here we have the toolbar over
134:52 - there and if you don't know about these
134:54 - components you can always move on to the
134:56 - material UI you can just search like
134:58 - what is the app bar over there so there
135:00 - can be the app bar API you can move on
135:03 - to the demos as well so here you can see
135:05 - that's how you can use the abar over
135:07 - there you can just directly import it
135:08 - from the mui material or you can use
135:11 - that with this as well and if you want
135:12 - to see the demo you can see that is the
135:14 - app bar you can see some predefined
135:16 - styles are there that could be some M
135:18 - Bar and inside that you have some tool
135:20 - bar as well to add some structure of all
135:22 - of these elements you can see these are
135:24 - the basic navigation bars inside modern
135:26 - world applications so let's use that as
135:28 - well so after the app bar we have the
135:29 - toolbar and after that now let's move on
135:32 - so inside the app bar now what we can do
135:35 - we can provide some customized Styles as
135:36 - well we can use the SX prop for that we
135:39 - can use the SX props and before
135:41 - providing the customized Styles let's
135:43 - just run this application and let's just
135:45 - see all of that in action as well we can
135:47 - have the NP PM run we can have the dab
135:49 - over
135:51 - there and after that let's move on so
135:54 - you can see it is again there inside
135:56 - this you can see now we have the app bar
135:58 - and that's how it's going to work so if
136:00 - I open the 110% over there you can see
136:03 - that's how the app bar is going to look
136:05 - and after that you can see there are
136:06 - some predefined Styles let's provide
136:08 - some Styles so what we can do so we can
136:11 - have the BG color for providing the
136:12 - background color and that should be we
136:14 - can have the transparent then I think we
136:16 - can Pro the position so position should
136:19 - be what we can do so we can have the
136:20 - static over there of the top then we can
136:23 - have some shadows as well I think there
136:25 - are no many Shadows with that yeah there
136:28 - are some Shadows so what we can do we
136:30 - can also remove the shadows as well if
136:31 - you want to remove that so you can have
136:33 - the box shadow that should be you can
136:35 - have the none over there so now there
136:37 - won't be any Shadows over there inside
136:39 - the top and after that let's move on so
136:41 - inside the toolbar you can provide a
136:43 - couple of styles once again you can
136:44 - provide the SX prop and that should be
136:46 - you can have the dis display of The
136:48 - Styling that should be equals to the
136:50 - flex so that's a container and it should
136:52 - have the display Flex to render all of
136:54 - the items over
136:55 - there and the first thing that we going
136:57 - to do is now we need to render the logo
136:59 - of this application so here what we will
137:02 - do so we will provide our own logo so
137:04 - we'll use our own logo with that so
137:06 - let's move on and after that now let's
137:08 - move on so inside the components let's
137:10 - create a new folder that could be we can
137:13 - have the shared like that we have the
137:14 - shared and inside that we can use the
137:16 - logo do we have the TSX over there and
137:19 - let's design the logo as well so inside
137:21 - the logo it should always be like a link
137:24 - so once we click on the logo now we
137:26 - should be moved on to the homepage and
137:28 - for that we need some images as well so
137:30 - we'll be using the images for the logo
137:32 - as well so let's move on so from my
137:34 - GitHub repository you will find the
137:36 - images as well so you can move on to the
137:38 - public folder and there you can see you
137:39 - have some images of like the robots the
137:41 - nuclear openai robot and the vvg so you
137:44 - will find these images as well and now
137:46 - let's move on so here you can see now
137:49 - for providing the logo let's move on to
137:51 - the shared logo component and here let's
137:53 - just use something so here what we can
137:56 - do so we can just use the div here
137:57 - directly we can provide the style over
138:00 - there so we can have the style prop for
138:02 - the div we can provide the display that
138:05 - should be we can have the flex over
138:07 - there we can have the flex for the
138:09 - display we can use the margin from the
138:11 - right that should be we can have the
138:13 - auto over there like this so we can have
138:16 - the margin that should be from we can
138:18 - have the right over there that should be
138:19 - Auto then we can have I think we can
138:22 - have align the items that should be we
138:24 - can have inside the Cento then we can
138:26 - have the Gap and that should be we can
138:28 - have something around we can have the
138:29 - five or we can have the eight pixels
138:31 - over there for the gap between them so
138:33 - first we'll be having the like we can
138:36 - have the link and inside the link we'll
138:37 - be having the image then we'll be having
138:40 - some text so what we can do so we can
138:43 - use a link directly from the react a Dom
138:46 - so we can use a link component from the
138:48 - re Dom we can import that import the
138:53 - link from we have the re Dom so that
138:56 - should be we can have the
138:58 - link and we can render it over there and
139:01 - we can provide the two prop as well for
139:03 - the link so where it's going to navigate
139:05 - so we can have the two that should be
139:07 - equals to we can have the Slash and
139:08 - after that let's move on so inside the
139:10 - link we can first render the image over
139:12 - there the source should be we can have
139:14 - the open AI do have the PNG over there
139:17 - we we can have the alt that should be
139:19 - again we can have the open a like that
139:21 - so credit goes to the open a and after
139:23 - that let's move on we can provide some
139:25 - width as well width should be somewhere
139:27 - around 30 pixels would be enough for
139:30 - that I
139:31 - think and after that we can have the
139:33 - height as well height should also be
139:35 - somewhere around 30 pixels over there
139:37 - then we can have some class names as
139:39 - well we can just invert the color of
139:41 - this we can have the image inverted like
139:46 - that we can have the the image inverted
139:48 - over there so we'll be having the
139:49 - customized classes as well and after
139:51 - that now we have the link over there and
139:53 - after that let's move on let's have the
139:54 - typography as well so we'll be using the
139:57 - typography so it is a component of the
139:59 - material UI so you can get this directly
140:01 - from the mui you can import the typ of
140:06 - graphy from you can have the
140:10 - mui mu materials SL we can have the
140:12 - typography like that and you can render
140:15 - that over there you have the typography
140:16 - and inside that you can provide some of
140:18 - the customized styling like you can have
140:20 - the SX prop that should be what you can
140:22 - do you can have the display so inside
140:25 - the display what do we need to do so we
140:27 - need to provide some responsive sizes so
140:29 - what we can do so we can provide an
140:31 - object inside the display so inside the
140:33 - display for the MD screen sizes like for
140:35 - the medium screen sizes we want the
140:38 - display should be we can have the block
140:39 - the normal display but for the small
140:42 - devices for the small screen devices we
140:44 - can have the display for the none and
140:46 - then we can have for the extra small
140:47 - devices as well for the extra small and
140:50 - that should be what we can do so we can
140:52 - have the none over there so only for the
140:54 - medium and upper devices there should be
140:56 - the display and inside the small and the
140:58 - extra small the display should be the
140:59 - none so it should not be visible and
141:02 - after that what we can do so after this
141:04 - display then we can provide some classes
141:06 - like we can have the margin from the
141:08 - right so you can use the short end
141:10 - property of the Mr and that should be
141:13 - you can have the auto over there for the
141:16 - margin right then you can have the font
141:18 - weight as well so weight of the font
141:20 - should be you can have the 800 over
141:21 - there for the weight then you can have
141:23 - the text Shadow as well Shadow should be
141:26 - somewhere the shadow should be somewhere
141:29 - around you have the two pixels 2 pixels
141:31 - 20 pixels of the blow and you can have
141:34 - hash tri0 color for the shadow so these
141:37 - are some customized styles for the
141:38 - typography and insert that now what you
141:40 - can do so you can render this pen so
141:44 - first letter of your or like the first
141:46 - word of your logo should have the
141:48 - different styles so you can have the
141:49 - style over there and that should be you
141:51 - can have the font size that should be 20
141:54 - pixels over there 20 pixels so first
141:56 - letter should have a different styles
141:58 - you can have Theon like that you can
142:00 - have Theon and then after that you can
142:03 - use the GPT you have the GPT like that
142:06 - so that's how you can provide some of
142:07 - the Styles over there so first let's use
142:10 - the logo over there so let's use the
142:12 - logo inside the header so here we have
142:14 - the logo over there and that's how it's
142:15 - going to work so there you can see now
142:16 - we have the logo then we have the M GPD
142:19 - and that's how it's going to look and
142:21 - after that let's move on let's just
142:22 - provide some of the classes for this as
142:23 - well for the images and all and after
142:26 - that and after providing the Styles I
142:28 - think the typography should be there
142:30 - after the link so it should be there
142:32 - after the link like that and that's how
142:34 - it's going to work so there you can see
142:35 - now with the man GPD and that's how it's
142:37 - going to work and after that now what do
142:39 - we want to do over there so you can see
142:41 - now we have the classes for the image
142:43 - inverted so we can move on we can uh we
142:46 - can enter this class as well so we can
142:47 - move on to the index. CSS we can provide
142:49 - this class like the image inverted and
142:52 - then now what we can do so we can use
142:53 - the filter for the images we can have
142:56 - the invert for this so if you provide
142:58 - the invert of the 100% now if you move
143:00 - back to the application you can see now
143:01 - it looks great so here you have the M
143:03 - GPD and everything seems to be working
143:05 - perfectly fine and instead of providing
143:08 - the 8 pixels for The Gap let's use this
143:10 - for the 15% and that's how you can see
143:13 - now it looks great over there so now it
143:15 - seems working fine and now we and move
143:17 - on to the next things and now we need to
143:19 - render the navigation links over there
143:21 - but there would be some conditions for
143:23 - rendering these links so conditions can
143:26 - be when the user is logged in then we
143:28 - want to show the link for go to chat to
143:31 - show the chat window to the user and
143:33 - there would be the link for the log out
143:35 - and if the user is not logged in then we
143:37 - want to show the links for the login and
143:39 - the sign up so there are two scenarios
143:41 - and we also need to handle these two
143:43 - scenarios as well because inside
143:45 - multiple parts of this application we
143:47 - need the user is logged in or not so for
143:50 - that we need a overall State Management
143:52 - inside our application so that in any
143:54 - children component in any component we
143:56 - can get the state like if the user is
143:58 - logged in or not so what we can do so we
144:01 - need a state management so we need the
144:04 - overall State Management which can wrap
144:06 - the full application with the state so
144:08 - either we can use the Redux so Redux is
144:10 - a great choice for that but there's also
144:13 - alternative with the react itself which
144:15 - is the context API so context API is
144:17 - very handy and it's very easy to
144:19 - implement as compared to the Redux so
144:21 - here we'll be implementing the context
144:23 - API and it is currently most easy thing
144:26 - that you can do so what we need to do so
144:28 - for implementing the context inside our
144:30 - application so it will benefit like you
144:32 - can get the state you can call some
144:34 - functions from the context from anywhere
144:36 - within this application so inside the
144:38 - source you can create a new folder that
144:40 - could be you can have the context over
144:42 - there so here we have the context and
144:44 - inside that we can create a new file
144:46 - that could be we can have the we can
144:48 - have the
144:50 - context do we have the TSX so from the
144:53 - context there would be multiple
144:55 - functionalities like what we will do so
144:57 - we'll provide the whole user object in
144:59 - which if the user is logged in then
145:00 - we'll be receiving the details of the
145:02 - user like the email the ID the name of
145:04 - the user and then we'll be having the
145:06 - logged in property like if the user is
145:08 - logged in or not so we can store a
145:10 - Boolean variable so that we can identify
145:12 - if the user is logged in and then we can
145:14 - have the functions as well for the login
145:16 - and the log out to identify or just call
145:19 - the functions directly from the context
145:21 - of the user from the authentication
145:23 - context so from this context now let's
145:25 - define all of that so first thing that
145:27 - we want to do is we want to just move on
145:30 - and we want to import
145:31 - something is we want to import something
145:35 - that should be equals to from and that
145:36 - should be equals to the react and
145:38 - something that we want to import would
145:40 - be the context so now let's move on so
145:42 - we need to import a function which is a
145:44 - create context so let's move on so so we
145:47 - can have the cons we can have the O we
145:49 - can have the context over there so here
145:51 - we have the O context over there and
145:53 - that should be equals to we can have the
145:54 - create context over there so it should
145:56 - be equals to the create context and now
145:58 - what do we want to do so initial value
146:00 - that we can provide should be equals to
146:02 - the null but here we are using the
146:04 - typescript so we should provide the
146:06 - value as well so what we can do so we
146:08 - can Define the type for it as well we
146:10 - can have the type that should be we can
146:11 - have the user off like that and that
146:13 - should be equals to a normal type and
146:16 - here what do we want to do so first
146:17 - property would be is logged in that's it
146:20 - and that property would be a Boolean
146:22 - property so we can have the Boolean like
146:24 - that then we can move on we can have the
146:26 - user property as well so we can have the
146:28 - user and that should contain a separate
146:30 - user type so we can have the type that
146:33 - should be we can have the user and we
146:34 - can also declare these types in a
146:36 - separate file as well so right now I'm
146:38 - just using it inside a context so here
146:41 - let's just use that and let's just
146:42 - Define that here so after the user then
146:44 - you can move on so type user user should
146:47 - contain the name of the user that should
146:49 - be you can have the string user should
146:52 - contain the email as well that should be
146:54 - again the type of we can have this
146:55 - string and the user type should be
146:58 - having the type of the user and
147:00 - sometimes if the user is not there then
147:02 - the user could be equals to we can have
147:04 - the null oh sorry it should be only the
147:07 - single string so now that should be
147:08 - equals to the null after that there
147:10 - would be the functions for the login and
147:11 - the log out let's define the function
147:13 - for the login so that would be a normal
147:15 - function but here uh we would be having
147:17 - the promise for that so here we would be
147:20 - returning the promise over there and the
147:21 - promise could be we can have the void
147:23 - because we don't want to return anything
147:25 - from the promise so that's why it should
147:28 - be the void but inside the login
147:30 - function there would be parameters like
147:31 - we can have the email so email could
147:34 - have the type that should be we of the
147:37 - string the password that should be we
147:39 - can of the type of like it should be the
147:41 - string and then we have a login function
147:44 - we can have the sign up as well so we
147:46 - can have the sign sign up over there
147:47 - like this and sign up should also have
147:49 - something around we can have the name we
147:52 - can have the
147:53 - email we can have the password over
147:55 - there so we can have the password as
147:57 - well like this we have the password that
147:59 - should be in the string format and then
148:01 - finally that will be having the log out
148:03 - function as well so we'll be having the
148:05 - log out and it should also be the
148:06 - promise because once we move on to the
148:09 - log out now we want to remove the
148:10 - cookies so if the cookies are being set
148:13 - by the back end and if the cookies are
148:14 - the HTTP only cookies it means those
148:17 - cookies can only be removed by the back
148:20 - end so once we click on the log out
148:21 - we'll be just uh clicking a button of
148:23 - the log out and then the back end would
148:25 - remove the cookies like the
148:27 - authentication cookies with that so that
148:29 - should again be we can have the promise
148:31 - that should be we can have in the white
148:33 - State because we don't want to return
148:34 - anything over there and now the create
148:36 - context should have the property so
148:39 - create context should have the user o
148:41 - like that the type of the user or like
148:43 - this or it should be the user o or it
148:46 - could be the null like this so now we
148:48 - have the O context and now what do we
148:50 - want to do now we want to create the
148:51 - provider for this context as well so we
148:54 - can have the const we can have the O
148:56 - provider like this so we have the O
148:58 - provider and the provider would wrap all
149:00 - of the childrens's inside that so we
149:02 - have the O provider that should be
149:03 - equals to a normal react component and
149:06 - inside that we would be accepting the
149:08 - children property we would be having
149:09 - some children over there CH run over
149:12 - there like this and it should have the
149:15 - type the type should be we can again
149:18 - have the react node like this we have
149:20 - the react node like this for the type
149:22 - and after that now let's move on so
149:24 - after this now we want to handle a
149:26 - couple of States as well within the
149:27 - provider so how we can do that so first
149:30 - state that we can have is the U state so
149:33 - we can have the snippit like first we'll
149:35 - be having the property of the user uh we
149:38 - should be having the property of the
149:39 - user I don't think what happened to that
149:42 - we have the user then we have the set
149:44 - user like this and the state should have
149:47 - the value of the user property like this
149:49 - the user or it could be the null as well
149:51 - so we can put the user or the null
149:53 - should be there in set the state and
149:55 - initial value should also be we can have
149:57 - the null like this so it should be the
150:00 - null and after that now let's move on so
150:02 - after that let's have the state for the
150:04 - authentication oh sorry we can have the
150:06 - login as well so we can have the logged
150:07 - in over
150:08 - there like we can have the
150:11 - is logged in like this and we can have
150:14 - the set is logged in and we can provide
150:16 - here the state that should be we can
150:18 - have the false and after that now let's
150:20 - move on so now we have the is loged in
150:21 - property as well now after we refresh
150:24 - this application so after once the user
150:26 - moves on into the application so we
150:28 - should run effect code as well we should
150:30 - run effect code we can run a function
150:32 - and we can verify if the user's cookies
150:34 - are still there and if the cookies are
150:36 - valid then the user doesn't need to be
150:38 - logged in so we can Define the effect
150:40 - function for that as well we can have
150:42 - the effect so as of now we won't be
150:44 - implementing that so first we need to
150:46 - implement the login functionality then
150:48 - only we want to do that so this effect
150:50 - function has only to do that what do we
150:52 - need to do inside that so we can have we
150:55 - can have the fetch if uh if the
151:00 - users cookies are
151:03 - valid then um we can have to then skip
151:08 - login so we should have this code inside
151:11 - the fact so we would be writing the
151:13 - logic after we write the implementation
151:14 - of the authentication then we can move
151:16 - on so then we should be having the
151:18 - functions for the login as well so we
151:20 - can have the login like this so that
151:22 - would be equals to a function and it
151:24 - could be asynchronous as well so we
151:26 - should write the asyn over there and we
151:28 - need the parameters as well so we need
151:30 - the same parameters like the email and
151:32 - the password we can copy we can paste
151:35 - now we be having the email and the
151:36 - password so as of now we just need the
151:38 - definitions now we have the login then
151:41 - we can have for the log out as well or
151:43 - we can have the sign up like the sign up
151:45 - it should contain in this properties
151:48 - like we can have the name email and the
151:50 - password let's Implement that over there
151:54 - name email and the password and now we
151:57 - should be having the log out function as
151:58 - well so we should be having the log
152:02 - out uh log out and here we won't be
152:06 - requiring any properties over there we
152:08 - don't need any variables over there and
152:10 - that's how it's going to
152:11 - work and here it should be the email
152:13 - instead of the emay and then here is it
152:16 - should be I think the email over there
152:18 - like this and now we have defined all of
152:20 - these properties and now now you can see
152:23 - now we have created the provider and now
152:25 - the provider needs to set those values
152:27 - as well which should be used by the
152:29 - children's so for that let's define the
152:31 - value cons we can have the value like
152:33 - this so that should be an object it
152:35 - should contain the properties like user
152:38 - we can have the is logged in over there
152:40 - it's logged in then we should have the
152:41 - properties of the login function as well
152:44 - the log out function as well the regist
152:46 - or we can have the sign of function as
152:48 - well so there could be a couple of
152:49 - functions and now the final thing that
152:51 - we want to do is now we want to return
152:53 - all these state code over there now we
152:55 - want to return all of the states to the
152:57 - children components so we can have the
152:59 - return we can have the Au
153:01 - context dot we can have the provider so
153:04 - now we have the Au context do provider
153:06 - and that should contain the value so
153:09 - value is wrapped within this component
153:11 - the value should be equal to the value
153:13 - and after that now we want to render all
153:15 - of the children's inside that so which
153:18 - should be the children like this so
153:20 - that's how it's going to work so you can
153:21 - see it was very simple so Redux
153:23 - implementation looks a bit complicated
153:25 - like sometimes you need to add the
153:27 - middle WS for these functions like the
153:29 - asynchronous code you need to add some
153:31 - middle ws and all but you can see it was
153:33 - very simple and it contains and the
153:35 - context contains the definition with the
153:37 - react itself not anything else so you
153:39 - can see now we have created the provider
153:40 - now we have the context now you can see
153:42 - we have the type definitions as well and
153:44 - now the final thing that we want to do
153:46 - is now we want to create a variable now
153:48 - we want to create the context that
153:50 - should be used by The Childrens so this
153:52 - is just the provider now we want to
153:53 - create the context that should be used
153:55 - by The Childrens so we can Define any
153:57 - names like we can have the cons use or
154:00 - or anything like that we can have the or
154:01 - directly as well so that should be
154:04 - equals to now what do we want to do we
154:06 - can have the use context we can have the
154:08 - use context directly and the context
154:10 - should be the Au context and that's it
154:12 - with that you can see now we have the
154:14 - context oh sorry it should be function
154:16 - as well it should be a use off that
154:18 - should be a function which can contain
154:20 - all of these properties like this and we
154:22 - should export it as well we should have
154:23 - the export cost we can have the use all
154:26 - and now we want to just export this as
154:28 - well we want to export the
154:30 - authentication provider as well so what
154:33 - we can do we can have export cost we can
154:36 - have the Au provider so that's how it's
154:38 - going to
154:39 - work and after that let's move on so you
154:42 - can see now the initial property of the
154:43 - a logged in is false now let's move on
154:45 - to the the main file the main. TSX now
154:48 - just render all of that so first at the
154:50 - top we would be having the Au provider
154:53 - we should be having the Au provider and
154:55 - now all of the child components so the
154:57 - main component the main children is the
154:58 - browser router but the properties and
155:01 - values from directly from the auth
155:03 - provider directly can be used in any
155:05 - component in any child component now
155:08 - let's move on so if you want to see the
155:10 - demo you can move on to the app
155:11 - component you can have the lock
155:13 - statement or either you can have the use
155:16 - o like this you can have the use O then
155:18 - you can have the loog lock should be we
155:20 - can have the use o dot you can have the
155:22 - is logged in property like this do is
155:25 - logged in like this so use do you can
155:28 - have is logged in like this so suppose
155:30 - if you save and if you move on to the
155:32 - application if you move on to the
155:33 - inspect now you will be seeing three
155:35 - infos like you have the false over there
155:37 - because now the authentication is false
155:39 - now the user is not there inside this
155:42 - but if we switch to the true if we
155:44 - switch it to the true like this this so
155:46 - you have the true over there you can see
155:48 - now you will be having the true over
155:49 - there and that's how it's going to work
155:51 - uh sorry and it can solve a couple of
155:53 - problems like the prop dring as well so
155:56 - suppose if you create the authentication
155:58 - here directly uh inside the app. TSX
156:00 - then you need to send it inside all of
156:02 - these children components so it can
156:04 - create some issues because there can be
156:07 - a uh there can be very difficulty to
156:09 - manage all of these props and data over
156:11 - there so that's why we can use the
156:13 - overall application state within the
156:14 - context or we can also use the Redux as
156:16 - well so they are all similar and now
156:19 - let's move on so now we can have a
156:21 - conditions like if the user is logged in
156:23 - or not so we can again move on we can
156:25 - switch this to the false and now we can
156:28 - move on to the header so let's close all
156:30 - of these files Let's Move On Again into
156:33 - the component slh and here now what do
156:36 - we want to do so here we want to render
156:37 - all of these links and for rendering the
156:40 - links we can create a separate component
156:42 - for that so we have the shared link we
156:44 - have the shared for the link as well
156:45 - like this so we can have the link dot we
156:48 - can have the TSX over there so I think
156:50 - we can change the name we can have the
156:53 - nav link like that we can have the
156:55 - navigation link over there and that
156:56 - could be a separate component now we can
156:59 - just render the RFC for the default uh B
157:02 - plate code now inside the nav link we
157:04 - should accept a couple of properties
157:06 - like where the user want to go so we can
157:08 - Define all of the types as well so we
157:10 - can have the type for this we can have
157:13 - the props and that should be equals to
157:15 - we can move on we can have the two that
157:17 - should be inside the string we can have
157:20 - your the background as well we can have
157:22 - a a different background suppose the
157:24 - button uses this link we can have the
157:26 - background that should be inside the
157:28 - string and what we can do and after that
157:31 - we can use the text as well so the text
157:33 - should also be inside the string that uh
157:35 - that what we want to wrap between the
157:37 - link what the text should be visible in
157:39 - the link then we can have the text we
157:41 - can have the color as well we can have
157:42 - the text color and that should be the
157:45 - text color again should also be inside
157:46 - the string format so we need the string
157:48 - and after that we can also require the
157:50 - on click function as well so we can have
157:52 - the on click over there like this so it
157:54 - should contains if someone wants to
157:56 - define the on click some can use this as
157:58 - a button as well so we can have the on
158:00 - click function as well and this is
158:01 - basically used for the log out as well
158:03 - suppose we want to remove the state as
158:05 - well so that should be for the log out
158:07 - and after that so that should be for the
158:09 - logout and after that we can use the
158:10 - promise here as well so that should be
158:12 - promise in a white form so we don't want
158:14 - to return anything and after that we
158:16 - should render here a link so we only
158:18 - need to return the link component
158:20 - directly from we can use from react. Dom
158:24 - we can import the
158:26 - link directly from we can have the Rd
158:29 - react rou Dom slash I think the link is
158:33 - named export so we can use the link over
158:36 - there and now we want to return the
158:39 - link so here we have the link over there
158:41 - and inside the link we can have the two
158:43 - prop so we haven't defined the props
158:46 - over there so which should contain the
158:48 - props like that should be equals to we
158:50 - can have the props type over there the
158:52 - two should be equals to we have the
158:53 - props or you can have the two then what
158:56 - you can do then you can move on you can
158:59 - Define here I think you can that's it I
159:02 - think then you can move on and what you
159:06 - can do you can provide the text between
159:08 - them so the text between them should be
159:10 - what you can do we have uh props do we
159:14 - can have the text and then we can
159:16 - provide the customized Styles as well we
159:17 - can have the style so that should be
159:19 - equals to what do we want to do so we
159:21 - can have the background like this so
159:23 - background should be we can have the
159:24 - props do we can have the BG then we can
159:27 - move on then we can have the color as
159:29 - well the text color that should be again
159:31 - we can have the props or we can have the
159:33 - text color like this we can have the
159:36 - text color and that's how it's going to
159:37 - work so here you can see now this is a
159:39 - customized component of the navigation
159:40 - link and it would be very useful now
159:43 - let's move on to the header so here you
159:45 - can see now we have we have the toolbar
159:46 - sorry now we have the toolbar over
159:48 - there so here it would be very simple so
159:52 - now let's move on to the so what should
159:56 - we do now so now we should have a
159:58 - condition so after this now what we can
160:00 - do so after this we can renter a box or
160:02 - we can rent a normal div from the mui
160:05 - and after that what we can do so inside
160:07 - this div we can just wrap a condition so
160:09 - first we need to define the reference
160:11 - for the authentication context so that
160:13 - we can get if the user is logged in or
160:15 - not
160:16 - we can get the cons we can have the O so
160:19 - that should be equals to use o so now we
160:21 - have the reference now what do we want
160:23 - to do so here we should have a condition
160:27 - like if the O DOT we have the user or we
160:30 - can have the O do is logged in it means
160:33 - now the user would be logged in then we
160:35 - can render a different styles over there
160:37 - and if it is not logged in then we can
160:39 - do different things so that would be a
160:43 - GSX tag the empty tag and here as well
160:45 - will be having the empty tag so once the
160:47 - user is logged in then what we can do so
160:49 - we can just use here the navigation link
160:52 - inside the shared components so that
160:54 - should have the navigation link so there
160:56 - should be two links over there so both
160:58 - should have the first one should be
161:00 - having the BG so if the user is logged
161:03 - in then we can provide a customized
161:04 - background color that should be we can
161:06 - have the hash d0 we can have triple FC
161:10 - we have the background color then we can
161:12 - move on so we can have the two that
161:14 - should be we can have slash we can have
161:16 - the chat then we can move on we can have
161:18 - the text then we can have go
161:22 - to we can have the
161:26 - chat then we can move on we can have the
161:28 - text color so that should be again I
161:30 - think we can have the black for the text
161:32 - color for this we can have the
161:38 - black and after that now we have the
161:40 - second navigation link as well so we can
161:42 - put the BG so here BG would be different
161:44 - so we can have has we can have the 51
161:47 - 538 f for the background color we can
161:51 - have the foreground color as well so for
161:53 - the foreground color we can just use the
161:56 - text color as the
161:57 - white then we can have the two that
162:00 - should be what we can do so we can have
162:02 - the log out
162:03 - here we can have the log out over there
162:06 - then what we can do so we can have the
162:09 - text as well that should be a ween of
162:11 - the log
162:12 - out and two should not be the log out
162:14 - two should be the home page because once
162:16 - the user locks out now we want to move
162:18 - on to the home screen as well and now I
162:21 - think that's enough but here we would be
162:22 - having the on click function as well so
162:24 - inside this navigation link we would be
162:26 - having the on click and here now what do
162:28 - we want to do so we can have the o. we
162:31 - can have the log out so we will be
162:33 - referencing the log out function
162:34 - directly from this and after that if the
162:37 - user is not logged in then again we can
162:39 - render a different links we can just
162:41 - copy this one we can just paste that
162:43 - over there think what do we need to do
162:45 - so now we can remove that so I don't
162:48 - have any code with me right now so what
162:51 - we can do so we can just copy these two
162:52 - n Tex once again so the color
162:54 - combination should be same so now we
162:57 - have these things over there so we can
162:59 - remove that and that's how it's going to
163:01 - work and now what do we want to do so
163:03 - now you can see now we have the
163:04 - background should be same the two should
163:07 - be equals to now what we can do we can
163:09 - have the login and the text should also
163:11 - be we can have the
163:14 - login
163:15 - text should be the login the text color
163:17 - should also be the black and here we
163:19 - would be having the same background and
163:20 - the forground color the two should be
163:22 - equals to we up this sign up and that
163:24 - should be we can have the sign up again
163:26 - like this we have the text of the sign
163:28 - up and that's how it's going to work I
163:31 - think that's enough for that right
163:33 - that's enough but if we move on to the
163:35 - application once again you can see now
163:36 - we have all of the data you can see now
163:38 - we have the login and the sign up but
163:40 - now we want to provide couple of Styles
163:41 - as well to the navigation link so let's
163:44 - move on let's just Implement that so we
163:46 - can move on to the nav link we can
163:47 - provide the class names for that we can
163:49 - have the class name and we can use a
163:51 - customized class name we can use some
163:52 - CSS styles with that so what we can do
163:56 - so here so we can have a style that
163:58 - should be we can have the nav link over
164:00 - there like we can have the nav link so
164:02 - let's Implement these Styles as well so
164:04 - we have the nav link let's Implement
164:06 - these Styles so we can move on to the
164:08 - root CSS file or or sorry if you want to
164:11 - create a customized CSS file then it's
164:13 - up to you but I would be defining it in
164:15 - inside the index so that should be we
164:17 - can have the nav link and inside there
164:19 - know what do we want to
164:20 - do so it should contain I think the font
164:23 - weight that should be somewhere around
164:26 - 600 we can have your the text transform
164:30 - that should be upper case then we can
164:32 - move on we can have the margin right
164:34 - that should be somewhere around 10
164:36 - pixels margin from the left as well 10
164:39 - pixels we can have the padding that
164:41 - should be 8 pixels top and bottom the 20
164:44 - pixels from left left and right then we
164:46 - can have the Border
164:49 - radius that should be somewhere around
164:51 - 10 pixels with that so we have the 10
164:54 - pixels then we can have the text
164:56 - decoration that should be we can have
164:57 - the none over there then we can have the
165:00 - font family I think font family is
165:03 - already defined in the typography then
165:06 - we I think yeah it is defined then we
165:08 - can have the lettera spacing as well
165:11 - that should be somewhere around one
165:12 - pixels that's enough now we have the
165:14 - naving and everything seems to be
165:15 - working perfectly fine over there now
165:18 - let's move on to the nav link so now
165:20 - let's move on to the application you can
165:21 - see now it looks like this now we have
165:23 - the login we have the sign up we can
165:25 - click on the login now we are into the
165:26 - login page we can click on the sign up
165:29 - we are into the sign up page and if the
165:32 - user is logged in so we can move on to
165:35 - the context so suppose that's the
165:43 - true so there you can can see now we
165:45 - have the go to chat and then we have the
165:47 - log out and it means everything seems to
165:49 - be working perfectly fine over there
165:51 - once we click on the log out we enter
165:53 - the home once we move on to the go to
165:54 - chat now we into the chat page so
165:56 - everything seems to be working perfectly
165:58 - fine and now what do we want to do is
166:00 - the next step so now we are moving very
166:03 - fast I know but let's move on so we can
166:06 - have the false again we can move on to
166:08 - the login now let's define the login
166:10 - screen as well so now let's design the
166:12 - login screen as well so let's move on so
166:15 - I'm into the paint and now we want to
166:17 - see that how it's going to look so let's
166:19 - move on so suppose it's a web page so
166:22 - suppose it's a web page so inside the
166:24 - left corner of the web page inside the
166:26 - left side so there would be two sides so
166:28 - inside the left side there would be an
166:30 - image so we can render the image of a
166:32 - robot and inside the right side we can
166:34 - just render here the form so inside the
166:36 - right side sorry we can render here the
166:39 - form here so we can just render the form
166:42 - so there can be some items onto the form
166:44 - so that could be the login and the sign
166:46 - up as well so we can have name email and
166:48 - the password for the sign up but if
166:50 - there are the mobile devices so inside
166:52 - the mobile devices the style will look
166:54 - different so inside the mobile devices
166:56 - what we're going to do is we can just
166:58 - Rend so suppose that's a mobile device
167:01 - so it's a mobile device so we only need
167:03 - to render here the form so we need to
167:04 - make the responsive designs so we'll be
167:06 - only be having the form over there and
167:08 - that's how it's going to look so let's
167:10 - move on so insert the login now what do
167:12 - we want to do so first I think we just
167:15 - focus on the
167:16 - design so here inside the return what we
167:18 - can use so we can just use the box from
167:21 - the material UI so box is just like a
167:23 - component of the material just like the
167:25 - div so we can import something that
167:28 - should be at theate M material and it
167:31 - should be we can have the box over there
167:32 - so we have the box and inside that what
167:34 - we can do so we can Pro the SX prop or
167:37 - what we can do so the SX is not required
167:40 - we can give the width that should be we
167:42 - can have the 100% for the width we can
167:45 - have the height as well and it should
167:47 - also be we can have the 100% and what we
167:49 - can do so we can have the display as
167:52 - well display should be again we can just
167:55 - use the flex so we can just put the
167:57 - display Flex we can have the flex that
167:59 - should be one as well and now what we
168:01 - can do so we'll be dividing the flex
168:03 - into two parts so suppose that's your
168:05 - another box so we'll be using the box
168:07 - for the image and there could be another
168:09 - box for the form so both will be having
168:12 - the display of the flex so the first box
168:15 - let's move on so we can have the padding
168:16 - that should be eight we can have the
168:18 - empty margin from the top that should be
168:20 - again uh it would be the eight we can
168:22 - have the display as well so display
168:24 - should be we can give the responsive
168:25 - designs we can have for the MD screen
168:27 - sizes for the medium the display should
168:29 - be we can have the flex but for the
168:32 - smaller devices for the SM the display
168:35 - should be we can have the SM the display
168:37 - should be we can have the none and same
168:40 - happens with the extra small devices as
168:42 - well suppose that's a device Maybe it
168:45 - has very low width we can give the
168:46 - display that should be we can have the
168:48 - none and after that let's move on so
168:50 - here we have the box and here you can
168:52 - see inside that we can just render an
168:54 - image so there would be an image we can
168:56 - give the AI robot. VN PNG AI robot dot
169:02 - we have the PNG over there for the
169:03 - images we can get the alt we can have
169:05 - the robot over there like this and the
169:07 - credit goes to the respective owner so
169:09 - we have this image then we can move on
169:11 - we can have this style that should be
169:13 - around 400 pixels would be enough for
169:15 - the style over there for the width so
169:18 - let's move on we can give the width that
169:21 - should be 400 pixels that's how we want
169:23 - to do that so you can see now you can
169:25 - see it's looking great you can see now
169:27 - it's looking great and now you can see
169:29 - it's working fine so there you can see
169:31 - if we have defined the padding G it
169:33 - means 8 into 8 times so if we Define the
169:36 - padding of the one over there in the
169:37 - material UI the by default spacing is 8
169:40 - pixels so 1 is equals to the 8 and if
169:43 - you have defined the 8 it means it is is
169:44 - 8 into 8 which is 64 pixels for the
169:47 - padding and all and now let's move on so
169:49 - here you can see the first one has been
169:51 - completed now let's move on to the
169:53 - second box as well so inside this box
169:55 - there would be a normal things and this
169:57 - box would contain the form so let's move
170:00 - on so here we can Pro the display that
170:02 - should be again we can use the flex over
170:04 - there I think we can put the flex
170:05 - property as well so inside this Flex
170:07 - what we can do so for the extra small
170:09 - screen devices we should have the full
170:11 - Flex which is the one which we have
170:13 - defined over there
170:15 - and for the medium devices we can have
170:17 - the flex that should be somewhere around
170:19 - we can give the 0.5 so that's how it's
170:21 - going to work and after that let's move
170:24 - on let's provide a couple of more props
170:25 - like we can move on uh we can Prov the
170:28 - justifi content that should be inside
170:29 - the center of the screen we can Pro the
170:32 - Align
170:35 - items that should be again inside the
170:37 - center of the screen I think that's
170:39 - enough then we can move on we can put
170:41 - the padding as well that should be
170:42 - somewhere around two over there we can
170:44 - have thek margin from the left that
170:46 - should be we can have the auto over
170:47 - there like this we can have the auto we
170:49 - can have the margin from the top and
170:51 - that should be somewhere around 16 so we
170:53 - have these designs over there and now
170:55 - inste that now we can render a form so
170:58 - let's move on so we can just render here
170:59 - the form directly from the HTML tax and
171:02 - here now what we can
171:04 - do so here we can provide a customized
171:06 - styling for that so styling could be we
171:08 - can just for the margin that should be
171:10 - we can have the auto from all of the
171:11 - sides then we can have the padding as
171:13 - well so we can the padding that should
171:16 - be around we can give the 30 pixels of
171:18 - the padding from all of the sides the
171:20 - Box Shadow should be there somewhere
171:22 - around we can give the 10 pixels
171:23 - horizontally 10 pixels for the vertical
171:25 - Shadow 20 pixels we can give for the
171:28 - blow we can give hash triple 0 for the
171:30 - color of the Shadow then we can get the
171:32 - Bott radius so that should be somewhere
171:35 - around 10 pixels would be enough for
171:37 - that and then finally we can give the
171:39 - Border here so we can have the border
171:41 - that should be we can use the none so we
171:43 - don't need to use the Border and after
171:45 - that now what can we do so inside this
171:47 - form we can just renter another
171:49 - container so we can have a container
171:50 - over there like suppose that could be
171:52 - equal to box and here we can provide a
171:54 - couple of more styling like again we can
171:56 - have the display like this so we can
171:59 - have the
172:00 - display again we can use the flex then
172:03 - we can move on we can have the flex
172:05 - direction that should be we can have the
172:07 - column over there and final thing that
172:09 - we can use so we can move on we can have
172:11 - the justifier to the content that should
172:13 - be inside the center of the screen so
172:16 - that's how it's going to work and after
172:17 - that let's move on let's just add the
172:19 - elements over there so the first thing
172:20 - that we want to add over there that
172:22 - should be equals to the typography so we
172:24 - can the typog graphy over there because
172:26 - we want to add a so what we can do we
172:29 - can add a login text over there as well
172:31 - we can use the import something that
172:33 - should be from we can have the material
172:35 - and I think we can just use the
172:37 - typography directly from this as well we
172:40 - can use the
172:42 - typography and then here we can again
172:44 - use the typography over there we can
172:47 - provide a Styles like we can give the
172:48 - variant that the H4 so with the variant
172:51 - you can provide like what variant do you
172:53 - need of the HTML so here we would be
172:55 - needing the H4 we would be having the
172:57 - text align that should be inside we can
173:00 - have the center over there so I think we
173:03 - can give the padding as well padding
173:04 - somewhere around two would be enough
173:07 - font weight that should be
173:09 - 600 and that's it I think we can give
173:11 - the color color is already defined
173:13 - that's it now what we can use so we can
173:16 - just move on we can just provide the
173:18 - login like this so if you save and if
173:21 - you move on so let's see how it looks if
173:23 - we move on so there you can see now we
173:25 - have the login and that's how it's going
173:26 - to work and now after this typography
173:28 - now we can move on and we can define an
173:30 - input tag so we'll be using a customized
173:33 - input tag for this application because
173:35 - if you move on to the mi.com so if you
173:38 - move on to the material UI so they
173:40 - provideed different type of input
173:41 - components you can move on to the
173:43 - material UI you you can just search for
173:45 - the text field so this is the text field
173:47 - API so you can see if you move on to the
173:49 - demos of the text field so they provide
173:52 - similar type of text Fields you can see
173:53 - you have the color of blue around that
173:56 - so it is based on the material design
173:58 - and now let's move on so we'll be using
174:00 - this type of text Fields as well but we
174:02 - need to just remove and we need to just
174:04 - modify the root classes of the text
174:06 - field so let's move on to the API
174:08 - section of the text field so let's move
174:10 - on to the API so you have your I think
174:14 - uh let's move on so here we have the
174:15 - text field so we want to move on to the
174:17 - base classes and here we want to just
174:20 - customize the base class so that we
174:22 - should have the white color as per the
174:24 - theme of our application so let's move
174:26 - on so I'm going to show you that how you
174:28 - can do that so here we need to move on
174:30 - to the components so inside the shared
174:32 - the text field would be shared so we can
174:34 - have the
174:35 - customized input so we have the customiz
174:38 - input over there dot we have the TSX
174:40 - over there and now let's define the
174:42 - component over there like this so we
174:44 - would be having a different props for
174:45 - that so we can have the props so that
174:47 - should be we can have the name so we can
174:49 - have the unique name for the text field
174:51 - unique name we can have the type over
174:53 - there so we can have the type like this
174:55 - that should be again inside the string
174:57 - and I think that's enough I think we can
174:59 - have the label as well yes we can have
175:01 - the label and that should be equals to
175:03 - we can again have the string like this
175:05 - so we have these props for the
175:07 - customized input so we can also have the
175:09 - props like this and that should be
175:11 - equals to the props and now here we want
175:13 - to return the text field from the
175:15 - material UI so we can use the text field
175:18 - we can just move on to the top we can
175:20 - have the import the text
175:22 - field uh from we can have from mui
175:25 - material like this we can have mu
175:27 - material SL we can have the text field
175:29 - like this so we can have the text field
175:31 - over there like this we have the text
175:33 - field and from there now what we can do
175:35 - so we can have the name so the name
175:38 - should be equals to what we can do so
175:41 - here we can just provide the props
175:44 - do we have the name over there we can
175:47 - provide here I think the label as well
175:49 - the label should be what we can do props
175:52 - do we have the label for this we can
175:54 - provide the type as well the type should
175:56 - be again we can have the props to we can
175:59 - have the type start we can have the type
176:01 - over there and now let's move on let's
176:03 - move on to the login component and let's
176:05 - just see that how it looks if we do not
176:06 - provide any style so we can have the
176:08 - customized input so we can use the
176:11 - customized input two times over there
176:13 - and let's provide some props as well so
176:16 - we can give the type as well so the
176:18 - first one should have the type of the
176:19 - email the name should be again we can
176:22 - have the email then we can have the
176:23 - password as well sorry we can have the
176:25 - label as well that should be again we
176:27 - can have the email over there like this
176:29 - and after that let's move on to the
176:30 - second the type should be we can have
176:32 - the
176:33 - password we can have the name that
176:35 - should be equals to the password over
176:36 - there we should have the same thing for
176:39 - the label as well so we can have the
176:41 - label that should be equals to we can
176:43 - have the password
176:44 - so if we save and if we move on so there
176:46 - you can see now we have the email then
176:48 - we have the password and that's how it's
176:50 - looking over there so if you move on
176:52 - again so you can see now if we remove
176:54 - all of these uh inputs over there so we
176:56 - have the email then we have the password
176:58 - so now we want to change that as well so
177:00 - let's move on and now we want to just
177:02 - what we need to do so we want to just
177:04 - inject some classes some styles to the
177:06 - root classes of the customize input so
177:09 - we can move on to the text field so what
177:11 - we can do so it is very simple with the
177:13 - material UI so first we can Define the
177:15 - props for the label so we can the input
177:18 - label props we can give some props that
177:21 - should be now what we can do we can have
177:22 - the style so I think the label already
177:25 - have the Styles like this so you can see
177:28 - if we move on to the password you can
177:30 - see now we have the blue color for that
177:32 - so we can give the style that should be
177:34 - we can have the color that should be I
177:36 - think we can give the white so now you
177:39 - can see now it has resolved the issue
177:40 - and that's how it's going to work and
177:42 - after that let's move on so you can see
177:44 - now we have some outlines as well so
177:46 - let's move on so now we can have the
177:48 - input props as well so we can have the
177:50 - input props and inside this now what we
177:52 - can do so we can again use this style
177:54 - and we can provide a customized style
177:56 - for that we can give the width of this
177:58 - that should be we can have the 400
178:00 - pixels or if you want to accept the
178:01 - width then you can use that as well so
178:04 - here we have the 400 pixels then we can
178:06 - move on we can the Bott radius that
178:08 - should be somewhere around I think 10
178:10 - would be enough for that then we can
178:11 - move on we can have the font size
178:15 - so that should be somewhere around 20
178:17 - would be enough for that and now the
178:19 - final thing that we want to do the color
178:20 - should be what we can do we can use the
178:22 - white so there you can see now we have
178:24 - these things over there and everything
178:25 - seems to be working fine over there and
178:27 - we can also provide some margin between
178:29 - them as well you can have the margin
178:30 - that should be to the normal so now you
178:32 - can see now we'll be having some margin
178:34 - between them and that's how it's going
178:35 - to work and now the final thing that we
178:37 - want to change is we want to change the
178:39 - outline so for changing the outline now
178:41 - we want to move on we can move on to the
178:43 - expect and there now what we can do so
178:46 - we can move on we can just see this that
178:49 - what exactly are the class names over
178:50 - there so let's just search with that
178:53 - over there so um so we would be having
178:57 - the label as well I think the label has
178:58 - already fixed that so there is this
179:02 - class name like mui outlined input not
179:05 - outline so what we can
179:08 - do
179:11 - uh so we have your
179:17 - mui input base rout
179:20 - mui so I think we are using the outline
179:23 - so what we can do so mu input base mu
179:26 - input form control input tag as this so
179:30 - you can see we have the mui outline
179:32 - input so we can copy this class name mui
179:35 - outlined
179:36 - input so we can copy and we can move on
179:40 - to our CSS file index. CSS we can paste
179:43 - this file over there now we have this
179:45 - class over there outlined input we have
179:48 - here the root class as well so we can
179:49 - move on we can have the root like this
179:52 - we have the root dot we can have the
179:55 - mui / the focus here so we have the
179:58 - focus over
180:00 - there so this is for the focus and let's
180:03 - move on so we have the notch outline as
180:05 - well so you can see you have the notch
180:07 - outline so let's move on let's copy that
180:10 - as well till here and M your input again
180:13 - we can provide the same style for this
180:15 - as well mui outlin input we have the
180:19 - notch outline so here now what we can do
180:21 - so we can the Border color so that
180:23 - should be we can have the white like
180:25 - this and it should be important so let's
180:28 - see how it looks uh you can see now we
180:30 - have the B color of the white and that's
180:32 - how it's going to look you can see now
180:33 - it's looking great over there now we
180:35 - have the email now we have the password
180:36 - and there you can see it's looking
180:39 - great and everything seems to be working
180:41 - perfectly fine so you can see how we can
180:43 - just customize the CSS classes of this
180:45 - as well and the final thing that we want
180:47 - to do inside the login is now we want to
180:48 - create a button so let's move on to the
180:50 - login here so let's create a new button
180:53 - over there and the button should also be
180:55 - imported from Material UI so which
180:58 - should be we can have the button and
181:00 - after that let's move on so here we can
181:02 - just render here the
181:04 - button so the button should be there we
181:06 - can provide the type for the button that
181:08 - should be we can have the submit then we
181:10 - can move on we can provide the SX prop
181:12 - SX prop should be having we can have the
181:14 - padding from the X that should be we can
181:16 - have the two padding from the Y that
181:18 - should be I think we can give the one
181:20 - over there we can provide the margin
181:22 - from the top that should be we can have
181:23 - the two over there we can provide the
181:26 - width should be same as the form 400
181:28 - pixels then we can move on WE the Bott
181:31 - radius so that should be somewhere
181:33 - around two enough two is enough for that
181:35 - we can have the background color as well
181:37 - so we can give a different background
181:38 - color we can have hash we can have Z we
181:42 - can have Tri f see as the background
181:44 - color as we used inside the navigation
181:46 - bar as well so after that I think we can
181:49 - put the hover class as well so for
181:51 - providing the hover you need to wrap it
181:53 - inside the strings then you can search
181:55 - for the hover and then you can provide
181:57 - the classes so you can have the BG color
181:59 - that should be we can have the white and
182:02 - you can have the foreground color color
182:05 - of the foreground that should be equals
182:06 - to we can have the black and here now
182:09 - what we can do so here we can provide
182:11 - the login like this so we can have the
182:13 - login do and that's how it's going to
182:15 - look so you can see now have the login
182:16 - and if you want to provide an icon as
182:18 - well after the end of the button it is
182:20 - very easy so you can just search for the
182:22 - react icons over there so here so you
182:26 - can have the login as well here you can
182:27 - have the login and there you can see
182:29 - there are a couple of login icons that
182:31 - you can use and here now what we'll be
182:33 - using so we can use this as well it is
182:36 - looking great and now let's move on to
182:38 - the top and we can import this as well
182:40 - we can import this icon from react icons
182:45 - over there slash we can have the io so
182:49 - here we can use this icon iOS login
182:52 - let's move on and inside the button
182:55 - props let's create another prop over
182:57 - there so that should be End Icon and
183:00 - that should be equals to this icon over
183:01 - there we have the
183:04 - io I login like this and that's how it's
183:07 - going to look so if you save and if you
183:09 - move on so there you can see now we have
183:10 - the login button and that's how it's
183:12 - going to work so you can see now it's
183:14 - looking great now we can move on so now
183:16 - we can move on and now we can handle the
183:18 - form data as well so let's move on so to
183:21 - handle the form data what you need to do
183:23 - so you can see you have provided the
183:25 - name as the uh you have provided the
183:27 - name and the password over there email
183:29 - and the password as the name now you can
183:31 - create a function and you can use the
183:32 - form data to get the values without
183:34 - using any state so you can have the
183:36 - const you can have
183:38 - your handle submit like this so that
183:41 - should be equals to you can have the
183:42 - function over there there and inside
183:44 - this you can get the event and to get
183:46 - the type of the event you can move on to
183:48 - the form you can have the on submit over
183:50 - there you can provide this so you can
183:53 - see you have the event like this you
183:56 - have the react. form event HTML event
183:59 - like this HTML form event so let's move
184:01 - on so let's just use that over there
184:04 - like you have the reactor form event and
184:06 - this is the type of the event then first
184:08 - thing that you want to do is you want to
184:09 - prevent the default Behavior so that the
184:11 - browser should not be refreshed
184:14 - and you can provide the classes over
184:15 - there like you can have the handle
184:16 - submit now after that now you can just
184:19 - create a new form data so you can have
184:21 - the con you the form data over there so
184:23 - that should be equals to a new form data
184:26 - so you have the form data and you need
184:27 - to provide the target of the form so you
184:29 - can have the event dot you have the
184:31 - current Target and that's how it's going
184:33 - to work and after that you can get all
184:35 - of the values for the form as well so
184:36 - you can get the cons email like this so
184:39 - that should be you can have the form
184:41 - data dot you can have the get that
184:43 - should be equals to we can have the
184:45 - email because you have provided the name
184:47 - as the email so it works on the name
184:49 - basis and same for the password as well
184:52 - so you have the
184:54 - password and that should be equals to
184:56 - form data doget that should be equals to
184:59 - the password now you can log all of
185:00 - these values as well you can log the
185:02 - email you can log the password as well
185:05 - and that's how it's going to work so if
185:07 - we say if we move on if we move on to
185:09 - the inspect panel if we move on to the
185:11 - inspect if we move on to the console so
185:13 - there you can see if we provide the
185:15 - Styles over there if you click on the
185:16 - login then you can see now we got the
185:18 - Styles over there we have the anadani
185:20 - test.com then we have the password and
185:22 - everything seems to be working perfectly
185:24 - fine so now we have the data of the form
185:26 - and everything seems to be working
185:28 - perfectly fine and now the final thing
185:30 - that we want to do is now we want to
185:31 - login so after we click on the login now
185:34 - we want to make the API request to the
185:36 - back end so for making the API requests
185:38 - we need a package so what we can do so
185:41 - we can move on to front end once again
185:42 - we can install a package which is the
185:44 - exos so exos is used to send the API
185:47 - request it is used for the communication
185:49 - with the back end and the front end so
185:51 - let's install the exos and with the help
185:53 - of exos we'll be just um exchanging the
185:55 - API tokens with the back end and with
185:57 - the front end so let's move on so here
186:00 - we have the main. TSX file over there
186:03 - and here now we can set some default
186:04 - properties of the xos as well so we can
186:07 - use the xos dot we can have the defaults
186:09 - dot we can have the base URL so we can
186:12 - Prov the base URL for this as well so
186:14 - what's the base URL for the back end we
186:15 - can have the HTTP we can have the Local
186:18 - Host the port of we can have the 5,000
186:20 - SL we can have the API SL we can have
186:22 - the V1 so that's the base URL and after
186:25 - that we need to set the base
186:26 - configurations as well so we can have
186:28 - the exos dot we can have the defaults
186:30 - dot we can have the width credentials so
186:32 - if you use the width credentials so it
186:34 - will allow setting the cookies directly
186:35 - from the back end and just exchanging
186:37 - the cookies with the back end so with
186:39 - the help of with credentials it will
186:41 - help you to exchange the cookies so with
186:43 - credentials that should be equals to the
186:44 - true so with every request this would be
186:47 - attached and now let's move on let's
186:49 - move on into the source folder let's
186:51 - create a new file for the helpers so we
186:53 - can have the helpers over there like
186:54 - this we can have the
186:57 - helpers and here we can create a new
186:59 - file that should be at the
187:01 - API communicator. TS so from this file
187:05 - we'll be just defining some functions
187:07 - that can be used to work with the API so
187:09 - let's move on let's just have the first
187:11 - function so what we can do so we we can
187:13 - have the ASN C of function so we can
187:15 - have the cons we can have the login user
187:18 - so we can have the user login like this
187:20 - so from here now we can just Define the
187:22 - functions which can be used for the
187:23 - communication so let's move on so we can
187:25 - have the export course we can have the
187:27 - login user like this login
187:29 - user and that should be equals to we can
187:31 - have the asynchronous arrow function
187:33 - over there we have the async arrow
187:34 - function and the param are required like
187:36 - we can have the email the type should be
187:38 - we can have the
187:39 - string password then we can move on so
187:43 - we can have the cons response so that
187:45 - should be equals to we can have the
187:46 - await then we can use the xos package so
187:49 - we can move on to the top so we can
187:51 - import the xcos as
187:53 - well we can have the xcos over
187:57 - there and it should be imported directly
187:59 - from the xos package so we can have the
188:02 - xos like this so await it should be
188:04 - equals to xos xos start we can have the
188:07 - post as well so that's a post request
188:09 - and the URL that we want to Define
188:11 - should be/ user SL we can have the login
188:14 - over there like this so that would be
188:15 - our URL and after that now what do we
188:17 - want to do is the next step so that's a
188:19 - post request so inside the second
188:21 - parameter now we want to provide some
188:22 - data as well along with it so we can
188:24 - send some data so we need to send the
188:26 - email then we need to send the password
188:29 - as well so these are the data that we
188:30 - want to provide and now let's move on so
188:33 - after we get the response then what we
188:35 - can do so we can move on we can verify
188:38 - if the response dot we can have
188:40 - response. status is not equals to we
188:43 - have the 200 it means if it is not okay
188:46 - then what we can do so we can return or
188:48 - we can have the throw new error and we
188:50 - can send the error message suppose that
188:52 - could be we can have the unable to login
188:55 - so that would be error message but if
188:57 - the response. status is the 20 it means
189:00 - if everything is successful then we can
189:02 - grab the data con data and that should
189:05 - be uh equals to that should be equals to
189:07 - what do we need to do so it should be
189:09 - the response do we can have the data so
189:11 - it should be the weight because that's a
189:13 - promise so it should be the response.
189:15 - data and after that the final thing that
189:17 - we want to do is we want to return the
189:19 - data over there and that's how it's
189:21 - going to work and now let's move on to I
189:24 - think inside the O context over there
189:25 - inside the Au context so we have the
189:27 - login function so here we need to use
189:29 - this function as well so what we can do
189:32 - so we can have the return or what we can
189:34 - do so we can have the cons we can have
189:35 - the data so that should be equals to
189:38 - await and await it should be equals to
189:40 - we can have the login user like this we
189:42 - have the log Lo user and from this we
189:44 - would be having the data so login user
189:46 - should be equals to we can have the
189:48 - email then we can send the same password
189:50 - over there and after that we will get
189:52 - the data so we can have verification
189:54 - check if we have the data then only we
189:56 - want to do something then what we want
189:58 - to do then we can move on so we can have
190:01 - the set user so that should be equals to
190:04 - what do we need to do so user should
190:06 - have the email that should be data do we
190:08 - can have the email and the user would be
190:10 - having the name as well so we can have
190:13 - the data do you can have the name like
190:15 - this so we will be having the set user
190:18 - like this and then we will be having the
190:20 - set logged in property as well so we
190:23 - have the set is logged in and that
190:25 - should be equals to the true so that's
190:27 - how it's going to work and after that
190:29 - you can say everything seems to be
190:30 - working perfectly fine and after that
190:33 - now we can move on to the main file
190:34 - which is a form so let's move on to the
190:36 - page so what we can do so we can make
190:39 - this function as an asynchronous
190:41 - function and after we get the data then
190:44 - what we can do so you can see uh if you
190:46 - remember we have installed a library as
190:48 - well which is uh toast bar so we can
190:51 - show the toast notifications so let's
190:53 - move on so again we need to move on to
190:54 - the main. TSX so we can import something
190:57 - from that Library so we can import
190:59 - something from that should be equal to
191:02 - react H toast and we can import the
191:05 - toaster so we have here the toaster so
191:08 - toaster should be there at the root of
191:10 - your file so here we have the root so it
191:11 - should be there at the top hierarchy of
191:13 - your file so that it can add some CSS
191:15 - and all of the things required to make
191:17 - the toast so let's move on so after the
191:20 - Au provider or after the theme provider
191:22 - then we can use the toast bar over there
191:24 - like this so here we have the toas like
191:25 - this and if you want to style some
191:27 - positions as well you can use the
191:29 - position so you can have the top right
191:31 - you uh you can have the top Center like
191:33 - this so I think we can use the top right
191:35 - here and everything should work
191:37 - perfectly fine and now let's move on so
191:39 - now let's move on to the login and let's
191:41 - just use a function of the toast so we
191:43 - can import something that should be
191:45 - equals to from it should be equals to
191:47 - react hot toast and now what we can do
191:50 - so we can have the try catch block so
191:53 - inside the try now what we can do so we
191:55 - can first have the const or what we can
191:58 - do so we can directly use the weight and
192:01 - here we need to use the context here so
192:03 - we can have the con we can have the O so
192:06 - that should be the use Au over there now
192:08 - let's use the context we can have the O
192:11 - DOT we can have the login so we can have
192:13 - the au. login after that we can provide
192:15 - the email we can provide the password as
192:17 - well we have the au. login email and the
192:19 - password and that's how it's going to
192:22 - work and uh I think there some type
192:25 - errors like that could be null as well
192:27 - so yeah this can be null so what we can
192:30 - do so we can have the S we can have the
192:32 - string so we can just skip the type
192:34 - checking we can Pro the S string over
192:36 - there and after that it will be logged
192:38 - in so let's use the toast over there so
192:40 - you need to import this thing over there
192:42 - you you have the toast so I think you
192:46 - need to import the toast directly from
192:48 - the reactor toast so you have the toast
192:50 - so toast is a function which creates the
192:52 - toast so you can have the toast do you
192:54 - have the loading so first we need to
192:55 - show the loading state so we can have
192:58 - the U we can have the signing
193:01 - in like this so we can have the signing
193:04 - in and after that let's move on we can
193:06 - provide the second argument that's the
193:08 - ID so we want to provide only one toast
193:10 - bar inside this one component inside
193:12 - this one page so we need to provide a ID
193:15 - so ID should be same inside all of the
193:17 - toast that can be for the login as well
193:19 - that can be for the success as well and
193:21 - for the error as well so it should have
193:23 - the ID so we can have the ID that should
193:25 - be equals to the one like this or if you
193:27 - want to change the ID that should be for
193:29 - we can have the login over there like
193:30 - this so we have the toast. loing after
193:33 - we are successfully logged in then we
193:35 - can again use a toast and this time it
193:37 - should be the success we can have the
193:40 - signed and we can have the successfully
193:44 - like this and we can have the same ID
193:46 - and then if we get any error then what
193:48 - we can do so we can have the toast to we
193:50 - can have the error we can have the sign
193:53 - in again we can have the signing and we
193:55 - can have the
193:57 - failed so that's how it's going to work
193:59 - and we can also log the error as well so
194:01 - we can have log the error over there
194:04 - like this so that's how it's going to
194:06 - work so now we have these things and now
194:09 - everything should work perfectly fine
194:11 - but now we want to move on to the back
194:12 - end as well so if you move on to the
194:14 - back end so I want to show you one thing
194:16 - if you move on to the users controllers
194:18 - you can see you are just sending the ID
194:20 - over there inside the response you are
194:22 - just sending the ID so instead of the ID
194:25 - now what you can do you can just move on
194:27 - so you can just provide the name of the
194:29 - user that should be you can have the
194:31 - user dot you can have the name you can
194:33 - send the email as well so that should be
194:35 - we can have the user do we can have the
194:37 - email so that's how it's going to work
194:39 - and same thing should be there with the
194:42 - sign up as well so we can move on to the
194:44 - sign up that should be the same thing
194:46 - over there like this and now let's move
194:49 - on and let's just open the development
194:51 - server of the back end as well so here
194:53 - inside this terminal let's move on to
194:55 - back end so when we can have the npm Run
194:59 - we can have the dev so now let's move on
195:01 - so let's see what happens
195:06 - now
195:09 - so so you can see Server open and
195:11 - connected to datab okay so let's move on
195:13 - so now we want to provide the
195:15 - credentials so what credentials did we
195:17 - use so we have used the James at the
195:20 - test.com we can use the password 1 2 3 4
195:24 - 5 6 so let's see what happens if we move
195:26 - on to the network so if we just click on
195:28 - the login so let's see what happens so
195:30 - there you can see now we are getting an
195:31 - error which is the course error you can
195:33 - see it is uh expected because one server
195:37 - because now you are in the server of
195:38 - 5173 and the back end is running on this
195:41 - server of 5,000
195:43 - so one server so if one server make the
195:45 - request to another server so then that
195:48 - Server doesn't allow any different
195:50 - server to make the request so if the
195:52 - 5173 request some data or send some
195:55 - requests to the 5,000 so 5,000 would not
195:58 - allow the server to make an entry or to
196:01 - do something with their server so that's
196:04 - why we have the course error inside the
196:05 - browsers and it's the security policy
196:08 - that every browser has followed so now
196:10 - we want to Whit list This Server we want
196:13 - to Whit list around server around domain
196:15 - with that server so that we should
196:17 - interact with that API so let's move on
196:20 - so we can move on to the appts over
196:22 - there and there you can see we have
196:24 - already added a package which is a
196:26 - course you can see this is a course
196:28 - which will bypass this error so let's
196:30 - move on to I think inside the app. TS so
196:34 - what we can do so inside the first
196:36 - middleware let's just use the course
196:37 - over there we can have the app. use that
196:39 - should be we can have the course you can
196:41 - import the the course as well you can
196:43 - have the import we can have the course
196:45 - that should be equals to from it should
196:47 - be equals to the course like this so
196:50 - that's how it's going to work and after
196:51 - that you need to use the course and here
196:54 - we need to provide some options as well
196:56 - because here we are using a couple of
196:57 - security attributes as well so now what
197:00 - do we want to do so here we want to use
197:02 - the origin first so what we can do so we
197:04 - can have the origin we can provide the
197:06 - origin and the origin can be ar as well
197:08 - so we can provide the string so that
197:09 - should be we can have the HTTP Local
197:12 - Host
197:13 - the port of we can have the
197:15 - 5173 so this is where our react
197:17 - application is hosted now and then
197:19 - inside the second parameter we can
197:21 - provide the credentials because here we
197:23 - are exchanging the security attributes
197:25 - like the HTTP only cookies so we want to
197:27 - set the credentials that should be
197:29 - equals to we can have the true so with
197:31 - the help of the Cod now we can access
197:33 - This Server only from this domain right
197:37 - so let's just test it out once again so
197:39 - let's move on let's just click on the
197:40 - login again let's just remove everything
197:43 - remove the console window as well so
197:45 - let's see what happens if we click on
197:46 - the login so there you can see now we
197:48 - have the status of 200 you can see now
197:50 - we solve the message as well and another
197:52 - thing that you can see now we are into
197:54 - the go to chat window and we are into
197:56 - the log out as well so everything seems
197:58 - to be working perfectly fine over there
198:00 - you can say this was okay we have the
198:02 - 200 of the okay request you can see we
198:04 - are having the cookies as well so if I
198:06 - want to show you the cookies you can
198:08 - move on to the application you can move
198:10 - on to the cookies and from there you can
198:11 - see now you have the cookie you have the
198:13 - Au token over there and there you can
198:15 - see you have the domain of the Local
198:16 - Host you have the path of the slash you
198:18 - have the expires property as well and
198:20 - there you can see you have the size and
198:22 - there you can see you have the HTTP only
198:24 - flag as well you have the HTTP only flag
198:27 - and that's how it's going to work and
198:29 - after that let's move on and let's just
198:31 - try to get the cookie you have the
198:32 - document. cookie so let's see what
198:35 - happens so you can see document. cookie
198:37 - is empty string because it cannot be
198:39 - accessed by the JavaScript but there's
198:42 - one thing if you just remove the HTTP
198:43 - only attribute double click on that and
198:46 - let's just remove that and there you can
198:47 - see if you run the
198:49 - document or you can have the
198:51 - document of the cookie then you can see
198:54 - now you can get the cookie so you can
198:56 - see that's not secure so that's why we
198:58 - use the HTTP only cookies like this so
199:00 - that it cannot be accessed by the
199:02 - browser so everything seems to be
199:04 - working perfectly fine so let's close
199:06 - all of that and now you can see after
199:08 - completing the login functionality now
199:10 - you can see inside the header as well it
199:12 - has been updated now we can go to chat
199:14 - and we have the log out functionality as
199:16 - well and now let's complete the
199:18 - authentication workflow and let's just
199:20 - quickly start the chat GPD apis and now
199:23 - it seems to be working fine and after
199:26 - that now again we want to move on to the
199:27 - context of the authentication and if you
199:30 - remember that we have created an effect
199:32 - code there it means once the user
199:34 - refreshes or once the user opens this
199:36 - application so if the user has the
199:39 - cookies and if they are valid then we
199:41 - don't want the user user to be logged in
199:42 - once again so let's move on so here now
199:45 - what do we want to do so here we want to
199:47 - make another request inside the backend
199:50 - in which we can verify the token of the
199:51 - user and if the verification token is
199:53 - successful and if the token is verified
199:56 - then the user doesn't need to login
199:58 - again so let's move on so what do we
200:01 - want to do so we can move on to the back
200:02 - end and we can move on to the controller
200:05 - sa so inside the users controller sorry
200:07 - we can move on to the user routes over
200:08 - there and here now what we can do so we
200:11 - can create another route that should be
200:13 - a post request or that should be a get
200:14 - request over there and that should be we
200:16 - can have the login or we can have the O
200:19 - status like this we have the O we can
200:21 - have the status over there we have the O
200:23 - status and here we do not need any data
200:25 - because here we won't be sending
200:27 - anything so here we would require a
200:29 - function so here we require a middle we
200:31 - function which will be used to verify
200:33 - the token if the token verification
200:35 - would be successful then we'll again
200:37 - move on to the different middleware
200:39 - function to just validate the record and
200:41 - to send back the the credentials so
200:43 - let's move on and it would be very very
200:45 - easy so let's move on to the utils once
200:47 - again so inside the utils we have the
200:49 - token manager so here if we can create a
200:51 - token we can again create a new function
200:54 - in which we can verify the token of the
200:56 - user so let's move on so we can have the
200:59 - export cost we can have the
201:03 - verify we can have the token like
201:06 - this we have the verify token and that
201:08 - should be a n synchronous Arrow function
201:11 - and this would be a middle W because now
201:13 - we would be using the verify token here
201:15 - inside this routes inside this of status
201:18 - so let's move on so we can have the
201:20 - verified token like this so it should be
201:22 - used here so that's why it would be
201:24 - requiring a couple of parameters as well
201:26 - directly from the express it could be
201:28 - the request that could be the request
201:30 - object we have the express it should be
201:33 - the response that should be again we can
201:35 - have the response over there directly
201:37 - from the express once again
201:39 - response uh it should be the response
201:42 - like this and it should be the next
201:43 - function as well so that we can move on
201:45 - to the next function so it should be the
201:48 - response it should be the next to move
201:51 - on to the next function over there like
201:59 - this and now after that now what do we
202:01 - want to do so now we would be sending
202:03 - some cookies along with the request so
202:06 - we would be sending some cookies along
202:07 - with the request so cookies would be
202:09 - stored inside the signed cookies so we
202:11 - can the cons we can get the token like
202:13 - this so that should be equals to what we
202:15 - can use so we can have the request dot
202:18 - we can have this signed cookies because
202:20 - here we are signing the cookies and we
202:21 - need to provide the variable name over
202:23 - there the signed cookies so signed
202:25 - cookies is an object which can contain
202:27 - all of the cookies data and again you
202:29 - can move on to application so you can
202:31 - move on to the application you can see
202:33 - here we are storing the O token so we
202:35 - want the O token cie over there so what
202:37 - we can use over there so we can move on
202:40 - we can use the template also over there
202:42 - and that should be we can have the
202:43 - cookie name like this so we already have
202:45 - a parameter so we can get the cookie
202:47 - name so now let's move on and let's just
202:49 - log the request over there let's just
202:51 - log the token but before moving on into
202:54 - this request so now we should create a
202:56 - new request inside the front end as well
202:59 - so let's move on so inside the Au
203:00 - context or we can move on to the API
203:03 - Communicator let's create another
203:04 - request over there it would be a
203:06 - different request it could be we can
203:08 - have the check Au we can have the status
203:10 - like this it could be this request here
203:12 - we do not need any parameters so this
203:15 - would be a get request and it should be
203:17 - user SL we have
203:19 - the we can have the O status over so it
203:21 - has the O status over there and after
203:23 - that now let's move on we don't need to
203:25 - send any data because it's not required
203:27 - who and if the response. status not
203:29 - equals to 200 then we can have the
203:31 - enable to what we can do we can have
203:33 - authenticate like this unable to
203:35 - authenticate and if everything is
203:37 - successful then we'll be sending the
203:39 - same data along with the request so
203:41 - let's move on to the context as well so
203:43 - inside the context now what we can do so
203:45 - here we have the use effect code and
203:47 - inside this what we can do we can Define
203:49 - another function that could be a SN
203:51 - function that could be we can have the
203:52 - check
203:54 - status and inside this we won't be
203:56 - requiring any parameter over there let's
203:58 - remove that and here what we can do so
204:00 - we can have the cons we can have the
204:02 - data that should be equals to a weight
204:04 - and that should be equals to we can have
204:07 - the check out status over there like
204:09 - this check out status and now we want to
204:12 - follow the same steps over there now we
204:13 - want to follow the same steps like this
204:15 - same steps like this let's move on if
204:17 - you have the data then do this or else
204:20 - what we can do so else it would be same
204:22 - like what we can do so we can provide
204:24 - these properties over there and we can
204:26 - set it over null so we can set as the
204:29 - null over there so I think it's not
204:32 - required over there because it would be
204:34 - run on because it will run only one time
204:36 - so it's not required over there if you
204:38 - have the data than this then we want to
204:39 - do this thing and if we have the data
204:42 - and everything seems to be working
204:43 - perfectly fine so now we have this
204:45 - logged in set user two and everything
204:47 - should work perfectly fine so now again
204:51 - we can move back to the users or we can
204:53 - move back to our token controllers so
204:55 - now let's make a new request so if we
204:57 - just refresh the page so let's see what
205:00 - happens if the request goes or not if we
205:02 - refresh the page
205:05 - so let's see what
205:07 - happens so no the request was not
205:10 - processed so let's see what has happened
205:13 - over there let's move on to the homepage
205:15 - as well and let's remove that let's
205:18 - click on the refresh once again let's
205:20 - have I think we can have the fetch
205:24 - xhr so yes yes yes there was an error
205:27 - because we haven't called this function
205:29 - so now we need to call this function as
205:30 - well so we can have the check status
205:32 - over there we have the check status over
205:35 - there like this we have the check status
205:37 - and let's see what happens if we move on
205:39 - so there you can see now instantly we
205:40 - got the token right right so now there
205:42 - you can see instantly we got the token
205:44 - and that's how it's going to work so you
205:45 - can see now everything seems to be
205:47 - working perfectly fine and now let's
205:49 - move on to the Token manager so now we
205:51 - have the token and now the last thing
205:53 - that we want to do here is now we want
205:55 - to verify the token so now we want to
205:57 - verify the token so we can verify the
205:59 - token by just checking that if the token
206:02 - has the data if the token is valid then
206:04 - we can move on to the next metalware but
206:07 - if the token is not valid then what we
206:09 - can do so then final thing that we we
206:11 - can do is now we can just stop this
206:13 - request we can avoid the request and we
206:15 - can send the return message and now
206:17 - let's see that how we can just verify
206:19 - the token of the user so we can have the
206:21 - return we can have the new promise so we
206:23 - can return a new promise uh so here we
206:25 - are using the promise and it's a void
206:28 - because we want to verify some
206:29 - parameters like we can resolve the
206:31 - promise or we can reject the promise as
206:34 - well we can have the reject like this so
206:36 - let's move on so we have the resolve and
206:38 - the reject and after that now what do we
206:40 - want to do so here we can also return
206:42 - one thing we can return the JWT do we
206:45 - can have the verify so JWT has a
206:48 - function of the verify which can verify
206:49 - the token so we need to provide the
206:51 - token string over there so we can have
206:53 - the token like this and then the second
206:55 - thing that we want to do is now we want
206:57 - to provide the secret key so we can
206:59 - provide the process. environment. JWT
207:02 - secret once again so we have the secret
207:04 - key and after that there is a third
207:06 - parameter as well which is a call back
207:08 - in which we will get two parameters
207:10 - first there would be the error if we get
207:12 - any error then it would be stored inside
207:14 - this error and if everything is
207:16 - successful then we would be getting the
207:18 - success inside that it would be the
207:20 - success so now let's move on here so now
207:22 - let's just verify once again so now we
207:25 - can verify just simple thing like if
207:27 - there is an error it means now there was
207:29 - an error with the request then what we
207:31 - can do so we can have the reject we can
207:34 - reject the promise we can have the error
207:36 - dot we have the message as well but I
207:39 - think the promise is void so we don't
207:40 - need the message as as well but it's up
207:42 - to you then we can move on we can have
207:44 - the return response or we can have the
207:46 - status that should be 41 which is
207:49 - unauthorized then we can move on we can
207:51 - have the Json over there we can have the
207:54 - message over there like this or we can
207:55 - have the
207:57 - Json we can have the message like
208:00 - this we can have the JWT or we can have
208:03 - the token expired we have the token
208:07 - expired like this if we get an error but
208:09 - if the error is not there if if we are
208:11 - successful then we can provide the else
208:14 - case insert the else now what we can do
208:16 - so we can just so what we can do here so
208:19 - it would be very simple so we can set
208:21 - some parameters in this function we can
208:23 - set some local parameters for this
208:24 - request in this function and then we can
208:26 - use those parameters inside the next
208:28 - request so it is possible with the
208:30 - express so what we will do so we'll send
208:33 - some local variables over there so first
208:35 - let's have the lock statement we can
208:37 - have the token
208:40 - verification
208:42 - successful we can have the successful
208:44 - over there like this so
208:48 - verification like this token
208:49 - verification successful and then now
208:51 - what we can do so after the lock then we
208:54 - can move on so then we can just have the
208:56 - resolve so we need to resolve the
208:57 - promise as well we can resolve the
208:59 - promise and then we can move on then we
209:01 - can have the response so from this
209:04 - middle web so this middle W can set some
209:06 - local variables from the response and
209:08 - then we can use them from the next
209:10 - middle wave soch technically it is
209:11 - possible with the express because you
209:13 - are setting the local variables directly
209:15 - from this function and then you can use
209:17 - that inside next middleware as well so
209:19 - now we can have the response dot we can
209:21 - have the locals dot we can send some
209:23 - data like we can send the JWT data like
209:26 - this and that should be equals to we can
209:29 - have the success so all of the data
209:30 - should be there inside the success so we
209:32 - will be setting that and then what we
209:34 - can do so we can just return to next
209:37 - middle wave so that was the last thing
209:39 - that now we want to return to to the
209:41 - next midal W so you can say this was the
209:43 - final code for this and we want to use
209:45 - another thing over there like if we
209:47 - don't have the token like this if we
209:49 - don't have the token and if the token
209:51 - dot we have the trim like this we can
209:53 - have the token do trim is equal equals
209:55 - to we can have the empty string so then
209:57 - what do we want to do so now we can just
209:59 - move on we can just return the response
210:01 - to we can have the status that should be
210:03 - again we can have the 41 once again we
210:06 - can send the Json message once again we
210:08 - can send the message over there then we
210:11 - can have the
210:12 - token
210:14 - not received like this so we can have
210:16 - the token not received so that's how
210:18 - it's going to work and if we have the
210:19 - token then only we'll be having this
210:21 - return statement so now let's move on so
210:24 - here you can see it working great it's
210:26 - working fine now let's move on to the
210:28 - user routes once again so we have the
210:30 - user routes and here what we can do we
210:33 - can Define another middleware function
210:34 - in which we can check the authentication
210:36 - status we can have verify something so
210:40 - we can have the
210:46 - verify we can have the verify user like
210:49 - this so we can have this function over
210:50 - there and now inside this function now
210:53 - what do we want to do so here we would
210:54 - be getting some local variables as well
210:56 - right because we have seted some local
210:58 - variables so they can be accessible over
211:00 - here now inside this now what we can do
211:03 - I think so first we can verify if the
211:05 - token was malfunctioned or not so let's
211:08 - move on so inste the try now what we can
211:10 - do so so first we can try and get the
211:12 - user so we can remove this we can have
211:14 - the await user. find one so now we can
211:17 - find the user email so email should be
211:20 - equals to we can have the response do we
211:22 - can have the locals JWT data like this
211:25 - do we can have the email so we can find
211:27 - the user or what we can do so we can
211:29 - have the find by ID as well because we
211:31 - are already encrypting the ID as well so
211:34 - we can have the find by
211:36 - ID and that should be response. locals.
211:39 - jwd data that should be equals to the ID
211:42 - like this so that should be the ID and
211:44 - after that we can check if we don't have
211:45 - the user then we can send this message
211:47 - as well like the user not register or
211:53 - token or we can have the token wall
211:55 - function and after that if we have the
211:57 - user then we can verify like if the
212:01 - user do we can have the idore ID do2
212:05 - string if the ID is equals to the same
212:08 - of the idid that we are getting inside
212:09 - the response to we have the locals JWT
212:12 - data like this do we have the ID then
212:15 - only we want to move ahead so what we
212:17 - can do here so we can just move on so
212:20 - then if we are getting this ID over
212:22 - there so I think we can just use here
212:24 - this like this if it is not okay if it
212:27 - is not matching then what we can do we
212:29 - can send the response. status 401 then
212:32 - we can send the token and user like we
212:36 - can send here
212:39 - permissions didn't match
212:41 - match like this so we can the
212:43 - permissions didn't match and you can
212:45 - also store these strings inside a
212:47 - separate variable as well and it's also
212:49 - good option but here let's just complete
212:51 - this application so now we have two
212:53 - string and if everything works fine then
212:55 - now what we can do so if we pass this
212:57 - validation check if we are coming here
212:59 - it means everything is working fine then
213:01 - what we can do so then you can see now
213:04 - the token should not be created again so
213:06 - we can remove the token creation code
213:07 - over there let's remove that and let's
213:10 - move on so now we can just send the
213:12 - details to the user so now let's see
213:15 - what happens so if we move on to the
213:17 - application if we refresh so now we
213:20 - should be completing all of that if we
213:22 - refresh if we move on to the network so
213:24 - now we are getting the 401 inside the
213:26 - preview we are getting the user not
213:29 - registered so that's okay let's just
213:31 - check but you can see the token
213:33 - verification was successful let's see
213:35 - that what exactly is
213:36 - happening so now here what we can do so
213:39 - we can lock something we can log the
213:42 - user dot we can have the underscore
213:45 - ID dot we have the two string and then
213:49 - we can just log the response to we can
213:52 - have the locals do JWT data like this do
213:56 - we can have the ID so let's see what
213:58 - happens so let's see what happens here
214:01 - inside this lock statement so if we
214:03 - again refresh this you can
214:06 - see uh what happened with that user not
214:10 - registered
214:15 - so that was the error because you can
214:17 - see now we are running the user login so
214:19 - now let's move on and that should be
214:20 - equals to what was the function so we
214:23 - can have the verify I think we can have
214:26 - the verify like this so we can have the
214:28 - verify user like this so let's see what
214:30 - happens now so that was the error so
214:33 - let's see what happens this time so
214:35 - let's move on so if we again refresh you
214:37 - can see now we are getting the 200 and
214:39 - there you can see now we are getting the
214:40 - details as well so everything seems to
214:42 - be working fine you can see now it is
214:43 - working great you can see now the IDS
214:46 - are same you can see everything seems to
214:47 - be working perfectly fine you can see
214:50 - now we are coming ahead you can see
214:52 - everything seems to be working fine and
214:54 - that's how it's going to
214:56 - work so you can see now it's working
214:59 - great over there so you can see
215:01 - congratulations on completing the secure
215:02 - back end as well so now let's move on to
215:05 - the Token manager and remove this logs
215:07 - as well so just remove these logs over
215:09 - there because blocks should not be there
215:11 - inside the production so that's how it's
215:14 - going to work so now you can see now you
215:16 - completed that and everything seems to
215:17 - be working perfectly fine and now if we
215:20 - refresh the page you can see instantly
215:22 - we'll be moving on to go to chat and now
215:25 - finally now let's work with the open and
215:27 - let's create the chat gbt type
215:29 - application this
215:31 - time so the authentication seems to be
215:33 - working perfectly fine and now we want
215:35 - to move on and now we want to build the
215:37 - chat functionality for this application
215:40 - so before that I want to move on to the
215:42 - open a platform so now you want to move
215:44 - on to this and there you can see you
215:46 - need to click on the GPD so now we'll be
215:48 - using the GPT models for it so there are
215:50 - a couple of models for the GPT GPT 4 GPT
215:53 - 3.5 turbo so here what we'll be using so
215:56 - we'll be using the GPT 3.5 turbo and
215:58 - there you can see how the chat
216:00 - completions API work with the open AI
216:02 - you can see this can be a response you
216:04 - have the Open chat completion. create
216:07 - and there you can see that's how it
216:08 - works so first there would be a role uh
216:11 - you can define a role of the system that
216:13 - you are this this you can Define the
216:14 - name of your model you can Define
216:16 - anything and then after that you have
216:18 - the role so first the user so first the
216:20 - role would be the user and user will ask
216:22 - a question and we have a question inside
216:25 - the content property content is actually
216:27 - the message so we have the content like
216:29 - who won the World Series in 2020 then
216:31 - you have the assistant that the Los
216:33 - Angels and dash dash dash and he has
216:36 - come up with an answer and then again
216:38 - you have the role like this you have the
216:40 - user and then you have the content so
216:43 - that's how the API works with that and
216:44 - you need to store all of these messages
216:46 - to keep the context of the conversation
216:49 - the context means suppose you ask a
216:52 - question like who won the World Series
216:53 - in 2020 and there you can see it has
216:55 - come up with an answer and now you ask
216:58 - that where it was played so you need to
217:00 - store all of these conversations so that
217:02 - the open AI knows that on what topic you
217:05 - are discussing with me something so
217:08 - that's how it works so you need to just
217:10 - store all of these messages so that the
217:12 - open AI sees that what exactly the user
217:15 - is talking about and then give that
217:16 - answer accordingly so now let's move on
217:19 - and we have already created the
217:20 - collection of the user and inside that
217:22 - we have the chats as well so now let's
217:24 - work on them so now I want to move on so
217:27 - we can move on into I think first we can
217:30 - move on into the back end so inside the
217:31 - back end we can move on so here you can
217:34 - see inside if we move on to the
217:37 - controllers so now we should move on to
217:40 - the routes and there you can see now we
217:41 - have the chat routes as well now let's
217:43 - create another route as well for the
217:45 - chats so that it should work accordingly
217:48 - so here now what do we want to do so
217:50 - here there would be a new route for the
217:52 - chat so we can have the chat routes
217:54 - start we can have the post so that would
217:56 - be a post request in which now what do
217:58 - we want to do so we'll be having a chat
218:00 - SL we can have the new like this so we
218:02 - can have the chat SL new and after that
218:05 - this would only work so chat routes is a
218:08 - protected API so we can add that as well
218:12 - and only the authenticated and
218:13 - authorized users can access that so what
218:16 - we can do so after we move on to/ new
218:19 - API chat slne then we can move on so we
218:22 - can have the verified token so we can
218:24 - have the verified token so that we
218:26 - should uh verify the token of the user
218:28 - and then only we want to move ahead and
218:30 - then what we can do so we can define a
218:32 - controller function from which we can
218:34 - generate the chat completion for the
218:36 - user so let's move on to the controllers
218:38 - let's create a new controller that we
218:40 - can have
218:41 - chats controllers like that chat
218:44 - controllers do we can have the TS and
218:46 - after that let's define the controller
218:48 - function for that so we can have the
218:50 - expert cost we can have the uh we can
218:53 - have the
218:54 - generate chat we can have the
218:57 - completion so that would be equals to we
218:59 - can have the asynchronous errow function
219:01 - over there and it would be same like the
219:03 - users controller so the parameters would
219:06 - be same like the request response and
219:08 - the next it should be same
219:11 - so we have the request it should be
219:13 - imported from the express response
219:16 - should be imported from Express the next
219:18 - function is there in the express and
219:20 - that's how it's going to work and after
219:21 - that now what do we want to do so first
219:24 - now we want to configure the open a so
219:27 - for that we want to use the open apis so
219:29 - first we want to configure the open API
219:31 - with that and for configuration let's
219:34 - move on so we can define a function as
219:36 - well inside the utils or we can have the
219:38 - config we can Define the opening
219:41 - i p config dots and here we can Define
219:44 - the function we can have the
219:46 - function configure we can
219:49 - reopen hey I like this so we have this
219:51 - function over there so after that now
219:54 - what do we want to do so here we can
219:56 - have the cons we can have the config
219:57 - like that so that should be equals to we
220:00 - can have a new configuration over there
220:02 - a new configuration like this and that
220:04 - should be we can have the object over
220:06 - there and now we want to provide a
220:07 - couple of keys like first we want to
220:09 - provide the API key for that API key
220:11 - should be equals to begin of the process
220:13 - do begin of the environment dot you can
220:15 - move on to the environment as well you
220:17 - can see here we have here the API Keys
220:19 - as well open I secret so let's just use
220:22 - that so you can copy that and then you
220:24 - can paste that over there and after that
220:26 - let's move on so we can have the API oh
220:29 - sorry we can have the organization ID as
220:30 - well we can have the organization so we
220:32 - can have the process do we can have the
220:34 - envirment dot we can have the open AI I
220:38 - think we can again move on to the
220:40 - envirment so that should be open a
220:42 - organization ID like this so we have
220:44 - this thing over there it should be event
220:47 - like this environment like this so now
220:49 - we have the configuration with that and
220:50 - everything should work perfectly fine so
220:53 - here we have the configure of the open
220:54 - Ai and we can export this function as
220:56 - well so we can the export const we have
221:00 - the configure open a that should be
221:01 - equals to function like this so now we
221:03 - have this function of the configure open
221:05 - Ai and now we want to move on and after
221:07 - that so here inside the generate chat
221:09 - completion now what do we want to do so
221:11 - here we need the message from the user
221:14 - so we want the message from the user so
221:16 - let's get that so we can have the con
221:18 - something that should be equals to we
221:19 - can have the request or we can have the
221:21 - body like this so from the body we'll be
221:23 - accessing the message property directly
221:25 - from the user and now you can see now
221:27 - what do we want to do as the next step
221:29 - now we have the message so we should add
221:30 - the validation as well so let's just
221:32 - complete one by one so let's move on to
221:34 - the validations as well inside the util
221:36 - inside the validators let's copy that
221:39 - the sign up and let's remove all of that
221:41 - so we can have the message over there
221:43 - like this so we can have the message not
221:44 - empty and we can have the message so we
221:47 - can have this function over there the
221:48 - chat completion validator so let's just
221:51 - copy and let's just use that inside the
221:52 - chat routes as well so after coming to
221:55 - the new let's have the verify token so
221:57 - first verify the token of the user and I
222:00 - think before verifying the token let's
222:02 - have the validation so we can have the
222:04 - validate over there and that should be
222:06 - equals to we can have the chat
222:08 - completion valid dat like that then we
222:10 - should be having the verified token and
222:12 - then let's move on to the final thing we
222:13 - can have generate chat completion so
222:16 - there are a couple of middlewares for
222:18 - this request because it's a protected
222:19 - API now let's move on to the chat
222:21 - completion so here we have the message
222:23 - now and after that first thing that we
222:26 - want to do is now again we want to
222:27 - verify the details of the user so we can
222:30 - have the cons we can have the user like
222:31 - this that should be equals to your
222:33 - weight and that should be equals to the
222:35 - user we can uh access the user model dot
222:38 - we can have the find by ID we can find a
222:40 - user by its ID and directly from the
222:42 - response dot we can have the locals JWT
222:46 - data like that dot we can have the ID so
222:48 - with the help of this now we'll be
222:49 - getting the ID now we'll be getting the
222:51 - whole user object and again we can
222:53 - verify if we don't have the user then
222:56 - what we can do we can have the return
222:58 - response to we can have the status that
223:01 - should be 41 to we can have the Json
223:04 - like that message like that and that
223:07 - should be the same message that we have
223:08 - created so we created the same message
223:11 - inside the users controller and I think
223:13 - you should store all of these uh static
223:15 - strings inside inside something like
223:18 - inside the constant TS so it's a good
223:21 - practice so now what we can do so we can
223:23 - just copy that over there like the user
223:25 - not register or the token Mal function
223:27 - we can have the message over there and
223:29 - after that after we have the user then
223:31 - what do we need to do is the next step
223:33 - after we have the
223:35 - user so then we want to just grab all of
223:38 - the chats of the user to get the context
223:39 - text of the conversation so first now
223:42 - what we will do grab chats of user like
223:47 - that so grab the chats of the user then
223:52 - the second thing would be send all chats
223:55 - with new
223:57 - one so we'll be sending all previous
224:00 - chats with the new one to
224:07 - API so that's how it's going to work so
224:10 - there are three simple steps for that
224:11 - send all of the chats with new one to
224:13 - the open API and then we'll be getting
224:15 - the
224:17 - response so there are three steps that
224:20 - we want to do so now what do we want to
224:22 - do so first we need to grab all of the
224:23 - chats of the user so we can have the
224:25 - cons we can have the chats like that and
224:27 - that should be equals to we can have the
224:29 - user dot we can have the chats dot we
224:32 - can have the map so we can map through
224:34 - all of the chats of the user so inside
224:37 - each chat there would be a role property
224:39 - so there would be a role and there would
224:41 - be a Content as well like this so there
224:43 - would be the content like that and you
224:45 - already know that how the role and the
224:47 - content works because each chat message
224:49 - has a role and the content property so
224:52 - we have the role and the content after
224:54 - that now what do we want to do and we
224:55 - can just return the same thing over
224:57 - there like this the
224:59 - role and we can have the content so with
225:01 - the help of this now we'll be having the
225:03 - array of the messages with the role and
225:05 - the content inside that now we have all
225:07 - of the messages of the user and then now
225:09 - what do want to do so this is the static
225:11 - message of the chats okay then we can
225:14 - have the chats like that we have the
225:16 - chats do push the latest message so
225:19 - we'll be pushing the latest message to
225:21 - the chats and inside that we'll be
225:23 - having the content and that should be
225:25 - equals to we can have the message like
225:27 - that the latest message received from
225:28 - the user and the role that we'll be
225:30 - having should be we can have the user
225:32 - like that so the role should also be the
225:35 - user should always be the user and we
225:37 - have the chats like that and then now
225:39 - what do we want to do so here we are
225:41 - just storing all of the chats inside the
225:43 - static array as well inside the static
225:45 - array inside just and this array is just
225:47 - for the memory purpose so now we want to
225:49 - store the chats inside the main user
225:51 - object as well so let's move on so we
225:54 - can have the user model dot we can have
225:56 - the chats like that we have the chats
225:58 - dot we can have the push like that so we
226:01 - can have the push so we can have the
226:02 - chat. push and now what we can do so we
226:04 - can have the content that should be
226:06 - equals to we can have the message and
226:08 - then what we can do so we can have the
226:10 - role as well so we can define the role
226:12 - so that should also be we can have the
226:14 - user like that so we can have the role
226:16 - of the user so that's how it's going to
226:18 - work so now we are grabbing all of the
226:20 - chats of the user and there you can see
226:21 - we have the chats and now the Second
226:23 - Step would be now we want to move on so
226:26 - now we want to move on and now we want
226:28 - to send all of the chats to the open API
226:30 - so let's move on so now we have the
226:32 - configuration of the openi right then we
226:35 - can have the cons we can have the config
226:37 - like that so that should be equals to we
226:39 - can have the configure open a like that
226:42 - so we'll be having the configuration
226:43 - with that and what we are sending from
226:46 - it so we are not sending anything so we
226:48 - should send here the config like that so
226:49 - we should send the configuration
226:51 - directly from it now we can move on into
226:54 - the chat controllers once again now we
226:55 - have the configuration over there and
226:57 - after that let's move on into that so we
227:00 - can have the
227:01 - const opening I like that we can have
227:04 - the const open Ai and that should be
227:06 - equals to we can have the new open AI
227:09 - like that the new open AI like
227:13 - that so now we want to use the open a
227:16 - API so let's import that so import
227:19 - something from that should be open a
227:21 - like that and import you need to import
227:24 - the open a API like this so this is a
227:26 - class for the open API you need to
227:28 - import that so you have the open AI like
227:30 - this API and now we want to provide the
227:33 - config object so now we want to provide
227:34 - the configuration over there and now we
227:36 - would be grabbing the open a complete AP
227:39 - AP with that so with the help of this
227:41 - now we have the complete open API and
227:44 - now the final thing that we want to do
227:46 - so now we can make the request to the
227:47 - open AI so we can have the cons chat we
227:50 - can have the
227:55 - response we have the chat response and
227:58 - that should be equals to now what do we
227:59 - want to do so we can have the await then
228:02 - we can move on so we can add the open AI
228:04 - like this we have the open AI I think we
228:06 - can have the create chat completion so
228:07 - we have the create chat completion and
228:09 - instead that we want to provide an
228:11 - object so now what do we want to do so
228:13 - we want to provide the model so which
228:15 - model do we want to use so we'll be
228:16 - using the model of we can have the GPT
228:20 - and make sure you have the same spelling
228:21 - so GPT we can have the
228:25 - 3.5 we can have the turbo like that so
228:27 - we can have the GPT 3.5 SL we can have
228:29 - the turbo and then we can move on so we
228:32 - can have the messages like that so we
228:33 - can have the messages so that should be
228:35 - equals to the chats array so that would
228:38 - be equals to the chats over there and
228:40 - that's how it's going to work and now
228:43 - you are getting the type error as well
228:44 - so what you need to do so the chats are
228:47 - so after that you can provide the type
228:49 - and donation as well you can have the as
228:51 - you can have the chat completion like
228:52 - that you can import type as well so you
228:56 - can have the chat completion so you have
228:59 - the request message like that and that
229:01 - should be equals to you have the same
229:03 - thing over there chat completion request
229:05 - message array like that and now you can
229:07 - see now you won't be having any type
229:08 - error because now the messages knows it
229:10 - is accepting the same type of arguments
229:12 - like that and now after that now what do
229:14 - we have so after we get the chat
229:16 - response then we would be getting the
229:18 - full chat the latest chat as well and
229:21 - the latest chat is being stored inside
229:23 - this so if you move on so you can see
229:25 - response choices zero message and the
229:28 - content so that's how you can get that
229:31 - so you can have the note JS as well
229:32 - completion. choices z. message. content
229:36 - so let's move on so what do we want to
229:38 - do so we can have the user dot we can
229:41 - have the chats dot we can have the push
229:43 - so we can push to the chats of the user
229:46 - and that should be equals to we can have
229:48 - the chat response dot we can have the
229:50 - data dot we can have the choices dot we
229:53 - can have the latest which is the zero
229:56 - and Dot we can have the message like
229:58 - that so that's how it's going to work
230:00 - and the message contains the completion
230:02 - response message it means role and the
230:04 - content so that's how it's going to work
230:07 - and after that the final thing that we
230:08 - want to do is now we can move on so now
230:11 - we can save the users chat array as well
230:14 - so we can have the weit over there that
230:16 - should be we can have the user dot we
230:17 - can have the save so we can save the
230:20 - user so that's how it's going to work
230:22 - and let's move on so we can have here
230:25 - like this and now what do we want to do
230:27 - is the next step so now after we have
230:29 - all of the chats of the user then we can
230:31 - again we can have the return response we
230:33 - can have the status that should be we
230:35 - can have the 200 it means everything
230:37 - worked successfully then we can have the
230:40 - Json messages over there the Json it
230:43 - should contain the chats like that the
230:45 - chats should be we can have the user to
230:47 - we can have the chats like that and now
230:49 - that s is going to work and there's
230:51 - another thing you can see and that s it
230:54 - will work and everything should work
230:55 - perfectly fine and there's another thing
230:58 - that we haven't used the TR catch block
230:59 - over there and it's very important here
231:01 - so what do you want to do so we can have
231:03 - the try catch block so all of this code
231:05 - should be there inside the try so it
231:08 - should be there inside the try block and
231:10 - inside the catch if we get an error then
231:12 - what do we want to do we need to send
231:14 - the response back to the server to the
231:16 - front end so inside this we'll be
231:18 - sending the message we can have the
231:21 - message we can
231:25 - have we can have this something when we
231:27 - can have the wrong like that and we
231:29 - don't know that what exactly is the
231:31 - error so we can provide this as a Servo
231:32 - error over there we can have the 500 for
231:35 - that and we can log the error as well
231:37 - inside this so we can log the error and
231:39 - that's how it's going to work over there
231:41 - so now you can see now the backend
231:43 - operations with the chat completion is
231:45 - completed so trust me it is completed
231:48 - and now we need to move on to the front
231:49 - end and now we need to design the UI for
231:51 - this and after we build the front end
231:54 - now we'll be testing this API directly
231:56 - with the front end so let's move on so
231:59 - here now what we can do so now we can
232:01 - again move back to the front end over
232:03 - there let's just close the back end
232:05 - let's just move on again to the front
232:08 - end so let's move on so here you can see
232:11 - now what do we have here so inside the
232:14 - chat page now we want to design the chat
232:16 - page so now let's work on the chat for
232:19 - end so let's move on so here you can see
232:21 - now we enter the chat. TSX and here now
232:24 - we have discussed about the layout now
232:26 - we want to design that so first thing
232:28 - first now what do we want to do so first
232:30 - we can just provide here a box so we can
232:32 - just use a box from the material UI so
232:36 - we can have your box
232:39 - and it should be imported directly from
232:41 - the mui so we can import something from
232:44 - we can have from mui material over
232:46 - there like that and now that should be
232:49 - equals to we can have the box and now we
232:51 - can provide a couple of styles using the
232:52 - SX prop so the display could be we can
232:55 - have the flex over there we can have the
232:57 - flex that should be we can have the one
233:00 - over there and then we can move on we
233:01 - can have the width that should be we can
233:03 - have the 100% of the width then we can
233:06 - move on we can have the height as well
233:08 - that should be 100% so it should have
233:11 - the full width and height we can have
233:12 - the margin from the top that should be
233:14 - three and I think the Gap should also be
233:16 - the three between them so that's the
233:18 - parent container of the div so that's
233:20 - the parent div over there and now what
233:22 - do we want to do here so it should
233:24 - contain the sidebar it's not exactly the
233:26 - sidebar but we'll be showing some
233:28 - details of the user during the sidebar
233:30 - now let's move on so we can have another
233:32 - box container over there it should again
233:34 - contain the SX prop then we can have the
233:37 - display so here the display should be I
233:39 - think for the medium devices what we can
233:41 - do so we can have the flex and for the
233:44 - small devices we can remove that so for
233:46 - the small devices we can have the excess
233:48 - that should be we can have the none and
233:50 - same for the MD as well that should be
233:53 - we can have the none over there and
233:54 - that's how it's going to work and after
233:56 - that I think it should be the SM so for
233:59 - the SM as well it should be none so
234:01 - after that this box should be there and
234:03 - inside that we can again use here I
234:05 - think a box over there inside this so we
234:07 - can have another box for containers then
234:10 - we can have the SX prop for that then we
234:12 - can use a
234:13 - display that should be we can have the
234:15 - flex then we can move on we can have the
234:18 - width that should again be the 100% of
234:20 - the parent container the 100% of the
234:23 - parent then we can move on we can again
234:25 - have the height so this time the height
234:27 - should be somewhere around 60 viewb
234:29 - height and that should be enough then we
234:31 - can have I think we can have the
234:33 - background color as well so we can
234:35 - provide some background color and that
234:36 - should be we can have the RGB that
234:39 - should be 17
234:41 - 29 then we can move on so we can have
234:44 - with it 39 like that so we have this
234:46 - background C for that so if we save and
234:48 - if we move on to go to chat so here we
234:50 - would be having that window over there
234:52 - and now after that now what do we want
234:54 - to do so inside this box uh I think
234:57 - after that we can provide some border as
234:59 - well so we can have the Border radius
235:01 - like that and that should be somewhere
235:04 - around what we can do so we can have the
235:06 - five for the bottle radius and then we
235:09 - can have the flex Direction sorry so it
235:10 - should be inside the column basis
235:12 - because there would be a couple of items
235:14 - then we can have the MX that should be
235:16 - we can have the three like that MX
235:18 - should be three from all of the sides so
235:20 - this is the container in which we'll be
235:21 - displaying the Avatar of the user so we
235:24 - can the Avatar like
235:27 - that so Avatar should be imported
235:29 - directly from the mui
235:31 - material so here we have the Avatar and
235:34 - after that let's just use it over
235:37 - there and inside the aatar now what do
235:39 - we want to do we can have the SX prop we
235:41 - can have the MX that should be we can
235:43 - have the auto over there so it should
235:45 - contain inside the center and then we
235:47 - can move on we can the margin from the Y
235:50 - that should be somewhere around two BG
235:52 - color that should be begin at the white
235:54 - over there and then we would be having
235:55 - the foreground color that should be we
235:57 - can have the black over there and the
235:59 - font weight should be we can have the
236:02 - 700 so that's how it's going to work and
236:04 - inside the aatar now what do we want to
236:05 - do so here we would again be getting the
236:09 - user profile user o profile so let's
236:11 - move on so we can have the cons o so
236:14 - that should be equals to what we're
236:16 - going to do so
236:18 - here so here sorry what we have we have
236:21 - the use Au over there like that and here
236:24 - now we want to grab the first and the
236:25 - last letter the first word of the first
236:27 - name and first word of the last name so
236:30 - we can have the O DOT we can have the
236:33 - user dot we can have your the name dot
236:37 - we can have the zero
236:39 - so let's see how it looks so if we save
236:40 - and if we move on if we refresh the
236:43 - page I think there was an error with the
236:46 - back end so let's run the back end as
236:47 - well and
236:48 - PM run we can have the dev so let's see
236:51 - how it looks
236:57 - now so let's move on again let's just
237:00 - refresh it once again so there we can
237:02 - see now we are getting the James and
237:03 - after that now what do we want to do so
237:05 - we can grab the last name as well so
237:08 - here is the person name and then we can
237:10 - add another string then we can have the
237:12 - O I think we can have
237:16 - a o dot we can have your the user
237:20 - property once again dot we can have the
237:23 - name dot we can have the
237:27 - split dot we can have the split dot we
237:30 - can have with the um with the space then
237:33 - we can have the second letter and it
237:35 - should contain the first word of that so
237:37 - let's see how it looks now so so you can
237:38 - see now we have the James and the
237:40 - Marshall and that's how we can do that
237:42 - so it's a temporary thing it's like a
237:43 - jugar in Hindi so that's how it works so
237:46 - now let's move on as the next step so
237:48 - now what do we want to do so I think we
237:51 - and I think we can just provide some of
237:53 - the margins between them there should be
237:55 - some margin between them so after that
237:59 - now let's move on so let's just complete
238:00 - that as well I think the RGB color is
238:02 - not there it was not implemented so
238:05 - that's why we were seeing that so you
238:06 - can see now we have the color and that's
238:07 - how it's going to look
238:09 - and after that now what do we want to do
238:10 - so after that we could have the
238:11 - typography after the Avatar so we can
238:14 - have the typography over
238:17 - there so we can have the typography over
238:20 - there so it should be imported directly
238:22 - from this the typography and now let's
238:25 - move on so inside the typography we can
238:27 - provide a couple of more classes like we
238:30 - can have the SX prop it should contain a
238:32 - couple of things like we can provide the
238:34 - MX that should be we can have the a over
238:36 - there for the MX then we we can move on
238:39 - then we can have the font family so here
238:42 - we should be having the different font
238:43 - family work sense like that and inste
238:46 - this type graphy and what we can use so
238:48 - we can use you are
238:51 - talking to our chat
238:55 - bar like that so now you have this thing
238:57 - over there that you are talking to a
238:59 - chat Bo and that's how it's going to
239:01 - work and after this typography then
239:03 - again you can move on you can create
239:05 - another typography over there you can
239:07 - have another typography you can copy and
239:09 - paste but this typography would have a
239:11 - different thing I think so we can have
239:15 - the MX Auto it would be same then we can
239:18 - have you I think we can have the margin
239:20 - from the Y that should be somewhere
239:22 - around we have the four padding should
239:24 - be somewhere around three so inside this
239:27 - what we can use so we can add a line so
239:30 - you can add this line over there like
239:31 - you can ask a question related to
239:33 - programming uh you can have the
239:35 - knowledge business advises education Etc
239:38 - but avoid sharing the personal
239:39 - information so that's how it's going to
239:41 - work so you can see now it looks like
239:43 - that and that's how it will work and
239:45 - after that now let's move on so here you
239:47 - have this thing over there so that's how
239:50 - it's going to work and after that now
239:52 - let's move on so now we have this
239:53 - typography and after that below that we
239:55 - would be having the button as well so
239:58 - below that we would be having the
240:00 - button I don't think what happen to the
240:02 - Auto Imports over there because it's not
240:05 - working for me so it should be the
240:07 - button over there
240:12 - so it's a button over there so now we
240:14 - should be using the button from the
240:15 - material UI once again so button could
240:17 - be what we can use so we can have the SX
240:20 - prop like that and here now what we can
240:22 - do so we can have the width that should
240:24 - be 200 pixels for that then we can move
240:27 - on we can have the margin from the Y
240:28 - that should be we can have the auto over
240:30 - there so it should be the auto then we
240:33 - can move on we can have the color of the
240:35 - text that should be the white then we
240:37 - can move on so we can can the font
240:38 - weight like that and that should be
240:40 - somewhere around we can have the 700
240:42 - over there then we can move on the
240:44 - bottle radius so that should be
240:46 - somewhere around we can give the three
240:49 - and again we can move on we can have the
240:50 - MX that should be we can have the auto
240:53 - margin from the X and I think that's
240:55 - enough or we can have the BG color as
240:56 - well so we can have the BG color and
240:58 - that should be we can import the red
241:00 - color from the material UI so we can
241:02 - move on so we can import the color
241:04 - Shades as well from the material so you
241:06 - can import like that you can import
241:09 - something from you can have the mui
241:12 - material so mu material SL we can have
241:15 - the colors and you can import the red
241:17 - color over there like this or you can
241:19 - just use the red directly like this so
241:22 - you can have the red and you can just
241:24 - use the red over there to save the space
241:26 - inside the final bundle so we have the
241:28 - red and inside the red now what we can
241:31 - use so we can use the
241:32 - 500 color or we can use the 300 color
241:35 - for the red so we can have the red do we
241:38 - can have the 3 like that and after that
241:40 - now what we can do so we can have the
241:42 - hover as well so we can have the hover
241:44 - State and inside the H now what we can
241:47 - use so we can have the BG color that
241:49 - should be we can have the red again we
241:51 - can have the Red Dot we can have the a
241:54 - 140 I think we can have the A40 for that
241:58 - so if we save it if you move on so there
241:59 - you can see now we have the button and
242:01 - after that now what do we want to do is
242:02 - the next step then we can move on so we
242:04 - can have the clear
242:07 - conversation
242:08 - because we were having a button as well
242:10 - of the clear conversation now we have
242:11 - this button and that's how it's going to
242:13 - look and after this now you can see this
242:16 - was supposed to be on to the left side
242:19 - but now we will be adding another box
242:21 - container over there so after this now
242:23 - we would be having another box container
242:25 - over there now we can have another box
242:27 - so inside this box now we would be
242:29 - having some Styles over there like
242:31 - inside this box we would be having some
242:33 - Styles like we can have the SX prop that
242:35 - should be we can have the display that
242:37 - should be we can have the flex over
242:38 - there and then what we can use so we can
242:41 - have the flex over there that should be
242:43 - inside an object for the MD the flex
242:46 - should be 0.8 and for the extra small
242:50 - the flex should be somewhere around one
242:52 - and same for the small as well the small
242:55 - the flex should be somewhere around one
242:57 - and after this now what do we want to do
242:58 - so after this we can just write some
243:00 - typography about the model name that
243:02 - we'll be using the typography should be
243:05 - there so I think we can again use the X
243:08 - prop it should contain the text line
243:11 - inside the Cento and then what we can
243:14 - use so we the font size that should be
243:16 - 40 pixels of the font we can just use
243:19 - the color that should be we can the
243:21 - white over there then we can move on we
243:23 - can the font family I think font family
243:26 - should be default for that then we can
243:28 - have the margin from the bottom should
243:29 - be two like that so that's how it's
243:31 - going to work then we can the model that
243:34 - should be we can have the GPT 3.5 to
243:38 - turbo like
243:39 - that so if we save and if you move on so
243:42 - there you can see now we have the model
243:43 - GPT 3.5 turbo and that's how it's going
243:45 - to look and after that now what do you
243:47 - want to do so after that we can have
243:49 - another box container so I think why the
243:52 - styling has mismanaged so we need to see
243:55 - that why this is happening over
243:59 - there so I think uh inside this we can
244:02 - have the display so after this we can
244:04 - provide the flex properties for this as
244:07 - well so I think yeah we should provide
244:10 - the flex properties so after the display
244:13 - then we can have the flex so that should
244:15 - be somewhere around 0.2 for that we can
244:18 - have the flex
244:21 - direction that should be we can have the
244:23 - column like that so now you can see now
244:25 - it looks great over there now it's look
244:27 - great and everything seems to be working
244:29 - perfectly fine over there you can see
244:31 - now it's looking great over there and
244:33 - now you can see now with the model GPD
244:34 - 3.5 turbo I don't think why it's not
244:37 - moving on into the center because now we
244:40 - want to provide the
244:42 - width that should be 100% like that
244:47 - still so instead we can use the MX of
244:50 - the auto and that's how it's going to
244:51 - work so you can see now it's looking
244:53 - great and after that now what do we want
244:55 - to do after the typography now we want
244:57 - to render the actual chats over there so
244:59 - we can have the chats over there so
245:01 - inside this box we can again render the
245:03 - SX prop we can have the SX prop over
245:05 - there and we can use the width
245:08 - that should be again we can use the 100%
245:10 - of the available space then we can have
245:13 - the height that should be 60 viewport
245:15 - height then we can move on so we can the
245:18 - Bott radius so that should be somewhere
245:20 - around we can have the three over there
245:22 - we can have the MX that should be we can
245:24 - have the auto over there for the
245:26 - MX then we can move on we can have the
245:29 - display that should be again inside the
245:31 - flex box again we can have the flex
245:33 - Direction over there that should be we
245:35 - can have the column over there and then
245:37 - we we can have the Overflow like we can
245:39 - have the Overflow that should be equals
245:42 - to Scrolls so we can have the scroll
245:43 - Behavior but the Overflow X would not be
245:46 - visible should not be visible so
245:50 - overflow overflow wax shouldn't be
245:53 - hidden like that should be hidden and
245:55 - then we can have the smooth as well we
245:57 - can have the
245:59 - Overflow Behavior like
246:05 - that we have the scroll Behavior that
246:08 - should be equals to we can have the
246:09 - smoooth like that and that's how it's
246:10 - going to work again you can see now we
246:13 - are coming with this site so we want to
246:16 - fix this display as well after the width
246:18 - so we can remove the width and instead
246:20 - we can have a I think we can have the
246:22 - flex
246:24 - Direction inside it should be the column
246:27 - we can have the padding from the X that
246:28 - should be somewhere around
246:30 - three so here's the error so we have the
246:34 - error of the smooth so that's how it's
246:37 - going going to work over there like that
246:39 - so if we save and if you move on so now
246:40 - we should be having the scroll Behavior
246:42 - as well and that's how it's going to
246:43 - work and then we can have the
246:46 - Overflow why as well and that should be
246:49 - be have the auto like that so now it
246:51 - should not be visible on the initial
246:52 - scroll and that's how it's going to work
246:55 - you can provide the font weight of the
246:56 - 600 as well and it will look great and
246:58 - after that now what do we want to do so
247:00 - after that now we want to render all of
247:02 - the chats of the user so inside this div
247:04 - now we want to render all of the chats
247:06 - but here we do not have any chats of the
247:08 - user so we need to create that and how
247:10 - we can create that so I think now what
247:13 - we can do so as of now we can just
247:15 - render some of the static chats over
247:16 - there so you can get that directly from
247:18 - the chat GPT as
247:20 - well and I think now to render all of
247:22 - the chats over there we can use the
247:24 - static chats now to render all of the
247:26 - static chats let's just move on to the
247:27 - chat gbd and let's move on and let's
247:29 - just create an array of all of these
247:31 - chats so you can see now we can generate
247:33 - the chats like this so we can have
247:35 - create an area of static chats with the
247:37 - assistant like the r string and the
247:39 - content we have the message over there
247:40 - and that's how we can use that so we can
247:42 - just copy the array then we can move on
247:45 - so for now we can just Define the
247:47 - constant array over here so we can have
247:49 - the const we can have the chat messages
247:51 - so that should be this messages over
247:52 - there so we can have the chat messages
247:56 - like that and that's how it's going to
247:57 - work so now let's define all of that so
248:00 - here now what we can use so we can have
248:02 - the chat messages to we can have the map
248:05 - over there so we can have the map and
248:07 - now what do we want to do here so now
248:09 - after the map now we want to run a
248:10 - separate component so now we'll be
248:12 - creating a different component for each
248:14 - chat item so there would be a different
248:16 - component there would be separate
248:18 - component for each chat item to show the
248:20 - chats so here what we need to do here so
248:22 - we'll be having the chat like that so we
248:25 - can have the chat and then now what we
248:27 - want to do so as of now we can just
248:28 - render a normal div in which we can just
248:31 - render something like we can just render
248:34 - we can render the chat like that so we
248:37 - can have the the chat do we can have the
248:39 - message or we can have the content like
248:40 - that so let's see how it going to look
248:44 - so let's see how it looks now so what's
248:47 - happening over there let's see what
248:49 - happens so there you can see now we are
248:50 - seeing all of the chats over there like
248:52 - hello you and see this you can see I'm
248:54 - in New York City and all of that and
248:55 - let's just create the separate component
248:57 - in which we can just display all of the
248:58 - chats same like the chat gbd so let's
249:01 - move on so inside the components let's
249:03 - just move on so let's move on let's
249:04 - create another folder that can be chat
249:07 - and inside the chat we can have the chat
249:09 - item like
249:11 - that dot we have the TSX over there the
249:13 - chat item. TSX and now let's just move
249:16 - on to the chat item so inside the chat
249:18 - item now what do we want to do so we'll
249:20 - be accepting some props as well so we'll
249:22 - be accepting the props like we can have
249:25 - the
249:26 - message then we can have the prop of the
249:28 - role as well so instead of message we'll
249:31 - be having the content over there content
249:33 - and that should be equals to we can have
249:34 - the role and then the content
249:38 - should be inside the format of we can
249:41 - have the string and the role that we'll
249:43 - be getting so rle should be there should
249:45 - be two roles only the role could be we
249:47 - can have a suppose that could be user or
249:51 - there can be the role of assistant like
249:54 - that so the roles can have the user and
249:56 - the assistant so that's how it's going
249:58 - to work and after that we'll be having
250:00 - if we move on to the paint so let's move
250:02 - on again like how each chat item will
250:04 - going to look so suppose that's a chat
250:06 - item over there
250:08 - so inside first corner like this so we
250:11 - can have the Avatar of the user we can
250:13 - have the Avatar icon like we can have
250:14 - the user Avatar icon it can be the user
250:17 - or it can be the chat gpts Avatar icon
250:20 - that could be the open AI then after
250:22 - that we would be having the message over
250:24 - there like we would be having the
250:25 - message like that so let's move on let's
250:28 - just complete that as well so after this
250:30 - now we want to render all of these
250:32 - things according to the conditions so
250:34 - inser the return statement now what we
250:36 - can do so first we can check if the role
250:38 - is equals to we have the assistant then
250:41 - we want to perform different things and
250:42 - if the role is different then we want to
250:44 - perform different things so let's just
250:46 - addite the Mt GSX TX over there like
250:48 - that inside this as well and inside this
250:50 - as well so if the role is the assistant
250:53 - then what we can use so we can use the
250:55 - box from the material once again so
250:58 - let's import that as well we can import
251:00 - something from we can have add the
251:01 - material that should be we can have the
251:04 - box like that so we can have the box and
251:07 - here what do we want to do so here we
251:08 - have the box and inside the box now what
251:10 - we can use so we can have the SX prop we
251:14 - can have the display that should be we
251:16 - can have the flex over there like that
251:18 - we can have the display Flex then we can
251:20 - have the padding that should be
251:21 - somewhere around two we can have the
251:24 - background color as well so for the
251:25 - assistant there would be different
251:26 - background color for each chat item and
251:29 - that should be hash we can have the0 4 d
251:33 - 5612 we have the background color and
251:36 - then now what do we want to do so then
251:38 - we can have the margin from the Y that
251:41 - should be two the gap between the items
251:43 - that should be we can have the two and
251:45 - after that now what do we want to do so
251:47 - first we need to render the Avatar so we
251:49 - can have the Avatar like
251:52 - that so we can have the Avatar like this
251:55 - so we have the
251:57 - Avatar and after this now we have the
252:00 - Avatar over there and again inside the
252:01 - Avatar now what do we want to do we can
252:03 - have the SX prop we can have the margin
252:05 - from the left that should be we can have
252:07 - the zero for this because now the
252:10 - assistant should start from zero again
252:12 - and then inside the Avatar now what do
252:14 - you want to do so if the role is the
252:16 - assistant then we'll be using the image
252:18 - The Source should be equals to open AI
252:21 - dot we have the PNG over there and then
252:24 - we have the alt of the open a once again
252:26 - open a and then we can have the width as
252:30 - well width that should be somewhere
252:32 - around we can the 30 pixels for the
252:34 - width like that so that's how it's going
252:36 - to work and after that we would be
252:38 - having another message as well so we can
252:40 - have the message so inside the message
252:42 - now what do you want to do so we can
252:44 - just render the content directly so we
252:46 - can have the typography for that so we
252:48 - can have the
252:50 - typography so we can just render all of
252:52 - the content there inside the typography
252:54 - over there we can have the typography
252:55 - and inside the typography we can just
252:57 - provide we can have the color over there
253:00 - color we can have the white like that
253:01 - the color should be white then we can
253:04 - the font size so I think the color is
253:06 - already white so we need we just need to
253:09 - provide the
253:11 - font I think we can have this size that
253:14 - should be 20 pixels enough and after
253:16 - that now what do we want to do so we
253:17 - just want to render the content over
253:20 - there like that so it is same like this
253:23 - you can see now we have if the role is
253:25 - assistant then we want to do this and if
253:27 - the role is the user then we want to do
253:29 - a different thing then what we can do so
253:32 - we can again copy this box we can again
253:35 - paste that instead of this now we would
253:36 - be having a different type of styling so
253:39 - we have the petting tube we have the
253:40 - margin from the Y that should be I think
253:43 - margin is not required so we can remove
253:45 - the margin we have the Gap we have the
253:47 - different background color that should
253:50 - be what we need to do so we can have
253:52 - the0 4 d 56 over there so that should be
253:57 - the different background color and after
253:59 - that now what do you want to do so we
254:00 - can have the AAR so again we can use the
254:03 - Au property of the user so we can have
254:06 - the const
254:08 - we can have the Au over that should be
254:10 - equals to we have the use that should be
254:12 - Au over there that should be use and
254:14 - again we can grab this thing over there
254:16 - like this so it's like a temporary thing
254:18 - but still so let's just complete the
254:20 - application then we'll change that so we
254:22 - can just copy this thing over there
254:25 - let's move on to the chat item and let's
254:27 - render this thing inside the Avatar
254:30 - instead of this let's just render this
254:32 - thing and now what do we want to do so
254:34 - then we have the typography and it
254:36 - should be same I think but inide the
254:39 - Avatar we can have the ml Z we can have
254:41 - the BG color like
254:43 - that black then we can have the
254:46 - foreground color so we can have the
254:48 - color that should be we can have the
254:50 - white so if we save and if we move on to
254:53 - the applications so let's see how it
254:54 - looks so suppose we have all of these
254:57 - messages like that and now we have the
254:59 - chat do content but instead we want to
255:02 - write here uh chat item component over
255:05 - there chat item and now we want to send
255:07 - the
255:08 - data we can just for the content that
255:11 - should be we can have the chat do we
255:14 - have the content over there then we can
255:16 - move on we can have the RO that should
255:18 - be we can have the chat dot we can have
255:21 - the rooll so that's how it's going to
255:23 - work and I think the role is mismatching
255:27 - maybe the user and the assistant so
255:28 - that's how it's going to work so then we
255:30 - can send the key as well so we can send
255:32 - the key so as of now we can just send
255:34 - index for the key so it's not like it's
255:37 - not the accepted solution for the keys
255:40 - because sometimes it can get worse so we
255:43 - should provide a key for the ID for the
255:44 - separate ID for that sorry now we are
255:46 - seeing this thing over there hello can
255:48 - you tell me this this this you have the
255:50 - James so I think all messages are
255:52 - directly from the user of the assistant
255:54 - the RO of the
255:56 - assistant so let's move on and let's
255:58 - just see that what is happening over
256:00 - there so that's the error because now we
256:02 - have provided some extra space over
256:04 - there so if you save and if you move on
256:05 - so there you can see now it look looks
256:07 - great you can see first the user sends a
256:09 - message like hello can you tell me the
256:11 - weather forecast for tomorrow sure I can
256:13 - help you please provide me your location
256:16 - I'm in the new Rox behav the behav the
256:19 - message great give me a moment and then
256:21 - there you can see now of the message the
256:23 - weather forecast is we have the sunny we
256:25 - have the dead sound perfect you can see
256:27 - now we have created this type of
256:29 - application you can see it's looking
256:30 - great now the design looks great over
256:32 - there so that's how it's going to work
256:35 - and the final thing that we want to do
256:37 - for the UI is now we want to add the
256:39 - input box as well below that so let's do
256:42 - that as well so what do we want to do so
256:44 - again we can move on to the parent chat
256:46 - and here we can provide the input tag
256:49 - inside this container right inside this
256:52 - container let's move on at the bottom so
256:55 - after this let's add the input tag as
256:57 - well so for this now what we can do so
257:00 - we can just use I think we can directly
257:02 - use the HTML input tag because it would
257:05 - be more preferable HTM input and here we
257:08 - can have the type text we can provide
257:11 - the styling for that the style should be
257:13 - what do we want to do so we can have the
257:15 - width that should we can have the 100%
257:17 - for the width then we can have the
257:20 - background color like that we have the
257:22 - background color that should be we can
257:25 - have the transparent for that like that
257:27 - then we can have the padding that should
257:29 - be 10 pixels for
257:31 - that then we can move on so we can have
257:34 - the
257:35 - Border
257:37 - so that should be we can have the none
257:39 - over there like that border none so we
257:41 - don't need any border over there then we
257:43 - can have the outline that should be
257:45 - again we can use the none for that and I
257:48 - think that's enough so we can also
257:50 - provide the color I think yeah color
257:52 - that should be we can have the white
257:54 - then we can move on we can the font size
257:56 - as well that should be somewhere around
257:58 - 20 pixels over there so these are the
258:01 - styles for the input tag and now what do
258:03 - you want to do so we can just provide a
258:05 - different D for the input so let's move
258:07 - on so in the end we'll be having the
258:08 - icon as well so we can have the div we
258:11 - can provide the styles for the div and
258:13 - this should contain the width that
258:15 - should be we can have the 100% of the
258:17 - width then we can move on so we can have
258:19 - the
258:21 - pading so that should be somewhere
258:23 - around 20 pixels over there padding from
258:25 - all of these
258:27 - sides and then what we can do so we can
258:30 - have the bottle radius so what we can do
258:31 - so we can wrap the input directly inside
258:33 - this div so we can have a sty like input
258:36 - so so we can move on to the input we can
258:38 - have the Border we can have the radius
258:40 - that should be somewhere around we have
258:42 - the eight then we can move on so we can
258:44 - have the background color so we can use
258:46 - different background color for this that
258:48 - should be RGB once again and that should
258:50 - be we can have the 17
258:54 - 27 and that should be we can have the 39
258:57 - so that's how it's going to look and
258:59 - after that now what do you want to do so
259:00 - after that I think that's enough for
259:04 - that so
259:07 - I think we can have the display as well
259:09 - so display that should be we have the
259:10 - flex because we want to render the icon
259:12 - as well we can have the margin from we
259:15 - can have your the right like this so we
259:18 - can have the margin from the right that
259:20 - should be we can the auto like that and
259:21 - now what do we want to do is the next
259:23 - step have the margin like that that
259:25 - should be Auto like this and now what do
259:27 - you want to do so after this input now
259:29 - we can just render the icon as well to
259:30 - send so that could be a button so we can
259:33 - use the icon button directly from the
259:35 - material UI so we can the
259:37 - icon button so we can move on to the top
259:40 - once again so we can have here the icon
259:44 - button it is used to provide the hover
259:46 - effects and all functionality The Click
259:48 - effects functionality to a normal icon
259:50 - so we can have the icon button over
259:52 - there like that and then we can provide
259:54 - the icon between them so first we can
259:56 - provide the Styles a margin from the
259:59 - left that should be we have the auto we
260:01 - can have the
260:02 - color that should be we can have the
260:04 - white over there for the color
260:07 - and I think we can move on we can import
260:09 - one icon as well from the react icons so
260:13 - we can
260:16 - import we can import I think we can
260:19 - import from the
260:20 - react icons SL IO and the second thing
260:24 - that we want to import should be we
260:25 - should be importing the iomd icon like
260:29 - IO MD we can have this
260:32 - send so I just selected this icon so we
260:35 - can use this icon and let's see see how
260:36 - it looks now so we have thisd send icon
260:41 - over there and that's how it's going to
260:42 - look so if you same it if you move on so
260:44 - there you can see now we have the icon
260:46 - over there and you can see it's working
260:48 - perfectly fine over there you can see
260:50 - now we have the icon it's looking great
260:52 - over there so there you can see it's
260:54 - looking great over there you can see now
260:55 - have the input as well it's working
260:57 - perfectly fine over there like that you
260:59 - can see it's looking great over there so
261:01 - we have this input tag and there you can
261:03 - see in the end we have the button to
261:04 - send the chat as well and you can see
261:06 - that's how it works and there you can
261:07 - see the style looks great over there
261:10 - like that so it looks
261:11 - great and now the final thing that we
261:14 - want to do is is now we want to
261:15 - integrate this input and the chats to
261:17 - the API so let's complete that as well
261:20 - so there we go you can see now the
261:22 - design looks great over there and
261:23 - everything seems to be working perfectly
261:25 - fine and now another thing that we want
261:26 - to do over there we can just check the
261:28 - responsiveness as well we can move on to
261:30 - the inspect panel so we can select the
261:32 - responsive you can see it's looking
261:34 - great over there you can see now we
261:36 - don't have the the clear conversation
261:37 - button inside the mobile devices but on
261:39 - the desktop we have one and there you
261:41 - can see everything seems to be working
261:43 - perfectly fine and now let's move on
261:45 - let's integrate that to the back end as
261:47 - well so let's complete that as well so
261:49 - now we need to move on so you can see we
261:52 - have already created that on the back
261:53 - end we want just to integrate that here
261:56 - so how can we do that so first we need
261:59 - the data of this input right so first we
262:01 - need this input data so let's move on so
262:04 - what we can do so we can deare a ref
262:07 - inside this so we can declare a ref and
262:09 - from that ref we can just get the data
262:11 - of this input so the ref will allow you
262:13 - to get directly to the reference to this
262:15 - input element directly from the Dom so
262:17 - we can provide the ref over there so we
262:20 - can move on we can have the cons we can
262:21 - have the input we can have the ref like
262:23 - that and that should be equals to we can
262:25 - have the use ref over there so we can
262:27 - use the use ref hook directly from the
262:28 - react and initial value could be here we
262:30 - can have the null and we can just
262:32 - provide HTML input element over there
262:35 - HTML input element and that should be
262:37 - equals to null as well like this and
262:39 - after that now what do we want to do so
262:41 - we can copy the input ra over there and
262:43 - we can directly move on to the input so
262:45 - here we have the input and here we can
262:47 - just provide the ref we can provide the
262:49 - ref and that should be equals to we can
262:51 - have the input ref that should be the
262:54 - input ref and that's how we want to do
262:56 - that and after that now what do you want
262:58 - to do so once we click on this send
263:01 - button once we click on this icon button
263:03 - so now we should send the input data so
263:05 - let's move on so we can move on to the
263:07 - top once again so here we have the
263:10 - return statement and before that we can
263:12 - have the cons we can have the handle
263:13 - submit like that or we can have the
263:16 - handle we can have the handle submit
263:17 - over
263:18 - there so that should be again equals to
263:21 - a function and we can Define this
263:22 - function as an asynchronous function as
263:24 - well so we can have the async over there
263:26 - and that's how it's going to work and
263:28 - after that now what do we want to do so
263:30 - inside this function now we'll be
263:31 - getting the data of this input gra so
263:33 - let's move on so we can log the data
263:35 - like this we can have the input ref dot
263:38 - we can have the current dot we can have
263:39 - the value over there because it is
263:41 - directly referenced to the input element
263:43 - so that's why you can get the value you
263:45 - can get the data of the input as well so
263:47 - here we just need to get the value we
263:49 - can just log the value and we can
263:51 - reference this handle submit function to
263:53 - this input like that so we can have the
263:56 - icon button we can have the on click
263:57 - state for this and we can have the
263:59 - handle submit like that so let's see
264:01 - what happens if we are getting the data
264:02 - or the not so let's move on we can have
264:05 - the hello so let's just click on the
264:07 - send so let's just get the data so now
264:10 - we are getting the data and everything
264:11 - seems to be working perfectly fine and
264:14 - again we can move back to the uh to the
264:16 - chat page over there and here we have a
264:19 - couple of Errors like the first error
264:21 - that we have would be the role so as of
264:23 - now what we can do so we can have the TS
264:25 - ignore to ignore the type checking on
264:27 - the next line so now you can see now we
264:29 - do not have any error and now what do
264:31 - you want to do over there so now once we
264:34 - get the input over there once we get the
264:35 - input now what do we want to do so first
264:38 - we want to store all of these chats so
264:40 - first all of the previous chats of the
264:42 - user would be stored and then we want to
264:44 - insert the latest chat into the array so
264:47 - let's move on let's declare the chats
264:49 - array as well so we can again have the
264:51 - use State over there like this we can
264:53 - have the use State we can have the chats
264:55 - or we can have the
264:57 - messages we can have the set messages
264:59 - over there I think chat messages we can
265:02 - have okay we can have the set chat
265:04 - messages and use state would have the
265:06 - initial value of the empty string over
265:08 - there and we can Define the type as well
265:10 - I think so first thing that we want to
265:13 - do is now we can remove the chat
265:14 - messages over there we can remove this
265:16 - and now we have the set chat messages
265:18 - and here we have the use state so as of
265:20 - now we can use here without any type so
265:22 - let's see what happens and after that
265:24 - you can see now we won't be seeing any
265:26 - chat over there now we don't have any
265:27 - chat and after that you can see once we
265:30 - move on so let's move on to the handle
265:32 - submit over there so once we move on so
265:35 - now first thing that we want to do is
265:37 - now we want to get the latest input
265:39 - message so we can have the cons content
265:42 - and that should be equals to we can have
265:43 - the input ref dot we can have the
265:45 - current dot we can have the value like
265:47 - this so we can have the input ref do
265:49 - current do value we can have S we can
265:51 - have the string over there we can have a
265:53 - string and now let's move on so after
265:55 - this now we want to move on so now we
265:58 - want to move on and after that now we
266:00 - can do I think so after we create a new
266:03 - content over there now what we can do we
266:05 - can just remove the ref of the input so
266:07 - we can check if we have the input ref so
266:10 - if we have the input ref and the input
266:12 - ref do we have the current so then what
266:14 - do we want to do so now we can have the
266:16 - input ref do current do we can have the
266:19 - value is equals to the empty string so
266:22 - that now the input should be moved on to
266:24 - the empty string once again and now we
266:26 - have the content over there and after
266:28 - that now what do we want to do so now
266:29 - we'll be creating a new message so we
266:31 - can have the cons we can have the new
266:33 - message like this and that should be
266:36 - equals to an object the role should be
266:38 - of we can have the user over there the
266:39 - role has the user and the content over
266:41 - there so we can have the content like
266:43 - this and that's how it's going to work
266:46 - and after that now what do we want to do
266:47 - so now we want to store that input
266:49 - inside this state as well inside this US
266:52 - state as well so we can have the set
266:54 - chat messages over there we can have the
266:57 - set sorry we can have the set chat
267:00 - messages and inside there now we want to
267:03 - First grab the previous chats so we can
267:05 - have the previous and now we want to
267:06 - create a new array so first all of the
267:09 - previous chats would be stored and then
267:11 - the latest new message would be stored
267:13 - like that so that's how it's going to
267:15 - work and now you can see now we getting
267:17 - some type errors so we can move on so I
267:20 - think what we can do over there we can
267:21 - just declare the types as well so that
267:24 - is the type for a messages so let's move
267:26 - on so we can have the type we can have
267:28 - the messages over there and that should
267:31 - be equals to we can have the type of the
267:33 - message only that should be equals to we
267:37 - can Define the types over there like
267:38 - this so we can have the role string we
267:40 - can have the content of the string the
267:42 - role we can also Define the exact type
267:44 - like the user and the role can be of we
267:47 - can have the assistant as well we have
267:49 - the role user or the assistant and now
267:51 - the use State can have the values of we
267:54 - can have the message array like that and
267:56 - that's how it's going to work over there
267:58 - and the new message is also of type of
268:00 - the message like this so we can have the
268:02 - type of the message and now we should
268:03 - not be getting any type errors as well
268:06 - so this is known as the clean code so
268:08 - because now we have the types of
268:09 - everything that we use and after that
268:11 - now we have the new message and now the
268:13 - new message would be stored inside the
268:15 - set messages array so let's move on so
268:18 - if we send a new message over there like
268:19 - we can send the hero so then I think it
268:21 - should be stored there you can see now
268:23 - we are seeing the hell over there we can
268:24 - have the high we can just click on the
268:26 - send so now you can see now we have the
268:27 - high and everything seems to be working
268:29 - perfectly fine over there and now let's
268:31 - move on so now we have the new messages
268:33 - let's just again refresh this and there
268:36 - now what do we want to do so after this
268:37 - now we can again move back to the chat
268:39 - page over there we can again move back
268:41 - we can close others and now let's
268:43 - complete all of that so there you can
268:45 - see so after we create a new message
268:47 - over there inside this array now what we
268:49 - want to do so now we want to send the
268:51 - API request to the back end with a new
268:53 - message so with that uh with the help of
268:55 - that now we'll be receiving the response
268:57 - as well and we can send the new response
268:59 - inside the set chat messages array so
269:02 - let's move on so what do we want to do
269:03 - here so we can first move on to the API
269:06 - Communicator so let's create another
269:08 - function over there so let's create
269:10 - another function like this so what we
269:12 - can do so the function could be so the
269:14 - function could be we can have the
269:16 - send chat we can have the request over
269:18 - there we have the send chat request and
269:20 - here it would be a synchronous function
269:22 - and here we need the message so we can
269:24 - have the message like this so that
269:25 - should be inside the string so here we
269:28 - have the message over there and now what
269:29 - do we want to do so xos start we can
269:31 - have the post and this time it would be
269:33 - slash chat and Slash new because we have
269:37 - registered this route as well so/ chat
269:40 - SL new and after that inside the second
269:42 - parameter now we need to provide the
269:44 - data as well so we can provide the data
269:46 - the data could be equals to we need to
269:48 - only send the message so that's how it's
269:50 - going to work and after that if the
269:52 - response. status not equals to 200 then
269:54 - we can have the error message Chat like
269:56 - that unable to send chat and after we
269:58 - receive the response then inside the
270:00 - data now we'll be receiving the full
270:02 - list of all of the messages of the user
270:04 - so then what we want to do so now we'll
270:06 - be just replacing the full array with
270:08 - the new list of messages so we can move
270:11 - on so we can have the const over there
270:13 - and then we can have the response like
270:15 - that or we can have the chat data like
270:17 - this and that should be equals to we can
270:20 - have the await then we can have the send
270:22 - chat request and here now we want to
270:24 - create a new message that could be
270:26 - equals to what do we want to do so we
270:28 - can just send the content over there we
270:30 - can send the content or we can send here
270:32 - the new message so we can have the
270:35 - content like that that and now let's
270:37 - move on so after we have the content
270:39 - let's see that what happens this time so
270:41 - after we have the content over there now
270:43 - we'll be receiving the response as well
270:45 - so now after that now what do we want to
270:48 - do so then we can move on so we can have
270:51 - this set chat messages over there set
270:52 - chat messages and that should be equals
270:54 - to an array of all of the messages of
270:56 - the user so we can have the chat data
270:59 - dot we can have the chats over there
271:01 - like that so we have the chat data do
271:03 - chats and that's how it's going to work
271:05 - and now let's see that what happens so
271:08 - first we need to move on to back end to
271:10 - verify all of that if everything works
271:11 - correct or not if everything is properly
271:13 - integrated or not so let's move on to
271:16 - the back end so uh we can move on to the
271:18 - chat routes we have the generate chat
271:21 - completion so here you can see now uh we
271:24 - are creating a new message role of the
271:26 - user user. chats. push and from there we
271:29 - are just sending the chats over there
271:31 - and that's how it's going to work so now
271:32 - let's move on and let's just try it out
271:34 - so let's try it out out once again so
271:36 - here now what I can send is I can send
271:39 - hello how are you
271:42 - today so let's send the message and
271:44 - let's see that what happens this
271:47 - time so let's see what happens so I
271:50 - think we are receiving some errors we
271:52 - can move on to the console so there are
271:54 - some errors over there so let's just
271:55 - refresh the page so now what do we want
271:58 - to do so again we can send a new request
272:00 - and we can track the network response
272:01 - over there so let's move on so we're
272:03 - going to the hello how
272:07 - are you
272:08 - today so let's just click on the send so
272:11 - let's see what happens so now we have
272:12 - the new it means now if we are sending a
272:14 - 44 not found it means now we do not have
272:18 - this uh we do not have this URL
272:20 - registered so I think we can move on to
272:23 - the back end once again so we have a new
272:27 - but inside the index we have the chats
272:28 - so here it should be the chat I think so
272:31 - we can have the chat only so let's see
272:33 - what happens this time so it should be
272:35 - we can have the chats only so let's move
272:37 - on so let's just click on send once
272:39 - again let's just again refresh that we
272:41 - can have the
272:42 - hello how are you doing
272:50 - today so let's see what happens if we
272:52 - just click on this end once again so
272:53 - let's just click on this end you can see
272:55 - now it is pending so now we should be
272:57 - receiving a new so there you can see now
272:59 - we are receiving a new message so you
273:01 - can see here we have a message like
273:02 - hello I am an AI as I don't have any
273:04 - feelings but I here to assist you and
273:06 - how can I help you today you can see
273:08 - everything seems to be working perfectly
273:10 - fine over there we just sended a new
273:11 - message we just sent a new message like
273:13 - hello how are you doing today we got the
273:15 - preview as well and inside the preview
273:17 - we got the ID of the message and there
273:19 - you can see we got the data as well and
273:21 - you can see that's how it works and
273:23 - everything seems to be working perfectly
273:25 - fine over there so you can see it looks
273:27 - great over there so let's send another
273:29 - message like what is we at the
273:32 - JavaScript so let's just send this
273:34 - message and let's see that what happens
273:36 - this time so this is a request and let's
273:39 - see that what happens inside the preview
273:41 - you can see now we are seeing the new
273:42 - chat messages over there you can see
273:44 - everything looks great over there now we
273:46 - have the content you can see JavaScript
273:47 - is the programming language you can see
273:49 - now the design also looks great design
273:51 - also looks similar to the chat gbt model
273:53 - as well you can see that's how it works
273:55 - and it looks great over there you can
273:57 - see it looks great and everything seems
273:58 - to be working perfectly fine so
274:00 - congratulations on successfully
274:02 - integrating the openi API to the monag
274:04 - application
274:05 - and you can see this looks great over
274:07 - there and everything seems to be working
274:09 - perfectly fine and here the last thing
274:12 - that we can do is now we want to do
274:13 - another thing so the thing is that if
274:16 - you access a code block from this open
274:18 - AI so suppose I can send a message like
274:21 - show me the I think we can have show me
274:23 - the
274:24 - code um like we can have show me the
274:28 - syntax that how can I
274:31 - declare function we can have the how can
274:34 - I declare the function and we can have
274:36 - the
274:37 - JavaScript so there you can see now we
274:39 - are receiving the response as well and
274:40 - it works great but there you can see
274:42 - here we have the code blocks as well you
274:44 - can see here we have the JavaScript we
274:45 - have the function function name here we
274:47 - have the Cod Snippets as well and now we
274:49 - want to show the cod snipets as well to
274:51 - the user and how can we do that so we
274:54 - can do that with using a library of the
274:56 - react which is a react syntax
274:57 - highlighter so we can move on so we can
274:59 - have the react syntax highlighter so we
275:02 - can use this Library over there so let's
275:04 - just move on let's just install this
275:06 - library in our application let's install
275:08 - this package and if you want to see the
275:10 - demos as well you can move on so here
275:12 - you have the demo as well inside this
275:14 - you can get the demos you can see you
275:16 - can provide some dark uh some dark
275:19 - themes as well the language as well and
275:20 - everything with that so that's how it
275:22 - works over there so let's move on and
275:25 - let's just Implement that as well so
275:27 - here we want to install this Library so
275:29 - we can move on we have the react syntax
275:31 - highlighter we can just copy that and
275:33 - then we can paste that over there so
275:35 - inside this frontend we can have the npm
275:37 - install react syntax highlighter and
275:40 - after that let's move on to the chat
275:42 - page once again so here we are rendering
275:44 - all of the chats so let's move on to the
275:47 - chat as well here we can move on to the
275:50 - chat item and here now we want to just
275:52 - import something from the prism code
275:54 - highlighter so now we want to import
275:56 - something from the react syntax
275:57 - highlighter so we can have the import we
276:00 - can have this something from it should
276:02 - be equals to from we can have the react
276:04 - syntax highlight o and here we can just
276:07 - move on and we can just import the prism
276:09 - style because if we move on to the npm
276:12 - package so you can see there are a
276:13 - couple of styles we can use the prism as
276:15 - well and that's how it's going to work
276:17 - so we'll be using this type of styles
276:18 - over there like prism as syntax
276:20 - highlighter and we'll be using some
276:22 - themes over there we can use any theme
276:23 - over there and then we can just write
276:25 - here the syntax highlighter language we
276:27 - can detect the language and then we can
276:29 - move on we can just provide the code
276:31 - strings between them so you can see if
276:33 - you move on to the application
276:35 - so could not find the Declaration file
276:37 - okay now we want to install the
276:39 - Declaration files as well so we can just
276:41 - copy this thing over there we can just
276:44 - paste it out
276:45 - here I don't know why I didn't copy we
276:48 - can copy it once again we can paste it
276:50 - out over
276:54 - there I don't know what is happening
276:56 - over there so let's move on so we can
276:58 - click on the DT over there declaration
277:00 - file and again we can move on we can
277:03 - just copy that and then we can paste is
277:05 - that over you and it is npm install it
277:07 - is inside the development dependency so
277:10 - we can write D flag over there like that
277:12 - and now let's install that as
277:14 - well and after that now we want to move
277:17 - on so now we should be having the types
277:18 - over there now we can import the prism
277:20 - over there prism as we can have the
277:25 - syntax we can have the S syntax
277:27 - highlighter over there and that's how
277:28 - it's going to work and after that now we
277:30 - want to move on so now we want to import
277:32 - the Styles as well so you can see again
277:35 - we can move on to documentation now we
277:37 - can get the Styles as well so what we
277:39 - can do so now here we are using the
277:42 - prism so we want to import the styles
277:43 - for the prism we can copy the statement
277:45 - we can import the CSS file directly from
277:47 - it and after that you can see we won't
277:49 - be using the color of the dark we'll be
277:51 - using the color dark like that so we'll
277:53 - be having the colder K dark like that
277:56 - we'll be using this style and it is
277:57 - being imported directly from the prism
278:00 - and after that now you can see now we
278:02 - want to detect that where is the code
278:03 - block between the string
278:05 - so if we move on to the inspect panel if
278:07 - we going refresh this if we refresh so
278:09 - let's see what happens this
278:11 - time I think the frontend server is not
278:13 - open we can have the npm Run Dev so
278:16 - again we can open the server and after
278:19 - that you can see if we move on and
278:21 - there's another thing that we want to do
278:22 - so on the initial request now we want to
278:25 - have the chats of the user as well so we
278:27 - want to maintain that as well so now
278:29 - let's move on so again what we can do so
278:31 - we can just send the hello over there so
278:33 - after we send the hello now will bece
278:34 - saving all of the messages of the user
278:36 - as well like this so that's how it's
278:38 - going to work over there and after that
278:40 - now what do we want to do so now between
278:43 - the string if we open this here the chat
278:45 - are if you open this thing over there
278:47 - like this so we have the message five so
278:50 - there you can see this is the string
278:52 - over there this is the string in which
278:54 - we have the code blocks as well right we
278:56 - have the code blocks but how we can
278:58 - detect that so if you see inside this
279:00 - message so every code block starts from
279:03 - this sign so I think that's the back Tex
279:06 - so it starts from three backticks over
279:09 - there so you can see every code block
279:10 - starts from three back Texs and ends in
279:13 - these three back tcks so with the help
279:15 - of this now we can just grab the code
279:17 - box as well so let's write the condition
279:19 - as well so what we can do so let's just
279:22 - copy it out so let's just test it out
279:24 - our programming skills so let's move on
279:26 - to the inspect panel we can move on to
279:28 - the console and we can have the con we
279:30 - can have the message like this so that
279:32 - should be equals to we can have this
279:34 - message so there we have the message and
279:36 - that's how it's going to work and after
279:37 - that let's move on so here now what we
279:40 - can do so we can have the message like
279:42 - this start we can have this split so we
279:44 - can split the message with these three
279:47 - back ticks over there so we can write
279:48 - that over there and this key is there
279:50 - onto the Escape I think before the
279:52 - escape this key is there so first let's
279:55 - move on and let's just use that over
279:58 - there so you can see now we have the
279:59 - array and inside the array we have seven
280:01 - elements so you can see inside the first
280:03 - one we have inside the Java script we
280:05 - have this rule over there and inside the
280:07 - second value of the array now we have
280:10 - the code block you can see now we have
280:11 - the code block and you can see inside
280:13 - the third as well I think now we have
280:14 - the code block inside this as well now
280:17 - we have the code block so that's how
280:18 - it's going to work and after that let's
280:20 - use the same syntax inside our
280:22 - application as well so let's move on so
280:25 - what do we want to do here so inside the
280:28 - chat item first thing that we want to do
280:30 - we can define a function before the
280:32 - component so before the component let's
280:34 - define the function
280:35 - we can have the
280:36 - extract code we can have from that
280:39 - should be we can have the string so that
280:41 - would be a function and in set this
280:43 - function now we would be expecting a
280:45 - parameter as well which is we can have
280:47 - the message like this we can have the
280:50 - message the type that should be of the
280:51 - string and after that now what do we
280:53 - want to do so we can check a condition
280:55 - like if the message like if the message
280:58 - to have the includes so if the message
281:01 - dot includes these three back takes over
281:03 - there like this if the message do
281:04 - includes this then what do you want to
281:07 - do then we can just renter here this
281:09 - over there now we can renter condition
281:11 - we can have the con we can have the
281:13 - blocks of the message that should be
281:15 - equals to we can have the message dot we
281:17 - can have the split so we can split all
281:19 - of these things inside this and then we
281:21 - can split that directly from the code
281:23 - blocks like this directly from this code
281:25 - blocks and after that now we want to
281:27 - return the array of the blocks so we can
281:29 - return the are of the blocks and that's
281:31 - how it's going to work and after that we
281:33 - need another function function suppose
281:36 - you can see if we move on to the
281:37 - application once again so some strings
281:39 - do not have the code blocks right so
281:41 - some strings do not have this so we
281:43 - should get the error like this thing is
281:45 - not found over there so we should get
281:47 - that error so now what we can do so we
281:49 - can just declare a function in which we
281:51 - can verify if a block is the code block
281:55 - so how we can verify that so there can
281:57 - be multiple rules for that so in this
281:59 - application we'll be declaring a basic
282:01 - syntax a basic validation check in which
282:03 - we can check that if that string
282:06 - includes a code block or note so it
282:08 - would be very simple so what do we want
282:10 - to do so again we can Define the
282:12 - function we can have is code block like
282:15 - that so that would be equals to a
282:16 - function like that and inside that what
282:19 - we can do so we can have the Str Str
282:21 - that should be inside the string format
282:23 - and after that let's think that how we
282:25 - can verify that if a string includes a
282:29 - code or not so there can be multiple
282:31 - parameters so you can see if we move on
282:33 - to the application so each code block
282:35 - contains a parenthesis like this so it
282:37 - can be having a parenthesis like this it
282:39 - can have the semicolons it can have a
282:42 - lot of things so we can verify all that
282:44 - so we can provide some if checks over
282:46 - there so like what we can do so we can
282:48 - have the if we can have the string do we
282:51 - can have the includes if the string do
282:53 - includes and equals to or what we can do
282:57 - we can check another condition or if the
282:59 - string dot we can have includes so if it
283:02 - includes the semicolon so this condition
283:05 - would pass and if the string dot we can
283:08 - have the includes over there so if the
283:10 - string dot includes this as well like
283:13 - this so if the string dot includes this
283:15 - block over there and we can provide a
283:17 - couple of conditions like this so so you
283:19 - can also Define your own conditions as
283:21 - well if you want to do that so here we
283:23 - have these conditions over there
283:25 - formatted and after that we can have
283:26 - another condition as well if the string
283:29 - or we can have the includes and if the
283:31 - string do includes that could be the
283:33 - hash sign for for the comment and if the
283:35 - string again we can have a condition
283:38 - like if the string dot we can have the
283:40 - includes over there once again or it
283:43 - could be the includes and that should be
283:45 - like this sign over there like the
283:46 - comment sign so it is a code block right
283:49 - so that could be a code block so now we
283:51 - can move on and we can verify all of
283:53 - that here so inside each message of this
283:55 - so if the role is assistant now we can
283:57 - verify that condition over there so
284:00 - after this box now we can remove this
284:02 - typography now we can remove this
284:04 - typography and let's move on so after
284:06 - this now first you can see inside this
284:09 - component first we can grab all of the
284:10 - code blocks so let's move on so we can
284:13 - have the cons here we can have the
284:15 - message blocks like that so that should
284:18 - be equals to we can have the extract
284:20 - code from the string and that should be
284:22 - equals to the content over there like
284:24 - this so that should be the content so if
284:26 - we get the empty AR over there so if we
284:29 - get this string are over there it means
284:30 - now we have the message blocks and if we
284:32 - do not get that if it is undefined it
284:34 - means now we do not have any code blocks
284:36 - over there so let's move on let's define
284:38 - the condition inside this block over
284:40 - there let's define that condition so
284:43 - first there would be a condition like if
284:44 - we don't have the message blocks if it
284:46 - is an empty array then what do we want
284:48 - to do so then we can have the condition
284:50 - and instead this we can again use the
284:52 - same typography over there we can have
284:54 - the typography and it can use the SX
284:56 - prop once again for the styling we can
284:59 - have the font size over there the font
285:02 - size could be we can have the 20 pixel
285:04 - like that so that could be this
285:06 - typography and inside this typography we
285:08 - can just render the content over there
285:10 - so that could have this content so you
285:12 - can see this condition works when we do
285:14 - not have the message blocks so let's
285:16 - provide another condition as well so
285:18 - once we have the message blocks and we
285:20 - have the message blocks to we can have
285:22 - the length um is greater than zero so
285:26 - this condition would always be true with
285:28 - the help of that and then we can move on
285:30 - so if we have the message
285:32 - blocks and we have the message blocks do
285:34 - length is not equals to zero so then
285:36 - what do we want to do so we can have the
285:38 - message blocks dot we can have the map
285:40 - so we can map through the message blocks
285:42 - over there and inside that we would be
285:44 - receiving the block string we would be
285:46 - receiving the block string over there
285:48 - and after that now what do we want to do
285:49 - so we can just write the condition and
285:51 - we can render something based on that
285:53 - condition so we can check if that's a
285:56 - code block if this block has the code
285:59 - block over there we can have the block
286:00 - like this so then what do you want to do
286:02 - so if this has a code block then we want
286:04 - to render something else then what do we
286:06 - want to render we can render something
286:08 - else and if it is not the code block
286:10 - then we want to do something else so we
286:13 - can provide the GSX over there the empty
286:15 - jsx tax over there like that and for
286:17 - this as well we can have the empty jsx
286:19 - tax like that and now what do you want
286:21 - to do so I think we are receiving the
286:24 - error inside the escort block because
286:26 - now we haven't return the true over
286:27 - there like that so we should return the
286:29 - true over there like this so we can have
286:31 - the true and if we do not find all of
286:33 - that we can just return the false over
286:35 - there we can return the false so you can
286:37 - see now we should not be getting any
286:38 - error so now if we have the code block
286:40 - then we want to render the syntax
286:42 - highlighter and if we don't have the
286:43 - code block within the same string then
286:45 - we want to render the simple typography
286:48 - so let's move on so inside this now we
286:50 - should be rendering the syntax
286:51 - highlighter we can have the syntax
286:53 - highlighter over there and then what do
286:55 - we want to do so inside that we can move
286:57 - on we can provide the style that should
287:00 - be we can have the colder Cod like that
287:03 - so we would be having this style over
287:05 - there I think we can have your CER we
287:09 - can have the dark so we'll be using this
287:11 - style over there so we can just use same
287:13 - over there like this so we have this
287:15 - style and after that we need to provide
287:17 - the language so this is an assignment
287:19 - for you that how you can grab the
287:21 - language so this is an assignment so you
287:23 - need to find the language of the code
287:26 - and this is very simple and you can find
287:28 - the answer of this assignment inside the
287:30 - GitHub repository so inside my final
287:32 - code you will be seeing the example you
287:34 - will be seeing the assignment solution
287:36 - as well so here now what do you want to
287:38 - do so we can just provide the language
287:40 - that should be for the JavaScript so as
287:42 - of now I am giving here the static type
287:44 - over there but now you should be just
287:46 - solving this assignment you should be
287:47 - solving this problem on
287:50 - yourself so now as of now I have the
287:52 - static language so now what you need to
287:54 - do you need to define a new state for
287:56 - the language as well so now we have the
287:58 - language of the JavaScript and now after
288:00 - that now what do you want to do so after
288:01 - that we need to render the code block
288:03 - between them so we can Rend the code
288:05 - block and that should be equals to we
288:07 - can have the block like this so that
288:08 - should be the block and if we do not
288:10 - have any code block inside that if we
288:12 - don't have the code block then we just
288:14 - need to copy this typography we can just
288:16 - paste it out over there and that should
288:18 - contain the block so that's how it's
288:21 - going to work so you can see that was
288:23 - very simple to explore you can see we
288:26 - just created a condition like if that
288:28 - string contains a code block and you can
288:30 - see first we are grabbing the code
288:32 - blocks from the string then we are very
288:34 - defying it according to this condition
288:36 - then we are rendering that according to
288:37 - these conditions like if that's a code
288:39 - block then we want to render the code or
288:42 - we want to render this thing over there
288:44 - so let's see what happens this time so
288:46 - if I send you the show I think we can
288:49 - have can you show the syntax of
288:55 - declaring variable in
289:00 - JavaScript like this so if I send this
289:04 - query to the chat jity so let's see what
289:15 - happens so what happened so let's move
289:18 - on to the network so there you can see
289:20 - now we are receiving the response as
289:21 - well so inside the response you can see
289:24 - now we are receiving the data can see it
289:26 - looks great over there you can see now
289:28 - we have the code blocks as well between
289:29 - them you can see in JavaScript this this
289:31 - this you can see the code blocks are
289:33 - working fine you can see now you can see
289:35 - all of the code blogs and it looks great
289:37 - over there right it looks great and
289:39 - everything seems to be working perfectly
289:42 - fine you can say it's looking great and
289:44 - there you got the solution of your
289:46 - assignment as well right you got the
289:48 - solution so you can see inside each code
289:51 - block you get the language of the code
289:53 - as well right you got the language of
289:55 - the code so your assignment has already
289:57 - been completed so you just need to grab
290:00 - the first word of the code block and
290:02 - then what you can do you can just move
290:04 - on and then you can just provide the
290:06 - language to the code block so that's how
290:08 - it's going to work so that's your
290:10 - assignment already completed so that's
290:12 - how it's going to work so you can see
290:14 - with the help of this now we are
290:15 - receiving all of the chats you can see
290:16 - it's looking great so that's how the
290:19 - chat G works you can see that's how we
290:20 - can use their apis to do all of the
290:22 - things so that's it for this so now
290:25 - let's move on so we can do the same
290:27 - thing for the users message as well so
290:29 - sometimes users also send a chat
290:31 - messages so what we can do so we can
290:33 - move move on we can just use the same
290:35 - box over there as well inside this so
290:38 - that's how it's going to work over there
290:40 - so let's move on so it would be same
290:42 - over there so that's how it's going to
290:45 - work and after that if you need to
290:47 - provide some margin or the petting
290:48 - between them so I think there's already
290:50 - some margin in the padding you can see
290:51 - the color is starting from there you can
290:53 - provide the margin from this I think so
290:56 - I think this box doesn't have any margin
290:58 - so you can provide the margin from the Y
291:00 - that should be equals to we can have the
291:01 - two and that's how it's going to happen
291:03 - and and everything seems to be working
291:05 - perfectly fine over there you can see it
291:07 - looks great and you can see that looks
291:10 - fine and now let's move on now we need
291:12 - to fix a couple of issues as well inside
291:14 - this application so there are a couple
291:16 - of issues you can see if we refresh this
291:18 - application you can see now we are
291:20 - successfully logged in but here you can
291:21 - see now we do not have any chats so now
291:23 - we need to create a route in which we
291:25 - can get all of the chats of the user as
291:27 - well so let's move on and we can make
291:29 - the request directly from the client so
291:31 - once we move on to the chat page so now
291:33 - we should be receiving all of the chats
291:35 - so let's Implement that so here let's
291:37 - move on to the back end once again so
291:39 - let's just quickly remove all of the
291:40 - shoes from our application so let's move
291:42 - on to the chat routes let's create a new
291:44 - route as well so let's create the chat
291:46 - routes. we can have the get request over
291:48 - there so that should be the get and that
291:50 - should be we can have the all chats like
291:52 - that or we can have the chats like this
291:54 - so that could be the route over there
291:57 - and here I think we do not need any
291:59 - valid date because we won't be sending
292:01 - any data and after that let's create a
292:03 - new function in which we can just send
292:05 - all of the chats to the user so what we
292:07 - can do so we can copy something like
292:10 - this from this from the users controller
292:13 - let's just paste it out there inside the
292:15 - chats controller so let's paste it out
292:19 - and that should be we can have the
292:21 - send chats to we can have the user like
292:24 - this so we can have the send chats to
292:26 - user and after that now what do you want
292:28 - to do so first we can verify the token
292:30 - of the user then if we don't have the
292:32 - user then we we have this conditions
292:34 - over there and after that now we have
292:36 - the return statement and inside the
292:38 - return statement we have the message of
292:40 - the okay then we can send the chats of
292:42 - the user so we can send the chats so
292:44 - that should be we can have the user do
292:47 - we can have the chats like this and
292:49 - that's how it's going to work so the
292:51 - work on the back end has been completed
292:53 - and now we can move on to the front end
292:55 - to implement that so now we can move on
292:57 - to the Au Communicator once again and
293:00 - here now what do you want to do so we
293:01 - can create another request in which what
293:04 - do you want to do so we can copy we can
293:06 - paste it out over there so that should
293:08 - be we can have the get I think we can
293:10 - have the get user chats like that we can
293:13 - have the get user chats and inside this
293:15 - we don't need any message over there we
293:17 - just need to send the exos we the get
293:21 - requests and that should be uh we don't
293:23 - need to send the message so chat that
293:25 - should be equals to I think we can move
293:27 - on to the routes so this is the message
293:30 - over there all chats over there so we
293:32 - need to send all chats over there
293:34 - so let's move on so that should be the
293:36 - all chats and here I found another book
293:39 - so it should not be the generate chat
293:40 - completion it should be I think we can
293:43 - get the chats like that so we can have a
293:47 - chats like that uh we can see so we can
293:51 - directly move on to the chat completion
293:53 - so we can have this send chats to user
293:55 - so that should be the function over
293:57 - there that you want to render so that
293:59 - should be this function and now what do
294:00 - we want to do so again we can move on to
294:02 - the communicator and here I think that's
294:05 - enough for that so we'll be getting the
294:06 - chats over there let's move on to the
294:08 - chat so before the return statement
294:11 - let's render the use effect code as well
294:12 - so we can have the use effect and in set
294:15 - this now what do you want to do so we
294:16 - need to run it only one time and I think
294:18 - instead of the use effect we can use the
294:20 - layout effect as well we can have the
294:22 - layout effect so layout effect runs
294:24 - before it is rent out on the UI so let's
294:26 - move on so after we have the layout
294:28 - effect so we can have a condition like
294:30 - if we have the O DOT we can have this
294:32 - logged in it means now we have the user
294:35 - and we have the o. user as well you can
294:37 - rent another condition like you can have
294:39 - the O do you can have the user so after
294:42 - that now you want to run something so
294:43 - after that you can run the code over
294:45 - there so you can uh you can move on so
294:48 - you can have the toast over there so you
294:49 - can import the toast to you can have the
294:51 - loading then we can have the loading
294:53 - chats like that so we can have the
294:55 - loading chats we can put the message
294:58 - like that we can put the ID over there
295:00 - so that should be we can have the load
295:02 - chats like that we have the ID over
295:04 - there and after that now what do you
295:06 - want to do so we can move on so we can
295:08 - have the get user chats like that get
295:10 - users chats over there and after that
295:13 - we'll be getting the data as well so we
295:15 - can have then we'll be getting the data
295:18 - over there data like this so then what
295:21 - do you want to do so after we get the
295:22 - data then we can have the set messages
295:24 - over there set chat messages that should
295:27 - be we can have an array we can
295:29 - destructure all the elements so we can
295:31 - have the data to we can have the message
295:33 - messages like that we can have the data
295:35 - do I think we have the chats so that's
295:38 - what we want to do so after we set all
295:39 - of these messages then we can have the
295:41 - toast dot we can have the success over
295:43 - there we can have the toast to success
295:46 - so we can copy this string over there we
295:49 - can have toast. success and that should
295:51 - be we can have
295:55 - successfully loaded we can have the
295:57 - chats over there successfully loaded
295:58 - chats and ID of the load chats and
296:00 - that's all we want to do and after that
296:02 - if we get any error then what do we want
296:03 - to do we can renter the catch over there
296:06 - so we can renter the catch statement and
296:08 - inside the catch we get the error first
296:10 - we can log the eror as well we can lock
296:12 - the error inside the console then we can
296:14 - move on so we can have the toast we can
296:16 - have the error as well to. error and
296:19 - that should be equals to we can send the
296:21 - message as well directly like we can
296:23 - have the loading fail like that we have
296:25 - the loading failed and that should be
296:27 - equals to the message as well so we can
296:29 - have the load chats like that we have
296:31 - the ID over there that should be we can
296:33 - have the load chats and that's how it's
296:35 - going to work and I don't know what is
296:37 - the error over there
296:40 - so I think this cannot be the array this
296:44 - should be the call back function so this
296:46 - should be a function over there like
296:47 - this and that's how it's going to work
296:49 - and everything seems to be working
296:50 - perfectly fine so if we refresh so let's
296:52 - see what happens so there you can see if
296:54 - we just refresh the
296:57 - page
296:59 - so I don't know what happen so let's
297:02 - move on to the go to chat and there you
297:03 - can see now we have successfully loaded
297:04 - the chats and everything seems to be
297:06 - working perfectly fine over there and
297:08 - that's how it's going to work so let's
297:10 - move on to the go to chats and there it
297:12 - seems to be working fine and if we
297:14 - refresh this I think on the refresh
297:17 - that's not working so I think the layout
297:20 - effect has been called before the main
297:22 - use effect and then what do you want to
297:24 - do so after that you can see if we
297:25 - refresh the page now you can see now we
297:27 - won't be seeing the chats over there but
297:29 - if we move on to the main route if we
297:31 - again move on to the goto chat then
297:32 - we'll be seeing the loading chats so
297:34 - there is an error so what do you want to
297:36 - do so you can see initially the context
297:39 - is sending the request to the back end
297:40 - regarding the token to check the users's
297:42 - token validity until then it is calling
297:45 - this code so what do you want to do so
297:47 - we need to create the dependency on the
297:48 - O So once the authentication changes now
297:51 - we want to rerun this code so let's move
297:53 - on and if we again refresh this now you
297:55 - can see it works fine you can see now
297:56 - successfully loaded all of the chats and
297:59 - that's how it's going to work you can
298:00 - see it's working perfectly fine
298:03 - and there's another thing that we want
298:04 - to do is you can see now we want to work
298:07 - on the clear conversation Button as well
298:09 - so we want to work on that so how we can
298:11 - do that so we can create another
298:13 - function we can create the cons we can
298:16 - have the handle delete like that handle
298:17 - delete chats like that so that could be
298:21 - equals to when asynchronous Arrow
298:23 - function and inser this now what do you
298:24 - want to do so we can remove everything
298:26 - we can remove the params so here we want
298:28 - to create a function inside the API
298:30 - communicator and we want to create a
298:32 - middleware inside the back end as well
298:34 - so that we can accept a request and then
298:36 - we can delete all of the chats of the
298:38 - user so let's move on so inside the chat
298:41 - route now what do you want to do so we
298:42 - can create another request over there so
298:44 - we can have the chat routes or we can
298:46 - have the delete over there now let's
298:47 - move on so we can have slash we can have
298:49 - the delete over there so we can have
298:51 - slash we can have the delete and after
298:53 - that let's move on so inside this now we
298:56 - can create another function we can just
298:58 - copy it out we can paste it out so we
299:00 - can paste this function over there we
299:01 - can have the delete we can have the
299:03 - chats over there so that's how it's
299:05 - going to work and after we get all of
299:07 - the token user verification check then
299:09 - we can move on so then we can move on so
299:11 - we can have the user do we can have the
299:13 - chats like this so we can have the user
299:16 - do chats is equals to an empty array so
299:18 - now we can set the users chats to the
299:20 - empty array and that's how we want to
299:22 - work and after we set that then I think
299:25 - we have the type error as well so we can
299:27 - expect the type error so we can have the
299:29 - TS we can have the ignore over there and
299:31 - after that now what do you want to do so
299:32 - after we have the user chats then we can
299:34 - have the await then we can have the user
299:37 - to we can have the save like that and
299:38 - that's how it's going to work and then
299:40 - you can see everything seems to be
299:42 - working fine and here now again we are
299:44 - sending the user chats I think it's not
299:46 - required over there so it's not required
299:48 - and that's how it's going to work and
299:50 - then now what do you want to do so again
299:52 - we can move on to the chat routes we can
299:54 - have the delete chats like that we have
299:55 - the delete chats then we can move on to
299:57 - the API Communicator let's create
300:00 - another function we can copy we can
300:02 - paste it out we can have your delete
300:04 - user chats so we can have the delete
300:06 - like this user chats that could be an
300:08 - asynchronous function this should be a
300:10 - delete request over there this should be
300:12 - the delete then we can have the delete
300:14 - like
300:15 - this so we can have the delete that
300:17 - should be chat / delete and I think yeah
300:20 - it's same we have the chat SL delete and
300:22 - after that now what do we want to do so
300:24 - I think everything seems to be working
300:26 - perfectly fine so it should be unable to
300:28 - delete the chats like that we get the
300:30 - error and then we can move on again to
300:32 - to the chat page and here now what do
300:34 - you want to
300:36 - do we can have the try catch for that so
300:38 - we can have the try catch so inside the
300:40 - try we can have here the wait we can
300:42 - have the delete chats of the user we can
300:44 - have the delete user chats and after
300:46 - that we can have the set messages of the
300:48 - user set chat messages that should be an
300:50 - empty array and after that we can run
300:53 - the toast as well toast. we can have the
300:54 - loading we can have the
300:57 - deleting chats like this we can have the
301:00 - ID as well we can have the ID
301:03 - we can have the delete chats over there
301:05 - like this we can just copy and after
301:08 - everything is successful then we can
301:09 - move on we can have the toast dot we can
301:11 - have the success over there then we have
301:14 - the
301:15 - deleted we can have the deleted chats we
301:17 - can have
301:19 - successfully and then we have the same
301:21 - ID then if we get an error then we can
301:23 - move on we can lock the error we can
301:26 - lock the complete error message then we
301:28 - can move on we can paste it out we have
301:30 - the TOs do we have the error we can have
301:33 - the
301:35 - deleting chats we can defail like that
301:38 - so that could be the error message and
301:39 - now we want to reference this function
301:42 - to this button as well to this button
301:45 - let's move on so let's provide the on
301:47 - click as well so we can have the on
301:48 - click over there and that should be we
301:50 - can have the handle delete chats so
301:52 - let's see what happens if we move on so
301:54 - we have successfully loaded chats and
301:56 - let's move on let's just delete all of
301:58 - the chats let's move on let's click on
301:59 - delete deleting chats you can see now
302:02 - the chats are deled successfully and
302:04 - everything seems to be working perfectly
302:05 - fine and now if we refresh now you can
302:07 - see now successfully loaded chats but
302:10 - here we do not have any chats of the
302:11 - user and that's how you can see it's
302:14 - working perfectly fine over there you
302:16 - can see inside the all chats we do not
302:18 - have any chat and it's working great so
302:21 - it seems working fine and now what we
302:23 - want to do as the next step so there you
302:25 - can see now we want to enable the
302:27 - protected routes inside the front end as
302:29 - well so inside the back end we already
302:31 - have the protected routes if we move on
302:33 - to the chat routes you can see first we
302:34 - are verifying all of the tokens we have
302:36 - generate chat completion we are
302:38 - validating all of that so we have a
302:39 - couple of middlewares but now we want to
302:41 - move on to the front end to verify all
302:44 - of the protected routes of the user so
302:46 - and then we want to create the front end
302:48 - as well of the user so that would be
302:49 - very simple so first thing that we want
302:51 - to do is now we can move on to the chat
302:54 - page so if the user is not logged in and
302:57 - if the user tries to enter this page
302:59 - then we want to move on and then we want
303:01 - to redirect the user to the login page
303:03 - so let's move on to the chat over there
303:05 - so it would be very simple so what do we
303:07 - want to do so we can just again have the
303:10 - use effect code over there we can have
303:11 - the US effect over there and inside that
303:13 - now what do you want to do so let's just
303:16 - call it once we change the Au over there
303:18 - so inste the use effect now what do you
303:20 - want to do we can have if we do not have
303:22 - the O DOT we can have the user if that's
303:25 - null then what do you want to do so then
303:27 - we can have the return now we want to
303:29 - return the user to a new route and to
303:31 - use that we need to use use one thing
303:33 - from the react rout Dom which is a
303:35 - navigate so we have a hook inside the
303:37 - react rout Dom which is a navigate so we
303:39 - can use that as well we can have import
303:41 - something and that should be equals to
303:43 - we can have the from we can have the
303:45 - react R Dom and the some thing is we can
303:47 - have the use navigate so this is a hook
303:50 - that we can use so first thing that we
303:52 - can do is we can have the
303:54 - cons and nigate like this we can have
303:56 - the navigate that should have the
303:58 - reference of the use navigate hook and
304:01 - after that now what do you want to do so
304:02 - after we have so after you can see once
304:05 - we do not have the au. user we can have
304:08 - the return we can have the navigate like
304:10 - this we can have the return navigate
304:12 - that should be equals to SL we can have
304:13 - the login like this so that's how it's
304:16 - going to work so if you move on to the
304:18 - application and if you just click on the
304:19 - log out so there you can see now we to
304:22 - the Home Route but you can see now we
304:24 - want to implement the log out
304:25 - functionalities as well so let's move on
304:27 - so if the user is not logged in so let's
304:30 - just Implement that so before for
304:32 - testing this now we want to implement
304:34 - the log out as well so for implementing
304:36 - the log out let's again move back to the
304:38 - back end so we have the users controller
304:40 - so we can move on to the user routes
304:42 - let's create another route of the logout
304:44 - so we can have the user routes do we can
304:47 - have the get that should be equals to we
304:49 - can have the log out so that should be a
304:51 - log out request and inside the verify
304:53 - user let's just copy this function let's
304:55 - just paste it out and inside that we can
304:57 - have the log out we can have the user
304:59 - log out like that user log out like that
305:03 - this and we have this function over
305:05 - there and inste this function there
305:06 - would be nothing but we would be just
305:08 - removing the cookies of the user so we
305:10 - would be removing the cookies of the
305:11 - user so that's how we can create that so
305:14 - you can see here we created the cookies
305:16 - inside the sign up and inside the login
305:18 - so we can remove the cookies of the user
305:19 - as well so how we can use that so we can
305:22 - use the clear cookie function so we can
305:24 - use this over there so we have the
305:26 - logout route and after we verify all of
305:28 - the details of the user then we can move
305:30 - on we can have the response do we can
305:32 - have the clear cookie and inside that we
305:34 - have a couple of things we have the HTTP
305:36 - only domain of the Local Host signed of
305:38 - the true the path is this and let's just
305:41 - try the login oh sorry let's just try
305:43 - the log out as well so let's move on so
305:46 - it should be we can have the use a log
305:47 - out like this so we have this controller
305:50 - function and let's move on to the API
305:52 - Communicator let's create another
305:54 - request that should be we can have the
305:56 - user log out again log out user like
305:59 - this so we have this function that
306:01 - should be a get request only and it
306:03 - should be we can have slash user slash
306:06 - we would have the log out like this the
306:07 - log out so because the front end cannot
306:10 - delete the HTTP only cookies so that's
306:12 - why we need the back end to just remove
306:14 - the cookies so that's how we want to
306:16 - work and after that let's move on so
306:19 - there now we can move on I think so now
306:22 - we can move on to the header over there
306:24 - we can remove we can move on to the
306:25 - header or we can directly move on into I
306:28 - think we can directly move on into the O
306:30 - context so here we need the log out so
306:32 - after that now what do you want to do so
306:34 - we can have the a wait that should be we
306:36 - can have the user log out like
306:38 - this so I think we have the log out user
306:41 - like this so we have the log out user
306:43 - over there so we want to call this
306:44 - function and after that we'll be having
306:46 - the set messages like this sorry we'll
306:48 - be having the set is logged in that
306:50 - should be we can have the false set user
306:53 - that should be we can have the null over
306:55 - there and after that we want to reload
306:57 - the page as well because once you remove
306:59 - the HTTP only cookies it takes some time
307:01 - it does doesn't immediately get uh
307:03 - removed so it takes some time so we can
307:06 - have the window dot we can have the
307:08 - location dot we can have the REO like
307:10 - that so we can reload the web page so
307:12 - let's see what happens this time and
307:14 - let's see that where we are using this
307:16 - function let's move on to the header.
307:18 - TSX so there you can see now we are
307:20 - using the log out so let's just try it
307:22 - out so if we move on to the application
307:24 - if we again move on to go to chat and
307:26 - let's just move on to the inspect let's
307:28 - move on to console or we can move on to
307:30 - the network let's just click on the
307:31 - logout to see what
307:34 - happens so here we have the log out so
307:36 - let's just click on the log out I think
307:39 - nothing is happening over there so we
307:41 - need to do that so we can move on to the
307:43 - navigation link and there you can see we
307:45 - are not doing anything with the log out
307:47 - so we can put the on click prop over
307:48 - there we can have the on click and here
307:51 - what do you want to do so now we can
307:52 - just run near the props on click and it
307:54 - would be very simple now we can move on
307:56 - to the header you can see now here we
307:58 - are providing the on click so it should
307:59 - work perfectly fine over there let's try
308:02 - it out once again so let's move on to
308:04 - the application so let's move on to the
308:05 - network tab over there let's click on
308:07 - the log out so there you can see now we
308:09 - are logged out and there you can see now
308:10 - inside the O status now we are receiving
308:12 - the message like the token not received
308:14 - so everything seems to be working
308:16 - perfectly fine over there so it's
308:17 - working totally fine and now let's move
308:19 - on so here you can see if we refresh now
308:21 - we do not have any token over there and
308:23 - let's move on to the application as well
308:25 - so inside the cookies now you won't find
308:27 - any cookies so now let's move on let's
308:29 - just try and log in once again so let's
308:31 - move on with the J games let's click on
308:33 - the login so now we should be having the
308:35 - cookies I think we are having the error
308:38 - over there I think there's something
308:39 - wrong with that I think it is admin it
308:42 - it should be the James test.com 1 2 3 4
308:45 - 5 6 so email was wrong so let's try it
308:47 - out with the login so you can see it
308:49 - works perfectly fine now we are logged
308:51 - in and if we now refresh now we do not
308:53 - have any error message and that's how
308:55 - it's going to work so that's all we want
308:58 - to do and now let's move on so you can
309:00 - see everything seems to be working fine
309:01 - in our app ation and now we want to move
309:03 - on so if we again click on the log out
309:05 - now you can see now we are logged out
309:07 - but now you can see if we move on to the
309:09 - chat page over there if we move on to we
309:11 - can have local L 5173 then we can have
309:14 - the chat over there like that so let's
309:16 - move on so now you can see now we should
309:18 - be redirected to the login and that's
309:20 - how it works and you can see that's how
309:21 - it works and everything seems to be
309:23 - working perfectly fine so now everything
309:26 - seems to be working perfectly fine and
309:28 - there are a couple of things remaining
309:30 - to do this inside this application the
309:32 - first is the sign up UI we have the
309:34 - homepage UI and we have the protected
309:35 - routes so we are into the middle of
309:37 - protected routes and let's just complete
309:39 - all of that so let's move on to the
309:41 - login so there you can see if we are
309:43 - logged in and if we move on to go to
309:45 - chat you can see suppose I want to show
309:47 - you an example if we click on the log
309:49 - out and if we again move on to SL we can
309:51 - have the chat you can see now we are
309:53 - redirected to the login page so we want
309:55 - to do the similar thing for the login
309:57 - page as well so let's move on to the
309:58 - login so we want to do same like if the
310:00 - user is already logged in then we can
310:02 - redirect the user to the chat page so we
310:04 - can have the effect over there we can
310:06 - have the effect and inside the effect it
310:08 - should run every time the Au changes
310:11 - then we can move on so here it should be
310:13 - very simple so we can check if we have
310:15 - the auth do we have the user then I
310:17 - think what we can do so we can redirect
310:19 - the user to navigate like we can have
310:21 - the navigate over there SL we can have
310:23 - the chat so that's all that we want to
310:25 - do for the login so you can see now if
310:27 - we move on so I have already registered
310:29 - the navigate so with the help of this
310:31 - now we can move on to the chat so if you
310:33 - move on if you click on the login James
310:36 - test.com we can click on the login so
310:38 - you can see everything seems to be
310:39 - working fine but now if we move on to
310:41 - the login page over there like this so
310:43 - then you can see now we'll be redirected
310:45 - to the chat page so everything seems to
310:47 - be working perfectly fine and now we
310:49 - want to do another thing for the
310:50 - protected routes so let's move on again
310:53 - into the main file app. TSX and here now
310:56 - what we can do so we have the chat page
310:58 - over there and this is the protected
311:00 - route so we can only enable this route
311:02 - so we can wrap this inside a condition
311:05 - so we can only enable this route once we
311:07 - have the Au do we have the is logged in
311:09 - is true and we have the Au dot we have
311:12 - the user property so after all of these
311:15 - things then only we want to enable this
311:16 - route over there so now you can see if
311:19 - we again move on click on the log out
311:21 - and if we again move on we can go to/
311:23 - chat you can see now we'll be moved on
311:25 - to the not found page it means now the
311:27 - user is moving into a page which is not
311:30 - found so everything seems to to be
311:32 - working perfectly fine over there so now
311:35 - this functionality is completed the
311:36 - protected routes let's just work on the
311:38 - sign up as well so we can move onto the
311:40 - login we can copy the complete login
311:43 - page we can paste it out inside the
311:45 - signup because the UI should be same of
311:47 - the authentication of the O screens so
311:50 - that should be we can have the sign
311:52 - up and here as well we should be having
311:54 - a the sign up over there like this so it
311:57 - should have the sign up over there and
311:59 - here we want to do another thing we need
312:00 - another input for for this we have uh we
312:02 - can have the customized input the type
312:04 - should be we can have the text the name
312:06 - should be the name itself of the user
312:09 - the label should also be the name then
312:11 - we can move on we can declare the
312:12 - function for the signup as well so let's
312:14 - move on to the API Communicator so let's
312:17 - just copy the login let's just paste it
312:19 - below that we can have the sign
312:22 - up user like this so then we can have
312:25 - the xl. post that should be we can have
312:27 - the sign up over there like this and we
312:29 - can have the name as well the name
312:31 - should also so we can have the string
312:33 - the email and the password then here as
312:35 - well we'll be having the name email and
312:36 - the password so you can see now it's
312:39 - working fine and the sign up has the
312:40 - 2011 inside that we can have the unable
312:43 - to we can the sign up like this so you
312:45 - can see now we have already defined all
312:46 - of the functions we just want to copy
312:49 - paste all of these functions and change
312:50 - these routes over there now we have the
312:52 - sign up route if the response. status
312:54 - not equals to 2011 unable to sign up
312:56 - then we are just sending the data and
312:58 - now let's move on so now we can move on
313:01 - into the communic I think inside the Au
313:03 - context let's move on let's do inside
313:05 - the signup as well so let's move on so
313:08 - we need to do the same thing inside the
313:10 - signup so let's move on so we can have
313:13 - the data equals to we can have the sign
313:15 - up user like this sign up user we need
313:18 - to provide the name email and the
313:20 - password over there and then we'll be
313:22 - setting all of these properties now
313:23 - finally we can move on to the login
313:26 - sorry to the signup page then we should
313:28 - be having o where is the o uh there is
313:32 - the O it should be the O do we can have
313:34 - this sign up and now we want to get the
313:36 - name as well so we can get the name over
313:38 - there we can get the
313:40 - const we can get the name that should be
313:42 - equals to form data doget that should be
313:45 - equals to the name and now we'll be
313:47 - sending the name email and the password
313:49 - and that's how it's going to work and
313:51 - let's move on so there you can see now
313:53 - we have the text of the login it should
313:56 - be we can have the sign up over there
313:58 - and now it should work perfectly fine
313:59 - and now we have the button it should we
314:02 - can have the sign up over there you can
314:03 - see now we have similar UI we have the
314:05 - sign up we have the name email and the
314:06 - password so this is the sign up so
314:09 - that's how we can do that so we can have
314:11 - the name we can give the name of the
314:13 - Mary like that we can have the Mary we
314:15 - can have a we can have marry we can have
314:18 - the Harry like that so we can give any
314:21 - name like that so then we can have the
314:23 - marry at the test.com we can give the
314:25 - password 1 2 3 4 5 6 so let's just click
314:28 - on the sign up and I think we can move
314:30 - on again so it should be the messages
314:33 - should be we can have the signing in it
314:35 - should be um signing up like this
314:38 - signing
314:40 - up it should be having the signed up
314:42 - once again we can have the sign signing
314:46 - up that should be failed so now we
314:49 - should be having a different ID that
314:50 - should be the sign up here as well we'll
314:52 - be having the sign up here as well we'll
314:54 - be having the sign up so let's just try
314:55 - it out so let's just click on the sign
314:57 - up signing up and there you can see
314:59 - everything seems to be working perfectly
315:00 - fine and you can see now we have the
315:02 - marry that's why we can see the MH over
315:04 - there and now you can see it seems
315:06 - working fine the sign up works now we
315:09 - want to work on the homepage so let's
315:10 - move on let's design the homepage of our
315:12 - application as well so now let's work
315:15 - with the homepage and for the homepage
315:17 - now we'll be using some type of
315:18 - Animation it should be some sort of
315:20 - Animation that we can use inside the
315:22 - typing so that should be a typing
315:24 - animation so we can have the react we
315:26 - have the react over there then we can
315:28 - have the type animation over there we
315:31 - can just use use this Library react type
315:33 - animation and it's a completely animated
315:35 - text Library over there like you can see
315:37 - you can move on to homepage as well like
315:39 - this you can move on to homepage and
315:41 - this is their
315:44 - homepage so then you can move on to
315:47 - their site as well so here we have the
315:48 - demo over there you can move out to the
315:50 - demo you can see this is the demo over
315:51 - there you can write this typing
315:53 - animations as well and that's how they
315:55 - will work so we need to use this type of
315:57 - animations for that and that's how we
315:59 - can use that so let's move on so let's
316:02 - install this Library so we have the
316:03 - react type animation of that so let's
316:06 - install that over there we have the npm
316:08 - install we can have the react type
316:11 - animation over
316:12 - there we need to install that and now
316:15 - let's move on so after installing that
316:16 - we'll be using the component over there
316:18 - you can see this is the component like
316:20 - this so we can use this component like
316:22 - this we can just copy that over
316:24 - there we can just copy here and then we
316:27 - can move on we can paste it out so we
316:29 - can create a shared component once again
316:31 - we can have the typing animation like
316:33 - that so I think let's create a new
316:36 - component for the homepage I think
316:37 - component we can have the tyer like this
316:39 - typer and inside that we can have the
316:42 - typing animation like that or we can
316:45 - typing
316:46 - anim do we have the TSX so we have this
316:49 - component over there and let's just
316:51 - write the ball plate code and after that
316:53 - we can just copy this full component the
316:55 - type animation let's just paste it out
316:57 - here so we have the type animation let's
316:59 - import that and there you can see now it
317:02 - should be used and now after that now we
317:04 - want to provide the text as well so you
317:06 - can see after every 1 second first this
317:08 - should be visible then this then this
317:10 - then this so that's how it's going to
317:13 - work so first that what we can do so we
317:15 - can have the chat with your own AI so we
317:17 - can have the chat with your we can have
317:21 - the
317:22 - your AI then we can move on then we can
317:25 - write built with open AI then we can
317:28 - move on so I have added the Emoji as
317:30 - well then we can move on we can just
317:31 - write something like your own customized
317:33 - chat
317:35 - GPT so that's how we want to work so you
317:37 - can see now we can skip this one we can
317:39 - skip this one and we can give the timing
317:41 - of around we can have your uh 1,000
317:44 - milliseconds that should be we can have
317:46 - the 2,000 milliseconds and that should
317:48 - be somewhere around we can give a same
317:50 - like 1500 milliseconds for that so here
317:52 - you can see we'll be repeating it for
317:53 - the infinity times we have the style so
317:56 - we can give a customized Styles as well
317:58 - so we have the font size of 2m we can
318:00 - give the font size of around 80 pixels
318:02 - with that the 80 pixels of the font size
318:05 - or I think the 80 would be so enough we
318:07 - can give around 60 pixels for the font
318:09 - size then we can move on so I think the
318:11 - color we can give that should be we can
318:13 - the white over there then we can have
318:15 - the display like this we can have the
318:17 - inline block over there and then we can
318:19 - move on we can have the text Shadow as
318:21 - well we can have the text shadow that
318:23 - should be somewhere around 1 pixels we
318:25 - can have the one pixels then we can have
318:28 - the 20 pixels of the Shadow blow then we
318:30 - can have hash 0 color for the shadow so
318:33 - you can see now we have the typing
318:34 - animation now we can successfully move
318:36 - on to the homepage of our
318:38 - application uh so we can move on to the
318:41 - home. TSX over there we have the home.
318:43 - TSX and now we can render all of that so
318:46 - first we can just provide a box over
318:48 - there from the material UI so we can
318:49 - have the box over there and inside the
318:51 - Box we can just provide the width that
318:54 - should be somewhere around we can give
318:55 - the 100% over there we can have the
318:57 - height as well for the container that
318:58 - should be 100% we can also give here I
319:01 - think the flex for the display so we can
319:03 - have the flex over there for this
319:05 - display Flex then I think we can have
319:08 - the flex over there and then I think we
319:10 - can move on we can have the MX that
319:13 - should be we can have the auto they like
319:14 - that we have the MX that should be we
319:16 - can have the auto now we can move on so
319:19 - that's a parent container now we can
319:20 - move on we can render the box here so we
319:23 - can render another box it should contain
319:25 - a couple of more styes so that could be
319:26 - the container of all of these childrens
319:28 - like the typing animation and after the
319:30 - typing animation then we'll be showing
319:32 - an image as well so it should also have
319:34 - the display of the flex then we can move
319:36 - on the width that should be I think we
319:39 - can give the width or we can have the
319:40 - 100% over there we can have the flex
319:44 - direction that should be inside the
319:45 - column bases then we can move on align
319:48 - items that should be I think inside the
319:50 - center over there and then we can move
319:52 - on we can the MX that should be again
319:54 - that should be Auto and I think this
319:57 - parent condition does not require the
319:59 - flex and the MX Auto so that's should
320:01 - only have a pent container and after
320:03 - that inside the first thing that we want
320:04 - to do so we can just render the typing
320:06 - animation so we can have the typing anim
320:08 - over there like this so we need to only
320:10 - run that so let's see how it looks if we
320:12 - move on to this application if we move
320:14 - on to the
320:15 - homepage so let's see how it looks now
320:17 - so if we refresh the page I think it's
320:20 - not over we can have the npm Run we can
320:22 - have the dev so let's see what
320:25 - happens so there we go now you can see
320:28 - now we have the chat with your own AI
320:30 - you can see it looks great over there
320:31 - build with open Ai and there you can see
320:33 - it is working perfectly fine over there
320:35 - you can see now it looks great over
320:37 - there we can provide some styles from
320:39 - the Mt as well for the Mt that should be
320:41 - somewhere around three like that so you
320:43 - can see now it looks great so you can
320:45 - see that's how we want to do that and
320:47 - after this now we can move on and here
320:50 - after this box let's define another box
320:52 - over there so here we have another box
320:54 - for us and inside this box now what do
320:56 - you want to do so first we can provide
320:58 - the SX we can have the width that's
321:01 - should be we can have the 100% over
321:02 - there again the WID should be the 100%
321:05 - then we can move on we can have the
321:07 - display like this so we can have the
321:09 - display that should again be inside the
321:11 - flex box over there and after that here
321:13 - we need to render two images and two
321:15 - images should be side by side on the
321:17 - medium devices and on the small devices
321:19 - it should be on the up and bottom so we
321:21 - can have a flex Direction it should be
321:24 - regarding the theme we'll be having the
321:25 - responsive so we can have for the medium
321:28 - it should be what we can do so the
321:30 - medium the flex direction should be we
321:33 - can have the row and for the extra small
321:35 - we can have the flex direction that
321:38 - should be equals to we can have I think
321:40 - we can have the column like that so
321:42 - that's how it's going to work and after
321:43 - that let's move on so after that we can
321:45 - move on we can have the gap between them
321:47 - that should be we can have the five then
321:49 - I think we can have the M that should be
321:51 - equals to 10 that's enough for that I
321:53 - think right that's enough and after that
321:55 - here we need to render two images and
321:57 - you will find all of these images inside
321:59 - this section so first image that we want
322:01 - to render The Source could be we can
322:03 - have the robot. we have the PNG over
322:05 - there so you need to create this image
322:07 - over there sorry you have this image for
322:09 - the robot let's move on so here we have
322:13 - the robot image so we need this image
322:15 - over there let's move on we have the
322:16 - robot.png here as well we'll be having
322:18 - the robot over there and after that
322:20 - let's move on so here we can have the
322:22 - style for that so we can have the style
322:24 - for the images we can have a width that
322:27 - should be somewhere around we can give
322:29 - the 200 pixels for the width
322:31 - a WID that should be we can have the 200
322:33 - pixels and here what we can do so after
322:36 - the width then we can have the margin
322:37 - that should be we can have the auto over
322:39 - there like this we have the margin of
322:40 - the auto so that's how we want to work
322:42 - after that we'll be having another image
322:44 - of the open AI so we can move on so
322:46 - again we can have the open a.png all
322:48 - again should be the open a like that the
322:50 - same should be there so now you can see
322:52 - now we have two images over there and
322:54 - that's how we want to work and
322:55 - everything seems to be working perfectly
322:57 - fine and after that we need to provide
322:59 - some class names for the opening image
323:01 - because here we will be rotating this
323:03 - image so let's move on so here we can
323:06 - have the class name for that that should
323:08 - be Mage Dash we can have the inverted
323:10 - over there like that so that we can have
323:11 - the white color and after that I have
323:13 - added some CSS for that so let's move on
323:15 - to the index. CSS here we have the
323:17 - rotation CSS you can add the rotate over
323:20 - there and inside the rotate you have the
323:21 - animation and here we have the key
323:23 - frames so from 0° to 359° to 360° so we
323:28 - want to rotate and it is infinite sorry
323:31 - it should be completed within 8 seconds
323:33 - and it's a linear so you need to add
323:35 - this CSS over there it's very simple
323:36 - over there and now let's move on let's
323:38 - just copy the rotate over there let's
323:40 - just paste it out you can have the
323:42 - rotate like this over there so let's see
323:44 - how it looks so you can see now it looks
323:46 - great over there now we have the
323:47 - rotation images and everything seems to
323:49 - be working perfectly fine and after this
323:52 - now we want to create another box so
323:54 - that would be the last box let's create
323:56 - another box so what you want to do so
323:58 - you can also create a new one so we can
324:01 - have the box over there like that and
324:02 - inside this now what do we want to do so
324:04 - we can have the SX prop for that and it
324:07 - should include so the SX prop should
324:09 - include some props like we can have the
324:12 - display again that should be we can have
324:14 - the flex for this so display should have
324:17 - the flex so that it should take full
324:18 - available space then we can have the
324:20 - width that should be we can have the
324:22 - 100% over there for the width then we
324:24 - can move on and I think after that we
324:26 - can move on and after the width then we
324:29 - can have the margin from the X that
324:30 - should be we can have the auto over
324:32 - there like that so that's how we want to
324:33 - work after that we want to have the
324:35 - image as well so we can have the image
324:37 - this time it should be we can have the
324:39 - chat do we can have the PNG I think we
324:42 - have the chat. PNG right so we'll be
324:43 - using the our own image for that so
324:45 - we'll be having the chat. PNG we'll be
324:47 - having the chat bot like that so we have
324:49 - the chat bot and then what we want to do
324:52 - so here we can provide a customized
324:54 - style as well so we can have the style
324:56 - we can have again the display that
324:59 - should be inside the flex we can have
325:01 - the margin that should be we can have
325:02 - the auto over there like that we have
325:04 - the margin of the auto then we can move
325:06 - on so after that we can have the width
325:09 - that should be only 60% of the available
325:12 - space the width should be 60% we have
325:15 - the bottle radius that should be
325:16 - somewhere around 20 would be enough 20
325:19 - pixels would be enough then we can have
325:20 - the box Shadow as well so we need the
325:22 - shadow for this image so the Box shadow
325:24 - that we want to Define could be we can
325:26 - move on and it should have hash 64
325:31 - F3 D5 so we have this chat over there it
325:35 - is 64 F3 D5 then we can move on we can
325:38 - have the margin from the top as well
325:41 - that should be somewhere around 20 you
325:42 - can see now we have this image over
325:44 - there oh sorry we haven't defined the XY
325:47 - positions for this box Shadow as well we
325:49 - need to define the positions so for the
325:52 - horizontal it should be somewhere around
325:54 - we can have the 5 pixels and for I think
325:57 - the vertical again it should be the
325:58 - minus 5 pixels for that and we want to
326:00 - define the blur that should be 105
326:03 - pixels for that that's enough so there
326:05 - you can see now we have the image over
326:06 - there and everything seems to be working
326:08 - fine over there you can see now it looks
326:10 - great over there now we have this image
326:12 - and everything seems to be working fine
326:14 - over there if we move on to the 100% you
326:16 - can say it looks great over there we can
326:18 - have the margin from the bottom as well
326:20 - so we can have the margin that should be
326:22 - from we can have the bottom over there
326:23 - that should be somewhere around 20 once
326:25 - again and that's how we want to work and
326:27 - everything seems to be working fine over
326:29 - there you can see now we have the chat
326:30 - with with your own AI we have built with
326:31 - open Ai and if you open that inside the
326:34 - mobile devices you can say it looks
326:35 - great first we have the screens over
326:37 - there first we have the data then first
326:40 - we have these images and then we have
326:41 - the image as well and that's how we want
326:43 - to work and I think we need to move on
326:45 - we need to provide for the smm as well
326:48 - so we can have the smm over there small
326:50 - devices that should be again we can have
326:52 - the column or we can have the column
326:54 - over there so that's how we want to work
326:56 - so now it should look great over there
326:57 - now you can see now it looks fine but I
326:59 - think the image should be increased in
327:02 - the mobile devices so how we can do that
327:06 - so we can give customized style for the
327:08 - mobile and for this and for the desktop
327:10 - so let's move on so we can use mui for
327:12 - that I think we need to First import
327:13 - some things we need to import the Ed
327:15 - media quiry from the M material and then
327:17 - we need to use the theme as well so we
327:19 - can have the use theme over there like
327:21 - that from the a material so what we can
327:23 - do we can create a media query so we can
327:26 - have the cons we can have the
327:28 - theme and that should be equals to so we
327:30 - can have the use theme over there like
327:31 - that and after that we need to create a
327:33 - variable we can have the cons is U we
327:36 - can have the
327:37 - below medium like this is below MD that
327:40 - should be equals to we can have the use
327:41 - media quiry and inside that we'll be
327:43 - having a Boolean as the return then we
327:46 - can move on we can have the theme dot we
327:48 - can have the break points DOT we can
327:50 - have the down that should be from the MD
327:52 - so with the help of this now we can get
327:54 - if that's a mobile device or not with is
327:56 - below MD so if the screen size is below
327:59 - MD or not so we can get these from
328:02 - this so you can see now it looks great
328:04 - over there now it looks perfectly great
328:06 - over there and everything seems to be
328:08 - working perfectly fine over there and
328:10 - now the final thing that we want to do
328:11 - is now we can move on we can move on to
328:13 - the app component so final thing that we
328:15 - can do is now we can create the footer
328:17 - as well within this application so let's
328:19 - move on so here now what do you want to
328:21 - do so we can move on so inside the
328:23 - components let's create a new folder
328:25 - that could be for the photo so inser the
328:28 - photo let's create a new file that could
328:29 - be be of the photo do we have the TSX
328:31 - over there and now we can add some boil
328:33 - update code for that so footer can have
328:35 - the simple Styles over there you can see
328:36 - here we have the simple Styles we have
328:38 - the div and inside the div we have the
328:40 - style over there we have the width of
328:41 - 100% padding of 20 minimum height of 20
328:44 - V height Max height of 30bh margin top
328:47 - of 50 and then you can see there are a
328:49 - couple of styles for the paragraph as
328:51 - well and after that now we want to
328:52 - provide the link as well for the Indian
328:54 - coders so let's move on so what we can
328:56 - do so here we have the buildt With Love
328:59 - by Indian coders so so we can just
329:00 - provide this span like this so we can
329:02 - have this pan and inside this span we
329:04 - can just use the link directly from I
329:06 - think react Dom so we can have the link
329:09 - over there like this we have the react
329:10 - router Dom over there we can just copy
329:12 - the inter coders we can paste it out and
329:14 - inside the link we can proide the two as
329:16 - well the two should be equals to
329:20 - https we can have the
329:25 - youtube.com/ we can have the Indian
329:28 - coders so we can have this channel name
329:30 - for us so now we have the Indian coders
329:32 - for that and that's how it works over
329:34 - there now we have this link over there
329:36 - and after that now what do you want to
329:37 - do after that now we can provide the
329:39 - class name for the link as well so I
329:40 - think we have the nav link over there
329:42 - like that so we have the nav link for
329:44 - the class name let's move on to this CSS
329:46 - as well so here we have the index. CSS
329:50 - so I think yes we have the nav link over
329:52 - there like this so we can provide the
329:53 - nav link for the class names so let's
329:55 - see how it looks over there so now we
329:57 - have this like this so let's move on
329:59 - let's just render the footer after this
330:02 - now we have the buildt With Love by
330:03 - encoders so I think we are just having
330:06 - some like blue color over there so we
330:08 - can have the style over there we can
330:10 - have the color that should be we can
330:12 - have the white over there like that and
330:14 - now we have built with love B and coders
330:16 - and we can remove this over there and we
330:18 - can also remove the empty space over
330:20 - there which has created so you can see
330:22 - it's looking perfectly great over there
330:23 - now we have the built with love by
330:25 - Indian coders and it looks great over
330:27 - there now what we can do so if we can
330:29 - click on the Indian coders now we should
330:30 - be moved on to the YouTube channel of my
330:33 - YouTube channel you can see Indian
330:34 - coders and you can also please subscribe
330:36 - to the YouTube channel as well I create
330:38 - a lot of videos on the monack fullstack
330:40 - development FB development react native
330:42 - so you can please subscribe to the
330:44 - channel as well and now let's move back
330:46 - so you can see now it looks great over
330:47 - there on the mobile devices as well you
330:49 - can see now it looks great and
330:51 - everything seems to be working perfectly
330:52 - fine over there so now let's move on so
330:55 - there you can see if we now just move on
330:57 - to log out if we can just click on the
330:58 - log out over there now we can just move
331:00 - on we can click on the login we can move
331:02 - on with the login over there so we can
331:04 - login as well and there you can see now
331:06 - we have the loaded chats as well if
331:08 - there would be chats then we would be
331:09 - loading all of the chats of the user
331:11 - then we can again create a new chat like
331:13 - that and I think there's some margin
331:15 - between them right so you can see we are
331:18 - having some extra space between them and
331:20 - now to fix this layout so what do we
331:22 - need to do so we can move on to the chat
331:23 - page so here we have the chat so here
331:25 - you can see here we have the padding of
331:27 - 20 pixels and we have the width of 100%
331:30 - so so either we can remove the padding
331:31 - from this so let's see how it looks so
331:33 - now you can see now we do not have any
331:34 - extra spaces over there and then we can
331:36 - increase the padding within the input so
331:39 - let's move on so let's change it to 30
331:41 - pixels you can see now it looks great
331:43 - over there and everything seems to be
331:44 - working fine and we can provide the
331:46 - margin for this as well the MX that
331:48 - should be we can have the one and now it
331:50 - should work perfectly fine over there
331:52 - like this so we can have the MX that
331:54 - should be we can have the one over there
331:55 - you can see now it's working great over
331:57 - there and everything seems to be working
331:58 - perfectly fine over there
332:00 - and there you can see now we can again
332:02 - move on so I think we can remove this I
332:06 - think we can remove this photo inside
332:07 - the chat page so what we can do so
332:10 - instead of rendering the footer inside
332:12 - the main layout so we can remove the
332:14 - footer we can render the footer only
332:16 - inside the homepage like this so only
332:18 - inside the homepage now we can render
332:20 - the footer as well so we can just render
332:22 - here the footer and that's how it works
332:23 - over there now let's move on so if you
332:26 - move on to the homepage so now we should
332:27 - be seeing the footer over there and we
332:30 - can just increase some margin from the
332:32 - top that should be somewhere around 60
332:34 - like that so now we have some margin and
332:36 - there you can see now it looks great so
332:37 - now you can see now it looks great over
332:39 - there and everything seems to be working
332:40 - perfectly fine and after that I think we
332:43 - can move on to the footer so font says
332:45 - 30 pixels text Aline Center okay so I
332:48 - think we can just keep it default and we
332:51 - can increase the padding to the 20
332:52 - pixels directly inside the paragraph T
332:54 - and that's how we want to work now you
332:56 - can see now it looks great over there
332:58 - now if you move on to go to chat you can
333:00 - see now we do not have the extra spacing
333:01 - left over there and if you enter any
333:03 - chat over there like hi like this so
333:05 - let's click on the send so now you can
333:07 - see now we have the chats over there and
333:09 - there you can see now it looks great
333:10 - over there hello how can I help you
333:11 - today and you can see I have made
333:13 - another adjustment over there inside the
333:14 - chat item so I added the bottle radius
333:17 - that should be two and my y that should
333:19 - be equals to the one um and here as well
333:21 - we have the Bott radius of two we have
333:23 - the gap of two and that's how we want to
333:25 - do that you can see now it looks great
333:27 - now we have a structured layout for that
333:29 - and here you can see with the help of
333:31 - this now you can see our application
333:32 - looks completed over there now our
333:34 - application feels completed you can see
333:36 - it was a great application we integrated
333:38 - with the open AI we created the back end
333:41 - we created the front end we created the
333:43 - perfect design for that you can see
333:45 - everything looks great over there and
333:46 - everything is working perfectly fine
333:48 - like this so congratulations on
333:51 - completing this application so I hope
333:52 - now you have learned a lot from this
333:54 - course you can see we created the back
333:56 - end we integrated the authentication
333:58 - systems here the authorization system
334:00 - we integrated the open a here and here
334:02 - you can see now we have integrated the
334:04 - material UI for the design we created a
334:06 - perfect design for us you can see
334:08 - everything seems to be working fine over
334:10 - there so now let's move on and let's
334:12 - just close this application so now let's
334:14 - mark is completed and let's move on to
334:16 - the summary part and let's discuss that
334:18 - what we have learned throughout this
334:21 - course and now let's see that what we
334:24 - have done throughout this course so we
334:26 - have learned the mon stack so now you
334:28 - know and now you have a great knowledge
334:29 - about about the mon stack that how the
334:31 - mon stack Works how the backend front
334:33 - end integration Works how we create the
334:34 - back end how we create the front end
334:36 - with the react and then first we created
334:38 - the very basic Express node rest API so
334:41 - we created the rest API we showed you
334:43 - the tutorial that how to get started
334:45 - with the mon stack then we created the
334:47 - fully secured authentication with our
334:49 - back end so it is completely secured
334:51 - with the HTTP only cookies JWT tokens
334:53 - authentication authorization adding
334:56 - middle wees for the security and there
334:57 - was so many things and we have the data
334:59 - w checks as well and then we created an
335:02 - openi project similar to the chat GPD
335:04 - clone so it was a huge project we
335:06 - created the chat GPD clone with the
335:08 - monack so then we created the modern
335:10 - design with the material UI and react so
335:12 - muui is a react UI component Library we
335:15 - integrated that with the react we
335:17 - created the animations we created some
335:19 - components we created the chat type
335:21 - layout we created a lot of designs with
335:23 - the react and the material UI and then
335:25 - we created this seamless integration
335:27 - with the Monch with the back end and the
335:29 - front end and we created the integration
335:31 - with the credentials with the xos and so
335:33 - many things so with all of that let's
335:35 - close this project so it was very nice
335:38 - working with you so now let's move on so
335:41 - now in the end I want one favor from you
335:44 - so please like the video because we
335:45 - spend a lot of time building these type
335:47 - of tutorials for you so we spend all of
335:50 - our weekends and all of the things so we
335:52 - don't go outside we just create some
335:54 - projects like that so if this video
335:56 - deserves one like And subscribe then
335:58 - please do that because it gives me some
336:00 - sort of like relaxation that if I'm
336:02 - creating something then I'm receiving
336:04 - something from you guys as well so
336:06 - that's it from my side so I hope you
336:08 - will be successful in the future you can
336:10 - create the mon stag you can apply for
336:12 - the job opportunities you can share this
336:14 - project into your resume as well so
336:16 - let's move on and let's just wrap
336:18 - everything with this
336:20 - project

Cleaned transcript:

in this mstat course nickel will guide you step by step in building a stateoftheart AI chatbot similar to chat GPT through this HandsOn tutorial you'll Master the depths of the M Stack Implement Advanced authentication mechanisms and seamlessly integrate open ai's capabilities into your full stack application by the course's end you'll have a production ready scalable and secure SAS chatbot PL platform underpinned by the latest in web development best practices hi everyone my name is Nel and welcome to a usest project on a channel so in this tutorial you will Master the monack and you will build a fully secured AI software as a service project with a mon stack so this is an AI chatbot built with the open a and the mon stack so users can ask their queries and their doubts to the chatbot and chatbot will come up with an answer so this is similar to theat chat GPD as well so this application includes a fully responsive web page with a modern design so it is completely responsive on any screen size you can check the responsiveness as well and this application starts from the home screen so anyone can log in and register and they can start their conversations with the chat B so they just need to click on the login they can provide the credentials over there they can click on the login and after that the user would be logged in and we would be restoring all of the chats of the user with the chatbot and the conversations would be stored in the database so anyone can access their chats any time so you can see this is a UI for the chatbot and this is similar to the chat GPT like thing you can see if you ask any question like show me how can I declare variables in JavaScript so this chatbot will come up with an answer and it will also show you the code blocks as well so if you need any code blocks so it is capable of showing all of the code blocks to the user and the users have the functionality so they can clear the conversation with the chat Bo as well so they just need to click on the clear conversation and all of the chats of the user would be deleted and the user session will be active till the 7 days so we'll be storing the cookies inside the browser we'll be storing the HTTP only cookies and we'll be storing the tokens inside that and they can't be accessed by the JavaScript so they cannot be accessed by the JavaScript so they can only be accessed via the back end so users do not need to log in within the 7 Days of logging in so after only 7 days they are required to login again to generate a new token and we'll be using the openi conversational model GP 3.5 turbo and4 and on every chat message the user needs to verify their session and the authorization details as per the security because the security is on top priority so that's the demo of this application that we have created and this is our homepage the user can move on to the register page as well so sign up will look similar to the login so this is all for the demo and now let's understand the text TX that we'll be using so we will be using the nodejs express for the back end for creating the rest API and we'll be using the mongodb database for storing the data efficiently and on the front end side we'll be using the V for fast Dynamic and reliable application and for the authentication and authorization we'll be using the password encryption using the BP we'll be using the jwd Json web tokens and their authorization we'll be using the HTTP only cookies which can only be accessed by the server and we'll be using the validations as well we'll be using multiple middleware checks for the security and much more and for the design and the UI for this application we'll be using the material UI Library which is the best UI component Library out there for react and we'll be using the context API for the re react for providing the authentication as authentication provider as a rapper for whole application and with integrating all these Technologies we can build a modern fully secured and a full stack AI chatbot similar to the chat gity service with mon stack and with the openi integration we'll be using the openi for chat completions with the nodejs and we will take care of the security measures for this application and will take care of the API keys that are being kept as a environment variable and all of these things working with the open Ai and we will explain each and everything that how you can integrate the openai with a M Stack application and in terms of the scalability this application is completely scalable to anything so in future if you want to integrate the image completion audio completion video generation as well so this application will work completely fine with all of these things so react and the nodejs is completely scalable and and our back end is completely scalable for that and if you want me to scale that application to create the image completion audio generation and video then please comment down within the video and I will help you out so I think that's enough for the short introduction and let's get our hands dirty into testing this application and seeing the demo once again and then we will move on into the project so let's move on to the project once again so you can see this is our homepage we are using the animations over there we have some animations we are just giving some designs over there and we have built with love by Indian coders so this is my channel this is my YouTube channel and there you can see the login screen is there the signup screen is there so the user will be logged in and they can ask any question like we can send hi over there to the chat bot and the chatbot will come up with an answer like hello how can I assist you today and if the user refreshes the page so the user session will be active till 7 days so user does not need to log in again you can see now we have a message of loading chats so on every refresh all of the chats of the user would be restored and the users have the functionality of clearing the conversation as well so with the help of this they can clear the conversations and it's completely responsive so you can open it in any device like this you can see you can open it in any device you can see it will work perfectly fine over there and then the user can move on it is completely secure and it is completely responsive over there they can click on the login as well so you can see as for the design it is completely responsive and it is completely secure and you can check the cookies as well for the user so once the user locks in so the cookies would be stored there you can see now we have the authentication token so these cookies are HTTP only cookies so they cannot be accessed by the JavaScript so this is a complete demo for this application and now we will be moving on into the project so have a cup of tea or a coffee and let's start building this project and yeah I know now you want to build this project but before that I want to introduce you to my YouTube channel so if you are new here this is my YouTube channel and I create the videos on the web development so I request you to please like this video and please subscribe to the channel as well because it keeps me motivated to create the videos like this and it helps me now that's enough for the introduction and now let's move on into the project hi everyone and I welcome you all to the course so in this section now we'll have a deep introduction that what exactly are we going to do and what technologies that we'll be using and we'll be having the technical overview of the concepts as well so let's start so what exactly are we going to do so we are going to build our own AI chatbot with the help of open AI so it's a AI chatbot so that's why we are using the open aai and we all know about the openai platform so almost all of the modern AI applications are built and hosted on the open AI so we are also going to create around chatbot it is similar to the chat GPD so we are going to create that with the open Ai and it is a full stack application so each and every record would be stored inside the database and it can have the correct operations of the database as well so we are going to create a chat gbt type application with the open Ai and now let's just move on let's just understand the technical overview of the course that what technologies we'll be using that why should we use the Technologies if we have other Stacks as well so let's just understand about these so now let's move on and let's just understand that what exactly is the month stack so mon stack is a comprehensive and Powerful web development framework that combines four key Technologies the mongodb express react and the node so it's not exactly the framework but it's a collection of JavaScript technologies that work together to make a full stack web development environment so mongodb serves as the database system allows the user for the efficient data storage and retrieval Express is a backend web application framework that manages the routing the server aspects the metal WS throughout the nodejs application we have a react which is a front end library that enables the creation of dynamic and interactive user interfaces and we have the nodejs which is used on the server site to execute the JavaScript and to handle the request and manage the applications backend operations so it all includes the mongodb express react and the node and it creates the full stack web development environment and the integration of these Technologies enables the developers to construct modern full stack applications effectively and efficiently with using the one single code base which is the JavaScript so all of these Technologies uses the JavaScript as their internal code base so we'll be using JavaScript only to create a full stack application with using the mon stack so now let's just understand that why should we use the mon stack so we have other Frameworks as well that can be the nexts T3 stack it is currently in the demand as well like the mon stack we have the lamp stack as well with using the PHP and we have golang as well so why should we use the mon stack so let's just understand that why should we use this so first option that we have is the full stack compatibility so mon stack offers you the full stack compatibility so it covers both frontend and backend development using the JavaScript and this leads to a consistent code base and it makes it easier to collaborate and switch between different parts of the application whether that's a front end or whether it's a back end and now let's move on so we have the modern web application development so it's a completely modern development with using the react which allows the creation of dynamic and responsive user interfaces while the Express and the node handles the backend operations and it's a high performance backend services with using the node and the express and currently mongodb is the most used database for now so it's a modern fullstack web development and we have the scalability as well so nodejs which is used in the monack is known for the scalability it can handle a large number of simultaneous connections efficiently with using the event Loop and and it makes it suitable for applications with growing user bases and same with the react so you can create any type of application with the react and now let's move on so we have the realtime applications as well so Monch offers you the realtime applications as well with using the sockets with using some chat applications and all so we have a completely realtime application so we are not going to use the socket inside this application but I'm just explaining you the examples that why should we use the monack and now let's see we have the crossplatform so monack can be used to develop web applications that works across different platforms and devices so you can also use the monack with the mobile devices as well what you can do so instead of the react you can use the react native for building the UI part and now we have the open source so this is the last feature that should be use the mon stack so all components of the M are opensource Technologies so you do not need to pay anything because the mongod DB is like a premium purpose so if you want to use the mongod DB then there's a very nominal charge but but only in the production and during the development you do not need to pay anything to the mongod DV and you have the react which is open source the node and the express they open source applications and you have the access to their source code as well so these are the options that help us to understand that why should we choose the mon stack over other different Frameworks and now let's move on and let's just again have a very deep introduction about this course so what we are going to do so we'll be having a modern a project which will use the open a API so we are going to use the openai API to create an AI and realtime chatbot and it is similar to the chat GPD so the application is a full stack application which stores the users chats in a database to keep track of the conversations but a user can delete them any time so we have a CED functionality of the users as well in which we'll be having the users we'll be having the chats of the users and user can delete their chats as well anytime and the UI is capable of showing the the code blocks as well if requested by the user so as you saw in the demo so we can also show the code blocks to the user as well with this project so it's a modern AI project and we'll be using the advanced authentication and authorization system with the realtime chatbot so we'll be using the JWT tokens the HTTP only cookies and these cookies would be stored inside the users browser but they won't be able to access that and they need to send those cookies once they request for a new chat so it's a completely secure and modern application with the modern a platforms so now let's move on and let's just see that how we can start building this project and now we can start building the back end of this project so now let's move on so first step that we have is to set up the note express application with the types script so this is our first step for building this application so now let's move on to the coding part so for quick start for this course so I'm going to provide you the link inside the description so it's a GitHub link so you can directly move on to the GitHub link and then what you can do so you can download this source code and then you can paste that into your folder so you can move on you can just copy all these files and then you can paste them into the visual studio code so I have opened the folder in the vs code which is a m opening I chatbot so let's create another folder that can be the quick start for the back end then we can paste all of these files here so now I have these files over there and let's start building this project so this is a overview so now after just pasting all of these files now you can move on you can press contrl and J on your system if you're on the Windows you can press control and J so you need to just open the terminal so you can move on to the back end folder over there and then you can press the command of the npm install so it will install all of the dependencies that are required so let's start moving on so here we have the source file and inside that we have the index.ts so here inside that you can see we have a lock statement like this is a starter kit for this amazing project with love binding encoders then we have the envirment file as as well and inside there we have a couple of Secrets couple of the we have the database URLs as well we have the cookie secret JWT Secrets then we have the package.json as well and inside the package.json it contains the information about our back end you can see the name of the application we have the back end over there we have the main we have the index.ts it is there inside the source with the type of the module then we have the scripts as well so we have the dev command and we are going to use the concurrently package so it's a open source npm package that we can use so it allows you to run multiple commands inside the scripts inside the terminal so first we are going to compile the typescript to the JavaScript in the watch mode then we are going to run the compiled version of the JavaScript then we have the build command as well so it is currently same so after the build I think that could be the Run command so it's a run command or it can be the start command over there and for the build command I think we can move on we can have a new command that could be for the build so we have the build command over there and inside the build command now what do we need to do so build command will be just having the TSC which will compile the Javas which will compile the typescript to the JavaScript so here we have the build command over there and that's how it's going to work and after that you can see now we have the start command which will start the production ready application which will start the compiled version with the note index.js then we have the test command as well and this is not required so what we can do so we can remove the test command over there and after that you can see there are a couple of dependencies that we'll be using the first one is the BP which is used for the password encryption and comparing the decrypted password then we have the concurrently package which is used to run multiple commands concurrently with have the cookie passer which is used to set cookies directly from the back end to the front end we'll be using the course package which enables the cross origin resource sharing which means like you can make a request to a different server and there won't be an issue we'll be whitelisting that thing over there we have the EnV to use the EnV files over there we have the express application over there we'll be using the Express package we have the validator for the express so it means now we'll be having the data validation checks as well before moving on to the database we have the Json web token for the JWT tokens we have the mongos which uh which is a package which is used to work with the mongod DB we have the open AI Library so we have the open a library to work with the open a systems and now let's move on let's have the configuration file of the typescript so here we have the configuration file and here we have the error we can just move on we can have the es I think we can have the node next to over there like this so I think we can move on we can have the next so the error would be gone and now you can see inside this we include all of the files for the typescript which are into the source folder so inside source inside any of the subfolders so if you find an ATS file so it would be compiled inside the build directory and this is the build directly which is the disc and this is a build directory which is a disc so you can move on you can create a new folder that could be for the disc and inside this file the new compile file would be created so that's how it's going to work and after that what you can do so you can just run the npm Run Dev so first time you should get an error your compiler would not find the dis index.js file but after you compile then it would create the index.js file then you can again move on you can clear the screen then you can again press npm run Dev now you will see the lock statement over there which is this is a starter kit for this amazing project with law ban coders so with the help of this now we have created the very basic setup of our application and now we want to move on so you can see now we just have the lock statement now we can remove the lock statement and now before moving on to the next steps what I'm going to show you is I'm going to show you that how to create the basic node and express application with the typescript so we are going to create the very basic node and the express application so we'll be using the routing with the express so we create the very basic application so let's move on so how we going to do that so first we want to import the express so we can import the express directly from the Express package so that should be from the express then we can move on what we need to do then we can just provide the const we can have the app variable so that should be equals to the express so now the app variable holds the functionality of the express application and now what do we want to do so after that we want to open the development server as well of the application we can have the app we can have the listen we can have the app. listen and inside the first parameter we need to provide the number of the port so on which Port we are going to create the application server so suppose that can be the 5,000 so it would open on the Local Host Port of the 5,000 and then we would be having the call back as well after that so inside the call back what we going to do so we can have the lock statement we can have the console dot we can have the log so that should be equals to what we can use over there we have the console.log that should be we can have the server open so we have the lock statement as well so you can see once we save this file so node modon would dedu the code changes then it will automatically rerun reopen your development server you can see now you see a file which is a server open and everything seems to be working perfectly fine so this is a very basic application but this application does not accept any of the route so let's create the routes as well and some middle Wars as well so what we're going to do here so first we need to register a new route that should be we can have the app. get request so if you want to create a get request so if you don't know about this type of requests like the get post patch put delete so I'm going to show you as well so there are four type of requests which are mainly used inside the backend velopment so there are four type of requests which are mainly used inside the backend development so these four request are so first request that we have is the get request it means like we want to get some data from this backend or from the database so that's why we send the get request and then we have the put request in which if we want to update or modify or mutate some data then we use the put request and there are are post request as well like if you want to send some data like if you want to create a new blog post or something so that's we use the post request and there's delete as well so we have the delete so I think the spelling is wrong so we have the delete request as well so inside the delete request if we want to send some data to delete something so that's why we use the delete statement over there so these are just the HTTP verbs for incoming request so these are the major four HTTP verbs that we'll be using and after that now what do we want to do so now we want to have some routes over this application so now we want to generate some endpoints in which we can make a new request so first endpoint could be we can have the app do we can have the get so get directly you can use directly the app.get over there then you can provide here the URL so URL can be slash it means the Local Host 5,000 SL nothing and if you provide the hello over there suppose that going be the hello it means now you want to make a request on Local Host 5,000 /hello and after that what you need to do so you can move on so you can have a call back function so inside the call back function you have the three parameters the first is the request second second is the response the third would be the next so these three are the call back parameters that you get over there and these three call back parameters have a reason the first is the request object so if the front end or client has requested you something so it is there inside the request and we have the response as well response means if the client has requested something then it's a duty to send back some response so that's why we use the response over there and we have the next as well so next is used to move on to to the next available middle WS so all of the middle WS that we Define so these are just the middle WS inside the express so Express handles it as a middle W so if you don't know about the middle W so after this chapter now we'll be having the deep understanding that what is the middle wave so middle W are just the functions which handle the request so this is also a middle W so next is used to move on to the next middle W this is a simple route and you can see suppose you make a request on/ and if you want to send something to the client then you can use the the return statement then you can have the response then we can have the send you can have the response. send if you want to send some static string over there that can be weaken at the hello it means once you make a request to app.get /hello it means now you will be receiving the hello over there and for testing that you can move on you can download the postman so Postman is a API testing platform for testing any type of API that could be the graphql API that could be the normal API so you can use that over there and after that now what do we want to do so let's make the request so we can add the HTTP that could be the Local Host the port of 5,000 SL we can the hello so let's see what happens if we make the get request on this Endo so let's just click on the send so now you can see now you received the hello over there so it means everything seems to be working perfectly fine you can see now you are making the request to the hello it means now you are getting the response as well so you can say this is a get request but if you send the post request over there now you won't receive anything if you click on the send you can see error cannot post this because now this route is not registered over there so you are registering only get route so it will only work with the get and now let's just use the post as well suppose I change this to the post over there suppose that could be the post and mainly the post is used to send some data along with the request so we send some data with the help of the body so inside the body we can send these data like the form data if you want to use the forms we can have the binary data the raw data and here inside this application we'll be using the raw and we'll be using the Json object we'll be using the Json so for the input output for this application we'll be using the Json type of data so let's just send some Json data like that can be the name so name can be that should be equals to we can have the Nik over there it's my name so let's just click on the send so you can see if you just click on the send of the hello so you can see if you will move on if you will just click on the send you will receive the hello over there because now you are doing so you can see you are just returning the response. send which is a hello but if you want to read this data like whatever data that the front end or client is sending so if you want to read this data you can move on so you need to add another middleware of the express you need to add another middleware so which is we can have the app do we can have the use so we can have the app do use so app. use is used to define a middleware and the middleware that we use to define is the express we can have the Json so it tells this application that will be using the Json for the incoming and the outgoing requests for this application so it will pass all of the incoming data to the Json so after that you can move on you can just lock something like you can have a log that should be equals to we can have the request so you are sending the body so you are sending the body over there right so you can have the request do we can have the body and you are sending the Json data it will be passed to the Json then you can just directly access the key of the name you can have the response body do name if you click on the send so let's see what happens this time so if you move on if you just click on the send you can see now you see the nickel over there inside the terminal so everything seems to be working perfectly fine so this is a post request and now let's just understand the put request as well so put is also same that you send some data directly from the front end so put is just a verb in which it is used to modify something into our back end suppose that can be the database operation modify some socket and all so it is used for the put so it works same so if you use the put over there it also accepts the data as well if you click on the send then still you will see the nickel over there and that's how it's going to work and after that let's move on let's have a delete as well so we can have the delete so delete also works same so you can send along some data as well with the delete if you click on the send if you just click on the delete if you just click on the send now you will be seeing the Nik over there so it is same but the put and the delete and the get there is some something so you can say this was a static route it means now that's a static route that can be the hello but what if there are millions of users inside the database and you want to access only one users record then how can you do that so there are two options first you can send some data so inside the data you can send the ID of the user inside this and then you can fetch the user directly from the database then you can send the response but the second operation would be instead of sending the ID into this you can send the ID into the URL so that would be a dynamic route so inside the URL you can send the ID so suppose that can be SL hello suppose that can be slash we can have the user that can be/ ID of the user that can be 1 2 3 4 5 it means now you want to fetch the record of the user and the ID of the user is 1 2 3 4 5 that can be the ID as well that can be the username as well so let's move on so if you want to accept the dynamic route it means now we don't know that what would be there after the user then there is one thing inside the express which is known as the dynamic routing so that could be app. delete SL we can up the user because the base URL structure has a user then you can declare a parameter inside the endpoint that could be colon that can be the ID so this is the parameter now so after the user if there's anything in so after the user if there is anything inside the URL then it would be stored inside the ID so this is a variable now so now what you need to do and to access this ID you can move on you can have the request to we can have the params and inside the params you will get the ID over there so you get the ID over there inside the params so let's just see so if you just click on the send you can see now you got the params ID which is you can see now you got the 1 2 3 4 5 and there you can see this is the ID you can name it whatever you want but if you name is like user ID or anything like that so you need to accept same thing over there you need to accept the same thing because this is a variable and this cannot be renamed here so we have the request. ps. idid if you just click on the send you can see that's a dynamic request so you can see this was a very simple application and this was a very basic tutorial of using the express with the nodejs you can see we created a couple of routes we created Dynamic routes and you can see we got the param ID we got the data as well directly from the client so you can see that's how we can create the applications with the monag with the nodejs and now let's move on so now this was a very basic application and now we are going to remove that so what we're going to do so we we going to remove this request over there and we want to remove this as well so you can see now we just have the app. use we have the express. Json we have the middle be over there we have the middle be and you can see that's how it's going to work and there we have the connection we have the connections over there and listen n we have the connections and we have the listen not over there and that's how it's going to work you can see now we have the connection and listeners now we have this now we have the Edition and now let's move on let's just create some folder directories as well inside this application so inside the source now what do we need to do so first we would create the folder for all of the models inside this application so what models do we'll be having so we'll be having the models over there so we can have the models over there we have the models and then we can move on so after the models then we want to create another folder for the routes so instead the routes we'll be having all of the routes of this application then we can move on then we can have the controllers as well so here we have the controller functions so these are the functions which are the Handler functions so we create the functions so we create the route end points inside the routes and the controller functions would control all of the incoming API request then what do we need to do then we can create another folder that could be we can have the utils over there so these are the utility functions and then we would create another folder that could be for the config as well which is used for the configurations inside this course so you can see now we have created the very basic setup of this application so if you see the first step over there we have created uh we have seted up the node express application with the typescript and everything is going to work perfectly fine and now we want to move on to the next step which is integrate the mongodb database connection inside our application so it would be so it would be very simple so what we need to do so after logging on into the mongod DV now you can move on you can just open this drop down you can move on you can click on the create project so with the help of this you can create a new brand new mongodb project with this and after that you can see now you want to name your project as well so what would be your project name so you can have the M we can have the AI we can have the chatbot over there so we have the name of this project then we can click on the next and after that we can just uh skip these things then we can just directly click on create project so it will create the brand new mongodb project for us and after that it will ask you for a couple of questions as well after that so first you can see first we have a screen of the deployment so now we want to deploy a database so here we'll be using the Cloud version of the mongodb so we won't be installing the mongodb and Compass over there to create the CMS type but here we'll be using the cloud version so we can just directly click on the create and after that you can see there are three options for us we have the M10 option which is 0.08 per hour and you have the storage of around 10 GB you have the 2 GB of RAM the memory then you have the two virtual CPUs then you have the serverless approach as well which is $0.10 per 1 million RS then you have the storage uh sorry it's a type of scalable database you have the storage of up to 1 TV you have the auto scalable Ram Auto scalable virtual CPUs then there is free version as well which is the m0 which is used for Learning and exploring the mongodb in a cloud environment so we'll be using the m0 as well and I will keep these settings as default now we will just click on the create so now we'll be creating around mongodb Cloud deployed version database and it is asking for a couple of things over there we can just click on the verify so let's see what happens bicycles we can click on the verify now we are verified now we can move on so there we have a security quick start as well so inside this it is very required thing you can see now you want to provide the username in which now we want to connect to this database so username can be we can have the anadani over there we have the anadani for the username then we can click on autogenerate secure password so it will just generate a secure password for us then we can copy that password somewhere so we can copy that password where inside the EnV so for a temporary now I'll be using this password over there now you can see now you can just click on create user so with the help of this now you'll be creating your brand new user and after that you can see now you have the my local environment Cloud environment so what you need to do so after that you just need to click on finish and close and then you can move on to the go to overview and after that again you can move on one time to the network exess so only from this IP address so this is your IP so only from this IP address now you are going to connect to this mongod database but if you want to allow it from anywhere you can click on this button allow access from anywhere then you can just click on the confirm so with the help of this you can have the allow access from anywhere so now you can connect to the mongodb database from any network from any IP address now you are set it up and ready now you can just click on the database and then you can see now if you click on the connect and there you can see after clicking on the connect then you can move on you can click on the drivers and then you can just copy this URL so here you have the connection URL and from this URL now you are going to connect to this mongodb database so you can move on you can just copy that URL over there and there's a note as well you need to replace the password for the anadani user so you can see we have copied this password and do not use my password because I'll be changing this password after creating this video so what you're going to do so you need to copy this connection string you need to paste that over there inside the mongodb URL so now you have the connection string over there and instead of this password you need to use this password over there so you can cut this and you can place this password in place of that and then you can see now you want to provide the database name as well so after this slash now you need to provide the database name that could be we can have the test or we can have the we can have the chatot over there we have the chat bot like this so this is a mongodb URL it is set it up and ready and now to use the environment files and the environment variables inside our application so there's one thing that you need to do so you need to import something from the en EnV import something from that should be from the EnV and the something that you want to use would be we can have the config so you need to import the config and then you need to run the configuration of this so you just need to run the configuration and with the help of this now you can connect to the mongodb database securely and everything seems to be working fine and after that inside the source you can create another folder that could be we can have inside the source you can create another folder that could be we can have the DB and inside the DB you can just create a new file that could be we can have the connection do we can have the TS and after this now what do we need to do so here we want to use the package to connect to the mongodb database and if you don't know about the mongus you can just directly move on to the mongus so first I'm going to use the test profile over there so that should be we can have the mongus over there so it's a odm which is object data modeling with the mongodb so elegant mongodb object modeling for the nodejs so you can see it is used to write the mongodb validation casting creating business logic B plate and all the things you can see first you need to require the mongos this is a complete setup of the mongos you can say in just five lines first you want to require the mongos then you want to connect to mongodb URL you can provide the connection string then you create a model that could be const Cat that should be mongos model the name of the model and then it will be created a collection so the collection would be created as a cat then you have the name that should be the string and then you can see now if you want to create a brand new cat you can have the const you can have the kitty over there that should be a new cat and then you can provide the name inside this because the name was required you can see the name was there so now you can see after that you can have the KY do save so you just need to call the save function directly from the mongos to save a record inside the database and it is completely open source and it completely free and it is very easy to work with so now let's move on so here we want to just export a function from which we can connect to mongodb database and after that we have the connect to database and this is an asynchronous function so we need to write the async over there and that's how it's going to work because it's a database operations so we need to wait for this task and after that we need to import something from the mongus to connect to the database so you can move on to the top you can have the import statement you can import something from we can have the mongus over there we have the mongos and something that you want to use would be we can have the connect so connect function is there inside the mongos to connect with the mongodb database and after that now what do we want to do so you can move on so inside this what you need to do so you can move on so you can have the track catch block over there you have the track catch block and there you have the error and after the try now what do we need to do so we just need to await for this we need to await for a task which is we can of the connect so inside the connect you need to provide the URI as well so the URI is already there inside the environment you can just grab this mongod URL you of the process the current process of the nodejs dot we can have with the environment so envirment variables of the current process dot we can have the mongodb URL so it will help you to grab the mongodb URL and the connect function will connect to the mongodb database and after that you have the catch error so if you get an error then you can have the throw we can have the new error so you can have the throw a new error or that should be equals to we can you can use anything like we can have to throw new error that should be equals to we can have we cannot connect to MB like this so we can have the Mong TB like this so you have the new error over there like that and everything seems to be working fine and you can log this error as well that what was the error so you can have a console.log that should be the error so that's how it's going to work and I think what you can do so instead of the default export you can remove the export default from there now you have this function we can create another function if you want to disconnect from the database and it will help us inside the error handling so we can create another function we can have the sing we can have the function we can have the disconnect we can have the disconnect from we can have the DB as well and we do not need any param over there and this will also be an a synchronous function and after that now what do we need to do here so inside this we need to move on we can have the try catch once again so inside the try now what we need to do we can add the weight and we want to import another function from the wongus that could be we we can have the disconnect and it is also a promise I think right then we can have the await we can have the disconnect so if anything wrong happens within our application inside our application then we'll be disconnecting our application from the database as well and that's a secure approach because we want to create a completely secure application so we want to take care of the security parameters and after that if we get an error again we can just move on we can just have these errors over there we can just log the error connect to mongodb and these are the functions that we want to use and after that what do we want to do so after that we can just export these functions so we can export these functions directly from here we can have the connect to database then we can have the disconnect from database so that's how it's going to work and after that now what do we need to do so I think we can just manage this application folder structure once again so this is a root file of the index.ts now we can create another file over there that could be we can have the app dot we can have the TS and now all of the applications code would be then handled inside the app TS so let's move on so let's just copy all of that and let's just paste that inside the appts so only this only till this the app. use so all of the middle and all would be defined inside the app. TS and then we'll be having the export I think we can have the export we can have the default and that should be we can have the app over there we have the export default app and then we want to import the app directly from here we can have the import I think we can just directly use the app so we'll be using the import app from app and there you can see now we have the lock statement over there and that's how it's going to work and then you get an error so you need to write the GS over there you uh you need to write the GS like this and you can see now your application server is over open and everything seems to be working perfectly fine so you can see now we are managing our application code now we are dividing the code to increase the readability of our code and everything seems to be working perfectly fine and now we only want to open the application server once our application is connected to database so first we need to have the connect to database over there connect to to database and after that only now we want to open the development server so we can move on so we can have the app. listen over there app. listen over there then we can have the catch as well so we can have the catch if we get an error then we can move on we can have the console do we can have the log we can have the error over there and after that in the end we'll be having some error handling as well that will be stopping the terminal as well so we need to use that as well so you can see now our application is connected to database and you can see now we do not have any and after that we have the server open and we can have the connected so I think we can use this string over there you can see now we have the string over there we have the server open and connected to database so you can see now we have the handshake as well so that's how we are going to working so you can see now we have defined the port number as well so suppose if this port is not available inside this so we can move on to the application inside the invironment we can Define the port over there as well we can have the application Port so that should be we can have the 5 ,000 for the port and then we can use the port as well so inside the index.ts once again so we can use the port as well so before this we can have the const the port and that should be equals to we can have the process we can have the environment do we can have the port over there and if the port is not available then only we want to use the 5,000 over there so we can have the port instead of the 5,000 directly so that's how we are going to working so that's how we'll be working with the node and the express application and there you can see now we have the message of the server open and connected to database and everything seems to be working perfectly fine so now we have connected the MP database inside our application and it is working totally fine and now we want to see The Next Step which is now we want to register or login on the open portal and we want to get the API Keys directly from the so you can see now we'll be creating the application from open we'll be using their API so we want to get the API keys for that so what we need to do so you can move on to the openi platform you can move on to platform. open.com you have the apps you can see all of the modern apps are created on the openai then you can move on you can just click on the API because we'll be using the integrating we'll be using the integrating the openai models into our application so let's click on this and there you can see after that we need to use that what type of API that we'll be using and after that now you need to move on to the personal section you can move on to the profile and after that you can just move on you can have the view API keys and after that you can create a new API key as well so you can just click on create new API key you can provide the name as well so we can have the AI we can have the chatbot over there we have the AI chatbot you can just click on create a secret key so after that what you need to do so there would be the keys generated and you need to copy this key because you won't be able to view it again you can just copy that and then you can just paste that into your envirment file and do not use my secret again because I'll be just deleting this secret after recording this video so that's my open a secret as well and there you can see that's how it's going to work and then you can just move on and you need a paid account as well for using this so you need to provide a credit card or the debit card but it is very nominal charge so you so you hardly pay for this because it is very nominal charge for using the chat GPT over there and after that you can just close that because now you got the API key but you can move on to the settings as well so you can get the organization ID as well so you need this as well you can just copy that you can just again paste that over there we can have the open AI we can have the organization we can have the organization we can have the open organization ID that should be this ID over there we have this ID over there so now we need this ID as well for connecting to the open and that's how it's going to work so we just need the secrets and the organization ID and that's it so now we want to move on so now you can see now we have registered and the logged in on the open AI portal now we got the API Keys now we want to move on to the development so now we want to build a secure authentication with the web tokens with the HTTP only cookies and we want to create some end points for us so let's move on and let's just start building the CPI endpoints for our application so let's move on so here you can see first we need to move on to the app. TS and here we want to define the middle WS that we'll be using so first you need to just stop the terminal so either you can open another terminal as well you can have the CD and inside the backend folder you can install a dependency which is a Morgan so we can add the npm install we can have the Morgan over there so what Morgan package will do so it will just dis so it will just uh give you some log description that what type of request was handled and what was the response and what was the status code so we have the Morgan as well so what we need to do so we can import this we can have the import we can have the Morgan over there that should be from we can have the Morgan like that we can have the Morgan over there and here what we need to do so after this Json then we can have another middle that could be app. use then we can the Morgan over there we can have the Morgan and after that now what do we want to do so here we have the Morgan over there so after the Morgan then we need to provide a string that could be we can have the dev over there we have the Morgan that should be equals to the dev and after that if we make an API call to this back end then we'll be seeing the lock message as well so we want to remove it inside the production so once we build this application we want to remove this as well so we only want to use this inside the development mode and once we enter the production then we want to remove this as well and after that now what do we want to do now we want to generate the middleware over there so now we want to create the middleware for our application we can have the first middleware we can have the app. use that could be we can have the API structure for our application that could be Local Host 5,000 or any domain slash we can have the API over there SL we can have the API SL we can have the version as well we can have the API slash we can have the V1 and after that we can create the route Handler file which can be the main route Handler so inside the routes we can have the index so we can have the index do we can have the TS over there and set the routes and after that now what do we need to do so we can move on we can have the import we can have something from we can have the express and we want to import the routing from the express so we can have the router from the express to use the routing and after that we can have the const we can have the app we can have the router the whole application rout AO and that should be equals to we can have the router from the express so now we have the router Express and after that now what do we want to do so now we'll be having the export we can have the default so that should be this router sorry and that should be this app router over there because now we want to export this app router as well and now we want to use this app router so after we make a request on app so after we make a request on/ API slv1 then it will be handled to this app router so that's how it's going to work so after this so after the express will move on to this endpoint so it will handle so the app router will handle this type of endpoint over there and after that now we want to create the structure of our routes as well so we can have the app router dot we can have again the use we can again use the use over there because here we want to generate a middleware so on the use if the request is made to/ user then we'll be moving on and then we'll be using the users's routes over there let's create the routes for the user so we can move on so we can have the user SL we can have the routes dot we can have the TS over there and after that we need to Define these routes so again we can use the import that should be we can have something we can have the router like this router from Express then we can have the cons we can have the user routes so that should be equals to we can again use the router over there we can have the router like this we want to router class then we can have the export uh we can have the default and that should be we can have the user routes over there so then if we make a request to/ user then we want the user router to handle those incoming request and that's how to handle those incoming request and that's how it's going to happen and then we can create another router over there for the chats as well so we can have the chats we can have the routes dot we can have the TS and now we want to follow the same thing for the chats as well so we can move on we can just copy that and then we can just paste that over there so now we can have the chat routes so here we have the chat routes so you can see I'm doing this because I want to increase the readability of the code you can see now we have the index.ts and then we can again copy that we can paste we can have slash we can have the chats over there we have the SL chats then we can have the chat router over there we have the chat routes so it means now once we move on to the domain slash we can have the API slash we can have the V1 because this is a version one and then we can move on to the app. TS you can see once we move on to this API endpoint so then the request would be transferred to this app router so then we have this request and if the request is to/ user then this user routes would handle this request and if this request is on the chat if the request is on the chat over there like this so if it is on the chat then the chat would be handling that so then we have the chats over there like this so then the chat routes would handle that request so the chat routes would handle that request so that's how it's going to work and now we can finally move on to the user router and now we can Define all of the HTTP verbs that will be accepting inside this application so you can see it falls a bit complicated process but it increases the readability of the code that we want to use inside this application so now you can see now we have the user router let's just create the request over there we can have the user routes or we can have the get request so suppose that could be get we can have the slash over there and after this slash now what do we want to do so after this slash then we can have the controller function as well so now we don't want to create all of the controllers and the routes over there so for the Handler functions for handling this request we want to move on to the controllers we can have the user we can have the controllers do we can have the TS so now we want the users's controller to handle the incoming requests for the users so suppose that a get request so what do we need to do so we want to create a function we can have the export cost we can have the get all we can have the users like that so that would be equals to a function like that so from this now we want to get all of the users from the back end so that's how it's going to work and after that now what do we want to do so now we want to get all users directly from the database and then you can see that's how it's going to happen so we have the get route and after that we can just assign this function over there we can assign to get all users directly from the controller so everything seems to be working perfectly fine inside our application you can see now we have defined the routes as well inside this application and everything seems to be working perfectly fine so welcome back and now before moving ahead into the routes and all so let's just Define the models that we'll be using inside our application so now we would be using some models as well the database models which are the schemas so we need to Define them as well so for defining the model let's just see that what will be the fields of the user model so here comes a new topic about the database models so we'll be having the model of the user and after that the model user will contain the name we'll be having the email of the model user we'll be having the password as well and then we'll be having the chats as well so chat will not be a new collection or a new model so we'll be creating a brand new object type schema for the chat so all of the users chats would be there inside the chat and this would be an array of the chat schema so these are the database models that we'll be defining so let's just move on to the application so inside the models what we can do so we can create a new file that could be we can have the user dot we can have the TS and after that we need to create a new schema so like we use the mongus so like initially we showed you the mongus that how The mongus Works to create the schema so that's how you're going to create that so we can have the import we can have the mongos over there we can import the full mongos library and after that now what do we want to do so we can have the const we can have the user schema like that we can have the user schema so that should be equals to new instance of the mongus do we can have the schema so we can have the mongus do schema class so we can make an instance of that and after that we need to provide the schema definitions so schema definitions can contain the first field that we want to provide would be the ID I think the ID would be automatically generated from the mongodb so we don't want to generate that so we can have the name over there so we can have the each user can contain a name so for the name we can have the type for the name so that should be at the string over there and it should be a required field for creating a brand new user so we can have the required validation over there and after that we'll be having the email as well so it is same so we can have the type that should be we can have the string over there and then we would be having the required property so that should be we can have the true for that and then the email should be unique so for that we can have the unique as well we have the unique so that should be equals to the true so this is not a validation but it creates some indexes for the email to search quickly then we can have the password as well so we can have the password over there we can have the password we can have the type over there like this so we can again have the type of that should be inside the string and then we can move on so it also required so we can have required like this and that should be to the true so these are the three fields that we required for the user schema and then the main field is the chats over there the chats so chats would be an array so it would be an array of a new schema so we can Define the chat schema as well before the user so we can have the cons we can have the chat schema over there like that we can have chat schema like that and that should be again equals to new we can have the mongus do we can have the schema over there we can have mos. schema and after that we can just create the ID of the chat so mongodb provides you the ID automatically so if you don't want to provide the ID so it's up to you but if you want to provide the ID then you can just use the ID over there you can have the ID you can again move on to the ID you can Define the type over there that should be inside you can have the string over there inside the type and then you can move on you can have the default as well of the ID so default should be you can import a package from the nodejs so we can have import something from we can have the crypto so directly from the crypto you can get something which is we can have the random uu ID so it will help you to generate a new ID so we can have the random U ID for that so it will just create a new uu ID for us and after that what we can do so we can just define the role so inside this now we want to define the role so there are two roles for using the open a platform that can be the the AI chatbot that is a assistant and there can be the user so there are two roles for that so we can have the type so that should be we can have the string over there and then we want to move on so that should be the required property that should be the required and that should be again equals to the true because the role are required and after the role there's another thing which is a Content so what would be the content content is actually the message so it is also required so we can move on we can just copy the type required and we have the require we have uh we have the type string we have the required which is the true you can see now we have schema for the chats so the two main properties are the role and the content role is the assistant of the user the content is the message property of the user and after that the chats would be the schema so we can have the chats schema inside the array it means now the chats would be having the array of the chat schema inside that and that's how it's going to work and you can see the chat is not required the chats is not required because some users won't be having the chats over there and that's how it's going to work and after that the final thing that we want to do is now we want to export this as well so we can have the export we can have the default that should be equals to we can have the mongus we can have the model over there we can have the mongus model that should be we can have the user so now we have the user model for that and then we want to Prov the scheme as well so we can have the user schema so that's how it's going to work so now we have the new model we have the mongos start model that could be for the user and everything seems to be working perfectly fine over do and if you want to add some validations for the mongus do model so like suppose like in the next year applications what happens is sometimes it creates multiple instances of the mongus model so you can Pro the validation like you can the mongus do we can have the connections over there you have the connections or you can the mongos or we can the models over there the models SL we can have the user like that so if you have the mongus do models user then you don't need to create a new model but here inside the nodejs it doesn't create that it only have one single instance so there won't be an issue and after that you can see everything seems to be working fine over there now you have the mongus model of the user and now you will be having a new collection inside the database of/ users so everything seems to be working perfectly fine and now what we need to do so now again we can move back to the users controller and now we can close this as well the PowerPoint because now it will take some time to get back into the PowerPoint again now you can see now we have the get all users so now if suppose make a request to get all users now it means now we want to get all of the users now we want to find all of the users from the database it means now we can again run the try catch block over there so this is a very simple route so we can have the try catch block and inside the try now what do we want to do we can have the const we can have the users so that should be equals to the weight then we can have the user model we can just directly refer to the user model so that equ to the find so we have a function inside the mongus model which is the find so it works on the query so if we provide any query params if we provide any query inside the find then it will find out of the records matching that specific query but if we do not provide any query it will find all of the records from the database and it will give you all of that records so that's how it's going to work and we have an eror for the await because it's not an async function let's just make it as an async and after that now we have the users then you can see now we have the users over there and everything seems to be working fine now we can move on so we can have the return we can have the response so we want to define the variables as well the request response and the next as we did inside the initial application so the request is actually the request object it should be imported from the express the response also should be a response type object it should be imported from the express then we have the next function we have the next over there so we can have the next over there like that and that's how it's going to work and after that you can see now we have the users that should be equals to the await user. find and after that we can just move on we can have the return we can have the response or we can have the status over there that should be we can have the 200 which is okay then we can send the Json message over there we can send the Json over there so that's how we can send the Json response first we Define the status or status is optional if you want to Define then you can just directly refer to the Json you can Define the message like that you can have the message that could be we can okay then we can send all of the users like that so that's how it's going to work and if you get an error you can again send a customizer response for that you can just copy that over there you can just paste that over there you have the message we can have the error like that and then you have the users so instead of this you can send the error message like you can have the message error and then what you need to do you can have the cause over there cause and that should be we can have the error dot we can have the message over there so you uh so you have a message property inside the error so you will be getting the cause over there and now you can just log the error as well you can just log the complete error and that's how it's going to work so you can see this was our first API request for getting all of the users from the database and let's just test it out so we can move on to the postman we can create another collection over there we can just click on that we have a new collection so we can have the name of the collection that could be uh we can have the M AI we can have the chatbot over there m at chatbot and after that let's create another request click on that click on add a request so that would be a new request that would be get all we can have the users like that that would be a request of get all users and inside this we have a get type of request we can provide the parameters HTTP Local Host the port of 5,000 slash we can have the API slash we can have the V1 slash we can have with the users so instead of writing the Local Host 5000 API what we can do is we can make this as a variable we can have API V1 so we can make this as a variable I think we can make this like this so you can see now we have this set a variable so we can have the set a variable it means now we want to have the back end Base address we can have the back and Base address like that so we can have the Local Host 5,000 over there we can I think we can just copy full string over there like that 5,000 SL API 5,000 API then we can just click on create a variable that could be set a new variable the variable name could be we can have the backend base we can have URL like that backend base URL and we can have the scope as well or I think we can just Define the base URL over there the base URL and we can Define the scope that should be we can have the local inside just the collection of the money chatbot we can have the/ API SL we can have the V1 as well so that was my mistake because I didn't add the V1 over there so that was the values over there we have the API / V1 and after that we can just click on this save and now we can move on to get all users so now we have the base URL SL we can have the user over there SL we can have nothing because we don't have anything after the user so let's just click on the send and let's see what happens so you can see now we got something we got the message that is okay then we got the users as well which is an array but you can see we do not have any any value inside the array so because now you can see now we do not have any record inside the database and there you can see that's how it's going to work and you can see you got another lock statement which is you can see now you got the get and the and sorry the API end point was API /v/ user and then you can see the status of the requests was 200 and you can see the response the time it took for the response you can say it is just around so we have 323 milliseconds for that and you can say this is a unique number so it is coming via the Morgan package so we have added the Morgan over there if we move on to the app. TS so it is coming via this and that's how it's going to work so now everything seems to be working perfectly fine and now we need to move on to the next things so here we have created the very first request which is a get request and now we want to create another request of the user sign up so now let's create that request as well and that would be a post request so what we can do so here we can just write the user routes dot we can have the post over there because that's a post route and then the URL can be we can have slash we can have the sign up so it means/ user SL sign up and now we want to create the controller function as well again so we can move on to the users controllers and what we can do so we can just copy this and then we can just paste that over there and here instead of get all users it could be the user slash we can have the sign up we have the user sign up and after that again we can move on to the user routes and that could be we we can have the user sign up like this so everything seems to be working perfectly fine so now we have the user sign up request and if we will make the user sign up request then this function this controller function is going to be executed and now let's move on so in the user sign up what we will do so we'll send some data along with the request as well so we'll move on to the postman so from the postman we will be sending some body data along with the request because we need some data so for creating a new user we need need the user's email name and the password so we need that data directly from the client so what we can do so here we have the user sign up so here first we will get the data and how we can get the data so as you know that we'll be sending the data along with the body so we'll be sending the body and we'll be sending some raw Json along with the body so let me create another request for the Post sign up as well so let's move on so inside this you can just right click on that you can have the add requests and that could be you can rename that and you can rename you can have the new user or you can have the user like this you can have the user you can have the sign up like this so here we have the user sign up requests and now let's move on and this could be the post request so the URL should be the base URL for this should be the same like this API V1 and after that we'll be having the user slash we can have this sign up like that we have the user sign up like this so now we have this request and now we need to send some body data along with it so we can move on to the body we can click on the and then we can send some Json data along with it so inside the Json data we need to send the name of the user the name could be we can send my name as well like I will send my name like we can have the N we can have the Tani over there then we can send the email of the user as well so that could be the email like that and email should be we can have the anadani at theate we can have the test dot we can have the com then we can move on we can have the password as well so that could be the password password and it could be we can send any password like 1 2 3 4 5 so this is my password so we'll be sending these details by the postman or any client and now we want to get this data as well inside the back end and how we can get that so we are sending from the body so we need to extract that directly from the body so instead of get all users it means now we want to create the user sign up and this could be we can have the const we can destructure all of these properties like the name email and the password directly from the body of the request we can destructure this directly from the request. we can have the body and now inside the destructuring we can destructure the name the email the password directly from these things so we have the name email and the password and now what do we need to do so here we have three requests over there and now what do we need to do now we need to create a brand new user so for doing that so we can have the const we could have the user we can create a new instance so we can have the user that should be equals to a new user models instance so now we need to create the instance and we need to provide the fields that are required that could be the name that could be the email and that could be the password so we can send the password along with it but this is the same password that the user is sending so inside the back end we don't usually store these passwords which the user directly send so we don't store the same strings that we get directly from the front end so we encrypt the passwords and there are many security reasons that we should always encrypt the password before storing into the database so that if an employee so I'm giving you one example so suppose if an employee is working inside the database company so they can see everyone's password inside the database so before that inside the backend so back end has the responsibility to encrypt the password before storing it into the database so we have the password and for encrypting that password now what we will do so we'll use a package which is a bcrypt so we have already added that package inside the package.json so if you move on to the package.json you will find the BPT package over there we have the bcrypt and the bcrypt is used for encrypting the user string it so sorry it can be used to encrypt any string and then we can compare the string with the original string if that string same or not so let's encrypt the password before storing it directly into the database so we can have the import something from we can have the B Crypt over there and something that we need to use is uh we need to use us the hash so hash is used to Hash a password is used to encrypt a password and now we have the con new user and for before and before creating a new user what do we need to do so we can have the const we can have um we can have the hash password like this and that should be equals to what we need to do so we can have the hash over there that could be the hash and the first parameter that we need to provide would be the data and that could be a string or a buffer so we have the same string of the password we we can use the same string so we can have the password and inside the second parameter we need to provide the rounds like how many rounds they are used with the encryption so as many rounds as you provide here the more encrypted password you will get so here we need to provide here the 10 because now this is are default rounds as well so you can provide any number of rounds so it has some techniques to generate the hash password with the rounds and now we have the hash and that's a promise so we need to await for this task as well so we have here the await over there and instead of storing the same password directly receiving from the user we can just store your the hashed password as well we have the hashed password and that's our it's going to work and after that the new instance of the user would be created and now the final thing that we want to do is we want to move on we can have the a wait we can have the user do we can have the save so now we want to save the user so for creating and for saving a new record inside the database we use the user do we can have the save over there to save a record and after after that we have the return statement as well so inside the return statement we have the message okay and then we can send the brand new user or we can send the email of the user we can or what we can do we can send the ID of the user like we can have the ID that should be we can have the user do we can have the ID like this we can have the underscore uh we can have the underscore ID of the user and Dot we can have the two string over there because the ID is in I think the object ID format so before uh directly giving the response to the front end we should use the two string to convert that into a string and now let's move on so now we have these three Fields the name email and the password and everything seems to be working perfectly fine so now let's wait till the database is connected and let's move on to the postman once again so the server open and database is connected and now we can move on to the postman let's just click on send so let's see what happens so there you can see now we have the ID there so you can see now we have the ID it means now the user is already created in inside the database and everything seems to be working perfectly fine and now let's move on to the get all users so let's see that what is happening over there so if we just make a new request to the get all users so now we should be receiving one user yes so here we are receiving a new user we have the side of the user 650 or anything we have the name email and the password and you can see this is the password which the BP has generated so that's how it creates the encryption of the passwords so now the user has signed up successfully and there you can see now we have a post request as well we have the 200 and everything seems to be working perfectly fine but there you can see now before sending all of these fields to the database so we should have some uh so we should have some validation checks as well so suppose if the name was empty so suppose if the email was not exactly the email or it was the incorrect string or if the password was not following the length of the password like the modern password should have around six num should have the length of around six so if they do not follow all of the validations then it would could create some errors inside the database so what we need to do so before coming to the user signup function so we could add another middle whe inside the user routes inside this request so before directly jumping into the user signup request we should have the validation check of the data so that would be our approach so we'll be using the concept of the middle WS to do that so that would be a middle W for checking the data validation that will send directly from the front end and before doing that I want to introduce you to a topic which is a middle W so what are the middle wers so the middle WS are just a functions and they get executed before a request is processed so between the request and the response it acts as a bridge between them to modify request to modify response into them and inside the node and the express so middle can be used to check the Json Vol validations the tokens or sending some cookie validations directly from the front end the parms of the the request because we are using the rest API there can be the data validation checks and more according to the requirements so how the middle work so let's move on to the paint and let's just identify so here suppose that's a request oh sorry there should be the square box so suppose it's a request that the user is sending directly from the front end so this is a client so let's move on so that's a client over there and the client is sending some requests along with some data and now it sends a new request to the backend so suppose it is sending a new request to the back end so I'm not using any illustrations over there so this is just the normal pin tool and now suppose that's a backend right so this is a back end and the client communicates to the back end and the back end communicates to the database so that's how the structure works and now let's move on so inside the back end suppose the client sends a sign up request so it's sign up and inside this sign up we'll be sending some data along with it so there there could be some data like there can be the name email and the password because it is there inside the signup and before moving on directly into the database and store that data we should add we should add another middle in which we need to verify the data like this can be the middle function in which first we need to verify all of the data so we can again move on we can have a verify all data before just moving on and before just saving the record of the user and then let's move on and and then let's create another middle W so there can be another middle W in which the user should be stored inside the database so let's move on so there can be another middleware over there so that could be the final middle ware in which now we want to store the user inside the database so let's move on let and that could be uh we can have the final middle ra to store users information we can have the users info like this so we can have the users info like that so we need to store the final users information into that and that's how it's going to work so first if it will move on to this so I'm using a pencil so first the client makes a request to the back end so first the request would be moved on to verify all data right so the request would be moved on to verify all data and if the verification is successful of the user then only it will be moved on to the next middle W and if the validation was wrong if there was some errors during the data inside the data then it will just move back to the client and it will send them that the data is incorrect and you need to send the exact data that we required so that's how it's going to work if the data is not correct and if the data is correct then we'll move on to the final middleware function to store the information of the user so this is the concept of the middleware and you can take the screenshot of it as well because this could help you if you do not come about the middle inside any application so inside web development this is a concept of the middle W so whether it's any framework like the node it can be the C as well ASP as well Java as well so this is only the concept of the middle WS so let's move on so now let's use the middle WS for the data validation checks and now let's move on so we will be using the express valid dat package for using the middle and this has a set of Express GS metal WS that wraps the extensive collection of validators and sanitizers offered by the Val data.js so it adds some middleware between the request and the response that we can use so it has already included in our package so now let's use it and now let's move on so we'll be having the validation chains and we'll be having a customized validator function so we'll be having the validation chain inside the validation chains we'll be having multiple validations like if there is a sign up request then we need to verify the email we need to verify the name of the user we need to verify the password so there are three functions that we need to verify name and the password and then there could be the final validator function so it will check all of those validations and if there was something wrong during the validation check then it will just send back the response to the client that there was something wrong with the data and it will send the exact error message as well and if everything was successful then we'll be moved on to the final function then we'll be moved on to the final middleware function to execute and to store the users information so let's move on uh so what we can do so inside the utils let's create another file that can be we can have the validators do we can have the TS so that's a validators dots and here first what we can do so we can Define some validators for the sign up so we can have the con we can have the sign up valid data like that sign up valid data so that could be an array so inside the array now we want to store a couple of validation checks so inside the sign up validator there can be three fields that are required the first would would be we can have the body we can import the body directly from the Express validator and the body should contain the name right so a name is a required field so it should contain the name so then we can have the name do we can have the not empty like that it should not be empty and then what we can do then we can have the required like this so we can have is required I think so if it is not empty so I think required B like that uh let's check that so I think the required is not there so I think the not empty would work perfectly fine so name should not be empty and then let's move on so we can add the uh response message as well if the name was empty then we can have the function which is with message we can part A customize error message if the name field was empty we can have the name is required like this so this is our first function of the body then we can use that two more times for the email and the password so we can have the email then then we can have the password over there like that that could be the password like that and inside the email we can first trim the record of the email we can trim we can remove the white spaces from both uh front and the back from both front and the rear and then we have the trim then what we can use so after the trim we can just use your is email like this so we can have the is email so it will verify if the email was actually the email or not and then we can again use the with message over there like this so so we can finally again move on we can have a width message like that we can have the width message and after that we can have the email is required so we can have the email is required then the same should be used for the password so first what we can use so we can again use the triam over there and then we can use another function that could be we can have the is length something we can have the is length so it will verify if the password has the desired length or not so we can have the minimum so we can provide the minimum length to the password and that could be somewhere around six so if the password length was not matched then we'll be having the error inside the response then we'll send back the same response to the client so we have the with message over there then we can have the password should contain at least six character so we can have this string over there and that's how it's going to work so now we have defined the validator function and everything seems to be working perfectly fine but now we need to see that how we can verify these functions how we can verify so we can create our customized function we can create a customized validator function in which we will verify all of these details so what we can do so we can have a function we can have the cons we can have the validate over there like this valid date and that could be equals to we can have the arrow function over there that could be the arrow function it should not be the sync so we have the Val so we have the validation function over there and inside the params we need to get the signup validator we need to get all of the these validators whether it's a sign up or there can be multiple validators over there so we can have the validations like this so we can have the validations and the type for this is already defined inside the express validator the type is the validation chain like this so we have the type of the validation chain and that could also be the validation chain over there and that could be this function and now it would be an array of the validation chains because these are the chains and now let's move on so you know that the validate function so all of the metal wheels inside the express are required and they should have the request response and the next inside that so how we can do that so here we want to return a new asynchronous function we can have the return aing we can have the function over there Arrow function that could have the request and the request could be the same request format that are required from the express then we can have the response the response should be what we can do response can have the response directly from we can have the express JS and then we'll be having the next function as well which is used to move on to the next middle will we can have the next function over there and that's how it's going to work and that could be an aror function over there and now inside this now what do we want to do so here we need to run a loop so we'll be running a loop over there in which we will verify all of these conditions we'll verify all of these conditions and if there was an error then we'll send back the same error to the client so let's move on so here we can have the for Loop over there directly we can have the cons we can have the validation like that we can the validation or we can have the validations like that validation of validations and then we can move on so what we can do so we can have the await over there or what we can do we can verify the conditions from here as well we can have the const we can have the result and that should be equals to we can have thewait then we can have the validation so we can have this validation function validation like that dot we can have the Run we have a function of the run to run a validation and this should have the request so we have the request inside the validator of the express so we'll so inside the middleware of the express we have the request as well we need to send the same request over there that we received directly from the client and it's an um it's a promise so we should wait for this task as well so that's why we have used your wait over there and now let's move on so then we can check another Val check that could be very simple like if we have the result we can have the errors like that I think they have removed the property so what we can do instead so we can remove the result property as well or we can have directly the errors like we can have the if we can have the result like that dot we can have I think uh we can have the is empty so result means this time the errors so if the result do errors are not empty then what we can do then we can break the loop so that's what we need to do for this for Loop and after that now what do we want to do so after the for Loop now we will verify if there was an error or not so if there would be error so it will automatically break the loop and now let's move on so here now what do we want to do so we can have the cons we can have the errors so that should be equals to we can have the validation we can have the result so this is defined inside the express validator the validation result so this is the final result of the validations so it will give you the property of the errors so we need to provide the request as well here so that could be the request and now the final thing that we want to verify is if there was the errors then we don't need to move on to next middle Ware and if there was no any error then we need to move on to next middleware function which could be the final middle W to store some data let's move on so we can have if we can have the errors like this if the errors to we can have S uh what we can do we can have the is errors do is empty it means everything was working fine then we can move on to next middleware function so here the next means that we want to move on to next middle that could be this final user signup function and now let's move on so if there was some errors if we do not pass this validation check then we can move on then we can have the response do we can have the status over there that could be we can have the 422 which is unprocessable entity it means that data cannot be processed further then we can have the Json over there we can send the errors directly we can send the errors and that could be we can have the errors to we can convert them to the array so that's how it's going to work and we need to return that as well we need to return this response so that's how these things going of work so that is the final validate function and now let's move on to the user route and here inside this so inside the sign up first we need to add this we have the valed function we can have the validate function directly from the validators and then what we want to validate is the validation chain we can have the sign up validator we can have the sign up validator for that and that's how it's going to work so now you can see everything seems to be working perfectly fine and now let's move on so suppose from the postman if we move on to the user sign up once again so suppose that's not an email right so we have added that validation check over there inside the validators like if this was a email or not is email so let's move on so suppose this is a normal string I remove the adate and.com over there let's just click on the send and let's see what happens so there you can see now we got the errors array you can see we got the status as well we have the erors you can see the type of the field we have the value andani and you have the message that email is required you can see everything seems to be working perfectly fine over there and everything seems to be working fine you can see and now you can see the minimum length of the password is six so suppose we send the five characters if we click on the send so now you can see now with the password should contain at least six characters so everything seems to be working perfectly fine over there so let's create another record as well so that could be name we can have the James Marshall like that we have the James Marshall and the M should be Capital then we can have the email we can have the James test.com we can have the password of 1 2 3 4 5 6 so let's just click on the send so now the new user should be created and here we have the ID of the user and everything seems to be working perfectly fine and another thing that I just noticed is now we can move on to the controllers and if we create a new user then the status should be the 2011 so that is the status of the created it should be 2011 like that and everything seems to be working fine so now we have completed the sign up request and now we need to move on to the login function as well so let's move on to the user routes let's create the similar type of request for the user router do post that could be we can have the login we have the validate and this time there could be different functions for the validator let's just copy and let's just paste before that and I will and I will tell you about this that why before that so that could be we can have the login we can have the Valor so now you can see inside the login and inside the sign up so you can see the email and the password as similar Fields so right the email and the password are similar Fields inside both login and inside the signup so what we can do so inside the login what we can do we can remove the name directly from here right we can remove the name and from this sign up we can remove the both email and the password right and before the and after the name now what we can do so we can just use the login validator right so because the login validator is just the array of the validation functions so now what we have so inside the sign up we have the name then we have the email then we have the password and that's how it's going to work and now let's move on to the users controller so here let's move on to the user routes once again so now it could be we can have the login valid dat like that and let's move on to the user sign up again so inside this now what do we need to do so let's create another request for the user login so it could be we can have the user login like that and here now what do we need to do so that's a sign up it could be user we can have the login and here there could be different fields we don't need the name over there and the the things would be different so let's just remove all of that and let's just see what happens we can Rec commend this out as well and after we get the email and the password directly from this let's move on and here now what we want to do so first we need to find the user by its email so let's have this vage and check we can have the con we can have the existing user like that or we can have directly the user property we can have the const user that could be we can have the weight then we can have the user do we can have the find one we can find one user of the record and then what we can do we can send the filter over there we can send the filter of the email that this email should match this email we want to find one user that this email should match this email and after creating this so I have one thing in my mind so let's move on to the user sign up so before creating a brand new user we need to also verify if there was a same email inside the database if there was a same user inside the database with the same email so let's move on so before even creating the hash password let's move on so we can have the cons we can have the user we can have the existing user like this so that could be equals to the await then we can have the user so we can find a user again we can you have a find one of the user then what we can do so we can again provide the email so that's our is going to work so now we have the find one of the email and then we'll verify if we have the existing user then it means now the user is already there with the same email then we can again send the response to we can have the status that could be we can have have around 401 which is unauthorized then we can send the Json or we can just directly use the send function that we can have the user already register we can send this validation check so I missed this thing so now we have added that and everything should work perfectly fine now and now what do we want to do so here first we'll verify the user we need to verify if the user is there or not so if there was the user we can verify if there was no user then we want to send the return message we can have the response dot status that could be 401 dot we can send here the send over there and then we can have the user not we can have the register like that and now we have the user right now we have the validation if we don't have the user then we'll be sending this response message but what if and what after that when we have the user now we want to verify the password of the user for the authentication purposes now we want to verify the password but let's move on so how can we do that so from the bcrypt we have a function of the compare as well so we cannot directly decrypt the password of the user and then we can verify because it requires a lot a lot of calculations so either what we can do so compare is very easy so we can compare the password with the actual string so let's move on so we can have the cons we can have the is password correct and that should be equals to we can add the a wait then we can have what was the function name so it was a compare so we can have the we that should be we can have the compare over there and inside the compare we need to provide the data which is the string which is the actual string so actual string is the password and then the thing that we want to compare is with the encrypted string so from the encrypted string now we want to verify encrypted string is there directly inside the user object we have the user dot we can have the password over there so that's how it's going to work so this will give you a Boolean value you you can see the Promise resolved with a Boolean and then we'll verify that if the password was correct or not let's move on so we can have if we can have is password correct we can have if the password was not correct then what we can do we can have the return response we can have the status that could be and that could be we the 403 which is forbidden then we can send a new message we can have the send and inside this we can have the incorrect password like this we have the incorrect password and that's how it's going to work and after that now what do we want to do so once the password is correct once everything is fine then it means now the user has successfully authenticated so let's move on so after that now what do you want to do so after the password is verified after the user's email is verified then we know that the user is the actual user then we can send the response. status of that should be 200 we can send the message of the okay then we can send the the ID of the user and that's how it's going to work so let's just try this login function so you can see we created this signup request over there the James Marshall James test.com with the email with the password let's move on let's create another request over there let's click on ADD request that could be we can have a a login and I will share you the postman collection as well don't worry so here we have the user login we can move on to the body inside the raw inside the Json now we want to provide the fields like the email and the password we can copy from this we can paste that directly inside the login over there so we have the email and the password and now we want to send the URL as well so the URL could be again we can copy that we can paste and instead of the sign up that could be the login and the request is the post so let's just try it out let's just click on this end so let's see what happens so now we have a message so why this message is coming so let's move on to the user routes so there you can see that is an error because here you can see the user is already there the email is already there so we cannot create this user so you can see what we can do so instead of the user sign up that could be we can have the user login I made another mistake with that so this could be the user login over there now let's move on let's just try it out once again click on the send so now you can see message we have the okay it means everything is working perfectly fine and there you can see if the password was incorrect if we send another string over there like the one so let's just try it out clicking on the send so you can see now we got the message like incorrect password and everything seems to be working perfectly fine over there you can see now everything is working fine so with this stab you can see now we have completed the basic user authentication system with the mon stack we have created the sign up request the login requests and everything seems to be working perfectly fine so this was the basic things of creating the some requests of the authentication of the user user management now we want to move on to the authentication right now we want to move on to the authentication systems like now after the user has logged in or the sign up then we want to generate a token for the user a token can be the ID card for the user to show something to access some resource so let's move on and let's just understand that and now let's learn that how we can authenticate the user inside this application so let's learn that what exactly is the authentication first so what is the user authentication as you know the user authentication is a step in which the user needs to verify their identity so user needs to verify their identity and user can verify the identity by providing the same credentials that the user used during the registration process and for this application as well the user needs to provide the email and the password and if the email and the password are correct it means the user is successfully authenticated and everything should work perfectly fine but what after the authentication so authentication is just step one of the user authentication so there a complete package of the authentication so providing the email and the password is just a very first and very simple step of creating the authentication but now there will be another step in which the user would be provided a token so suppose you joined a company right so you joined a company you correct the interview and now you joined a company so after joining a company you will be provided an ID card right so suppose you are the suppose you are a database developer so you have provided the ID card and after that you will be allocated a seat and now you want to show the ID card at the time of sitting into a seat so for accessing the resource you need to provide the ID card and the security guard will verify if you are entitled to sit in that seat and you need to show the ID card to the security guard and if you are accessed and if you're entitled to access a particular resource it means now you are authorized so now we want to move on to the process of authorization so the user will be provided a token after the authentication process and here comes a new chapter of the authorization now after the user needs to sit on their bench now user needs to show their ID card which has provided so in this application we'll be using the token so to access a resource the user needs to show a token that was sent during the authentication so this ensures that the user is entitled to a source so that's the complete package of the authentication and authorization so once the user authenticates he's provided token and now to access a resource the user needs to show the same token that was sent during authentication so this ensures and this means now the user is entitled to a particular resource that can be protected or a particular resource and in this application so we have a chat based application so for sending and for accessing any chat the user needs to show back the user needs to send back the same token that was provided to the user and now we need to provide the token so we'll be using the JWT so JWT is a library it's exactly the library which is built by the ozero so JWT means the Json web token so there's a token which has the Json encrypted data into it so it is used to encrypt a payload into a signed token so there's a signed token in which all of your payload would be converted into a signed string that has the permissions or authorities or some data of the user so in this application we'll be having a different requirements like we can send the ID the email the permissions or authorities of the user so we'll be using that but how we need to send the token to the user so we'll be sending the token to the user with the help of the HTTP only cookies so HTTP only cookies are a type of web cookie that comes with a special security attribute so they are same like the web cookies so you can move on to the browser application tab to see all of these cookies but the HTTP only cookies comes with a special security attribute that restricts the cookies from being accessed by the JavaScript so you cannot access those cookies by the JavaScript code inside the web browsers and this prevents the xss attacks as well so what are these attacks so suppose you have a form inside a web application so suppose there's a hacker and it moves on into your form and it enters Some Like It enters some script into your form so that string would be then validated by the JavaScript so the JavaScript doesn't have full security so it gets validated by the JavaScript so suppose the hacker add the alert statement so then you will be seeing an alert statement on the top of the window through the form and that's how if the user or like if the attacker can show the alert they can also steal your JWT token from the cookies so that's why we use the HTTP only cookies so these are not visible by the JavaScript so these are only enabled by the exos with credentials property so once we make the HTTP request so these cookies are automatically sent to the backend and once the backend receives the cookie it will validate the cookie like it will validate if the token was valid or not and that's how we can prevent this attacks and that's how we can create the fully authenticated and authorized application so let's move on and let's just Implement all of that so if I want to summarize that what exactly will be happening so this is the authentication process the user would be authenticated and then he would be provided a token right so we'll be having the token with the HTTP only cookies so these are the signed cookies and then the user would be provided the HTTP only signed cookie along with the jwd token so we'll send the exess token directly in the form of cookies and then the user would be having those cookies now the user have the cookies and the user have the token inside the cookie and and now let's see that how to access the protected resource over there and to access a particular resource or a protected resource so the user send back the same cookie and then we verify like if and then we verify like if the cookie matches and if the token is validated or we can check if the Cookie doesn't matches or if the token is invalid and on the basis of that we'll be moved on and we'll provide and process the request and that's how the authentication design works so user needs to send back those cookies and if the token is valid then we'll process the request for further requirements suppose like sending the chat to the user but if the token was not valid if the token was expired or if the Cookie doesn't match then what do we need to do so we need to the operation of the user so that's how it's going to work and now we want to implement that as well so let's move on and let's just Implement that so here after the user is logged in then we want to send those cookies and then we want to send the jwd data inside the cookies let's move on and let's just create a new file inside this inside the utils so we can move on into I think inside the utils folder and then we can create a new file that could be we can have the token we can have the manager dot we can have the TS so we have this file over there which will manage all of the tokens so here we'll create a function that will create a token from the data so let's move on so we can have the export we can have the create we can have the token over there so that should be equals to a function and inste this we'll be requiring the ID of the user we can have the ID that should be in the form of the string we can have the email that should also be in the form of the string and then we'll be having another property which is expires in so after how much duration the token would be expired so we can have the expires we can have the inov there and that would be a normal Arrow function so this is a normal Arrow function then we can create a new token so first we need to get this data the ID and the email so what we can do so we can have the cons we can the payload over there so that could be an object and the object can have the ID the object can have the email and after that let's move on so after that we need to move on so we can have the cons we can have the token so now we want to create a new token so con token would be equals to now we want to use the jwd package so it's already there if you have followed my tutorial so let's move on to the top we can import JWT directly from we can have the Json web token and then now what do we want to do so here we can have the JWT Json web token dot we can have the sign so now we want to sign a token and we want to send the payload so payload that could be we can have the object so here the payload would also be required so we have already declared the payload so that could be a payload and now we want to move on so after the payload the second parameter that we want to Define is the secret key so there's a key required inside the hashing algorithms so now the secret key should be there to sign a token to encrypt a token so secret key is like a private key which is used to encrypt something so we'll be using that secret over there so we need to move on to the environment and here you can see you can already see the JWT secret so we need to provide the secret over there so the secret can be any string like that so it can be any string so this is my JWT secret and this should not be shareed to anyone because if anyone has your JWT secret it means now they can access your payload data over there now you have the payload data and inside the second parameter you can provide the process over there so inside the second parameter you can again use process do we can again use the environment over there process. environment do we can have the JWT underscore we can have the secret now you have the JWT secret and at the time of verifying the token as well still you need the same secret which was used during encryption because only one private key can be used to encrypt and decrypt something and then inside third parameter there are some options that we want to provide so third option that we have so the main option that we want to provide is expires in so after how much duration the the token would be expired so it can be any string so if you hover over the expir thing you can see you can provide like suppose that can be 2 days 10 hours or 7 days so the chat gbt how the chat gbt works so it moves on and it expires in 7 days so we can provide the same validity we can have the seven days and after the 7 Days the token would be expired and that's how it's going to work so now we have the token and now the final thing that we want to do is now we want to return the token over there so now we have the token inside the string you you can see now we the token as the string now we can just directly move on to the users controller over there right and here now what do we want to do so here we need to follow process so after the password was correct then what we can do we can just create a new token over there so we can have the cons we can have the token over there so that should be equals to what we can do we can have the create token we can use the create token we can provide data so like we can have the ID we can provide the ID of the user that could be the user dot we can have the ID over there like we can have the underscore ID dot we can have the to string over there and after that the second property that want to provide is the email of the user so we can have the user dot we can have the email property then inside the third parameter we need to provide the 7D so that could be the 7D over there so now let's move on to the create token so here you can see we haven't used the expir in so that could be the expires in only like that and I showed you just for the example so now we have the expir in and everything should work perfectly fine over there and it is of type of this string over there let's move on to the users controller so now we have the token inside this format inside the string now the final thing that we want to do is very very simple and now we want to send the token in the form of cookies so that's how it's going to work so let's move on so here you can see after we have the token over there we want to use a cookie and how we can set the cookies directly from the back end to front end we need to use a package which is a cookie passer so it is already there inside the package.json so cookie passer is used to send the cookies from the back end to the front end let's move on to the appts which is the main file and here we want to add the middleware for using the cookies as well so after the express. Json we can have the app dot we can have the use so that should be equals to we can have the cookie passo so here you can see now we have the cooki passord and here you can see now we want to provide the secret key as well for the Ki so we can use the secret key again we can move on to the environment we can provide the secret key of the cookie that could be again any secret that we want to provide so here we have the cookie secret now we want to provide the secret to this as well we can have the process do environment dot we can have the cookies secret over there we have the cookie secret and now you can see now we have the cookie secret as well and everything seems to be working perfectly fine over there like this now we have the cookie secret and now we want to move on again to the users controller and now to send the cookie to send the cookie from the back end to front end we use the response variable we can have the response and in set the response we have the cookie over there we have the response. cookie to set the cookie right and now we want to provide the name of the cookie name can be we can have the O we can have the token over there we can have the Au token and then inside the second parameter we need to provide the value so value could be the same token that we have so value should be the token so if you just use the respon cookie now what will happen is the cookie would be created inside the browser and then we want to provide some options object as well so inside the third parameter there are the options that we want to provide so first parameter that is we want to provide the path so where could be the cookie stored so the path should be weaken of the slash so inside the root directory of the cookies we want to show the cookies then we can move on the second parameter could be weaken of the domain so as of now we are working inside the Local Host so we'll be using the Local Host over there like this we can have the local we can have the host because our front end would also be there inside the local host for now but if you deploy this application then this could be your domain like suppose that can be my domain like indian.in that could be a domain and now let's move on let's provide the third parameter which is the expires so when the cookie would be expired so we so you can see the token validation is around 7 days so cookie should have same type of validation so let's create a validation for the 7 Days let's create the time for that so we can have the const so we can have the const we can have the expires that could be equal to the new date then we can have the expires to we can have the set date and that should be equals to first we need to grab the current date so we can have the expires to we can have the get date like this expires. get date after that we can use plus 7even so after this date plus 7 days now we'll be having the expires property and the same property could be used here instead of the expires over there inside the expires and that's how it's going to work and after that we need to add the HTTP on flag so we can have the HTTP only that could be equals to again that could be the true then we can use the signed as well so one so now we want to sign the cookie as well so we can sign the whole cookie so we can have the sign that should be equals to the true so the sign would again reencrypt the cookie inside the sign format so now we have this cookie and everything should work perfectly fine this time and now what do we want to do as the next step so after creating these cookies so now once the user moves to the login now we want to remove the cookies of the user as well so suppose if the user logs in again so now first we want to remove the previous cookies of the user and then we want to set the current cookie so for that we can have the response or we can have the clear cookie like this we can provide the name of the cookie we can have the name like this we can have the JWT we can have the aut token over there and we should store these names inside the constant so we can move on to the util let's create a new file that could we can have the constants like that that could be constants TS so that could be equals to con we have your cookie we can have the name over there we have the cookie name that should be equals to we can have the Au token like that and we should export that as well we have the export con of the cookie name so now let's move on so we have the users controller now that should be equals to the sponsor. cookie we can have the cookie name over there like that we have the cookie name and the same should be used here as well inside the token it should be the cookie as well we have the cookie name and now that's how it's going to work and that's how it's going to work now we have the clear cookie and and here we need to provide additional step as well and the additional step that we want to provide here that could be we can move on we can have the HTTP only that should be again equals to the true then we can move on we can have the domain that should be again we can just use some same properties like that we can use same properties like the domain and these things over there we can use these things over there like this so we have the HTTP only true expir is not required the domain and the local host and the sign are required and we want to part the path as well so we can have the path that should be equals to slash so it will clear the cookie of the response of the user and that's how it's going to work and after that now what do we want to do so we want to do same thing once the user signs up as well we can copy and then we can paste that here as well after the user has been saved and that's how it's going to work over there we can add the comment as well we can have the store we can have the create token and store cookie so we can have this code over there and that's how it's going to work over there you can see this was very simple for creating this cookies and that's how it works inside the modern application and inside this application we are not required to use the refresh token as well because here the cookie can be stored for 7 days and after 7 Days the user needs to relog in and that's how it works so now let's try it out in the postman as well well so in the postman the cookies can be visible but only in the browsers you can see those cookies that the cookies are being set or not so after this Postman testing of this login function now we'll be moving on to the front end so now before doing anything else now we want to move on to the front end and now we want to design the login system of the front end as well so let's move on so here we have the James test.com let's just click on the send and after that you can see the message is we can have the okay but inside the cookies we have one parameter you can see now we have the O token over there we have the O token we have the value so you can see this is the value of the token you can see that was our token over there you can see it is encrypted in a string we have the domain of the Local Host we have the path of the slash we have the expires as well you can see current date is 15th of September and it will be expired in Friday 22 September hi everyone and welcome back so now we have completed the login controllers the signup controllers over there you can see now the authentication functionality is working fine and we have tested that in the postman as well and now before moving directly into the back end into the chats and all we want to create the front end as well in which first we'll be having the login system so that the user can be logged in and then we'll dive into the chat B into the chat GPT apis so let's move on so here we have the back end folder now what we can do so first we can move on to the terminal and we can stop this terminal over there you can press controll C on your system and command C on the Mac OS and now you can move on you can create a new folder that could be for the front end over there so we can have the front end and after that we can have the CD into we can have the two dots over there to move back to the root directory then we can have the CD change directory and it should be to the front end and after that we can just move on and we can initialize a new react application and for using the react application here what we will do so we'll move on and we'll use the V so this time we'll be using the V over there and you can also use the plane react as well the next JS as well but here the V is super preferred for our application so that's why I will be using the V so after that we need to move on and we can click on the get started and it is completely fast as compared to the normal react or the nextjs application so wheat is very fast so that's why I have chosen the wheat for this application so we can click on get started and after that we want to create a new vat application so you can use pnpm Yan or the npm so I'm using the npm over there so what we can do we can copy this command then we can move on to the application or what we can do so we can delete the front end folder directly from this and we can just create the front end application directly from the whe so we can again move back to the root directory and then we can run the command of the uh npm we can paste that command as well we can paste that command so npm create V at theate latest we can hit enter and after that it will ask you a couple of questions as well like what's your project name and here we can provide the front end so now we can hit enter after that we need to select the template that we'll be using so we'll be using the react so we can hit on the react now we can choose any framework as well so both typescript and the JavaScript are preferred so in this application we can use the typescript as well and the S swc is the latest in which we'll be having the F reloading so we can hit on the typescript plus s swc and then after that now we can move on and then again we can move on to CD into the front end and now we can just install all of these dependencies and as compared to the next JS of the react it um what happens is it has very less dependencies to work with so you can see now inside this you have a very less dependencies as compared to react you can see you only have the react and the react Dom inside that and now let's move on so we can have the npm install to install all these dependencies on our end and now let's wait till it install all that and that we can get the overview of this app U so till then we can get some overview as well of the front end so in the public directory we can uh provide some or we can locate some assets which are publicly available that could be some logos that could be some images audio files video files over there then we have the source directory in which we'll be having our code files we can have the assets so in the assets you can also use some images which are not publicly available but you can use some assets like SVG icons or you can have the normal assets then you can have the CSS file for a component you can see you have the app. TSX which is the main file over there and here you can see what you have so you are just using the state you have the count variable over there and you can see this is a boiler plate then we can move on to the index. CSS here are some root stylings over there and we can directly move on to the main so this is the entry point of your application of your V application and from this application you create the root and if you are coming from normal create react app or the nextjs so this is a main app file so in the app router we have the page. T6 the main page and inside the normal react application with the create react app template it is the index. TS file which is renamed as the main and from here we are rendering the app component and now let's move on so here we have the app component and you have some environment files over there and you can see now we have the es link file which allows you for the linting purposes sometimes there are vulnerab Le in your code so it fixes all of them and we have the G ignore file in which once we will publish our application to the GitHub so once we will push all of our code so this will just ignore all of these files that could be some log files some non modules some disc folder of the build up application there can be some envirment files as well so it just ignores all of these files and it doesn't include these files over there and all of the files except this will be pushed to the GitHub then we have the HTML file in which we have the div ID equals to the root and where all of your react application converts to the JavaScript and then inject it into the root and there you can see now we have the package.json which contains some information about our application that could be some commands like there would be a Dev command there would be the build command there would be the L printing the preview and all then you have the readme file which contains the readme of your application you can also change the readme as well then you have the configuration for the typescript so here you have some configurations over there for the typescript and there we have the TS config node over there for running some backend quote over there because it is made on the Node envirment then we have the V configuration file as well in which there are some configurations to run the react over there and now the packages are now installed and now we can move back to our application so now we can run this application as well we can run the command of the npm we can have the Run we can have the dev to open the development server and there you can see in just 235 milliseconds now your development server is open and it is open on the Local Host Port of 5173 so we can control and click on that and there you can see now we have the vend react application ready and there you can see it is very fast as compared to the nextjs and the react and now let's move on so here we have the ball plate code we can mutate the ball plate code code as well we can move on to the app. TSX we can remove everything from it so we can just remove the full fragment over there we can just render here the main over there like this we can have the main and inside that we can render the hello world over there to have this starting project for us now we can remove the state variables as well we can remove all of these variables because these are not required in our application so let's save all of that and let's move on to the application you can see now we have the hello world but maybe there are some CSS Styles over there uh you can see inside the index. CSS you have some CSS Styles so you can remove all of these Styles and then what you can do so you can provide the HTML over there you can have the HTML and you can have the body and inside that what you can do is you can just provide the margin that should be equals to we can have the zero like this so there you can see now you do not have any Styles overridden into that and after that we need a different font family for this application so what we can do so we can move on to the Google fonts over there so we can move on to the Google fonts and from there we can search some fonts like what we can do so first you can move on to the fonts and then you can just search for the Roboto slab over there so we have the Roboto slab and then we need this Styles over there we can choose the styles of around 300 400 500 600 and we can have the 800 so they are already there and then what we can do so we can move on we can have the work sense as well so we can have the work uh we can have the sense over there so this is also great font for us so we can choose them and we need the 400 for the work sense and that's how it's going to work and I think we can use the normal 400 with that so we have the regular 400 we can click on that and after that you can see after you click on that then you will be seeing the use on web and then you can select the import over there and then you need to copy the full import statement you can copy the import statement and then you can move back to your application CSS file the root CSS file then at the top of your CSS file then you need to paste that and there you can see that's how it's going to work and I think the uh I think the swap is there for this so maybe something was wrong with that display equals to swap maybe it's okay and now let's move on so inside the root CSS file now we can provide some more classes like that so we have the margin zero we can the padding that should be we can have the Zero from all sides we can have a different background for our application that should be we can have the 0 51 01 C we have a darkish background for our application we can have the color of the text and all of the components that should be the white we can have the font family the default font family for our application could be we can have Roboto slap or we can have the siif if we do not find that so that's how it's going to work over there and now let's move on so there you can see now what we need to do so now if we move on to the application once again you can see now we have the hello world and we have a different font family for us so let's move on let's just select this element you can see now we have the font family of the Roboto and that's how it's going to work over there and after that now we want to install a couple of dependencies as well that we'll be using so for styling this application we'll be using the material UI so we can move on to the mui docomo and library for with the react for with the GSX so we can use these components so you can see there are a couple of components that are completely free to use and if you write these components directly from scratch it will cost you a lot of time you can see there are some accordian components the temperature range you can have these buttons layouts and all of the things so you can say it has a great design library and it is the most preferred react Library anywhere in the world you can see all of the major companies are using that as well we can click on the get started and then you can just move on to the installation and after that now what do we need to do so you need to move on you need to copy this command over there you can paste that here so you can stop this terminal for a couple of minutes you can add these dependencies over there and after the material UI after the styling then we need the icons as well so for the icons we'll be using the react icons over there so here we have the react icons so we can copy this over there so we only need the name of the react icons that's it we can paste that here and after the react icons now we can move on so we need the routing functionality as well so we'll be using the react router Dom for the routing we can move on and the current version is 6.16 so you can use that and after that now I think the current version is 6.4 now let's use that so what we need to do so we can just have the react router that should be we can have the Dom we so here we have the react router Dom and I think we need some notifications as well within this application so that should be we can have the react hot toast so that's a lab ready for the notifications so you can move on to their website and there you can see there are two options so if you click on make me a toast you can see you will be having this type of notifications as well so let's move on and let's just use all of that so here you can see this is the name of the package react H toast then you need to enter that as well so there you can see there are a couple of styles over there there are a couple of dependencies that we'll be using so now we need to hit enter and after that now let's move on so now let's move on to the main. txx and have some like a couple of theming as well for the material UI so let's move on let's create a new theme for our material UI so we can have the cons we can have the theme and you can use the pre default theme of the material UI as well it doesn't matter now you now oh sorry here we'll be creating our round customized theme so we can have the create theme so we need to use the create theme directly from uh imported from the material and here we only want to use a theme for the typography so we can have the typography over there and inside that inside we can use the font family and that should be we can have the Roboto slab over there and after that we'll be using the siif as well after that if we do not find that so we can have this s and after that we have multiple variants for the typography and for all of these variants so we can use a color and that should be we can have the white over there so we have a white color for all of these variants and now we have the customized theme for the material UI uh and now we need to move on so here after this strict mode then we can just render theme as well for this so we can use the theme provider directly from the material UI so here we can use a theme provider like this so we have a theme provider and then we need to use the theme provider over there to wrap the app component with the theme and let's wrap it up and let's provide the theme as well so it needs a theme object and that's a theme and after that now let's move on so let's set the routing functionalities as well within this application so you need to import something from the react router Dom so you can import something from reactdom and something would be equals to what we need to do so you need to use the browser router which adds the functionality which adds the wrapping functionality inside the browsers to use the routing over there inside the react application and it should be there inside the top again so we can have the browser router and everything should be wrapped between them over there from the theme provider till here so you can wrap all of that so that's how it's going to work now we have the browser router and then we have the theme provider and after that now we need to move on so now we can move on to the app. TSX so here we can just register some of the routes of the application as well so let's move on so here we have the main tag over there and after the main now what we can do so we can remove all of that and then we can just render here the header of the application so what we can do so inside the source we can create a new file that could be we can have the components over there and inside the components we can create a new component that should be header. TSX over there we can rent the RF fce for the default setup and default ball update code for that we have the RFC and after that let's create another folder inside the source that could be we can have the pages so this should contain all of the pages all of the routes of our application so let's have the home as well we have the home. TSX over there and we can again use the RFC for the default B plate code then we can move on so after that we can move on we can have the chat do we have the TSX over there chat. TSX and it also contain the ball plate code then we can move on and then we can have your the login page as well login do we have the TSX over there that should contain the normal login page we can have the sign up as well we can have the sign up do we have the TSX over there sign up. TSX it should also contain the RFC for the default ball plate code then I think there could be another page in which if their application so like suppose if the user enters a route which is not registered inside the this application so we need to register that route as well so that we can show a not found page so we can have the not found do we have the TSX over there in which we can show to the user that this route is not registered inside this application so we have the RFC for the default bate code and now we can move on so again we can move on to the app. TSX so here we have the main and inside the there would be very simple things so first we need to renter the header of this application here we have the header over there so inside the header after so that should be a self closing component so here we have the header and after that now we need to register all of the routes so first we need to import something from the react rout Dom so we can import something from we have the Rea rout Dom and something that we need to import would be equals to we need to import the routes so all of the routes should be there inside the routes so that is a container for all of the routes and to enter each route and to register each of the route you need to use a route component so it's a container and it's a route so let's move on let's add these things over there so here we have the routes over there that's a container and that should be equals to we can have the route and inside that we can provide the path so path of this should be we can have the Slash and we can have the element as well element should be we can have the homepage so we can have the home so home should be the inside the slasher out and after that let's copy let's paste it so that should be we can have the login as well we have the route of the login and the element should be there for the login here and then we can again move on we can again copy that we can have the route SL we can have this sign up and this signup should contain this sign up route over there sign up page then we can again move on we can register a new route that should be we can have slash we can have the chat so this should have the chat page and the element that we want to render should be the chat over there the chat component and if there is any route which which are not there inside these routes which are any route after that so that's how it's going to work so there you can see now we have a couple of routes inside this application and that's how it's going to work we have around six routes over there and that's how it's going to work and now let's move on and now let's move on to the header and now let's build the header of this application as well and for using the header we'll be using the component of the material UI so inside this we should be using the app bar we can have the app we can have the bar and we can import that directly from mui as well we can import app bar over there directly from we should have the mui SL material SL we can have the app bar like this so here we should be using the app bar over there like this and the app bar is just like a basic nav tag with some predefined Styles and after that below that we can use a toolbar as well so we can have the toolbar we can again import something from mui and that should be equals to we can have the toolbar like this so that should have the toolbar and it should should also be imported directly from the toolbar package so here we have the toolbar over there and if you don't know about these components you can always move on to the material UI you can just search like what is the app bar over there so there can be the app bar API you can move on to the demos as well so here you can see that's how you can use the abar over there you can just directly import it from the mui material or you can use that with this as well and if you want to see the demo you can see that is the app bar you can see some predefined styles are there that could be some M Bar and inside that you have some tool bar as well to add some structure of all of these elements you can see these are the basic navigation bars inside modern world applications so let's use that as well so after the app bar we have the toolbar and after that now let's move on so inside the app bar now what we can do we can provide some customized Styles as well we can use the SX prop for that we can use the SX props and before providing the customized Styles let's just run this application and let's just see all of that in action as well we can have the NP PM run we can have the dab over there and after that let's move on so you can see it is again there inside this you can see now we have the app bar and that's how it's going to work so if I open the 110% over there you can see that's how the app bar is going to look and after that you can see there are some predefined Styles let's provide some Styles so what we can do so we can have the BG color for providing the background color and that should be we can have the transparent then I think we can Pro the position so position should be what we can do so we can have the static over there of the top then we can have some shadows as well I think there are no many Shadows with that yeah there are some Shadows so what we can do we can also remove the shadows as well if you want to remove that so you can have the box shadow that should be you can have the none over there so now there won't be any Shadows over there inside the top and after that let's move on so inside the toolbar you can provide a couple of styles once again you can provide the SX prop and that should be you can have the dis display of The Styling that should be equals to the flex so that's a container and it should have the display Flex to render all of the items over there and the first thing that we going to do is now we need to render the logo of this application so here what we will do so we will provide our own logo so we'll use our own logo with that so let's move on and after that now let's move on so inside the components let's create a new folder that could be we can have the shared like that we have the shared and inside that we can use the logo do we have the TSX over there and let's design the logo as well so inside the logo it should always be like a link so once we click on the logo now we should be moved on to the homepage and for that we need some images as well so we'll be using the images for the logo as well so let's move on so from my GitHub repository you will find the images as well so you can move on to the public folder and there you can see you have some images of like the robots the nuclear openai robot and the vvg so you will find these images as well and now let's move on so here you can see now for providing the logo let's move on to the shared logo component and here let's just use something so here what we can do so we can just use the div here directly we can provide the style over there so we can have the style prop for the div we can provide the display that should be we can have the flex over there we can have the flex for the display we can use the margin from the right that should be we can have the auto over there like this so we can have the margin that should be from we can have the right over there that should be Auto then we can have I think we can have align the items that should be we can have inside the Cento then we can have the Gap and that should be we can have something around we can have the five or we can have the eight pixels over there for the gap between them so first we'll be having the like we can have the link and inside the link we'll be having the image then we'll be having some text so what we can do so we can use a link directly from the react a Dom so we can use a link component from the re Dom we can import that import the link from we have the re Dom so that should be we can have the link and we can render it over there and we can provide the two prop as well for the link so where it's going to navigate so we can have the two that should be equals to we can have the Slash and after that let's move on so inside the link we can first render the image over there the source should be we can have the open AI do have the PNG over there we we can have the alt that should be again we can have the open a like that so credit goes to the open a and after that let's move on we can provide some width as well width should be somewhere around 30 pixels would be enough for that I think and after that we can have the height as well height should also be somewhere around 30 pixels over there then we can have some class names as well we can just invert the color of this we can have the image inverted like that we can have the the image inverted over there so we'll be having the customized classes as well and after that now we have the link over there and after that let's move on let's have the typography as well so we'll be using the typography so it is a component of the material UI so you can get this directly from the mui you can import the typ of graphy from you can have the mui mu materials SL we can have the typography like that and you can render that over there you have the typography and inside that you can provide some of the customized styling like you can have the SX prop that should be what you can do you can have the display so inside the display what do we need to do so we need to provide some responsive sizes so what we can do so we can provide an object inside the display so inside the display for the MD screen sizes like for the medium screen sizes we want the display should be we can have the block the normal display but for the small devices for the small screen devices we can have the display for the none and then we can have for the extra small devices as well for the extra small and that should be what we can do so we can have the none over there so only for the medium and upper devices there should be the display and inside the small and the extra small the display should be the none so it should not be visible and after that what we can do so after this display then we can provide some classes like we can have the margin from the right so you can use the short end property of the Mr and that should be you can have the auto over there for the margin right then you can have the font weight as well so weight of the font should be you can have the 800 over there for the weight then you can have the text Shadow as well Shadow should be somewhere the shadow should be somewhere around you have the two pixels 2 pixels 20 pixels of the blow and you can have hash tri0 color for the shadow so these are some customized styles for the typography and insert that now what you can do so you can render this pen so first letter of your or like the first word of your logo should have the different styles so you can have the style over there and that should be you can have the font size that should be 20 pixels over there 20 pixels so first letter should have a different styles you can have Theon like that you can have Theon and then after that you can use the GPT you have the GPT like that so that's how you can provide some of the Styles over there so first let's use the logo over there so let's use the logo inside the header so here we have the logo over there and that's how it's going to work so there you can see now we have the logo then we have the M GPD and that's how it's going to look and after that let's move on let's just provide some of the classes for this as well for the images and all and after that and after providing the Styles I think the typography should be there after the link so it should be there after the link like that and that's how it's going to work so there you can see now with the man GPD and that's how it's going to work and after that now what do we want to do over there so you can see now we have the classes for the image inverted so we can move on we can uh we can enter this class as well so we can move on to the index. CSS we can provide this class like the image inverted and then now what we can do so we can use the filter for the images we can have the invert for this so if you provide the invert of the 100% now if you move back to the application you can see now it looks great so here you have the M GPD and everything seems to be working perfectly fine and instead of providing the 8 pixels for The Gap let's use this for the 15% and that's how you can see now it looks great over there so now it seems working fine and now we and move on to the next things and now we need to render the navigation links over there but there would be some conditions for rendering these links so conditions can be when the user is logged in then we want to show the link for go to chat to show the chat window to the user and there would be the link for the log out and if the user is not logged in then we want to show the links for the login and the sign up so there are two scenarios and we also need to handle these two scenarios as well because inside multiple parts of this application we need the user is logged in or not so for that we need a overall State Management inside our application so that in any children component in any component we can get the state like if the user is logged in or not so what we can do so we need a state management so we need the overall State Management which can wrap the full application with the state so either we can use the Redux so Redux is a great choice for that but there's also alternative with the react itself which is the context API so context API is very handy and it's very easy to implement as compared to the Redux so here we'll be implementing the context API and it is currently most easy thing that you can do so what we need to do so for implementing the context inside our application so it will benefit like you can get the state you can call some functions from the context from anywhere within this application so inside the source you can create a new folder that could be you can have the context over there so here we have the context and inside that we can create a new file that could be we can have the we can have the context do we have the TSX so from the context there would be multiple functionalities like what we will do so we'll provide the whole user object in which if the user is logged in then we'll be receiving the details of the user like the email the ID the name of the user and then we'll be having the logged in property like if the user is logged in or not so we can store a Boolean variable so that we can identify if the user is logged in and then we can have the functions as well for the login and the log out to identify or just call the functions directly from the context of the user from the authentication context so from this context now let's define all of that so first thing that we want to do is we want to just move on and we want to import something is we want to import something that should be equals to from and that should be equals to the react and something that we want to import would be the context so now let's move on so we need to import a function which is a create context so let's move on so so we can have the cons we can have the O we can have the context over there so here we have the O context over there and that should be equals to we can have the create context over there so it should be equals to the create context and now what do we want to do so initial value that we can provide should be equals to the null but here we are using the typescript so we should provide the value as well so what we can do so we can Define the type for it as well we can have the type that should be we can have the user off like that and that should be equals to a normal type and here what do we want to do so first property would be is logged in that's it and that property would be a Boolean property so we can have the Boolean like that then we can move on we can have the user property as well so we can have the user and that should contain a separate user type so we can have the type that should be we can have the user and we can also declare these types in a separate file as well so right now I'm just using it inside a context so here let's just use that and let's just Define that here so after the user then you can move on so type user user should contain the name of the user that should be you can have the string user should contain the email as well that should be again the type of we can have this string and the user type should be having the type of the user and sometimes if the user is not there then the user could be equals to we can have the null oh sorry it should be only the single string so now that should be equals to the null after that there would be the functions for the login and the log out let's define the function for the login so that would be a normal function but here uh we would be having the promise for that so here we would be returning the promise over there and the promise could be we can have the void because we don't want to return anything from the promise so that's why it should be the void but inside the login function there would be parameters like we can have the email so email could have the type that should be we of the string the password that should be we can of the type of like it should be the string and then we have a login function we can have the sign up as well so we can have the sign sign up over there like this and sign up should also have something around we can have the name we can have the email we can have the password over there so we can have the password as well like this we have the password that should be in the string format and then finally that will be having the log out function as well so we'll be having the log out and it should also be the promise because once we move on to the log out now we want to remove the cookies so if the cookies are being set by the back end and if the cookies are the HTTP only cookies it means those cookies can only be removed by the back end so once we click on the log out we'll be just uh clicking a button of the log out and then the back end would remove the cookies like the authentication cookies with that so that should again be we can have the promise that should be we can have in the white State because we don't want to return anything over there and now the create context should have the property so create context should have the user o like that the type of the user or like this or it should be the user o or it could be the null like this so now we have the O context and now what do we want to do now we want to create the provider for this context as well so we can have the const we can have the O provider like this so we have the O provider and the provider would wrap all of the childrens's inside that so we have the O provider that should be equals to a normal react component and inside that we would be accepting the children property we would be having some children over there CH run over there like this and it should have the type the type should be we can again have the react node like this we have the react node like this for the type and after that now let's move on so after this now we want to handle a couple of States as well within the provider so how we can do that so first state that we can have is the U state so we can have the snippit like first we'll be having the property of the user uh we should be having the property of the user I don't think what happened to that we have the user then we have the set user like this and the state should have the value of the user property like this the user or it could be the null as well so we can put the user or the null should be there in set the state and initial value should also be we can have the null like this so it should be the null and after that now let's move on so after that let's have the state for the authentication oh sorry we can have the login as well so we can have the logged in over there like we can have the is logged in like this and we can have the set is logged in and we can provide here the state that should be we can have the false and after that now let's move on so now we have the is loged in property as well now after we refresh this application so after once the user moves on into the application so we should run effect code as well we should run effect code we can run a function and we can verify if the user's cookies are still there and if the cookies are valid then the user doesn't need to be logged in so we can Define the effect function for that as well we can have the effect so as of now we won't be implementing that so first we need to implement the login functionality then only we want to do that so this effect function has only to do that what do we need to do inside that so we can have we can have the fetch if uh if the users cookies are valid then um we can have to then skip login so we should have this code inside the fact so we would be writing the logic after we write the implementation of the authentication then we can move on so then we should be having the functions for the login as well so we can have the login like this so that would be equals to a function and it could be asynchronous as well so we should write the asyn over there and we need the parameters as well so we need the same parameters like the email and the password we can copy we can paste now we be having the email and the password so as of now we just need the definitions now we have the login then we can have for the log out as well or we can have the sign up like the sign up it should contain in this properties like we can have the name email and the password let's Implement that over there name email and the password and now we should be having the log out function as well so we should be having the log out uh log out and here we won't be requiring any properties over there we don't need any variables over there and that's how it's going to work and here it should be the email instead of the emay and then here is it should be I think the email over there like this and now we have defined all of these properties and now now you can see now we have created the provider and now the provider needs to set those values as well which should be used by the children's so for that let's define the value cons we can have the value like this so that should be an object it should contain the properties like user we can have the is logged in over there it's logged in then we should have the properties of the login function as well the log out function as well the regist or we can have the sign of function as well so there could be a couple of functions and now the final thing that we want to do is now we want to return all these state code over there now we want to return all of the states to the children components so we can have the return we can have the Au context dot we can have the provider so now we have the Au context do provider and that should contain the value so value is wrapped within this component the value should be equal to the value and after that now we want to render all of the children's inside that so which should be the children like this so that's how it's going to work so you can see it was very simple so Redux implementation looks a bit complicated like sometimes you need to add the middle WS for these functions like the asynchronous code you need to add some middle ws and all but you can see it was very simple and it contains and the context contains the definition with the react itself not anything else so you can see now we have created the provider now we have the context now you can see we have the type definitions as well and now the final thing that we want to do is now we want to create a variable now we want to create the context that should be used by The Childrens so this is just the provider now we want to create the context that should be used by The Childrens so we can Define any names like we can have the cons use or or anything like that we can have the or directly as well so that should be equals to now what do we want to do we can have the use context we can have the use context directly and the context should be the Au context and that's it with that you can see now we have the context oh sorry it should be function as well it should be a use off that should be a function which can contain all of these properties like this and we should export it as well we should have the export cost we can have the use all and now we want to just export this as well we want to export the authentication provider as well so what we can do we can have export cost we can have the Au provider so that's how it's going to work and after that let's move on so you can see now the initial property of the a logged in is false now let's move on to the the main file the main. TSX now just render all of that so first at the top we would be having the Au provider we should be having the Au provider and now all of the child components so the main component the main children is the browser router but the properties and values from directly from the auth provider directly can be used in any component in any child component now let's move on so if you want to see the demo you can move on to the app component you can have the lock statement or either you can have the use o like this you can have the use O then you can have the loog lock should be we can have the use o dot you can have the is logged in property like this do is logged in like this so use do you can have is logged in like this so suppose if you save and if you move on to the application if you move on to the inspect now you will be seeing three infos like you have the false over there because now the authentication is false now the user is not there inside this but if we switch to the true if we switch it to the true like this this so you have the true over there you can see now you will be having the true over there and that's how it's going to work uh sorry and it can solve a couple of problems like the prop dring as well so suppose if you create the authentication here directly uh inside the app. TSX then you need to send it inside all of these children components so it can create some issues because there can be a uh there can be very difficulty to manage all of these props and data over there so that's why we can use the overall application state within the context or we can also use the Redux as well so they are all similar and now let's move on so now we can have a conditions like if the user is logged in or not so we can again move on we can switch this to the false and now we can move on to the header so let's close all of these files Let's Move On Again into the component slh and here now what do we want to do so here we want to render all of these links and for rendering the links we can create a separate component for that so we have the shared link we have the shared for the link as well like this so we can have the link dot we can have the TSX over there so I think we can change the name we can have the nav link like that we can have the navigation link over there and that could be a separate component now we can just render the RFC for the default uh B plate code now inside the nav link we should accept a couple of properties like where the user want to go so we can Define all of the types as well so we can have the type for this we can have the props and that should be equals to we can move on we can have the two that should be inside the string we can have your the background as well we can have a a different background suppose the button uses this link we can have the background that should be inside the string and what we can do and after that we can use the text as well so the text should also be inside the string that uh that what we want to wrap between the link what the text should be visible in the link then we can have the text we can have the color as well we can have the text color and that should be the text color again should also be inside the string format so we need the string and after that we can also require the on click function as well so we can have the on click over there like this so it should contains if someone wants to define the on click some can use this as a button as well so we can have the on click function as well and this is basically used for the log out as well suppose we want to remove the state as well so that should be for the log out and after that so that should be for the logout and after that we can use the promise here as well so that should be promise in a white form so we don't want to return anything and after that we should render here a link so we only need to return the link component directly from we can use from react. Dom we can import the link directly from we can have the Rd react rou Dom slash I think the link is named export so we can use the link over there and now we want to return the link so here we have the link over there and inside the link we can have the two prop so we haven't defined the props over there so which should contain the props like that should be equals to we can have the props type over there the two should be equals to we have the props or you can have the two then what you can do then you can move on you can Define here I think you can that's it I think then you can move on and what you can do you can provide the text between them so the text between them should be what you can do we have uh props do we can have the text and then we can provide the customized Styles as well we can have the style so that should be equals to what do we want to do so we can have the background like this so background should be we can have the props do we can have the BG then we can move on then we can have the color as well the text color that should be again we can have the props or we can have the text color like this we can have the text color and that's how it's going to work so here you can see now this is a customized component of the navigation link and it would be very useful now let's move on to the header so here you can see now we have we have the toolbar sorry now we have the toolbar over there so here it would be very simple so now let's move on to the so what should we do now so now we should have a condition so after this now what we can do so after this we can renter a box or we can rent a normal div from the mui and after that what we can do so inside this div we can just wrap a condition so first we need to define the reference for the authentication context so that we can get if the user is logged in or not we can get the cons we can have the O so that should be equals to use o so now we have the reference now what do we want to do so here we should have a condition like if the O DOT we have the user or we can have the O do is logged in it means now the user would be logged in then we can render a different styles over there and if it is not logged in then we can do different things so that would be a GSX tag the empty tag and here as well will be having the empty tag so once the user is logged in then what we can do so we can just use here the navigation link inside the shared components so that should have the navigation link so there should be two links over there so both should have the first one should be having the BG so if the user is logged in then we can provide a customized background color that should be we can have the hash d0 we can have triple FC we have the background color then we can move on so we can have the two that should be we can have slash we can have the chat then we can move on we can have the text then we can have go to we can have the chat then we can move on we can have the text color so that should be again I think we can have the black for the text color for this we can have the black and after that now we have the second navigation link as well so we can put the BG so here BG would be different so we can have has we can have the 51 538 f for the background color we can have the foreground color as well so for the foreground color we can just use the text color as the white then we can have the two that should be what we can do so we can have the log out here we can have the log out over there then what we can do so we can have the text as well that should be a ween of the log out and two should not be the log out two should be the home page because once the user locks out now we want to move on to the home screen as well and now I think that's enough but here we would be having the on click function as well so inside this navigation link we would be having the on click and here now what do we want to do so we can have the o. we can have the log out so we will be referencing the log out function directly from this and after that if the user is not logged in then again we can render a different links we can just copy this one we can just paste that over there think what do we need to do so now we can remove that so I don't have any code with me right now so what we can do so we can just copy these two n Tex once again so the color combination should be same so now we have these things over there so we can remove that and that's how it's going to work and now what do we want to do so now you can see now we have the background should be same the two should be equals to now what we can do we can have the login and the text should also be we can have the login text should be the login the text color should also be the black and here we would be having the same background and the forground color the two should be equals to we up this sign up and that should be we can have the sign up again like this we have the text of the sign up and that's how it's going to work I think that's enough for that right that's enough but if we move on to the application once again you can see now we have all of the data you can see now we have the login and the sign up but now we want to provide couple of Styles as well to the navigation link so let's move on let's just Implement that so we can move on to the nav link we can provide the class names for that we can have the class name and we can use a customized class name we can use some CSS styles with that so what we can do so here so we can have a style that should be we can have the nav link over there like we can have the nav link so let's Implement these Styles as well so we have the nav link let's Implement these Styles so we can move on to the root CSS file or or sorry if you want to create a customized CSS file then it's up to you but I would be defining it in inside the index so that should be we can have the nav link and inside there know what do we want to do so it should contain I think the font weight that should be somewhere around 600 we can have your the text transform that should be upper case then we can move on we can have the margin right that should be somewhere around 10 pixels margin from the left as well 10 pixels we can have the padding that should be 8 pixels top and bottom the 20 pixels from left left and right then we can have the Border radius that should be somewhere around 10 pixels with that so we have the 10 pixels then we can have the text decoration that should be we can have the none over there then we can have the font family I think font family is already defined in the typography then we I think yeah it is defined then we can have the lettera spacing as well that should be somewhere around one pixels that's enough now we have the naving and everything seems to be working perfectly fine over there now let's move on to the nav link so now let's move on to the application you can see now it looks like this now we have the login we have the sign up we can click on the login now we are into the login page we can click on the sign up we are into the sign up page and if the user is logged in so we can move on to the context so suppose that's the true so there you can can see now we have the go to chat and then we have the log out and it means everything seems to be working perfectly fine over there once we click on the log out we enter the home once we move on to the go to chat now we into the chat page so everything seems to be working perfectly fine and now what do we want to do is the next step so now we are moving very fast I know but let's move on so we can have the false again we can move on to the login now let's define the login screen as well so now let's design the login screen as well so let's move on so I'm into the paint and now we want to see that how it's going to look so let's move on so suppose it's a web page so suppose it's a web page so inside the left corner of the web page inside the left side so there would be two sides so inside the left side there would be an image so we can render the image of a robot and inside the right side we can just render here the form so inside the right side sorry we can render here the form here so we can just render the form so there can be some items onto the form so that could be the login and the sign up as well so we can have name email and the password for the sign up but if there are the mobile devices so inside the mobile devices the style will look different so inside the mobile devices what we're going to do is we can just Rend so suppose that's a mobile device so it's a mobile device so we only need to render here the form so we need to make the responsive designs so we'll be only be having the form over there and that's how it's going to look so let's move on so insert the login now what do we want to do so first I think we just focus on the design so here inside the return what we can use so we can just use the box from the material UI so box is just like a component of the material just like the div so we can import something that should be at theate M material and it should be we can have the box over there so we have the box and inside that what we can do so we can Pro the SX prop or what we can do so the SX is not required we can give the width that should be we can have the 100% for the width we can have the height as well and it should also be we can have the 100% and what we can do so we can have the display as well display should be again we can just use the flex so we can just put the display Flex we can have the flex that should be one as well and now what we can do so we'll be dividing the flex into two parts so suppose that's your another box so we'll be using the box for the image and there could be another box for the form so both will be having the display of the flex so the first box let's move on so we can have the padding that should be eight we can have the empty margin from the top that should be again uh it would be the eight we can have the display as well so display should be we can give the responsive designs we can have for the MD screen sizes for the medium the display should be we can have the flex but for the smaller devices for the SM the display should be we can have the SM the display should be we can have the none and same happens with the extra small devices as well suppose that's a device Maybe it has very low width we can give the display that should be we can have the none and after that let's move on so here we have the box and here you can see inside that we can just render an image so there would be an image we can give the AI robot. VN PNG AI robot dot we have the PNG over there for the images we can get the alt we can have the robot over there like this and the credit goes to the respective owner so we have this image then we can move on we can have this style that should be around 400 pixels would be enough for the style over there for the width so let's move on we can give the width that should be 400 pixels that's how we want to do that so you can see now you can see it's looking great you can see now it's looking great and now you can see it's working fine so there you can see if we have defined the padding G it means 8 into 8 times so if we Define the padding of the one over there in the material UI the by default spacing is 8 pixels so 1 is equals to the 8 and if you have defined the 8 it means it is is 8 into 8 which is 64 pixels for the padding and all and now let's move on so here you can see the first one has been completed now let's move on to the second box as well so inside this box there would be a normal things and this box would contain the form so let's move on so here we can Pro the display that should be again we can use the flex over there I think we can put the flex property as well so inside this Flex what we can do so for the extra small screen devices we should have the full Flex which is the one which we have defined over there and for the medium devices we can have the flex that should be somewhere around we can give the 0.5 so that's how it's going to work and after that let's move on let's provide a couple of more props like we can move on uh we can Prov the justifi content that should be inside the center of the screen we can Pro the Align items that should be again inside the center of the screen I think that's enough then we can move on we can put the padding as well that should be somewhere around two over there we can have thek margin from the left that should be we can have the auto over there like this we can have the auto we can have the margin from the top and that should be somewhere around 16 so we have these designs over there and now inste that now we can render a form so let's move on so we can just render here the form directly from the HTML tax and here now what we can do so here we can provide a customized styling for that so styling could be we can just for the margin that should be we can have the auto from all of the sides then we can have the padding as well so we can the padding that should be around we can give the 30 pixels of the padding from all of the sides the Box Shadow should be there somewhere around we can give the 10 pixels horizontally 10 pixels for the vertical Shadow 20 pixels we can give for the blow we can give hash triple 0 for the color of the Shadow then we can get the Bott radius so that should be somewhere around 10 pixels would be enough for that and then finally we can give the Border here so we can have the border that should be we can use the none so we don't need to use the Border and after that now what can we do so inside this form we can just renter another container so we can have a container over there like suppose that could be equal to box and here we can provide a couple of more styling like again we can have the display like this so we can have the display again we can use the flex then we can move on we can have the flex direction that should be we can have the column over there and final thing that we can use so we can move on we can have the justifier to the content that should be inside the center of the screen so that's how it's going to work and after that let's move on let's just add the elements over there so the first thing that we want to add over there that should be equals to the typography so we can the typog graphy over there because we want to add a so what we can do we can add a login text over there as well we can use the import something that should be from we can have the material and I think we can just use the typography directly from this as well we can use the typography and then here we can again use the typography over there we can provide a Styles like we can give the variant that the H4 so with the variant you can provide like what variant do you need of the HTML so here we would be needing the H4 we would be having the text align that should be inside we can have the center over there so I think we can give the padding as well padding somewhere around two would be enough font weight that should be 600 and that's it I think we can give the color color is already defined that's it now what we can use so we can just move on we can just provide the login like this so if you save and if you move on so let's see how it looks if we move on so there you can see now we have the login and that's how it's going to work and now after this typography now we can move on and we can define an input tag so we'll be using a customized input tag for this application because if you move on to the mi.com so if you move on to the material UI so they provideed different type of input components you can move on to the material UI you you can just search for the text field so this is the text field API so you can see if you move on to the demos of the text field so they provide similar type of text Fields you can see you have the color of blue around that so it is based on the material design and now let's move on so we'll be using this type of text Fields as well but we need to just remove and we need to just modify the root classes of the text field so let's move on to the API section of the text field so let's move on to the API so you have your I think uh let's move on so here we have the text field so we want to move on to the base classes and here we want to just customize the base class so that we should have the white color as per the theme of our application so let's move on so I'm going to show you that how you can do that so here we need to move on to the components so inside the shared the text field would be shared so we can have the customized input so we have the customiz input over there dot we have the TSX over there and now let's define the component over there like this so we would be having a different props for that so we can have the props so that should be we can have the name so we can have the unique name for the text field unique name we can have the type over there so we can have the type like this that should be again inside the string and I think that's enough I think we can have the label as well yes we can have the label and that should be equals to we can again have the string like this so we have these props for the customized input so we can also have the props like this and that should be equals to the props and now here we want to return the text field from the material UI so we can use the text field we can just move on to the top we can have the import the text field uh from we can have from mui material like this we can have mu material SL we can have the text field like this so we can have the text field over there like this we have the text field and from there now what we can do so we can have the name so the name should be equals to what we can do so here we can just provide the props do we have the name over there we can provide here I think the label as well the label should be what we can do props do we have the label for this we can provide the type as well the type should be again we can have the props to we can have the type start we can have the type over there and now let's move on let's move on to the login component and let's just see that how it looks if we do not provide any style so we can have the customized input so we can use the customized input two times over there and let's provide some props as well so we can give the type as well so the first one should have the type of the email the name should be again we can have the email then we can have the password as well sorry we can have the label as well that should be again we can have the email over there like this and after that let's move on to the second the type should be we can have the password we can have the name that should be equals to the password over there we should have the same thing for the label as well so we can have the label that should be equals to we can have the password so if we save and if we move on so there you can see now we have the email then we have the password and that's how it's looking over there so if you move on again so you can see now if we remove all of these uh inputs over there so we have the email then we have the password so now we want to change that as well so let's move on and now we want to just what we need to do so we want to just inject some classes some styles to the root classes of the customize input so we can move on to the text field so what we can do so it is very simple with the material UI so first we can Define the props for the label so we can the input label props we can give some props that should be now what we can do we can have the style so I think the label already have the Styles like this so you can see if we move on to the password you can see now we have the blue color for that so we can give the style that should be we can have the color that should be I think we can give the white so now you can see now it has resolved the issue and that's how it's going to work and after that let's move on so you can see now we have some outlines as well so let's move on so now we can have the input props as well so we can have the input props and inside this now what we can do so we can again use this style and we can provide a customized style for that we can give the width of this that should be we can have the 400 pixels or if you want to accept the width then you can use that as well so here we have the 400 pixels then we can move on we can the Bott radius that should be somewhere around I think 10 would be enough for that then we can move on we can have the font size so that should be somewhere around 20 would be enough for that and now the final thing that we want to do the color should be what we can do we can use the white so there you can see now we have these things over there and everything seems to be working fine over there and we can also provide some margin between them as well you can have the margin that should be to the normal so now you can see now we'll be having some margin between them and that's how it's going to work and now the final thing that we want to change is we want to change the outline so for changing the outline now we want to move on we can move on to the expect and there now what we can do so we can move on we can just see this that what exactly are the class names over there so let's just search with that over there so um so we would be having the label as well I think the label has already fixed that so there is this class name like mui outlined input not outline so what we can do uh so we have your mui input base rout mui so I think we are using the outline so what we can do so mu input base mu input form control input tag as this so you can see we have the mui outline input so we can copy this class name mui outlined input so we can copy and we can move on to our CSS file index. CSS we can paste this file over there now we have this class over there outlined input we have here the root class as well so we can move on we can have the root like this we have the root dot we can have the mui / the focus here so we have the focus over there so this is for the focus and let's move on so we have the notch outline as well so you can see you have the notch outline so let's move on let's copy that as well till here and M your input again we can provide the same style for this as well mui outlin input we have the notch outline so here now what we can do so we can the Border color so that should be we can have the white like this and it should be important so let's see how it looks uh you can see now we have the B color of the white and that's how it's going to look you can see now it's looking great over there now we have the email now we have the password and there you can see it's looking great and everything seems to be working perfectly fine so you can see how we can just customize the CSS classes of this as well and the final thing that we want to do inside the login is now we want to create a button so let's move on to the login here so let's create a new button over there and the button should also be imported from Material UI so which should be we can have the button and after that let's move on so here we can just render here the button so the button should be there we can provide the type for the button that should be we can have the submit then we can move on we can provide the SX prop SX prop should be having we can have the padding from the X that should be we can have the two padding from the Y that should be I think we can give the one over there we can provide the margin from the top that should be we can have the two over there we can provide the width should be same as the form 400 pixels then we can move on WE the Bott radius so that should be somewhere around two enough two is enough for that we can have the background color as well so we can give a different background color we can have hash we can have Z we can have Tri f see as the background color as we used inside the navigation bar as well so after that I think we can put the hover class as well so for providing the hover you need to wrap it inside the strings then you can search for the hover and then you can provide the classes so you can have the BG color that should be we can have the white and you can have the foreground color color of the foreground that should be equals to we can have the black and here now what we can do so here we can provide the login like this so we can have the login do and that's how it's going to look so you can see now have the login and if you want to provide an icon as well after the end of the button it is very easy so you can just search for the react icons over there so here so you can have the login as well here you can have the login and there you can see there are a couple of login icons that you can use and here now what we'll be using so we can use this as well it is looking great and now let's move on to the top and we can import this as well we can import this icon from react icons over there slash we can have the io so here we can use this icon iOS login let's move on and inside the button props let's create another prop over there so that should be End Icon and that should be equals to this icon over there we have the io I login like this and that's how it's going to look so if you save and if you move on so there you can see now we have the login button and that's how it's going to work so you can see now it's looking great now we can move on so now we can move on and now we can handle the form data as well so let's move on so to handle the form data what you need to do so you can see you have provided the name as the uh you have provided the name and the password over there email and the password as the name now you can create a function and you can use the form data to get the values without using any state so you can have the const you can have your handle submit like this so that should be equals to you can have the function over there there and inside this you can get the event and to get the type of the event you can move on to the form you can have the on submit over there you can provide this so you can see you have the event like this you have the react. form event HTML event like this HTML form event so let's move on so let's just use that over there like you have the reactor form event and this is the type of the event then first thing that you want to do is you want to prevent the default Behavior so that the browser should not be refreshed and you can provide the classes over there like you can have the handle submit now after that now you can just create a new form data so you can have the con you the form data over there so that should be equals to a new form data so you have the form data and you need to provide the target of the form so you can have the event dot you have the current Target and that's how it's going to work and after that you can get all of the values for the form as well so you can get the cons email like this so that should be you can have the form data dot you can have the get that should be equals to we can have the email because you have provided the name as the email so it works on the name basis and same for the password as well so you have the password and that should be equals to form data doget that should be equals to the password now you can log all of these values as well you can log the email you can log the password as well and that's how it's going to work so if we say if we move on if we move on to the inspect panel if we move on to the inspect if we move on to the console so there you can see if we provide the Styles over there if you click on the login then you can see now we got the Styles over there we have the anadani test.com then we have the password and everything seems to be working perfectly fine so now we have the data of the form and everything seems to be working perfectly fine and now the final thing that we want to do is now we want to login so after we click on the login now we want to make the API request to the back end so for making the API requests we need a package so what we can do so we can move on to front end once again we can install a package which is the exos so exos is used to send the API request it is used for the communication with the back end and the front end so let's install the exos and with the help of exos we'll be just um exchanging the API tokens with the back end and with the front end so let's move on so here we have the main. TSX file over there and here now we can set some default properties of the xos as well so we can use the xos dot we can have the defaults dot we can have the base URL so we can Prov the base URL for this as well so what's the base URL for the back end we can have the HTTP we can have the Local Host the port of we can have the 5,000 SL we can have the API SL we can have the V1 so that's the base URL and after that we need to set the base configurations as well so we can have the exos dot we can have the defaults dot we can have the width credentials so if you use the width credentials so it will allow setting the cookies directly from the back end and just exchanging the cookies with the back end so with the help of with credentials it will help you to exchange the cookies so with credentials that should be equals to the true so with every request this would be attached and now let's move on let's move on into the source folder let's create a new file for the helpers so we can have the helpers over there like this we can have the helpers and here we can create a new file that should be at the API communicator. TS so from this file we'll be just defining some functions that can be used to work with the API so let's move on let's just have the first function so what we can do so we we can have the ASN C of function so we can have the cons we can have the login user so we can have the user login like this so from here now we can just Define the functions which can be used for the communication so let's move on so we can have the export course we can have the login user like this login user and that should be equals to we can have the asynchronous arrow function over there we have the async arrow function and the param are required like we can have the email the type should be we can have the string password then we can move on so we can have the cons response so that should be equals to we can have the await then we can use the xos package so we can move on to the top so we can import the xcos as well we can have the xcos over there and it should be imported directly from the xos package so we can have the xos like this so await it should be equals to xos xos start we can have the post as well so that's a post request and the URL that we want to Define should be/ user SL we can have the login over there like this so that would be our URL and after that now what do we want to do is the next step so that's a post request so inside the second parameter now we want to provide some data as well along with it so we can send some data so we need to send the email then we need to send the password as well so these are the data that we want to provide and now let's move on so after we get the response then what we can do so we can move on we can verify if the response dot we can have response. status is not equals to we have the 200 it means if it is not okay then what we can do so we can return or we can have the throw new error and we can send the error message suppose that could be we can have the unable to login so that would be error message but if the response. status is the 20 it means if everything is successful then we can grab the data con data and that should be uh equals to that should be equals to what do we need to do so it should be the response do we can have the data so it should be the weight because that's a promise so it should be the response. data and after that the final thing that we want to do is we want to return the data over there and that's how it's going to work and now let's move on to I think inside the O context over there inside the Au context so we have the login function so here we need to use this function as well so what we can do so we can have the return or what we can do so we can have the cons we can have the data so that should be equals to await and await it should be equals to we can have the login user like this we have the log Lo user and from this we would be having the data so login user should be equals to we can have the email then we can send the same password over there and after that we will get the data so we can have verification check if we have the data then only we want to do something then what we want to do then we can move on so we can have the set user so that should be equals to what do we need to do so user should have the email that should be data do we can have the email and the user would be having the name as well so we can have the data do you can have the name like this so we will be having the set user like this and then we will be having the set logged in property as well so we have the set is logged in and that should be equals to the true so that's how it's going to work and after that you can say everything seems to be working perfectly fine and after that now we can move on to the main file which is a form so let's move on to the page so what we can do so we can make this function as an asynchronous function and after we get the data then what we can do so you can see uh if you remember we have installed a library as well which is uh toast bar so we can show the toast notifications so let's move on so again we need to move on to the main. TSX so we can import something from that Library so we can import something from that should be equal to react H toast and we can import the toaster so we have here the toaster so toaster should be there at the root of your file so here we have the root so it should be there at the top hierarchy of your file so that it can add some CSS and all of the things required to make the toast so let's move on so after the Au provider or after the theme provider then we can use the toast bar over there like this so here we have the toas like this and if you want to style some positions as well you can use the position so you can have the top right you uh you can have the top Center like this so I think we can use the top right here and everything should work perfectly fine and now let's move on so now let's move on to the login and let's just use a function of the toast so we can import something that should be equals to from it should be equals to react hot toast and now what we can do so we can have the try catch block so inside the try now what we can do so we can first have the const or what we can do so we can directly use the weight and here we need to use the context here so we can have the con we can have the O so that should be the use Au over there now let's use the context we can have the O DOT we can have the login so we can have the au. login after that we can provide the email we can provide the password as well we have the au. login email and the password and that's how it's going to work and uh I think there some type errors like that could be null as well so yeah this can be null so what we can do so we can have the S we can have the string so we can just skip the type checking we can Pro the S string over there and after that it will be logged in so let's use the toast over there so you need to import this thing over there you you have the toast so I think you need to import the toast directly from the reactor toast so you have the toast so toast is a function which creates the toast so you can have the toast do you have the loading so first we need to show the loading state so we can have the U we can have the signing in like this so we can have the signing in and after that let's move on we can provide the second argument that's the ID so we want to provide only one toast bar inside this one component inside this one page so we need to provide a ID so ID should be same inside all of the toast that can be for the login as well that can be for the success as well and for the error as well so it should have the ID so we can have the ID that should be equals to the one like this or if you want to change the ID that should be for we can have the login over there like this so we have the toast. loing after we are successfully logged in then we can again use a toast and this time it should be the success we can have the signed and we can have the successfully like this and we can have the same ID and then if we get any error then what we can do so we can have the toast to we can have the error we can have the sign in again we can have the signing and we can have the failed so that's how it's going to work and we can also log the error as well so we can have log the error over there like this so that's how it's going to work so now we have these things and now everything should work perfectly fine but now we want to move on to the back end as well so if you move on to the back end so I want to show you one thing if you move on to the users controllers you can see you are just sending the ID over there inside the response you are just sending the ID so instead of the ID now what you can do you can just move on so you can just provide the name of the user that should be you can have the user dot you can have the name you can send the email as well so that should be we can have the user do we can have the email so that's how it's going to work and same thing should be there with the sign up as well so we can move on to the sign up that should be the same thing over there like this and now let's move on and let's just open the development server of the back end as well so here inside this terminal let's move on to back end so when we can have the npm Run we can have the dev so now let's move on so let's see what happens now so so you can see Server open and connected to datab okay so let's move on so now we want to provide the credentials so what credentials did we use so we have used the James at the test.com we can use the password 1 2 3 4 5 6 so let's see what happens if we move on to the network so if we just click on the login so let's see what happens so there you can see now we are getting an error which is the course error you can see it is uh expected because one server because now you are in the server of 5173 and the back end is running on this server of 5,000 so one server so if one server make the request to another server so then that Server doesn't allow any different server to make the request so if the 5173 request some data or send some requests to the 5,000 so 5,000 would not allow the server to make an entry or to do something with their server so that's why we have the course error inside the browsers and it's the security policy that every browser has followed so now we want to Whit list This Server we want to Whit list around server around domain with that server so that we should interact with that API so let's move on so we can move on to the appts over there and there you can see we have already added a package which is a course you can see this is a course which will bypass this error so let's move on to I think inside the app. TS so what we can do so inside the first middleware let's just use the course over there we can have the app. use that should be we can have the course you can import the the course as well you can have the import we can have the course that should be equals to from it should be equals to the course like this so that's how it's going to work and after that you need to use the course and here we need to provide some options as well because here we are using a couple of security attributes as well so now what do we want to do so here we want to use the origin first so what we can do so we can have the origin we can provide the origin and the origin can be ar as well so we can provide the string so that should be we can have the HTTP Local Host the port of we can have the 5173 so this is where our react application is hosted now and then inside the second parameter we can provide the credentials because here we are exchanging the security attributes like the HTTP only cookies so we want to set the credentials that should be equals to we can have the true so with the help of the Cod now we can access This Server only from this domain right so let's just test it out once again so let's move on let's just click on the login again let's just remove everything remove the console window as well so let's see what happens if we click on the login so there you can see now we have the status of 200 you can see now we solve the message as well and another thing that you can see now we are into the go to chat window and we are into the log out as well so everything seems to be working perfectly fine over there you can say this was okay we have the 200 of the okay request you can see we are having the cookies as well so if I want to show you the cookies you can move on to the application you can move on to the cookies and from there you can see now you have the cookie you have the Au token over there and there you can see you have the domain of the Local Host you have the path of the slash you have the expires property as well and there you can see you have the size and there you can see you have the HTTP only flag as well you have the HTTP only flag and that's how it's going to work and after that let's move on and let's just try to get the cookie you have the document. cookie so let's see what happens so you can see document. cookie is empty string because it cannot be accessed by the JavaScript but there's one thing if you just remove the HTTP only attribute double click on that and let's just remove that and there you can see if you run the document or you can have the document of the cookie then you can see now you can get the cookie so you can see that's not secure so that's why we use the HTTP only cookies like this so that it cannot be accessed by the browser so everything seems to be working perfectly fine so let's close all of that and now you can see after completing the login functionality now you can see inside the header as well it has been updated now we can go to chat and we have the log out functionality as well and now let's complete the authentication workflow and let's just quickly start the chat GPD apis and now it seems to be working fine and after that now again we want to move on to the context of the authentication and if you remember that we have created an effect code there it means once the user refreshes or once the user opens this application so if the user has the cookies and if they are valid then we don't want the user user to be logged in once again so let's move on so here now what do we want to do so here we want to make another request inside the backend in which we can verify the token of the user and if the verification token is successful and if the token is verified then the user doesn't need to login again so let's move on so what do we want to do so we can move on to the back end and we can move on to the controller sa so inside the users controller sorry we can move on to the user routes over there and here now what we can do so we can create another route that should be a post request or that should be a get request over there and that should be we can have the login or we can have the O status like this we have the O we can have the status over there we have the O status and here we do not need any data because here we won't be sending anything so here we would require a function so here we require a middle we function which will be used to verify the token if the token verification would be successful then we'll again move on to the different middleware function to just validate the record and to send back the the credentials so let's move on and it would be very very easy so let's move on to the utils once again so inside the utils we have the token manager so here if we can create a token we can again create a new function in which we can verify the token of the user so let's move on so we can have the export cost we can have the verify we can have the token like this we have the verify token and that should be a n synchronous Arrow function and this would be a middle W because now we would be using the verify token here inside this routes inside this of status so let's move on so we can have the verified token like this so it should be used here so that's why it would be requiring a couple of parameters as well directly from the express it could be the request that could be the request object we have the express it should be the response that should be again we can have the response over there directly from the express once again response uh it should be the response like this and it should be the next function as well so that we can move on to the next function so it should be the response it should be the next to move on to the next function over there like this and now after that now what do we want to do so now we would be sending some cookies along with the request so we would be sending some cookies along with the request so cookies would be stored inside the signed cookies so we can the cons we can get the token like this so that should be equals to what we can use so we can have the request dot we can have this signed cookies because here we are signing the cookies and we need to provide the variable name over there the signed cookies so signed cookies is an object which can contain all of the cookies data and again you can move on to application so you can move on to the application you can see here we are storing the O token so we want the O token cie over there so what we can use over there so we can move on we can use the template also over there and that should be we can have the cookie name like this so we already have a parameter so we can get the cookie name so now let's move on and let's just log the request over there let's just log the token but before moving on into this request so now we should create a new request inside the front end as well so let's move on so inside the Au context or we can move on to the API Communicator let's create another request over there it would be a different request it could be we can have the check Au we can have the status like this it could be this request here we do not need any parameters so this would be a get request and it should be user SL we have the we can have the O status over so it has the O status over there and after that now let's move on we don't need to send any data because it's not required who and if the response. status not equals to 200 then we can have the enable to what we can do we can have authenticate like this unable to authenticate and if everything is successful then we'll be sending the same data along with the request so let's move on to the context as well so inside the context now what we can do so here we have the use effect code and inside this what we can do we can Define another function that could be a SN function that could be we can have the check status and inside this we won't be requiring any parameter over there let's remove that and here what we can do so we can have the cons we can have the data that should be equals to a weight and that should be equals to we can have the check out status over there like this check out status and now we want to follow the same steps over there now we want to follow the same steps like this same steps like this let's move on if you have the data then do this or else what we can do so else it would be same like what we can do so we can provide these properties over there and we can set it over null so we can set as the null over there so I think it's not required over there because it would be run on because it will run only one time so it's not required over there if you have the data than this then we want to do this thing and if we have the data and everything seems to be working perfectly fine so now we have this logged in set user two and everything should work perfectly fine so now again we can move back to the users or we can move back to our token controllers so now let's make a new request so if we just refresh the page so let's see what happens if the request goes or not if we refresh the page so let's see what happens so no the request was not processed so let's see what has happened over there let's move on to the homepage as well and let's remove that let's click on the refresh once again let's have I think we can have the fetch xhr so yes yes yes there was an error because we haven't called this function so now we need to call this function as well so we can have the check status over there we have the check status over there like this we have the check status and let's see what happens if we move on so there you can see now instantly we got the token right right so now there you can see instantly we got the token and that's how it's going to work so you can see now everything seems to be working perfectly fine and now let's move on to the Token manager so now we have the token and now the last thing that we want to do here is now we want to verify the token so now we want to verify the token so we can verify the token by just checking that if the token has the data if the token is valid then we can move on to the next metalware but if the token is not valid then what we can do so then final thing that we we can do is now we can just stop this request we can avoid the request and we can send the return message and now let's see that how we can just verify the token of the user so we can have the return we can have the new promise so we can return a new promise uh so here we are using the promise and it's a void because we want to verify some parameters like we can resolve the promise or we can reject the promise as well we can have the reject like this so let's move on so we have the resolve and the reject and after that now what do we want to do so here we can also return one thing we can return the JWT do we can have the verify so JWT has a function of the verify which can verify the token so we need to provide the token string over there so we can have the token like this and then the second thing that we want to do is now we want to provide the secret key so we can provide the process. environment. JWT secret once again so we have the secret key and after that there is a third parameter as well which is a call back in which we will get two parameters first there would be the error if we get any error then it would be stored inside this error and if everything is successful then we would be getting the success inside that it would be the success so now let's move on here so now let's just verify once again so now we can verify just simple thing like if there is an error it means now there was an error with the request then what we can do so we can have the reject we can reject the promise we can have the error dot we have the message as well but I think the promise is void so we don't need the message as as well but it's up to you then we can move on we can have the return response or we can have the status that should be 41 which is unauthorized then we can move on we can have the Json over there we can have the message over there like this or we can have the Json we can have the message like this we can have the JWT or we can have the token expired we have the token expired like this if we get an error but if the error is not there if if we are successful then we can provide the else case insert the else now what we can do so we can just so what we can do here so it would be very simple so we can set some parameters in this function we can set some local parameters for this request in this function and then we can use those parameters inside the next request so it is possible with the express so what we will do so we'll send some local variables over there so first let's have the lock statement we can have the token verification successful we can have the successful over there like this so verification like this token verification successful and then now what we can do so after the lock then we can move on so then we can just have the resolve so we need to resolve the promise as well we can resolve the promise and then we can move on then we can have the response so from this middle web so this middle W can set some local variables from the response and then we can use them from the next middle wave soch technically it is possible with the express because you are setting the local variables directly from this function and then you can use that inside next middleware as well so now we can have the response dot we can have the locals dot we can send some data like we can send the JWT data like this and that should be equals to we can have the success so all of the data should be there inside the success so we will be setting that and then what we can do so we can just return to next middle wave so that was the last thing that now we want to return to to the next midal W so you can say this was the final code for this and we want to use another thing over there like if we don't have the token like this if we don't have the token and if the token dot we have the trim like this we can have the token do trim is equal equals to we can have the empty string so then what do we want to do so now we can just move on we can just return the response to we can have the status that should be again we can have the 41 once again we can send the Json message once again we can send the message over there then we can have the token not received like this so we can have the token not received so that's how it's going to work and if we have the token then only we'll be having this return statement so now let's move on so here you can see it working great it's working fine now let's move on to the user routes once again so we have the user routes and here what we can do we can Define another middleware function in which we can check the authentication status we can have verify something so we can have the verify we can have the verify user like this so we can have this function over there and now inside this function now what do we want to do so here we would be getting some local variables as well right because we have seted some local variables so they can be accessible over here now inside this now what we can do I think so first we can verify if the token was malfunctioned or not so let's move on so inste the try now what we can do so so first we can try and get the user so we can remove this we can have the await user. find one so now we can find the user email so email should be equals to we can have the response do we can have the locals JWT data like this do we can have the email so we can find the user or what we can do so we can have the find by ID as well because we are already encrypting the ID as well so we can have the find by ID and that should be response. locals. jwd data that should be equals to the ID like this so that should be the ID and after that we can check if we don't have the user then we can send this message as well like the user not register or token or we can have the token wall function and after that if we have the user then we can verify like if the user do we can have the idore ID do2 string if the ID is equals to the same of the idid that we are getting inside the response to we have the locals JWT data like this do we have the ID then only we want to move ahead so what we can do here so we can just move on so then if we are getting this ID over there so I think we can just use here this like this if it is not okay if it is not matching then what we can do we can send the response. status 401 then we can send the token and user like we can send here permissions didn't match match like this so we can the permissions didn't match and you can also store these strings inside a separate variable as well and it's also good option but here let's just complete this application so now we have two string and if everything works fine then now what we can do so if we pass this validation check if we are coming here it means everything is working fine then what we can do so then you can see now the token should not be created again so we can remove the token creation code over there let's remove that and let's move on so now we can just send the details to the user so now let's see what happens so if we move on to the application if we refresh so now we should be completing all of that if we refresh if we move on to the network so now we are getting the 401 inside the preview we are getting the user not registered so that's okay let's just check but you can see the token verification was successful let's see that what exactly is happening so now here what we can do so we can lock something we can log the user dot we can have the underscore ID dot we have the two string and then we can just log the response to we can have the locals do JWT data like this do we can have the ID so let's see what happens so let's see what happens here inside this lock statement so if we again refresh this you can see uh what happened with that user not registered so that was the error because you can see now we are running the user login so now let's move on and that should be equals to what was the function so we can have the verify I think we can have the verify like this so we can have the verify user like this so let's see what happens now so that was the error so let's see what happens this time so let's move on so if we again refresh you can see now we are getting the 200 and there you can see now we are getting the details as well so everything seems to be working fine you can see now it is working great you can see now the IDS are same you can see everything seems to be working perfectly fine you can see now we are coming ahead you can see everything seems to be working fine and that's how it's going to work so you can see now it's working great over there so you can see congratulations on completing the secure back end as well so now let's move on to the Token manager and remove this logs as well so just remove these logs over there because blocks should not be there inside the production so that's how it's going to work so now you can see now you completed that and everything seems to be working perfectly fine and now if we refresh the page you can see instantly we'll be moving on to go to chat and now finally now let's work with the open and let's create the chat gbt type application this time so the authentication seems to be working perfectly fine and now we want to move on and now we want to build the chat functionality for this application so before that I want to move on to the open a platform so now you want to move on to this and there you can see you need to click on the GPD so now we'll be using the GPT models for it so there are a couple of models for the GPT GPT 4 GPT 3.5 turbo so here what we'll be using so we'll be using the GPT 3.5 turbo and there you can see how the chat completions API work with the open AI you can see this can be a response you have the Open chat completion. create and there you can see that's how it works so first there would be a role uh you can define a role of the system that you are this this you can Define the name of your model you can Define anything and then after that you have the role so first the user so first the role would be the user and user will ask a question and we have a question inside the content property content is actually the message so we have the content like who won the World Series in 2020 then you have the assistant that the Los Angels and dash dash dash and he has come up with an answer and then again you have the role like this you have the user and then you have the content so that's how the API works with that and you need to store all of these messages to keep the context of the conversation the context means suppose you ask a question like who won the World Series in 2020 and there you can see it has come up with an answer and now you ask that where it was played so you need to store all of these conversations so that the open AI knows that on what topic you are discussing with me something so that's how it works so you need to just store all of these messages so that the open AI sees that what exactly the user is talking about and then give that answer accordingly so now let's move on and we have already created the collection of the user and inside that we have the chats as well so now let's work on them so now I want to move on so we can move on into I think first we can move on into the back end so inside the back end we can move on so here you can see inside if we move on to the controllers so now we should move on to the routes and there you can see now we have the chat routes as well now let's create another route as well for the chats so that it should work accordingly so here now what do we want to do so here there would be a new route for the chat so we can have the chat routes start we can have the post so that would be a post request in which now what do we want to do so we'll be having a chat SL we can have the new like this so we can have the chat SL new and after that this would only work so chat routes is a protected API so we can add that as well and only the authenticated and authorized users can access that so what we can do so after we move on to/ new API chat slne then we can move on so we can have the verified token so we can have the verified token so that we should uh verify the token of the user and then only we want to move ahead and then what we can do so we can define a controller function from which we can generate the chat completion for the user so let's move on to the controllers let's create a new controller that we can have chats controllers like that chat controllers do we can have the TS and after that let's define the controller function for that so we can have the expert cost we can have the uh we can have the generate chat we can have the completion so that would be equals to we can have the asynchronous errow function over there and it would be same like the users controller so the parameters would be same like the request response and the next it should be same so we have the request it should be imported from the express response should be imported from Express the next function is there in the express and that's how it's going to work and after that now what do we want to do so first now we want to configure the open a so for that we want to use the open apis so first we want to configure the open API with that and for configuration let's move on so we can define a function as well inside the utils or we can have the config we can Define the opening i p config dots and here we can Define the function we can have the function configure we can reopen hey I like this so we have this function over there so after that now what do we want to do so here we can have the cons we can have the config like that so that should be equals to we can have a new configuration over there a new configuration like this and that should be we can have the object over there and now we want to provide a couple of keys like first we want to provide the API key for that API key should be equals to begin of the process do begin of the environment dot you can move on to the environment as well you can see here we have here the API Keys as well open I secret so let's just use that so you can copy that and then you can paste that over there and after that let's move on so we can have the API oh sorry we can have the organization ID as well we can have the organization so we can have the process do we can have the envirment dot we can have the open AI I think we can again move on to the envirment so that should be open a organization ID like this so we have this thing over there it should be event like this environment like this so now we have the configuration with that and everything should work perfectly fine so here we have the configure of the open Ai and we can export this function as well so we can the export const we have the configure open a that should be equals to function like this so now we have this function of the configure open Ai and now we want to move on and after that so here inside the generate chat completion now what do we want to do so here we need the message from the user so we want the message from the user so let's get that so we can have the con something that should be equals to we can have the request or we can have the body like this so from the body we'll be accessing the message property directly from the user and now you can see now what do we want to do as the next step now we have the message so we should add the validation as well so let's just complete one by one so let's move on to the validations as well inside the util inside the validators let's copy that the sign up and let's remove all of that so we can have the message over there like this so we can have the message not empty and we can have the message so we can have this function over there the chat completion validator so let's just copy and let's just use that inside the chat routes as well so after coming to the new let's have the verify token so first verify the token of the user and I think before verifying the token let's have the validation so we can have the validate over there and that should be equals to we can have the chat completion valid dat like that then we should be having the verified token and then let's move on to the final thing we can have generate chat completion so there are a couple of middlewares for this request because it's a protected API now let's move on to the chat completion so here we have the message now and after that first thing that we want to do is now again we want to verify the details of the user so we can have the cons we can have the user like this that should be equals to your weight and that should be equals to the user we can uh access the user model dot we can have the find by ID we can find a user by its ID and directly from the response dot we can have the locals JWT data like that dot we can have the ID so with the help of this now we'll be getting the ID now we'll be getting the whole user object and again we can verify if we don't have the user then what we can do we can have the return response to we can have the status that should be 41 to we can have the Json like that message like that and that should be the same message that we have created so we created the same message inside the users controller and I think you should store all of these uh static strings inside inside something like inside the constant TS so it's a good practice so now what we can do so we can just copy that over there like the user not register or the token Mal function we can have the message over there and after that after we have the user then what do we need to do is the next step after we have the user so then we want to just grab all of the chats of the user to get the context text of the conversation so first now what we will do grab chats of user like that so grab the chats of the user then the second thing would be send all chats with new one so we'll be sending all previous chats with the new one to API so that's how it's going to work so there are three simple steps for that send all of the chats with new one to the open API and then we'll be getting the response so there are three steps that we want to do so now what do we want to do so first we need to grab all of the chats of the user so we can have the cons we can have the chats like that and that should be equals to we can have the user dot we can have the chats dot we can have the map so we can map through all of the chats of the user so inside each chat there would be a role property so there would be a role and there would be a Content as well like this so there would be the content like that and you already know that how the role and the content works because each chat message has a role and the content property so we have the role and the content after that now what do we want to do and we can just return the same thing over there like this the role and we can have the content so with the help of this now we'll be having the array of the messages with the role and the content inside that now we have all of the messages of the user and then now what do want to do so this is the static message of the chats okay then we can have the chats like that we have the chats do push the latest message so we'll be pushing the latest message to the chats and inside that we'll be having the content and that should be equals to we can have the message like that the latest message received from the user and the role that we'll be having should be we can have the user like that so the role should also be the user should always be the user and we have the chats like that and then now what do we want to do so here we are just storing all of the chats inside the static array as well inside the static array inside just and this array is just for the memory purpose so now we want to store the chats inside the main user object as well so let's move on so we can have the user model dot we can have the chats like that we have the chats dot we can have the push like that so we can have the push so we can have the chat. push and now what we can do so we can have the content that should be equals to we can have the message and then what we can do so we can have the role as well so we can define the role so that should also be we can have the user like that so we can have the role of the user so that's how it's going to work so now we are grabbing all of the chats of the user and there you can see we have the chats and now the Second Step would be now we want to move on so now we want to move on and now we want to send all of the chats to the open API so let's move on so now we have the configuration of the openi right then we can have the cons we can have the config like that so that should be equals to we can have the configure open a like that so we'll be having the configuration with that and what we are sending from it so we are not sending anything so we should send here the config like that so we should send the configuration directly from it now we can move on into the chat controllers once again now we have the configuration over there and after that let's move on into that so we can have the const opening I like that we can have the const open Ai and that should be equals to we can have the new open AI like that the new open AI like that so now we want to use the open a API so let's import that so import something from that should be open a like that and import you need to import the open a API like this so this is a class for the open API you need to import that so you have the open AI like this API and now we want to provide the config object so now we want to provide the configuration over there and now we would be grabbing the open a complete AP AP with that so with the help of this now we have the complete open API and now the final thing that we want to do so now we can make the request to the open AI so we can have the cons chat we can have the response we have the chat response and that should be equals to now what do we want to do so we can have the await then we can move on so we can add the open AI like this we have the open AI I think we can have the create chat completion so we have the create chat completion and instead that we want to provide an object so now what do we want to do so we want to provide the model so which model do we want to use so we'll be using the model of we can have the GPT and make sure you have the same spelling so GPT we can have the 3.5 we can have the turbo like that so we can have the GPT 3.5 SL we can have the turbo and then we can move on so we can have the messages like that so we can have the messages so that should be equals to the chats array so that would be equals to the chats over there and that's how it's going to work and now you are getting the type error as well so what you need to do so the chats are so after that you can provide the type and donation as well you can have the as you can have the chat completion like that you can import type as well so you can have the chat completion so you have the request message like that and that should be equals to you have the same thing over there chat completion request message array like that and now you can see now you won't be having any type error because now the messages knows it is accepting the same type of arguments like that and now after that now what do we have so after we get the chat response then we would be getting the full chat the latest chat as well and the latest chat is being stored inside this so if you move on so you can see response choices zero message and the content so that's how you can get that so you can have the note JS as well completion. choices z. message. content so let's move on so what do we want to do so we can have the user dot we can have the chats dot we can have the push so we can push to the chats of the user and that should be equals to we can have the chat response dot we can have the data dot we can have the choices dot we can have the latest which is the zero and Dot we can have the message like that so that's how it's going to work and the message contains the completion response message it means role and the content so that's how it's going to work and after that the final thing that we want to do is now we can move on so now we can save the users chat array as well so we can have the weit over there that should be we can have the user dot we can have the save so we can save the user so that's how it's going to work and let's move on so we can have here like this and now what do we want to do is the next step so now after we have all of the chats of the user then we can again we can have the return response we can have the status that should be we can have the 200 it means everything worked successfully then we can have the Json messages over there the Json it should contain the chats like that the chats should be we can have the user to we can have the chats like that and now that s is going to work and there's another thing you can see and that s it will work and everything should work perfectly fine and there's another thing that we haven't used the TR catch block over there and it's very important here so what do you want to do so we can have the try catch block so all of this code should be there inside the try so it should be there inside the try block and inside the catch if we get an error then what do we want to do we need to send the response back to the server to the front end so inside this we'll be sending the message we can have the message we can have we can have this something when we can have the wrong like that and we don't know that what exactly is the error so we can provide this as a Servo error over there we can have the 500 for that and we can log the error as well inside this so we can log the error and that's how it's going to work over there so now you can see now the backend operations with the chat completion is completed so trust me it is completed and now we need to move on to the front end and now we need to design the UI for this and after we build the front end now we'll be testing this API directly with the front end so let's move on so here now what we can do so now we can again move back to the front end over there let's just close the back end let's just move on again to the front end so let's move on so here you can see now what do we have here so inside the chat page now we want to design the chat page so now let's work on the chat for end so let's move on so here you can see now we enter the chat. TSX and here now we have discussed about the layout now we want to design that so first thing first now what do we want to do so first we can just provide here a box so we can just use a box from the material UI so we can have your box and it should be imported directly from the mui so we can import something from we can have from mui material over there like that and now that should be equals to we can have the box and now we can provide a couple of styles using the SX prop so the display could be we can have the flex over there we can have the flex that should be we can have the one over there and then we can move on we can have the width that should be we can have the 100% of the width then we can move on we can have the height as well that should be 100% so it should have the full width and height we can have the margin from the top that should be three and I think the Gap should also be the three between them so that's the parent container of the div so that's the parent div over there and now what do we want to do here so it should contain the sidebar it's not exactly the sidebar but we'll be showing some details of the user during the sidebar now let's move on so we can have another box container over there it should again contain the SX prop then we can have the display so here the display should be I think for the medium devices what we can do so we can have the flex and for the small devices we can remove that so for the small devices we can have the excess that should be we can have the none and same for the MD as well that should be we can have the none over there and that's how it's going to work and after that I think it should be the SM so for the SM as well it should be none so after that this box should be there and inside that we can again use here I think a box over there inside this so we can have another box for containers then we can have the SX prop for that then we can use a display that should be we can have the flex then we can move on we can have the width that should again be the 100% of the parent container the 100% of the parent then we can move on we can again have the height so this time the height should be somewhere around 60 viewb height and that should be enough then we can have I think we can have the background color as well so we can provide some background color and that should be we can have the RGB that should be 17 29 then we can move on so we can have with it 39 like that so we have this background C for that so if we save and if we move on to go to chat so here we would be having that window over there and now after that now what do we want to do so inside this box uh I think after that we can provide some border as well so we can have the Border radius like that and that should be somewhere around what we can do so we can have the five for the bottle radius and then we can have the flex Direction sorry so it should be inside the column basis because there would be a couple of items then we can have the MX that should be we can have the three like that MX should be three from all of the sides so this is the container in which we'll be displaying the Avatar of the user so we can the Avatar like that so Avatar should be imported directly from the mui material so here we have the Avatar and after that let's just use it over there and inside the aatar now what do we want to do we can have the SX prop we can have the MX that should be we can have the auto over there so it should contain inside the center and then we can move on we can the margin from the Y that should be somewhere around two BG color that should be begin at the white over there and then we would be having the foreground color that should be we can have the black over there and the font weight should be we can have the 700 so that's how it's going to work and inside the aatar now what do we want to do so here we would again be getting the user profile user o profile so let's move on so we can have the cons o so that should be equals to what we're going to do so here so here sorry what we have we have the use Au over there like that and here now we want to grab the first and the last letter the first word of the first name and first word of the last name so we can have the O DOT we can have the user dot we can have your the name dot we can have the zero so let's see how it looks so if we save and if we move on if we refresh the page I think there was an error with the back end so let's run the back end as well and PM run we can have the dev so let's see how it looks now so let's move on again let's just refresh it once again so there we can see now we are getting the James and after that now what do we want to do so we can grab the last name as well so here is the person name and then we can add another string then we can have the O I think we can have a o dot we can have your the user property once again dot we can have the name dot we can have the split dot we can have the split dot we can have with the um with the space then we can have the second letter and it should contain the first word of that so let's see how it looks now so so you can see now we have the James and the Marshall and that's how we can do that so it's a temporary thing it's like a jugar in Hindi so that's how it works so now let's move on as the next step so now what do we want to do so I think we and I think we can just provide some of the margins between them there should be some margin between them so after that now let's move on so let's just complete that as well I think the RGB color is not there it was not implemented so that's why we were seeing that so you can see now we have the color and that's how it's going to look and after that now what do we want to do so after that we could have the typography after the Avatar so we can have the typography over there so we can have the typography over there so it should be imported directly from this the typography and now let's move on so inside the typography we can provide a couple of more classes like we can have the SX prop it should contain a couple of things like we can provide the MX that should be we can have the a over there for the MX then we we can move on then we can have the font family so here we should be having the different font family work sense like that and inste this type graphy and what we can use so we can use you are talking to our chat bar like that so now you have this thing over there that you are talking to a chat Bo and that's how it's going to work and after this typography then again you can move on you can create another typography over there you can have another typography you can copy and paste but this typography would have a different thing I think so we can have the MX Auto it would be same then we can have you I think we can have the margin from the Y that should be somewhere around we have the four padding should be somewhere around three so inside this what we can use so we can add a line so you can add this line over there like you can ask a question related to programming uh you can have the knowledge business advises education Etc but avoid sharing the personal information so that's how it's going to work so you can see now it looks like that and that's how it will work and after that now let's move on so here you have this thing over there so that's how it's going to work and after that now let's move on so now we have this typography and after that below that we would be having the button as well so below that we would be having the button I don't think what happen to the Auto Imports over there because it's not working for me so it should be the button over there so it's a button over there so now we should be using the button from the material UI once again so button could be what we can use so we can have the SX prop like that and here now what we can do so we can have the width that should be 200 pixels for that then we can move on we can have the margin from the Y that should be we can have the auto over there so it should be the auto then we can move on we can have the color of the text that should be the white then we can move on so we can can the font weight like that and that should be somewhere around we can have the 700 over there then we can move on the bottle radius so that should be somewhere around we can give the three and again we can move on we can have the MX that should be we can have the auto margin from the X and I think that's enough or we can have the BG color as well so we can have the BG color and that should be we can import the red color from the material UI so we can move on so we can import the color Shades as well from the material so you can import like that you can import something from you can have the mui material so mu material SL we can have the colors and you can import the red color over there like this or you can just use the red directly like this so you can have the red and you can just use the red over there to save the space inside the final bundle so we have the red and inside the red now what we can use so we can use the 500 color or we can use the 300 color for the red so we can have the red do we can have the 3 like that and after that now what we can do so we can have the hover as well so we can have the hover State and inside the H now what we can use so we can have the BG color that should be we can have the red again we can have the Red Dot we can have the a 140 I think we can have the A40 for that so if we save it if you move on so there you can see now we have the button and after that now what do we want to do is the next step then we can move on so we can have the clear conversation because we were having a button as well of the clear conversation now we have this button and that's how it's going to look and after this now you can see this was supposed to be on to the left side but now we will be adding another box container over there so after this now we would be having another box container over there now we can have another box so inside this box now we would be having some Styles over there like inside this box we would be having some Styles like we can have the SX prop that should be we can have the display that should be we can have the flex over there and then what we can use so we can have the flex over there that should be inside an object for the MD the flex should be 0.8 and for the extra small the flex should be somewhere around one and same for the small as well the small the flex should be somewhere around one and after this now what do we want to do so after this we can just write some typography about the model name that we'll be using the typography should be there so I think we can again use the X prop it should contain the text line inside the Cento and then what we can use so we the font size that should be 40 pixels of the font we can just use the color that should be we can the white over there then we can move on we can the font family I think font family should be default for that then we can have the margin from the bottom should be two like that so that's how it's going to work then we can the model that should be we can have the GPT 3.5 to turbo like that so if we save and if you move on so there you can see now we have the model GPT 3.5 turbo and that's how it's going to look and after that now what do you want to do so after that we can have another box container so I think why the styling has mismanaged so we need to see that why this is happening over there so I think uh inside this we can have the display so after this we can provide the flex properties for this as well so I think yeah we should provide the flex properties so after the display then we can have the flex so that should be somewhere around 0.2 for that we can have the flex direction that should be we can have the column like that so now you can see now it looks great over there now it's look great and everything seems to be working perfectly fine over there you can see now it's looking great over there and now you can see now with the model GPD 3.5 turbo I don't think why it's not moving on into the center because now we want to provide the width that should be 100% like that still so instead we can use the MX of the auto and that's how it's going to work so you can see now it's looking great and after that now what do we want to do after the typography now we want to render the actual chats over there so we can have the chats over there so inside this box we can again render the SX prop we can have the SX prop over there and we can use the width that should be again we can use the 100% of the available space then we can have the height that should be 60 viewport height then we can move on so we can the Bott radius so that should be somewhere around we can have the three over there we can have the MX that should be we can have the auto over there for the MX then we can move on we can have the display that should be again inside the flex box again we can have the flex Direction over there that should be we can have the column over there and then we we can have the Overflow like we can have the Overflow that should be equals to Scrolls so we can have the scroll Behavior but the Overflow X would not be visible should not be visible so overflow overflow wax shouldn't be hidden like that should be hidden and then we can have the smooth as well we can have the Overflow Behavior like that we have the scroll Behavior that should be equals to we can have the smoooth like that and that's how it's going to work again you can see now we are coming with this site so we want to fix this display as well after the width so we can remove the width and instead we can have a I think we can have the flex Direction inside it should be the column we can have the padding from the X that should be somewhere around three so here's the error so we have the error of the smooth so that's how it's going going to work over there like that so if we save and if you move on so now we should be having the scroll Behavior as well and that's how it's going to work and then we can have the Overflow why as well and that should be be have the auto like that so now it should not be visible on the initial scroll and that's how it's going to work you can provide the font weight of the 600 as well and it will look great and after that now what do we want to do so after that now we want to render all of the chats of the user so inside this div now we want to render all of the chats but here we do not have any chats of the user so we need to create that and how we can create that so I think now what we can do so as of now we can just render some of the static chats over there so you can get that directly from the chat GPT as well and I think now to render all of the chats over there we can use the static chats now to render all of the static chats let's just move on to the chat gbd and let's move on and let's just create an array of all of these chats so you can see now we can generate the chats like this so we can have create an area of static chats with the assistant like the r string and the content we have the message over there and that's how we can use that so we can just copy the array then we can move on so for now we can just Define the constant array over here so we can have the const we can have the chat messages so that should be this messages over there so we can have the chat messages like that and that's how it's going to work so now let's define all of that so here now what we can use so we can have the chat messages to we can have the map over there so we can have the map and now what do we want to do here so now after the map now we want to run a separate component so now we'll be creating a different component for each chat item so there would be a different component there would be separate component for each chat item to show the chats so here what we need to do here so we'll be having the chat like that so we can have the chat and then now what we want to do so as of now we can just render a normal div in which we can just render something like we can just render we can render the chat like that so we can have the the chat do we can have the message or we can have the content like that so let's see how it going to look so let's see how it looks now so what's happening over there let's see what happens so there you can see now we are seeing all of the chats over there like hello you and see this you can see I'm in New York City and all of that and let's just create the separate component in which we can just display all of the chats same like the chat gbd so let's move on so inside the components let's just move on so let's move on let's create another folder that can be chat and inside the chat we can have the chat item like that dot we have the TSX over there the chat item. TSX and now let's just move on to the chat item so inside the chat item now what do we want to do so we'll be accepting some props as well so we'll be accepting the props like we can have the message then we can have the prop of the role as well so instead of message we'll be having the content over there content and that should be equals to we can have the role and then the content should be inside the format of we can have the string and the role that we'll be getting so rle should be there should be two roles only the role could be we can have a suppose that could be user or there can be the role of assistant like that so the roles can have the user and the assistant so that's how it's going to work and after that we'll be having if we move on to the paint so let's move on again like how each chat item will going to look so suppose that's a chat item over there so inside first corner like this so we can have the Avatar of the user we can have the Avatar icon like we can have the user Avatar icon it can be the user or it can be the chat gpts Avatar icon that could be the open AI then after that we would be having the message over there like we would be having the message like that so let's move on let's just complete that as well so after this now we want to render all of these things according to the conditions so inser the return statement now what we can do so first we can check if the role is equals to we have the assistant then we want to perform different things and if the role is different then we want to perform different things so let's just addite the Mt GSX TX over there like that inside this as well and inside this as well so if the role is the assistant then what we can use so we can use the box from the material once again so let's import that as well we can import something from we can have add the material that should be we can have the box like that so we can have the box and here what do we want to do so here we have the box and inside the box now what we can use so we can have the SX prop we can have the display that should be we can have the flex over there like that we can have the display Flex then we can have the padding that should be somewhere around two we can have the background color as well so for the assistant there would be different background color for each chat item and that should be hash we can have the0 4 d 5612 we have the background color and then now what do we want to do so then we can have the margin from the Y that should be two the gap between the items that should be we can have the two and after that now what do we want to do so first we need to render the Avatar so we can have the Avatar like that so we can have the Avatar like this so we have the Avatar and after this now we have the Avatar over there and again inside the Avatar now what do we want to do we can have the SX prop we can have the margin from the left that should be we can have the zero for this because now the assistant should start from zero again and then inside the Avatar now what do you want to do so if the role is the assistant then we'll be using the image The Source should be equals to open AI dot we have the PNG over there and then we have the alt of the open a once again open a and then we can have the width as well width that should be somewhere around we can the 30 pixels for the width like that so that's how it's going to work and after that we would be having another message as well so we can have the message so inside the message now what do you want to do so we can just render the content directly so we can have the typography for that so we can have the typography so we can just render all of the content there inside the typography over there we can have the typography and inside the typography we can just provide we can have the color over there color we can have the white like that the color should be white then we can the font size so I think the color is already white so we need we just need to provide the font I think we can have this size that should be 20 pixels enough and after that now what do we want to do so we just want to render the content over there like that so it is same like this you can see now we have if the role is assistant then we want to do this and if the role is the user then we want to do a different thing then what we can do so we can again copy this box we can again paste that instead of this now we would be having a different type of styling so we have the petting tube we have the margin from the Y that should be I think margin is not required so we can remove the margin we have the Gap we have the different background color that should be what we need to do so we can have the0 4 d 56 over there so that should be the different background color and after that now what do you want to do so we can have the AAR so again we can use the Au property of the user so we can have the const we can have the Au over that should be equals to we have the use that should be Au over there that should be use and again we can grab this thing over there like this so it's like a temporary thing but still so let's just complete the application then we'll change that so we can just copy this thing over there let's move on to the chat item and let's render this thing inside the Avatar instead of this let's just render this thing and now what do we want to do so then we have the typography and it should be same I think but inide the Avatar we can have the ml Z we can have the BG color like that black then we can have the foreground color so we can have the color that should be we can have the white so if we save and if we move on to the applications so let's see how it looks so suppose we have all of these messages like that and now we have the chat do content but instead we want to write here uh chat item component over there chat item and now we want to send the data we can just for the content that should be we can have the chat do we have the content over there then we can move on we can have the RO that should be we can have the chat dot we can have the rooll so that's how it's going to work and I think the role is mismatching maybe the user and the assistant so that's how it's going to work so then we can send the key as well so we can send the key so as of now we can just send index for the key so it's not like it's not the accepted solution for the keys because sometimes it can get worse so we should provide a key for the ID for the separate ID for that sorry now we are seeing this thing over there hello can you tell me this this this you have the James so I think all messages are directly from the user of the assistant the RO of the assistant so let's move on and let's just see that what is happening over there so that's the error because now we have provided some extra space over there so if you save and if you move on so there you can see now it look looks great you can see first the user sends a message like hello can you tell me the weather forecast for tomorrow sure I can help you please provide me your location I'm in the new Rox behav the behav the message great give me a moment and then there you can see now of the message the weather forecast is we have the sunny we have the dead sound perfect you can see now we have created this type of application you can see it's looking great now the design looks great over there so that's how it's going to work and the final thing that we want to do for the UI is now we want to add the input box as well below that so let's do that as well so what do we want to do so again we can move on to the parent chat and here we can provide the input tag inside this container right inside this container let's move on at the bottom so after this let's add the input tag as well so for this now what we can do so we can just use I think we can directly use the HTML input tag because it would be more preferable HTM input and here we can have the type text we can provide the styling for that the style should be what do we want to do so we can have the width that should we can have the 100% for the width then we can have the background color like that we have the background color that should be we can have the transparent for that like that then we can have the padding that should be 10 pixels for that then we can move on so we can have the Border so that should be we can have the none over there like that border none so we don't need any border over there then we can have the outline that should be again we can use the none for that and I think that's enough so we can also provide the color I think yeah color that should be we can have the white then we can move on we can the font size as well that should be somewhere around 20 pixels over there so these are the styles for the input tag and now what do you want to do so we can just provide a different D for the input so let's move on so in the end we'll be having the icon as well so we can have the div we can provide the styles for the div and this should contain the width that should be we can have the 100% of the width then we can move on so we can have the pading so that should be somewhere around 20 pixels over there padding from all of these sides and then what we can do so we can have the bottle radius so what we can do so we can wrap the input directly inside this div so we can have a sty like input so so we can move on to the input we can have the Border we can have the radius that should be somewhere around we have the eight then we can move on so we can have the background color so we can use different background color for this that should be RGB once again and that should be we can have the 17 27 and that should be we can have the 39 so that's how it's going to look and after that now what do you want to do so after that I think that's enough for that so I think we can have the display as well so display that should be we have the flex because we want to render the icon as well we can have the margin from we can have your the right like this so we can have the margin from the right that should be we can the auto like that and now what do we want to do is the next step have the margin like that that should be Auto like this and now what do you want to do so after this input now we can just render the icon as well to send so that could be a button so we can use the icon button directly from the material UI so we can the icon button so we can move on to the top once again so we can have here the icon button it is used to provide the hover effects and all functionality The Click effects functionality to a normal icon so we can have the icon button over there like that and then we can provide the icon between them so first we can provide the Styles a margin from the left that should be we have the auto we can have the color that should be we can have the white over there for the color and I think we can move on we can import one icon as well from the react icons so we can import we can import I think we can import from the react icons SL IO and the second thing that we want to import should be we should be importing the iomd icon like IO MD we can have this send so I just selected this icon so we can use this icon and let's see see how it looks now so we have thisd send icon over there and that's how it's going to look so if you same it if you move on so there you can see now we have the icon over there and you can see it's working perfectly fine over there you can see now we have the icon it's looking great over there so there you can see it's looking great over there you can see now have the input as well it's working perfectly fine over there like that you can see it's looking great over there so we have this input tag and there you can see in the end we have the button to send the chat as well and you can see that's how it works and there you can see the style looks great over there like that so it looks great and now the final thing that we want to do is is now we want to integrate this input and the chats to the API so let's complete that as well so there we go you can see now the design looks great over there and everything seems to be working perfectly fine and now another thing that we want to do over there we can just check the responsiveness as well we can move on to the inspect panel so we can select the responsive you can see it's looking great over there you can see now we don't have the the clear conversation button inside the mobile devices but on the desktop we have one and there you can see everything seems to be working perfectly fine and now let's move on let's integrate that to the back end as well so let's complete that as well so now we need to move on so you can see we have already created that on the back end we want just to integrate that here so how can we do that so first we need the data of this input right so first we need this input data so let's move on so what we can do so we can deare a ref inside this so we can declare a ref and from that ref we can just get the data of this input so the ref will allow you to get directly to the reference to this input element directly from the Dom so we can provide the ref over there so we can move on we can have the cons we can have the input we can have the ref like that and that should be equals to we can have the use ref over there so we can use the use ref hook directly from the react and initial value could be here we can have the null and we can just provide HTML input element over there HTML input element and that should be equals to null as well like this and after that now what do we want to do so we can copy the input ra over there and we can directly move on to the input so here we have the input and here we can just provide the ref we can provide the ref and that should be equals to we can have the input ref that should be the input ref and that's how we want to do that and after that now what do you want to do so once we click on this send button once we click on this icon button so now we should send the input data so let's move on so we can move on to the top once again so here we have the return statement and before that we can have the cons we can have the handle submit like that or we can have the handle we can have the handle submit over there so that should be again equals to a function and we can Define this function as an asynchronous function as well so we can have the async over there and that's how it's going to work and after that now what do we want to do so inside this function now we'll be getting the data of this input gra so let's move on so we can log the data like this we can have the input ref dot we can have the current dot we can have the value over there because it is directly referenced to the input element so that's why you can get the value you can get the data of the input as well so here we just need to get the value we can just log the value and we can reference this handle submit function to this input like that so we can have the icon button we can have the on click state for this and we can have the handle submit like that so let's see what happens if we are getting the data or the not so let's move on we can have the hello so let's just click on the send so let's just get the data so now we are getting the data and everything seems to be working perfectly fine and again we can move back to the uh to the chat page over there and here we have a couple of Errors like the first error that we have would be the role so as of now what we can do so we can have the TS ignore to ignore the type checking on the next line so now you can see now we do not have any error and now what do you want to do over there so now once we get the input over there once we get the input now what do we want to do so first we want to store all of these chats so first all of the previous chats of the user would be stored and then we want to insert the latest chat into the array so let's move on let's declare the chats array as well so we can again have the use State over there like this we can have the use State we can have the chats or we can have the messages we can have the set messages over there I think chat messages we can have okay we can have the set chat messages and use state would have the initial value of the empty string over there and we can Define the type as well I think so first thing that we want to do is now we can remove the chat messages over there we can remove this and now we have the set chat messages and here we have the use state so as of now we can use here without any type so let's see what happens and after that you can see now we won't be seeing any chat over there now we don't have any chat and after that you can see once we move on so let's move on to the handle submit over there so once we move on so now first thing that we want to do is now we want to get the latest input message so we can have the cons content and that should be equals to we can have the input ref dot we can have the current dot we can have the value like this so we can have the input ref do current do value we can have S we can have the string over there we can have a string and now let's move on so after this now we want to move on so now we want to move on and after that now we can do I think so after we create a new content over there now what we can do we can just remove the ref of the input so we can check if we have the input ref so if we have the input ref and the input ref do we have the current so then what do we want to do so now we can have the input ref do current do we can have the value is equals to the empty string so that now the input should be moved on to the empty string once again and now we have the content over there and after that now what do we want to do so now we'll be creating a new message so we can have the cons we can have the new message like this and that should be equals to an object the role should be of we can have the user over there the role has the user and the content over there so we can have the content like this and that's how it's going to work and after that now what do we want to do so now we want to store that input inside this state as well inside this US state as well so we can have the set chat messages over there we can have the set sorry we can have the set chat messages and inside there now we want to First grab the previous chats so we can have the previous and now we want to create a new array so first all of the previous chats would be stored and then the latest new message would be stored like that so that's how it's going to work and now you can see now we getting some type errors so we can move on so I think what we can do over there we can just declare the types as well so that is the type for a messages so let's move on so we can have the type we can have the messages over there and that should be equals to we can have the type of the message only that should be equals to we can Define the types over there like this so we can have the role string we can have the content of the string the role we can also Define the exact type like the user and the role can be of we can have the assistant as well we have the role user or the assistant and now the use State can have the values of we can have the message array like that and that's how it's going to work over there and the new message is also of type of the message like this so we can have the type of the message and now we should not be getting any type errors as well so this is known as the clean code so because now we have the types of everything that we use and after that now we have the new message and now the new message would be stored inside the set messages array so let's move on so if we send a new message over there like we can send the hero so then I think it should be stored there you can see now we are seeing the hell over there we can have the high we can just click on the send so now you can see now we have the high and everything seems to be working perfectly fine over there and now let's move on so now we have the new messages let's just again refresh this and there now what do we want to do so after this now we can again move back to the chat page over there we can again move back we can close others and now let's complete all of that so there you can see so after we create a new message over there inside this array now what we want to do so now we want to send the API request to the back end with a new message so with that uh with the help of that now we'll be receiving the response as well and we can send the new response inside the set chat messages array so let's move on so what do we want to do here so we can first move on to the API Communicator so let's create another function over there so let's create another function like this so what we can do so the function could be so the function could be we can have the send chat we can have the request over there we have the send chat request and here it would be a synchronous function and here we need the message so we can have the message like this so that should be inside the string so here we have the message over there and now what do we want to do so xos start we can have the post and this time it would be slash chat and Slash new because we have registered this route as well so/ chat SL new and after that inside the second parameter now we need to provide the data as well so we can provide the data the data could be equals to we need to only send the message so that's how it's going to work and after that if the response. status not equals to 200 then we can have the error message Chat like that unable to send chat and after we receive the response then inside the data now we'll be receiving the full list of all of the messages of the user so then what we want to do so now we'll be just replacing the full array with the new list of messages so we can move on so we can have the const over there and then we can have the response like that or we can have the chat data like this and that should be equals to we can have the await then we can have the send chat request and here now we want to create a new message that could be equals to what do we want to do so we can just send the content over there we can send the content or we can send here the new message so we can have the content like that that and now let's move on so after we have the content let's see that what happens this time so after we have the content over there now we'll be receiving the response as well so now after that now what do we want to do so then we can move on so we can have this set chat messages over there set chat messages and that should be equals to an array of all of the messages of the user so we can have the chat data dot we can have the chats over there like that so we have the chat data do chats and that's how it's going to work and now let's see that what happens so first we need to move on to back end to verify all of that if everything works correct or not if everything is properly integrated or not so let's move on to the back end so uh we can move on to the chat routes we have the generate chat completion so here you can see now uh we are creating a new message role of the user user. chats. push and from there we are just sending the chats over there and that's how it's going to work so now let's move on and let's just try it out so let's try it out out once again so here now what I can send is I can send hello how are you today so let's send the message and let's see that what happens this time so let's see what happens so I think we are receiving some errors we can move on to the console so there are some errors over there so let's just refresh the page so now what do we want to do so again we can send a new request and we can track the network response over there so let's move on so we're going to the hello how are you today so let's just click on the send so let's see what happens so now we have the new it means now if we are sending a 44 not found it means now we do not have this uh we do not have this URL registered so I think we can move on to the back end once again so we have a new but inside the index we have the chats so here it should be the chat I think so we can have the chat only so let's see what happens this time so it should be we can have the chats only so let's move on so let's just click on send once again let's just again refresh that we can have the hello how are you doing today so let's see what happens if we just click on this end once again so let's just click on this end you can see now it is pending so now we should be receiving a new so there you can see now we are receiving a new message so you can see here we have a message like hello I am an AI as I don't have any feelings but I here to assist you and how can I help you today you can see everything seems to be working perfectly fine over there we just sended a new message we just sent a new message like hello how are you doing today we got the preview as well and inside the preview we got the ID of the message and there you can see we got the data as well and you can see that's how it works and everything seems to be working perfectly fine over there so you can see it looks great over there so let's send another message like what is we at the JavaScript so let's just send this message and let's see that what happens this time so this is a request and let's see that what happens inside the preview you can see now we are seeing the new chat messages over there you can see everything looks great over there now we have the content you can see JavaScript is the programming language you can see now the design also looks great design also looks similar to the chat gbt model as well you can see that's how it works and it looks great over there you can see it looks great and everything seems to be working perfectly fine so congratulations on successfully integrating the openi API to the monag application and you can see this looks great over there and everything seems to be working perfectly fine and here the last thing that we can do is now we want to do another thing so the thing is that if you access a code block from this open AI so suppose I can send a message like show me the I think we can have show me the code um like we can have show me the syntax that how can I declare function we can have the how can I declare the function and we can have the JavaScript so there you can see now we are receiving the response as well and it works great but there you can see here we have the code blocks as well you can see here we have the JavaScript we have the function function name here we have the Cod Snippets as well and now we want to show the cod snipets as well to the user and how can we do that so we can do that with using a library of the react which is a react syntax highlighter so we can move on so we can have the react syntax highlighter so we can use this Library over there so let's just move on let's just install this library in our application let's install this package and if you want to see the demos as well you can move on so here you have the demo as well inside this you can get the demos you can see you can provide some dark uh some dark themes as well the language as well and everything with that so that's how it works over there so let's move on and let's just Implement that as well so here we want to install this Library so we can move on we have the react syntax highlighter we can just copy that and then we can paste that over there so inside this frontend we can have the npm install react syntax highlighter and after that let's move on to the chat page once again so here we are rendering all of the chats so let's move on to the chat as well here we can move on to the chat item and here now we want to just import something from the prism code highlighter so now we want to import something from the react syntax highlighter so we can have the import we can have this something from it should be equals to from we can have the react syntax highlight o and here we can just move on and we can just import the prism style because if we move on to the npm package so you can see there are a couple of styles we can use the prism as well and that's how it's going to work so we'll be using this type of styles over there like prism as syntax highlighter and we'll be using some themes over there we can use any theme over there and then we can just write here the syntax highlighter language we can detect the language and then we can move on we can just provide the code strings between them so you can see if you move on to the application so could not find the Declaration file okay now we want to install the Declaration files as well so we can just copy this thing over there we can just paste it out here I don't know why I didn't copy we can copy it once again we can paste it out over there I don't know what is happening over there so let's move on so we can click on the DT over there declaration file and again we can move on we can just copy that and then we can paste is that over you and it is npm install it is inside the development dependency so we can write D flag over there like that and now let's install that as well and after that now we want to move on so now we should be having the types over there now we can import the prism over there prism as we can have the syntax we can have the S syntax highlighter over there and that's how it's going to work and after that now we want to move on so now we want to import the Styles as well so you can see again we can move on to documentation now we can get the Styles as well so what we can do so now here we are using the prism so we want to import the styles for the prism we can copy the statement we can import the CSS file directly from it and after that you can see we won't be using the color of the dark we'll be using the color dark like that so we'll be having the colder K dark like that we'll be using this style and it is being imported directly from the prism and after that now you can see now we want to detect that where is the code block between the string so if we move on to the inspect panel if we going refresh this if we refresh so let's see what happens this time I think the frontend server is not open we can have the npm Run Dev so again we can open the server and after that you can see if we move on and there's another thing that we want to do so on the initial request now we want to have the chats of the user as well so we want to maintain that as well so now let's move on so again what we can do so we can just send the hello over there so after we send the hello now will bece saving all of the messages of the user as well like this so that's how it's going to work over there and after that now what do we want to do so now between the string if we open this here the chat are if you open this thing over there like this so we have the message five so there you can see this is the string over there this is the string in which we have the code blocks as well right we have the code blocks but how we can detect that so if you see inside this message so every code block starts from this sign so I think that's the back Tex so it starts from three backticks over there so you can see every code block starts from three back Texs and ends in these three back tcks so with the help of this now we can just grab the code box as well so let's write the condition as well so what we can do so let's just copy it out so let's just test it out our programming skills so let's move on to the inspect panel we can move on to the console and we can have the con we can have the message like this so that should be equals to we can have this message so there we have the message and that's how it's going to work and after that let's move on so here now what we can do so we can have the message like this start we can have this split so we can split the message with these three back ticks over there so we can write that over there and this key is there onto the Escape I think before the escape this key is there so first let's move on and let's just use that over there so you can see now we have the array and inside the array we have seven elements so you can see inside the first one we have inside the Java script we have this rule over there and inside the second value of the array now we have the code block you can see now we have the code block and you can see inside the third as well I think now we have the code block inside this as well now we have the code block so that's how it's going to work and after that let's use the same syntax inside our application as well so let's move on so what do we want to do here so inside the chat item first thing that we want to do we can define a function before the component so before the component let's define the function we can have the extract code we can have from that should be we can have the string so that would be a function and in set this function now we would be expecting a parameter as well which is we can have the message like this we can have the message the type that should be of the string and after that now what do we want to do so we can check a condition like if the message like if the message to have the includes so if the message dot includes these three back takes over there like this if the message do includes this then what do you want to do then we can just renter here this over there now we can renter condition we can have the con we can have the blocks of the message that should be equals to we can have the message dot we can have the split so we can split all of these things inside this and then we can split that directly from the code blocks like this directly from this code blocks and after that now we want to return the array of the blocks so we can return the are of the blocks and that's how it's going to work and after that we need another function function suppose you can see if we move on to the application once again so some strings do not have the code blocks right so some strings do not have this so we should get the error like this thing is not found over there so we should get that error so now what we can do so we can just declare a function in which we can verify if a block is the code block so how we can verify that so there can be multiple rules for that so in this application we'll be declaring a basic syntax a basic validation check in which we can check that if that string includes a code block or note so it would be very simple so what do we want to do so again we can Define the function we can have is code block like that so that would be equals to a function like that and inside that what we can do so we can have the Str Str that should be inside the string format and after that let's think that how we can verify that if a string includes a code or not so there can be multiple parameters so you can see if we move on to the application so each code block contains a parenthesis like this so it can be having a parenthesis like this it can have the semicolons it can have a lot of things so we can verify all that so we can provide some if checks over there so like what we can do so we can have the if we can have the string do we can have the includes if the string do includes and equals to or what we can do we can check another condition or if the string dot we can have includes so if it includes the semicolon so this condition would pass and if the string dot we can have the includes over there so if the string dot includes this as well like this so if the string dot includes this block over there and we can provide a couple of conditions like this so so you can also Define your own conditions as well if you want to do that so here we have these conditions over there formatted and after that we can have another condition as well if the string or we can have the includes and if the string do includes that could be the hash sign for for the comment and if the string again we can have a condition like if the string dot we can have the includes over there once again or it could be the includes and that should be like this sign over there like the comment sign so it is a code block right so that could be a code block so now we can move on and we can verify all of that here so inside each message of this so if the role is assistant now we can verify that condition over there so after this box now we can remove this typography now we can remove this typography and let's move on so after this now first you can see inside this component first we can grab all of the code blocks so let's move on so we can have the cons here we can have the message blocks like that so that should be equals to we can have the extract code from the string and that should be equals to the content over there like this so that should be the content so if we get the empty AR over there so if we get this string are over there it means now we have the message blocks and if we do not get that if it is undefined it means now we do not have any code blocks over there so let's move on let's define the condition inside this block over there let's define that condition so first there would be a condition like if we don't have the message blocks if it is an empty array then what do we want to do so then we can have the condition and instead this we can again use the same typography over there we can have the typography and it can use the SX prop once again for the styling we can have the font size over there the font size could be we can have the 20 pixel like that so that could be this typography and inside this typography we can just render the content over there so that could have this content so you can see this condition works when we do not have the message blocks so let's provide another condition as well so once we have the message blocks and we have the message blocks to we can have the length um is greater than zero so this condition would always be true with the help of that and then we can move on so if we have the message blocks and we have the message blocks do length is not equals to zero so then what do we want to do so we can have the message blocks dot we can have the map so we can map through the message blocks over there and inside that we would be receiving the block string we would be receiving the block string over there and after that now what do we want to do so we can just write the condition and we can render something based on that condition so we can check if that's a code block if this block has the code block over there we can have the block like this so then what do you want to do so if this has a code block then we want to render something else then what do we want to render we can render something else and if it is not the code block then we want to do something else so we can provide the GSX over there the empty jsx tax over there like that and for this as well we can have the empty jsx tax like that and now what do you want to do so I think we are receiving the error inside the escort block because now we haven't return the true over there like that so we should return the true over there like this so we can have the true and if we do not find all of that we can just return the false over there we can return the false so you can see now we should not be getting any error so now if we have the code block then we want to render the syntax highlighter and if we don't have the code block within the same string then we want to render the simple typography so let's move on so inside this now we should be rendering the syntax highlighter we can have the syntax highlighter over there and then what do we want to do so inside that we can move on we can provide the style that should be we can have the colder Cod like that so we would be having this style over there I think we can have your CER we can have the dark so we'll be using this style over there so we can just use same over there like this so we have this style and after that we need to provide the language so this is an assignment for you that how you can grab the language so this is an assignment so you need to find the language of the code and this is very simple and you can find the answer of this assignment inside the GitHub repository so inside my final code you will be seeing the example you will be seeing the assignment solution as well so here now what do you want to do so we can just provide the language that should be for the JavaScript so as of now I am giving here the static type over there but now you should be just solving this assignment you should be solving this problem on yourself so now as of now I have the static language so now what you need to do you need to define a new state for the language as well so now we have the language of the JavaScript and now after that now what do you want to do so after that we need to render the code block between them so we can Rend the code block and that should be equals to we can have the block like this so that should be the block and if we do not have any code block inside that if we don't have the code block then we just need to copy this typography we can just paste it out over there and that should contain the block so that's how it's going to work so you can see that was very simple to explore you can see we just created a condition like if that string contains a code block and you can see first we are grabbing the code blocks from the string then we are very defying it according to this condition then we are rendering that according to these conditions like if that's a code block then we want to render the code or we want to render this thing over there so let's see what happens this time so if I send you the show I think we can have can you show the syntax of declaring variable in JavaScript like this so if I send this query to the chat jity so let's see what happens so what happened so let's move on to the network so there you can see now we are receiving the response as well so inside the response you can see now we are receiving the data can see it looks great over there you can see now we have the code blocks as well between them you can see in JavaScript this this this you can see the code blocks are working fine you can see now you can see all of the code blogs and it looks great over there right it looks great and everything seems to be working perfectly fine you can say it's looking great and there you got the solution of your assignment as well right you got the solution so you can see inside each code block you get the language of the code as well right you got the language of the code so your assignment has already been completed so you just need to grab the first word of the code block and then what you can do you can just move on and then you can just provide the language to the code block so that's how it's going to work so that's your assignment already completed so that's how it's going to work so you can see with the help of this now we are receiving all of the chats you can see it's looking great so that's how the chat G works you can see that's how we can use their apis to do all of the things so that's it for this so now let's move on so we can do the same thing for the users message as well so sometimes users also send a chat messages so what we can do so we can move move on we can just use the same box over there as well inside this so that's how it's going to work over there so let's move on so it would be same over there so that's how it's going to work and after that if you need to provide some margin or the petting between them so I think there's already some margin in the padding you can see the color is starting from there you can provide the margin from this I think so I think this box doesn't have any margin so you can provide the margin from the Y that should be equals to we can have the two and that's how it's going to happen and and everything seems to be working perfectly fine over there you can see it looks great and you can see that looks fine and now let's move on now we need to fix a couple of issues as well inside this application so there are a couple of issues you can see if we refresh this application you can see now we are successfully logged in but here you can see now we do not have any chats so now we need to create a route in which we can get all of the chats of the user as well so let's move on and we can make the request directly from the client so once we move on to the chat page so now we should be receiving all of the chats so let's Implement that so here let's move on to the back end once again so let's just quickly remove all of the shoes from our application so let's move on to the chat routes let's create a new route as well so let's create the chat routes. we can have the get request over there so that should be the get and that should be we can have the all chats like that or we can have the chats like this so that could be the route over there and here I think we do not need any valid date because we won't be sending any data and after that let's create a new function in which we can just send all of the chats to the user so what we can do so we can copy something like this from this from the users controller let's just paste it out there inside the chats controller so let's paste it out and that should be we can have the send chats to we can have the user like this so we can have the send chats to user and after that now what do you want to do so first we can verify the token of the user then if we don't have the user then we we have this conditions over there and after that now we have the return statement and inside the return statement we have the message of the okay then we can send the chats of the user so we can send the chats so that should be we can have the user do we can have the chats like this and that's how it's going to work so the work on the back end has been completed and now we can move on to the front end to implement that so now we can move on to the Au Communicator once again and here now what do you want to do so we can create another request in which what do you want to do so we can copy we can paste it out over there so that should be we can have the get I think we can have the get user chats like that we can have the get user chats and inside this we don't need any message over there we just need to send the exos we the get requests and that should be uh we don't need to send the message so chat that should be equals to I think we can move on to the routes so this is the message over there all chats over there so we need to send all chats over there so let's move on so that should be the all chats and here I found another book so it should not be the generate chat completion it should be I think we can get the chats like that so we can have a chats like that uh we can see so we can directly move on to the chat completion so we can have this send chats to user so that should be the function over there that you want to render so that should be this function and now what do we want to do so again we can move on to the communicator and here I think that's enough for that so we'll be getting the chats over there let's move on to the chat so before the return statement let's render the use effect code as well so we can have the use effect and in set this now what do you want to do so we need to run it only one time and I think instead of the use effect we can use the layout effect as well we can have the layout effect so layout effect runs before it is rent out on the UI so let's move on so after we have the layout effect so we can have a condition like if we have the O DOT we can have this logged in it means now we have the user and we have the o. user as well you can rent another condition like you can have the O do you can have the user so after that now you want to run something so after that you can run the code over there so you can uh you can move on so you can have the toast over there so you can import the toast to you can have the loading then we can have the loading chats like that so we can have the loading chats we can put the message like that we can put the ID over there so that should be we can have the load chats like that we have the ID over there and after that now what do you want to do so we can move on so we can have the get user chats like that get users chats over there and after that we'll be getting the data as well so we can have then we'll be getting the data over there data like this so then what do you want to do so after we get the data then we can have the set messages over there set chat messages that should be we can have an array we can destructure all the elements so we can have the data to we can have the message messages like that we can have the data do I think we have the chats so that's what we want to do so after we set all of these messages then we can have the toast dot we can have the success over there we can have the toast to success so we can copy this string over there we can have toast. success and that should be we can have successfully loaded we can have the chats over there successfully loaded chats and ID of the load chats and that's all we want to do and after that if we get any error then what do we want to do we can renter the catch over there so we can renter the catch statement and inside the catch we get the error first we can log the eror as well we can lock the error inside the console then we can move on so we can have the toast we can have the error as well to. error and that should be equals to we can send the message as well directly like we can have the loading fail like that we have the loading failed and that should be equals to the message as well so we can have the load chats like that we have the ID over there that should be we can have the load chats and that's how it's going to work and I don't know what is the error over there so I think this cannot be the array this should be the call back function so this should be a function over there like this and that's how it's going to work and everything seems to be working perfectly fine so if we refresh so let's see what happens so there you can see if we just refresh the page so I don't know what happen so let's move on to the go to chat and there you can see now we have successfully loaded the chats and everything seems to be working perfectly fine over there and that's how it's going to work so let's move on to the go to chats and there it seems to be working fine and if we refresh this I think on the refresh that's not working so I think the layout effect has been called before the main use effect and then what do you want to do so after that you can see if we refresh the page now you can see now we won't be seeing the chats over there but if we move on to the main route if we again move on to the goto chat then we'll be seeing the loading chats so there is an error so what do you want to do so you can see initially the context is sending the request to the back end regarding the token to check the users's token validity until then it is calling this code so what do you want to do so we need to create the dependency on the O So once the authentication changes now we want to rerun this code so let's move on and if we again refresh this now you can see it works fine you can see now successfully loaded all of the chats and that's how it's going to work you can see it's working perfectly fine and there's another thing that we want to do is you can see now we want to work on the clear conversation Button as well so we want to work on that so how we can do that so we can create another function we can create the cons we can have the handle delete like that handle delete chats like that so that could be equals to when asynchronous Arrow function and inser this now what do you want to do so we can remove everything we can remove the params so here we want to create a function inside the API communicator and we want to create a middleware inside the back end as well so that we can accept a request and then we can delete all of the chats of the user so let's move on so inside the chat route now what do you want to do so we can create another request over there so we can have the chat routes or we can have the delete over there now let's move on so we can have slash we can have the delete over there so we can have slash we can have the delete and after that let's move on so inside this now we can create another function we can just copy it out we can paste it out so we can paste this function over there we can have the delete we can have the chats over there so that's how it's going to work and after we get all of the token user verification check then we can move on so then we can move on so we can have the user do we can have the chats like this so we can have the user do chats is equals to an empty array so now we can set the users chats to the empty array and that's how we want to work and after we set that then I think we have the type error as well so we can expect the type error so we can have the TS we can have the ignore over there and after that now what do you want to do so after we have the user chats then we can have the await then we can have the user to we can have the save like that and that's how it's going to work and then you can see everything seems to be working fine and here now again we are sending the user chats I think it's not required over there so it's not required and that's how it's going to work and then now what do you want to do so again we can move on to the chat routes we can have the delete chats like that we have the delete chats then we can move on to the API Communicator let's create another function we can copy we can paste it out we can have your delete user chats so we can have the delete like this user chats that could be an asynchronous function this should be a delete request over there this should be the delete then we can have the delete like this so we can have the delete that should be chat / delete and I think yeah it's same we have the chat SL delete and after that now what do we want to do so I think everything seems to be working perfectly fine so it should be unable to delete the chats like that we get the error and then we can move on again to to the chat page and here now what do you want to do we can have the try catch for that so we can have the try catch so inside the try we can have here the wait we can have the delete chats of the user we can have the delete user chats and after that we can have the set messages of the user set chat messages that should be an empty array and after that we can run the toast as well toast. we can have the loading we can have the deleting chats like this we can have the ID as well we can have the ID we can have the delete chats over there like this we can just copy and after everything is successful then we can move on we can have the toast dot we can have the success over there then we have the deleted we can have the deleted chats we can have successfully and then we have the same ID then if we get an error then we can move on we can lock the error we can lock the complete error message then we can move on we can paste it out we have the TOs do we have the error we can have the deleting chats we can defail like that so that could be the error message and now we want to reference this function to this button as well to this button let's move on so let's provide the on click as well so we can have the on click over there and that should be we can have the handle delete chats so let's see what happens if we move on so we have successfully loaded chats and let's move on let's just delete all of the chats let's move on let's click on delete deleting chats you can see now the chats are deled successfully and everything seems to be working perfectly fine and now if we refresh now you can see now successfully loaded chats but here we do not have any chats of the user and that's how you can see it's working perfectly fine over there you can see inside the all chats we do not have any chat and it's working great so it seems working fine and now what we want to do as the next step so there you can see now we want to enable the protected routes inside the front end as well so inside the back end we already have the protected routes if we move on to the chat routes you can see first we are verifying all of the tokens we have generate chat completion we are validating all of that so we have a couple of middlewares but now we want to move on to the front end to verify all of the protected routes of the user so and then we want to create the front end as well of the user so that would be very simple so first thing that we want to do is now we can move on to the chat page so if the user is not logged in and if the user tries to enter this page then we want to move on and then we want to redirect the user to the login page so let's move on to the chat over there so it would be very simple so what do we want to do so we can just again have the use effect code over there we can have the US effect over there and inside that now what do you want to do so let's just call it once we change the Au over there so inste the use effect now what do you want to do we can have if we do not have the O DOT we can have the user if that's null then what do you want to do so then we can have the return now we want to return the user to a new route and to use that we need to use use one thing from the react rout Dom which is a navigate so we have a hook inside the react rout Dom which is a navigate so we can use that as well we can have import something and that should be equals to we can have the from we can have the react R Dom and the some thing is we can have the use navigate so this is a hook that we can use so first thing that we can do is we can have the cons and nigate like this we can have the navigate that should have the reference of the use navigate hook and after that now what do you want to do so after we have so after you can see once we do not have the au. user we can have the return we can have the navigate like this we can have the return navigate that should be equals to SL we can have the login like this so that's how it's going to work so if you move on to the application and if you just click on the log out so there you can see now we to the Home Route but you can see now we want to implement the log out functionalities as well so let's move on so if the user is not logged in so let's just Implement that so before for testing this now we want to implement the log out as well so for implementing the log out let's again move back to the back end so we have the users controller so we can move on to the user routes let's create another route of the logout so we can have the user routes do we can have the get that should be equals to we can have the log out so that should be a log out request and inside the verify user let's just copy this function let's just paste it out and inside that we can have the log out we can have the user log out like that user log out like that this and we have this function over there and inste this function there would be nothing but we would be just removing the cookies of the user so we would be removing the cookies of the user so that's how we can create that so you can see here we created the cookies inside the sign up and inside the login so we can remove the cookies of the user as well so how we can use that so we can use the clear cookie function so we can use this over there so we have the logout route and after we verify all of the details of the user then we can move on we can have the response do we can have the clear cookie and inside that we have a couple of things we have the HTTP only domain of the Local Host signed of the true the path is this and let's just try the login oh sorry let's just try the log out as well so let's move on so it should be we can have the use a log out like this so we have this controller function and let's move on to the API Communicator let's create another request that should be we can have the user log out again log out user like this so we have this function that should be a get request only and it should be we can have slash user slash we would have the log out like this the log out so because the front end cannot delete the HTTP only cookies so that's why we need the back end to just remove the cookies so that's how we want to work and after that let's move on so there now we can move on I think so now we can move on to the header over there we can remove we can move on to the header or we can directly move on into I think we can directly move on into the O context so here we need the log out so after that now what do you want to do so we can have the a wait that should be we can have the user log out like this so I think we have the log out user like this so we have the log out user over there so we want to call this function and after that we'll be having the set messages like this sorry we'll be having the set is logged in that should be we can have the false set user that should be we can have the null over there and after that we want to reload the page as well because once you remove the HTTP only cookies it takes some time it does doesn't immediately get uh removed so it takes some time so we can have the window dot we can have the location dot we can have the REO like that so we can reload the web page so let's see what happens this time and let's see that where we are using this function let's move on to the header. TSX so there you can see now we are using the log out so let's just try it out so if we move on to the application if we again move on to go to chat and let's just move on to the inspect let's move on to console or we can move on to the network let's just click on the logout to see what happens so here we have the log out so let's just click on the log out I think nothing is happening over there so we need to do that so we can move on to the navigation link and there you can see we are not doing anything with the log out so we can put the on click prop over there we can have the on click and here what do you want to do so now we can just run near the props on click and it would be very simple now we can move on to the header you can see now here we are providing the on click so it should work perfectly fine over there let's try it out once again so let's move on to the application so let's move on to the network tab over there let's click on the log out so there you can see now we are logged out and there you can see now inside the O status now we are receiving the message like the token not received so everything seems to be working perfectly fine over there so it's working totally fine and now let's move on so here you can see if we refresh now we do not have any token over there and let's move on to the application as well so inside the cookies now you won't find any cookies so now let's move on let's just try and log in once again so let's move on with the J games let's click on the login so now we should be having the cookies I think we are having the error over there I think there's something wrong with that I think it is admin it it should be the James test.com 1 2 3 4 5 6 so email was wrong so let's try it out with the login so you can see it works perfectly fine now we are logged in and if we now refresh now we do not have any error message and that's how it's going to work so that's all we want to do and now let's move on so you can see everything seems to be working fine in our app ation and now we want to move on so if we again click on the log out now you can see now we are logged out but now you can see if we move on to the chat page over there if we move on to we can have local L 5173 then we can have the chat over there like that so let's move on so now you can see now we should be redirected to the login and that's how it works and you can see that's how it works and everything seems to be working perfectly fine so now everything seems to be working perfectly fine and there are a couple of things remaining to do this inside this application the first is the sign up UI we have the homepage UI and we have the protected routes so we are into the middle of protected routes and let's just complete all of that so let's move on to the login so there you can see if we are logged in and if we move on to go to chat you can see suppose I want to show you an example if we click on the log out and if we again move on to SL we can have the chat you can see now we are redirected to the login page so we want to do the similar thing for the login page as well so let's move on to the login so we want to do same like if the user is already logged in then we can redirect the user to the chat page so we can have the effect over there we can have the effect and inside the effect it should run every time the Au changes then we can move on so here it should be very simple so we can check if we have the auth do we have the user then I think what we can do so we can redirect the user to navigate like we can have the navigate over there SL we can have the chat so that's all that we want to do for the login so you can see now if we move on so I have already registered the navigate so with the help of this now we can move on to the chat so if you move on if you click on the login James test.com we can click on the login so you can see everything seems to be working fine but now if we move on to the login page over there like this so then you can see now we'll be redirected to the chat page so everything seems to be working perfectly fine and now we want to do another thing for the protected routes so let's move on again into the main file app. TSX and here now what we can do so we have the chat page over there and this is the protected route so we can only enable this route so we can wrap this inside a condition so we can only enable this route once we have the Au do we have the is logged in is true and we have the Au dot we have the user property so after all of these things then only we want to enable this route over there so now you can see if we again move on click on the log out and if we again move on we can go to/ chat you can see now we'll be moved on to the not found page it means now the user is moving into a page which is not found so everything seems to to be working perfectly fine over there so now this functionality is completed the protected routes let's just work on the sign up as well so we can move onto the login we can copy the complete login page we can paste it out inside the signup because the UI should be same of the authentication of the O screens so that should be we can have the sign up and here as well we should be having a the sign up over there like this so it should have the sign up over there and here we want to do another thing we need another input for for this we have uh we can have the customized input the type should be we can have the text the name should be the name itself of the user the label should also be the name then we can move on we can declare the function for the signup as well so let's move on to the API Communicator so let's just copy the login let's just paste it below that we can have the sign up user like this so then we can have the xl. post that should be we can have the sign up over there like this and we can have the name as well the name should also so we can have the string the email and the password then here as well we'll be having the name email and the password so you can see now it's working fine and the sign up has the 2011 inside that we can have the unable to we can the sign up like this so you can see now we have already defined all of the functions we just want to copy paste all of these functions and change these routes over there now we have the sign up route if the response. status not equals to 2011 unable to sign up then we are just sending the data and now let's move on so now we can move on into the communic I think inside the Au context let's move on let's do inside the signup as well so let's move on so we need to do the same thing inside the signup so let's move on so we can have the data equals to we can have the sign up user like this sign up user we need to provide the name email and the password over there and then we'll be setting all of these properties now finally we can move on to the login sorry to the signup page then we should be having o where is the o uh there is the O it should be the O do we can have this sign up and now we want to get the name as well so we can get the name over there we can get the const we can get the name that should be equals to form data doget that should be equals to the name and now we'll be sending the name email and the password and that's how it's going to work and let's move on so there you can see now we have the text of the login it should be we can have the sign up over there and now it should work perfectly fine and now we have the button it should we can have the sign up over there you can see now we have similar UI we have the sign up we have the name email and the password so this is the sign up so that's how we can do that so we can have the name we can give the name of the Mary like that we can have the Mary we can have a we can have marry we can have the Harry like that so we can give any name like that so then we can have the marry at the test.com we can give the password 1 2 3 4 5 6 so let's just click on the sign up and I think we can move on again so it should be the messages should be we can have the signing in it should be um signing up like this signing up it should be having the signed up once again we can have the sign signing up that should be failed so now we should be having a different ID that should be the sign up here as well we'll be having the sign up here as well we'll be having the sign up so let's just try it out so let's just click on the sign up signing up and there you can see everything seems to be working perfectly fine and you can see now we have the marry that's why we can see the MH over there and now you can see it seems working fine the sign up works now we want to work on the homepage so let's move on let's design the homepage of our application as well so now let's work with the homepage and for the homepage now we'll be using some type of Animation it should be some sort of Animation that we can use inside the typing so that should be a typing animation so we can have the react we have the react over there then we can have the type animation over there we can just use use this Library react type animation and it's a completely animated text Library over there like you can see you can move on to homepage as well like this you can move on to homepage and this is their homepage so then you can move on to their site as well so here we have the demo over there you can move out to the demo you can see this is the demo over there you can write this typing animations as well and that's how they will work so we need to use this type of animations for that and that's how we can use that so let's move on so let's install this Library so we have the react type animation of that so let's install that over there we have the npm install we can have the react type animation over there we need to install that and now let's move on so after installing that we'll be using the component over there you can see this is the component like this so we can use this component like this we can just copy that over there we can just copy here and then we can move on we can paste it out so we can create a shared component once again we can have the typing animation like that so I think let's create a new component for the homepage I think component we can have the tyer like this typer and inside that we can have the typing animation like that or we can typing anim do we have the TSX so we have this component over there and let's just write the ball plate code and after that we can just copy this full component the type animation let's just paste it out here so we have the type animation let's import that and there you can see now it should be used and now after that now we want to provide the text as well so you can see after every 1 second first this should be visible then this then this then this so that's how it's going to work so first that what we can do so we can have the chat with your own AI so we can have the chat with your we can have the your AI then we can move on then we can write built with open AI then we can move on so I have added the Emoji as well then we can move on we can just write something like your own customized chat GPT so that's how we want to work so you can see now we can skip this one we can skip this one and we can give the timing of around we can have your uh 1,000 milliseconds that should be we can have the 2,000 milliseconds and that should be somewhere around we can give a same like 1500 milliseconds for that so here you can see we'll be repeating it for the infinity times we have the style so we can give a customized Styles as well so we have the font size of 2m we can give the font size of around 80 pixels with that the 80 pixels of the font size or I think the 80 would be so enough we can give around 60 pixels for the font size then we can move on so I think the color we can give that should be we can the white over there then we can have the display like this we can have the inline block over there and then we can move on we can have the text Shadow as well we can have the text shadow that should be somewhere around 1 pixels we can have the one pixels then we can have the 20 pixels of the Shadow blow then we can have hash 0 color for the shadow so you can see now we have the typing animation now we can successfully move on to the homepage of our application uh so we can move on to the home. TSX over there we have the home. TSX and now we can render all of that so first we can just provide a box over there from the material UI so we can have the box over there and inside the Box we can just provide the width that should be somewhere around we can give the 100% over there we can have the height as well for the container that should be 100% we can also give here I think the flex for the display so we can have the flex over there for this display Flex then I think we can have the flex over there and then I think we can move on we can have the MX that should be we can have the auto they like that we have the MX that should be we can have the auto now we can move on so that's a parent container now we can move on we can render the box here so we can render another box it should contain a couple of more styes so that could be the container of all of these childrens like the typing animation and after the typing animation then we'll be showing an image as well so it should also have the display of the flex then we can move on the width that should be I think we can give the width or we can have the 100% over there we can have the flex direction that should be inside the column bases then we can move on align items that should be I think inside the center over there and then we can move on we can the MX that should be again that should be Auto and I think this parent condition does not require the flex and the MX Auto so that's should only have a pent container and after that inside the first thing that we want to do so we can just render the typing animation so we can have the typing anim over there like this so we need to only run that so let's see how it looks if we move on to this application if we move on to the homepage so let's see how it looks now so if we refresh the page I think it's not over we can have the npm Run we can have the dev so let's see what happens so there we go now you can see now we have the chat with your own AI you can see it looks great over there build with open Ai and there you can see it is working perfectly fine over there you can see now it looks great over there we can provide some styles from the Mt as well for the Mt that should be somewhere around three like that so you can see now it looks great so you can see that's how we want to do that and after this now we can move on and here after this box let's define another box over there so here we have another box for us and inside this box now what do you want to do so first we can provide the SX we can have the width that's should be we can have the 100% over there again the WID should be the 100% then we can move on we can have the display like this so we can have the display that should again be inside the flex box over there and after that here we need to render two images and two images should be side by side on the medium devices and on the small devices it should be on the up and bottom so we can have a flex Direction it should be regarding the theme we'll be having the responsive so we can have for the medium it should be what we can do so the medium the flex direction should be we can have the row and for the extra small we can have the flex direction that should be equals to we can have I think we can have the column like that so that's how it's going to work and after that let's move on so after that we can move on we can have the gap between them that should be we can have the five then I think we can have the M that should be equals to 10 that's enough for that I think right that's enough and after that here we need to render two images and you will find all of these images inside this section so first image that we want to render The Source could be we can have the robot. we have the PNG over there so you need to create this image over there sorry you have this image for the robot let's move on so here we have the robot image so we need this image over there let's move on we have the robot.png here as well we'll be having the robot over there and after that let's move on so here we can have the style for that so we can have the style for the images we can have a width that should be somewhere around we can give the 200 pixels for the width a WID that should be we can have the 200 pixels and here what we can do so after the width then we can have the margin that should be we can have the auto over there like this we have the margin of the auto so that's how we want to work after that we'll be having another image of the open AI so we can move on so again we can have the open a.png all again should be the open a like that the same should be there so now you can see now we have two images over there and that's how we want to work and everything seems to be working perfectly fine and after that we need to provide some class names for the opening image because here we will be rotating this image so let's move on so here we can have the class name for that that should be Mage Dash we can have the inverted over there like that so that we can have the white color and after that I have added some CSS for that so let's move on to the index. CSS here we have the rotation CSS you can add the rotate over there and inside the rotate you have the animation and here we have the key frames so from 0° to 359° to 360° so we want to rotate and it is infinite sorry it should be completed within 8 seconds and it's a linear so you need to add this CSS over there it's very simple over there and now let's move on let's just copy the rotate over there let's just paste it out you can have the rotate like this over there so let's see how it looks so you can see now it looks great over there now we have the rotation images and everything seems to be working perfectly fine and after this now we want to create another box so that would be the last box let's create another box so what you want to do so you can also create a new one so we can have the box over there like that and inside this now what do we want to do so we can have the SX prop for that and it should include so the SX prop should include some props like we can have the display again that should be we can have the flex for this so display should have the flex so that it should take full available space then we can have the width that should be we can have the 100% over there for the width then we can move on and I think after that we can move on and after the width then we can have the margin from the X that should be we can have the auto over there like that so that's how we want to work after that we want to have the image as well so we can have the image this time it should be we can have the chat do we can have the PNG I think we have the chat. PNG right so we'll be using the our own image for that so we'll be having the chat. PNG we'll be having the chat bot like that so we have the chat bot and then what we want to do so here we can provide a customized style as well so we can have the style we can have again the display that should be inside the flex we can have the margin that should be we can have the auto over there like that we have the margin of the auto then we can move on so after that we can have the width that should be only 60% of the available space the width should be 60% we have the bottle radius that should be somewhere around 20 would be enough 20 pixels would be enough then we can have the box Shadow as well so we need the shadow for this image so the Box shadow that we want to Define could be we can move on and it should have hash 64 F3 D5 so we have this chat over there it is 64 F3 D5 then we can move on we can have the margin from the top as well that should be somewhere around 20 you can see now we have this image over there oh sorry we haven't defined the XY positions for this box Shadow as well we need to define the positions so for the horizontal it should be somewhere around we can have the 5 pixels and for I think the vertical again it should be the minus 5 pixels for that and we want to define the blur that should be 105 pixels for that that's enough so there you can see now we have the image over there and everything seems to be working fine over there you can see now it looks great over there now we have this image and everything seems to be working fine over there if we move on to the 100% you can say it looks great over there we can have the margin from the bottom as well so we can have the margin that should be from we can have the bottom over there that should be somewhere around 20 once again and that's how we want to work and everything seems to be working fine over there you can see now we have the chat with with your own AI we have built with open Ai and if you open that inside the mobile devices you can say it looks great first we have the screens over there first we have the data then first we have these images and then we have the image as well and that's how we want to work and I think we need to move on we need to provide for the smm as well so we can have the smm over there small devices that should be again we can have the column or we can have the column over there so that's how we want to work so now it should look great over there now you can see now it looks fine but I think the image should be increased in the mobile devices so how we can do that so we can give customized style for the mobile and for this and for the desktop so let's move on so we can use mui for that I think we need to First import some things we need to import the Ed media quiry from the M material and then we need to use the theme as well so we can have the use theme over there like that from the a material so what we can do we can create a media query so we can have the cons we can have the theme and that should be equals to so we can have the use theme over there like that and after that we need to create a variable we can have the cons is U we can have the below medium like this is below MD that should be equals to we can have the use media quiry and inside that we'll be having a Boolean as the return then we can move on we can have the theme dot we can have the break points DOT we can have the down that should be from the MD so with the help of this now we can get if that's a mobile device or not with is below MD so if the screen size is below MD or not so we can get these from this so you can see now it looks great over there now it looks perfectly great over there and everything seems to be working perfectly fine over there and now the final thing that we want to do is now we can move on we can move on to the app component so final thing that we can do is now we can create the footer as well within this application so let's move on so here now what do you want to do so we can move on so inside the components let's create a new folder that could be for the photo so inser the photo let's create a new file that could be be of the photo do we have the TSX over there and now we can add some boil update code for that so footer can have the simple Styles over there you can see here we have the simple Styles we have the div and inside the div we have the style over there we have the width of 100% padding of 20 minimum height of 20 V height Max height of 30bh margin top of 50 and then you can see there are a couple of styles for the paragraph as well and after that now we want to provide the link as well for the Indian coders so let's move on so what we can do so here we have the buildt With Love by Indian coders so so we can just provide this span like this so we can have this pan and inside this span we can just use the link directly from I think react Dom so we can have the link over there like this we have the react router Dom over there we can just copy the inter coders we can paste it out and inside the link we can proide the two as well the two should be equals to https we can have the youtube.com/ we can have the Indian coders so we can have this channel name for us so now we have the Indian coders for that and that's how it works over there now we have this link over there and after that now what do you want to do after that now we can provide the class name for the link as well so I think we have the nav link over there like that so we have the nav link for the class name let's move on to this CSS as well so here we have the index. CSS so I think yes we have the nav link over there like this so we can provide the nav link for the class names so let's see how it looks over there so now we have this like this so let's move on let's just render the footer after this now we have the buildt With Love by encoders so I think we are just having some like blue color over there so we can have the style over there we can have the color that should be we can have the white over there like that and now we have built with love B and coders and we can remove this over there and we can also remove the empty space over there which has created so you can see it's looking perfectly great over there now we have the built with love by Indian coders and it looks great over there now what we can do so if we can click on the Indian coders now we should be moved on to the YouTube channel of my YouTube channel you can see Indian coders and you can also please subscribe to the YouTube channel as well I create a lot of videos on the monack fullstack development FB development react native so you can please subscribe to the channel as well and now let's move back so you can see now it looks great over there on the mobile devices as well you can see now it looks great and everything seems to be working perfectly fine over there so now let's move on so there you can see if we now just move on to log out if we can just click on the log out over there now we can just move on we can click on the login we can move on with the login over there so we can login as well and there you can see now we have the loaded chats as well if there would be chats then we would be loading all of the chats of the user then we can again create a new chat like that and I think there's some margin between them right so you can see we are having some extra space between them and now to fix this layout so what do we need to do so we can move on to the chat page so here we have the chat so here you can see here we have the padding of 20 pixels and we have the width of 100% so so either we can remove the padding from this so let's see how it looks so now you can see now we do not have any extra spaces over there and then we can increase the padding within the input so let's move on so let's change it to 30 pixels you can see now it looks great over there and everything seems to be working fine and we can provide the margin for this as well the MX that should be we can have the one and now it should work perfectly fine over there like this so we can have the MX that should be we can have the one over there you can see now it's working great over there and everything seems to be working perfectly fine over there and there you can see now we can again move on so I think we can remove this I think we can remove this photo inside the chat page so what we can do so instead of rendering the footer inside the main layout so we can remove the footer we can render the footer only inside the homepage like this so only inside the homepage now we can render the footer as well so we can just render here the footer and that's how it works over there now let's move on so if you move on to the homepage so now we should be seeing the footer over there and we can just increase some margin from the top that should be somewhere around 60 like that so now we have some margin and there you can see now it looks great so now you can see now it looks great over there and everything seems to be working perfectly fine and after that I think we can move on to the footer so font says 30 pixels text Aline Center okay so I think we can just keep it default and we can increase the padding to the 20 pixels directly inside the paragraph T and that's how we want to work now you can see now it looks great over there now if you move on to go to chat you can see now we do not have the extra spacing left over there and if you enter any chat over there like hi like this so let's click on the send so now you can see now we have the chats over there and there you can see now it looks great over there hello how can I help you today and you can see I have made another adjustment over there inside the chat item so I added the bottle radius that should be two and my y that should be equals to the one um and here as well we have the Bott radius of two we have the gap of two and that's how we want to do that you can see now it looks great now we have a structured layout for that and here you can see with the help of this now you can see our application looks completed over there now our application feels completed you can see it was a great application we integrated with the open AI we created the back end we created the front end we created the perfect design for that you can see everything looks great over there and everything is working perfectly fine like this so congratulations on completing this application so I hope now you have learned a lot from this course you can see we created the back end we integrated the authentication systems here the authorization system we integrated the open a here and here you can see now we have integrated the material UI for the design we created a perfect design for us you can see everything seems to be working fine over there so now let's move on and let's just close this application so now let's mark is completed and let's move on to the summary part and let's discuss that what we have learned throughout this course and now let's see that what we have done throughout this course so we have learned the mon stack so now you know and now you have a great knowledge about about the mon stack that how the mon stack Works how the backend front end integration Works how we create the back end how we create the front end with the react and then first we created the very basic Express node rest API so we created the rest API we showed you the tutorial that how to get started with the mon stack then we created the fully secured authentication with our back end so it is completely secured with the HTTP only cookies JWT tokens authentication authorization adding middle wees for the security and there was so many things and we have the data w checks as well and then we created an openi project similar to the chat GPD clone so it was a huge project we created the chat GPD clone with the monack so then we created the modern design with the material UI and react so muui is a react UI component Library we integrated that with the react we created the animations we created some components we created the chat type layout we created a lot of designs with the react and the material UI and then we created this seamless integration with the Monch with the back end and the front end and we created the integration with the credentials with the xos and so many things so with all of that let's close this project so it was very nice working with you so now let's move on so now in the end I want one favor from you so please like the video because we spend a lot of time building these type of tutorials for you so we spend all of our weekends and all of the things so we don't go outside we just create some projects like that so if this video deserves one like And subscribe then please do that because it gives me some sort of like relaxation that if I'm creating something then I'm receiving something from you guys as well so that's it from my side so I hope you will be successful in the future you can create the mon stag you can apply for the job opportunities you can share this project into your resume as well so let's move on and let's just wrap everything with this project
