With timestamps:

00:00 - hello welcome to learn swift programming
00:02 - for beginners lesson one today we're
00:05 - going to talk about variables you're
00:06 - going to learn about what they are how
00:08 - to declare them in swift code and
00:10 - furthermore how to use them
00:12 - alright so let's get started
00:16 - for the rest of the lessons in this
00:17 - series we're going to be working inside
00:19 - this app called xcode xcode is the tool
00:23 - that apple has provided for people to
00:24 - build apps with
00:26 - and inside xcode you're going to be able
00:27 - to create your user interfaces you're
00:29 - going to be able to write the code to
00:31 - express the logic in your app you're
00:33 - going to be able to test your app even
00:35 - so that's why this is where we're going
00:37 - to start in learning swift we're going
00:39 - to be writing the swift code inside the
00:41 - app that you're actually going to use to
00:43 - build apps with in the future
00:45 - so this is where you're going to get
00:46 - xcode just go to your browser
00:48 - go to
00:49 - developer.apple.com
00:51 - xcode or you can launch the mac app
00:53 - store on your computer and search for
00:56 - xcode there if you're on the web page
00:58 - you can see that there's this big blue
01:00 - download button up top
01:02 - now ideally you want to make sure you're
01:04 - using the latest version of xcode and
01:06 - right now as of this recording it's 8
01:09 - and you can check your version if you go
01:10 - to xcode you can see it here in the
01:13 - welcome screen and you can also go up
01:14 - here to xcode about xcode and you can
01:17 - see what the version is if you're a pc
01:19 - user and you're running windows there
01:21 - may be some additional work you need to
01:23 - do before you can run xcode or you might
01:25 - have to use an alternative solution to
01:27 - build ios apps so check in the
01:30 - description below for pc solutions
01:33 - however if you are a pc user don't let
01:35 - that discourage you
01:37 - for me personally i lost about two to
01:39 - three years of learning ios development
01:42 - simply because i didn't have a mac and i
01:43 - didn't want to get a mac but these days
01:45 - there are alternative solutions you
01:47 - don't actually have to buy a mac
01:49 - computer although i eventually did and
01:52 - now i haven't looked back so anyways now
01:55 - that you have xcode and after you've
01:57 - installed it it's a pretty large install
02:00 - it's pretty big program so i might take
02:02 - some time but after you have it
02:04 - installed and you launch it you're going
02:05 - to see this welcome screen you can see
02:07 - here that when you want to create an app
02:10 - for iphone ipad mac or whatever you're
02:12 - going to go to create a new xcode
02:14 - project and that's going to start a full
02:17 - out
02:18 - project for you to build an app in but
02:20 - here we're going to start a new
02:21 - playground because that's going to allow
02:23 - us to type some code quickly it's going
02:25 - to let us run that code and see the
02:28 - results and we're not committing to
02:30 - building in a project it's simply like a
02:32 - sandbox or a playground as it's named
02:34 - now if you don't see this welcome screen
02:37 - what you can do is just go up to file
02:39 - new and hit playground right there and
02:41 - that's going to start a new playground
02:42 - for you as well
02:44 - or you can just hit this button get
02:45 - started with the playground
02:47 - so that's going to launch this dialogue
02:49 - for you and i'm simply going to leave
02:52 - the default name there platform should
02:54 - be ios
02:55 - and i'm going to save this on my desktop
03:00 - okay so after your playground runs
03:01 - you'll see up here it's doing a whole
03:03 - bunch of stuff
03:05 - launching simulator getting it ready and
03:07 - when it's done all that it's going to
03:08 - say ready you can already start typing
03:11 - in code so there you go it says ready
03:14 - but
03:15 - when it doesn't say ready and it's doing
03:16 - something then chances are whatever
03:18 - you're typing here is not going to show
03:21 - up on the right hand side okay we're
03:22 - going to start with a quick tour of this
03:24 - playground window here
03:26 - so down on the left hand side i have a
03:29 - bunch of line numbers now if you don't
03:31 - have these and you want them they can be
03:33 - useful at times especially when i'm
03:35 - teaching and i need to refer to line
03:37 - numbers you can go to xcode preferences
03:40 - and you can go to text editing and you
03:42 - can simply enable line numbers there now
03:44 - this area right here is where we're
03:47 - going to type our swift code and it's
03:49 - already got a bunch of stuff for us
03:51 - right here which we're going to go
03:52 - through in a second on the right hand
03:54 - side you're going to see a quick preview
03:56 - of the results of what you typed there
03:58 - now a lot of people have trouble with
04:01 - getting output to show up on this right
04:03 - hand side based on what they type here
04:06 - well one of the things that you can
04:08 - check is just in this status bar up here
04:10 - make sure that it says ready
04:12 - and as you're typing something let's say
04:14 - i change something like that you're
04:16 - going to see that it
04:18 - for a brief second there there was a
04:20 - little spinner because it's evaluating
04:22 - your code here
04:24 - um if you want it to show up just make
04:25 - sure it says ready to process your next
04:27 - command
04:28 - and
04:29 - you know you should see that output
04:31 - there
04:31 - alternatively there is a tray down here
04:34 - which you may not notice because it's
04:36 - hidden at first you can hit this button
04:38 - to show the debug area or there's also
04:42 - this little button here to hide the
04:44 - different panels
04:46 - okay but we don't need to see all of
04:48 - that but this debug panel
04:51 - may be useful uh when we start to
04:54 - output things here this is called the
04:56 - console area where we can use swift
04:59 - commands to output things
05:01 - this blue icon here
05:03 - is to execute the code in your
05:04 - playground so if you can't get things to
05:06 - show up on the right here try
05:08 - clicking this button to run your
05:10 - playground
05:12 - right now it's blue because you can see
05:15 - there's a little drop down arrow there
05:17 - if you click and hold it you can see
05:19 - whether you want to switch it to
05:20 - automatically run
05:22 - and that's going to run the playground
05:23 - whenever you type something
05:25 - or you can set it to manually run and
05:27 - you can see now it's grayed out so if i
05:29 - type in some new code it's not actually
05:31 - going to
05:32 - change or display what i have on the
05:35 - right hand side here unless i click the
05:36 - play button to run it
05:38 - so i would recommend to have it set to
05:40 - automatically run so now that you know
05:42 - the main areas of the playground let's
05:45 - get into the meat of today's topic
05:46 - variables and in fact what we have here
05:50 - is a variable in swift a variable holds
05:53 - some data now this data could be a value
05:56 - it could be a reference to an object or
05:58 - it can even point to a function which
06:00 - are things that will get into the future
06:02 - but for now we're going to say that
06:03 - variables hold data now as you can see
06:06 - from this example line of code a
06:09 - variable has a couple of distinct parts
06:12 - let's break it down variables need to be
06:14 - declared before they can be used so this
06:17 - var keyword is used to declare a new
06:20 - variable
06:21 - following the var keyword you have the
06:23 - variable name in this case it's str
06:27 - and really that's it you've declared
06:28 - your new variable so it's got the var
06:31 - keyword and it's got the variable name
06:34 - now taking a look at the whole line what
06:36 - we have on the right hand side there
06:38 - that's some data we did say that
06:40 - variables hold data right and that equal
06:43 - sign in between the variable name and
06:45 - the piece of data well that's an
06:47 - assignment operator so what we're doing
06:49 - in this line of code is we're declaring
06:52 - a variable called str and then we're
06:54 - assigning that piece of data to that
06:57 - variable
06:58 - so now jumping back into the playground
07:01 - let's see the effect of that i can say
07:03 - something like print which is a keyword
07:06 - that is going to print something to that
07:08 - console area down below so if i say
07:11 - print and then in the parentheses i put
07:13 - str you can see that it's printed that
07:16 - hello player s rough
07:19 - line down there
07:21 - on the right hand side
07:22 - we can see a quick preview of that and
07:25 - notice that there's a slash n here and
07:28 - that is basically um just denoting that
07:31 - there's a new line associated with that
07:33 - print statement because
07:35 - uh the next time i print something it's
07:37 - going to be printed on the next line so
07:39 - you don't see that here because a new
07:41 - line is just
07:43 - a carriage return or a white space you
07:45 - can't really see it but in here in this
07:47 - preview it's visualized as that slash n
07:51 - which is just a new line
07:53 - so let's take a look at a couple of
07:56 - different pieces of data that we can
07:58 - store into variables so i'm going to
08:00 - declare
08:01 - another variable here called a
08:04 - and i'm going to assign
08:08 - a number into it so just var one
08:11 - and i'm going to declare another one
08:14 - called b
08:16 - which i'm going to also assign one
08:18 - and i want to show you that you can
08:19 - perform operations between the variables
08:22 - or on the variables
08:24 - so for example i can say print
08:27 - a
08:27 - plus b
08:29 - and you can see here that the result in
08:32 - the console here is 2.
08:33 - now notice that when i'm using the
08:36 - variables in
08:37 - an equation or an operation like this i
08:40 - don't need to use the keyword var
08:42 - because that's only for declaring
08:44 - variables right so this little part is
08:47 - declaring the variable
08:48 - but when you use them afterwards you
08:50 - just need to refer to them by name
08:53 - so let's try some other things print a
08:56 - minus b
08:59 - and print
09:00 - a
09:02 - times b
09:08 - okay so variables hold data and you can
09:11 - perform operations on variables
09:14 - now you can change the data that the
09:16 - variable is holding so i can say
09:18 - something like a equals 2 now
09:20 - right in fact actually let's not do it
09:22 - down here let's do it here after we've
09:25 - assigned one into a let's say a equals
09:28 - two
09:29 - and as a result you can see all of these
09:32 - operations have changed because a is now
09:34 - two so a plus b
09:36 - is three
09:38 - a minus b
09:39 - is one and so on because a is now two
09:43 - now when you assign something into a a
09:45 - different piece of data it replaces what
09:47 - it was holding on to before so a is no
09:49 - longer one
09:51 - it is now two but notice how when we
09:54 - assign a new piece of data into a we
09:56 - don't have to write var again
09:58 - that would cause an error because we've
10:00 - already
10:01 - declared that variable up here and
10:03 - memory in the system has been allocated
10:05 - to it and so we don't need to redeclare
10:07 - it all we need to do is assign new data
10:10 - into a like that now if you're playing
10:13 - around in the playground yourself you
10:15 - may notice something like what if you
10:17 - try to assign
10:18 - something into str
10:20 - like
10:22 - one
10:24 - well you're going to get an error and
10:26 - that's because of something called data
10:27 - types which we're going to learn about
10:30 - in the next lesson but for now
10:32 - just know that for str because we've
10:36 - assigned some text into it up there
10:38 - if we want to reassign some data into it
10:41 - again it has to be text as well
10:45 - so that would be valid
10:48 - furthermore
10:50 - you can also assign
10:52 - a variable as another variable so i can
10:54 - say
10:55 - a equals b down here
10:58 - and in that case a would now equal one
11:01 - again
11:02 - well
11:03 - it was one to begin with so let's say i
11:05 - did that so if a was two
11:07 - and then i said a equals b then now they
11:10 - would both be one
11:13 - now before we move on a quick note on
11:15 - naming variables here we have a variable
11:18 - str and i've named some variables a and
11:20 - b
11:21 - so normally you wouldn't name variables
11:23 - like a and b because they're not
11:25 - descriptive of the data that they hold
11:28 - so if you're going to be using variables
11:30 - just like this in an operation wouldn't
11:32 - it be easier if you knew what a
11:34 - represented and what b represented well
11:36 - you can declare your variables using any
11:39 - sorts of names that you'd want but you
11:41 - can't put some special characters and
11:42 - you can't put spaces in your variable
11:44 - name however the common practice is to
11:47 - use a form of camel case where the first
11:50 - letter is lowercase so let me show you
11:52 - what i mean so i can say var and if i
11:55 - want to describe my variable if it
11:57 - represents
11:58 - let's say the number of apples that i
12:00 - have i would say something like
12:04 - my
12:04 - number of apples
12:07 - like that and you can see that each new
12:09 - letter
12:10 - of each word is capitalized except the
12:13 - first one
12:16 - now you don't want to get too crazy with
12:17 - the length of the variable name as well
12:20 - and you don't want to go too short so
12:22 - short that it doesn't actually mean
12:24 - anything so there's no right or wrong
12:26 - answer or hard limits it's based on you
12:29 - know your own preference and it's more
12:31 - important if you're working in a team
12:33 - with other people that you agree on a
12:35 - certain coding style because you're both
12:38 - going to be working on the same code
12:40 - okay so one more thing i want to talk
12:41 - about are constants so they are like
12:44 - variables except that once you assign
12:46 - something to them you can't reassign
12:49 - data into them so that's really the only
12:51 - difference that and also how they're
12:54 - declared so with variables you use the
12:56 - keyword var but with constants you use
12:59 - the keyword let so i can say let c
13:02 - equals 10
13:04 - and then down here if i try to reassign
13:07 - something into c like that
13:09 - xcode is not going to like that and it's
13:11 - going to throw an error and it's going
13:12 - to tell you with this red dot down here
13:14 - and if you click it it's going to say
13:16 - cannot assign value to c because it's a
13:19 - let constant now it gives you this
13:21 - little bubble here which you can click
13:23 - and
13:25 - smartly it's going to change let to var
13:27 - because it senses that you want to
13:28 - reassign data into it so you might ask
13:31 - why would i ever want to use a constant
13:33 - if it's more limited in its
13:35 - functionality right if i declare
13:37 - everything as variables then i have all
13:39 - the flexibility i'd want
13:41 - well there are a couple of reasons why
13:43 - you'd want to use constants when it
13:45 - makes sense for one thing it helps the
13:47 - computer work a little more efficiently
13:49 - because it knows exactly what that
13:50 - constant will be and that's not going to
13:53 - change but more importantly it's that
13:55 - for you as a coder you know that that
13:59 - constant isn't going to change because
14:01 - when you're building your app you're
14:02 - going to have a lot of variables
14:04 - and when you have some sort of
14:06 - issue in your app and you don't know why
14:08 - it's happening and you're tracking down
14:10 - your code you're tracing it line by line
14:12 - and you're trying to see if maybe at
14:14 - some point you've accidentally assigned
14:16 - something to a variable and that's
14:18 - throwing off all your calculations or
14:19 - all of your logic it's going to be a
14:21 - nightmare to try to solve and untangle
14:24 - so if something you know it isn't going
14:26 - to change you can assign it to a
14:28 - constant and then when you're looking
14:30 - through your code you can be sure that
14:32 - the issue doesn't lie with that constant
14:34 - because you know it can't change okay so
14:36 - that's it for this lesson on variables i
14:38 - hope you're practicing on your own
14:40 - computer with xcode and check below this
14:42 - video for a link to the cheat sheet and
14:44 - the notes
14:46 - hello welcome to learn swift for
14:48 - beginners lesson two in this lesson
14:50 - we're going to talk about data types
14:53 - did you know in the previous lesson that
14:54 - you're already working with different
14:56 - data types well let me point it out to
14:58 - you
15:03 - let me open up the playground that we
15:04 - were working with in the previous lesson
15:08 - do you remember how we were trying to
15:09 - reassign data into the variable str
15:12 - and i was assigning something like
15:15 - a number into str and i told you that
15:17 - you couldn't do that in fact xcode tells
15:20 - you that you can't do that right here
15:22 - so if we take this little console area
15:25 - and we scroll the scroll bar all the way
15:27 - up to the top the error message actually
15:30 - tells you what's going on cannot assign
15:31 - value of type int to type string
15:34 - well what's an int and what's a string
15:37 - well those are two examples of data
15:38 - types just as the name implies
15:41 - a data type is a classification or
15:44 - a type of data
15:46 - for example a string is a data type that
15:49 - describes pieces of text
15:51 - an int short for integer is a data type
15:55 - for whole numbers negative or positive
15:57 - however there are many more data types
15:59 - than just these two
16:00 - other types of data that you'll commonly
16:02 - be working with are float for floating
16:05 - point numbers or decimal numbers and
16:08 - then there's double
16:09 - for decimal numbers where the decimal
16:11 - portion may be very large
16:13 - and then there's boolean which
16:15 - represents true or false or in other
16:17 - words yes or no
16:19 - these are some of the more common data
16:21 - types that you'll be using
16:23 - and the reason why there are different
16:25 - types of data is because the system
16:28 - stores different types of data
16:29 - differently and so when we go back to
16:32 - the playground and we take a look at
16:33 - this variable that we declared here str
16:36 - and it stores a
16:38 - string
16:40 - the system has allocated this variable
16:42 - to store this piece of
16:44 - text or string in other words and when
16:47 - you try to assign an int into that same
16:50 - variable
16:51 - it doesn't allow you to do that because
16:53 - strings and ins are stored differently
16:57 - now you might be wondering what
16:59 - differentiates a variable that stores a
17:01 - string like this str variable versus a
17:05 - variable that stores a number or an int
17:08 - like this variable a
17:10 - well when you declare a variable
17:13 - you learned in the previous lesson that
17:15 - you use the keyword var and then the
17:17 - name of the variable
17:19 - well optionally you can also put beside
17:22 - the variable name colon followed by the
17:25 - data type
17:26 - and if you declare your variable this
17:28 - way you're basically telling the system
17:30 - that this variable
17:33 - can only store this type of data
17:36 - and if you omit that part and you just
17:39 - simply declare your variable with var
17:41 - and then the variable name
17:43 - then what it's going to do is as soon as
17:46 - you assign a piece of data into that
17:48 - variable it's going to take a look at
17:50 - what type of data that is and assumes
17:53 - that that variable stores that data type
17:57 - so now going back into the playground
17:58 - here it's as if we declared this st our
18:03 - variable like this
18:06 - right and these ones
18:08 - are like this
18:13 - now for instance if i declared this str
18:17 - variable like this
18:19 - then this line would be an error because
18:22 - i'm trying to assign
18:24 - a string
18:25 - into a variable that is of type end
18:28 - so it's not going to like that
18:32 - now let's change this back to a string
18:34 - for a second
18:35 - and go back to this line where there's
18:37 - an error now you understand why
18:40 - this line is in red
18:42 - because we can't assign an in into a
18:44 - string variable well there are ways to
18:47 - convert data from type to type
18:52 - in some cases it makes sense like 29
18:55 - here this in can be represented as a
18:57 - piece of text simply like that
19:00 - right but conversely
19:02 - this hello playground line
19:05 - right here i can't convert that to an
19:08 - integer because it doesn't make sense
19:10 - that this message could be represented
19:13 - by a number
19:14 - so for example just as a little preview
19:17 - here if i wanted to convert this number
19:20 - or this integer into a string
19:23 - would create a new string and pass in
19:26 - the number like that now i'm not going
19:28 - to go into detail about why this works
19:30 - or what this line is
19:32 - because then you're going to have to
19:33 - learn about classes and initializers and
19:35 - stuff like that but for now in this
19:38 - lesson i want you to understand that
19:40 - there are different data types why there
19:42 - are different data types and how that
19:44 - comes into effect when you're declaring
19:46 - your variables and working with your
19:48 - variables and your data
19:50 - now before we end this lesson off let me
19:52 - just show you a couple of examples of
19:54 - the other data types we talked about
19:59 - so float could be something like that
20:01 - a double usually also looks like this
20:04 - and you're not going to have a really
20:06 - large decimal point unless it's like a
20:08 - result of a calculation that you're
20:10 - doing
20:12 - and let me show you
20:14 - a boolean which is represented as bool
20:16 - so you can set this to the keyword true
20:19 - or false which is going to come in handy
20:22 - for the next lesson that we're going to
20:24 - do on if statements
20:25 - oh and there is a mistake here because
20:28 - i'm redeclaring c did you see that
20:31 - in the previous lesson we talked about
20:33 - how you can't redeclare a variable see
20:35 - we declared var c up here but i forgot
20:38 - that we had tried to declare a constant
20:41 - with the same name down here
20:44 - so this is going to have to be f
20:47 - i'll show you some other types of
20:50 - data conversions here
20:52 - so i can say let's print out
20:55 - let's change
20:56 - c
20:58 - which is a float into an int
21:00 - and what's going to happen is that it
21:02 - just drops the decimal portion of that
21:05 - so if you did print
21:08 - let's convert d
21:10 - which is a double into an integer you
21:12 - can see here that it just chops off the
21:15 - 0.9 and you get 13. now there is a
21:17 - rounding function which we can try out
21:19 - right now
21:22 - like that and then inside the
21:23 - parentheses you can put d
21:26 - which is our double 13.9
21:29 - and what you're going to get as soon as
21:31 - it finishes processing is 14 like that
21:34 - but notice that the result is also a
21:37 - decimal number see it has a point zero
21:39 - there
21:40 - so what you can do is wrap the result of
21:42 - that rounding inside
21:45 - a pair of brackets like this
21:48 - inside an int
21:50 - and then you'll get 14 without the
21:52 - decimal
21:53 - okay so that does it for data types
21:56 - hello welcome to learn swift for
21:58 - beginners lesson three in this lesson
22:01 - you're going to learn how to express
22:02 - some simple decision making in your
22:04 - swift code using if statements
22:08 - all right let's get started
22:12 - so for this one we're going to start a
22:14 - brand new playground
22:18 - all right so we've done this before
22:20 - let's just call this one the
22:23 - if playground and i'm going to store
22:26 - this on my desktop
22:29 - okay so we're talking about if
22:31 - statements today
22:33 - and this is really exciting because it
22:35 - lets us finally start to make decisions
22:38 - through code and express some sort of
22:40 - logic so for example
22:42 - if i have
22:44 - let's declare a
22:46 - constant here
22:48 - so let
22:49 - a equals 10 for example
22:53 - and i wanted to print this statement
22:58 - only if a
23:00 - is
23:02 - less than
23:04 - let's say 11 which
23:06 - it is right here
23:07 - but
23:08 - um okay
23:10 - actually that is
23:12 - that is not right let's say four
23:17 - and this gives us a reason to use the if
23:19 - statement right
23:20 - okay so print only if a is less than 4
23:24 - but a is 10 right so we shouldn't be
23:27 - outputting this so what we can use here
23:30 - is an if statement and what it allows us
23:32 - to do is only execute some code
23:35 - if a certain condition is true
23:39 - so in this case we want to print this
23:42 - only if a is less than 4
23:45 - so we can write an if statement to
23:48 - check if that's true or not before we
23:50 - print that statement
23:51 - so let me show you what that syntax
23:54 - looks like and if you're not familiar
23:56 - with programming terms syntax is simply
23:59 - like the grammatical structure of the
24:02 - language so it's basically the key words
24:05 - to use and
24:06 - how we go about declaring an if
24:09 - statement or writing an if statement so
24:12 - it all starts with the if keyword
24:15 - following the if keyword we have the
24:17 - condition in which we want to check and
24:19 - following the condition we have a set of
24:22 - curly brackets
24:24 - now inside the curly brackets that's
24:26 - where we put the code that we want to
24:28 - run
24:29 - if that condition is true
24:31 - so that's your very basic if statement
24:34 - now going back to our playground let's
24:36 - write it out and print this only if a is
24:39 - less than four
24:40 - so we can do something like that if
24:43 - a
24:44 - and then we can use this operator less
24:46 - than
24:47 - 4
24:48 - and remember we need to surround the
24:50 - piece of code that we want to execute if
24:52 - the condition is true
24:54 - using a pair of curly brackets like that
24:59 - so you can put the curly bracket on the
25:00 - same line or you can put it on a second
25:02 - line it doesn't matter
25:06 - but what you usually want to do is
25:08 - indent the code
25:10 - that is inside it just so it's easier to
25:13 - read i usually like to put this curly
25:15 - bracket in
25:16 - the same line like that
25:19 - okay so now you can see that in the
25:21 - console there's nothing printed and also
25:23 - to the right here it doesn't give you a
25:25 - preview because this condition is false
25:29 - a is not less than 4 because a is 10.
25:32 - now what if we changed a to 1
25:36 - and let the playground process okay now
25:39 - it prints this statement and it previews
25:41 - the statement see it's printed down here
25:43 - so that's your very basic
25:46 - if statement
25:48 - now there are other cool things that you
25:50 - can do with an if statement there is an
25:53 - else if clause
25:55 - so for example using the else if clause
25:58 - you can check a second condition if the
26:01 - first condition evaluates to false and
26:04 - the syntax for that looks like that so
26:06 - you have your if condition and then you
26:08 - have your curly brackets and then you
26:10 - use the keywords else if
26:12 - and then you check another condition and
26:14 - you have another set of curly brackets
26:18 - so if you write it this way
26:20 - you're basically checking condition
26:23 - number one
26:24 - you know is that true if it's false now
26:27 - you're checking condition two
26:29 - and if that actually evaluates to true
26:31 - then you're running the code inside that
26:34 - else if block
26:36 - now keep in mind that it kind of goes
26:39 - from top down and if the first condition
26:42 - is actually true then it's going to run
26:45 - that piece of code inside the first set
26:47 - of curly brackets and it's just going to
26:49 - ignore your else if statement
26:53 - so let's take a look at that inside the
26:55 - playground so here
26:57 - i'm going to put else if
26:59 - a is
27:01 - less than
27:03 - let's say
27:04 - 8.
27:06 - then now i'm going to print
27:09 - only if a is less than 8.
27:13 - so now i'm going to change
27:16 - oops not this i'm going to change a
27:19 - back to 10 here
27:20 - and you can see nothing gets printed
27:22 - because
27:23 - first it checks this condition if it's
27:26 - false which it is
27:28 - then it's going to check this condition
27:30 - and it's also false so
27:32 - nothing gets printed
27:34 - now what if i changed a
27:37 - to 7
27:39 - if i change the a to 7 you can see that
27:42 - it prints the second statement because
27:45 - first it checks this condition
27:47 - that's false so now it checks this
27:50 - condition and that actually turned out
27:51 - to be true
27:53 - so it's going to run this line of code
27:55 - here
27:56 - however if a is 1
27:59 - then it checks this first one and then
28:02 - it prints this one and then it totally
28:04 - ignores
28:05 - all of the other else if conditions
28:09 - now i said all of the other else if
28:12 - conditions right
28:13 - i say that because you can have as many
28:15 - else if conditions as you want so you
28:18 - can say if als is less than
28:20 - 10 and then you can you can continue
28:22 - adding as many conditions as you want
28:24 - but keep in mind that it checks from top
28:26 - to bottom
28:27 - and as soon as it finds a condition that
28:29 - is true it's going to run that piece of
28:31 - code and ignore all of the other
28:33 - conditions
28:35 - now finally there is a clause that you
28:38 - can run
28:39 - if all of the conditions are true kind
28:42 - of like as a fail-safe or as a last
28:44 - resort
28:45 - and that is the else keyword so the way
28:48 - you write this is using the else keyword
28:52 - it's not else if it's just simply else
28:55 - and there's no condition attached
28:56 - because if all of the conditions above
28:58 - it are false then it's going to run the
29:01 - code inside of this else statement here
29:04 - so going back to the playground let me
29:06 - show you what that looks like
29:08 - else
29:11 - print
29:13 - nothing was true
29:15 - and now let me change a back to 10
29:18 - here
29:20 - so you can see that it prints nothing
29:22 - was true because it's checking the
29:24 - statement it's false this statement is
29:27 - false
29:28 - and sorry i mean conditions
29:30 - and this condition is also false because
29:33 - a is not less than 10 a is actually 10.
29:37 - so this would actually evaluate to false
29:40 - and finally it just
29:42 - gets to this else clause and it's going
29:45 - to print what's in here
29:48 - okay so let me show you a couple of
29:50 - other things that you can do with else
29:52 - statements and let's
29:54 - change these print statements to
29:56 - something that is a lot more
29:58 - recognizable or easy to read
30:00 - let's do that branch one
30:03 - branch two
30:04 - and here
30:08 - oops
30:10 - branch three
30:12 - okay
30:14 - so
30:16 - um first of all let me show you how to
30:20 - do less than or equal to
30:23 - now you see it prints branch three so
30:25 - that's how you do less than or equal to
30:28 - and likewise you can do greater than or
30:30 - equal to
30:31 - and you can see here it still prints
30:33 - branch three now what if you wanted to
30:36 - check if it was exactly 10
30:39 - you wouldn't do that because remember
30:41 - this equal sign is an assignment
30:43 - operator so what you need to do to
30:46 - compare
30:47 - if
30:48 - a is equal to 10
30:50 - you use the double equal sign like that
30:53 - you can see here it prints branch three
30:56 - okay so why don't we introduce another
31:00 - constant up here let's say b
31:02 - and let's have that equal to 4.
31:05 - i want to show you that your conditions
31:08 - for your if statements and your
31:09 - different branches can get pretty
31:11 - complicated
31:13 - and you can involve multiple pieces of
31:16 - data
31:17 - in your condition
31:18 - so you can go if a is less than 4
31:21 - if you want to check
31:23 - b as well and you want to say
31:26 - you know end
31:27 - b is less than 4
31:30 - that's how you would do it you would use
31:31 - this double ampersand sign and now
31:34 - you're checking two conditions
31:36 - you're checking is a less than four and
31:39 - b less than four and only if both of
31:41 - those are true
31:43 - are you going to get this branch here so
31:45 - let's try that out so if i set b to 1
31:48 - and a to 1
31:49 - then both of these conditions here are
31:52 - true
31:54 - so it's going to print branch 1.
31:56 - however if i set b to 10 right
32:01 - it's going to just
32:02 - see it hits this branch 2 now because a
32:06 - is 1
32:08 - which is less than 8 and it didn't print
32:10 - branch 1 because
32:12 - this was false right even though a is
32:15 - one and this part is true
32:17 - we have to have this part to be true as
32:20 - well because where you're saying is a
32:22 - less than four and b less than four and
32:25 - b is ten right now however
32:27 - you can also do or so you can say
32:31 - is a less than 4
32:34 - or b less than 4
32:36 - and in this case either condition can be
32:40 - true and that would cause it to go into
32:43 - this branch so you can see now it is in
32:45 - branch one
32:47 - all right so uh let's say a is ten and b
32:50 - is one
32:51 - so
32:52 - a
32:53 - is not less than four
32:55 - but b is
32:57 - right because you're using this or
32:58 - statement you're saying is a less than
33:00 - four
33:01 - or b less than four and if that's true
33:05 - then we're coming into here
33:08 - now furthermore if you wanted to involve
33:11 - let's do a c
33:14 - you can combine you know multiple
33:17 - conditions like this you can put this
33:18 - into
33:21 - a pair of parentheses like this and you
33:23 - can say you know end
33:25 - c is equal to three
33:28 - so you can see now that you're saying
33:30 - okay
33:31 - is
33:32 - a less than four or b is less than four
33:35 - and also is c equal to 3 then come into
33:39 - branch 1.
33:41 - now these brackets matter a lot because
33:44 - what you're doing is you're saying that
33:47 - this has to be true
33:49 - and
33:50 - this has to be true but for example if i
33:53 - just shift the brackets a little bit
33:56 - and i say something like
34:00 - this
34:04 - then that changes the meaning completely
34:06 - because now i'm saying
34:08 - is a less than 4 or
34:11 - is this part true right so where your
34:14 - brackets are matter a lot and it changes
34:17 - the meaning of what you're checking did
34:20 - you get that in this case i am checking
34:23 - is this true or
34:25 - is this true
34:27 - but the other way around
34:33 - i'm checking
34:35 - is this true and is this true
34:39 - right so the brackets matter
34:41 - finally let me show you another operator
34:44 - that we have here so here we have we're
34:47 - checking is c
34:49 - equal to three well what if we want to
34:51 - ask is
34:52 - c anything but three or is c not equal
34:56 - to three
34:57 - if we only care
34:58 - about the case where c is not three we
35:01 - can say something like this not equals
35:03 - to three
35:05 - and this is going to say
35:08 - is c
35:09 - not equal to three
35:11 - so you can see here that c is three so
35:14 - that's why it completely skips this
35:17 - branch and
35:18 - it ends up being a is equal to 10 and it
35:21 - prints branch 3.
35:25 - now you can use this not operator this
35:28 - exclamation mark here on other things as
35:30 - well so for example here i'm asking is a
35:34 - equal to 10
35:36 - right and i am
35:38 - uh it's coming in here because a
35:40 - actually is 10 and so it's printing
35:42 - branch 3
35:43 - but if i surround this
35:47 - like that
35:50 - let me put something else in here is a
35:52 - equal to 10
35:54 - and b
35:55 - equals to 1
35:57 - right that is true
36:00 - so that's why i'm still getting branch
36:01 - three
36:02 - but if i put an exclamation mark here
36:07 - like that it basically flips it around
36:10 - so
36:11 - this evaluates the true right a is a 10.
36:15 - this evaluates to true
36:18 - both
36:19 - this whole condition evaluates to true
36:21 - right
36:22 - a
36:23 - is a equal to 10 and b is equals to 1.
36:26 - and then so we get true
36:28 - but then we're adding this guy here it
36:30 - flips that true to a false
36:33 - so
36:34 - that's why
36:35 - this whole condition equates to false
36:39 - okay so that does it for if statements i
36:41 - hope you're trying this out on your own
36:43 - computer in the playground because trust
36:46 - me it's pointless to try to memorize all
36:48 - of the keywords and the syntax for the
36:50 - swift it's much better if you you know
36:53 - only spend 30 minutes instead of trying
36:55 - to memorize things spend 30 minutes in
36:57 - the playground
36:58 - just punching in different numbers like
37:00 - that playing around with the different
37:02 - conditions and expressions
37:04 - and printing out a bunch of stuff in the
37:06 - console in 30 minutes you'll remember
37:08 - a lot more just by doing that than
37:10 - trying to memorize you know how to
37:12 - declare a variable or how to declare an
37:14 - if statement so
37:15 - you know if you can get a mac get xcode
37:19 - open in a playground and then type this
37:21 - code out for yourself and play around
37:23 - with it it's going to do wonders
37:26 - so thanks again for watching and if you
37:28 - like this series so far please give the
37:30 - video a thumbs up please subscribe it
37:32 - really helps
37:34 - hello welcome to the learn swift for
37:36 - beginners series lesson four
37:39 - in this lesson you're going to learn
37:40 - about switch statements and like the if
37:43 - statement it allows you to make
37:44 - decisions with your code alright so
37:46 - let's get started
37:52 - let's start by creating a new playground
37:54 - for this example
37:56 - and i'm going to start labeling these
37:59 - after the lessons here
38:02 - and i should have done this sooner but i
38:04 - want to point out that apple does have a
38:07 - swift programming language guide
38:09 - and in this guide it goes through all of
38:12 - the syntax and the structure and the
38:14 - different concepts of the swift
38:16 - programming language it's what we're
38:18 - doing in these videos and more in fact
38:21 - so if you want something to read you can
38:23 - go ahead and visit this website here
38:26 - i'll have the link below the video
38:29 - but one thing to note is that it may be
38:32 - a little bit complicated for the
38:33 - absolute beginner who doesn't have
38:35 - programming background
38:37 - but give it a try and it's a great
38:39 - compliment to watch with this learn
38:41 - swift series that you're watching
38:43 - in fact as we're going through the
38:44 - different concepts in these videos i'll
38:46 - point out
38:47 - in the guide where they are so for
38:49 - example we're looking at the switch
38:50 - statement today and that resides under
38:53 - control flow and you can see here what
38:56 - the basic syntax is for this switch
38:58 - statement
39:00 - okay so let's jump back into our
39:02 - playground and we can do an example of a
39:05 - switch statement so in here i'm going to
39:09 - basically
39:10 - do the same example or similar example
39:13 - as the one in the guide
39:14 - and
39:17 - i'm going to introduce a new data type
39:19 - called character and it's basically like
39:22 - a string except that it's just a single
39:24 - character like that
39:27 - and with an if statement we can do
39:29 - something like this if some character is
39:33 - you know equals
39:36 - a for example okay like we have right
39:38 - here
39:40 - print
39:41 - is n
39:43 - a
39:44 - and this is going to be true and it's
39:46 - going to print this out and then we're
39:48 - going to have else if and we're going to
39:50 - maybe check another condition if we
39:51 - wanted to you know respond to different
39:54 - cases depending on what letter this
39:57 - variable is
39:59 - right but you can use a switch statement
40:00 - and it looks like this
40:02 - so we start with the switch keyword then
40:04 - you have the value which you're
40:06 - considering in our case that value is in
40:09 - the variable sum character
40:11 - so that's what we would put in there
40:13 - and then you open up a pair of curly
40:15 - brackets
40:17 - inside these curly brackets you have
40:19 - different case labels so you would have
40:22 - case if you wanted to consider the case
40:25 - where the value is an a you would have
40:28 - case a and then you have colon and you
40:31 - would have something to do if it were
40:34 - that case
40:35 - perhaps this would be easier to
40:37 - visualize if we take a look at the
40:39 - playground so let's jump back to the
40:40 - playground here
40:42 - so let me say
40:43 - switch statement
40:45 - right on the value that we're
40:46 - considering so that's some character
40:49 - and you open up a pair of curly brackets
40:52 - like that and then you have your case
40:53 - labels so i have case you know if it's
40:56 - an a
40:57 - and if i want to do something for this
40:59 - case right then you have a colon and in
41:03 - here you would print let's say is an a
41:07 - like that
41:08 - and if there's another case right i
41:10 - would have case
41:12 - b for example
41:14 - and i would say
41:16 - is a b
41:18 - and lastly if none of those cases are
41:21 - true i would have a default case like
41:23 - that
41:24 - and i would say
41:26 - print
41:28 - some fallback
41:33 - so in this switch statement
41:35 - this case was true
41:36 - right so it printed out the statement
41:38 - and it doesn't do the rest and you can
41:40 - have more lines of code in here than
41:42 - just the print statement in all of our
41:44 - examples you know i just wanted to show
41:46 - that it's coming into here this branch
41:49 - but you could execute more code in here
41:51 - now the case where you know
41:54 - character is a b
41:55 - then we would come
41:57 - into here and jump into here now if it's
42:00 - not none of those cases we would have
42:02 - default and it would print that
42:06 - and of course you can have
42:08 - a whole bunch of different case labels
42:10 - it just doesn't have to be the two that
42:12 - we have here the benefit of using a
42:14 - switch statement is that rather than
42:16 - using an if statement and having all of
42:18 - these else if clauses
42:20 - reading this is much more clean
42:23 - and it's a lot easier to read as well
42:27 - so what if you wanted let's say two
42:29 - different cases to run the same piece of
42:31 - code or the same block of code so for
42:33 - example if i change this to say
42:37 - is b
42:38 - or
42:39 - you know a c
42:41 - is a b or c
42:43 - i could do something like this with this
42:45 - case label here i can do that comma and
42:48 - then i can put
42:50 - this other case there
42:53 - so this saves me from having to have
42:55 - another case c and then you know the
42:58 - same
42:59 - code i can put a comma here put the
43:02 - other case here and have either one of
43:04 - these cases use the same block of code
43:08 - so now you can see that it comes into
43:11 - this case here prince is a b or c
43:14 - instead of coming into default
43:18 - so why would you want to use a switch
43:20 - statement over an if statement well if
43:22 - there are a lot of different conditions
43:24 - that you want to check on a certain
43:26 - value rather than using an if statement
43:29 - with a whole ton of else ifs you can use
43:32 - this switch statement which is easier to
43:34 - read and easier to understand
43:36 - you're probably going to use the if
43:38 - statement more than the switch statement
43:40 - but it's still a handy tool to have in
43:43 - your arsenal so i highly recommend that
43:44 - you try this out
43:46 - in your playground
43:48 - so that's it for switch statements this
43:50 - is a short one i hope you enjoyed it
43:52 - please help this channel grow by
43:54 - subscribing and hitting that thumbs up
43:56 - button below the video
43:58 - hello welcome to learn swift for
44:00 - beginners lesson five in today's lesson
44:02 - we're going to talk about loops
44:04 - when you're writing your app there's
44:06 - going to be many times you're going to
44:07 - find yourself needing to repeat pieces
44:10 - of code
44:11 - for instance let's say you're showing
44:13 - five things
44:14 - in your app and you need to turn each of
44:16 - them red
44:18 - so a loop is going to allow you to just
44:20 - write that single line of code to turn
44:22 - something red and you can repeat it five
44:25 - times for each of those five objects
44:28 - and that's going to save you from having
44:30 - to
44:31 - write out that code five times
44:33 - so
44:34 - that's a very simplified example
44:36 - but trust me you're going to use them a
44:38 - lot so let's take a look at how to use
44:40 - them
44:44 - so there are three types of loops we're
44:46 - going to cover today we're going to
44:47 - start with the four in loop as you can
44:51 - see in the swift programming guide here
44:54 - so let's go ahead and start a new
44:56 - playground in our xcode
45:00 - and i'm just going to call this
45:02 - the loop playground
45:05 - and save it on my desktop
45:10 - now a for in loop allows you to repeat a
45:13 - piece of code a certain specified number
45:16 - of times
45:17 - if you have a list of data otherwise
45:19 - known as an array which you're going to
45:21 - learn about in an upcoming lesson you
45:23 - can also use a for in loop to go through
45:26 - each of those pieces of data in that
45:29 - array and execute some sort of code on
45:32 - it so this is perfect for the example we
45:34 - mentioned in the intro about having five
45:37 - objects or five items on the screen and
45:39 - you need to turn each of them red for
45:41 - example
45:42 - so let's start with learning how to use
45:45 - a foreign loop to
45:47 - repeat a piece of code for a specified
45:49 - number of times and when you guys learn
45:51 - about arrays
45:52 - i'll show you how to use a foreign loop
45:54 - to go through each piece of data in that
45:56 - array
45:57 - so as you can see
45:59 - true to its name the keywords to use
46:02 - here are for and in
46:05 - so you start with the keyword for and
46:07 - next you have a variable name now you
46:10 - don't have to declare this variable
46:12 - using the var keyword like you've
46:14 - learned in the previous lessons you can
46:16 - simply have a name for this variable
46:20 - because you're only going to refer to
46:22 - this variable
46:23 - within the for in loop
46:25 - this variable that you specify here is
46:27 - going to keep track of which iteration
46:29 - of the loop is currently running
46:32 - next up you have the keyword in
46:34 - and then you have the lower range
46:37 - followed by
46:38 - dot dot and then the upper range and
46:41 - that last part there after the in
46:43 - keyword is the range which your for loop
46:47 - is going to run in
46:49 - and it's inclusive of those numbers so
46:52 - for example if you have
46:54 - 1.5 it's actually going to run five
46:57 - times
46:58 - and then after that you open a set of
47:00 - curly brackets and inside the set of
47:03 - curly brackets that's where you're gonna
47:04 - put the code that you want to repeat for
47:07 - that number of times
47:09 - so let's jump back to the playground and
47:11 - let's do a quick demo on that for in
47:14 - loop
47:15 - so i have the four keyword here
47:17 - and
47:18 - for my variable i can specify something
47:21 - like index
47:23 - and then i would put in and let's use
47:26 - that same example one to five and then i
47:29 - open up a set of curly brackets and then
47:32 - here i'm simply going to print
47:35 - hello
47:36 - and we're going to see this in the
47:38 - console down here
47:39 - it has printed it five times
47:43 - now part of the reason why you specify a
47:46 - variable name here called index
47:48 - is because you want to use that
47:51 - that number or this variable inside your
47:55 - for loop here so for example i can
47:59 - do something like this
48:01 - where i can say
48:03 - print index and you're going to see that
48:06 - index changes
48:08 - from 1 2 3 4 5 depending on
48:12 - which iteration of the loop it is it
48:14 - keeps track of
48:16 - basically where we're at
48:18 - in this range right here as we're
48:20 - looping through it
48:22 - but again what we've specified here as a
48:24 - counter is only available inside this
48:27 - scope here in between these curly
48:30 - brackets i can't specify
48:34 - you know printing index out here it's
48:36 - not going to recognize it
48:38 - okay so
48:40 - we can't do that
48:42 - and furthermore
48:44 - if you don't need to use index inside
48:46 - your for loop you can very simply place
48:49 - an underscore there
48:51 - so this is perfect for the example that
48:54 - we had
48:55 - initially
48:56 - where we're just printing hello five
48:58 - times we don't really need
49:00 - a counter of any sort we don't need to
49:03 - refer to index we don't care which
49:05 - iteration it's currently at
49:08 - one thing i want to mention which is
49:10 - confusing often for beginners is this
49:13 - idea of scope
49:14 - here for example if i wanted to sum up
49:18 - the numbers from one to five and i
49:20 - wanted to print out the result after the
49:22 - for loop
49:24 - let's say i declare a variable up here
49:26 - and i call it sum and i equate it to
49:29 - zero and then i say something like sum
49:33 - plus equals
49:35 - and actually let's add this
49:38 - index variable back here
49:40 - and i go like this now you haven't seen
49:42 - this plus equals
49:45 - sign yet
49:46 - but this operator basically
49:49 - equates to something like this
49:54 - it takes sum and it adds
49:56 - the index so this is equivalent to
49:58 - writing
50:00 - this it's just kind of like a short form
50:04 - okay so first of all
50:06 - if i declare this variable called sum
50:09 - inside my for loop inside these curly
50:11 - brackets
50:12 - well this variable is only available
50:15 - within that scope within these two curly
50:18 - brackets i can't go out here outside of
50:21 - the for loop after it's run five times
50:24 - and print out the result of sum
50:27 - see you can see that it can't find this
50:30 - variable even though i've declared it in
50:33 - here
50:34 - okay so why don't we move this print
50:37 - statement into the for loop what would
50:40 - you expect to happen in this case
50:42 - well we get one two three four five
50:45 - again
50:46 - and why is it that
50:48 - this sum isn't increasing why isn't it
50:51 - continually adding index to it and
50:55 - you know why aren't i getting the sum of
50:57 - the numbers from 1 to 5 by the last
51:00 - iteration of the loop well what's
51:02 - happening is that
51:04 - in the first iteration of the loop we're
51:06 - declaring sum
51:09 - equals to zero
51:10 - and then we're adding index to sum which
51:14 - is one and then we're printing some so
51:16 - that's why we get one down here
51:18 - in the second iteration of the loop what
51:20 - we're doing is we're declaring sum again
51:22 - we're setting it to zero
51:24 - and we are adding
51:26 - um this time the index is two and we're
51:28 - adding two to zero right and then it's
51:30 - going to print two so
51:32 - that's why you can see the output 2
51:35 - right there
51:36 - well right now you might point out to me
51:38 - hey chris i thought you said that you
51:40 - can't really declare the same variable
51:42 - you know in the first iteration of the
51:44 - loop we're declaring var sum
51:47 - right and then in the second iteration
51:49 - of the loop we're re-declaring var sum
51:51 - that's that's illegal that's not allowed
51:53 - in fact
51:54 - you might say that you know if i declare
51:57 - var string again up here
51:59 - it's going to throw an error right we
52:01 - can't redeclare the same variable
52:03 - because
52:05 - we've declared this guy up here we can't
52:07 - redeclare it using the var again
52:09 - and i would say that's true except that
52:13 - in each iteration in the loop it's
52:15 - almost as if
52:17 - it doesn't remember what happened in the
52:19 - previous iteration there's no memory or
52:22 - recollection of the previous iteration
52:24 - so each iteration is kind of like a
52:26 - clean slate and it's going to execute
52:28 - this code right here
52:31 - so just to say that again you're right
52:33 - if you're saying that
52:35 - i can't read a clear sum
52:38 - right because if i tried to do that
52:40 - right here
52:42 - xcode would throw an error
52:44 - however inside of a loop in this scope
52:47 - right here
52:49 - each iteration of the loop is like a
52:51 - clean slate okay
52:54 - now if i wanted to
52:56 - actually find out the sum of the numbers
52:59 - from one to five what i would actually
53:01 - do is i would move this declaration
53:04 - up here outside of the loop
53:07 - and then what i would do
53:09 - [Music]
53:10 - this way
53:11 - i could move this print statement
53:13 - outside of the loop and what this four
53:16 - in loop will do is simply loop from one
53:19 - to five each time
53:21 - adding index to the sum and now i'm
53:24 - actually keeping track of the sum so you
53:26 - can see that after five iterations of
53:30 - the loop
53:31 - adding the numbers from one to five into
53:33 - sum which started out as zero
53:37 - the result is 15 down here
53:40 - and that's from this print statement
53:43 - okay so i'm going to stop the lesson
53:45 - there
53:46 - while the syntax for the foreign loop is
53:49 - actually pretty simple and and the
53:50 - concept of repeating a piece of code for
53:53 - a certain number of time is pretty
53:54 - simple
53:55 - i want to give you some breathing room
53:57 - to digest what we talked about
54:00 - in regards to the variable scope
54:03 - so i would recommend that you try
54:05 - declaring and creating this loop
54:07 - on your own computer
54:09 - try declaring the variables inside the
54:11 - loop and outside the loop and see where
54:13 - you can access them and use them and
54:14 - where you cannot
54:16 - it's really going to help and aid you in
54:18 - your learning
54:20 - hello welcome to learn swift for
54:22 - beginners lesson six
54:24 - in this video i'd like to introduce you
54:26 - to two more types of loops and that is
54:29 - the while loop and the repeat while loop
54:31 - and these two loops lets you execute
54:33 - some code until some condition is met so
54:36 - that's different from the foreign loop
54:38 - where it repeated a certain number of
54:40 - times
54:41 - okay let's do it
54:47 - for this lesson we're going to create a
54:49 - brand new playground and i'm just going
54:52 - to call this the loop 2 playground
54:58 - okay so let's cover the while loop first
55:01 - take a look at this slide and let's go
55:03 - through how to declare a while loop
55:06 - so the keyword here is while
55:09 - followed by that you have some sort of
55:11 - condition and it's very similar to an if
55:13 - statement so the while loop is going to
55:16 - repeat that chunk of code
55:19 - as long as the condition is true but as
55:21 - soon as that condition becomes false
55:24 - it's not going to repeat the code
55:26 - anymore
55:27 - after your condition you have a set of
55:30 - curly brackets and inside of the curly
55:32 - brackets that's where you have the code
55:33 - that you want to repeat
55:35 - so let's do a quick example back in our
55:37 - playground
55:38 - so i'm just going to declare a variable
55:40 - here
55:42 - i'm going to call this
55:44 - let's say counter
55:45 - and i am going to
55:48 - set this counter to 10
55:52 - and then i would like to
55:54 - print hello
55:57 - let's use
55:58 - five instead so it doesn't print that
56:01 - many times and i would like to print
56:03 - hello as long as the counter is um
56:07 - above zero let's say
56:09 - so i would say something like while
56:12 - counter is greater than zero
56:16 - i would
56:18 - i would do this print right here
56:20 - however this is going to keep repeating
56:23 - as you can see because
56:25 - counter is always five so inside my
56:27 - while loop i'm going to
56:32 - computer is dying
56:36 - okay
56:39 - as you can see
56:43 - it eventually
56:45 - overflows and crashes
56:47 - okay so what i'm doing here
56:51 - is i am decrementing counter by one for
56:54 - each iteration of the loop so as you saw
56:57 - when i didn't have this line of code it
57:00 - just kept printing hello
57:02 - many many times because this condition
57:06 - would always be
57:08 - would always be false there was nothing
57:10 - changing the counter variable from five
57:12 - to zero
57:13 - so i'm just going to warn you about that
57:16 - if you're going to try this on your own
57:17 - computer
57:19 - you know if you have a slower computer
57:21 - it might it might take a lot longer for
57:23 - you to get out of that out of that loop
57:27 - so you can write this statement first
57:28 - make sure you have
57:30 - a statement that is
57:32 - decrementing your counter
57:34 - so again this minus equals
57:36 - is the equivalent of writing something
57:38 - like this
57:39 - counter equals counter minus one so
57:42 - you're just taking whatever value
57:43 - counter is you're minusing one and
57:45 - you're setting that as a new value for
57:48 - counter
57:49 - as you can see here
57:51 - it's what you would expect right you get
57:53 - hello
57:54 - five times
57:56 - now let me point something out to you
57:58 - right here
57:59 - uh what if counter was
58:03 - let's say negative five
58:05 - you can see here that nothing gets
58:07 - printed out because
58:09 - this loop is going to see if this
58:11 - condition
58:13 - is false or true
58:15 - before executing the code right so it
58:17 - evaluates the condition
58:19 - and then it decides whether or not it
58:22 - should run this and repeat it
58:25 - now the second type of loop the repeat
58:27 - while loop is very similar to the while
58:30 - loop except that
58:31 - it checks the condition
58:33 - after looping once so it checks the
58:35 - condition down here let's take a look at
58:38 - the syntax
58:39 - so you start with the keyword repeat
58:42 - and then you have a set of curly
58:43 - brackets and inside the set of curly
58:46 - brackets you place the code you want to
58:48 - loop or repeat
58:50 - and then after the ending curly bracket
58:54 - you have a while keyword and you then
58:56 - you have the condition
58:58 - so the syntax of this repeat while loop
59:01 - is very intuitive actually
59:03 - it's basically saying repeat this piece
59:05 - of code while this condition is true
59:10 - okay so let's go back to the playground
59:12 - and let's do an example here
59:14 - so i am going to use the same example
59:18 - okay let's print hello here
59:20 - and we're going to have the same thing
59:22 - counter equals counter minus 1
59:25 - and we're going to say repeat
59:29 - this chunk of code
59:31 - while
59:34 - counter is greater than zero so as you
59:36 - can see it's pretty much the same loop
59:41 - or same condition rather
59:43 - right while counter is greater than zero
59:45 - and that's the same thing i have up here
59:48 - for this while loop
59:49 - and
59:50 - let's just print something else here so
59:52 - we can differentiate it
59:54 - and you can see the repeat while loop
59:56 - actually prints it out
59:58 - once and then it checks the condition
60:00 - and it realizes oh i shouldn't repeat
60:02 - this chunk of code because
60:04 - this is false
60:06 - right
60:08 - whereas this while loop it checks the
60:09 - condition first and it realizes this
60:11 - condition is not true and it won't print
60:13 - at all
60:15 - so that's that's the main difference
60:17 - between the two types of loops
60:19 - both types of loops will repeat a chunk
60:21 - of code until a certain condition is
60:24 - false except that
60:26 - the while loop checks first
60:28 - and the repeat while loop checks the
60:30 - condition after repeating once
60:34 - hello welcome to learn swift for
60:36 - beginners lesson seven in this lesson
60:38 - you're going to learn about functions
60:40 - how to use them what they are and this
60:42 - is a critical part of the swift
60:44 - programming language if you want to
60:45 - build apps with it so let's get started
60:51 - so here i've got a brand new xcode
60:53 - playground where we're going to take a
60:55 - look at what functions are and how to
60:57 - use them how to define one how to call
60:59 - one if you don't know how to start a new
61:02 - playground just go back to lesson one of
61:04 - this learn swift series okay let's start
61:07 - with what a function is
61:09 - at its very core a function simply
61:11 - allows you to take a chunk of code give
61:14 - it a function name and then whenever you
61:16 - call that function name it's going to
61:18 - execute that chunk of code
61:20 - now that may seem simple but over the
61:23 - course of the next couple of videos
61:24 - you're going to see just how complex and
61:27 - powerful functions can be functions are
61:29 - really useful because it allows us to
61:31 - break down and group our code into
61:34 - smaller chunks
61:35 - and we can organize them so that each
61:38 - function or each chunk of code has a
61:40 - specific task
61:42 - and when you want to do that specific
61:44 - task then you just call that function
61:47 - so let's see how a function is defined
61:49 - in swift code and then we'll jump into
61:51 - some examples in our playground
61:54 - so here we have the syntax for our basic
61:56 - definition of a function now it can get
61:59 - more complex than this because there are
62:01 - a lot more features of functions that we
62:03 - can use but we're going to explore those
62:05 - in the next couple of videos for this
62:07 - example here is your kind of basic
62:11 - definition of a function you start with
62:13 - the func keyword that's func
62:15 - followed by the function name now this
62:17 - function name is what you're going to
62:19 - use to call the function
62:21 - now right after the function name you
62:23 - have two parentheses or two rounded
62:25 - brackets
62:26 - in this basic definition there is
62:28 - nothing in between these two brackets no
62:30 - spaces nothing in the next two videos
62:32 - you're going to see what those brackets
62:34 - are used for but for now
62:36 - those brackets are just there as part of
62:38 - the definition there's nothing in
62:39 - between them
62:41 - and then you're going to have a set of
62:43 - curly brackets and as you would expect
62:46 - in between the curly brackets you would
62:47 - put the code for the function
62:50 - so whenever you call the function name
62:52 - that code in between those curly
62:54 - brackets that code is going to be
62:56 - executed
62:58 - all right let's jump into the playground
63:00 - and do some examples
63:02 - i'm going to declare a function that is
63:04 - going to
63:05 - add two numbers together
63:08 - and it's going to print the result to
63:10 - the console so i'm going to start by
63:13 - using the func keyword to declare a
63:16 - function
63:16 - and now i have to have a
63:19 - function name
63:21 - so i'm going to say
63:23 - add
63:24 - to numbers
63:27 - that's my function name and you'll
63:29 - notice that i'm using the same
63:31 - camel case as i do for declaring
63:34 - variables where i start with a lowercase
63:37 - letter
63:38 - of the first word and the following
63:40 - words uses a capital letter then i have
63:43 - my two rounded brackets like that
63:45 - followed by
63:46 - a set of curly brackets like that
63:50 - and sometimes when you type in this
63:52 - first
63:53 - curly bracket or the opening bracket and
63:55 - then you press enter xcode will
63:57 - automatically add this ending curly
63:59 - bracket for you
64:01 - okay so in between the two curly
64:03 - brackets i am going to
64:05 - say let a equals one
64:08 - let b equals two
64:10 - and
64:11 - i am going to
64:13 - uh let's see equals
64:16 - a plus
64:18 - b
64:19 - okay
64:20 - and then finally we're going to print
64:22 - the result of c
64:25 - so you can see here that nothing
64:27 - actually happens because this function
64:30 - hasn't been called this code is sitting
64:32 - here if we had written this code instead
64:35 - of putting it into a function so let me
64:38 - just delete this for now
64:40 - like that
64:42 - and this is what we've been doing so far
64:44 - before we learned about functions we
64:45 - would just declare these constants here
64:48 - and then print c and you would see all
64:50 - of the stuff in the output now i'm just
64:52 - going to undo those two deletions
64:54 - so to wrap this code inside of a
64:57 - function now you can see nothing gets
64:59 - output until i actually call the
65:01 - function to execute this code right here
65:04 - so how do we call a function so in order
65:06 - to call a function you just have to
65:08 - write the function name followed by the
65:10 - two rounded brackets
65:12 - now because we don't have anything
65:13 - inside these two rounded brackets that's
65:15 - all we have to do but as you're going to
65:17 - learn in a couple of videos later
65:20 - if we have something in between these
65:21 - brackets the calling the function would
65:24 - require a little more work but for this
65:27 - basic function we can
65:29 - invoke that function simply by writing
65:31 - its name so add two numbers as you can
65:33 - see here autocomplete even suggests it
65:36 - so all i have to do is highlight that
65:37 - line
65:38 - press enter
65:40 - and what happens now we get three output
65:43 - into our console because by calling that
65:46 - function it just ran the code down here
65:50 - and i can call this again
65:53 - as many times as i'd like and anywhere
65:56 - i'd like one benefit is that if you need
65:58 - to execute a chunk of code several times
66:01 - this is a big savings rather than
66:03 - writing this code out multiple times i
66:05 - just put it inside a function give it a
66:07 - name and now i can invoke that piece of
66:09 - code whenever i call this function name
66:12 - like this
66:14 - so it helps you reuse code especially if
66:17 - that chunk of code is going to be used
66:19 - multiple times in your app you don't
66:21 - want to write out the same chunk of code
66:23 - multiple times in and around your app
66:26 - because
66:26 - it makes it really hard to debug for
66:29 - example if you've got an issue with this
66:31 - chunk of code and imagine if you had it
66:33 - repeated several times in your app in
66:35 - order to fix it you'd have to fix it in
66:38 - every single one of those places but if
66:40 - i have this chunk of code inside this
66:42 - function
66:43 - i would only have to troubleshoot and
66:45 - debug this piece of code once here
66:48 - and as soon as i change this let's say i
66:50 - change this a to a two and let's say
66:53 - that fixed my code and you can see here
66:56 - wherever i call add two
66:58 - numbers the code is updated so i only
67:01 - need to update and change the code in
67:03 - one place whereas if i wrote this chunk
67:06 - of code out in multiple places in my app
67:08 - i would have to change it in all of
67:10 - those places
67:12 - another benefit i mentioned is that it
67:14 - lets you group this chunk of code that
67:16 - performs a specific task into a function
67:20 - that describes what that chunk of code
67:22 - does so it helps you organize your code
67:26 - so there is one more thing i want to
67:28 - mention about functions and that is
67:30 - about scope so same thing we learned
67:32 - about inside of loops in terms of
67:35 - defining variables applies here as well
67:38 - so let me give you an example of what
67:41 - i'm saying so let's say i get rid of
67:43 - those two function calls and we simply
67:45 - have this function here we have these
67:48 - three constants c is obviously four
67:52 - right and inside this function i'm
67:54 - printing c so outside of my function
67:58 - let's say i want to print c
68:02 - well that is actually going to throw an
68:04 - error that doesn't work why because the
68:08 - constants and variables that you declare
68:10 - inside a function can only be used in
68:13 - the function in between these two curly
68:15 - brackets
68:16 - and likewise if i
68:19 - declared another function
68:21 - really quick quickly
68:27 - so inside this function i also cannot
68:30 - access the constants that i declared
68:32 - here so if i declared
68:35 - a constant
68:36 - like that d equals one i can't say
68:39 - you know uh
68:42 - let e equals c minus d or something like
68:45 - that
68:45 - um inside this function it's not going
68:47 - to recognize what c is right here
68:52 - so let's get rid of this first okay so
68:54 - there you can see the error it doesn't
68:56 - know what c is because c is defined
68:58 - inside add two numbers and so it only
69:02 - recognizes
69:04 - c within this scope a b and c in fact so
69:07 - inside here inside this function i'm
69:09 - free to declare a again because it only
69:12 - applies within
69:14 - these brackets like that
69:17 - so i can have a minus d
69:21 - and let's end off
69:23 - by printing e
69:25 - okay so the main takeaways for this
69:27 - lesson right here
69:29 - you've learned about what functions are
69:31 - and why they're beneficial you've
69:32 - learned how to define a simple function
69:34 - you've learned how to call that function
69:36 - so you can execute the code inside of
69:38 - that function
69:39 - and furthermore you learned about the
69:41 - scope inside of a function
69:43 - and just to remind you about that
69:46 - it's that whatever you declare inside of
69:48 - the curly brackets of a function is only
69:51 - recognized and can be used inside of
69:53 - those curly brackets
69:55 - in the next video we're going to build
69:57 - upon what we learned here in this lesson
70:00 - and you're going to learn how to make
70:01 - functions even more powerful
70:03 - so thanks for watching if you liked the
70:05 - video please give it a thumbs up it
70:07 - helps this video get seen by more people
70:09 - and subscribe for more
70:12 - hello welcome to learn swift for
70:14 - beginners lesson 8. in the previous
70:16 - lesson you learned about functions how
70:18 - to declare them and how to call them
70:21 - in this lesson you're going to learn how
70:23 - to use them in an even more powerful way
70:26 - by having your functions accept data and
70:28 - also return data to you when you call
70:30 - them all right let's see how that's done
70:37 - so here i have a fresh playground if you
70:39 - forget how to open up a new playground
70:41 - just go back to lesson one of this
70:43 - series and you can see how now there's
70:45 - one thing i want to mention before we
70:46 - move on that i forgot to mention in the
70:48 - previous video and that is that
70:50 - sometimes i may accidentally say method
70:53 - and when i say method i actually mean
70:56 - function now i noticed that a lot of
70:59 - other swift teachers also do this
71:02 - and the reason for this is because
71:04 - for many swift educators like myself
71:07 - swift isn't our first programming
71:09 - language and in many of the programming
71:12 - languages out there there is some
71:13 - concept of a function and sometimes
71:16 - they're called functions sometimes
71:18 - they're called methods and sometimes
71:19 - even other things so
71:21 - a lot of the educators out there when
71:23 - they're teaching sometimes they're going
71:24 - to slip up and they're going to say
71:26 - method instead so i just want to put it
71:28 - out there if you hear me say method
71:30 - uh
71:31 - just know that sometimes i use function
71:33 - and method interchangeably
71:36 - okay so we're going to start by
71:38 - just redeclaring that function that we
71:40 - had in the previous lesson and i want to
71:43 - redeclare it just for extra practice for
71:44 - you guys so i think it was something
71:47 - like
71:48 - um add to numbers
71:51 - like this
71:52 - and it was let a equals one
71:55 - let b equals one and let's see equals a
71:59 - plus b
72:00 - and then we're going to print c just
72:03 - like that
72:06 - now in the previous lesson i mentioned
72:08 - that functions are great for kind of
72:10 - organizing your little bits of code into
72:13 - um pieces of code that perform one task
72:16 - so in this case
72:17 - um this function would add the two
72:19 - numbers together and then it would print
72:21 - out that sum in the console but what if
72:24 - i wanted the function to just add the
72:26 - two numbers but don't print it out i
72:28 - just want the result
72:31 - so in fact functions have something
72:33 - called a return value
72:36 - and it's exactly how it sounds when you
72:39 - execute the function it returns a value
72:42 - to you
72:43 - so let's take a look at what the syntax
72:45 - is for specifying that a function
72:46 - returns a value
72:49 - so everything remains the same as our
72:51 - basic function definition but after the
72:54 - two rounded brackets you have an arrow
72:57 - that arrow is just comprised of a hyphen
73:00 - and a greater than sign and followed by
73:02 - that you have the data type of the value
73:05 - that this function should return
73:07 - so now that you specified that this
73:09 - function returns
73:11 - a value you have to use the return
73:13 - keyword inside of that function to
73:15 - actually return a value of that same
73:17 - data type that you specified
73:20 - so now let's go back to our playground
73:22 - and see how this applies to the function
73:24 - that we have there
73:25 - so let's say that for this function
73:28 - i don't want to print out the sum
73:30 - instead i wanted to return the sum to me
73:33 - i would then erase this print statement
73:35 - first of all
73:37 - after the rounded brackets i would put
73:38 - hyphen
73:40 - greater than sign and then i would put
73:42 - int
73:43 - specifying that this function should
73:45 - return an int data type
73:48 - now xcode immediately throws an error
73:51 - here because it notices that i
73:53 - don't have the return keyword i'm not
73:55 - returning
73:56 - an integer value like i said i would so
73:59 - what i would have to do actually to fix
74:01 - this is use the return keyword and i'm
74:03 - going to return c because that's the sum
74:06 - of a and b
74:08 - so now when i call
74:10 - add two numbers like that it actually
74:13 - returns c
74:15 - now let me show you something here so
74:17 - when i type that autocomplete it shows
74:19 - you the return value right there it
74:21 - tells me that add two numbers actually
74:24 - returns an integer like that so what i
74:27 - would do
74:28 - essentially is i would probably
74:31 - declare a constant
74:33 - and let's call it sum and i would say
74:35 - equals add two numbers what's happening
74:38 - here is that i'm calling this function
74:41 - add two numbers
74:42 - and this function is returning
74:45 - c
74:46 - as in the sum of one plus one
74:48 - and i'm assigning that value into this
74:51 - constant called sum
74:53 - so now if i print sum
74:56 - like that
74:58 - i would get 2.
75:01 - so this constant sum it stores the
75:04 - returned value from my function here
75:07 - so one more thing i can do up here
75:09 - instead of declaring this constant c
75:12 - equals a plus b and then returning c i
75:15 - could actually get rid of this constant
75:18 - and i could just return a plus b like
75:20 - that
75:21 - and that would actually take a and b add
75:24 - them together and then return it
75:28 - so that's return values for functions
75:30 - and this is really powerful because now
75:32 - you can
75:33 - write a function that does something and
75:36 - returns the result to you
75:38 - so your function is kind of like
75:41 - a little worker or a piece of code that
75:43 - does a specific task and then returns
75:45 - you back the result
75:48 - now there's another cool thing that you
75:50 - can do with functions and that's called
75:52 - parameters
75:53 - see this function by itself add two
75:55 - numbers
75:56 - it's always just going to add one and
75:58 - one together and return two to me
76:01 - but what if i wanted this piece of code
76:03 - to be reusable for any type of numbers i
76:06 - want to specify which two numbers i want
76:09 - to add together
76:11 - so essentially what it is
76:14 - is when i declare this function i can
76:16 - specify in between these two rounded
76:18 - brackets see i mentioned
76:20 - in the previous video that we would use
76:22 - this
76:22 - in between these two rounded brackets we
76:25 - can specify that this function needs
76:28 - some input parameters in order to
76:30 - execute so let's say that i'm going to
76:32 - declare this function and say that when
76:34 - you call this function you need to give
76:37 - me two numbers
76:38 - as inputs
76:40 - now when i call the function here i
76:43 - would have to specify two numbers in
76:45 - between these rounded brackets
76:47 - okay so before we actually do it let's
76:50 - go take a look at what the syntax looks
76:52 - like for declaring these
76:54 - input parameters so this syntax right
76:56 - here shows you what the function
76:58 - definition would look like for a single
77:01 - parameter now we're going to get to
77:02 - multiple parameters but this is an
77:04 - example of a single parameter
77:06 - function declaration
77:09 - so in between the two rounded brackets
77:11 - you have an argument label
77:14 - okay i'll explain to you in a second
77:16 - what that is and then you have a
77:18 - parameter name
77:20 - followed by a colon
77:22 - and then followed by the data type of
77:24 - the parameter
77:25 - you're accepting
77:27 - now let's talk about the parameter name
77:30 - colon data type part first
77:33 - so obviously the colon data type part of
77:36 - that
77:37 - specifies what sort of parameter you're
77:40 - going to be passing into the function
77:42 - and the parameter name
77:44 - is going to be the name of that
77:46 - parameter you use within the function
77:49 - so if i wanted to take that input and i
77:51 - wanted to add it to something
77:53 - and i wanted to reference that value
77:55 - that was passed in i would use the
77:57 - parameter name okay
77:59 - inside the function
78:02 - now the argument label for that
78:04 - parameter is what is going to be shown
78:07 - when you call that function
78:09 - i know it's a little bit confusing right
78:11 - now but let's jump into an example
78:14 - so it makes more sense
78:16 - all right so back to the playground here
78:17 - let's
78:19 - implement one parameter inside our add
78:21 - to numbers function here so i'm not
78:24 - going to use any descriptive names right
78:25 - now because i want to show you how
78:28 - the argument label and the parameter
78:30 - name plays out so i'm going to say
78:33 - add two numbers
78:35 - argument label is
78:37 - let's just say arg
78:39 - and then the parameter i'm just going to
78:42 - say para okay and then colon
78:45 - int
78:46 - so
78:47 - this
78:48 - function now accepts a parameter
78:51 - that is type of int
78:53 - and then xcode detects that now this
78:56 - function call is incorrect
78:58 - because we have no function that doesn't
79:00 - accept parameters
79:02 - so one cool thing you can do is just
79:04 - erase that and go
79:07 - add two numbers you can see that
79:09 - autocomplete now recognizes that we have
79:11 - a parameter so let's
79:14 - double click that and you can see here
79:16 - is the argument label
79:18 - let's pass in the number here let's pass
79:20 - in let's pass in 2
79:22 - like that
79:24 - so by specifying arg there as the
79:27 - argument label for the parameter when i
79:29 - call the function
79:30 - i'm going to have this label here
79:34 - if i wanted to use
79:36 - this number that i passed in remember
79:39 - you have to use the parameter name
79:41 - that's for inside the function so
79:45 - i would reference the value that's
79:46 - passed in using the parameter name like
79:48 - that so essentially what i would get
79:51 - here
79:53 - is because i'm passing in 2
79:56 - and i'm referencing i'm setting a as
80:00 - 2 right that's our parameter that just
80:02 - got passed in
80:03 - it would be two plus one
80:05 - so that's what is stored in the sum and
80:07 - when i'm printing some
80:09 - that's what i expect to get three
80:12 - okay that is helpful but it's not
80:15 - complete we want to be able to pass in
80:17 - both numbers so that we can specify
80:20 - which two numbers to add together let's
80:22 - take a look at the syntax for multiple
80:24 - parameters
80:25 - so the syntax for multiple parameters is
80:28 - very easy
80:29 - in the parameter list that is that's
80:32 - stuff between the rounded brackets you
80:34 - would just put a comma after the first
80:36 - parameter and then essentially repeat
80:38 - the same thing for the second parameter
80:40 - you'd have an argument label
80:41 - followed by space followed by a
80:43 - parameter name
80:45 - colon and then the data type
80:47 - now you want to use different argument
80:49 - labels and different parameter names
80:51 - obviously so that you'd be able to tell
80:53 - it apart
80:54 - now let's jump back to the playground
80:56 - and add our second parameter so what i
80:59 - would do in between these rounded
81:00 - brackets in this parameter list is i
81:02 - would just put comma and then i would
81:04 - put my second argument label
81:07 - my second parameter name followed by the
81:09 - data type which is another int
81:12 - now again xcode is going to throw this
81:13 - error here
81:15 - let's use autocomplete again add
81:18 - two numbers you can see here it's been
81:20 - updated to accept two arguments
81:23 - so argument
81:24 - just arg and arg2 so let's pass in two
81:29 - and two
81:30 - now we have to modify
81:32 - our code a bit right now i'm still
81:34 - getting three and that's because inside
81:36 - this function code i'm not using
81:39 - the parameter two yet we can change that
81:43 - like that
81:44 - so now a gets set to parameter
81:47 - i mean para and b gets set to para 2
81:51 - and then i'm returning a plus b
81:54 - so now i actually get four in here
81:57 - so one thing we can do with this
81:58 - function is actually we don't need to
82:00 - declare a equals para and b equals pair
82:03 - two that doesn't really do anything
82:06 - so we can get rid of these two constants
82:07 - here and we can simply return
82:10 - para plus para2 like that
82:14 - straight off the bat now our function is
82:16 - pretty simple
82:19 - so at this point you might be wondering
82:21 - why is it so confusing that i'm using
82:24 - argument labels here in the function
82:25 - call and then we're using parameter
82:28 - names inside the function code
82:31 - well
82:32 - what you can do is you can actually
82:34 - not specify argument labels
82:37 - like that and just have the parameter
82:39 - names and what it'll do is it's going to
82:42 - use the parameter name both
82:44 - as the argument label and the parameter
82:46 - name so now
82:48 - this is wrong you can see xcode here has
82:52 - an error let's use autocomplete to see
82:54 - what the new function looks like the new
82:56 - function call and you can see here that
82:59 - now the argument
83:01 - labels are the parameter names
83:11 - so we can also change our parameter
83:13 - names at this point you probably don't
83:14 - want to use para and para2 for your own
83:16 - function so we can say
83:18 - you know number one
83:21 - number two if we have these as our
83:24 - parameter names then you know this
83:25 - changes as well
83:27 - number one
83:29 - number two
83:30 - and then our function call would also
83:33 - change
83:34 - like that
83:38 - okay
83:40 - now you might be wondering why
83:42 - why use argument labels at all like what
83:44 - are they for
83:46 - well using argument labels you can make
83:48 - your function calls a little more like
83:51 - natural english so let me show you an
83:53 - example you can do something like this
83:55 - add two numbers
83:58 - so there's my first argument label
84:02 - and
84:04 - number two like that so let's take a
84:06 - look at what
84:08 - our new function call would look like
84:11 - so when i'm calling a function
84:14 - add two numbers using
84:17 - two and two
84:19 - right you can see how that reads more
84:22 - like natural english and it makes
84:24 - intuitive sense what the parameters are
84:26 - going to be used for
84:28 - meanwhile
84:29 - inside
84:30 - our
84:31 - um
84:32 - our function here if my parameter names
84:35 - were using
84:37 - right
84:38 - or and it doesn't make much sense
84:41 - right
84:42 - um
84:43 - you know if i didn't use
84:45 - if i used these as the parameter names
84:48 - like that
84:50 - these would be terrible parameter names
84:52 - because if my function is really long
84:55 - this doesn't tell me anything this
84:57 - doesn't tell me anything it doesn't mean
84:59 - anything to me
85:00 - while this function call still makes a
85:02 - lot of sense when you call it
85:05 - in terms of natural english but in in
85:07 - the actual code in here and add two
85:09 - numbers
85:10 - you know adding using an n doesn't
85:12 - really make sense so if you use the
85:14 - combination of
85:16 - argument labels and parameter names that
85:18 - make sense
85:21 - um you have this function call that is
85:24 - like natural english that makes sense
85:26 - and you also have meaningful parameter
85:28 - names that you can use inside of your
85:29 - function
85:32 - okay so i want to show you
85:34 - one more thing if you don't want to use
85:37 - these argument labels at all
85:39 - what you can do is replace your argument
85:42 - labels
85:43 - with an underscore like that
85:45 - or you can replace one or you can
85:47 - replace both so let me show you
85:50 - what that
85:51 - looks like
85:52 - so i'm going to replace both the
85:54 - argument labels with just underscore
85:56 - let's take a look at
85:58 - what that looks like now
86:00 - so you can see now that
86:02 - i just pass in 2
86:04 - and 2 like that
86:07 - no parameter names no labels no
86:09 - arguments no nothing it's just you pass
86:11 - in the input parameters like this
86:15 - and
86:16 - you these are your parameter names so
86:18 - that's what you're going to be using
86:19 - inside of your function
86:22 - okay so just to recap
86:24 - in this lesson you learned about return
86:26 - values you learned about the return
86:28 - keyword
86:29 - and you learned about input parameters
86:32 - and how to specify them what argument
86:34 - labels are what parameter names are and
86:37 - also how to omit argument labels
86:39 - altogether
86:42 - i hope you enjoyed this lesson if you
86:44 - did please give the video a thumbs up
86:46 - and please subscribe for more
86:50 - hello welcome to learn swift for
86:52 - beginners lesson nine in this video
86:54 - you're going to be introduced to classes
86:56 - which is an absolutely critical part of
86:59 - the swift programming language if you're
87:00 - going to be using it to build apps
87:03 - i'll tell you all about it let's get
87:05 - started
87:09 - so i'm going to start off with a
87:11 - hypothetical example so let's say you
87:14 - have something like a blog post which
87:16 - you would like to represent we might
87:18 - have something like a variable here
87:21 - for blog title right blog title can be
87:24 - hello playground i don't know what kind
87:26 - of article that would be
87:28 - but we would have another variable for
87:31 - the blog body and this is the you know
87:34 - text of the article or the blog post
87:37 - and then we might have something like
87:39 - blog
87:40 - author
87:42 - which in this case let's just put my
87:44 - name here
87:45 - so you can see here
87:47 - this is the data for
87:48 - one blog post
87:50 - now let's say i had two blog posts what
87:53 - what would i do in this case
87:55 - i might have another set of variables
87:57 - down here and of course i can't have the
88:00 - same variable names
88:01 - so let's just append two to these
88:07 - these variable names
88:10 - and let's say this is
88:12 - i don't know
88:13 - this article is goodbye playground okay
88:17 - now this is what i have for two blog
88:19 - articles now what if i had 10 what if i
88:22 - had a 100 how many variables would i
88:24 - have then it it'd be a ton right it'd be
88:27 - a mess
88:28 - there needs to be a better way to
88:30 - represent a blog post to kind of group
88:33 - these variables together
88:34 - and there is
88:36 - in fact that's what a class is
88:38 - you know how you learned about the
88:40 - different data types back in lesson two
88:43 - you learned about the string data type
88:45 - you learned about the int data type
88:47 - float double boolean
88:49 - all of those are data types to represent
88:51 - different types of data right
88:53 - well with classes you can define your
88:56 - own custom data type so what we're going
88:59 - to do here is we're going to create our
89:01 - custom data type
89:04 - called blog post for example
89:06 - you can do that with classes
89:09 - let's take a look at the syntax for
89:11 - declaring a new class
89:14 - so first of all you have the class
89:16 - keyword
89:17 - next you have the name of the class and
89:20 - this is going to be the name of your
89:22 - data type then you follow by two curly
89:26 - brackets
89:27 - and inside those two curly brackets
89:30 - is your class definition
89:33 - let's take a look at this back in our
89:35 - playground
89:36 - so for example
89:40 - up here let's create
89:42 - and define our class so first i would
89:45 - use the class keyword
89:46 - and then i would create a
89:50 - name of the data type or the name of the
89:52 - class in this
89:54 - case let's put blog post and notice that
89:57 - this time i'm starting off with a
89:59 - capital letter in fact all of the data
90:02 - types in swift start off with the
90:04 - capital letter so we should follow the
90:06 - same convention always start off your
90:08 - class names with a capital letter and
90:11 - that's different from what we've been
90:12 - doing with variables and constants and
90:15 - functions
90:17 - okay then i have these two curly
90:19 - brackets like that
90:21 - what do i put inside of my blog post
90:24 - class
90:25 - well
90:26 - why don't we put
90:29 - this stuff right here i'm just going to
90:32 - cut it
90:33 - and i'm going to paste it inside here
90:36 - and then i'm going to delete this right
90:38 - here
90:40 - and i am going to
90:42 - delete this text
90:46 - inside these variables inside my class
90:51 - and leave them empty and i'm going to
90:53 - explain why in a second
90:55 - okay so just like that we've defined a
90:57 - class called blog post
90:59 - and this class has three properties
91:02 - now a property is just a variable
91:05 - declaration like this but inside a class
91:08 - it's called a property and you're going
91:10 - to see why in a second why it makes more
91:12 - sense
91:13 - and because
91:14 - um this blog title blog body blog author
91:18 - is inside
91:20 - of blog post it it's kind of redundant
91:22 - to name them like this
91:24 - so i'm just going to name them title
91:27 - body and author like that
91:30 - okay so this
91:31 - this represents our blog post right here
91:35 - now that you've defined what a blog post
91:37 - is let's create an actual blog post
91:39 - because remember this class definition
91:42 - right here this is just
91:44 - a definition of a data type you're
91:46 - defining what a blog post data type is
91:50 - right so that's not an actual
91:53 - blog post just like how this is a string
91:57 - that's not the definition of a string
91:59 - that's an actual string so
92:01 - in order to create an actual blog post
92:05 - we're going to type in the class name
92:07 - followed by two rounded brackets like
92:10 - that and just like that this is a new
92:13 - instance of the blog post type
92:16 - and it's called an object or blog post
92:19 - object
92:21 - so when you define a new class using the
92:23 - class keyword that's what's known as a
92:25 - class definition or just class
92:28 - but when you create actual
92:31 - instances of that class
92:33 - those are called objects
92:36 - you can think of your class definition
92:38 - as a template or a blueprint
92:41 - and you use that template to create
92:43 - actual tangible
92:45 - blog post objects
92:48 - so let's jump back to the playground
92:49 - here this is a very important concept to
92:52 - understand
92:53 - we've defined a class called blog post
92:55 - here it's got these three properties or
92:58 - you can think of them as attributes of a
93:00 - blog post and then down here like this
93:02 - we've created a new blog post object now
93:06 - this blog post object has
93:08 - a title it has a body and has an author
93:11 - but all of it all of them are empty
93:13 - right now so what we're going to do is
93:15 - we're going to assign this blog post
93:17 - object into a constant let's call it my
93:20 - post like that so what we've done here
93:23 - is we've created new blog post objects
93:26 - we've assigned it to my post
93:28 - and now why don't we try setting the
93:30 - title of this blog post and the body and
93:33 - the author
93:34 - what we would do is say my post
93:37 - right that's referring to this new
93:38 - object and then we press dot
93:41 - and that lets us access those properties
93:44 - which we've defined in the class
93:45 - definition
93:47 - set the title
93:48 - to
93:51 - i don't know hello playground i think
93:53 - that's what we had before
93:54 - let's set the author of this one
94:00 - and let's set the
94:02 - body to
94:05 - hello
94:06 - okay just hello
94:08 - now if i print
94:10 - my post dot
94:13 - author
94:15 - i would get my name
94:18 - now let me show you something else we
94:20 - can create a second
94:23 - instance
94:24 - of blog post or a second blog post
94:26 - object and let's call this my
94:30 - second post and we're going to set this
94:33 - to a new blog post object like that
94:36 - and we're going to say my second
94:38 - post.title
94:40 - equals
94:42 - goodbye
94:44 - playground and
94:47 - we can set the author to
94:49 - someone else let's say
94:51 - um
94:53 - john travolta i don't know why that
94:55 - suddenly popped into my head
94:57 - and
94:59 - uh let's just do hello again
95:02 - now
95:03 - this is a second
95:05 - my post object this is
95:08 - different from my post these are
95:10 - completely
95:10 - two
95:11 - different blog post objects
95:15 - both of them contain these three
95:18 - properties which we can set because
95:19 - that's what we've defined here in this
95:21 - class
95:23 - now another very cool thing about
95:26 - classes is that you can put functions in
95:29 - them
95:29 - right you can see how all of the lessons
95:31 - so far are coming together
95:33 - let's create a new property for this
95:35 - first let's say
95:37 - a number of comments equals zero this is
95:41 - the number of comments in the blog post
95:43 - and we're gonna define a new function in
95:45 - this
95:46 - blog post class we're gonna say
95:48 - add comment okay
95:50 - and we're not gonna worry about the
95:52 - comment text just yet
95:54 - let's just define this
95:57 - so notice that in my function definition
96:00 - i have these two curly brackets again
96:02 - inside here this is going to be my
96:04 - function code so inside this function i
96:07 - am just going to increase the number of
96:10 - comments by one this is all stuff that
96:13 - you should have learned already in the
96:14 - previous lessons
96:16 - now okay so now every single blog post
96:19 - object is going to have this function
96:22 - now how do we access it
96:24 - we simply go my
96:28 - post
96:29 - dot you can see now in the autocomplete
96:32 - that there is this function called add
96:35 - comment and it doesn't have any return
96:38 - value it doesn't return anything so the
96:40 - return type is void right there
96:42 - let's call this function okay
96:44 - see what happens so add comment
96:47 - you can't visibly see what happens but
96:49 - let's print
96:50 - my post dot
96:52 - number of comments
96:55 - you can see that it's one
96:57 - okay now let's print
97:00 - my
97:02 - second post
97:03 - dot number of comments
97:05 - what would you expect
97:07 - this to print out
97:12 - it prints out zero
97:14 - why because we haven't called the add
97:17 - comment function on my second post
97:20 - we just did that with the first post
97:23 - each of these blog post objects
97:25 - maintains its own properties
97:28 - changing the properties of one object
97:30 - does not affect the other even though
97:32 - they're cut from the same cloth right
97:34 - they're both types of blog posts they're
97:38 - two independent entities and they
97:40 - maintain their properties separately
97:43 - now there's a lot more to classes but
97:45 - fundamentally i want you to understand
97:48 - what they are
97:49 - so i'm not going to make this video any
97:51 - longer than it needs to be i just wanted
97:53 - to introduce classes to you i hope you
97:56 - can see why classes are a fundamental
97:59 - building block to organize your
98:00 - information so thanks for watching
98:03 - please give this video a thumbs up if it
98:05 - helped you and please subscribe for more
98:08 - hello welcome to learn swift for
98:09 - beginners lesson 10. in this video
98:11 - you're going to learn about inheritance
98:13 - otherwise known as subclassing which
98:15 - allows us to build upon previous classes
98:18 - which we've already defined and it saves
98:21 - us a lot of time and effort and work so
98:23 - that we don't have to keep defining
98:24 - classes that do similar things okay so
98:27 - let's get started and see how this works
98:33 - let me start by doing a small recap of
98:36 - what you've learned in this series so
98:37 - far so you learn about variables and
98:40 - constants to store and keep track of
98:42 - data you also learned about some control
98:44 - flow and conditional statements so that
98:46 - you can express logic and make decisions
98:48 - with your code and then you learn about
98:50 - functions where you can define blocks of
98:53 - code that perform specific tasks as a
98:56 - way of organizing your code into more
98:58 - manageable chunks and then you learn
99:00 - about classes which is
99:03 - further away where you can organize
99:05 - related code and related functions
99:07 - together as well as related variables
99:10 - in the form of properties and then today
99:12 - you're going to learn about inheritance
99:14 - aka subclassing as a way to further
99:17 - organize your code okay so let's take a
99:20 - look at uh inheritance in a playground
99:23 - so i'm going to launch xcode here i'm
99:26 - going to get started with
99:27 - a brand new playground and let's call
99:30 - this
99:32 - inheritance playground
99:35 - okay let's just save it on my desktop
99:37 - there and get rid of this line of code
99:40 - so let's say that the app we're building
99:42 - is kind of like a car simulator or
99:44 - something like that and we need to
99:46 - define a class that represents a car
99:49 - so we're going to start by creating a
99:52 - car class just like that
99:54 - and some of the things that it may have
99:57 - is for example it needs to keep track of
100:01 - a top speed right because different cars
100:03 - may have different
100:05 - ranges for the top speed
100:07 - i'm just going to initialize that to 200
100:10 - so there may be a whole ton of other
100:12 - attributes or properties to do with cars
100:15 - but
100:16 - for demo purposes i only need one so i'm
100:18 - not going to go further than defining
100:20 - top speed there and i want to define a
100:23 - function so
100:24 - a car
100:25 - by definition is a vehicle that can be
100:27 - driven right so i'm going to create a
100:30 - function
100:32 - called drive
100:34 - just like that it doesn't accept any
100:36 - parameters
100:37 - and inside this function it's going to
100:39 - perform all the code that
100:42 - we need to drive a car
100:44 - but you know for this demo i'm just
100:46 - going to print
100:48 - driving at
100:51 - and then i'm going to put in top speed
100:55 - like that so this
100:58 - um this value in this top speed property
101:00 - gets substituted in there and then it
101:02 - prints out driving at whatever this
101:04 - value is 200. so when i call the drive
101:08 - function it's going to print this
101:09 - statement out into the console
101:12 - okay so we've defined our class here
101:14 - that represents a car
101:16 - and in the previous lessons you've
101:18 - learned about how to create a new object
101:20 - right from the car class
101:22 - so
101:23 - why don't we declare a constant
101:27 - called my ride
101:29 - and we're going to create a new car
101:31 - object and assign it into the constant
101:34 - myride
101:36 - just like that we've created a new car
101:37 - object now let me try
101:40 - accessing
101:42 - top speed right you press dot and then
101:44 - you can access the
101:47 - property there so you can see
101:49 - it's running the playground okay you can
101:51 - see 200 there and let's try calling the
101:54 - function myride.drive
101:58 - that
101:59 - and you can see it says driving at 100.
102:02 - okay so now let's say that in this
102:05 - driving simulator app i also have
102:08 - something called a super car or maybe a
102:11 - future car so it's the car of the future
102:15 - for example and it can fly so it's the
102:17 - flying car that it will probably come in
102:20 - the future so we can define another
102:22 - class to represent that and we can call
102:25 - it future car right
102:28 - and again this future car because it is
102:30 - a car still it's going to have a top
102:33 - speed and let's say this top speed is
102:35 - 250 like that
102:36 - and it's also got a function
102:39 - called
102:40 - drive and because you can still drive
102:43 - this car
102:44 - and again it's just going to print you
102:46 - know driving at
102:51 - top speed
102:54 - and also this car can fly
102:57 - so let me define another function that
102:59 - represents
103:01 - you know
103:02 - uh flying the car so
103:05 - flying i'm just gonna call it flying
103:06 - like that
103:07 - uh so here we've defined our car class
103:10 - we've defined a future car right here
103:14 - if i want to create another
103:18 - um let's call it my new ride this is a
103:21 - constant and this time i'm going to
103:23 - create a new future car object like that
103:27 - and then my new ride you can see
103:30 - has fly now right it has drive and it
103:32 - has top speed now let me ask you this
103:34 - question see you can see the
103:36 - similarities between car and future car
103:39 - right they both have the properties of a
103:42 - basic car like a top speed and they both
103:45 - have this drive function which is very
103:47 - very similar in fact it's actually
103:49 - identical so this is pretty redundant
103:52 - right there's a lot of redundancy
103:54 - between these two class definitions so
103:56 - this is where inheritance or subclassing
103:59 - comes into play and is very helpful
104:02 - so what inheritance allows us to do is
104:04 - say that
104:05 - one
104:06 - class inherits from another class
104:10 - and
104:11 - essentially what that means is that
104:13 - if future car inherits from car it's
104:16 - going to inherit its properties and
104:19 - functions so you don't need to redefine
104:21 - them inside future car so let me show
104:23 - you what i mean here
104:25 - let's in future car let's delete this
104:28 - top speed property and let's delete this
104:30 - drive function
104:32 - and what i'm going to do instead is i'm
104:34 - going to make
104:35 - future car inherit from car and the way
104:38 - you do that is after the
104:41 - class and then class name you put
104:45 - colon like that and then you put uh the
104:48 - the class that it inherits from so in
104:51 - this case i would put car
104:53 - so in this sort of relationship we have
104:55 - car at the top
104:57 - um and we have future car at the bottom
104:59 - inheriting
105:01 - all of the properties and the functions
105:03 - from the car class in this case future
105:06 - car would be called a subclass of car
105:09 - and car would be called the superclass
105:12 - of future car
105:13 - and some people might call it the parent
105:15 - class
105:16 - so carr
105:17 - is the super class or the parent class
105:21 - or maybe simply the parent of future car
105:25 - let's go back to our playground and take
105:27 - a look at what this means
105:29 - for our code here
105:31 - so you can see that my ride is still a
105:34 - car object and it still has top speed
105:36 - and it still has drive
105:38 - but take a look at
105:40 - my new ride right it's a future car
105:43 - object
105:44 - and remember inside future car we've
105:46 - just defined fly we haven't defined
105:48 - anything else in here
105:50 - but if i type in my new ride and i
105:53 - press dot here and let autocomplete do
105:56 - its thing you can see that future car
105:59 - actually has a drive function and
106:01 - actually has a top speed
106:03 - so
106:04 - you know if i do top speed
106:06 - you can see it's 200 and if i do drive
106:10 - you can see that now future car or my
106:12 - new ride rather is also driving at 200
106:15 - and furthermore
106:17 - actually my new ride can also fly
106:21 - okay so there's flying
106:23 - now there's actually a problem here
106:25 - because
106:26 - right now my car and my future car
106:29 - they're both driving at the same speed
106:30 - but remember the future cars are faster
106:33 - right initially i wrote the top speed
106:35 - was 250.
106:36 - so in this case what we can do is to do
106:39 - something called overriding
106:41 - and that allows you to take a function
106:43 - or a property from the parent class or
106:46 - the super class
106:48 - and redefine it to
106:50 - essentially that's where the word
106:51 - override comes from so you're overriding
106:54 - the parent's version of that function
106:58 - and you're providing your own
106:59 - implementation or your own version of it
107:02 - now let me just do it here so you can
107:04 - see what it means so
107:06 - we use the override keyword like that
107:09 - and then we have to declare drive
107:12 - exactly as it is in the parent class so
107:15 - uh
107:16 - what we're doing is we're going to say
107:20 - print driving at and we're going to
107:23 - instead say top speed plus
107:27 - 50
107:28 - because this guy goes faster so now you
107:30 - can see that when i call
107:32 - this guy when i call
107:34 - futurecar.drop
107:36 - it doesn't use
107:38 - the parent class's drive function it
107:41 - uses its own overridden definition of
107:44 - what drive is
107:46 - right so that this is the code that it's
107:48 - running here
107:49 - and you can see it's driving at 250.
107:53 - okay so that's an example of overriding
107:55 - to provide
107:56 - your own custom functionality
107:58 - now inside this overridden method there
108:01 - is
108:03 - a way that we can access still
108:06 - the parent functionality and you can do
108:09 - that by using the keyword super so let
108:13 - me show you what i mean
108:15 - inside this overwritten drive function i
108:18 - can actually access the parent class
108:22 - the definition
108:24 - all the functions and properties in
108:26 - there if i type in super dot
108:29 - and then i can access drive so when i do
108:32 - this super refers to the parent class or
108:34 - the super class
108:36 - and this drive function is actually
108:38 - calling this guy up here
108:40 - right so in this case it doesn't make
108:42 - sense you can see in the console
108:44 - when i type in futurecard.drive it
108:47 - you know it calls the original
108:48 - definition of drive and then it prints
108:50 - this
108:51 - you know its own definition of drive so
108:54 - you know in this example it doesn't
108:55 - really make sense but sometimes when
108:57 - you're building your apps
108:58 - what you want to do is add functionality
109:01 - and not override the functionality if
109:04 - that makes sense so you don't want to
109:06 - replace
109:07 - what's
109:09 - in the parent class you just want to add
109:11 - to it and so you can do that if you you
109:14 - know you can call the original
109:15 - definition and then you can add your own
109:17 - code before or after that
109:19 - to provide additional functionality so
109:22 - in this case maybe i'll just change the
109:23 - statement here
109:25 - and
109:29 - boosting at
109:31 - you know 50 or something like that so
109:33 - let's see
109:37 - so now you can see that
109:39 - this is my original car right when i
109:42 - call drive it says driving at 200 and
109:44 - then my future car is driving at 200
109:47 - and it's doing something extra
109:50 - and so that's that's how this overridden
109:52 - function works
109:54 - okay so this is a simplified example of
109:56 - how subclassing works
109:58 - but it's essentially how it works and
110:01 - it's very predominant in the swift
110:03 - programming language as i'm going to
110:04 - show you in the next lesson
110:06 - as you can see inheritance allows you to
110:09 - save a lot of work by taking what's
110:11 - already there
110:12 - and then improving it or providing you
110:15 - know alternate definitions so you don't
110:16 - have to redefine everything all over
110:18 - again but you can build upon the classes
110:21 - that you already have okay thanks for
110:23 - watching please help me continue to
110:25 - create more videos for you by giving
110:27 - this video a thumbs up and subscribing
110:28 - to the channel
110:30 - hello welcome to lesson 11 of the learn
110:33 - swift for beginners series in this
110:35 - lesson i want to introduce to you ui kit
110:38 - it's an apple framework that contains
110:40 - many of the classes we're going to need
110:42 - in order to construct ios apps
110:45 - alright so let's dive in and see what's
110:46 - available in ui kit
110:51 - so like i mentioned in the intro for
110:53 - this video the ui kit framework is
110:57 - essentially a library of classes that
110:59 - apple gives us to build apps with when
111:01 - you think about it there are a lot of
111:03 - common elements to any sort of app for
111:05 - example
111:07 - apps may have views they may have
111:08 - buttons you know all apps are going to
111:10 - have
111:11 - things that you need to present to the
111:13 - user
111:14 - apps are going to need to handle user
111:17 - interaction from the person using the
111:19 - app and so on and so forth so
111:21 - to build that functionality out every
111:23 - single time you're going to build an app
111:25 - is extremely tedious and not to mention
111:28 - complex and complicated so apple has
111:31 - provided ui kit for us to use
111:33 - and it contains a ton of pre-built
111:35 - classes for us to handle all of these
111:37 - common things
111:39 - so here i'm looking at the ui kit
111:41 - reference guide
111:43 - which contains a list of all of the ui
111:45 - kit classes that are available for us to
111:48 - use i'll link to it in the description
111:50 - below the video but if you want to look
111:52 - for it yourself
111:53 - just go into google and type in apple
111:55 - space ui kit don't just type in ui kit
111:58 - because
111:59 - the first few results for that query
112:02 - isn't the apple ui kit so just type in
112:04 - apple space ui kit to find the
112:07 - correct one in the first result
112:10 - it was also essential to learn about
112:13 - inheritance before i told you about ui
112:15 - kit because many of these classes
112:17 - inherit from each other they build off
112:19 - of each other
112:21 - so they don't redefine things and
112:24 - this reference guide used to be kind of
112:27 - organized in a hierarchy so you could
112:29 - see which classes inherited from other
112:32 - classes but since they've
112:34 - changed it and they've made it kind of a
112:36 - listing so you don't get that but i did
112:37 - a google search and i found
112:40 - an image that i'm sure this is not the
112:43 - complete
112:44 - ui kit because this image was from 2012
112:48 - i think
112:49 - yeah you can see here in the url it's
112:51 - from 2012 but it does
112:54 - give you an idea of how the classes are
112:56 - organized so you can see at the very
113:00 - top of this tree if you can imagine
113:04 - this left side being kind of at the top
113:06 - of the tree
113:07 - and this right side being the bottom of
113:09 - it if you take for instance this ui
113:12 - button class which represents a button
113:14 - that the user can tap on the screen ui
113:17 - button inherits from ui control which
113:20 - inherits from ui view
113:23 - and if you just follow this line it
113:24 - inherits from ui responder and finally
113:27 - from ns object
113:29 - so that ui button class is a culmination
113:32 - of all of that functionality you know
113:35 - from that chain and
113:37 - let me just take a little moment to
113:39 - explain
113:40 - it to you so you can see how that ui
113:42 - button class is finally constructed so
113:44 - this ns object class is the root class
113:47 - of everything you can think of it as the
113:48 - big grandfather or granddaddy and what
113:51 - this ns object class does is it provides
113:54 - that basic functionality that allows you
113:56 - to create an object from a class
113:59 - definition so that's something we went
114:01 - through
114:02 - in part one of the classes lesson so
114:04 - this ns object class kind of gives you
114:07 - that functionality and if we take a look
114:09 - at what was the next one down the chain
114:12 - so the ui responder class so this ui
114:15 - responder class inherits from ns object
114:18 - means that it contains that foundation
114:20 - that's going to be needed by you know
114:23 - all of these ui elements or user
114:25 - interface elements
114:27 - okay so the next one down is a ui view
114:30 - so ui view inherits from ui responder
114:32 - which inherits from ns object so ui
114:34 - uiview gets all of that functionality
114:36 - and on top of that
114:38 - the ui view class provides functionality
114:41 - for displaying something onto a view so
114:45 - a ui view is
114:46 - something that you can show to the user
114:49 - so it contains all of that functionality
114:51 - and code and then next in that hierarchy
114:54 - down to the ui button we have ui control
114:56 - now ui control contains all of that
114:59 - functionality before it following this
115:01 - line here
115:03 - and on top of that contains
115:05 - basic code and functionality for a user
115:08 - element control
115:10 - so stuff that is specific for
115:13 - displaying onto a view
115:15 - handling user interaction and events
115:19 - and responding
115:20 - so then we have a specific type of ui
115:23 - control and that is the ui button which
115:26 - is pretty self-explanatory looks and
115:28 - behaves like a button with certain
115:31 - button events
115:32 - so that's just one example of you know
115:35 - the path you can see that there's a
115:37 - whole ton of classes and there's even
115:39 - more now so whenever you go and you know
115:42 - before you go and do something with your
115:44 - app
115:45 - chances are
115:46 - you can probably leverage something from
115:48 - ui kit to build off of rather than
115:51 - building something from scratch
115:53 - so in this video i just wanted to give
115:55 - you guys an introduction to ui kit
115:57 - because we're going to be using a lot of
115:59 - classes from here and every time i do i
116:02 - will try and remember to reference this
116:04 - guide or at least link to it so you can
116:07 - take a look at these classes
116:09 - it's very useful and handy to have at
116:12 - your fingertips
116:13 - because you can click into these classes
116:16 - and then you can find out for this ui
116:19 - button class what sorts of functions it
116:22 - has and properties it has that you can
116:24 - use and leverage and how you can perform
116:26 - specific things with the button or with
116:28 - that class
116:29 - and furthermore i might do another video
116:32 - series where we go over specifically
116:36 - different ui elements
116:39 - because i think that would be useful for
116:40 - beginners to understand how to use for
116:43 - example like a date picker or text field
116:45 - or slider or switch or something like
116:47 - that
116:48 - so that might be a separate series on
116:50 - just ui elements
116:52 - please give this video a thumbs up and
116:54 - subscribe to my channel to help channel
116:56 - grow
116:57 - hello welcome to learn swift for
116:59 - beginners lesson 12. in this video we're
117:02 - going to talk about initializer
117:04 - functions for classes
117:06 - these guys exist to make sure that when
117:08 - you create a new object from your class
117:11 - that that object is ready to be used
117:14 - plus you can customize these initializer
117:16 - functions to set up the object any way
117:18 - you want when you create a new instance
117:20 - of the class
117:22 - let's get started and see what that
117:23 - means
117:26 - [Music]
117:28 - so what i've got here is a playground
117:30 - and i wrote down a basic class here
117:33 - called person
117:35 - and this person class has got two
117:37 - properties right now it's got a name
117:39 - property which i've initialized to an
117:42 - empty string
117:43 - and also it's got an age property which
117:46 - i've set to zero and that is an integer
117:50 - now you learned about classes in a
117:52 - couple of lessons back and you learned
117:54 - about how we create objects from classes
117:57 - right
117:58 - and in order to create a new person
118:00 - object i would say something like
118:03 - var
118:04 - let's just use the variable
118:06 - a
118:07 - equals person
118:09 - like that and we open up and close
118:12 - brackets um beside the class name like
118:15 - that and here i've got a brand new
118:17 - person object
118:18 - and if i go a dot name
118:20 - you can see that it's an empty string
118:22 - and if i go a dot age you can see that
118:25 - it's zero
118:27 - so what's actually happening when you
118:29 - create a new person object here and you
118:31 - write these brackets don't these two
118:33 - brackets look like you're calling a
118:35 - function but actually what's happening
118:37 - is you're calling the initializer
118:39 - function of the person class but you
118:41 - might ask we don't have one defined in
118:43 - here what initializer function are you
118:45 - talking about let me write it out by
118:47 - default it exists
118:49 - and if you don't customize it you don't
118:51 - really have to touch it but that
118:53 - initialization function looks like this
118:55 - it just uses the keyword in it and it
118:57 - has these two brackets and then
119:01 - in here in between this just like a
119:03 - function you can define code
119:05 - in here
119:06 - to set up your object
119:11 - so what's happening
119:12 - when you
119:13 - create a new person object with this
119:16 - line of code here is you're actually
119:18 - calling this init function of the person
119:22 - class and inside here you can actually
119:24 - write code to customize things so for
119:27 - example i can say name equals chris
119:31 - and age equals
119:33 - i
119:34 - believe i'm 33 i think i've lost track
119:37 - but
119:38 - so what's going to happen here when i
119:40 - create a brand new person object is it's
119:44 - going to call this init function and
119:46 - it's going to set these two properties
119:47 - to these two values here so as you can
119:49 - see now
119:51 - name is chris and age is 33 when i
119:54 - create a brand new person object
119:57 - now remember how i said that you can
119:58 - actually customize the init function to
120:01 - set up the object the way you want it to
120:03 - be set up
120:04 - and we can do that simply by adding some
120:07 - parameters into this init function just
120:09 - like we would
120:11 - for any function that we set up so for
120:13 - example i can say
120:16 - i can say n
120:18 - is a string
120:19 - and a is an in
120:22 - so now i have to pass in these two
120:24 - values so let me just erase this part
120:26 - here
120:28 - and i'm going to create a new person
120:30 - object and now you can see that the
120:32 - autocomplete shows me this
120:35 - so for name i pass in chris
120:37 - and for the int i'll pass in 33 but
120:41 - instead of setting this stuff to the
120:43 - hard-coded values now i can set up to
120:45 - what is being passed in here
120:47 - so that's n
120:49 - and that's a
120:50 - right when i'm creating a new person
120:52 - object here i'm passing in these values
120:57 - that go in through this init function
120:58 - and then it sets the properties to those
121:01 - values which i pass in
121:03 - now remember if i don't want these
121:04 - parameter labels all i need to do
121:07 - is go like that and you we learned this
121:10 - through the functions lesson so you can
121:12 - review that
121:14 - if you forget
121:15 - why this is these are the argument
121:17 - labels by putting underscore there we're
121:19 - basically saying we don't need the
121:20 - argument labels
121:23 - now while we're on this topic of
121:25 - specifying these parameters here
121:28 - oftentimes and sometimes i catch myself
121:30 - doing this too is that when we're
121:34 - passing in these parameters the name and
121:36 - age and you're intending to set it to
121:39 - these properties here
121:40 - there's a tendency to name these
121:42 - parameters exactly like
121:45 - the property names because after all you
121:48 - name these property names to be
121:50 - descriptive right of what they represent
121:53 - so in the parameters you might be
121:55 - tempted also to name them the same thing
121:57 - well what happens is you get into this
122:00 - situation where you're trying to set
122:02 - this parameter
122:04 - into this property name but they're both
122:07 - named the same thing so it's a little
122:08 - bit ambiguous so that's where you can
122:11 - use this keyword called self
122:14 - and
122:15 - what how you would use it is you would
122:17 - say self.name
122:19 - equals name so self refers to the object
122:23 - that is being created so you're saying
122:26 - to set the name property
122:28 - of the object to
122:31 - this name parameter so that's how you
122:34 - distinguish between
122:36 - uh if the property name and the
122:38 - parameter name is the same
122:40 - so i would do the same thing here like
122:42 - that
122:43 - so then this age refers to that guy and
122:45 - self.age refers to the actual property
122:48 - there
122:50 - now another thing i want to point out is
122:51 - that
122:52 - i can no longer
122:54 - call
122:55 - person like that
122:58 - because there's no init method like that
123:00 - what i can do is i can actually
123:03 - have multiple
123:05 - initializer methods so if i do this
123:08 - let's let's say this is var b
123:10 - equals this person object well
123:12 - this b
123:14 - dot name
123:15 - is empty and b dot h is zero right
123:18 - because these guys haven't been set
123:20 - after all i'm calling this
123:22 - initializer function here that doesn't
123:24 - set anything
123:26 - whereas this guy this initializer
123:28 - function actually sets the name and age
123:31 - to whatever we pass in
123:33 - now there's one very important thing we
123:34 - haven't talked about yet regarding init
123:37 - functions
123:38 - i mentioned in the intro to this video
123:40 - that the init functions are there to
123:43 - make sure that the object is properly
123:46 - initialized and all of its values are
123:49 - set
123:50 - making the object ready to be used so in
123:52 - this case right here for the person
123:55 - class i've declared two properties and
123:57 - i've already preset them
124:00 - or
124:00 - initialized them to these values here so
124:04 - really the init function has nothing to
124:06 - do even if i did nothing as is
124:09 - in this case right here
124:11 - the object would be ready to use because
124:12 - these properties have values
124:15 - in the next lesson i'll show you how you
124:17 - can sometimes if you need to declare
124:20 - these properties
124:22 - without setting or initializing them to
124:24 - values so it would be something like
124:26 - this
124:28 - you wouldn't write it out like this but
124:29 - just as an example you wouldn't set it
124:31 - to anything so there would be no values
124:33 - in here
124:35 - in that case when you create a new
124:36 - person object
124:38 - the init function would be responsible
124:41 - for making sure that these guys do have
124:43 - a value because if not all of these
124:45 - properties are initialized to values
124:48 - then the object is not considered to be
124:50 - ready to be used so the init function is
124:52 - there to make sure
124:53 - that
124:54 - the values are set
124:56 - and like i said
124:58 - so far you haven't learned about how to
125:00 - declare these
125:01 - properties right here without sending
125:03 - them to values i've always have set them
125:05 - to something but in the next lesson
125:07 - you'll learn how to do that
125:09 - and then we'll dive a little deeper into
125:11 - initializer functions and talk about how
125:13 - there are two types called designated
125:16 - and convenience initializers and so on
125:18 - and so forth okay so thanks for watching
125:20 - remember to give the video a thumbs up
125:22 - and uh subscribe to the channel if you
125:24 - haven't already
125:26 - hello welcome to lesson 13 of the learn
125:29 - swift for beginners series
125:31 - in this video you're going to learn
125:32 - about optionals and it's probably one of
125:34 - the most confusing things for beginners
125:37 - if you've ever looked at swift code and
125:38 - you've noticed exclamation marks or
125:40 - question marks in the code then you've
125:42 - come across optionals so let's get
125:44 - started and find out what it's all about
125:48 - [Music]
125:50 - so right here i have a playground and i
125:52 - have declared a class blog post in fact
125:55 - if you've seen
125:57 - episode nine
125:58 - the first lesson on classes then this is
126:01 - going to look familiar because this is
126:03 - the example that we used for lesson nine
126:06 - when i first talked to you about classes
126:09 - now we declared a couple of properties
126:11 - up here
126:12 - for our blog post class
126:15 - and these properties they represent
126:17 - certain things about what a blog post
126:19 - might have so for example the title the
126:22 - body the author number of comments and
126:25 - you can actually safely ignore this
126:26 - function so i'm just going to remove it
126:28 - because we're going to focus on this
126:29 - stuff up here you'll notice that each
126:32 - time i declare a property right here i
126:34 - immediately initialize it to a value so
126:38 - title body author are all initialized
126:42 - to an empty string right when they're
126:45 - declared and comments is set to zero
126:48 - right
126:48 - right when it's declared
126:51 - now this is all fine and dandy but what
126:54 - if you actually want
126:56 - some of these properties to be empty
126:58 - for example what if i want to tell if
127:02 - the blog post has an author or it
127:05 - doesn't have any author
127:07 - you might argue that well i can just
127:09 - check if author is equal to an empty
127:12 - string and if it's equal to an empty
127:14 - string then maybe there's no author
127:16 - well what if the author isn't actually a
127:19 - string what if it's actually
127:22 - you know we have another class here and
127:24 - we call it
127:25 - person and let's say that
127:27 - there's a name and we'll initialize the
127:29 - empty string but you know okay so in
127:31 - this case
127:33 - person
127:35 - is assigned to author so
127:37 - you know blog post has an as an author
127:41 - because it has this person object so how
127:43 - do we distinguish
127:44 - um there being no author for a blog post
127:47 - well
127:48 - you have to be able to declare an author
127:50 - property and leave it empty because some
127:53 - blog posts may not have an author so the
127:56 - way to do this is if you remember from
127:58 - way back then maybe
128:01 - lesson
128:03 - lesson 2 on data types i think
128:05 - you can actually specify for your
128:07 - variables the specific data type that it
128:10 - can store if you don't specify it
128:12 - basically the data type is inferred from
128:15 - what you assign into it okay so for
128:18 - example if i wanted the title
128:20 - to be able to be empty
128:23 - i would have to declare the type
128:26 - i'd get rid of this equals empty string
128:29 - because we don't want to sign in
128:30 - anything to it right we want to declare
128:32 - this property but leave it empty
128:35 - i would do it like that i would you know
128:37 - do the colon specify the specific type
128:39 - and then i would put question mark and
128:41 - that is an optional right there
128:44 - so
128:45 - when i declare this title is empty
128:48 - and this part basically tells us that
128:52 - the data type of title is string
128:55 - and this question mark
128:57 - attached to the string data type tells
128:59 - us that it could be
129:01 - nil which means nothing or empty it
129:05 - could be nil
129:06 - or it could actually contain a string
129:10 - so contrast this with the body property
129:13 - here this when it is declared is
129:16 - assigned this empty string so it's
129:18 - always going to have a value right
129:20 - whether it's empty string or maybe in
129:22 - the future we assign some text into it
129:25 - it's going to have some text
129:27 - but
129:28 - you know this title
129:30 - property could be empty in fact it is
129:33 - empty right now as we declare it
129:37 - so going back to this example with the
129:39 - author
129:40 - potentially some blog posts may not have
129:43 - an author so we can't just you know
129:46 - initialize the author property to a
129:48 - person object because that would mean
129:50 - all blog posts at least have a person
129:52 - attached to the author right we want to
129:54 - make this property able to be empty
129:57 - right so the way we do that
129:59 - again is we specify the specific data
130:02 - type
130:03 - put the question mark there next to the
130:05 - data type and we get rid of that part
130:07 - because we don't actually want to assign
130:08 - anything to it okay so in this way
130:12 - we have a blog post class
130:14 - which has
130:16 - an optional title property has body
130:18 - which is initialized to
130:20 - an empty string so it at least always
130:22 - has a value
130:23 - uh and it may or may not have a person
130:27 - you know could have nobody assigned as
130:29 - the author or it could actually have a
130:31 - person object assigned as the author and
130:33 - number of comments will always have a
130:35 - value and starting at zero
130:38 - so you're going to want to pay attention
130:39 - now because i'm going to tell you how
130:41 - you should think of these optional
130:43 - properties that we have here and this is
130:46 - sort of metaphor or visual that you can
130:48 - think of
130:49 - that i was taught when i was learning
130:51 - this stuff
130:53 - and that is to think of the title
130:55 - property
130:56 - this optional
130:58 - string it could optionally contain a
131:00 - value or not think of it like a box
131:04 - it's labeled string but you can't see
131:07 - what's inside the box you don't know if
131:08 - there's actually a string object inside
131:12 - or it could just be an empty box
131:14 - it could be an empty gift box if someone
131:17 - if you've been really bad and someone
131:18 - gives you an empty gift for christmas
131:21 - that's never happened to me but if it
131:22 - has to you let me know in the comment
131:24 - section below but anyways you can think
131:27 - of
131:28 - an optional property
131:30 - like a box
131:31 - that may contain the actual object or it
131:35 - may not
131:36 - so how can you find out if there's
131:38 - actually
131:39 - uh the string object inside or not well
131:41 - you have to unwrap that box right you
131:44 - have to unwrap that gift
131:45 - in order to look inside and see and get
131:48 - at the
131:49 - actual object
131:51 - and that's exactly what we have to do in
131:53 - code now with our optional properties so
131:56 - let me let me create a new blog post
131:58 - object here let me say
132:01 - post equals
132:03 - blog post like
132:04 - that and what we're going to do here is
132:08 - we're going to say hey print out
132:12 - post dot body
132:14 - plus
132:16 - i don't know plus hello something like
132:18 - that okay so it basically just prints
132:21 - out hello because body is empty but
132:23 - let's just assign it to something
132:25 - like that
132:27 - so then we have something like hey hello
132:29 - right that totally makes sense because
132:32 - body we've initialized it to hey
132:34 - right
132:35 - when we create
132:37 - uh the blog post object it's already set
132:39 - to hey and then we concatenate hello to
132:41 - it so when we print post dot body plus
132:44 - hello you know you're accessing that
132:46 - property and then you're pending hello
132:48 - anyways that makes sense so
132:50 - we can no longer do that with something
132:53 - like the title
132:54 - right because that's an optional it's
132:57 - it's wrapped up in a gift box and you
132:59 - don't know if it's empty inside or if
133:02 - there's actually a string object inside
133:04 - so you can't blindly use it you have to
133:06 - unwrap that gift box and and check if
133:08 - there's a value or not and then use it
133:10 - so now before we use title we have to
133:13 - check if there's actually a string
133:16 - object or if there's actually a value
133:17 - inside that optional and the way we do
133:19 - that is we do something called optional
133:22 - binding
133:24 - okay so
133:25 - it's kind of like an if statement so you
133:27 - say if
133:28 - but then you use the word let and if you
133:31 - remember
133:32 - using the keyword let is declaring a
133:34 - constant right
133:36 - in fact that's exactly what this is
133:38 - you're declaring a constant here
133:40 - if let
133:42 - actual title
133:44 - equals title
133:47 - and then you open up these curly
133:48 - brackets so
133:50 - what you're doing here is you're testing
133:52 - sorry not title i meant post dot title
133:55 - because this is the
133:56 - optional property here
133:58 - what you're doing here is you're saying
134:00 - that you're testing you're unwrapping
134:03 - this
134:04 - this title property this optional and
134:07 - you're saying if there is
134:10 - a value in there then assign it to this
134:12 - constant called actual title and then
134:15 - inside here um you can use actual title
134:18 - as the value but if there is
134:22 - nothing inside this optional and if you
134:24 - unwrap it and it's empty it's nil
134:27 - then don't execute this code inside so
134:30 - that's why it has an if statement
134:33 - here
134:36 - you're basically testing to see if
134:38 - there's a value inside this optional if
134:40 - there is you assign it to this constant
134:43 - and then you use this constant inside
134:45 - here
134:46 - uh if there isn't then it's just going
134:48 - to skip over this whole if statement so
134:50 - in here we can safely now we can say you
134:53 - know print actual title
134:56 - uh plus
134:58 - um
135:00 - i don't know salute
135:03 - so
135:04 - there is no value
135:06 - in title so it actually skips all this
135:08 - but let let's say for instance we say
135:11 - here post.title equals
135:14 - um yo
135:16 - like that
135:17 - so now you can see when it does this
135:20 - optional binding and it
135:22 - unwraps this title because we have
135:24 - assigned something into it here it finds
135:26 - that hey i unwrapped the optional there
135:29 - is a value i'm going to assign it to
135:31 - actual title so inside this if statement
135:33 - we can use
135:35 - actual title
135:37 - and do this
135:38 - but if i didn't have this line here
135:40 - let's comment this out you can see that
135:42 - it it completely skips this and it
135:44 - doesn't crash
135:46 - or do anything like that because we're
135:48 - safely you know checking if there's a
135:50 - value inside that optional first and
135:52 - then we're using it
135:55 - now there's always
135:56 - different ways of doing things so
136:00 - in the swift programming language
136:01 - there's actually a way to be a cowboy
136:05 - and skip all this if you don't want to
136:06 - check it
136:07 - and you just want to use the value you
136:09 - know you know there's something inside
136:13 - what you can do
136:15 - is you can use
136:18 - you know you're going to not check it
136:20 - you're just going to use it
136:22 - you can
136:24 - be that it would be post dot title
136:26 - and you put this exclamation mark and
136:29 - this is called force unwrapping so what
136:32 - you're telling xcode is you're saying
136:34 - that hey you know i know there's a value
136:36 - in here i don't need to check it i just
136:39 - want to unwrap it
136:41 - right away using this exclamation mark
136:43 - and i want to use whatever is inside of
136:45 - there
136:46 - right in this case it's yo
136:49 - so here we're you know we're accessing
136:52 - post dot title it's an optional property
136:55 - we don't care we're gonna force unwrap
136:57 - that
136:58 - and we're gonna take out that value and
136:59 - use it you know
137:01 - and so if you know there is a value
137:03 - inside you can do that but it gets a
137:05 - little dangerous because for example if
137:08 - there happens to not be a value in there
137:11 - and you're force unwrapping it and
137:13 - you're trying to you know use the value
137:16 - well there's an error because
137:18 - and this is the error you get fatal
137:20 - error unexpectedly
137:22 - right because when you use this
137:24 - exclamation mark you're expecting that
137:26 - there is a value
137:27 - unexpectedly found nil when
137:30 - unwrapping an optional value
137:33 - right that is exactly what i was telling
137:35 - you you're forced unwrapping the title
137:38 - and you're trying to use it but it was
137:40 - actually nil so you actually get a crash
137:42 - and in your career of building apps you
137:44 - probably will see this error
137:47 - unexpectedly found nil so now you know
137:49 - why
137:50 - so the safer way to go would be actually
137:53 - to use optional binding so i'm going to
137:55 - press command z now
137:57 - command z for the americans
138:00 - i'm going to undo
138:01 - undo all right
138:04 - do something like that and this is
138:05 - optional binding so
138:07 - another way
138:08 - where you can test before using is just
138:12 - oops
138:14 - it's just with good old-fashioned if
138:16 - statement and testing if it's nil so you
138:19 - can say something like
138:21 - testing for nil you can say if
138:24 - post dot title
138:26 - is not equal nil
138:29 - then print
138:30 - post dot title and because you have
138:33 - tested it that it's not nil in this if
138:35 - statement you can go ahead and force
138:37 - unwrap that
138:38 - and use it
138:41 - right so that works you can safely
138:44 - use force unwrapping because in this if
138:46 - statement you've just tested that it's
138:47 - not nil
138:49 - okay
138:51 - now the reverse if you want to check
138:53 - that it is nil
138:54 - is post dot title equals equals nil okay
138:57 - it's not equals nil
138:59 - a lot of beginners make this mistake and
139:01 - they use one equal sign but one equal
139:04 - sign is for assignment remember that so
139:06 - if we're going to test for nil you're
139:08 - going to use two equal signs like that
139:10 - and this is like
139:12 - optional
139:14 - contains no value
139:17 - okay
139:18 - optional contains value and in here
139:22 - for optional binding
139:24 - optional
139:26 - contains a value
139:29 - so as with all of the other things we're
139:31 - learning with swift
139:33 - we can go deeper there's additional
139:35 - things to learn about optionals like
139:37 - optional chaining and other ways of
139:39 - using optionals but this is your
139:41 - introduction i wanted
139:43 - to tell you about what the question mark
139:45 - means and what the exclamation mark
139:47 - force unwrapping and how to check an
139:49 - optional before using it
139:51 - i wanted to introduce you to these kind
139:53 - of high level concepts and practically
139:56 - speaking you'll be using them most of
139:58 - the time like this
140:00 - and then in the future we'll touch upon
140:01 - the more complex things about optionals
140:04 - also you might be wondering
140:06 - why why and when you would ever use
140:08 - optionals but let me tell you you
140:10 - definitely will use it when you're
140:12 - building apps and when we do build our
140:14 - apps together you'll know what they are
140:16 - and you'll know
140:17 - how to declare optionals and how to
140:19 - unwrap them and how to check if they're
140:21 - no because you've watched this lesson
140:24 - okay so thanks for watching
140:26 - and please subscribe and thumbs up and
140:28 - share the video with other people you
140:30 - know who want to learn swift as well
140:33 - hello welcome to lesson 14 of the learn
140:36 - swift for beginners series in this video
140:38 - you're going to learn about properties
140:39 - which is something that we have been
140:41 - using already together
140:43 - since the classes lesson but we haven't
140:46 - formally introduced them yet so this
140:48 - video is for that
140:50 - in addition to that i'm going to show
140:52 - you some other cool things you can do
140:54 - with properties that you can't do with
140:55 - variables
140:57 - okay so let's get started
141:01 - [Music]
141:03 - so here i have a playground which
141:05 - defines two classes blog post and person
141:08 - you might recognize this from previous
141:10 - lessons
141:11 - and in both of these classes we've
141:14 - defined some variables here well
141:16 - properties are nothing more than
141:18 - variables that are associated with a
141:21 - class like this
141:23 - so for example in this blog post class i
141:27 - have a title property body author and
141:29 - number of comments and if i create a
141:32 - brand new blog post object from this
141:35 - class let's say
141:37 - let
141:38 - my post equals new blog post like that
141:42 - and then in order to access this title
141:46 - property
141:48 - i would use the dot notation
141:50 - i would say my post dot title and i'm
141:53 - going to assign something to this
141:55 - property and let's just call it title of
141:59 - post like that
142:00 - and in order to retrieve that value from
142:03 - that property i would just
142:06 - use dot notation again
142:08 - and this would return
142:10 - the value inside that property
142:13 - so you can see that property is just
142:16 - like a variable where it stores a value
142:18 - and you can retrieve it but i don't know
142:20 - if i mentioned this before and that is
142:23 - that
142:24 - properties are independent
142:26 - between objects so remember
142:29 - we have defined this blog post class
142:31 - right here and from this class
142:33 - we can create many blog post objects
142:36 - for instance here i've created a blog
142:39 - post object and i've assigned it to my
142:41 - post now let me create a second blog
142:44 - post object
142:45 - i'm going to call this my post
142:48 - 2. and i'm going to create a brand new
142:51 - blog post object from there
142:54 - so i have assigned title of post to the
142:57 - title property of this guy right here
143:00 - right
143:01 - that
143:02 - doesn't affect my new blog post object
143:05 - so
143:06 - i can assign my post to dot title equals
143:12 - another
143:13 - title
143:14 - like that
143:15 - and if i display this title
143:19 - you can see that it shows another title
143:21 - so
143:22 - the
143:23 - properties are really variables that are
143:25 - attached to
143:26 - the blog post objects that i create and
143:29 - although each blog post object has a
143:32 - title property
143:33 - the values that they store are
143:35 - independent of one another
143:38 - okay so the second thing i wanted to
143:39 - point out with properties is that when
143:42 - you're working inside your class so
143:44 - let's say we're working on this blog
143:46 - post class and we create some
143:48 - functions here
143:50 - let's say add comment
143:53 - you know we're going to create a
143:54 - function
143:55 - like that
143:57 - and we're going to create another
143:58 - function maybe called
144:01 - share
144:04 - share article okay these don't really
144:06 - have to do anything i'm just i just need
144:08 - to create two functions for the sake of
144:10 - creating two functions to demonstrate
144:12 - this purpose okay so
144:15 - just disregard what what i'm calling
144:17 - them because they're not really going to
144:18 - do that function
144:21 - okay so what i wanted to point out is
144:23 - that
144:24 - these properties that you define inside
144:26 - the class
144:27 - they can be accessed
144:29 - inside any of the functions inside that
144:32 - class so inside add comment
144:35 - you know i might be performing some code
144:37 - to add a comment
144:39 - and i would be able to access let's say
144:43 - um
144:44 - you know i can print
144:46 - title or something like that right that
144:48 - would access this guy well actually
144:50 - that's an optional so
144:53 - using what we learned let me just force
144:54 - unwrap it
144:57 - but my point is is that i can access
145:00 - these properties here you know or i can
145:02 - print
145:04 - let's say body for example
145:07 - you know and here likewise i can also
145:11 - print body
145:13 - within all of the functions inside this
145:16 - class i can access
145:18 - any of these properties up here and i
145:19 - can set them to from within any of these
145:21 - functions however
145:23 - if you declare a variable inside of a
145:26 - function that is what's called a local
145:29 - variable and the existence of that
145:32 - variable is limited to the scope of that
145:34 - function so what that means in plain
145:36 - english is if i declare a variable here
145:40 - let's say var
145:43 - my comment
145:45 - equals
145:47 - you know some comment like that
145:51 - i would not be able to access this
145:53 - variable
145:54 - inside this function here so if i try to
145:57 - you know print
145:59 - my comment
146:03 - you're going to see it
146:05 - throw an error here
146:07 - saying that
146:09 - my comment was never used oh wait that's
146:12 - regarding this guy right here so this is
146:14 - just an optimization xcode this yellow
146:17 - little triangle means
146:18 - that
146:19 - it's a warning it's not really an error
146:21 - so it's fine xcode is just
146:23 - warning you that you declared this my
146:26 - comment variable and you assigned it
146:27 - something but you never used it so
146:29 - consider
146:31 - consider changing its name to
146:34 - an underscore
146:36 - which
146:38 - which is an optimization but we are
146:40 - going to use it the xcode is just
146:42 - proactive because every time you're
146:44 - typing code it just scans your code and
146:45 - it tries to tell you about these
146:47 - optimizations that you can do okay so
146:49 - that's kind of a side note
146:52 - back to the main point i was trying to
146:53 - make and that is if you look at this
146:55 - error here
146:57 - on use of unresolved identifier my
147:00 - comment that means that xcode doesn't
147:02 - know what you're referring to when you
147:04 - try to print my comment here so even
147:06 - though we declared it here and we
147:08 - assigned it inside this function
147:11 - this variable because you declared it
147:13 - inside here
147:14 - is the scope of this variable
147:17 - or its existence is limited to whatever
147:20 - is
147:21 - inside
147:22 - these two curly brackets you know it's
147:24 - limited to the code inside this function
147:27 - now if i wanted it to be accessible
147:29 - everywhere you know i would
147:32 - create a property
147:34 - and i would use that instead so that's
147:37 - probably something you're going to get
147:38 - used to as you're
147:39 - doing more coding is the scope of where
147:42 - you declare things so this is called the
147:44 - local variable because we're declaring
147:45 - it inside a function and these
147:48 - properties that we declare up here to
147:50 - hold values are accessible
147:52 - inside the whole class
147:54 - so what that means is that let me just
147:57 - delete these two functions for now so
147:59 - what that means is that if you have a
148:01 - function that
148:02 - let's say calculates a result or
148:04 - performs some sort of calculation like
148:07 - for example
148:08 - um
148:09 - add
148:10 - up comment
148:13 - total or comment counts or something
148:15 - like that and the point of this function
148:18 - is to maybe sum up the number of
148:20 - comments that this blog post has
148:23 - and then at the end of the
148:25 - whatever you know you're performing
148:26 - calculations here
148:28 - um do
148:29 - some calculations
148:33 - and come up with as a result
148:35 - arrive at a result
148:38 - now what do you do with that result
148:40 - right
148:41 - um you can either
148:43 - and you learn this in the functions
148:45 - lesson is that you can specify a return
148:48 - value so
148:49 - this um this specifies that when you
148:52 - call add up common counts
148:54 - it's going to return a number for you
148:57 - so now you can say you know return
148:59 - whatever the result is whatever variable
149:02 - it's stored in right you can return it
149:04 - to the caller another thing that you can
149:06 - do to make it
149:08 - accessible later on because remember
149:12 - any variables that you declare inside
149:14 - here are local variables and they live
149:16 - and die
149:17 - inside this function here
149:19 - so if i didn't do the return value route
149:25 - and i arrived at some sort of calculated
149:27 - result and i wanted to save it for use
149:29 - for later on i would probably
149:32 - assign it to a property so i can say
149:35 - number of comments equals
149:37 - whatever result that i arrived at and by
149:40 - doing this when i call this function
149:42 - it's going to do some calculations
149:43 - calculate the result
149:45 - the total number of comments right and
149:46 - it's going to assign it into this
149:48 - property
149:49 - and now
149:51 - i can use the number of comments in
149:53 - other functions or later on
149:56 - if i left it as a local variable
150:00 - it would again when this function
150:02 - finishes that would be lost
150:05 - okay so that's the difference between
150:08 - the lifetime or the scope of property
150:11 - versus local variables
150:14 - and now for the third thing that i want
150:16 - to show you in this lesson is something
150:18 - called computed properties and it's one
150:20 - of those things that makes properties a
150:22 - little more special than just plain old
150:24 - variables here
150:26 - so let me
150:27 - let me get rid of these two here so that
150:29 - we kind of start fresh and we're back to
150:32 - where we started in this lesson
150:35 - you can do what's called a computed
150:37 - property and what that is is it just
150:40 - returns
150:43 - and what that is is it lets you do some
150:46 - calculation and return a result when you
150:48 - call a property so let me demonstrate
150:50 - here so let's say that we have
150:55 - let author equals
150:57 - person
150:58 - right so there is our author and let's
151:00 - set
151:01 - the author's name
151:03 - to
151:04 - chris ching which is my name
151:07 - and now let's create a blog post my post
151:10 - equals blog post
151:13 - okay and
151:15 - now let's assign the author
151:21 - property of the post right let's assign
151:25 - author into it
151:27 - now author right here is
151:30 - this person
151:31 - right this person object that i created
151:35 - and
151:36 - finally let's set the title
151:41 - to let's say
151:44 - learn
151:45 - swift for
151:47 - beginners
151:49 - okay so what do we have here we have an
151:51 - author object which has the name set to
151:53 - chris ching we have a blog post object
151:56 - uh
151:57 - with the author set to this person
152:00 - object that i created and i also set the
152:02 - title to learn swift for beginners
152:04 - now
152:05 - what i wanted to show you is
152:08 - i'm going to create a computed property
152:11 - up here
152:12 - i'm just going to add a comment so that
152:15 - just to make it stand out a little bit
152:18 - so i can say var
152:19 - full title
152:22 - is a string and i'm going to open up a
152:25 - set of curly brackets right
152:28 - uh right after it
152:30 - and what i'm going to say
152:32 - is
152:35 - check if title and author
152:39 - aren't not nil
152:45 - check
152:46 - that title and author are not nil
152:48 - because
152:49 - title is an optional right an author is
152:52 - also an optional and you learned about
152:55 - these in the previous lesson
152:57 - so you know what they mean they could
152:59 - return nil which is nothing right when
153:02 - you unwrap it
153:03 - so i'm going to use an if statement just
153:05 - to check
153:06 - so if
153:07 - title
153:08 - is not equal to nil
153:10 - and
153:12 - and that's the double ampersand which
153:15 - represents an end condition
153:18 - so if title is not nil
153:22 - and author is also not nil both of these
153:25 - conditions have to be true
153:26 - then i'm going to run this code inside
153:29 - then
153:30 - return
153:32 - title and remember because title is
153:35 - an optional
153:37 - string right that means i have to unwrap
153:39 - it to get the value inside and i'm going
153:42 - to use the exclamation mark to force
153:44 - unwrap it that means i'm going to tell
153:46 - xcode i'm just going to unwrap that
153:48 - optional and use whatever is inside
153:50 - whether it's a value or it's or whether
153:52 - it's nil
153:53 - and i know for a fact that it's not nil
153:55 - because i just checked it up here right
153:57 - so i can safely and confidently do this
154:00 - so i'm going to say
154:02 - bye
154:04 - and then plus
154:06 - and i'm going to do the same thing with
154:08 - author i'm just going to force unwrap it
154:10 - and use it
154:11 - okay so let's see what it's saying here
154:15 - cannot be applied to string
154:18 - and person that's right okay so author
154:20 - is a person right so i can't
154:23 - i can't append a person object
154:26 - to the string what i'm meant to do
154:28 - actually
154:29 - is
154:30 - i meant to unwrap the author right to
154:32 - get the person object and then call its
154:35 - name property so that's what i actually
154:37 - wanted to do
154:40 - okay so
154:41 - right here xcode is complaining that
154:43 - missing return in a function expected to
154:46 - return a string
154:47 - so this computed property here when it
154:50 - gets called full title
154:52 - it's supposed to return a string
154:54 - and if title is not nil an author is not
154:57 - nil it is going to return a string
155:00 - but what if one of these things
155:02 - are nil
155:03 - either or
155:05 - um in that case i'm just going to use
155:08 - the else branch here
155:09 - i'm just going to return
155:12 - let's say
155:14 - let's do another check else if title is
155:17 - not nil
155:19 - oops not equals nil
155:23 - then return just the title
155:26 - oops force and wrap that
155:28 - finally if the title is nil then i don't
155:32 - know what we can do other than
155:34 - return an empty string
155:37 - or let's say no title
155:41 - let's do that okay
155:43 - so this is awesome now this is a
155:45 - computer property and
155:47 - i hope you can see that from this
155:49 - demonstration what that means
155:51 - it's a property where basically you can
155:54 - perform some code you can do some
155:56 - calculation you can combine a bunch of
155:57 - things
155:59 - and return
156:01 - a result return something so
156:04 - if i say
156:06 - down here
156:08 - if i say my post
156:10 - dot
156:11 - full title what do you think it's going
156:13 - to display
156:18 - let me print it out because it's kind of
156:20 - truncated over here
156:22 - let me use the print so it prints down
156:25 - in the console
156:27 - it's learn swift for beginners by chris
156:29 - ching
156:31 - and i didn't have to set that right
156:33 - because this is a computed property this
156:36 - full title property is calculated by
156:39 - grabbing the title
156:41 - and appending by and then appending the
156:44 - author name
156:45 - and if we didn't have an author so let
156:47 - me just
156:49 - let me just get rid of this line here
156:51 - for setting the author if we didn't have
156:54 - an author it would just print out the
156:55 - title
156:56 - and if i get rid of the title and it
156:59 - doesn't have a title then it's going to
157:01 - print no title and that's all of this
157:03 - logic here in my computed property
157:07 - okay so that's computer properties
157:09 - there's also
157:10 - additional things which we won't cover
157:12 - in this lesson we'll probably do another
157:14 - video on properties and that is getters
157:17 - and setters and property observers but
157:21 - this is a really great start to taking a
157:23 - look at properties so thanks for
157:25 - watching please like the video and
157:27 - please subscribe
157:29 - hello welcome to lesson 15 of the learn
157:32 - swift for beginners series in this video
157:34 - we're going to revisit initializers and
157:37 - i'm going to tell you about designated
157:39 - initializers and convenience
157:41 - initializers okay well let's get started
157:46 - [Music]
157:47 - so right here i'm starting off again
157:50 - with the blog post class and the person
157:52 - class
157:53 - and of these properties here in the blog
157:56 - post class
157:58 - i'm actually going to uninitialize some
158:00 - of these properties so i can demonstrate
158:02 - for you
158:04 - what we need to do in the initializer
158:06 - because i mentioned before that one of
158:07 - the jobs of the initializer is to make
158:10 - sure that all these properties are
158:13 - initialized and ready to go so even if
158:15 - it is an optional that is considered
158:18 - okay
158:20 - when you're declaring your properties
158:21 - inside your class there are basically
158:23 - three different ways of doing it so
158:25 - number one is this one where you
158:28 - declare the property and you initialize
158:30 - it to some sort of value right away so
158:32 - that's this body property right here and
158:34 - this number of comments property is
158:37 - equal to zero
158:38 - the next thing you can do is you can
158:41 - declare a property and set it to
158:42 - optional so you're specifying that it
158:45 - could be nil or it could contain a value
158:47 - but either way
158:49 - you have to unwrap the value and you
158:51 - have to check if it's nil before using
158:53 - it
158:54 - now the third way is probably the most
158:56 - dangerous way and that is using the
158:58 - force unwrap operator
159:00 - so let me show you what that means
159:02 - if i
159:04 - get rid of that question mark and i put
159:06 - an exclamation mark there and let's also
159:08 - do it beside author so what you're
159:10 - saying here is you're saying that title
159:12 - basically is an optional it could be nil
159:15 - or it could contain a value but you're
159:17 - going to leave it unwrapped
159:20 - so when i access the title property down
159:23 - here and i say post.title
159:26 - xcode is not going to
159:28 - have that sort of safe
159:30 - checking or warning us
159:33 - that it could be nil it's not going to
159:34 - provide any of those safety mechanisms
159:36 - and it's just going to let us use it as
159:38 - is
159:39 - so we can assign nil into title as you
159:41 - can see here it's nil
159:44 - and we can use it like a normal property
159:46 - right we don't have to
159:47 - check if it's nil or not or rather it is
159:50 - up to us whether we want to do it or not
159:52 - but however if
159:54 - you know the difference
159:56 - the flip side
159:58 - being that we make this an optional
160:01 - now there are some safety mechanisms in
160:03 - place if i just try to use this as is
160:05 - xcode is going to warn us that hey you
160:07 - know this is an optional you have to
160:10 - check that it's not nil or you have to
160:11 - unwrap it
160:13 - first before you can use it so i might
160:14 - have to say if let
160:17 - you know actual title equals and this is
160:20 - using optional binding so basically
160:22 - we're checking
160:25 - if there's a value inside the optional
160:29 - first
160:30 - you know if something could potentially
160:32 - be nil it's probably safer to use an
160:34 - optional value so that it forces the
160:36 - programmer to actually check things
160:38 - before using it now if you set your
160:40 - properties like
160:43 - that
160:44 - then it could still be nil or could
160:46 - contain a value but you can sort of
160:48 - remove that safety checking that
160:49 - optionals provide
160:51 - so those are three different ways that
160:52 - you can
160:54 - set up your properties
160:56 - what you cannot do however
160:59 - is you can't
161:01 - do something like that where you declare
161:03 - a property
161:05 - you don't set it to anything
161:07 - you don't specify that it's an optional
161:09 - or you don't specify that it's unwrapped
161:12 - and you just leave it like that in that
161:14 - case xcode is going to assume
161:17 - that the initializer is going to set
161:19 - those to some values
161:21 - so let's declare our initializer here
161:25 - like you've learned in the past
161:26 - and inside here you can see that xcode
161:29 - is still showing errors but if i
161:32 - actually initialize these things
161:36 - inside the initializer
161:39 - let's say author is equal to person like
161:41 - that
161:42 - then xcode is going to stop complaining
161:44 - because
161:45 - remember when we create a new blog post
161:47 - like this it's actually calling the
161:49 - initializer so even though these
161:51 - properties right here title and author
161:53 - they're not set to anything they're not
161:55 - optional they're not
161:56 - unwrapped this initializer is going to
161:59 - be called for sure when we create a new
162:01 - blog post object and inside here
162:03 - those properties get
162:05 - set to some value they get initialized
162:07 - and so at the end of the day this blog
162:09 - post object is going to be ready to be
162:12 - used
162:13 - now this initializer right here this is
162:15 - what is called the designated
162:18 - initializer and what that means is that
162:21 - this initializer function is guaranteed
162:24 - to
162:25 - fulfill those obligations of
162:28 - making sure that all of the properties
162:30 - are initialized before use
162:33 - in contrast we can have something that's
162:35 - called a convenience initializer and
162:37 - what that is is you use the convenience
162:40 - keyword followed by your initializer
162:45 - method signature so i might have
162:48 - something like this where inside this
162:50 - initializer i only want to
162:53 - provide a custom title
162:59 - well you might ask if i call this
163:01 - convenience initializer
163:03 - how is
163:04 - author going to get initialized
163:07 - right so what happens is inside the
163:10 - convenience initializer i call the
163:13 - designated
163:15 - initializer using the self keyword like
163:17 - this
163:19 - so now
163:20 - and inside here let's set title equals
163:23 - custom title
163:26 - so now when i declare a new
163:29 - blog post object and let's say i use my
163:31 - convenience initializer like this
163:34 - and i pass in a custom title like this
163:38 - it's calling this
163:41 - convenience initializer
163:43 - but this convenience initializer is also
163:46 - calling the designated one which makes
163:49 - sure that at the end of the day you know
163:52 - the uninitialized properties will be
163:54 - initialized
163:56 - and then after calling
163:58 - that designated initializer then we set
164:01 - title to custom title so whether i call
164:05 - this designated initializer or the
164:07 - convenience initializer
164:10 - the title and the author properties will
164:11 - be guaranteed to be initialized
164:14 - and so the role of the convenience
164:15 - initializer is simply for convenience
164:19 - so that's the difference between a
164:21 - designated initializer versus a
164:23 - convenience initializer
164:26 - hello welcome to learn swift for
164:28 - beginners lesson 16. today you're going
164:30 - to learn about how to manage a
164:32 - collection of data in what's called an
164:34 - array
164:36 - if you're working with many pieces of
164:38 - data it would be hard to manage them
164:40 - with simply constants and variables so
164:43 - let's take a look at how arrays can make
164:44 - our life easier alright let's get
164:47 - started
164:49 - [Music]
164:52 - now arrays are one of three collection
164:54 - types that are available in the swift
164:56 - programming language for us to use and
164:58 - manage our data in this language guide
165:01 - you can see a diagram of this
165:04 - array on the far left side we're going
165:07 - to come back to this diagram in a second
165:09 - but first a definition
165:10 - so you can think of an array as a
165:14 - collection of data that is ordered by
165:17 - indexes
165:18 - now if that doesn't tell you too much
165:19 - let's jump right into a swift playground
165:23 - and i'll show you exactly how beneficial
165:25 - they are and also how to declare them
165:28 - and how to use them
165:29 - so first i'm going to delete this
165:31 - default variable here and we're going to
165:34 - create a couple of
165:35 - variables ourselves so let's say var a
165:38 - equals dog
165:40 - var b equals cat
165:43 - var c
165:44 - equals
165:46 - bird
165:48 - and now let's say i wanted to
165:51 - concatenate or add the word my in front
165:54 - of each of those values there so that i
165:57 - would have my dog my cat and my bird
166:00 - so i would have to do something like
166:01 - this i would have to go a equals
166:04 - my space
166:06 - plus a
166:08 - and this would result in a being my dog
166:12 - because
166:13 - we're adding the word my with space to
166:16 - a and a is dog and then we're
166:19 - reassigning that result into a again
166:22 - thereby overwriting what was there
166:24 - before so now a is actually my dog
166:27 - i would have to repeat this for cat and
166:28 - i'd have to repeat this with bird i
166:31 - can't even use what we learned in the
166:33 - previous lessons in regards to loops to
166:36 - make my life easier i'd have to write
166:38 - this out three times for each of the
166:40 - variables
166:41 - so here's the perfect chance to use an
166:43 - array to organize this collection of
166:45 - data
166:46 - so in order to create an array with the
166:48 - data already in it we're going to open
166:50 - up two angle brackets or square brackets
166:53 - if you'd prefer
166:54 - and inside these two square brackets we
166:58 - put each piece of data separated by a
167:00 - comma
167:01 - so we have dog
167:03 - we have cats
167:05 - and we have bird
167:08 - so just like that we have an array with
167:10 - three pieces of data
167:12 - and if you remember what i said in the
167:14 - definition
167:16 - that arrays are a collection of data
167:18 - organized by indexes what do i mean by
167:21 - that well you can see that there are
167:23 - three pieces of data here so there's
167:25 - three distinct spots you can think of it
167:28 - the left most spot here the beginning
167:31 - is index zero or spot 0 if you'd prefer
167:34 - to think of it like that the next one is
167:36 - index 1 and the last one is index 2. so
167:40 - arrays start at 0
167:43 - and because there are 3 items here the
167:45 - indexes go from 0 1 to 2.
167:49 - and now if i quickly bring up that
167:50 - language guide again you can see in this
167:52 - diagram that in this array there are
167:55 - five items and so the indexes for six
167:58 - eggs is zero index for milk is one and
168:01 - so on until it reaches four even though
168:03 - there are five items because it's zero
168:05 - based okay
168:08 - so let's go back down here
168:10 - so this is great that we have an array
168:12 - here but we need some way to reference
168:14 - that array so actually what we do
168:16 - is we can create a variable let's call
168:19 - it d
168:20 - and we assign this array or this
168:22 - collection of data into the variable d
168:26 - so now if i wanted to access dog for
168:28 - example i would write d
168:30 - and then i would write square brackets
168:33 - like that and in between the square
168:35 - brackets i would put an integer
168:37 - representing the index of the item that
168:39 - i want so let's say i want dog i would
168:41 - put 0.
168:43 - so you can see here i would get dog all
168:45 - right and so we can
168:47 - print that out
168:49 - and that would print
168:50 - dog down here now if i change the index
168:53 - to 1
168:54 - then i would get cat instead
168:57 - now let's do an example where we have
169:00 - something like this
169:02 - just to duplicate that i would say
169:05 - let's say a equals
169:08 - my
169:09 - plus
169:11 - d
169:12 - zero
169:14 - like that i can do b equals
169:17 - my
169:21 - that's my cat
169:22 - and finally
169:27 - i would get my bird but then i mentioned
169:30 - that there was a better way to do it if
169:31 - we leverage what we learned in the
169:33 - previous lesson on loops well we can
169:36 - let's take a look at using for loops and
169:38 - simplifying our work here so remember
169:41 - for loops will loop a piece of code for
169:44 - a specified number of times and you can
169:46 - see here that i'm working with index 0
169:49 - and x1 index 2 so this becomes really
169:52 - easy i can say four remember the next um
169:56 - the next piece of the for loop is a
169:59 - counter
170:00 - so
170:01 - you know it's my variable to hold the
170:03 - current index
170:05 - and then you write in and then you write
170:07 - your range so i can write 0 0
170:10 - sorry i mean 0.2
170:13 - and this is going to loop from 0 to 2.
170:15 - so you i think you can kind of see where
170:18 - i'm getting at what i'm going to do is
170:20 - print
170:23 - my
170:25 - plus d
170:26 - and inside
170:28 - here where i put the index usually i'm
170:30 - going to put counter
170:36 - and you can see here it took the
170:38 - playground a little second but
170:40 - that's exactly what i expected to do
170:42 - here
170:44 - so in the first iteration of this for
170:46 - loop counter is zero right that's the
170:48 - starting range so zero gets passed into
170:51 - here and i would get this printed out
170:53 - this is dog d at index zero right is dog
170:58 - in the next iteration of the loop
170:59 - counter is one and so i'm actually
171:02 - accessing index 1 of my array d
171:06 - so that's why i get cat
171:07 - and then finally it loops again and
171:09 - counters 2 and i would access this bird
171:12 - index here
171:14 - i want to show you another way
171:16 - to use your for loop with an array and
171:19 - that's simply to say
171:22 - for
171:23 - item
171:24 - in d
171:26 - so what this is going to do
171:28 - is it's going to loop through all of the
171:30 - items in the array d
171:33 - and in each iteration of the loop it's
171:36 - going to take that
171:38 - item
171:39 - or that piece of data
171:40 - and it's going to assign it to item so
171:44 - i can simply go like
171:49 - this
171:52 - so you can see that it gets printed out
171:55 - again
171:58 - right in the first iteration item is dog
172:00 - in the second iteration it's cat and the
172:02 - third it's bird so this is a pretty
172:06 - simple way to write it and you can see
172:07 - that it saves a lot of work from doing
172:10 - it kind of one by one like this and one
172:12 - by one like this
172:15 - arrays in conjunction with loops really
172:18 - powerful stuff
172:19 - now with arrays there's other cool
172:21 - things you can do let me just
172:24 - make some space here maybe i should
172:27 - delete this stuff
172:31 - you can actually declare an empty array
172:34 - so it's an array that would contain no
172:36 - data at first and the way you do that is
172:40 - just like storing things into a variable
172:42 - or a constant arrays can only store data
172:45 - of a certain data type that you specify
172:48 - so since it's an empty array how you
172:51 - would do it is you open up two square
172:53 - brackets you put the data type inside
172:56 - the two square brackets and that data
172:59 - type represents the type of the data
173:01 - that the array is going to store so i'm
173:04 - just going to put string here
173:07 - and then you end off with two round
173:10 - brackets like that and just like that
173:12 - now e refers to an array that is empty
173:16 - right now doesn't contain any data with
173:19 - the intention of storing string type
173:21 - data in this array
173:24 - now if you're going to create an empty
173:26 - array like this you better be able to
173:28 - add data to that array right so what
173:32 - makes arrays really useful is that you
173:34 - can add and remove data from that
173:36 - collection so i can add or remove from
173:40 - this collection right here i can add or
173:42 - remove from this collection here let me
173:45 - just show you how to do that there are a
173:46 - couple of different ways
173:49 - i can do something like this d plus
173:52 - equals
173:54 - two angle brackets like that again and
173:55 - let's say i wanted to add
173:58 - mouse
174:00 - and now my d array would contain four
174:03 - items as you can see here dog cat bird
174:05 - and mouse in fact i can even add two
174:08 - pieces of data at once comma
174:11 - and then here
174:12 - i could put owl for example so it would
174:15 - add mouse and owl to that array so now
174:18 - my array has
174:19 - five items from zero to four
174:22 - right starts at zero one two three four
174:26 - make sure that you don't forget that
174:28 - plus sign right here because
174:30 - if you do that
174:32 - then essentially you're creating a brand
174:34 - new array with these two items and
174:35 - you're assigning it to d and you've just
174:37 - lost this data here
174:39 - so plus equal
174:41 - is for adding items
174:45 - now seeing this plus equals you might be
174:47 - tempted
174:48 - to use minus equals
174:52 - to remove items
174:54 - like this
174:55 - but that actually doesn't work
174:57 - unfortunately you can't remove items
174:59 - from the array like that what you have
175:01 - to do is the array actually has
175:03 - functions that you can call on it to
175:05 - remove items so you would say d and then
175:08 - you would press dot on your keyboard or
175:11 - the period key
175:12 - and out pops a list of functions that
175:15 - you can call on this array
175:17 - and using the append function is going
175:19 - to do exactly like this plus equal is
175:22 - it's going to add items into that array
175:24 - but
175:25 - let's look at the remove functions so
175:27 - you have remove all
175:29 - which is going to remove all the items
175:31 - in an array
175:32 - but you can
175:34 - use this one here remove at and you can
175:36 - specify the index of the item you want
175:39 - to remove so if i put 0 like that that's
175:42 - going to remove dog from my array so now
175:46 - it's only going to contain cat bird
175:48 - mouse and owl
175:50 - now what if i don't want to completely
175:52 - remove dog but i just wanted to change
175:55 - that element right there at index 0. so
175:58 - let me get rid of this remove line
176:01 - you saw that you can access items in the
176:04 - array by doing that right putting in the
176:06 - index there well you can actually change
176:09 - the item you can change what is assigned
176:11 - at that index
176:13 - by typing d
176:15 - square brackets put in the index you
176:17 - want to change
176:18 - and using the equal sign to assign
176:21 - something new into that spot
176:24 - so here let's say turtle
176:27 - and that is going to now change your
176:30 - array
176:31 - if i
176:32 - print d
176:34 - oops zero
176:37 - i'm going to get turtle instead of dog
176:39 - because i just changed it up here
176:43 - the last thing i want to point out is
176:45 - that
176:46 - arrays also
176:48 - you can check how many items are in
176:50 - there if you look at the count and
176:53 - that's going to return
176:54 - the number of items in your array that
176:57 - is sometimes useful when you want to use
176:59 - a for loop with a range and you don't
177:01 - know how many items are in the array you
177:03 - can use this
177:05 - array.count and get this number here but
177:08 - just keep in mind that
177:10 - although d has five items right here
177:13 - the index of the last item is actually
177:16 - only four because the first item is zero
177:19 - it goes from zero one two three four
177:21 - right even though there are five items
177:23 - so just keep that in mind if you're
177:24 - going to use this
177:26 - array.count in conjunction with a for
177:29 - loop or something like that
177:31 - okay so that's where we're going to end
177:33 - with arrays as you can see when you type
177:36 - array dot there are a lot of different
177:38 - functions
177:40 - with arrays that you can do
177:43 - what i've covered here in this lesson is
177:45 - enough for you to use arrays and
177:47 - leverage some of the main benefits of
177:49 - arrays
177:50 - as we go on and we're building apps
177:52 - together you're going to be learning new
177:54 - ways to use arrays but for now these are
177:56 - the main things you need to know about
177:58 - arrays in order to start using them
178:01 - if you like this video please give this
178:03 - video a thumbs up please subscribe for
178:05 - more
178:06 - hello welcome to lesson 17 of the learn
178:08 - swift for beginners series
178:11 - in this video we're going to go through
178:12 - another collection type called the
178:14 - dictionary
178:17 - [Music]
178:20 - in the previous lesson we went through
178:22 - the array you can see here on the left
178:24 - hand side and with an array we had a
178:27 - collection of items where the order
178:29 - mattered so you can see in this example
178:31 - here in the swift programming language
178:33 - guide six eggs is in spot number zero
178:37 - whereas bananas is in index four
178:40 - all right well a dictionary on this
178:42 - right hand side here
178:44 - is a collection type where order does
178:47 - not matter
178:48 - so in arrays we retrieve the item by
178:51 - this index here and with the dictionary
178:54 - because order doesn't matter we retrieve
178:56 - these values using a key
178:59 - so each value has an associated key when
179:02 - you put it into the dictionary and you
179:04 - need to pass it that same key and it's
179:07 - going to return for you the value
179:10 - now which collection type you use to
179:13 - organize your data is going to depend on
179:16 - obviously what sort of data you're
179:18 - storing does order matter if it does
179:21 - then the easy answer is to use an array
179:23 - if it doesn't then maybe consider using
179:25 - a dictionary so this is a good example
179:28 - airports have these airport codes right
179:31 - so each airport has an associated key
179:35 - and that's a good point the keys should
179:37 - actually be unique for each
179:39 - value that you put in
179:42 - another great example of when to use a
179:43 - dictionary and this is the example that
179:46 - i'm going to use in this video is
179:48 - license plates so for example each
179:50 - license plate is tied to a car
179:53 - and each license plate is unique so the
179:55 - key can be the license plate and the
179:57 - value can be maybe a description of the
180:00 - car or something like that
180:02 - let's jump into xcode
180:04 - in this new playground that i have here
180:06 - and let me show you how to declare a new
180:08 - dictionary and how to work with it
180:12 - so why don't we declare
180:15 - a variable here and let's call it car db
180:19 - to represent car database
180:21 - and let's looks like my playground has
180:24 - crashed okay
180:26 - and
180:27 - what we're going to do here
180:29 - is to declare a new dictionary so we use
180:33 - the keyword dictionary and followed by
180:36 - that we have these angle brackets where
180:38 - inside we specify the data type of the
180:40 - key followed by the data type of the
180:43 - value so
180:44 - for example let's pull
180:46 - up that example again in here in this
180:49 - dictionary the key would be a string
180:52 - and the value would also be a string and
180:54 - so
180:55 - in between these two angle brackets we
180:57 - would just put string comma string
180:59 - and in order to create a
181:02 - a new dictionary object we would just
181:05 - end off with those two brackets and like
181:07 - that we have an empty dictionary which
181:10 - stores
181:12 - key value pairs
181:13 - and a key value pair is just a fancy
181:15 - name for
181:17 - one of these pairs of data
181:19 - you know a key and a value
181:23 - this dictionary stores key value pairs
181:25 - where the key is a string and the value
181:27 - is a string as well
181:29 - now there is an easier way to write this
181:32 - out without having to write so much
181:35 - let me show you that second way
181:37 - var
181:38 - car db uh let's just say db2 is equal to
181:43 - use the square brackets and then you
181:45 - specify the data type of the key
181:47 - followed by colon
181:49 - and then the data type of the value and
181:51 - again we have these two brackets here to
181:54 - create a new
181:55 - instance of that dictionary or new
181:57 - dictionary object
181:59 - and that's equivalent these two are the
182:01 - same thing
182:03 - doesn't this look very similar to
182:05 - declaring a brand new array don't get
182:07 - confused so for example
182:10 - declaring a new string array would look
182:12 - like
182:15 - this would be my empty array
182:17 - that is expecting to contain string
182:20 - objects and this is an empty dictionary
182:23 - that is expecting to contain key value
182:26 - pairs where the key is string and value
182:29 - a string as well
182:30 - okay so we're going to stick with this
182:33 - sort of declaration here so i'm just
182:35 - going to go ahead delete this array
182:37 - example that was just for demonstration
182:39 - and delete that so now we just have card
182:41 - db is an empty dictionary now how do i
182:44 - assign something into the car database
182:47 - dictionary well i would do car db
182:51 - and then i would use these two
182:53 - square brackets here and i would pass in
182:56 - a key or i would specify a key rather
183:00 - and this key would be a license plate
183:02 - right so
183:03 - you know this is going to be different
183:04 - depending where you are in the world
183:07 - but
183:08 - let's just say it's like that
183:11 - and then you assign the value into
183:14 - the dictionary for that key so this
183:16 - would be let's say
183:18 - a blue
183:20 - ferrari
183:23 - now
183:24 - this value blue ferrari is tied to
183:28 - this key jsd238
183:31 - how do i retrieve the value well
183:34 - it's very simple i just give it the key
183:38 - so if someone were to look up this
183:40 - license plate let's say i print this out
183:45 - like that
183:47 - it would print out blue ferrari but
183:50 - notice that it's wrapped in an optional
183:53 - tag because
183:55 - for example
183:56 - if i passed in a key that doesn't exist
184:00 - right let's pass in like asd 238 then
184:04 - you can see there is no value for that
184:06 - key all right so that's why it returns
184:08 - nil so that's why when you access a
184:11 - dictionary and you pass in a key it
184:13 - returns to an optional
184:16 - whatever data type that your value is
184:19 - so when you pass in a key into your
184:21 - dictionary to retrieve a value
184:23 - just expect that it is an optional and
184:25 - you may need to unwrap it and check if
184:28 - it's nil before using it
184:32 - okay so what if i wanted to
184:35 - let's let's label this so
184:38 - before we continue on this is declaring
184:41 - a new
184:42 - dictionary this is
184:46 - adding
184:48 - key value pairs
184:51 - and this is
184:53 - retrieving
184:55 - data
184:58 - and how do we update a value for a key
185:03 - well it looks exactly like this
185:06 - up here
185:07 - so
185:08 - you specify the key that you want to
185:11 - update the value for
185:15 - and here we can say that this guy now is
185:19 - a red ferrari maybe it got a paint job
185:21 - or something so
185:22 - when you pass in this key from now on
185:24 - you're going to get this new value
185:26 - because this basically overwrote
185:28 - whatever was there
185:30 - before and in order to remove a value
185:35 - remove a key value pair let's say
185:39 - you can do something like this
185:41 - you pass in the key
185:45 - two three eight
185:47 - and you assign it nil and actually that
185:50 - is going to remove the key value pair
185:52 - from your dictionary
185:55 - now i'm going to show you how to iterate
185:58 - over all of the key value pairs in your
186:00 - dictionary so why don't we just add a
186:02 - second key value pair in here
186:05 - so that we have more than one item to
186:07 - display
186:14 - okay and this one can be a green
186:18 - uh lamborghini
186:21 - i think that's how you spell it i don't
186:22 - have one so
186:24 - i don't know for sure
186:27 - and now let's iterate over it
186:30 - wish i had one though
186:32 - iterate over it we use a for loop
186:36 - so we can say for
186:39 - essentially for each key value pair
186:41 - inside the dictionary do something
186:44 - and the way you specify
186:46 - this is you pass in
186:50 - um we use what's basically called a
186:52 - tuple okay and so you can think of a
186:54 - tuple as a set of variables or a bunch
186:58 - of variables so
186:59 - we'll we're going to say
187:01 - license
187:03 - car
187:05 - in
187:07 - car db now the in keyword shouldn't be
187:10 - new to you because you guys learned
187:12 - about the for loop in a previous swift
187:15 - lesson
187:16 - so
187:17 - um basically what should be new to you
187:19 - though is this this is a tuple
187:22 - so for each
187:24 - tuple in
187:26 - this dictionary we can do something
187:29 - what's going to happen is it's going to
187:32 - grab
187:33 - each key value pair and the key is going
187:36 - to be inside license
187:38 - and the value is going to be car like
187:40 - that so
187:42 - now inside this for loop it's going to
187:43 - iterate twice
187:45 - and i'm going to find this key
187:49 - or this license
187:50 - inside this license variable and i'm
187:52 - going to find the car
187:55 - this string here blue ferrari or green
187:57 - lamborghini inside this car variable
188:00 - and it knows
188:02 - even though there's no data type
188:04 - associated with this tuple
188:06 - because my dictionary is
188:08 - string string for the key and the value
188:11 - i'm going to simply print car
188:15 - like that and you can see that
188:19 - hmm it's just it's printing one
188:21 - key value pair here it's printing one
188:23 - car but i have two items
188:26 - and the reason is because we've actually
188:29 - removed
188:30 - a key value pair with this statement
188:32 - here so if i just comment this guy out
188:36 - we have our two cars
188:38 - and
188:39 - it's red ferrari because we changed it
188:41 - up here
188:43 - now i can also print out the license i
188:45 - can say
188:46 - you know license
188:49 - um
188:51 - you know i can say something like
189:00 - car
189:01 - has a
189:02 - license
189:08 - like that
189:12 - has a license
189:16 - so that pretty much wraps up using a
189:18 - dictionary and you're going to find that
189:20 - it will come in handy along side arrays
189:23 - in organizing your data so thanks for
189:25 - watching if you like this video please
189:27 - give it a thumbs up and please share it
189:29 - with anyone you know who's also
189:30 - interested in swift thanks for watching
189:33 - i'll see you guys next time hey did you
189:35 - join my free facebook community yet
189:37 - that's where i hang out along with a ton
189:39 - of other people learning ios just like
189:41 - yourself i also post early access to all
189:44 - of my videos inside that group before i
189:46 - put them on youtube you can also get
189:48 - help with any questions you're having
189:50 - visit the link below click on the join
189:52 - group button and i'll approve your
189:54 - request right away alright so i'll see
189:56 - you in there talk soon

Cleaned transcript:

hello welcome to learn swift programming for beginners lesson one today we're going to talk about variables you're going to learn about what they are how to declare them in swift code and furthermore how to use them alright so let's get started for the rest of the lessons in this series we're going to be working inside this app called xcode xcode is the tool that apple has provided for people to build apps with and inside xcode you're going to be able to create your user interfaces you're going to be able to write the code to express the logic in your app you're going to be able to test your app even so that's why this is where we're going to start in learning swift we're going to be writing the swift code inside the app that you're actually going to use to build apps with in the future so this is where you're going to get xcode just go to your browser go to developer.apple.com xcode or you can launch the mac app store on your computer and search for xcode there if you're on the web page you can see that there's this big blue download button up top now ideally you want to make sure you're using the latest version of xcode and right now as of this recording it's 8 and you can check your version if you go to xcode you can see it here in the welcome screen and you can also go up here to xcode about xcode and you can see what the version is if you're a pc user and you're running windows there may be some additional work you need to do before you can run xcode or you might have to use an alternative solution to build ios apps so check in the description below for pc solutions however if you are a pc user don't let that discourage you for me personally i lost about two to three years of learning ios development simply because i didn't have a mac and i didn't want to get a mac but these days there are alternative solutions you don't actually have to buy a mac computer although i eventually did and now i haven't looked back so anyways now that you have xcode and after you've installed it it's a pretty large install it's pretty big program so i might take some time but after you have it installed and you launch it you're going to see this welcome screen you can see here that when you want to create an app for iphone ipad mac or whatever you're going to go to create a new xcode project and that's going to start a full out project for you to build an app in but here we're going to start a new playground because that's going to allow us to type some code quickly it's going to let us run that code and see the results and we're not committing to building in a project it's simply like a sandbox or a playground as it's named now if you don't see this welcome screen what you can do is just go up to file new and hit playground right there and that's going to start a new playground for you as well or you can just hit this button get started with the playground so that's going to launch this dialogue for you and i'm simply going to leave the default name there platform should be ios and i'm going to save this on my desktop okay so after your playground runs you'll see up here it's doing a whole bunch of stuff launching simulator getting it ready and when it's done all that it's going to say ready you can already start typing in code so there you go it says ready but when it doesn't say ready and it's doing something then chances are whatever you're typing here is not going to show up on the right hand side okay we're going to start with a quick tour of this playground window here so down on the left hand side i have a bunch of line numbers now if you don't have these and you want them they can be useful at times especially when i'm teaching and i need to refer to line numbers you can go to xcode preferences and you can go to text editing and you can simply enable line numbers there now this area right here is where we're going to type our swift code and it's already got a bunch of stuff for us right here which we're going to go through in a second on the right hand side you're going to see a quick preview of the results of what you typed there now a lot of people have trouble with getting output to show up on this right hand side based on what they type here well one of the things that you can check is just in this status bar up here make sure that it says ready and as you're typing something let's say i change something like that you're going to see that it for a brief second there there was a little spinner because it's evaluating your code here um if you want it to show up just make sure it says ready to process your next command and you know you should see that output there alternatively there is a tray down here which you may not notice because it's hidden at first you can hit this button to show the debug area or there's also this little button here to hide the different panels okay but we don't need to see all of that but this debug panel may be useful uh when we start to output things here this is called the console area where we can use swift commands to output things this blue icon here is to execute the code in your playground so if you can't get things to show up on the right here try clicking this button to run your playground right now it's blue because you can see there's a little drop down arrow there if you click and hold it you can see whether you want to switch it to automatically run and that's going to run the playground whenever you type something or you can set it to manually run and you can see now it's grayed out so if i type in some new code it's not actually going to change or display what i have on the right hand side here unless i click the play button to run it so i would recommend to have it set to automatically run so now that you know the main areas of the playground let's get into the meat of today's topic variables and in fact what we have here is a variable in swift a variable holds some data now this data could be a value it could be a reference to an object or it can even point to a function which are things that will get into the future but for now we're going to say that variables hold data now as you can see from this example line of code a variable has a couple of distinct parts let's break it down variables need to be declared before they can be used so this var keyword is used to declare a new variable following the var keyword you have the variable name in this case it's str and really that's it you've declared your new variable so it's got the var keyword and it's got the variable name now taking a look at the whole line what we have on the right hand side there that's some data we did say that variables hold data right and that equal sign in between the variable name and the piece of data well that's an assignment operator so what we're doing in this line of code is we're declaring a variable called str and then we're assigning that piece of data to that variable so now jumping back into the playground let's see the effect of that i can say something like print which is a keyword that is going to print something to that console area down below so if i say print and then in the parentheses i put str you can see that it's printed that hello player s rough line down there on the right hand side we can see a quick preview of that and notice that there's a slash n here and that is basically um just denoting that there's a new line associated with that print statement because uh the next time i print something it's going to be printed on the next line so you don't see that here because a new line is just a carriage return or a white space you can't really see it but in here in this preview it's visualized as that slash n which is just a new line so let's take a look at a couple of different pieces of data that we can store into variables so i'm going to declare another variable here called a and i'm going to assign a number into it so just var one and i'm going to declare another one called b which i'm going to also assign one and i want to show you that you can perform operations between the variables or on the variables so for example i can say print a plus b and you can see here that the result in the console here is 2. now notice that when i'm using the variables in an equation or an operation like this i don't need to use the keyword var because that's only for declaring variables right so this little part is declaring the variable but when you use them afterwards you just need to refer to them by name so let's try some other things print a minus b and print a times b okay so variables hold data and you can perform operations on variables now you can change the data that the variable is holding so i can say something like a equals 2 now right in fact actually let's not do it down here let's do it here after we've assigned one into a let's say a equals two and as a result you can see all of these operations have changed because a is now two so a plus b is three a minus b is one and so on because a is now two now when you assign something into a a different piece of data it replaces what it was holding on to before so a is no longer one it is now two but notice how when we assign a new piece of data into a we don't have to write var again that would cause an error because we've already declared that variable up here and memory in the system has been allocated to it and so we don't need to redeclare it all we need to do is assign new data into a like that now if you're playing around in the playground yourself you may notice something like what if you try to assign something into str like one well you're going to get an error and that's because of something called data types which we're going to learn about in the next lesson but for now just know that for str because we've assigned some text into it up there if we want to reassign some data into it again it has to be text as well so that would be valid furthermore you can also assign a variable as another variable so i can say a equals b down here and in that case a would now equal one again well it was one to begin with so let's say i did that so if a was two and then i said a equals b then now they would both be one now before we move on a quick note on naming variables here we have a variable str and i've named some variables a and b so normally you wouldn't name variables like a and b because they're not descriptive of the data that they hold so if you're going to be using variables just like this in an operation wouldn't it be easier if you knew what a represented and what b represented well you can declare your variables using any sorts of names that you'd want but you can't put some special characters and you can't put spaces in your variable name however the common practice is to use a form of camel case where the first letter is lowercase so let me show you what i mean so i can say var and if i want to describe my variable if it represents let's say the number of apples that i have i would say something like my number of apples like that and you can see that each new letter of each word is capitalized except the first one now you don't want to get too crazy with the length of the variable name as well and you don't want to go too short so short that it doesn't actually mean anything so there's no right or wrong answer or hard limits it's based on you know your own preference and it's more important if you're working in a team with other people that you agree on a certain coding style because you're both going to be working on the same code okay so one more thing i want to talk about are constants so they are like variables except that once you assign something to them you can't reassign data into them so that's really the only difference that and also how they're declared so with variables you use the keyword var but with constants you use the keyword let so i can say let c equals 10 and then down here if i try to reassign something into c like that xcode is not going to like that and it's going to throw an error and it's going to tell you with this red dot down here and if you click it it's going to say cannot assign value to c because it's a let constant now it gives you this little bubble here which you can click and smartly it's going to change let to var because it senses that you want to reassign data into it so you might ask why would i ever want to use a constant if it's more limited in its functionality right if i declare everything as variables then i have all the flexibility i'd want well there are a couple of reasons why you'd want to use constants when it makes sense for one thing it helps the computer work a little more efficiently because it knows exactly what that constant will be and that's not going to change but more importantly it's that for you as a coder you know that that constant isn't going to change because when you're building your app you're going to have a lot of variables and when you have some sort of issue in your app and you don't know why it's happening and you're tracking down your code you're tracing it line by line and you're trying to see if maybe at some point you've accidentally assigned something to a variable and that's throwing off all your calculations or all of your logic it's going to be a nightmare to try to solve and untangle so if something you know it isn't going to change you can assign it to a constant and then when you're looking through your code you can be sure that the issue doesn't lie with that constant because you know it can't change okay so that's it for this lesson on variables i hope you're practicing on your own computer with xcode and check below this video for a link to the cheat sheet and the notes hello welcome to learn swift for beginners lesson two in this lesson we're going to talk about data types did you know in the previous lesson that you're already working with different data types well let me point it out to you let me open up the playground that we were working with in the previous lesson do you remember how we were trying to reassign data into the variable str and i was assigning something like a number into str and i told you that you couldn't do that in fact xcode tells you that you can't do that right here so if we take this little console area and we scroll the scroll bar all the way up to the top the error message actually tells you what's going on cannot assign value of type int to type string well what's an int and what's a string well those are two examples of data types just as the name implies a data type is a classification or a type of data for example a string is a data type that describes pieces of text an int short for integer is a data type for whole numbers negative or positive however there are many more data types than just these two other types of data that you'll commonly be working with are float for floating point numbers or decimal numbers and then there's double for decimal numbers where the decimal portion may be very large and then there's boolean which represents true or false or in other words yes or no these are some of the more common data types that you'll be using and the reason why there are different types of data is because the system stores different types of data differently and so when we go back to the playground and we take a look at this variable that we declared here str and it stores a string the system has allocated this variable to store this piece of text or string in other words and when you try to assign an int into that same variable it doesn't allow you to do that because strings and ins are stored differently now you might be wondering what differentiates a variable that stores a string like this str variable versus a variable that stores a number or an int like this variable a well when you declare a variable you learned in the previous lesson that you use the keyword var and then the name of the variable well optionally you can also put beside the variable name colon followed by the data type and if you declare your variable this way you're basically telling the system that this variable can only store this type of data and if you omit that part and you just simply declare your variable with var and then the variable name then what it's going to do is as soon as you assign a piece of data into that variable it's going to take a look at what type of data that is and assumes that that variable stores that data type so now going back into the playground here it's as if we declared this st our variable like this right and these ones are like this now for instance if i declared this str variable like this then this line would be an error because i'm trying to assign a string into a variable that is of type end so it's not going to like that now let's change this back to a string for a second and go back to this line where there's an error now you understand why this line is in red because we can't assign an in into a string variable well there are ways to convert data from type to type in some cases it makes sense like 29 here this in can be represented as a piece of text simply like that right but conversely this hello playground line right here i can't convert that to an integer because it doesn't make sense that this message could be represented by a number so for example just as a little preview here if i wanted to convert this number or this integer into a string would create a new string and pass in the number like that now i'm not going to go into detail about why this works or what this line is because then you're going to have to learn about classes and initializers and stuff like that but for now in this lesson i want you to understand that there are different data types why there are different data types and how that comes into effect when you're declaring your variables and working with your variables and your data now before we end this lesson off let me just show you a couple of examples of the other data types we talked about so float could be something like that a double usually also looks like this and you're not going to have a really large decimal point unless it's like a result of a calculation that you're doing and let me show you a boolean which is represented as bool so you can set this to the keyword true or false which is going to come in handy for the next lesson that we're going to do on if statements oh and there is a mistake here because i'm redeclaring c did you see that in the previous lesson we talked about how you can't redeclare a variable see we declared var c up here but i forgot that we had tried to declare a constant with the same name down here so this is going to have to be f i'll show you some other types of data conversions here so i can say let's print out let's change c which is a float into an int and what's going to happen is that it just drops the decimal portion of that so if you did print let's convert d which is a double into an integer you can see here that it just chops off the 0.9 and you get 13. now there is a rounding function which we can try out right now like that and then inside the parentheses you can put d which is our double 13.9 and what you're going to get as soon as it finishes processing is 14 like that but notice that the result is also a decimal number see it has a point zero there so what you can do is wrap the result of that rounding inside a pair of brackets like this inside an int and then you'll get 14 without the decimal okay so that does it for data types hello welcome to learn swift for beginners lesson three in this lesson you're going to learn how to express some simple decision making in your swift code using if statements all right let's get started so for this one we're going to start a brand new playground all right so we've done this before let's just call this one the if playground and i'm going to store this on my desktop okay so we're talking about if statements today and this is really exciting because it lets us finally start to make decisions through code and express some sort of logic so for example if i have let's declare a constant here so let a equals 10 for example and i wanted to print this statement only if a is less than let's say 11 which it is right here but um okay actually that is that is not right let's say four and this gives us a reason to use the if statement right okay so print only if a is less than 4 but a is 10 right so we shouldn't be outputting this so what we can use here is an if statement and what it allows us to do is only execute some code if a certain condition is true so in this case we want to print this only if a is less than 4 so we can write an if statement to check if that's true or not before we print that statement so let me show you what that syntax looks like and if you're not familiar with programming terms syntax is simply like the grammatical structure of the language so it's basically the key words to use and how we go about declaring an if statement or writing an if statement so it all starts with the if keyword following the if keyword we have the condition in which we want to check and following the condition we have a set of curly brackets now inside the curly brackets that's where we put the code that we want to run if that condition is true so that's your very basic if statement now going back to our playground let's write it out and print this only if a is less than four so we can do something like that if a and then we can use this operator less than 4 and remember we need to surround the piece of code that we want to execute if the condition is true using a pair of curly brackets like that so you can put the curly bracket on the same line or you can put it on a second line it doesn't matter but what you usually want to do is indent the code that is inside it just so it's easier to read i usually like to put this curly bracket in the same line like that okay so now you can see that in the console there's nothing printed and also to the right here it doesn't give you a preview because this condition is false a is not less than 4 because a is 10. now what if we changed a to 1 and let the playground process okay now it prints this statement and it previews the statement see it's printed down here so that's your very basic if statement now there are other cool things that you can do with an if statement there is an else if clause so for example using the else if clause you can check a second condition if the first condition evaluates to false and the syntax for that looks like that so you have your if condition and then you have your curly brackets and then you use the keywords else if and then you check another condition and you have another set of curly brackets so if you write it this way you're basically checking condition number one you know is that true if it's false now you're checking condition two and if that actually evaluates to true then you're running the code inside that else if block now keep in mind that it kind of goes from top down and if the first condition is actually true then it's going to run that piece of code inside the first set of curly brackets and it's just going to ignore your else if statement so let's take a look at that inside the playground so here i'm going to put else if a is less than let's say 8. then now i'm going to print only if a is less than 8. so now i'm going to change oops not this i'm going to change a back to 10 here and you can see nothing gets printed because first it checks this condition if it's false which it is then it's going to check this condition and it's also false so nothing gets printed now what if i changed a to 7 if i change the a to 7 you can see that it prints the second statement because first it checks this condition that's false so now it checks this condition and that actually turned out to be true so it's going to run this line of code here however if a is 1 then it checks this first one and then it prints this one and then it totally ignores all of the other else if conditions now i said all of the other else if conditions right i say that because you can have as many else if conditions as you want so you can say if als is less than 10 and then you can you can continue adding as many conditions as you want but keep in mind that it checks from top to bottom and as soon as it finds a condition that is true it's going to run that piece of code and ignore all of the other conditions now finally there is a clause that you can run if all of the conditions are true kind of like as a failsafe or as a last resort and that is the else keyword so the way you write this is using the else keyword it's not else if it's just simply else and there's no condition attached because if all of the conditions above it are false then it's going to run the code inside of this else statement here so going back to the playground let me show you what that looks like else print nothing was true and now let me change a back to 10 here so you can see that it prints nothing was true because it's checking the statement it's false this statement is false and sorry i mean conditions and this condition is also false because a is not less than 10 a is actually 10. so this would actually evaluate to false and finally it just gets to this else clause and it's going to print what's in here okay so let me show you a couple of other things that you can do with else statements and let's change these print statements to something that is a lot more recognizable or easy to read let's do that branch one branch two and here oops branch three okay so um first of all let me show you how to do less than or equal to now you see it prints branch three so that's how you do less than or equal to and likewise you can do greater than or equal to and you can see here it still prints branch three now what if you wanted to check if it was exactly 10 you wouldn't do that because remember this equal sign is an assignment operator so what you need to do to compare if a is equal to 10 you use the double equal sign like that you can see here it prints branch three okay so why don't we introduce another constant up here let's say b and let's have that equal to 4. i want to show you that your conditions for your if statements and your different branches can get pretty complicated and you can involve multiple pieces of data in your condition so you can go if a is less than 4 if you want to check b as well and you want to say you know end b is less than 4 that's how you would do it you would use this double ampersand sign and now you're checking two conditions you're checking is a less than four and b less than four and only if both of those are true are you going to get this branch here so let's try that out so if i set b to 1 and a to 1 then both of these conditions here are true so it's going to print branch 1. however if i set b to 10 right it's going to just see it hits this branch 2 now because a is 1 which is less than 8 and it didn't print branch 1 because this was false right even though a is one and this part is true we have to have this part to be true as well because where you're saying is a less than four and b less than four and b is ten right now however you can also do or so you can say is a less than 4 or b less than 4 and in this case either condition can be true and that would cause it to go into this branch so you can see now it is in branch one all right so uh let's say a is ten and b is one so a is not less than four but b is right because you're using this or statement you're saying is a less than four or b less than four and if that's true then we're coming into here now furthermore if you wanted to involve let's do a c you can combine you know multiple conditions like this you can put this into a pair of parentheses like this and you can say you know end c is equal to three so you can see now that you're saying okay is a less than four or b is less than four and also is c equal to 3 then come into branch 1. now these brackets matter a lot because what you're doing is you're saying that this has to be true and this has to be true but for example if i just shift the brackets a little bit and i say something like this then that changes the meaning completely because now i'm saying is a less than 4 or is this part true right so where your brackets are matter a lot and it changes the meaning of what you're checking did you get that in this case i am checking is this true or is this true but the other way around i'm checking is this true and is this true right so the brackets matter finally let me show you another operator that we have here so here we have we're checking is c equal to three well what if we want to ask is c anything but three or is c not equal to three if we only care about the case where c is not three we can say something like this not equals to three and this is going to say is c not equal to three so you can see here that c is three so that's why it completely skips this branch and it ends up being a is equal to 10 and it prints branch 3. now you can use this not operator this exclamation mark here on other things as well so for example here i'm asking is a equal to 10 right and i am uh it's coming in here because a actually is 10 and so it's printing branch 3 but if i surround this like that let me put something else in here is a equal to 10 and b equals to 1 right that is true so that's why i'm still getting branch three but if i put an exclamation mark here like that it basically flips it around so this evaluates the true right a is a 10. this evaluates to true both this whole condition evaluates to true right a is a equal to 10 and b is equals to 1. and then so we get true but then we're adding this guy here it flips that true to a false so that's why this whole condition equates to false okay so that does it for if statements i hope you're trying this out on your own computer in the playground because trust me it's pointless to try to memorize all of the keywords and the syntax for the swift it's much better if you you know only spend 30 minutes instead of trying to memorize things spend 30 minutes in the playground just punching in different numbers like that playing around with the different conditions and expressions and printing out a bunch of stuff in the console in 30 minutes you'll remember a lot more just by doing that than trying to memorize you know how to declare a variable or how to declare an if statement so you know if you can get a mac get xcode open in a playground and then type this code out for yourself and play around with it it's going to do wonders so thanks again for watching and if you like this series so far please give the video a thumbs up please subscribe it really helps hello welcome to the learn swift for beginners series lesson four in this lesson you're going to learn about switch statements and like the if statement it allows you to make decisions with your code alright so let's get started let's start by creating a new playground for this example and i'm going to start labeling these after the lessons here and i should have done this sooner but i want to point out that apple does have a swift programming language guide and in this guide it goes through all of the syntax and the structure and the different concepts of the swift programming language it's what we're doing in these videos and more in fact so if you want something to read you can go ahead and visit this website here i'll have the link below the video but one thing to note is that it may be a little bit complicated for the absolute beginner who doesn't have programming background but give it a try and it's a great compliment to watch with this learn swift series that you're watching in fact as we're going through the different concepts in these videos i'll point out in the guide where they are so for example we're looking at the switch statement today and that resides under control flow and you can see here what the basic syntax is for this switch statement okay so let's jump back into our playground and we can do an example of a switch statement so in here i'm going to basically do the same example or similar example as the one in the guide and i'm going to introduce a new data type called character and it's basically like a string except that it's just a single character like that and with an if statement we can do something like this if some character is you know equals a for example okay like we have right here print is n a and this is going to be true and it's going to print this out and then we're going to have else if and we're going to maybe check another condition if we wanted to you know respond to different cases depending on what letter this variable is right but you can use a switch statement and it looks like this so we start with the switch keyword then you have the value which you're considering in our case that value is in the variable sum character so that's what we would put in there and then you open up a pair of curly brackets inside these curly brackets you have different case labels so you would have case if you wanted to consider the case where the value is an a you would have case a and then you have colon and you would have something to do if it were that case perhaps this would be easier to visualize if we take a look at the playground so let's jump back to the playground here so let me say switch statement right on the value that we're considering so that's some character and you open up a pair of curly brackets like that and then you have your case labels so i have case you know if it's an a and if i want to do something for this case right then you have a colon and in here you would print let's say is an a like that and if there's another case right i would have case b for example and i would say is a b and lastly if none of those cases are true i would have a default case like that and i would say print some fallback so in this switch statement this case was true right so it printed out the statement and it doesn't do the rest and you can have more lines of code in here than just the print statement in all of our examples you know i just wanted to show that it's coming into here this branch but you could execute more code in here now the case where you know character is a b then we would come into here and jump into here now if it's not none of those cases we would have default and it would print that and of course you can have a whole bunch of different case labels it just doesn't have to be the two that we have here the benefit of using a switch statement is that rather than using an if statement and having all of these else if clauses reading this is much more clean and it's a lot easier to read as well so what if you wanted let's say two different cases to run the same piece of code or the same block of code so for example if i change this to say is b or you know a c is a b or c i could do something like this with this case label here i can do that comma and then i can put this other case there so this saves me from having to have another case c and then you know the same code i can put a comma here put the other case here and have either one of these cases use the same block of code so now you can see that it comes into this case here prince is a b or c instead of coming into default so why would you want to use a switch statement over an if statement well if there are a lot of different conditions that you want to check on a certain value rather than using an if statement with a whole ton of else ifs you can use this switch statement which is easier to read and easier to understand you're probably going to use the if statement more than the switch statement but it's still a handy tool to have in your arsenal so i highly recommend that you try this out in your playground so that's it for switch statements this is a short one i hope you enjoyed it please help this channel grow by subscribing and hitting that thumbs up button below the video hello welcome to learn swift for beginners lesson five in today's lesson we're going to talk about loops when you're writing your app there's going to be many times you're going to find yourself needing to repeat pieces of code for instance let's say you're showing five things in your app and you need to turn each of them red so a loop is going to allow you to just write that single line of code to turn something red and you can repeat it five times for each of those five objects and that's going to save you from having to write out that code five times so that's a very simplified example but trust me you're going to use them a lot so let's take a look at how to use them so there are three types of loops we're going to cover today we're going to start with the four in loop as you can see in the swift programming guide here so let's go ahead and start a new playground in our xcode and i'm just going to call this the loop playground and save it on my desktop now a for in loop allows you to repeat a piece of code a certain specified number of times if you have a list of data otherwise known as an array which you're going to learn about in an upcoming lesson you can also use a for in loop to go through each of those pieces of data in that array and execute some sort of code on it so this is perfect for the example we mentioned in the intro about having five objects or five items on the screen and you need to turn each of them red for example so let's start with learning how to use a foreign loop to repeat a piece of code for a specified number of times and when you guys learn about arrays i'll show you how to use a foreign loop to go through each piece of data in that array so as you can see true to its name the keywords to use here are for and in so you start with the keyword for and next you have a variable name now you don't have to declare this variable using the var keyword like you've learned in the previous lessons you can simply have a name for this variable because you're only going to refer to this variable within the for in loop this variable that you specify here is going to keep track of which iteration of the loop is currently running next up you have the keyword in and then you have the lower range followed by dot dot and then the upper range and that last part there after the in keyword is the range which your for loop is going to run in and it's inclusive of those numbers so for example if you have 1.5 it's actually going to run five times and then after that you open a set of curly brackets and inside the set of curly brackets that's where you're gonna put the code that you want to repeat for that number of times so let's jump back to the playground and let's do a quick demo on that for in loop so i have the four keyword here and for my variable i can specify something like index and then i would put in and let's use that same example one to five and then i open up a set of curly brackets and then here i'm simply going to print hello and we're going to see this in the console down here it has printed it five times now part of the reason why you specify a variable name here called index is because you want to use that that number or this variable inside your for loop here so for example i can do something like this where i can say print index and you're going to see that index changes from 1 2 3 4 5 depending on which iteration of the loop it is it keeps track of basically where we're at in this range right here as we're looping through it but again what we've specified here as a counter is only available inside this scope here in between these curly brackets i can't specify you know printing index out here it's not going to recognize it okay so we can't do that and furthermore if you don't need to use index inside your for loop you can very simply place an underscore there so this is perfect for the example that we had initially where we're just printing hello five times we don't really need a counter of any sort we don't need to refer to index we don't care which iteration it's currently at one thing i want to mention which is confusing often for beginners is this idea of scope here for example if i wanted to sum up the numbers from one to five and i wanted to print out the result after the for loop let's say i declare a variable up here and i call it sum and i equate it to zero and then i say something like sum plus equals and actually let's add this index variable back here and i go like this now you haven't seen this plus equals sign yet but this operator basically equates to something like this it takes sum and it adds the index so this is equivalent to writing this it's just kind of like a short form okay so first of all if i declare this variable called sum inside my for loop inside these curly brackets well this variable is only available within that scope within these two curly brackets i can't go out here outside of the for loop after it's run five times and print out the result of sum see you can see that it can't find this variable even though i've declared it in here okay so why don't we move this print statement into the for loop what would you expect to happen in this case well we get one two three four five again and why is it that this sum isn't increasing why isn't it continually adding index to it and you know why aren't i getting the sum of the numbers from 1 to 5 by the last iteration of the loop well what's happening is that in the first iteration of the loop we're declaring sum equals to zero and then we're adding index to sum which is one and then we're printing some so that's why we get one down here in the second iteration of the loop what we're doing is we're declaring sum again we're setting it to zero and we are adding um this time the index is two and we're adding two to zero right and then it's going to print two so that's why you can see the output 2 right there well right now you might point out to me hey chris i thought you said that you can't really declare the same variable you know in the first iteration of the loop we're declaring var sum right and then in the second iteration of the loop we're redeclaring var sum that's that's illegal that's not allowed in fact you might say that you know if i declare var string again up here it's going to throw an error right we can't redeclare the same variable because we've declared this guy up here we can't redeclare it using the var again and i would say that's true except that in each iteration in the loop it's almost as if it doesn't remember what happened in the previous iteration there's no memory or recollection of the previous iteration so each iteration is kind of like a clean slate and it's going to execute this code right here so just to say that again you're right if you're saying that i can't read a clear sum right because if i tried to do that right here xcode would throw an error however inside of a loop in this scope right here each iteration of the loop is like a clean slate okay now if i wanted to actually find out the sum of the numbers from one to five what i would actually do is i would move this declaration up here outside of the loop and then what i would do this way i could move this print statement outside of the loop and what this four in loop will do is simply loop from one to five each time adding index to the sum and now i'm actually keeping track of the sum so you can see that after five iterations of the loop adding the numbers from one to five into sum which started out as zero the result is 15 down here and that's from this print statement okay so i'm going to stop the lesson there while the syntax for the foreign loop is actually pretty simple and and the concept of repeating a piece of code for a certain number of time is pretty simple i want to give you some breathing room to digest what we talked about in regards to the variable scope so i would recommend that you try declaring and creating this loop on your own computer try declaring the variables inside the loop and outside the loop and see where you can access them and use them and where you cannot it's really going to help and aid you in your learning hello welcome to learn swift for beginners lesson six in this video i'd like to introduce you to two more types of loops and that is the while loop and the repeat while loop and these two loops lets you execute some code until some condition is met so that's different from the foreign loop where it repeated a certain number of times okay let's do it for this lesson we're going to create a brand new playground and i'm just going to call this the loop 2 playground okay so let's cover the while loop first take a look at this slide and let's go through how to declare a while loop so the keyword here is while followed by that you have some sort of condition and it's very similar to an if statement so the while loop is going to repeat that chunk of code as long as the condition is true but as soon as that condition becomes false it's not going to repeat the code anymore after your condition you have a set of curly brackets and inside of the curly brackets that's where you have the code that you want to repeat so let's do a quick example back in our playground so i'm just going to declare a variable here i'm going to call this let's say counter and i am going to set this counter to 10 and then i would like to print hello let's use five instead so it doesn't print that many times and i would like to print hello as long as the counter is um above zero let's say so i would say something like while counter is greater than zero i would i would do this print right here however this is going to keep repeating as you can see because counter is always five so inside my while loop i'm going to computer is dying okay as you can see it eventually overflows and crashes okay so what i'm doing here is i am decrementing counter by one for each iteration of the loop so as you saw when i didn't have this line of code it just kept printing hello many many times because this condition would always be would always be false there was nothing changing the counter variable from five to zero so i'm just going to warn you about that if you're going to try this on your own computer you know if you have a slower computer it might it might take a lot longer for you to get out of that out of that loop so you can write this statement first make sure you have a statement that is decrementing your counter so again this minus equals is the equivalent of writing something like this counter equals counter minus one so you're just taking whatever value counter is you're minusing one and you're setting that as a new value for counter as you can see here it's what you would expect right you get hello five times now let me point something out to you right here uh what if counter was let's say negative five you can see here that nothing gets printed out because this loop is going to see if this condition is false or true before executing the code right so it evaluates the condition and then it decides whether or not it should run this and repeat it now the second type of loop the repeat while loop is very similar to the while loop except that it checks the condition after looping once so it checks the condition down here let's take a look at the syntax so you start with the keyword repeat and then you have a set of curly brackets and inside the set of curly brackets you place the code you want to loop or repeat and then after the ending curly bracket you have a while keyword and you then you have the condition so the syntax of this repeat while loop is very intuitive actually it's basically saying repeat this piece of code while this condition is true okay so let's go back to the playground and let's do an example here so i am going to use the same example okay let's print hello here and we're going to have the same thing counter equals counter minus 1 and we're going to say repeat this chunk of code while counter is greater than zero so as you can see it's pretty much the same loop or same condition rather right while counter is greater than zero and that's the same thing i have up here for this while loop and let's just print something else here so we can differentiate it and you can see the repeat while loop actually prints it out once and then it checks the condition and it realizes oh i shouldn't repeat this chunk of code because this is false right whereas this while loop it checks the condition first and it realizes this condition is not true and it won't print at all so that's that's the main difference between the two types of loops both types of loops will repeat a chunk of code until a certain condition is false except that the while loop checks first and the repeat while loop checks the condition after repeating once hello welcome to learn swift for beginners lesson seven in this lesson you're going to learn about functions how to use them what they are and this is a critical part of the swift programming language if you want to build apps with it so let's get started so here i've got a brand new xcode playground where we're going to take a look at what functions are and how to use them how to define one how to call one if you don't know how to start a new playground just go back to lesson one of this learn swift series okay let's start with what a function is at its very core a function simply allows you to take a chunk of code give it a function name and then whenever you call that function name it's going to execute that chunk of code now that may seem simple but over the course of the next couple of videos you're going to see just how complex and powerful functions can be functions are really useful because it allows us to break down and group our code into smaller chunks and we can organize them so that each function or each chunk of code has a specific task and when you want to do that specific task then you just call that function so let's see how a function is defined in swift code and then we'll jump into some examples in our playground so here we have the syntax for our basic definition of a function now it can get more complex than this because there are a lot more features of functions that we can use but we're going to explore those in the next couple of videos for this example here is your kind of basic definition of a function you start with the func keyword that's func followed by the function name now this function name is what you're going to use to call the function now right after the function name you have two parentheses or two rounded brackets in this basic definition there is nothing in between these two brackets no spaces nothing in the next two videos you're going to see what those brackets are used for but for now those brackets are just there as part of the definition there's nothing in between them and then you're going to have a set of curly brackets and as you would expect in between the curly brackets you would put the code for the function so whenever you call the function name that code in between those curly brackets that code is going to be executed all right let's jump into the playground and do some examples i'm going to declare a function that is going to add two numbers together and it's going to print the result to the console so i'm going to start by using the func keyword to declare a function and now i have to have a function name so i'm going to say add to numbers that's my function name and you'll notice that i'm using the same camel case as i do for declaring variables where i start with a lowercase letter of the first word and the following words uses a capital letter then i have my two rounded brackets like that followed by a set of curly brackets like that and sometimes when you type in this first curly bracket or the opening bracket and then you press enter xcode will automatically add this ending curly bracket for you okay so in between the two curly brackets i am going to say let a equals one let b equals two and i am going to uh let's see equals a plus b okay and then finally we're going to print the result of c so you can see here that nothing actually happens because this function hasn't been called this code is sitting here if we had written this code instead of putting it into a function so let me just delete this for now like that and this is what we've been doing so far before we learned about functions we would just declare these constants here and then print c and you would see all of the stuff in the output now i'm just going to undo those two deletions so to wrap this code inside of a function now you can see nothing gets output until i actually call the function to execute this code right here so how do we call a function so in order to call a function you just have to write the function name followed by the two rounded brackets now because we don't have anything inside these two rounded brackets that's all we have to do but as you're going to learn in a couple of videos later if we have something in between these brackets the calling the function would require a little more work but for this basic function we can invoke that function simply by writing its name so add two numbers as you can see here autocomplete even suggests it so all i have to do is highlight that line press enter and what happens now we get three output into our console because by calling that function it just ran the code down here and i can call this again as many times as i'd like and anywhere i'd like one benefit is that if you need to execute a chunk of code several times this is a big savings rather than writing this code out multiple times i just put it inside a function give it a name and now i can invoke that piece of code whenever i call this function name like this so it helps you reuse code especially if that chunk of code is going to be used multiple times in your app you don't want to write out the same chunk of code multiple times in and around your app because it makes it really hard to debug for example if you've got an issue with this chunk of code and imagine if you had it repeated several times in your app in order to fix it you'd have to fix it in every single one of those places but if i have this chunk of code inside this function i would only have to troubleshoot and debug this piece of code once here and as soon as i change this let's say i change this a to a two and let's say that fixed my code and you can see here wherever i call add two numbers the code is updated so i only need to update and change the code in one place whereas if i wrote this chunk of code out in multiple places in my app i would have to change it in all of those places another benefit i mentioned is that it lets you group this chunk of code that performs a specific task into a function that describes what that chunk of code does so it helps you organize your code so there is one more thing i want to mention about functions and that is about scope so same thing we learned about inside of loops in terms of defining variables applies here as well so let me give you an example of what i'm saying so let's say i get rid of those two function calls and we simply have this function here we have these three constants c is obviously four right and inside this function i'm printing c so outside of my function let's say i want to print c well that is actually going to throw an error that doesn't work why because the constants and variables that you declare inside a function can only be used in the function in between these two curly brackets and likewise if i declared another function really quick quickly so inside this function i also cannot access the constants that i declared here so if i declared a constant like that d equals one i can't say you know uh let e equals c minus d or something like that um inside this function it's not going to recognize what c is right here so let's get rid of this first okay so there you can see the error it doesn't know what c is because c is defined inside add two numbers and so it only recognizes c within this scope a b and c in fact so inside here inside this function i'm free to declare a again because it only applies within these brackets like that so i can have a minus d and let's end off by printing e okay so the main takeaways for this lesson right here you've learned about what functions are and why they're beneficial you've learned how to define a simple function you've learned how to call that function so you can execute the code inside of that function and furthermore you learned about the scope inside of a function and just to remind you about that it's that whatever you declare inside of the curly brackets of a function is only recognized and can be used inside of those curly brackets in the next video we're going to build upon what we learned here in this lesson and you're going to learn how to make functions even more powerful so thanks for watching if you liked the video please give it a thumbs up it helps this video get seen by more people and subscribe for more hello welcome to learn swift for beginners lesson 8. in the previous lesson you learned about functions how to declare them and how to call them in this lesson you're going to learn how to use them in an even more powerful way by having your functions accept data and also return data to you when you call them all right let's see how that's done so here i have a fresh playground if you forget how to open up a new playground just go back to lesson one of this series and you can see how now there's one thing i want to mention before we move on that i forgot to mention in the previous video and that is that sometimes i may accidentally say method and when i say method i actually mean function now i noticed that a lot of other swift teachers also do this and the reason for this is because for many swift educators like myself swift isn't our first programming language and in many of the programming languages out there there is some concept of a function and sometimes they're called functions sometimes they're called methods and sometimes even other things so a lot of the educators out there when they're teaching sometimes they're going to slip up and they're going to say method instead so i just want to put it out there if you hear me say method uh just know that sometimes i use function and method interchangeably okay so we're going to start by just redeclaring that function that we had in the previous lesson and i want to redeclare it just for extra practice for you guys so i think it was something like um add to numbers like this and it was let a equals one let b equals one and let's see equals a plus b and then we're going to print c just like that now in the previous lesson i mentioned that functions are great for kind of organizing your little bits of code into um pieces of code that perform one task so in this case um this function would add the two numbers together and then it would print out that sum in the console but what if i wanted the function to just add the two numbers but don't print it out i just want the result so in fact functions have something called a return value and it's exactly how it sounds when you execute the function it returns a value to you so let's take a look at what the syntax is for specifying that a function returns a value so everything remains the same as our basic function definition but after the two rounded brackets you have an arrow that arrow is just comprised of a hyphen and a greater than sign and followed by that you have the data type of the value that this function should return so now that you specified that this function returns a value you have to use the return keyword inside of that function to actually return a value of that same data type that you specified so now let's go back to our playground and see how this applies to the function that we have there so let's say that for this function i don't want to print out the sum instead i wanted to return the sum to me i would then erase this print statement first of all after the rounded brackets i would put hyphen greater than sign and then i would put int specifying that this function should return an int data type now xcode immediately throws an error here because it notices that i don't have the return keyword i'm not returning an integer value like i said i would so what i would have to do actually to fix this is use the return keyword and i'm going to return c because that's the sum of a and b so now when i call add two numbers like that it actually returns c now let me show you something here so when i type that autocomplete it shows you the return value right there it tells me that add two numbers actually returns an integer like that so what i would do essentially is i would probably declare a constant and let's call it sum and i would say equals add two numbers what's happening here is that i'm calling this function add two numbers and this function is returning c as in the sum of one plus one and i'm assigning that value into this constant called sum so now if i print sum like that i would get 2. so this constant sum it stores the returned value from my function here so one more thing i can do up here instead of declaring this constant c equals a plus b and then returning c i could actually get rid of this constant and i could just return a plus b like that and that would actually take a and b add them together and then return it so that's return values for functions and this is really powerful because now you can write a function that does something and returns the result to you so your function is kind of like a little worker or a piece of code that does a specific task and then returns you back the result now there's another cool thing that you can do with functions and that's called parameters see this function by itself add two numbers it's always just going to add one and one together and return two to me but what if i wanted this piece of code to be reusable for any type of numbers i want to specify which two numbers i want to add together so essentially what it is is when i declare this function i can specify in between these two rounded brackets see i mentioned in the previous video that we would use this in between these two rounded brackets we can specify that this function needs some input parameters in order to execute so let's say that i'm going to declare this function and say that when you call this function you need to give me two numbers as inputs now when i call the function here i would have to specify two numbers in between these rounded brackets okay so before we actually do it let's go take a look at what the syntax looks like for declaring these input parameters so this syntax right here shows you what the function definition would look like for a single parameter now we're going to get to multiple parameters but this is an example of a single parameter function declaration so in between the two rounded brackets you have an argument label okay i'll explain to you in a second what that is and then you have a parameter name followed by a colon and then followed by the data type of the parameter you're accepting now let's talk about the parameter name colon data type part first so obviously the colon data type part of that specifies what sort of parameter you're going to be passing into the function and the parameter name is going to be the name of that parameter you use within the function so if i wanted to take that input and i wanted to add it to something and i wanted to reference that value that was passed in i would use the parameter name okay inside the function now the argument label for that parameter is what is going to be shown when you call that function i know it's a little bit confusing right now but let's jump into an example so it makes more sense all right so back to the playground here let's implement one parameter inside our add to numbers function here so i'm not going to use any descriptive names right now because i want to show you how the argument label and the parameter name plays out so i'm going to say add two numbers argument label is let's just say arg and then the parameter i'm just going to say para okay and then colon int so this function now accepts a parameter that is type of int and then xcode detects that now this function call is incorrect because we have no function that doesn't accept parameters so one cool thing you can do is just erase that and go add two numbers you can see that autocomplete now recognizes that we have a parameter so let's double click that and you can see here is the argument label let's pass in the number here let's pass in let's pass in 2 like that so by specifying arg there as the argument label for the parameter when i call the function i'm going to have this label here if i wanted to use this number that i passed in remember you have to use the parameter name that's for inside the function so i would reference the value that's passed in using the parameter name like that so essentially what i would get here is because i'm passing in 2 and i'm referencing i'm setting a as 2 right that's our parameter that just got passed in it would be two plus one so that's what is stored in the sum and when i'm printing some that's what i expect to get three okay that is helpful but it's not complete we want to be able to pass in both numbers so that we can specify which two numbers to add together let's take a look at the syntax for multiple parameters so the syntax for multiple parameters is very easy in the parameter list that is that's stuff between the rounded brackets you would just put a comma after the first parameter and then essentially repeat the same thing for the second parameter you'd have an argument label followed by space followed by a parameter name colon and then the data type now you want to use different argument labels and different parameter names obviously so that you'd be able to tell it apart now let's jump back to the playground and add our second parameter so what i would do in between these rounded brackets in this parameter list is i would just put comma and then i would put my second argument label my second parameter name followed by the data type which is another int now again xcode is going to throw this error here let's use autocomplete again add two numbers you can see here it's been updated to accept two arguments so argument just arg and arg2 so let's pass in two and two now we have to modify our code a bit right now i'm still getting three and that's because inside this function code i'm not using the parameter two yet we can change that like that so now a gets set to parameter i mean para and b gets set to para 2 and then i'm returning a plus b so now i actually get four in here so one thing we can do with this function is actually we don't need to declare a equals para and b equals pair two that doesn't really do anything so we can get rid of these two constants here and we can simply return para plus para2 like that straight off the bat now our function is pretty simple so at this point you might be wondering why is it so confusing that i'm using argument labels here in the function call and then we're using parameter names inside the function code well what you can do is you can actually not specify argument labels like that and just have the parameter names and what it'll do is it's going to use the parameter name both as the argument label and the parameter name so now this is wrong you can see xcode here has an error let's use autocomplete to see what the new function looks like the new function call and you can see here that now the argument labels are the parameter names so we can also change our parameter names at this point you probably don't want to use para and para2 for your own function so we can say you know number one number two if we have these as our parameter names then you know this changes as well number one number two and then our function call would also change like that okay now you might be wondering why why use argument labels at all like what are they for well using argument labels you can make your function calls a little more like natural english so let me show you an example you can do something like this add two numbers so there's my first argument label and number two like that so let's take a look at what our new function call would look like so when i'm calling a function add two numbers using two and two right you can see how that reads more like natural english and it makes intuitive sense what the parameters are going to be used for meanwhile inside our um our function here if my parameter names were using right or and it doesn't make much sense right um you know if i didn't use if i used these as the parameter names like that these would be terrible parameter names because if my function is really long this doesn't tell me anything this doesn't tell me anything it doesn't mean anything to me while this function call still makes a lot of sense when you call it in terms of natural english but in in the actual code in here and add two numbers you know adding using an n doesn't really make sense so if you use the combination of argument labels and parameter names that make sense um you have this function call that is like natural english that makes sense and you also have meaningful parameter names that you can use inside of your function okay so i want to show you one more thing if you don't want to use these argument labels at all what you can do is replace your argument labels with an underscore like that or you can replace one or you can replace both so let me show you what that looks like so i'm going to replace both the argument labels with just underscore let's take a look at what that looks like now so you can see now that i just pass in 2 and 2 like that no parameter names no labels no arguments no nothing it's just you pass in the input parameters like this and you these are your parameter names so that's what you're going to be using inside of your function okay so just to recap in this lesson you learned about return values you learned about the return keyword and you learned about input parameters and how to specify them what argument labels are what parameter names are and also how to omit argument labels altogether i hope you enjoyed this lesson if you did please give the video a thumbs up and please subscribe for more hello welcome to learn swift for beginners lesson nine in this video you're going to be introduced to classes which is an absolutely critical part of the swift programming language if you're going to be using it to build apps i'll tell you all about it let's get started so i'm going to start off with a hypothetical example so let's say you have something like a blog post which you would like to represent we might have something like a variable here for blog title right blog title can be hello playground i don't know what kind of article that would be but we would have another variable for the blog body and this is the you know text of the article or the blog post and then we might have something like blog author which in this case let's just put my name here so you can see here this is the data for one blog post now let's say i had two blog posts what what would i do in this case i might have another set of variables down here and of course i can't have the same variable names so let's just append two to these these variable names and let's say this is i don't know this article is goodbye playground okay now this is what i have for two blog articles now what if i had 10 what if i had a 100 how many variables would i have then it it'd be a ton right it'd be a mess there needs to be a better way to represent a blog post to kind of group these variables together and there is in fact that's what a class is you know how you learned about the different data types back in lesson two you learned about the string data type you learned about the int data type float double boolean all of those are data types to represent different types of data right well with classes you can define your own custom data type so what we're going to do here is we're going to create our custom data type called blog post for example you can do that with classes let's take a look at the syntax for declaring a new class so first of all you have the class keyword next you have the name of the class and this is going to be the name of your data type then you follow by two curly brackets and inside those two curly brackets is your class definition let's take a look at this back in our playground so for example up here let's create and define our class so first i would use the class keyword and then i would create a name of the data type or the name of the class in this case let's put blog post and notice that this time i'm starting off with a capital letter in fact all of the data types in swift start off with the capital letter so we should follow the same convention always start off your class names with a capital letter and that's different from what we've been doing with variables and constants and functions okay then i have these two curly brackets like that what do i put inside of my blog post class well why don't we put this stuff right here i'm just going to cut it and i'm going to paste it inside here and then i'm going to delete this right here and i am going to delete this text inside these variables inside my class and leave them empty and i'm going to explain why in a second okay so just like that we've defined a class called blog post and this class has three properties now a property is just a variable declaration like this but inside a class it's called a property and you're going to see why in a second why it makes more sense and because um this blog title blog body blog author is inside of blog post it it's kind of redundant to name them like this so i'm just going to name them title body and author like that okay so this this represents our blog post right here now that you've defined what a blog post is let's create an actual blog post because remember this class definition right here this is just a definition of a data type you're defining what a blog post data type is right so that's not an actual blog post just like how this is a string that's not the definition of a string that's an actual string so in order to create an actual blog post we're going to type in the class name followed by two rounded brackets like that and just like that this is a new instance of the blog post type and it's called an object or blog post object so when you define a new class using the class keyword that's what's known as a class definition or just class but when you create actual instances of that class those are called objects you can think of your class definition as a template or a blueprint and you use that template to create actual tangible blog post objects so let's jump back to the playground here this is a very important concept to understand we've defined a class called blog post here it's got these three properties or you can think of them as attributes of a blog post and then down here like this we've created a new blog post object now this blog post object has a title it has a body and has an author but all of it all of them are empty right now so what we're going to do is we're going to assign this blog post object into a constant let's call it my post like that so what we've done here is we've created new blog post objects we've assigned it to my post and now why don't we try setting the title of this blog post and the body and the author what we would do is say my post right that's referring to this new object and then we press dot and that lets us access those properties which we've defined in the class definition set the title to i don't know hello playground i think that's what we had before let's set the author of this one and let's set the body to hello okay just hello now if i print my post dot author i would get my name now let me show you something else we can create a second instance of blog post or a second blog post object and let's call this my second post and we're going to set this to a new blog post object like that and we're going to say my second post.title equals goodbye playground and we can set the author to someone else let's say um john travolta i don't know why that suddenly popped into my head and uh let's just do hello again now this is a second my post object this is different from my post these are completely two different blog post objects both of them contain these three properties which we can set because that's what we've defined here in this class now another very cool thing about classes is that you can put functions in them right you can see how all of the lessons so far are coming together let's create a new property for this first let's say a number of comments equals zero this is the number of comments in the blog post and we're gonna define a new function in this blog post class we're gonna say add comment okay and we're not gonna worry about the comment text just yet let's just define this so notice that in my function definition i have these two curly brackets again inside here this is going to be my function code so inside this function i am just going to increase the number of comments by one this is all stuff that you should have learned already in the previous lessons now okay so now every single blog post object is going to have this function now how do we access it we simply go my post dot you can see now in the autocomplete that there is this function called add comment and it doesn't have any return value it doesn't return anything so the return type is void right there let's call this function okay see what happens so add comment you can't visibly see what happens but let's print my post dot number of comments you can see that it's one okay now let's print my second post dot number of comments what would you expect this to print out it prints out zero why because we haven't called the add comment function on my second post we just did that with the first post each of these blog post objects maintains its own properties changing the properties of one object does not affect the other even though they're cut from the same cloth right they're both types of blog posts they're two independent entities and they maintain their properties separately now there's a lot more to classes but fundamentally i want you to understand what they are so i'm not going to make this video any longer than it needs to be i just wanted to introduce classes to you i hope you can see why classes are a fundamental building block to organize your information so thanks for watching please give this video a thumbs up if it helped you and please subscribe for more hello welcome to learn swift for beginners lesson 10. in this video you're going to learn about inheritance otherwise known as subclassing which allows us to build upon previous classes which we've already defined and it saves us a lot of time and effort and work so that we don't have to keep defining classes that do similar things okay so let's get started and see how this works let me start by doing a small recap of what you've learned in this series so far so you learn about variables and constants to store and keep track of data you also learned about some control flow and conditional statements so that you can express logic and make decisions with your code and then you learn about functions where you can define blocks of code that perform specific tasks as a way of organizing your code into more manageable chunks and then you learn about classes which is further away where you can organize related code and related functions together as well as related variables in the form of properties and then today you're going to learn about inheritance aka subclassing as a way to further organize your code okay so let's take a look at uh inheritance in a playground so i'm going to launch xcode here i'm going to get started with a brand new playground and let's call this inheritance playground okay let's just save it on my desktop there and get rid of this line of code so let's say that the app we're building is kind of like a car simulator or something like that and we need to define a class that represents a car so we're going to start by creating a car class just like that and some of the things that it may have is for example it needs to keep track of a top speed right because different cars may have different ranges for the top speed i'm just going to initialize that to 200 so there may be a whole ton of other attributes or properties to do with cars but for demo purposes i only need one so i'm not going to go further than defining top speed there and i want to define a function so a car by definition is a vehicle that can be driven right so i'm going to create a function called drive just like that it doesn't accept any parameters and inside this function it's going to perform all the code that we need to drive a car but you know for this demo i'm just going to print driving at and then i'm going to put in top speed like that so this um this value in this top speed property gets substituted in there and then it prints out driving at whatever this value is 200. so when i call the drive function it's going to print this statement out into the console okay so we've defined our class here that represents a car and in the previous lessons you've learned about how to create a new object right from the car class so why don't we declare a constant called my ride and we're going to create a new car object and assign it into the constant myride just like that we've created a new car object now let me try accessing top speed right you press dot and then you can access the property there so you can see it's running the playground okay you can see 200 there and let's try calling the function myride.drive that and you can see it says driving at 100. okay so now let's say that in this driving simulator app i also have something called a super car or maybe a future car so it's the car of the future for example and it can fly so it's the flying car that it will probably come in the future so we can define another class to represent that and we can call it future car right and again this future car because it is a car still it's going to have a top speed and let's say this top speed is 250 like that and it's also got a function called drive and because you can still drive this car and again it's just going to print you know driving at top speed and also this car can fly so let me define another function that represents you know uh flying the car so flying i'm just gonna call it flying like that uh so here we've defined our car class we've defined a future car right here if i want to create another um let's call it my new ride this is a constant and this time i'm going to create a new future car object like that and then my new ride you can see has fly now right it has drive and it has top speed now let me ask you this question see you can see the similarities between car and future car right they both have the properties of a basic car like a top speed and they both have this drive function which is very very similar in fact it's actually identical so this is pretty redundant right there's a lot of redundancy between these two class definitions so this is where inheritance or subclassing comes into play and is very helpful so what inheritance allows us to do is say that one class inherits from another class and essentially what that means is that if future car inherits from car it's going to inherit its properties and functions so you don't need to redefine them inside future car so let me show you what i mean here let's in future car let's delete this top speed property and let's delete this drive function and what i'm going to do instead is i'm going to make future car inherit from car and the way you do that is after the class and then class name you put colon like that and then you put uh the the class that it inherits from so in this case i would put car so in this sort of relationship we have car at the top um and we have future car at the bottom inheriting all of the properties and the functions from the car class in this case future car would be called a subclass of car and car would be called the superclass of future car and some people might call it the parent class so carr is the super class or the parent class or maybe simply the parent of future car let's go back to our playground and take a look at what this means for our code here so you can see that my ride is still a car object and it still has top speed and it still has drive but take a look at my new ride right it's a future car object and remember inside future car we've just defined fly we haven't defined anything else in here but if i type in my new ride and i press dot here and let autocomplete do its thing you can see that future car actually has a drive function and actually has a top speed so you know if i do top speed you can see it's 200 and if i do drive you can see that now future car or my new ride rather is also driving at 200 and furthermore actually my new ride can also fly okay so there's flying now there's actually a problem here because right now my car and my future car they're both driving at the same speed but remember the future cars are faster right initially i wrote the top speed was 250. so in this case what we can do is to do something called overriding and that allows you to take a function or a property from the parent class or the super class and redefine it to essentially that's where the word override comes from so you're overriding the parent's version of that function and you're providing your own implementation or your own version of it now let me just do it here so you can see what it means so we use the override keyword like that and then we have to declare drive exactly as it is in the parent class so uh what we're doing is we're going to say print driving at and we're going to instead say top speed plus 50 because this guy goes faster so now you can see that when i call this guy when i call futurecar.drop it doesn't use the parent class's drive function it uses its own overridden definition of what drive is right so that this is the code that it's running here and you can see it's driving at 250. okay so that's an example of overriding to provide your own custom functionality now inside this overridden method there is a way that we can access still the parent functionality and you can do that by using the keyword super so let me show you what i mean inside this overwritten drive function i can actually access the parent class the definition all the functions and properties in there if i type in super dot and then i can access drive so when i do this super refers to the parent class or the super class and this drive function is actually calling this guy up here right so in this case it doesn't make sense you can see in the console when i type in futurecard.drive it you know it calls the original definition of drive and then it prints this you know its own definition of drive so you know in this example it doesn't really make sense but sometimes when you're building your apps what you want to do is add functionality and not override the functionality if that makes sense so you don't want to replace what's in the parent class you just want to add to it and so you can do that if you you know you can call the original definition and then you can add your own code before or after that to provide additional functionality so in this case maybe i'll just change the statement here and boosting at you know 50 or something like that so let's see so now you can see that this is my original car right when i call drive it says driving at 200 and then my future car is driving at 200 and it's doing something extra and so that's that's how this overridden function works okay so this is a simplified example of how subclassing works but it's essentially how it works and it's very predominant in the swift programming language as i'm going to show you in the next lesson as you can see inheritance allows you to save a lot of work by taking what's already there and then improving it or providing you know alternate definitions so you don't have to redefine everything all over again but you can build upon the classes that you already have okay thanks for watching please help me continue to create more videos for you by giving this video a thumbs up and subscribing to the channel hello welcome to lesson 11 of the learn swift for beginners series in this lesson i want to introduce to you ui kit it's an apple framework that contains many of the classes we're going to need in order to construct ios apps alright so let's dive in and see what's available in ui kit so like i mentioned in the intro for this video the ui kit framework is essentially a library of classes that apple gives us to build apps with when you think about it there are a lot of common elements to any sort of app for example apps may have views they may have buttons you know all apps are going to have things that you need to present to the user apps are going to need to handle user interaction from the person using the app and so on and so forth so to build that functionality out every single time you're going to build an app is extremely tedious and not to mention complex and complicated so apple has provided ui kit for us to use and it contains a ton of prebuilt classes for us to handle all of these common things so here i'm looking at the ui kit reference guide which contains a list of all of the ui kit classes that are available for us to use i'll link to it in the description below the video but if you want to look for it yourself just go into google and type in apple space ui kit don't just type in ui kit because the first few results for that query isn't the apple ui kit so just type in apple space ui kit to find the correct one in the first result it was also essential to learn about inheritance before i told you about ui kit because many of these classes inherit from each other they build off of each other so they don't redefine things and this reference guide used to be kind of organized in a hierarchy so you could see which classes inherited from other classes but since they've changed it and they've made it kind of a listing so you don't get that but i did a google search and i found an image that i'm sure this is not the complete ui kit because this image was from 2012 i think yeah you can see here in the url it's from 2012 but it does give you an idea of how the classes are organized so you can see at the very top of this tree if you can imagine this left side being kind of at the top of the tree and this right side being the bottom of it if you take for instance this ui button class which represents a button that the user can tap on the screen ui button inherits from ui control which inherits from ui view and if you just follow this line it inherits from ui responder and finally from ns object so that ui button class is a culmination of all of that functionality you know from that chain and let me just take a little moment to explain it to you so you can see how that ui button class is finally constructed so this ns object class is the root class of everything you can think of it as the big grandfather or granddaddy and what this ns object class does is it provides that basic functionality that allows you to create an object from a class definition so that's something we went through in part one of the classes lesson so this ns object class kind of gives you that functionality and if we take a look at what was the next one down the chain so the ui responder class so this ui responder class inherits from ns object means that it contains that foundation that's going to be needed by you know all of these ui elements or user interface elements okay so the next one down is a ui view so ui view inherits from ui responder which inherits from ns object so ui uiview gets all of that functionality and on top of that the ui view class provides functionality for displaying something onto a view so a ui view is something that you can show to the user so it contains all of that functionality and code and then next in that hierarchy down to the ui button we have ui control now ui control contains all of that functionality before it following this line here and on top of that contains basic code and functionality for a user element control so stuff that is specific for displaying onto a view handling user interaction and events and responding so then we have a specific type of ui control and that is the ui button which is pretty selfexplanatory looks and behaves like a button with certain button events so that's just one example of you know the path you can see that there's a whole ton of classes and there's even more now so whenever you go and you know before you go and do something with your app chances are you can probably leverage something from ui kit to build off of rather than building something from scratch so in this video i just wanted to give you guys an introduction to ui kit because we're going to be using a lot of classes from here and every time i do i will try and remember to reference this guide or at least link to it so you can take a look at these classes it's very useful and handy to have at your fingertips because you can click into these classes and then you can find out for this ui button class what sorts of functions it has and properties it has that you can use and leverage and how you can perform specific things with the button or with that class and furthermore i might do another video series where we go over specifically different ui elements because i think that would be useful for beginners to understand how to use for example like a date picker or text field or slider or switch or something like that so that might be a separate series on just ui elements please give this video a thumbs up and subscribe to my channel to help channel grow hello welcome to learn swift for beginners lesson 12. in this video we're going to talk about initializer functions for classes these guys exist to make sure that when you create a new object from your class that that object is ready to be used plus you can customize these initializer functions to set up the object any way you want when you create a new instance of the class let's get started and see what that means so what i've got here is a playground and i wrote down a basic class here called person and this person class has got two properties right now it's got a name property which i've initialized to an empty string and also it's got an age property which i've set to zero and that is an integer now you learned about classes in a couple of lessons back and you learned about how we create objects from classes right and in order to create a new person object i would say something like var let's just use the variable a equals person like that and we open up and close brackets um beside the class name like that and here i've got a brand new person object and if i go a dot name you can see that it's an empty string and if i go a dot age you can see that it's zero so what's actually happening when you create a new person object here and you write these brackets don't these two brackets look like you're calling a function but actually what's happening is you're calling the initializer function of the person class but you might ask we don't have one defined in here what initializer function are you talking about let me write it out by default it exists and if you don't customize it you don't really have to touch it but that initialization function looks like this it just uses the keyword in it and it has these two brackets and then in here in between this just like a function you can define code in here to set up your object so what's happening when you create a new person object with this line of code here is you're actually calling this init function of the person class and inside here you can actually write code to customize things so for example i can say name equals chris and age equals i believe i'm 33 i think i've lost track but so what's going to happen here when i create a brand new person object is it's going to call this init function and it's going to set these two properties to these two values here so as you can see now name is chris and age is 33 when i create a brand new person object now remember how i said that you can actually customize the init function to set up the object the way you want it to be set up and we can do that simply by adding some parameters into this init function just like we would for any function that we set up so for example i can say i can say n is a string and a is an in so now i have to pass in these two values so let me just erase this part here and i'm going to create a new person object and now you can see that the autocomplete shows me this so for name i pass in chris and for the int i'll pass in 33 but instead of setting this stuff to the hardcoded values now i can set up to what is being passed in here so that's n and that's a right when i'm creating a new person object here i'm passing in these values that go in through this init function and then it sets the properties to those values which i pass in now remember if i don't want these parameter labels all i need to do is go like that and you we learned this through the functions lesson so you can review that if you forget why this is these are the argument labels by putting underscore there we're basically saying we don't need the argument labels now while we're on this topic of specifying these parameters here oftentimes and sometimes i catch myself doing this too is that when we're passing in these parameters the name and age and you're intending to set it to these properties here there's a tendency to name these parameters exactly like the property names because after all you name these property names to be descriptive right of what they represent so in the parameters you might be tempted also to name them the same thing well what happens is you get into this situation where you're trying to set this parameter into this property name but they're both named the same thing so it's a little bit ambiguous so that's where you can use this keyword called self and what how you would use it is you would say self.name equals name so self refers to the object that is being created so you're saying to set the name property of the object to this name parameter so that's how you distinguish between uh if the property name and the parameter name is the same so i would do the same thing here like that so then this age refers to that guy and self.age refers to the actual property there now another thing i want to point out is that i can no longer call person like that because there's no init method like that what i can do is i can actually have multiple initializer methods so if i do this let's let's say this is var b equals this person object well this b dot name is empty and b dot h is zero right because these guys haven't been set after all i'm calling this initializer function here that doesn't set anything whereas this guy this initializer function actually sets the name and age to whatever we pass in now there's one very important thing we haven't talked about yet regarding init functions i mentioned in the intro to this video that the init functions are there to make sure that the object is properly initialized and all of its values are set making the object ready to be used so in this case right here for the person class i've declared two properties and i've already preset them or initialized them to these values here so really the init function has nothing to do even if i did nothing as is in this case right here the object would be ready to use because these properties have values in the next lesson i'll show you how you can sometimes if you need to declare these properties without setting or initializing them to values so it would be something like this you wouldn't write it out like this but just as an example you wouldn't set it to anything so there would be no values in here in that case when you create a new person object the init function would be responsible for making sure that these guys do have a value because if not all of these properties are initialized to values then the object is not considered to be ready to be used so the init function is there to make sure that the values are set and like i said so far you haven't learned about how to declare these properties right here without sending them to values i've always have set them to something but in the next lesson you'll learn how to do that and then we'll dive a little deeper into initializer functions and talk about how there are two types called designated and convenience initializers and so on and so forth okay so thanks for watching remember to give the video a thumbs up and uh subscribe to the channel if you haven't already hello welcome to lesson 13 of the learn swift for beginners series in this video you're going to learn about optionals and it's probably one of the most confusing things for beginners if you've ever looked at swift code and you've noticed exclamation marks or question marks in the code then you've come across optionals so let's get started and find out what it's all about so right here i have a playground and i have declared a class blog post in fact if you've seen episode nine the first lesson on classes then this is going to look familiar because this is the example that we used for lesson nine when i first talked to you about classes now we declared a couple of properties up here for our blog post class and these properties they represent certain things about what a blog post might have so for example the title the body the author number of comments and you can actually safely ignore this function so i'm just going to remove it because we're going to focus on this stuff up here you'll notice that each time i declare a property right here i immediately initialize it to a value so title body author are all initialized to an empty string right when they're declared and comments is set to zero right right when it's declared now this is all fine and dandy but what if you actually want some of these properties to be empty for example what if i want to tell if the blog post has an author or it doesn't have any author you might argue that well i can just check if author is equal to an empty string and if it's equal to an empty string then maybe there's no author well what if the author isn't actually a string what if it's actually you know we have another class here and we call it person and let's say that there's a name and we'll initialize the empty string but you know okay so in this case person is assigned to author so you know blog post has an as an author because it has this person object so how do we distinguish um there being no author for a blog post well you have to be able to declare an author property and leave it empty because some blog posts may not have an author so the way to do this is if you remember from way back then maybe lesson lesson 2 on data types i think you can actually specify for your variables the specific data type that it can store if you don't specify it basically the data type is inferred from what you assign into it okay so for example if i wanted the title to be able to be empty i would have to declare the type i'd get rid of this equals empty string because we don't want to sign in anything to it right we want to declare this property but leave it empty i would do it like that i would you know do the colon specify the specific type and then i would put question mark and that is an optional right there so when i declare this title is empty and this part basically tells us that the data type of title is string and this question mark attached to the string data type tells us that it could be nil which means nothing or empty it could be nil or it could actually contain a string so contrast this with the body property here this when it is declared is assigned this empty string so it's always going to have a value right whether it's empty string or maybe in the future we assign some text into it it's going to have some text but you know this title property could be empty in fact it is empty right now as we declare it so going back to this example with the author potentially some blog posts may not have an author so we can't just you know initialize the author property to a person object because that would mean all blog posts at least have a person attached to the author right we want to make this property able to be empty right so the way we do that again is we specify the specific data type put the question mark there next to the data type and we get rid of that part because we don't actually want to assign anything to it okay so in this way we have a blog post class which has an optional title property has body which is initialized to an empty string so it at least always has a value uh and it may or may not have a person you know could have nobody assigned as the author or it could actually have a person object assigned as the author and number of comments will always have a value and starting at zero so you're going to want to pay attention now because i'm going to tell you how you should think of these optional properties that we have here and this is sort of metaphor or visual that you can think of that i was taught when i was learning this stuff and that is to think of the title property this optional string it could optionally contain a value or not think of it like a box it's labeled string but you can't see what's inside the box you don't know if there's actually a string object inside or it could just be an empty box it could be an empty gift box if someone if you've been really bad and someone gives you an empty gift for christmas that's never happened to me but if it has to you let me know in the comment section below but anyways you can think of an optional property like a box that may contain the actual object or it may not so how can you find out if there's actually uh the string object inside or not well you have to unwrap that box right you have to unwrap that gift in order to look inside and see and get at the actual object and that's exactly what we have to do in code now with our optional properties so let me let me create a new blog post object here let me say post equals blog post like that and what we're going to do here is we're going to say hey print out post dot body plus i don't know plus hello something like that okay so it basically just prints out hello because body is empty but let's just assign it to something like that so then we have something like hey hello right that totally makes sense because body we've initialized it to hey right when we create uh the blog post object it's already set to hey and then we concatenate hello to it so when we print post dot body plus hello you know you're accessing that property and then you're pending hello anyways that makes sense so we can no longer do that with something like the title right because that's an optional it's it's wrapped up in a gift box and you don't know if it's empty inside or if there's actually a string object inside so you can't blindly use it you have to unwrap that gift box and and check if there's a value or not and then use it so now before we use title we have to check if there's actually a string object or if there's actually a value inside that optional and the way we do that is we do something called optional binding okay so it's kind of like an if statement so you say if but then you use the word let and if you remember using the keyword let is declaring a constant right in fact that's exactly what this is you're declaring a constant here if let actual title equals title and then you open up these curly brackets so what you're doing here is you're testing sorry not title i meant post dot title because this is the optional property here what you're doing here is you're saying that you're testing you're unwrapping this this title property this optional and you're saying if there is a value in there then assign it to this constant called actual title and then inside here um you can use actual title as the value but if there is nothing inside this optional and if you unwrap it and it's empty it's nil then don't execute this code inside so that's why it has an if statement here you're basically testing to see if there's a value inside this optional if there is you assign it to this constant and then you use this constant inside here uh if there isn't then it's just going to skip over this whole if statement so in here we can safely now we can say you know print actual title uh plus um i don't know salute so there is no value in title so it actually skips all this but let let's say for instance we say here post.title equals um yo like that so now you can see when it does this optional binding and it unwraps this title because we have assigned something into it here it finds that hey i unwrapped the optional there is a value i'm going to assign it to actual title so inside this if statement we can use actual title and do this but if i didn't have this line here let's comment this out you can see that it it completely skips this and it doesn't crash or do anything like that because we're safely you know checking if there's a value inside that optional first and then we're using it now there's always different ways of doing things so in the swift programming language there's actually a way to be a cowboy and skip all this if you don't want to check it and you just want to use the value you know you know there's something inside what you can do is you can use you know you're going to not check it you're just going to use it you can be that it would be post dot title and you put this exclamation mark and this is called force unwrapping so what you're telling xcode is you're saying that hey you know i know there's a value in here i don't need to check it i just want to unwrap it right away using this exclamation mark and i want to use whatever is inside of there right in this case it's yo so here we're you know we're accessing post dot title it's an optional property we don't care we're gonna force unwrap that and we're gonna take out that value and use it you know and so if you know there is a value inside you can do that but it gets a little dangerous because for example if there happens to not be a value in there and you're force unwrapping it and you're trying to you know use the value well there's an error because and this is the error you get fatal error unexpectedly right because when you use this exclamation mark you're expecting that there is a value unexpectedly found nil when unwrapping an optional value right that is exactly what i was telling you you're forced unwrapping the title and you're trying to use it but it was actually nil so you actually get a crash and in your career of building apps you probably will see this error unexpectedly found nil so now you know why so the safer way to go would be actually to use optional binding so i'm going to press command z now command z for the americans i'm going to undo undo all right do something like that and this is optional binding so another way where you can test before using is just oops it's just with good oldfashioned if statement and testing if it's nil so you can say something like testing for nil you can say if post dot title is not equal nil then print post dot title and because you have tested it that it's not nil in this if statement you can go ahead and force unwrap that and use it right so that works you can safely use force unwrapping because in this if statement you've just tested that it's not nil okay now the reverse if you want to check that it is nil is post dot title equals equals nil okay it's not equals nil a lot of beginners make this mistake and they use one equal sign but one equal sign is for assignment remember that so if we're going to test for nil you're going to use two equal signs like that and this is like optional contains no value okay optional contains value and in here for optional binding optional contains a value so as with all of the other things we're learning with swift we can go deeper there's additional things to learn about optionals like optional chaining and other ways of using optionals but this is your introduction i wanted to tell you about what the question mark means and what the exclamation mark force unwrapping and how to check an optional before using it i wanted to introduce you to these kind of high level concepts and practically speaking you'll be using them most of the time like this and then in the future we'll touch upon the more complex things about optionals also you might be wondering why why and when you would ever use optionals but let me tell you you definitely will use it when you're building apps and when we do build our apps together you'll know what they are and you'll know how to declare optionals and how to unwrap them and how to check if they're no because you've watched this lesson okay so thanks for watching and please subscribe and thumbs up and share the video with other people you know who want to learn swift as well hello welcome to lesson 14 of the learn swift for beginners series in this video you're going to learn about properties which is something that we have been using already together since the classes lesson but we haven't formally introduced them yet so this video is for that in addition to that i'm going to show you some other cool things you can do with properties that you can't do with variables okay so let's get started so here i have a playground which defines two classes blog post and person you might recognize this from previous lessons and in both of these classes we've defined some variables here well properties are nothing more than variables that are associated with a class like this so for example in this blog post class i have a title property body author and number of comments and if i create a brand new blog post object from this class let's say let my post equals new blog post like that and then in order to access this title property i would use the dot notation i would say my post dot title and i'm going to assign something to this property and let's just call it title of post like that and in order to retrieve that value from that property i would just use dot notation again and this would return the value inside that property so you can see that property is just like a variable where it stores a value and you can retrieve it but i don't know if i mentioned this before and that is that properties are independent between objects so remember we have defined this blog post class right here and from this class we can create many blog post objects for instance here i've created a blog post object and i've assigned it to my post now let me create a second blog post object i'm going to call this my post 2. and i'm going to create a brand new blog post object from there so i have assigned title of post to the title property of this guy right here right that doesn't affect my new blog post object so i can assign my post to dot title equals another title like that and if i display this title you can see that it shows another title so the properties are really variables that are attached to the blog post objects that i create and although each blog post object has a title property the values that they store are independent of one another okay so the second thing i wanted to point out with properties is that when you're working inside your class so let's say we're working on this blog post class and we create some functions here let's say add comment you know we're going to create a function like that and we're going to create another function maybe called share share article okay these don't really have to do anything i'm just i just need to create two functions for the sake of creating two functions to demonstrate this purpose okay so just disregard what what i'm calling them because they're not really going to do that function okay so what i wanted to point out is that these properties that you define inside the class they can be accessed inside any of the functions inside that class so inside add comment you know i might be performing some code to add a comment and i would be able to access let's say um you know i can print title or something like that right that would access this guy well actually that's an optional so using what we learned let me just force unwrap it but my point is is that i can access these properties here you know or i can print let's say body for example you know and here likewise i can also print body within all of the functions inside this class i can access any of these properties up here and i can set them to from within any of these functions however if you declare a variable inside of a function that is what's called a local variable and the existence of that variable is limited to the scope of that function so what that means in plain english is if i declare a variable here let's say var my comment equals you know some comment like that i would not be able to access this variable inside this function here so if i try to you know print my comment you're going to see it throw an error here saying that my comment was never used oh wait that's regarding this guy right here so this is just an optimization xcode this yellow little triangle means that it's a warning it's not really an error so it's fine xcode is just warning you that you declared this my comment variable and you assigned it something but you never used it so consider consider changing its name to an underscore which which is an optimization but we are going to use it the xcode is just proactive because every time you're typing code it just scans your code and it tries to tell you about these optimizations that you can do okay so that's kind of a side note back to the main point i was trying to make and that is if you look at this error here on use of unresolved identifier my comment that means that xcode doesn't know what you're referring to when you try to print my comment here so even though we declared it here and we assigned it inside this function this variable because you declared it inside here is the scope of this variable or its existence is limited to whatever is inside these two curly brackets you know it's limited to the code inside this function now if i wanted it to be accessible everywhere you know i would create a property and i would use that instead so that's probably something you're going to get used to as you're doing more coding is the scope of where you declare things so this is called the local variable because we're declaring it inside a function and these properties that we declare up here to hold values are accessible inside the whole class so what that means is that let me just delete these two functions for now so what that means is that if you have a function that let's say calculates a result or performs some sort of calculation like for example um add up comment total or comment counts or something like that and the point of this function is to maybe sum up the number of comments that this blog post has and then at the end of the whatever you know you're performing calculations here um do some calculations and come up with as a result arrive at a result now what do you do with that result right um you can either and you learn this in the functions lesson is that you can specify a return value so this um this specifies that when you call add up common counts it's going to return a number for you so now you can say you know return whatever the result is whatever variable it's stored in right you can return it to the caller another thing that you can do to make it accessible later on because remember any variables that you declare inside here are local variables and they live and die inside this function here so if i didn't do the return value route and i arrived at some sort of calculated result and i wanted to save it for use for later on i would probably assign it to a property so i can say number of comments equals whatever result that i arrived at and by doing this when i call this function it's going to do some calculations calculate the result the total number of comments right and it's going to assign it into this property and now i can use the number of comments in other functions or later on if i left it as a local variable it would again when this function finishes that would be lost okay so that's the difference between the lifetime or the scope of property versus local variables and now for the third thing that i want to show you in this lesson is something called computed properties and it's one of those things that makes properties a little more special than just plain old variables here so let me let me get rid of these two here so that we kind of start fresh and we're back to where we started in this lesson you can do what's called a computed property and what that is is it just returns and what that is is it lets you do some calculation and return a result when you call a property so let me demonstrate here so let's say that we have let author equals person right so there is our author and let's set the author's name to chris ching which is my name and now let's create a blog post my post equals blog post okay and now let's assign the author property of the post right let's assign author into it now author right here is this person right this person object that i created and finally let's set the title to let's say learn swift for beginners okay so what do we have here we have an author object which has the name set to chris ching we have a blog post object uh with the author set to this person object that i created and i also set the title to learn swift for beginners now what i wanted to show you is i'm going to create a computed property up here i'm just going to add a comment so that just to make it stand out a little bit so i can say var full title is a string and i'm going to open up a set of curly brackets right uh right after it and what i'm going to say is check if title and author aren't not nil check that title and author are not nil because title is an optional right an author is also an optional and you learned about these in the previous lesson so you know what they mean they could return nil which is nothing right when you unwrap it so i'm going to use an if statement just to check so if title is not equal to nil and and that's the double ampersand which represents an end condition so if title is not nil and author is also not nil both of these conditions have to be true then i'm going to run this code inside then return title and remember because title is an optional string right that means i have to unwrap it to get the value inside and i'm going to use the exclamation mark to force unwrap it that means i'm going to tell xcode i'm just going to unwrap that optional and use whatever is inside whether it's a value or it's or whether it's nil and i know for a fact that it's not nil because i just checked it up here right so i can safely and confidently do this so i'm going to say bye and then plus and i'm going to do the same thing with author i'm just going to force unwrap it and use it okay so let's see what it's saying here cannot be applied to string and person that's right okay so author is a person right so i can't i can't append a person object to the string what i'm meant to do actually is i meant to unwrap the author right to get the person object and then call its name property so that's what i actually wanted to do okay so right here xcode is complaining that missing return in a function expected to return a string so this computed property here when it gets called full title it's supposed to return a string and if title is not nil an author is not nil it is going to return a string but what if one of these things are nil either or um in that case i'm just going to use the else branch here i'm just going to return let's say let's do another check else if title is not nil oops not equals nil then return just the title oops force and wrap that finally if the title is nil then i don't know what we can do other than return an empty string or let's say no title let's do that okay so this is awesome now this is a computer property and i hope you can see that from this demonstration what that means it's a property where basically you can perform some code you can do some calculation you can combine a bunch of things and return a result return something so if i say down here if i say my post dot full title what do you think it's going to display let me print it out because it's kind of truncated over here let me use the print so it prints down in the console it's learn swift for beginners by chris ching and i didn't have to set that right because this is a computed property this full title property is calculated by grabbing the title and appending by and then appending the author name and if we didn't have an author so let me just let me just get rid of this line here for setting the author if we didn't have an author it would just print out the title and if i get rid of the title and it doesn't have a title then it's going to print no title and that's all of this logic here in my computed property okay so that's computer properties there's also additional things which we won't cover in this lesson we'll probably do another video on properties and that is getters and setters and property observers but this is a really great start to taking a look at properties so thanks for watching please like the video and please subscribe hello welcome to lesson 15 of the learn swift for beginners series in this video we're going to revisit initializers and i'm going to tell you about designated initializers and convenience initializers okay well let's get started so right here i'm starting off again with the blog post class and the person class and of these properties here in the blog post class i'm actually going to uninitialize some of these properties so i can demonstrate for you what we need to do in the initializer because i mentioned before that one of the jobs of the initializer is to make sure that all these properties are initialized and ready to go so even if it is an optional that is considered okay when you're declaring your properties inside your class there are basically three different ways of doing it so number one is this one where you declare the property and you initialize it to some sort of value right away so that's this body property right here and this number of comments property is equal to zero the next thing you can do is you can declare a property and set it to optional so you're specifying that it could be nil or it could contain a value but either way you have to unwrap the value and you have to check if it's nil before using it now the third way is probably the most dangerous way and that is using the force unwrap operator so let me show you what that means if i get rid of that question mark and i put an exclamation mark there and let's also do it beside author so what you're saying here is you're saying that title basically is an optional it could be nil or it could contain a value but you're going to leave it unwrapped so when i access the title property down here and i say post.title xcode is not going to have that sort of safe checking or warning us that it could be nil it's not going to provide any of those safety mechanisms and it's just going to let us use it as is so we can assign nil into title as you can see here it's nil and we can use it like a normal property right we don't have to check if it's nil or not or rather it is up to us whether we want to do it or not but however if you know the difference the flip side being that we make this an optional now there are some safety mechanisms in place if i just try to use this as is xcode is going to warn us that hey you know this is an optional you have to check that it's not nil or you have to unwrap it first before you can use it so i might have to say if let you know actual title equals and this is using optional binding so basically we're checking if there's a value inside the optional first you know if something could potentially be nil it's probably safer to use an optional value so that it forces the programmer to actually check things before using it now if you set your properties like that then it could still be nil or could contain a value but you can sort of remove that safety checking that optionals provide so those are three different ways that you can set up your properties what you cannot do however is you can't do something like that where you declare a property you don't set it to anything you don't specify that it's an optional or you don't specify that it's unwrapped and you just leave it like that in that case xcode is going to assume that the initializer is going to set those to some values so let's declare our initializer here like you've learned in the past and inside here you can see that xcode is still showing errors but if i actually initialize these things inside the initializer let's say author is equal to person like that then xcode is going to stop complaining because remember when we create a new blog post like this it's actually calling the initializer so even though these properties right here title and author they're not set to anything they're not optional they're not unwrapped this initializer is going to be called for sure when we create a new blog post object and inside here those properties get set to some value they get initialized and so at the end of the day this blog post object is going to be ready to be used now this initializer right here this is what is called the designated initializer and what that means is that this initializer function is guaranteed to fulfill those obligations of making sure that all of the properties are initialized before use in contrast we can have something that's called a convenience initializer and what that is is you use the convenience keyword followed by your initializer method signature so i might have something like this where inside this initializer i only want to provide a custom title well you might ask if i call this convenience initializer how is author going to get initialized right so what happens is inside the convenience initializer i call the designated initializer using the self keyword like this so now and inside here let's set title equals custom title so now when i declare a new blog post object and let's say i use my convenience initializer like this and i pass in a custom title like this it's calling this convenience initializer but this convenience initializer is also calling the designated one which makes sure that at the end of the day you know the uninitialized properties will be initialized and then after calling that designated initializer then we set title to custom title so whether i call this designated initializer or the convenience initializer the title and the author properties will be guaranteed to be initialized and so the role of the convenience initializer is simply for convenience so that's the difference between a designated initializer versus a convenience initializer hello welcome to learn swift for beginners lesson 16. today you're going to learn about how to manage a collection of data in what's called an array if you're working with many pieces of data it would be hard to manage them with simply constants and variables so let's take a look at how arrays can make our life easier alright let's get started now arrays are one of three collection types that are available in the swift programming language for us to use and manage our data in this language guide you can see a diagram of this array on the far left side we're going to come back to this diagram in a second but first a definition so you can think of an array as a collection of data that is ordered by indexes now if that doesn't tell you too much let's jump right into a swift playground and i'll show you exactly how beneficial they are and also how to declare them and how to use them so first i'm going to delete this default variable here and we're going to create a couple of variables ourselves so let's say var a equals dog var b equals cat var c equals bird and now let's say i wanted to concatenate or add the word my in front of each of those values there so that i would have my dog my cat and my bird so i would have to do something like this i would have to go a equals my space plus a and this would result in a being my dog because we're adding the word my with space to a and a is dog and then we're reassigning that result into a again thereby overwriting what was there before so now a is actually my dog i would have to repeat this for cat and i'd have to repeat this with bird i can't even use what we learned in the previous lessons in regards to loops to make my life easier i'd have to write this out three times for each of the variables so here's the perfect chance to use an array to organize this collection of data so in order to create an array with the data already in it we're going to open up two angle brackets or square brackets if you'd prefer and inside these two square brackets we put each piece of data separated by a comma so we have dog we have cats and we have bird so just like that we have an array with three pieces of data and if you remember what i said in the definition that arrays are a collection of data organized by indexes what do i mean by that well you can see that there are three pieces of data here so there's three distinct spots you can think of it the left most spot here the beginning is index zero or spot 0 if you'd prefer to think of it like that the next one is index 1 and the last one is index 2. so arrays start at 0 and because there are 3 items here the indexes go from 0 1 to 2. and now if i quickly bring up that language guide again you can see in this diagram that in this array there are five items and so the indexes for six eggs is zero index for milk is one and so on until it reaches four even though there are five items because it's zero based okay so let's go back down here so this is great that we have an array here but we need some way to reference that array so actually what we do is we can create a variable let's call it d and we assign this array or this collection of data into the variable d so now if i wanted to access dog for example i would write d and then i would write square brackets like that and in between the square brackets i would put an integer representing the index of the item that i want so let's say i want dog i would put 0. so you can see here i would get dog all right and so we can print that out and that would print dog down here now if i change the index to 1 then i would get cat instead now let's do an example where we have something like this just to duplicate that i would say let's say a equals my plus d zero like that i can do b equals my that's my cat and finally i would get my bird but then i mentioned that there was a better way to do it if we leverage what we learned in the previous lesson on loops well we can let's take a look at using for loops and simplifying our work here so remember for loops will loop a piece of code for a specified number of times and you can see here that i'm working with index 0 and x1 index 2 so this becomes really easy i can say four remember the next um the next piece of the for loop is a counter so you know it's my variable to hold the current index and then you write in and then you write your range so i can write 0 0 sorry i mean 0.2 and this is going to loop from 0 to 2. so you i think you can kind of see where i'm getting at what i'm going to do is print my plus d and inside here where i put the index usually i'm going to put counter and you can see here it took the playground a little second but that's exactly what i expected to do here so in the first iteration of this for loop counter is zero right that's the starting range so zero gets passed into here and i would get this printed out this is dog d at index zero right is dog in the next iteration of the loop counter is one and so i'm actually accessing index 1 of my array d so that's why i get cat and then finally it loops again and counters 2 and i would access this bird index here i want to show you another way to use your for loop with an array and that's simply to say for item in d so what this is going to do is it's going to loop through all of the items in the array d and in each iteration of the loop it's going to take that item or that piece of data and it's going to assign it to item so i can simply go like this so you can see that it gets printed out again right in the first iteration item is dog in the second iteration it's cat and the third it's bird so this is a pretty simple way to write it and you can see that it saves a lot of work from doing it kind of one by one like this and one by one like this arrays in conjunction with loops really powerful stuff now with arrays there's other cool things you can do let me just make some space here maybe i should delete this stuff you can actually declare an empty array so it's an array that would contain no data at first and the way you do that is just like storing things into a variable or a constant arrays can only store data of a certain data type that you specify so since it's an empty array how you would do it is you open up two square brackets you put the data type inside the two square brackets and that data type represents the type of the data that the array is going to store so i'm just going to put string here and then you end off with two round brackets like that and just like that now e refers to an array that is empty right now doesn't contain any data with the intention of storing string type data in this array now if you're going to create an empty array like this you better be able to add data to that array right so what makes arrays really useful is that you can add and remove data from that collection so i can add or remove from this collection right here i can add or remove from this collection here let me just show you how to do that there are a couple of different ways i can do something like this d plus equals two angle brackets like that again and let's say i wanted to add mouse and now my d array would contain four items as you can see here dog cat bird and mouse in fact i can even add two pieces of data at once comma and then here i could put owl for example so it would add mouse and owl to that array so now my array has five items from zero to four right starts at zero one two three four make sure that you don't forget that plus sign right here because if you do that then essentially you're creating a brand new array with these two items and you're assigning it to d and you've just lost this data here so plus equal is for adding items now seeing this plus equals you might be tempted to use minus equals to remove items like this but that actually doesn't work unfortunately you can't remove items from the array like that what you have to do is the array actually has functions that you can call on it to remove items so you would say d and then you would press dot on your keyboard or the period key and out pops a list of functions that you can call on this array and using the append function is going to do exactly like this plus equal is it's going to add items into that array but let's look at the remove functions so you have remove all which is going to remove all the items in an array but you can use this one here remove at and you can specify the index of the item you want to remove so if i put 0 like that that's going to remove dog from my array so now it's only going to contain cat bird mouse and owl now what if i don't want to completely remove dog but i just wanted to change that element right there at index 0. so let me get rid of this remove line you saw that you can access items in the array by doing that right putting in the index there well you can actually change the item you can change what is assigned at that index by typing d square brackets put in the index you want to change and using the equal sign to assign something new into that spot so here let's say turtle and that is going to now change your array if i print d oops zero i'm going to get turtle instead of dog because i just changed it up here the last thing i want to point out is that arrays also you can check how many items are in there if you look at the count and that's going to return the number of items in your array that is sometimes useful when you want to use a for loop with a range and you don't know how many items are in the array you can use this array.count and get this number here but just keep in mind that although d has five items right here the index of the last item is actually only four because the first item is zero it goes from zero one two three four right even though there are five items so just keep that in mind if you're going to use this array.count in conjunction with a for loop or something like that okay so that's where we're going to end with arrays as you can see when you type array dot there are a lot of different functions with arrays that you can do what i've covered here in this lesson is enough for you to use arrays and leverage some of the main benefits of arrays as we go on and we're building apps together you're going to be learning new ways to use arrays but for now these are the main things you need to know about arrays in order to start using them if you like this video please give this video a thumbs up please subscribe for more hello welcome to lesson 17 of the learn swift for beginners series in this video we're going to go through another collection type called the dictionary in the previous lesson we went through the array you can see here on the left hand side and with an array we had a collection of items where the order mattered so you can see in this example here in the swift programming language guide six eggs is in spot number zero whereas bananas is in index four all right well a dictionary on this right hand side here is a collection type where order does not matter so in arrays we retrieve the item by this index here and with the dictionary because order doesn't matter we retrieve these values using a key so each value has an associated key when you put it into the dictionary and you need to pass it that same key and it's going to return for you the value now which collection type you use to organize your data is going to depend on obviously what sort of data you're storing does order matter if it does then the easy answer is to use an array if it doesn't then maybe consider using a dictionary so this is a good example airports have these airport codes right so each airport has an associated key and that's a good point the keys should actually be unique for each value that you put in another great example of when to use a dictionary and this is the example that i'm going to use in this video is license plates so for example each license plate is tied to a car and each license plate is unique so the key can be the license plate and the value can be maybe a description of the car or something like that let's jump into xcode in this new playground that i have here and let me show you how to declare a new dictionary and how to work with it so why don't we declare a variable here and let's call it car db to represent car database and let's looks like my playground has crashed okay and what we're going to do here is to declare a new dictionary so we use the keyword dictionary and followed by that we have these angle brackets where inside we specify the data type of the key followed by the data type of the value so for example let's pull up that example again in here in this dictionary the key would be a string and the value would also be a string and so in between these two angle brackets we would just put string comma string and in order to create a a new dictionary object we would just end off with those two brackets and like that we have an empty dictionary which stores key value pairs and a key value pair is just a fancy name for one of these pairs of data you know a key and a value this dictionary stores key value pairs where the key is a string and the value is a string as well now there is an easier way to write this out without having to write so much let me show you that second way var car db uh let's just say db2 is equal to use the square brackets and then you specify the data type of the key followed by colon and then the data type of the value and again we have these two brackets here to create a new instance of that dictionary or new dictionary object and that's equivalent these two are the same thing doesn't this look very similar to declaring a brand new array don't get confused so for example declaring a new string array would look like this would be my empty array that is expecting to contain string objects and this is an empty dictionary that is expecting to contain key value pairs where the key is string and value a string as well okay so we're going to stick with this sort of declaration here so i'm just going to go ahead delete this array example that was just for demonstration and delete that so now we just have card db is an empty dictionary now how do i assign something into the car database dictionary well i would do car db and then i would use these two square brackets here and i would pass in a key or i would specify a key rather and this key would be a license plate right so you know this is going to be different depending where you are in the world but let's just say it's like that and then you assign the value into the dictionary for that key so this would be let's say a blue ferrari now this value blue ferrari is tied to this key jsd238 how do i retrieve the value well it's very simple i just give it the key so if someone were to look up this license plate let's say i print this out like that it would print out blue ferrari but notice that it's wrapped in an optional tag because for example if i passed in a key that doesn't exist right let's pass in like asd 238 then you can see there is no value for that key all right so that's why it returns nil so that's why when you access a dictionary and you pass in a key it returns to an optional whatever data type that your value is so when you pass in a key into your dictionary to retrieve a value just expect that it is an optional and you may need to unwrap it and check if it's nil before using it okay so what if i wanted to let's let's label this so before we continue on this is declaring a new dictionary this is adding key value pairs and this is retrieving data and how do we update a value for a key well it looks exactly like this up here so you specify the key that you want to update the value for and here we can say that this guy now is a red ferrari maybe it got a paint job or something so when you pass in this key from now on you're going to get this new value because this basically overwrote whatever was there before and in order to remove a value remove a key value pair let's say you can do something like this you pass in the key two three eight and you assign it nil and actually that is going to remove the key value pair from your dictionary now i'm going to show you how to iterate over all of the key value pairs in your dictionary so why don't we just add a second key value pair in here so that we have more than one item to display okay and this one can be a green uh lamborghini i think that's how you spell it i don't have one so i don't know for sure and now let's iterate over it wish i had one though iterate over it we use a for loop so we can say for essentially for each key value pair inside the dictionary do something and the way you specify this is you pass in um we use what's basically called a tuple okay and so you can think of a tuple as a set of variables or a bunch of variables so we'll we're going to say license car in car db now the in keyword shouldn't be new to you because you guys learned about the for loop in a previous swift lesson so um basically what should be new to you though is this this is a tuple so for each tuple in this dictionary we can do something what's going to happen is it's going to grab each key value pair and the key is going to be inside license and the value is going to be car like that so now inside this for loop it's going to iterate twice and i'm going to find this key or this license inside this license variable and i'm going to find the car this string here blue ferrari or green lamborghini inside this car variable and it knows even though there's no data type associated with this tuple because my dictionary is string string for the key and the value i'm going to simply print car like that and you can see that hmm it's just it's printing one key value pair here it's printing one car but i have two items and the reason is because we've actually removed a key value pair with this statement here so if i just comment this guy out we have our two cars and it's red ferrari because we changed it up here now i can also print out the license i can say you know license um you know i can say something like car has a license like that has a license so that pretty much wraps up using a dictionary and you're going to find that it will come in handy along side arrays in organizing your data so thanks for watching if you like this video please give it a thumbs up and please share it with anyone you know who's also interested in swift thanks for watching i'll see you guys next time hey did you join my free facebook community yet that's where i hang out along with a ton of other people learning ios just like yourself i also post early access to all of my videos inside that group before i put them on youtube you can also get help with any questions you're having visit the link below click on the join group button and i'll approve your request right away alright so i'll see you in there talk soon
