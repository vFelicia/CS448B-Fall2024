With timestamps:

00:06 - hey everybody its Jesse and I hope
00:12 - everyone had a good weekend and if
00:14 - you're in the in the US I hope you had a
00:17 - great long weekend I am I'm back to work
00:23 - not quite as rested as I'd hoped to be
00:25 - my youngest two children were very sick
00:30 - all weekend so spent a lot of time
00:34 - taking care of them so I'm not feeling
00:39 - that that great myself so I'm gonna try
00:42 - my best to to focus and be upbeat even
00:50 - though I'm a little bit out of it so I
00:52 - apologize in advance from just a little
00:56 - bit a little bit off today if stuff
01:02 - we're working on today should be a
01:04 - little bit easier especially because we
01:08 - have a pull request from Sebastian that
01:11 - already did a lot of the work so the
01:14 - first part of this is going to be
01:15 - reviewing what was done in that pull
01:18 - request so this would be kind of a nice
01:21 - overview if you've never done form
01:23 - validation on the client side with react
01:27 - and that's what we will be working on
01:28 - today so I think I put that in the
01:30 - description and on my tweet but if in
01:32 - case you didn't didn't read it actually
01:35 - it's in the title as well but just to
01:38 - kind of explain if you're not familiar
01:41 - with it when you go to a form as I can
01:44 - demonstrate so I type in something like
01:48 - that and then immediately I'm told
01:50 - that's not a valid phone number that's
01:52 - what we're talking about just validating
01:54 - the fields so we've already implemented
01:58 - some things on the client side
02:00 - to check to make sure we have the right
02:03 - data mostly for the for the file upload
02:08 - but we also want to give the user a me
02:13 - get feedback right we if we just relied
02:16 - what's I said when it when it comes to
02:19 - forms right if you just rely on
02:22 - server-side to do all your form
02:25 - validation that's not a great user
02:27 - experience it's secure in terms of not
02:32 - letting in you know bad things into your
02:35 - server that can mess it up but the user
02:38 - has to wait you know they hit submit and
02:41 - they have to wait for a response from
02:44 - the server to let them know whether or
02:46 - not you know that they put in the right
02:49 - information so and if they hadn't then
02:52 - most likely they're gonna have to redo
02:54 - you know everything again what if they
02:57 - don't get a response back immediately
02:59 - say this for whatever reason the
03:02 - response is delayed they could think
03:04 - that they've submitted the form and
03:08 - everything's alright and not realize
03:10 - until later on that it's not alright so
03:12 - you can see like that's not the best
03:14 - with the client-side you get immediate
03:17 - feedback like we just saw which is great
03:19 - for a great user experience I
03:21 - immediately know like oh wow that's not
03:24 - a phone number you know definitely not a
03:28 - valid phone number there so that's nice
03:31 - but there's ways to bypass that and
03:35 - still submit you know let's say this as
03:38 - as a phone number so the best best thing
03:43 - we could do is to have validation on the
03:45 - server side and the client side so today
03:48 - we're gonna check out how to do that on
03:50 - the client side with react if you're
03:52 - using something else like not let's not
03:55 - react you know you just have a plain
03:58 - HTML form using some vanilla JavaScript
04:02 - or jQuery or something
04:04 - then this isn't it's not gonna apply you
04:07 - know exactly but there may still be some
04:10 - things that are worthwhile to see that
04:13 - that you could pick up from this so I'm
04:18 - gonna say how'd everyone in the live
04:19 - chat before you started hey everybody
04:24 - that's cool and I guys see some I think
04:28 - I see some new names in there so welcome
04:32 - so Jacob said appreciate all these
04:36 - videos thanks I appreciate you watching
04:38 - and saying that okay so let's let's get
04:46 - started with this I'm gonna set my timer
04:49 - we're gonna go 25 minutes of kind of
04:52 - coding while explaining and coding and
04:55 - then I'll do five minutes and go to the
04:57 - live chat catch up with any comments or
04:59 - questions that you may have in case
05:02 - you're interested
05:04 - what's that react is the library not a
05:06 - frame did I did I say that somebody
05:09 - commented cast commented react as a
05:12 - library not a framework yeah if I um I
05:18 - don't really remember saying it so maybe
05:19 - I said it was a framework but anyway
05:23 - yeah I mean sorry if I if I said that in
05:29 - the in the wrong way to be honest with
05:32 - you I'm not even sure what the
05:35 - difference between library and framework
05:37 - would be like semantically so hello okay
05:42 - now I see it wasn't me it was further up
05:44 - in the live chat that you talked about
05:47 - framework okay sorry about that I didn't
05:50 - catch that immediately but anyway yeah
05:54 - I'm going to tell you the truth here
05:56 - framework and library thrown around like
05:58 - interchangeably and I'm probably guilty
06:00 - of that as well I don't really think
06:01 - about it when I say that but I'm not
06:03 - entirely sure of where that what the
06:06 - definition is of each and where that
06:08 - line is where something falls into a
06:10 - framework or a library so if I use them
06:14 - interchangeably I'm sorry I don't I
06:16 - don't mean to be confusing about that
06:18 - but I myself as some somewhat confused
06:20 - about that definition but in any case
06:23 - we're gonna learn how to do some stuff
06:24 - with react regardless of what what
06:28 - category it is so but I'll do my best to
06:31 - try to remember
06:32 - that react is a library let's see I
06:42 - don't know why I've troubled with react
06:44 - I don't really call jQuery a framework
06:46 - ever I think I'm pretty sure I called a
06:48 - library all the time so just have to get
06:50 - that and in my head alright so let's go
06:57 - ahead and start out oh I do want to say
07:00 - for for anyone watching on Instagram
07:03 - check out the free code camp YouTube
07:04 - channel if you want to see the code for
07:07 - this it's being live streamed right now
07:09 - if you're watching later on though the
07:12 - recording will be available and then the
07:15 - code is also available on github you can
07:17 - get the link to that in the in the
07:20 - YouTube video this particular video is
07:23 - titled
07:25 - something it's client-side react form
07:28 - validation so you can check that out if
07:34 - you get a chance all right so let's
07:38 - let's get to this so you can see already
07:43 - how this works we have similar things
07:45 - going on with email we also have some
07:48 - some things going on with our file
07:50 - upload so let's let's see how we
07:55 - implement this first of all so let's go
07:57 - to our package JSON file you see we're
08:01 - using form Z in particular forms he
08:04 - reacts but also forms a material UI
08:07 - which is it's pretty awesome that they
08:09 - have that that makes things a lot easier
08:12 - I'm gonna say again I said at the
08:15 - beginning but I want to say it again so
08:16 - everybody knows that Sebastian did
08:19 - pretty much pretty much all the work
08:23 - actually Sebastian has done all the work
08:25 - for this so far I don't think I've
08:27 - changed anything for this yet we'll
08:31 - probably add to it today but Sebastian
08:36 - has done all this in a pull request so I
08:37 - want to give him credit giving
08:40 - for that and let's see so we want to
08:50 - load these two and of course these are
08:54 - available on github to check out the
08:56 - documentation but basically the forms
08:59 - EEGs is going to do check the validation
09:02 - so we don't have to write all that
09:04 - ourselves and then because we're using
09:07 - forms of material UI it integrates well
09:09 - with material UI which we're already
09:11 - using and as you've already seen it fits
09:17 - well we do have some weird things going
09:19 - on here with spacing below here which we
09:23 - can work on that later on it's not I
09:27 - mean it doesn't break anything it just
09:29 - looks a little bit odd there's a lot
09:30 - more space than we really need there but
09:33 - other than that it looks really nice
09:36 - with with material UI okay so we'll just
09:41 - start at the beginning of our service
09:43 - request J s component and this is the
09:48 - component that handles pretty much
09:49 - everything on this page so we've brought
09:55 - in
10:04 - there we go let's try to figure out
10:06 - where we brought informed you so we're
10:07 - importing form Z and we're importing
10:09 - form Z text and forms the check box so
10:16 - this will come into play a little bit
10:18 - later on but we have our file extensions
10:21 - here so these are the types the file
10:24 - types for a lot of the things that we do
10:27 - want to allow I'm gonna have to double
10:31 - check this list and make sure it is
10:33 - everything but so far it looks from from
10:39 - just looking over it it looks like this
10:41 - is everything that we do when I accept
10:43 - all right so let's let's scroll down to
10:47 - where we're actually implementing some
10:48 - of this so if we check out
10:59 - here we go all right so we have some
11:07 - extra things here that we didn't have
11:09 - before
11:12 - so our validations right in our
11:17 - validation error but if I should do this
11:19 - I guess I'll do it right now I was
11:24 - thinking it might be easier to see
11:27 - what's changed if we just go from the if
11:32 - we go back to the commit where this was
11:34 - added actually that might be yeah that
11:48 - might be the best way to do it
11:55 - yeah let's go back so for the part at
12:02 - least where I just want to show what
12:04 - we've done so far I think it will be
12:05 - best if we just can see the difference
12:12 - in github so I guess then go back to the
12:16 - original pull request
12:26 - okay so we've already checked out the
12:29 - package.json I'm gonna have to make this
12:31 - a little bit bigger I'm sure it's hard
12:33 - to see well that's that's a lot bigger
12:40 - okay
13:05 - yeah yeah okay this is what we want to
13:08 - look at so
13:20 - okay here we go
13:28 - so there's some other stuff that
13:30 - happened in this pool request so that's
13:33 - why I skipped over a lot because it's
13:35 - not immediately related to form
13:38 - validation okay and I actually did miss
13:48 - this going through on our originally
13:51 - when I went through so we've wrapped
13:53 - everything in a form Z component so I'm
13:58 - glad I did this because this is
13:59 - obviously a key thing that's dismissed
14:03 - so we've wrapped everything in a form Z
14:06 - form component okay so the you know the
14:11 - actual structure has changed a bit and
14:16 - so on valid submit that a lot of this is
14:20 - if you want more in-depth stuff you can
14:22 - check out form Z on github but a lot of
14:26 - it is worded in a way that it's really
14:28 - self explanatory so if the valid submit
14:30 - we just handle the form data alright
14:32 - when it's when it's submitted which this
14:34 - is you know we've already worked on that
14:37 - in a previous previous stream if it's
14:42 - invalid then we notify form error so
14:49 - there you go so when we notify form
14:51 - error we just are opening up a dialogue
14:54 - so a modal is coming up and I guess I
14:59 - could demonstrate this so let's try to
15:01 - so this is obviously not right let's try
15:05 - to submit okay so please fill out this
15:08 - field
15:10 - you can see that the tooltip comes up
15:13 - please felt this field and actually I
15:16 - think I had mistakenly said that a modal
15:19 - comes up it's not it's not even old
15:32 - actually this this does seem like
15:43 - yeah that does seem like that would
15:45 - throw up the same modal as if we
15:49 - actually had like a form error come back
15:51 - from the server but the thing is this
15:54 - this probably won't fire if we have the
16:01 - fields like this right because it's
16:05 - going to come up with that tooltip first
16:07 - so within our form Z component right we
16:14 - have form Z text which is obviously for
16:17 - a text field and so we have a lot of the
16:20 - same things as we had for our original
16:23 - material UI component so we are floating
16:25 - label text right name value so mostly
16:29 - the same stuff but we've made this field
16:34 - required right so if we want to submit
16:37 - I'll get rid of these so we don't get
16:40 - errors from that but before we could
16:43 - have just submitted this just like this
16:45 - but now right it will not let us submit
16:48 - which is nice because before on this the
16:56 - live version of this which is basically
16:57 - done with just jQuery to make something
17:02 - required would have actually required a
17:05 - bit more code than that but now to make
17:09 - it required keep going over the wrong
17:11 - screen literally all we have to do is
17:14 - just put required rights so pretty easy
17:20 - now and then for our validations we just
17:25 - have the field type in there so we're
17:28 - pulling in let me see if we're pulling
17:31 - in the data we have it so we now have a
17:35 - data file but we may not actually be
17:39 - pulling it in yet let's
17:44 - let me double-check
17:55 - okay we are at work we're pulling in
17:57 - that data and you're great so let me
18:00 - show you that file then because I have
18:02 - it up here anyway I did have it up to
18:05 - make sure I stove it up there we go okay
18:11 - so now we've we've removed the data a
18:14 - lot of the data into this file and by we
18:17 - I mean Sebastian but so you can see
18:22 - right we have the name we can put
18:24 - required true in here that's why when we
18:26 - were pulling this in then I'll just show
18:29 - you on this screen since since we're
18:31 - here since we're pulling this in what
18:40 - we're iterating over this data and you
18:44 - know we're not directly obviously
18:45 - putting in true or false we're pulling
18:47 - it from here alright so if we wanted to
18:49 - make it required we just changed the
18:50 - data here in our data file and we
18:54 - actually put in the error message as
18:56 - well so that tooltip that comes up we
18:59 - have control over what it says we also
19:02 - have control over the type right so
19:04 - we've said this is email this is alpha
19:07 - right so we don't want any any numbers
19:10 - or like weird characters in the name so
19:14 - this is just going to be regular letters
19:18 - right for our phone number we just want
19:22 - numbers so is numeric and then for
19:25 - Department we want to allow both letters
19:27 - and numbers so we say alphanumeric right
19:29 - so as I said earlier it's it's really
19:34 - nice the way this is set up because
19:35 - everything is pretty straightforward so
19:39 - that's our our single line the multi
19:41 - line set up it's pretty much the same
19:43 - way so we go go form Z form Z text again
19:50 - all right so it's the same one but we're
19:53 - gonna say what are we gonna multi line
19:57 - somewhere in here we got to say it's
19:59 - multi line I can't see it right now
20:12 - that's actually weird so I'm pretty sure
20:16 - with the with the original material UI
20:22 - components we had to put somewhere in
20:24 - here that it was multi-line maybe I'm
20:29 - just not seeing it right now obviously
20:30 - it's working right we can see we can see
20:34 - that this is actually using one maybe
20:41 - it's not
20:44 - hey let's fix this right now
20:46 - so I did have these as multi-line but it
20:48 - looks like it's not letting me make this
20:53 - multi-line so let's check out form Z
20:55 - which I think I have up on another
20:57 - window so
21:07 - there we go so if you can't tell already
21:09 - I'm actually reviewing this live so as
21:14 - we're going over this I'm reviewing I I
21:16 - was working on something else today and
21:19 - kind of saving this for for the stream
21:22 - so I expected that I would find some
21:26 - things that I wanted to change so here's
21:30 - the first thing let me make sure this is
21:35 - formed oh I'm looking at the wrong thing
21:37 - I thought I had formzee up already but I
21:39 - guess it didn't alright let's move this
21:41 - over because that's not what we need
21:55 - I think we have a link to whoops
22:01 - conversation
22:03 - Sebastian included a link to everything
22:04 - there we go so we're gonna check out
22:07 - formzee material UI
22:29 - I guess we'll just check out regular
22:31 - formally okay okay
22:53 - yeah
22:59 - that's weird actually I want to try this
23:02 - obviously you could see as I was
23:04 - scrolling through there wasn't anything
23:05 - there that was describing what to do so
23:08 - what I'm gonna do here is just check
23:14 - actually it'll be faster just do like
23:16 - this
23:22 - let's just check out what it was before
23:25 - for a multiple inputs multi-line okay so
23:33 - we just had to pass a multi-line and
23:34 - that was it so let's try to pass
23:35 - multi-line and see if it works I think
23:38 - it's worth it to try that out because if
23:40 - it works it'll save us a lot of time and
23:42 - trying to find out the answer
24:00 - there we go all right awesome okay I'm
24:05 - glad that works so basically if you want
24:08 - if you want to use form Z text and make
24:11 - it multi-line you just add multi lines
24:13 - so just like the normal material UI
24:17 - component okay great so now we have our
24:24 - multi line components but it works the
24:26 - same way in terms of validation right we
24:28 - we could put our own custom error
24:31 - message and then we can put our type for
24:34 - all of these it's gonna be it's the oft
24:38 - America afternoon the project budget
24:40 - we've put numeric this we may we may
24:48 - change this field I'm gonna leave it
24:49 - like this for now but we may change this
24:51 - field we're having some basically for
24:55 - the budget we could put in some people
24:59 - put in a budget code for their
25:01 - department some people put in a dollar
25:04 - amount but it's potentially people could
25:07 - describe what their budget is because it
25:10 - could be contingent upon other factors
25:12 - so we may want to switch this to it's
25:14 - alphanumeric but I'll need to check I
25:17 - think I mentioned last week that so this
25:20 - week I'm gonna make a server and I'm
25:22 - gonna put this up and it's going to be
25:24 - live and then other people in my
25:26 - department can test it out at that point
25:28 - I'll get some feedback on how we want to
25:30 - change these form fields and this is one
25:33 - of the ones that that may change
25:43 - okay so great you can see majority of
25:47 - these are just gonna be alphanumeric
25:49 - that's probably what you want normally
25:51 - when you have a multi-line input because
25:55 - why would you want a multi-line input of
25:57 - just all numbers right you would
26:00 - normally wouldn't need that okay so
26:02 - these are our all our text fields with
26:05 - the validation like that's that's really
26:08 - easy validation so I know I've I've
26:14 - tried to do my own validation before
26:16 - usually with jQuery it's so much harder
26:18 - than this I really appreciate how this
26:23 - is done so much so much easier I don't
26:28 - think we have yeah we don't even going
26:31 - on for the date picker which is fun for
26:38 - now I'll have to check and see what how
26:43 - you're how you can do date picker I'm
26:45 - assuming that you can validate date
26:46 - pickers with formulas we can check on
26:48 - that in a minute once we finish going
26:51 - through was here already normally if you
26:55 - would just use the date picker as is
26:57 - it's gonna format the date correctly but
26:58 - potentially you know I guess someone
27:01 - could try to enter in their date
27:03 - disabled I know just in case somebody
27:08 - has a way to try to enter in their date
27:11 - manually we want it to be in the correct
27:14 - format this is not going into a database
27:17 - or anything so I'm not worried about you
27:21 - know the exact format coming through but
27:23 - it needs to be readable and makes sense
27:28 - and the Dayton this may end up being a
27:32 - required field as well okay so for our
27:36 - file input
27:40 - we have accept and then that's where
27:44 - these file extensions extensions come in
27:47 - but we want okay so what I need to test
27:55 - out is the extensions so I need to try
28:01 - to upload something that doesn't fit any
28:03 - of those extensions and see what happens
28:11 - all right let me check my time okay we
28:15 - got about five minutes so let's test out
28:18 - this file upload because what I was
28:23 - getting before let's think
28:35 - okay it's not letting me accept this
28:42 - it's not letting me let me put in a file
28:44 - let's see with what I'm thinking what
28:50 - happened what I'm hoping will happen is
28:52 - that it will also alert me so let me see
28:57 - if I can there we go
29:00 - so let's say I do that so me right away
29:03 - you know it let me know that I couldn't
29:05 - use that but let's say I switched all
29:06 - files when I try to do something like
29:07 - this I want to see ok nothing happens
29:11 - yet let's see if it it's gonna make me
29:18 - fill this out there's all this requires
29:24 - ok let's see no I don't want my address
29:36 - all right
29:42 - I didn't realize that all these is
29:44 - required is everything required right
29:48 - now oops
29:53 - alright let's just fill out everything
30:06 - okay so it looks like nothing's
30:08 - happening on that file input so let me
30:12 - check out I want to make this a bit
30:20 - smaller because it's hard for me to read
30:24 - with it that big
30:38 - hmm
30:41 - maybe it just doesn't have this
30:53 - let me scroll through quickly if it
30:57 - doesn't have anything for this I guess
31:03 - we'll just skip over for now
31:22 - actually whoops there it is I'm looking
31:25 - here's the API reference this is what
31:28 - I'm looking for
32:00 - okay validations
32:22 - all right so I'm not seeing anything
32:24 - about file input in here so for now
32:31 - let's just just skip ahead all right and
32:39 - that's my five minutes so let me go
32:41 - let's set my um let's set my timer we'll
32:45 - do a short break five minutes I'm gonna
32:47 - go into the live chat which looks like
32:49 - there's a lot of activity in the live
32:51 - chat so I'm gonna try to get through
32:52 - everything in five minutes then we'll go
32:53 - back to it I think I think for now I'll
33:00 - skip over that file upload and then I'll
33:03 - show what's going on here with this
33:06 - check box and then we can go through and
33:12 - alter some things I definitely don't
33:15 - want everything to be required right now
33:18 - if we have time we can come back to the
33:21 - upload files what I would like to happen
33:23 - is that if someone tries to upload
33:25 - something that's not supported it
33:27 - immediately tells the user that it's not
33:31 - supported all right okay see text editor
33:46 - looks amazing current use brackets do
33:48 - you recommend Adam as a better text
33:49 - editor so the question is do you
33:55 - recommend Adam as a better text editor
33:58 - better than brackets I've never used
34:01 - brackets so I can't make any comparison
34:04 - between the two I like Adam have been
34:07 - using Adam for years I've also tried
34:12 - Visual Studio code I like it it seems
34:16 - really fast I'm happy with Adam but I
34:20 - think there's a lot of good alternatives
34:22 - so I would be fine recommending Visual
34:25 - Studio code as well the only reason I
34:27 - don't use it right now more than I
34:29 - already do is just because I have so
34:31 - many packages already
34:33 - set up with Adam and you know my syntax
34:36 - highlighting you just get used to it a
34:37 - certain way and I just haven't taken the
34:39 - time to set up visual studio code in the
34:42 - same way but you know if you're not
34:47 - happy with your current editor then
34:50 - Adams you know Adams a great thing to
34:52 - switch to the only complaint I've heard
34:54 - from Adam is some people say it slow I
34:56 - haven't really had a problem with it
34:57 - being slow for me I it probably also
35:00 - depends on your machine you know and how
35:03 - good your computer is I'm I'm on an iMac
35:08 - right now that has you know pretty a
35:11 - pretty decent amount I think I'm running
35:14 - like 32 gigs of ram or something that's
35:17 - a lot so I don't really have problems
35:21 - with it but if you'd notice if you use
35:23 - Adam and you notice that it's a bit
35:25 - sluggish then I would recommend maybe
35:27 - going with Visual Studio code because it
35:29 - it does seem faster to me at least in
35:32 - you know a little bit that I've used it
35:34 - but there's a lot of other good editors
35:36 - I've heard good things about sublime
35:38 - people that use vim seem to really love
35:40 - them I haven't taken the time to learn
35:43 - that yet
35:44 - one day I'd like to mess around with it
35:47 - and see if I could learn it there's what
35:50 - else people people who use Emacs really
35:53 - love Emacs so I guess I can't
35:56 - I've never even attempted to use Emacs
35:58 - so I can't speak personally about it but
36:01 - but I I feel comfortable saying you know
36:04 - Adams worked well for me and I like it I
36:07 - don't know if it's the best or not but
36:10 - it's it serves its purpose well for me
36:18 - okay so let's say there's some
36:19 - discussion about the react license and
36:24 - so I'm not
36:30 - yeah I'm not necessarily I don't think
36:33 - there's any questions in regard to that
36:37 - let me double-check yes I don't think
36:45 - they had any questions directly for me
36:46 - but just in general there's been a lot
36:48 - of controversy over the react license
36:53 - from what I understand and this is also
36:57 - reiterated in the live chat is that
36:59 - there's something in the license about
37:02 - giving up the right to sue Facebook if
37:06 - you're using react or I think there's
37:09 - also some other Facebook code that is
37:11 - licensed in a similar way based like you
37:16 - can't sue Facebook if you're using that
37:18 - so I'm not sure about the details I'm
37:20 - not I'm not a patent attorney I'm kind
37:23 - of lawyer so I don't really know but it
37:25 - seems to me like it's in most cases this
37:29 - is just my take personally on it so you
37:32 - know check it out for yourself but it
37:34 - seems to me that in most cases you
37:35 - wouldn't really need to worry about it
37:37 - I'm not worried about it for for what
37:41 - I'm using it for so I think it would
37:44 - just depend on your use case your
37:47 - company you know who you're working for
37:49 - so but it's definitely worth I think
37:53 - you'd begin to check it out understand
37:55 - what's going on before you use react in
37:58 - a larger project I think it's still fine
38:02 - to use it you know certainly on you know
38:07 - small side projects things like that it
38:11 - at least from from what I have heard it
38:13 - should still be fine for most people
38:26 - alright I'm just scrolling through the
38:29 - last a little bit here in the live chat
38:30 - before we start up again there's some
38:34 - mention of potentially using pre-act or
38:37 - view j s as an alternative i think
38:40 - someone mentioned angular as well
39:05 - okay I'm gonna go I'm not gonna be able
39:08 - to get through everything because
39:09 - there's a lot of stuff in the live chat
39:11 - right now I'll check it back after the
39:12 - next 25 minute session it looks like
39:15 - somebody asked about knowledge of react
39:19 - in regard to this stream so yeah it
39:22 - definitely it would help to understand
39:24 - what's going on if you had some
39:25 - knowledge and react but it just depends
39:28 - on what we're working on so sometimes we
39:30 - work on even though it's a react project
39:32 - sometimes we work on parts of the
39:34 - project that don't have that much to do
39:35 - with react so you don't need to know
39:38 - react to understand what's going on a
39:40 - lot of it is just regular JavaScript
39:42 - stuff or sometimes we're working on you
39:46 - know the server which we're using node
39:47 - for which is more JavaScript and so it
39:52 - kind of just depends on what we're
39:53 - working on today some of the stuff is I
39:57 - would say probably most of the stuff
39:59 - today is more unique to react but not
40:03 - unintelligible to someone who hasn't
40:05 - used react okay and let me I was gonna
40:14 - write down where I where I'm leaving off
40:18 - that but I can't seem to find a pen so
40:21 - let me bring up my node I've been using
40:27 - Google keep for notes lately so I'll
40:30 - just write down the timestamp of where
40:33 - I'm at in the live chat in keep since I
40:40 - can't find a pen all right
40:42 - oh cool a my said I said hey Mark how's
40:46 - it going alright let's go back to this
40:51 - I've already taken up more than my five
40:54 - minutes of time okay and you have to
40:59 - excuse me for a second I my first really
41:01 - it's hurting today of a mouse getting
41:03 - dry I need to stop and take a drink here
41:13 - okay okay so the last thing that I want
41:20 - to go over before we really start
41:22 - getting into it and making some changes
41:24 - is this checkbox here so we worked on
41:27 - this earlier by earlier I mean maybe a
41:30 - few weeks ago in a stream but we want
41:34 - people to read the planning guide first
41:36 - so you can see this is completely
41:41 - disabled so I'm clicking this right now
41:44 - nothing's working it's grayed out until
41:47 - we check that now you can use that so I
41:50 - kind of like how this is I may add I
41:54 - think it'd be nice to make the cursor
41:58 - change and maybe a tooltip
42:06 - come up that says you know hey you got
42:10 - it you got to read the Planning guide
42:11 - something like that yeah I'd like maybe
42:17 - to give some indication to the user if
42:19 - they're confused as to why this isn't
42:21 - working that they need to check this
42:23 - first but other than that this is
42:25 - working as as expected so not only is
42:29 - this a required field but you know goes
42:32 - even further that it completely disables
42:34 - the submit button if you haven't checked
42:36 - it so let's check out how that's done
42:38 - we'll scroll down to the bottom here so
42:43 - we have here we go so we've used the
42:51 - formzee checkbox component instead of
42:55 - the normal checkbox and obviously you
43:02 - know we've added required we name but
43:04 - we've also see and this may not be
43:09 - related to form Z this may be something
43:12 - that Sebastian did on his own I suspect
43:16 - it is something like that and I don't
43:18 - think he's in the lab chat so I don't
43:19 - think you can verify that but
43:21 - I'm pretty sure this is something he did
43:23 - on his own but it's it's a nice feature
43:25 - so we'll go over it because it is you
43:30 - know we're validating that this is
43:32 - checked so let's look enable submit so
43:36 - basically on change we're enabling
43:40 - submit so let's go up and check out that
43:45 - function enable submit okay so if it's
43:57 - checked we're gonna set the state the
44:00 - can submit state to true if we're
44:08 - unchecking it we want to set it to false
44:10 - all right so pretty simple and we could
44:15 - see by default it's false and then let's
44:20 - check our submit button
44:26 - here we go okay so we have this disabled
44:32 - property and we're just checking for if
44:40 - we can submit and you know we want to do
44:43 - the opposite right so if if it's can
44:44 - submit is true we want this to be
44:48 - enabled right so that's why we're doing
44:51 - the opposite so if can submit is true
44:52 - then this value is going to be false and
44:59 - if it's not true right so if it's if
45:04 - it's unchecked and it's not true then
45:07 - it's going to end up registering as true
45:09 - so disable true right so pretty
45:12 - straightforward I really like how
45:14 - Sebastian did that it's just it's so
45:16 - simple I mean it it gets the job done
45:21 - it's great so that's basically all we
45:25 - have going on right now for form
45:27 - validation so what I want to do now is I
45:33 - know there are certain things that are
45:35 - not going to be required see yeah let's
45:43 - let's just put in false for some of
45:45 - these and then that way if we need to go
45:46 - and test the form later on it'll be a
45:49 - lot easier primary target audience I'm
45:55 - gonna say false for a lot of these now
45:59 - [Music]
46:07 - I'm gonna say false now but that that's
46:10 - likely to change my goal now that I look
46:17 - at these I kind of don't really like how
46:18 - they're a lot of how they're worded but
46:22 - I'm not gonna change anything right now
46:24 - because initially when I did this
46:25 - project two years ago I think yeah I
46:29 - think two years ago I started this
46:31 - project not this particular react
46:35 - project but the the version of this
46:38 - that's live right now that was done with
46:40 - jQuery it's basically kind of it's
46:44 - common like a single page application
46:46 - but just on the jQuery to handle all the
46:48 - different views there was a lot of
46:52 - debate as to what these form fields
46:55 - would be and how they would be worded so
46:58 - I'm not gonna just change anything on my
47:02 - own without checking to it was a big
47:05 - deal that's what everything what it all
47:08 - said I'm gonna leave the description as
47:11 - true we need something to go by so when
47:15 - it need the description the Department
47:23 - I'm gonna leave it as false right now
47:25 - just for the sake of testing the form
47:27 - that will probably end up being true
47:30 - phone email I'm gonna go with funding
47:38 - Falls but I definitely want an email and
47:44 - if we make the email required then this
47:47 - would be better so on the server side
47:50 - we're sending an email and I want to
47:52 - send an email to the user so I don't
47:56 - really even want to have to worry about
47:58 - there not being an email obviously I'm
48:02 - gonna I'm gonna have some type of
48:05 - default if we don't get an email because
48:07 - someone could circumvent the client-side
48:09 - validation but I'd like there to the
48:12 - user to put in an email so that we could
48:14 - send them an e-mail verification and get
48:17 - a hold of them later
48:20 - name required let's um let's format this
48:30 - in the same way as the other ones there
48:36 - we go okay name sure and we want the
48:42 - name to be required as well let's get
48:46 - onions check out these checkboxes okay
48:48 - great so I'm gonna say that so here's
48:54 - what I'd like to work on now let's see
48:58 - if there's a way and we may have to do
49:00 - this on our own
49:01 - and not use forms a which is fine but
49:04 - it's assuming that that form Z does not
49:07 - have a way to do this on file uploads
49:10 - what we need to do then is unchanged
49:16 - since probably since we already have we
49:19 - already have a non change handler let's
49:20 - just do this in our own change so when
49:23 - we with the handle file path we're gonna
49:27 - need to check the file type against
49:30 - these extensions and then display
49:34 - something to the user if they're if
49:38 - they've tried to upload something that's
49:40 - not on the allowed list all right so
49:55 - ok let's check out this handle filepath
50:06 - so that
50:12 - so she'd be able to get
50:21 - let's
50:30 - let's see if we can get
50:42 - I'm doing this the wrong way let's see
50:45 - files the
50:57 - so with this I think we can go
51:12 - I want to see if we can get the type
51:17 - right from here so what we're doing here
51:20 - then is as we can see here we have this
51:27 - files object that we get back from our
51:30 - our upload field and we can get the name
51:34 - of the file off of it I think we can get
51:39 - the type just by doing tight but I want
51:41 - to double check my console logging I
51:43 - actually have two different ideas right
51:45 - now since we have all those types I want
51:47 - to use those so if we can get the type
51:49 - and it matches up with the with the
51:53 - format of the types that we already have
51:55 - saved here then that would be great
51:57 - otherwise I'm gonna grab the name and
52:00 - then get the file extension from the end
52:02 - of the name and then we'll go to our
52:04 - server j/s and we have a list of allowed
52:07 - extensions there we can copy that over
52:09 - and use that either way will work so
52:14 - probably won't matter what what we do
52:18 - there it's gonna work
52:19 - file is not defined well not defined
52:25 - oops file snaps area
52:32 - okay let's check out there's our
52:37 - consoles let's try to upload some stuff
52:43 - there we go okay so we are getting the
52:46 - file type I'm interested to see what the
52:50 - type is what type that says when I do
52:53 - this there's not xxe okay great
53:01 - so we are getting what we want from here
53:04 - so we will be able to work with what we
53:06 - already have let's see I want to see
53:11 - what format we have this in okay this is
53:14 - just a string all right that's fine we
53:21 - can work with this drink all right so
53:26 - let me let me take a step back and just
53:28 - explain what's going on here
53:31 - especially if there's someone who's kind
53:34 - of a beginner or doesn't really
53:35 - understand some of the ex6 stuff or file
53:41 - upload stuff so there's a lot of
53:42 - different things going on here that you
53:43 - may not have been exposed to so we're
53:47 - going handle file path we're using arrow
53:50 - functions so this is just a function and
53:53 - as a parameter we're passing in the
53:55 - event they were using the arrow function
53:57 - the main advantage to this other than
53:59 - being concise is that it binds this and
54:05 - in a way in react that we want this to
54:08 - be bound although I don't even think
54:10 - yeah we are sorry you see here we're
54:12 - using this set state if we use a regular
54:14 - function and try to call this set state
54:16 - I don't think it would work
54:21 - yeah we would have to bind this
54:25 - somewhere else if we wanted to use the
54:27 - regular function so in particular we'd
54:29 - have to bind it in a constructor
54:31 - why not I'm not going to go into that
54:33 - right now we've talked about that in
54:34 - previous streams so anyway I think an
54:38 - arrow function here is the best way to
54:39 - go to accomplish what we want to do in
54:43 - as few lines as possible
54:45 - but if you're not familiar it's just a
54:48 - shorter way of writing a function so for
54:54 - our purposes we really just need to know
54:56 - what's going on here right now so we're
55:01 - getting so we're setting this constant
55:05 - as files and any time you see Const or
55:07 - let think variable okay there's there's
55:10 - some things going on with scope and
55:12 - mutability whether you want to use costs
55:16 - or let but it's just another way to make
55:18 - a variable so we have this target dot
55:25 - files right so our event target that
55:31 - we've passed in the event all right and
55:33 - we're just grabbing the files from that
55:36 - okay so now we have an array of files
55:39 - and I might be easier if I console.log
55:43 - what's going on here let's do that let
55:46 - me put in some console logs I think
55:53 - it'll be I usually get things a lot
55:56 - easier if I can see it so let's type
55:59 - let's put in console let's just put in
56:02 - an event for nought and I think we
56:05 - should be able to see everything we need
56:07 - to from that so let's try to upload
56:13 - multiple files here ok great so we have
56:20 - ok so here's our event right and we can
56:23 - access target
56:27 - let's see if we can find it I was gonna
56:33 - be getting in here so I've been targeted
56:35 - files
56:43 - I'm not gonna be able to get this hmm
56:52 - I might have to go down another one
56:54 - let's go let's get event.target
57:10 - okay so here we go our event target is
57:14 - simply our input right so we're
57:17 - selecting our input and then we're
57:19 - getting our our files off of that so one
57:23 - more time I'm going to change the files
57:36 - there we go so now you can see what
57:39 - we're getting we have an object and
57:42 - we're getting our files and then we have
57:44 - some values from there all right so we
57:47 - have our name and we have our type right
57:49 - our file size so we have a lot of useful
57:52 - values in here especially useful for a
57:55 - validation so that's what we're getting
57:58 - right and that's what we're we're doing
58:04 - here I guess just to show you the
58:07 - difference of what's going on here
58:08 - let's throw this
58:22 - there we go this should hopefully be the
58:25 - last time we need a console.log for
58:27 - demonstration purposes alright so you
58:35 - see before we had an array now we have
58:39 - or before we had an object now we have
58:41 - an array of objects right so that's just
58:45 - for the purposes of being able to
58:46 - iterate over it using map over we're
58:49 - using here alright so that's all we did
58:53 - there so now we're already grabbing the
58:58 - file names and we're using that to
58:59 - display so we're not using the default
59:05 - upload field that's just the default
59:08 - HTML field because it's not pretty so
59:11 - since we're using something different
59:13 - these are two different inputs this is a
59:15 - multi-line input and we're actually
59:18 - grabbing the file names from our upload
59:20 - input and then putting them into this
59:23 - field here that's why we need to do that
59:25 - but it's nice that we're already doing
59:27 - that because a lot of the stuff we need
59:30 - for validation is already written out so
59:33 - now what we're gonna do is we're gonna
59:36 - grab that type which we've been console
59:38 - logging already and let's get rid of
59:42 - this we don't need it anymore so now
59:45 - what we need to do is check every for
59:51 - every file we need to check the type and
59:54 - make sure that that type is included in
59:56 - our list of allowed file types if it is
60:04 - then we're not gonna do anything it's
60:06 - just gonna go through as normal if it's
60:08 - not then we want to show the user some
60:11 - feedback so for now let's just get it
60:14 - get the check working then we'll decide
60:17 - how exactly we want to show the feedback
60:20 - to the user
60:25 - I just saw Praveen in the live chat just
60:28 - as is it react yes yes it is react Jaso
60:39 - let's go with and I'm gonna I'm gonna
60:43 - have to check the syntax on this because
60:45 - I always get it wrong
60:46 - [Music]
60:48 - actually I could just check in server
60:50 - dodge is because I've used it so here we
60:59 - go
61:00 - all right match use match you don't
61:06 - really need match like this
61:22 - yeah we can use this so
61:29 - yeah let's use this I was just checking
61:31 - because I can never remember the order
61:33 - so you can see the difference between
61:35 - with match we put in first like the name
61:39 - of the file and then we type in like
61:42 - what we want to match it against with
61:44 - test its opposite first we have our list
61:47 - of what we want to match it against and
61:48 - then we have our our individual value so
61:52 - I just wanted to double check head so
61:58 - that's what we're gonna do so we want to
62:07 - do is actually let's let's console log
62:16 - this console of this for now so we can
62:20 - see if it's working so for this we want
62:26 - to do our then I don't remember what the
62:29 - name is there we go our file extensions
62:32 - list
62:41 - actually no this isn't how we want to do
62:55 - actually we do want to do this a little
62:57 - bit different from we are doing so I
63:06 - forgot it again sorry file extensions
63:10 - and then
63:25 - alright let's see what it does I think
63:27 - I'm confusing myself Asst which one goes
63:29 - where but let's just check it out for
63:32 - now whoa
63:49 - hmm
64:06 - yeah I think I put that back
64:28 - okay the shad is done
64:41 - now again hmm I don't something wrong
64:51 - let's try it with match and I may have
64:57 - to switch it around
65:10 - okay
65:40 - okay this will work I don't know what I
65:45 - was doing wrong with tests but this is
65:47 - fine this or two so you can see we're
65:49 - getting values all right so in this case
65:52 - we're getting an array if it matches if
65:56 - it doesn't match for getting null so an
65:58 - easy way to check this it's just so
66:04 - we'll go you see where my if it is let's
66:19 - see dot length is greater than zero then
66:30 - actually let's just return this I was
66:36 - just math linker is here this should be
66:39 - sufficient
66:46 - oops
66:53 - oops
66:56 - Cantrell active no okay
67:04 - all right so they are getting true there
67:06 - let's just change it then and say
67:20 - all right this should give us what we
67:24 - want
67:35 - books
67:38 - okay there we go that's what you want so
67:40 - we tried to upload two pings and then
67:42 - one xcf file so we got two trues because
67:45 - things are on the list and then false
67:47 - because xcf is not on list so that's the
67:49 - behavior that we want let me check my
67:53 - timer did that go off or did I just
68:00 - forget to set it let me see what time it
68:02 - is no that definitely went off okay
68:05 - let's take a short break and sorry about
68:10 - that I just did not hear that at all all
68:16 - right I'm gonna go back to the live chat
68:17 - right now and try to catch up
68:31 - now I'm gonna scroll back up to where I
68:33 - left off
68:48 - see
68:52 - okay we were when I left off that we
68:55 - were talking a little bit about code
68:57 - editors and I was saying that I've heard
68:59 - that Adam is a little bit slow but it
69:01 - runs fine on my machine
69:02 - and Blake said Adam is pretty sluggish
69:08 - on his machine
69:38 - shroo John s which coding software are
69:41 - you using sir if you're talking about my
69:44 - code editor it's Adam if like in general
69:47 - we're for this project we're using react
69:55 - ok kerlick says I just tried Adam code
70:01 - editor and in my opinion it is terrible
70:04 - comparing with brackets okay so yeah
70:08 - I've never used brackets before so like
70:10 - I said I can't do a comparison but but
70:14 - that's good to know
70:15 - well like I said I'm not I'm not gonna
70:18 - switch to anything else right now until
70:21 - I you know if I get some time it let's
70:23 - say I'm in between projects or something
70:24 - and I have time to really try to setup a
70:26 - different editor the way I like then
70:30 - I'll think about switching but for now
70:34 - since Adams working for me
70:36 - then I'm just I'm gonna stick with it
70:41 - alright matt said what are you what are
70:43 - you doing with the image uploads
70:45 - planning on displaying them elsewhere
70:50 - accident no I didn't have any plans on
70:53 - displaying the image uploads anywhere it
70:59 - would be cool it would be a cool feature
71:04 - and this will just go on like the nice
71:06 - to have list of if we have time I'll put
71:09 - it in there but it might not it might
71:11 - not be a bad idea to display thumbnails
71:13 - of the images when they're uploaded that
71:20 - would be kind of nice to do but for now
71:23 - the only kind of feedback the only thing
71:28 - we're doing with the images for now are
71:30 - they're just going to be stored on the
71:33 - server and they're going to be sent to
71:37 - the project management system that we
71:41 - use
72:00 - okay and I've actually got through I've
72:04 - got through to the bottom of the live
72:05 - chat so and I still have one minute left
72:13 - okay so we'll probably do I'll probably
72:21 - just do one more Pomodoro session we'll
72:24 - see how much we can get done with this
72:27 - file uploader and hopefully we can get
72:39 - it finished you know or at least to a
72:42 - point we're kind of displaying something
72:46 - I mean right now it basically works
72:48 - we're getting the result we want we just
72:52 - need to do something visually now but
72:56 - like I said we'll do one more session
72:58 - and then I'll answer any questions that
73:00 - any of you have in the in a live chat
73:08 - there we go so let's start up our
73:10 - session I think what I what I'd like to
73:15 - do I'd love it if we had the same style
73:19 - of let's see so not that one let me see
73:28 - so this I think something like this
73:33 - would be great to have for the file
73:36 - upload or at the very least something
73:41 - like this would work as well so it would
73:44 - it would turn this line red and then
73:47 - underneath it would say that it's not a
73:51 - valid file extension
74:02 - actually
74:16 - all right so I guess here's what I was
74:19 - just thinking I wonder if I could just
74:22 - use the form Z validation on this
74:25 - because this is just a multi-line input
74:28 - and somehow give it a white list of file
74:33 - extensions to check then I mean we
74:38 - already have it working for the file
74:39 - pose but then we wouldn't even really
74:41 - have to have to check here the only I
74:49 - mean potentially you could probably get
74:52 - around this but for for the normal users
74:54 - not trying to get around it
74:56 - you know that's really what I'm worried
74:58 - about here is giving them useful
74:59 - feedback immediately I think it would
75:02 - work and it might be easier to implement
75:07 - so let's check it out we'll just we'll
75:10 - just try something here
75:24 - there we go here's a file upload ok so
75:28 - right now this is just the text field
75:30 - and it's not the form Z field
75:49 - then you check out
75:58 - let's check this out
76:20 - there we go this is what I'm looking for
76:24 - we could do a custom validation
76:56 - okay so it looks like we can use this we
77:01 - can use this function within validations
77:04 - and do whatever we want to validate that
77:15 - that's it this is exactly what we'll
77:17 - need okay
77:31 - I'm not I'm not really sure either
77:35 - current values in the form
77:48 - oh here we go that may be this is
77:52 - business what one aid I've been through
77:55 - some forest community
78:21 - I think this might be what we need
78:57 - to
79:00 - okay
79:03 - all right let's try this
79:04 - [Music]
79:17 - so I'm not
79:23 - I'm not a hundred percent sure but I
79:26 - think that this would be the best thing
79:30 - for us to use so let's try it out on our
79:37 - multi-line
79:44 - here we got validations and then let's
79:50 - get it
79:54 - Haitians error
80:12 - let's just try this just to see if we
80:16 - get the air which we should
80:28 - now we're not knocking the air
80:42 - oh I didn't switch it to form Z
80:45 - component okay so it just needs to be
80:48 - form Z text all right I probably need
81:05 - but see if it works mmm not working what
81:13 - am I doing wrong here Oh name is mark
81:20 - this required okay so we need a name
81:45 - let's see if that
81:55 - okay does not have the validation rule
81:59 - is in
82:06 - that's odd we get that from
82:24 - now let's see what this is
82:59 - mm maybe we want to try
83:15 - alright let's just let's try regular
83:17 - expression then alright so let's go to
83:19 - our server Jess and let's see she I
83:25 - don't really want to I want to match it
83:30 - today's just a values truthful let's try
83:37 - this
83:43 - oops
83:48 - okay
83:53 - nobody should imagine
84:06 - oops
84:40 - all right cool let's see if we can get
84:44 - it to not be an error all right
84:58 - you know what though this isn't gonna
85:02 - work I guess we could do this
85:16 - I wish we could do this and make it work
85:24 - yeah
85:29 - yeah that's not gonna be the answer okay
85:32 - so let me explain I guess I haven't
85:36 - really been explaining what I was doing
85:37 - too much sorry about that so what I had
85:41 - done successfully was useless regular
85:44 - expression to check that the that the
85:49 - end of the string of filenames that we
85:54 - have here contains one of these
85:56 - extensions which is great that works but
85:59 - logically that's not really what we want
86:02 - to do because like you can see here as
86:05 - long as I put a file name at the end
86:09 - that does contain this you know a valid
86:13 - extension I can put whatever I want here
86:15 - so that's not gonna work so that's not
86:18 - what we wanted so you may have to go
86:26 - back to
86:33 - yeah we may have to go back to what we
86:35 - were originally working on so what I
86:38 - wanted yeah actually what I want to
86:41 - check to make sure see if it works is
86:49 - could I just put in true or false
87:18 - if I were to use this and then let's see
87:25 - if we can return
87:39 - return false let's see if we can get it
87:42 - to return the air okay so that returns
87:47 - false automatically
88:03 - okay returns true all right so as long
88:06 - as we return that from that function let
88:12 - me see if I can just return something
88:17 - just return false I can't just do that
88:36 - okay
88:38 - all right so let's just go back to this
88:42 - so now we should be able to just grab
88:51 - the our value from what we were doing up
88:54 - here okay so when we were doing the
89:04 - handle filepath
89:39 - we should be able to
89:55 - let's see if this works
90:02 - let's add let's add something to state
90:26 - I was valid
90:37 - now you know what we have a loop here
90:39 - let me see
90:48 - what we may need to do
91:17 - how's that all right sir mapping over
91:21 - this
91:39 - all right so here's what I'm gonna try
91:41 - to do as this gets looped through if any
91:48 - of the files in here don't match so if
91:52 - it returns false then we're gonna change
92:00 - it and so we're gonna save a value in
92:03 - state and we're gonna either basically
92:08 - if any of them are false then that value
92:10 - in state is gonna be false
92:20 - okay and initially yeah so initially
92:29 - this is going to be set to true because
92:34 - we don't want to show an error right off
92:35 - the bat so true and then we're also
92:46 - going to we're also going to set it
93:12 - let's set it to true
93:19 - this states
94:13 - all right I want to set this to true
94:15 - right off the bat because if the user
94:22 - puts files in there it's gonna get set
94:25 - to false but then if they do it again I
94:27 - wanted to set back to true and then if
94:32 - it checks everything it's going to keep
94:33 - it at true and then within within this
94:53 - I don't want to lock on soullow that
94:55 - anymore what I want to do is so if true
95:16 - I guess now we want to do this is so
95:22 - good
95:23 - [Music]
95:26 - all we want to do is take
95:50 - - beautiful right
96:18 - all right I see Lily have tears yet
96:47 - can I not do that when I said state you
96:50 - see all right so I'm getting an error
96:55 - now I'm trying to do formed up file
96:58 - valid true
97:09 - but I'm getting an error so I guess I'm
97:11 - not I guess I can't do it like that
98:16 - all right so I guess I can't do nested
98:18 - stuff like
98:25 - so let's go with
98:46 - should say
100:43 - okay
101:06 - and
102:08 - let's see that at least get rid of the
102:10 - airs
102:22 - ready
102:51 - I think that I messed something up
102:54 - inadvertently with my syntax let's see
103:08 - so excuse
103:56 - shouldn't have to put this let's see
104:04 - yeah why is it this
104:38 - thank you
104:42 - okay I'm pretty sure my timer went off
104:45 - yeah it did go off I hate to end on this
104:49 - note syntax error but yeah I'm not sure
105:04 - would I not sure what I did let me
105:33 - I'm just gonna take a minute and see if
105:34 - I can fix this if not probably just end
105:39 - the stream and do some more
105:41 - troubleshooting okay all right let's see
106:08 - all right let's see if I can then try
106:15 - this
106:48 - all right see if we get that same area
106:53 - no okay all right that's better it's
106:56 - just I guess it didn't like that I was
106:59 - trying to do that short circuit okay all
107:04 - right I guess I'm gonna go for a few
107:06 - more minutes you can get this working
107:07 - since I figured that out I don't think
107:13 - this is the best way to do it at least
107:14 - it seems like it's a lot more than
107:18 - should be needed but since I couldn't I
107:22 - couldn't set state the way that I
107:25 - originally tried to set state and I
107:27 - actually can't believe that I never had
107:28 - a need to do that before because I don't
107:31 - remember running into that problem
107:32 - before so I'm gonna try to do it this
107:36 - way which is basically the way we're
107:38 - doing it down here already so we know it
107:40 - works
107:43 - [Music]
107:57 - all right so I just want to see what
108:00 - what's going on with a state when we do
108:03 - this now just to test that what we're
108:05 - doing so far so we're gonna check in dev
108:10 - tools react and should be able to their
108:27 - yeah state form file Vela true okay
108:39 - let's try to put in something it's not
108:44 - true
108:48 - all right great so we see file valid
108:52 - went to false now let's cancel it good
108:59 - and I went to true awesome okay so that
109:03 - is acting how we want it so now we have
109:05 - in state this value that goes true or
109:11 - false depending on whether or not the
109:14 - file let's put in is valid great and
109:18 - that's checked against the the types
109:23 - that we have here okay so the next the
109:29 - next step then is to return
109:38 - whoops passed it up there we go we need
109:43 - to return in here in this function let's
109:51 - go return
110:06 - this is another place where I think
110:08 - there's got to be a better way to do
110:10 - this but let's see I'm not even sure if
110:14 - I'll be able to get the value of this
110:16 - here all right let's see what happens
110:35 - I
110:40 - good
110:43 - okay
110:51 - hmm
111:02 - let's check out forms these I'm thinking
111:06 - there's got to be a way to just set
111:08 - instead of having to use this
111:10 - dysfunction there's got to be a way that
111:12 - I can just set true/false on the
111:13 - validation I always I hate to just read
111:20 - documentation on the stream but we're so
111:22 - close to getting this so lol OS is it's
111:30 - almost two hours can we end please
111:33 - because yes that's give the bathroom if
111:36 - you got to go to the bathroom and then
111:38 - come back that's cool if you miss what
111:44 - happens you could always check the
111:45 - replays
111:46 - do I need to include bathroom breaks
111:49 - into the streams if they get long all
111:54 - right let me check quickly here if there
111:59 - is some way to set this
112:11 - see
112:27 - now that's not what I was looking for
113:27 - there's a ballot ATSC
114:32 - well
114:37 - I don't think
114:41 - I think I'm seeing anything validation
114:59 - okay maybe we can add we can add a rule
115:09 - let's see
115:42 - okay
115:58 - maybe this creates add validation rule
116:03 - is the way to go for us
116:28 - oh this doesn't really seem different
116:30 - than what we're already doing
116:31 - it's just extracting it out so maybe we
116:36 - just need to figure out I don't even
116:39 - really need this value value don't need
116:42 - this maybe the problem is trying to get
116:49 - this in here what if
117:01 - I wonder if I couldn't make this an
117:02 - arrow function
117:18 - this work
117:22 - we'll see I'm really not confident that
117:25 - this will work but the only thing I can
117:30 - think of is - why it's telling me that
117:50 - let's see what Canada syntax is that you
117:53 - know
118:08 - whoa that actually did not get me there
118:14 - maybe it'll work alright so let's try to
118:17 - upload something that should give us an
118:20 - error see what happens
118:24 - nice Oh
118:26 - let's cancel it out what's oh man it
118:30 - works
118:31 - let's try to try it with multiple files
118:34 - I don't think we tried that yet
118:37 - great yes without again oh yes all right
118:50 - okay
118:52 - so although I wasn't really confident in
118:55 - what I was doing it worked so that that
118:57 - was the case is that originally how this
119:00 - was written basically we just copy and
119:02 - pasted from from the docs there so
119:07 - that's not what exactly what we needed
119:09 - we needed to be able to have this be
119:12 - what what we wanted it to be so we had
119:15 - to use that error function when we did
119:18 - that it worked so great so half court so
119:27 - basically we have our validation now
119:30 - immediately for the file upload great
119:40 - probably would be cool to have a message
119:48 - I'm thinking like to make this better it
119:51 - might be cool to have the message
119:53 - actually say what file is the file you
119:57 - can't upload but for now it works I mean
120:00 - this is entirely functional and does the
120:04 - job as is but it can definitely be made
120:08 - better well I'm happy I got that working
120:12 - because us starting to think I would not
120:16 - get that working before the end of the
120:18 - stream
120:19 - alright so streaming a little bit longer
120:22 - than I that I thought okay so John B
120:27 - just paste it in here a possible error
120:33 - so the error file type xcf not supported
120:36 - yeah that's definitely that's that's
120:38 - like what that's exactly what I was
120:41 - thinking so yeah I think that's possible
120:44 - I'm not gonna try to do it right now
120:46 - since streams already been two hours and
120:49 - to be honest with you I'm just I'm
120:52 - really exhausted I'm I guess at the
120:54 - beginning I'm not really feeling well
120:56 - and this these dreams take a lot out of
120:59 - me cuz I try to at least seem like more
121:02 - energetic even if I don't feel energetic
121:04 - and that that effort alone takes a lot
121:07 - of energy so alright so what I'm gonna
121:13 - do now is I'm gonna scroll up a bit and
121:15 - try to see if there are any questions
121:17 - that I missed fire Scott says thanks for
121:20 - the stream you're welcome Thanks thanks
121:22 - for watching and being involved in the
121:25 - live chat so yet if you are just here
121:28 - for the code then and you got to go
121:32 - totally understand thank you so much for
121:34 - watching and I should be back tomorrow
121:37 - unless I feel even worse than today and
121:39 - then I might take a day off but
121:46 - otherwise if you have any questions
121:48 - please put that in the live chat now I
121:52 - don't think there's a ton of questions
121:53 - in the chat so it'll probably only take
121:55 - me a few minutes to get through and when
121:57 - I get through everything then we'll in
121:58 - the stream feel free to ask whatever you
122:03 - want if you're if you're new don't be
122:07 - afraid to ask something you know really
122:10 - any questions even if it seems really
122:12 - basic is totally fine with me try to be
122:16 - really beginner friendly in here okay
122:41 - I was just I was reading some comments
122:45 - about the person had hitted the bathroom
122:49 - so that's why had a little laugh there I
122:51 - don't think I'm gonna repeat him more
122:52 - yeah okay John B I just saw your comment
123:01 - about the right-hand braces way on the
123:03 - right thanks for that I didn't notice it
123:05 - at the time but that was definitely one
123:08 - of the errors that I got there so thanks
123:11 - for noticing that that was a good catch
123:14 - I didn't even notice it at first fire
123:18 - Scott says hey you could just move your
123:20 - logic with file valid inside this custom
123:23 - validator so you get rid of external
123:27 - file valid and your component will be
123:29 - compact okay I could check that out
123:35 - I'm not a hundred percent sure what that
123:40 - would look like right now I'd have to
123:42 - check with the code but thank you for
123:47 - the suggestion I'm definitely sure this
123:49 - could probably be refactored to be
123:51 - better usually that's how it is when I
123:53 - cut things on the stream I'm trying to
123:55 - go quickly so I don't usually even make
123:59 - an attempt at refactoring anything so
124:03 - actually that's a good disclaimer so
124:05 - just so you know especially if it's
124:08 - starting out the code that comes out
124:10 - during the stream is probably not like
124:13 - ideal all the time but usually it ends
124:17 - up getting better as we go on so either
124:19 - somebody submits a pull request and
124:20 - refactor it or if I get a chance I
124:22 - refactor it later on so the finished
124:24 - product is usually what you'd want to go
124:26 - with but I often I think the stream
124:29 - would be really really long it's already
124:31 - pretty long but it would be really long
124:33 - if I tried to go back and refactor
124:35 - everything so just kind of be aware that
124:39 - there's probably a better way to do a
124:42 - lot of the stuff that I do during the
124:44 - stream
124:48 - Oh Rory said something's going on with
124:51 - free code camp can't get online okay I'm
124:54 - not sure I haven't tried to get on a
124:56 - free code camp yet today and I don't
124:59 - have anything to do with the free code
125:01 - camp website or the servers so I'm sorry
125:03 - I can't I can't give you an update on
125:04 - what's going on right now I would check
125:07 - check the free code camp Twitter because
125:10 - they're usually pretty good about
125:13 - putting out some sort of message on
125:15 - Twitter as to whether if something's
125:18 - happening and when you can expect to get
125:20 - back on so I would check there hopefully
125:24 - there's some type of update on their
125:26 - Twitter
125:36 - I breathe
125:41 - bright it looks like Brian I'm not sure
125:43 - to pronounce that so it looks like Brian
125:47 - O'Driscoll says hi guys joining the
125:49 - party a bit late but I can catch up on
125:51 - videos repeats Jessie you're on a roll
125:53 - today Thanks
125:58 - yeah it was it was a struggle for a
126:02 - little bit but we got it working so
126:07 - thanks a couple feels saying I thanks
126:09 - thanks to the shame you're welcome thank
126:11 - you so much for being and watching
126:17 - Umberto's says I definitely understand
126:20 - using so much energy during the stream I
126:23 - finished recording my first official
126:24 - video last night 1.5 hours of recording
126:27 - and found that the screen capture didn't
126:30 - oh no this is Ola I recorded a silent
126:35 - version of the work I did that thinking
126:38 - I'm gonna do a voiceover okay well
126:40 - that's cool man that that stinks when
126:45 - you record stuff in a doesn't work I am
126:48 - a few weeks ago I was trying to record a
126:51 - tutorial video for a client and it was
126:54 - really late and I was like yes I'm
126:56 - finally gonna get this done it's the
126:57 - last thing I have to do for this client
126:59 - and then I checked and I had my settings
127:02 - way off and the video quality was just
127:05 - so terrible you couldn't even read
127:06 - anything and I still haven't recorded it
127:11 - I was just like so let down by that eyes
127:14 - and I haven't really had time to get
127:16 - back to it alright so it looks like one
127:21 - more question so Alexander asks what's
127:24 - the purpose of the use folder so it's
127:27 - probably hard to see cuz it's so small
127:29 - over here but in my project I have
127:32 - things separated out so I have a Styles
127:34 - folder a components folder and I have
127:36 - this views folder the purpose of the
127:38 - views folder is basically that each
127:40 - component in the views folder acts like
127:44 - a page in the in the actual
127:48 - so you can see the names of each of the
127:51 - views components corresponds to the name
127:54 - of a page so this is the service request
127:57 - components we have a home component I
128:01 - think we have a home component a logo is
128:03 - component so so that's what the the
128:08 - views that used to so each component of
128:17 - the use filter is a different a
128:19 - different view so hopefully that makes
128:23 - sense you certainly don't have to
128:25 - organize it like that I just I just do
128:28 - and I was kind of used to it from when I
128:30 - use next j/s each you know they did
128:36 - their routing based on the components so
128:40 - I guess I kind of carried that over from
128:45 - the last project I did using next of
128:49 - having a component for each each for you
128:52 - separate it out you know okay
128:57 - all right well it's a white knife says
129:02 - hi hey how's it going thanks for
129:04 - watching
129:11 - okay awesome uh-huh I got the name right
129:15 - from earlier well I got it right the
129:20 - first time so it's Bree and then I think
129:26 - that we're saying all right
129:31 - I'm definitely gonna I'm gonna end
129:35 - things now I'm getting really tired so
129:41 - thank you so much for watching I'll be
129:45 - like I said I'll be back hopefully I'm
129:47 - feeling better tomorrow and I'll be back
129:49 - I'll be back into work and I could do
129:52 - hopefully be a little bit more with it
129:55 - during the stream but took a while in
129:57 - the end we did get it get working what
130:00 - we wanted to get working so we do have
130:02 - form validation on on everything we need
130:05 - to on our form including the the upload
130:10 - the file uploader so so it's looking
130:14 - pretty we're pretty close to having to
130:18 - having this finished up at least
130:20 - finished up enough to get some feedback
130:22 - on and make some changes before we
130:24 - actually launch this thing so I just got
130:31 - two more questions let me do this real
130:33 - quick since I got two more questions
130:37 - here so zachary says hey could you make
130:39 - a discord jst toriel series I don't
130:44 - really know anything about it so if I
130:46 - learn about it then I could definitely
130:48 - do to Touro serious I guess but right
130:51 - now I don't I don't know enough to be
130:55 - comfortable to learn the tutorial and
130:57 - rich-rich bob bob says sorry I'm getting
131:01 - that wrong I'm pretty sure I get that
131:04 - name wrong but says why is Ubuntu better
131:07 - than Windows I don't I don't really I
131:13 - don't really think I'm I can give you a
131:16 - great answer for that there's so many
131:18 - factors that go into choosing an
131:20 - operating system
131:22 - if you're thinking about it for an OS
131:25 - for like a desktop OS potentially it
131:28 - could be for servers as well they
131:29 - windows server but right off the bat
131:34 - Ubuntu is free so that's one reason that
131:37 - I would think it's better but it totally
131:39 - depends on what you're trying to use
131:41 - them for as to whether or not one would
131:43 - be better the other so anyway sorry I
131:48 - couldn't give you a better answer for
131:49 - that but I think that would be a better
131:51 - question to kind of debate and get some
131:53 - more feedback on but right now we can't
131:57 - have the debate so maybe ask that
131:59 - question again towards the beginning of
132:00 - the stream and I'm sure you'll get a lot
132:02 - of answers from everybody in the live
132:04 - chat all right so this time for real I'm
132:08 - going to end the screen even if I get
132:09 - more questions I'm going to end it thank
132:12 - you so much for watching and have a
132:15 - great day

Cleaned transcript:

hey everybody its Jesse and I hope everyone had a good weekend and if you're in the in the US I hope you had a great long weekend I am I'm back to work not quite as rested as I'd hoped to be my youngest two children were very sick all weekend so spent a lot of time taking care of them so I'm not feeling that that great myself so I'm gonna try my best to to focus and be upbeat even though I'm a little bit out of it so I apologize in advance from just a little bit a little bit off today if stuff we're working on today should be a little bit easier especially because we have a pull request from Sebastian that already did a lot of the work so the first part of this is going to be reviewing what was done in that pull request so this would be kind of a nice overview if you've never done form validation on the client side with react and that's what we will be working on today so I think I put that in the description and on my tweet but if in case you didn't didn't read it actually it's in the title as well but just to kind of explain if you're not familiar with it when you go to a form as I can demonstrate so I type in something like that and then immediately I'm told that's not a valid phone number that's what we're talking about just validating the fields so we've already implemented some things on the client side to check to make sure we have the right data mostly for the for the file upload but we also want to give the user a me get feedback right we if we just relied what's I said when it when it comes to forms right if you just rely on serverside to do all your form validation that's not a great user experience it's secure in terms of not letting in you know bad things into your server that can mess it up but the user has to wait you know they hit submit and they have to wait for a response from the server to let them know whether or not you know that they put in the right information so and if they hadn't then most likely they're gonna have to redo you know everything again what if they don't get a response back immediately say this for whatever reason the response is delayed they could think that they've submitted the form and everything's alright and not realize until later on that it's not alright so you can see like that's not the best with the clientside you get immediate feedback like we just saw which is great for a great user experience I immediately know like oh wow that's not a phone number you know definitely not a valid phone number there so that's nice but there's ways to bypass that and still submit you know let's say this as as a phone number so the best best thing we could do is to have validation on the server side and the client side so today we're gonna check out how to do that on the client side with react if you're using something else like not let's not react you know you just have a plain HTML form using some vanilla JavaScript or jQuery or something then this isn't it's not gonna apply you know exactly but there may still be some things that are worthwhile to see that that you could pick up from this so I'm gonna say how'd everyone in the live chat before you started hey everybody that's cool and I guys see some I think I see some new names in there so welcome so Jacob said appreciate all these videos thanks I appreciate you watching and saying that okay so let's let's get started with this I'm gonna set my timer we're gonna go 25 minutes of kind of coding while explaining and coding and then I'll do five minutes and go to the live chat catch up with any comments or questions that you may have in case you're interested what's that react is the library not a frame did I did I say that somebody commented cast commented react as a library not a framework yeah if I um I don't really remember saying it so maybe I said it was a framework but anyway yeah I mean sorry if I if I said that in the in the wrong way to be honest with you I'm not even sure what the difference between library and framework would be like semantically so hello okay now I see it wasn't me it was further up in the live chat that you talked about framework okay sorry about that I didn't catch that immediately but anyway yeah I'm going to tell you the truth here framework and library thrown around like interchangeably and I'm probably guilty of that as well I don't really think about it when I say that but I'm not entirely sure of where that what the definition is of each and where that line is where something falls into a framework or a library so if I use them interchangeably I'm sorry I don't I don't mean to be confusing about that but I myself as some somewhat confused about that definition but in any case we're gonna learn how to do some stuff with react regardless of what what category it is so but I'll do my best to try to remember that react is a library let's see I don't know why I've troubled with react I don't really call jQuery a framework ever I think I'm pretty sure I called a library all the time so just have to get that and in my head alright so let's go ahead and start out oh I do want to say for for anyone watching on Instagram check out the free code camp YouTube channel if you want to see the code for this it's being live streamed right now if you're watching later on though the recording will be available and then the code is also available on github you can get the link to that in the in the YouTube video this particular video is titled something it's clientside react form validation so you can check that out if you get a chance all right so let's let's get to this so you can see already how this works we have similar things going on with email we also have some some things going on with our file upload so let's let's see how we implement this first of all so let's go to our package JSON file you see we're using form Z in particular forms he reacts but also forms a material UI which is it's pretty awesome that they have that that makes things a lot easier I'm gonna say again I said at the beginning but I want to say it again so everybody knows that Sebastian did pretty much pretty much all the work actually Sebastian has done all the work for this so far I don't think I've changed anything for this yet we'll probably add to it today but Sebastian has done all this in a pull request so I want to give him credit giving for that and let's see so we want to load these two and of course these are available on github to check out the documentation but basically the forms EEGs is going to do check the validation so we don't have to write all that ourselves and then because we're using forms of material UI it integrates well with material UI which we're already using and as you've already seen it fits well we do have some weird things going on here with spacing below here which we can work on that later on it's not I mean it doesn't break anything it just looks a little bit odd there's a lot more space than we really need there but other than that it looks really nice with with material UI okay so we'll just start at the beginning of our service request J s component and this is the component that handles pretty much everything on this page so we've brought in there we go let's try to figure out where we brought informed you so we're importing form Z and we're importing form Z text and forms the check box so this will come into play a little bit later on but we have our file extensions here so these are the types the file types for a lot of the things that we do want to allow I'm gonna have to double check this list and make sure it is everything but so far it looks from from just looking over it it looks like this is everything that we do when I accept all right so let's let's scroll down to where we're actually implementing some of this so if we check out here we go all right so we have some extra things here that we didn't have before so our validations right in our validation error but if I should do this I guess I'll do it right now I was thinking it might be easier to see what's changed if we just go from the if we go back to the commit where this was added actually that might be yeah that might be the best way to do it yeah let's go back so for the part at least where I just want to show what we've done so far I think it will be best if we just can see the difference in github so I guess then go back to the original pull request okay so we've already checked out the package.json I'm gonna have to make this a little bit bigger I'm sure it's hard to see well that's that's a lot bigger okay yeah yeah okay this is what we want to look at so okay here we go so there's some other stuff that happened in this pool request so that's why I skipped over a lot because it's not immediately related to form validation okay and I actually did miss this going through on our originally when I went through so we've wrapped everything in a form Z component so I'm glad I did this because this is obviously a key thing that's dismissed so we've wrapped everything in a form Z form component okay so the you know the actual structure has changed a bit and so on valid submit that a lot of this is if you want more indepth stuff you can check out form Z on github but a lot of it is worded in a way that it's really self explanatory so if the valid submit we just handle the form data alright when it's when it's submitted which this is you know we've already worked on that in a previous previous stream if it's invalid then we notify form error so there you go so when we notify form error we just are opening up a dialogue so a modal is coming up and I guess I could demonstrate this so let's try to so this is obviously not right let's try to submit okay so please fill out this field you can see that the tooltip comes up please felt this field and actually I think I had mistakenly said that a modal comes up it's not it's not even old actually this this does seem like yeah that does seem like that would throw up the same modal as if we actually had like a form error come back from the server but the thing is this this probably won't fire if we have the fields like this right because it's going to come up with that tooltip first so within our form Z component right we have form Z text which is obviously for a text field and so we have a lot of the same things as we had for our original material UI component so we are floating label text right name value so mostly the same stuff but we've made this field required right so if we want to submit I'll get rid of these so we don't get errors from that but before we could have just submitted this just like this but now right it will not let us submit which is nice because before on this the live version of this which is basically done with just jQuery to make something required would have actually required a bit more code than that but now to make it required keep going over the wrong screen literally all we have to do is just put required rights so pretty easy now and then for our validations we just have the field type in there so we're pulling in let me see if we're pulling in the data we have it so we now have a data file but we may not actually be pulling it in yet let's let me doublecheck okay we are at work we're pulling in that data and you're great so let me show you that file then because I have it up here anyway I did have it up to make sure I stove it up there we go okay so now we've we've removed the data a lot of the data into this file and by we I mean Sebastian but so you can see right we have the name we can put required true in here that's why when we were pulling this in then I'll just show you on this screen since since we're here since we're pulling this in what we're iterating over this data and you know we're not directly obviously putting in true or false we're pulling it from here alright so if we wanted to make it required we just changed the data here in our data file and we actually put in the error message as well so that tooltip that comes up we have control over what it says we also have control over the type right so we've said this is email this is alpha right so we don't want any any numbers or like weird characters in the name so this is just going to be regular letters right for our phone number we just want numbers so is numeric and then for Department we want to allow both letters and numbers so we say alphanumeric right so as I said earlier it's it's really nice the way this is set up because everything is pretty straightforward so that's our our single line the multi line set up it's pretty much the same way so we go go form Z form Z text again all right so it's the same one but we're gonna say what are we gonna multi line somewhere in here we got to say it's multi line I can't see it right now that's actually weird so I'm pretty sure with the with the original material UI components we had to put somewhere in here that it was multiline maybe I'm just not seeing it right now obviously it's working right we can see we can see that this is actually using one maybe it's not hey let's fix this right now so I did have these as multiline but it looks like it's not letting me make this multiline so let's check out form Z which I think I have up on another window so there we go so if you can't tell already I'm actually reviewing this live so as we're going over this I'm reviewing I I was working on something else today and kind of saving this for for the stream so I expected that I would find some things that I wanted to change so here's the first thing let me make sure this is formed oh I'm looking at the wrong thing I thought I had formzee up already but I guess it didn't alright let's move this over because that's not what we need I think we have a link to whoops conversation Sebastian included a link to everything there we go so we're gonna check out formzee material UI I guess we'll just check out regular formally okay okay yeah that's weird actually I want to try this obviously you could see as I was scrolling through there wasn't anything there that was describing what to do so what I'm gonna do here is just check actually it'll be faster just do like this let's just check out what it was before for a multiple inputs multiline okay so we just had to pass a multiline and that was it so let's try to pass multiline and see if it works I think it's worth it to try that out because if it works it'll save us a lot of time and trying to find out the answer there we go all right awesome okay I'm glad that works so basically if you want if you want to use form Z text and make it multiline you just add multi lines so just like the normal material UI component okay great so now we have our multi line components but it works the same way in terms of validation right we we could put our own custom error message and then we can put our type for all of these it's gonna be it's the oft America afternoon the project budget we've put numeric this we may we may change this field I'm gonna leave it like this for now but we may change this field we're having some basically for the budget we could put in some people put in a budget code for their department some people put in a dollar amount but it's potentially people could describe what their budget is because it could be contingent upon other factors so we may want to switch this to it's alphanumeric but I'll need to check I think I mentioned last week that so this week I'm gonna make a server and I'm gonna put this up and it's going to be live and then other people in my department can test it out at that point I'll get some feedback on how we want to change these form fields and this is one of the ones that that may change okay so great you can see majority of these are just gonna be alphanumeric that's probably what you want normally when you have a multiline input because why would you want a multiline input of just all numbers right you would normally wouldn't need that okay so these are our all our text fields with the validation like that's that's really easy validation so I know I've I've tried to do my own validation before usually with jQuery it's so much harder than this I really appreciate how this is done so much so much easier I don't think we have yeah we don't even going on for the date picker which is fun for now I'll have to check and see what how you're how you can do date picker I'm assuming that you can validate date pickers with formulas we can check on that in a minute once we finish going through was here already normally if you would just use the date picker as is it's gonna format the date correctly but potentially you know I guess someone could try to enter in their date disabled I know just in case somebody has a way to try to enter in their date manually we want it to be in the correct format this is not going into a database or anything so I'm not worried about you know the exact format coming through but it needs to be readable and makes sense and the Dayton this may end up being a required field as well okay so for our file input we have accept and then that's where these file extensions extensions come in but we want okay so what I need to test out is the extensions so I need to try to upload something that doesn't fit any of those extensions and see what happens all right let me check my time okay we got about five minutes so let's test out this file upload because what I was getting before let's think okay it's not letting me accept this it's not letting me let me put in a file let's see with what I'm thinking what happened what I'm hoping will happen is that it will also alert me so let me see if I can there we go so let's say I do that so me right away you know it let me know that I couldn't use that but let's say I switched all files when I try to do something like this I want to see ok nothing happens yet let's see if it it's gonna make me fill this out there's all this requires ok let's see no I don't want my address all right I didn't realize that all these is required is everything required right now oops alright let's just fill out everything okay so it looks like nothing's happening on that file input so let me check out I want to make this a bit smaller because it's hard for me to read with it that big hmm maybe it just doesn't have this let me scroll through quickly if it doesn't have anything for this I guess we'll just skip over for now actually whoops there it is I'm looking here's the API reference this is what I'm looking for okay validations all right so I'm not seeing anything about file input in here so for now let's just just skip ahead all right and that's my five minutes so let me go let's set my um let's set my timer we'll do a short break five minutes I'm gonna go into the live chat which looks like there's a lot of activity in the live chat so I'm gonna try to get through everything in five minutes then we'll go back to it I think I think for now I'll skip over that file upload and then I'll show what's going on here with this check box and then we can go through and alter some things I definitely don't want everything to be required right now if we have time we can come back to the upload files what I would like to happen is that if someone tries to upload something that's not supported it immediately tells the user that it's not supported all right okay see text editor looks amazing current use brackets do you recommend Adam as a better text editor so the question is do you recommend Adam as a better text editor better than brackets I've never used brackets so I can't make any comparison between the two I like Adam have been using Adam for years I've also tried Visual Studio code I like it it seems really fast I'm happy with Adam but I think there's a lot of good alternatives so I would be fine recommending Visual Studio code as well the only reason I don't use it right now more than I already do is just because I have so many packages already set up with Adam and you know my syntax highlighting you just get used to it a certain way and I just haven't taken the time to set up visual studio code in the same way but you know if you're not happy with your current editor then Adams you know Adams a great thing to switch to the only complaint I've heard from Adam is some people say it slow I haven't really had a problem with it being slow for me I it probably also depends on your machine you know and how good your computer is I'm I'm on an iMac right now that has you know pretty a pretty decent amount I think I'm running like 32 gigs of ram or something that's a lot so I don't really have problems with it but if you'd notice if you use Adam and you notice that it's a bit sluggish then I would recommend maybe going with Visual Studio code because it it does seem faster to me at least in you know a little bit that I've used it but there's a lot of other good editors I've heard good things about sublime people that use vim seem to really love them I haven't taken the time to learn that yet one day I'd like to mess around with it and see if I could learn it there's what else people people who use Emacs really love Emacs so I guess I can't I've never even attempted to use Emacs so I can't speak personally about it but but I I feel comfortable saying you know Adams worked well for me and I like it I don't know if it's the best or not but it's it serves its purpose well for me okay so let's say there's some discussion about the react license and so I'm not yeah I'm not necessarily I don't think there's any questions in regard to that let me doublecheck yes I don't think they had any questions directly for me but just in general there's been a lot of controversy over the react license from what I understand and this is also reiterated in the live chat is that there's something in the license about giving up the right to sue Facebook if you're using react or I think there's also some other Facebook code that is licensed in a similar way based like you can't sue Facebook if you're using that so I'm not sure about the details I'm not I'm not a patent attorney I'm kind of lawyer so I don't really know but it seems to me like it's in most cases this is just my take personally on it so you know check it out for yourself but it seems to me that in most cases you wouldn't really need to worry about it I'm not worried about it for for what I'm using it for so I think it would just depend on your use case your company you know who you're working for so but it's definitely worth I think you'd begin to check it out understand what's going on before you use react in a larger project I think it's still fine to use it you know certainly on you know small side projects things like that it at least from from what I have heard it should still be fine for most people alright I'm just scrolling through the last a little bit here in the live chat before we start up again there's some mention of potentially using preact or view j s as an alternative i think someone mentioned angular as well okay I'm gonna go I'm not gonna be able to get through everything because there's a lot of stuff in the live chat right now I'll check it back after the next 25 minute session it looks like somebody asked about knowledge of react in regard to this stream so yeah it definitely it would help to understand what's going on if you had some knowledge and react but it just depends on what we're working on so sometimes we work on even though it's a react project sometimes we work on parts of the project that don't have that much to do with react so you don't need to know react to understand what's going on a lot of it is just regular JavaScript stuff or sometimes we're working on you know the server which we're using node for which is more JavaScript and so it kind of just depends on what we're working on today some of the stuff is I would say probably most of the stuff today is more unique to react but not unintelligible to someone who hasn't used react okay and let me I was gonna write down where I where I'm leaving off that but I can't seem to find a pen so let me bring up my node I've been using Google keep for notes lately so I'll just write down the timestamp of where I'm at in the live chat in keep since I can't find a pen all right oh cool a my said I said hey Mark how's it going alright let's go back to this I've already taken up more than my five minutes of time okay and you have to excuse me for a second I my first really it's hurting today of a mouse getting dry I need to stop and take a drink here okay okay so the last thing that I want to go over before we really start getting into it and making some changes is this checkbox here so we worked on this earlier by earlier I mean maybe a few weeks ago in a stream but we want people to read the planning guide first so you can see this is completely disabled so I'm clicking this right now nothing's working it's grayed out until we check that now you can use that so I kind of like how this is I may add I think it'd be nice to make the cursor change and maybe a tooltip come up that says you know hey you got it you got to read the Planning guide something like that yeah I'd like maybe to give some indication to the user if they're confused as to why this isn't working that they need to check this first but other than that this is working as as expected so not only is this a required field but you know goes even further that it completely disables the submit button if you haven't checked it so let's check out how that's done we'll scroll down to the bottom here so we have here we go so we've used the formzee checkbox component instead of the normal checkbox and obviously you know we've added required we name but we've also see and this may not be related to form Z this may be something that Sebastian did on his own I suspect it is something like that and I don't think he's in the lab chat so I don't think you can verify that but I'm pretty sure this is something he did on his own but it's it's a nice feature so we'll go over it because it is you know we're validating that this is checked so let's look enable submit so basically on change we're enabling submit so let's go up and check out that function enable submit okay so if it's checked we're gonna set the state the can submit state to true if we're unchecking it we want to set it to false all right so pretty simple and we could see by default it's false and then let's check our submit button here we go okay so we have this disabled property and we're just checking for if we can submit and you know we want to do the opposite right so if if it's can submit is true we want this to be enabled right so that's why we're doing the opposite so if can submit is true then this value is going to be false and if it's not true right so if it's if it's unchecked and it's not true then it's going to end up registering as true so disable true right so pretty straightforward I really like how Sebastian did that it's just it's so simple I mean it it gets the job done it's great so that's basically all we have going on right now for form validation so what I want to do now is I know there are certain things that are not going to be required see yeah let's let's just put in false for some of these and then that way if we need to go and test the form later on it'll be a lot easier primary target audience I'm gonna say false for a lot of these now I'm gonna say false now but that that's likely to change my goal now that I look at these I kind of don't really like how they're a lot of how they're worded but I'm not gonna change anything right now because initially when I did this project two years ago I think yeah I think two years ago I started this project not this particular react project but the the version of this that's live right now that was done with jQuery it's basically kind of it's common like a single page application but just on the jQuery to handle all the different views there was a lot of debate as to what these form fields would be and how they would be worded so I'm not gonna just change anything on my own without checking to it was a big deal that's what everything what it all said I'm gonna leave the description as true we need something to go by so when it need the description the Department I'm gonna leave it as false right now just for the sake of testing the form that will probably end up being true phone email I'm gonna go with funding Falls but I definitely want an email and if we make the email required then this would be better so on the server side we're sending an email and I want to send an email to the user so I don't really even want to have to worry about there not being an email obviously I'm gonna I'm gonna have some type of default if we don't get an email because someone could circumvent the clientside validation but I'd like there to the user to put in an email so that we could send them an email verification and get a hold of them later name required let's um let's format this in the same way as the other ones there we go okay name sure and we want the name to be required as well let's get onions check out these checkboxes okay great so I'm gonna say that so here's what I'd like to work on now let's see if there's a way and we may have to do this on our own and not use forms a which is fine but it's assuming that that form Z does not have a way to do this on file uploads what we need to do then is unchanged since probably since we already have we already have a non change handler let's just do this in our own change so when we with the handle file path we're gonna need to check the file type against these extensions and then display something to the user if they're if they've tried to upload something that's not on the allowed list all right so ok let's check out this handle filepath so that so she'd be able to get let's let's see if we can get I'm doing this the wrong way let's see files the so with this I think we can go I want to see if we can get the type right from here so what we're doing here then is as we can see here we have this files object that we get back from our our upload field and we can get the name of the file off of it I think we can get the type just by doing tight but I want to double check my console logging I actually have two different ideas right now since we have all those types I want to use those so if we can get the type and it matches up with the with the format of the types that we already have saved here then that would be great otherwise I'm gonna grab the name and then get the file extension from the end of the name and then we'll go to our server j/s and we have a list of allowed extensions there we can copy that over and use that either way will work so probably won't matter what what we do there it's gonna work file is not defined well not defined oops file snaps area okay let's check out there's our consoles let's try to upload some stuff there we go okay so we are getting the file type I'm interested to see what the type is what type that says when I do this there's not xxe okay great so we are getting what we want from here so we will be able to work with what we already have let's see I want to see what format we have this in okay this is just a string all right that's fine we can work with this drink all right so let me let me take a step back and just explain what's going on here especially if there's someone who's kind of a beginner or doesn't really understand some of the ex6 stuff or file upload stuff so there's a lot of different things going on here that you may not have been exposed to so we're going handle file path we're using arrow functions so this is just a function and as a parameter we're passing in the event they were using the arrow function the main advantage to this other than being concise is that it binds this and in a way in react that we want this to be bound although I don't even think yeah we are sorry you see here we're using this set state if we use a regular function and try to call this set state I don't think it would work yeah we would have to bind this somewhere else if we wanted to use the regular function so in particular we'd have to bind it in a constructor why not I'm not going to go into that right now we've talked about that in previous streams so anyway I think an arrow function here is the best way to go to accomplish what we want to do in as few lines as possible but if you're not familiar it's just a shorter way of writing a function so for our purposes we really just need to know what's going on here right now so we're getting so we're setting this constant as files and any time you see Const or let think variable okay there's there's some things going on with scope and mutability whether you want to use costs or let but it's just another way to make a variable so we have this target dot files right so our event target that we've passed in the event all right and we're just grabbing the files from that okay so now we have an array of files and I might be easier if I console.log what's going on here let's do that let me put in some console logs I think it'll be I usually get things a lot easier if I can see it so let's type let's put in console let's just put in an event for nought and I think we should be able to see everything we need to from that so let's try to upload multiple files here ok great so we have ok so here's our event right and we can access target let's see if we can find it I was gonna be getting in here so I've been targeted files I'm not gonna be able to get this hmm I might have to go down another one let's go let's get event.target okay so here we go our event target is simply our input right so we're selecting our input and then we're getting our our files off of that so one more time I'm going to change the files there we go so now you can see what we're getting we have an object and we're getting our files and then we have some values from there all right so we have our name and we have our type right our file size so we have a lot of useful values in here especially useful for a validation so that's what we're getting right and that's what we're we're doing here I guess just to show you the difference of what's going on here let's throw this there we go this should hopefully be the last time we need a console.log for demonstration purposes alright so you see before we had an array now we have or before we had an object now we have an array of objects right so that's just for the purposes of being able to iterate over it using map over we're using here alright so that's all we did there so now we're already grabbing the file names and we're using that to display so we're not using the default upload field that's just the default HTML field because it's not pretty so since we're using something different these are two different inputs this is a multiline input and we're actually grabbing the file names from our upload input and then putting them into this field here that's why we need to do that but it's nice that we're already doing that because a lot of the stuff we need for validation is already written out so now what we're gonna do is we're gonna grab that type which we've been console logging already and let's get rid of this we don't need it anymore so now what we need to do is check every for every file we need to check the type and make sure that that type is included in our list of allowed file types if it is then we're not gonna do anything it's just gonna go through as normal if it's not then we want to show the user some feedback so for now let's just get it get the check working then we'll decide how exactly we want to show the feedback to the user I just saw Praveen in the live chat just as is it react yes yes it is react Jaso let's go with and I'm gonna I'm gonna have to check the syntax on this because I always get it wrong actually I could just check in server dodge is because I've used it so here we go all right match use match you don't really need match like this yeah we can use this so yeah let's use this I was just checking because I can never remember the order so you can see the difference between with match we put in first like the name of the file and then we type in like what we want to match it against with test its opposite first we have our list of what we want to match it against and then we have our our individual value so I just wanted to double check head so that's what we're gonna do so we want to do is actually let's let's console log this console of this for now so we can see if it's working so for this we want to do our then I don't remember what the name is there we go our file extensions list actually no this isn't how we want to do actually we do want to do this a little bit different from we are doing so I forgot it again sorry file extensions and then alright let's see what it does I think I'm confusing myself Asst which one goes where but let's just check it out for now whoa hmm yeah I think I put that back okay the shad is done now again hmm I don't something wrong let's try it with match and I may have to switch it around okay okay this will work I don't know what I was doing wrong with tests but this is fine this or two so you can see we're getting values all right so in this case we're getting an array if it matches if it doesn't match for getting null so an easy way to check this it's just so we'll go you see where my if it is let's see dot length is greater than zero then actually let's just return this I was just math linker is here this should be sufficient oops oops Cantrell active no okay all right so they are getting true there let's just change it then and say all right this should give us what we want books okay there we go that's what you want so we tried to upload two pings and then one xcf file so we got two trues because things are on the list and then false because xcf is not on list so that's the behavior that we want let me check my timer did that go off or did I just forget to set it let me see what time it is no that definitely went off okay let's take a short break and sorry about that I just did not hear that at all all right I'm gonna go back to the live chat right now and try to catch up now I'm gonna scroll back up to where I left off see okay we were when I left off that we were talking a little bit about code editors and I was saying that I've heard that Adam is a little bit slow but it runs fine on my machine and Blake said Adam is pretty sluggish on his machine shroo John s which coding software are you using sir if you're talking about my code editor it's Adam if like in general we're for this project we're using react ok kerlick says I just tried Adam code editor and in my opinion it is terrible comparing with brackets okay so yeah I've never used brackets before so like I said I can't do a comparison but but that's good to know well like I said I'm not I'm not gonna switch to anything else right now until I you know if I get some time it let's say I'm in between projects or something and I have time to really try to setup a different editor the way I like then I'll think about switching but for now since Adams working for me then I'm just I'm gonna stick with it alright matt said what are you what are you doing with the image uploads planning on displaying them elsewhere accident no I didn't have any plans on displaying the image uploads anywhere it would be cool it would be a cool feature and this will just go on like the nice to have list of if we have time I'll put it in there but it might not it might not be a bad idea to display thumbnails of the images when they're uploaded that would be kind of nice to do but for now the only kind of feedback the only thing we're doing with the images for now are they're just going to be stored on the server and they're going to be sent to the project management system that we use okay and I've actually got through I've got through to the bottom of the live chat so and I still have one minute left okay so we'll probably do I'll probably just do one more Pomodoro session we'll see how much we can get done with this file uploader and hopefully we can get it finished you know or at least to a point we're kind of displaying something I mean right now it basically works we're getting the result we want we just need to do something visually now but like I said we'll do one more session and then I'll answer any questions that any of you have in the in a live chat there we go so let's start up our session I think what I what I'd like to do I'd love it if we had the same style of let's see so not that one let me see so this I think something like this would be great to have for the file upload or at the very least something like this would work as well so it would it would turn this line red and then underneath it would say that it's not a valid file extension actually all right so I guess here's what I was just thinking I wonder if I could just use the form Z validation on this because this is just a multiline input and somehow give it a white list of file extensions to check then I mean we already have it working for the file pose but then we wouldn't even really have to have to check here the only I mean potentially you could probably get around this but for for the normal users not trying to get around it you know that's really what I'm worried about here is giving them useful feedback immediately I think it would work and it might be easier to implement so let's check it out we'll just we'll just try something here there we go here's a file upload ok so right now this is just the text field and it's not the form Z field then you check out let's check this out there we go this is what I'm looking for we could do a custom validation okay so it looks like we can use this we can use this function within validations and do whatever we want to validate that that's it this is exactly what we'll need okay I'm not I'm not really sure either current values in the form oh here we go that may be this is business what one aid I've been through some forest community I think this might be what we need to okay all right let's try this so I'm not I'm not a hundred percent sure but I think that this would be the best thing for us to use so let's try it out on our multiline here we got validations and then let's get it Haitians error let's just try this just to see if we get the air which we should now we're not knocking the air oh I didn't switch it to form Z component okay so it just needs to be form Z text all right I probably need but see if it works mmm not working what am I doing wrong here Oh name is mark this required okay so we need a name let's see if that okay does not have the validation rule is in that's odd we get that from now let's see what this is mm maybe we want to try alright let's just let's try regular expression then alright so let's go to our server Jess and let's see she I don't really want to I want to match it today's just a values truthful let's try this oops okay nobody should imagine oops all right cool let's see if we can get it to not be an error all right you know what though this isn't gonna work I guess we could do this I wish we could do this and make it work yeah yeah that's not gonna be the answer okay so let me explain I guess I haven't really been explaining what I was doing too much sorry about that so what I had done successfully was useless regular expression to check that the that the end of the string of filenames that we have here contains one of these extensions which is great that works but logically that's not really what we want to do because like you can see here as long as I put a file name at the end that does contain this you know a valid extension I can put whatever I want here so that's not gonna work so that's not what we wanted so you may have to go back to yeah we may have to go back to what we were originally working on so what I wanted yeah actually what I want to check to make sure see if it works is could I just put in true or false if I were to use this and then let's see if we can return return false let's see if we can get it to return the air okay so that returns false automatically okay returns true all right so as long as we return that from that function let me see if I can just return something just return false I can't just do that okay all right so let's just go back to this so now we should be able to just grab the our value from what we were doing up here okay so when we were doing the handle filepath we should be able to let's see if this works let's add let's add something to state I was valid now you know what we have a loop here let me see what we may need to do how's that all right sir mapping over this all right so here's what I'm gonna try to do as this gets looped through if any of the files in here don't match so if it returns false then we're gonna change it and so we're gonna save a value in state and we're gonna either basically if any of them are false then that value in state is gonna be false okay and initially yeah so initially this is going to be set to true because we don't want to show an error right off the bat so true and then we're also going to we're also going to set it let's set it to true this states all right I want to set this to true right off the bat because if the user puts files in there it's gonna get set to false but then if they do it again I wanted to set back to true and then if it checks everything it's going to keep it at true and then within within this I don't want to lock on soullow that anymore what I want to do is so if true I guess now we want to do this is so good all we want to do is take beautiful right all right I see Lily have tears yet can I not do that when I said state you see all right so I'm getting an error now I'm trying to do formed up file valid true but I'm getting an error so I guess I'm not I guess I can't do it like that all right so I guess I can't do nested stuff like so let's go with should say okay and let's see that at least get rid of the airs ready I think that I messed something up inadvertently with my syntax let's see so excuse shouldn't have to put this let's see yeah why is it this thank you okay I'm pretty sure my timer went off yeah it did go off I hate to end on this note syntax error but yeah I'm not sure would I not sure what I did let me I'm just gonna take a minute and see if I can fix this if not probably just end the stream and do some more troubleshooting okay all right let's see all right let's see if I can then try this all right see if we get that same area no okay all right that's better it's just I guess it didn't like that I was trying to do that short circuit okay all right I guess I'm gonna go for a few more minutes you can get this working since I figured that out I don't think this is the best way to do it at least it seems like it's a lot more than should be needed but since I couldn't I couldn't set state the way that I originally tried to set state and I actually can't believe that I never had a need to do that before because I don't remember running into that problem before so I'm gonna try to do it this way which is basically the way we're doing it down here already so we know it works all right so I just want to see what what's going on with a state when we do this now just to test that what we're doing so far so we're gonna check in dev tools react and should be able to their yeah state form file Vela true okay let's try to put in something it's not true all right great so we see file valid went to false now let's cancel it good and I went to true awesome okay so that is acting how we want it so now we have in state this value that goes true or false depending on whether or not the file let's put in is valid great and that's checked against the the types that we have here okay so the next the next step then is to return whoops passed it up there we go we need to return in here in this function let's go return this is another place where I think there's got to be a better way to do this but let's see I'm not even sure if I'll be able to get the value of this here all right let's see what happens I good okay hmm let's check out forms these I'm thinking there's got to be a way to just set instead of having to use this dysfunction there's got to be a way that I can just set true/false on the validation I always I hate to just read documentation on the stream but we're so close to getting this so lol OS is it's almost two hours can we end please because yes that's give the bathroom if you got to go to the bathroom and then come back that's cool if you miss what happens you could always check the replays do I need to include bathroom breaks into the streams if they get long all right let me check quickly here if there is some way to set this see now that's not what I was looking for there's a ballot ATSC well I don't think I think I'm seeing anything validation okay maybe we can add we can add a rule let's see okay maybe this creates add validation rule is the way to go for us oh this doesn't really seem different than what we're already doing it's just extracting it out so maybe we just need to figure out I don't even really need this value value don't need this maybe the problem is trying to get this in here what if I wonder if I couldn't make this an arrow function this work we'll see I'm really not confident that this will work but the only thing I can think of is why it's telling me that let's see what Canada syntax is that you know whoa that actually did not get me there maybe it'll work alright so let's try to upload something that should give us an error see what happens nice Oh let's cancel it out what's oh man it works let's try to try it with multiple files I don't think we tried that yet great yes without again oh yes all right okay so although I wasn't really confident in what I was doing it worked so that that was the case is that originally how this was written basically we just copy and pasted from from the docs there so that's not what exactly what we needed we needed to be able to have this be what what we wanted it to be so we had to use that error function when we did that it worked so great so half court so basically we have our validation now immediately for the file upload great probably would be cool to have a message I'm thinking like to make this better it might be cool to have the message actually say what file is the file you can't upload but for now it works I mean this is entirely functional and does the job as is but it can definitely be made better well I'm happy I got that working because us starting to think I would not get that working before the end of the stream alright so streaming a little bit longer than I that I thought okay so John B just paste it in here a possible error so the error file type xcf not supported yeah that's definitely that's that's like what that's exactly what I was thinking so yeah I think that's possible I'm not gonna try to do it right now since streams already been two hours and to be honest with you I'm just I'm really exhausted I'm I guess at the beginning I'm not really feeling well and this these dreams take a lot out of me cuz I try to at least seem like more energetic even if I don't feel energetic and that that effort alone takes a lot of energy so alright so what I'm gonna do now is I'm gonna scroll up a bit and try to see if there are any questions that I missed fire Scott says thanks for the stream you're welcome Thanks thanks for watching and being involved in the live chat so yet if you are just here for the code then and you got to go totally understand thank you so much for watching and I should be back tomorrow unless I feel even worse than today and then I might take a day off but otherwise if you have any questions please put that in the live chat now I don't think there's a ton of questions in the chat so it'll probably only take me a few minutes to get through and when I get through everything then we'll in the stream feel free to ask whatever you want if you're if you're new don't be afraid to ask something you know really any questions even if it seems really basic is totally fine with me try to be really beginner friendly in here okay I was just I was reading some comments about the person had hitted the bathroom so that's why had a little laugh there I don't think I'm gonna repeat him more yeah okay John B I just saw your comment about the righthand braces way on the right thanks for that I didn't notice it at the time but that was definitely one of the errors that I got there so thanks for noticing that that was a good catch I didn't even notice it at first fire Scott says hey you could just move your logic with file valid inside this custom validator so you get rid of external file valid and your component will be compact okay I could check that out I'm not a hundred percent sure what that would look like right now I'd have to check with the code but thank you for the suggestion I'm definitely sure this could probably be refactored to be better usually that's how it is when I cut things on the stream I'm trying to go quickly so I don't usually even make an attempt at refactoring anything so actually that's a good disclaimer so just so you know especially if it's starting out the code that comes out during the stream is probably not like ideal all the time but usually it ends up getting better as we go on so either somebody submits a pull request and refactor it or if I get a chance I refactor it later on so the finished product is usually what you'd want to go with but I often I think the stream would be really really long it's already pretty long but it would be really long if I tried to go back and refactor everything so just kind of be aware that there's probably a better way to do a lot of the stuff that I do during the stream Oh Rory said something's going on with free code camp can't get online okay I'm not sure I haven't tried to get on a free code camp yet today and I don't have anything to do with the free code camp website or the servers so I'm sorry I can't I can't give you an update on what's going on right now I would check check the free code camp Twitter because they're usually pretty good about putting out some sort of message on Twitter as to whether if something's happening and when you can expect to get back on so I would check there hopefully there's some type of update on their Twitter I breathe bright it looks like Brian I'm not sure to pronounce that so it looks like Brian O'Driscoll says hi guys joining the party a bit late but I can catch up on videos repeats Jessie you're on a roll today Thanks yeah it was it was a struggle for a little bit but we got it working so thanks a couple feels saying I thanks thanks to the shame you're welcome thank you so much for being and watching Umberto's says I definitely understand using so much energy during the stream I finished recording my first official video last night 1.5 hours of recording and found that the screen capture didn't oh no this is Ola I recorded a silent version of the work I did that thinking I'm gonna do a voiceover okay well that's cool man that that stinks when you record stuff in a doesn't work I am a few weeks ago I was trying to record a tutorial video for a client and it was really late and I was like yes I'm finally gonna get this done it's the last thing I have to do for this client and then I checked and I had my settings way off and the video quality was just so terrible you couldn't even read anything and I still haven't recorded it I was just like so let down by that eyes and I haven't really had time to get back to it alright so it looks like one more question so Alexander asks what's the purpose of the use folder so it's probably hard to see cuz it's so small over here but in my project I have things separated out so I have a Styles folder a components folder and I have this views folder the purpose of the views folder is basically that each component in the views folder acts like a page in the in the actual so you can see the names of each of the views components corresponds to the name of a page so this is the service request components we have a home component I think we have a home component a logo is component so so that's what the the views that used to so each component of the use filter is a different a different view so hopefully that makes sense you certainly don't have to organize it like that I just I just do and I was kind of used to it from when I use next j/s each you know they did their routing based on the components so I guess I kind of carried that over from the last project I did using next of having a component for each each for you separate it out you know okay all right well it's a white knife says hi hey how's it going thanks for watching okay awesome uhhuh I got the name right from earlier well I got it right the first time so it's Bree and then I think that we're saying all right I'm definitely gonna I'm gonna end things now I'm getting really tired so thank you so much for watching I'll be like I said I'll be back hopefully I'm feeling better tomorrow and I'll be back I'll be back into work and I could do hopefully be a little bit more with it during the stream but took a while in the end we did get it get working what we wanted to get working so we do have form validation on on everything we need to on our form including the the upload the file uploader so so it's looking pretty we're pretty close to having to having this finished up at least finished up enough to get some feedback on and make some changes before we actually launch this thing so I just got two more questions let me do this real quick since I got two more questions here so zachary says hey could you make a discord jst toriel series I don't really know anything about it so if I learn about it then I could definitely do to Touro serious I guess but right now I don't I don't know enough to be comfortable to learn the tutorial and richrich bob bob says sorry I'm getting that wrong I'm pretty sure I get that name wrong but says why is Ubuntu better than Windows I don't I don't really I don't really think I'm I can give you a great answer for that there's so many factors that go into choosing an operating system if you're thinking about it for an OS for like a desktop OS potentially it could be for servers as well they windows server but right off the bat Ubuntu is free so that's one reason that I would think it's better but it totally depends on what you're trying to use them for as to whether or not one would be better the other so anyway sorry I couldn't give you a better answer for that but I think that would be a better question to kind of debate and get some more feedback on but right now we can't have the debate so maybe ask that question again towards the beginning of the stream and I'm sure you'll get a lot of answers from everybody in the live chat all right so this time for real I'm going to end the screen even if I get more questions I'm going to end it thank you so much for watching and have a great day
